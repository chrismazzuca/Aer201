

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 28 16:19:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79  0000                     
    80                           ; Version 1.45
    81                           ; Generated 16/11/2017 GMT
    82                           ; 
    83                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4620 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataCOMRAM
   116  00979A                     __pidataCOMRAM:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _UART
   120  00979A  F2                 	db	low _uart
   121  00979B  01                 	db	high _uart
   122                           
   123                           ;initializer for _drawerClose
   124  00979C  38                 	db	56
   125                           
   126                           ;initializer for _drawerOpen
   127  00979D  37                 	db	55
   128                           
   129                           ;initializer for _columnRight
   130  00979E  34                 	db	52
   131                           
   132                           ;initializer for _columnLeft
   133  00979F  33                 	db	51
   134                           
   135                           ;initializer for _rowDown
   136  0097A0  32                 	db	50
   137                           
   138                           ;initializer for _rowUp
   139  0097A1  31                 	db	49
   140                           
   141                           	psect	idataBANK0
   142  009788                     __pidataBANK0:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _drawerDown
   146  009788  36                 	db	54
   147                           
   148                           ;initializer for _drawerUp
   149  009789  35                 	db	53
   150                           
   151                           	psect	idataBANK2
   152  0098E6                     __pidataBANK2:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _inputs
   156  0098E6  FC                 	db	low STR_3
   157  0098E7  FC                 	db	high STR_3
   158  0098E8  E4                 	db	low (STR_11+2)
   159  0098E9  FC                 	db	high (STR_11+2)
   160  0098EA  C0                 	db	low (STR_17+3)
   161  0098EB  FC                 	db	high (STR_17+3)
   162  0098EC  E7                 	db	low (STR_9+1)
   163  0098ED  FC                 	db	high (STR_9+1)
   164  0098EE  EF                 	db	low (STR_10+1)
   165  0098EF  FC                 	db	high (STR_10+1)
   166  0098F0  BF                 	db	low (STR_17+2)
   167  0098F1  FC                 	db	high (STR_17+2)
   168  0098F2  E6                 	db	low STR_9
   169  0098F3  FC                 	db	high STR_9
   170  0098F4  EE                 	db	low STR_10
   171  0098F5  FC                 	db	high STR_10
   172  0098F6  E2                 	db	low STR_11
   173  0098F7  FC                 	db	high STR_11
   174  0098F8  EA                 	db	low STR_12
   175  0098F9  FC                 	db	high STR_12
   176  0098FA  C3                 	db	low (STR_16+1)
   177  0098FB  FC                 	db	high (STR_16+1)
   178  0098FC  BE                 	db	low (STR_17+1)
   179  0098FD  FC                 	db	high (STR_17+1)
   180  0098FE  C8                 	db	low (STR_18+1)
   181  0098FF  FC                 	db	high (STR_18+1)
   182  009900  C2                 	db	low STR_16
   183  009901  FC                 	db	high STR_16
   184  009902  BD                 	db	low STR_17
   185  009903  FC                 	db	high STR_17
   186  009904  C7                 	db	low STR_18
   187  009905  FC                 	db	high STR_18
   188  009906  D1                 	db	low STR_19
   189  009907  FC                 	db	high STR_19
   190  009908  CC                 	db	low STR_20
   191  009909  FC                 	db	high STR_20
   192                           
   193                           ;initializer for _foodInputs
   194  00990A  BB                 	db	low (STR_33+3)
   195  00990B  FC                 	db	high (STR_33+3)
   196  00990C  E0                 	db	low (STR_30+2)
   197  00990D  FC                 	db	high (STR_30+2)
   198  00990E  FA                 	db	low (STR_26+1)
   199  00990F  FC                 	db	high (STR_26+1)
   200  009910  BA                 	db	low (STR_33+2)
   201  009911  FC                 	db	high (STR_33+2)
   202  009912  DF                 	db	low (STR_30+1)
   203  009913  FC                 	db	high (STR_30+1)
   204  009914  F9                 	db	low STR_26
   205  009915  FC                 	db	high STR_26
   206  009916  DB                 	db	low (STR_31+1)
   207  009917  FC                 	db	high (STR_31+1)
   208  009918  F6                 	db	low STR_28
   209  009919  FC                 	db	high STR_28
   210  00991A  B9                 	db	low (STR_33+1)
   211  00991B  FC                 	db	high (STR_33+1)
   212  00991C  DE                 	db	low STR_30
   213  00991D  FC                 	db	high STR_30
   214  00991E  DA                 	db	low STR_31
   215  00991F  FC                 	db	high STR_31
   216  009920  D6                 	db	low STR_32
   217  009921  FC                 	db	high STR_32
   218  009922  B8                 	db	low STR_33
   219  009923  FC                 	db	high STR_33
   220                           
   221                           	psect	mediumconst
   222  00F924                     __pmediumconst:
   223                           	opt stack 0
   224  00F924  00                 	db	0
   225  00F925                     _keys:
   226                           	opt stack 0
   227  00F925  31                 	db	49
   228  00F926  32                 	db	50
   229  00F927  33                 	db	51
   230  00F928  41                 	db	65
   231  00F929  34                 	db	52
   232  00F92A  35                 	db	53
   233  00F92B  36                 	db	54
   234  00F92C  42                 	db	66
   235  00F92D  37                 	db	55
   236  00F92E  38                 	db	56
   237  00F92F  39                 	db	57
   238  00F930  43                 	db	67
   239  00F931  2A                 	db	42
   240  00F932  30                 	db	48
   241  00F933  23                 	db	35
   242  00F934  44                 	db	68
   243  00F935  00                 	db	0
   244  00F936                     __end_of_keys:
   245                           	opt stack 0
   246  00F936                     _input:
   247                           	opt stack 0
   248  00F936  31                 	db	49
   249  00F937  32                 	db	50
   250  00F938  33                 	db	51
   251  00F939  52                 	db	82
   252  00F93A  34                 	db	52
   253  00F93B  35                 	db	53
   254  00F93C  36                 	db	54
   255  00F93D  46                 	db	70
   256  00F93E  37                 	db	55
   257  00F93F  38                 	db	56
   258  00F940  39                 	db	57
   259  00F941  4C                 	db	76
   260  00F942  2A                 	db	42
   261  00F943  30                 	db	48
   262  00F944  23                 	db	35
   263  00F945  44                 	db	68
   264  00F946  00                 	db	0
   265  00F947                     __end_of_input:
   266                           	opt stack 0
   267  00F947                     _dpowers:
   268                           	opt stack 0
   269  00F947  0001               	dw	1
   270  00F949  000A               	dw	10
   271  00F94B  0064               	dw	100
   272  00F94D  03E8               	dw	1000
   273  00F94F  2710               	dw	10000
   274  00F951                     __end_of_dpowers:
   275                           	opt stack 0
   276  00F951                     _hexpowers:
   277                           	opt stack 0
   278  00F951  0001               	dw	1
   279  00F953  0010               	dw	16
   280  00F955  0100               	dw	256
   281  00F957  1000               	dw	4096
   282  00F959                     __end_of_hexpowers:
   283                           	opt stack 0
   284  00F959                     _happynewyear:
   285                           	opt stack 0
   286  00F959  00                 	db	0
   287  00F95A  28                 	db	40
   288  00F95B  00                 	db	0
   289  00F95C  06                 	db	6
   290  00F95D  24                 	db	36
   291  00F95E  02                 	db	2
   292  00F95F  18                 	db	24
   293  00F960                     __end_of_happynewyear:
   294                           	opt stack 0
   295  00F960                     _LCD_LEFT:
   296                           	opt stack 0
   297  00F960  00                 	db	0
   298  00F961                     __end_of_LCD_LEFT:
   299                           	opt stack 0
   300  00F961                     _LCD_RIGHT:
   301                           	opt stack 0
   302  00F961  01                 	db	1
   303  00F962                     __end_of_LCD_RIGHT:
   304                           	opt stack 0
   305  00F962                     _LCD_SIZE_VERT:
   306                           	opt stack 0
   307  00F962  02                 	db	2
   308  00F963                     __end_of_LCD_SIZE_VERT:
   309                           	opt stack 0
   310  00F963                     _LCD_SIZE_HORZ:
   311                           	opt stack 0
   312  00F963  10                 	db	16
   313  00F964                     __end_of_LCD_SIZE_HORZ:
   314                           	opt stack 0
   315  00F964                     _LCD_VERT_LIMIT:
   316                           	opt stack 0
   317  00F964  02                 	db	2
   318  00F965                     __end_of_LCD_VERT_LIMIT:
   319                           	opt stack 0
   320  00F965                     _LCD_HORZ_LIMIT:
   321                           	opt stack 0
   322  00F965  28                 	db	40
   323  00F966                     __end_of_LCD_HORZ_LIMIT:
   324                           	opt stack 0
   325  0000                     _PORTB	set	3969
   326  0000                     _PORTBbits	set	3969
   327  0000                     _LATAbits	set	3977
   328  0000                     _LATDbits	set	3980
   329  0000                     _LATCbits	set	3979
   330  0000                     _LATEbits	set	3981
   331  0000                     _TRISAbits	set	3986
   332  0000                     _TRISEbits	set	3990
   333  0000                     _TRISCbits	set	3988
   334  0000                     _TRISDbits	set	3989
   335  0000                     _TRISE	set	3990
   336  0000                     _TRISD	set	3989
   337  0000                     _TRISC	set	3988
   338  0000                     _TRISB	set	3987
   339  0000                     _TRISA	set	3986
   340  0000                     _LATE	set	3981
   341  0000                     _LATD	set	3980
   342  0000                     _LATC	set	3979
   343  0000                     _LATB	set	3978
   344  0000                     _LATA	set	3977
   345  0000                     _TRISC7	set	31911
   346  0000                     _TRISC6	set	31910
   347  0000                     _SPBRG	set	4015
   348  0000                     _RCREG	set	4014
   349  0000                     _RCSTAbits	set	4011
   350  0000                     _TXREG	set	4013
   351  0000                     _TXSTAbits	set	4012
   352  0000                     _ADRESL	set	4035
   353  0000                     _ADRESH	set	4036
   354  0000                     _ADCON0bits	set	4034
   355  0000                     _SSPBUF	set	4041
   356  0000                     _SSPCON2bits	set	4037
   357  0000                     _SSPADD	set	4040
   358  0000                     _SSPCON2	set	4037
   359  0000                     _SSPCON1	set	4038
   360  0000                     _SSPSTAT	set	4039
   361  0000                     _SSPCON1bits	set	4038
   362  0000                     _EECON2	set	4007
   363  0000                     _EEDATA	set	4008
   364  0000                     _EEADR	set	4009
   365  0000                     _EECON1bits	set	4006
   366  0000                     _ADCON1	set	4033
   367  0000                     _ADCON0	set	4034
   368  0000                     _RCIE	set	31981
   369  0000                     _RCIF	set	31989
   370  0000                     _TXIE	set	31980
   371  0000                     _TRMT	set	32097
   372  0000                     _TXIF	set	31988
   373  0000                     _ADON	set	32272
   374  0000                     _INTCONbits	set	4082
   375  00F966                     STR_98:
   376  00F966  52                 	db	82	;'R'
   377  00F967  65                 	db	101	;'e'
   378  00F968  6D                 	db	109	;'m'
   379  00F969  61                 	db	97	;'a'
   380  00F96A  69                 	db	105	;'i'
   381  00F96B  6E                 	db	110	;'n'
   382  00F96C  69                 	db	105	;'i'
   383  00F96D  6E                 	db	110	;'n'
   384  00F96E  67                 	db	103	;'g'
   385  00F96F  20                 	db	32
   386  00F970  70                 	db	112	;'p'
   387  00F971  69                 	db	105	;'i'
   388  00F972  65                 	db	101	;'e'
   389  00F973  63                 	db	99	;'c'
   390  00F974  65                 	db	101	;'e'
   391  00F975  73                 	db	115	;'s'
   392  00F976  3A                 	db	58	;':'
   393  00F977  00                 	db	0
   394  00F978                     STR_154:
   395  00F978  30                 	db	48	;'0'
   396  00F979  31                 	db	49	;'1'
   397  00F97A  32                 	db	50	;'2'
   398  00F97B  33                 	db	51	;'3'
   399  00F97C  34                 	db	52	;'4'
   400  00F97D  35                 	db	53	;'5'
   401  00F97E  36                 	db	54	;'6'
   402  00F97F  37                 	db	55	;'7'
   403  00F980  38                 	db	56	;'8'
   404  00F981  39                 	db	57	;'9'
   405  00F982  61                 	db	97	;'a'
   406  00F983  62                 	db	98	;'b'
   407  00F984  63                 	db	99	;'c'
   408  00F985  64                 	db	100	;'d'
   409  00F986  65                 	db	101	;'e'
   410  00F987  66                 	db	102	;'f'
   411  00F988  00                 	db	0
   412  00F989                     STR_129:
   413  00F989  64                 	db	100	;'d'
   414  00F98A  72                 	db	114	;'r'
   415  00F98B  61                 	db	97	;'a'
   416  00F98C  77                 	db	119	;'w'
   417  00F98D  65                 	db	101	;'e'
   418  00F98E  72                 	db	114	;'r'
   419  00F98F  73                 	db	115	;'s'
   420  00F990  20                 	db	32
   421  00F991  72                 	db	114	;'r'
   422  00F992  65                 	db	101	;'e'
   423  00F993  61                 	db	97	;'a'
   424  00F994  63                 	db	99	;'c'
   425  00F995  68                 	db	104	;'h'
   426  00F996  65                 	db	101	;'e'
   427  00F997  64                 	db	100	;'d'
   428  00F998  21                 	db	33
   429  00F999  00                 	db	0
   430  00F99A                     STR_117:
   431  00F99A  62                 	db	98	;'b'
   432  00F99B  65                 	db	101	;'e'
   433  00F99C  67                 	db	103	;'g'
   434  00F99D  69                 	db	105	;'i'
   435  00F99E  6E                 	db	110	;'n'
   436  00F99F  20                 	db	32
   437  00F9A0  6F                 	db	111	;'o'
   438  00F9A1  70                 	db	112	;'p'
   439  00F9A2  65                 	db	101	;'e'
   440  00F9A3  72                 	db	114	;'r'
   441  00F9A4  61                 	db	97	;'a'
   442  00F9A5  74                 	db	116	;'t'
   443  00F9A6  69                 	db	105	;'i'
   444  00F9A7  6F                 	db	111	;'o'
   445  00F9A8  6E                 	db	110	;'n'
   446  00F9A9  2E                 	db	46
   447  00F9AA  00                 	db	0
   448  00F9AB                     STR_140:
   449  00F9AB  49                 	db	73	;'I'
   450  00F9AC  6E                 	db	110	;'n'
   451  00F9AD  70                 	db	112	;'p'
   452  00F9AE  75                 	db	117	;'u'
   453  00F9AF  74                 	db	116	;'t'
   454  00F9B0  73                 	db	115	;'s'
   455  00F9B1  20                 	db	32
   456  00F9B2  73                 	db	115	;'s'
   457  00F9B3  75                 	db	117	;'u'
   458  00F9B4  62                 	db	98	;'b'
   459  00F9B5  6D                 	db	109	;'m'
   460  00F9B6  69                 	db	105	;'i'
   461  00F9B7  74                 	db	116	;'t'
   462  00F9B8  74                 	db	116	;'t'
   463  00F9B9  65                 	db	101	;'e'
   464  00F9BA  64                 	db	100	;'d'
   465  00F9BB  00                 	db	0
   466  00F9BC                     STR_84:
   467  00F9BC  50                 	db	80	;'P'
   468  00F9BD  6C                 	db	108	;'l'
   469  00F9BE  65                 	db	101	;'e'
   470  00F9BF  61                 	db	97	;'a'
   471  00F9C0  73                 	db	115	;'s'
   472  00F9C1  65                 	db	101	;'e'
   473  00F9C2  20                 	db	32
   474  00F9C3  69                 	db	105	;'i'
   475  00F9C4  6E                 	db	110	;'n'
   476  00F9C5  70                 	db	112	;'p'
   477  00F9C6  75                 	db	117	;'u'
   478  00F9C7  74                 	db	116	;'t'
   479  00F9C8  20                 	db	32
   480  00F9C9  6C                 	db	108	;'l'
   481  00F9CA  6F                 	db	111	;'o'
   482  00F9CB  67                 	db	103	;'g'
   483  00F9CC  00                 	db	0
   484  00F9CD                     STR_99:
   485  00F9CD  52                 	db	82	;'R'
   486  00F9CE  3A                 	db	58	;':'
   487  00F9CF  25                 	db	37
   488  00F9D0  69                 	db	105	;'i'
   489  00F9D1  20                 	db	32
   490  00F9D2  20                 	db	32
   491  00F9D3  46                 	db	70	;'F'
   492  00F9D4  3A                 	db	58	;':'
   493  00F9D5  25                 	db	37
   494  00F9D6  69                 	db	105	;'i'
   495  00F9D7  20                 	db	32
   496  00F9D8  20                 	db	32
   497  00F9D9  4C                 	db	76	;'L'
   498  00F9DA  3A                 	db	58	;':'
   499  00F9DB  25                 	db	37
   500  00F9DC  69                 	db	105	;'i'
   501  00F9DD  00                 	db	0
   502  00F9DE                     STR_80:
   503  00F9DE  50                 	db	80	;'P'
   504  00F9DF  72                 	db	114	;'r'
   505  00F9E0  65                 	db	101	;'e'
   506  00F9E1  73                 	db	115	;'s'
   507  00F9E2  73                 	db	115	;'s'
   508  00F9E3  20                 	db	32
   509  00F9E4  61                 	db	97	;'a'
   510  00F9E5  6E                 	db	110	;'n'
   511  00F9E6  79                 	db	121	;'y'
   512  00F9E7  20                 	db	32
   513  00F9E8  6B                 	db	107	;'k'
   514  00F9E9  65                 	db	101	;'e'
   515  00F9EA  79                 	db	121	;'y'
   516  00F9EB  20                 	db	32
   517  00F9EC  74                 	db	116	;'t'
   518  00F9ED  6F                 	db	111	;'o'
   519  00F9EE  00                 	db	0
   520  00F9EF                     STR_82:
   521  00F9EF  25                 	db	37
   522  00F9F0  69                 	db	105	;'i'
   523  00F9F1  20                 	db	32
   524  00F9F2  70                 	db	112	;'p'
   525  00F9F3  72                 	db	114	;'r'
   526  00F9F4  65                 	db	101	;'e'
   527  00F9F5  76                 	db	118	;'v'
   528  00F9F6  69                 	db	105	;'i'
   529  00F9F7  6F                 	db	111	;'o'
   530  00F9F8  75                 	db	117	;'u'
   531  00F9F9  73                 	db	115	;'s'
   532  00F9FA  20                 	db	32
   533  00F9FB  6C                 	db	108	;'l'
   534  00F9FC  6F                 	db	111	;'o'
   535  00F9FD  67                 	db	103	;'g'
   536  00F9FE  73                 	db	115	;'s'
   537  00F9FF  00                 	db	0
   538  00FA00                     STR_119:
   539  00FA00  63                 	db	99	;'c'
   540  00FA01  61                 	db	97	;'a'
   541  00FA02  62                 	db	98	;'b'
   542  00FA03  69                 	db	105	;'i'
   543  00FA04  6E                 	db	110	;'n'
   544  00FA05  65                 	db	101	;'e'
   545  00FA06  74                 	db	116	;'t'
   546  00FA07  20                 	db	32
   547  00FA08  73                 	db	115	;'s'
   548  00FA09  6F                 	db	111	;'o'
   549  00FA0A  72                 	db	114	;'r'
   550  00FA0B  74                 	db	116	;'t'
   551  00FA0C  65                 	db	101	;'e'
   552  00FA0D  72                 	db	114	;'r'
   553  00FA0E  21                 	db	33
   554  00FA0F  00                 	db	0
   555  00FA10                     STR_133:
   556  00FA10  6E                 	db	110	;'n'
   557  00FA11  75                 	db	117	;'u'
   558  00FA12  6D                 	db	109	;'m'
   559  00FA13  62                 	db	98	;'b'
   560  00FA14  65                 	db	101	;'e'
   561  00FA15  72                 	db	114	;'r'
   562  00FA16  20                 	db	32
   563  00FA17  70                 	db	112	;'p'
   564  00FA18  72                 	db	114	;'r'
   565  00FA19  65                 	db	101	;'e'
   566  00FA1A  73                 	db	115	;'s'
   567  00FA1B  73                 	db	115	;'s'
   568  00FA1C  65                 	db	101	;'e'
   569  00FA1D  64                 	db	100	;'d'
   570  00FA1E  2E                 	db	46
   571  00FA1F  00                 	db	0
   572  00FA20                     STR_105:
   573  00FA20  44                 	db	68	;'D'
   574  00FA21  72                 	db	114	;'r'
   575  00FA22  61                 	db	97	;'a'
   576  00FA23  77                 	db	119	;'w'
   577  00FA24  65                 	db	101	;'e'
   578  00FA25  72                 	db	114	;'r'
   579  00FA26  20                 	db	32
   580  00FA27  25                 	db	37
   581  00FA28  69                 	db	105	;'i'
   582  00FA29  20                 	db	32
   583  00FA2A  66                 	db	102	;'f'
   584  00FA2B  6F                 	db	111	;'o'
   585  00FA2C  6F                 	db	111	;'o'
   586  00FA2D  64                 	db	100	;'d'
   587  00FA2E  3A                 	db	58	;':'
   588  00FA2F  00                 	db	0
   589  00FA30                     STR_91:
   590  00FA30  4F                 	db	79	;'O'
   591  00FA31  70                 	db	112	;'p'
   592  00FA32  65                 	db	101	;'e'
   593  00FA33  72                 	db	114	;'r'
   594  00FA34  61                 	db	97	;'a'
   595  00FA35  74                 	db	116	;'t'
   596  00FA36  69                 	db	105	;'i'
   597  00FA37  6F                 	db	111	;'o'
   598  00FA38  6E                 	db	110	;'n'
   599  00FA39  20                 	db	32
   600  00FA3A  74                 	db	116	;'t'
   601  00FA3B  69                 	db	105	;'i'
   602  00FA3C  6D                 	db	109	;'m'
   603  00FA3D  65                 	db	101	;'e'
   604  00FA3E  3A                 	db	58	;':'
   605  00FA3F  00                 	db	0
   606  00FA40                     STR_93:
   607  00FA40  4D                 	db	77	;'M'
   608  00FA41  61                 	db	97	;'a'
   609  00FA42  72                 	db	114	;'r'
   610  00FA43  6B                 	db	107	;'k'
   611  00FA44  65                 	db	101	;'e'
   612  00FA45  64                 	db	100	;'d'
   613  00FA46  20                 	db	32
   614  00FA47  64                 	db	100	;'d'
   615  00FA48  72                 	db	114	;'r'
   616  00FA49  61                 	db	97	;'a'
   617  00FA4A  77                 	db	119	;'w'
   618  00FA4B  65                 	db	101	;'e'
   619  00FA4C  72                 	db	114	;'r'
   620  00FA4D  73                 	db	115	;'s'
   621  00FA4E  3A                 	db	58	;':'
   622  00FA4F  00                 	db	0
   623  00FA50                     STR_109:
   624  00FA50  44                 	db	68	;'D'
   625  00FA51  72                 	db	114	;'r'
   626  00FA52  61                 	db	97	;'a'
   627  00FA53  77                 	db	119	;'w'
   628  00FA54  65                 	db	101	;'e'
   629  00FA55  72                 	db	114	;'r'
   630  00FA56  20                 	db	32
   631  00FA57  25                 	db	37
   632  00FA58  69                 	db	105	;'i'
   633  00FA59  20                 	db	32
   634  00FA5A  64                 	db	100	;'d'
   635  00FA5B  69                 	db	105	;'i'
   636  00FA5C  65                 	db	101	;'e'
   637  00FA5D  74                 	db	116	;'t'
   638  00FA5E  3A                 	db	58	;':'
   639  00FA5F  00                 	db	0
   640  00FA60                     STR_130:
   641  00FA60  41                 	db	65	;'A'
   642  00FA61  6E                 	db	110	;'n'
   643  00FA62  6F                 	db	111	;'o'
   644  00FA63  74                 	db	116	;'t'
   645  00FA64  68                 	db	104	;'h'
   646  00FA65  65                 	db	101	;'e'
   647  00FA66  72                 	db	114	;'r'
   648  00FA67  20                 	db	32
   649  00FA68  64                 	db	100	;'d'
   650  00FA69  72                 	db	114	;'r'
   651  00FA6A  61                 	db	97	;'a'
   652  00FA6B  77                 	db	119	;'w'
   653  00FA6C  65                 	db	101	;'e'
   654  00FA6D  72                 	db	114	;'r'
   655  00FA6E  3F                 	db	63	;'?'
   656  00FA6F  00                 	db	0
   657  00FA70                     STR_118:
   658  00FA70  57                 	db	87	;'W'
   659  00FA71  65                 	db	101	;'e'
   660  00FA72  6C                 	db	108	;'l'
   661  00FA73  63                 	db	99	;'c'
   662  00FA74  6F                 	db	111	;'o'
   663  00FA75  6D                 	db	109	;'m'
   664  00FA76  65                 	db	101	;'e'
   665  00FA77  20                 	db	32
   666  00FA78  74                 	db	116	;'t'
   667  00FA79  6F                 	db	111	;'o'
   668  00FA7A  20                 	db	32
   669  00FA7B  79                 	db	121	;'y'
   670  00FA7C  6F                 	db	111	;'o'
   671  00FA7D  75                 	db	117	;'u'
   672  00FA7E  72                 	db	114	;'r'
   673  00FA7F  00                 	db	0
   674  00FA80                     STR_104:
   675  00FA80  23                 	db	35
   676  00FA81  20                 	db	32
   677  00FA82  3D                 	db	61	;'='
   678  00FA83  20                 	db	32
   679  00FA84  4E                 	db	78	;'N'
   680  00FA85  6F                 	db	111	;'o'
   681  00FA86  2C                 	db	44
   682  00FA87  20                 	db	32
   683  00FA88  44                 	db	68	;'D'
   684  00FA89  20                 	db	32
   685  00FA8A  3D                 	db	61	;'='
   686  00FA8B  20                 	db	32
   687  00FA8C  59                 	db	89	;'Y'
   688  00FA8D  65                 	db	101	;'e'
   689  00FA8E  73                 	db	115	;'s'
   690  00FA8F  00                 	db	0
   691  00FA90                     STR_43:
   692  00FA90  44                 	db	68	;'D'
   693  00FA91  69                 	db	105	;'i'
   694  00FA92  73                 	db	115	;'s'
   695  00FA93  74                 	db	116	;'t'
   696  00FA94  72                 	db	114	;'r'
   697  00FA95  69                 	db	105	;'i'
   698  00FA96  62                 	db	98	;'b'
   699  00FA97  75                 	db	117	;'u'
   700  00FA98  74                 	db	116	;'t'
   701  00FA99  69                 	db	105	;'i'
   702  00FA9A  6E                 	db	110	;'n'
   703  00FA9B  67                 	db	103	;'g'
   704  00FA9C  20                 	db	32
   705  00FA9D  74                 	db	116	;'t'
   706  00FA9E  6F                 	db	111	;'o'
   707  00FA9F  00                 	db	0
   708  00FAA0                     STR_2:
   709  00FAA0  43                 	db	67	;'C'
   710  00FAA1  6C                 	db	108	;'l'
   711  00FAA2  65                 	db	101	;'e'
   712  00FAA3  61                 	db	97	;'a'
   713  00FAA4  72                 	db	114	;'r'
   714  00FAA5  69                 	db	105	;'i'
   715  00FAA6  6E                 	db	110	;'n'
   716  00FAA7  67                 	db	103	;'g'
   717  00FAA8  20                 	db	32
   718  00FAA9  45                 	db	69	;'E'
   719  00FAAA  45                 	db	69	;'E'
   720  00FAAB  50                 	db	80	;'P'
   721  00FAAC  52                 	db	82	;'R'
   722  00FAAD  4F                 	db	79	;'O'
   723  00FAAE  4D                 	db	77	;'M'
   724  00FAAF  00                 	db	0
   725  00FAB0                     STR_147:
   726  00FAB0  62                 	db	98	;'b'
   727  00FAB1  65                 	db	101	;'e'
   728  00FAB2  67                 	db	103	;'g'
   729  00FAB3  69                 	db	105	;'i'
   730  00FAB4  6E                 	db	110	;'n'
   731  00FAB5  20                 	db	32
   732  00FAB6  73                 	db	115	;'s'
   733  00FAB7  68                 	db	104	;'h'
   734  00FAB8  6F                 	db	111	;'o'
   735  00FAB9  72                 	db	114	;'r'
   736  00FABA  74                 	db	116	;'t'
   737  00FABB  6C                 	db	108	;'l'
   738  00FABC  79                 	db	121	;'y'
   739  00FABD  2E                 	db	46
   740  00FABE  00                 	db	0
   741  00FABF                     STR_113:
   742  00FABF  44                 	db	68	;'D'
   743  00FAC0  72                 	db	114	;'r'
   744  00FAC1  61                 	db	97	;'a'
   745  00FAC2  77                 	db	119	;'w'
   746  00FAC3  65                 	db	101	;'e'
   747  00FAC4  72                 	db	114	;'r'
   748  00FAC5  20                 	db	32
   749  00FAC6  6E                 	db	110	;'n'
   750  00FAC7  75                 	db	117	;'u'
   751  00FAC8  6D                 	db	109	;'m'
   752  00FAC9  62                 	db	98	;'b'
   753  00FACA  65                 	db	101	;'e'
   754  00FACB  72                 	db	114	;'r'
   755  00FACC  3A                 	db	58	;':'
   756  00FACD  00                 	db	0
   757  00FACE                     STR_100:
   758  00FACE  49                 	db	73	;'I'
   759  00FACF  6E                 	db	110	;'n'
   760  00FAD0  70                 	db	112	;'p'
   761  00FAD1  75                 	db	117	;'u'
   762  00FAD2  74                 	db	116	;'t'
   763  00FAD3  20                 	db	32
   764  00FAD4  53                 	db	83	;'S'
   765  00FAD5  75                 	db	117	;'u'
   766  00FAD6  6D                 	db	109	;'m'
   767  00FAD7  6D                 	db	109	;'m'
   768  00FAD8  61                 	db	97	;'a'
   769  00FAD9  72                 	db	114	;'r'
   770  00FADA  79                 	db	121	;'y'
   771  00FADB  3A                 	db	58	;':'
   772  00FADC  00                 	db	0
   773  00FADD                     STR_78:
   774  00FADD  31                 	db	49	;'1'
   775  00FADE  20                 	db	32
   776  00FADF  70                 	db	112	;'p'
   777  00FAE0  72                 	db	114	;'r'
   778  00FAE1  65                 	db	101	;'e'
   779  00FAE2  76                 	db	118	;'v'
   780  00FAE3  69                 	db	105	;'i'
   781  00FAE4  6F                 	db	111	;'o'
   782  00FAE5  75                 	db	117	;'u'
   783  00FAE6  73                 	db	115	;'s'
   784  00FAE7  20                 	db	32
   785  00FAE8  6C                 	db	108	;'l'
   786  00FAE9  6F                 	db	111	;'o'
   787  00FAEA  67                 	db	103	;'g'
   788  00FAEB  00                 	db	0
   789  00FAEC                     STR_97:
   790  00FAEC  25                 	db	37
   791  00FAED  69                 	db	105	;'i'
   792  00FAEE  2C                 	db	44
   793  00FAEF  20                 	db	32
   794  00FAF0  25                 	db	37
   795  00FAF1  69                 	db	105	;'i'
   796  00FAF2  2C                 	db	44
   797  00FAF3  20                 	db	32
   798  00FAF4  25                 	db	37
   799  00FAF5  69                 	db	105	;'i'
   800  00FAF6  2C                 	db	44
   801  00FAF7  20                 	db	32
   802  00FAF8  25                 	db	37
   803  00FAF9  69                 	db	105	;'i'
   804  00FAFA  00                 	db	0
   805  00FAFB                     STR_90:
   806  00FAFB  25                 	db	37
   807  00FAFC  30                 	db	48	;'0'
   808  00FAFD  32                 	db	50	;'2'
   809  00FAFE  69                 	db	105	;'i'
   810  00FAFF  2F                 	db	47
   811  00FB00  25                 	db	37
   812  00FB01  30                 	db	48	;'0'
   813  00FB02  32                 	db	50	;'2'
   814  00FB03  69                 	db	105	;'i'
   815  00FB04  2F                 	db	47
   816  00FB05  25                 	db	37
   817  00FB06  30                 	db	48	;'0'
   818  00FB07  32                 	db	50	;'2'
   819  00FB08  69                 	db	105	;'i'
   820  00FB09  00                 	db	0
   821  00FB0A                     STR_146:
   822  00FB0A  4F                 	db	79	;'O'
   823  00FB0B  70                 	db	112	;'p'
   824  00FB0C  65                 	db	101	;'e'
   825  00FB0D  72                 	db	114	;'r'
   826  00FB0E  61                 	db	97	;'a'
   827  00FB0F  74                 	db	116	;'t'
   828  00FB10  69                 	db	105	;'i'
   829  00FB11  6F                 	db	111	;'o'
   830  00FB12  6E                 	db	110	;'n'
   831  00FB13  20                 	db	32
   832  00FB14  77                 	db	119	;'w'
   833  00FB15  69                 	db	105	;'i'
   834  00FB16  6C                 	db	108	;'l'
   835  00FB17  6C                 	db	108	;'l'
   836  00FB18  00                 	db	0
   837  00FB19                     STR_122:
   838  00FB19  25                 	db	37
   839  00FB1A  30                 	db	48	;'0'
   840  00FB1B  32                 	db	50	;'2'
   841  00FB1C  78                 	db	120	;'x'
   842  00FB1D  2F                 	db	47
   843  00FB1E  25                 	db	37
   844  00FB1F  30                 	db	48	;'0'
   845  00FB20  32                 	db	50	;'2'
   846  00FB21  78                 	db	120	;'x'
   847  00FB22  2F                 	db	47
   848  00FB23  25                 	db	37
   849  00FB24  30                 	db	48	;'0'
   850  00FB25  32                 	db	50	;'2'
   851  00FB26  78                 	db	120	;'x'
   852  00FB27  00                 	db	0
   853  00FB28                     STR_123:
   854  00FB28  25                 	db	37
   855  00FB29  30                 	db	48	;'0'
   856  00FB2A  32                 	db	50	;'2'
   857  00FB2B  78                 	db	120	;'x'
   858  00FB2C  3A                 	db	58	;':'
   859  00FB2D  25                 	db	37
   860  00FB2E  30                 	db	48	;'0'
   861  00FB2F  32                 	db	50	;'2'
   862  00FB30  78                 	db	120	;'x'
   863  00FB31  3A                 	db	58	;':'
   864  00FB32  25                 	db	37
   865  00FB33  30                 	db	48	;'0'
   866  00FB34  32                 	db	50	;'2'
   867  00FB35  78                 	db	120	;'x'
   868  00FB36  00                 	db	0
   869  00FB37                     STR_134:
   870  00FB37  44                 	db	68	;'D'
   871  00FB38  72                 	db	114	;'r'
   872  00FB39  61                 	db	97	;'a'
   873  00FB3A  77                 	db	119	;'w'
   874  00FB3B  65                 	db	101	;'e'
   875  00FB3C  72                 	db	114	;'r'
   876  00FB3D  20                 	db	32
   877  00FB3E  61                 	db	97	;'a'
   878  00FB3F  6C                 	db	108	;'l'
   879  00FB40  72                 	db	114	;'r'
   880  00FB41  65                 	db	101	;'e'
   881  00FB42  61                 	db	97	;'a'
   882  00FB43  64                 	db	100	;'d'
   883  00FB44  79                 	db	121	;'y'
   884  00FB45  00                 	db	0
   885  00FB46                     STR_38:
   886  00FB46  52                 	db	82	;'R'
   887  00FB47  3A                 	db	58	;':'
   888  00FB48  25                 	db	37
   889  00FB49  69                 	db	105	;'i'
   890  00FB4A  20                 	db	32
   891  00FB4B  46                 	db	70	;'F'
   892  00FB4C  3A                 	db	58	;':'
   893  00FB4D  25                 	db	37
   894  00FB4E  69                 	db	105	;'i'
   895  00FB4F  20                 	db	32
   896  00FB50  4C                 	db	76	;'L'
   897  00FB51  3A                 	db	58	;':'
   898  00FB52  25                 	db	37
   899  00FB53  69                 	db	105	;'i'
   900  00FB54  00                 	db	0
   901  00FB55                     STR_107:
   902  00FB55  49                 	db	73	;'I'
   903  00FB56  6E                 	db	110	;'n'
   904  00FB57  76                 	db	118	;'v'
   905  00FB58  61                 	db	97	;'a'
   906  00FB59  6C                 	db	108	;'l'
   907  00FB5A  69                 	db	105	;'i'
   908  00FB5B  64                 	db	100	;'d'
   909  00FB5C  20                 	db	32
   910  00FB5D  66                 	db	102	;'f'
   911  00FB5E  6F                 	db	111	;'o'
   912  00FB5F  6F                 	db	111	;'o'
   913  00FB60  64                 	db	100	;'d'
   914  00FB61  21                 	db	33
   915  00FB62  00                 	db	0
   916  00FB63                     STR_111:
   917  00FB63  49                 	db	73	;'I'
   918  00FB64  6E                 	db	110	;'n'
   919  00FB65  76                 	db	118	;'v'
   920  00FB66  61                 	db	97	;'a'
   921  00FB67  6C                 	db	108	;'l'
   922  00FB68  69                 	db	105	;'i'
   923  00FB69  64                 	db	100	;'d'
   924  00FB6A  20                 	db	32
   925  00FB6B  64                 	db	100	;'d'
   926  00FB6C  69                 	db	105	;'i'
   927  00FB6D  65                 	db	101	;'e'
   928  00FB6E  74                 	db	116	;'t'
   929  00FB6F  21                 	db	33
   930  00FB70  00                 	db	0
   931  00FB71                     STR_141:
   932  00FB71  73                 	db	115	;'s'
   933  00FB72  75                 	db	117	;'u'
   934  00FB73  63                 	db	99	;'c'
   935  00FB74  63                 	db	99	;'c'
   936  00FB75  65                 	db	101	;'e'
   937  00FB76  73                 	db	115	;'s'
   938  00FB77  73                 	db	115	;'s'
   939  00FB78  66                 	db	102	;'f'
   940  00FB79  75                 	db	117	;'u'
   941  00FB7A  6C                 	db	108	;'l'
   942  00FB7B  6C                 	db	108	;'l'
   943  00FB7C  79                 	db	121	;'y'
   944  00FB7D  21                 	db	33
   945  00FB7E  00                 	db	0
   946  00FB7F                     STR_81:
   947  00FB7F  6D                 	db	109	;'m'
   948  00FB80  6F                 	db	111	;'o'
   949  00FB81  76                 	db	118	;'v'
   950  00FB82  65                 	db	101	;'e'
   951  00FB83  20                 	db	32
   952  00FB84  66                 	db	102	;'f'
   953  00FB85  6F                 	db	111	;'o'
   954  00FB86  72                 	db	114	;'r'
   955  00FB87  77                 	db	119	;'w'
   956  00FB88  61                 	db	97	;'a'
   957  00FB89  72                 	db	114	;'r'
   958  00FB8A  64                 	db	100	;'d'
   959  00FB8B  2E                 	db	46
   960  00FB8C  00                 	db	0
   961  00FB8D                     STR_126:
   962  00FB8D  6F                 	db	111	;'o'
   963  00FB8E  72                 	db	114	;'r'
   964  00FB8F  20                 	db	32
   965  00FB90  70                 	db	112	;'p'
   966  00FB91  72                 	db	114	;'r'
   967  00FB92  65                 	db	101	;'e'
   968  00FB93  73                 	db	115	;'s'
   969  00FB94  73                 	db	115	;'s'
   970  00FB95  20                 	db	32
   971  00FB96  44                 	db	68	;'D'
   972  00FB97  20                 	db	32
   973  00FB98  74                 	db	116	;'t'
   974  00FB99  6F                 	db	111	;'o'
   975  00FB9A  00                 	db	0
   976  00FB9B                     STR_149:
   977  00FB9B  49                 	db	73	;'I'
   978  00FB9C  6E                 	db	110	;'n'
   979  00FB9D  76                 	db	118	;'v'
   980  00FB9E  61                 	db	97	;'a'
   981  00FB9F  6C                 	db	108	;'l'
   982  00FBA0  69                 	db	105	;'i'
   983  00FBA1  64                 	db	100	;'d'
   984  00FBA2  20                 	db	32
   985  00FBA3  6B                 	db	107	;'k'
   986  00FBA4  65                 	db	101	;'e'
   987  00FBA5  79                 	db	121	;'y'
   988  00FBA6  21                 	db	33
   989  00FBA7  00                 	db	0
   990  00FBA8                     STR_128:
   991  00FBA8  4D                 	db	77	;'M'
   992  00FBA9  61                 	db	97	;'a'
   993  00FBAA  78                 	db	120	;'x'
   994  00FBAB  69                 	db	105	;'i'
   995  00FBAC  6D                 	db	109	;'m'
   996  00FBAD  75                 	db	117	;'u'
   997  00FBAE  6D                 	db	109	;'m'
   998  00FBAF  20                 	db	32
   999  00FBB0  6F                 	db	111	;'o'
  1000  00FBB1  66                 	db	102	;'f'
  1001  00FBB2  20                 	db	32
  1002  00FBB3  38                 	db	56	;'8'
  1003  00FBB4  00                 	db	0
  1004  00FBB5                     STR_103:
  1005  00FBB5  41                 	db	65	;'A'
  1006  00FBB6  6E                 	db	110	;'n'
  1007  00FBB7  6F                 	db	111	;'o'
  1008  00FBB8  74                 	db	116	;'t'
  1009  00FBB9  68                 	db	104	;'h'
  1010  00FBBA  65                 	db	101	;'e'
  1011  00FBBB  72                 	db	114	;'r'
  1012  00FBBC  20                 	db	32
  1013  00FBBD  6C                 	db	108	;'l'
  1014  00FBBE  6F                 	db	111	;'o'
  1015  00FBBF  67                 	db	103	;'g'
  1016  00FBC0  3F                 	db	63	;'?'
  1017  00FBC1  00                 	db	0
  1018  00FBC2                     STR_120:
  1019  00FBC2  43                 	db	67	;'C'
  1020  00FBC3  75                 	db	117	;'u'
  1021  00FBC4  72                 	db	114	;'r'
  1022  00FBC5  72                 	db	114	;'r'
  1023  00FBC6  65                 	db	101	;'e'
  1024  00FBC7  6E                 	db	110	;'n'
  1025  00FBC8  74                 	db	116	;'t'
  1026  00FBC9  20                 	db	32
  1027  00FBCA  64                 	db	100	;'d'
  1028  00FBCB  61                 	db	97	;'a'
  1029  00FBCC  74                 	db	116	;'t'
  1030  00FBCD  65                 	db	101	;'e'
  1031  00FBCE  00                 	db	0
  1032  00FBCF                     STR_41:
  1033  00FBCF  49                 	db	73	;'I'
  1034  00FBD0  6E                 	db	110	;'n'
  1035  00FBD1  69                 	db	105	;'i'
  1036  00FBD2  74                 	db	116	;'t'
  1037  00FBD3  69                 	db	105	;'i'
  1038  00FBD4  61                 	db	97	;'a'
  1039  00FBD5  6C                 	db	108	;'l'
  1040  00FBD6  69                 	db	105	;'i'
  1041  00FBD7  7A                 	db	122	;'z'
  1042  00FBD8  69                 	db	105	;'i'
  1043  00FBD9  6E                 	db	110	;'n'
  1044  00FBDA  67                 	db	103	;'g'
  1045  00FBDB  00                 	db	0
  1046  00FBDC                     STR_125:
  1047  00FBDC  76                 	db	118	;'v'
  1048  00FBDD  69                 	db	105	;'i'
  1049  00FBDE  65                 	db	101	;'e'
  1050  00FBDF  77                 	db	119	;'w'
  1051  00FBE0  20                 	db	32
  1052  00FBE1  6C                 	db	108	;'l'
  1053  00FBE2  6F                 	db	111	;'o'
  1054  00FBE3  67                 	db	103	;'g'
  1055  00FBE4  73                 	db	115	;'s'
  1056  00FBE5  2C                 	db	44
  1057  00FBE6  00                 	db	0
  1058  00FBE7                     STR_77:
  1059  00FBE7  61                 	db	97	;'a'
  1060  00FBE8  76                 	db	118	;'v'
  1061  00FBE9  61                 	db	97	;'a'
  1062  00FBEA  69                 	db	105	;'i'
  1063  00FBEB  6C                 	db	108	;'l'
  1064  00FBEC  61                 	db	97	;'a'
  1065  00FBED  62                 	db	98	;'b'
  1066  00FBEE  6C                 	db	108	;'l'
  1067  00FBEF  65                 	db	101	;'e'
  1068  00FBF0  2E                 	db	46
  1069  00FBF1  00                 	db	0
  1070  00FBF2                     STR_148:
  1071  00FBF2  52                 	db	82	;'R'
  1072  00FBF3  65                 	db	101	;'e'
  1073  00FBF4  62                 	db	98	;'b'
  1074  00FBF5  6F                 	db	111	;'o'
  1075  00FBF6  6F                 	db	111	;'o'
  1076  00FBF7  74                 	db	116	;'t'
  1077  00FBF8  69                 	db	105	;'i'
  1078  00FBF9  6E                 	db	110	;'n'
  1079  00FBFA  67                 	db	103	;'g'
  1080  00FBFB  2E                 	db	46
  1081  00FBFC  00                 	db	0
  1082  00FBFD                     STR_108:
  1083  00FBFD  54                 	db	84	;'T'
  1084  00FBFE  72                 	db	114	;'r'
  1085  00FBFF  79                 	db	121	;'y'
  1086  00FC00  20                 	db	32
  1087  00FC01  61                 	db	97	;'a'
  1088  00FC02  67                 	db	103	;'g'
  1089  00FC03  61                 	db	97	;'a'
  1090  00FC04  69                 	db	105	;'i'
  1091  00FC05  6E                 	db	110	;'n'
  1092  00FC06  2E                 	db	46
  1093  00FC07  00                 	db	0
  1094  00FC08                     STR_101:
  1095  00FC08  44                 	db	68	;'D'
  1096  00FC09  72                 	db	114	;'r'
  1097  00FC0A  61                 	db	97	;'a'
  1098  00FC0B  77                 	db	119	;'w'
  1099  00FC0C  65                 	db	101	;'e'
  1100  00FC0D  72                 	db	114	;'r'
  1101  00FC0E  20                 	db	32
  1102  00FC0F  25                 	db	37
  1103  00FC10  69                 	db	105	;'i'
  1104  00FC11  3A                 	db	58	;':'
  1105  00FC12  00                 	db	0
  1106  00FC13                     STR_142:
  1107  00FC13  53                 	db	83	;'S'
  1108  00FC14  75                 	db	117	;'u'
  1109  00FC15  6D                 	db	109	;'m'
  1110  00FC16  6D                 	db	109	;'m'
  1111  00FC17  61                 	db	97	;'a'
  1112  00FC18  72                 	db	114	;'r'
  1113  00FC19  79                 	db	121	;'y'
  1114  00FC1A  20                 	db	32
  1115  00FC1B  6F                 	db	111	;'o'
  1116  00FC1C  66                 	db	102	;'f'
  1117  00FC1D  00                 	db	0
  1118  00FC1E                     STR_124:
  1119  00FC1E  50                 	db	80	;'P'
  1120  00FC1F  72                 	db	114	;'r'
  1121  00FC20  65                 	db	101	;'e'
  1122  00FC21  73                 	db	115	;'s'
  1123  00FC22  73                 	db	115	;'s'
  1124  00FC23  20                 	db	32
  1125  00FC24  23                 	db	35
  1126  00FC25  20                 	db	32
  1127  00FC26  74                 	db	116	;'t'
  1128  00FC27  6F                 	db	111	;'o'
  1129  00FC28  00                 	db	0
  1130  00FC29                     STR_44:
  1131  00FC29  72                 	db	114	;'r'
  1132  00FC2A  65                 	db	101	;'e'
  1133  00FC2B  73                 	db	115	;'s'
  1134  00FC2C  65                 	db	101	;'e'
  1135  00FC2D  72                 	db	114	;'r'
  1136  00FC2E  76                 	db	118	;'v'
  1137  00FC2F  6F                 	db	111	;'o'
  1138  00FC30  69                 	db	105	;'i'
  1139  00FC31  72                 	db	114	;'r'
  1140  00FC32  2E                 	db	46
  1141  00FC33  00                 	db	0
  1142  00FC34                     STR_121:
  1143  00FC34  61                 	db	97	;'a'
  1144  00FC35  6E                 	db	110	;'n'
  1145  00FC36  64                 	db	100	;'d'
  1146  00FC37  20                 	db	32
  1147  00FC38  74                 	db	116	;'t'
  1148  00FC39  69                 	db	105	;'i'
  1149  00FC3A  6D                 	db	109	;'m'
  1150  00FC3B  65                 	db	101	;'e'
  1151  00FC3C  3A                 	db	58	;':'
  1152  00FC3D  00                 	db	0
  1153  00FC3E                     STR_132:
  1154  00FC3E  4E                 	db	78	;'N'
  1155  00FC3F  6F                 	db	111	;'o'
  1156  00FC40  20                 	db	32
  1157  00FC41  64                 	db	100	;'d'
  1158  00FC42  72                 	db	114	;'r'
  1159  00FC43  61                 	db	97	;'a'
  1160  00FC44  77                 	db	119	;'w'
  1161  00FC45  65                 	db	101	;'e'
  1162  00FC46  72                 	db	114	;'r'
  1163  00FC47  00                 	db	0
  1164  00FC48                     STR_35:
  1165  00FC48  64                 	db	100	;'d'
  1166  00FC49  72                 	db	114	;'r'
  1167  00FC4A  61                 	db	97	;'a'
  1168  00FC4B  77                 	db	119	;'w'
  1169  00FC4C  65                 	db	101	;'e'
  1170  00FC4D  72                 	db	114	;'r'
  1171  00FC4E  20                 	db	32
  1172  00FC4F  25                 	db	37
  1173  00FC50  69                 	db	105	;'i'
  1174  00FC51  00                 	db	0
  1175  00FC52                     STR_34:
  1176  00FC52  4D                 	db	77	;'M'
  1177  00FC53  6F                 	db	111	;'o'
  1178  00FC54  76                 	db	118	;'v'
  1179  00FC55  69                 	db	105	;'i'
  1180  00FC56  6E                 	db	110	;'n'
  1181  00FC57  67                 	db	103	;'g'
  1182  00FC58  20                 	db	32
  1183  00FC59  74                 	db	116	;'t'
  1184  00FC5A  6F                 	db	111	;'o'
  1185  00FC5B  00                 	db	0
  1186  00FC5C                     STR_85:
  1187  00FC5C  6E                 	db	110	;'n'
  1188  00FC5D  75                 	db	117	;'u'
  1189  00FC5E  6D                 	db	109	;'m'
  1190  00FC5F  62                 	db	98	;'b'
  1191  00FC60  65                 	db	101	;'e'
  1192  00FC61  72                 	db	114	;'r'
  1193  00FC62  3A                 	db	58	;':'
  1194  00FC63  20                 	db	32
  1195  00FC64  00                 	db	0
  1196  00FC65                     STR_37:
  1197  00FC65  46                 	db	70	;'F'
  1198  00FC66  6F                 	db	111	;'o'
  1199  00FC67  6F                 	db	111	;'o'
  1200  00FC68  64                 	db	100	;'d'
  1201  00FC69  3A                 	db	58	;':'
  1202  00FC6A  20                 	db	32
  1203  00FC6B  25                 	db	37
  1204  00FC6C  73                 	db	115	;'s'
  1205  00FC6D  00                 	db	0
  1206  00FC6E                     STR_36:
  1207  00FC6E  44                 	db	68	;'D'
  1208  00FC6F  69                 	db	105	;'i'
  1209  00FC70  65                 	db	101	;'e'
  1210  00FC71  74                 	db	116	;'t'
  1211  00FC72  3A                 	db	58	;':'
  1212  00FC73  20                 	db	32
  1213  00FC74  25                 	db	37
  1214  00FC75  73                 	db	115	;'s'
  1215  00FC76  00                 	db	0
  1216  00FC77                     STR_135:
  1217  00FC77  69                 	db	105	;'i'
  1218  00FC78  6E                 	db	110	;'n'
  1219  00FC79  20                 	db	32
  1220  00FC7A  75                 	db	117	;'u'
  1221  00FC7B  73                 	db	115	;'s'
  1222  00FC7C  65                 	db	101	;'e'
  1223  00FC7D  21                 	db	33
  1224  00FC7E  00                 	db	0
  1225  00FC7F                     STR_143:
  1226  00FC7F  69                 	db	105	;'i'
  1227  00FC80  6E                 	db	110	;'n'
  1228  00FC81  70                 	db	112	;'p'
  1229  00FC82  75                 	db	117	;'u'
  1230  00FC83  74                 	db	116	;'t'
  1231  00FC84  73                 	db	115	;'s'
  1232  00FC85  3A                 	db	58	;':'
  1233  00FC86  00                 	db	0
  1234  00FC87                     STR_92:
  1235  00FC87  25                 	db	37
  1236  00FC88  69                 	db	105	;'i'
  1237  00FC89  3A                 	db	58	;':'
  1238  00FC8A  25                 	db	37
  1239  00FC8B  30                 	db	48	;'0'
  1240  00FC8C  32                 	db	50	;'2'
  1241  00FC8D  69                 	db	105	;'i'
  1242  00FC8E  00                 	db	0
  1243  00FC8F                     STR_76:
  1244  00FC8F  4E                 	db	78	;'N'
  1245  00FC90  6F                 	db	111	;'o'
  1246  00FC91  20                 	db	32
  1247  00FC92  6C                 	db	108	;'l'
  1248  00FC93  6F                 	db	111	;'o'
  1249  00FC94  67                 	db	103	;'g'
  1250  00FC95  73                 	db	115	;'s'
  1251  00FC96  00                 	db	0
  1252  00FC97                     STR_1:
  1253  00FC97  53                 	db	83	;'S'
  1254  00FC98  74                 	db	116	;'t'
  1255  00FC99  61                 	db	97	;'a'
  1256  00FC9A  6E                 	db	110	;'n'
  1257  00FC9B  64                 	db	100	;'d'
  1258  00FC9C  62                 	db	98	;'b'
  1259  00FC9D  79                 	db	121	;'y'
  1260  00FC9E  00                 	db	0
  1261  00FC9F                     STR_153:
  1262  00FC9F  28                 	db	40
  1263  00FCA0  6E                 	db	110	;'n'
  1264  00FCA1  75                 	db	117	;'u'
  1265  00FCA2  6C                 	db	108	;'l'
  1266  00FCA3  6C                 	db	108	;'l'
  1267  00FCA4  29                 	db	41
  1268  00FCA5  00                 	db	0
  1269  00FCA6                     STR_86:
  1270  00FCA6  47                 	db	71	;'G'
  1271  00FCA7  72                 	db	114	;'r'
  1272  00FCA8  65                 	db	101	;'e'
  1273  00FCA9  61                 	db	97	;'a'
  1274  00FCAA  74                 	db	116	;'t'
  1275  00FCAB  21                 	db	33
  1276  00FCAC  00                 	db	0
  1277  00FCAD                     STR_89:
  1278  00FCAD  44                 	db	68	;'D'
  1279  00FCAE  61                 	db	97	;'a'
  1280  00FCAF  74                 	db	116	;'t'
  1281  00FCB0  65                 	db	101	;'e'
  1282  00FCB1  3A                 	db	58	;':'
  1283  00FCB2  00                 	db	0
  1284  00FCB3                     STR_102:
  1285  00FCB3  25                 	db	37
  1286  00FCB4  73                 	db	115	;'s'
  1287  00FCB5  25                 	db	37
  1288  00FCB6  73                 	db	115	;'s'
  1289  00FCB7  00                 	db	0
  1290  00FCB8                     STR_33:
  1291  00FCB8  31                 	db	49	;'1'
  1292  00FCB9  31                 	db	49	;'1'
  1293  00FCBA  31                 	db	49	;'1'
  1294  00FCBB  31                 	db	49	;'1'
  1295  00FCBC  00                 	db	0
  1296  00FCBD                     STR_17:
  1297  00FCBD  52                 	db	82	;'R'
  1298  00FCBE  46                 	db	70	;'F'
  1299  00FCBF  46                 	db	70	;'F'
  1300  00FCC0  4C                 	db	76	;'L'
  1301  00FCC1  00                 	db	0
  1302  00FCC2                     STR_16:
  1303  00FCC2  52                 	db	82	;'R'
  1304  00FCC3  52                 	db	82	;'R'
  1305  00FCC4  46                 	db	70	;'F'
  1306  00FCC5  4C                 	db	76	;'L'
  1307  00FCC6  00                 	db	0
  1308  00FCC7                     STR_18:
  1309  00FCC7  52                 	db	82	;'R'
  1310  00FCC8  46                 	db	70	;'F'
  1311  00FCC9  4C                 	db	76	;'L'
  1312  00FCCA  4C                 	db	76	;'L'
  1313  00FCCB  00                 	db	0
  1314  00FCCC                     STR_20:
  1315  00FCCC  46                 	db	70	;'F'
  1316  00FCCD  4C                 	db	76	;'L'
  1317  00FCCE  4C                 	db	76	;'L'
  1318  00FCCF  4C                 	db	76	;'L'
  1319  00FCD0  00                 	db	0
  1320  00FCD1                     STR_19:
  1321  00FCD1  52                 	db	82	;'R'
  1322  00FCD2  4C                 	db	76	;'L'
  1323  00FCD3  4C                 	db	76	;'L'
  1324  00FCD4  4C                 	db	76	;'L'
  1325  00FCD5  00                 	db	0
  1326  00FCD6                     STR_32:
  1327  00FCD6  32                 	db	50	;'2'
  1328  00FCD7  31                 	db	49	;'1'
  1329  00FCD8  31                 	db	49	;'1'
  1330  00FCD9  00                 	db	0
  1331  00FCDA                     STR_31:
  1332  00FCDA  31                 	db	49	;'1'
  1333  00FCDB  32                 	db	50	;'2'
  1334  00FCDC  31                 	db	49	;'1'
  1335  00FCDD  00                 	db	0
  1336  00FCDE                     STR_30:
  1337  00FCDE  31                 	db	49	;'1'
  1338  00FCDF  31                 	db	49	;'1'
  1339  00FCE0  32                 	db	50	;'2'
  1340  00FCE1  00                 	db	0
  1341  00FCE2                     STR_11:
  1342  00FCE2  52                 	db	82	;'R'
  1343  00FCE3  46                 	db	70	;'F'
  1344  00FCE4  46                 	db	70	;'F'
  1345  00FCE5  00                 	db	0
  1346  00FCE6                     STR_9:
  1347  00FCE6  52                 	db	82	;'R'
  1348  00FCE7  52                 	db	82	;'R'
  1349  00FCE8  46                 	db	70	;'F'
  1350  00FCE9  00                 	db	0
  1351  00FCEA                     STR_12:
  1352  00FCEA  52                 	db	82	;'R'
  1353  00FCEB  4C                 	db	76	;'L'
  1354  00FCEC  4C                 	db	76	;'L'
  1355  00FCED  00                 	db	0
  1356  00FCEE                     STR_10:
  1357  00FCEE  52                 	db	82	;'R'
  1358  00FCEF  52                 	db	82	;'R'
  1359  00FCF0  4C                 	db	76	;'L'
  1360  00FCF1  00                 	db	0
  1361  00FCF2                     STR_42:
  1362  00FCF2  41                 	db	65	;'A'
  1363  00FCF3  72                 	db	114	;'r'
  1364  00FCF4  6D                 	db	109	;'m'
  1365  00FCF5  00                 	db	0
  1366  00FCF6                     STR_28:
  1367  00FCF6  32                 	db	50	;'2'
  1368  00FCF7  32                 	db	50	;'2'
  1369  00FCF8  00                 	db	0
  1370  00FCF9                     STR_26:
  1371  00FCF9  31                 	db	49	;'1'
  1372  00FCFA  33                 	db	51	;'3'
  1373  00FCFB  00                 	db	0
  1374  00FCFC                     STR_3:
  1375  00FCFC  52                 	db	82	;'R'
  1376  00FCFD  00                 	db	0
  1377  0000                     
  1378                           ; #config settings
  1379  00FCFE  00                 	db	0	; dummy byte at the end
  1380  0000                     
  1381                           	psect	cinit
  1382  009DD2                     __pcinit:
  1383                           	opt stack 0
  1384  009DD2                     start_initialization:
  1385                           	opt stack 0
  1386  009DD2                     __initialization:
  1387                           	opt stack 0
  1388                           
  1389                           ; Initialize objects allocated to BANK2 (62 bytes)
  1390                           ; load TBLPTR registers with __pidataBANK2
  1391  009DD2  0EE6               	movlw	low __pidataBANK2
  1392  009DD4  6EF6               	movwf	tblptrl,c
  1393  009DD6  0E98               	movlw	high __pidataBANK2
  1394  009DD8  6EF7               	movwf	tblptrh,c
  1395  009DDA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1396  009DDC  6EF8               	movwf	tblptru,c
  1397  009DDE  EE02  F050         	lfsr	0,__pdataBANK2
  1398  009DE2  EE10 F03E          	lfsr	1,62
  1399  009DE6                     copy_data0:
  1400  009DE6  0009               	tblrd		*+
  1401  009DE8  CFF5 FFEE          	movff	tablat,postinc0
  1402  009DEC  50E5               	movf	postdec1,w,c
  1403  009DEE  50E1               	movf	fsr1l,w,c
  1404  009DF0  E1FA               	bnz	copy_data0
  1405                           
  1406                           ; Initialize objects allocated to BANK0 (2 bytes)
  1407                           ; load TBLPTR registers with __pidataBANK0
  1408  009DF2  0E88               	movlw	low __pidataBANK0
  1409  009DF4  6EF6               	movwf	tblptrl,c
  1410  009DF6  0E97               	movlw	high __pidataBANK0
  1411  009DF8  6EF7               	movwf	tblptrh,c
  1412  009DFA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1413  009DFC  6EF8               	movwf	tblptru,c
  1414  009DFE  0009               	tblrd		*+	;fetch initializer
  1415  009E00  CFF5 F0F8          	movff	tablat,__pdataBANK0
  1416  009E04  0009               	tblrd		*+	;fetch initializer
  1417  009E06  CFF5 F0F9          	movff	tablat,__pdataBANK0+1
  1418                           
  1419                           ; Initialize objects allocated to COMRAM (8 bytes)
  1420                           ; load TBLPTR registers with __pidataCOMRAM
  1421  009E0A  0E9A               	movlw	low __pidataCOMRAM
  1422  009E0C  6EF6               	movwf	tblptrl,c
  1423  009E0E  0E97               	movlw	high __pidataCOMRAM
  1424  009E10  6EF7               	movwf	tblptrh,c
  1425  009E12  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1426  009E14  6EF8               	movwf	tblptru,c
  1427  009E16  EE00  F06E         	lfsr	0,__pdataCOMRAM
  1428  009E1A  EE10 F008          	lfsr	1,8
  1429  009E1E                     copy_data1:
  1430  009E1E  0009               	tblrd		*+
  1431  009E20  CFF5 FFEE          	movff	tablat,postinc0
  1432  009E24  50E5               	movf	postdec1,w,c
  1433  009E26  50E1               	movf	fsr1l,w,c
  1434  009E28  E1FA               	bnz	copy_data1
  1435                           
  1436                           ; Clear objects allocated to BANK2 (80 bytes)
  1437  009E2A  EE02  F000         	lfsr	0,__pbssBANK2
  1438  009E2E  0E50               	movlw	80
  1439  009E30                     clear_0:
  1440  009E30  6AEE               	clrf	postinc0,c
  1441  009E32  06E8               	decf	wreg,f,c
  1442  009E34  E1FD               	bnz	clear_0
  1443                           
  1444                           ; Clear objects allocated to BANK1 (116 bytes)
  1445  009E36  EE01  F08A         	lfsr	0,__pbssBANK1
  1446  009E3A  0E74               	movlw	116
  1447  009E3C                     clear_1:
  1448  009E3C  6AEE               	clrf	postinc0,c
  1449  009E3E  06E8               	decf	wreg,f,c
  1450  009E40  E1FD               	bnz	clear_1
  1451                           
  1452                           ; Clear objects allocated to BANK0 (40 bytes)
  1453  009E42  EE00  F0D0         	lfsr	0,__pbssBANK0
  1454  009E46  0E28               	movlw	40
  1455  009E48                     clear_2:
  1456  009E48  6AEE               	clrf	postinc0,c
  1457  009E4A  06E8               	decf	wreg,f,c
  1458  009E4C  E1FD               	bnz	clear_2
  1459                           
  1460                           ; Clear objects allocated to COMRAM (4 bytes)
  1461  009E4E  6A79               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1462  009E50  6A78               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1463  009E52  6A77               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1464  009E54  6A76               	clrf	__pbssCOMRAM& (0+255),c
  1465  009E56                     end_of_initialization:
  1466                           	opt stack 0
  1467  009E56                     __end_of__initialization:
  1468                           	opt stack 0
  1469  009E56  0100               	movlb	0
  1470  009E58  EF2A  F055         	goto	_main	;jump to C main() function
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           
  1480                           	psect	bssCOMRAM
  1481  000076                     __pbssCOMRAM:
  1482                           	opt stack 0
  1483  000076                     _firstIteration:
  1484                           	opt stack 0
  1485  000076                     	ds	2
  1486  000078                     _LCDinterruptState:
  1487                           	opt stack 0
  1488  000078                     	ds	1
  1489  000079                     _UARTinterruptState:
  1490                           	opt stack 0
  1491  000079                     	ds	1
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           postinc0	equ	0xFEE
  1497                           wreg	equ	0xFE8
  1498                           postdec1	equ	0xFE5
  1499                           fsr1l	equ	0xFE1
  1500                           
  1501                           	psect	dataCOMRAM
  1502  00006E                     __pdataCOMRAM:
  1503                           	opt stack 0
  1504  00006E                     _UART:
  1505                           	opt stack 0
  1506  00006E                     	ds	2
  1507  000070                     _drawerClose:
  1508                           	opt stack 0
  1509  000070                     	ds	1
  1510  000071                     _drawerOpen:
  1511                           	opt stack 0
  1512  000071                     	ds	1
  1513  000072                     _columnRight:
  1514                           	opt stack 0
  1515  000072                     	ds	1
  1516  000073                     _columnLeft:
  1517                           	opt stack 0
  1518  000073                     	ds	1
  1519  000074                     _rowDown:
  1520                           	opt stack 0
  1521  000074                     	ds	1
  1522  000075                     _rowUp:
  1523                           	opt stack 0
  1524  000075                     	ds	1
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	bssBANK0
  1535  0000D0                     __pbssBANK0:
  1536                           	opt stack 0
  1537  0000D0                     food_press@F3117:
  1538                           	opt stack 0
  1539  0000D0                     	ds	8
  1540  0000D8                     sortDrawerList@F3103:
  1541                           	opt stack 0
  1542  0000D8                     	ds	8
  1543  0000E0                     sortDrawerList@F3100:
  1544                           	opt stack 0
  1545  0000E0                     	ds	8
  1546  0000E8                     sortDrawerList@F3097:
  1547                           	opt stack 0
  1548  0000E8                     	ds	8
  1549  0000F0                     sortDrawerList@F3094:
  1550                           	opt stack 0
  1551  0000F0                     	ds	8
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	dataBANK0
  1562  0000F8                     __pdataBANK0:
  1563                           	opt stack 0
  1564  0000F8                     _drawerDown:
  1565                           	opt stack 0
  1566  0000F8                     	ds	1
  1567  0000F9                     _drawerUp:
  1568                           	opt stack 0
  1569  0000F9                     	ds	1
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	bssBANK1
  1580  00018A                     __pbssBANK1:
  1581                           	opt stack 0
  1582  00018A                     standbyMode@F3154:
  1583                           	opt stack 0
  1584  00018A                     	ds	16
  1585  00019A                     standbyMode@F3152:
  1586                           	opt stack 0
  1587  00019A                     	ds	16
  1588  0001AA                     mainOperation@F3182:
  1589                           	opt stack 0
  1590  0001AA                     	ds	16
  1591  0001BA                     mainOperation@F3180:
  1592                           	opt stack 0
  1593  0001BA                     	ds	16
  1594  0001CA                     mainOperation@F3178:
  1595                           	opt stack 0
  1596  0001CA                     	ds	16
  1597  0001DA                     mainOperation@F3176:
  1598                           	opt stack 0
  1599  0001DA                     	ds	16
  1600  0001EA                     diet_press@F3132:
  1601                           	opt stack 0
  1602  0001EA                     	ds	8
  1603  0001F2                     _uart:
  1604                           	opt stack 0
  1605  0001F2                     	ds	12
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	bssBANK2
  1616  000200                     __pbssBANK2:
  1617                           	opt stack 0
  1618  000200                     standbyMode@F3162:
  1619                           	opt stack 0
  1620  000200                     	ds	16
  1621  000210                     standbyMode@F3160:
  1622                           	opt stack 0
  1623  000210                     	ds	16
  1624  000220                     standbyMode@F3158:
  1625                           	opt stack 0
  1626  000220                     	ds	16
  1627  000230                     standbyMode@F3156:
  1628                           	opt stack 0
  1629  000230                     	ds	16
  1630  000240                     _arr_dataRX:
  1631                           	opt stack 0
  1632  000240                     	ds	16
  1633                           tblptru	equ	0xFF8
  1634                           tblptrh	equ	0xFF7
  1635                           tblptrl	equ	0xFF6
  1636                           tablat	equ	0xFF5
  1637                           postinc0	equ	0xFEE
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           
  1642                           	psect	dataBANK2
  1643  000250                     __pdataBANK2:
  1644                           	opt stack 0
  1645  000250                     _inputs:
  1646                           	opt stack 0
  1647  000250                     	ds	36
  1648  000274                     _foodInputs:
  1649                           	opt stack 0
  1650  000274                     	ds	26
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           
  1660                           	psect	cstackBANK1
  1661  000100                     __pcstackBANK1:
  1662                           	opt stack 0
  1663  000100                     standbyMode@roundPieces:
  1664                           	opt stack 0
  1665                           
  1666                           ; 16 bytes @ 0x0
  1667  000100                     	ds	16
  1668  000110                     standbyMode@flatPieces:
  1669                           	opt stack 0
  1670                           
  1671                           ; 16 bytes @ 0x10
  1672  000110                     	ds	16
  1673  000120                     standbyMode@longPieces:
  1674                           	opt stack 0
  1675                           
  1676                           ; 16 bytes @ 0x20
  1677  000120                     	ds	16
  1678  000130                     standbyMode@dietType:
  1679                           	opt stack 0
  1680                           
  1681                           ; 16 bytes @ 0x30
  1682  000130                     	ds	16
  1683  000140                     standbyMode@foodType:
  1684                           	opt stack 0
  1685                           
  1686                           ; 16 bytes @ 0x40
  1687  000140                     	ds	16
  1688  000150                     standbyMode@drawerInformation:
  1689                           	opt stack 0
  1690                           
  1691                           ; 16 bytes @ 0x50
  1692  000150                     	ds	16
  1693  000160                     standbyMode@time:
  1694                           	opt stack 0
  1695                           
  1696                           ; 7 bytes @ 0x60
  1697  000160                     	ds	7
  1698  000167                     standbyMode@firstIteration:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x67
  1702  000167                     	ds	2
  1703  000169                     standbyMode@whichKey:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x69
  1707  000169                     	ds	2
  1708  00016B                     standbyMode@keypress:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x6B
  1712  00016B                     	ds	1
  1713  00016C                     standbyMode@round:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x6C
  1717  00016C                     	ds	2
  1718  00016E                     standbyMode@flat:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x6E
  1722  00016E                     	ds	2
  1723  000170                     standbyMode@lng:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x70
  1727  000170                     	ds	2
  1728  000172                     standbyMode@decodedDiet:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x72
  1732  000172                     	ds	2
  1733  000174                     standbyMode@storedFoodType:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x74
  1737  000174                     	ds	2
  1738  000176                     standbyMode@keypress1:
  1739                           	opt stack 0
  1740                           
  1741                           ; 1 bytes @ 0x76
  1742  000176                     	ds	1
  1743  000177                     standbyMode@validDrawer:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x77
  1747  000177                     	ds	2
  1748  000179                     standbyMode@zero:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x79
  1752  000179                     	ds	2
  1753  00017B                     standbyMode@n:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x7B
  1757  00017B                     	ds	2
  1758  00017D                     standbyMode@x:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x7D
  1762  00017D                     	ds	2
  1763  00017F                     standbyMode@logNumber:
  1764                           	opt stack 0
  1765                           
  1766                           ; 1 bytes @ 0x7F
  1767  00017F                     	ds	1
  1768  000180                     standbyMode@diet:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x80
  1772  000180                     	ds	2
  1773  000182                     standbyMode@drawer:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x82
  1777  000182                     	ds	2
  1778  000184                     standbyMode@food:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x84
  1782  000184                     	ds	2
  1783  000186                     standbyMode@drawerCount:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x86
  1787  000186                     	ds	2
  1788  000188                     standbyMode@i:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x88
  1792  000188                     	ds	2
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           postdec1	equ	0xFE5
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           	psect	cstackBANK0
  1803  000080                     __pcstackBANK0:
  1804                           	opt stack 0
  1805  000080                     mainOperation@drawerTable:
  1806                           	opt stack 0
  1807                           
  1808                           ; 16 bytes @ 0x0
  1809  000080                     	ds	16
  1810  000090                     mainOperation@dietTable:
  1811                           	opt stack 0
  1812                           
  1813                           ; 16 bytes @ 0x10
  1814  000090                     	ds	16
  1815  0000A0                     mainOperation@foodTable:
  1816                           	opt stack 0
  1817                           
  1818                           ; 16 bytes @ 0x20
  1819  0000A0                     	ds	16
  1820  0000B0                     mainOperation@sortedDrawerTable:
  1821                           	opt stack 0
  1822                           
  1823                           ; 16 bytes @ 0x30
  1824  0000B0                     	ds	16
  1825  0000C0                     mainOperation@roundPieces:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x40
  1829  0000C0                     	ds	2
  1830  0000C2                     mainOperation@flatPieces:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x42
  1834  0000C2                     	ds	2
  1835  0000C4                     mainOperation@longPieces:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x44
  1839  0000C4                     	ds	2
  1840  0000C6                     mainOperation@temp:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x46
  1844  0000C6                     	ds	2
  1845  0000C8                     mainOperation@nextDrawer:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x48
  1849  0000C8                     	ds	2
  1850  0000CA                     mainOperation@currentDrawer:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x4A
  1854  0000CA                     	ds	2
  1855  0000CC                     mainOperation@trueValue:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x4C
  1859  0000CC                     	ds	2
  1860  0000CE                     mainOperation@i:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x4E
  1864  0000CE                     	ds	2
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           
  1874                           	psect	cstackCOMRAM
  1875  000001                     __pcstackCOMRAM:
  1876                           	opt stack 0
  1877  000001                     ??_isdigit:
  1878  000001                     ??_I2C_Master_Wait:
  1879  000001                     ?_findDrawerIndex:
  1880                           	opt stack 0
  1881  000001                     ?_getRoundPieces:
  1882                           	opt stack 0
  1883  000001                     ?_getFlatPieces:
  1884                           	opt stack 0
  1885  000001                     ?_getLongPieces:
  1886                           	opt stack 0
  1887  000001                     ?_check_food:
  1888                           	opt stack 0
  1889  000001                     ?_getRound:
  1890                           	opt stack 0
  1891  000001                     ?_getFlat:
  1892                           	opt stack 0
  1893  000001                     ?_getLong:
  1894                           	opt stack 0
  1895  000001                     ?_verifyKeypress:
  1896                           	opt stack 0
  1897  000001                     ?_printFoodInput:
  1898                           	opt stack 0
  1899  000001                     ?_get_digits:
  1900                           	opt stack 0
  1901  000001                     ?_decode_diet:
  1902                           	opt stack 0
  1903  000001                     ?_decode_drawer:
  1904                           	opt stack 0
  1905  000001                     ?___wmul:
  1906                           	opt stack 0
  1907  000001                     ?___lwdiv:
  1908                           	opt stack 0
  1909  000001                     ?___aldiv:
  1910                           	opt stack 0
  1911  000001                     ?___lldiv:
  1912                           	opt stack 0
  1913  000001                     writeEEPROM@data:
  1914                           	opt stack 0
  1915  000001                     readEEPROM@address:
  1916                           	opt stack 0
  1917  000001                     lcdNibble@temp:
  1918                           	opt stack 0
  1919  000001                     sortDrawerList@drawerTable:
  1920                           	opt stack 0
  1921  000001                     findDrawerIndex@drawerTable:
  1922                           	opt stack 0
  1923  000001                     getRoundPieces@dietType:
  1924                           	opt stack 0
  1925  000001                     getFlatPieces@dietType:
  1926                           	opt stack 0
  1927  000001                     getLongPieces@dietType:
  1928                           	opt stack 0
  1929  000001                     trapDoor@direction:
  1930                           	opt stack 0
  1931  000001                     check_food@sum:
  1932                           	opt stack 0
  1933  000001                     getRound@code:
  1934                           	opt stack 0
  1935  000001                     getFlat@code:
  1936                           	opt stack 0
  1937  000001                     getLong@code:
  1938                           	opt stack 0
  1939  000001                     verifyKeypress@keypress:
  1940                           	opt stack 0
  1941  000001                     printFoodInput@food:
  1942                           	opt stack 0
  1943  000001                     get_digits@sum:
  1944                           	opt stack 0
  1945  000001                     decode_diet@dietType:
  1946                           	opt stack 0
  1947  000001                     decode_drawer@drawer:
  1948                           	opt stack 0
  1949  000001                     uartTransmitBlocking@data:
  1950                           	opt stack 0
  1951  000001                     ___wmul@multiplier:
  1952                           	opt stack 0
  1953  000001                     ___lwdiv@dividend:
  1954                           	opt stack 0
  1955  000001                     ___aldiv@dividend:
  1956                           	opt stack 0
  1957  000001                     ___lldiv@dividend:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0x0
  1961  000001                     	ds	1
  1962  000002                     writeEEPROM@address:
  1963                           	opt stack 0
  1964  000002                     I2C_Master_Read@ackBit:
  1965                           	opt stack 0
  1966  000002                     lcdNibble@data:
  1967                           	opt stack 0
  1968  000002                     _isdigit$1966:
  1969                           	opt stack 0
  1970  000002                     I2C_Master_Write@byteToWrite:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x1
  1974  000002                     	ds	1
  1975  000003                     ??_shiftEEPROM:
  1976  000003                     ??_trapDoor:
  1977  000003                     ??_getRound:
  1978  000003                     ??_getFlat:
  1979  000003                     ??_getLong:
  1980  000003                     ??_verifyKeypress:
  1981  000003                     ??_get_digits:
  1982  000003                     ??_decode_diet:
  1983  000003                     ??_decode_drawer:
  1984  000003                     I2C_Master_Read@receivedByte:
  1985                           	opt stack 0
  1986  000003                     uartTransmitBlocking@numBytes:
  1987                           	opt stack 0
  1988  000003                     lcdInst@data:
  1989                           	opt stack 0
  1990  000003                     putch@data:
  1991                           	opt stack 0
  1992  000003                     isdigit@c:
  1993                           	opt stack 0
  1994  000003                     sortDrawerList@sortedDrawerTable:
  1995                           	opt stack 0
  1996  000003                     findDrawerIndex@sortedDrawerValue:
  1997                           	opt stack 0
  1998  000003                     getRoundPieces@foodType:
  1999                           	opt stack 0
  2000  000003                     getFlatPieces@foodType:
  2001                           	opt stack 0
  2002  000003                     getLongPieces@foodType:
  2003                           	opt stack 0
  2004  000003                     check_food@foodInput:
  2005                           	opt stack 0
  2006  000003                     initEEPROM@i:
  2007                           	opt stack 0
  2008  000003                     ___wmul@multiplicand:
  2009                           	opt stack 0
  2010  000003                     ___lwdiv@divisor:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x2
  2014  000003                     	ds	1
  2015  000004                     ??_initLCD:
  2016  000004                     ??_uartTransmitBlocking:
  2017  000004                     shiftEEPROM@temp:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x3
  2021  000004                     	ds	1
  2022  000005                     ??_sortDrawerList:
  2023  000005                     ??_getRoundPieces:
  2024  000005                     ??_getFlatPieces:
  2025  000005                     ??_getLongPieces:
  2026  000005                     ??_check_food:
  2027  000005                     verifyKeypress@logNumber:
  2028                           	opt stack 0
  2029  000005                     uartTransmitBlocking@numTransmits:
  2030                           	opt stack 0
  2031  000005                     trapDoor@i:
  2032                           	opt stack 0
  2033  000005                     getRound@returnValue:
  2034                           	opt stack 0
  2035  000005                     getFlat@returnValue:
  2036                           	opt stack 0
  2037  000005                     getLong@returnValue:
  2038                           	opt stack 0
  2039  000005                     get_digits@count:
  2040                           	opt stack 0
  2041  000005                     decode_diet@returnValue:
  2042                           	opt stack 0
  2043  000005                     decode_drawer@returnValue:
  2044                           	opt stack 0
  2045  000005                     ___wmul@product:
  2046                           	opt stack 0
  2047  000005                     ___lwdiv@quotient:
  2048                           	opt stack 0
  2049  000005                     ___aldiv@divisor:
  2050                           	opt stack 0
  2051  000005                     ___lldiv@divisor:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x4
  2055  000005                     	ds	1
  2056  000006                     verticalStepper@rotations:
  2057                           	opt stack 0
  2058  000006                     horizontalStepper@rotations:
  2059                           	opt stack 0
  2060  000006                     configDrawer@direction:
  2061                           	opt stack 0
  2062  000006                     verifyKeypress@returnVal:
  2063                           	opt stack 0
  2064  000006                     shiftEEPROM@i:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x5
  2068  000006                     	ds	1
  2069  000007                     ___lwdiv@counter:
  2070                           	opt stack 0
  2071  000007                     getUserInputs@drawerTable:
  2072                           	opt stack 0
  2073  000007                     findDrawerIndex@returnValue:
  2074                           	opt stack 0
  2075  000007                     getRoundPieces@returnValue:
  2076                           	opt stack 0
  2077  000007                     getFlatPieces@returnValue:
  2078                           	opt stack 0
  2079  000007                     getLongPieces@returnValue:
  2080                           	opt stack 0
  2081  000007                     distributeRound@count:
  2082                           	opt stack 0
  2083  000007                     distributeFlat@count:
  2084                           	opt stack 0
  2085  000007                     distributeLong@count:
  2086                           	opt stack 0
  2087  000007                     check_food@returnValue:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x6
  2091  000007                     	ds	1
  2092  000008                     ?___lwmod:
  2093                           	opt stack 0
  2094  000008                     verticalStepper@direction:
  2095                           	opt stack 0
  2096  000008                     horizontalStepper@direction:
  2097                           	opt stack 0
  2098  000008                     verifyKeypress@i:
  2099                           	opt stack 0
  2100  000008                     ___lwmod@dividend:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x7
  2104  000008                     	ds	1
  2105  000009                     ??_distributeRound:
  2106  000009                     ??_distributeFlat:
  2107  000009                     ??_distributeLong:
  2108  000009                     ___aldiv@counter:
  2109                           	opt stack 0
  2110  000009                     getUserInputs@dietTable:
  2111                           	opt stack 0
  2112  000009                     findDrawerIndex@i:
  2113                           	opt stack 0
  2114  000009                     ___lldiv@quotient:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x8
  2118  000009                     	ds	1
  2119  00000A                     ___aldiv@sign:
  2120                           	opt stack 0
  2121  00000A                     verticalStepper@i:
  2122                           	opt stack 0
  2123  00000A                     horizontalStepper@i:
  2124                           	opt stack 0
  2125  00000A                     distributeRound@i:
  2126                           	opt stack 0
  2127  00000A                     distributeFlat@i:
  2128                           	opt stack 0
  2129  00000A                     distributeLong@i:
  2130                           	opt stack 0
  2131  00000A                     ___lwmod@divisor:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x9
  2135  00000A                     	ds	1
  2136  00000B                     getUserInputs@foodTable:
  2137                           	opt stack 0
  2138  00000B                     ___aldiv@quotient:
  2139                           	opt stack 0
  2140  00000B                     sortDrawerList@sublist1:
  2141                           	opt stack 0
  2142                           
  2143                           ; 8 bytes @ 0xA
  2144  00000B                     	ds	1
  2145  00000C                     ?_moveVertically:
  2146                           	opt stack 0
  2147  00000C                     ___lwmod@counter:
  2148                           	opt stack 0
  2149  00000C                     moveVertically@currentDrawer:
  2150                           	opt stack 0
  2151  00000C                     moveHorizontally@currentDrawer:
  2152                           	opt stack 0
  2153  00000C                     initArm@currentDrawer:
  2154                           	opt stack 0
  2155  00000C                     distributePieces@roundPieces:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0xB
  2159  00000C                     	ds	1
  2160  00000D                     ??_getUserInputs:
  2161  00000D                     ?_printf:
  2162                           	opt stack 0
  2163  00000D                     ___lldiv@counter:
  2164                           	opt stack 0
  2165  00000D                     printf@f:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0xC
  2169  00000D                     	ds	1
  2170  00000E                     moveVertically@nextDrawer:
  2171                           	opt stack 0
  2172  00000E                     moveHorizontally@nextDrawer:
  2173                           	opt stack 0
  2174  00000E                     distributePieces@flatPieces:
  2175                           	opt stack 0
  2176  00000E                     I2C_Master_Init@clockFreq:
  2177                           	opt stack 0
  2178                           
  2179                           ; 4 bytes @ 0xD
  2180  00000E                     	ds	1
  2181  00000F                     getUserInputs@logNumber:
  2182                           	opt stack 0
  2183  00000F                     UART_Init@baud:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xE
  2187  00000F                     	ds	1
  2188  000010                     ??_moveHorizontally:
  2189  000010                     distributePieces@longPieces:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0xF
  2193  000010                     	ds	1
  2194  000011                     getUserInputs@count:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x10
  2198  000011                     	ds	1
  2199  000012                     ??_I2C_Master_Init:
  2200  000012                     ??_distributePieces:
  2201                           
  2202                           ; 1 bytes @ 0x11
  2203  000012                     	ds	1
  2204  000013                     ??_UART_Init:
  2205  000013                     getUserInputs@n:
  2206                           	opt stack 0
  2207  000013                     sortDrawerList@sublist4:
  2208                           	opt stack 0
  2209                           
  2210                           ; 8 bytes @ 0x12
  2211  000013                     	ds	2
  2212  000015                     getUserInputs@data:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x14
  2216  000015                     	ds	2
  2217  000017                     ??_printf:
  2218  000017                     getUserInputs@i:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x16
  2222  000017                     	ds	4
  2223  00001B                     printf@idx:
  2224                           	opt stack 0
  2225  00001B                     sortDrawerList@sublist2:
  2226                           	opt stack 0
  2227                           
  2228                           ; 8 bytes @ 0x1A
  2229  00001B                     	ds	1
  2230  00001C                     printf@prec:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x1B
  2234  00001C                     	ds	1
  2235  00001D                     printf@cp:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x1C
  2239  00001D                     	ds	2
  2240  00001F                     printf@ap:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x1E
  2244  00001F                     	ds	2
  2245  000021                     printf@len:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x20
  2249  000021                     	ds	2
  2250  000023                     printf@val:
  2251                           	opt stack 0
  2252  000023                     sortDrawerList@sublist3:
  2253                           	opt stack 0
  2254                           
  2255                           ; 8 bytes @ 0x22
  2256  000023                     	ds	2
  2257  000025                     printf@flag:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x24
  2261  000025                     	ds	1
  2262  000026                     printf@width:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x25
  2266  000026                     	ds	2
  2267  000028                     printf@c:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x27
  2271  000028                     	ds	1
  2272  000029                     ?_displayLogs:
  2273                           	opt stack 0
  2274  000029                     ?_food_press:
  2275                           	opt stack 0
  2276  000029                     ?_diet_press:
  2277                           	opt stack 0
  2278  000029                     ?_which_drawer:
  2279                           	opt stack 0
  2280  000029                     displayLogs@logNumber:
  2281                           	opt stack 0
  2282  000029                     food_press@dietSum:
  2283                           	opt stack 0
  2284  000029                     diet_press@drawer:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x28
  2288  000029                     	ds	2
  2289  00002B                     ??_displayLogs:
  2290  00002B                     ??_diet_press:
  2291  00002B                     ??_which_drawer:
  2292  00002B                     sortDrawerList@count4:
  2293                           	opt stack 0
  2294  00002B                     food_press@drawer:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x2A
  2298  00002B                     	ds	1
  2299  00002C                     which_drawer@rand:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x2B
  2303  00002C                     	ds	1
  2304  00002D                     ??_food_press:
  2305  00002D                     sortDrawerList@count2:
  2306                           	opt stack 0
  2307  00002D                     displayLogs@year:
  2308                           	opt stack 0
  2309  00002D                     diet_press@previous:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x2C
  2313  00002D                     	ds	1
  2314  00002E                     which_drawer@sum:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x2D
  2318  00002E                     	ds	1
  2319  00002F                     sortDrawerList@temp:
  2320                           	opt stack 0
  2321  00002F                     displayLogs@month:
  2322                           	opt stack 0
  2323  00002F                     food_press@tally:
  2324                           	opt stack 0
  2325  00002F                     diet_press@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x2E
  2329  00002F                     	ds	1
  2330  000030                     which_drawer@backCheck:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x2F
  2334  000030                     	ds	1
  2335  000031                     sortDrawerList@count1:
  2336                           	opt stack 0
  2337  000031                     displayLogs@day:
  2338                           	opt stack 0
  2339  000031                     food_press@backCheck:
  2340                           	opt stack 0
  2341  000031                     diet_press@backCheck:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x30
  2345  000031                     	ds	1
  2346  000032                     which_drawer@count:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x31
  2350  000032                     	ds	1
  2351  000033                     sortDrawerList@count3:
  2352                           	opt stack 0
  2353  000033                     displayLogs@roundPieces:
  2354                           	opt stack 0
  2355  000033                     food_press@isValid:
  2356                           	opt stack 0
  2357  000033                     diet_press@count:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x32
  2361  000033                     	ds	1
  2362  000034                     which_drawer@keypress:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x33
  2366  000034                     	ds	1
  2367  000035                     sortDrawerList@j:
  2368                           	opt stack 0
  2369  000035                     displayLogs@flatPieces:
  2370                           	opt stack 0
  2371  000035                     food_press@count:
  2372                           	opt stack 0
  2373  000035                     diet_press@sum:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x34
  2377  000035                     	ds	2
  2378  000037                     food_press@keypress:
  2379                           	opt stack 0
  2380  000037                     diet_press@keypress:
  2381                           	opt stack 0
  2382  000037                     sortDrawerList@i:
  2383                           	opt stack 0
  2384  000037                     displayLogs@longPieces:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x36
  2388  000037                     	ds	1
  2389  000038                     food_press@foodTable:
  2390                           	opt stack 0
  2391  000038                     diet_press@dietTable:
  2392                           	opt stack 0
  2393                           
  2394                           ; 8 bytes @ 0x37
  2395  000038                     	ds	1
  2396  000039                     ??_mainOperation:
  2397  000039                     displayLogs@minutes:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x38
  2401  000039                     	ds	2
  2402  00003B                     displayLogs@seconds:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x3A
  2406  00003B                     	ds	2
  2407  00003D                     displayLogs@dietType:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x3C
  2411  00003D                     	ds	2
  2412  00003F                     displayLogs@foodType:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x3E
  2416  00003F                     	ds	2
  2417  000041                     displayLogs@keypress3:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x40
  2421  000041                     	ds	1
  2422  000042                     displayLogs@operationTime:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x41
  2426  000042                     	ds	2
  2427  000044                     displayLogs@drawerNumber:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x43
  2431  000044                     	ds	2
  2432  000046                     displayLogs@i:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x45
  2436  000046                     	ds	2
  2437  000048                     displayLogs@markedDrawer1:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x47
  2441  000048                     	ds	2
  2442  00004A                     displayLogs@markedDrawer2:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x49
  2446  00004A                     	ds	2
  2447  00004C                     displayLogs@markedDrawer3:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x4B
  2451  00004C                     	ds	2
  2452  00004E                     displayLogs@markedDrawer4:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x4D
  2456  00004E                     	ds	2
  2457  000050                     displayLogs@n:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x4F
  2461  000050                     	ds	2
  2462  000052                     ?_viewLogs:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x51
  2466  000052                     	ds	2
  2467  000054                     ??_viewLogs:
  2468                           
  2469                           ; 1 bytes @ 0x53
  2470  000054                     	ds	2
  2471  000056                     viewLogs@checkLog:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x55
  2475  000056                     	ds	2
  2476  000058                     viewLogs@returnVal:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x57
  2480  000058                     	ds	2
  2481  00005A                     viewLogs@logView:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x59
  2485  00005A                     	ds	2
  2486  00005C                     viewLogs@logNumber:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0x5B
  2490  00005C                     	ds	1
  2491  00005D                     viewLogs@keypress2:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0x5C
  2495  00005D                     	ds	1
  2496  00005E                     ?_standbyMode:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x5D
  2500  00005E                     	ds	2
  2501  000060                     ??_standbyMode:
  2502                           
  2503                           ; 1 bytes @ 0x5F
  2504  000060                     	ds	4
  2505  000064                     ??_main:
  2506                           
  2507                           ; 1 bytes @ 0x63
  2508  000064                     	ds	2
  2509  000066                     main@i:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x65
  2513  000066                     	ds	2
  2514  000068                     main@l:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x67
  2518  000068                     	ds	2
  2519  00006A                     main@operationMode:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x69
  2523  00006A                     	ds	2
  2524  00006C                     main@checkEEPROM:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x6B
  2528  00006C                     	ds	2
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           
  2538 ;;
  2539 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2540 ;;
  2541 ;; *************** function _main *****************
  2542 ;; Defined at:
  2543 ;;		line 19 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  checkEEPROM     2  107[COMRAM] unsigned int 
  2548 ;;  operationMod    2  105[COMRAM] unsigned int 
  2549 ;;  l               2  103[COMRAM] unsigned int 
  2550 ;;  i               2  101[COMRAM] unsigned int 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;Total ram usage:       10 bytes
  2565 ;; Hardware stack levels required when called:    6
  2566 ;; This function calls:
  2567 ;;		_UART_Init
  2568 ;;		_initEEPROM
  2569 ;;		_initLCD
  2570 ;;		_lcdInst
  2571 ;;		_mainOperation
  2572 ;;		_printf
  2573 ;;		_readEEPROM
  2574 ;;		_standbyMode
  2575 ;; This function is called by:
  2576 ;;		Startup code after reset
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text0
  2581  00AA54                     __ptext0:
  2582                           	opt stack 0
  2583  00AA54                     _main:
  2584                           	opt stack 25
  2585                           
  2586                           ;main.c: 25: LATA = 0x00;
  2587                           
  2588                           ;incstack = 0
  2589  00AA54  0E00               	movlw	0
  2590  00AA56  6E89               	movwf	3977,c	;volatile
  2591                           
  2592                           ;main.c: 26: LATB = 0x00;
  2593  00AA58  0E00               	movlw	0
  2594  00AA5A  6E8A               	movwf	3978,c	;volatile
  2595                           
  2596                           ;main.c: 27: LATC = 0x00;
  2597  00AA5C  0E00               	movlw	0
  2598  00AA5E  6E8B               	movwf	3979,c	;volatile
  2599                           
  2600                           ;main.c: 28: LATD = 0x00;
  2601  00AA60  0E00               	movlw	0
  2602  00AA62  6E8C               	movwf	3980,c	;volatile
  2603                           
  2604                           ;main.c: 29: LATE = 0x00;
  2605  00AA64  0E00               	movlw	0
  2606  00AA66  6E8D               	movwf	3981,c	;volatile
  2607                           
  2608                           ;main.c: 33: TRISA = 0xFF;
  2609  00AA68  6892               	setf	3986,c	;volatile
  2610                           
  2611                           ;main.c: 34: TRISB = 0xFF;
  2612  00AA6A  6893               	setf	3987,c	;volatile
  2613                           
  2614                           ;main.c: 35: TRISC = 0x00;
  2615  00AA6C  0E00               	movlw	0
  2616  00AA6E  6E94               	movwf	3988,c	;volatile
  2617                           
  2618                           ;main.c: 36: TRISD = 0x00;
  2619  00AA70  0E00               	movlw	0
  2620  00AA72  6E95               	movwf	3989,c	;volatile
  2621                           
  2622                           ;main.c: 37: TRISE = 0x00;
  2623  00AA74  0E00               	movlw	0
  2624  00AA76  6E96               	movwf	3990,c	;volatile
  2625                           
  2626                           ;main.c: 40: ADCON0 = 0x00;
  2627  00AA78  0E00               	movlw	0
  2628  00AA7A  6EC2               	movwf	4034,c	;volatile
  2629                           
  2630                           ;main.c: 41: ADCON1 = 0b00001111;
  2631  00AA7C  0E0F               	movlw	15
  2632  00AA7E  6EC1               	movwf	4033,c	;volatile
  2633                           
  2634                           ;main.c: 44: initLCD();
  2635  00AA80  ECB3  F04C         	call	_initLCD	;wreg free
  2636                           
  2637                           ;main.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2638  00AA84  0E01               	movlw	1
  2639  00AA86  ECDF  F04B         	call	_lcdInst
  2640  00AA8A  0EC3               	movlw	195
  2641  00AA8C  6E64               	movwf	??_main& (0+255),c
  2642  00AA8E  0ECD               	movlw	205
  2643  00AA90                     u14207:
  2644  00AA90  2EE8               	decfsz	wreg,f,c
  2645  00AA92  D7FE               	bra	u14207
  2646  00AA94  2E64               	decfsz	??_main& (0+255),f,c
  2647  00AA96  D7FC               	bra	u14207
  2648  00AA98  F000               	nop	
  2649                           
  2650                           ;main.c: 46: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2651  00AA9A  0E0C               	movlw	12
  2652  00AA9C  ECDF  F04B         	call	_lcdInst
  2653                           
  2654                           ;main.c: 47: printf("Standby");
  2655  00AAA0  0E97               	movlw	low STR_1
  2656  00AAA2  6E0D               	movwf	printf@f,c
  2657  00AAA4  0EFC               	movlw	high STR_1
  2658  00AAA6  6E0E               	movwf	printf@f+1,c
  2659  00AAA8  ECBD  F05F         	call	_printf	;wreg free
  2660                           
  2661                           ;main.c: 50: UART_Init(9600);
  2662  00AAAC  0E80               	movlw	128
  2663  00AAAE  6E0F               	movwf	UART_Init@baud,c
  2664  00AAB0  0E25               	movlw	37
  2665  00AAB2  6E10               	movwf	UART_Init@baud+1,c
  2666  00AAB4  0E00               	movlw	0
  2667  00AAB6  6E11               	movwf	UART_Init@baud+2,c
  2668  00AAB8  0E00               	movlw	0
  2669  00AABA  6E12               	movwf	UART_Init@baud+3,c
  2670  00AABC  ECA7  F04E         	call	_UART_Init	;wreg free
  2671                           
  2672                           ;main.c: 75: unsigned int operationMode = 0;
  2673  00AAC0  0E00               	movlw	0
  2674  00AAC2  6E6B               	movwf	main@operationMode+1,c
  2675  00AAC4  0E00               	movlw	0
  2676  00AAC6  6E6A               	movwf	main@operationMode,c
  2677                           
  2678                           ;main.c: 76: unsigned int i = 0;
  2679  00AAC8  0E00               	movlw	0
  2680  00AACA  6E67               	movwf	main@i+1,c
  2681  00AACC  0E00               	movlw	0
  2682  00AACE  6E66               	movwf	main@i,c
  2683                           
  2684                           ;main.c: 77: unsigned int l = 0;
  2685  00AAD0  0E00               	movlw	0
  2686  00AAD2  6E69               	movwf	main@l+1,c
  2687  00AAD4  0E00               	movlw	0
  2688  00AAD6  6E68               	movwf	main@l,c
  2689                           
  2690                           ;main.c: 79: TRISDbits.TRISD0 = 0;
  2691  00AAD8  9095               	bcf	3989,0,c	;volatile
  2692                           
  2693                           ;main.c: 80: TRISDbits.TRISD1 = 0;
  2694  00AADA  9295               	bcf	3989,1,c	;volatile
  2695                           
  2696                           ;main.c: 81: TRISDbits.TRISD2 = 0;
  2697  00AADC  9495               	bcf	3989,2,c	;volatile
  2698                           
  2699                           ;main.c: 82: TRISDbits.TRISD3 = 0;
  2700  00AADE  9695               	bcf	3989,3,c	;volatile
  2701                           
  2702                           ;main.c: 83: TRISDbits.TRISD4 = 0;
  2703  00AAE0  9895               	bcf	3989,4,c	;volatile
  2704                           
  2705                           ;main.c: 84: TRISDbits.TRISD5 = 0;
  2706  00AAE2  9A95               	bcf	3989,5,c	;volatile
  2707                           
  2708                           ;main.c: 85: TRISDbits.TRISD6 = 0;
  2709  00AAE4  9C95               	bcf	3989,6,c	;volatile
  2710                           
  2711                           ;main.c: 86: TRISDbits.TRISD7 = 0;
  2712  00AAE6  9E95               	bcf	3989,7,c	;volatile
  2713                           
  2714                           ;main.c: 87: TRISCbits.TRISC2 = 0;
  2715  00AAE8  9494               	bcf	3988,2,c	;volatile
  2716                           
  2717                           ;main.c: 88: TRISCbits.TRISC1 = 0;
  2718  00AAEA  9294               	bcf	3988,1,c	;volatile
  2719                           
  2720                           ;main.c: 89: TRISCbits.TRISC0 = 0;
  2721  00AAEC  9094               	bcf	3988,0,c	;volatile
  2722                           
  2723                           ;main.c: 90: TRISEbits.TRISE2 = 0;
  2724  00AAEE  9496               	bcf	3990,2,c	;volatile
  2725                           
  2726                           ;main.c: 91: TRISAbits.TRISA4 = 0;
  2727  00AAF0  9892               	bcf	3986,4,c	;volatile
  2728                           
  2729                           ;main.c: 92: TRISAbits.TRISA5 = 0;
  2730  00AAF2  9A92               	bcf	3986,5,c	;volatile
  2731                           
  2732                           ;main.c: 93: TRISEbits.TRISE0 = 0;
  2733  00AAF4  9096               	bcf	3990,0,c	;volatile
  2734                           
  2735                           ;main.c: 94: TRISEbits.TRISE1 = 0;
  2736  00AAF6  9296               	bcf	3990,1,c	;volatile
  2737                           
  2738                           ;main.c: 95: LATEbits.LATE2 = 0;
  2739  00AAF8  948D               	bcf	3981,2,c	;volatile
  2740                           
  2741                           ;main.c: 96: LATCbits.LATC2 = 0;
  2742  00AAFA  948B               	bcf	3979,2,c	;volatile
  2743                           
  2744                           ;main.c: 97: LATCbits.LATC1 = 0;
  2745  00AAFC  928B               	bcf	3979,1,c	;volatile
  2746                           
  2747                           ;main.c: 98: LATCbits.LATC0 = 0;
  2748  00AAFE  908B               	bcf	3979,0,c	;volatile
  2749                           
  2750                           ;main.c: 99: LATDbits.LATD3 = 0;
  2751  00AB00  968C               	bcf	3980,3,c	;volatile
  2752                           
  2753                           ;main.c: 100: LATDbits.LATD2 = 0;
  2754  00AB02  948C               	bcf	3980,2,c	;volatile
  2755                           
  2756                           ;main.c: 101: LATDbits.LATD1 = 0;
  2757  00AB04  928C               	bcf	3980,1,c	;volatile
  2758                           
  2759                           ;main.c: 102: LATDbits.LATD0 = 0;
  2760  00AB06  908C               	bcf	3980,0,c	;volatile
  2761                           
  2762                           ;main.c: 103: LATDbits.LATD4 = 0;
  2763  00AB08  988C               	bcf	3980,4,c	;volatile
  2764                           
  2765                           ;main.c: 104: LATDbits.LATD5 = 0;
  2766  00AB0A  9A8C               	bcf	3980,5,c	;volatile
  2767                           
  2768                           ;main.c: 105: LATDbits.LATD6 = 0;
  2769  00AB0C  9C8C               	bcf	3980,6,c	;volatile
  2770                           
  2771                           ;main.c: 106: LATDbits.LATD7 = 0;
  2772  00AB0E  9E8C               	bcf	3980,7,c	;volatile
  2773                           
  2774                           ;main.c: 107: LATEbits.LATE1 = 0;
  2775  00AB10  928D               	bcf	3981,1,c	;volatile
  2776                           
  2777                           ;main.c: 108: LATEbits.LATE0 = 0;
  2778  00AB12  908D               	bcf	3981,0,c	;volatile
  2779                           
  2780                           ;main.c: 109: LATAbits.LATA4 = 0;
  2781  00AB14  9889               	bcf	3977,4,c	;volatile
  2782                           
  2783                           ;main.c: 110: LATAbits.LATA5 = 0;
  2784  00AB16  9A89               	bcf	3977,5,c	;volatile
  2785                           
  2786                           ;main.c: 175: unsigned int checkEEPROM = 0;
  2787  00AB18  0E00               	movlw	0
  2788  00AB1A  6E6D               	movwf	main@checkEEPROM+1,c
  2789  00AB1C  0E00               	movlw	0
  2790  00AB1E  6E6C               	movwf	main@checkEEPROM,c
  2791                           
  2792                           ;main.c: 177: checkEEPROM = readEEPROM(251);
  2793  00AB20  0EFB               	movlw	251
  2794  00AB22  ECE9  F04B         	call	_readEEPROM
  2795  00AB26  6E64               	movwf	??_main& (0+255),c
  2796  00AB28  5064               	movf	??_main,w,c
  2797  00AB2A  6E6C               	movwf	main@checkEEPROM,c
  2798  00AB2C  6A6D               	clrf	main@checkEEPROM+1,c
  2799                           
  2800                           ;main.c: 179: if (checkEEPROM == 255){
  2801  00AB2E  286C               	incf	main@checkEEPROM,w,c
  2802  00AB30  106D               	iorwf	main@checkEEPROM+1,w,c
  2803  00AB32  A4D8               	btfss	status,2,c
  2804  00AB34  D01F               	goto	l83
  2805                           
  2806                           ;main.c: 180: initEEPROM();
  2807  00AB36  EC1E  F04C         	call	_initEEPROM	;wreg free
  2808                           
  2809                           ;main.c: 181: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2810  00AB3A  0E01               	movlw	1
  2811  00AB3C  ECDF  F04B         	call	_lcdInst
  2812  00AB40  0EC3               	movlw	195
  2813  00AB42  6E64               	movwf	??_main& (0+255),c
  2814  00AB44  0ECD               	movlw	205
  2815  00AB46                     u14217:
  2816  00AB46  2EE8               	decfsz	wreg,f,c
  2817  00AB48  D7FE               	bra	u14217
  2818  00AB4A  2E64               	decfsz	??_main& (0+255),f,c
  2819  00AB4C  D7FC               	bra	u14217
  2820  00AB4E  F000               	nop	
  2821                           
  2822                           ;main.c: 182: printf("Clearing EEPROM");
  2823  00AB50  0EA0               	movlw	low STR_2
  2824  00AB52  6E0D               	movwf	printf@f,c
  2825  00AB54  0EFA               	movlw	high STR_2
  2826  00AB56  6E0E               	movwf	printf@f+1,c
  2827  00AB58  ECBD  F05F         	call	_printf	;wreg free
  2828                           
  2829                           ;main.c: 183: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2830  00AB5C  0E66               	movlw	102
  2831  00AB5E  6E65               	movwf	(??_main+1)& (0+255),c
  2832  00AB60  0E76               	movlw	118
  2833  00AB62  6E64               	movwf	??_main& (0+255),c
  2834  00AB64  0EC1               	movlw	193
  2835  00AB66                     u14227:
  2836  00AB66  2EE8               	decfsz	wreg,f,c
  2837  00AB68  D7FE               	bra	u14227
  2838  00AB6A  2E64               	decfsz	??_main& (0+255),f,c
  2839  00AB6C  D7FC               	bra	u14227
  2840  00AB6E  2E65               	decfsz	(??_main+1)& (0+255),f,c
  2841  00AB70  D7FA               	bra	u14227
  2842  00AB72  F000               	nop	
  2843  00AB74                     l83:
  2844                           
  2845                           ;main.c: 184: }
  2846                           ;main.c: 187: operationMode = standbyMode();
  2847  00AB74  EC28  F075         	call	_standbyMode	;wreg free
  2848  00AB78  C05E  F06A         	movff	?_standbyMode,main@operationMode
  2849  00AB7C  C05F  F06B         	movff	?_standbyMode+1,main@operationMode+1
  2850                           
  2851                           ;main.c: 189: if (operationMode == 1){
  2852  00AB80  046A               	decf	main@operationMode,w,c
  2853  00AB82  106B               	iorwf	main@operationMode+1,w,c
  2854  00AB84  B4D8               	btfsc	status,2,c
  2855                           
  2856                           ;main.c: 190: mainOperation();
  2857  00AB86  EC07  F067         	call	_mainOperation	;wreg free
  2858                           
  2859                           ;main.c: 191: }
  2860                           ;main.c: 193: firstIteration += 1;
  2861  00AB8A  4A76               	infsnz	_firstIteration,f,c
  2862  00AB8C  2A77               	incf	_firstIteration+1,f,c
  2863                           
  2864                           ;main.c: 194: return;
  2865  00AB8E  EF01  F000         	goto	start
  2866  00AB92                     __end_of_main:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _standbyMode *****************
  2879 ;; Defined at:
  2880 ;;		line 1605 in file "standbyMode.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2885 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2886 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2887 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2888 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2889 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2890 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2891 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2892 ;;  time            7   96[BANK1 ] unsigned char [7]
  2893 ;;  i               2  136[BANK1 ] unsigned int 
  2894 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2895 ;;  food            2  132[BANK1 ] unsigned int 
  2896 ;;  drawer          2  130[BANK1 ] unsigned int 
  2897 ;;  diet            2  128[BANK1 ] unsigned int 
  2898 ;;  x               2  125[BANK1 ] unsigned int 
  2899 ;;  n               2  123[BANK1 ] unsigned int 
  2900 ;;  zero            2  121[BANK1 ] unsigned int 
  2901 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2902 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2903 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2904 ;;  lng             2  112[BANK1 ] unsigned int 
  2905 ;;  flat            2  110[BANK1 ] unsigned int 
  2906 ;;  round           2  108[BANK1 ] unsigned int 
  2907 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2908 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2909 ;;  keypress        1  107[BANK1 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  2   93[COMRAM] unsigned int 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         6       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:      144 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    5
  2926 ;; This function calls:
  2927 ;;		_I2C_Master_Init
  2928 ;;		_I2C_Master_Read
  2929 ;;		_I2C_Master_Start
  2930 ;;		_I2C_Master_Stop
  2931 ;;		_I2C_Master_Write
  2932 ;;		___wmul
  2933 ;;		_decode_diet
  2934 ;;		_diet_press
  2935 ;;		_food_press
  2936 ;;		_getFlat
  2937 ;;		_getLong
  2938 ;;		_getRound
  2939 ;;		_lcdInst
  2940 ;;		_printFoodInput
  2941 ;;		_printf
  2942 ;;		_readEEPROM
  2943 ;;		_shiftEEPROM
  2944 ;;		_viewLogs
  2945 ;;		_which_drawer
  2946 ;;		_writeEEPROM
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text1
  2953  00EA50                     __ptext1:
  2954                           	opt stack 0
  2955  00EA50                     _standbyMode:
  2956                           	opt stack 25
  2957                           
  2958                           ;standbyMode.c: 1606: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2959                           
  2960                           ;incstack = 0
  2961  00EA50  EE21  F09A         	lfsr	2,standbyMode@F3152
  2962  00EA54  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2963  00EA58  0E0F               	movlw	15
  2964  00EA5A                     u13431:
  2965  00EA5A  CFDB FFE3          	movff	plusw2,plusw1
  2966  00EA5E  06E8               	decf	wreg,f,c
  2967  00EA60  E2FC               	bc	u13431
  2968                           
  2969                           ;standbyMode.c: 1607: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2970  00EA62  EE21  F08A         	lfsr	2,standbyMode@F3154
  2971  00EA66  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2972  00EA6A  0E0F               	movlw	15
  2973  00EA6C                     u13441:
  2974  00EA6C  CFDB FFE3          	movff	plusw2,plusw1
  2975  00EA70  06E8               	decf	wreg,f,c
  2976  00EA72  E2FC               	bc	u13441
  2977                           
  2978                           ;standbyMode.c: 1608: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2979  00EA74  EE22  F030         	lfsr	2,standbyMode@F3156
  2980  00EA78  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2981  00EA7C  0E0F               	movlw	15
  2982  00EA7E                     u13451:
  2983  00EA7E  CFDB FFE3          	movff	plusw2,plusw1
  2984  00EA82  06E8               	decf	wreg,f,c
  2985  00EA84  E2FC               	bc	u13451
  2986                           
  2987                           ;standbyMode.c: 1609: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2988  00EA86  EE22  F020         	lfsr	2,standbyMode@F3158
  2989  00EA8A  EE11  F020         	lfsr	1,standbyMode@longPieces
  2990  00EA8E  0E0F               	movlw	15
  2991  00EA90                     u13461:
  2992  00EA90  CFDB FFE3          	movff	plusw2,plusw1
  2993  00EA94  06E8               	decf	wreg,f,c
  2994  00EA96  E2FC               	bc	u13461
  2995                           
  2996                           ;standbyMode.c: 1610: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2997  00EA98  EE22  F010         	lfsr	2,standbyMode@F3160
  2998  00EA9C  EE11  F030         	lfsr	1,standbyMode@dietType
  2999  00EAA0  0E0F               	movlw	15
  3000  00EAA2                     u13471:
  3001  00EAA2  CFDB FFE3          	movff	plusw2,plusw1
  3002  00EAA6  06E8               	decf	wreg,f,c
  3003  00EAA8  E2FC               	bc	u13471
  3004                           
  3005                           ;standbyMode.c: 1611: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  3006  00EAAA  EE22  F000         	lfsr	2,standbyMode@F3162
  3007  00EAAE  EE11  F040         	lfsr	1,standbyMode@foodType
  3008  00EAB2  0E0F               	movlw	15
  3009  00EAB4                     u13481:
  3010  00EAB4  CFDB FFE3          	movff	plusw2,plusw1
  3011  00EAB8  06E8               	decf	wreg,f,c
  3012  00EABA  E2FC               	bc	u13481
  3013                           
  3014                           ;standbyMode.c: 1612: unsigned int drawerCount = 0;
  3015  00EABC  0E00               	movlw	0
  3016  00EABE  0101               	movlb	1	; () banked
  3017  00EAC0  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  3018  00EAC2  0E00               	movlw	0
  3019  00EAC4  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;standbyMode.c: 1613: unsigned int i = 0;
  3023  00EAC6  0E00               	movlw	0
  3024  00EAC8  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3025  00EACA  0E00               	movlw	0
  3026  00EACC  6F88               	movwf	standbyMode@i& (0+255),b
  3027                           
  3028                           ; BSR set to: 1
  3029                           ;standbyMode.c: 1614: unsigned int validDrawer = 0;
  3030  00EACE  0E00               	movlw	0
  3031  00EAD0  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3032  00EAD2  0E00               	movlw	0
  3033  00EAD4  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3034                           
  3035                           ; BSR set to: 1
  3036                           ;standbyMode.c: 1615: unsigned int zero = 0;
  3037  00EAD6  0E00               	movlw	0
  3038  00EAD8  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3039  00EADA  0E00               	movlw	0
  3040  00EADC  6F79               	movwf	standbyMode@zero& (0+255),b
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;standbyMode.c: 1616: unsigned int firstIteration = 0;
  3044  00EADE  0E00               	movlw	0
  3045  00EAE0  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3046  00EAE2  0E00               	movlw	0
  3047  00EAE4  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;standbyMode.c: 1617: unsigned int drawer = 0;
  3051  00EAE6  0E00               	movlw	0
  3052  00EAE8  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3053  00EAEA  0E00               	movlw	0
  3054  00EAEC  6F82               	movwf	standbyMode@drawer& (0+255),b
  3055                           
  3056                           ; BSR set to: 1
  3057                           ;standbyMode.c: 1618: unsigned int diet = 0;
  3058  00EAEE  0E00               	movlw	0
  3059  00EAF0  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3060  00EAF2  0E00               	movlw	0
  3061  00EAF4  6F80               	movwf	standbyMode@diet& (0+255),b
  3062                           
  3063                           ; BSR set to: 1
  3064                           ;standbyMode.c: 1619: unsigned int food = 0;
  3065  00EAF6  0E00               	movlw	0
  3066  00EAF8  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3067  00EAFA  0E00               	movlw	0
  3068  00EAFC  6F84               	movwf	standbyMode@food& (0+255),b
  3069                           
  3070                           ; BSR set to: 1
  3071                           ;standbyMode.c: 1620: unsigned char logNumber = 0;
  3072  00EAFE  0E00               	movlw	0
  3073  00EB00  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  3074                           
  3075                           ; BSR set to: 1
  3076                           ;standbyMode.c: 1621: unsigned int n = 0;
  3077  00EB02  0E00               	movlw	0
  3078  00EB04  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  3079  00EB06  0E00               	movlw	0
  3080  00EB08  6F7B               	movwf	standbyMode@n& (0+255),b
  3081                           
  3082                           ; BSR set to: 1
  3083                           ;standbyMode.c: 1622: unsigned int round = 0;
  3084  00EB0A  0E00               	movlw	0
  3085  00EB0C  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  3086  00EB0E  0E00               	movlw	0
  3087  00EB10  6F6C               	movwf	standbyMode@round& (0+255),b
  3088                           
  3089                           ; BSR set to: 1
  3090                           ;standbyMode.c: 1623: unsigned int flat = 0;
  3091  00EB12  0E00               	movlw	0
  3092  00EB14  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  3093  00EB16  0E00               	movlw	0
  3094  00EB18  6F6E               	movwf	standbyMode@flat& (0+255),b
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;standbyMode.c: 1624: unsigned int lng = 0;
  3098  00EB1A  0E00               	movlw	0
  3099  00EB1C  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  3100  00EB1E  0E00               	movlw	0
  3101  00EB20  6F70               	movwf	standbyMode@lng& (0+255),b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;standbyMode.c: 1625: unsigned int decodedDiet = 0;
  3105  00EB22  0E00               	movlw	0
  3106  00EB24  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  3107  00EB26  0E00               	movlw	0
  3108  00EB28  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  3109                           
  3110                           ; BSR set to: 1
  3111                           ;standbyMode.c: 1626: unsigned int storedFoodType = 0;
  3112  00EB2A  0E00               	movlw	0
  3113  00EB2C  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  3114  00EB2E  0E00               	movlw	0
  3115  00EB30  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;standbyMode.c: 1628: unsigned char time[7];
  3119                           ;standbyMode.c: 1629: unsigned int x = 0;
  3120  00EB32  0E00               	movlw	0
  3121  00EB34  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3122  00EB36  0E00               	movlw	0
  3123  00EB38  6F7D               	movwf	standbyMode@x& (0+255),b
  3124                           
  3125                           ; BSR set to: 1
  3126                           ;standbyMode.c: 1632: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3127  00EB3A  0E01               	movlw	1
  3128  00EB3C  ECDF  F04B         	call	_lcdInst
  3129  00EB40  0EC3               	movlw	195
  3130  00EB42  6E60               	movwf	??_standbyMode& (0+255),c
  3131  00EB44  0ECD               	movlw	205
  3132  00EB46                     u14237:
  3133  00EB46  2EE8               	decfsz	wreg,f,c
  3134  00EB48  D7FE               	bra	u14237
  3135  00EB4A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3136  00EB4C  D7FC               	bra	u14237
  3137  00EB4E  F000               	nop	
  3138                           
  3139                           ;standbyMode.c: 1633: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3140  00EB50  0E0C               	movlw	12
  3141  00EB52  ECDF  F04B         	call	_lcdInst
  3142                           
  3143                           ;standbyMode.c: 1634: printf("Standby");
  3144  00EB56  0E97               	movlw	low STR_1
  3145  00EB58  6E0D               	movwf	printf@f,c
  3146  00EB5A  0EFC               	movlw	high STR_1
  3147  00EB5C  6E0E               	movwf	printf@f+1,c
  3148  00EB5E  ECBD  F05F         	call	_printf	;wreg free
  3149                           
  3150                           ;standbyMode.c: 1635: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3151  00EB62  0E66               	movlw	102
  3152  00EB64  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3153  00EB66  0E76               	movlw	118
  3154  00EB68  6E60               	movwf	??_standbyMode& (0+255),c
  3155  00EB6A  0EC1               	movlw	193
  3156  00EB6C                     u14247:
  3157  00EB6C  2EE8               	decfsz	wreg,f,c
  3158  00EB6E  D7FE               	bra	u14247
  3159  00EB70  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3160  00EB72  D7FC               	bra	u14247
  3161  00EB74  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3162  00EB76  D7FA               	bra	u14247
  3163  00EB78  F000               	nop	
  3164                           
  3165                           ;standbyMode.c: 1636: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3166  00EB7A  0E01               	movlw	1
  3167  00EB7C  ECDF  F04B         	call	_lcdInst
  3168  00EB80  0EC3               	movlw	195
  3169  00EB82  6E60               	movwf	??_standbyMode& (0+255),c
  3170  00EB84  0ECD               	movlw	205
  3171  00EB86                     u14257:
  3172  00EB86  2EE8               	decfsz	wreg,f,c
  3173  00EB88  D7FE               	bra	u14257
  3174  00EB8A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3175  00EB8C  D7FC               	bra	u14257
  3176  00EB8E  F000               	nop	
  3177                           
  3178                           ;standbyMode.c: 1637: printf("Press any key to");
  3179  00EB90  0EDE               	movlw	low STR_80
  3180  00EB92  6E0D               	movwf	printf@f,c
  3181  00EB94  0EF9               	movlw	high STR_80
  3182  00EB96  6E0E               	movwf	printf@f+1,c
  3183  00EB98  ECBD  F05F         	call	_printf	;wreg free
  3184                           
  3185                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  3186  00EB9C  0EC0               	movlw	192
  3187  00EB9E  ECDF  F04B         	call	_lcdInst
  3188                           
  3189                           ;standbyMode.c: 1639: printf("begin operation.");
  3190  00EBA2  0E9A               	movlw	low STR_117
  3191  00EBA4  6E0D               	movwf	printf@f,c
  3192  00EBA6  0EF9               	movlw	high STR_117
  3193  00EBA8  6E0E               	movwf	printf@f+1,c
  3194  00EBAA  ECBD  F05F         	call	_printf	;wreg free
  3195  00EBAE                     
  3196                           ;standbyMode.c: 1642: continue;
  3197  00EBAE  A281               	btfss	3969,1,c	;volatile
  3198  00EBB0  D7FE               	goto	l1246
  3199                           
  3200                           ;standbyMode.c: 1643: }
  3201                           ;standbyMode.c: 1646: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3202  00EBB2  0E01               	movlw	1
  3203  00EBB4  ECDF  F04B         	call	_lcdInst
  3204  00EBB8  0EC3               	movlw	195
  3205  00EBBA  6E60               	movwf	??_standbyMode& (0+255),c
  3206  00EBBC  0ECD               	movlw	205
  3207  00EBBE                     u14267:
  3208  00EBBE  2EE8               	decfsz	wreg,f,c
  3209  00EBC0  D7FE               	bra	u14267
  3210  00EBC2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3211  00EBC4  D7FC               	bra	u14267
  3212  00EBC6  F000               	nop	
  3213                           
  3214                           ;standbyMode.c: 1647: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3215  00EBC8  0E0C               	movlw	12
  3216  00EBCA  ECDF  F04B         	call	_lcdInst
  3217                           
  3218                           ;standbyMode.c: 1648: printf("Welcome to your");
  3219  00EBCE  0E70               	movlw	low STR_118
  3220  00EBD0  6E0D               	movwf	printf@f,c
  3221  00EBD2  0EFA               	movlw	high STR_118
  3222  00EBD4  6E0E               	movwf	printf@f+1,c
  3223  00EBD6  ECBD  F05F         	call	_printf	;wreg free
  3224                           
  3225                           ;standbyMode.c: 1649: lcdInst(0xC0);;
  3226  00EBDA  0EC0               	movlw	192
  3227  00EBDC  ECDF  F04B         	call	_lcdInst
  3228                           
  3229                           ;standbyMode.c: 1650: printf("cabinet sorter!");
  3230  00EBE0  0E00               	movlw	low STR_119
  3231  00EBE2  6E0D               	movwf	printf@f,c
  3232  00EBE4  0EFA               	movlw	high STR_119
  3233  00EBE6  6E0E               	movwf	printf@f+1,c
  3234  00EBE8  ECBD  F05F         	call	_printf	;wreg free
  3235                           
  3236                           ;standbyMode.c: 1651: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3237  00EBEC  0E33               	movlw	51
  3238  00EBEE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3239  00EBF0  0EBB               	movlw	187
  3240  00EBF2  6E60               	movwf	??_standbyMode& (0+255),c
  3241  00EBF4  0EE0               	movlw	224
  3242  00EBF6                     u14277:
  3243  00EBF6  2EE8               	decfsz	wreg,f,c
  3244  00EBF8  D7FE               	bra	u14277
  3245  00EBFA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3246  00EBFC  D7FC               	bra	u14277
  3247  00EBFE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3248  00EC00  D7FA               	bra	u14277
  3249                           
  3250                           ;standbyMode.c: 1654: writeEEPROM(250, 3);
  3251  00EC02  0E03               	movlw	3
  3252  00EC04  6E01               	movwf	writeEEPROM@data,c
  3253  00EC06  0EFA               	movlw	250
  3254  00EC08  EC44  F04C         	call	_writeEEPROM
  3255                           
  3256                           ;standbyMode.c: 1655: writeEEPROM(0, 18);
  3257  00EC0C  0E12               	movlw	18
  3258  00EC0E  6E01               	movwf	writeEEPROM@data,c
  3259  00EC10  0E00               	movlw	0
  3260  00EC12  EC44  F04C         	call	_writeEEPROM
  3261                           
  3262                           ;standbyMode.c: 1656: writeEEPROM(1, 2);
  3263  00EC16  0E02               	movlw	2
  3264  00EC18  6E01               	movwf	writeEEPROM@data,c
  3265  00EC1A  0E01               	movlw	1
  3266  00EC1C  EC44  F04C         	call	_writeEEPROM
  3267                           
  3268                           ;standbyMode.c: 1657: writeEEPROM(2, 28);
  3269  00EC20  0E1C               	movlw	28
  3270  00EC22  6E01               	movwf	writeEEPROM@data,c
  3271  00EC24  0E02               	movlw	2
  3272  00EC26  EC44  F04C         	call	_writeEEPROM
  3273                           
  3274                           ;standbyMode.c: 1658: writeEEPROM(3, 91);
  3275  00EC2A  0E5B               	movlw	91
  3276  00EC2C  6E01               	movwf	writeEEPROM@data,c
  3277  00EC2E  0E03               	movlw	3
  3278  00EC30  EC44  F04C         	call	_writeEEPROM
  3279                           
  3280                           ;standbyMode.c: 1659: writeEEPROM(4, 3);
  3281  00EC34  0E03               	movlw	3
  3282  00EC36  6E01               	movwf	writeEEPROM@data,c
  3283  00EC38  0E04               	movlw	4
  3284  00EC3A  EC44  F04C         	call	_writeEEPROM
  3285                           
  3286                           ;standbyMode.c: 1660: writeEEPROM(5, 15);
  3287  00EC3E  0E0F               	movlw	15
  3288  00EC40  6E01               	movwf	writeEEPROM@data,c
  3289  00EC42  0E05               	movlw	5
  3290  00EC44  EC44  F04C         	call	_writeEEPROM
  3291                           
  3292                           ;standbyMode.c: 1661: writeEEPROM(6, 8);
  3293  00EC48  0E08               	movlw	8
  3294  00EC4A  6E01               	movwf	writeEEPROM@data,c
  3295  00EC4C  0E06               	movlw	6
  3296  00EC4E  EC44  F04C         	call	_writeEEPROM
  3297                           
  3298                           ;standbyMode.c: 1662: writeEEPROM(7, 12);
  3299  00EC52  0E0C               	movlw	12
  3300  00EC54  6E01               	movwf	writeEEPROM@data,c
  3301  00EC56  0E07               	movlw	7
  3302  00EC58  EC44  F04C         	call	_writeEEPROM
  3303                           
  3304                           ;standbyMode.c: 1663: writeEEPROM(8, 1);
  3305  00EC5C  0E01               	movlw	1
  3306  00EC5E  6E01               	movwf	writeEEPROM@data,c
  3307  00EC60  0E08               	movlw	8
  3308  00EC62  EC44  F04C         	call	_writeEEPROM
  3309                           
  3310                           ;standbyMode.c: 1664: writeEEPROM(9, 13);
  3311  00EC66  0E0D               	movlw	13
  3312  00EC68  6E01               	movwf	writeEEPROM@data,c
  3313  00EC6A  0E09               	movlw	9
  3314  00EC6C  EC44  F04C         	call	_writeEEPROM
  3315                           
  3316                           ;standbyMode.c: 1665: writeEEPROM(10, 0);
  3317  00EC70  0E00               	movlw	0
  3318  00EC72  6E01               	movwf	writeEEPROM@data,c
  3319  00EC74  0E0A               	movlw	10
  3320  00EC76  EC44  F04C         	call	_writeEEPROM
  3321                           
  3322                           ;standbyMode.c: 1675: I2C_Master_Init(100000);
  3323  00EC7A  0EA0               	movlw	160
  3324  00EC7C  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  3325  00EC7E  0E86               	movlw	134
  3326  00EC80  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  3327  00EC82  0E01               	movlw	1
  3328  00EC84  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  3329  00EC86  0E00               	movlw	0
  3330  00EC88  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  3331  00EC8A  EC59  F04D         	call	_I2C_Master_Init	;wreg free
  3332                           
  3333                           ;standbyMode.c: 1676: I2C_Master_Start();
  3334  00EC8E  ECC5  F04B         	call	_I2C_Master_Start	;wreg free
  3335                           
  3336                           ;standbyMode.c: 1677: I2C_Master_Write(0b11010001);
  3337  00EC92  0E00               	movlw	0
  3338  00EC94  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3339  00EC96  0ED1               	movlw	209
  3340  00EC98  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3341  00EC9A  ECD1  F04B         	call	_I2C_Master_Write	;wreg free
  3342                           
  3343                           ;standbyMode.c: 1678: for(x = 0; x < 6; x++){
  3344  00EC9E  0E00               	movlw	0
  3345  00ECA0  0101               	movlb	1	; () banked
  3346  00ECA2  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3347  00ECA4  0E00               	movlw	0
  3348  00ECA6  6F7D               	movwf	standbyMode@x& (0+255),b
  3349  00ECA8                     l10228:
  3350                           
  3351                           ; BSR set to: 1
  3352  00ECA8  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  3353  00ECAA  E112               	bnz	l10238
  3354  00ECAC  0E06               	movlw	6
  3355  00ECAE  5D7D               	subwf	standbyMode@x& (0+255),w,b
  3356  00ECB0  B0D8               	btfsc	status,0,c
  3357  00ECB2  D00E               	goto	u13510
  3358                           
  3359                           ; BSR set to: 1
  3360                           ;standbyMode.c: 1679: time[x] = I2C_Master_Read(0);
  3361                           
  3362                           ; BSR set to: 1
  3363                           
  3364                           ; BSR set to: 1
  3365  00ECB4  0E60               	movlw	low standbyMode@time
  3366  00ECB6  257D               	addwf	standbyMode@x& (0+255),w,b
  3367  00ECB8  6ED9               	movwf	fsr2l,c
  3368  00ECBA  0E01               	movlw	high standbyMode@time
  3369  00ECBC  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  3370  00ECBE  6EDA               	movwf	fsr2h,c
  3371  00ECC0  0E00               	movlw	0
  3372  00ECC2  EC0C  F04C         	call	_I2C_Master_Read
  3373  00ECC6  6EDF               	movwf	indf2,c
  3374  00ECC8  0101               	movlb	1	; () banked
  3375  00ECCA  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  3376  00ECCC  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  3377  00ECCE  D7EC               	goto	l10228
  3378  00ECD0                     u13510:
  3379  00ECD0                     l10238:
  3380                           
  3381                           ; BSR set to: 1
  3382                           ;standbyMode.c: 1680: }
  3383                           ;standbyMode.c: 1681: time[6] = I2C_Master_Read(1);
  3384  00ECD0  0E01               	movlw	1
  3385  00ECD2  EC0C  F04C         	call	_I2C_Master_Read
  3386  00ECD6  0101               	movlb	1	; () banked
  3387  00ECD8  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  3388                           
  3389                           ;standbyMode.c: 1682: I2C_Master_Stop();
  3390  00ECDA  ECC9  F04B         	call	_I2C_Master_Stop	;wreg free
  3391                           
  3392                           ;standbyMode.c: 1684: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3393  00ECDE  0E01               	movlw	1
  3394  00ECE0  ECDF  F04B         	call	_lcdInst
  3395  00ECE4  0EC3               	movlw	195
  3396  00ECE6  6E60               	movwf	??_standbyMode& (0+255),c
  3397  00ECE8  0ECD               	movlw	205
  3398  00ECEA                     u14287:
  3399  00ECEA  2EE8               	decfsz	wreg,f,c
  3400  00ECEC  D7FE               	bra	u14287
  3401  00ECEE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3402  00ECF0  D7FC               	bra	u14287
  3403  00ECF2  F000               	nop	
  3404                           
  3405                           ;standbyMode.c: 1685: printf("Current date");
  3406  00ECF4  0EC2               	movlw	low STR_120
  3407  00ECF6  6E0D               	movwf	printf@f,c
  3408  00ECF8  0EFB               	movlw	high STR_120
  3409  00ECFA  6E0E               	movwf	printf@f+1,c
  3410  00ECFC  ECBD  F05F         	call	_printf	;wreg free
  3411                           
  3412                           ;standbyMode.c: 1686: lcdInst(0xC0);;
  3413  00ED00  0EC0               	movlw	192
  3414  00ED02  ECDF  F04B         	call	_lcdInst
  3415                           
  3416                           ;standbyMode.c: 1687: printf("and time:");
  3417  00ED06  0E34               	movlw	low STR_121
  3418  00ED08  6E0D               	movwf	printf@f,c
  3419  00ED0A  0EFC               	movlw	high STR_121
  3420  00ED0C  6E0E               	movwf	printf@f+1,c
  3421  00ED0E  ECBD  F05F         	call	_printf	;wreg free
  3422                           
  3423                           ;standbyMode.c: 1688: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3424  00ED12  0E66               	movlw	102
  3425  00ED14  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3426  00ED16  0E76               	movlw	118
  3427  00ED18  6E60               	movwf	??_standbyMode& (0+255),c
  3428  00ED1A  0EC1               	movlw	193
  3429  00ED1C                     u14297:
  3430  00ED1C  2EE8               	decfsz	wreg,f,c
  3431  00ED1E  D7FE               	bra	u14297
  3432  00ED20  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3433  00ED22  D7FC               	bra	u14297
  3434  00ED24  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3435  00ED26  D7FA               	bra	u14297
  3436  00ED28  F000               	nop	
  3437                           
  3438                           ;standbyMode.c: 1690: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3439  00ED2A  0E01               	movlw	1
  3440  00ED2C  ECDF  F04B         	call	_lcdInst
  3441  00ED30  0EC3               	movlw	195
  3442  00ED32  6E60               	movwf	??_standbyMode& (0+255),c
  3443  00ED34  0ECD               	movlw	205
  3444  00ED36                     u14307:
  3445  00ED36  2EE8               	decfsz	wreg,f,c
  3446  00ED38  D7FE               	bra	u14307
  3447  00ED3A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3448  00ED3C  D7FC               	bra	u14307
  3449  00ED3E  F000               	nop	
  3450                           
  3451                           ;standbyMode.c: 1691: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  3452  00ED40  0E19               	movlw	low STR_122
  3453  00ED42  6E0D               	movwf	printf@f,c
  3454  00ED44  0EFB               	movlw	high STR_122
  3455  00ED46  6E0E               	movwf	printf@f+1,c
  3456  00ED48  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  3457  00ED4C  6A10               	clrf	?_printf+3,c
  3458  00ED4E  C165  F011         	movff	standbyMode@time+5,?_printf+4
  3459  00ED52  6A12               	clrf	?_printf+5,c
  3460  00ED54  C164  F013         	movff	standbyMode@time+4,?_printf+6
  3461  00ED58  6A14               	clrf	?_printf+7,c
  3462  00ED5A  ECBD  F05F         	call	_printf	;wreg free
  3463                           
  3464                           ;standbyMode.c: 1692: lcdInst(0xC0);;
  3465  00ED5E  0EC0               	movlw	192
  3466  00ED60  ECDF  F04B         	call	_lcdInst
  3467                           
  3468                           ;standbyMode.c: 1693: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3469  00ED64  0E28               	movlw	low STR_123
  3470  00ED66  6E0D               	movwf	printf@f,c
  3471  00ED68  0EFB               	movlw	high STR_123
  3472  00ED6A  6E0E               	movwf	printf@f+1,c
  3473  00ED6C  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  3474  00ED70  6A10               	clrf	?_printf+3,c
  3475  00ED72  C161  F011         	movff	standbyMode@time+1,?_printf+4
  3476  00ED76  6A12               	clrf	?_printf+5,c
  3477  00ED78  C160  F013         	movff	standbyMode@time,?_printf+6
  3478  00ED7C  6A14               	clrf	?_printf+7,c
  3479  00ED7E  ECBD  F05F         	call	_printf	;wreg free
  3480                           
  3481                           ;standbyMode.c: 1694: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3482  00ED82  0E66               	movlw	102
  3483  00ED84  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3484  00ED86  0E76               	movlw	118
  3485  00ED88  6E60               	movwf	??_standbyMode& (0+255),c
  3486  00ED8A  0EC1               	movlw	193
  3487  00ED8C                     u14317:
  3488  00ED8C  2EE8               	decfsz	wreg,f,c
  3489  00ED8E  D7FE               	bra	u14317
  3490  00ED90  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3491  00ED92  D7FC               	bra	u14317
  3492  00ED94  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3493  00ED96  D7FA               	bra	u14317
  3494  00ED98  F000               	nop	
  3495                           
  3496                           ;standbyMode.c: 1697: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3497  00ED9A  0E01               	movlw	1
  3498  00ED9C  ECDF  F04B         	call	_lcdInst
  3499  00EDA0  0EC3               	movlw	195
  3500  00EDA2  6E60               	movwf	??_standbyMode& (0+255),c
  3501  00EDA4  0ECD               	movlw	205
  3502  00EDA6                     u14327:
  3503  00EDA6  2EE8               	decfsz	wreg,f,c
  3504  00EDA8  D7FE               	bra	u14327
  3505  00EDAA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3506  00EDAC  D7FC               	bra	u14327
  3507  00EDAE  F000               	nop	
  3508                           
  3509                           ;standbyMode.c: 1698: printf("Press # to");
  3510  00EDB0  0E1E               	movlw	low STR_124
  3511  00EDB2  6E0D               	movwf	printf@f,c
  3512  00EDB4  0EFC               	movlw	high STR_124
  3513  00EDB6  6E0E               	movwf	printf@f+1,c
  3514  00EDB8  ECBD  F05F         	call	_printf	;wreg free
  3515                           
  3516                           ;standbyMode.c: 1699: lcdInst(0xC0);;
  3517  00EDBC  0EC0               	movlw	192
  3518  00EDBE  ECDF  F04B         	call	_lcdInst
  3519                           
  3520                           ;standbyMode.c: 1700: printf("view logs,");
  3521  00EDC2  0EDC               	movlw	low STR_125
  3522  00EDC4  6E0D               	movwf	printf@f,c
  3523  00EDC6  0EFB               	movlw	high STR_125
  3524  00EDC8  6E0E               	movwf	printf@f+1,c
  3525  00EDCA  ECBD  F05F         	call	_printf	;wreg free
  3526                           
  3527                           ;standbyMode.c: 1701: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3528  00EDCE  0E66               	movlw	102
  3529  00EDD0  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3530  00EDD2  0E76               	movlw	118
  3531  00EDD4  6E60               	movwf	??_standbyMode& (0+255),c
  3532  00EDD6  0EC1               	movlw	193
  3533  00EDD8                     u14337:
  3534  00EDD8  2EE8               	decfsz	wreg,f,c
  3535  00EDDA  D7FE               	bra	u14337
  3536  00EDDC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3537  00EDDE  D7FC               	bra	u14337
  3538  00EDE0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3539  00EDE2  D7FA               	bra	u14337
  3540  00EDE4  F000               	nop	
  3541                           
  3542                           ;standbyMode.c: 1702: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3543  00EDE6  0E01               	movlw	1
  3544  00EDE8  ECDF  F04B         	call	_lcdInst
  3545  00EDEC  0EC3               	movlw	195
  3546  00EDEE  6E60               	movwf	??_standbyMode& (0+255),c
  3547  00EDF0  0ECD               	movlw	205
  3548  00EDF2                     u14347:
  3549  00EDF2  2EE8               	decfsz	wreg,f,c
  3550  00EDF4  D7FE               	bra	u14347
  3551  00EDF6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3552  00EDF8  D7FC               	bra	u14347
  3553  00EDFA  F000               	nop	
  3554                           
  3555                           ;standbyMode.c: 1703: printf("or press D to");
  3556  00EDFC  0E8D               	movlw	low STR_126
  3557  00EDFE  6E0D               	movwf	printf@f,c
  3558  00EE00  0EFB               	movlw	high STR_126
  3559  00EE02  6E0E               	movwf	printf@f+1,c
  3560  00EE04  ECBD  F05F         	call	_printf	;wreg free
  3561                           
  3562                           ;standbyMode.c: 1704: lcdInst(0xC0);;
  3563  00EE08  0EC0               	movlw	192
  3564  00EE0A  ECDF  F04B         	call	_lcdInst
  3565                           
  3566                           ;standbyMode.c: 1705: printf("begin operation.");
  3567  00EE0E  0E9A               	movlw	low STR_117
  3568  00EE10  6E0D               	movwf	printf@f,c
  3569  00EE12  0EF9               	movlw	high STR_117
  3570  00EE14  6E0E               	movwf	printf@f+1,c
  3571  00EE16  ECBD  F05F         	call	_printf	;wreg free
  3572  00EE1A  A281               	btfss	3969,1,c	;volatile
  3573  00EE1C  D7FE               	goto	l1251
  3574                           
  3575                           ;standbyMode.c: 1708: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3576  00EE1E  3881               	swapf	3969,w,c	;volatile
  3577  00EE20  0B0F               	andlw	15
  3578  00EE22  0B0F               	andlw	15
  3579  00EE24  0101               	movlb	1	; () banked
  3580  00EE26  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3581  00EE28                     
  3582                           ; BSR set to: 1
  3583  00EE28  B281               	btfsc	3969,1,c	;volatile
  3584  00EE2A  D7FE               	goto	l1254
  3585                           
  3586                           ;standbyMode.c: 1711: if (keypress == 15){
  3587  00EE2C  0E0F               	movlw	15
  3588  00EE2E  0101               	movlb	1	; () banked
  3589  00EE30  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3590  00EE32  A4D8               	btfss	status,2,c
  3591  00EE34  EF01  F07C         	goto	l1256
  3592  00EE38                     u13540:
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;standbyMode.c: 1755: if (firstIteration == 1){
  3596                           
  3597                           ; BSR set to: 1
  3598                           
  3599                           ;standbyMode.c: 1754: while (1){
  3600  00EE38  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3601  00EE3A  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3602  00EE3C  A4D8               	btfss	status,2,c
  3603  00EE3E  D1D9               	goto	l1258
  3604  00EE40                     u13550:
  3605                           
  3606                           ; BSR set to: 1
  3607                           ;standbyMode.c: 1758: if(drawerCount >= 8){
  3608                           
  3609                           ; BSR set to: 1
  3610                           
  3611                           ;standbyMode.c: 1756: while (1){
  3612  00EE40  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3613  00EE42  E104               	bnz	u13560
  3614  00EE44  0E08               	movlw	8
  3615  00EE46  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3616  00EE48  A0D8               	btfss	status,0,c
  3617  00EE4A  D02A               	goto	l1260
  3618  00EE4C                     u13560:
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;standbyMode.c: 1759: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3622  00EE4C  0E01               	movlw	1
  3623  00EE4E  ECDF  F04B         	call	_lcdInst
  3624  00EE52  0EC3               	movlw	195
  3625  00EE54  6E60               	movwf	??_standbyMode& (0+255),c
  3626  00EE56  0ECD               	movlw	205
  3627  00EE58                     u14357:
  3628  00EE58  2EE8               	decfsz	wreg,f,c
  3629  00EE5A  D7FE               	bra	u14357
  3630  00EE5C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3631  00EE5E  D7FC               	bra	u14357
  3632  00EE60  F000               	nop	
  3633                           
  3634                           ;standbyMode.c: 1760: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3635  00EE62  0E0C               	movlw	12
  3636  00EE64  ECDF  F04B         	call	_lcdInst
  3637                           
  3638                           ;standbyMode.c: 1761: printf("Maximum of 8");
  3639  00EE68  0EA8               	movlw	low STR_128
  3640  00EE6A  6E0D               	movwf	printf@f,c
  3641  00EE6C  0EFB               	movlw	high STR_128
  3642  00EE6E  6E0E               	movwf	printf@f+1,c
  3643  00EE70  ECBD  F05F         	call	_printf	;wreg free
  3644                           
  3645                           ;standbyMode.c: 1762: lcdInst(0xC0);;
  3646  00EE74  0EC0               	movlw	192
  3647  00EE76  ECDF  F04B         	call	_lcdInst
  3648                           
  3649                           ;standbyMode.c: 1763: printf("drawers reached!");
  3650  00EE7A  0E89               	movlw	low STR_129
  3651  00EE7C  6E0D               	movwf	printf@f,c
  3652  00EE7E  0EF9               	movlw	high STR_129
  3653  00EE80  6E0E               	movwf	printf@f+1,c
  3654  00EE82  ECBD  F05F         	call	_printf	;wreg free
  3655                           
  3656                           ;standbyMode.c: 1764: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3657  00EE86  0E66               	movlw	102
  3658  00EE88  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3659  00EE8A  0E76               	movlw	118
  3660  00EE8C  6E60               	movwf	??_standbyMode& (0+255),c
  3661  00EE8E  0EC1               	movlw	193
  3662  00EE90                     u14367:
  3663  00EE90  2EE8               	decfsz	wreg,f,c
  3664  00EE92  D7FE               	bra	u14367
  3665  00EE94  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3666  00EE96  D7FC               	bra	u14367
  3667  00EE98  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3668  00EE9A  D7FA               	bra	u14367
  3669  00EE9C  F000               	nop	
  3670                           
  3671                           ;standbyMode.c: 1765: break;
  3672  00EE9E  D328               	goto	l1286
  3673  00EEA0                     l1260:
  3674                           
  3675                           ;standbyMode.c: 1766: }
  3676                           ;standbyMode.c: 1768: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3677  00EEA0  0E01               	movlw	1
  3678  00EEA2  ECDF  F04B         	call	_lcdInst
  3679  00EEA6  0EC3               	movlw	195
  3680  00EEA8  6E60               	movwf	??_standbyMode& (0+255),c
  3681  00EEAA  0ECD               	movlw	205
  3682  00EEAC                     u14377:
  3683  00EEAC  2EE8               	decfsz	wreg,f,c
  3684  00EEAE  D7FE               	bra	u14377
  3685  00EEB0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3686  00EEB2  D7FC               	bra	u14377
  3687  00EEB4  F000               	nop	
  3688                           
  3689                           ;standbyMode.c: 1769: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3690  00EEB6  0E0C               	movlw	12
  3691  00EEB8  ECDF  F04B         	call	_lcdInst
  3692                           
  3693                           ;standbyMode.c: 1770: printf("Another drawer?");
  3694  00EEBC  0E60               	movlw	low STR_130
  3695  00EEBE  6E0D               	movwf	printf@f,c
  3696  00EEC0  0EFA               	movlw	high STR_130
  3697  00EEC2  6E0E               	movwf	printf@f+1,c
  3698  00EEC4  ECBD  F05F         	call	_printf	;wreg free
  3699                           
  3700                           ;standbyMode.c: 1771: lcdInst(0xC0);;
  3701  00EEC8  0EC0               	movlw	192
  3702  00EECA  ECDF  F04B         	call	_lcdInst
  3703                           
  3704                           ;standbyMode.c: 1772: printf("# = No, D = Yes");
  3705  00EECE  0E80               	movlw	low STR_104
  3706  00EED0  6E0D               	movwf	printf@f,c
  3707  00EED2  0EFA               	movlw	high STR_104
  3708  00EED4  6E0E               	movwf	printf@f+1,c
  3709  00EED6  ECBD  F05F         	call	_printf	;wreg free
  3710  00EEDA  A281               	btfss	3969,1,c	;volatile
  3711  00EEDC  D7FE               	goto	l1264
  3712                           
  3713                           ;standbyMode.c: 1775: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3714  00EEDE  3881               	swapf	3969,w,c	;volatile
  3715  00EEE0  0B0F               	andlw	15
  3716  00EEE2  0B0F               	andlw	15
  3717  00EEE4  0101               	movlb	1	; () banked
  3718  00EEE6  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3719  00EEE8                     
  3720                           ; BSR set to: 1
  3721  00EEE8  B281               	btfsc	3969,1,c	;volatile
  3722  00EEEA  D7FE               	goto	l1267
  3723                           
  3724                           ;standbyMode.c: 1778: if (keypress1 == 15){
  3725  00EEEC  0E0F               	movlw	15
  3726  00EEEE  0101               	movlb	1	; () banked
  3727  00EEF0  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3728  00EEF2  A4D8               	btfss	status,2,c
  3729  00EEF4  D177               	goto	l1269
  3730  00EEF6                     u13590:
  3731                           
  3732                           ; BSR set to: 1
  3733                           
  3734                           ; BSR set to: 1
  3735                           
  3736                           ;standbyMode.c: 1779: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3737  00EEF6  0E01               	movlw	1
  3738  00EEF8  ECDF  F04B         	call	_lcdInst
  3739  00EEFC  0EC3               	movlw	195
  3740  00EEFE  6E60               	movwf	??_standbyMode& (0+255),c
  3741  00EF00  0ECD               	movlw	205
  3742  00EF02                     u14387:
  3743  00EF02  2EE8               	decfsz	wreg,f,c
  3744  00EF04  D7FE               	bra	u14387
  3745  00EF06  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3746  00EF08  D7FC               	bra	u14387
  3747  00EF0A  F000               	nop	
  3748                           
  3749                           ;standbyMode.c: 1780: drawer = which_drawer();
  3750  00EF0C  ECB4  F059         	call	_which_drawer	;wreg free
  3751  00EF10  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3752  00EF14  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3753                           
  3754                           ;standbyMode.c: 1782: if (drawer == 100){
  3755  00EF18  0E64               	movlw	100
  3756  00EF1A  0101               	movlb	1	; () banked
  3757  00EF1C  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3758  00EF1E  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3759  00EF20  A4D8               	btfss	status,2,c
  3760  00EF22  D005               	goto	l1271
  3761                           
  3762                           ; BSR set to: 1
  3763                           ;standbyMode.c: 1783: drawer = 0;
  3764  00EF24  0E00               	movlw	0
  3765  00EF26  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3766  00EF28  0E00               	movlw	0
  3767  00EF2A  6F82               	movwf	standbyMode@drawer& (0+255),b
  3768                           
  3769                           ;standbyMode.c: 1784: goto DRAWER_BACK;
  3770  00EF2C  D7B9               	goto	l1260
  3771  00EF2E                     l1271:
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;standbyMode.c: 1785: }
  3775                           ;standbyMode.c: 1787: for (i=0; i<8; i++){
  3776                           
  3777                           ; BSR set to: 1
  3778  00EF2E  0E00               	movlw	0
  3779  00EF30  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3780  00EF32  0E00               	movlw	0
  3781  00EF34  6F88               	movwf	standbyMode@i& (0+255),b
  3782  00EF36                     l10326:
  3783                           
  3784                           ; BSR set to: 1
  3785  00EF36  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3786  00EF38  E12C               	bnz	l10342
  3787  00EF3A  0E08               	movlw	8
  3788  00EF3C  5D88               	subwf	standbyMode@i& (0+255),w,b
  3789  00EF3E  B0D8               	btfsc	status,0,c
  3790  00EF40  D028               	goto	u13640
  3791                           
  3792                           ; BSR set to: 1
  3793                           ;standbyMode.c: 1788: if (drawerInformation[i] == drawer){
  3794                           
  3795                           ; BSR set to: 1
  3796                           
  3797                           ; BSR set to: 1
  3798  00EF42  90D8               	bcf	status,0,c
  3799  00EF44  3588               	rlcf	standbyMode@i& (0+255),w,b
  3800  00EF46  6ED9               	movwf	fsr2l,c
  3801  00EF48  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3802  00EF4A  6EDA               	movwf	fsr2h,c
  3803  00EF4C  0E50               	movlw	low standbyMode@drawerInformation
  3804  00EF4E  26D9               	addwf	fsr2l,f,c
  3805  00EF50  0E01               	movlw	high standbyMode@drawerInformation
  3806  00EF52  22DA               	addwfc	fsr2h,f,c
  3807  00EF54  5182               	movf	standbyMode@drawer& (0+255),w,b
  3808  00EF56  18DE               	xorwf	postinc2,w,c
  3809  00EF58  E119               	bnz	l10338
  3810  00EF5A  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3811  00EF5C  18DE               	xorwf	postinc2,w,c
  3812  00EF5E  A4D8               	btfss	status,2,c
  3813  00EF60  D015               	goto	l1275
  3814                           
  3815                           ; BSR set to: 1
  3816                           ;standbyMode.c: 1789: validDrawer = 1;
  3817  00EF62  0E00               	movlw	0
  3818  00EF64  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3819  00EF66  0E01               	movlw	1
  3820  00EF68  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3821                           
  3822                           ; BSR set to: 1
  3823                           ;standbyMode.c: 1790: if (drawerInformation[i] == 0){
  3824  00EF6A  90D8               	bcf	status,0,c
  3825  00EF6C  3588               	rlcf	standbyMode@i& (0+255),w,b
  3826  00EF6E  6ED9               	movwf	fsr2l,c
  3827  00EF70  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3828  00EF72  6EDA               	movwf	fsr2h,c
  3829  00EF74  0E50               	movlw	low standbyMode@drawerInformation
  3830  00EF76  26D9               	addwf	fsr2l,f,c
  3831  00EF78  0E01               	movlw	high standbyMode@drawerInformation
  3832  00EF7A  22DA               	addwfc	fsr2h,f,c
  3833  00EF7C  50DE               	movf	postinc2,w,c
  3834  00EF7E  10DE               	iorwf	postinc2,w,c
  3835  00EF80  A4D8               	btfss	status,2,c
  3836  00EF82  D004               	goto	l1275
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;standbyMode.c: 1791: zero = 1;
  3840  00EF84  0E00               	movlw	0
  3841  00EF86  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3842  00EF88  0E01               	movlw	1
  3843  00EF8A  6F79               	movwf	standbyMode@zero& (0+255),b
  3844  00EF8C                     l1275:
  3845  00EF8C                     l10338:
  3846                           
  3847                           ; BSR set to: 1
  3848  00EF8C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3849  00EF8E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3850  00EF90  D7D2               	goto	l10326
  3851  00EF92                     u13640:
  3852  00EF92                     l10342:
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;standbyMode.c: 1792: }
  3856                           ;standbyMode.c: 1793: }
  3857                           ;standbyMode.c: 1794: }
  3858                           ;standbyMode.c: 1795: if (validDrawer == 1){
  3859  00EF92  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3860  00EF94  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3861  00EF96  A4D8               	btfss	status,2,c
  3862  00EF98  D062               	goto	l1276
  3863                           
  3864                           ; BSR set to: 1
  3865                           ;standbyMode.c: 1796: if (zero == 1){
  3866  00EF9A  0579               	decf	standbyMode@zero& (0+255),w,b
  3867  00EF9C  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3868  00EF9E  A4D8               	btfss	status,2,c
  3869  00EFA0  D02F               	goto	l1277
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;standbyMode.c: 1797: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3873  00EFA2  0E01               	movlw	1
  3874  00EFA4  ECDF  F04B         	call	_lcdInst
  3875  00EFA8  0EC3               	movlw	195
  3876  00EFAA  6E60               	movwf	??_standbyMode& (0+255),c
  3877  00EFAC  0ECD               	movlw	205
  3878  00EFAE                     u14397:
  3879  00EFAE  2EE8               	decfsz	wreg,f,c
  3880  00EFB0  D7FE               	bra	u14397
  3881  00EFB2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3882  00EFB4  D7FC               	bra	u14397
  3883  00EFB6  F000               	nop	
  3884                           
  3885                           ;standbyMode.c: 1798: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3886  00EFB8  0E0C               	movlw	12
  3887  00EFBA  ECDF  F04B         	call	_lcdInst
  3888                           
  3889                           ;standbyMode.c: 1799: printf("No drawer");
  3890  00EFBE  0E3E               	movlw	low STR_132
  3891  00EFC0  6E0D               	movwf	printf@f,c
  3892  00EFC2  0EFC               	movlw	high STR_132
  3893  00EFC4  6E0E               	movwf	printf@f+1,c
  3894  00EFC6  ECBD  F05F         	call	_printf	;wreg free
  3895                           
  3896                           ;standbyMode.c: 1800: lcdInst(0xC0);;
  3897  00EFCA  0EC0               	movlw	192
  3898  00EFCC  ECDF  F04B         	call	_lcdInst
  3899                           
  3900                           ;standbyMode.c: 1801: printf("number pressed.");
  3901  00EFD0  0E10               	movlw	low STR_133
  3902  00EFD2  6E0D               	movwf	printf@f,c
  3903  00EFD4  0EFA               	movlw	high STR_133
  3904  00EFD6  6E0E               	movwf	printf@f+1,c
  3905  00EFD8  ECBD  F05F         	call	_printf	;wreg free
  3906                           
  3907                           ;standbyMode.c: 1802: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3908  00EFDC  0E66               	movlw	102
  3909  00EFDE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3910  00EFE0  0E76               	movlw	118
  3911  00EFE2  6E60               	movwf	??_standbyMode& (0+255),c
  3912  00EFE4  0EC1               	movlw	193
  3913  00EFE6                     u14407:
  3914  00EFE6  2EE8               	decfsz	wreg,f,c
  3915  00EFE8  D7FE               	bra	u14407
  3916  00EFEA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3917  00EFEC  D7FC               	bra	u14407
  3918  00EFEE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3919  00EFF0  D7FA               	bra	u14407
  3920  00EFF2  F000               	nop	
  3921                           
  3922                           ;standbyMode.c: 1803: zero = 0;
  3923  00EFF4  0E00               	movlw	0
  3924  00EFF6  0101               	movlb	1	; () banked
  3925  00EFF8  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3926  00EFFA  0E00               	movlw	0
  3927  00EFFC  6F79               	movwf	standbyMode@zero& (0+255),b
  3928                           
  3929                           ;standbyMode.c: 1804: }
  3930  00EFFE  D029               	goto	l1278
  3931  00F000                     l1277:
  3932                           
  3933                           ; BSR set to: 1
  3934                           ;standbyMode.c: 1805: else{
  3935                           ;standbyMode.c: 1806: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3936                           
  3937                           ; BSR set to: 1
  3938  00F000  0E01               	movlw	1
  3939  00F002  ECDF  F04B         	call	_lcdInst
  3940  00F006  0EC3               	movlw	195
  3941  00F008  6E60               	movwf	??_standbyMode& (0+255),c
  3942  00F00A  0ECD               	movlw	205
  3943  00F00C                     u14417:
  3944  00F00C  2EE8               	decfsz	wreg,f,c
  3945  00F00E  D7FE               	bra	u14417
  3946  00F010  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3947  00F012  D7FC               	bra	u14417
  3948  00F014  F000               	nop	
  3949                           
  3950                           ;standbyMode.c: 1807: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3951  00F016  0E0C               	movlw	12
  3952  00F018  ECDF  F04B         	call	_lcdInst
  3953                           
  3954                           ;standbyMode.c: 1808: printf("Drawer already");
  3955  00F01C  0E37               	movlw	low STR_134
  3956  00F01E  6E0D               	movwf	printf@f,c
  3957  00F020  0EFB               	movlw	high STR_134
  3958  00F022  6E0E               	movwf	printf@f+1,c
  3959  00F024  ECBD  F05F         	call	_printf	;wreg free
  3960                           
  3961                           ;standbyMode.c: 1809: lcdInst(0xC0);;
  3962  00F028  0EC0               	movlw	192
  3963  00F02A  ECDF  F04B         	call	_lcdInst
  3964                           
  3965                           ;standbyMode.c: 1810: printf("in use!");
  3966  00F02E  0E77               	movlw	low STR_135
  3967  00F030  6E0D               	movwf	printf@f,c
  3968  00F032  0EFC               	movlw	high STR_135
  3969  00F034  6E0E               	movwf	printf@f+1,c
  3970  00F036  ECBD  F05F         	call	_printf	;wreg free
  3971                           
  3972                           ;standbyMode.c: 1811: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3973  00F03A  0E66               	movlw	102
  3974  00F03C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3975  00F03E  0E76               	movlw	118
  3976  00F040  6E60               	movwf	??_standbyMode& (0+255),c
  3977  00F042  0EC1               	movlw	193
  3978  00F044                     u14427:
  3979  00F044  2EE8               	decfsz	wreg,f,c
  3980  00F046  D7FE               	bra	u14427
  3981  00F048  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3982  00F04A  D7FC               	bra	u14427
  3983  00F04C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3984  00F04E  D7FA               	bra	u14427
  3985  00F050  F000               	nop	
  3986  00F052                     l1278:
  3987                           
  3988                           ;standbyMode.c: 1812: }
  3989                           ;standbyMode.c: 1813: validDrawer = 0;
  3990  00F052  0E00               	movlw	0
  3991  00F054  0101               	movlb	1	; () banked
  3992  00F056  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3993  00F058  0E00               	movlw	0
  3994  00F05A  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3995                           
  3996                           ;standbyMode.c: 1814: continue;
  3997  00F05C  D6F1               	goto	u13550
  3998  00F05E                     l1276:
  3999                           
  4000                           ; BSR set to: 1
  4001                           
  4002                           ; BSR set to: 1
  4003                           
  4004                           ;standbyMode.c: 1816: else{
  4005                           ;standbyMode.c: 1817: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4006                           
  4007                           ; BSR set to: 1
  4008  00F05E  0E01               	movlw	1
  4009  00F060  ECDF  F04B         	call	_lcdInst
  4010  00F064  0EC3               	movlw	195
  4011  00F066  6E60               	movwf	??_standbyMode& (0+255),c
  4012  00F068  0ECD               	movlw	205
  4013  00F06A                     u14437:
  4014  00F06A  2EE8               	decfsz	wreg,f,c
  4015  00F06C  D7FE               	bra	u14437
  4016  00F06E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4017  00F070  D7FC               	bra	u14437
  4018  00F072  F000               	nop	
  4019                           
  4020                           ;standbyMode.c: 1818: diet = diet_press(drawer);
  4021  00F074  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4022  00F078  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4023  00F07C  ECB6  F061         	call	_diet_press	;wreg free
  4024  00F080  C029  F180         	movff	?_diet_press,standbyMode@diet
  4025  00F084  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4026                           
  4027                           ;standbyMode.c: 1819: if (diet == 100){
  4028  00F088  0E64               	movlw	100
  4029  00F08A  0101               	movlb	1	; () banked
  4030  00F08C  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4031  00F08E  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4032  00F090  A4D8               	btfss	status,2,c
  4033  00F092  D005               	goto	l1282
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;standbyMode.c: 1820: diet = 0;
  4037  00F094  0E00               	movlw	0
  4038  00F096  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4039  00F098  0E00               	movlw	0
  4040  00F09A  6F80               	movwf	standbyMode@diet& (0+255),b
  4041                           
  4042                           ;standbyMode.c: 1821: goto DIET_BACK1;
  4043  00F09C  D72C               	goto	u13590
  4044  00F09E                     l1282:
  4045                           
  4046                           ; BSR set to: 1
  4047                           ;standbyMode.c: 1822: }
  4048                           ;standbyMode.c: 1824: food = food_press(diet, drawer);
  4049                           
  4050                           ; BSR set to: 1
  4051  00F09E  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4052  00F0A2  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4053  00F0A6  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4054  00F0AA  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4055  00F0AE  ECB7  F058         	call	_food_press	;wreg free
  4056  00F0B2  C029  F184         	movff	?_food_press,standbyMode@food
  4057  00F0B6  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4058                           
  4059                           ;standbyMode.c: 1825: if (food == 100){
  4060  00F0BA  0E64               	movlw	100
  4061  00F0BC  0101               	movlb	1	; () banked
  4062  00F0BE  1984               	xorwf	standbyMode@food& (0+255),w,b
  4063  00F0C0  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4064  00F0C2  A4D8               	btfss	status,2,c
  4065  00F0C4  D009               	goto	l1283
  4066                           
  4067                           ; BSR set to: 1
  4068                           ;standbyMode.c: 1826: diet = 0;
  4069  00F0C6  0E00               	movlw	0
  4070  00F0C8  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4071  00F0CA  0E00               	movlw	0
  4072  00F0CC  6F80               	movwf	standbyMode@diet& (0+255),b
  4073                           
  4074                           ;standbyMode.c: 1827: food = 0;
  4075  00F0CE  0E00               	movlw	0
  4076  00F0D0  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4077  00F0D2  0E00               	movlw	0
  4078  00F0D4  6F84               	movwf	standbyMode@food& (0+255),b
  4079                           
  4080                           ;standbyMode.c: 1828: goto FOOD_BACK1;
  4081  00F0D6  D7C3               	goto	l1276
  4082  00F0D8                     l1283:
  4083                           
  4084                           ; BSR set to: 1
  4085                           ;standbyMode.c: 1829: }
  4086                           ;standbyMode.c: 1831: drawerInformation[drawerCount] = drawer;
  4087                           
  4088                           ; BSR set to: 1
  4089  00F0D8  90D8               	bcf	status,0,c
  4090  00F0DA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4091  00F0DC  6ED9               	movwf	fsr2l,c
  4092  00F0DE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4093  00F0E0  6EDA               	movwf	fsr2h,c
  4094  00F0E2  0E50               	movlw	low standbyMode@drawerInformation
  4095  00F0E4  26D9               	addwf	fsr2l,f,c
  4096  00F0E6  0E01               	movlw	high standbyMode@drawerInformation
  4097  00F0E8  22DA               	addwfc	fsr2h,f,c
  4098  00F0EA  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4099  00F0EE  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4100                           
  4101                           ; BSR set to: 1
  4102                           ;standbyMode.c: 1832: decodedDiet = decode_diet(diet);
  4103  00F0F2  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4104  00F0F6  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4105  00F0FA  EC00  F054         	call	_decode_diet	;wreg free
  4106  00F0FE  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4107  00F102  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4108                           
  4109                           ;standbyMode.c: 1833: dietType[drawerCount] = decodedDiet;
  4110  00F106  90D8               	bcf	status,0,c
  4111  00F108  0101               	movlb	1	; () banked
  4112  00F10A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4113  00F10C  6ED9               	movwf	fsr2l,c
  4114  00F10E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4115  00F110  6EDA               	movwf	fsr2h,c
  4116  00F112  0E30               	movlw	low standbyMode@dietType
  4117  00F114  26D9               	addwf	fsr2l,f,c
  4118  00F116  0E01               	movlw	high standbyMode@dietType
  4119  00F118  22DA               	addwfc	fsr2h,f,c
  4120  00F11A  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4121  00F11E  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4122                           
  4123                           ;standbyMode.c: 1834: storedFoodType = printFoodInput(food);
  4124  00F122  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4125  00F126  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4126  00F12A  ECBF  F05A         	call	_printFoodInput	;wreg free
  4127  00F12E  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4128  00F132  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4129                           
  4130                           ;standbyMode.c: 1835: foodType[drawerCount] = storedFoodType;
  4131  00F136  90D8               	bcf	status,0,c
  4132  00F138  0101               	movlb	1	; () banked
  4133  00F13A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4134  00F13C  6ED9               	movwf	fsr2l,c
  4135  00F13E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4136  00F140  6EDA               	movwf	fsr2h,c
  4137  00F142  0E40               	movlw	low standbyMode@foodType
  4138  00F144  26D9               	addwf	fsr2l,f,c
  4139  00F146  0E01               	movlw	high standbyMode@foodType
  4140  00F148  22DA               	addwfc	fsr2h,f,c
  4141  00F14A  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4142  00F14E  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4143                           
  4144                           ; BSR set to: 1
  4145                           ;standbyMode.c: 1838: round = getRound(food);
  4146  00F152  C184  F001         	movff	standbyMode@food,getRound@code
  4147  00F156  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4148  00F15A  EC70  F052         	call	_getRound	;wreg free
  4149  00F15E  C001  F16C         	movff	?_getRound,standbyMode@round
  4150  00F162  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4151                           
  4152                           ;standbyMode.c: 1839: flat = getFlat(food);
  4153  00F166  C184  F001         	movff	standbyMode@food,getFlat@code
  4154  00F16A  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4155  00F16E  ECF8  F051         	call	_getFlat	;wreg free
  4156  00F172  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4157  00F176  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4158                           
  4159                           ;standbyMode.c: 1840: lng = getLong(food);
  4160  00F17A  C184  F001         	movff	standbyMode@food,getLong@code
  4161  00F17E  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4162  00F182  ECE8  F052         	call	_getLong	;wreg free
  4163  00F186  C001  F170         	movff	?_getLong,standbyMode@lng
  4164  00F18A  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4165                           
  4166                           ;standbyMode.c: 1841: roundPieces[drawerCount] = round;
  4167  00F18E  90D8               	bcf	status,0,c
  4168  00F190  0101               	movlb	1	; () banked
  4169  00F192  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4170  00F194  6ED9               	movwf	fsr2l,c
  4171  00F196  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4172  00F198  6EDA               	movwf	fsr2h,c
  4173  00F19A  0E00               	movlw	low standbyMode@roundPieces
  4174  00F19C  26D9               	addwf	fsr2l,f,c
  4175  00F19E  0E01               	movlw	high standbyMode@roundPieces
  4176  00F1A0  22DA               	addwfc	fsr2h,f,c
  4177  00F1A2  C16C  FFDE         	movff	standbyMode@round,postinc2
  4178  00F1A6  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4179                           
  4180                           ;standbyMode.c: 1842: flatPieces[drawerCount] = flat;
  4181  00F1AA  90D8               	bcf	status,0,c
  4182  00F1AC  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4183  00F1AE  6ED9               	movwf	fsr2l,c
  4184  00F1B0  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4185  00F1B2  6EDA               	movwf	fsr2h,c
  4186  00F1B4  0E10               	movlw	low standbyMode@flatPieces
  4187  00F1B6  26D9               	addwf	fsr2l,f,c
  4188  00F1B8  0E01               	movlw	high standbyMode@flatPieces
  4189  00F1BA  22DA               	addwfc	fsr2h,f,c
  4190  00F1BC  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4191  00F1C0  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4192                           
  4193                           ;standbyMode.c: 1843: longPieces[drawerCount] = lng;
  4194  00F1C4  90D8               	bcf	status,0,c
  4195  00F1C6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4196  00F1C8  6ED9               	movwf	fsr2l,c
  4197  00F1CA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4198  00F1CC  6EDA               	movwf	fsr2h,c
  4199  00F1CE  0E20               	movlw	low standbyMode@longPieces
  4200  00F1D0  26D9               	addwf	fsr2l,f,c
  4201  00F1D2  0E01               	movlw	high standbyMode@longPieces
  4202  00F1D4  22DA               	addwfc	fsr2h,f,c
  4203  00F1D6  C170  FFDE         	movff	standbyMode@lng,postinc2
  4204  00F1DA  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4205                           
  4206                           ; BSR set to: 1
  4207                           ;standbyMode.c: 1844: drawerCount += 1;
  4208  00F1DE  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4209  00F1E0  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4210                           
  4211                           ; BSR set to: 1
  4212                           ;standbyMode.c: 1845: }
  4213                           ;standbyMode.c: 1846: }
  4214  00F1E2  D004               	goto	l1285
  4215  00F1E4                     l1269:
  4216                           
  4217                           ; BSR set to: 1
  4218                           ;standbyMode.c: 1847: else if (keypress1 == 14){
  4219                           
  4220                           ; BSR set to: 1
  4221  00F1E4  0E0E               	movlw	14
  4222  00F1E6  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  4223  00F1E8  B4D8               	btfsc	status,2,c
  4224  00F1EA  D182               	goto	l1286
  4225  00F1EC                     l1285:
  4226                           
  4227                           ; BSR set to: 1
  4228                           ;standbyMode.c: 1849: }
  4229                           ;standbyMode.c: 1850: keypress1 = 0;
  4230                           
  4231                           ; BSR set to: 1
  4232                           
  4233                           ; BSR set to: 1
  4234  00F1EC  0E00               	movlw	0
  4235  00F1EE  6F76               	movwf	standbyMode@keypress1& (0+255),b
  4236                           
  4237                           ; BSR set to: 1
  4238  00F1F0  D627               	goto	u13550
  4239  00F1F2                     l1258:
  4240                           
  4241                           ; BSR set to: 1
  4242                           
  4243                           ; BSR set to: 1
  4244                           
  4245                           ;standbyMode.c: 1854: else{
  4246                           ;standbyMode.c: 1855: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4247                           
  4248                           ; BSR set to: 1
  4249  00F1F2  0E01               	movlw	1
  4250  00F1F4  ECDF  F04B         	call	_lcdInst
  4251  00F1F8  0EC3               	movlw	195
  4252  00F1FA  6E60               	movwf	??_standbyMode& (0+255),c
  4253  00F1FC  0ECD               	movlw	205
  4254  00F1FE                     u14447:
  4255  00F1FE  2EE8               	decfsz	wreg,f,c
  4256  00F200  D7FE               	bra	u14447
  4257  00F202  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4258  00F204  D7FC               	bra	u14447
  4259  00F206  F000               	nop	
  4260                           
  4261                           ;standbyMode.c: 1856: drawer = which_drawer();
  4262  00F208  ECB4  F059         	call	_which_drawer	;wreg free
  4263  00F20C  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  4264  00F210  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  4265                           
  4266                           ;standbyMode.c: 1858: if (drawer == 100){
  4267  00F214  0E64               	movlw	100
  4268  00F216  0101               	movlb	1	; () banked
  4269  00F218  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  4270  00F21A  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  4271  00F21C  A4D8               	btfss	status,2,c
  4272  00F21E  D009               	goto	l1289
  4273                           
  4274                           ; BSR set to: 1
  4275                           ;standbyMode.c: 1859: drawer = 0;
  4276  00F220  0E00               	movlw	0
  4277  00F222  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  4278  00F224  0E00               	movlw	0
  4279  00F226  6F82               	movwf	standbyMode@drawer& (0+255),b
  4280                           
  4281                           ;standbyMode.c: 1860: firstIteration = 1;
  4282  00F228  0E00               	movlw	0
  4283  00F22A  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4284  00F22C  0E01               	movlw	1
  4285  00F22E  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4286                           
  4287                           ;standbyMode.c: 1861: goto DRAWER_BACK;
  4288  00F230  D637               	goto	l1260
  4289  00F232                     l1289:
  4290                           
  4291                           ; BSR set to: 1
  4292                           ;standbyMode.c: 1862: }
  4293                           ;standbyMode.c: 1864: firstIteration = 1;
  4294                           
  4295                           ; BSR set to: 1
  4296  00F232  0E00               	movlw	0
  4297  00F234  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4298  00F236  0E01               	movlw	1
  4299  00F238  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4300                           
  4301                           ;standbyMode.c: 1865: for (i=0; i<8; i++){
  4302  00F23A  0E00               	movlw	0
  4303  00F23C  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4304  00F23E  0E00               	movlw	0
  4305  00F240  6F88               	movwf	standbyMode@i& (0+255),b
  4306  00F242                     l10432:
  4307                           
  4308                           ; BSR set to: 1
  4309  00F242  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4310  00F244  E12C               	bnz	l10448
  4311  00F246  0E08               	movlw	8
  4312  00F248  5D88               	subwf	standbyMode@i& (0+255),w,b
  4313  00F24A  B0D8               	btfsc	status,0,c
  4314  00F24C  D028               	goto	u13740
  4315                           
  4316                           ; BSR set to: 1
  4317                           ;standbyMode.c: 1866: if (drawerInformation[i] == drawer){
  4318                           
  4319                           ; BSR set to: 1
  4320                           
  4321                           ; BSR set to: 1
  4322  00F24E  90D8               	bcf	status,0,c
  4323  00F250  3588               	rlcf	standbyMode@i& (0+255),w,b
  4324  00F252  6ED9               	movwf	fsr2l,c
  4325  00F254  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4326  00F256  6EDA               	movwf	fsr2h,c
  4327  00F258  0E50               	movlw	low standbyMode@drawerInformation
  4328  00F25A  26D9               	addwf	fsr2l,f,c
  4329  00F25C  0E01               	movlw	high standbyMode@drawerInformation
  4330  00F25E  22DA               	addwfc	fsr2h,f,c
  4331  00F260  5182               	movf	standbyMode@drawer& (0+255),w,b
  4332  00F262  18DE               	xorwf	postinc2,w,c
  4333  00F264  E119               	bnz	l10444
  4334  00F266  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  4335  00F268  18DE               	xorwf	postinc2,w,c
  4336  00F26A  A4D8               	btfss	status,2,c
  4337  00F26C  D015               	goto	l1293
  4338                           
  4339                           ; BSR set to: 1
  4340                           ;standbyMode.c: 1867: validDrawer = 1;
  4341  00F26E  0E00               	movlw	0
  4342  00F270  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4343  00F272  0E01               	movlw	1
  4344  00F274  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4345                           
  4346                           ; BSR set to: 1
  4347                           ;standbyMode.c: 1868: if (drawerInformation[i] == 0){
  4348  00F276  90D8               	bcf	status,0,c
  4349  00F278  3588               	rlcf	standbyMode@i& (0+255),w,b
  4350  00F27A  6ED9               	movwf	fsr2l,c
  4351  00F27C  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4352  00F27E  6EDA               	movwf	fsr2h,c
  4353  00F280  0E50               	movlw	low standbyMode@drawerInformation
  4354  00F282  26D9               	addwf	fsr2l,f,c
  4355  00F284  0E01               	movlw	high standbyMode@drawerInformation
  4356  00F286  22DA               	addwfc	fsr2h,f,c
  4357  00F288  50DE               	movf	postinc2,w,c
  4358  00F28A  10DE               	iorwf	postinc2,w,c
  4359  00F28C  A4D8               	btfss	status,2,c
  4360  00F28E  D004               	goto	l1293
  4361                           
  4362                           ; BSR set to: 1
  4363                           ;standbyMode.c: 1869: zero = 1;
  4364  00F290  0E00               	movlw	0
  4365  00F292  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4366  00F294  0E01               	movlw	1
  4367  00F296  6F79               	movwf	standbyMode@zero& (0+255),b
  4368  00F298                     l1293:
  4369  00F298                     l10444:
  4370                           
  4371                           ; BSR set to: 1
  4372  00F298  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4373  00F29A  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4374  00F29C  D7D2               	goto	l10432
  4375  00F29E                     u13740:
  4376  00F29E                     l10448:
  4377                           
  4378                           ; BSR set to: 1
  4379                           ;standbyMode.c: 1870: }
  4380                           ;standbyMode.c: 1871: }
  4381                           ;standbyMode.c: 1872: }
  4382                           ;standbyMode.c: 1873: if (validDrawer == 1){
  4383  00F29E  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  4384  00F2A0  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  4385  00F2A2  A4D8               	btfss	status,2,c
  4386  00F2A4  D062               	goto	l1294
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;standbyMode.c: 1874: if (zero == 1){
  4390  00F2A6  0579               	decf	standbyMode@zero& (0+255),w,b
  4391  00F2A8  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  4392  00F2AA  A4D8               	btfss	status,2,c
  4393  00F2AC  D02F               	goto	l1295
  4394                           
  4395                           ; BSR set to: 1
  4396                           ;standbyMode.c: 1875: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4397  00F2AE  0E01               	movlw	1
  4398  00F2B0  ECDF  F04B         	call	_lcdInst
  4399  00F2B4  0EC3               	movlw	195
  4400  00F2B6  6E60               	movwf	??_standbyMode& (0+255),c
  4401  00F2B8  0ECD               	movlw	205
  4402  00F2BA                     u14457:
  4403  00F2BA  2EE8               	decfsz	wreg,f,c
  4404  00F2BC  D7FE               	bra	u14457
  4405  00F2BE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4406  00F2C0  D7FC               	bra	u14457
  4407  00F2C2  F000               	nop	
  4408                           
  4409                           ;standbyMode.c: 1876: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4410  00F2C4  0E0C               	movlw	12
  4411  00F2C6  ECDF  F04B         	call	_lcdInst
  4412                           
  4413                           ;standbyMode.c: 1877: printf("No drawer");
  4414  00F2CA  0E3E               	movlw	low STR_132
  4415  00F2CC  6E0D               	movwf	printf@f,c
  4416  00F2CE  0EFC               	movlw	high STR_132
  4417  00F2D0  6E0E               	movwf	printf@f+1,c
  4418  00F2D2  ECBD  F05F         	call	_printf	;wreg free
  4419                           
  4420                           ;standbyMode.c: 1878: lcdInst(0xC0);;
  4421  00F2D6  0EC0               	movlw	192
  4422  00F2D8  ECDF  F04B         	call	_lcdInst
  4423                           
  4424                           ;standbyMode.c: 1879: printf("number pressed.");
  4425  00F2DC  0E10               	movlw	low STR_133
  4426  00F2DE  6E0D               	movwf	printf@f,c
  4427  00F2E0  0EFA               	movlw	high STR_133
  4428  00F2E2  6E0E               	movwf	printf@f+1,c
  4429  00F2E4  ECBD  F05F         	call	_printf	;wreg free
  4430                           
  4431                           ;standbyMode.c: 1880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4432  00F2E8  0E66               	movlw	102
  4433  00F2EA  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4434  00F2EC  0E76               	movlw	118
  4435  00F2EE  6E60               	movwf	??_standbyMode& (0+255),c
  4436  00F2F0  0EC1               	movlw	193
  4437  00F2F2                     u14467:
  4438  00F2F2  2EE8               	decfsz	wreg,f,c
  4439  00F2F4  D7FE               	bra	u14467
  4440  00F2F6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4441  00F2F8  D7FC               	bra	u14467
  4442  00F2FA  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4443  00F2FC  D7FA               	bra	u14467
  4444  00F2FE  F000               	nop	
  4445                           
  4446                           ;standbyMode.c: 1881: zero = 0;
  4447  00F300  0E00               	movlw	0
  4448  00F302  0101               	movlb	1	; () banked
  4449  00F304  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4450  00F306  0E00               	movlw	0
  4451  00F308  6F79               	movwf	standbyMode@zero& (0+255),b
  4452                           
  4453                           ;standbyMode.c: 1882: }
  4454  00F30A  D029               	goto	l1296
  4455  00F30C                     l1295:
  4456                           
  4457                           ; BSR set to: 1
  4458                           ;standbyMode.c: 1883: else{
  4459                           ;standbyMode.c: 1884: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4460                           
  4461                           ; BSR set to: 1
  4462  00F30C  0E01               	movlw	1
  4463  00F30E  ECDF  F04B         	call	_lcdInst
  4464  00F312  0EC3               	movlw	195
  4465  00F314  6E60               	movwf	??_standbyMode& (0+255),c
  4466  00F316  0ECD               	movlw	205
  4467  00F318                     u14477:
  4468  00F318  2EE8               	decfsz	wreg,f,c
  4469  00F31A  D7FE               	bra	u14477
  4470  00F31C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4471  00F31E  D7FC               	bra	u14477
  4472  00F320  F000               	nop	
  4473                           
  4474                           ;standbyMode.c: 1885: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4475  00F322  0E0C               	movlw	12
  4476  00F324  ECDF  F04B         	call	_lcdInst
  4477                           
  4478                           ;standbyMode.c: 1886: printf("Drawer already");
  4479  00F328  0E37               	movlw	low STR_134
  4480  00F32A  6E0D               	movwf	printf@f,c
  4481  00F32C  0EFB               	movlw	high STR_134
  4482  00F32E  6E0E               	movwf	printf@f+1,c
  4483  00F330  ECBD  F05F         	call	_printf	;wreg free
  4484                           
  4485                           ;standbyMode.c: 1887: lcdInst(0xC0);;
  4486  00F334  0EC0               	movlw	192
  4487  00F336  ECDF  F04B         	call	_lcdInst
  4488                           
  4489                           ;standbyMode.c: 1888: printf("in use!");
  4490  00F33A  0E77               	movlw	low STR_135
  4491  00F33C  6E0D               	movwf	printf@f,c
  4492  00F33E  0EFC               	movlw	high STR_135
  4493  00F340  6E0E               	movwf	printf@f+1,c
  4494  00F342  ECBD  F05F         	call	_printf	;wreg free
  4495                           
  4496                           ;standbyMode.c: 1889: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4497  00F346  0E66               	movlw	102
  4498  00F348  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4499  00F34A  0E76               	movlw	118
  4500  00F34C  6E60               	movwf	??_standbyMode& (0+255),c
  4501  00F34E  0EC1               	movlw	193
  4502  00F350                     u14487:
  4503  00F350  2EE8               	decfsz	wreg,f,c
  4504  00F352  D7FE               	bra	u14487
  4505  00F354  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4506  00F356  D7FC               	bra	u14487
  4507  00F358  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4508  00F35A  D7FA               	bra	u14487
  4509  00F35C  F000               	nop	
  4510  00F35E                     l1296:
  4511                           
  4512                           ;standbyMode.c: 1890: }
  4513                           ;standbyMode.c: 1891: validDrawer = 0;
  4514  00F35E  0E00               	movlw	0
  4515  00F360  0101               	movlb	1	; () banked
  4516  00F362  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4517  00F364  0E00               	movlw	0
  4518  00F366  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4519                           
  4520                           ; BSR set to: 1
  4521                           ;standbyMode.c: 1893: }
  4522                           
  4523                           ;standbyMode.c: 1892: continue;
  4524  00F368  D567               	goto	u13540
  4525  00F36A                     l1294:
  4526                           
  4527                           ; BSR set to: 1
  4528                           
  4529                           ; BSR set to: 1
  4530                           
  4531                           ;standbyMode.c: 1894: else{
  4532                           ;standbyMode.c: 1895: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4533                           
  4534                           ; BSR set to: 1
  4535  00F36A  0E01               	movlw	1
  4536  00F36C  ECDF  F04B         	call	_lcdInst
  4537  00F370  0EC3               	movlw	195
  4538  00F372  6E60               	movwf	??_standbyMode& (0+255),c
  4539  00F374  0ECD               	movlw	205
  4540  00F376                     u14497:
  4541  00F376  2EE8               	decfsz	wreg,f,c
  4542  00F378  D7FE               	bra	u14497
  4543  00F37A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4544  00F37C  D7FC               	bra	u14497
  4545  00F37E  F000               	nop	
  4546                           
  4547                           ;standbyMode.c: 1896: diet = diet_press(drawer);
  4548  00F380  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4549  00F384  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4550  00F388  ECB6  F061         	call	_diet_press	;wreg free
  4551  00F38C  C029  F180         	movff	?_diet_press,standbyMode@diet
  4552  00F390  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4553                           
  4554                           ;standbyMode.c: 1897: if (diet == 100){
  4555  00F394  0E64               	movlw	100
  4556  00F396  0101               	movlb	1	; () banked
  4557  00F398  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4558  00F39A  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4559  00F39C  A4D8               	btfss	status,2,c
  4560  00F39E  D005               	goto	l1300
  4561                           
  4562                           ; BSR set to: 1
  4563                           ;standbyMode.c: 1898: diet = 0;
  4564  00F3A0  0E00               	movlw	0
  4565  00F3A2  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4566  00F3A4  0E00               	movlw	0
  4567  00F3A6  6F80               	movwf	standbyMode@diet& (0+255),b
  4568                           
  4569                           ;standbyMode.c: 1899: goto DIET_BACK2;
  4570  00F3A8  D724               	goto	l1258
  4571  00F3AA                     l1300:
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;standbyMode.c: 1900: }
  4575                           ;standbyMode.c: 1902: food = food_press(diet, drawer);
  4576                           
  4577                           ; BSR set to: 1
  4578  00F3AA  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4579  00F3AE  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4580  00F3B2  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4581  00F3B6  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4582  00F3BA  ECB7  F058         	call	_food_press	;wreg free
  4583  00F3BE  C029  F184         	movff	?_food_press,standbyMode@food
  4584  00F3C2  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4585                           
  4586                           ;standbyMode.c: 1903: if (food == 100){
  4587  00F3C6  0E64               	movlw	100
  4588  00F3C8  0101               	movlb	1	; () banked
  4589  00F3CA  1984               	xorwf	standbyMode@food& (0+255),w,b
  4590  00F3CC  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4591  00F3CE  A4D8               	btfss	status,2,c
  4592  00F3D0  D009               	goto	l1301
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;standbyMode.c: 1904: diet = 0;
  4596  00F3D2  0E00               	movlw	0
  4597  00F3D4  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4598  00F3D6  0E00               	movlw	0
  4599  00F3D8  6F80               	movwf	standbyMode@diet& (0+255),b
  4600                           
  4601                           ;standbyMode.c: 1905: food = 0;
  4602  00F3DA  0E00               	movlw	0
  4603  00F3DC  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4604  00F3DE  0E00               	movlw	0
  4605  00F3E0  6F84               	movwf	standbyMode@food& (0+255),b
  4606                           
  4607                           ;standbyMode.c: 1906: goto FOOD_BACK2;
  4608  00F3E2  D7C3               	goto	l1294
  4609  00F3E4                     l1301:
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;standbyMode.c: 1907: }
  4613                           ;standbyMode.c: 1909: drawerInformation[drawerCount] = drawer;
  4614                           
  4615                           ; BSR set to: 1
  4616  00F3E4  90D8               	bcf	status,0,c
  4617  00F3E6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4618  00F3E8  6ED9               	movwf	fsr2l,c
  4619  00F3EA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4620  00F3EC  6EDA               	movwf	fsr2h,c
  4621  00F3EE  0E50               	movlw	low standbyMode@drawerInformation
  4622  00F3F0  26D9               	addwf	fsr2l,f,c
  4623  00F3F2  0E01               	movlw	high standbyMode@drawerInformation
  4624  00F3F4  22DA               	addwfc	fsr2h,f,c
  4625  00F3F6  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4626  00F3FA  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4627                           
  4628                           ; BSR set to: 1
  4629                           ;standbyMode.c: 1910: decodedDiet = decode_diet(diet);
  4630  00F3FE  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4631  00F402  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4632  00F406  EC00  F054         	call	_decode_diet	;wreg free
  4633  00F40A  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4634  00F40E  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4635                           
  4636                           ;standbyMode.c: 1911: dietType[drawerCount] = decodedDiet;
  4637  00F412  90D8               	bcf	status,0,c
  4638  00F414  0101               	movlb	1	; () banked
  4639  00F416  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4640  00F418  6ED9               	movwf	fsr2l,c
  4641  00F41A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4642  00F41C  6EDA               	movwf	fsr2h,c
  4643  00F41E  0E30               	movlw	low standbyMode@dietType
  4644  00F420  26D9               	addwf	fsr2l,f,c
  4645  00F422  0E01               	movlw	high standbyMode@dietType
  4646  00F424  22DA               	addwfc	fsr2h,f,c
  4647  00F426  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4648  00F42A  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4649                           
  4650                           ;standbyMode.c: 1912: storedFoodType = printFoodInput(food);
  4651  00F42E  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4652  00F432  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4653  00F436  ECBF  F05A         	call	_printFoodInput	;wreg free
  4654  00F43A  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4655  00F43E  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4656                           
  4657                           ;standbyMode.c: 1913: foodType[drawerCount] = storedFoodType;
  4658  00F442  90D8               	bcf	status,0,c
  4659  00F444  0101               	movlb	1	; () banked
  4660  00F446  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4661  00F448  6ED9               	movwf	fsr2l,c
  4662  00F44A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4663  00F44C  6EDA               	movwf	fsr2h,c
  4664  00F44E  0E40               	movlw	low standbyMode@foodType
  4665  00F450  26D9               	addwf	fsr2l,f,c
  4666  00F452  0E01               	movlw	high standbyMode@foodType
  4667  00F454  22DA               	addwfc	fsr2h,f,c
  4668  00F456  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4669  00F45A  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4670                           
  4671                           ; BSR set to: 1
  4672                           ;standbyMode.c: 1916: round = getRound(food);
  4673  00F45E  C184  F001         	movff	standbyMode@food,getRound@code
  4674  00F462  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4675  00F466  EC70  F052         	call	_getRound	;wreg free
  4676  00F46A  C001  F16C         	movff	?_getRound,standbyMode@round
  4677  00F46E  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4678                           
  4679                           ;standbyMode.c: 1917: flat = getFlat(food);
  4680  00F472  C184  F001         	movff	standbyMode@food,getFlat@code
  4681  00F476  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4682  00F47A  ECF8  F051         	call	_getFlat	;wreg free
  4683  00F47E  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4684  00F482  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4685                           
  4686                           ;standbyMode.c: 1918: lng = getLong(food);
  4687  00F486  C184  F001         	movff	standbyMode@food,getLong@code
  4688  00F48A  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4689  00F48E  ECE8  F052         	call	_getLong	;wreg free
  4690  00F492  C001  F170         	movff	?_getLong,standbyMode@lng
  4691  00F496  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4692                           
  4693                           ;standbyMode.c: 1919: roundPieces[drawerCount] = round;
  4694  00F49A  90D8               	bcf	status,0,c
  4695  00F49C  0101               	movlb	1	; () banked
  4696  00F49E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4697  00F4A0  6ED9               	movwf	fsr2l,c
  4698  00F4A2  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4699  00F4A4  6EDA               	movwf	fsr2h,c
  4700  00F4A6  0E00               	movlw	low standbyMode@roundPieces
  4701  00F4A8  26D9               	addwf	fsr2l,f,c
  4702  00F4AA  0E01               	movlw	high standbyMode@roundPieces
  4703  00F4AC  22DA               	addwfc	fsr2h,f,c
  4704  00F4AE  C16C  FFDE         	movff	standbyMode@round,postinc2
  4705  00F4B2  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4706                           
  4707                           ;standbyMode.c: 1920: flatPieces[drawerCount] = flat;
  4708  00F4B6  90D8               	bcf	status,0,c
  4709  00F4B8  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4710  00F4BA  6ED9               	movwf	fsr2l,c
  4711  00F4BC  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4712  00F4BE  6EDA               	movwf	fsr2h,c
  4713  00F4C0  0E10               	movlw	low standbyMode@flatPieces
  4714  00F4C2  26D9               	addwf	fsr2l,f,c
  4715  00F4C4  0E01               	movlw	high standbyMode@flatPieces
  4716  00F4C6  22DA               	addwfc	fsr2h,f,c
  4717  00F4C8  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4718  00F4CC  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4719                           
  4720                           ;standbyMode.c: 1921: longPieces[drawerCount] = lng;
  4721  00F4D0  90D8               	bcf	status,0,c
  4722  00F4D2  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4723  00F4D4  6ED9               	movwf	fsr2l,c
  4724  00F4D6  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4725  00F4D8  6EDA               	movwf	fsr2h,c
  4726  00F4DA  0E20               	movlw	low standbyMode@longPieces
  4727  00F4DC  26D9               	addwf	fsr2l,f,c
  4728  00F4DE  0E01               	movlw	high standbyMode@longPieces
  4729  00F4E0  22DA               	addwfc	fsr2h,f,c
  4730  00F4E2  C170  FFDE         	movff	standbyMode@lng,postinc2
  4731  00F4E6  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4732                           
  4733                           ; BSR set to: 1
  4734                           ;standbyMode.c: 1922: drawerCount += 1;
  4735  00F4EA  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4736  00F4EC  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4737                           
  4738                           ; BSR set to: 1
  4739                           
  4740                           ; BSR set to: 1
  4741                           
  4742                           ; BSR set to: 1
  4743  00F4EE  D4A4               	goto	u13540
  4744  00F4F0                     l1286:
  4745                           
  4746                           ;standbyMode.c: 1923: }
  4747                           ;standbyMode.c: 1924: }
  4748                           ;standbyMode.c: 1925: }
  4749                           ;standbyMode.c: 1927: if (drawerCount == 0){
  4750                           
  4751                           ; BSR set to: 1
  4752  00F4F0  0101               	movlb	1	; () banked
  4753  00F4F2  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4754  00F4F4  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4755  00F4F6  A4D8               	btfss	status,2,c
  4756  00F4F8  D005               	goto	l1302
  4757                           
  4758                           ; BSR set to: 1
  4759                           ;standbyMode.c: 1928: return 0;
  4760  00F4FA  0E00               	movlw	0
  4761  00F4FC  6E5F               	movwf	?_standbyMode+1,c
  4762  00F4FE  0E00               	movlw	0
  4763  00F500  6E5E               	movwf	?_standbyMode,c
  4764                           
  4765                           ; BSR set to: 1
  4766                           ;standbyMode.c: 1929: }
  4767                           
  4768                           ; BSR set to: 1
  4769  00F502  0012               	return	
  4770  00F504                     l1302:
  4771                           
  4772                           ; BSR set to: 1
  4773                           ;standbyMode.c: 1930: else{
  4774                           ;standbyMode.c: 1931: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4775                           
  4776                           ; BSR set to: 1
  4777  00F504  0E01               	movlw	1
  4778  00F506  ECDF  F04B         	call	_lcdInst
  4779  00F50A  0EC3               	movlw	195
  4780  00F50C  6E60               	movwf	??_standbyMode& (0+255),c
  4781  00F50E  0ECD               	movlw	205
  4782  00F510                     u14507:
  4783  00F510  2EE8               	decfsz	wreg,f,c
  4784  00F512  D7FE               	bra	u14507
  4785  00F514  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4786  00F516  D7FC               	bra	u14507
  4787  00F518  F000               	nop	
  4788                           
  4789                           ;standbyMode.c: 1932: printf("Inputs submitted");
  4790  00F51A  0EAB               	movlw	low STR_140
  4791  00F51C  6E0D               	movwf	printf@f,c
  4792  00F51E  0EF9               	movlw	high STR_140
  4793  00F520  6E0E               	movwf	printf@f+1,c
  4794  00F522  ECBD  F05F         	call	_printf	;wreg free
  4795                           
  4796                           ;standbyMode.c: 1933: lcdInst(0xC0);;
  4797  00F526  0EC0               	movlw	192
  4798  00F528  ECDF  F04B         	call	_lcdInst
  4799                           
  4800                           ;standbyMode.c: 1934: printf("successfully!");
  4801  00F52C  0E71               	movlw	low STR_141
  4802  00F52E  6E0D               	movwf	printf@f,c
  4803  00F530  0EFB               	movlw	high STR_141
  4804  00F532  6E0E               	movwf	printf@f+1,c
  4805  00F534  ECBD  F05F         	call	_printf	;wreg free
  4806                           
  4807                           ;standbyMode.c: 1935: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4808  00F538  0E33               	movlw	51
  4809  00F53A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4810  00F53C  0EBB               	movlw	187
  4811  00F53E  6E60               	movwf	??_standbyMode& (0+255),c
  4812  00F540  0EE0               	movlw	224
  4813  00F542                     u14517:
  4814  00F542  2EE8               	decfsz	wreg,f,c
  4815  00F544  D7FE               	bra	u14517
  4816  00F546  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4817  00F548  D7FC               	bra	u14517
  4818  00F54A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4819  00F54C  D7FA               	bra	u14517
  4820                           
  4821                           ;standbyMode.c: 1937: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4822  00F54E  0E01               	movlw	1
  4823  00F550  ECDF  F04B         	call	_lcdInst
  4824  00F554  0EC3               	movlw	195
  4825  00F556  6E60               	movwf	??_standbyMode& (0+255),c
  4826  00F558  0ECD               	movlw	205
  4827  00F55A                     u14527:
  4828  00F55A  2EE8               	decfsz	wreg,f,c
  4829  00F55C  D7FE               	bra	u14527
  4830  00F55E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4831  00F560  D7FC               	bra	u14527
  4832  00F562  F000               	nop	
  4833                           
  4834                           ;standbyMode.c: 1938: printf("Summary of");
  4835  00F564  0E13               	movlw	low STR_142
  4836  00F566  6E0D               	movwf	printf@f,c
  4837  00F568  0EFC               	movlw	high STR_142
  4838  00F56A  6E0E               	movwf	printf@f+1,c
  4839  00F56C  ECBD  F05F         	call	_printf	;wreg free
  4840                           
  4841                           ;standbyMode.c: 1939: lcdInst(0xC0);;
  4842  00F570  0EC0               	movlw	192
  4843  00F572  ECDF  F04B         	call	_lcdInst
  4844                           
  4845                           ;standbyMode.c: 1940: printf("inputs:");
  4846  00F576  0E7F               	movlw	low STR_143
  4847  00F578  6E0D               	movwf	printf@f,c
  4848  00F57A  0EFC               	movlw	high STR_143
  4849  00F57C  6E0E               	movwf	printf@f+1,c
  4850  00F57E  ECBD  F05F         	call	_printf	;wreg free
  4851                           
  4852                           ;standbyMode.c: 1941: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4853  00F582  0E33               	movlw	51
  4854  00F584  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4855  00F586  0EBB               	movlw	187
  4856  00F588  6E60               	movwf	??_standbyMode& (0+255),c
  4857  00F58A  0EE0               	movlw	224
  4858  00F58C                     u14537:
  4859  00F58C  2EE8               	decfsz	wreg,f,c
  4860  00F58E  D7FE               	bra	u14537
  4861  00F590  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4862  00F592  D7FC               	bra	u14537
  4863  00F594  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4864  00F596  D7FA               	bra	u14537
  4865                           
  4866                           ;standbyMode.c: 1943: for (i=0; i<8; i++){
  4867  00F598  0E00               	movlw	0
  4868  00F59A  0101               	movlb	1	; () banked
  4869  00F59C  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4870  00F59E  0E00               	movlw	0
  4871  00F5A0  6F88               	movwf	standbyMode@i& (0+255),b
  4872                           
  4873                           ; BSR set to: 1
  4874  00F5A2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4875  00F5A4  E105               	bnz	u13800
  4876  00F5A6  0E08               	movlw	8
  4877  00F5A8  5D88               	subwf	standbyMode@i& (0+255),w,b
  4878  00F5AA  B0D8               	btfsc	status,0,c
  4879  00F5AC  D07D               	goto	u13820
  4880  00F5AE  D001               	goto	l1305
  4881  00F5B0                     u13800:
  4882                           
  4883                           ; BSR set to: 1
  4884  00F5B0  D07B               	goto	u13820
  4885  00F5B2                     l1305:
  4886                           
  4887                           ; BSR set to: 1
  4888                           ;standbyMode.c: 1944: if (drawerInformation[i] != 0){
  4889                           
  4890                           ; BSR set to: 1
  4891  00F5B2  90D8               	bcf	status,0,c
  4892  00F5B4  3588               	rlcf	standbyMode@i& (0+255),w,b
  4893  00F5B6  6ED9               	movwf	fsr2l,c
  4894  00F5B8  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4895  00F5BA  6EDA               	movwf	fsr2h,c
  4896  00F5BC  0E50               	movlw	low standbyMode@drawerInformation
  4897  00F5BE  26D9               	addwf	fsr2l,f,c
  4898  00F5C0  0E01               	movlw	high standbyMode@drawerInformation
  4899  00F5C2  22DA               	addwfc	fsr2h,f,c
  4900  00F5C4  50DE               	movf	postinc2,w,c
  4901  00F5C6  10DE               	iorwf	postinc2,w,c
  4902  00F5C8  B4D8               	btfsc	status,2,c
  4903  00F5CA  D068               	goto	l1307
  4904                           
  4905                           ; BSR set to: 1
  4906                           ;standbyMode.c: 1945: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4907  00F5CC  0E01               	movlw	1
  4908  00F5CE  ECDF  F04B         	call	_lcdInst
  4909  00F5D2  0EC3               	movlw	195
  4910  00F5D4  6E60               	movwf	??_standbyMode& (0+255),c
  4911  00F5D6  0ECD               	movlw	205
  4912  00F5D8                     u14547:
  4913  00F5D8  2EE8               	decfsz	wreg,f,c
  4914  00F5DA  D7FE               	bra	u14547
  4915  00F5DC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4916  00F5DE  D7FC               	bra	u14547
  4917  00F5E0  F000               	nop	
  4918                           
  4919                           ;standbyMode.c: 1946: printf("Drawer %i:", drawerInformation[i]);
  4920  00F5E2  0E08               	movlw	low STR_101
  4921  00F5E4  6E0D               	movwf	printf@f,c
  4922  00F5E6  0EFC               	movlw	high STR_101
  4923  00F5E8  6E0E               	movwf	printf@f+1,c
  4924  00F5EA  90D8               	bcf	status,0,c
  4925  00F5EC  0101               	movlb	1	; () banked
  4926  00F5EE  3588               	rlcf	standbyMode@i& (0+255),w,b
  4927  00F5F0  6ED9               	movwf	fsr2l,c
  4928  00F5F2  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4929  00F5F4  6EDA               	movwf	fsr2h,c
  4930  00F5F6  0E50               	movlw	low standbyMode@drawerInformation
  4931  00F5F8  26D9               	addwf	fsr2l,f,c
  4932  00F5FA  0E01               	movlw	high standbyMode@drawerInformation
  4933  00F5FC  22DA               	addwfc	fsr2h,f,c
  4934  00F5FE  CFDE F00F          	movff	postinc2,?_printf+2
  4935  00F602  CFDD F010          	movff	postdec2,?_printf+3
  4936  00F606  ECBD  F05F         	call	_printf	;wreg free
  4937                           
  4938                           ;standbyMode.c: 1947: lcdInst(0xC0);;
  4939  00F60A  0EC0               	movlw	192
  4940  00F60C  ECDF  F04B         	call	_lcdInst
  4941                           
  4942                           ;standbyMode.c: 1948: printf("%s%s",inputs[dietType[i]], foodInputs[foodType[i]]);
  4943  00F610  0EB3               	movlw	low STR_102
  4944  00F612  6E0D               	movwf	printf@f,c
  4945  00F614  0EFC               	movlw	high STR_102
  4946  00F616  6E0E               	movwf	printf@f+1,c
  4947  00F618  90D8               	bcf	status,0,c
  4948  00F61A  0101               	movlb	1	; () banked
  4949  00F61C  3588               	rlcf	standbyMode@i& (0+255),w,b
  4950  00F61E  6ED9               	movwf	fsr2l,c
  4951  00F620  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4952  00F622  6EDA               	movwf	fsr2h,c
  4953  00F624  0E30               	movlw	low standbyMode@dietType
  4954  00F626  26D9               	addwf	fsr2l,f,c
  4955  00F628  0E01               	movlw	high standbyMode@dietType
  4956  00F62A  22DA               	addwfc	fsr2h,f,c
  4957  00F62C  CFDE F060          	movff	postinc2,??_standbyMode
  4958  00F630  CFDD F061          	movff	postdec2,??_standbyMode+1
  4959  00F634  90D8               	bcf	status,0,c
  4960  00F636  3660               	rlcf	??_standbyMode,f,c
  4961  00F638  3661               	rlcf	??_standbyMode+1,f,c
  4962  00F63A  0E50               	movlw	low _inputs
  4963  00F63C  2460               	addwf	??_standbyMode,w,c
  4964  00F63E  6ED9               	movwf	fsr2l,c
  4965  00F640  0E02               	movlw	high _inputs
  4966  00F642  2061               	addwfc	??_standbyMode+1,w,c
  4967  00F644  6EDA               	movwf	fsr2h,c
  4968  00F646  CFDE F00F          	movff	postinc2,?_printf+2
  4969  00F64A  CFDD F010          	movff	postdec2,?_printf+3
  4970  00F64E  90D8               	bcf	status,0,c
  4971  00F650  3588               	rlcf	standbyMode@i& (0+255),w,b
  4972  00F652  6ED9               	movwf	fsr2l,c
  4973  00F654  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4974  00F656  6EDA               	movwf	fsr2h,c
  4975  00F658  0E40               	movlw	low standbyMode@foodType
  4976  00F65A  26D9               	addwf	fsr2l,f,c
  4977  00F65C  0E01               	movlw	high standbyMode@foodType
  4978  00F65E  22DA               	addwfc	fsr2h,f,c
  4979  00F660  CFDE F062          	movff	postinc2,??_standbyMode+2
  4980  00F664  CFDD F063          	movff	postdec2,??_standbyMode+3
  4981  00F668  90D8               	bcf	status,0,c
  4982  00F66A  3662               	rlcf	??_standbyMode+2,f,c
  4983  00F66C  3663               	rlcf	??_standbyMode+3,f,c
  4984  00F66E  0E74               	movlw	low _foodInputs
  4985  00F670  2462               	addwf	??_standbyMode+2,w,c
  4986  00F672  6ED9               	movwf	fsr2l,c
  4987  00F674  0E02               	movlw	high _foodInputs
  4988  00F676  2063               	addwfc	??_standbyMode+3,w,c
  4989  00F678  6EDA               	movwf	fsr2h,c
  4990  00F67A  CFDE F011          	movff	postinc2,?_printf+4
  4991  00F67E  CFDD F012          	movff	postdec2,?_printf+5
  4992  00F682  ECBD  F05F         	call	_printf	;wreg free
  4993                           
  4994                           ;standbyMode.c: 1949: _delay((unsigned long)((1500)*(40000000/4000.0)));
  4995  00F686  0E4D               	movlw	77
  4996  00F688  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4997  00F68A  0E19               	movlw	25
  4998  00F68C  6E60               	movwf	??_standbyMode& (0+255),c
  4999  00F68E  0E50               	movlw	80
  5000  00F690                     u14557:
  5001  00F690  2EE8               	decfsz	wreg,f,c
  5002  00F692  D7FE               	bra	u14557
  5003  00F694  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5004  00F696  D7FC               	bra	u14557
  5005  00F698  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5006  00F69A  D7FA               	bra	u14557
  5007  00F69C                     l1307:
  5008  00F69C  0101               	movlb	1	; () banked
  5009  00F69E  4B88               	infsnz	standbyMode@i& (0+255),f,b
  5010  00F6A0  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  5011  00F6A2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5012  00F6A4  E101               	bnz	l10566
  5013  00F6A6  D77F               	goto	L1
  5014  00F6A8                     u13820:
  5015  00F6A8                     l10566:
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;standbyMode.c: 1950: }
  5019                           ;standbyMode.c: 1951: }
  5020                           ;standbyMode.c: 1953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5021  00F6A8  0E01               	movlw	1
  5022  00F6AA  ECDF  F04B         	call	_lcdInst
  5023  00F6AE  0EC3               	movlw	195
  5024  00F6B0  6E60               	movwf	??_standbyMode& (0+255),c
  5025  00F6B2  0ECD               	movlw	205
  5026  00F6B4                     u14567:
  5027  00F6B4  2EE8               	decfsz	wreg,f,c
  5028  00F6B6  D7FE               	bra	u14567
  5029  00F6B8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5030  00F6BA  D7FC               	bra	u14567
  5031  00F6BC  F000               	nop	
  5032                           
  5033                           ;standbyMode.c: 1954: printf("Operation will");
  5034  00F6BE  0E0A               	movlw	low STR_146
  5035  00F6C0  6E0D               	movwf	printf@f,c
  5036  00F6C2  0EFB               	movlw	high STR_146
  5037  00F6C4  6E0E               	movwf	printf@f+1,c
  5038  00F6C6  ECBD  F05F         	call	_printf	;wreg free
  5039                           
  5040                           ;standbyMode.c: 1955: lcdInst(0xC0);;
  5041  00F6CA  0EC0               	movlw	192
  5042  00F6CC  ECDF  F04B         	call	_lcdInst
  5043                           
  5044                           ;standbyMode.c: 1956: printf("begin shortly.");
  5045  00F6D0  0EB0               	movlw	low STR_147
  5046  00F6D2  6E0D               	movwf	printf@f,c
  5047  00F6D4  0EFA               	movlw	high STR_147
  5048  00F6D6  6E0E               	movwf	printf@f+1,c
  5049  00F6D8  ECBD  F05F         	call	_printf	;wreg free
  5050                           
  5051                           ;standbyMode.c: 1957: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5052  00F6DC  0E33               	movlw	51
  5053  00F6DE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5054  00F6E0  0EBB               	movlw	187
  5055  00F6E2  6E60               	movwf	??_standbyMode& (0+255),c
  5056  00F6E4  0EE0               	movlw	224
  5057  00F6E6                     u14577:
  5058  00F6E6  2EE8               	decfsz	wreg,f,c
  5059  00F6E8  D7FE               	bra	u14577
  5060  00F6EA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5061  00F6EC  D7FC               	bra	u14577
  5062  00F6EE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5063  00F6F0  D7FA               	bra	u14577
  5064                           
  5065                           ;standbyMode.c: 1959: logNumber = readEEPROM(250);
  5066  00F6F2  0EFA               	movlw	250
  5067  00F6F4  ECE9  F04B         	call	_readEEPROM
  5068  00F6F8  0101               	movlb	1	; () banked
  5069  00F6FA  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;standbyMode.c: 1960: if (logNumber == 4){
  5073  00F6FC  0E04               	movlw	4
  5074  00F6FE  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  5075  00F700  B4D8               	btfsc	status,2,c
  5076                           
  5077                           ; BSR set to: 1
  5078                           ;standbyMode.c: 1961: shiftEEPROM();
  5079  00F702  EC6B  F050         	call	_shiftEEPROM	;wreg free
  5080                           
  5081                           ;standbyMode.c: 1962: }
  5082                           ;standbyMode.c: 1963: for (i=0; i<8; i++){
  5083  00F706  0E00               	movlw	0
  5084  00F708  0101               	movlb	1	; () banked
  5085  00F70A  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  5086  00F70C  0E00               	movlw	0
  5087  00F70E  6F88               	movwf	standbyMode@i& (0+255),b
  5088                           
  5089                           ; BSR set to: 1
  5090  00F710  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5091  00F712  E172               	bnz	l1310
  5092  00F714  0E08               	movlw	8
  5093  00F716  5D88               	subwf	standbyMode@i& (0+255),w,b
  5094  00F718  B0D8               	btfsc	status,0,c
  5095  00F71A  D06E               	goto	u13870
  5096                           
  5097                           ; BSR set to: 1
  5098                           ;standbyMode.c: 1964: if (logNumber == 0 || logNumber == 4){
  5099                           
  5100                           ; BSR set to: 1
  5101                           
  5102                           ; BSR set to: 1
  5103  00F71C  517F               	movf	standbyMode@logNumber& (0+255),w,b
  5104  00F71E  B4D8               	btfsc	status,2,c
  5105  00F720  D004               	goto	u13860
  5106                           
  5107                           ; BSR set to: 1
  5108  00F722  0E04               	movlw	4
  5109  00F724  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  5110  00F726  A4D8               	btfss	status,2,c
  5111  00F728  D00F               	goto	l1311
  5112  00F72A                     u13860:
  5113                           
  5114                           ; BSR set to: 1
  5115                           ;standbyMode.c: 1965: n = 3*i;
  5116                           
  5117                           ; BSR set to: 1
  5118  00F72A  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  5119  00F72E  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  5120  00F732  0E00               	movlw	0
  5121  00F734  6E04               	movwf	___wmul@multiplicand+1,c
  5122  00F736  0E03               	movlw	3
  5123  00F738  6E03               	movwf	___wmul@multiplicand,c
  5124  00F73A  EC31  F04C         	call	___wmul	;wreg free
  5125  00F73E  C001  F17B         	movff	?___wmul,standbyMode@n
  5126  00F742  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  5127                           
  5128                           ;standbyMode.c: 1966: }
  5129  00F746  D022               	goto	l1314
  5130  00F748                     l1311:
  5131                           
  5132                           ;standbyMode.c: 1967: else{
  5133                           ;standbyMode.c: 1968: n = (logNumber-1)*35 + 3*i;
  5134  00F748  0EFF               	movlw	255
  5135  00F74A  0101               	movlb	1	; () banked
  5136  00F74C  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  5137  00F74E  6E01               	movwf	___wmul@multiplier,c
  5138  00F750  6A02               	clrf	___wmul@multiplier+1,c
  5139  00F752  0EFF               	movlw	255
  5140  00F754  2202               	addwfc	___wmul@multiplier+1,f,c
  5141  00F756  0E00               	movlw	0
  5142  00F758  6E04               	movwf	___wmul@multiplicand+1,c
  5143  00F75A  0E23               	movlw	35
  5144  00F75C  6E03               	movwf	___wmul@multiplicand,c
  5145  00F75E  EC31  F04C         	call	___wmul	;wreg free
  5146  00F762  C001  F060         	movff	?___wmul,??_standbyMode
  5147  00F766  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  5148  00F76A  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  5149  00F76E  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  5150  00F772  0E00               	movlw	0
  5151  00F774  6E04               	movwf	___wmul@multiplicand+1,c
  5152  00F776  0E03               	movlw	3
  5153  00F778  6E03               	movwf	___wmul@multiplicand,c
  5154  00F77A  EC31  F04C         	call	___wmul	;wreg free
  5155  00F77E  5001               	movf	?___wmul,w,c
  5156  00F780  2460               	addwf	??_standbyMode,w,c
  5157  00F782  0101               	movlb	1	; () banked
  5158  00F784  6F7B               	movwf	standbyMode@n& (0+255),b
  5159  00F786  5002               	movf	?___wmul+1,w,c
  5160  00F788  2061               	addwfc	??_standbyMode+1,w,c
  5161  00F78A  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  5162  00F78C                     l1314:
  5163                           
  5164                           ;standbyMode.c: 1969: }
  5165                           ;standbyMode.c: 1970: writeEEPROM(11+n, drawerInformation[i]);
  5166                           
  5167                           ; BSR set to: 1
  5168  00F78C  90D8               	bcf	status,0,c
  5169  00F78E  0101               	movlb	1	; () banked
  5170  00F790  3588               	rlcf	standbyMode@i& (0+255),w,b
  5171  00F792  6ED9               	movwf	fsr2l,c
  5172  00F794  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5173  00F796  6EDA               	movwf	fsr2h,c
  5174  00F798  0E50               	movlw	low standbyMode@drawerInformation
  5175  00F79A  26D9               	addwf	fsr2l,f,c
  5176  00F79C  0E01               	movlw	high standbyMode@drawerInformation
  5177  00F79E  22DA               	addwfc	fsr2h,f,c
  5178  00F7A0  50DF               	movf	indf2,w,c
  5179  00F7A2  6E01               	movwf	writeEEPROM@data,c
  5180  00F7A4  517B               	movf	standbyMode@n& (0+255),w,b
  5181  00F7A6  0F0B               	addlw	11
  5182  00F7A8  EC44  F04C         	call	_writeEEPROM
  5183                           
  5184                           ;standbyMode.c: 1971: writeEEPROM(12+n, dietType[i]);
  5185  00F7AC  90D8               	bcf	status,0,c
  5186  00F7AE  0101               	movlb	1	; () banked
  5187  00F7B0  3588               	rlcf	standbyMode@i& (0+255),w,b
  5188  00F7B2  6ED9               	movwf	fsr2l,c
  5189  00F7B4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5190  00F7B6  6EDA               	movwf	fsr2h,c
  5191  00F7B8  0E30               	movlw	low standbyMode@dietType
  5192  00F7BA  26D9               	addwf	fsr2l,f,c
  5193  00F7BC  0E01               	movlw	high standbyMode@dietType
  5194  00F7BE  22DA               	addwfc	fsr2h,f,c
  5195  00F7C0  50DF               	movf	indf2,w,c
  5196  00F7C2  6E01               	movwf	writeEEPROM@data,c
  5197  00F7C4  517B               	movf	standbyMode@n& (0+255),w,b
  5198  00F7C6  0F0C               	addlw	12
  5199  00F7C8  EC44  F04C         	call	_writeEEPROM
  5200                           
  5201                           ;standbyMode.c: 1972: writeEEPROM(13+n, foodType[i]);
  5202  00F7CC  90D8               	bcf	status,0,c
  5203  00F7CE  0101               	movlb	1	; () banked
  5204  00F7D0  3588               	rlcf	standbyMode@i& (0+255),w,b
  5205  00F7D2  6ED9               	movwf	fsr2l,c
  5206  00F7D4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5207  00F7D6  6EDA               	movwf	fsr2h,c
  5208  00F7D8  0E40               	movlw	low standbyMode@foodType
  5209  00F7DA  26D9               	addwf	fsr2l,f,c
  5210  00F7DC  0E01               	movlw	high standbyMode@foodType
  5211  00F7DE  22DA               	addwfc	fsr2h,f,c
  5212  00F7E0  50DF               	movf	indf2,w,c
  5213  00F7E2  6E01               	movwf	writeEEPROM@data,c
  5214  00F7E4  517B               	movf	standbyMode@n& (0+255),w,b
  5215  00F7E6  0F0D               	addlw	13
  5216  00F7E8  EC44  F04C         	call	_writeEEPROM
  5217  00F7EC  0101               	movlb	1	; () banked
  5218  00F7EE  4B88               	infsnz	standbyMode@i& (0+255),f,b
  5219  00F7F0  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  5220                           
  5221                           ; BSR set to: 1
  5222  00F7F2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5223  00F7F4  E101               	bnz	l10606
  5224  00F7F6  D78E               	goto	L2
  5225  00F7F8                     u13870:
  5226  00F7F8                     l1310:
  5227  00F7F8                     l10606:
  5228                           
  5229                           ; BSR set to: 1
  5230                           ;standbyMode.c: 1973: }
  5231                           ;standbyMode.c: 1974: return 1;
  5232  00F7F8  0E00               	movlw	0
  5233  00F7FA  6E5F               	movwf	?_standbyMode+1,c
  5234  00F7FC  0E01               	movlw	1
  5235  00F7FE  6E5E               	movwf	?_standbyMode,c
  5236                           
  5237                           ; BSR set to: 1
  5238                           ;standbyMode.c: 1975: }
  5239                           ;standbyMode.c: 1976: }
  5240                           
  5241                           ; BSR set to: 1
  5242  00F800  0012               	return	
  5243  00F802                     l1256:
  5244                           
  5245                           ; BSR set to: 1
  5246                           ;standbyMode.c: 1977: else if (keypress == 14){
  5247                           
  5248                           ; BSR set to: 1
  5249  00F802  0E0E               	movlw	14
  5250  00F804  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  5251  00F806  A4D8               	btfss	status,2,c
  5252  00F808  D05F               	goto	l1316
  5253  00F80A                     u13880:
  5254                           
  5255                           ;standbyMode.c: 1979: unsigned int whichKey = viewLogs();
  5256                           
  5257                           ; BSR set to: 1
  5258                           
  5259                           ;standbyMode.c: 1978: while (1){
  5260  00F80A  EC47  F05E         	call	_viewLogs	;wreg free
  5261  00F80E  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  5262  00F812  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  5263                           
  5264                           ;standbyMode.c: 1980: if (whichKey == 15){
  5265  00F816  0E0F               	movlw	15
  5266  00F818  0101               	movlb	1	; () banked
  5267  00F81A  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5268  00F81C  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5269  00F81E  B4D8               	btfsc	status,2,c
  5270  00F820  D7F4               	goto	u13880
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;standbyMode.c: 1983: else if (whichKey == 14){
  5274                           
  5275                           ; BSR set to: 1
  5276                           
  5277                           ; BSR set to: 1
  5278                           ;standbyMode.c: 1982: }
  5279                           
  5280                           ; BSR set to: 1
  5281                           ;standbyMode.c: 1981: continue;
  5282  00F822  0E0E               	movlw	14
  5283  00F824  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5284  00F826  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5285  00F828  A4D8               	btfss	status,2,c
  5286  00F82A  D020               	goto	l1321
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;standbyMode.c: 1984: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5290  00F82C  0E01               	movlw	1
  5291  00F82E  ECDF  F04B         	call	_lcdInst
  5292  00F832  0EC3               	movlw	195
  5293  00F834  6E60               	movwf	??_standbyMode& (0+255),c
  5294  00F836  0ECD               	movlw	205
  5295  00F838                     u14587:
  5296  00F838  2EE8               	decfsz	wreg,f,c
  5297  00F83A  D7FE               	bra	u14587
  5298  00F83C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5299  00F83E  D7FC               	bra	u14587
  5300  00F840  F000               	nop	
  5301                           
  5302                           ;standbyMode.c: 1985: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5303  00F842  0E0C               	movlw	12
  5304  00F844  ECDF  F04B         	call	_lcdInst
  5305                           
  5306                           ;standbyMode.c: 1986: printf("Rebooting.");
  5307  00F848  0EF2               	movlw	low STR_148
  5308  00F84A  6E0D               	movwf	printf@f,c
  5309  00F84C  0EFB               	movlw	high STR_148
  5310  00F84E  6E0E               	movwf	printf@f+1,c
  5311  00F850  ECBD  F05F         	call	_printf	;wreg free
  5312                           
  5313                           ;standbyMode.c: 1987: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5314  00F854  0E66               	movlw	102
  5315  00F856  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5316  00F858  0E76               	movlw	118
  5317  00F85A  6E60               	movwf	??_standbyMode& (0+255),c
  5318  00F85C  0EC1               	movlw	193
  5319  00F85E                     u14597:
  5320  00F85E  2EE8               	decfsz	wreg,f,c
  5321  00F860  D7FE               	bra	u14597
  5322  00F862  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5323  00F864  D7FC               	bra	u14597
  5324  00F866  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5325  00F868  D7FA               	bra	u14597
  5326  00F86A  D028               	goto	L3
  5327  00F86C                     l1321:
  5328                           
  5329                           ;standbyMode.c: 1990: else{
  5330                           ;standbyMode.c: 1991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5331  00F86C  0E01               	movlw	1
  5332  00F86E  ECDF  F04B         	call	_lcdInst
  5333  00F872  0EC3               	movlw	195
  5334  00F874  6E60               	movwf	??_standbyMode& (0+255),c
  5335  00F876  0ECD               	movlw	205
  5336  00F878                     u14607:
  5337  00F878  2EE8               	decfsz	wreg,f,c
  5338  00F87A  D7FE               	bra	u14607
  5339  00F87C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5340  00F87E  D7FC               	bra	u14607
  5341  00F880  F000               	nop	
  5342                           
  5343                           ;standbyMode.c: 1992: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5344  00F882  0E0C               	movlw	12
  5345  00F884  ECDF  F04B         	call	_lcdInst
  5346                           
  5347                           ;standbyMode.c: 1993: printf("Invalid key!");
  5348  00F888  0E9B               	movlw	low STR_149
  5349  00F88A  6E0D               	movwf	printf@f,c
  5350  00F88C  0EFB               	movlw	high STR_149
  5351  00F88E  6E0E               	movwf	printf@f+1,c
  5352  00F890  ECBD  F05F         	call	_printf	;wreg free
  5353                           
  5354                           ;standbyMode.c: 1994: lcdInst(0xC0);;
  5355  00F894  0EC0               	movlw	192
  5356  00F896  ECDF  F04B         	call	_lcdInst
  5357                           
  5358                           ;standbyMode.c: 1995: printf("Rebooting.");
  5359  00F89A  0EF2               	movlw	low STR_148
  5360  00F89C  6E0D               	movwf	printf@f,c
  5361  00F89E  0EFB               	movlw	high STR_148
  5362  00F8A0  6E0E               	movwf	printf@f+1,c
  5363  00F8A2  ECBD  F05F         	call	_printf	;wreg free
  5364                           
  5365                           ;standbyMode.c: 1996: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5366  00F8A6  0E66               	movlw	102
  5367  00F8A8  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5368  00F8AA  0E76               	movlw	118
  5369  00F8AC  6E60               	movwf	??_standbyMode& (0+255),c
  5370  00F8AE  0EC1               	movlw	193
  5371  00F8B0                     u14617:
  5372  00F8B0  2EE8               	decfsz	wreg,f,c
  5373  00F8B2  D7FE               	bra	u14617
  5374  00F8B4  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5375  00F8B6  D7FC               	bra	u14617
  5376  00F8B8  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5377  00F8BA  D7FA               	bra	u14617
  5378  00F8BC                     L3:
  5379  00F8BC  F000               	nop	
  5380                           
  5381                           ;standbyMode.c: 1998: }
  5382                           ;standbyMode.c: 1999: }
  5383                           ;standbyMode.c: 2000: return 0;
  5384                           
  5385                           ;standbyMode.c: 1997: break;
  5386  00F8BE  0E00               	movlw	0
  5387  00F8C0  6E5F               	movwf	?_standbyMode+1,c
  5388  00F8C2  0E00               	movlw	0
  5389  00F8C4  6E5E               	movwf	?_standbyMode,c
  5390                           
  5391                           ;standbyMode.c: 2001: }
  5392  00F8C6  0012               	return	
  5393  00F8C8                     l1316:
  5394                           
  5395                           ;standbyMode.c: 2003: else {
  5396                           ;standbyMode.c: 2004: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5397  00F8C8  0E01               	movlw	1
  5398  00F8CA  ECDF  F04B         	call	_lcdInst
  5399  00F8CE  0EC3               	movlw	195
  5400  00F8D0  6E60               	movwf	??_standbyMode& (0+255),c
  5401  00F8D2  0ECD               	movlw	205
  5402  00F8D4                     u14627:
  5403  00F8D4  2EE8               	decfsz	wreg,f,c
  5404  00F8D6  D7FE               	bra	u14627
  5405  00F8D8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5406  00F8DA  D7FC               	bra	u14627
  5407  00F8DC  F000               	nop	
  5408                           
  5409                           ;standbyMode.c: 2005: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5410  00F8DE  0E0C               	movlw	12
  5411  00F8E0  ECDF  F04B         	call	_lcdInst
  5412                           
  5413                           ;standbyMode.c: 2006: printf("Invalid key!");
  5414  00F8E4  0E9B               	movlw	low STR_149
  5415  00F8E6  6E0D               	movwf	printf@f,c
  5416  00F8E8  0EFB               	movlw	high STR_149
  5417  00F8EA  6E0E               	movwf	printf@f+1,c
  5418  00F8EC  ECBD  F05F         	call	_printf	;wreg free
  5419                           
  5420                           ;standbyMode.c: 2007: lcdInst(0xC0);;
  5421  00F8F0  0EC0               	movlw	192
  5422  00F8F2  ECDF  F04B         	call	_lcdInst
  5423                           
  5424                           ;standbyMode.c: 2008: printf("Rebooting.");
  5425  00F8F6  0EF2               	movlw	low STR_148
  5426  00F8F8  6E0D               	movwf	printf@f,c
  5427  00F8FA  0EFB               	movlw	high STR_148
  5428  00F8FC  6E0E               	movwf	printf@f+1,c
  5429  00F8FE  ECBD  F05F         	call	_printf	;wreg free
  5430                           
  5431                           ;standbyMode.c: 2009: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5432  00F902  0E66               	movlw	102
  5433  00F904  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5434  00F906  0E76               	movlw	118
  5435  00F908  6E60               	movwf	??_standbyMode& (0+255),c
  5436  00F90A  0EC1               	movlw	193
  5437  00F90C                     u14637:
  5438  00F90C  2EE8               	decfsz	wreg,f,c
  5439  00F90E  D7FE               	bra	u14637
  5440  00F910  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5441  00F912  D7FC               	bra	u14637
  5442  00F914  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5443  00F916  D7FA               	bra	u14637
  5444  00F918  F000               	nop	
  5445                           
  5446                           ;standbyMode.c: 2010: return 0;
  5447  00F91A  0E00               	movlw	0
  5448  00F91C  6E5F               	movwf	?_standbyMode+1,c
  5449  00F91E  0E00               	movlw	0
  5450  00F920  6E5E               	movwf	?_standbyMode,c
  5451  00F922  0012               	return	
  5452  00F924                     __end_of_standbyMode:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           plusw1	equ	0xFE3
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           plusw2	equ	0xFDB
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _which_drawer *****************
  5472 ;; Defined at:
  5473 ;;		line 1539 in file "standbyMode.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;  rand            2   43[COMRAM] unsigned int 
  5478 ;;  keypress        1   51[COMRAM] unsigned char 
  5479 ;;  count           2   49[COMRAM] unsigned int 
  5480 ;;  backCheck       2   47[COMRAM] unsigned int 
  5481 ;;  sum             2   45[COMRAM] unsigned int 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  2   40[COMRAM] unsigned int 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;Total ram usage:       12 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    3
  5498 ;; This function calls:
  5499 ;;		_decode_drawer
  5500 ;;		_lcdInst
  5501 ;;		_printf
  5502 ;;		_putch
  5503 ;; This function is called by:
  5504 ;;		_standbyMode
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text2
  5509  00B368                     __ptext2:
  5510                           	opt stack 0
  5511  00B368                     _which_drawer:
  5512                           	opt stack 26
  5513                           
  5514                           ;standbyMode.c: 1540: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5515                           
  5516                           ;incstack = 0
  5517  00B368  0E0C               	movlw	12
  5518  00B36A  ECDF  F04B         	call	_lcdInst
  5519                           
  5520                           ;standbyMode.c: 1541: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5521  00B36E  0E01               	movlw	1
  5522  00B370  ECDF  F04B         	call	_lcdInst
  5523  00B374  0EC3               	movlw	195
  5524  00B376  6E2B               	movwf	??_which_drawer& (0+255),c
  5525  00B378  0ECD               	movlw	205
  5526  00B37A                     u14647:
  5527  00B37A  2EE8               	decfsz	wreg,f,c
  5528  00B37C  D7FE               	bra	u14647
  5529  00B37E  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5530  00B380  D7FC               	bra	u14647
  5531  00B382  F000               	nop	
  5532                           
  5533                           ;standbyMode.c: 1542: printf("Drawer number:");
  5534  00B384  0EBF               	movlw	low STR_113
  5535  00B386  6E0D               	movwf	printf@f,c
  5536  00B388  0EFA               	movlw	high STR_113
  5537  00B38A  6E0E               	movwf	printf@f+1,c
  5538  00B38C  ECBD  F05F         	call	_printf	;wreg free
  5539                           
  5540                           ;standbyMode.c: 1543: lcdInst(0xC0);;
  5541  00B390  0EC0               	movlw	192
  5542  00B392  ECDF  F04B         	call	_lcdInst
  5543                           
  5544                           ;standbyMode.c: 1545: unsigned int count = 0;
  5545  00B396  0E00               	movlw	0
  5546  00B398  6E33               	movwf	which_drawer@count+1,c
  5547  00B39A  0E00               	movlw	0
  5548  00B39C  6E32               	movwf	which_drawer@count,c
  5549                           
  5550                           ;standbyMode.c: 1546: unsigned int sum = 0;
  5551  00B39E  0E00               	movlw	0
  5552  00B3A0  6E2F               	movwf	which_drawer@sum+1,c
  5553  00B3A2  0E00               	movlw	0
  5554  00B3A4  6E2E               	movwf	which_drawer@sum,c
  5555                           
  5556                           ;standbyMode.c: 1547: unsigned int backCheck = 0;
  5557  00B3A6  0E00               	movlw	0
  5558  00B3A8  6E31               	movwf	which_drawer@backCheck+1,c
  5559  00B3AA  0E00               	movlw	0
  5560  00B3AC  6E30               	movwf	which_drawer@backCheck,c
  5561  00B3AE                     
  5562                           ;standbyMode.c: 1550: while(PORTBbits.RB1 == 0){ continue; }
  5563  00B3AE  A281               	btfss	3969,1,c	;volatile
  5564  00B3B0  D7FE               	goto	l1197
  5565                           
  5566                           ;standbyMode.c: 1551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5567  00B3B2  3881               	swapf	3969,w,c	;volatile
  5568  00B3B4  0B0F               	andlw	15
  5569  00B3B6  0B0F               	andlw	15
  5570  00B3B8  6E34               	movwf	which_drawer@keypress,c
  5571  00B3BA  B281               	btfsc	3969,1,c	;volatile
  5572  00B3BC  D7FE               	goto	l1202
  5573                           
  5574                           ;standbyMode.c: 1554: if(keypress == 15){
  5575  00B3BE  0E0F               	movlw	15
  5576  00B3C0  1834               	xorwf	which_drawer@keypress,w,c
  5577  00B3C2  B4D8               	btfsc	status,2,c
  5578  00B3C4  D0C3               	goto	l1205
  5579                           
  5580                           ;standbyMode.c: 1557: else if (keypress == 14){
  5581                           
  5582                           ;standbyMode.c: 1556: }
  5583                           
  5584                           ;standbyMode.c: 1555: break;
  5585  00B3C6  0E0E               	movlw	14
  5586  00B3C8  1834               	xorwf	which_drawer@keypress,w,c
  5587  00B3CA  A4D8               	btfss	status,2,c
  5588  00B3CC  D005               	goto	l1207
  5589                           
  5590                           ;standbyMode.c: 1558: backCheck = 100;
  5591  00B3CE  0E00               	movlw	0
  5592  00B3D0  6E31               	movwf	which_drawer@backCheck+1,c
  5593  00B3D2  0E64               	movlw	100
  5594  00B3D4  6E30               	movwf	which_drawer@backCheck,c
  5595                           
  5596                           ;standbyMode.c: 1559: break;
  5597  00B3D6  D0BA               	goto	l1205
  5598  00B3D8                     l1207:
  5599                           
  5600                           ;standbyMode.c: 1561: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  5601  00B3D8  5034               	movf	which_drawer@keypress,w,c
  5602  00B3DA  B4D8               	btfsc	status,2,c
  5603  00B3DC  D023               	goto	u13090
  5604  00B3DE  0434               	decf	which_drawer@keypress,w,c
  5605  00B3E0  B4D8               	btfsc	status,2,c
  5606  00B3E2  D020               	goto	u13090
  5607  00B3E4  0E02               	movlw	2
  5608  00B3E6  1834               	xorwf	which_drawer@keypress,w,c
  5609  00B3E8  B4D8               	btfsc	status,2,c
  5610  00B3EA  D01C               	goto	u13090
  5611  00B3EC  0E04               	movlw	4
  5612  00B3EE  1834               	xorwf	which_drawer@keypress,w,c
  5613  00B3F0  B4D8               	btfsc	status,2,c
  5614  00B3F2  D018               	goto	u13090
  5615  00B3F4  0E05               	movlw	5
  5616  00B3F6  1834               	xorwf	which_drawer@keypress,w,c
  5617  00B3F8  B4D8               	btfsc	status,2,c
  5618  00B3FA  D014               	goto	u13090
  5619  00B3FC  0E06               	movlw	6
  5620  00B3FE  1834               	xorwf	which_drawer@keypress,w,c
  5621  00B400  B4D8               	btfsc	status,2,c
  5622  00B402  D010               	goto	u13090
  5623  00B404  0E08               	movlw	8
  5624  00B406  1834               	xorwf	which_drawer@keypress,w,c
  5625  00B408  B4D8               	btfsc	status,2,c
  5626  00B40A  D00C               	goto	u13090
  5627  00B40C  0E09               	movlw	9
  5628  00B40E  1834               	xorwf	which_drawer@keypress,w,c
  5629  00B410  B4D8               	btfsc	status,2,c
  5630  00B412  D008               	goto	u13090
  5631  00B414  0E0A               	movlw	10
  5632  00B416  1834               	xorwf	which_drawer@keypress,w,c
  5633  00B418  B4D8               	btfsc	status,2,c
  5634  00B41A  D004               	goto	u13090
  5635  00B41C  0E0D               	movlw	13
  5636  00B41E  1834               	xorwf	which_drawer@keypress,w,c
  5637  00B420  A4D8               	btfss	status,2,c
  5638  00B422  D073               	goto	l1209
  5639  00B424                     u13090:
  5640                           
  5641                           ;standbyMode.c: 1562: if (count == 0){
  5642  00B424  5032               	movf	which_drawer@count,w,c
  5643  00B426  1033               	iorwf	which_drawer@count+1,w,c
  5644  00B428  A4D8               	btfss	status,2,c
  5645  00B42A  D04C               	goto	l1212
  5646                           
  5647                           ;standbyMode.c: 1563: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  5648  00B42C  0434               	decf	which_drawer@keypress,w,c
  5649  00B42E  B4D8               	btfsc	status,2,c
  5650  00B430  D01C               	goto	u13180
  5651  00B432  0E02               	movlw	2
  5652  00B434  1834               	xorwf	which_drawer@keypress,w,c
  5653  00B436  B4D8               	btfsc	status,2,c
  5654  00B438  D018               	goto	u13180
  5655  00B43A  0E04               	movlw	4
  5656  00B43C  1834               	xorwf	which_drawer@keypress,w,c
  5657  00B43E  B4D8               	btfsc	status,2,c
  5658  00B440  D014               	goto	u13180
  5659  00B442  0E05               	movlw	5
  5660  00B444  1834               	xorwf	which_drawer@keypress,w,c
  5661  00B446  B4D8               	btfsc	status,2,c
  5662  00B448  D010               	goto	u13180
  5663  00B44A  0E06               	movlw	6
  5664  00B44C  1834               	xorwf	which_drawer@keypress,w,c
  5665  00B44E  B4D8               	btfsc	status,2,c
  5666  00B450  D00C               	goto	u13180
  5667  00B452  0E08               	movlw	8
  5668  00B454  1834               	xorwf	which_drawer@keypress,w,c
  5669  00B456  B4D8               	btfsc	status,2,c
  5670  00B458  D008               	goto	u13180
  5671  00B45A  0E09               	movlw	9
  5672  00B45C  1834               	xorwf	which_drawer@keypress,w,c
  5673  00B45E  B4D8               	btfsc	status,2,c
  5674  00B460  D004               	goto	u13180
  5675  00B462  0E0A               	movlw	10
  5676  00B464  1834               	xorwf	which_drawer@keypress,w,c
  5677  00B466  A4D8               	btfss	status,2,c
  5678  00B468  D014               	goto	l1213
  5679  00B46A                     u13180:
  5680                           
  5681                           ;standbyMode.c: 1564: count += 2;
  5682  00B46A  0E02               	movlw	2
  5683  00B46C  2632               	addwf	which_drawer@count,f,c
  5684  00B46E  0E00               	movlw	0
  5685  00B470  2233               	addwfc	which_drawer@count+1,f,c
  5686                           
  5687                           ;standbyMode.c: 1565: putch(input[keypress]);
  5688  00B472  5034               	movf	which_drawer@keypress,w,c
  5689  00B474  0D01               	mullw	1
  5690  00B476  0E36               	movlw	low _input
  5691  00B478  24F3               	addwf	prodl,w,c
  5692  00B47A  6EF6               	movwf	tblptrl,c
  5693  00B47C  0EF9               	movlw	high _input
  5694  00B47E  20F4               	addwfc	prodh,w,c
  5695  00B480  6EF7               	movwf	tblptrh,c
  5696  00B482                     	if	1	;There are 3 active tblptr bytes
  5697  00B482  6AF8               	clrf	tblptru,c
  5698  00B484  0E00               	movlw	low (__mediumconst shr (0+16))
  5699  00B486  22F8               	addwfc	tblptru,f,c
  5700  00B488                     	endif
  5701  00B488  0008               	tblrd		*
  5702  00B48A  50F5               	movf	tablat,w,c
  5703  00B48C  ECF3  F04B         	call	_putch
  5704  00B490  D03A               	goto	l1223
  5705  00B492                     l1213:
  5706                           
  5707                           ;standbyMode.c: 1568: else if (keypress == 0){
  5708  00B492  5034               	movf	which_drawer@keypress,w,c
  5709  00B494  A4D8               	btfss	status,2,c
  5710  00B496  D78B               	goto	l1197
  5711                           
  5712                           ;standbyMode.c: 1569: putch(input[keypress]);
  5713  00B498  5034               	movf	which_drawer@keypress,w,c
  5714  00B49A  0D01               	mullw	1
  5715  00B49C  0E36               	movlw	low _input
  5716  00B49E  24F3               	addwf	prodl,w,c
  5717  00B4A0  6EF6               	movwf	tblptrl,c
  5718  00B4A2  0EF9               	movlw	high _input
  5719  00B4A4  20F4               	addwfc	prodh,w,c
  5720  00B4A6  6EF7               	movwf	tblptrh,c
  5721  00B4A8                     	if	1	;There are 3 active tblptr bytes
  5722  00B4A8  6AF8               	clrf	tblptru,c
  5723  00B4AA  0E00               	movlw	low (__mediumconst shr (0+16))
  5724  00B4AC  22F8               	addwfc	tblptru,f,c
  5725  00B4AE                     	endif
  5726  00B4AE  0008               	tblrd		*
  5727  00B4B0  50F5               	movf	tablat,w,c
  5728  00B4B2  ECF3  F04B         	call	_putch
  5729                           
  5730                           ;standbyMode.c: 1570: count += 1;
  5731  00B4B6  4A32               	infsnz	which_drawer@count,f,c
  5732  00B4B8  2A33               	incf	which_drawer@count+1,f,c
  5733  00B4BA  D023               	goto	u13230
  5734  00B4BC                     L4:
  5735  00B4BC  262E               	addwf	which_drawer@sum,f,c
  5736  00B4BE  0E00               	movlw	0
  5737  00B4C0  222F               	addwfc	which_drawer@sum+1,f,c
  5738                           
  5739                           ;standbyMode.c: 1572: }
  5740                           ;standbyMode.c: 1573: }
  5741  00B4C2  D775               	goto	l1197
  5742  00B4C4                     l1212:
  5743                           
  5744                           ;standbyMode.c: 1574: else if (count == 1){
  5745  00B4C4  0432               	decf	which_drawer@count,w,c
  5746  00B4C6  1033               	iorwf	which_drawer@count+1,w,c
  5747  00B4C8  A4D8               	btfss	status,2,c
  5748  00B4CA  D771               	goto	l1197
  5749                           
  5750                           ;standbyMode.c: 1575: if (keypress < 8 || keypress == 13){
  5751  00B4CC  0E07               	movlw	7
  5752  00B4CE  6434               	cpfsgt	which_drawer@keypress,c
  5753  00B4D0  D004               	goto	u13220
  5754  00B4D2  0E0D               	movlw	13
  5755  00B4D4  1834               	xorwf	which_drawer@keypress,w,c
  5756  00B4D6  A4D8               	btfss	status,2,c
  5757  00B4D8  D76A               	goto	l1197
  5758  00B4DA                     u13220:
  5759                           
  5760                           ;standbyMode.c: 1576: putch(input[keypress]);
  5761  00B4DA  5034               	movf	which_drawer@keypress,w,c
  5762  00B4DC  0D01               	mullw	1
  5763  00B4DE  0E36               	movlw	low _input
  5764  00B4E0  24F3               	addwf	prodl,w,c
  5765  00B4E2  6EF6               	movwf	tblptrl,c
  5766  00B4E4  0EF9               	movlw	high _input
  5767  00B4E6  20F4               	addwfc	prodh,w,c
  5768  00B4E8  6EF7               	movwf	tblptrh,c
  5769  00B4EA                     	if	1	;There are 3 active tblptr bytes
  5770  00B4EA  6AF8               	clrf	tblptru,c
  5771  00B4EC  0E00               	movlw	low (__mediumconst shr (0+16))
  5772  00B4EE  22F8               	addwfc	tblptru,f,c
  5773  00B4F0                     	endif
  5774  00B4F0  0008               	tblrd		*
  5775  00B4F2  50F5               	movf	tablat,w,c
  5776  00B4F4  ECF3  F04B         	call	_putch
  5777                           
  5778                           ;standbyMode.c: 1577: count += 1;
  5779  00B4F8  4A32               	infsnz	which_drawer@count,f,c
  5780  00B4FA  2A33               	incf	which_drawer@count+1,f,c
  5781                           
  5782                           ;standbyMode.c: 1578: if(keypress == 0){
  5783  00B4FC  5034               	movf	which_drawer@keypress,w,c
  5784  00B4FE  A4D8               	btfss	status,2,c
  5785  00B500  D002               	goto	l1223
  5786  00B502                     u13230:
  5787                           
  5788                           ;standbyMode.c: 1579: sum += 20;
  5789  00B502  0E14               	movlw	20
  5790  00B504  D7DB               	goto	L4
  5791  00B506                     l1223:
  5792                           
  5793                           ;standbyMode.c: 1581: else {
  5794                           ;standbyMode.c: 1582: sum += keypress;
  5795  00B506  5034               	movf	which_drawer@keypress,w,c
  5796  00B508  D7D9               	goto	L4
  5797  00B50A                     l1209:
  5798                           
  5799                           ;standbyMode.c: 1587: else if (keypress == 12){
  5800  00B50A  0E0C               	movlw	12
  5801  00B50C  1834               	xorwf	which_drawer@keypress,w,c
  5802  00B50E  A4D8               	btfss	status,2,c
  5803  00B510  D74E               	goto	l1197
  5804                           
  5805                           ;standbyMode.c: 1588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5806  00B512  0E01               	movlw	1
  5807  00B514  ECDF  F04B         	call	_lcdInst
  5808  00B518  0EC3               	movlw	195
  5809  00B51A  6E2B               	movwf	??_which_drawer& (0+255),c
  5810  00B51C  0ECD               	movlw	205
  5811  00B51E                     u14657:
  5812  00B51E  2EE8               	decfsz	wreg,f,c
  5813  00B520  D7FE               	bra	u14657
  5814  00B522  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5815  00B524  D7FC               	bra	u14657
  5816  00B526  F000               	nop	
  5817                           
  5818                           ;standbyMode.c: 1589: printf("Drawer number:");
  5819  00B528  0EBF               	movlw	low STR_113
  5820  00B52A  6E0D               	movwf	printf@f,c
  5821  00B52C  0EFA               	movlw	high STR_113
  5822  00B52E  6E0E               	movwf	printf@f+1,c
  5823  00B530  ECBD  F05F         	call	_printf	;wreg free
  5824                           
  5825                           ;standbyMode.c: 1590: lcdInst(0xC0);;
  5826  00B534  0EC0               	movlw	192
  5827  00B536  ECDF  F04B         	call	_lcdInst
  5828                           
  5829                           ;standbyMode.c: 1591: count = 0;
  5830  00B53A  0E00               	movlw	0
  5831  00B53C  6E33               	movwf	which_drawer@count+1,c
  5832  00B53E  0E00               	movlw	0
  5833  00B540  6E32               	movwf	which_drawer@count,c
  5834                           
  5835                           ;standbyMode.c: 1592: sum = 0;
  5836  00B542  0E00               	movlw	0
  5837  00B544  6E2F               	movwf	which_drawer@sum+1,c
  5838  00B546  0E00               	movlw	0
  5839  00B548  6E2E               	movwf	which_drawer@sum,c
  5840  00B54A  D731               	goto	l1197
  5841  00B54C                     l1205:
  5842                           
  5843                           ;standbyMode.c: 1593: }
  5844                           ;standbyMode.c: 1594: }
  5845                           ;standbyMode.c: 1596: if (backCheck == 100){
  5846  00B54C  0E64               	movlw	100
  5847  00B54E  1830               	xorwf	which_drawer@backCheck,w,c
  5848  00B550  1031               	iorwf	which_drawer@backCheck+1,w,c
  5849  00B552  A4D8               	btfss	status,2,c
  5850  00B554  D005               	goto	l1228
  5851                           
  5852                           ;standbyMode.c: 1597: return backCheck;
  5853  00B556  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5854  00B55A  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5855                           
  5856                           ;standbyMode.c: 1598: }
  5857  00B55E  0012               	return	
  5858  00B560                     l1228:
  5859                           
  5860                           ;standbyMode.c: 1599: else{
  5861                           ;standbyMode.c: 1600: unsigned int rand = decode_drawer(sum);
  5862  00B560  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5863  00B564  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5864  00B568  EC87  F051         	call	_decode_drawer	;wreg free
  5865  00B56C  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5866  00B570  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5867                           
  5868                           ;standbyMode.c: 1601: return rand;
  5869  00B574  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5870  00B578  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5871  00B57C  0012               	return	
  5872  00B57E                     __end_of_which_drawer:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           postdec1	equ	0xFE5
  5883                           plusw1	equ	0xFE3
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           plusw2	equ	0xFDB
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _decode_drawer *****************
  5894 ;; Defined at:
  5895 ;;		line 1461 in file "standbyMode.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  drawer          2    0[COMRAM] unsigned int 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  returnValue     2    4[COMRAM] unsigned int 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  2    0[COMRAM] unsigned int 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:        6 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_which_drawer
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text3
  5923  00A30E                     __ptext3:
  5924                           	opt stack 0
  5925  00A30E                     _decode_drawer:
  5926                           	opt stack 28
  5927                           
  5928                           ;standbyMode.c: 1462: unsigned int returnValue;
  5929                           ;standbyMode.c: 1464: switch(drawer){
  5930                           
  5931                           ;incstack = 0
  5932  00A30E  D03A               	goto	l1178
  5933  00A310                     
  5934                           ;standbyMode.c: 1467: returnValue = 1;
  5935  00A310  0E00               	movlw	0
  5936  00A312  6E06               	movwf	decode_drawer@returnValue+1,c
  5937  00A314  0E01               	movlw	1
  5938  00A316  D02F               	goto	L16
  5939  00A318                     
  5940                           ;standbyMode.c: 1472: returnValue = 2;
  5941  00A318  0E00               	movlw	0
  5942  00A31A  6E06               	movwf	decode_drawer@returnValue+1,c
  5943  00A31C  0E02               	movlw	2
  5944  00A31E  D02B               	goto	L16
  5945  00A320                     
  5946                           ;standbyMode.c: 1477: returnValue = 3;
  5947  00A320  0E00               	movlw	0
  5948  00A322  6E06               	movwf	decode_drawer@returnValue+1,c
  5949  00A324  0E03               	movlw	3
  5950  00A326  D027               	goto	L16
  5951  00A328                     
  5952                           ;standbyMode.c: 1482: returnValue = 7;
  5953  00A328  0E00               	movlw	0
  5954  00A32A  6E06               	movwf	decode_drawer@returnValue+1,c
  5955  00A32C  0E07               	movlw	7
  5956  00A32E  D023               	goto	L16
  5957  00A330                     
  5958                           ;standbyMode.c: 1487: returnValue = 8;
  5959  00A330  0E00               	movlw	0
  5960  00A332  6E06               	movwf	decode_drawer@returnValue+1,c
  5961  00A334  0E08               	movlw	8
  5962  00A336  D01F               	goto	L16
  5963  00A338                     
  5964                           ;standbyMode.c: 1492: returnValue = 9;
  5965  00A338  0E00               	movlw	0
  5966  00A33A  6E06               	movwf	decode_drawer@returnValue+1,c
  5967  00A33C  0E09               	movlw	9
  5968  00A33E  D01B               	goto	L16
  5969  00A340                     
  5970                           ;standbyMode.c: 1497: returnValue = 10;
  5971  00A340  0E00               	movlw	0
  5972  00A342  6E06               	movwf	decode_drawer@returnValue+1,c
  5973  00A344  0E0A               	movlw	10
  5974  00A346  D017               	goto	L16
  5975  00A348                     
  5976                           ;standbyMode.c: 1502: returnValue = 11;
  5977  00A348  0E00               	movlw	0
  5978  00A34A  6E06               	movwf	decode_drawer@returnValue+1,c
  5979  00A34C  0E0B               	movlw	11
  5980  00A34E  D013               	goto	L16
  5981  00A350                     
  5982                           ;standbyMode.c: 1507: returnValue = 12;
  5983  00A350  0E00               	movlw	0
  5984  00A352  6E06               	movwf	decode_drawer@returnValue+1,c
  5985  00A354  0E0C               	movlw	12
  5986  00A356  D00F               	goto	L16
  5987  00A358                     
  5988                           ;standbyMode.c: 1512: returnValue = 13;
  5989  00A358  0E00               	movlw	0
  5990  00A35A  6E06               	movwf	decode_drawer@returnValue+1,c
  5991  00A35C  0E0D               	movlw	13
  5992  00A35E  D00B               	goto	L16
  5993  00A360                     
  5994                           ;standbyMode.c: 1517: returnValue = 14;
  5995  00A360  0E00               	movlw	0
  5996  00A362  6E06               	movwf	decode_drawer@returnValue+1,c
  5997  00A364  0E0E               	movlw	14
  5998  00A366  D007               	goto	L16
  5999  00A368                     
  6000                           ;standbyMode.c: 1522: returnValue = 15;
  6001  00A368  0E00               	movlw	0
  6002  00A36A  6E06               	movwf	decode_drawer@returnValue+1,c
  6003  00A36C  0E0F               	movlw	15
  6004  00A36E  D003               	goto	L16
  6005  00A370                     
  6006                           ;standbyMode.c: 1527: returnValue = 16;
  6007  00A370  0E00               	movlw	0
  6008  00A372  6E06               	movwf	decode_drawer@returnValue+1,c
  6009  00A374  0E10               	movlw	16
  6010  00A376                     L16:
  6011  00A376  6E05               	movwf	decode_drawer@returnValue,c
  6012                           
  6013                           ;standbyMode.c: 1528: break;
  6014  00A378  D036               	goto	l1180
  6015  00A37A                     l1193:
  6016                           
  6017                           ;standbyMode.c: 1531: returnValue = drawer;
  6018  00A37A  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  6019  00A37E  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  6020                           
  6021                           ;standbyMode.c: 1533: }
  6022                           
  6023                           ;standbyMode.c: 1532: break;
  6024  00A382  D031               	goto	l1180
  6025  00A384                     l1178:
  6026  00A384  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  6027  00A388  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  6028                           
  6029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6030                           ; Switch size 1, requested type "space"
  6031                           ; Number of cases is 1, Range of values is 0 to 0
  6032                           ; switch strategies available:
  6033                           ; Name         Instructions Cycles
  6034                           ; simple_byte            4     3 (average)
  6035                           ;	Chosen strategy is simple_byte
  6036  00A38C  5004               	movf	??_decode_drawer+1,w,c
  6037  00A38E  0A00               	xorlw	0	; case 0
  6038  00A390  A4D8               	btfss	status,2,c
  6039  00A392  D7F3               	goto	l1193
  6040                           
  6041                           ; Switch size 1, requested type "space"
  6042                           ; Number of cases is 13, Range of values is 1 to 40
  6043                           ; switch strategies available:
  6044                           ; Name         Instructions Cycles
  6045                           ; simple_byte           40    21 (average)
  6046                           ;	Chosen strategy is simple_byte
  6047  00A394  5003               	movf	??_decode_drawer,w,c
  6048  00A396  0A01               	xorlw	1	; case 1
  6049  00A398  B4D8               	btfsc	status,2,c
  6050  00A39A  D7BE               	goto	l1181
  6051  00A39C  0A03               	xorlw	3	; case 2
  6052  00A39E  B4D8               	btfsc	status,2,c
  6053  00A3A0  D7BF               	goto	l1182
  6054  00A3A2  0A0A               	xorlw	10	; case 8
  6055  00A3A4  B4D8               	btfsc	status,2,c
  6056  00A3A6  D7C0               	goto	l1183
  6057  00A3A8  0A01               	xorlw	1	; case 9
  6058  00A3AA  B4D8               	btfsc	status,2,c
  6059  00A3AC  D7C1               	goto	l1184
  6060  00A3AE  0A03               	xorlw	3	; case 10
  6061  00A3B0  B4D8               	btfsc	status,2,c
  6062  00A3B2  D7C2               	goto	l1185
  6063  00A3B4  0A1E               	xorlw	30	; case 20
  6064  00A3B6  B4D8               	btfsc	status,2,c
  6065  00A3B8  D7AB               	goto	l1179
  6066  00A3BA  0A01               	xorlw	1	; case 21
  6067  00A3BC  B4D8               	btfsc	status,2,c
  6068  00A3BE  D7C8               	goto	l1188
  6069  00A3C0  0A03               	xorlw	3	; case 22
  6070  00A3C2  B4D8               	btfsc	status,2,c
  6071  00A3C4  D7C9               	goto	l1189
  6072  00A3C6  0A0E               	xorlw	14	; case 24
  6073  00A3C8  B4D8               	btfsc	status,2,c
  6074  00A3CA  D7CA               	goto	l1190
  6075  00A3CC  0A01               	xorlw	1	; case 25
  6076  00A3CE  B4D8               	btfsc	status,2,c
  6077  00A3D0  D7CB               	goto	l1191
  6078  00A3D2  0A03               	xorlw	3	; case 26
  6079  00A3D4  B4D8               	btfsc	status,2,c
  6080  00A3D6  D7CC               	goto	l1192
  6081  00A3D8  0A3B               	xorlw	59	; case 33
  6082  00A3DA  B4D8               	btfsc	status,2,c
  6083  00A3DC  D7B1               	goto	l1186
  6084  00A3DE  0A09               	xorlw	9	; case 40
  6085  00A3E0  B4D8               	btfsc	status,2,c
  6086  00A3E2  D7B2               	goto	l1187
  6087  00A3E4  D7CA               	goto	l1193
  6088  00A3E6                     l1180:
  6089                           
  6090                           ;standbyMode.c: 1534: return returnValue;
  6091  00A3E6  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  6092  00A3EA  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  6093  00A3EE  0012               	return		;funcret
  6094  00A3F0                     __end_of_decode_drawer:
  6095                           	opt stack 0
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           plusw1	equ	0xFE3
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _viewLogs *****************
  6116 ;; Defined at:
  6117 ;;		line 753 in file "standbyMode.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  keypress2       1   92[COMRAM] unsigned char 
  6122 ;;  logView         2   89[COMRAM] unsigned int 
  6123 ;;  returnVal       2   87[COMRAM] unsigned int 
  6124 ;;  checkLog        2   85[COMRAM] unsigned int 
  6125 ;;  logNumber       1   91[COMRAM] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  2   81[COMRAM] unsigned int 
  6128 ;; Registers used:
  6129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:       12 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    4
  6142 ;; This function calls:
  6143 ;;		_displayLogs
  6144 ;;		_lcdInst
  6145 ;;		_printf
  6146 ;;		_putch
  6147 ;;		_readEEPROM
  6148 ;;		_verifyKeypress
  6149 ;; This function is called by:
  6150 ;;		_standbyMode
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text4
  6155  00BC8E                     __ptext4:
  6156                           	opt stack 0
  6157  00BC8E                     _viewLogs:
  6158                           	opt stack 25
  6159                           
  6160                           ;standbyMode.c: 755: unsigned char logNumber = readEEPROM(250);
  6161                           
  6162                           ;incstack = 0
  6163  00BC8E  0EFA               	movlw	250
  6164  00BC90  ECE9  F04B         	call	_readEEPROM
  6165  00BC94  6E5C               	movwf	viewLogs@logNumber,c
  6166                           
  6167                           ;standbyMode.c: 756: unsigned int logView = 0;
  6168  00BC96  0E00               	movlw	0
  6169  00BC98  6E5B               	movwf	viewLogs@logView+1,c
  6170  00BC9A  0E00               	movlw	0
  6171  00BC9C  6E5A               	movwf	viewLogs@logView,c
  6172                           
  6173                           ;standbyMode.c: 757: unsigned int checkLog = 0;
  6174  00BC9E  0E00               	movlw	0
  6175  00BCA0  6E57               	movwf	viewLogs@checkLog+1,c
  6176  00BCA2  0E00               	movlw	0
  6177  00BCA4  6E56               	movwf	viewLogs@checkLog,c
  6178                           
  6179                           ;standbyMode.c: 758: unsigned int returnVal = 0;
  6180  00BCA6  0E00               	movlw	0
  6181  00BCA8  6E59               	movwf	viewLogs@returnVal+1,c
  6182  00BCAA  0E00               	movlw	0
  6183  00BCAC  6E58               	movwf	viewLogs@returnVal,c
  6184                           
  6185                           ;standbyMode.c: 760: if (logNumber == 0){
  6186  00BCAE  505C               	movf	viewLogs@logNumber,w,c
  6187  00BCB0  A4D8               	btfss	status,2,c
  6188  00BCB2  D02B               	goto	l919
  6189                           
  6190                           ;standbyMode.c: 761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6191  00BCB4  0E01               	movlw	1
  6192  00BCB6  ECDF  F04B         	call	_lcdInst
  6193  00BCBA  0EC3               	movlw	195
  6194  00BCBC  6E54               	movwf	??_viewLogs& (0+255),c
  6195  00BCBE  0ECD               	movlw	205
  6196  00BCC0                     u14667:
  6197  00BCC0  2EE8               	decfsz	wreg,f,c
  6198  00BCC2  D7FE               	bra	u14667
  6199  00BCC4  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6200  00BCC6  D7FC               	bra	u14667
  6201  00BCC8  F000               	nop	
  6202                           
  6203                           ;standbyMode.c: 762: printf("No logs");
  6204  00BCCA  0E8F               	movlw	low STR_76
  6205  00BCCC  6E0D               	movwf	printf@f,c
  6206  00BCCE  0EFC               	movlw	high STR_76
  6207  00BCD0  6E0E               	movwf	printf@f+1,c
  6208  00BCD2  ECBD  F05F         	call	_printf	;wreg free
  6209                           
  6210                           ;standbyMode.c: 763: lcdInst(0xC0);;
  6211  00BCD6  0EC0               	movlw	192
  6212  00BCD8  ECDF  F04B         	call	_lcdInst
  6213                           
  6214                           ;standbyMode.c: 764: printf("available.");
  6215  00BCDC  0EE7               	movlw	low STR_77
  6216  00BCDE  6E0D               	movwf	printf@f,c
  6217  00BCE0  0EFB               	movlw	high STR_77
  6218  00BCE2  6E0E               	movwf	printf@f+1,c
  6219  00BCE4  ECBD  F05F         	call	_printf	;wreg free
  6220                           
  6221                           ;standbyMode.c: 765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6222  00BCE8  0E66               	movlw	102
  6223  00BCEA  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6224  00BCEC  0E76               	movlw	118
  6225  00BCEE  6E54               	movwf	??_viewLogs& (0+255),c
  6226  00BCF0  0EC1               	movlw	193
  6227  00BCF2                     u14677:
  6228  00BCF2  2EE8               	decfsz	wreg,f,c
  6229  00BCF4  D7FE               	bra	u14677
  6230  00BCF6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6231  00BCF8  D7FC               	bra	u14677
  6232  00BCFA  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6233  00BCFC  D7FA               	bra	u14677
  6234  00BCFE  F000               	nop	
  6235                           
  6236                           ;standbyMode.c: 766: return 14;
  6237  00BD00  0E00               	movlw	0
  6238  00BD02  6E53               	movwf	?_viewLogs+1,c
  6239  00BD04  0E0E               	movlw	14
  6240  00BD06  6E52               	movwf	?_viewLogs,c
  6241                           
  6242                           ;standbyMode.c: 767: }
  6243  00BD08  0012               	return	
  6244  00BD0A                     l919:
  6245                           
  6246                           ;standbyMode.c: 768: else {
  6247                           ;standbyMode.c: 769: if (logNumber == 1){
  6248  00BD0A  045C               	decf	viewLogs@logNumber,w,c
  6249  00BD0C  A4D8               	btfss	status,2,c
  6250  00BD0E  D053               	goto	l922
  6251                           
  6252                           ;standbyMode.c: 770: logView = 1;
  6253  00BD10  0E00               	movlw	0
  6254  00BD12  6E5B               	movwf	viewLogs@logView+1,c
  6255  00BD14  0E01               	movlw	1
  6256  00BD16  6E5A               	movwf	viewLogs@logView,c
  6257                           
  6258                           ;standbyMode.c: 772: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6259  00BD18  0E01               	movlw	1
  6260  00BD1A  ECDF  F04B         	call	_lcdInst
  6261  00BD1E  0EC3               	movlw	195
  6262  00BD20  6E54               	movwf	??_viewLogs& (0+255),c
  6263  00BD22  0ECD               	movlw	205
  6264  00BD24                     u14687:
  6265  00BD24  2EE8               	decfsz	wreg,f,c
  6266  00BD26  D7FE               	bra	u14687
  6267  00BD28  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6268  00BD2A  D7FC               	bra	u14687
  6269  00BD2C  F000               	nop	
  6270                           
  6271                           ;standbyMode.c: 773: printf("1 previous log");
  6272  00BD2E  0EDD               	movlw	low STR_78
  6273  00BD30  6E0D               	movwf	printf@f,c
  6274  00BD32  0EFA               	movlw	high STR_78
  6275  00BD34  6E0E               	movwf	printf@f+1,c
  6276  00BD36  ECBD  F05F         	call	_printf	;wreg free
  6277                           
  6278                           ;standbyMode.c: 774: lcdInst(0xC0);;
  6279  00BD3A  0EC0               	movlw	192
  6280  00BD3C  ECDF  F04B         	call	_lcdInst
  6281                           
  6282                           ;standbyMode.c: 775: printf("available.");
  6283  00BD40  0EE7               	movlw	low STR_77
  6284  00BD42  6E0D               	movwf	printf@f,c
  6285  00BD44  0EFB               	movlw	high STR_77
  6286  00BD46  6E0E               	movwf	printf@f+1,c
  6287  00BD48  ECBD  F05F         	call	_printf	;wreg free
  6288                           
  6289                           ;standbyMode.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6290  00BD4C  0E66               	movlw	102
  6291  00BD4E  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6292  00BD50  0E76               	movlw	118
  6293  00BD52  6E54               	movwf	??_viewLogs& (0+255),c
  6294  00BD54  0EC1               	movlw	193
  6295  00BD56                     u14697:
  6296  00BD56  2EE8               	decfsz	wreg,f,c
  6297  00BD58  D7FE               	bra	u14697
  6298  00BD5A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6299  00BD5C  D7FC               	bra	u14697
  6300  00BD5E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6301  00BD60  D7FA               	bra	u14697
  6302  00BD62  F000               	nop	
  6303                           
  6304                           ;standbyMode.c: 778: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6305  00BD64  0E01               	movlw	1
  6306  00BD66  ECDF  F04B         	call	_lcdInst
  6307  00BD6A  0EC3               	movlw	195
  6308  00BD6C  6E54               	movwf	??_viewLogs& (0+255),c
  6309  00BD6E  0ECD               	movlw	205
  6310  00BD70                     u14707:
  6311  00BD70  2EE8               	decfsz	wreg,f,c
  6312  00BD72  D7FE               	bra	u14707
  6313  00BD74  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6314  00BD76  D7FC               	bra	u14707
  6315  00BD78  F000               	nop	
  6316                           
  6317                           ;standbyMode.c: 779: printf("Press any key to");
  6318  00BD7A  0EDE               	movlw	low STR_80
  6319  00BD7C  6E0D               	movwf	printf@f,c
  6320  00BD7E  0EF9               	movlw	high STR_80
  6321  00BD80  6E0E               	movwf	printf@f+1,c
  6322  00BD82  ECBD  F05F         	call	_printf	;wreg free
  6323                           
  6324                           ;standbyMode.c: 780: lcdInst(0xC0);;
  6325  00BD86  0EC0               	movlw	192
  6326  00BD88  ECDF  F04B         	call	_lcdInst
  6327                           
  6328                           ;standbyMode.c: 781: printf("move forward.");
  6329  00BD8C  0E7F               	movlw	low STR_81
  6330  00BD8E  6E0D               	movwf	printf@f,c
  6331  00BD90  0EFB               	movlw	high STR_81
  6332  00BD92  6E0E               	movwf	printf@f+1,c
  6333  00BD94  ECBD  F05F         	call	_printf	;wreg free
  6334                           
  6335                           ;standbyMode.c: 782: _delay((unsigned long)((500)*(40000000/4000.0)));
  6336  00BD98  0E1A               	movlw	26
  6337  00BD9A  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6338  00BD9C  0E5E               	movlw	94
  6339  00BD9E  6E54               	movwf	??_viewLogs& (0+255),c
  6340  00BDA0  0E6E               	movlw	110
  6341  00BDA2                     u14717:
  6342  00BDA2  2EE8               	decfsz	wreg,f,c
  6343  00BDA4  D7FE               	bra	u14717
  6344  00BDA6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6345  00BDA8  D7FC               	bra	u14717
  6346  00BDAA  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6347  00BDAC  D7FA               	bra	u14717
  6348  00BDAE  D000               	nop2	
  6349  00BDB0                     
  6350                           ;standbyMode.c: 785: continue;
  6351  00BDB0  B281               	btfsc	3969,1,c	;volatile
  6352  00BDB2  D0D4               	goto	u11540
  6353  00BDB4  D7FD               	goto	l924
  6354  00BDB6                     l922:
  6355                           
  6356                           ;standbyMode.c: 788: else {
  6357                           ;standbyMode.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6358  00BDB6  0E01               	movlw	1
  6359  00BDB8  ECDF  F04B         	call	_lcdInst
  6360  00BDBC  0EC3               	movlw	195
  6361  00BDBE  6E54               	movwf	??_viewLogs& (0+255),c
  6362  00BDC0  0ECD               	movlw	205
  6363  00BDC2                     u14727:
  6364  00BDC2  2EE8               	decfsz	wreg,f,c
  6365  00BDC4  D7FE               	bra	u14727
  6366  00BDC6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6367  00BDC8  D7FC               	bra	u14727
  6368  00BDCA  F000               	nop	
  6369                           
  6370                           ;standbyMode.c: 790: printf("%i previous logs", logNumber);
  6371  00BDCC  0EEF               	movlw	low STR_82
  6372  00BDCE  6E0D               	movwf	printf@f,c
  6373  00BDD0  0EF9               	movlw	high STR_82
  6374  00BDD2  6E0E               	movwf	printf@f+1,c
  6375  00BDD4  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  6376  00BDD8  6A10               	clrf	?_printf+3,c
  6377  00BDDA  ECBD  F05F         	call	_printf	;wreg free
  6378                           
  6379                           ;standbyMode.c: 791: lcdInst(0xC0);;
  6380  00BDDE  0EC0               	movlw	192
  6381  00BDE0  ECDF  F04B         	call	_lcdInst
  6382                           
  6383                           ;standbyMode.c: 792: printf("available.");
  6384  00BDE4  0EE7               	movlw	low STR_77
  6385  00BDE6  6E0D               	movwf	printf@f,c
  6386  00BDE8  0EFB               	movlw	high STR_77
  6387  00BDEA  6E0E               	movwf	printf@f+1,c
  6388  00BDEC  ECBD  F05F         	call	_printf	;wreg free
  6389                           
  6390                           ;standbyMode.c: 793: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6391  00BDF0  0E66               	movlw	102
  6392  00BDF2  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6393  00BDF4  0E76               	movlw	118
  6394  00BDF6  6E54               	movwf	??_viewLogs& (0+255),c
  6395  00BDF8  0EC1               	movlw	193
  6396  00BDFA                     u14737:
  6397  00BDFA  2EE8               	decfsz	wreg,f,c
  6398  00BDFC  D7FE               	bra	u14737
  6399  00BDFE  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6400  00BE00  D7FC               	bra	u14737
  6401  00BE02  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6402  00BE04  D7FA               	bra	u14737
  6403  00BE06  F000               	nop	
  6404                           
  6405                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6406  00BE08  0E01               	movlw	1
  6407  00BE0A  ECDF  F04B         	call	_lcdInst
  6408  00BE0E  0EC3               	movlw	195
  6409  00BE10  6E54               	movwf	??_viewLogs& (0+255),c
  6410  00BE12  0ECD               	movlw	205
  6411  00BE14                     u14747:
  6412  00BE14  2EE8               	decfsz	wreg,f,c
  6413  00BE16  D7FE               	bra	u14747
  6414  00BE18  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6415  00BE1A  D7FC               	bra	u14747
  6416  00BE1C  F000               	nop	
  6417                           
  6418                           ;standbyMode.c: 795: printf("Please input log");
  6419  00BE1E  0EBC               	movlw	low STR_84
  6420  00BE20  6E0D               	movwf	printf@f,c
  6421  00BE22  0EF9               	movlw	high STR_84
  6422  00BE24  6E0E               	movwf	printf@f+1,c
  6423  00BE26  ECBD  F05F         	call	_printf	;wreg free
  6424                           
  6425                           ;standbyMode.c: 796: lcdInst(0xC0);;
  6426  00BE2A  0EC0               	movlw	192
  6427  00BE2C  ECDF  F04B         	call	_lcdInst
  6428                           
  6429                           ;standbyMode.c: 797: printf("number: ");
  6430  00BE30  0E5C               	movlw	low STR_85
  6431  00BE32  6E0D               	movwf	printf@f,c
  6432  00BE34  0EFC               	movlw	high STR_85
  6433  00BE36  6E0E               	movwf	printf@f+1,c
  6434  00BE38  ECBD  F05F         	call	_printf	;wreg free
  6435  00BE3C                     
  6436                           ;standbyMode.c: 800: while(PORTBbits.RB1 == 0){ continue; }
  6437  00BE3C  A281               	btfss	3969,1,c	;volatile
  6438  00BE3E  D7FE               	goto	l927
  6439                           
  6440                           ;standbyMode.c: 801: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  6441  00BE40  3881               	swapf	3969,w,c	;volatile
  6442  00BE42  0B0F               	andlw	15
  6443  00BE44  0B0F               	andlw	15
  6444  00BE46  6E5D               	movwf	viewLogs@keypress2,c
  6445  00BE48  B281               	btfsc	3969,1,c	;volatile
  6446  00BE4A  D7FE               	goto	l932
  6447                           
  6448                           ;standbyMode.c: 804: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  6449  00BE4C  505D               	movf	viewLogs@keypress2,w,c
  6450  00BE4E  B4D8               	btfsc	status,2,c
  6451  00BE50  D00B               	goto	u11510
  6452  00BE52  045D               	decf	viewLogs@keypress2,w,c
  6453  00BE54  B4D8               	btfsc	status,2,c
  6454  00BE56  D008               	goto	u11510
  6455  00BE58  0E02               	movlw	2
  6456  00BE5A  185D               	xorwf	viewLogs@keypress2,w,c
  6457  00BE5C  B4D8               	btfsc	status,2,c
  6458  00BE5E  D004               	goto	u11510
  6459  00BE60  0E04               	movlw	4
  6460  00BE62  185D               	xorwf	viewLogs@keypress2,w,c
  6461  00BE64  A4D8               	btfss	status,2,c
  6462  00BE66  D7EA               	goto	l927
  6463  00BE68                     u11510:
  6464                           
  6465                           ;standbyMode.c: 805: checkLog = verifyKeypress(logNumber, keypress2);
  6466  00BE68  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  6467  00BE6C  6A02               	clrf	verifyKeypress@keypress+1,c
  6468  00BE6E  505C               	movf	viewLogs@logNumber,w,c
  6469  00BE70  EC02  F04D         	call	_verifyKeypress
  6470  00BE74  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  6471  00BE78  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  6472                           
  6473                           ;standbyMode.c: 806: if (checkLog == 1){
  6474  00BE7C  0456               	decf	viewLogs@checkLog,w,c
  6475  00BE7E  1057               	iorwf	viewLogs@checkLog+1,w,c
  6476  00BE80  A4D8               	btfss	status,2,c
  6477  00BE82  D7DC               	goto	l927
  6478                           
  6479                           ;standbyMode.c: 807: putch(keys[keypress2]);
  6480  00BE84  505D               	movf	viewLogs@keypress2,w,c
  6481  00BE86  0D01               	mullw	1
  6482  00BE88  0E25               	movlw	low _keys
  6483  00BE8A  24F3               	addwf	prodl,w,c
  6484  00BE8C  6EF6               	movwf	tblptrl,c
  6485  00BE8E  0EF9               	movlw	high _keys
  6486  00BE90  20F4               	addwfc	prodh,w,c
  6487  00BE92  6EF7               	movwf	tblptrh,c
  6488  00BE94                     	if	1	;There are 3 active tblptr bytes
  6489  00BE94  6AF8               	clrf	tblptru,c
  6490  00BE96  0E00               	movlw	low (__mediumconst shr (0+16))
  6491  00BE98  22F8               	addwfc	tblptru,f,c
  6492  00BE9A                     	endif
  6493  00BE9A  0008               	tblrd		*
  6494  00BE9C  50F5               	movf	tablat,w,c
  6495  00BE9E  ECF3  F04B         	call	_putch
  6496                           
  6497                           ;standbyMode.c: 808: if (keypress2 == 4){
  6498  00BEA2  0E04               	movlw	4
  6499  00BEA4  185D               	xorwf	viewLogs@keypress2,w,c
  6500  00BEA6  A4D8               	btfss	status,2,c
  6501  00BEA8  D004               	goto	l938
  6502                           
  6503                           ;standbyMode.c: 809: logView = keypress2;
  6504  00BEAA  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  6505  00BEAE  6A5B               	clrf	viewLogs@logView+1,c
  6506                           
  6507                           ;standbyMode.c: 810: }
  6508  00BEB0  D006               	goto	l939
  6509  00BEB2                     l938:
  6510                           
  6511                           ;standbyMode.c: 811: else{
  6512                           ;standbyMode.c: 812: logView = keypress2 + 1;
  6513  00BEB2  0E01               	movlw	1
  6514  00BEB4  245D               	addwf	viewLogs@keypress2,w,c
  6515  00BEB6  6E5A               	movwf	viewLogs@logView,c
  6516  00BEB8  6A5B               	clrf	viewLogs@logView+1,c
  6517  00BEBA  0E00               	movlw	0
  6518  00BEBC  225B               	addwfc	viewLogs@logView+1,f,c
  6519  00BEBE                     l939:
  6520                           
  6521                           ;standbyMode.c: 813: }
  6522                           ;standbyMode.c: 814: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6523  00BEBE  0E33               	movlw	51
  6524  00BEC0  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6525  00BEC2  0EBB               	movlw	187
  6526  00BEC4  6E54               	movwf	??_viewLogs& (0+255),c
  6527  00BEC6  0EE0               	movlw	224
  6528  00BEC8                     u14757:
  6529  00BEC8  2EE8               	decfsz	wreg,f,c
  6530  00BECA  D7FE               	bra	u14757
  6531  00BECC  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6532  00BECE  D7FC               	bra	u14757
  6533  00BED0  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6534  00BED2  D7FA               	bra	u14757
  6535                           
  6536                           ;standbyMode.c: 816: }
  6537                           ;standbyMode.c: 817: }
  6538                           ;standbyMode.c: 818: }
  6539                           ;standbyMode.c: 820: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6540                           
  6541                           ;standbyMode.c: 815: break;
  6542  00BED4  0E01               	movlw	1
  6543  00BED6  ECDF  F04B         	call	_lcdInst
  6544  00BEDA  0EC3               	movlw	195
  6545  00BEDC  6E54               	movwf	??_viewLogs& (0+255),c
  6546  00BEDE  0ECD               	movlw	205
  6547  00BEE0                     u14767:
  6548  00BEE0  2EE8               	decfsz	wreg,f,c
  6549  00BEE2  D7FE               	bra	u14767
  6550  00BEE4  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6551  00BEE6  D7FC               	bra	u14767
  6552  00BEE8  F000               	nop	
  6553                           
  6554                           ;standbyMode.c: 821: printf("Great!");
  6555  00BEEA  0EA6               	movlw	low STR_86
  6556  00BEEC  6E0D               	movwf	printf@f,c
  6557  00BEEE  0EFC               	movlw	high STR_86
  6558  00BEF0  6E0E               	movwf	printf@f+1,c
  6559  00BEF2  ECBD  F05F         	call	_printf	;wreg free
  6560                           
  6561                           ;standbyMode.c: 822: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6562  00BEF6  0E33               	movlw	51
  6563  00BEF8  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6564  00BEFA  0EBB               	movlw	187
  6565  00BEFC  6E54               	movwf	??_viewLogs& (0+255),c
  6566  00BEFE  0EE0               	movlw	224
  6567  00BF00                     u14777:
  6568  00BF00  2EE8               	decfsz	wreg,f,c
  6569  00BF02  D7FE               	bra	u14777
  6570  00BF04  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6571  00BF06  D7FC               	bra	u14777
  6572  00BF08  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6573  00BF0A  D7FA               	bra	u14777
  6574                           
  6575                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6576  00BF0C  0E01               	movlw	1
  6577  00BF0E  ECDF  F04B         	call	_lcdInst
  6578  00BF12  0EC3               	movlw	195
  6579  00BF14  6E54               	movwf	??_viewLogs& (0+255),c
  6580  00BF16  0ECD               	movlw	205
  6581  00BF18                     u14787:
  6582  00BF18  2EE8               	decfsz	wreg,f,c
  6583  00BF1A  D7FE               	bra	u14787
  6584  00BF1C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6585  00BF1E  D7FC               	bra	u14787
  6586  00BF20  F000               	nop	
  6587                           
  6588                           ;standbyMode.c: 824: printf("Press any key to");
  6589  00BF22  0EDE               	movlw	low STR_80
  6590  00BF24  6E0D               	movwf	printf@f,c
  6591  00BF26  0EF9               	movlw	high STR_80
  6592  00BF28  6E0E               	movwf	printf@f+1,c
  6593  00BF2A  ECBD  F05F         	call	_printf	;wreg free
  6594                           
  6595                           ;standbyMode.c: 825: lcdInst(0xC0);;
  6596  00BF2E  0EC0               	movlw	192
  6597  00BF30  ECDF  F04B         	call	_lcdInst
  6598                           
  6599                           ;standbyMode.c: 826: printf("move forward.");
  6600  00BF34  0E7F               	movlw	low STR_81
  6601  00BF36  6E0D               	movwf	printf@f,c
  6602  00BF38  0EFB               	movlw	high STR_81
  6603  00BF3A  6E0E               	movwf	printf@f+1,c
  6604  00BF3C  ECBD  F05F         	call	_printf	;wreg free
  6605                           
  6606                           ;standbyMode.c: 827: _delay((unsigned long)((500)*(40000000/4000.0)));
  6607  00BF40  0E1A               	movlw	26
  6608  00BF42  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6609  00BF44  0E5E               	movlw	94
  6610  00BF46  6E54               	movwf	??_viewLogs& (0+255),c
  6611  00BF48  0E6E               	movlw	110
  6612  00BF4A                     u14797:
  6613  00BF4A  2EE8               	decfsz	wreg,f,c
  6614  00BF4C  D7FE               	bra	u14797
  6615  00BF4E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6616  00BF50  D7FC               	bra	u14797
  6617  00BF52  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6618  00BF54  D7FA               	bra	u14797
  6619  00BF56  D000               	nop2	
  6620  00BF58                     
  6621                           ;standbyMode.c: 830: continue;
  6622  00BF58  A281               	btfss	3969,1,c	;volatile
  6623  00BF5A  D7FE               	goto	l943
  6624  00BF5C                     u11540:
  6625                           
  6626                           ;standbyMode.c: 831: }
  6627                           ;standbyMode.c: 832: }
  6628                           ;standbyMode.c: 833: returnVal = displayLogs(logView);
  6629  00BF5C  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  6630  00BF60  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  6631  00BF64  EC4F  F064         	call	_displayLogs	;wreg free
  6632  00BF68  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  6633  00BF6C  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  6634                           
  6635                           ;standbyMode.c: 834: return returnVal;
  6636  00BF70  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  6637  00BF74  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  6638  00BF78  0012               	return	
  6639  00BF7A                     __end_of_viewLogs:
  6640                           	opt stack 0
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           postinc0	equ	0xFEE
  6648                           wreg	equ	0xFE8
  6649                           postdec1	equ	0xFE5
  6650                           plusw1	equ	0xFE3
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           plusw2	equ	0xFDB
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function _verifyKeypress *****************
  6661 ;; Defined at:
  6662 ;;		line 739 in file "standbyMode.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  logNumber       1    wreg     unsigned char 
  6665 ;;  keypress        2    0[COMRAM] unsigned int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  logNumber       1    4[COMRAM] unsigned char 
  6668 ;;  i               2    7[COMRAM] unsigned int 
  6669 ;;  returnVal       2    5[COMRAM] unsigned int 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  2    0[COMRAM] unsigned int 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;Total ram usage:        9 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; This function calls:
  6686 ;;		Nothing
  6687 ;; This function is called by:
  6688 ;;		_viewLogs
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text5
  6693  009A04                     __ptext5:
  6694                           	opt stack 0
  6695  009A04                     _verifyKeypress:
  6696                           	opt stack 28
  6697                           
  6698                           ;incstack = 0
  6699                           ;verifyKeypress@logNumber stored from wreg
  6700  009A04  6E05               	movwf	verifyKeypress@logNumber,c
  6701                           
  6702                           ;standbyMode.c: 740: unsigned int i = 0;
  6703  009A06  0E00               	movlw	0
  6704  009A08  6E09               	movwf	verifyKeypress@i+1,c
  6705  009A0A  0E00               	movlw	0
  6706  009A0C  6E08               	movwf	verifyKeypress@i,c
  6707                           
  6708                           ;standbyMode.c: 741: unsigned int returnVal = 0;
  6709  009A0E  0E00               	movlw	0
  6710  009A10  6E07               	movwf	verifyKeypress@returnVal+1,c
  6711  009A12  0E00               	movlw	0
  6712  009A14  6E06               	movwf	verifyKeypress@returnVal,c
  6713                           
  6714                           ;standbyMode.c: 743: for (i=0; i<logNumber; i++){
  6715  009A16  0E00               	movlw	0
  6716  009A18  6E09               	movwf	verifyKeypress@i+1,c
  6717  009A1A  0E00               	movlw	0
  6718  009A1C  6E08               	movwf	verifyKeypress@i,c
  6719  009A1E  D00D               	goto	l912
  6720  009A20                     
  6721                           ;standbyMode.c: 744: if (keypress == i){
  6722  009A20  5008               	movf	verifyKeypress@i,w,c
  6723  009A22  1801               	xorwf	verifyKeypress@keypress,w,c
  6724  009A24  E108               	bnz	l7596
  6725  009A26  5009               	movf	verifyKeypress@i+1,w,c
  6726  009A28  1802               	xorwf	verifyKeypress@keypress+1,w,c
  6727  009A2A  A4D8               	btfss	status,2,c
  6728  009A2C  D004               	goto	l914
  6729                           
  6730                           ;standbyMode.c: 745: returnVal = 1;
  6731  009A2E  0E00               	movlw	0
  6732  009A30  6E07               	movwf	verifyKeypress@returnVal+1,c
  6733  009A32  0E01               	movlw	1
  6734  009A34  6E06               	movwf	verifyKeypress@returnVal,c
  6735  009A36                     l914:
  6736  009A36                     l7596:
  6737  009A36  4A08               	infsnz	verifyKeypress@i,f,c
  6738  009A38  2A09               	incf	verifyKeypress@i+1,f,c
  6739  009A3A                     l912:
  6740  009A3A  5005               	movf	verifyKeypress@logNumber,w,c
  6741  009A3C  6E03               	movwf	??_verifyKeypress& (0+255),c
  6742  009A3E  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  6743  009A40  5003               	movf	??_verifyKeypress,w,c
  6744  009A42  5C08               	subwf	verifyKeypress@i,w,c
  6745  009A44  5004               	movf	??_verifyKeypress+1,w,c
  6746  009A46  5809               	subwfb	verifyKeypress@i+1,w,c
  6747  009A48  A0D8               	btfss	status,0,c
  6748  009A4A  D7EA               	goto	l913
  6749                           
  6750                           ;standbyMode.c: 746: }
  6751                           ;standbyMode.c: 747: }
  6752                           ;standbyMode.c: 748: return returnVal;
  6753  009A4C  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  6754  009A50  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  6755  009A54  0012               	return		;funcret
  6756  009A56                     __end_of_verifyKeypress:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           postdec1	equ	0xFE5
  6767                           plusw1	equ	0xFE3
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           plusw2	equ	0xFDB
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _displayLogs *****************
  6778 ;; Defined at:
  6779 ;;		line 914 in file "standbyMode.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  logNumber       2   40[COMRAM] unsigned int 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  n               2   79[COMRAM] unsigned int 
  6784 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  6785 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  6786 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  6787 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  6788 ;;  i               2   69[COMRAM] unsigned int 
  6789 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  6790 ;;  operationTim    2   65[COMRAM] unsigned int 
  6791 ;;  foodType        2   62[COMRAM] unsigned int 
  6792 ;;  dietType        2   60[COMRAM] unsigned int 
  6793 ;;  seconds         2   58[COMRAM] unsigned int 
  6794 ;;  minutes         2   56[COMRAM] unsigned int 
  6795 ;;  longPieces      2   54[COMRAM] unsigned int 
  6796 ;;  flatPieces      2   52[COMRAM] unsigned int 
  6797 ;;  roundPieces     2   50[COMRAM] unsigned int 
  6798 ;;  day             2   48[COMRAM] unsigned int 
  6799 ;;  month           2   46[COMRAM] unsigned int 
  6800 ;;  year            2   44[COMRAM] unsigned int 
  6801 ;;  keypress3       1   64[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  2   40[COMRAM] unsigned int 
  6804 ;; Registers used:
  6805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:       41 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    3
  6818 ;; This function calls:
  6819 ;;		___lwdiv
  6820 ;;		___lwmod
  6821 ;;		___wmul
  6822 ;;		_lcdInst
  6823 ;;		_printf
  6824 ;;		_readEEPROM
  6825 ;; This function is called by:
  6826 ;;		_viewLogs
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text6
  6831  00C89E                     __ptext6:
  6832                           	opt stack 0
  6833  00C89E                     _displayLogs:
  6834                           	opt stack 25
  6835                           
  6836                           ;standbyMode.c: 915: unsigned int n = (logNumber-1)*35;
  6837                           
  6838                           ;incstack = 0
  6839  00C89E  0EFF               	movlw	255
  6840  00C8A0  2429               	addwf	displayLogs@logNumber,w,c
  6841  00C8A2  6E01               	movwf	___wmul@multiplier,c
  6842  00C8A4  0EFF               	movlw	255
  6843  00C8A6  202A               	addwfc	displayLogs@logNumber+1,w,c
  6844  00C8A8  6E02               	movwf	___wmul@multiplier+1,c
  6845  00C8AA  0E00               	movlw	0
  6846  00C8AC  6E04               	movwf	___wmul@multiplicand+1,c
  6847  00C8AE  0E23               	movlw	35
  6848  00C8B0  6E03               	movwf	___wmul@multiplicand,c
  6849  00C8B2  EC31  F04C         	call	___wmul	;wreg free
  6850  00C8B6  C001  F050         	movff	?___wmul,displayLogs@n
  6851  00C8BA  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6852                           
  6853                           ;standbyMode.c: 916: unsigned int year = readEEPROM(n);
  6854  00C8BE  5050               	movf	displayLogs@n,w,c
  6855  00C8C0  ECE9  F04B         	call	_readEEPROM
  6856  00C8C4  6E2B               	movwf	??_displayLogs& (0+255),c
  6857  00C8C6  502B               	movf	??_displayLogs,w,c
  6858  00C8C8  6E2D               	movwf	displayLogs@year,c
  6859  00C8CA  6A2E               	clrf	displayLogs@year+1,c
  6860                           
  6861                           ;standbyMode.c: 917: unsigned int month = readEEPROM(1+n);
  6862  00C8CC  2850               	incf	displayLogs@n,w,c
  6863  00C8CE  ECE9  F04B         	call	_readEEPROM
  6864  00C8D2  6E2B               	movwf	??_displayLogs& (0+255),c
  6865  00C8D4  502B               	movf	??_displayLogs,w,c
  6866  00C8D6  6E2F               	movwf	displayLogs@month,c
  6867  00C8D8  6A30               	clrf	displayLogs@month+1,c
  6868                           
  6869                           ;standbyMode.c: 918: unsigned int day = readEEPROM(2+n);
  6870  00C8DA  5050               	movf	displayLogs@n,w,c
  6871  00C8DC  0F02               	addlw	2
  6872  00C8DE  ECE9  F04B         	call	_readEEPROM
  6873  00C8E2  6E2B               	movwf	??_displayLogs& (0+255),c
  6874  00C8E4  502B               	movf	??_displayLogs,w,c
  6875  00C8E6  6E31               	movwf	displayLogs@day,c
  6876  00C8E8  6A32               	clrf	displayLogs@day+1,c
  6877                           
  6878                           ;standbyMode.c: 919: unsigned int operationTime = readEEPROM(3+n);
  6879  00C8EA  5050               	movf	displayLogs@n,w,c
  6880  00C8EC  0F03               	addlw	3
  6881  00C8EE  ECE9  F04B         	call	_readEEPROM
  6882  00C8F2  6E2B               	movwf	??_displayLogs& (0+255),c
  6883  00C8F4  502B               	movf	??_displayLogs,w,c
  6884  00C8F6  6E42               	movwf	displayLogs@operationTime,c
  6885  00C8F8  6A43               	clrf	displayLogs@operationTime+1,c
  6886                           
  6887                           ;standbyMode.c: 920: unsigned int roundPieces = readEEPROM(4+n);
  6888  00C8FA  5050               	movf	displayLogs@n,w,c
  6889  00C8FC  0F04               	addlw	4
  6890  00C8FE  ECE9  F04B         	call	_readEEPROM
  6891  00C902  6E2B               	movwf	??_displayLogs& (0+255),c
  6892  00C904  502B               	movf	??_displayLogs,w,c
  6893  00C906  6E33               	movwf	displayLogs@roundPieces,c
  6894  00C908  6A34               	clrf	displayLogs@roundPieces+1,c
  6895                           
  6896                           ;standbyMode.c: 921: unsigned int flatPieces = readEEPROM(5+n);
  6897  00C90A  5050               	movf	displayLogs@n,w,c
  6898  00C90C  0F05               	addlw	5
  6899  00C90E  ECE9  F04B         	call	_readEEPROM
  6900  00C912  6E2B               	movwf	??_displayLogs& (0+255),c
  6901  00C914  502B               	movf	??_displayLogs,w,c
  6902  00C916  6E35               	movwf	displayLogs@flatPieces,c
  6903  00C918  6A36               	clrf	displayLogs@flatPieces+1,c
  6904                           
  6905                           ;standbyMode.c: 922: unsigned int longPieces = readEEPROM(6+n);
  6906  00C91A  5050               	movf	displayLogs@n,w,c
  6907  00C91C  0F06               	addlw	6
  6908  00C91E  ECE9  F04B         	call	_readEEPROM
  6909  00C922  6E2B               	movwf	??_displayLogs& (0+255),c
  6910  00C924  502B               	movf	??_displayLogs,w,c
  6911  00C926  6E37               	movwf	displayLogs@longPieces,c
  6912  00C928  6A38               	clrf	displayLogs@longPieces+1,c
  6913                           
  6914                           ;standbyMode.c: 923: unsigned int markedDrawer1 = readEEPROM(7+n);
  6915  00C92A  5050               	movf	displayLogs@n,w,c
  6916  00C92C  0F07               	addlw	7
  6917  00C92E  ECE9  F04B         	call	_readEEPROM
  6918  00C932  6E2B               	movwf	??_displayLogs& (0+255),c
  6919  00C934  502B               	movf	??_displayLogs,w,c
  6920  00C936  6E48               	movwf	displayLogs@markedDrawer1,c
  6921  00C938  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6922                           
  6923                           ;standbyMode.c: 924: unsigned int markedDrawer2 = readEEPROM(8+n);
  6924  00C93A  5050               	movf	displayLogs@n,w,c
  6925  00C93C  0F08               	addlw	8
  6926  00C93E  ECE9  F04B         	call	_readEEPROM
  6927  00C942  6E2B               	movwf	??_displayLogs& (0+255),c
  6928  00C944  502B               	movf	??_displayLogs,w,c
  6929  00C946  6E4A               	movwf	displayLogs@markedDrawer2,c
  6930  00C948  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6931                           
  6932                           ;standbyMode.c: 925: unsigned int markedDrawer3 = readEEPROM(9+n);
  6933  00C94A  5050               	movf	displayLogs@n,w,c
  6934  00C94C  0F09               	addlw	9
  6935  00C94E  ECE9  F04B         	call	_readEEPROM
  6936  00C952  6E2B               	movwf	??_displayLogs& (0+255),c
  6937  00C954  502B               	movf	??_displayLogs,w,c
  6938  00C956  6E4C               	movwf	displayLogs@markedDrawer3,c
  6939  00C958  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6940                           
  6941                           ;standbyMode.c: 926: unsigned int markedDrawer4 = readEEPROM(10+n);
  6942  00C95A  5050               	movf	displayLogs@n,w,c
  6943  00C95C  0F0A               	addlw	10
  6944  00C95E  ECE9  F04B         	call	_readEEPROM
  6945  00C962  6E2B               	movwf	??_displayLogs& (0+255),c
  6946  00C964  502B               	movf	??_displayLogs,w,c
  6947  00C966  6E4E               	movwf	displayLogs@markedDrawer4,c
  6948  00C968  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6949                           
  6950                           ;standbyMode.c: 927: unsigned int drawerNumber = readEEPROM(11+n);
  6951  00C96A  5050               	movf	displayLogs@n,w,c
  6952  00C96C  0F0B               	addlw	11
  6953  00C96E  ECE9  F04B         	call	_readEEPROM
  6954  00C972  6E2B               	movwf	??_displayLogs& (0+255),c
  6955  00C974  502B               	movf	??_displayLogs,w,c
  6956  00C976  6E44               	movwf	displayLogs@drawerNumber,c
  6957  00C978  6A45               	clrf	displayLogs@drawerNumber+1,c
  6958                           
  6959                           ;standbyMode.c: 928: unsigned int dietType = readEEPROM(12+n);
  6960  00C97A  5050               	movf	displayLogs@n,w,c
  6961  00C97C  0F0C               	addlw	12
  6962  00C97E  ECE9  F04B         	call	_readEEPROM
  6963  00C982  6E2B               	movwf	??_displayLogs& (0+255),c
  6964  00C984  502B               	movf	??_displayLogs,w,c
  6965  00C986  6E3D               	movwf	displayLogs@dietType,c
  6966  00C988  6A3E               	clrf	displayLogs@dietType+1,c
  6967                           
  6968                           ;standbyMode.c: 929: unsigned int foodType = readEEPROM(13+n);
  6969  00C98A  5050               	movf	displayLogs@n,w,c
  6970  00C98C  0F0D               	addlw	13
  6971  00C98E  ECE9  F04B         	call	_readEEPROM
  6972  00C992  6E2B               	movwf	??_displayLogs& (0+255),c
  6973  00C994  502B               	movf	??_displayLogs,w,c
  6974  00C996  6E3F               	movwf	displayLogs@foodType,c
  6975  00C998  6A40               	clrf	displayLogs@foodType+1,c
  6976                           
  6977                           ;standbyMode.c: 930: unsigned int i = 0;
  6978  00C99A  0E00               	movlw	0
  6979  00C99C  6E47               	movwf	displayLogs@i+1,c
  6980  00C99E  0E00               	movlw	0
  6981  00C9A0  6E46               	movwf	displayLogs@i,c
  6982                           
  6983                           ;standbyMode.c: 932: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6984  00C9A2  0E01               	movlw	1
  6985  00C9A4  ECDF  F04B         	call	_lcdInst
  6986  00C9A8  0EC3               	movlw	195
  6987  00C9AA  6E2B               	movwf	??_displayLogs& (0+255),c
  6988  00C9AC  0ECD               	movlw	205
  6989  00C9AE                     u14807:
  6990  00C9AE  2EE8               	decfsz	wreg,f,c
  6991  00C9B0  D7FE               	bra	u14807
  6992  00C9B2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6993  00C9B4  D7FC               	bra	u14807
  6994  00C9B6  F000               	nop	
  6995                           
  6996                           ;standbyMode.c: 933: printf("Date:");
  6997  00C9B8  0EAD               	movlw	low STR_89
  6998  00C9BA  6E0D               	movwf	printf@f,c
  6999  00C9BC  0EFC               	movlw	high STR_89
  7000  00C9BE  6E0E               	movwf	printf@f+1,c
  7001  00C9C0  ECBD  F05F         	call	_printf	;wreg free
  7002                           
  7003                           ;standbyMode.c: 934: lcdInst(0xC0);;
  7004  00C9C4  0EC0               	movlw	192
  7005  00C9C6  ECDF  F04B         	call	_lcdInst
  7006                           
  7007                           ;standbyMode.c: 935: printf("%02i/%02i/%02i", year, month, day);
  7008  00C9CA  0EFB               	movlw	low STR_90
  7009  00C9CC  6E0D               	movwf	printf@f,c
  7010  00C9CE  0EFA               	movlw	high STR_90
  7011  00C9D0  6E0E               	movwf	printf@f+1,c
  7012  00C9D2  C02D  F00F         	movff	displayLogs@year,?_printf+2
  7013  00C9D6  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  7014  00C9DA  C02F  F011         	movff	displayLogs@month,?_printf+4
  7015  00C9DE  C030  F012         	movff	displayLogs@month+1,?_printf+5
  7016  00C9E2  C031  F013         	movff	displayLogs@day,?_printf+6
  7017  00C9E6  C032  F014         	movff	displayLogs@day+1,?_printf+7
  7018  00C9EA  ECBD  F05F         	call	_printf	;wreg free
  7019                           
  7020                           ;standbyMode.c: 936: _delay((unsigned long)((700)*(40000000/4000.0)));
  7021  00C9EE  0E24               	movlw	36
  7022  00C9F0  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7023  00C9F2  0E83               	movlw	131
  7024  00C9F4  6E2B               	movwf	??_displayLogs& (0+255),c
  7025  00C9F6  0ECF               	movlw	207
  7026  00C9F8                     u14817:
  7027  00C9F8  2EE8               	decfsz	wreg,f,c
  7028  00C9FA  D7FE               	bra	u14817
  7029  00C9FC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7030  00C9FE  D7FC               	bra	u14817
  7031  00CA00  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7032  00CA02  D7FA               	bra	u14817
  7033  00CA04  F000               	nop	
  7034  00CA06                     
  7035                           ;standbyMode.c: 938: continue;
  7036  00CA06  A281               	btfss	3969,1,c	;volatile
  7037  00CA08  D7FE               	goto	l1001
  7038                           
  7039                           ;standbyMode.c: 939: }
  7040                           ;standbyMode.c: 941: unsigned int minutes = operationTime/60;
  7041  00CA0A  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  7042  00CA0E  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  7043  00CA12  0E00               	movlw	0
  7044  00CA14  6E04               	movwf	___lwdiv@divisor+1,c
  7045  00CA16  0E3C               	movlw	60
  7046  00CA18  6E03               	movwf	___lwdiv@divisor,c
  7047  00CA1A  ECD9  F04C         	call	___lwdiv	;wreg free
  7048  00CA1E  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  7049  00CA22  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  7050                           
  7051                           ;standbyMode.c: 942: unsigned int seconds = operationTime%60;
  7052  00CA26  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  7053  00CA2A  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  7054  00CA2E  0E00               	movlw	0
  7055  00CA30  6E0B               	movwf	___lwmod@divisor+1,c
  7056  00CA32  0E3C               	movlw	60
  7057  00CA34  6E0A               	movwf	___lwmod@divisor,c
  7058  00CA36  EC92  F04C         	call	___lwmod	;wreg free
  7059  00CA3A  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  7060  00CA3E  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  7061                           
  7062                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7063  00CA42  0E01               	movlw	1
  7064  00CA44  ECDF  F04B         	call	_lcdInst
  7065  00CA48  0EC3               	movlw	195
  7066  00CA4A  6E2B               	movwf	??_displayLogs& (0+255),c
  7067  00CA4C  0ECD               	movlw	205
  7068  00CA4E                     u14827:
  7069  00CA4E  2EE8               	decfsz	wreg,f,c
  7070  00CA50  D7FE               	bra	u14827
  7071  00CA52  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7072  00CA54  D7FC               	bra	u14827
  7073  00CA56  F000               	nop	
  7074                           
  7075                           ;standbyMode.c: 944: printf("Operation time:");
  7076  00CA58  0E30               	movlw	low STR_91
  7077  00CA5A  6E0D               	movwf	printf@f,c
  7078  00CA5C  0EFA               	movlw	high STR_91
  7079  00CA5E  6E0E               	movwf	printf@f+1,c
  7080  00CA60  ECBD  F05F         	call	_printf	;wreg free
  7081                           
  7082                           ;standbyMode.c: 945: lcdInst(0xC0);;
  7083  00CA64  0EC0               	movlw	192
  7084  00CA66  ECDF  F04B         	call	_lcdInst
  7085                           
  7086                           ;standbyMode.c: 946: printf("%i:%02i", minutes, seconds);
  7087  00CA6A  0E87               	movlw	low STR_92
  7088  00CA6C  6E0D               	movwf	printf@f,c
  7089  00CA6E  0EFC               	movlw	high STR_92
  7090  00CA70  6E0E               	movwf	printf@f+1,c
  7091  00CA72  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  7092  00CA76  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  7093  00CA7A  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  7094  00CA7E  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  7095  00CA82  ECBD  F05F         	call	_printf	;wreg free
  7096                           
  7097                           ;standbyMode.c: 947: _delay((unsigned long)((700)*(40000000/4000.0)));
  7098  00CA86  0E24               	movlw	36
  7099  00CA88  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7100  00CA8A  0E83               	movlw	131
  7101  00CA8C  6E2B               	movwf	??_displayLogs& (0+255),c
  7102  00CA8E  0ECF               	movlw	207
  7103  00CA90                     u14837:
  7104  00CA90  2EE8               	decfsz	wreg,f,c
  7105  00CA92  D7FE               	bra	u14837
  7106  00CA94  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7107  00CA96  D7FC               	bra	u14837
  7108  00CA98  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7109  00CA9A  D7FA               	bra	u14837
  7110  00CA9C  F000               	nop	
  7111  00CA9E                     
  7112                           ;standbyMode.c: 950: continue;
  7113  00CA9E  A281               	btfss	3969,1,c	;volatile
  7114  00CAA0  D7FE               	goto	l1004
  7115                           
  7116                           ;standbyMode.c: 951: }
  7117                           ;standbyMode.c: 953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7118  00CAA2  0E01               	movlw	1
  7119  00CAA4  ECDF  F04B         	call	_lcdInst
  7120  00CAA8  0EC3               	movlw	195
  7121  00CAAA  6E2B               	movwf	??_displayLogs& (0+255),c
  7122  00CAAC  0ECD               	movlw	205
  7123  00CAAE                     u14847:
  7124  00CAAE  2EE8               	decfsz	wreg,f,c
  7125  00CAB0  D7FE               	bra	u14847
  7126  00CAB2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7127  00CAB4  D7FC               	bra	u14847
  7128  00CAB6  F000               	nop	
  7129                           
  7130                           ;standbyMode.c: 954: printf("Marked drawers:");
  7131  00CAB8  0E40               	movlw	low STR_93
  7132  00CABA  6E0D               	movwf	printf@f,c
  7133  00CABC  0EFA               	movlw	high STR_93
  7134  00CABE  6E0E               	movwf	printf@f+1,c
  7135  00CAC0  ECBD  F05F         	call	_printf	;wreg free
  7136                           
  7137                           ;standbyMode.c: 955: lcdInst(0xC0);;
  7138  00CAC4  0EC0               	movlw	192
  7139  00CAC6  ECDF  F04B         	call	_lcdInst
  7140                           
  7141                           ;standbyMode.c: 957: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  7142  00CACA  504E               	movf	displayLogs@markedDrawer4,w,c
  7143  00CACC  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7144  00CACE  A4D8               	btfss	status,2,c
  7145  00CAD0  D01E               	goto	l1006
  7146  00CAD2  504C               	movf	displayLogs@markedDrawer3,w,c
  7147  00CAD4  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  7148  00CAD6  A4D8               	btfss	status,2,c
  7149  00CAD8  D01A               	goto	l1006
  7150  00CADA  504A               	movf	displayLogs@markedDrawer2,w,c
  7151  00CADC  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  7152  00CADE  A4D8               	btfss	status,2,c
  7153  00CAE0  D016               	goto	l1006
  7154                           
  7155                           ;standbyMode.c: 958: printf("%i", markedDrawer1);
  7156  00CAE2  0EF8               	movlw	low (STR_97+12)
  7157  00CAE4  6E0D               	movwf	printf@f,c
  7158  00CAE6  0EFA               	movlw	high (STR_97+12)
  7159  00CAE8  6E0E               	movwf	printf@f+1,c
  7160  00CAEA  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7161  00CAEE  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7162  00CAF2  ECBD  F05F         	call	_printf	;wreg free
  7163                           
  7164                           ;standbyMode.c: 959: _delay((unsigned long)((700)*(40000000/4000.0)));
  7165  00CAF6  0E24               	movlw	36
  7166  00CAF8  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7167  00CAFA  0E83               	movlw	131
  7168  00CAFC  6E2B               	movwf	??_displayLogs& (0+255),c
  7169  00CAFE  0ECF               	movlw	207
  7170  00CB00                     u14857:
  7171  00CB00  2EE8               	decfsz	wreg,f,c
  7172  00CB02  D7FE               	bra	u14857
  7173  00CB04  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7174  00CB06  D7FC               	bra	u14857
  7175  00CB08  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7176  00CB0A  D7FA               	bra	u14857
  7177  00CB0C  D065               	goto	L19
  7178  00CB0E                     l1006:
  7179                           
  7180                           ;standbyMode.c: 962: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  7181  00CB0E  504E               	movf	displayLogs@markedDrawer4,w,c
  7182  00CB10  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7183  00CB12  A4D8               	btfss	status,2,c
  7184  00CB14  D01E               	goto	l1008
  7185  00CB16  504C               	movf	displayLogs@markedDrawer3,w,c
  7186  00CB18  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  7187  00CB1A  A4D8               	btfss	status,2,c
  7188  00CB1C  D01A               	goto	l1008
  7189                           
  7190                           ;standbyMode.c: 963: printf("%i, %i", markedDrawer1, markedDrawer2);
  7191  00CB1E  0EF4               	movlw	low (STR_97+8)
  7192  00CB20  6E0D               	movwf	printf@f,c
  7193  00CB22  0EFA               	movlw	high (STR_97+8)
  7194  00CB24  6E0E               	movwf	printf@f+1,c
  7195  00CB26  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7196  00CB2A  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7197  00CB2E  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7198  00CB32  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7199  00CB36  ECBD  F05F         	call	_printf	;wreg free
  7200                           
  7201                           ;standbyMode.c: 964: _delay((unsigned long)((700)*(40000000/4000.0)));
  7202  00CB3A  0E24               	movlw	36
  7203  00CB3C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7204  00CB3E  0E83               	movlw	131
  7205  00CB40  6E2B               	movwf	??_displayLogs& (0+255),c
  7206  00CB42  0ECF               	movlw	207
  7207  00CB44                     u14867:
  7208  00CB44  2EE8               	decfsz	wreg,f,c
  7209  00CB46  D7FE               	bra	u14867
  7210  00CB48  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7211  00CB4A  D7FC               	bra	u14867
  7212  00CB4C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7213  00CB4E  D7FA               	bra	u14867
  7214  00CB50  D043               	goto	L19
  7215  00CB52                     l1008:
  7216                           
  7217                           ;standbyMode.c: 967: else if (markedDrawer4 == 0){
  7218  00CB52  504E               	movf	displayLogs@markedDrawer4,w,c
  7219  00CB54  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7220  00CB56  A4D8               	btfss	status,2,c
  7221  00CB58  D01E               	goto	l1010
  7222                           
  7223                           ;standbyMode.c: 968: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  7224  00CB5A  0EF0               	movlw	low (STR_97+4)
  7225  00CB5C  6E0D               	movwf	printf@f,c
  7226  00CB5E  0EFA               	movlw	high (STR_97+4)
  7227  00CB60  6E0E               	movwf	printf@f+1,c
  7228  00CB62  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7229  00CB66  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7230  00CB6A  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7231  00CB6E  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7232  00CB72  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  7233  00CB76  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  7234  00CB7A  ECBD  F05F         	call	_printf	;wreg free
  7235                           
  7236                           ;standbyMode.c: 969: _delay((unsigned long)((700)*(40000000/4000.0)));
  7237  00CB7E  0E24               	movlw	36
  7238  00CB80  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7239  00CB82  0E83               	movlw	131
  7240  00CB84  6E2B               	movwf	??_displayLogs& (0+255),c
  7241  00CB86  0ECF               	movlw	207
  7242  00CB88                     u14877:
  7243  00CB88  2EE8               	decfsz	wreg,f,c
  7244  00CB8A  D7FE               	bra	u14877
  7245  00CB8C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7246  00CB8E  D7FC               	bra	u14877
  7247  00CB90  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7248  00CB92  D7FA               	bra	u14877
  7249  00CB94  D021               	goto	L19
  7250  00CB96                     l1010:
  7251                           
  7252                           ;standbyMode.c: 972: else {
  7253                           ;standbyMode.c: 973: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  7254  00CB96  0EEC               	movlw	low STR_97
  7255  00CB98  6E0D               	movwf	printf@f,c
  7256  00CB9A  0EFA               	movlw	high STR_97
  7257  00CB9C  6E0E               	movwf	printf@f+1,c
  7258  00CB9E  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7259  00CBA2  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7260  00CBA6  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7261  00CBAA  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7262  00CBAE  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  7263  00CBB2  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  7264  00CBB6  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  7265  00CBBA  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  7266  00CBBE  ECBD  F05F         	call	_printf	;wreg free
  7267                           
  7268                           ;standbyMode.c: 974: _delay((unsigned long)((700)*(40000000/4000.0)));
  7269  00CBC2  0E24               	movlw	36
  7270  00CBC4  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7271  00CBC6  0E83               	movlw	131
  7272  00CBC8  6E2B               	movwf	??_displayLogs& (0+255),c
  7273  00CBCA  0ECF               	movlw	207
  7274  00CBCC                     u14887:
  7275  00CBCC  2EE8               	decfsz	wreg,f,c
  7276  00CBCE  D7FE               	bra	u14887
  7277  00CBD0  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7278  00CBD2  D7FC               	bra	u14887
  7279  00CBD4  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7280  00CBD6  D7FA               	bra	u14887
  7281  00CBD8                     L19:
  7282  00CBD8  F000               	nop	
  7283  00CBDA                     
  7284                           ;standbyMode.c: 978: continue;
  7285                           
  7286                           ;standbyMode.c: 975: }
  7287                           ;standbyMode.c: 977: while(PORTBbits.RB1 == 0){
  7288  00CBDA  A281               	btfss	3969,1,c	;volatile
  7289  00CBDC  D7FE               	goto	l1011
  7290                           
  7291                           ;standbyMode.c: 979: }
  7292                           ;standbyMode.c: 981: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7293  00CBDE  0E01               	movlw	1
  7294  00CBE0  ECDF  F04B         	call	_lcdInst
  7295  00CBE4  0EC3               	movlw	195
  7296  00CBE6  6E2B               	movwf	??_displayLogs& (0+255),c
  7297  00CBE8  0ECD               	movlw	205
  7298  00CBEA                     u14897:
  7299  00CBEA  2EE8               	decfsz	wreg,f,c
  7300  00CBEC  D7FE               	bra	u14897
  7301  00CBEE  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7302  00CBF0  D7FC               	bra	u14897
  7303  00CBF2  F000               	nop	
  7304                           
  7305                           ;standbyMode.c: 982: printf("Remaining pieces:");
  7306  00CBF4  0E66               	movlw	low STR_98
  7307  00CBF6  6E0D               	movwf	printf@f,c
  7308  00CBF8  0EF9               	movlw	high STR_98
  7309  00CBFA  6E0E               	movwf	printf@f+1,c
  7310  00CBFC  ECBD  F05F         	call	_printf	;wreg free
  7311                           
  7312                           ;standbyMode.c: 983: lcdInst(0xC0);;
  7313  00CC00  0EC0               	movlw	192
  7314  00CC02  ECDF  F04B         	call	_lcdInst
  7315                           
  7316                           ;standbyMode.c: 984: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  7317  00CC06  0ECD               	movlw	low STR_99
  7318  00CC08  6E0D               	movwf	printf@f,c
  7319  00CC0A  0EF9               	movlw	high STR_99
  7320  00CC0C  6E0E               	movwf	printf@f+1,c
  7321  00CC0E  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  7322  00CC12  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  7323  00CC16  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  7324  00CC1A  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  7325  00CC1E  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  7326  00CC22  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  7327  00CC26  ECBD  F05F         	call	_printf	;wreg free
  7328                           
  7329                           ;standbyMode.c: 985: _delay((unsigned long)((700)*(40000000/4000.0)));
  7330  00CC2A  0E24               	movlw	36
  7331  00CC2C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7332  00CC2E  0E83               	movlw	131
  7333  00CC30  6E2B               	movwf	??_displayLogs& (0+255),c
  7334  00CC32  0ECF               	movlw	207
  7335  00CC34                     u14907:
  7336  00CC34  2EE8               	decfsz	wreg,f,c
  7337  00CC36  D7FE               	bra	u14907
  7338  00CC38  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7339  00CC3A  D7FC               	bra	u14907
  7340  00CC3C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7341  00CC3E  D7FA               	bra	u14907
  7342  00CC40  F000               	nop	
  7343  00CC42                     
  7344                           ;standbyMode.c: 988: continue;
  7345  00CC42  A281               	btfss	3969,1,c	;volatile
  7346  00CC44  D7FE               	goto	l1016
  7347                           
  7348                           ;standbyMode.c: 989: }
  7349                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7350  00CC46  0E01               	movlw	1
  7351  00CC48  ECDF  F04B         	call	_lcdInst
  7352  00CC4C  0EC3               	movlw	195
  7353  00CC4E  6E2B               	movwf	??_displayLogs& (0+255),c
  7354  00CC50  0ECD               	movlw	205
  7355  00CC52                     u14917:
  7356  00CC52  2EE8               	decfsz	wreg,f,c
  7357  00CC54  D7FE               	bra	u14917
  7358  00CC56  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7359  00CC58  D7FC               	bra	u14917
  7360  00CC5A  F000               	nop	
  7361                           
  7362                           ;standbyMode.c: 992: printf("Input Summary:");
  7363  00CC5C  0ECE               	movlw	low STR_100
  7364  00CC5E  6E0D               	movwf	printf@f,c
  7365  00CC60  0EFA               	movlw	high STR_100
  7366  00CC62  6E0E               	movwf	printf@f+1,c
  7367  00CC64  ECBD  F05F         	call	_printf	;wreg free
  7368                           
  7369                           ;standbyMode.c: 993: _delay((unsigned long)((700)*(40000000/4000.0)));
  7370  00CC68  0E24               	movlw	36
  7371  00CC6A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7372  00CC6C  0E83               	movlw	131
  7373  00CC6E  6E2B               	movwf	??_displayLogs& (0+255),c
  7374  00CC70  0ECF               	movlw	207
  7375  00CC72                     u14927:
  7376  00CC72  2EE8               	decfsz	wreg,f,c
  7377  00CC74  D7FE               	bra	u14927
  7378  00CC76  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7379  00CC78  D7FC               	bra	u14927
  7380  00CC7A  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7381  00CC7C  D7FA               	bra	u14927
  7382  00CC7E  F000               	nop	
  7383  00CC80                     
  7384                           ;standbyMode.c: 996: continue;
  7385  00CC80  A281               	btfss	3969,1,c	;volatile
  7386  00CC82  D7FE               	goto	l1019
  7387                           
  7388                           ;standbyMode.c: 997: }
  7389                           ;standbyMode.c: 999: for (i=0; i<8; i++){
  7390  00CC84  0E00               	movlw	0
  7391  00CC86  6E47               	movwf	displayLogs@i+1,c
  7392  00CC88  0E00               	movlw	0
  7393  00CC8A  6E46               	movwf	displayLogs@i,c
  7394  00CC8C  5047               	movf	displayLogs@i+1,w,c
  7395  00CC8E  E105               	bnz	u8940
  7396  00CC90  0E08               	movlw	8
  7397  00CC92  5C46               	subwf	displayLogs@i,w,c
  7398  00CC94  B0D8               	btfsc	status,0,c
  7399  00CC96  D089               	goto	u8970
  7400  00CC98  D001               	goto	l1021
  7401  00CC9A                     u8940:
  7402  00CC9A  D087               	goto	u8970
  7403  00CC9C                     l1021:
  7404                           
  7405                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7406  00CC9C  0E01               	movlw	1
  7407  00CC9E  ECDF  F04B         	call	_lcdInst
  7408  00CCA2  0EC3               	movlw	195
  7409  00CCA4  6E2B               	movwf	??_displayLogs& (0+255),c
  7410  00CCA6  0ECD               	movlw	205
  7411  00CCA8                     u14937:
  7412  00CCA8  2EE8               	decfsz	wreg,f,c
  7413  00CCAA  D7FE               	bra	u14937
  7414  00CCAC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7415  00CCAE  D7FC               	bra	u14937
  7416  00CCB0  F000               	nop	
  7417                           
  7418                           ;standbyMode.c: 1001: n = (logNumber-1)*35 + 3*i;
  7419  00CCB2  0EFF               	movlw	255
  7420  00CCB4  2429               	addwf	displayLogs@logNumber,w,c
  7421  00CCB6  6E01               	movwf	___wmul@multiplier,c
  7422  00CCB8  0EFF               	movlw	255
  7423  00CCBA  202A               	addwfc	displayLogs@logNumber+1,w,c
  7424  00CCBC  6E02               	movwf	___wmul@multiplier+1,c
  7425  00CCBE  0E00               	movlw	0
  7426  00CCC0  6E04               	movwf	___wmul@multiplicand+1,c
  7427  00CCC2  0E23               	movlw	35
  7428  00CCC4  6E03               	movwf	___wmul@multiplicand,c
  7429  00CCC6  EC31  F04C         	call	___wmul	;wreg free
  7430  00CCCA  C001  F02B         	movff	?___wmul,??_displayLogs
  7431  00CCCE  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  7432  00CCD2  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  7433  00CCD6  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  7434  00CCDA  0E00               	movlw	0
  7435  00CCDC  6E04               	movwf	___wmul@multiplicand+1,c
  7436  00CCDE  0E03               	movlw	3
  7437  00CCE0  6E03               	movwf	___wmul@multiplicand,c
  7438  00CCE2  EC31  F04C         	call	___wmul	;wreg free
  7439  00CCE6  5001               	movf	?___wmul,w,c
  7440  00CCE8  242B               	addwf	??_displayLogs,w,c
  7441  00CCEA  6E50               	movwf	displayLogs@n,c
  7442  00CCEC  5002               	movf	?___wmul+1,w,c
  7443  00CCEE  202C               	addwfc	??_displayLogs+1,w,c
  7444  00CCF0  6E51               	movwf	displayLogs@n+1,c
  7445                           
  7446                           ;standbyMode.c: 1002: drawerNumber = readEEPROM(11+n);
  7447  00CCF2  5050               	movf	displayLogs@n,w,c
  7448  00CCF4  0F0B               	addlw	11
  7449  00CCF6  ECE9  F04B         	call	_readEEPROM
  7450  00CCFA  6E2B               	movwf	??_displayLogs& (0+255),c
  7451  00CCFC  502B               	movf	??_displayLogs,w,c
  7452  00CCFE  6E44               	movwf	displayLogs@drawerNumber,c
  7453  00CD00  6A45               	clrf	displayLogs@drawerNumber+1,c
  7454                           
  7455                           ;standbyMode.c: 1003: dietType = readEEPROM(12+n);
  7456  00CD02  5050               	movf	displayLogs@n,w,c
  7457  00CD04  0F0C               	addlw	12
  7458  00CD06  ECE9  F04B         	call	_readEEPROM
  7459  00CD0A  6E2B               	movwf	??_displayLogs& (0+255),c
  7460  00CD0C  502B               	movf	??_displayLogs,w,c
  7461  00CD0E  6E3D               	movwf	displayLogs@dietType,c
  7462  00CD10  6A3E               	clrf	displayLogs@dietType+1,c
  7463                           
  7464                           ;standbyMode.c: 1004: foodType = readEEPROM(13+n);
  7465  00CD12  5050               	movf	displayLogs@n,w,c
  7466  00CD14  0F0D               	addlw	13
  7467  00CD16  ECE9  F04B         	call	_readEEPROM
  7468  00CD1A  6E2B               	movwf	??_displayLogs& (0+255),c
  7469  00CD1C  502B               	movf	??_displayLogs,w,c
  7470  00CD1E  6E3F               	movwf	displayLogs@foodType,c
  7471  00CD20  6A40               	clrf	displayLogs@foodType+1,c
  7472                           
  7473                           ;standbyMode.c: 1005: if (drawerNumber != 0){
  7474  00CD22  5044               	movf	displayLogs@drawerNumber,w,c
  7475  00CD24  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  7476  00CD26  B4D8               	btfsc	status,2,c
  7477  00CD28  D03B               	goto	u8960
  7478                           
  7479                           ;standbyMode.c: 1006: printf("Drawer %i:", drawerNumber);
  7480  00CD2A  0E08               	movlw	low STR_101
  7481  00CD2C  6E0D               	movwf	printf@f,c
  7482  00CD2E  0EFC               	movlw	high STR_101
  7483  00CD30  6E0E               	movwf	printf@f+1,c
  7484  00CD32  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  7485  00CD36  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  7486  00CD3A  ECBD  F05F         	call	_printf	;wreg free
  7487                           
  7488                           ;standbyMode.c: 1007: lcdInst(0xC0);;
  7489  00CD3E  0EC0               	movlw	192
  7490  00CD40  ECDF  F04B         	call	_lcdInst
  7491                           
  7492                           ;standbyMode.c: 1008: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  7493  00CD44  0EB3               	movlw	low STR_102
  7494  00CD46  6E0D               	movwf	printf@f,c
  7495  00CD48  0EFC               	movlw	high STR_102
  7496  00CD4A  6E0E               	movwf	printf@f+1,c
  7497  00CD4C  90D8               	bcf	status,0,c
  7498  00CD4E  343D               	rlcf	displayLogs@dietType,w,c
  7499  00CD50  6ED9               	movwf	fsr2l,c
  7500  00CD52  343E               	rlcf	displayLogs@dietType+1,w,c
  7501  00CD54  6EDA               	movwf	fsr2h,c
  7502  00CD56  0E50               	movlw	low _inputs
  7503  00CD58  26D9               	addwf	fsr2l,f,c
  7504  00CD5A  0E02               	movlw	high _inputs
  7505  00CD5C  22DA               	addwfc	fsr2h,f,c
  7506  00CD5E  CFDE F00F          	movff	postinc2,?_printf+2
  7507  00CD62  CFDD F010          	movff	postdec2,?_printf+3
  7508  00CD66  90D8               	bcf	status,0,c
  7509  00CD68  343F               	rlcf	displayLogs@foodType,w,c
  7510  00CD6A  6ED9               	movwf	fsr2l,c
  7511  00CD6C  3440               	rlcf	displayLogs@foodType+1,w,c
  7512  00CD6E  6EDA               	movwf	fsr2h,c
  7513  00CD70  0E74               	movlw	low _foodInputs
  7514  00CD72  26D9               	addwf	fsr2l,f,c
  7515  00CD74  0E02               	movlw	high _foodInputs
  7516  00CD76  22DA               	addwfc	fsr2h,f,c
  7517  00CD78  CFDE F011          	movff	postinc2,?_printf+4
  7518  00CD7C  CFDD F012          	movff	postdec2,?_printf+5
  7519  00CD80  ECBD  F05F         	call	_printf	;wreg free
  7520                           
  7521                           ;standbyMode.c: 1009: _delay((unsigned long)((700)*(40000000/4000.0)));
  7522  00CD84  0E24               	movlw	36
  7523  00CD86  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7524  00CD88  0E83               	movlw	131
  7525  00CD8A  6E2B               	movwf	??_displayLogs& (0+255),c
  7526  00CD8C  0ECF               	movlw	207
  7527  00CD8E                     u14947:
  7528  00CD8E  2EE8               	decfsz	wreg,f,c
  7529  00CD90  D7FE               	bra	u14947
  7530  00CD92  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7531  00CD94  D7FC               	bra	u14947
  7532  00CD96  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7533  00CD98  D7FA               	bra	u14947
  7534  00CD9A  F000               	nop	
  7535  00CD9C                     
  7536                           ;standbyMode.c: 1011: continue;
  7537  00CD9C  A281               	btfss	3969,1,c	;volatile
  7538  00CD9E  D7FE               	goto	l1025
  7539  00CDA0                     u8960:
  7540  00CDA0  4A46               	infsnz	displayLogs@i,f,c
  7541  00CDA2  2A47               	incf	displayLogs@i+1,f,c
  7542  00CDA4  5047               	movf	displayLogs@i+1,w,c
  7543  00CDA6  E101               	bnz	l7740
  7544  00CDA8  D773               	goto	L20
  7545  00CDAA                     u8970:
  7546  00CDAA                     l7740:
  7547                           
  7548                           ;standbyMode.c: 1012: }
  7549                           ;standbyMode.c: 1013: }
  7550                           ;standbyMode.c: 1014: }
  7551                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7552  00CDAA  0E01               	movlw	1
  7553  00CDAC  ECDF  F04B         	call	_lcdInst
  7554  00CDB0  0EC3               	movlw	195
  7555  00CDB2  6E2B               	movwf	??_displayLogs& (0+255),c
  7556  00CDB4  0ECD               	movlw	205
  7557  00CDB6                     u14957:
  7558  00CDB6  2EE8               	decfsz	wreg,f,c
  7559  00CDB8  D7FE               	bra	u14957
  7560  00CDBA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7561  00CDBC  D7FC               	bra	u14957
  7562  00CDBE  F000               	nop	
  7563                           
  7564                           ;standbyMode.c: 1017: printf("Another log?");
  7565  00CDC0  0EB5               	movlw	low STR_103
  7566  00CDC2  6E0D               	movwf	printf@f,c
  7567  00CDC4  0EFB               	movlw	high STR_103
  7568  00CDC6  6E0E               	movwf	printf@f+1,c
  7569  00CDC8  ECBD  F05F         	call	_printf	;wreg free
  7570                           
  7571                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  7572  00CDCC  0EC0               	movlw	192
  7573  00CDCE  ECDF  F04B         	call	_lcdInst
  7574                           
  7575                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  7576  00CDD2  0E80               	movlw	low STR_104
  7577  00CDD4  6E0D               	movwf	printf@f,c
  7578  00CDD6  0EFA               	movlw	high STR_104
  7579  00CDD8  6E0E               	movwf	printf@f+1,c
  7580  00CDDA  ECBD  F05F         	call	_printf	;wreg free
  7581                           
  7582                           ;standbyMode.c: 1020: _delay((unsigned long)((700)*(40000000/4000.0)));
  7583  00CDDE  0E24               	movlw	36
  7584  00CDE0  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7585  00CDE2  0E83               	movlw	131
  7586  00CDE4  6E2B               	movwf	??_displayLogs& (0+255),c
  7587  00CDE6  0ECF               	movlw	207
  7588  00CDE8                     u14967:
  7589  00CDE8  2EE8               	decfsz	wreg,f,c
  7590  00CDEA  D7FE               	bra	u14967
  7591  00CDEC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7592  00CDEE  D7FC               	bra	u14967
  7593  00CDF0  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7594  00CDF2  D7FA               	bra	u14967
  7595  00CDF4  F000               	nop	
  7596  00CDF6  A281               	btfss	3969,1,c	;volatile
  7597  00CDF8  D7FE               	goto	l1028
  7598                           
  7599                           ;standbyMode.c: 1023: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  7600  00CDFA  3881               	swapf	3969,w,c	;volatile
  7601  00CDFC  0B0F               	andlw	15
  7602  00CDFE  0B0F               	andlw	15
  7603  00CE00  6E41               	movwf	displayLogs@keypress3,c
  7604  00CE02  B281               	btfsc	3969,1,c	;volatile
  7605  00CE04  D7FE               	goto	l1031
  7606                           
  7607                           ;standbyMode.c: 1025: return keypress3;
  7608  00CE06  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  7609  00CE0A  6A2A               	clrf	?_displayLogs+1,c
  7610  00CE0C  0012               	return		;funcret
  7611  00CE0E                     __end_of_displayLogs:
  7612                           	opt stack 0
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           plusw1	equ	0xFE3
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _shiftEEPROM *****************
  7633 ;; Defined at:
  7634 ;;		line 68 in file "EEPROMstorage.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  i               2    5[COMRAM] unsigned int 
  7639 ;;  temp            2    3[COMRAM] unsigned int 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;Total ram usage:        5 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    1
  7656 ;; This function calls:
  7657 ;;		_readEEPROM
  7658 ;;		_writeEEPROM
  7659 ;; This function is called by:
  7660 ;;		_standbyMode
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text7
  7665  00A0D6                     __ptext7:
  7666                           	opt stack 0
  7667  00A0D6                     _shiftEEPROM:
  7668                           	opt stack 28
  7669                           
  7670                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  7671                           
  7672                           ;incstack = 0
  7673  00A0D6  0E00               	movlw	0
  7674  00A0D8  6E07               	movwf	shiftEEPROM@i+1,c
  7675  00A0DA  0E00               	movlw	0
  7676  00A0DC  6E06               	movwf	shiftEEPROM@i,c
  7677                           
  7678                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  7679  00A0DE  0E00               	movlw	0
  7680  00A0E0  6E05               	movwf	shiftEEPROM@temp+1,c
  7681  00A0E2  0E00               	movlw	0
  7682  00A0E4  6E04               	movwf	shiftEEPROM@temp,c
  7683                           
  7684                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  7685  00A0E6  0E00               	movlw	0
  7686  00A0E8  6E07               	movwf	shiftEEPROM@i+1,c
  7687  00A0EA  0E46               	movlw	70
  7688  00A0EC  6E06               	movwf	shiftEEPROM@i,c
  7689  00A0EE                     l10004:
  7690  00A0EE  5007               	movf	shiftEEPROM@i+1,w,c
  7691  00A0F0  E114               	bnz	l10014
  7692  00A0F2  0E69               	movlw	105
  7693  00A0F4  5C06               	subwf	shiftEEPROM@i,w,c
  7694  00A0F6  B0D8               	btfsc	status,0,c
  7695  00A0F8  D010               	goto	u13290
  7696                           
  7697                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  7698  00A0FA  5006               	movf	shiftEEPROM@i,w,c
  7699  00A0FC  ECE9  F04B         	call	_readEEPROM
  7700  00A100  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7701  00A102  5003               	movf	??_shiftEEPROM,w,c
  7702  00A104  6E04               	movwf	shiftEEPROM@temp,c
  7703  00A106  6A05               	clrf	shiftEEPROM@temp+1,c
  7704                           
  7705                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  7706  00A108  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7707  00A10C  5006               	movf	shiftEEPROM@i,w,c
  7708  00A10E  0F23               	addlw	35
  7709  00A110  EC44  F04C         	call	_writeEEPROM
  7710  00A114  4A06               	infsnz	shiftEEPROM@i,f,c
  7711  00A116  2A07               	incf	shiftEEPROM@i+1,f,c
  7712  00A118  D7EA               	goto	l10004
  7713  00A11A                     u13290:
  7714  00A11A                     l10014:
  7715                           
  7716                           ;EEPROMstorage.c: 74: }
  7717                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  7718  00A11A  0E00               	movlw	0
  7719  00A11C  6E07               	movwf	shiftEEPROM@i+1,c
  7720  00A11E  0E23               	movlw	35
  7721  00A120  6E06               	movwf	shiftEEPROM@i,c
  7722  00A122                     l10016:
  7723  00A122  5007               	movf	shiftEEPROM@i+1,w,c
  7724  00A124  E114               	bnz	l10026
  7725  00A126  0E46               	movlw	70
  7726  00A128  5C06               	subwf	shiftEEPROM@i,w,c
  7727  00A12A  B0D8               	btfsc	status,0,c
  7728  00A12C  D010               	goto	u13310
  7729                           
  7730                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  7731  00A12E  5006               	movf	shiftEEPROM@i,w,c
  7732  00A130  ECE9  F04B         	call	_readEEPROM
  7733  00A134  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7734  00A136  5003               	movf	??_shiftEEPROM,w,c
  7735  00A138  6E04               	movwf	shiftEEPROM@temp,c
  7736  00A13A  6A05               	clrf	shiftEEPROM@temp+1,c
  7737                           
  7738                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  7739  00A13C  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7740  00A140  5006               	movf	shiftEEPROM@i,w,c
  7741  00A142  0F23               	addlw	35
  7742  00A144  EC44  F04C         	call	_writeEEPROM
  7743  00A148  4A06               	infsnz	shiftEEPROM@i,f,c
  7744  00A14A  2A07               	incf	shiftEEPROM@i+1,f,c
  7745  00A14C  D7EA               	goto	l10016
  7746  00A14E                     u13310:
  7747  00A14E                     l10026:
  7748                           
  7749                           ;EEPROMstorage.c: 79: }
  7750                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  7751  00A14E  0E00               	movlw	0
  7752  00A150  6E07               	movwf	shiftEEPROM@i+1,c
  7753  00A152  0E00               	movlw	0
  7754  00A154  6E06               	movwf	shiftEEPROM@i,c
  7755  00A156                     l10028:
  7756  00A156  5007               	movf	shiftEEPROM@i+1,w,c
  7757  00A158  E114               	bnz	l1363
  7758  00A15A  0E23               	movlw	35
  7759  00A15C  5C06               	subwf	shiftEEPROM@i,w,c
  7760  00A15E  B0D8               	btfsc	status,0,c
  7761  00A160  0012               	return	
  7762                           
  7763                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  7764  00A162  5006               	movf	shiftEEPROM@i,w,c
  7765  00A164  ECE9  F04B         	call	_readEEPROM
  7766  00A168  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7767  00A16A  5003               	movf	??_shiftEEPROM,w,c
  7768  00A16C  6E04               	movwf	shiftEEPROM@temp,c
  7769  00A16E  6A05               	clrf	shiftEEPROM@temp+1,c
  7770                           
  7771                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  7772  00A170  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7773  00A174  5006               	movf	shiftEEPROM@i,w,c
  7774  00A176  0F23               	addlw	35
  7775  00A178  EC44  F04C         	call	_writeEEPROM
  7776  00A17C  4A06               	infsnz	shiftEEPROM@i,f,c
  7777  00A17E  2A07               	incf	shiftEEPROM@i+1,f,c
  7778  00A180  D7EA               	goto	l10028
  7779  00A182                     l1363:
  7780  00A182  0012               	return		;funcret
  7781  00A184                     __end_of_shiftEEPROM:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           postdec1	equ	0xFE5
  7792                           plusw1	equ	0xFE3
  7793                           fsr1l	equ	0xFE1
  7794                           indf2	equ	0xFDF
  7795                           postinc2	equ	0xFDE
  7796                           postdec2	equ	0xFDD
  7797                           plusw2	equ	0xFDB
  7798                           fsr2h	equ	0xFDA
  7799                           fsr2l	equ	0xFD9
  7800                           status	equ	0xFD8
  7801                           
  7802 ;; *************** function _printFoodInput *****************
  7803 ;; Defined at:
  7804 ;;		line 839 in file "standbyMode.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  food            2    0[COMRAM] unsigned int 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  2    0[COMRAM] unsigned int 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;Total ram usage:        2 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_standbyMode
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text8
  7832  00B57E                     __ptext8:
  7833                           	opt stack 0
  7834  00B57E                     _printFoodInput:
  7835                           	opt stack 29
  7836                           
  7837                           ;standbyMode.c: 842: if (food == 1 || food == 3 || food == 5){
  7838                           
  7839                           ;incstack = 0
  7840  00B57E  0401               	decf	printFoodInput@food,w,c
  7841  00B580  1002               	iorwf	printFoodInput@food+1,w,c
  7842  00B582  B4D8               	btfsc	status,2,c
  7843  00B584  D00A               	goto	u11570
  7844  00B586  0E03               	movlw	3
  7845  00B588  1801               	xorwf	printFoodInput@food,w,c
  7846  00B58A  1002               	iorwf	printFoodInput@food+1,w,c
  7847  00B58C  B4D8               	btfsc	status,2,c
  7848  00B58E  D005               	goto	u11570
  7849  00B590  0E05               	movlw	5
  7850  00B592  1801               	xorwf	printFoodInput@food,w,c
  7851  00B594  1002               	iorwf	printFoodInput@food+1,w,c
  7852  00B596  A4D8               	btfss	status,2,c
  7853  00B598  D005               	goto	l947
  7854  00B59A                     u11570:
  7855                           
  7856                           ;standbyMode.c: 843: return 0;
  7857  00B59A  0E00               	movlw	0
  7858  00B59C  6E02               	movwf	?_printFoodInput+1,c
  7859  00B59E  0E00               	movlw	0
  7860  00B5A0  6E01               	movwf	?_printFoodInput,c
  7861                           
  7862                           ;standbyMode.c: 844: }
  7863  00B5A2  0012               	return	
  7864  00B5A4                     l947:
  7865                           
  7866                           ;standbyMode.c: 847: else if (food == 2 || food == 4 || food == 6){
  7867  00B5A4  0E02               	movlw	2
  7868  00B5A6  1801               	xorwf	printFoodInput@food,w,c
  7869  00B5A8  1002               	iorwf	printFoodInput@food+1,w,c
  7870  00B5AA  B4D8               	btfsc	status,2,c
  7871  00B5AC  D00A               	goto	u11600
  7872  00B5AE  0E04               	movlw	4
  7873  00B5B0  1801               	xorwf	printFoodInput@food,w,c
  7874  00B5B2  1002               	iorwf	printFoodInput@food+1,w,c
  7875  00B5B4  B4D8               	btfsc	status,2,c
  7876  00B5B6  D005               	goto	u11600
  7877  00B5B8  0E06               	movlw	6
  7878  00B5BA  1801               	xorwf	printFoodInput@food,w,c
  7879  00B5BC  1002               	iorwf	printFoodInput@food+1,w,c
  7880  00B5BE  A4D8               	btfss	status,2,c
  7881  00B5C0  D005               	goto	l952
  7882  00B5C2                     u11600:
  7883                           
  7884                           ;standbyMode.c: 848: return 1;
  7885  00B5C2  0E00               	movlw	0
  7886  00B5C4  6E02               	movwf	?_printFoodInput+1,c
  7887  00B5C6  0E01               	movlw	1
  7888  00B5C8  6E01               	movwf	?_printFoodInput,c
  7889                           
  7890                           ;standbyMode.c: 849: }
  7891  00B5CA  0012               	return	
  7892  00B5CC                     l952:
  7893                           
  7894                           ;standbyMode.c: 852: else if (food == 7){
  7895  00B5CC  0E07               	movlw	7
  7896  00B5CE  1801               	xorwf	printFoodInput@food,w,c
  7897  00B5D0  1002               	iorwf	printFoodInput@food+1,w,c
  7898  00B5D2  A4D8               	btfss	status,2,c
  7899  00B5D4  D005               	goto	l956
  7900                           
  7901                           ;standbyMode.c: 853: return 2;
  7902  00B5D6  0E00               	movlw	0
  7903  00B5D8  6E02               	movwf	?_printFoodInput+1,c
  7904  00B5DA  0E02               	movlw	2
  7905  00B5DC  6E01               	movwf	?_printFoodInput,c
  7906                           
  7907                           ;standbyMode.c: 854: }
  7908  00B5DE  0012               	return	
  7909  00B5E0                     l956:
  7910                           
  7911                           ;standbyMode.c: 857: else if (food == 8 || food == 12 || food == 17){
  7912  00B5E0  0E08               	movlw	8
  7913  00B5E2  1801               	xorwf	printFoodInput@food,w,c
  7914  00B5E4  1002               	iorwf	printFoodInput@food+1,w,c
  7915  00B5E6  B4D8               	btfsc	status,2,c
  7916  00B5E8  D00A               	goto	u11640
  7917  00B5EA  0E0C               	movlw	12
  7918  00B5EC  1801               	xorwf	printFoodInput@food,w,c
  7919  00B5EE  1002               	iorwf	printFoodInput@food+1,w,c
  7920  00B5F0  B4D8               	btfsc	status,2,c
  7921  00B5F2  D005               	goto	u11640
  7922  00B5F4  0E11               	movlw	17
  7923  00B5F6  1801               	xorwf	printFoodInput@food,w,c
  7924  00B5F8  1002               	iorwf	printFoodInput@food+1,w,c
  7925  00B5FA  A4D8               	btfss	status,2,c
  7926  00B5FC  D005               	goto	l958
  7927  00B5FE                     u11640:
  7928                           
  7929                           ;standbyMode.c: 858: return 3;
  7930  00B5FE  0E00               	movlw	0
  7931  00B600  6E02               	movwf	?_printFoodInput+1,c
  7932  00B602  0E03               	movlw	3
  7933  00B604  6E01               	movwf	?_printFoodInput,c
  7934                           
  7935                           ;standbyMode.c: 859: }
  7936  00B606  0012               	return	
  7937  00B608                     l958:
  7938                           
  7939                           ;standbyMode.c: 862: else if (food == 9 || food == 13 || food == 18){
  7940  00B608  0E09               	movlw	9
  7941  00B60A  1801               	xorwf	printFoodInput@food,w,c
  7942  00B60C  1002               	iorwf	printFoodInput@food+1,w,c
  7943  00B60E  B4D8               	btfsc	status,2,c
  7944  00B610  D00A               	goto	u11670
  7945  00B612  0E0D               	movlw	13
  7946  00B614  1801               	xorwf	printFoodInput@food,w,c
  7947  00B616  1002               	iorwf	printFoodInput@food+1,w,c
  7948  00B618  B4D8               	btfsc	status,2,c
  7949  00B61A  D005               	goto	u11670
  7950  00B61C  0E12               	movlw	18
  7951  00B61E  1801               	xorwf	printFoodInput@food,w,c
  7952  00B620  1002               	iorwf	printFoodInput@food+1,w,c
  7953  00B622  A4D8               	btfss	status,2,c
  7954  00B624  D005               	goto	l962
  7955  00B626                     u11670:
  7956                           
  7957                           ;standbyMode.c: 863: return 4;
  7958  00B626  0E00               	movlw	0
  7959  00B628  6E02               	movwf	?_printFoodInput+1,c
  7960  00B62A  0E04               	movlw	4
  7961  00B62C  6E01               	movwf	?_printFoodInput,c
  7962                           
  7963                           ;standbyMode.c: 864: }
  7964  00B62E  0012               	return	
  7965  00B630                     l962:
  7966                           
  7967                           ;standbyMode.c: 867: else if (food == 14 || food == 19){
  7968  00B630  0E0E               	movlw	14
  7969  00B632  1801               	xorwf	printFoodInput@food,w,c
  7970  00B634  1002               	iorwf	printFoodInput@food+1,w,c
  7971  00B636  B4D8               	btfsc	status,2,c
  7972  00B638  D005               	goto	u11690
  7973  00B63A  0E13               	movlw	19
  7974  00B63C  1801               	xorwf	printFoodInput@food,w,c
  7975  00B63E  1002               	iorwf	printFoodInput@food+1,w,c
  7976  00B640  A4D8               	btfss	status,2,c
  7977  00B642  D005               	goto	l966
  7978  00B644                     u11690:
  7979                           
  7980                           ;standbyMode.c: 868: return 5;
  7981  00B644  0E00               	movlw	0
  7982  00B646  6E02               	movwf	?_printFoodInput+1,c
  7983  00B648  0E05               	movlw	5
  7984  00B64A  6E01               	movwf	?_printFoodInput,c
  7985                           
  7986                           ;standbyMode.c: 869: }
  7987  00B64C  0012               	return	
  7988  00B64E                     l966:
  7989                           
  7990                           ;standbyMode.c: 872: else if (food == 10 || food == 15 || food == 20){
  7991  00B64E  0E0A               	movlw	10
  7992  00B650  1801               	xorwf	printFoodInput@food,w,c
  7993  00B652  1002               	iorwf	printFoodInput@food+1,w,c
  7994  00B654  B4D8               	btfsc	status,2,c
  7995  00B656  D00A               	goto	u11720
  7996  00B658  0E0F               	movlw	15
  7997  00B65A  1801               	xorwf	printFoodInput@food,w,c
  7998  00B65C  1002               	iorwf	printFoodInput@food+1,w,c
  7999  00B65E  B4D8               	btfsc	status,2,c
  8000  00B660  D005               	goto	u11720
  8001  00B662  0E14               	movlw	20
  8002  00B664  1801               	xorwf	printFoodInput@food,w,c
  8003  00B666  1002               	iorwf	printFoodInput@food+1,w,c
  8004  00B668  A4D8               	btfss	status,2,c
  8005  00B66A  D005               	goto	l970
  8006  00B66C                     u11720:
  8007                           
  8008                           ;standbyMode.c: 873: return 6;
  8009  00B66C  0E00               	movlw	0
  8010  00B66E  6E02               	movwf	?_printFoodInput+1,c
  8011  00B670  0E06               	movlw	6
  8012  00B672  6E01               	movwf	?_printFoodInput,c
  8013                           
  8014                           ;standbyMode.c: 874: }
  8015  00B674  0012               	return	
  8016  00B676                     l970:
  8017                           
  8018                           ;standbyMode.c: 877: else if (food == 11 || food == 16 || food == 21){
  8019  00B676  0E0B               	movlw	11
  8020  00B678  1801               	xorwf	printFoodInput@food,w,c
  8021  00B67A  1002               	iorwf	printFoodInput@food+1,w,c
  8022  00B67C  B4D8               	btfsc	status,2,c
  8023  00B67E  D00A               	goto	u11750
  8024  00B680  0E10               	movlw	16
  8025  00B682  1801               	xorwf	printFoodInput@food,w,c
  8026  00B684  1002               	iorwf	printFoodInput@food+1,w,c
  8027  00B686  B4D8               	btfsc	status,2,c
  8028  00B688  D005               	goto	u11750
  8029  00B68A  0E15               	movlw	21
  8030  00B68C  1801               	xorwf	printFoodInput@food,w,c
  8031  00B68E  1002               	iorwf	printFoodInput@food+1,w,c
  8032  00B690  A4D8               	btfss	status,2,c
  8033  00B692  D005               	goto	l974
  8034  00B694                     u11750:
  8035                           
  8036                           ;standbyMode.c: 878: return 7;
  8037  00B694  0E00               	movlw	0
  8038  00B696  6E02               	movwf	?_printFoodInput+1,c
  8039  00B698  0E07               	movlw	7
  8040  00B69A  6E01               	movwf	?_printFoodInput,c
  8041                           
  8042                           ;standbyMode.c: 879: }
  8043  00B69C  0012               	return	
  8044  00B69E                     l974:
  8045                           
  8046                           ;standbyMode.c: 882: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  8047  00B69E  0E16               	movlw	22
  8048  00B6A0  1801               	xorwf	printFoodInput@food,w,c
  8049  00B6A2  1002               	iorwf	printFoodInput@food+1,w,c
  8050  00B6A4  B4D8               	btfsc	status,2,c
  8051  00B6A6  D01E               	goto	u11820
  8052  00B6A8  0E18               	movlw	24
  8053  00B6AA  1801               	xorwf	printFoodInput@food,w,c
  8054  00B6AC  1002               	iorwf	printFoodInput@food+1,w,c
  8055  00B6AE  B4D8               	btfsc	status,2,c
  8056  00B6B0  D019               	goto	u11820
  8057  00B6B2  0E1A               	movlw	26
  8058  00B6B4  1801               	xorwf	printFoodInput@food,w,c
  8059  00B6B6  1002               	iorwf	printFoodInput@food+1,w,c
  8060  00B6B8  B4D8               	btfsc	status,2,c
  8061  00B6BA  D014               	goto	u11820
  8062  00B6BC  0E1C               	movlw	28
  8063  00B6BE  1801               	xorwf	printFoodInput@food,w,c
  8064  00B6C0  1002               	iorwf	printFoodInput@food+1,w,c
  8065  00B6C2  B4D8               	btfsc	status,2,c
  8066  00B6C4  D00F               	goto	u11820
  8067  00B6C6  0E20               	movlw	32
  8068  00B6C8  1801               	xorwf	printFoodInput@food,w,c
  8069  00B6CA  1002               	iorwf	printFoodInput@food+1,w,c
  8070  00B6CC  B4D8               	btfsc	status,2,c
  8071  00B6CE  D00A               	goto	u11820
  8072  00B6D0  0E24               	movlw	36
  8073  00B6D2  1801               	xorwf	printFoodInput@food,w,c
  8074  00B6D4  1002               	iorwf	printFoodInput@food+1,w,c
  8075  00B6D6  B4D8               	btfsc	status,2,c
  8076  00B6D8  D005               	goto	u11820
  8077  00B6DA  0E26               	movlw	38
  8078  00B6DC  1801               	xorwf	printFoodInput@food,w,c
  8079  00B6DE  1002               	iorwf	printFoodInput@food+1,w,c
  8080  00B6E0  A4D8               	btfss	status,2,c
  8081  00B6E2  D005               	goto	l978
  8082  00B6E4                     u11820:
  8083                           
  8084                           ;standbyMode.c: 883: return 8;
  8085  00B6E4  0E00               	movlw	0
  8086  00B6E6  6E02               	movwf	?_printFoodInput+1,c
  8087  00B6E8  0E08               	movlw	8
  8088  00B6EA  6E01               	movwf	?_printFoodInput,c
  8089                           
  8090                           ;standbyMode.c: 884: }
  8091  00B6EC  0012               	return	
  8092  00B6EE                     l978:
  8093                           
  8094                           ;standbyMode.c: 887: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  8095  00B6EE  0E17               	movlw	23
  8096  00B6F0  1801               	xorwf	printFoodInput@food,w,c
  8097  00B6F2  1002               	iorwf	printFoodInput@food+1,w,c
  8098  00B6F4  B4D8               	btfsc	status,2,c
  8099  00B6F6  D019               	goto	u11880
  8100  00B6F8  0E19               	movlw	25
  8101  00B6FA  1801               	xorwf	printFoodInput@food,w,c
  8102  00B6FC  1002               	iorwf	printFoodInput@food+1,w,c
  8103  00B6FE  B4D8               	btfsc	status,2,c
  8104  00B700  D014               	goto	u11880
  8105  00B702  0E1D               	movlw	29
  8106  00B704  1801               	xorwf	printFoodInput@food,w,c
  8107  00B706  1002               	iorwf	printFoodInput@food+1,w,c
  8108  00B708  B4D8               	btfsc	status,2,c
  8109  00B70A  D00F               	goto	u11880
  8110  00B70C  0E21               	movlw	33
  8111  00B70E  1801               	xorwf	printFoodInput@food,w,c
  8112  00B710  1002               	iorwf	printFoodInput@food+1,w,c
  8113  00B712  B4D8               	btfsc	status,2,c
  8114  00B714  D00A               	goto	u11880
  8115  00B716  0E25               	movlw	37
  8116  00B718  1801               	xorwf	printFoodInput@food,w,c
  8117  00B71A  1002               	iorwf	printFoodInput@food+1,w,c
  8118  00B71C  B4D8               	btfsc	status,2,c
  8119  00B71E  D005               	goto	u11880
  8120  00B720  0E27               	movlw	39
  8121  00B722  1801               	xorwf	printFoodInput@food,w,c
  8122  00B724  1002               	iorwf	printFoodInput@food+1,w,c
  8123  00B726  A4D8               	btfss	status,2,c
  8124  00B728  D005               	goto	l982
  8125  00B72A                     u11880:
  8126                           
  8127                           ;standbyMode.c: 888: return 9;
  8128  00B72A  0E00               	movlw	0
  8129  00B72C  6E02               	movwf	?_printFoodInput+1,c
  8130  00B72E  0E09               	movlw	9
  8131  00B730  6E01               	movwf	?_printFoodInput,c
  8132                           
  8133                           ;standbyMode.c: 889: }
  8134  00B732  0012               	return	
  8135  00B734                     l982:
  8136                           
  8137                           ;standbyMode.c: 892: else if (food == 30 || food == 34 || food == 40){
  8138  00B734  0E1E               	movlw	30
  8139  00B736  1801               	xorwf	printFoodInput@food,w,c
  8140  00B738  1002               	iorwf	printFoodInput@food+1,w,c
  8141  00B73A  B4D8               	btfsc	status,2,c
  8142  00B73C  D00A               	goto	u11910
  8143  00B73E  0E22               	movlw	34
  8144  00B740  1801               	xorwf	printFoodInput@food,w,c
  8145  00B742  1002               	iorwf	printFoodInput@food+1,w,c
  8146  00B744  B4D8               	btfsc	status,2,c
  8147  00B746  D005               	goto	u11910
  8148  00B748  0E28               	movlw	40
  8149  00B74A  1801               	xorwf	printFoodInput@food,w,c
  8150  00B74C  1002               	iorwf	printFoodInput@food+1,w,c
  8151  00B74E  A4D8               	btfss	status,2,c
  8152  00B750  D005               	goto	l986
  8153  00B752                     u11910:
  8154                           
  8155                           ;standbyMode.c: 893: return 10;
  8156  00B752  0E00               	movlw	0
  8157  00B754  6E02               	movwf	?_printFoodInput+1,c
  8158  00B756  0E0A               	movlw	10
  8159  00B758  6E01               	movwf	?_printFoodInput,c
  8160                           
  8161                           ;standbyMode.c: 894: }
  8162  00B75A  0012               	return	
  8163  00B75C                     l986:
  8164                           
  8165                           ;standbyMode.c: 897: else if (food == 27 || food == 31 || food == 35 || food == 41){
  8166  00B75C  0E1B               	movlw	27
  8167  00B75E  1801               	xorwf	printFoodInput@food,w,c
  8168  00B760  1002               	iorwf	printFoodInput@food+1,w,c
  8169  00B762  B4D8               	btfsc	status,2,c
  8170  00B764  D00F               	goto	u11950
  8171  00B766  0E1F               	movlw	31
  8172  00B768  1801               	xorwf	printFoodInput@food,w,c
  8173  00B76A  1002               	iorwf	printFoodInput@food+1,w,c
  8174  00B76C  B4D8               	btfsc	status,2,c
  8175  00B76E  D00A               	goto	u11950
  8176  00B770  0E23               	movlw	35
  8177  00B772  1801               	xorwf	printFoodInput@food,w,c
  8178  00B774  1002               	iorwf	printFoodInput@food+1,w,c
  8179  00B776  B4D8               	btfsc	status,2,c
  8180  00B778  D005               	goto	u11950
  8181  00B77A  0E29               	movlw	41
  8182  00B77C  1801               	xorwf	printFoodInput@food,w,c
  8183  00B77E  1002               	iorwf	printFoodInput@food+1,w,c
  8184  00B780  A4D8               	btfss	status,2,c
  8185  00B782  D005               	goto	l990
  8186  00B784                     u11950:
  8187                           
  8188                           ;standbyMode.c: 898: return 11;
  8189  00B784  0E00               	movlw	0
  8190  00B786  6E02               	movwf	?_printFoodInput+1,c
  8191  00B788  0E0B               	movlw	11
  8192  00B78A  6E01               	movwf	?_printFoodInput,c
  8193                           
  8194                           ;standbyMode.c: 899: }
  8195  00B78C  0012               	return	
  8196  00B78E                     l990:
  8197                           
  8198                           ;standbyMode.c: 903: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  8199  00B78E  0E2A               	movlw	42
  8200  00B790  1801               	xorwf	printFoodInput@food,w,c
  8201  00B792  1002               	iorwf	printFoodInput@food+1,w,c
  8202  00B794  B4D8               	btfsc	status,2,c
  8203  00B796  D014               	goto	u12000
  8204  00B798  0E2B               	movlw	43
  8205  00B79A  1801               	xorwf	printFoodInput@food,w,c
  8206  00B79C  1002               	iorwf	printFoodInput@food+1,w,c
  8207  00B79E  B4D8               	btfsc	status,2,c
  8208  00B7A0  D00F               	goto	u12000
  8209  00B7A2  0E2C               	movlw	44
  8210  00B7A4  1801               	xorwf	printFoodInput@food,w,c
  8211  00B7A6  1002               	iorwf	printFoodInput@food+1,w,c
  8212  00B7A8  B4D8               	btfsc	status,2,c
  8213  00B7AA  D00A               	goto	u12000
  8214  00B7AC  0E2D               	movlw	45
  8215  00B7AE  1801               	xorwf	printFoodInput@food,w,c
  8216  00B7B0  1002               	iorwf	printFoodInput@food+1,w,c
  8217  00B7B2  B4D8               	btfsc	status,2,c
  8218  00B7B4  D005               	goto	u12000
  8219  00B7B6  0E2E               	movlw	46
  8220  00B7B8  1801               	xorwf	printFoodInput@food,w,c
  8221  00B7BA  1002               	iorwf	printFoodInput@food+1,w,c
  8222  00B7BC  A4D8               	btfss	status,2,c
  8223  00B7BE  D005               	goto	l994
  8224  00B7C0                     u12000:
  8225                           
  8226                           ;standbyMode.c: 904: return 12;
  8227  00B7C0  0E00               	movlw	0
  8228  00B7C2  6E02               	movwf	?_printFoodInput+1,c
  8229  00B7C4  0E0C               	movlw	12
  8230  00B7C6  6E01               	movwf	?_printFoodInput,c
  8231                           
  8232                           ;standbyMode.c: 905: }
  8233  00B7C8  0012               	return	
  8234  00B7CA                     l994:
  8235                           
  8236                           ;standbyMode.c: 907: else{
  8237                           ;standbyMode.c: 908: return 0;
  8238  00B7CA  0E00               	movlw	0
  8239  00B7CC  6E02               	movwf	?_printFoodInput+1,c
  8240  00B7CE  0E00               	movlw	0
  8241  00B7D0  6E01               	movwf	?_printFoodInput,c
  8242  00B7D2  0012               	return	
  8243  00B7D4                     __end_of_printFoodInput:
  8244                           	opt stack 0
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           postinc0	equ	0xFEE
  8252                           wreg	equ	0xFE8
  8253                           postdec1	equ	0xFE5
  8254                           plusw1	equ	0xFE3
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           plusw2	equ	0xFDB
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function _getRound *****************
  8265 ;; Defined at:
  8266 ;;		line 243 in file "standbyMode.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  code            2    0[COMRAM] unsigned int 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  returnValue     2    4[COMRAM] unsigned int 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    0[COMRAM] unsigned int 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:        6 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_standbyMode
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text9
  8294  00A4E0                     __ptext9:
  8295                           	opt stack 0
  8296  00A4E0                     _getRound:
  8297                           	opt stack 29
  8298                           
  8299                           ;standbyMode.c: 244: unsigned int returnValue = 0;
  8300                           
  8301                           ;incstack = 0
  8302  00A4E0  0E00               	movlw	0
  8303  00A4E2  6E06               	movwf	getRound@returnValue+1,c
  8304  00A4E4  0E00               	movlw	0
  8305  00A4E6  6E05               	movwf	getRound@returnValue,c
  8306                           
  8307                           ;standbyMode.c: 245: switch(code){
  8308  00A4E8  D00D               	goto	l802
  8309  00A4EA                     
  8310                           ;standbyMode.c: 253: returnValue = 2;
  8311  00A4EA  0E00               	movlw	0
  8312  00A4EC  6E06               	movwf	getRound@returnValue+1,c
  8313  00A4EE  0E02               	movlw	2
  8314  00A4F0                     L22:
  8315  00A4F0  6E05               	movwf	getRound@returnValue,c
  8316                           
  8317                           ;standbyMode.c: 259: break;
  8318  00A4F2  D069               	goto	l804
  8319  00A4F4                     
  8320                           ;standbyMode.c: 388: returnValue = 1;
  8321                           
  8322                           ;standbyMode.c: 387: case 45:
  8323                           
  8324                           ;standbyMode.c: 384: break;
  8325                           
  8326                           ;standbyMode.c: 383: returnValue = 1;
  8327                           
  8328                           ;standbyMode.c: 382: case 44:
  8329                           
  8330                           ;standbyMode.c: 379: break;
  8331                           
  8332                           ;standbyMode.c: 378: returnValue = 1;
  8333  00A4F4  0E00               	movlw	0
  8334  00A4F6  6E06               	movwf	getRound@returnValue+1,c
  8335  00A4F8  0E01               	movlw	1
  8336  00A4FA  D7FA               	goto	L22
  8337  00A4FC                     
  8338                           ;standbyMode.c: 392: returnValue = 0;
  8339  00A4FC  0E00               	movlw	0
  8340  00A4FE  6E06               	movwf	getRound@returnValue+1,c
  8341  00A500  0E00               	movlw	0
  8342  00A502  D7F6               	goto	L22
  8343  00A504                     l802:
  8344  00A504  C001  F003         	movff	getRound@code,??_getRound
  8345  00A508  C002  F004         	movff	getRound@code+1,??_getRound+1
  8346                           
  8347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8348                           ; Switch size 1, requested type "space"
  8349                           ; Number of cases is 1, Range of values is 0 to 0
  8350                           ; switch strategies available:
  8351                           ; Name         Instructions Cycles
  8352                           ; simple_byte            4     3 (average)
  8353                           ;	Chosen strategy is simple_byte
  8354  00A50C  5004               	movf	??_getRound+1,w,c
  8355  00A50E  0A00               	xorlw	0	; case 0
  8356  00A510  A4D8               	btfss	status,2,c
  8357  00A512  D7F4               	goto	l833
  8358                           
  8359                           ; Switch size 1, requested type "space"
  8360                           ; Number of cases is 29, Range of values is 1 to 45
  8361                           ; switch strategies available:
  8362                           ; Name         Instructions Cycles
  8363                           ; simple_byte           88    45 (average)
  8364                           ;	Chosen strategy is simple_byte
  8365  00A514  5003               	movf	??_getRound,w,c
  8366  00A516  0A01               	xorlw	1	; case 1
  8367  00A518  B4D8               	btfsc	status,2,c
  8368  00A51A  D7EC               	goto	l830
  8369  00A51C  0A03               	xorlw	3	; case 2
  8370  00A51E  B4D8               	btfsc	status,2,c
  8371  00A520  D7E4               	goto	l805
  8372  00A522  0A0A               	xorlw	10	; case 8
  8373  00A524  B4D8               	btfsc	status,2,c
  8374  00A526  D7E6               	goto	l830
  8375  00A528  0A01               	xorlw	1	; case 9
  8376  00A52A  B4D8               	btfsc	status,2,c
  8377  00A52C  D7E3               	goto	l830
  8378  00A52E  0A03               	xorlw	3	; case 10
  8379  00A530  B4D8               	btfsc	status,2,c
  8380  00A532  D7DB               	goto	l805
  8381  00A534  0A01               	xorlw	1	; case 11
  8382  00A536  B4D8               	btfsc	status,2,c
  8383  00A538  D7D8               	goto	l805
  8384  00A53A  0A07               	xorlw	7	; case 12
  8385  00A53C  B4D8               	btfsc	status,2,c
  8386  00A53E  D7DA               	goto	l830
  8387  00A540  0A01               	xorlw	1	; case 13
  8388  00A542  B4D8               	btfsc	status,2,c
  8389  00A544  D7D7               	goto	l830
  8390  00A546  0A03               	xorlw	3	; case 14
  8391  00A548  B4D8               	btfsc	status,2,c
  8392  00A54A  D7D4               	goto	l830
  8393  00A54C  0A01               	xorlw	1	; case 15
  8394  00A54E  B4D8               	btfsc	status,2,c
  8395  00A550  D7CC               	goto	l805
  8396  00A552  0A1F               	xorlw	31	; case 16
  8397  00A554  B4D8               	btfsc	status,2,c
  8398  00A556  D7C9               	goto	l805
  8399  00A558  0A06               	xorlw	6	; case 22
  8400  00A55A  B4D8               	btfsc	status,2,c
  8401  00A55C  D7C6               	goto	l805
  8402  00A55E  0A01               	xorlw	1	; case 23
  8403  00A560  B4D8               	btfsc	status,2,c
  8404  00A562  D7C3               	goto	l805
  8405  00A564  0A0F               	xorlw	15	; case 24
  8406  00A566  B4D8               	btfsc	status,2,c
  8407  00A568  D7C0               	goto	l805
  8408  00A56A  0A01               	xorlw	1	; case 25
  8409  00A56C  B4D8               	btfsc	status,2,c
  8410  00A56E  D7BD               	goto	l805
  8411  00A570  0A03               	xorlw	3	; case 26
  8412  00A572  B4D8               	btfsc	status,2,c
  8413  00A574  D7BF               	goto	l830
  8414  00A576  0A01               	xorlw	1	; case 27
  8415  00A578  B4D8               	btfsc	status,2,c
  8416  00A57A  D7B7               	goto	l805
  8417  00A57C  0A07               	xorlw	7	; case 28
  8418  00A57E  B4D8               	btfsc	status,2,c
  8419  00A580  D7B9               	goto	l830
  8420  00A582  0A01               	xorlw	1	; case 29
  8421  00A584  B4D8               	btfsc	status,2,c
  8422  00A586  D7B6               	goto	l830
  8423  00A588  0A03               	xorlw	3	; case 30
  8424  00A58A  B4D8               	btfsc	status,2,c
  8425  00A58C  D7B3               	goto	l830
  8426  00A58E  0A01               	xorlw	1	; case 31
  8427  00A590  B4D8               	btfsc	status,2,c
  8428  00A592  D7AB               	goto	l805
  8429  00A594  0A3F               	xorlw	63	; case 32
  8430  00A596  B4D8               	btfsc	status,2,c
  8431  00A598  D7AD               	goto	l830
  8432  00A59A  0A01               	xorlw	1	; case 33
  8433  00A59C  B4D8               	btfsc	status,2,c
  8434  00A59E  D7AA               	goto	l830
  8435  00A5A0  0A03               	xorlw	3	; case 34
  8436  00A5A2  B4D8               	btfsc	status,2,c
  8437  00A5A4  D7A7               	goto	l830
  8438  00A5A6  0A01               	xorlw	1	; case 35
  8439  00A5A8  B4D8               	btfsc	status,2,c
  8440  00A5AA  D79F               	goto	l805
  8441  00A5AC  0A09               	xorlw	9	; case 42
  8442  00A5AE  B4D8               	btfsc	status,2,c
  8443  00A5B0  D79C               	goto	l805
  8444  00A5B2  0A01               	xorlw	1	; case 43
  8445  00A5B4  B4D8               	btfsc	status,2,c
  8446  00A5B6  D79E               	goto	l830
  8447  00A5B8  0A07               	xorlw	7	; case 44
  8448  00A5BA  B4D8               	btfsc	status,2,c
  8449  00A5BC  D79B               	goto	l830
  8450  00A5BE  0A01               	xorlw	1	; case 45
  8451  00A5C0  B4D8               	btfsc	status,2,c
  8452  00A5C2  D798               	goto	l830
  8453  00A5C4  D79B               	goto	l833
  8454  00A5C6                     l804:
  8455                           
  8456                           ;standbyMode.c: 395: return returnValue;
  8457  00A5C6  C005  F001         	movff	getRound@returnValue,?_getRound
  8458  00A5CA  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  8459  00A5CE  0012               	return		;funcret
  8460  00A5D0                     __end_of_getRound:
  8461                           	opt stack 0
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           postinc0	equ	0xFEE
  8469                           wreg	equ	0xFE8
  8470                           postdec1	equ	0xFE5
  8471                           plusw1	equ	0xFE3
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           plusw2	equ	0xFDB
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function _getLong *****************
  8482 ;; Defined at:
  8483 ;;		line 556 in file "standbyMode.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  code            2    0[COMRAM] unsigned int 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  returnValue     2    4[COMRAM] unsigned int 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  2    0[COMRAM] unsigned int 
  8490 ;; Registers used:
  8491 ;;		wreg, status,2, status,0
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;Total ram usage:        6 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		_standbyMode
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           	psect	text10
  8511  00A5D0                     __ptext10:
  8512                           	opt stack 0
  8513  00A5D0                     _getLong:
  8514                           	opt stack 29
  8515                           
  8516                           ;standbyMode.c: 557: unsigned int returnValue = 0;
  8517                           
  8518                           ;incstack = 0
  8519  00A5D0  0E00               	movlw	0
  8520  00A5D2  6E06               	movwf	getLong@returnValue+1,c
  8521  00A5D4  0E00               	movlw	0
  8522  00A5D6  6E05               	movwf	getLong@returnValue,c
  8523                           
  8524                           ;standbyMode.c: 559: switch(code){
  8525  00A5D8  D011               	goto	l872
  8526  00A5DA                     
  8527                           ;standbyMode.c: 577: returnValue = 1;
  8528  00A5DA  0E00               	movlw	0
  8529  00A5DC  6E06               	movwf	getLong@returnValue+1,c
  8530  00A5DE  0E01               	movlw	1
  8531  00A5E0  D007               	goto	L36
  8532  00A5E2                     l881:
  8533                           
  8534                           ;standbyMode.c: 607: returnValue = 2;
  8535                           
  8536                           ;standbyMode.c: 606: case 18:
  8537                           
  8538                           ;standbyMode.c: 603: break;
  8539                           
  8540                           ;standbyMode.c: 602: returnValue = 1;
  8541                           
  8542                           ;standbyMode.c: 601: case 17:
  8543                           
  8544                           ;standbyMode.c: 598: break;
  8545                           
  8546                           ;standbyMode.c: 597: returnValue = 2;
  8547  00A5E2  0E00               	movlw	0
  8548  00A5E4  6E06               	movwf	getLong@returnValue+1,c
  8549  00A5E6  0E02               	movlw	2
  8550  00A5E8  D003               	goto	L36
  8551  00A5EA                     l884:
  8552                           
  8553                           ;standbyMode.c: 612: returnValue = 3;
  8554  00A5EA  0E00               	movlw	0
  8555  00A5EC  6E06               	movwf	getLong@returnValue+1,c
  8556  00A5EE  0E03               	movlw	3
  8557  00A5F0                     L36:
  8558  00A5F0  6E05               	movwf	getLong@returnValue,c
  8559                           
  8560                           ;standbyMode.c: 633: break;
  8561  00A5F2  D074               	goto	l874
  8562  00A5F4                     
  8563                           ;standbyMode.c: 731: returnValue = 0;
  8564  00A5F4  0E00               	movlw	0
  8565  00A5F6  6E06               	movwf	getLong@returnValue+1,c
  8566  00A5F8  0E00               	movlw	0
  8567  00A5FA  D7FA               	goto	L36
  8568  00A5FC                     l872:
  8569  00A5FC  C001  F003         	movff	getLong@code,??_getLong
  8570  00A600  C002  F004         	movff	getLong@code+1,??_getLong+1
  8571                           
  8572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8573                           ; Switch size 1, requested type "space"
  8574                           ; Number of cases is 1, Range of values is 0 to 0
  8575                           ; switch strategies available:
  8576                           ; Name         Instructions Cycles
  8577                           ; simple_byte            4     3 (average)
  8578                           ;	Chosen strategy is simple_byte
  8579  00A604  5004               	movf	??_getLong+1,w,c
  8580  00A606  0A00               	xorlw	0	; case 0
  8581  00A608  A4D8               	btfss	status,2,c
  8582  00A60A  D7F4               	goto	l908
  8583                           
  8584                           ; Switch size 1, requested type "space"
  8585                           ; Number of cases is 34, Range of values is 5 to 46
  8586                           ; switch strategies available:
  8587                           ; Name         Instructions Cycles
  8588                           ; simple_byte          103    52 (average)
  8589                           ;	Chosen strategy is simple_byte
  8590  00A60C  5003               	movf	??_getLong,w,c
  8591  00A60E  0A05               	xorlw	5	; case 5
  8592  00A610  B4D8               	btfsc	status,2,c
  8593  00A612  D7E3               	goto	l877
  8594  00A614  0A03               	xorlw	3	; case 6
  8595  00A616  B4D8               	btfsc	status,2,c
  8596  00A618  D7E4               	goto	l881
  8597  00A61A  0A01               	xorlw	1	; case 7
  8598  00A61C  B4D8               	btfsc	status,2,c
  8599  00A61E  D7E5               	goto	l884
  8600  00A620  0A0B               	xorlw	11	; case 12
  8601  00A622  B4D8               	btfsc	status,2,c
  8602  00A624  D7DA               	goto	l877
  8603  00A626  0A01               	xorlw	1	; case 13
  8604  00A628  B4D8               	btfsc	status,2,c
  8605  00A62A  D7DB               	goto	l881
  8606  00A62C  0A03               	xorlw	3	; case 14
  8607  00A62E  B4D8               	btfsc	status,2,c
  8608  00A630  D7DC               	goto	l884
  8609  00A632  0A01               	xorlw	1	; case 15
  8610  00A634  B4D8               	btfsc	status,2,c
  8611  00A636  D7D1               	goto	l877
  8612  00A638  0A1F               	xorlw	31	; case 16
  8613  00A63A  B4D8               	btfsc	status,2,c
  8614  00A63C  D7D2               	goto	l881
  8615  00A63E  0A01               	xorlw	1	; case 17
  8616  00A640  B4D8               	btfsc	status,2,c
  8617  00A642  D7CB               	goto	l877
  8618  00A644  0A03               	xorlw	3	; case 18
  8619  00A646  B4D8               	btfsc	status,2,c
  8620  00A648  D7CC               	goto	l881
  8621  00A64A  0A01               	xorlw	1	; case 19
  8622  00A64C  B4D8               	btfsc	status,2,c
  8623  00A64E  D7CD               	goto	l884
  8624  00A650  0A07               	xorlw	7	; case 20
  8625  00A652  B4D8               	btfsc	status,2,c
  8626  00A654  D7C2               	goto	l877
  8627  00A656  0A01               	xorlw	1	; case 21
  8628  00A658  B4D8               	btfsc	status,2,c
  8629  00A65A  D7C3               	goto	l881
  8630  00A65C  0A0D               	xorlw	13	; case 24
  8631  00A65E  B4D8               	btfsc	status,2,c
  8632  00A660  D7BC               	goto	l877
  8633  00A662  0A01               	xorlw	1	; case 25
  8634  00A664  B4D8               	btfsc	status,2,c
  8635  00A666  D7BD               	goto	l881
  8636  00A668  0A05               	xorlw	5	; case 28
  8637  00A66A  B4D8               	btfsc	status,2,c
  8638  00A66C  D7BA               	goto	l881
  8639  00A66E  0A01               	xorlw	1	; case 29
  8640  00A670  B4D8               	btfsc	status,2,c
  8641  00A672  D7BB               	goto	l884
  8642  00A674  0A03               	xorlw	3	; case 30
  8643  00A676  B4D8               	btfsc	status,2,c
  8644  00A678  D7B8               	goto	l884
  8645  00A67A  0A01               	xorlw	1	; case 31
  8646  00A67C  B4D8               	btfsc	status,2,c
  8647  00A67E  D7B1               	goto	l881
  8648  00A680  0A3F               	xorlw	63	; case 32
  8649  00A682  B4D8               	btfsc	status,2,c
  8650  00A684  D7AA               	goto	l877
  8651  00A686  0A01               	xorlw	1	; case 33
  8652  00A688  B4D8               	btfsc	status,2,c
  8653  00A68A  D7AB               	goto	l881
  8654  00A68C  0A03               	xorlw	3	; case 34
  8655  00A68E  B4D8               	btfsc	status,2,c
  8656  00A690  D7A4               	goto	l877
  8657  00A692  0A01               	xorlw	1	; case 35
  8658  00A694  B4D8               	btfsc	status,2,c
  8659  00A696  D7A1               	goto	l877
  8660  00A698  0A07               	xorlw	7	; case 36
  8661  00A69A  B4D8               	btfsc	status,2,c
  8662  00A69C  D79E               	goto	l877
  8663  00A69E  0A01               	xorlw	1	; case 37
  8664  00A6A0  B4D8               	btfsc	status,2,c
  8665  00A6A2  D79F               	goto	l881
  8666  00A6A4  0A03               	xorlw	3	; case 38
  8667  00A6A6  B4D8               	btfsc	status,2,c
  8668  00A6A8  D79C               	goto	l881
  8669  00A6AA  0A01               	xorlw	1	; case 39
  8670  00A6AC  B4D8               	btfsc	status,2,c
  8671  00A6AE  D79D               	goto	l884
  8672  00A6B0  0A0F               	xorlw	15	; case 40
  8673  00A6B2  B4D8               	btfsc	status,2,c
  8674  00A6B4  D79A               	goto	l884
  8675  00A6B6  0A01               	xorlw	1	; case 41
  8676  00A6B8  B4D8               	btfsc	status,2,c
  8677  00A6BA  D793               	goto	l881
  8678  00A6BC  0A03               	xorlw	3	; case 42
  8679  00A6BE  B4D8               	btfsc	status,2,c
  8680  00A6C0  D78C               	goto	l877
  8681  00A6C2  0A01               	xorlw	1	; case 43
  8682  00A6C4  B4D8               	btfsc	status,2,c
  8683  00A6C6  D789               	goto	l877
  8684  00A6C8  0A07               	xorlw	7	; case 44
  8685  00A6CA  B4D8               	btfsc	status,2,c
  8686  00A6CC  D78A               	goto	l881
  8687  00A6CE  0A01               	xorlw	1	; case 45
  8688  00A6D0  B4D8               	btfsc	status,2,c
  8689  00A6D2  D78B               	goto	l884
  8690  00A6D4  0A03               	xorlw	3	; case 46
  8691  00A6D6  B4D8               	btfsc	status,2,c
  8692  00A6D8  D788               	goto	l884
  8693  00A6DA  D78C               	goto	l908
  8694  00A6DC                     l874:
  8695                           
  8696                           ;standbyMode.c: 734: return returnValue;
  8697  00A6DC  C005  F001         	movff	getLong@returnValue,?_getLong
  8698  00A6E0  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  8699  00A6E4  0012               	return		;funcret
  8700  00A6E6                     __end_of_getLong:
  8701                           	opt stack 0
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           prodh	equ	0xFF4
  8707                           prodl	equ	0xFF3
  8708                           postinc0	equ	0xFEE
  8709                           wreg	equ	0xFE8
  8710                           postdec1	equ	0xFE5
  8711                           plusw1	equ	0xFE3
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           plusw2	equ	0xFDB
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721 ;; *************** function _getFlat *****************
  8722 ;; Defined at:
  8723 ;;		line 399 in file "standbyMode.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  code            2    0[COMRAM] unsigned int 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  returnValue     2    4[COMRAM] unsigned int 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  2    0[COMRAM] unsigned int 
  8730 ;; Registers used:
  8731 ;;		wreg, status,2, status,0
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8741 ;;Total ram usage:        6 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		_standbyMode
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text11
  8751  00A3F0                     __ptext11:
  8752                           	opt stack 0
  8753  00A3F0                     _getFlat:
  8754                           	opt stack 29
  8755                           
  8756                           ;standbyMode.c: 400: unsigned int returnValue = 0;
  8757                           
  8758                           ;incstack = 0
  8759  00A3F0  0E00               	movlw	0
  8760  00A3F2  6E06               	movwf	getFlat@returnValue+1,c
  8761  00A3F4  0E00               	movlw	0
  8762  00A3F6  6E05               	movwf	getFlat@returnValue,c
  8763                           
  8764                           ;standbyMode.c: 402: switch(code){
  8765  00A3F8  D00D               	goto	l837
  8766  00A3FA                     
  8767                           ;standbyMode.c: 405: returnValue = 1;
  8768  00A3FA  0E00               	movlw	0
  8769  00A3FC  6E06               	movwf	getFlat@returnValue+1,c
  8770  00A3FE  0E01               	movlw	1
  8771  00A400  D003               	goto	L42
  8772  00A402                     
  8773                           ;standbyMode.c: 430: returnValue = 2;
  8774                           
  8775                           ;standbyMode.c: 429: case 11:
  8776                           
  8777                           ;standbyMode.c: 426: break;
  8778                           
  8779                           ;standbyMode.c: 425: returnValue = 1;
  8780                           
  8781                           ;standbyMode.c: 424: case 10:
  8782                           
  8783                           ;standbyMode.c: 421: break;
  8784                           
  8785                           ;standbyMode.c: 420: returnValue = 2;
  8786                           
  8787                           ;standbyMode.c: 419: case 9:
  8788                           
  8789                           ;standbyMode.c: 416: break;
  8790                           
  8791                           ;standbyMode.c: 415: returnValue = 1;
  8792                           
  8793                           ;standbyMode.c: 414: case 8:
  8794                           
  8795                           ;standbyMode.c: 411: break;
  8796                           
  8797                           ;standbyMode.c: 410: returnValue = 2;
  8798  00A402  0E00               	movlw	0
  8799  00A404  6E06               	movwf	getFlat@returnValue+1,c
  8800  00A406  0E02               	movlw	2
  8801  00A408                     L42:
  8802  00A408  6E05               	movwf	getFlat@returnValue,c
  8803                           
  8804                           ;standbyMode.c: 436: break;
  8805  00A40A  D065               	goto	l839
  8806  00A40C                     
  8807                           ;standbyMode.c: 549: returnValue = 0;
  8808  00A40C  0E00               	movlw	0
  8809  00A40E  6E06               	movwf	getFlat@returnValue+1,c
  8810  00A410  0E00               	movlw	0
  8811  00A412  D7FA               	goto	L42
  8812  00A414                     l837:
  8813  00A414  C001  F003         	movff	getFlat@code,??_getFlat
  8814  00A418  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  8815                           
  8816                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8817                           ; Switch size 1, requested type "space"
  8818                           ; Number of cases is 1, Range of values is 0 to 0
  8819                           ; switch strategies available:
  8820                           ; Name         Instructions Cycles
  8821                           ; simple_byte            4     3 (average)
  8822                           ;	Chosen strategy is simple_byte
  8823  00A41C  5004               	movf	??_getFlat+1,w,c
  8824  00A41E  0A00               	xorlw	0	; case 0
  8825  00A420  A4D8               	btfss	status,2,c
  8826  00A422  D7F4               	goto	l868
  8827                           
  8828                           ; Switch size 1, requested type "space"
  8829                           ; Number of cases is 29, Range of values is 3 to 46
  8830                           ; switch strategies available:
  8831                           ; Name         Instructions Cycles
  8832                           ; simple_byte           88    45 (average)
  8833                           ;	Chosen strategy is simple_byte
  8834  00A424  5003               	movf	??_getFlat,w,c
  8835  00A426  0A03               	xorlw	3	; case 3
  8836  00A428  B4D8               	btfsc	status,2,c
  8837  00A42A  D7E7               	goto	l838
  8838  00A42C  0A07               	xorlw	7	; case 4
  8839  00A42E  B4D8               	btfsc	status,2,c
  8840  00A430  D7E8               	goto	l840
  8841  00A432  0A0C               	xorlw	12	; case 8
  8842  00A434  B4D8               	btfsc	status,2,c
  8843  00A436  D7E1               	goto	l838
  8844  00A438  0A01               	xorlw	1	; case 9
  8845  00A43A  B4D8               	btfsc	status,2,c
  8846  00A43C  D7E2               	goto	l840
  8847  00A43E  0A03               	xorlw	3	; case 10
  8848  00A440  B4D8               	btfsc	status,2,c
  8849  00A442  D7DB               	goto	l838
  8850  00A444  0A01               	xorlw	1	; case 11
  8851  00A446  B4D8               	btfsc	status,2,c
  8852  00A448  D7DC               	goto	l840
  8853  00A44A  0A1A               	xorlw	26	; case 17
  8854  00A44C  B4D8               	btfsc	status,2,c
  8855  00A44E  D7D5               	goto	l838
  8856  00A450  0A03               	xorlw	3	; case 18
  8857  00A452  B4D8               	btfsc	status,2,c
  8858  00A454  D7D2               	goto	l838
  8859  00A456  0A01               	xorlw	1	; case 19
  8860  00A458  B4D8               	btfsc	status,2,c
  8861  00A45A  D7CF               	goto	l838
  8862  00A45C  0A07               	xorlw	7	; case 20
  8863  00A45E  B4D8               	btfsc	status,2,c
  8864  00A460  D7D0               	goto	l840
  8865  00A462  0A01               	xorlw	1	; case 21
  8866  00A464  B4D8               	btfsc	status,2,c
  8867  00A466  D7CD               	goto	l840
  8868  00A468  0A03               	xorlw	3	; case 22
  8869  00A46A  B4D8               	btfsc	status,2,c
  8870  00A46C  D7C6               	goto	l838
  8871  00A46E  0A01               	xorlw	1	; case 23
  8872  00A470  B4D8               	btfsc	status,2,c
  8873  00A472  D7C7               	goto	l840
  8874  00A474  0A0D               	xorlw	13	; case 26
  8875  00A476  B4D8               	btfsc	status,2,c
  8876  00A478  D7C4               	goto	l840
  8877  00A47A  0A01               	xorlw	1	; case 27
  8878  00A47C  B4D8               	btfsc	status,2,c
  8879  00A47E  D7C1               	goto	l840
  8880  00A480  0A3B               	xorlw	59	; case 32
  8881  00A482  B4D8               	btfsc	status,2,c
  8882  00A484  D7BA               	goto	l838
  8883  00A486  0A01               	xorlw	1	; case 33
  8884  00A488  B4D8               	btfsc	status,2,c
  8885  00A48A  D7B7               	goto	l838
  8886  00A48C  0A03               	xorlw	3	; case 34
  8887  00A48E  B4D8               	btfsc	status,2,c
  8888  00A490  D7B8               	goto	l840
  8889  00A492  0A01               	xorlw	1	; case 35
  8890  00A494  B4D8               	btfsc	status,2,c
  8891  00A496  D7B1               	goto	l838
  8892  00A498  0A07               	xorlw	7	; case 36
  8893  00A49A  B4D8               	btfsc	status,2,c
  8894  00A49C  D7B2               	goto	l840
  8895  00A49E  0A01               	xorlw	1	; case 37
  8896  00A4A0  B4D8               	btfsc	status,2,c
  8897  00A4A2  D7AF               	goto	l840
  8898  00A4A4  0A03               	xorlw	3	; case 38
  8899  00A4A6  B4D8               	btfsc	status,2,c
  8900  00A4A8  D7A8               	goto	l838
  8901  00A4AA  0A01               	xorlw	1	; case 39
  8902  00A4AC  B4D8               	btfsc	status,2,c
  8903  00A4AE  D7A5               	goto	l838
  8904  00A4B0  0A0F               	xorlw	15	; case 40
  8905  00A4B2  B4D8               	btfsc	status,2,c
  8906  00A4B4  D7A2               	goto	l838
  8907  00A4B6  0A01               	xorlw	1	; case 41
  8908  00A4B8  B4D8               	btfsc	status,2,c
  8909  00A4BA  D7A3               	goto	l840
  8910  00A4BC  0A03               	xorlw	3	; case 42
  8911  00A4BE  B4D8               	btfsc	status,2,c
  8912  00A4C0  D79C               	goto	l838
  8913  00A4C2  0A01               	xorlw	1	; case 43
  8914  00A4C4  B4D8               	btfsc	status,2,c
  8915  00A4C6  D79D               	goto	l840
  8916  00A4C8  0A07               	xorlw	7	; case 44
  8917  00A4CA  B4D8               	btfsc	status,2,c
  8918  00A4CC  D796               	goto	l838
  8919  00A4CE  0A02               	xorlw	2	; case 46
  8920  00A4D0  B4D8               	btfsc	status,2,c
  8921  00A4D2  D793               	goto	l838
  8922  00A4D4  D79B               	goto	l868
  8923  00A4D6                     l839:
  8924                           
  8925                           ;standbyMode.c: 552: return returnValue;
  8926  00A4D6  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8927  00A4DA  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8928  00A4DE  0012               	return		;funcret
  8929  00A4E0                     __end_of_getFlat:
  8930                           	opt stack 0
  8931                           tblptru	equ	0xFF8
  8932                           tblptrh	equ	0xFF7
  8933                           tblptrl	equ	0xFF6
  8934                           tablat	equ	0xFF5
  8935                           prodh	equ	0xFF4
  8936                           prodl	equ	0xFF3
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           plusw1	equ	0xFE3
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           plusw2	equ	0xFDB
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _food_press *****************
  8951 ;; Defined at:
  8952 ;;		line 1135 in file "standbyMode.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  dietSum         2   40[COMRAM] unsigned int 
  8955 ;;  drawer          2   42[COMRAM] unsigned int 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  keypress        1   54[COMRAM] unsigned char 
  8958 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8959 ;;  count           2   52[COMRAM] unsigned int 
  8960 ;;  isValid         2   50[COMRAM] unsigned int 
  8961 ;;  backCheck       2   48[COMRAM] unsigned int 
  8962 ;;  tally           2   46[COMRAM] unsigned int 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  2   40[COMRAM] unsigned int 
  8965 ;; Registers used:
  8966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;Total ram usage:       23 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    3
  8979 ;; This function calls:
  8980 ;;		_check_food
  8981 ;;		_get_digits
  8982 ;;		_lcdInst
  8983 ;;		_printf
  8984 ;;		_putch
  8985 ;; This function is called by:
  8986 ;;		_standbyMode
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text12
  8991  00B16E                     __ptext12:
  8992                           	opt stack 0
  8993  00B16E                     _food_press:
  8994                           	opt stack 26
  8995                           
  8996                           ;incstack = 0
  8997                           ;standbyMode.c: 1137: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8998  00B16E  0E01               	movlw	1
  8999  00B170  ECDF  F04B         	call	_lcdInst
  9000  00B174  0EC3               	movlw	195
  9001  00B176  6E2D               	movwf	??_food_press& (0+255),c
  9002  00B178  0ECD               	movlw	205
  9003  00B17A                     u14977:
  9004  00B17A  2EE8               	decfsz	wreg,f,c
  9005  00B17C  D7FE               	bra	u14977
  9006  00B17E  2E2D               	decfsz	??_food_press& (0+255),f,c
  9007  00B180  D7FC               	bra	u14977
  9008  00B182  F000               	nop	
  9009                           
  9010                           ;standbyMode.c: 1138: printf("Drawer %i food:", drawer);
  9011  00B184  0E20               	movlw	low STR_105
  9012  00B186  6E0D               	movwf	printf@f,c
  9013  00B188  0EFA               	movlw	high STR_105
  9014  00B18A  6E0E               	movwf	printf@f+1,c
  9015  00B18C  C02B  F00F         	movff	food_press@drawer,?_printf+2
  9016  00B190  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  9017  00B194  ECBD  F05F         	call	_printf	;wreg free
  9018                           
  9019                           ;standbyMode.c: 1139: lcdInst(0xC0);;
  9020  00B198  0EC0               	movlw	192
  9021  00B19A  ECDF  F04B         	call	_lcdInst
  9022                           
  9023                           ;standbyMode.c: 1141: unsigned int tally = 0;
  9024  00B19E  0E00               	movlw	0
  9025  00B1A0  6E30               	movwf	food_press@tally+1,c
  9026  00B1A2  0E00               	movlw	0
  9027  00B1A4  6E2F               	movwf	food_press@tally,c
  9028                           
  9029                           ;standbyMode.c: 1142: unsigned int count = 0;
  9030  00B1A6  0E00               	movlw	0
  9031  00B1A8  6E36               	movwf	food_press@count+1,c
  9032  00B1AA  0E00               	movlw	0
  9033  00B1AC  6E35               	movwf	food_press@count,c
  9034                           
  9035                           ;standbyMode.c: 1143: unsigned int foodTable[4] = {0, 0, 0, 0};
  9036  00B1AE  EE20  F0D0         	lfsr	2,food_press@F3117
  9037  00B1B2  EE10  F038         	lfsr	1,food_press@foodTable
  9038  00B1B6  0E07               	movlw	7
  9039  00B1B8                     u12011:
  9040  00B1B8  CFDB FFE3          	movff	plusw2,plusw1
  9041  00B1BC  06E8               	decf	wreg,f,c
  9042  00B1BE  E2FC               	bc	u12011
  9043                           
  9044                           ;standbyMode.c: 1144: unsigned int isValid = 0;
  9045  00B1C0  0E00               	movlw	0
  9046  00B1C2  6E34               	movwf	food_press@isValid+1,c
  9047  00B1C4  0E00               	movlw	0
  9048  00B1C6  6E33               	movwf	food_press@isValid,c
  9049                           
  9050                           ;standbyMode.c: 1145: unsigned int backCheck = 0;
  9051  00B1C8  0E00               	movlw	0
  9052  00B1CA  6E32               	movwf	food_press@backCheck+1,c
  9053  00B1CC  0E00               	movlw	0
  9054  00B1CE  6E31               	movwf	food_press@backCheck,c
  9055                           
  9056                           ;standbyMode.c: 1146: tally = get_digits(dietSum);
  9057  00B1D0  C029  F001         	movff	food_press@dietSum,get_digits@sum
  9058  00B1D4  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  9059  00B1D8  ECC2  F050         	call	_get_digits	;wreg free
  9060  00B1DC  C001  F02F         	movff	?_get_digits,food_press@tally
  9061  00B1E0  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  9062  00B1E4                     
  9063                           ;standbyMode.c: 1149: while(PORTBbits.RB1 == 0){ continue; }
  9064  00B1E4  A281               	btfss	3969,1,c	;volatile
  9065  00B1E6  D7FE               	goto	l1063
  9066                           
  9067                           ;standbyMode.c: 1150: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9068  00B1E8  3881               	swapf	3969,w,c	;volatile
  9069  00B1EA  0B0F               	andlw	15
  9070  00B1EC  0B0F               	andlw	15
  9071  00B1EE  6E37               	movwf	food_press@keypress,c
  9072  00B1F0  B281               	btfsc	3969,1,c	;volatile
  9073  00B1F2  D7FE               	goto	l1068
  9074                           
  9075                           ;standbyMode.c: 1153: if(keypress == 15){
  9076  00B1F4  0E0F               	movlw	15
  9077  00B1F6  1837               	xorwf	food_press@keypress,w,c
  9078  00B1F8  B4D8               	btfsc	status,2,c
  9079  00B1FA  D070               	goto	l1071
  9080                           
  9081                           ;standbyMode.c: 1156: else if (keypress == 14){
  9082                           
  9083                           ;standbyMode.c: 1155: }
  9084                           
  9085                           ;standbyMode.c: 1154: break;
  9086  00B1FC  0E0E               	movlw	14
  9087  00B1FE  1837               	xorwf	food_press@keypress,w,c
  9088  00B200  A4D8               	btfss	status,2,c
  9089  00B202  D005               	goto	l1073
  9090                           
  9091                           ;standbyMode.c: 1157: backCheck = 1;
  9092  00B204  0E00               	movlw	0
  9093  00B206  6E32               	movwf	food_press@backCheck+1,c
  9094  00B208  0E01               	movlw	1
  9095  00B20A  6E31               	movwf	food_press@backCheck,c
  9096                           
  9097                           ;standbyMode.c: 1158: break;
  9098  00B20C  D067               	goto	l1071
  9099  00B20E                     l1073:
  9100                           
  9101                           ;standbyMode.c: 1160: else if (keypress == 0 || keypress == 1 || keypress == 2){
  9102  00B20E  5037               	movf	food_press@keypress,w,c
  9103  00B210  B4D8               	btfsc	status,2,c
  9104  00B212  D007               	goto	u12080
  9105  00B214  0437               	decf	food_press@keypress,w,c
  9106  00B216  B4D8               	btfsc	status,2,c
  9107  00B218  D004               	goto	u12080
  9108  00B21A  0E02               	movlw	2
  9109  00B21C  1837               	xorwf	food_press@keypress,w,c
  9110  00B21E  A4D8               	btfss	status,2,c
  9111  00B220  D02C               	goto	l1075
  9112  00B222                     u12080:
  9113                           
  9114                           ;standbyMode.c: 1161: if (count < tally){
  9115  00B222  502F               	movf	food_press@tally,w,c
  9116  00B224  5C35               	subwf	food_press@count,w,c
  9117  00B226  5030               	movf	food_press@tally+1,w,c
  9118  00B228  5836               	subwfb	food_press@count+1,w,c
  9119  00B22A  B0D8               	btfsc	status,0,c
  9120  00B22C  D7DB               	goto	l1063
  9121                           
  9122                           ;standbyMode.c: 1162: putch(input[keypress]);
  9123  00B22E  5037               	movf	food_press@keypress,w,c
  9124  00B230  0D01               	mullw	1
  9125  00B232  0E36               	movlw	low _input
  9126  00B234  24F3               	addwf	prodl,w,c
  9127  00B236  6EF6               	movwf	tblptrl,c
  9128  00B238  0EF9               	movlw	high _input
  9129  00B23A  20F4               	addwfc	prodh,w,c
  9130  00B23C  6EF7               	movwf	tblptrh,c
  9131  00B23E                     	if	1	;There are 3 active tblptr bytes
  9132  00B23E  6AF8               	clrf	tblptru,c
  9133  00B240  0E00               	movlw	low (__mediumconst shr (0+16))
  9134  00B242  22F8               	addwfc	tblptru,f,c
  9135  00B244                     	endif
  9136  00B244  0008               	tblrd		*
  9137  00B246  50F5               	movf	tablat,w,c
  9138  00B248  ECF3  F04B         	call	_putch
  9139                           
  9140                           ;standbyMode.c: 1163: foodTable[count] = keypress + 1;
  9141  00B24C  5037               	movf	food_press@keypress,w,c
  9142  00B24E  6E2D               	movwf	??_food_press& (0+255),c
  9143  00B250  6A2E               	clrf	(??_food_press+1)& (0+255),c
  9144  00B252  0E01               	movlw	1
  9145  00B254  262D               	addwf	??_food_press,f,c
  9146  00B256  0E00               	movlw	0
  9147  00B258  222E               	addwfc	??_food_press+1,f,c
  9148  00B25A  90D8               	bcf	status,0,c
  9149  00B25C  3435               	rlcf	food_press@count,w,c
  9150  00B25E  6ED9               	movwf	fsr2l,c
  9151  00B260  3436               	rlcf	food_press@count+1,w,c
  9152  00B262  6EDA               	movwf	fsr2h,c
  9153  00B264  0E38               	movlw	low food_press@foodTable
  9154  00B266  26D9               	addwf	fsr2l,f,c
  9155  00B268  0E00               	movlw	high food_press@foodTable
  9156  00B26A  22DA               	addwfc	fsr2h,f,c
  9157  00B26C  C02D  FFDE         	movff	??_food_press,postinc2
  9158  00B270  C02E  FFDD         	movff	??_food_press+1,postdec2
  9159                           
  9160                           ;standbyMode.c: 1164: count += 1;
  9161  00B274  4A35               	infsnz	food_press@count,f,c
  9162  00B276  2A36               	incf	food_press@count+1,f,c
  9163                           
  9164                           ;standbyMode.c: 1165: }
  9165                           ;standbyMode.c: 1166: }
  9166  00B278  D7B5               	goto	l1063
  9167  00B27A                     l1075:
  9168                           
  9169                           ;standbyMode.c: 1167: else if (keypress == 12){
  9170  00B27A  0E0C               	movlw	12
  9171  00B27C  1837               	xorwf	food_press@keypress,w,c
  9172  00B27E  A4D8               	btfss	status,2,c
  9173  00B280  D7B1               	goto	l1063
  9174                           
  9175                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9176  00B282  0E01               	movlw	1
  9177  00B284  ECDF  F04B         	call	_lcdInst
  9178  00B288  0EC3               	movlw	195
  9179  00B28A  6E2D               	movwf	??_food_press& (0+255),c
  9180  00B28C  0ECD               	movlw	205
  9181  00B28E                     u14987:
  9182  00B28E  2EE8               	decfsz	wreg,f,c
  9183  00B290  D7FE               	bra	u14987
  9184  00B292  2E2D               	decfsz	??_food_press& (0+255),f,c
  9185  00B294  D7FC               	bra	u14987
  9186  00B296  F000               	nop	
  9187                           
  9188                           ;standbyMode.c: 1169: printf("Drawer %i food:", drawer);
  9189  00B298  0E20               	movlw	low STR_105
  9190  00B29A  6E0D               	movwf	printf@f,c
  9191  00B29C  0EFA               	movlw	high STR_105
  9192  00B29E  6E0E               	movwf	printf@f+1,c
  9193  00B2A0  C02B  F00F         	movff	food_press@drawer,?_printf+2
  9194  00B2A4  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  9195  00B2A8  ECBD  F05F         	call	_printf	;wreg free
  9196                           
  9197                           ;standbyMode.c: 1170: lcdInst(0xC0);;
  9198  00B2AC  0EC0               	movlw	192
  9199  00B2AE  ECDF  F04B         	call	_lcdInst
  9200                           
  9201                           ;standbyMode.c: 1171: count = 0;
  9202  00B2B2  0E00               	movlw	0
  9203  00B2B4  6E36               	movwf	food_press@count+1,c
  9204  00B2B6  0E00               	movlw	0
  9205  00B2B8  6E35               	movwf	food_press@count,c
  9206                           
  9207                           ;standbyMode.c: 1172: foodTable[0] = 0;
  9208  00B2BA  0E00               	movlw	0
  9209  00B2BC  6E39               	movwf	food_press@foodTable+1,c
  9210  00B2BE  0E00               	movlw	0
  9211  00B2C0  6E38               	movwf	food_press@foodTable,c
  9212                           
  9213                           ;standbyMode.c: 1173: foodTable[1] = 0;
  9214  00B2C2  0E00               	movlw	0
  9215  00B2C4  6E3B               	movwf	food_press@foodTable+3,c
  9216  00B2C6  0E00               	movlw	0
  9217  00B2C8  6E3A               	movwf	food_press@foodTable+2,c
  9218                           
  9219                           ;standbyMode.c: 1174: foodTable[2] = 0;
  9220  00B2CA  0E00               	movlw	0
  9221  00B2CC  6E3D               	movwf	food_press@foodTable+5,c
  9222  00B2CE  0E00               	movlw	0
  9223  00B2D0  6E3C               	movwf	food_press@foodTable+4,c
  9224                           
  9225                           ;standbyMode.c: 1175: foodTable[3] = 0;
  9226  00B2D2  0E00               	movlw	0
  9227  00B2D4  6E3F               	movwf	food_press@foodTable+7,c
  9228  00B2D6  0E00               	movlw	0
  9229  00B2D8  6E3E               	movwf	food_press@foodTable+6,c
  9230  00B2DA  D784               	goto	l1063
  9231  00B2DC                     l1071:
  9232                           
  9233                           ;standbyMode.c: 1176: }
  9234                           ;standbyMode.c: 1177: }
  9235                           ;standbyMode.c: 1179: if (backCheck == 1){
  9236  00B2DC  0431               	decf	food_press@backCheck,w,c
  9237  00B2DE  1032               	iorwf	food_press@backCheck+1,w,c
  9238  00B2E0  A4D8               	btfss	status,2,c
  9239  00B2E2  D005               	goto	l1082
  9240                           
  9241                           ;standbyMode.c: 1180: return 100;
  9242  00B2E4  0E00               	movlw	0
  9243  00B2E6  6E2A               	movwf	?_food_press+1,c
  9244  00B2E8  0E64               	movlw	100
  9245  00B2EA  6E29               	movwf	?_food_press,c
  9246                           
  9247                           ;standbyMode.c: 1181: }
  9248  00B2EC  0012               	return	
  9249  00B2EE                     l1082:
  9250                           
  9251                           ;standbyMode.c: 1182: else {
  9252                           ;standbyMode.c: 1183: isValid = check_food(dietSum, foodTable);
  9253  00B2EE  C029  F001         	movff	food_press@dietSum,check_food@sum
  9254  00B2F2  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  9255  00B2F6  0E38               	movlw	low food_press@foodTable
  9256  00B2F8  6E03               	movwf	check_food@foodInput,c
  9257  00B2FA  0E00               	movlw	high food_press@foodTable
  9258  00B2FC  6E04               	movwf	check_food@foodInput+1,c
  9259  00B2FE  EC4E  F06A         	call	_check_food	;wreg free
  9260  00B302  C001  F033         	movff	?_check_food,food_press@isValid
  9261  00B306  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  9262                           
  9263                           ;standbyMode.c: 1185: if (isValid == 0){
  9264  00B30A  5033               	movf	food_press@isValid,w,c
  9265  00B30C  1034               	iorwf	food_press@isValid+1,w,c
  9266  00B30E  A4D8               	btfss	status,2,c
  9267  00B310  D026               	goto	l1085
  9268                           
  9269                           ;standbyMode.c: 1186: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9270  00B312  0E01               	movlw	1
  9271  00B314  ECDF  F04B         	call	_lcdInst
  9272  00B318  0EC3               	movlw	195
  9273  00B31A  6E2D               	movwf	??_food_press& (0+255),c
  9274  00B31C  0ECD               	movlw	205
  9275  00B31E                     u14997:
  9276  00B31E  2EE8               	decfsz	wreg,f,c
  9277  00B320  D7FE               	bra	u14997
  9278  00B322  2E2D               	decfsz	??_food_press& (0+255),f,c
  9279  00B324  D7FC               	bra	u14997
  9280  00B326  F000               	nop	
  9281                           
  9282                           ;standbyMode.c: 1187: printf("Invalid food!");
  9283  00B328  0E55               	movlw	low STR_107
  9284  00B32A  6E0D               	movwf	printf@f,c
  9285  00B32C  0EFB               	movlw	high STR_107
  9286  00B32E  6E0E               	movwf	printf@f+1,c
  9287  00B330  ECBD  F05F         	call	_printf	;wreg free
  9288                           
  9289                           ;standbyMode.c: 1188: lcdInst(0xC0);;
  9290  00B334  0EC0               	movlw	192
  9291  00B336  ECDF  F04B         	call	_lcdInst
  9292                           
  9293                           ;standbyMode.c: 1189: printf("Try again.");
  9294  00B33A  0EFD               	movlw	low STR_108
  9295  00B33C  6E0D               	movwf	printf@f,c
  9296  00B33E  0EFB               	movlw	high STR_108
  9297  00B340  6E0E               	movwf	printf@f+1,c
  9298  00B342  ECBD  F05F         	call	_printf	;wreg free
  9299                           
  9300                           ;standbyMode.c: 1190: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9301  00B346  0E33               	movlw	51
  9302  00B348  6E2E               	movwf	(??_food_press+1)& (0+255),c
  9303  00B34A  0EBB               	movlw	187
  9304  00B34C  6E2D               	movwf	??_food_press& (0+255),c
  9305  00B34E  0EE0               	movlw	224
  9306  00B350                     u15007:
  9307  00B350  2EE8               	decfsz	wreg,f,c
  9308  00B352  D7FE               	bra	u15007
  9309  00B354  2E2D               	decfsz	??_food_press& (0+255),f,c
  9310  00B356  D7FC               	bra	u15007
  9311  00B358  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  9312  00B35A  D7FA               	bra	u15007
  9313                           
  9314                           ;standbyMode.c: 1191: goto START;
  9315  00B35C  D708               	goto	_food_press
  9316  00B35E                     l1085:
  9317                           
  9318                           ;standbyMode.c: 1193: else {
  9319                           ;standbyMode.c: 1194: return isValid;
  9320  00B35E  C033  F029         	movff	food_press@isValid,?_food_press
  9321  00B362  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  9322  00B366  0012               	return	
  9323  00B368                     __end_of_food_press:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           postinc0	equ	0xFEE
  9332                           wreg	equ	0xFE8
  9333                           postdec1	equ	0xFE5
  9334                           plusw1	equ	0xFE3
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           plusw2	equ	0xFDB
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _get_digits *****************
  9345 ;; Defined at:
  9346 ;;		line 1030 in file "standbyMode.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  sum             2    0[COMRAM] unsigned int 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  count           2    4[COMRAM] unsigned int 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  2    0[COMRAM] unsigned int 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;Total ram usage:        6 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; This function calls:
  9367 ;;		Nothing
  9368 ;; This function is called by:
  9369 ;;		_food_press
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           	psect	text13
  9374  00A184                     __ptext13:
  9375                           	opt stack 0
  9376  00A184                     _get_digits:
  9377                           	opt stack 28
  9378                           
  9379                           ;standbyMode.c: 1032: unsigned int count = 0;
  9380                           
  9381                           ;incstack = 0
  9382  00A184  0E00               	movlw	0
  9383  00A186  6E06               	movwf	get_digits@count+1,c
  9384  00A188  0E00               	movlw	0
  9385  00A18A  6E05               	movwf	get_digits@count,c
  9386                           
  9387                           ;standbyMode.c: 1034: switch(sum){
  9388  00A18C  D015               	goto	l1036
  9389  00A18E                     
  9390                           ;standbyMode.c: 1047: count = 1;
  9391                           
  9392                           ;standbyMode.c: 1046: case 12:
  9393                           
  9394                           ;standbyMode.c: 1043: break;
  9395                           
  9396                           ;standbyMode.c: 1042: count = 1;
  9397                           
  9398                           ;standbyMode.c: 1041: case 7:
  9399                           
  9400                           ;standbyMode.c: 1038: break;
  9401                           
  9402                           ;standbyMode.c: 1037: count = 1;
  9403  00A18E  0E00               	movlw	0
  9404  00A190  6E06               	movwf	get_digits@count+1,c
  9405  00A192  0E01               	movlw	1
  9406  00A194                     L43:
  9407  00A194  6E05               	movwf	get_digits@count,c
  9408                           
  9409                           ;standbyMode.c: 1053: break;
  9410  00A196  D050               	goto	l1038
  9411  00A198                     
  9412                           ;standbyMode.c: 1062: count = 2;
  9413                           
  9414                           ;standbyMode.c: 1061: case 19:
  9415                           
  9416                           ;standbyMode.c: 1058: break;
  9417                           
  9418                           ;standbyMode.c: 1057: count = 2;
  9419  00A198  0E00               	movlw	0
  9420  00A19A  6E06               	movwf	get_digits@count+1,c
  9421  00A19C  0E02               	movlw	2
  9422  00A19E  D7FA               	goto	L43
  9423  00A1A0                     
  9424                           ;standbyMode.c: 1097: count = 3;
  9425                           
  9426                           ;standbyMode.c: 1096: case 31:
  9427                           
  9428                           ;standbyMode.c: 1093: break;
  9429                           
  9430                           ;standbyMode.c: 1092: count = 3;
  9431                           
  9432                           ;standbyMode.c: 1091: case 26:
  9433                           
  9434                           ;standbyMode.c: 1088: break;
  9435                           
  9436                           ;standbyMode.c: 1087: count = 3;
  9437                           
  9438                           ;standbyMode.c: 1086: case 22:
  9439                           
  9440                           ;standbyMode.c: 1083: break;
  9441                           
  9442                           ;standbyMode.c: 1082: count = 3;
  9443                           
  9444                           ;standbyMode.c: 1081: case 27:
  9445                           
  9446                           ;standbyMode.c: 1078: break;
  9447                           
  9448                           ;standbyMode.c: 1077: count = 3;
  9449                           
  9450                           ;standbyMode.c: 1076: case 17:
  9451                           
  9452                           ;standbyMode.c: 1073: break;
  9453                           
  9454                           ;standbyMode.c: 1072: count = 3;
  9455                           
  9456                           ;standbyMode.c: 1071: case 18:
  9457                           
  9458                           ;standbyMode.c: 1068: break;
  9459                           
  9460                           ;standbyMode.c: 1067: count = 3;
  9461  00A1A0  0E00               	movlw	0
  9462  00A1A2  6E06               	movwf	get_digits@count+1,c
  9463  00A1A4  0E03               	movlw	3
  9464  00A1A6  D7F6               	goto	L43
  9465  00A1A8                     
  9466                           ;standbyMode.c: 1122: count = 4;
  9467                           
  9468                           ;standbyMode.c: 1121: case 43:
  9469                           
  9470                           ;standbyMode.c: 1118: break;
  9471                           
  9472                           ;standbyMode.c: 1117: count = 4;
  9473                           
  9474                           ;standbyMode.c: 1116: case 39:
  9475                           
  9476                           ;standbyMode.c: 1113: break;
  9477                           
  9478                           ;standbyMode.c: 1112: count = 4;
  9479                           
  9480                           ;standbyMode.c: 1111: case 34:
  9481                           
  9482                           ;standbyMode.c: 1108: break;
  9483                           
  9484                           ;standbyMode.c: 1107: count = 4;
  9485                           
  9486                           ;standbyMode.c: 1106: case 29:
  9487                           
  9488                           ;standbyMode.c: 1103: break;
  9489                           
  9490                           ;standbyMode.c: 1102: count = 4;
  9491  00A1A8  0E00               	movlw	0
  9492  00A1AA  6E06               	movwf	get_digits@count+1,c
  9493  00A1AC  0E04               	movlw	4
  9494  00A1AE  D7F2               	goto	L43
  9495  00A1B0                     
  9496                           ;standbyMode.c: 1127: count = 0;
  9497  00A1B0  0E00               	movlw	0
  9498  00A1B2  6E06               	movwf	get_digits@count+1,c
  9499  00A1B4  0E00               	movlw	0
  9500  00A1B6  D7EE               	goto	L43
  9501  00A1B8                     l1036:
  9502  00A1B8  C001  F003         	movff	get_digits@sum,??_get_digits
  9503  00A1BC  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  9504                           
  9505                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9506                           ; Switch size 1, requested type "space"
  9507                           ; Number of cases is 1, Range of values is 0 to 0
  9508                           ; switch strategies available:
  9509                           ; Name         Instructions Cycles
  9510                           ; simple_byte            4     3 (average)
  9511                           ;	Chosen strategy is simple_byte
  9512  00A1C0  5004               	movf	??_get_digits+1,w,c
  9513  00A1C2  0A00               	xorlw	0	; case 0
  9514  00A1C4  A4D8               	btfss	status,2,c
  9515  00A1C6  D7F4               	goto	l1056
  9516                           
  9517                           ; Switch size 1, requested type "space"
  9518                           ; Number of cases is 18, Range of values is 3 to 43
  9519                           ; switch strategies available:
  9520                           ; Name         Instructions Cycles
  9521                           ; simple_byte           55    28 (average)
  9522                           ;	Chosen strategy is simple_byte
  9523  00A1C8  5003               	movf	??_get_digits,w,c
  9524  00A1CA  0A03               	xorlw	3	; case 3
  9525  00A1CC  B4D8               	btfsc	status,2,c
  9526  00A1CE  D7DF               	goto	l1037
  9527  00A1D0  0A04               	xorlw	4	; case 7
  9528  00A1D2  B4D8               	btfsc	status,2,c
  9529  00A1D4  D7DC               	goto	l1037
  9530  00A1D6  0A0D               	xorlw	13	; case 10
  9531  00A1D8  B4D8               	btfsc	status,2,c
  9532  00A1DA  D7DE               	goto	l1042
  9533  00A1DC  0A06               	xorlw	6	; case 12
  9534  00A1DE  B4D8               	btfsc	status,2,c
  9535  00A1E0  D7D6               	goto	l1037
  9536  00A1E2  0A01               	xorlw	1	; case 13
  9537  00A1E4  B4D8               	btfsc	status,2,c
  9538  00A1E6  D7DC               	goto	l1044
  9539  00A1E8  0A02               	xorlw	2	; case 15
  9540  00A1EA  B4D8               	btfsc	status,2,c
  9541  00A1EC  D7D5               	goto	l1042
  9542  00A1EE  0A1E               	xorlw	30	; case 17
  9543  00A1F0  B4D8               	btfsc	status,2,c
  9544  00A1F2  D7D6               	goto	l1044
  9545  00A1F4  0A03               	xorlw	3	; case 18
  9546  00A1F6  B4D8               	btfsc	status,2,c
  9547  00A1F8  D7D3               	goto	l1044
  9548  00A1FA  0A01               	xorlw	1	; case 19
  9549  00A1FC  B4D8               	btfsc	status,2,c
  9550  00A1FE  D7CC               	goto	l1042
  9551  00A200  0A05               	xorlw	5	; case 22
  9552  00A202  B4D8               	btfsc	status,2,c
  9553  00A204  D7CD               	goto	l1044
  9554  00A206  0A0F               	xorlw	15	; case 25
  9555  00A208  B4D8               	btfsc	status,2,c
  9556  00A20A  D7CE               	goto	l1051
  9557  00A20C  0A03               	xorlw	3	; case 26
  9558  00A20E  B4D8               	btfsc	status,2,c
  9559  00A210  D7C7               	goto	l1044
  9560  00A212  0A01               	xorlw	1	; case 27
  9561  00A214  B4D8               	btfsc	status,2,c
  9562  00A216  D7C4               	goto	l1044
  9563  00A218  0A06               	xorlw	6	; case 29
  9564  00A21A  B4D8               	btfsc	status,2,c
  9565  00A21C  D7C5               	goto	l1051
  9566  00A21E  0A02               	xorlw	2	; case 31
  9567  00A220  B4D8               	btfsc	status,2,c
  9568  00A222  D7BE               	goto	l1044
  9569  00A224  0A3D               	xorlw	61	; case 34
  9570  00A226  B4D8               	btfsc	status,2,c
  9571  00A228  D7BF               	goto	l1051
  9572  00A22A  0A05               	xorlw	5	; case 39
  9573  00A22C  B4D8               	btfsc	status,2,c
  9574  00A22E  D7BC               	goto	l1051
  9575  00A230  0A0C               	xorlw	12	; case 43
  9576  00A232  B4D8               	btfsc	status,2,c
  9577  00A234  D7B9               	goto	l1051
  9578  00A236  D7BC               	goto	l1056
  9579  00A238                     l1038:
  9580                           
  9581                           ;standbyMode.c: 1130: return count;
  9582  00A238  C005  F001         	movff	get_digits@count,?_get_digits
  9583  00A23C  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  9584  00A240  0012               	return		;funcret
  9585  00A242                     __end_of_get_digits:
  9586                           	opt stack 0
  9587                           tblptru	equ	0xFF8
  9588                           tblptrh	equ	0xFF7
  9589                           tblptrl	equ	0xFF6
  9590                           tablat	equ	0xFF5
  9591                           prodh	equ	0xFF4
  9592                           prodl	equ	0xFF3
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           postdec1	equ	0xFE5
  9596                           plusw1	equ	0xFE3
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           plusw2	equ	0xFDB
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _check_food *****************
  9607 ;; Defined at:
  9608 ;;		line 21 in file "standbyMode.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  sum             2    0[COMRAM] unsigned int 
  9611 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  9612 ;;		 -> food_press@foodTable(8), 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  returnValue     2    6[COMRAM] unsigned int 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  2    0[COMRAM] unsigned int 
  9617 ;; Registers used:
  9618 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        8 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_food_press
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text14
  9638  00D49C                     __ptext14:
  9639                           	opt stack 0
  9640  00D49C                     _check_food:
  9641                           	opt stack 28
  9642                           
  9643                           ;standbyMode.c: 22: unsigned int returnValue = 0;
  9644                           
  9645                           ;incstack = 0
  9646  00D49C  0E00               	movlw	0
  9647  00D49E  6E08               	movwf	check_food@returnValue+1,c
  9648  00D4A0  0E00               	movlw	0
  9649  00D4A2  6E07               	movwf	check_food@returnValue,c
  9650                           
  9651                           ;standbyMode.c: 24: switch(sum){
  9652  00D4A4  EF63  F06F         	goto	l704
  9653  00D4A8                     
  9654                           ;standbyMode.c: 27: if (foodInput[0] == 1){
  9655  00D4A8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9656  00D4AC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9657  00D4B0  04DE               	decf	postinc2,w,c
  9658  00D4B2  10DE               	iorwf	postinc2,w,c
  9659  00D4B4  A4D8               	btfss	status,2,c
  9660  00D4B6  D005               	goto	l706
  9661                           
  9662                           ;standbyMode.c: 28: returnValue = 1;
  9663  00D4B8  0E00               	movlw	0
  9664  00D4BA  6E08               	movwf	check_food@returnValue+1,c
  9665  00D4BC  0E01               	movlw	1
  9666  00D4BE  EF61  F06F         	goto	L88
  9667  00D4C2                     l706:
  9668                           
  9669                           ;standbyMode.c: 30: else if (foodInput[0] == 2){
  9670  00D4C2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9671  00D4C6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9672  00D4CA  0E02               	movlw	2
  9673  00D4CC  18DE               	xorwf	postinc2,w,c
  9674  00D4CE  10DE               	iorwf	postinc2,w,c
  9675  00D4D0  A4D8               	btfss	status,2,c
  9676  00D4D2  EFA7  F06F         	goto	l709
  9677                           
  9678                           ;standbyMode.c: 31: returnValue = 2;
  9679  00D4D6  0E00               	movlw	0
  9680  00D4D8  6E08               	movwf	check_food@returnValue+1,c
  9681  00D4DA  0E02               	movlw	2
  9682  00D4DC  EF61  F06F         	goto	L88
  9683  00D4E0                     
  9684                           ;standbyMode.c: 37: if (foodInput[0] == 1){
  9685  00D4E0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9686  00D4E4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9687  00D4E8  04DE               	decf	postinc2,w,c
  9688  00D4EA  10DE               	iorwf	postinc2,w,c
  9689  00D4EC  A4D8               	btfss	status,2,c
  9690  00D4EE  D005               	goto	l711
  9691                           
  9692                           ;standbyMode.c: 38: returnValue = 3;
  9693  00D4F0  0E00               	movlw	0
  9694  00D4F2  6E08               	movwf	check_food@returnValue+1,c
  9695  00D4F4  0E03               	movlw	3
  9696  00D4F6  EF61  F06F         	goto	L88
  9697  00D4FA                     l711:
  9698                           
  9699                           ;standbyMode.c: 40: else if (foodInput[0] == 2){
  9700  00D4FA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9701  00D4FE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9702  00D502  0E02               	movlw	2
  9703  00D504  18DE               	xorwf	postinc2,w,c
  9704  00D506  10DE               	iorwf	postinc2,w,c
  9705  00D508  A4D8               	btfss	status,2,c
  9706  00D50A  EFA7  F06F         	goto	l709
  9707                           
  9708                           ;standbyMode.c: 41: returnValue = 4;
  9709  00D50E  0E00               	movlw	0
  9710  00D510  6E08               	movwf	check_food@returnValue+1,c
  9711  00D512  0E04               	movlw	4
  9712  00D514  EF61  F06F         	goto	L88
  9713  00D518                     
  9714                           ;standbyMode.c: 47: if (foodInput[0] == 1){
  9715  00D518  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9716  00D51C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9717  00D520  04DE               	decf	postinc2,w,c
  9718  00D522  10DE               	iorwf	postinc2,w,c
  9719  00D524  A4D8               	btfss	status,2,c
  9720  00D526  D005               	goto	l715
  9721                           
  9722                           ;standbyMode.c: 48: returnValue = 5;
  9723  00D528  0E00               	movlw	0
  9724  00D52A  6E08               	movwf	check_food@returnValue+1,c
  9725  00D52C  0E05               	movlw	5
  9726  00D52E  EF61  F06F         	goto	L88
  9727  00D532                     l715:
  9728                           
  9729                           ;standbyMode.c: 50: else if (foodInput[0] == 2){
  9730  00D532  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9731  00D536  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9732  00D53A  0E02               	movlw	2
  9733  00D53C  18DE               	xorwf	postinc2,w,c
  9734  00D53E  10DE               	iorwf	postinc2,w,c
  9735  00D540  A4D8               	btfss	status,2,c
  9736  00D542  D005               	goto	l717
  9737                           
  9738                           ;standbyMode.c: 51: returnValue = 6;
  9739  00D544  0E00               	movlw	0
  9740  00D546  6E08               	movwf	check_food@returnValue+1,c
  9741  00D548  0E06               	movlw	6
  9742  00D54A  EF61  F06F         	goto	L88
  9743  00D54E                     l717:
  9744                           
  9745                           ;standbyMode.c: 53: else if (foodInput[0] == 3){
  9746  00D54E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9747  00D552  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9748  00D556  0E03               	movlw	3
  9749  00D558  18DE               	xorwf	postinc2,w,c
  9750  00D55A  10DE               	iorwf	postinc2,w,c
  9751  00D55C  A4D8               	btfss	status,2,c
  9752  00D55E  EFA7  F06F         	goto	l709
  9753                           
  9754                           ;standbyMode.c: 54: returnValue = 7;
  9755  00D562  0E00               	movlw	0
  9756  00D564  6E08               	movwf	check_food@returnValue+1,c
  9757  00D566  0E07               	movlw	7
  9758  00D568  EF61  F06F         	goto	L88
  9759  00D56C                     
  9760                           ;standbyMode.c: 60: if (foodInput[0] == 1 && foodInput[1] == 1){
  9761  00D56C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9762  00D570  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9763  00D574  04DE               	decf	postinc2,w,c
  9764  00D576  10DE               	iorwf	postinc2,w,c
  9765  00D578  A4D8               	btfss	status,2,c
  9766  00D57A  D00F               	goto	l721
  9767  00D57C  EE20 F002          	lfsr	2,2
  9768  00D580  5003               	movf	check_food@foodInput,w,c
  9769  00D582  26D9               	addwf	fsr2l,f,c
  9770  00D584  5004               	movf	check_food@foodInput+1,w,c
  9771  00D586  22DA               	addwfc	fsr2h,f,c
  9772  00D588  04DE               	decf	postinc2,w,c
  9773  00D58A  10DE               	iorwf	postinc2,w,c
  9774  00D58C  A4D8               	btfss	status,2,c
  9775  00D58E  D005               	goto	l721
  9776                           
  9777                           ;standbyMode.c: 61: returnValue = 8;
  9778  00D590  0E00               	movlw	0
  9779  00D592  6E08               	movwf	check_food@returnValue+1,c
  9780  00D594  0E08               	movlw	8
  9781  00D596  EF61  F06F         	goto	L88
  9782  00D59A                     l721:
  9783                           
  9784                           ;standbyMode.c: 63: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9785  00D59A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9786  00D59E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9787  00D5A2  04DE               	decf	postinc2,w,c
  9788  00D5A4  10DE               	iorwf	postinc2,w,c
  9789  00D5A6  A4D8               	btfss	status,2,c
  9790  00D5A8  D010               	goto	l723
  9791  00D5AA  EE20 F002          	lfsr	2,2
  9792  00D5AE  5003               	movf	check_food@foodInput,w,c
  9793  00D5B0  26D9               	addwf	fsr2l,f,c
  9794  00D5B2  5004               	movf	check_food@foodInput+1,w,c
  9795  00D5B4  22DA               	addwfc	fsr2h,f,c
  9796  00D5B6  0E02               	movlw	2
  9797  00D5B8  18DE               	xorwf	postinc2,w,c
  9798  00D5BA  10DE               	iorwf	postinc2,w,c
  9799  00D5BC  A4D8               	btfss	status,2,c
  9800  00D5BE  D005               	goto	l723
  9801                           
  9802                           ;standbyMode.c: 64: returnValue = 9;
  9803  00D5C0  0E00               	movlw	0
  9804  00D5C2  6E08               	movwf	check_food@returnValue+1,c
  9805  00D5C4  0E09               	movlw	9
  9806  00D5C6  EF61  F06F         	goto	L88
  9807  00D5CA                     l723:
  9808                           
  9809                           ;standbyMode.c: 66: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9810  00D5CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9811  00D5CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9812  00D5D2  0E02               	movlw	2
  9813  00D5D4  18DE               	xorwf	postinc2,w,c
  9814  00D5D6  10DE               	iorwf	postinc2,w,c
  9815  00D5D8  A4D8               	btfss	status,2,c
  9816  00D5DA  D00F               	goto	l725
  9817  00D5DC  EE20 F002          	lfsr	2,2
  9818  00D5E0  5003               	movf	check_food@foodInput,w,c
  9819  00D5E2  26D9               	addwf	fsr2l,f,c
  9820  00D5E4  5004               	movf	check_food@foodInput+1,w,c
  9821  00D5E6  22DA               	addwfc	fsr2h,f,c
  9822  00D5E8  04DE               	decf	postinc2,w,c
  9823  00D5EA  10DE               	iorwf	postinc2,w,c
  9824  00D5EC  A4D8               	btfss	status,2,c
  9825  00D5EE  D005               	goto	l725
  9826                           
  9827                           ;standbyMode.c: 67: returnValue = 10;
  9828  00D5F0  0E00               	movlw	0
  9829  00D5F2  6E08               	movwf	check_food@returnValue+1,c
  9830  00D5F4  0E0A               	movlw	10
  9831  00D5F6  EF61  F06F         	goto	L88
  9832  00D5FA                     l725:
  9833                           
  9834                           ;standbyMode.c: 69: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9835  00D5FA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9836  00D5FE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9837  00D602  0E02               	movlw	2
  9838  00D604  18DE               	xorwf	postinc2,w,c
  9839  00D606  10DE               	iorwf	postinc2,w,c
  9840  00D608  A4D8               	btfss	status,2,c
  9841  00D60A  EFA7  F06F         	goto	l709
  9842  00D60E  EE20 F002          	lfsr	2,2
  9843  00D612  5003               	movf	check_food@foodInput,w,c
  9844  00D614  26D9               	addwf	fsr2l,f,c
  9845  00D616  5004               	movf	check_food@foodInput+1,w,c
  9846  00D618  22DA               	addwfc	fsr2h,f,c
  9847  00D61A  0E02               	movlw	2
  9848  00D61C  18DE               	xorwf	postinc2,w,c
  9849  00D61E  10DE               	iorwf	postinc2,w,c
  9850  00D620  A4D8               	btfss	status,2,c
  9851  00D622  EFA7  F06F         	goto	l709
  9852                           
  9853                           ;standbyMode.c: 70: returnValue = 11;
  9854  00D626  0E00               	movlw	0
  9855  00D628  6E08               	movwf	check_food@returnValue+1,c
  9856  00D62A  0E0B               	movlw	11
  9857  00D62C  EF61  F06F         	goto	L88
  9858  00D630                     
  9859                           ;standbyMode.c: 76: if (foodInput[0] == 1 && foodInput[1] == 1){
  9860  00D630  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9861  00D634  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9862  00D638  04DE               	decf	postinc2,w,c
  9863  00D63A  10DE               	iorwf	postinc2,w,c
  9864  00D63C  A4D8               	btfss	status,2,c
  9865  00D63E  D00F               	goto	l729
  9866  00D640  EE20 F002          	lfsr	2,2
  9867  00D644  5003               	movf	check_food@foodInput,w,c
  9868  00D646  26D9               	addwf	fsr2l,f,c
  9869  00D648  5004               	movf	check_food@foodInput+1,w,c
  9870  00D64A  22DA               	addwfc	fsr2h,f,c
  9871  00D64C  04DE               	decf	postinc2,w,c
  9872  00D64E  10DE               	iorwf	postinc2,w,c
  9873  00D650  A4D8               	btfss	status,2,c
  9874  00D652  D005               	goto	l729
  9875                           
  9876                           ;standbyMode.c: 77: returnValue = 12;
  9877  00D654  0E00               	movlw	0
  9878  00D656  6E08               	movwf	check_food@returnValue+1,c
  9879  00D658  0E0C               	movlw	12
  9880  00D65A  EF61  F06F         	goto	L88
  9881  00D65E                     l729:
  9882                           
  9883                           ;standbyMode.c: 79: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9884  00D65E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9885  00D662  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9886  00D666  04DE               	decf	postinc2,w,c
  9887  00D668  10DE               	iorwf	postinc2,w,c
  9888  00D66A  A4D8               	btfss	status,2,c
  9889  00D66C  D010               	goto	l731
  9890  00D66E  EE20 F002          	lfsr	2,2
  9891  00D672  5003               	movf	check_food@foodInput,w,c
  9892  00D674  26D9               	addwf	fsr2l,f,c
  9893  00D676  5004               	movf	check_food@foodInput+1,w,c
  9894  00D678  22DA               	addwfc	fsr2h,f,c
  9895  00D67A  0E02               	movlw	2
  9896  00D67C  18DE               	xorwf	postinc2,w,c
  9897  00D67E  10DE               	iorwf	postinc2,w,c
  9898  00D680  A4D8               	btfss	status,2,c
  9899  00D682  D005               	goto	l731
  9900                           
  9901                           ;standbyMode.c: 80: returnValue = 13;
  9902  00D684  0E00               	movlw	0
  9903  00D686  6E08               	movwf	check_food@returnValue+1,c
  9904  00D688  0E0D               	movlw	13
  9905  00D68A  EF61  F06F         	goto	L88
  9906  00D68E                     l731:
  9907                           
  9908                           ;standbyMode.c: 82: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9909  00D68E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9910  00D692  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9911  00D696  04DE               	decf	postinc2,w,c
  9912  00D698  10DE               	iorwf	postinc2,w,c
  9913  00D69A  A4D8               	btfss	status,2,c
  9914  00D69C  D010               	goto	l733
  9915  00D69E  EE20 F002          	lfsr	2,2
  9916  00D6A2  5003               	movf	check_food@foodInput,w,c
  9917  00D6A4  26D9               	addwf	fsr2l,f,c
  9918  00D6A6  5004               	movf	check_food@foodInput+1,w,c
  9919  00D6A8  22DA               	addwfc	fsr2h,f,c
  9920  00D6AA  0E03               	movlw	3
  9921  00D6AC  18DE               	xorwf	postinc2,w,c
  9922  00D6AE  10DE               	iorwf	postinc2,w,c
  9923  00D6B0  A4D8               	btfss	status,2,c
  9924  00D6B2  D005               	goto	l733
  9925                           
  9926                           ;standbyMode.c: 83: returnValue = 14;
  9927  00D6B4  0E00               	movlw	0
  9928  00D6B6  6E08               	movwf	check_food@returnValue+1,c
  9929  00D6B8  0E0E               	movlw	14
  9930  00D6BA  EF61  F06F         	goto	L88
  9931  00D6BE                     l733:
  9932                           
  9933                           ;standbyMode.c: 85: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9934  00D6BE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9935  00D6C2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9936  00D6C6  0E02               	movlw	2
  9937  00D6C8  18DE               	xorwf	postinc2,w,c
  9938  00D6CA  10DE               	iorwf	postinc2,w,c
  9939  00D6CC  A4D8               	btfss	status,2,c
  9940  00D6CE  D00E               	goto	l735
  9941  00D6D0  EE20 F002          	lfsr	2,2
  9942  00D6D4  5003               	movf	check_food@foodInput,w,c
  9943  00D6D6  26D9               	addwf	fsr2l,f,c
  9944  00D6D8  5004               	movf	check_food@foodInput+1,w,c
  9945  00D6DA  22DA               	addwfc	fsr2h,f,c
  9946  00D6DC  04DE               	decf	postinc2,w,c
  9947  00D6DE  10DE               	iorwf	postinc2,w,c
  9948  00D6E0  A4D8               	btfss	status,2,c
  9949  00D6E2  D004               	goto	l735
  9950                           
  9951                           ;standbyMode.c: 86: returnValue = 15;
  9952  00D6E4  0E00               	movlw	0
  9953  00D6E6  6E08               	movwf	check_food@returnValue+1,c
  9954  00D6E8  0E0F               	movlw	15
  9955  00D6EA  D3EB               	goto	L88
  9956  00D6EC                     l735:
  9957                           
  9958                           ;standbyMode.c: 88: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9959  00D6EC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9960  00D6F0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9961  00D6F4  0E02               	movlw	2
  9962  00D6F6  18DE               	xorwf	postinc2,w,c
  9963  00D6F8  10DE               	iorwf	postinc2,w,c
  9964  00D6FA  A4D8               	btfss	status,2,c
  9965  00D6FC  EFA7  F06F         	goto	l709
  9966  00D700  EE20 F002          	lfsr	2,2
  9967  00D704  5003               	movf	check_food@foodInput,w,c
  9968  00D706  26D9               	addwf	fsr2l,f,c
  9969  00D708  5004               	movf	check_food@foodInput+1,w,c
  9970  00D70A  22DA               	addwfc	fsr2h,f,c
  9971  00D70C  0E02               	movlw	2
  9972  00D70E  18DE               	xorwf	postinc2,w,c
  9973  00D710  10DE               	iorwf	postinc2,w,c
  9974  00D712  A4D8               	btfss	status,2,c
  9975  00D714  EFA7  F06F         	goto	l709
  9976                           
  9977                           ;standbyMode.c: 89: returnValue = 16;
  9978  00D718  0E00               	movlw	0
  9979  00D71A  6E08               	movwf	check_food@returnValue+1,c
  9980  00D71C  0E10               	movlw	16
  9981  00D71E  D3D1               	goto	L88
  9982  00D720                     
  9983                           ;standbyMode.c: 95: if (foodInput[0] == 1 && foodInput[1] == 1){
  9984  00D720  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9985  00D724  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9986  00D728  04DE               	decf	postinc2,w,c
  9987  00D72A  10DE               	iorwf	postinc2,w,c
  9988  00D72C  A4D8               	btfss	status,2,c
  9989  00D72E  D00E               	goto	l739
  9990  00D730  EE20 F002          	lfsr	2,2
  9991  00D734  5003               	movf	check_food@foodInput,w,c
  9992  00D736  26D9               	addwf	fsr2l,f,c
  9993  00D738  5004               	movf	check_food@foodInput+1,w,c
  9994  00D73A  22DA               	addwfc	fsr2h,f,c
  9995  00D73C  04DE               	decf	postinc2,w,c
  9996  00D73E  10DE               	iorwf	postinc2,w,c
  9997  00D740  A4D8               	btfss	status,2,c
  9998  00D742  D004               	goto	l739
  9999                           
 10000                           ;standbyMode.c: 96: returnValue = 17;
 10001  00D744  0E00               	movlw	0
 10002  00D746  6E08               	movwf	check_food@returnValue+1,c
 10003  00D748  0E11               	movlw	17
 10004  00D74A  D3BB               	goto	L88
 10005  00D74C                     l739:
 10006                           
 10007                           ;standbyMode.c: 98: else if (foodInput[0] == 1 && foodInput[1] == 2){
 10008  00D74C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10009  00D750  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10010  00D754  04DE               	decf	postinc2,w,c
 10011  00D756  10DE               	iorwf	postinc2,w,c
 10012  00D758  A4D8               	btfss	status,2,c
 10013  00D75A  D00F               	goto	l741
 10014  00D75C  EE20 F002          	lfsr	2,2
 10015  00D760  5003               	movf	check_food@foodInput,w,c
 10016  00D762  26D9               	addwf	fsr2l,f,c
 10017  00D764  5004               	movf	check_food@foodInput+1,w,c
 10018  00D766  22DA               	addwfc	fsr2h,f,c
 10019  00D768  0E02               	movlw	2
 10020  00D76A  18DE               	xorwf	postinc2,w,c
 10021  00D76C  10DE               	iorwf	postinc2,w,c
 10022  00D76E  A4D8               	btfss	status,2,c
 10023  00D770  D004               	goto	l741
 10024                           
 10025                           ;standbyMode.c: 99: returnValue = 18;
 10026  00D772  0E00               	movlw	0
 10027  00D774  6E08               	movwf	check_food@returnValue+1,c
 10028  00D776  0E12               	movlw	18
 10029  00D778  D3A4               	goto	L88
 10030  00D77A                     l741:
 10031                           
 10032                           ;standbyMode.c: 101: else if (foodInput[0] == 1 && foodInput[1] == 3){
 10033  00D77A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10034  00D77E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10035  00D782  04DE               	decf	postinc2,w,c
 10036  00D784  10DE               	iorwf	postinc2,w,c
 10037  00D786  A4D8               	btfss	status,2,c
 10038  00D788  D00F               	goto	l743
 10039  00D78A  EE20 F002          	lfsr	2,2
 10040  00D78E  5003               	movf	check_food@foodInput,w,c
 10041  00D790  26D9               	addwf	fsr2l,f,c
 10042  00D792  5004               	movf	check_food@foodInput+1,w,c
 10043  00D794  22DA               	addwfc	fsr2h,f,c
 10044  00D796  0E03               	movlw	3
 10045  00D798  18DE               	xorwf	postinc2,w,c
 10046  00D79A  10DE               	iorwf	postinc2,w,c
 10047  00D79C  A4D8               	btfss	status,2,c
 10048  00D79E  D004               	goto	l743
 10049                           
 10050                           ;standbyMode.c: 102: returnValue = 19;
 10051  00D7A0  0E00               	movlw	0
 10052  00D7A2  6E08               	movwf	check_food@returnValue+1,c
 10053  00D7A4  0E13               	movlw	19
 10054  00D7A6  D38D               	goto	L88
 10055  00D7A8                     l743:
 10056                           
 10057                           ;standbyMode.c: 104: else if (foodInput[0] == 2 && foodInput[1] == 1){
 10058  00D7A8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10059  00D7AC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10060  00D7B0  0E02               	movlw	2
 10061  00D7B2  18DE               	xorwf	postinc2,w,c
 10062  00D7B4  10DE               	iorwf	postinc2,w,c
 10063  00D7B6  A4D8               	btfss	status,2,c
 10064  00D7B8  D00E               	goto	l745
 10065  00D7BA  EE20 F002          	lfsr	2,2
 10066  00D7BE  5003               	movf	check_food@foodInput,w,c
 10067  00D7C0  26D9               	addwf	fsr2l,f,c
 10068  00D7C2  5004               	movf	check_food@foodInput+1,w,c
 10069  00D7C4  22DA               	addwfc	fsr2h,f,c
 10070  00D7C6  04DE               	decf	postinc2,w,c
 10071  00D7C8  10DE               	iorwf	postinc2,w,c
 10072  00D7CA  A4D8               	btfss	status,2,c
 10073  00D7CC  D004               	goto	l745
 10074                           
 10075                           ;standbyMode.c: 105: returnValue = 20;
 10076  00D7CE  0E00               	movlw	0
 10077  00D7D0  6E08               	movwf	check_food@returnValue+1,c
 10078  00D7D2  0E14               	movlw	20
 10079  00D7D4  D376               	goto	L88
 10080  00D7D6                     l745:
 10081                           
 10082                           ;standbyMode.c: 107: else if (foodInput[0] == 2 && foodInput[1] == 2){
 10083  00D7D6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10084  00D7DA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10085  00D7DE  0E02               	movlw	2
 10086  00D7E0  18DE               	xorwf	postinc2,w,c
 10087  00D7E2  10DE               	iorwf	postinc2,w,c
 10088  00D7E4  A4D8               	btfss	status,2,c
 10089  00D7E6  D3B3               	goto	l709
 10090  00D7E8  EE20 F002          	lfsr	2,2
 10091  00D7EC  5003               	movf	check_food@foodInput,w,c
 10092  00D7EE  26D9               	addwf	fsr2l,f,c
 10093  00D7F0  5004               	movf	check_food@foodInput+1,w,c
 10094  00D7F2  22DA               	addwfc	fsr2h,f,c
 10095  00D7F4  0E02               	movlw	2
 10096  00D7F6  18DE               	xorwf	postinc2,w,c
 10097  00D7F8  10DE               	iorwf	postinc2,w,c
 10098  00D7FA  A4D8               	btfss	status,2,c
 10099  00D7FC  D3A8               	goto	l709
 10100                           
 10101                           ;standbyMode.c: 108: returnValue = 21;
 10102  00D7FE  0E00               	movlw	0
 10103  00D800  6E08               	movwf	check_food@returnValue+1,c
 10104  00D802  0E15               	movlw	21
 10105  00D804  D35E               	goto	L88
 10106  00D806                     
 10107                           ;standbyMode.c: 114: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10108  00D806  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10109  00D80A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10110  00D80E  04DE               	decf	postinc2,w,c
 10111  00D810  10DE               	iorwf	postinc2,w,c
 10112  00D812  A4D8               	btfss	status,2,c
 10113  00D814  D018               	goto	l749
 10114  00D816  EE20 F002          	lfsr	2,2
 10115  00D81A  5003               	movf	check_food@foodInput,w,c
 10116  00D81C  26D9               	addwf	fsr2l,f,c
 10117  00D81E  5004               	movf	check_food@foodInput+1,w,c
 10118  00D820  22DA               	addwfc	fsr2h,f,c
 10119  00D822  04DE               	decf	postinc2,w,c
 10120  00D824  10DE               	iorwf	postinc2,w,c
 10121  00D826  A4D8               	btfss	status,2,c
 10122  00D828  D00E               	goto	l749
 10123  00D82A  EE20 F004          	lfsr	2,4
 10124  00D82E  5003               	movf	check_food@foodInput,w,c
 10125  00D830  26D9               	addwf	fsr2l,f,c
 10126  00D832  5004               	movf	check_food@foodInput+1,w,c
 10127  00D834  22DA               	addwfc	fsr2h,f,c
 10128  00D836  04DE               	decf	postinc2,w,c
 10129  00D838  10DE               	iorwf	postinc2,w,c
 10130  00D83A  A4D8               	btfss	status,2,c
 10131  00D83C  D004               	goto	l749
 10132                           
 10133                           ;standbyMode.c: 115: returnValue = 22;
 10134  00D83E  0E00               	movlw	0
 10135  00D840  6E08               	movwf	check_food@returnValue+1,c
 10136  00D842  0E16               	movlw	22
 10137  00D844  D33E               	goto	L88
 10138  00D846                     l749:
 10139                           
 10140                           ;standbyMode.c: 117: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10141  00D846  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10142  00D84A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10143  00D84E  04DE               	decf	postinc2,w,c
 10144  00D850  10DE               	iorwf	postinc2,w,c
 10145  00D852  A4D8               	btfss	status,2,c
 10146  00D854  D37C               	goto	l709
 10147  00D856  EE20 F002          	lfsr	2,2
 10148  00D85A  5003               	movf	check_food@foodInput,w,c
 10149  00D85C  26D9               	addwf	fsr2l,f,c
 10150  00D85E  5004               	movf	check_food@foodInput+1,w,c
 10151  00D860  22DA               	addwfc	fsr2h,f,c
 10152  00D862  04DE               	decf	postinc2,w,c
 10153  00D864  10DE               	iorwf	postinc2,w,c
 10154  00D866  A4D8               	btfss	status,2,c
 10155  00D868  D372               	goto	l709
 10156  00D86A  EE20 F004          	lfsr	2,4
 10157  00D86E  5003               	movf	check_food@foodInput,w,c
 10158  00D870  26D9               	addwf	fsr2l,f,c
 10159  00D872  5004               	movf	check_food@foodInput+1,w,c
 10160  00D874  22DA               	addwfc	fsr2h,f,c
 10161  00D876  0E02               	movlw	2
 10162  00D878  18DE               	xorwf	postinc2,w,c
 10163  00D87A  10DE               	iorwf	postinc2,w,c
 10164  00D87C  A4D8               	btfss	status,2,c
 10165  00D87E  D367               	goto	l709
 10166                           
 10167                           ;standbyMode.c: 118: returnValue = 23;
 10168  00D880  0E00               	movlw	0
 10169  00D882  6E08               	movwf	check_food@returnValue+1,c
 10170  00D884  0E17               	movlw	23
 10171  00D886  D31D               	goto	L88
 10172  00D888                     
 10173                           ;standbyMode.c: 124: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10174  00D888  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10175  00D88C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10176  00D890  04DE               	decf	postinc2,w,c
 10177  00D892  10DE               	iorwf	postinc2,w,c
 10178  00D894  A4D8               	btfss	status,2,c
 10179  00D896  D018               	goto	l753
 10180  00D898  EE20 F002          	lfsr	2,2
 10181  00D89C  5003               	movf	check_food@foodInput,w,c
 10182  00D89E  26D9               	addwf	fsr2l,f,c
 10183  00D8A0  5004               	movf	check_food@foodInput+1,w,c
 10184  00D8A2  22DA               	addwfc	fsr2h,f,c
 10185  00D8A4  04DE               	decf	postinc2,w,c
 10186  00D8A6  10DE               	iorwf	postinc2,w,c
 10187  00D8A8  A4D8               	btfss	status,2,c
 10188  00D8AA  D00E               	goto	l753
 10189  00D8AC  EE20 F004          	lfsr	2,4
 10190  00D8B0  5003               	movf	check_food@foodInput,w,c
 10191  00D8B2  26D9               	addwf	fsr2l,f,c
 10192  00D8B4  5004               	movf	check_food@foodInput+1,w,c
 10193  00D8B6  22DA               	addwfc	fsr2h,f,c
 10194  00D8B8  04DE               	decf	postinc2,w,c
 10195  00D8BA  10DE               	iorwf	postinc2,w,c
 10196  00D8BC  A4D8               	btfss	status,2,c
 10197  00D8BE  D004               	goto	l753
 10198                           
 10199                           ;standbyMode.c: 125: returnValue = 24;
 10200  00D8C0  0E00               	movlw	0
 10201  00D8C2  6E08               	movwf	check_food@returnValue+1,c
 10202  00D8C4  0E18               	movlw	24
 10203  00D8C6  D2FD               	goto	L88
 10204  00D8C8                     l753:
 10205                           
 10206                           ;standbyMode.c: 127: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10207  00D8C8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10208  00D8CC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10209  00D8D0  04DE               	decf	postinc2,w,c
 10210  00D8D2  10DE               	iorwf	postinc2,w,c
 10211  00D8D4  A4D8               	btfss	status,2,c
 10212  00D8D6  D33B               	goto	l709
 10213  00D8D8  EE20 F002          	lfsr	2,2
 10214  00D8DC  5003               	movf	check_food@foodInput,w,c
 10215  00D8DE  26D9               	addwf	fsr2l,f,c
 10216  00D8E0  5004               	movf	check_food@foodInput+1,w,c
 10217  00D8E2  22DA               	addwfc	fsr2h,f,c
 10218  00D8E4  04DE               	decf	postinc2,w,c
 10219  00D8E6  10DE               	iorwf	postinc2,w,c
 10220  00D8E8  A4D8               	btfss	status,2,c
 10221  00D8EA  D331               	goto	l709
 10222  00D8EC  EE20 F004          	lfsr	2,4
 10223  00D8F0  5003               	movf	check_food@foodInput,w,c
 10224  00D8F2  26D9               	addwf	fsr2l,f,c
 10225  00D8F4  5004               	movf	check_food@foodInput+1,w,c
 10226  00D8F6  22DA               	addwfc	fsr2h,f,c
 10227  00D8F8  0E02               	movlw	2
 10228  00D8FA  18DE               	xorwf	postinc2,w,c
 10229  00D8FC  10DE               	iorwf	postinc2,w,c
 10230  00D8FE  A4D8               	btfss	status,2,c
 10231  00D900  D326               	goto	l709
 10232                           
 10233                           ;standbyMode.c: 128: returnValue = 25;
 10234  00D902  0E00               	movlw	0
 10235  00D904  6E08               	movwf	check_food@returnValue+1,c
 10236  00D906  0E19               	movlw	25
 10237  00D908  D2DC               	goto	L88
 10238  00D90A                     
 10239                           ;standbyMode.c: 134: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10240  00D90A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10241  00D90E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10242  00D912  04DE               	decf	postinc2,w,c
 10243  00D914  10DE               	iorwf	postinc2,w,c
 10244  00D916  A4D8               	btfss	status,2,c
 10245  00D918  D018               	goto	l757
 10246  00D91A  EE20 F002          	lfsr	2,2
 10247  00D91E  5003               	movf	check_food@foodInput,w,c
 10248  00D920  26D9               	addwf	fsr2l,f,c
 10249  00D922  5004               	movf	check_food@foodInput+1,w,c
 10250  00D924  22DA               	addwfc	fsr2h,f,c
 10251  00D926  04DE               	decf	postinc2,w,c
 10252  00D928  10DE               	iorwf	postinc2,w,c
 10253  00D92A  A4D8               	btfss	status,2,c
 10254  00D92C  D00E               	goto	l757
 10255  00D92E  EE20 F004          	lfsr	2,4
 10256  00D932  5003               	movf	check_food@foodInput,w,c
 10257  00D934  26D9               	addwf	fsr2l,f,c
 10258  00D936  5004               	movf	check_food@foodInput+1,w,c
 10259  00D938  22DA               	addwfc	fsr2h,f,c
 10260  00D93A  04DE               	decf	postinc2,w,c
 10261  00D93C  10DE               	iorwf	postinc2,w,c
 10262  00D93E  A4D8               	btfss	status,2,c
 10263  00D940  D004               	goto	l757
 10264                           
 10265                           ;standbyMode.c: 135: returnValue = 26;
 10266  00D942  0E00               	movlw	0
 10267  00D944  6E08               	movwf	check_food@returnValue+1,c
 10268  00D946  0E1A               	movlw	26
 10269  00D948  D2BC               	goto	L88
 10270  00D94A                     l757:
 10271                           
 10272                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10273  00D94A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10274  00D94E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10275  00D952  0E02               	movlw	2
 10276  00D954  18DE               	xorwf	postinc2,w,c
 10277  00D956  10DE               	iorwf	postinc2,w,c
 10278  00D958  A4D8               	btfss	status,2,c
 10279  00D95A  D2F9               	goto	l709
 10280  00D95C  EE20 F002          	lfsr	2,2
 10281  00D960  5003               	movf	check_food@foodInput,w,c
 10282  00D962  26D9               	addwf	fsr2l,f,c
 10283  00D964  5004               	movf	check_food@foodInput+1,w,c
 10284  00D966  22DA               	addwfc	fsr2h,f,c
 10285  00D968  04DE               	decf	postinc2,w,c
 10286  00D96A  10DE               	iorwf	postinc2,w,c
 10287  00D96C  A4D8               	btfss	status,2,c
 10288  00D96E  D2EF               	goto	l709
 10289  00D970  EE20 F004          	lfsr	2,4
 10290  00D974  5003               	movf	check_food@foodInput,w,c
 10291  00D976  26D9               	addwf	fsr2l,f,c
 10292  00D978  5004               	movf	check_food@foodInput+1,w,c
 10293  00D97A  22DA               	addwfc	fsr2h,f,c
 10294  00D97C  04DE               	decf	postinc2,w,c
 10295  00D97E  10DE               	iorwf	postinc2,w,c
 10296  00D980  A4D8               	btfss	status,2,c
 10297  00D982  D2E5               	goto	l709
 10298                           
 10299                           ;standbyMode.c: 138: returnValue = 27;
 10300  00D984  0E00               	movlw	0
 10301  00D986  6E08               	movwf	check_food@returnValue+1,c
 10302  00D988  0E1B               	movlw	27
 10303  00D98A  D29B               	goto	L88
 10304  00D98C                     
 10305                           ;standbyMode.c: 144: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10306  00D98C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10307  00D990  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10308  00D994  04DE               	decf	postinc2,w,c
 10309  00D996  10DE               	iorwf	postinc2,w,c
 10310  00D998  A4D8               	btfss	status,2,c
 10311  00D99A  D018               	goto	l761
 10312  00D99C  EE20 F002          	lfsr	2,2
 10313  00D9A0  5003               	movf	check_food@foodInput,w,c
 10314  00D9A2  26D9               	addwf	fsr2l,f,c
 10315  00D9A4  5004               	movf	check_food@foodInput+1,w,c
 10316  00D9A6  22DA               	addwfc	fsr2h,f,c
 10317  00D9A8  04DE               	decf	postinc2,w,c
 10318  00D9AA  10DE               	iorwf	postinc2,w,c
 10319  00D9AC  A4D8               	btfss	status,2,c
 10320  00D9AE  D00E               	goto	l761
 10321  00D9B0  EE20 F004          	lfsr	2,4
 10322  00D9B4  5003               	movf	check_food@foodInput,w,c
 10323  00D9B6  26D9               	addwf	fsr2l,f,c
 10324  00D9B8  5004               	movf	check_food@foodInput+1,w,c
 10325  00D9BA  22DA               	addwfc	fsr2h,f,c
 10326  00D9BC  04DE               	decf	postinc2,w,c
 10327  00D9BE  10DE               	iorwf	postinc2,w,c
 10328  00D9C0  A4D8               	btfss	status,2,c
 10329  00D9C2  D004               	goto	l761
 10330                           
 10331                           ;standbyMode.c: 145: returnValue = 28;
 10332  00D9C4  0E00               	movlw	0
 10333  00D9C6  6E08               	movwf	check_food@returnValue+1,c
 10334  00D9C8  0E1C               	movlw	28
 10335  00D9CA  D27B               	goto	L88
 10336  00D9CC                     l761:
 10337                           
 10338                           ;standbyMode.c: 147: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10339  00D9CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10340  00D9D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10341  00D9D4  04DE               	decf	postinc2,w,c
 10342  00D9D6  10DE               	iorwf	postinc2,w,c
 10343  00D9D8  A4D8               	btfss	status,2,c
 10344  00D9DA  D019               	goto	l763
 10345  00D9DC  EE20 F002          	lfsr	2,2
 10346  00D9E0  5003               	movf	check_food@foodInput,w,c
 10347  00D9E2  26D9               	addwf	fsr2l,f,c
 10348  00D9E4  5004               	movf	check_food@foodInput+1,w,c
 10349  00D9E6  22DA               	addwfc	fsr2h,f,c
 10350  00D9E8  04DE               	decf	postinc2,w,c
 10351  00D9EA  10DE               	iorwf	postinc2,w,c
 10352  00D9EC  A4D8               	btfss	status,2,c
 10353  00D9EE  D00F               	goto	l763
 10354  00D9F0  EE20 F004          	lfsr	2,4
 10355  00D9F4  5003               	movf	check_food@foodInput,w,c
 10356  00D9F6  26D9               	addwf	fsr2l,f,c
 10357  00D9F8  5004               	movf	check_food@foodInput+1,w,c
 10358  00D9FA  22DA               	addwfc	fsr2h,f,c
 10359  00D9FC  0E02               	movlw	2
 10360  00D9FE  18DE               	xorwf	postinc2,w,c
 10361  00DA00  10DE               	iorwf	postinc2,w,c
 10362  00DA02  A4D8               	btfss	status,2,c
 10363  00DA04  D004               	goto	l763
 10364                           
 10365                           ;standbyMode.c: 148: returnValue = 29;
 10366  00DA06  0E00               	movlw	0
 10367  00DA08  6E08               	movwf	check_food@returnValue+1,c
 10368  00DA0A  0E1D               	movlw	29
 10369  00DA0C  D25A               	goto	L88
 10370  00DA0E                     l763:
 10371                           
 10372                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10373  00DA0E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10374  00DA12  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10375  00DA16  04DE               	decf	postinc2,w,c
 10376  00DA18  10DE               	iorwf	postinc2,w,c
 10377  00DA1A  A4D8               	btfss	status,2,c
 10378  00DA1C  D019               	goto	l765
 10379  00DA1E  EE20 F002          	lfsr	2,2
 10380  00DA22  5003               	movf	check_food@foodInput,w,c
 10381  00DA24  26D9               	addwf	fsr2l,f,c
 10382  00DA26  5004               	movf	check_food@foodInput+1,w,c
 10383  00DA28  22DA               	addwfc	fsr2h,f,c
 10384  00DA2A  0E02               	movlw	2
 10385  00DA2C  18DE               	xorwf	postinc2,w,c
 10386  00DA2E  10DE               	iorwf	postinc2,w,c
 10387  00DA30  A4D8               	btfss	status,2,c
 10388  00DA32  D00E               	goto	l765
 10389  00DA34  EE20 F004          	lfsr	2,4
 10390  00DA38  5003               	movf	check_food@foodInput,w,c
 10391  00DA3A  26D9               	addwf	fsr2l,f,c
 10392  00DA3C  5004               	movf	check_food@foodInput+1,w,c
 10393  00DA3E  22DA               	addwfc	fsr2h,f,c
 10394  00DA40  04DE               	decf	postinc2,w,c
 10395  00DA42  10DE               	iorwf	postinc2,w,c
 10396  00DA44  A4D8               	btfss	status,2,c
 10397  00DA46  D004               	goto	l765
 10398                           
 10399                           ;standbyMode.c: 151: returnValue = 30;
 10400  00DA48  0E00               	movlw	0
 10401  00DA4A  6E08               	movwf	check_food@returnValue+1,c
 10402  00DA4C  0E1E               	movlw	30
 10403  00DA4E  D239               	goto	L88
 10404  00DA50                     l765:
 10405                           
 10406                           ;standbyMode.c: 153: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10407  00DA50  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10408  00DA54  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10409  00DA58  0E02               	movlw	2
 10410  00DA5A  18DE               	xorwf	postinc2,w,c
 10411  00DA5C  10DE               	iorwf	postinc2,w,c
 10412  00DA5E  A4D8               	btfss	status,2,c
 10413  00DA60  D276               	goto	l709
 10414  00DA62  EE20 F002          	lfsr	2,2
 10415  00DA66  5003               	movf	check_food@foodInput,w,c
 10416  00DA68  26D9               	addwf	fsr2l,f,c
 10417  00DA6A  5004               	movf	check_food@foodInput+1,w,c
 10418  00DA6C  22DA               	addwfc	fsr2h,f,c
 10419  00DA6E  04DE               	decf	postinc2,w,c
 10420  00DA70  10DE               	iorwf	postinc2,w,c
 10421  00DA72  A4D8               	btfss	status,2,c
 10422  00DA74  D26C               	goto	l709
 10423  00DA76  EE20 F004          	lfsr	2,4
 10424  00DA7A  5003               	movf	check_food@foodInput,w,c
 10425  00DA7C  26D9               	addwf	fsr2l,f,c
 10426  00DA7E  5004               	movf	check_food@foodInput+1,w,c
 10427  00DA80  22DA               	addwfc	fsr2h,f,c
 10428  00DA82  04DE               	decf	postinc2,w,c
 10429  00DA84  10DE               	iorwf	postinc2,w,c
 10430  00DA86  A4D8               	btfss	status,2,c
 10431  00DA88  D262               	goto	l709
 10432                           
 10433                           ;standbyMode.c: 154: returnValue = 31;
 10434  00DA8A  0E00               	movlw	0
 10435  00DA8C  6E08               	movwf	check_food@returnValue+1,c
 10436  00DA8E  0E1F               	movlw	31
 10437  00DA90  D218               	goto	L88
 10438  00DA92                     
 10439                           ;standbyMode.c: 160: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10440  00DA92  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10441  00DA96  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10442  00DA9A  04DE               	decf	postinc2,w,c
 10443  00DA9C  10DE               	iorwf	postinc2,w,c
 10444  00DA9E  A4D8               	btfss	status,2,c
 10445  00DAA0  D018               	goto	l769
 10446  00DAA2  EE20 F002          	lfsr	2,2
 10447  00DAA6  5003               	movf	check_food@foodInput,w,c
 10448  00DAA8  26D9               	addwf	fsr2l,f,c
 10449  00DAAA  5004               	movf	check_food@foodInput+1,w,c
 10450  00DAAC  22DA               	addwfc	fsr2h,f,c
 10451  00DAAE  04DE               	decf	postinc2,w,c
 10452  00DAB0  10DE               	iorwf	postinc2,w,c
 10453  00DAB2  A4D8               	btfss	status,2,c
 10454  00DAB4  D00E               	goto	l769
 10455  00DAB6  EE20 F004          	lfsr	2,4
 10456  00DABA  5003               	movf	check_food@foodInput,w,c
 10457  00DABC  26D9               	addwf	fsr2l,f,c
 10458  00DABE  5004               	movf	check_food@foodInput+1,w,c
 10459  00DAC0  22DA               	addwfc	fsr2h,f,c
 10460  00DAC2  04DE               	decf	postinc2,w,c
 10461  00DAC4  10DE               	iorwf	postinc2,w,c
 10462  00DAC6  A4D8               	btfss	status,2,c
 10463  00DAC8  D004               	goto	l769
 10464                           
 10465                           ;standbyMode.c: 161: returnValue = 32;
 10466  00DACA  0E00               	movlw	0
 10467  00DACC  6E08               	movwf	check_food@returnValue+1,c
 10468  00DACE  0E20               	movlw	32
 10469  00DAD0  D1F8               	goto	L88
 10470  00DAD2                     l769:
 10471                           
 10472                           ;standbyMode.c: 163: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10473  00DAD2  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10474  00DAD6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10475  00DADA  04DE               	decf	postinc2,w,c
 10476  00DADC  10DE               	iorwf	postinc2,w,c
 10477  00DADE  A4D8               	btfss	status,2,c
 10478  00DAE0  D019               	goto	l771
 10479  00DAE2  EE20 F002          	lfsr	2,2
 10480  00DAE6  5003               	movf	check_food@foodInput,w,c
 10481  00DAE8  26D9               	addwf	fsr2l,f,c
 10482  00DAEA  5004               	movf	check_food@foodInput+1,w,c
 10483  00DAEC  22DA               	addwfc	fsr2h,f,c
 10484  00DAEE  04DE               	decf	postinc2,w,c
 10485  00DAF0  10DE               	iorwf	postinc2,w,c
 10486  00DAF2  A4D8               	btfss	status,2,c
 10487  00DAF4  D00F               	goto	l771
 10488  00DAF6  EE20 F004          	lfsr	2,4
 10489  00DAFA  5003               	movf	check_food@foodInput,w,c
 10490  00DAFC  26D9               	addwf	fsr2l,f,c
 10491  00DAFE  5004               	movf	check_food@foodInput+1,w,c
 10492  00DB00  22DA               	addwfc	fsr2h,f,c
 10493  00DB02  0E02               	movlw	2
 10494  00DB04  18DE               	xorwf	postinc2,w,c
 10495  00DB06  10DE               	iorwf	postinc2,w,c
 10496  00DB08  A4D8               	btfss	status,2,c
 10497  00DB0A  D004               	goto	l771
 10498                           
 10499                           ;standbyMode.c: 164: returnValue = 33;
 10500  00DB0C  0E00               	movlw	0
 10501  00DB0E  6E08               	movwf	check_food@returnValue+1,c
 10502  00DB10  0E21               	movlw	33
 10503  00DB12  D1D7               	goto	L88
 10504  00DB14                     l771:
 10505                           
 10506                           ;standbyMode.c: 166: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10507  00DB14  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10508  00DB18  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10509  00DB1C  04DE               	decf	postinc2,w,c
 10510  00DB1E  10DE               	iorwf	postinc2,w,c
 10511  00DB20  A4D8               	btfss	status,2,c
 10512  00DB22  D019               	goto	l773
 10513  00DB24  EE20 F002          	lfsr	2,2
 10514  00DB28  5003               	movf	check_food@foodInput,w,c
 10515  00DB2A  26D9               	addwf	fsr2l,f,c
 10516  00DB2C  5004               	movf	check_food@foodInput+1,w,c
 10517  00DB2E  22DA               	addwfc	fsr2h,f,c
 10518  00DB30  0E02               	movlw	2
 10519  00DB32  18DE               	xorwf	postinc2,w,c
 10520  00DB34  10DE               	iorwf	postinc2,w,c
 10521  00DB36  A4D8               	btfss	status,2,c
 10522  00DB38  D00E               	goto	l773
 10523  00DB3A  EE20 F004          	lfsr	2,4
 10524  00DB3E  5003               	movf	check_food@foodInput,w,c
 10525  00DB40  26D9               	addwf	fsr2l,f,c
 10526  00DB42  5004               	movf	check_food@foodInput+1,w,c
 10527  00DB44  22DA               	addwfc	fsr2h,f,c
 10528  00DB46  04DE               	decf	postinc2,w,c
 10529  00DB48  10DE               	iorwf	postinc2,w,c
 10530  00DB4A  A4D8               	btfss	status,2,c
 10531  00DB4C  D004               	goto	l773
 10532                           
 10533                           ;standbyMode.c: 167: returnValue = 34;
 10534  00DB4E  0E00               	movlw	0
 10535  00DB50  6E08               	movwf	check_food@returnValue+1,c
 10536  00DB52  0E22               	movlw	34
 10537  00DB54  D1B6               	goto	L88
 10538  00DB56                     l773:
 10539                           
 10540                           ;standbyMode.c: 169: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10541  00DB56  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10542  00DB5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10543  00DB5E  0E02               	movlw	2
 10544  00DB60  18DE               	xorwf	postinc2,w,c
 10545  00DB62  10DE               	iorwf	postinc2,w,c
 10546  00DB64  A4D8               	btfss	status,2,c
 10547  00DB66  D1F3               	goto	l709
 10548  00DB68  EE20 F002          	lfsr	2,2
 10549  00DB6C  5003               	movf	check_food@foodInput,w,c
 10550  00DB6E  26D9               	addwf	fsr2l,f,c
 10551  00DB70  5004               	movf	check_food@foodInput+1,w,c
 10552  00DB72  22DA               	addwfc	fsr2h,f,c
 10553  00DB74  04DE               	decf	postinc2,w,c
 10554  00DB76  10DE               	iorwf	postinc2,w,c
 10555  00DB78  A4D8               	btfss	status,2,c
 10556  00DB7A  D1E9               	goto	l709
 10557  00DB7C  EE20 F004          	lfsr	2,4
 10558  00DB80  5003               	movf	check_food@foodInput,w,c
 10559  00DB82  26D9               	addwf	fsr2l,f,c
 10560  00DB84  5004               	movf	check_food@foodInput+1,w,c
 10561  00DB86  22DA               	addwfc	fsr2h,f,c
 10562  00DB88  04DE               	decf	postinc2,w,c
 10563  00DB8A  10DE               	iorwf	postinc2,w,c
 10564  00DB8C  A4D8               	btfss	status,2,c
 10565  00DB8E  D1DF               	goto	l709
 10566                           
 10567                           ;standbyMode.c: 170: returnValue = 35;
 10568  00DB90  0E00               	movlw	0
 10569  00DB92  6E08               	movwf	check_food@returnValue+1,c
 10570  00DB94  0E23               	movlw	35
 10571  00DB96  D195               	goto	L88
 10572  00DB98                     
 10573                           ;standbyMode.c: 176: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10574  00DB98  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10575  00DB9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10576  00DBA0  04DE               	decf	postinc2,w,c
 10577  00DBA2  10DE               	iorwf	postinc2,w,c
 10578  00DBA4  A4D8               	btfss	status,2,c
 10579  00DBA6  D018               	goto	l777
 10580  00DBA8  EE20 F002          	lfsr	2,2
 10581  00DBAC  5003               	movf	check_food@foodInput,w,c
 10582  00DBAE  26D9               	addwf	fsr2l,f,c
 10583  00DBB0  5004               	movf	check_food@foodInput+1,w,c
 10584  00DBB2  22DA               	addwfc	fsr2h,f,c
 10585  00DBB4  04DE               	decf	postinc2,w,c
 10586  00DBB6  10DE               	iorwf	postinc2,w,c
 10587  00DBB8  A4D8               	btfss	status,2,c
 10588  00DBBA  D00E               	goto	l777
 10589  00DBBC  EE20 F004          	lfsr	2,4
 10590  00DBC0  5003               	movf	check_food@foodInput,w,c
 10591  00DBC2  26D9               	addwf	fsr2l,f,c
 10592  00DBC4  5004               	movf	check_food@foodInput+1,w,c
 10593  00DBC6  22DA               	addwfc	fsr2h,f,c
 10594  00DBC8  04DE               	decf	postinc2,w,c
 10595  00DBCA  10DE               	iorwf	postinc2,w,c
 10596  00DBCC  A4D8               	btfss	status,2,c
 10597  00DBCE  D004               	goto	l777
 10598                           
 10599                           ;standbyMode.c: 177: returnValue = 36;
 10600  00DBD0  0E00               	movlw	0
 10601  00DBD2  6E08               	movwf	check_food@returnValue+1,c
 10602  00DBD4  0E24               	movlw	36
 10603  00DBD6  D175               	goto	L88
 10604  00DBD8                     l777:
 10605                           
 10606                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10607  00DBD8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10608  00DBDC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10609  00DBE0  04DE               	decf	postinc2,w,c
 10610  00DBE2  10DE               	iorwf	postinc2,w,c
 10611  00DBE4  A4D8               	btfss	status,2,c
 10612  00DBE6  D1B3               	goto	l709
 10613  00DBE8  EE20 F002          	lfsr	2,2
 10614  00DBEC  5003               	movf	check_food@foodInput,w,c
 10615  00DBEE  26D9               	addwf	fsr2l,f,c
 10616  00DBF0  5004               	movf	check_food@foodInput+1,w,c
 10617  00DBF2  22DA               	addwfc	fsr2h,f,c
 10618  00DBF4  04DE               	decf	postinc2,w,c
 10619  00DBF6  10DE               	iorwf	postinc2,w,c
 10620  00DBF8  A4D8               	btfss	status,2,c
 10621  00DBFA  D1A9               	goto	l709
 10622  00DBFC  EE20 F004          	lfsr	2,4
 10623  00DC00  5003               	movf	check_food@foodInput,w,c
 10624  00DC02  26D9               	addwf	fsr2l,f,c
 10625  00DC04  5004               	movf	check_food@foodInput+1,w,c
 10626  00DC06  22DA               	addwfc	fsr2h,f,c
 10627  00DC08  0E02               	movlw	2
 10628  00DC0A  18DE               	xorwf	postinc2,w,c
 10629  00DC0C  10DE               	iorwf	postinc2,w,c
 10630  00DC0E  A4D8               	btfss	status,2,c
 10631  00DC10  D19E               	goto	l709
 10632                           
 10633                           ;standbyMode.c: 180: returnValue = 37;
 10634  00DC12  0E00               	movlw	0
 10635  00DC14  6E08               	movwf	check_food@returnValue+1,c
 10636  00DC16  0E25               	movlw	37
 10637  00DC18  D154               	goto	L88
 10638  00DC1A                     
 10639                           ;standbyMode.c: 186: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10640  00DC1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10641  00DC1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10642  00DC22  04DE               	decf	postinc2,w,c
 10643  00DC24  10DE               	iorwf	postinc2,w,c
 10644  00DC26  A4D8               	btfss	status,2,c
 10645  00DC28  D018               	goto	l781
 10646  00DC2A  EE20 F002          	lfsr	2,2
 10647  00DC2E  5003               	movf	check_food@foodInput,w,c
 10648  00DC30  26D9               	addwf	fsr2l,f,c
 10649  00DC32  5004               	movf	check_food@foodInput+1,w,c
 10650  00DC34  22DA               	addwfc	fsr2h,f,c
 10651  00DC36  04DE               	decf	postinc2,w,c
 10652  00DC38  10DE               	iorwf	postinc2,w,c
 10653  00DC3A  A4D8               	btfss	status,2,c
 10654  00DC3C  D00E               	goto	l781
 10655  00DC3E  EE20 F004          	lfsr	2,4
 10656  00DC42  5003               	movf	check_food@foodInput,w,c
 10657  00DC44  26D9               	addwf	fsr2l,f,c
 10658  00DC46  5004               	movf	check_food@foodInput+1,w,c
 10659  00DC48  22DA               	addwfc	fsr2h,f,c
 10660  00DC4A  04DE               	decf	postinc2,w,c
 10661  00DC4C  10DE               	iorwf	postinc2,w,c
 10662  00DC4E  A4D8               	btfss	status,2,c
 10663  00DC50  D004               	goto	l781
 10664                           
 10665                           ;standbyMode.c: 187: returnValue = 38;
 10666  00DC52  0E00               	movlw	0
 10667  00DC54  6E08               	movwf	check_food@returnValue+1,c
 10668  00DC56  0E26               	movlw	38
 10669  00DC58  D134               	goto	L88
 10670  00DC5A                     l781:
 10671                           
 10672                           ;standbyMode.c: 189: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10673  00DC5A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10674  00DC5E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10675  00DC62  04DE               	decf	postinc2,w,c
 10676  00DC64  10DE               	iorwf	postinc2,w,c
 10677  00DC66  A4D8               	btfss	status,2,c
 10678  00DC68  D019               	goto	l783
 10679  00DC6A  EE20 F002          	lfsr	2,2
 10680  00DC6E  5003               	movf	check_food@foodInput,w,c
 10681  00DC70  26D9               	addwf	fsr2l,f,c
 10682  00DC72  5004               	movf	check_food@foodInput+1,w,c
 10683  00DC74  22DA               	addwfc	fsr2h,f,c
 10684  00DC76  04DE               	decf	postinc2,w,c
 10685  00DC78  10DE               	iorwf	postinc2,w,c
 10686  00DC7A  A4D8               	btfss	status,2,c
 10687  00DC7C  D00F               	goto	l783
 10688  00DC7E  EE20 F004          	lfsr	2,4
 10689  00DC82  5003               	movf	check_food@foodInput,w,c
 10690  00DC84  26D9               	addwf	fsr2l,f,c
 10691  00DC86  5004               	movf	check_food@foodInput+1,w,c
 10692  00DC88  22DA               	addwfc	fsr2h,f,c
 10693  00DC8A  0E02               	movlw	2
 10694  00DC8C  18DE               	xorwf	postinc2,w,c
 10695  00DC8E  10DE               	iorwf	postinc2,w,c
 10696  00DC90  A4D8               	btfss	status,2,c
 10697  00DC92  D004               	goto	l783
 10698                           
 10699                           ;standbyMode.c: 190: returnValue = 39;
 10700  00DC94  0E00               	movlw	0
 10701  00DC96  6E08               	movwf	check_food@returnValue+1,c
 10702  00DC98  0E27               	movlw	39
 10703  00DC9A  D113               	goto	L88
 10704  00DC9C                     l783:
 10705                           
 10706                           ;standbyMode.c: 192: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10707  00DC9C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10708  00DCA0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10709  00DCA4  04DE               	decf	postinc2,w,c
 10710  00DCA6  10DE               	iorwf	postinc2,w,c
 10711  00DCA8  A4D8               	btfss	status,2,c
 10712  00DCAA  D019               	goto	l785
 10713  00DCAC  EE20 F002          	lfsr	2,2
 10714  00DCB0  5003               	movf	check_food@foodInput,w,c
 10715  00DCB2  26D9               	addwf	fsr2l,f,c
 10716  00DCB4  5004               	movf	check_food@foodInput+1,w,c
 10717  00DCB6  22DA               	addwfc	fsr2h,f,c
 10718  00DCB8  0E02               	movlw	2
 10719  00DCBA  18DE               	xorwf	postinc2,w,c
 10720  00DCBC  10DE               	iorwf	postinc2,w,c
 10721  00DCBE  A4D8               	btfss	status,2,c
 10722  00DCC0  D00E               	goto	l785
 10723  00DCC2  EE20 F004          	lfsr	2,4
 10724  00DCC6  5003               	movf	check_food@foodInput,w,c
 10725  00DCC8  26D9               	addwf	fsr2l,f,c
 10726  00DCCA  5004               	movf	check_food@foodInput+1,w,c
 10727  00DCCC  22DA               	addwfc	fsr2h,f,c
 10728  00DCCE  04DE               	decf	postinc2,w,c
 10729  00DCD0  10DE               	iorwf	postinc2,w,c
 10730  00DCD2  A4D8               	btfss	status,2,c
 10731  00DCD4  D004               	goto	l785
 10732                           
 10733                           ;standbyMode.c: 193: returnValue = 40;
 10734  00DCD6  0E00               	movlw	0
 10735  00DCD8  6E08               	movwf	check_food@returnValue+1,c
 10736  00DCDA  0E28               	movlw	40
 10737  00DCDC  D0F2               	goto	L88
 10738  00DCDE                     l785:
 10739                           
 10740                           ;standbyMode.c: 195: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10741  00DCDE  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10742  00DCE2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10743  00DCE6  0E02               	movlw	2
 10744  00DCE8  18DE               	xorwf	postinc2,w,c
 10745  00DCEA  10DE               	iorwf	postinc2,w,c
 10746  00DCEC  A4D8               	btfss	status,2,c
 10747  00DCEE  D12F               	goto	l709
 10748  00DCF0  EE20 F002          	lfsr	2,2
 10749  00DCF4  5003               	movf	check_food@foodInput,w,c
 10750  00DCF6  26D9               	addwf	fsr2l,f,c
 10751  00DCF8  5004               	movf	check_food@foodInput+1,w,c
 10752  00DCFA  22DA               	addwfc	fsr2h,f,c
 10753  00DCFC  04DE               	decf	postinc2,w,c
 10754  00DCFE  10DE               	iorwf	postinc2,w,c
 10755  00DD00  A4D8               	btfss	status,2,c
 10756  00DD02  D125               	goto	l709
 10757  00DD04  EE20 F004          	lfsr	2,4
 10758  00DD08  5003               	movf	check_food@foodInput,w,c
 10759  00DD0A  26D9               	addwf	fsr2l,f,c
 10760  00DD0C  5004               	movf	check_food@foodInput+1,w,c
 10761  00DD0E  22DA               	addwfc	fsr2h,f,c
 10762  00DD10  04DE               	decf	postinc2,w,c
 10763  00DD12  10DE               	iorwf	postinc2,w,c
 10764  00DD14  A4D8               	btfss	status,2,c
 10765  00DD16  D11B               	goto	l709
 10766                           
 10767                           ;standbyMode.c: 196: returnValue = 41;
 10768  00DD18  0E00               	movlw	0
 10769  00DD1A  6E08               	movwf	check_food@returnValue+1,c
 10770  00DD1C  0E29               	movlw	41
 10771  00DD1E  D0D1               	goto	L88
 10772  00DD20                     
 10773                           ;standbyMode.c: 202: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10774  00DD20  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10775  00DD24  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10776  00DD28  04DE               	decf	postinc2,w,c
 10777  00DD2A  10DE               	iorwf	postinc2,w,c
 10778  00DD2C  A4D8               	btfss	status,2,c
 10779  00DD2E  D10F               	goto	l709
 10780  00DD30  EE20 F002          	lfsr	2,2
 10781  00DD34  5003               	movf	check_food@foodInput,w,c
 10782  00DD36  26D9               	addwf	fsr2l,f,c
 10783  00DD38  5004               	movf	check_food@foodInput+1,w,c
 10784  00DD3A  22DA               	addwfc	fsr2h,f,c
 10785  00DD3C  04DE               	decf	postinc2,w,c
 10786  00DD3E  10DE               	iorwf	postinc2,w,c
 10787  00DD40  A4D8               	btfss	status,2,c
 10788  00DD42  D105               	goto	l709
 10789  00DD44  EE20 F004          	lfsr	2,4
 10790  00DD48  5003               	movf	check_food@foodInput,w,c
 10791  00DD4A  26D9               	addwf	fsr2l,f,c
 10792  00DD4C  5004               	movf	check_food@foodInput+1,w,c
 10793  00DD4E  22DA               	addwfc	fsr2h,f,c
 10794  00DD50  04DE               	decf	postinc2,w,c
 10795  00DD52  10DE               	iorwf	postinc2,w,c
 10796  00DD54  A4D8               	btfss	status,2,c
 10797  00DD56  D0FB               	goto	l709
 10798  00DD58  EE20 F006          	lfsr	2,6
 10799  00DD5C  5003               	movf	check_food@foodInput,w,c
 10800  00DD5E  26D9               	addwf	fsr2l,f,c
 10801  00DD60  5004               	movf	check_food@foodInput+1,w,c
 10802  00DD62  22DA               	addwfc	fsr2h,f,c
 10803  00DD64  04DE               	decf	postinc2,w,c
 10804  00DD66  10DE               	iorwf	postinc2,w,c
 10805  00DD68  A4D8               	btfss	status,2,c
 10806  00DD6A  D0F1               	goto	l709
 10807                           
 10808                           ;standbyMode.c: 203: returnValue = 42;
 10809  00DD6C  0E00               	movlw	0
 10810  00DD6E  6E08               	movwf	check_food@returnValue+1,c
 10811  00DD70  0E2A               	movlw	42
 10812  00DD72  D0A7               	goto	L88
 10813  00DD74                     
 10814                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10815  00DD74  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10816  00DD78  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10817  00DD7C  04DE               	decf	postinc2,w,c
 10818  00DD7E  10DE               	iorwf	postinc2,w,c
 10819  00DD80  A4D8               	btfss	status,2,c
 10820  00DD82  D0E5               	goto	l709
 10821  00DD84  EE20 F002          	lfsr	2,2
 10822  00DD88  5003               	movf	check_food@foodInput,w,c
 10823  00DD8A  26D9               	addwf	fsr2l,f,c
 10824  00DD8C  5004               	movf	check_food@foodInput+1,w,c
 10825  00DD8E  22DA               	addwfc	fsr2h,f,c
 10826  00DD90  04DE               	decf	postinc2,w,c
 10827  00DD92  10DE               	iorwf	postinc2,w,c
 10828  00DD94  A4D8               	btfss	status,2,c
 10829  00DD96  D0DB               	goto	l709
 10830  00DD98  EE20 F004          	lfsr	2,4
 10831  00DD9C  5003               	movf	check_food@foodInput,w,c
 10832  00DD9E  26D9               	addwf	fsr2l,f,c
 10833  00DDA0  5004               	movf	check_food@foodInput+1,w,c
 10834  00DDA2  22DA               	addwfc	fsr2h,f,c
 10835  00DDA4  04DE               	decf	postinc2,w,c
 10836  00DDA6  10DE               	iorwf	postinc2,w,c
 10837  00DDA8  A4D8               	btfss	status,2,c
 10838  00DDAA  D0D1               	goto	l709
 10839  00DDAC  EE20 F006          	lfsr	2,6
 10840  00DDB0  5003               	movf	check_food@foodInput,w,c
 10841  00DDB2  26D9               	addwf	fsr2l,f,c
 10842  00DDB4  5004               	movf	check_food@foodInput+1,w,c
 10843  00DDB6  22DA               	addwfc	fsr2h,f,c
 10844  00DDB8  04DE               	decf	postinc2,w,c
 10845  00DDBA  10DE               	iorwf	postinc2,w,c
 10846  00DDBC  A4D8               	btfss	status,2,c
 10847  00DDBE  D0C7               	goto	l709
 10848                           
 10849                           ;standbyMode.c: 210: returnValue = 43;
 10850  00DDC0  0E00               	movlw	0
 10851  00DDC2  6E08               	movwf	check_food@returnValue+1,c
 10852  00DDC4  0E2B               	movlw	43
 10853  00DDC6  D07D               	goto	L88
 10854  00DDC8                     
 10855                           ;standbyMode.c: 216: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10856  00DDC8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10857  00DDCC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10858  00DDD0  04DE               	decf	postinc2,w,c
 10859  00DDD2  10DE               	iorwf	postinc2,w,c
 10860  00DDD4  A4D8               	btfss	status,2,c
 10861  00DDD6  D0BB               	goto	l709
 10862  00DDD8  EE20 F002          	lfsr	2,2
 10863  00DDDC  5003               	movf	check_food@foodInput,w,c
 10864  00DDDE  26D9               	addwf	fsr2l,f,c
 10865  00DDE0  5004               	movf	check_food@foodInput+1,w,c
 10866  00DDE2  22DA               	addwfc	fsr2h,f,c
 10867  00DDE4  04DE               	decf	postinc2,w,c
 10868  00DDE6  10DE               	iorwf	postinc2,w,c
 10869  00DDE8  A4D8               	btfss	status,2,c
 10870  00DDEA  D0B1               	goto	l709
 10871  00DDEC  EE20 F004          	lfsr	2,4
 10872  00DDF0  5003               	movf	check_food@foodInput,w,c
 10873  00DDF2  26D9               	addwf	fsr2l,f,c
 10874  00DDF4  5004               	movf	check_food@foodInput+1,w,c
 10875  00DDF6  22DA               	addwfc	fsr2h,f,c
 10876  00DDF8  04DE               	decf	postinc2,w,c
 10877  00DDFA  10DE               	iorwf	postinc2,w,c
 10878  00DDFC  A4D8               	btfss	status,2,c
 10879  00DDFE  D0A7               	goto	l709
 10880  00DE00  EE20 F006          	lfsr	2,6
 10881  00DE04  5003               	movf	check_food@foodInput,w,c
 10882  00DE06  26D9               	addwf	fsr2l,f,c
 10883  00DE08  5004               	movf	check_food@foodInput+1,w,c
 10884  00DE0A  22DA               	addwfc	fsr2h,f,c
 10885  00DE0C  04DE               	decf	postinc2,w,c
 10886  00DE0E  10DE               	iorwf	postinc2,w,c
 10887  00DE10  A4D8               	btfss	status,2,c
 10888  00DE12  D09D               	goto	l709
 10889                           
 10890                           ;standbyMode.c: 217: returnValue = 44;
 10891  00DE14  0E00               	movlw	0
 10892  00DE16  6E08               	movwf	check_food@returnValue+1,c
 10893  00DE18  0E2C               	movlw	44
 10894  00DE1A  D053               	goto	L88
 10895  00DE1C                     
 10896                           ;standbyMode.c: 223: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10897  00DE1C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10898  00DE20  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10899  00DE24  04DE               	decf	postinc2,w,c
 10900  00DE26  10DE               	iorwf	postinc2,w,c
 10901  00DE28  A4D8               	btfss	status,2,c
 10902  00DE2A  D091               	goto	l709
 10903  00DE2C  EE20 F002          	lfsr	2,2
 10904  00DE30  5003               	movf	check_food@foodInput,w,c
 10905  00DE32  26D9               	addwf	fsr2l,f,c
 10906  00DE34  5004               	movf	check_food@foodInput+1,w,c
 10907  00DE36  22DA               	addwfc	fsr2h,f,c
 10908  00DE38  04DE               	decf	postinc2,w,c
 10909  00DE3A  10DE               	iorwf	postinc2,w,c
 10910  00DE3C  A4D8               	btfss	status,2,c
 10911  00DE3E  D087               	goto	l709
 10912  00DE40  EE20 F004          	lfsr	2,4
 10913  00DE44  5003               	movf	check_food@foodInput,w,c
 10914  00DE46  26D9               	addwf	fsr2l,f,c
 10915  00DE48  5004               	movf	check_food@foodInput+1,w,c
 10916  00DE4A  22DA               	addwfc	fsr2h,f,c
 10917  00DE4C  04DE               	decf	postinc2,w,c
 10918  00DE4E  10DE               	iorwf	postinc2,w,c
 10919  00DE50  A4D8               	btfss	status,2,c
 10920  00DE52  D07D               	goto	l709
 10921  00DE54  EE20 F006          	lfsr	2,6
 10922  00DE58  5003               	movf	check_food@foodInput,w,c
 10923  00DE5A  26D9               	addwf	fsr2l,f,c
 10924  00DE5C  5004               	movf	check_food@foodInput+1,w,c
 10925  00DE5E  22DA               	addwfc	fsr2h,f,c
 10926  00DE60  04DE               	decf	postinc2,w,c
 10927  00DE62  10DE               	iorwf	postinc2,w,c
 10928  00DE64  A4D8               	btfss	status,2,c
 10929  00DE66  D073               	goto	l709
 10930                           
 10931                           ;standbyMode.c: 224: returnValue = 45;
 10932  00DE68  0E00               	movlw	0
 10933  00DE6A  6E08               	movwf	check_food@returnValue+1,c
 10934  00DE6C  0E2D               	movlw	45
 10935  00DE6E  D029               	goto	L88
 10936  00DE70                     
 10937                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10938  00DE70  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10939  00DE74  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10940  00DE78  04DE               	decf	postinc2,w,c
 10941  00DE7A  10DE               	iorwf	postinc2,w,c
 10942  00DE7C  A4D8               	btfss	status,2,c
 10943  00DE7E  D067               	goto	l709
 10944  00DE80  EE20 F002          	lfsr	2,2
 10945  00DE84  5003               	movf	check_food@foodInput,w,c
 10946  00DE86  26D9               	addwf	fsr2l,f,c
 10947  00DE88  5004               	movf	check_food@foodInput+1,w,c
 10948  00DE8A  22DA               	addwfc	fsr2h,f,c
 10949  00DE8C  04DE               	decf	postinc2,w,c
 10950  00DE8E  10DE               	iorwf	postinc2,w,c
 10951  00DE90  A4D8               	btfss	status,2,c
 10952  00DE92  D05D               	goto	l709
 10953  00DE94  EE20 F004          	lfsr	2,4
 10954  00DE98  5003               	movf	check_food@foodInput,w,c
 10955  00DE9A  26D9               	addwf	fsr2l,f,c
 10956  00DE9C  5004               	movf	check_food@foodInput+1,w,c
 10957  00DE9E  22DA               	addwfc	fsr2h,f,c
 10958  00DEA0  04DE               	decf	postinc2,w,c
 10959  00DEA2  10DE               	iorwf	postinc2,w,c
 10960  00DEA4  A4D8               	btfss	status,2,c
 10961  00DEA6  D053               	goto	l709
 10962  00DEA8  EE20 F006          	lfsr	2,6
 10963  00DEAC  5003               	movf	check_food@foodInput,w,c
 10964  00DEAE  26D9               	addwf	fsr2l,f,c
 10965  00DEB0  5004               	movf	check_food@foodInput+1,w,c
 10966  00DEB2  22DA               	addwfc	fsr2h,f,c
 10967  00DEB4  04DE               	decf	postinc2,w,c
 10968  00DEB6  10DE               	iorwf	postinc2,w,c
 10969  00DEB8  A4D8               	btfss	status,2,c
 10970  00DEBA  D049               	goto	l709
 10971                           
 10972                           ;standbyMode.c: 231: returnValue = 46;
 10973  00DEBC  0E00               	movlw	0
 10974  00DEBE  6E08               	movwf	check_food@returnValue+1,c
 10975  00DEC0  0E2E               	movlw	46
 10976  00DEC2                     L88:
 10977  00DEC2  6E07               	movwf	check_food@returnValue,c
 10978                           
 10979                           ;standbyMode.c: 238: }
 10980                           
 10981                           ;standbyMode.c: 237: break;
 10982                           
 10983                           ;standbyMode.c: 236: default:
 10984                           
 10985                           ;standbyMode.c: 232: }
 10986                           ;standbyMode.c: 233: break;
 10987  00DEC4  D044               	goto	l709
 10988  00DEC6                     l704:
 10989  00DEC6  C001  F005         	movff	check_food@sum,??_check_food
 10990  00DECA  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10991                           
 10992                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10993                           ; Switch size 1, requested type "space"
 10994                           ; Number of cases is 1, Range of values is 0 to 0
 10995                           ; switch strategies available:
 10996                           ; Name         Instructions Cycles
 10997                           ; simple_byte            4     3 (average)
 10998                           ;	Chosen strategy is simple_byte
 10999  00DECE  5006               	movf	??_check_food+1,w,c
 11000  00DED0  0A00               	xorlw	0	; case 0
 11001  00DED2  A4D8               	btfss	status,2,c
 11002  00DED4  D03C               	goto	l709
 11003                           
 11004                           ; Switch size 1, requested type "space"
 11005                           ; Number of cases is 18, Range of values is 3 to 43
 11006                           ; switch strategies available:
 11007                           ; Name         Instructions Cycles
 11008                           ; simple_byte           55    28 (average)
 11009                           ;	Chosen strategy is simple_byte
 11010  00DED6  5005               	movf	??_check_food,w,c
 11011  00DED8  0A03               	xorlw	3	; case 3
 11012  00DEDA  B4D8               	btfsc	status,2,c
 11013  00DEDC  EF54  F06A         	goto	l705
 11014  00DEE0  0A04               	xorlw	4	; case 7
 11015  00DEE2  B4D8               	btfsc	status,2,c
 11016  00DEE4  EF70  F06A         	goto	l710
 11017  00DEE8  0A0D               	xorlw	13	; case 10
 11018  00DEEA  B4D8               	btfsc	status,2,c
 11019  00DEEC  EFB6  F06A         	goto	l720
 11020  00DEF0  0A06               	xorlw	6	; case 12
 11021  00DEF2  B4D8               	btfsc	status,2,c
 11022  00DEF4  EF8C  F06A         	goto	l714
 11023  00DEF8  0A01               	xorlw	1	; case 13
 11024  00DEFA  B4D8               	btfsc	status,2,c
 11025  00DEFC  D484               	goto	l748
 11026  00DEFE  0A02               	xorlw	2	; case 15
 11027  00DF00  B4D8               	btfsc	status,2,c
 11028  00DF02  EF18  F06B         	goto	l728
 11029  00DF06  0A1E               	xorlw	30	; case 17
 11030  00DF08  B4D8               	btfsc	status,2,c
 11031  00DF0A  D4FF               	goto	l756
 11032  00DF0C  0A03               	xorlw	3	; case 18
 11033  00DF0E  B4D8               	btfsc	status,2,c
 11034  00DF10  D4BB               	goto	l752
 11035  00DF12  0A01               	xorlw	1	; case 19
 11036  00DF14  B4D8               	btfsc	status,2,c
 11037  00DF16  D404               	goto	l738
 11038  00DF18  0A05               	xorlw	5	; case 22
 11039  00DF1A  B4D8               	btfsc	status,2,c
 11040  00DF1C  D5BA               	goto	l768
 11041  00DF1E  0A0F               	xorlw	15	; case 25
 11042  00DF20  B4D8               	btfsc	status,2,c
 11043  00DF22  D6FE               	goto	l788
 11044  00DF24  0A03               	xorlw	3	; case 26
 11045  00DF26  B4D8               	btfsc	status,2,c
 11046  00DF28  D637               	goto	l776
 11047  00DF2A  0A01               	xorlw	1	; case 27
 11048  00DF2C  B4D8               	btfsc	status,2,c
 11049  00DF2E  D52E               	goto	l760
 11050  00DF30  0A06               	xorlw	6	; case 29
 11051  00DF32  B4D8               	btfsc	status,2,c
 11052  00DF34  D71F               	goto	l790
 11053  00DF36  0A02               	xorlw	2	; case 31
 11054  00DF38  B4D8               	btfsc	status,2,c
 11055  00DF3A  D66F               	goto	l780
 11056  00DF3C  0A3D               	xorlw	61	; case 34
 11057  00DF3E  B4D8               	btfsc	status,2,c
 11058  00DF40  D743               	goto	l792
 11059  00DF42  0A05               	xorlw	5	; case 39
 11060  00DF44  B4D8               	btfsc	status,2,c
 11061  00DF46  D76A               	goto	l794
 11062  00DF48  0A0C               	xorlw	12	; case 43
 11063  00DF4A  B4D8               	btfsc	status,2,c
 11064  00DF4C  D791               	goto	l796
 11065  00DF4E                     l709:
 11066                           
 11067                           ;standbyMode.c: 239: return returnValue;
 11068  00DF4E  C007  F001         	movff	check_food@returnValue,?_check_food
 11069  00DF52  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 11070  00DF56  0012               	return		;funcret
 11071  00DF58                     __end_of_check_food:
 11072                           	opt stack 0
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           plusw1	equ	0xFE3
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           plusw2	equ	0xFDB
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function _diet_press *****************
 11093 ;; Defined at:
 11094 ;;		line 1201 in file "standbyMode.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  drawer          2   40[COMRAM] unsigned int 
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;  keypress        1   54[COMRAM] unsigned char 
 11099 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 11100 ;;  sum             2   52[COMRAM] unsigned int 
 11101 ;;  count           2   50[COMRAM] unsigned int 
 11102 ;;  backCheck       2   48[COMRAM] unsigned int 
 11103 ;;  i               2   46[COMRAM] unsigned int 
 11104 ;;  previous        2   44[COMRAM] unsigned int 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  2   40[COMRAM] unsigned int 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11114 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;Total ram usage:       23 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    3
 11121 ;; This function calls:
 11122 ;;		_lcdInst
 11123 ;;		_printf
 11124 ;;		_putch
 11125 ;; This function is called by:
 11126 ;;		_standbyMode
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           	psect	text15
 11131  00C36C                     __ptext15:
 11132                           	opt stack 0
 11133  00C36C                     _diet_press:
 11134                           	opt stack 26
 11135                           
 11136                           ;incstack = 0
 11137                           ;standbyMode.c: 1204: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 11138  00C36C  0E01               	movlw	1
 11139  00C36E  ECDF  F04B         	call	_lcdInst
 11140  00C372  0EC3               	movlw	195
 11141  00C374  6E2B               	movwf	??_diet_press& (0+255),c
 11142  00C376  0ECD               	movlw	205
 11143  00C378                     u15017:
 11144  00C378  2EE8               	decfsz	wreg,f,c
 11145  00C37A  D7FE               	bra	u15017
 11146  00C37C  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11147  00C37E  D7FC               	bra	u15017
 11148  00C380  F000               	nop	
 11149                           
 11150                           ;standbyMode.c: 1205: printf("Drawer %i diet:", drawer);
 11151  00C382  0E50               	movlw	low STR_109
 11152  00C384  6E0D               	movwf	printf@f,c
 11153  00C386  0EFA               	movlw	high STR_109
 11154  00C388  6E0E               	movwf	printf@f+1,c
 11155  00C38A  C029  F00F         	movff	diet_press@drawer,?_printf+2
 11156  00C38E  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 11157  00C392  ECBD  F05F         	call	_printf	;wreg free
 11158                           
 11159                           ;standbyMode.c: 1206: lcdInst(0xC0);;
 11160  00C396  0EC0               	movlw	192
 11161  00C398  ECDF  F04B         	call	_lcdInst
 11162                           
 11163                           ;standbyMode.c: 1208: unsigned int count = 0;
 11164  00C39C  0E00               	movlw	0
 11165  00C39E  6E34               	movwf	diet_press@count+1,c
 11166  00C3A0  0E00               	movlw	0
 11167  00C3A2  6E33               	movwf	diet_press@count,c
 11168                           
 11169                           ;standbyMode.c: 1209: unsigned int previous = 0;
 11170  00C3A4  0E00               	movlw	0
 11171  00C3A6  6E2E               	movwf	diet_press@previous+1,c
 11172  00C3A8  0E00               	movlw	0
 11173  00C3AA  6E2D               	movwf	diet_press@previous,c
 11174                           
 11175                           ;standbyMode.c: 1210: unsigned int sum = 0;
 11176  00C3AC  0E00               	movlw	0
 11177  00C3AE  6E36               	movwf	diet_press@sum+1,c
 11178  00C3B0  0E00               	movlw	0
 11179  00C3B2  6E35               	movwf	diet_press@sum,c
 11180                           
 11181                           ;standbyMode.c: 1211: unsigned int i = 0;
 11182  00C3B4  0E00               	movlw	0
 11183  00C3B6  6E30               	movwf	diet_press@i+1,c
 11184  00C3B8  0E00               	movlw	0
 11185  00C3BA  6E2F               	movwf	diet_press@i,c
 11186                           
 11187                           ;standbyMode.c: 1212: unsigned int dietTable[4] = {0, 0, 0, 0};
 11188  00C3BC  EE21  F0EA         	lfsr	2,diet_press@F3132
 11189  00C3C0  EE10  F038         	lfsr	1,diet_press@dietTable
 11190  00C3C4  0E07               	movlw	7
 11191  00C3C6                     u12131:
 11192  00C3C6  CFDB FFE3          	movff	plusw2,plusw1
 11193  00C3CA  06E8               	decf	wreg,f,c
 11194  00C3CC  E2FC               	bc	u12131
 11195                           
 11196                           ;standbyMode.c: 1213: unsigned int backCheck = 0;
 11197  00C3CE  0E00               	movlw	0
 11198  00C3D0  6E32               	movwf	diet_press@backCheck+1,c
 11199  00C3D2  0E00               	movlw	0
 11200  00C3D4  6E31               	movwf	diet_press@backCheck,c
 11201  00C3D6                     l1093:
 11202  00C3D6  A281               	btfss	3969,1,c	;volatile
 11203  00C3D8  D7FE               	goto	l1092
 11204                           
 11205                           ;standbyMode.c: 1217: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11206  00C3DA  3881               	swapf	3969,w,c	;volatile
 11207  00C3DC  0B0F               	andlw	15
 11208  00C3DE  0B0F               	andlw	15
 11209  00C3E0  6E37               	movwf	diet_press@keypress,c
 11210  00C3E2  B281               	btfsc	3969,1,c	;volatile
 11211  00C3E4  D7FE               	goto	l1097
 11212                           
 11213                           ;standbyMode.c: 1220: if(keypress == 15){
 11214  00C3E6  0E0F               	movlw	15
 11215  00C3E8  1837               	xorwf	diet_press@keypress,w,c
 11216  00C3EA  B4D8               	btfsc	status,2,c
 11217  00C3EC  D086               	goto	l1100
 11218                           
 11219                           ;standbyMode.c: 1223: else if (keypress == 14){
 11220                           
 11221                           ;standbyMode.c: 1222: }
 11222                           
 11223                           ;standbyMode.c: 1221: break;
 11224  00C3EE  0E0E               	movlw	14
 11225  00C3F0  1837               	xorwf	diet_press@keypress,w,c
 11226  00C3F2  A4D8               	btfss	status,2,c
 11227  00C3F4  D005               	goto	l1102
 11228                           
 11229                           ;standbyMode.c: 1224: backCheck = 1;
 11230  00C3F6  0E00               	movlw	0
 11231  00C3F8  6E32               	movwf	diet_press@backCheck+1,c
 11232  00C3FA  0E01               	movlw	1
 11233  00C3FC  6E31               	movwf	diet_press@backCheck,c
 11234                           
 11235                           ;standbyMode.c: 1225: break;
 11236  00C3FE  D07D               	goto	l1100
 11237  00C400                     l1102:
 11238                           
 11239                           ;standbyMode.c: 1227: else if (keypress == 12){
 11240  00C400  0E0C               	movlw	12
 11241  00C402  1837               	xorwf	diet_press@keypress,w,c
 11242  00C404  A4D8               	btfss	status,2,c
 11243  00C406  D02D               	goto	l1104
 11244                           
 11245                           ;standbyMode.c: 1228: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11246  00C408  0E01               	movlw	1
 11247  00C40A  ECDF  F04B         	call	_lcdInst
 11248  00C40E  0EC3               	movlw	195
 11249  00C410  6E2B               	movwf	??_diet_press& (0+255),c
 11250  00C412  0ECD               	movlw	205
 11251  00C414                     u15027:
 11252  00C414  2EE8               	decfsz	wreg,f,c
 11253  00C416  D7FE               	bra	u15027
 11254  00C418  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11255  00C41A  D7FC               	bra	u15027
 11256  00C41C  F000               	nop	
 11257                           
 11258                           ;standbyMode.c: 1229: printf("Drawer %i diet:", drawer);
 11259  00C41E  0E50               	movlw	low STR_109
 11260  00C420  6E0D               	movwf	printf@f,c
 11261  00C422  0EFA               	movlw	high STR_109
 11262  00C424  6E0E               	movwf	printf@f+1,c
 11263  00C426  C029  F00F         	movff	diet_press@drawer,?_printf+2
 11264  00C42A  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 11265  00C42E  ECBD  F05F         	call	_printf	;wreg free
 11266                           
 11267                           ;standbyMode.c: 1230: lcdInst(0xC0);;
 11268  00C432  0EC0               	movlw	192
 11269  00C434  ECDF  F04B         	call	_lcdInst
 11270                           
 11271                           ;standbyMode.c: 1231: count = 0;
 11272  00C438  0E00               	movlw	0
 11273  00C43A  6E34               	movwf	diet_press@count+1,c
 11274  00C43C  0E00               	movlw	0
 11275  00C43E  6E33               	movwf	diet_press@count,c
 11276                           
 11277                           ;standbyMode.c: 1232: dietTable[0] = 0;
 11278  00C440  0E00               	movlw	0
 11279  00C442  6E39               	movwf	diet_press@dietTable+1,c
 11280  00C444  0E00               	movlw	0
 11281  00C446  6E38               	movwf	diet_press@dietTable,c
 11282                           
 11283                           ;standbyMode.c: 1233: dietTable[1] = 0;
 11284  00C448  0E00               	movlw	0
 11285  00C44A  6E3B               	movwf	diet_press@dietTable+3,c
 11286  00C44C  0E00               	movlw	0
 11287  00C44E  6E3A               	movwf	diet_press@dietTable+2,c
 11288                           
 11289                           ;standbyMode.c: 1234: dietTable[2] = 0;
 11290  00C450  0E00               	movlw	0
 11291  00C452  6E3D               	movwf	diet_press@dietTable+5,c
 11292  00C454  0E00               	movlw	0
 11293  00C456  6E3C               	movwf	diet_press@dietTable+4,c
 11294                           
 11295                           ;standbyMode.c: 1235: dietTable[3] = 0;
 11296  00C458  0E00               	movlw	0
 11297  00C45A  6E3F               	movwf	diet_press@dietTable+7,c
 11298  00C45C  0E00               	movlw	0
 11299  00C45E  6E3E               	movwf	diet_press@dietTable+6,c
 11300                           
 11301                           ;standbyMode.c: 1236: }
 11302  00C460  D7BA               	goto	l1092
 11303  00C462                     l1104:
 11304                           
 11305                           ;standbyMode.c: 1237: else if (count <= 3){
 11306  00C462  5034               	movf	diet_press@count+1,w,c
 11307  00C464  E1B8               	bnz	l1093
 11308  00C466  0E04               	movlw	4
 11309  00C468  5C33               	subwf	diet_press@count,w,c
 11310  00C46A  B0D8               	btfsc	status,0,c
 11311  00C46C  D7B4               	goto	l1092
 11312                           
 11313                           ;standbyMode.c: 1238: if (keypress == 3 || keypress == 7){
 11314  00C46E  0E03               	movlw	3
 11315  00C470  1837               	xorwf	diet_press@keypress,w,c
 11316  00C472  B4D8               	btfsc	status,2,c
 11317  00C474  D004               	goto	u12210
 11318  00C476  0E07               	movlw	7
 11319  00C478  1837               	xorwf	diet_press@keypress,w,c
 11320  00C47A  A4D8               	btfss	status,2,c
 11321  00C47C  D016               	goto	l1107
 11322  00C47E                     u12210:
 11323                           
 11324                           ;standbyMode.c: 1239: putch(input[keypress]);
 11325  00C47E  5037               	movf	diet_press@keypress,w,c
 11326  00C480  0D01               	mullw	1
 11327  00C482  0E36               	movlw	low _input
 11328  00C484  24F3               	addwf	prodl,w,c
 11329  00C486  6EF6               	movwf	tblptrl,c
 11330  00C488  0EF9               	movlw	high _input
 11331  00C48A  20F4               	addwfc	prodh,w,c
 11332  00C48C  6EF7               	movwf	tblptrh,c
 11333  00C48E                     	if	1	;There are 3 active tblptr bytes
 11334  00C48E  6AF8               	clrf	tblptru,c
 11335  00C490  0E00               	movlw	low (__mediumconst shr (0+16))
 11336  00C492  22F8               	addwfc	tblptru,f,c
 11337  00C494                     	endif
 11338  00C494  0008               	tblrd		*
 11339  00C496  50F5               	movf	tablat,w,c
 11340  00C498  ECF3  F04B         	call	_putch
 11341                           
 11342                           ;standbyMode.c: 1240: dietTable[count] = keypress;
 11343  00C49C  5037               	movf	diet_press@keypress,w,c
 11344  00C49E  6E2B               	movwf	??_diet_press& (0+255),c
 11345  00C4A0  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11346  00C4A2  D01D               	goto	L107
 11347  00C4A4                     l9596:
 11348                           
 11349                           ;standbyMode.c: 1241: count += 1;
 11350  00C4A4  4A33               	infsnz	diet_press@count,f,c
 11351  00C4A6  2A34               	incf	diet_press@count+1,f,c
 11352                           
 11353                           ;standbyMode.c: 1242: }
 11354  00C4A8  D796               	goto	l1092
 11355  00C4AA                     l1107:
 11356                           
 11357                           ;standbyMode.c: 1243: else if (keypress == 11){
 11358  00C4AA  0E0B               	movlw	11
 11359  00C4AC  1837               	xorwf	diet_press@keypress,w,c
 11360  00C4AE  A4D8               	btfss	status,2,c
 11361  00C4B0  D792               	goto	l1092
 11362                           
 11363                           ;standbyMode.c: 1244: putch(input[keypress]);
 11364  00C4B2  5037               	movf	diet_press@keypress,w,c
 11365  00C4B4  0D01               	mullw	1
 11366  00C4B6  0E36               	movlw	low _input
 11367  00C4B8  24F3               	addwf	prodl,w,c
 11368  00C4BA  6EF6               	movwf	tblptrl,c
 11369  00C4BC  0EF9               	movlw	high _input
 11370  00C4BE  20F4               	addwfc	prodh,w,c
 11371  00C4C0  6EF7               	movwf	tblptrh,c
 11372  00C4C2                     	if	1	;There are 3 active tblptr bytes
 11373  00C4C2  6AF8               	clrf	tblptru,c
 11374  00C4C4  0E00               	movlw	low (__mediumconst shr (0+16))
 11375  00C4C6  22F8               	addwfc	tblptru,f,c
 11376  00C4C8                     	endif
 11377  00C4C8  0008               	tblrd		*
 11378  00C4CA  50F5               	movf	tablat,w,c
 11379  00C4CC  ECF3  F04B         	call	_putch
 11380                           
 11381                           ;standbyMode.c: 1245: dietTable[count] = keypress + 1;
 11382  00C4D0  5037               	movf	diet_press@keypress,w,c
 11383  00C4D2  6E2B               	movwf	??_diet_press& (0+255),c
 11384  00C4D4  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11385  00C4D6  0E01               	movlw	1
 11386  00C4D8  262B               	addwf	??_diet_press,f,c
 11387  00C4DA  0E00               	movlw	0
 11388  00C4DC  222C               	addwfc	??_diet_press+1,f,c
 11389  00C4DE                     L107:
 11390  00C4DE  90D8               	bcf	status,0,c
 11391  00C4E0  3433               	rlcf	diet_press@count,w,c
 11392  00C4E2  6ED9               	movwf	fsr2l,c
 11393  00C4E4  3434               	rlcf	diet_press@count+1,w,c
 11394  00C4E6  6EDA               	movwf	fsr2h,c
 11395  00C4E8  0E38               	movlw	low diet_press@dietTable
 11396  00C4EA  26D9               	addwf	fsr2l,f,c
 11397  00C4EC  0E00               	movlw	high diet_press@dietTable
 11398  00C4EE  22DA               	addwfc	fsr2h,f,c
 11399  00C4F0  C02B  FFDE         	movff	??_diet_press,postinc2
 11400  00C4F4  C02C  FFDD         	movff	??_diet_press+1,postdec2
 11401  00C4F8  D7D5               	goto	l9596
 11402  00C4FA                     l1100:
 11403                           
 11404                           ;standbyMode.c: 1247: }
 11405                           ;standbyMode.c: 1248: }
 11406                           ;standbyMode.c: 1249: }
 11407                           ;standbyMode.c: 1251: if (backCheck == 1){
 11408  00C4FA  0431               	decf	diet_press@backCheck,w,c
 11409  00C4FC  1032               	iorwf	diet_press@backCheck+1,w,c
 11410  00C4FE  A4D8               	btfss	status,2,c
 11411  00C500  D004               	goto	l1113
 11412                           
 11413                           ;standbyMode.c: 1252: sum = 100;
 11414  00C502  0E00               	movlw	0
 11415  00C504  6E36               	movwf	diet_press@sum+1,c
 11416  00C506  0E64               	movlw	100
 11417  00C508  D199               	goto	L106
 11418  00C50A                     l1113:
 11419                           
 11420                           ;standbyMode.c: 1256: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11421  00C50A  0E0C               	movlw	12
 11422  00C50C  1838               	xorwf	diet_press@dietTable,w,c
 11423  00C50E  1039               	iorwf	diet_press@dietTable+1,w,c
 11424  00C510  A4D8               	btfss	status,2,c
 11425  00C512  D010               	goto	l1115
 11426  00C514  503A               	movf	diet_press@dietTable+2,w,c
 11427  00C516  103B               	iorwf	diet_press@dietTable+3,w,c
 11428  00C518  A4D8               	btfss	status,2,c
 11429  00C51A  D00C               	goto	l1115
 11430  00C51C  503C               	movf	diet_press@dietTable+4,w,c
 11431  00C51E  103D               	iorwf	diet_press@dietTable+5,w,c
 11432  00C520  A4D8               	btfss	status,2,c
 11433  00C522  D008               	goto	l1115
 11434  00C524  503E               	movf	diet_press@dietTable+6,w,c
 11435  00C526  103F               	iorwf	diet_press@dietTable+7,w,c
 11436  00C528  A4D8               	btfss	status,2,c
 11437  00C52A  D004               	goto	l1115
 11438                           
 11439                           ;standbyMode.c: 1257: sum = 12;
 11440  00C52C  0E00               	movlw	0
 11441  00C52E  6E36               	movwf	diet_press@sum+1,c
 11442  00C530  0E0C               	movlw	12
 11443  00C532  D184               	goto	L106
 11444  00C534                     l1115:
 11445                           
 11446                           ;standbyMode.c: 1261: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11447  00C534  0E03               	movlw	3
 11448  00C536  1838               	xorwf	diet_press@dietTable,w,c
 11449  00C538  1039               	iorwf	diet_press@dietTable+1,w,c
 11450  00C53A  A4D8               	btfss	status,2,c
 11451  00C53C  D010               	goto	l1117
 11452  00C53E  503A               	movf	diet_press@dietTable+2,w,c
 11453  00C540  103B               	iorwf	diet_press@dietTable+3,w,c
 11454  00C542  A4D8               	btfss	status,2,c
 11455  00C544  D00C               	goto	l1117
 11456  00C546  503C               	movf	diet_press@dietTable+4,w,c
 11457  00C548  103D               	iorwf	diet_press@dietTable+5,w,c
 11458  00C54A  A4D8               	btfss	status,2,c
 11459  00C54C  D008               	goto	l1117
 11460  00C54E  503E               	movf	diet_press@dietTable+6,w,c
 11461  00C550  103F               	iorwf	diet_press@dietTable+7,w,c
 11462  00C552  A4D8               	btfss	status,2,c
 11463  00C554  D004               	goto	l1117
 11464                           
 11465                           ;standbyMode.c: 1262: sum = 3;
 11466  00C556  0E00               	movlw	0
 11467  00C558  6E36               	movwf	diet_press@sum+1,c
 11468  00C55A  0E03               	movlw	3
 11469  00C55C  D16F               	goto	L106
 11470  00C55E                     l1117:
 11471                           
 11472                           ;standbyMode.c: 1266: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11473  00C55E  0E07               	movlw	7
 11474  00C560  1838               	xorwf	diet_press@dietTable,w,c
 11475  00C562  1039               	iorwf	diet_press@dietTable+1,w,c
 11476  00C564  A4D8               	btfss	status,2,c
 11477  00C566  D010               	goto	l1119
 11478  00C568  503A               	movf	diet_press@dietTable+2,w,c
 11479  00C56A  103B               	iorwf	diet_press@dietTable+3,w,c
 11480  00C56C  A4D8               	btfss	status,2,c
 11481  00C56E  D00C               	goto	l1119
 11482  00C570  503C               	movf	diet_press@dietTable+4,w,c
 11483  00C572  103D               	iorwf	diet_press@dietTable+5,w,c
 11484  00C574  A4D8               	btfss	status,2,c
 11485  00C576  D008               	goto	l1119
 11486  00C578  503E               	movf	diet_press@dietTable+6,w,c
 11487  00C57A  103F               	iorwf	diet_press@dietTable+7,w,c
 11488  00C57C  A4D8               	btfss	status,2,c
 11489  00C57E  D004               	goto	l1119
 11490                           
 11491                           ;standbyMode.c: 1267: sum = 7;
 11492  00C580  0E00               	movlw	0
 11493  00C582  6E36               	movwf	diet_press@sum+1,c
 11494  00C584  0E07               	movlw	7
 11495  00C586  D15A               	goto	L106
 11496  00C588                     l1119:
 11497                           
 11498                           ;standbyMode.c: 1271: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11499  00C588  0E03               	movlw	3
 11500  00C58A  1838               	xorwf	diet_press@dietTable,w,c
 11501  00C58C  1039               	iorwf	diet_press@dietTable+1,w,c
 11502  00C58E  A4D8               	btfss	status,2,c
 11503  00C590  D011               	goto	l1121
 11504  00C592  0E07               	movlw	7
 11505  00C594  183A               	xorwf	diet_press@dietTable+2,w,c
 11506  00C596  103B               	iorwf	diet_press@dietTable+3,w,c
 11507  00C598  A4D8               	btfss	status,2,c
 11508  00C59A  D00C               	goto	l1121
 11509  00C59C  503C               	movf	diet_press@dietTable+4,w,c
 11510  00C59E  103D               	iorwf	diet_press@dietTable+5,w,c
 11511  00C5A0  A4D8               	btfss	status,2,c
 11512  00C5A2  D008               	goto	l1121
 11513  00C5A4  503E               	movf	diet_press@dietTable+6,w,c
 11514  00C5A6  103F               	iorwf	diet_press@dietTable+7,w,c
 11515  00C5A8  A4D8               	btfss	status,2,c
 11516  00C5AA  D004               	goto	l1121
 11517                           
 11518                           ;standbyMode.c: 1272: sum = 10;
 11519  00C5AC  0E00               	movlw	0
 11520  00C5AE  6E36               	movwf	diet_press@sum+1,c
 11521  00C5B0  0E0A               	movlw	10
 11522  00C5B2  D144               	goto	L106
 11523  00C5B4                     l1121:
 11524                           
 11525                           ;standbyMode.c: 1276: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11526  00C5B4  0E03               	movlw	3
 11527  00C5B6  1838               	xorwf	diet_press@dietTable,w,c
 11528  00C5B8  1039               	iorwf	diet_press@dietTable+1,w,c
 11529  00C5BA  A4D8               	btfss	status,2,c
 11530  00C5BC  D011               	goto	l1123
 11531  00C5BE  0E0C               	movlw	12
 11532  00C5C0  183A               	xorwf	diet_press@dietTable+2,w,c
 11533  00C5C2  103B               	iorwf	diet_press@dietTable+3,w,c
 11534  00C5C4  A4D8               	btfss	status,2,c
 11535  00C5C6  D00C               	goto	l1123
 11536  00C5C8  503C               	movf	diet_press@dietTable+4,w,c
 11537  00C5CA  103D               	iorwf	diet_press@dietTable+5,w,c
 11538  00C5CC  A4D8               	btfss	status,2,c
 11539  00C5CE  D008               	goto	l1123
 11540  00C5D0  503E               	movf	diet_press@dietTable+6,w,c
 11541  00C5D2  103F               	iorwf	diet_press@dietTable+7,w,c
 11542  00C5D4  A4D8               	btfss	status,2,c
 11543  00C5D6  D004               	goto	l1123
 11544                           
 11545                           ;standbyMode.c: 1277: sum = 15;
 11546  00C5D8  0E00               	movlw	0
 11547  00C5DA  6E36               	movwf	diet_press@sum+1,c
 11548  00C5DC  0E0F               	movlw	15
 11549  00C5DE  D12E               	goto	L106
 11550  00C5E0                     l1123:
 11551                           
 11552                           ;standbyMode.c: 1281: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11553  00C5E0  0E07               	movlw	7
 11554  00C5E2  1838               	xorwf	diet_press@dietTable,w,c
 11555  00C5E4  1039               	iorwf	diet_press@dietTable+1,w,c
 11556  00C5E6  A4D8               	btfss	status,2,c
 11557  00C5E8  D011               	goto	l1125
 11558  00C5EA  0E0C               	movlw	12
 11559  00C5EC  183A               	xorwf	diet_press@dietTable+2,w,c
 11560  00C5EE  103B               	iorwf	diet_press@dietTable+3,w,c
 11561  00C5F0  A4D8               	btfss	status,2,c
 11562  00C5F2  D00C               	goto	l1125
 11563  00C5F4  503C               	movf	diet_press@dietTable+4,w,c
 11564  00C5F6  103D               	iorwf	diet_press@dietTable+5,w,c
 11565  00C5F8  A4D8               	btfss	status,2,c
 11566  00C5FA  D008               	goto	l1125
 11567  00C5FC  503E               	movf	diet_press@dietTable+6,w,c
 11568  00C5FE  103F               	iorwf	diet_press@dietTable+7,w,c
 11569  00C600  A4D8               	btfss	status,2,c
 11570  00C602  D004               	goto	l1125
 11571                           
 11572                           ;standbyMode.c: 1282: sum = 19;
 11573  00C604  0E00               	movlw	0
 11574  00C606  6E36               	movwf	diet_press@sum+1,c
 11575  00C608  0E13               	movlw	19
 11576  00C60A  D118               	goto	L106
 11577  00C60C                     l1125:
 11578                           
 11579                           ;standbyMode.c: 1286: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11580  00C60C  0E03               	movlw	3
 11581  00C60E  1838               	xorwf	diet_press@dietTable,w,c
 11582  00C610  1039               	iorwf	diet_press@dietTable+1,w,c
 11583  00C612  A4D8               	btfss	status,2,c
 11584  00C614  D012               	goto	l1127
 11585  00C616  0E03               	movlw	3
 11586  00C618  183A               	xorwf	diet_press@dietTable+2,w,c
 11587  00C61A  103B               	iorwf	diet_press@dietTable+3,w,c
 11588  00C61C  A4D8               	btfss	status,2,c
 11589  00C61E  D00D               	goto	l1127
 11590  00C620  0E07               	movlw	7
 11591  00C622  183C               	xorwf	diet_press@dietTable+4,w,c
 11592  00C624  103D               	iorwf	diet_press@dietTable+5,w,c
 11593  00C626  A4D8               	btfss	status,2,c
 11594  00C628  D008               	goto	l1127
 11595  00C62A  503E               	movf	diet_press@dietTable+6,w,c
 11596  00C62C  103F               	iorwf	diet_press@dietTable+7,w,c
 11597  00C62E  A4D8               	btfss	status,2,c
 11598  00C630  D004               	goto	l1127
 11599                           
 11600                           ;standbyMode.c: 1287: sum = 13;
 11601  00C632  0E00               	movlw	0
 11602  00C634  6E36               	movwf	diet_press@sum+1,c
 11603  00C636  0E0D               	movlw	13
 11604  00C638  D101               	goto	L106
 11605  00C63A                     l1127:
 11606                           
 11607                           ;standbyMode.c: 1291: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11608  00C63A  0E03               	movlw	3
 11609  00C63C  1838               	xorwf	diet_press@dietTable,w,c
 11610  00C63E  1039               	iorwf	diet_press@dietTable+1,w,c
 11611  00C640  A4D8               	btfss	status,2,c
 11612  00C642  D012               	goto	l1129
 11613  00C644  0E03               	movlw	3
 11614  00C646  183A               	xorwf	diet_press@dietTable+2,w,c
 11615  00C648  103B               	iorwf	diet_press@dietTable+3,w,c
 11616  00C64A  A4D8               	btfss	status,2,c
 11617  00C64C  D00D               	goto	l1129
 11618  00C64E  0E0C               	movlw	12
 11619  00C650  183C               	xorwf	diet_press@dietTable+4,w,c
 11620  00C652  103D               	iorwf	diet_press@dietTable+5,w,c
 11621  00C654  A4D8               	btfss	status,2,c
 11622  00C656  D008               	goto	l1129
 11623  00C658  503E               	movf	diet_press@dietTable+6,w,c
 11624  00C65A  103F               	iorwf	diet_press@dietTable+7,w,c
 11625  00C65C  A4D8               	btfss	status,2,c
 11626  00C65E  D004               	goto	l1129
 11627                           
 11628                           ;standbyMode.c: 1292: sum = 18;
 11629  00C660  0E00               	movlw	0
 11630  00C662  6E36               	movwf	diet_press@sum+1,c
 11631  00C664  0E12               	movlw	18
 11632  00C666  D0EA               	goto	L106
 11633  00C668                     l1129:
 11634                           
 11635                           ;standbyMode.c: 1296: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11636  00C668  0E03               	movlw	3
 11637  00C66A  1838               	xorwf	diet_press@dietTable,w,c
 11638  00C66C  1039               	iorwf	diet_press@dietTable+1,w,c
 11639  00C66E  A4D8               	btfss	status,2,c
 11640  00C670  D012               	goto	l1131
 11641  00C672  0E07               	movlw	7
 11642  00C674  183A               	xorwf	diet_press@dietTable+2,w,c
 11643  00C676  103B               	iorwf	diet_press@dietTable+3,w,c
 11644  00C678  A4D8               	btfss	status,2,c
 11645  00C67A  D00D               	goto	l1131
 11646  00C67C  0E07               	movlw	7
 11647  00C67E  183C               	xorwf	diet_press@dietTable+4,w,c
 11648  00C680  103D               	iorwf	diet_press@dietTable+5,w,c
 11649  00C682  A4D8               	btfss	status,2,c
 11650  00C684  D008               	goto	l1131
 11651  00C686  503E               	movf	diet_press@dietTable+6,w,c
 11652  00C688  103F               	iorwf	diet_press@dietTable+7,w,c
 11653  00C68A  A4D8               	btfss	status,2,c
 11654  00C68C  D004               	goto	l1131
 11655                           
 11656                           ;standbyMode.c: 1297: sum = 17;
 11657  00C68E  0E00               	movlw	0
 11658  00C690  6E36               	movwf	diet_press@sum+1,c
 11659  00C692  0E11               	movlw	17
 11660  00C694  D0D3               	goto	L106
 11661  00C696                     l1131:
 11662                           
 11663                           ;standbyMode.c: 1301: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11664  00C696  0E03               	movlw	3
 11665  00C698  1838               	xorwf	diet_press@dietTable,w,c
 11666  00C69A  1039               	iorwf	diet_press@dietTable+1,w,c
 11667  00C69C  A4D8               	btfss	status,2,c
 11668  00C69E  D012               	goto	l1133
 11669  00C6A0  0E0C               	movlw	12
 11670  00C6A2  183A               	xorwf	diet_press@dietTable+2,w,c
 11671  00C6A4  103B               	iorwf	diet_press@dietTable+3,w,c
 11672  00C6A6  A4D8               	btfss	status,2,c
 11673  00C6A8  D00D               	goto	l1133
 11674  00C6AA  0E0C               	movlw	12
 11675  00C6AC  183C               	xorwf	diet_press@dietTable+4,w,c
 11676  00C6AE  103D               	iorwf	diet_press@dietTable+5,w,c
 11677  00C6B0  A4D8               	btfss	status,2,c
 11678  00C6B2  D008               	goto	l1133
 11679  00C6B4  503E               	movf	diet_press@dietTable+6,w,c
 11680  00C6B6  103F               	iorwf	diet_press@dietTable+7,w,c
 11681  00C6B8  A4D8               	btfss	status,2,c
 11682  00C6BA  D004               	goto	l1133
 11683                           
 11684                           ;standbyMode.c: 1302: sum = 27;
 11685  00C6BC  0E00               	movlw	0
 11686  00C6BE  6E36               	movwf	diet_press@sum+1,c
 11687  00C6C0  0E1B               	movlw	27
 11688  00C6C2  D0BC               	goto	L106
 11689  00C6C4                     l1133:
 11690                           
 11691                           ;standbyMode.c: 1306: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11692  00C6C4  0E03               	movlw	3
 11693  00C6C6  1838               	xorwf	diet_press@dietTable,w,c
 11694  00C6C8  1039               	iorwf	diet_press@dietTable+1,w,c
 11695  00C6CA  A4D8               	btfss	status,2,c
 11696  00C6CC  D012               	goto	l1135
 11697  00C6CE  0E07               	movlw	7
 11698  00C6D0  183A               	xorwf	diet_press@dietTable+2,w,c
 11699  00C6D2  103B               	iorwf	diet_press@dietTable+3,w,c
 11700  00C6D4  A4D8               	btfss	status,2,c
 11701  00C6D6  D00D               	goto	l1135
 11702  00C6D8  0E0C               	movlw	12
 11703  00C6DA  183C               	xorwf	diet_press@dietTable+4,w,c
 11704  00C6DC  103D               	iorwf	diet_press@dietTable+5,w,c
 11705  00C6DE  A4D8               	btfss	status,2,c
 11706  00C6E0  D008               	goto	l1135
 11707  00C6E2  503E               	movf	diet_press@dietTable+6,w,c
 11708  00C6E4  103F               	iorwf	diet_press@dietTable+7,w,c
 11709  00C6E6  A4D8               	btfss	status,2,c
 11710  00C6E8  D004               	goto	l1135
 11711                           
 11712                           ;standbyMode.c: 1307: sum = 22;
 11713  00C6EA  0E00               	movlw	0
 11714  00C6EC  6E36               	movwf	diet_press@sum+1,c
 11715  00C6EE  0E16               	movlw	22
 11716  00C6F0  D0A5               	goto	L106
 11717  00C6F2                     l1135:
 11718                           
 11719                           ;standbyMode.c: 1311: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11720  00C6F2  0E07               	movlw	7
 11721  00C6F4  1838               	xorwf	diet_press@dietTable,w,c
 11722  00C6F6  1039               	iorwf	diet_press@dietTable+1,w,c
 11723  00C6F8  A4D8               	btfss	status,2,c
 11724  00C6FA  D012               	goto	l1137
 11725  00C6FC  0E07               	movlw	7
 11726  00C6FE  183A               	xorwf	diet_press@dietTable+2,w,c
 11727  00C700  103B               	iorwf	diet_press@dietTable+3,w,c
 11728  00C702  A4D8               	btfss	status,2,c
 11729  00C704  D00D               	goto	l1137
 11730  00C706  0E0C               	movlw	12
 11731  00C708  183C               	xorwf	diet_press@dietTable+4,w,c
 11732  00C70A  103D               	iorwf	diet_press@dietTable+5,w,c
 11733  00C70C  A4D8               	btfss	status,2,c
 11734  00C70E  D008               	goto	l1137
 11735  00C710  503E               	movf	diet_press@dietTable+6,w,c
 11736  00C712  103F               	iorwf	diet_press@dietTable+7,w,c
 11737  00C714  A4D8               	btfss	status,2,c
 11738  00C716  D004               	goto	l1137
 11739                           
 11740                           ;standbyMode.c: 1312: sum = 26;
 11741  00C718  0E00               	movlw	0
 11742  00C71A  6E36               	movwf	diet_press@sum+1,c
 11743  00C71C  0E1A               	movlw	26
 11744  00C71E  D08E               	goto	L106
 11745  00C720                     l1137:
 11746                           
 11747                           ;standbyMode.c: 1316: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11748  00C720  0E07               	movlw	7
 11749  00C722  1838               	xorwf	diet_press@dietTable,w,c
 11750  00C724  1039               	iorwf	diet_press@dietTable+1,w,c
 11751  00C726  A4D8               	btfss	status,2,c
 11752  00C728  D012               	goto	l1139
 11753  00C72A  0E0C               	movlw	12
 11754  00C72C  183A               	xorwf	diet_press@dietTable+2,w,c
 11755  00C72E  103B               	iorwf	diet_press@dietTable+3,w,c
 11756  00C730  A4D8               	btfss	status,2,c
 11757  00C732  D00D               	goto	l1139
 11758  00C734  0E0C               	movlw	12
 11759  00C736  183C               	xorwf	diet_press@dietTable+4,w,c
 11760  00C738  103D               	iorwf	diet_press@dietTable+5,w,c
 11761  00C73A  A4D8               	btfss	status,2,c
 11762  00C73C  D008               	goto	l1139
 11763  00C73E  503E               	movf	diet_press@dietTable+6,w,c
 11764  00C740  103F               	iorwf	diet_press@dietTable+7,w,c
 11765  00C742  A4D8               	btfss	status,2,c
 11766  00C744  D004               	goto	l1139
 11767                           
 11768                           ;standbyMode.c: 1317: sum = 31;
 11769  00C746  0E00               	movlw	0
 11770  00C748  6E36               	movwf	diet_press@sum+1,c
 11771  00C74A  0E1F               	movlw	31
 11772  00C74C  D077               	goto	L106
 11773  00C74E                     l1139:
 11774                           
 11775                           ;standbyMode.c: 1321: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11776  00C74E  0E03               	movlw	3
 11777  00C750  1838               	xorwf	diet_press@dietTable,w,c
 11778  00C752  1039               	iorwf	diet_press@dietTable+1,w,c
 11779  00C754  A4D8               	btfss	status,2,c
 11780  00C756  D013               	goto	l1141
 11781  00C758  0E03               	movlw	3
 11782  00C75A  183A               	xorwf	diet_press@dietTable+2,w,c
 11783  00C75C  103B               	iorwf	diet_press@dietTable+3,w,c
 11784  00C75E  A4D8               	btfss	status,2,c
 11785  00C760  D00E               	goto	l1141
 11786  00C762  0E07               	movlw	7
 11787  00C764  183C               	xorwf	diet_press@dietTable+4,w,c
 11788  00C766  103D               	iorwf	diet_press@dietTable+5,w,c
 11789  00C768  A4D8               	btfss	status,2,c
 11790  00C76A  D009               	goto	l1141
 11791  00C76C  0E0C               	movlw	12
 11792  00C76E  183E               	xorwf	diet_press@dietTable+6,w,c
 11793  00C770  103F               	iorwf	diet_press@dietTable+7,w,c
 11794  00C772  A4D8               	btfss	status,2,c
 11795  00C774  D004               	goto	l1141
 11796                           
 11797                           ;standbyMode.c: 1322: sum = 25;
 11798  00C776  0E00               	movlw	0
 11799  00C778  6E36               	movwf	diet_press@sum+1,c
 11800  00C77A  0E19               	movlw	25
 11801  00C77C  D05F               	goto	L106
 11802  00C77E                     l1141:
 11803                           
 11804                           ;standbyMode.c: 1326: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11805  00C77E  0E03               	movlw	3
 11806  00C780  1838               	xorwf	diet_press@dietTable,w,c
 11807  00C782  1039               	iorwf	diet_press@dietTable+1,w,c
 11808  00C784  A4D8               	btfss	status,2,c
 11809  00C786  D013               	goto	l1143
 11810  00C788  0E07               	movlw	7
 11811  00C78A  183A               	xorwf	diet_press@dietTable+2,w,c
 11812  00C78C  103B               	iorwf	diet_press@dietTable+3,w,c
 11813  00C78E  A4D8               	btfss	status,2,c
 11814  00C790  D00E               	goto	l1143
 11815  00C792  0E07               	movlw	7
 11816  00C794  183C               	xorwf	diet_press@dietTable+4,w,c
 11817  00C796  103D               	iorwf	diet_press@dietTable+5,w,c
 11818  00C798  A4D8               	btfss	status,2,c
 11819  00C79A  D009               	goto	l1143
 11820  00C79C  0E0C               	movlw	12
 11821  00C79E  183E               	xorwf	diet_press@dietTable+6,w,c
 11822  00C7A0  103F               	iorwf	diet_press@dietTable+7,w,c
 11823  00C7A2  A4D8               	btfss	status,2,c
 11824  00C7A4  D004               	goto	l1143
 11825                           
 11826                           ;standbyMode.c: 1327: sum = 29;
 11827  00C7A6  0E00               	movlw	0
 11828  00C7A8  6E36               	movwf	diet_press@sum+1,c
 11829  00C7AA  0E1D               	movlw	29
 11830  00C7AC  D047               	goto	L106
 11831  00C7AE                     l1143:
 11832                           
 11833                           ;standbyMode.c: 1331: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 11834  00C7AE  0E03               	movlw	3
 11835  00C7B0  1838               	xorwf	diet_press@dietTable,w,c
 11836  00C7B2  1039               	iorwf	diet_press@dietTable+1,w,c
 11837  00C7B4  A4D8               	btfss	status,2,c
 11838  00C7B6  D013               	goto	l1145
 11839  00C7B8  0E07               	movlw	7
 11840  00C7BA  183A               	xorwf	diet_press@dietTable+2,w,c
 11841  00C7BC  103B               	iorwf	diet_press@dietTable+3,w,c
 11842  00C7BE  A4D8               	btfss	status,2,c
 11843  00C7C0  D00E               	goto	l1145
 11844  00C7C2  0E0C               	movlw	12
 11845  00C7C4  183C               	xorwf	diet_press@dietTable+4,w,c
 11846  00C7C6  103D               	iorwf	diet_press@dietTable+5,w,c
 11847  00C7C8  A4D8               	btfss	status,2,c
 11848  00C7CA  D009               	goto	l1145
 11849  00C7CC  0E0C               	movlw	12
 11850  00C7CE  183E               	xorwf	diet_press@dietTable+6,w,c
 11851  00C7D0  103F               	iorwf	diet_press@dietTable+7,w,c
 11852  00C7D2  A4D8               	btfss	status,2,c
 11853  00C7D4  D004               	goto	l1145
 11854                           
 11855                           ;standbyMode.c: 1332: sum = 34;
 11856  00C7D6  0E00               	movlw	0
 11857  00C7D8  6E36               	movwf	diet_press@sum+1,c
 11858  00C7DA  0E22               	movlw	34
 11859  00C7DC  D02F               	goto	L106
 11860  00C7DE                     l1145:
 11861                           
 11862                           ;standbyMode.c: 1336: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11863  00C7DE  0E03               	movlw	3
 11864  00C7E0  1838               	xorwf	diet_press@dietTable,w,c
 11865  00C7E2  1039               	iorwf	diet_press@dietTable+1,w,c
 11866  00C7E4  A4D8               	btfss	status,2,c
 11867  00C7E6  D013               	goto	l1147
 11868  00C7E8  0E0C               	movlw	12
 11869  00C7EA  183A               	xorwf	diet_press@dietTable+2,w,c
 11870  00C7EC  103B               	iorwf	diet_press@dietTable+3,w,c
 11871  00C7EE  A4D8               	btfss	status,2,c
 11872  00C7F0  D00E               	goto	l1147
 11873  00C7F2  0E0C               	movlw	12
 11874  00C7F4  183C               	xorwf	diet_press@dietTable+4,w,c
 11875  00C7F6  103D               	iorwf	diet_press@dietTable+5,w,c
 11876  00C7F8  A4D8               	btfss	status,2,c
 11877  00C7FA  D009               	goto	l1147
 11878  00C7FC  0E0C               	movlw	12
 11879  00C7FE  183E               	xorwf	diet_press@dietTable+6,w,c
 11880  00C800  103F               	iorwf	diet_press@dietTable+7,w,c
 11881  00C802  A4D8               	btfss	status,2,c
 11882  00C804  D004               	goto	l1147
 11883                           
 11884                           ;standbyMode.c: 1337: sum = 39;
 11885  00C806  0E00               	movlw	0
 11886  00C808  6E36               	movwf	diet_press@sum+1,c
 11887  00C80A  0E27               	movlw	39
 11888  00C80C  D017               	goto	L106
 11889  00C80E                     l1147:
 11890                           
 11891                           ;standbyMode.c: 1341: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11892  00C80E  0E07               	movlw	7
 11893  00C810  1838               	xorwf	diet_press@dietTable,w,c
 11894  00C812  1039               	iorwf	diet_press@dietTable+1,w,c
 11895  00C814  A4D8               	btfss	status,2,c
 11896  00C816  D014               	goto	l1149
 11897  00C818  0E0C               	movlw	12
 11898  00C81A  183A               	xorwf	diet_press@dietTable+2,w,c
 11899  00C81C  103B               	iorwf	diet_press@dietTable+3,w,c
 11900  00C81E  A4D8               	btfss	status,2,c
 11901  00C820  D00F               	goto	l1149
 11902  00C822  0E0C               	movlw	12
 11903  00C824  183C               	xorwf	diet_press@dietTable+4,w,c
 11904  00C826  103D               	iorwf	diet_press@dietTable+5,w,c
 11905  00C828  A4D8               	btfss	status,2,c
 11906  00C82A  D00A               	goto	l1149
 11907  00C82C  0E0C               	movlw	12
 11908  00C82E  183E               	xorwf	diet_press@dietTable+6,w,c
 11909  00C830  103F               	iorwf	diet_press@dietTable+7,w,c
 11910  00C832  A4D8               	btfss	status,2,c
 11911  00C834  D005               	goto	l1149
 11912                           
 11913                           ;standbyMode.c: 1342: sum = 43;
 11914  00C836  0E00               	movlw	0
 11915  00C838  6E36               	movwf	diet_press@sum+1,c
 11916  00C83A  0E2B               	movlw	43
 11917  00C83C                     L106:
 11918  00C83C  6E35               	movwf	diet_press@sum,c
 11919                           
 11920                           ;standbyMode.c: 1343: }
 11921  00C83E  D02A               	goto	l1150
 11922  00C840                     l1149:
 11923                           
 11924                           ;standbyMode.c: 1346: else{
 11925                           ;standbyMode.c: 1347: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11926  00C840  0E01               	movlw	1
 11927  00C842  ECDF  F04B         	call	_lcdInst
 11928  00C846  0EC3               	movlw	195
 11929  00C848  6E2B               	movwf	??_diet_press& (0+255),c
 11930  00C84A  0ECD               	movlw	205
 11931  00C84C                     u15037:
 11932  00C84C  2EE8               	decfsz	wreg,f,c
 11933  00C84E  D7FE               	bra	u15037
 11934  00C850  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11935  00C852  D7FC               	bra	u15037
 11936  00C854  F000               	nop	
 11937                           
 11938                           ;standbyMode.c: 1348: printf("Invalid diet!");
 11939  00C856  0E63               	movlw	low STR_111
 11940  00C858  6E0D               	movwf	printf@f,c
 11941  00C85A  0EFB               	movlw	high STR_111
 11942  00C85C  6E0E               	movwf	printf@f+1,c
 11943  00C85E  ECBD  F05F         	call	_printf	;wreg free
 11944                           
 11945                           ;standbyMode.c: 1349: lcdInst(0xC0);;
 11946  00C862  0EC0               	movlw	192
 11947  00C864  ECDF  F04B         	call	_lcdInst
 11948                           
 11949                           ;standbyMode.c: 1350: printf("Try again.");
 11950  00C868  0EFD               	movlw	low STR_108
 11951  00C86A  6E0D               	movwf	printf@f,c
 11952  00C86C  0EFB               	movlw	high STR_108
 11953  00C86E  6E0E               	movwf	printf@f+1,c
 11954  00C870  ECBD  F05F         	call	_printf	;wreg free
 11955                           
 11956                           ;standbyMode.c: 1351: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11957  00C874  0E33               	movlw	51
 11958  00C876  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11959  00C878  0EBB               	movlw	187
 11960  00C87A  6E2B               	movwf	??_diet_press& (0+255),c
 11961  00C87C  0EE0               	movlw	224
 11962  00C87E                     u15047:
 11963  00C87E  2EE8               	decfsz	wreg,f,c
 11964  00C880  D7FE               	bra	u15047
 11965  00C882  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11966  00C884  D7FC               	bra	u15047
 11967  00C886  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11968  00C888  D7FA               	bra	u15047
 11969                           
 11970                           ;standbyMode.c: 1352: sum = 0;
 11971  00C88A  0E00               	movlw	0
 11972  00C88C  6E36               	movwf	diet_press@sum+1,c
 11973  00C88E  0E00               	movlw	0
 11974  00C890  6E35               	movwf	diet_press@sum,c
 11975                           
 11976                           ;standbyMode.c: 1353: goto START;
 11977  00C892  D56C               	goto	_diet_press
 11978  00C894                     l1150:
 11979                           
 11980                           ;standbyMode.c: 1354: }
 11981                           ;standbyMode.c: 1355: return sum;
 11982  00C894  C035  F029         	movff	diet_press@sum,?_diet_press
 11983  00C898  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11984  00C89C  0012               	return		;funcret
 11985  00C89E                     __end_of_diet_press:
 11986                           	opt stack 0
 11987                           tblptru	equ	0xFF8
 11988                           tblptrh	equ	0xFF7
 11989                           tblptrl	equ	0xFF6
 11990                           tablat	equ	0xFF5
 11991                           prodh	equ	0xFF4
 11992                           prodl	equ	0xFF3
 11993                           postinc0	equ	0xFEE
 11994                           wreg	equ	0xFE8
 11995                           postdec1	equ	0xFE5
 11996                           plusw1	equ	0xFE3
 11997                           fsr1l	equ	0xFE1
 11998                           indf2	equ	0xFDF
 11999                           postinc2	equ	0xFDE
 12000                           postdec2	equ	0xFDD
 12001                           plusw2	equ	0xFDB
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function _decode_diet *****************
 12007 ;; Defined at:
 12008 ;;		line 1359 in file "standbyMode.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;  dietType        2    0[COMRAM] unsigned int 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  returnValue     2    4[COMRAM] unsigned int 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  2    0[COMRAM] unsigned int 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12022 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;Total ram usage:        6 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; This function calls:
 12029 ;;		Nothing
 12030 ;; This function is called by:
 12031 ;;		_standbyMode
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text16
 12036  00A800                     __ptext16:
 12037                           	opt stack 0
 12038  00A800                     _decode_diet:
 12039                           	opt stack 29
 12040                           
 12041                           ;standbyMode.c: 1360: unsigned int returnValue = 100;
 12042                           
 12043                           ;incstack = 0
 12044  00A800  0E00               	movlw	0
 12045  00A802  6E06               	movwf	decode_diet@returnValue+1,c
 12046  00A804  0E64               	movlw	100
 12047  00A806  6E05               	movwf	decode_diet@returnValue,c
 12048                           
 12049                           ;standbyMode.c: 1362: switch(dietType){
 12050  00A808  D049               	goto	l1154
 12051  00A80A                     
 12052                           ;standbyMode.c: 1365: returnValue = 2;
 12053  00A80A  0E00               	movlw	0
 12054  00A80C  6E06               	movwf	decode_diet@returnValue+1,c
 12055  00A80E  0E02               	movlw	2
 12056  00A810  D043               	goto	L124
 12057  00A812                     
 12058                           ;standbyMode.c: 1370: returnValue = 0;
 12059  00A812  0E00               	movlw	0
 12060  00A814  6E06               	movwf	decode_diet@returnValue+1,c
 12061  00A816  0E00               	movlw	0
 12062  00A818  D03F               	goto	L124
 12063  00A81A                     
 12064                           ;standbyMode.c: 1375: returnValue = 1;
 12065  00A81A  0E00               	movlw	0
 12066  00A81C  6E06               	movwf	decode_diet@returnValue+1,c
 12067  00A81E  0E01               	movlw	1
 12068  00A820  D03B               	goto	L124
 12069  00A822                     
 12070                           ;standbyMode.c: 1380: returnValue = 3;
 12071  00A822  0E00               	movlw	0
 12072  00A824  6E06               	movwf	decode_diet@returnValue+1,c
 12073  00A826  0E03               	movlw	3
 12074  00A828  D037               	goto	L124
 12075  00A82A                     
 12076                           ;standbyMode.c: 1385: returnValue = 4;
 12077  00A82A  0E00               	movlw	0
 12078  00A82C  6E06               	movwf	decode_diet@returnValue+1,c
 12079  00A82E  0E04               	movlw	4
 12080  00A830  D033               	goto	L124
 12081  00A832                     
 12082                           ;standbyMode.c: 1390: returnValue = 5;
 12083  00A832  0E00               	movlw	0
 12084  00A834  6E06               	movwf	decode_diet@returnValue+1,c
 12085  00A836  0E05               	movlw	5
 12086  00A838  D02F               	goto	L124
 12087  00A83A                     
 12088                           ;standbyMode.c: 1395: returnValue = 6;
 12089  00A83A  0E00               	movlw	0
 12090  00A83C  6E06               	movwf	decode_diet@returnValue+1,c
 12091  00A83E  0E06               	movlw	6
 12092  00A840  D02B               	goto	L124
 12093  00A842                     
 12094                           ;standbyMode.c: 1400: returnValue = 7;
 12095  00A842  0E00               	movlw	0
 12096  00A844  6E06               	movwf	decode_diet@returnValue+1,c
 12097  00A846  0E07               	movlw	7
 12098  00A848  D027               	goto	L124
 12099  00A84A                     
 12100                           ;standbyMode.c: 1405: returnValue = 8;
 12101  00A84A  0E00               	movlw	0
 12102  00A84C  6E06               	movwf	decode_diet@returnValue+1,c
 12103  00A84E  0E08               	movlw	8
 12104  00A850  D023               	goto	L124
 12105  00A852                     
 12106                           ;standbyMode.c: 1410: returnValue = 9;
 12107  00A852  0E00               	movlw	0
 12108  00A854  6E06               	movwf	decode_diet@returnValue+1,c
 12109  00A856  0E09               	movlw	9
 12110  00A858  D01F               	goto	L124
 12111  00A85A                     
 12112                           ;standbyMode.c: 1415: returnValue = 10;
 12113  00A85A  0E00               	movlw	0
 12114  00A85C  6E06               	movwf	decode_diet@returnValue+1,c
 12115  00A85E  0E0A               	movlw	10
 12116  00A860  D01B               	goto	L124
 12117  00A862                     
 12118                           ;standbyMode.c: 1420: returnValue = 11;
 12119  00A862  0E00               	movlw	0
 12120  00A864  6E06               	movwf	decode_diet@returnValue+1,c
 12121  00A866  0E0B               	movlw	11
 12122  00A868  D017               	goto	L124
 12123  00A86A                     
 12124                           ;standbyMode.c: 1425: returnValue = 12;
 12125  00A86A  0E00               	movlw	0
 12126  00A86C  6E06               	movwf	decode_diet@returnValue+1,c
 12127  00A86E  0E0C               	movlw	12
 12128  00A870  D013               	goto	L124
 12129  00A872                     
 12130                           ;standbyMode.c: 1430: returnValue = 13;
 12131  00A872  0E00               	movlw	0
 12132  00A874  6E06               	movwf	decode_diet@returnValue+1,c
 12133  00A876  0E0D               	movlw	13
 12134  00A878  D00F               	goto	L124
 12135  00A87A                     
 12136                           ;standbyMode.c: 1435: returnValue = 14;
 12137  00A87A  0E00               	movlw	0
 12138  00A87C  6E06               	movwf	decode_diet@returnValue+1,c
 12139  00A87E  0E0E               	movlw	14
 12140  00A880  D00B               	goto	L124
 12141  00A882                     
 12142                           ;standbyMode.c: 1440: returnValue = 15;
 12143  00A882  0E00               	movlw	0
 12144  00A884  6E06               	movwf	decode_diet@returnValue+1,c
 12145  00A886  0E0F               	movlw	15
 12146  00A888  D007               	goto	L124
 12147  00A88A                     
 12148                           ;standbyMode.c: 1445: returnValue = 16;
 12149  00A88A  0E00               	movlw	0
 12150  00A88C  6E06               	movwf	decode_diet@returnValue+1,c
 12151  00A88E  0E10               	movlw	16
 12152  00A890  D003               	goto	L124
 12153  00A892                     
 12154                           ;standbyMode.c: 1450: returnValue = 17;
 12155  00A892  0E00               	movlw	0
 12156  00A894  6E06               	movwf	decode_diet@returnValue+1,c
 12157  00A896  0E11               	movlw	17
 12158  00A898                     L124:
 12159  00A898  6E05               	movwf	decode_diet@returnValue,c
 12160                           
 12161                           ;standbyMode.c: 1455: }
 12162                           
 12163                           ;standbyMode.c: 1454: break;
 12164                           
 12165                           ;standbyMode.c: 1453: default:
 12166                           
 12167                           ;standbyMode.c: 1451: break;
 12168  00A89A  D03F               	goto	l1156
 12169  00A89C                     l1154:
 12170  00A89C  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 12171  00A8A0  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 12172                           
 12173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12174                           ; Switch size 1, requested type "space"
 12175                           ; Number of cases is 1, Range of values is 0 to 0
 12176                           ; switch strategies available:
 12177                           ; Name         Instructions Cycles
 12178                           ; simple_byte            4     3 (average)
 12179                           ;	Chosen strategy is simple_byte
 12180  00A8A4  5004               	movf	??_decode_diet+1,w,c
 12181  00A8A6  0A00               	xorlw	0	; case 0
 12182  00A8A8  A4D8               	btfss	status,2,c
 12183  00A8AA  D037               	goto	l1156
 12184                           
 12185                           ; Switch size 1, requested type "space"
 12186                           ; Number of cases is 18, Range of values is 3 to 43
 12187                           ; switch strategies available:
 12188                           ; Name         Instructions Cycles
 12189                           ; simple_byte           55    28 (average)
 12190                           ;	Chosen strategy is simple_byte
 12191  00A8AC  5003               	movf	??_decode_diet,w,c
 12192  00A8AE  0A03               	xorlw	3	; case 3
 12193  00A8B0  B4D8               	btfsc	status,2,c
 12194  00A8B2  D7AF               	goto	l1157
 12195  00A8B4  0A04               	xorlw	4	; case 7
 12196  00A8B6  B4D8               	btfsc	status,2,c
 12197  00A8B8  D7B0               	goto	l1158
 12198  00A8BA  0A0D               	xorlw	13	; case 10
 12199  00A8BC  B4D8               	btfsc	status,2,c
 12200  00A8BE  D7B1               	goto	l1159
 12201  00A8C0  0A06               	xorlw	6	; case 12
 12202  00A8C2  B4D8               	btfsc	status,2,c
 12203  00A8C4  D7A2               	goto	l1155
 12204  00A8C6  0A01               	xorlw	1	; case 13
 12205  00A8C8  B4D8               	btfsc	status,2,c
 12206  00A8CA  D7B7               	goto	l1162
 12207  00A8CC  0A02               	xorlw	2	; case 15
 12208  00A8CE  B4D8               	btfsc	status,2,c
 12209  00A8D0  D7AC               	goto	l1160
 12210  00A8D2  0A1E               	xorlw	30	; case 17
 12211  00A8D4  B4D8               	btfsc	status,2,c
 12212  00A8D6  D7B9               	goto	l1164
 12213  00A8D8  0A03               	xorlw	3	; case 18
 12214  00A8DA  B4D8               	btfsc	status,2,c
 12215  00A8DC  D7B2               	goto	l1163
 12216  00A8DE  0A01               	xorlw	1	; case 19
 12217  00A8E0  B4D8               	btfsc	status,2,c
 12218  00A8E2  D7A7               	goto	l1161
 12219  00A8E4  0A05               	xorlw	5	; case 22
 12220  00A8E6  B4D8               	btfsc	status,2,c
 12221  00A8E8  D7B8               	goto	l1166
 12222  00A8EA  0A0F               	xorlw	15	; case 25
 12223  00A8EC  B4D8               	btfsc	status,2,c
 12224  00A8EE  D7C1               	goto	l1169
 12225  00A8F0  0A03               	xorlw	3	; case 26
 12226  00A8F2  B4D8               	btfsc	status,2,c
 12227  00A8F4  D7B6               	goto	l1167
 12228  00A8F6  0A01               	xorlw	1	; case 27
 12229  00A8F8  B4D8               	btfsc	status,2,c
 12230  00A8FA  D7AB               	goto	l1165
 12231  00A8FC  0A06               	xorlw	6	; case 29
 12232  00A8FE  B4D8               	btfsc	status,2,c
 12233  00A900  D7BC               	goto	l1170
 12234  00A902  0A02               	xorlw	2	; case 31
 12235  00A904  B4D8               	btfsc	status,2,c
 12236  00A906  D7B1               	goto	l1168
 12237  00A908  0A3D               	xorlw	61	; case 34
 12238  00A90A  B4D8               	btfsc	status,2,c
 12239  00A90C  D7BA               	goto	l1171
 12240  00A90E  0A05               	xorlw	5	; case 39
 12241  00A910  B4D8               	btfsc	status,2,c
 12242  00A912  D7BB               	goto	l1172
 12243  00A914  0A0C               	xorlw	12	; case 43
 12244  00A916  B4D8               	btfsc	status,2,c
 12245  00A918  D7BC               	goto	l1173
 12246  00A91A                     l1156:
 12247                           
 12248                           ;standbyMode.c: 1456: return returnValue;
 12249  00A91A  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 12250  00A91E  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 12251  00A922  0012               	return		;funcret
 12252  00A924                     __end_of_decode_diet:
 12253                           	opt stack 0
 12254                           tblptru	equ	0xFF8
 12255                           tblptrh	equ	0xFF7
 12256                           tblptrl	equ	0xFF6
 12257                           tablat	equ	0xFF5
 12258                           prodh	equ	0xFF4
 12259                           prodl	equ	0xFF3
 12260                           postinc0	equ	0xFEE
 12261                           wreg	equ	0xFE8
 12262                           postdec1	equ	0xFE5
 12263                           plusw1	equ	0xFE3
 12264                           fsr1l	equ	0xFE1
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           plusw2	equ	0xFDB
 12269                           fsr2h	equ	0xFDA
 12270                           fsr2l	equ	0xFD9
 12271                           status	equ	0xFD8
 12272                           
 12273 ;; *************** function _I2C_Master_Write *****************
 12274 ;; Defined at:
 12275 ;;		line 108 in file "I2C.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;Total ram usage:        2 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    1
 12296 ;; This function calls:
 12297 ;;		_I2C_Master_Wait
 12298 ;; This function is called by:
 12299 ;;		_standbyMode
 12300 ;;		_RTC_setTime
 12301 ;;		_tick
 12302 ;;		_tock
 12303 ;;		_sendByteToArduino
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           	psect	text17
 12308  0097A2                     __ptext17:
 12309                           	opt stack 0
 12310  0097A2                     _I2C_Master_Write:
 12311                           	opt stack 28
 12312                           
 12313                           ;I2C.c: 116: I2C_Master_Wait();
 12314                           
 12315                           ;incstack = 0
 12316  0097A2  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12317                           
 12318                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12319  0097A6  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12320  0097AA  0012               	return		;funcret
 12321  0097AC                     __end_of_I2C_Master_Write:
 12322                           	opt stack 0
 12323                           tblptru	equ	0xFF8
 12324                           tblptrh	equ	0xFF7
 12325                           tblptrl	equ	0xFF6
 12326                           tablat	equ	0xFF5
 12327                           prodh	equ	0xFF4
 12328                           prodl	equ	0xFF3
 12329                           postinc0	equ	0xFEE
 12330                           wreg	equ	0xFE8
 12331                           postdec1	equ	0xFE5
 12332                           plusw1	equ	0xFE3
 12333                           fsr1l	equ	0xFE1
 12334                           indf2	equ	0xFDF
 12335                           postinc2	equ	0xFDE
 12336                           postdec2	equ	0xFDD
 12337                           plusw2	equ	0xFDB
 12338                           fsr2h	equ	0xFDA
 12339                           fsr2l	equ	0xFD9
 12340                           status	equ	0xFD8
 12341                           
 12342 ;; *************** function _I2C_Master_Stop *****************
 12343 ;; Defined at:
 12344 ;;		line 95 in file "I2C.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;		None
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;		None
 12349 ;; Return value:  Size  Location     Type
 12350 ;;                  1    wreg      void 
 12351 ;; Registers used:
 12352 ;;		wreg, status,2, status,0, cstack
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;Total ram usage:        0 bytes
 12363 ;; Hardware stack levels used:    1
 12364 ;; Hardware stack levels required when called:    1
 12365 ;; This function calls:
 12366 ;;		_I2C_Master_Wait
 12367 ;; This function is called by:
 12368 ;;		_standbyMode
 12369 ;;		_RTC_setTime
 12370 ;;		_tick
 12371 ;;		_tock
 12372 ;;		_sendByteToArduino
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text18
 12377  009792                     __ptext18:
 12378                           	opt stack 0
 12379  009792                     _I2C_Master_Stop:
 12380                           	opt stack 28
 12381                           
 12382                           ;I2C.c: 104: I2C_Master_Wait();
 12383                           
 12384                           ;incstack = 0
 12385  009792  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12386                           
 12387                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12388  009796  84C5               	bsf	4037,2,c	;volatile
 12389  009798  0012               	return		;funcret
 12390  00979A                     __end_of_I2C_Master_Stop:
 12391                           	opt stack 0
 12392                           tblptru	equ	0xFF8
 12393                           tblptrh	equ	0xFF7
 12394                           tblptrl	equ	0xFF6
 12395                           tablat	equ	0xFF5
 12396                           prodh	equ	0xFF4
 12397                           prodl	equ	0xFF3
 12398                           postinc0	equ	0xFEE
 12399                           wreg	equ	0xFE8
 12400                           postdec1	equ	0xFE5
 12401                           plusw1	equ	0xFE3
 12402                           fsr1l	equ	0xFE1
 12403                           indf2	equ	0xFDF
 12404                           postinc2	equ	0xFDE
 12405                           postdec2	equ	0xFDD
 12406                           plusw2	equ	0xFDB
 12407                           fsr2h	equ	0xFDA
 12408                           fsr2l	equ	0xFD9
 12409                           status	equ	0xFD8
 12410                           
 12411 ;; *************** function _I2C_Master_Start *****************
 12412 ;; Defined at:
 12413 ;;		line 69 in file "I2C.c"
 12414 ;; Parameters:    Size  Location     Type
 12415 ;;		None
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;		None
 12418 ;; Return value:  Size  Location     Type
 12419 ;;                  1    wreg      void 
 12420 ;; Registers used:
 12421 ;;		wreg, status,2, status,0, cstack
 12422 ;; Tracked objects:
 12423 ;;		On entry : 0/0
 12424 ;;		On exit  : 0/0
 12425 ;;		Unchanged: 0/0
 12426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12431 ;;Total ram usage:        0 bytes
 12432 ;; Hardware stack levels used:    1
 12433 ;; Hardware stack levels required when called:    1
 12434 ;; This function calls:
 12435 ;;		_I2C_Master_Wait
 12436 ;; This function is called by:
 12437 ;;		_standbyMode
 12438 ;;		_RTC_setTime
 12439 ;;		_tick
 12440 ;;		_tock
 12441 ;;		_sendByteToArduino
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text19
 12446  00978A                     __ptext19:
 12447                           	opt stack 0
 12448  00978A                     _I2C_Master_Start:
 12449                           	opt stack 28
 12450                           
 12451                           ;I2C.c: 78: I2C_Master_Wait();
 12452                           
 12453                           ;incstack = 0
 12454  00978A  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12455                           
 12456                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12457  00978E  80C5               	bsf	4037,0,c	;volatile
 12458  009790  0012               	return		;funcret
 12459  009792                     __end_of_I2C_Master_Start:
 12460                           	opt stack 0
 12461                           tblptru	equ	0xFF8
 12462                           tblptrh	equ	0xFF7
 12463                           tblptrl	equ	0xFF6
 12464                           tablat	equ	0xFF5
 12465                           prodh	equ	0xFF4
 12466                           prodl	equ	0xFF3
 12467                           postinc0	equ	0xFEE
 12468                           wreg	equ	0xFE8
 12469                           postdec1	equ	0xFE5
 12470                           plusw1	equ	0xFE3
 12471                           fsr1l	equ	0xFE1
 12472                           indf2	equ	0xFDF
 12473                           postinc2	equ	0xFDE
 12474                           postdec2	equ	0xFDD
 12475                           plusw2	equ	0xFDB
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _I2C_Master_Read *****************
 12481 ;; Defined at:
 12482 ;;		line 120 in file "I2C.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  ackBit          1    wreg     unsigned char 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  ackBit          1    1[COMRAM] unsigned char 
 12487 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  1    wreg      unsigned char 
 12490 ;; Registers used:
 12491 ;;		wreg, status,2, status,0, cstack
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;Total ram usage:        2 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; Hardware stack levels required when called:    1
 12504 ;; This function calls:
 12505 ;;		_I2C_Master_Wait
 12506 ;; This function is called by:
 12507 ;;		_standbyMode
 12508 ;;		_tick
 12509 ;;		_tock
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512                           
 12513                           	psect	text20
 12514  009818                     __ptext20:
 12515                           	opt stack 0
 12516  009818                     _I2C_Master_Read:
 12517                           	opt stack 28
 12518                           
 12519                           ;incstack = 0
 12520                           ;I2C_Master_Read@ackBit stored from wreg
 12521  009818  6E02               	movwf	I2C_Master_Read@ackBit,c
 12522                           
 12523                           ;I2C.c: 130: unsigned char receivedByte;
 12524                           ;I2C.c: 132: I2C_Master_Wait();
 12525  00981A  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12526                           
 12527                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12528  00981E  86C5               	bsf	4037,3,c	;volatile
 12529                           
 12530                           ;I2C.c: 135: I2C_Master_Wait();
 12531  009820  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12532                           
 12533                           ;I2C.c: 136: receivedByte = SSPBUF;
 12534  009824  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12535                           
 12536                           ;I2C.c: 138: I2C_Master_Wait();
 12537  009828  ECD6  F04B         	call	_I2C_Master_Wait	;wreg free
 12538                           
 12539                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12540  00982C  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12541  00982E  D002               	bra	u13275
 12542  009830  9AC5               	bcf	4037,5,c	;volatile
 12543  009832  D001               	bra	u13276
 12544  009834                     u13275:
 12545  009834  8AC5               	bsf	4037,5,c	;volatile
 12546  009836                     u13276:
 12547                           
 12548                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12549  009836  88C5               	bsf	4037,4,c	;volatile
 12550                           
 12551                           ;I2C.c: 142: return receivedByte;
 12552  009838  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12553  00983A  0012               	return	
 12554  00983C                     __end_of_I2C_Master_Read:
 12555                           	opt stack 0
 12556                           tblptru	equ	0xFF8
 12557                           tblptrh	equ	0xFF7
 12558                           tblptrl	equ	0xFF6
 12559                           tablat	equ	0xFF5
 12560                           prodh	equ	0xFF4
 12561                           prodl	equ	0xFF3
 12562                           postinc0	equ	0xFEE
 12563                           wreg	equ	0xFE8
 12564                           postdec1	equ	0xFE5
 12565                           plusw1	equ	0xFE3
 12566                           fsr1l	equ	0xFE1
 12567                           indf2	equ	0xFDF
 12568                           postinc2	equ	0xFDE
 12569                           postdec2	equ	0xFDD
 12570                           plusw2	equ	0xFDB
 12571                           fsr2h	equ	0xFDA
 12572                           fsr2l	equ	0xFD9
 12573                           status	equ	0xFD8
 12574                           
 12575 ;; *************** function _I2C_Master_Wait *****************
 12576 ;; Defined at:
 12577 ;;		line 51 in file "I2C.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		wreg, status,2, status,0
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12595 ;;Total ram usage:        1 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_I2C_Master_Start
 12601 ;;		_I2C_Master_Stop
 12602 ;;		_I2C_Master_Write
 12603 ;;		_I2C_Master_Read
 12604 ;;		_I2C_Master_RepeatedStart
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           	psect	text21
 12609  0097AC                     __ptext21:
 12610                           	opt stack 0
 12611  0097AC                     _I2C_Master_Wait:
 12612                           	opt stack 28
 12613                           
 12614                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12615                           
 12616                           ;incstack = 0
 12617  0097AC  B4C7               	btfsc	4039,2,c	;volatile
 12618  0097AE  D7FE               	goto	_I2C_Master_Wait
 12619  0097B0  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12620  0097B4  0E1F               	movlw	31
 12621  0097B6  1601               	andwf	??_I2C_Master_Wait,f,c
 12622  0097B8  B4D8               	btfsc	status,2,c
 12623  0097BA  0012               	return	
 12624  0097BC  D7F7               	goto	_I2C_Master_Wait
 12625  0097BE                     __end_of_I2C_Master_Wait:
 12626                           	opt stack 0
 12627                           tblptru	equ	0xFF8
 12628                           tblptrh	equ	0xFF7
 12629                           tblptrl	equ	0xFF6
 12630                           tablat	equ	0xFF5
 12631                           prodh	equ	0xFF4
 12632                           prodl	equ	0xFF3
 12633                           postinc0	equ	0xFEE
 12634                           wreg	equ	0xFE8
 12635                           postdec1	equ	0xFE5
 12636                           plusw1	equ	0xFE3
 12637                           fsr1l	equ	0xFE1
 12638                           indf2	equ	0xFDF
 12639                           postinc2	equ	0xFDE
 12640                           postdec2	equ	0xFDD
 12641                           plusw2	equ	0xFDB
 12642                           fsr2h	equ	0xFDA
 12643                           fsr2l	equ	0xFD9
 12644                           status	equ	0xFD8
 12645                           
 12646 ;; *************** function _I2C_Master_Init *****************
 12647 ;; Defined at:
 12648 ;;		line 14 in file "I2C.c"
 12649 ;; Parameters:    Size  Location     Type
 12650 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12651 ;; Auto vars:     Size  Location     Type
 12652 ;;		None
 12653 ;; Return value:  Size  Location     Type
 12654 ;;                  1    wreg      void 
 12655 ;; Registers used:
 12656 ;;		wreg, status,2, status,0, cstack
 12657 ;; Tracked objects:
 12658 ;;		On entry : 0/0
 12659 ;;		On exit  : 0/0
 12660 ;;		Unchanged: 0/0
 12661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12666 ;;Total ram usage:        8 bytes
 12667 ;; Hardware stack levels used:    1
 12668 ;; Hardware stack levels required when called:    1
 12669 ;; This function calls:
 12670 ;;		___lldiv
 12671 ;; This function is called by:
 12672 ;;		_standbyMode
 12673 ;;		_tick
 12674 ;;		_tock
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           	psect	text22
 12679  009AB2                     __ptext22:
 12680                           	opt stack 0
 12681  009AB2                     _I2C_Master_Init:
 12682                           	opt stack 28
 12683                           
 12684                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12685                           
 12686                           ;incstack = 0
 12687  009AB2  9AC6               	bcf	4038,5,c	;volatile
 12688                           
 12689                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12690  009AB4  8694               	bsf	3988,3,c	;volatile
 12691                           
 12692                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12693  009AB6  8894               	bsf	3988,4,c	;volatile
 12694                           
 12695                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12696  009AB8  0E80               	movlw	128
 12697  009ABA  6EC7               	movwf	4039,c	;volatile
 12698                           
 12699                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12700  009ABC  0E28               	movlw	40
 12701  009ABE  6EC6               	movwf	4038,c	;volatile
 12702                           
 12703                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12704  009AC0  0E00               	movlw	0
 12705  009AC2  6EC5               	movwf	4037,c	;volatile
 12706                           
 12707                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12708  009AC4  0E00               	movlw	0
 12709  009AC6  6E01               	movwf	___lldiv@dividend,c
 12710  009AC8  0E5A               	movlw	90
 12711  009ACA  6E02               	movwf	___lldiv@dividend+1,c
 12712  009ACC  0E62               	movlw	98
 12713  009ACE  6E03               	movwf	___lldiv@dividend+2,c
 12714  009AD0  0E02               	movlw	2
 12715  009AD2  6E04               	movwf	___lldiv@dividend+3,c
 12716  009AD4  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12717  009AD8  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12718  009ADC  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12719  009AE0  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12720  009AE4  0E02               	movlw	2
 12721  009AE6                     u13265:
 12722  009AE6  90D8               	bcf	status,0,c
 12723  009AE8  3612               	rlcf	??_I2C_Master_Init,f,c
 12724  009AEA  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12725  009AEC  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12726  009AEE  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12727  009AF0  2EE8               	decfsz	wreg,f,c
 12728  009AF2  D7F9               	goto	u13265
 12729  009AF4  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12730  009AF8  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12731  009AFC  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12732  009B00  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12733  009B04  EC66  F04E         	call	___lldiv	;wreg free
 12734  009B08  0401               	decf	?___lldiv,w,c
 12735  009B0A  6EC8               	movwf	4040,c	;volatile
 12736  009B0C  0012               	return		;funcret
 12737  009B0E                     __end_of_I2C_Master_Init:
 12738                           	opt stack 0
 12739                           tblptru	equ	0xFF8
 12740                           tblptrh	equ	0xFF7
 12741                           tblptrl	equ	0xFF6
 12742                           tablat	equ	0xFF5
 12743                           prodh	equ	0xFF4
 12744                           prodl	equ	0xFF3
 12745                           postinc0	equ	0xFEE
 12746                           wreg	equ	0xFE8
 12747                           postdec1	equ	0xFE5
 12748                           plusw1	equ	0xFE3
 12749                           fsr1l	equ	0xFE1
 12750                           indf2	equ	0xFDF
 12751                           postinc2	equ	0xFDE
 12752                           postdec2	equ	0xFDD
 12753                           plusw2	equ	0xFDB
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function ___lldiv *****************
 12759 ;; Defined at:
 12760 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  dividend        4    0[COMRAM] unsigned long 
 12763 ;;  divisor         4    4[COMRAM] unsigned long 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  quotient        4    8[COMRAM] unsigned long 
 12766 ;;  counter         1   12[COMRAM] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  4    0[COMRAM] unsigned long 
 12769 ;; Registers used:
 12770 ;;		wreg, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12776 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;Total ram usage:       13 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; This function calls:
 12783 ;;		Nothing
 12784 ;; This function is called by:
 12785 ;;		_I2C_Master_Init
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text23
 12790  009CCC                     __ptext23:
 12791                           	opt stack 0
 12792  009CCC                     ___lldiv:
 12793                           	opt stack 28
 12794                           
 12795                           ;incstack = 0
 12796  009CCC  0E00               	movlw	0
 12797  009CCE  6E09               	movwf	___lldiv@quotient,c
 12798  009CD0  0E00               	movlw	0
 12799  009CD2  6E0A               	movwf	___lldiv@quotient+1,c
 12800  009CD4  0E00               	movlw	0
 12801  009CD6  6E0B               	movwf	___lldiv@quotient+2,c
 12802  009CD8  0E00               	movlw	0
 12803  009CDA  6E0C               	movwf	___lldiv@quotient+3,c
 12804  009CDC  5005               	movf	___lldiv@divisor,w,c
 12805  009CDE  1006               	iorwf	___lldiv@divisor+1,w,c
 12806  009CE0  1007               	iorwf	___lldiv@divisor+2,w,c
 12807  009CE2  1008               	iorwf	___lldiv@divisor+3,w,c
 12808  009CE4  B4D8               	btfsc	status,2,c
 12809  009CE6  D02A               	goto	l2014
 12810  009CE8  0E01               	movlw	1
 12811  009CEA  6E0D               	movwf	___lldiv@counter,c
 12812  009CEC  D006               	goto	l2009
 12813  009CEE  90D8               	bcf	status,0,c
 12814  009CF0  3605               	rlcf	___lldiv@divisor,f,c
 12815  009CF2  3606               	rlcf	___lldiv@divisor+1,f,c
 12816  009CF4  3607               	rlcf	___lldiv@divisor+2,f,c
 12817  009CF6  3608               	rlcf	___lldiv@divisor+3,f,c
 12818  009CF8  2A0D               	incf	___lldiv@counter,f,c
 12819  009CFA                     l2009:
 12820  009CFA  AE08               	btfss	___lldiv@divisor+3,7,c
 12821  009CFC  D7F8               	goto	l2010
 12822  009CFE                     u9050:
 12823  009CFE  90D8               	bcf	status,0,c
 12824  009D00  3609               	rlcf	___lldiv@quotient,f,c
 12825  009D02  360A               	rlcf	___lldiv@quotient+1,f,c
 12826  009D04  360B               	rlcf	___lldiv@quotient+2,f,c
 12827  009D06  360C               	rlcf	___lldiv@quotient+3,f,c
 12828  009D08  5005               	movf	___lldiv@divisor,w,c
 12829  009D0A  5C01               	subwf	___lldiv@dividend,w,c
 12830  009D0C  5006               	movf	___lldiv@divisor+1,w,c
 12831  009D0E  5802               	subwfb	___lldiv@dividend+1,w,c
 12832  009D10  5007               	movf	___lldiv@divisor+2,w,c
 12833  009D12  5803               	subwfb	___lldiv@dividend+2,w,c
 12834  009D14  5008               	movf	___lldiv@divisor+3,w,c
 12835  009D16  5804               	subwfb	___lldiv@dividend+3,w,c
 12836  009D18  A0D8               	btfss	status,0,c
 12837  009D1A  D009               	goto	l2013
 12838  009D1C  5005               	movf	___lldiv@divisor,w,c
 12839  009D1E  5E01               	subwf	___lldiv@dividend,f,c
 12840  009D20  5006               	movf	___lldiv@divisor+1,w,c
 12841  009D22  5A02               	subwfb	___lldiv@dividend+1,f,c
 12842  009D24  5007               	movf	___lldiv@divisor+2,w,c
 12843  009D26  5A03               	subwfb	___lldiv@dividend+2,f,c
 12844  009D28  5008               	movf	___lldiv@divisor+3,w,c
 12845  009D2A  5A04               	subwfb	___lldiv@dividend+3,f,c
 12846  009D2C  8009               	bsf	___lldiv@quotient,0,c
 12847  009D2E                     l2013:
 12848  009D2E  90D8               	bcf	status,0,c
 12849  009D30  3208               	rrcf	___lldiv@divisor+3,f,c
 12850  009D32  3207               	rrcf	___lldiv@divisor+2,f,c
 12851  009D34  3206               	rrcf	___lldiv@divisor+1,f,c
 12852  009D36  3205               	rrcf	___lldiv@divisor,f,c
 12853  009D38  2E0D               	decfsz	___lldiv@counter,f,c
 12854  009D3A  D7E1               	goto	u9050
 12855  009D3C                     l2014:
 12856  009D3C  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12857  009D40  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12858  009D44  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12859  009D48  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12860  009D4C  0012               	return		;funcret
 12861  009D4E                     __end_of___lldiv:
 12862                           	opt stack 0
 12863                           tblptru	equ	0xFF8
 12864                           tblptrh	equ	0xFF7
 12865                           tblptrl	equ	0xFF6
 12866                           tablat	equ	0xFF5
 12867                           prodh	equ	0xFF4
 12868                           prodl	equ	0xFF3
 12869                           postinc0	equ	0xFEE
 12870                           wreg	equ	0xFE8
 12871                           postdec1	equ	0xFE5
 12872                           plusw1	equ	0xFE3
 12873                           fsr1l	equ	0xFE1
 12874                           indf2	equ	0xFDF
 12875                           postinc2	equ	0xFDE
 12876                           postdec2	equ	0xFDD
 12877                           plusw2	equ	0xFDB
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function _mainOperation *****************
 12883 ;; Defined at:
 12884 ;;		line 1016 in file "operationMode.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;		None
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;  sortedDrawer   16   48[BANK0 ] unsigned int [8]
 12889 ;;  foodTable      16   32[BANK0 ] unsigned int [8]
 12890 ;;  dietTable      16   16[BANK0 ] unsigned int [8]
 12891 ;;  drawerTable    16    0[BANK0 ] unsigned int [8]
 12892 ;;  i               2   78[BANK0 ] unsigned int 
 12893 ;;  trueValue       2   76[BANK0 ] unsigned int 
 12894 ;;  currentDrawe    2   74[BANK0 ] unsigned int 
 12895 ;;  nextDrawer      2   72[BANK0 ] unsigned int 
 12896 ;;  temp            2   70[BANK0 ] unsigned int 
 12897 ;;  longPieces      2   68[BANK0 ] unsigned int 
 12898 ;;  flatPieces      2   66[BANK0 ] unsigned int 
 12899 ;;  roundPieces     2   64[BANK0 ] unsigned int 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  1    wreg      void 
 12902 ;; Registers used:
 12903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12912 ;;      Totals:         2      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12913 ;;Total ram usage:       82 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    3
 12916 ;; This function calls:
 12917 ;;		_configDrawer
 12918 ;;		_distributePieces
 12919 ;;		_findDrawerIndex
 12920 ;;		_getFlatPieces
 12921 ;;		_getLongPieces
 12922 ;;		_getRoundPieces
 12923 ;;		_getUserInputs
 12924 ;;		_initArm
 12925 ;;		_lcdInst
 12926 ;;		_moveHorizontally
 12927 ;;		_moveVertically
 12928 ;;		_printf
 12929 ;;		_sortDrawerList
 12930 ;;		_trapDoor
 12931 ;;		_uartTransmitBlocking
 12932 ;; This function is called by:
 12933 ;;		_main
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text24
 12938  00CE0E                     __ptext24:
 12939                           	opt stack 0
 12940  00CE0E                     _mainOperation:
 12941                           	opt stack 27
 12942                           
 12943                           ;operationMode.c: 1017: unsigned int i = 0;
 12944                           
 12945                           ;incstack = 0
 12946  00CE0E  0E00               	movlw	0
 12947  00CE10  0100               	movlb	0	; () banked
 12948  00CE12  6FCF               	movwf	(mainOperation@i+1)& (0+255),b
 12949  00CE14  0E00               	movlw	0
 12950  00CE16  6FCE               	movwf	mainOperation@i& (0+255),b
 12951                           
 12952                           ;operationMode.c: 1018: unsigned int currentDrawer = 0;
 12953  00CE18  0E00               	movlw	0
 12954  00CE1A  6FCB               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12955  00CE1C  0E00               	movlw	0
 12956  00CE1E  6FCA               	movwf	mainOperation@currentDrawer& (0+255),b
 12957                           
 12958                           ;operationMode.c: 1019: unsigned int temp = 0;
 12959  00CE20  0E00               	movlw	0
 12960  00CE22  6FC7               	movwf	(mainOperation@temp+1)& (0+255),b
 12961  00CE24  0E00               	movlw	0
 12962  00CE26  6FC6               	movwf	mainOperation@temp& (0+255),b
 12963                           
 12964                           ;operationMode.c: 1020: unsigned int nextDrawer = 0;
 12965  00CE28  0E00               	movlw	0
 12966  00CE2A  6FC9               	movwf	(mainOperation@nextDrawer+1)& (0+255),b
 12967  00CE2C  0E00               	movlw	0
 12968  00CE2E  6FC8               	movwf	mainOperation@nextDrawer& (0+255),b
 12969                           
 12970                           ;operationMode.c: 1021: unsigned int trueValue = 0;
 12971  00CE30  0E00               	movlw	0
 12972  00CE32  6FCD               	movwf	(mainOperation@trueValue+1)& (0+255),b
 12973  00CE34  0E00               	movlw	0
 12974  00CE36  6FCC               	movwf	mainOperation@trueValue& (0+255),b
 12975                           
 12976                           ;operationMode.c: 1022: unsigned int roundPieces = 0;
 12977  00CE38  0E00               	movlw	0
 12978  00CE3A  6FC1               	movwf	(mainOperation@roundPieces+1)& (0+255),b
 12979  00CE3C  0E00               	movlw	0
 12980  00CE3E  6FC0               	movwf	mainOperation@roundPieces& (0+255),b
 12981                           
 12982                           ;operationMode.c: 1023: unsigned int flatPieces = 0;
 12983  00CE40  0E00               	movlw	0
 12984  00CE42  6FC3               	movwf	(mainOperation@flatPieces+1)& (0+255),b
 12985  00CE44  0E00               	movlw	0
 12986  00CE46  6FC2               	movwf	mainOperation@flatPieces& (0+255),b
 12987                           
 12988                           ;operationMode.c: 1024: unsigned int longPieces = 0;
 12989  00CE48  0E00               	movlw	0
 12990  00CE4A  6FC5               	movwf	(mainOperation@longPieces+1)& (0+255),b
 12991  00CE4C  0E00               	movlw	0
 12992  00CE4E  6FC4               	movwf	mainOperation@longPieces& (0+255),b
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;operationMode.c: 1026: unsigned int drawerTable[8] = {0,0,0,0,0,0,0,0};
 12996  00CE50  EE21  F0DA         	lfsr	2,mainOperation@F3176
 12997  00CE54  EE10  F080         	lfsr	1,mainOperation@drawerTable
 12998  00CE58  0E0F               	movlw	15
 12999  00CE5A                     u13911:
 13000  00CE5A  CFDB FFE3          	movff	plusw2,plusw1
 13001  00CE5E  06E8               	decf	wreg,f,c
 13002  00CE60  E2FC               	bc	u13911
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;operationMode.c: 1027: unsigned int sortedDrawerTable[8] = {0,0,0,0,0,0,0,0};
 13006  00CE62  EE21  F0CA         	lfsr	2,mainOperation@F3178
 13007  00CE66  EE10  F0B0         	lfsr	1,mainOperation@sortedDrawerTable
 13008  00CE6A  0E0F               	movlw	15
 13009  00CE6C                     u13921:
 13010  00CE6C  CFDB FFE3          	movff	plusw2,plusw1
 13011  00CE70  06E8               	decf	wreg,f,c
 13012  00CE72  E2FC               	bc	u13921
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;operationMode.c: 1028: unsigned int dietTable[8] = {0,0,0,0,0,0,0,0};
 13016  00CE74  EE21  F0BA         	lfsr	2,mainOperation@F3180
 13017  00CE78  EE10  F090         	lfsr	1,mainOperation@dietTable
 13018  00CE7C  0E0F               	movlw	15
 13019  00CE7E                     u13931:
 13020  00CE7E  CFDB FFE3          	movff	plusw2,plusw1
 13021  00CE82  06E8               	decf	wreg,f,c
 13022  00CE84  E2FC               	bc	u13931
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;operationMode.c: 1029: unsigned int foodTable[8] = {0,0,0,0,0,0,0,0};
 13026  00CE86  EE21  F0AA         	lfsr	2,mainOperation@F3182
 13027  00CE8A  EE10  F0A0         	lfsr	1,mainOperation@foodTable
 13028  00CE8E  0E0F               	movlw	15
 13029  00CE90                     u13941:
 13030  00CE90  CFDB FFE3          	movff	plusw2,plusw1
 13031  00CE94  06E8               	decf	wreg,f,c
 13032  00CE96  E2FC               	bc	u13941
 13033                           
 13034                           ;operationMode.c: 1032: currentDrawer = 1;
 13035  00CE98  0E00               	movlw	0
 13036  00CE9A  6FCB               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 13037  00CE9C  0E01               	movlw	1
 13038  00CE9E  6FCA               	movwf	mainOperation@currentDrawer& (0+255),b
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;operationMode.c: 1034: getUserInputs(drawerTable, dietTable, foodTable);
 13042  00CEA0  0E80               	movlw	low mainOperation@drawerTable
 13043  00CEA2  6E07               	movwf	getUserInputs@drawerTable,c
 13044  00CEA4  0E00               	movlw	high mainOperation@drawerTable
 13045  00CEA6  6E08               	movwf	getUserInputs@drawerTable+1,c
 13046  00CEA8  0E90               	movlw	low mainOperation@dietTable
 13047  00CEAA  6E09               	movwf	getUserInputs@dietTable,c
 13048  00CEAC  0E00               	movlw	high mainOperation@dietTable
 13049  00CEAE  6E0A               	movwf	getUserInputs@dietTable+1,c
 13050  00CEB0  0EA0               	movlw	low mainOperation@foodTable
 13051  00CEB2  6E0B               	movwf	getUserInputs@foodTable,c
 13052  00CEB4  0E00               	movlw	high mainOperation@foodTable
 13053  00CEB6  6E0C               	movwf	getUserInputs@foodTable+1,c
 13054  00CEB8  EC73  F053         	call	_getUserInputs	;wreg free
 13055                           
 13056                           ;operationMode.c: 1035: sortDrawerList(drawerTable, sortedDrawerTable);
 13057  00CEBC  0E80               	movlw	low mainOperation@drawerTable
 13058  00CEBE  6E01               	movwf	sortDrawerList@drawerTable,c
 13059  00CEC0  0E00               	movlw	high mainOperation@drawerTable
 13060  00CEC2  6E02               	movwf	sortDrawerList@drawerTable+1,c
 13061  00CEC4  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13062  00CEC6  6E03               	movwf	sortDrawerList@sortedDrawerTable,c
 13063  00CEC8  0E00               	movlw	high mainOperation@sortedDrawerTable
 13064  00CECA  6E04               	movwf	sortDrawerList@sortedDrawerTable+1,c
 13065  00CECC  ECAC  F06F         	call	_sortDrawerList	;wreg free
 13066                           
 13067                           ;operationMode.c: 1037: for (i=0; i<8; i++){
 13068  00CED0  0E00               	movlw	0
 13069  00CED2  0100               	movlb	0	; () banked
 13070  00CED4  6FCF               	movwf	(mainOperation@i+1)& (0+255),b
 13071  00CED6  0E00               	movlw	0
 13072  00CED8  6FCE               	movwf	mainOperation@i& (0+255),b
 13073                           
 13074                           ; BSR set to: 0
 13075  00CEDA  51CF               	movf	(mainOperation@i+1)& (0+255),w,b
 13076  00CEDC  E105               	bnz	u13950
 13077  00CEDE  0E08               	movlw	8
 13078  00CEE0  5DCE               	subwf	mainOperation@i& (0+255),w,b
 13079  00CEE2  B0D8               	btfsc	status,0,c
 13080  00CEE4  D27C               	goto	u13990
 13081  00CEE6  D001               	goto	l647
 13082  00CEE8                     u13950:
 13083                           
 13084                           ; BSR set to: 0
 13085  00CEE8  D27A               	goto	u13990
 13086  00CEEA                     l647:
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;operationMode.c: 1038: if (sortedDrawerTable[i] != 0){
 13090                           
 13091                           ; BSR set to: 0
 13092  00CEEA  90D8               	bcf	status,0,c
 13093  00CEEC  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13094  00CEEE  6ED9               	movwf	fsr2l,c
 13095  00CEF0  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13096  00CEF2  6EDA               	movwf	fsr2h,c
 13097  00CEF4  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13098  00CEF6  26D9               	addwf	fsr2l,f,c
 13099  00CEF8  0E00               	movlw	high mainOperation@sortedDrawerTable
 13100  00CEFA  22DA               	addwfc	fsr2h,f,c
 13101  00CEFC  50DE               	movf	postinc2,w,c
 13102  00CEFE  10DE               	iorwf	postinc2,w,c
 13103  00CF00  B4D8               	btfsc	status,2,c
 13104  00CF02  D267               	goto	l649
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;operationMode.c: 1039: currentDrawer = sortedDrawerTable[i];
 13108  00CF04  90D8               	bcf	status,0,c
 13109  00CF06  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13110  00CF08  6ED9               	movwf	fsr2l,c
 13111  00CF0A  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13112  00CF0C  6EDA               	movwf	fsr2h,c
 13113  00CF0E  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13114  00CF10  26D9               	addwf	fsr2l,f,c
 13115  00CF12  0E00               	movlw	high mainOperation@sortedDrawerTable
 13116  00CF14  22DA               	addwfc	fsr2h,f,c
 13117  00CF16  CFDE F0CA          	movff	postinc2,mainOperation@currentDrawer
 13118  00CF1A  CFDD F0CB          	movff	postdec2,mainOperation@currentDrawer+1
 13119                           
 13120                           ;operationMode.c: 1040: nextDrawer = sortedDrawerTable[i+1];
 13121  00CF1E  C0CE  F039         	movff	mainOperation@i,??_mainOperation
 13122  00CF22  C0CF  F03A         	movff	mainOperation@i+1,??_mainOperation+1
 13123  00CF26  90D8               	bcf	status,0,c
 13124  00CF28  3639               	rlcf	??_mainOperation,f,c
 13125  00CF2A  363A               	rlcf	??_mainOperation+1,f,c
 13126  00CF2C  0E02               	movlw	2
 13127  00CF2E  2639               	addwf	??_mainOperation,f,c
 13128  00CF30  0E00               	movlw	0
 13129  00CF32  223A               	addwfc	??_mainOperation+1,f,c
 13130  00CF34  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13131  00CF36  2439               	addwf	??_mainOperation,w,c
 13132  00CF38  6ED9               	movwf	fsr2l,c
 13133  00CF3A  0E00               	movlw	high mainOperation@sortedDrawerTable
 13134  00CF3C  203A               	addwfc	??_mainOperation+1,w,c
 13135  00CF3E  6EDA               	movwf	fsr2h,c
 13136  00CF40  CFDE F0C8          	movff	postinc2,mainOperation@nextDrawer
 13137  00CF44  CFDD F0C9          	movff	postdec2,mainOperation@nextDrawer+1
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;operationMode.c: 1042: if (currentDrawer != 1 && i == 0){
 13141  00CF48  05CA               	decf	mainOperation@currentDrawer& (0+255),w,b
 13142  00CF4A  11CB               	iorwf	(mainOperation@currentDrawer+1)& (0+255),w,b
 13143  00CF4C  B4D8               	btfsc	status,2,c
 13144  00CF4E  D054               	goto	l650
 13145                           
 13146                           ; BSR set to: 0
 13147  00CF50  51CE               	movf	mainOperation@i& (0+255),w,b
 13148  00CF52  11CF               	iorwf	(mainOperation@i+1)& (0+255),w,b
 13149  00CF54  A4D8               	btfss	status,2,c
 13150  00CF56  D050               	goto	l650
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;operationMode.c: 1043: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13154  00CF58  0E01               	movlw	1
 13155  00CF5A  ECDF  F04B         	call	_lcdInst
 13156  00CF5E  0EC3               	movlw	195
 13157  00CF60  6E39               	movwf	??_mainOperation& (0+255),c
 13158  00CF62  0ECD               	movlw	205
 13159  00CF64                     u15057:
 13160  00CF64  2EE8               	decfsz	wreg,f,c
 13161  00CF66  D7FE               	bra	u15057
 13162  00CF68  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13163  00CF6A  D7FC               	bra	u15057
 13164  00CF6C  F000               	nop	
 13165                           
 13166                           ;operationMode.c: 1044: printf("Moving to");
 13167  00CF6E  0E52               	movlw	low STR_34
 13168  00CF70  6E0D               	movwf	printf@f,c
 13169  00CF72  0EFC               	movlw	high STR_34
 13170  00CF74  6E0E               	movwf	printf@f+1,c
 13171  00CF76  ECBD  F05F         	call	_printf	;wreg free
 13172                           
 13173                           ;operationMode.c: 1045: lcdInst(0xC0);;
 13174  00CF7A  0EC0               	movlw	192
 13175  00CF7C  ECDF  F04B         	call	_lcdInst
 13176                           
 13177                           ;operationMode.c: 1046: printf("drawer %i", sortedDrawerTable[i]);
 13178  00CF80  0E48               	movlw	low STR_35
 13179  00CF82  6E0D               	movwf	printf@f,c
 13180  00CF84  0EFC               	movlw	high STR_35
 13181  00CF86  6E0E               	movwf	printf@f+1,c
 13182  00CF88  90D8               	bcf	status,0,c
 13183  00CF8A  0100               	movlb	0	; () banked
 13184  00CF8C  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13185  00CF8E  6ED9               	movwf	fsr2l,c
 13186  00CF90  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13187  00CF92  6EDA               	movwf	fsr2h,c
 13188  00CF94  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13189  00CF96  26D9               	addwf	fsr2l,f,c
 13190  00CF98  0E00               	movlw	high mainOperation@sortedDrawerTable
 13191  00CF9A  22DA               	addwfc	fsr2h,f,c
 13192  00CF9C  CFDE F00F          	movff	postinc2,?_printf+2
 13193  00CFA0  CFDD F010          	movff	postdec2,?_printf+3
 13194  00CFA4  ECBD  F05F         	call	_printf	;wreg free
 13195                           
 13196                           ;operationMode.c: 1047: temp = moveVertically(currentDrawer, nextDrawer);
 13197  00CFA8  C0CA  F00C         	movff	mainOperation@currentDrawer,moveVertically@currentDrawer
 13198  00CFAC  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveVertically@currentDrawer+1
 13199  00CFB0  C0C8  F00E         	movff	mainOperation@nextDrawer,moveVertically@nextDrawer
 13200  00CFB4  C0C9  F00F         	movff	mainOperation@nextDrawer+1,moveVertically@nextDrawer+1
 13201  00CFB8  ECEA  F05B         	call	_moveVertically	;wreg free
 13202  00CFBC  C00C  F0C6         	movff	?_moveVertically,mainOperation@temp
 13203  00CFC0  C00D  F0C7         	movff	?_moveVertically+1,mainOperation@temp+1
 13204                           
 13205                           ;operationMode.c: 1048: currentDrawer = temp;
 13206  00CFC4  C0C6  F0CA         	movff	mainOperation@temp,mainOperation@currentDrawer
 13207  00CFC8  C0C7  F0CB         	movff	mainOperation@temp+1,mainOperation@currentDrawer+1
 13208                           
 13209                           ;operationMode.c: 1049: moveHorizontally(currentDrawer, nextDrawer);
 13210  00CFCC  C0CA  F00C         	movff	mainOperation@currentDrawer,moveHorizontally@currentDrawer
 13211  00CFD0  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveHorizontally@currentDrawer+1
 13212  00CFD4  C0C8  F00E         	movff	mainOperation@nextDrawer,moveHorizontally@nextDrawer
 13213  00CFD8  C0C9  F00F         	movff	mainOperation@nextDrawer+1,moveHorizontally@nextDrawer+1
 13214  00CFDC  EC33  F057         	call	_moveHorizontally	;wreg free
 13215                           
 13216                           ;operationMode.c: 1050: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13217  00CFE0  0E66               	movlw	102
 13218  00CFE2  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13219  00CFE4  0E76               	movlw	118
 13220  00CFE6  6E39               	movwf	??_mainOperation& (0+255),c
 13221  00CFE8  0EC1               	movlw	193
 13222  00CFEA                     u15067:
 13223  00CFEA  2EE8               	decfsz	wreg,f,c
 13224  00CFEC  D7FE               	bra	u15067
 13225  00CFEE  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13226  00CFF0  D7FC               	bra	u15067
 13227  00CFF2  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13228  00CFF4  D7FA               	bra	u15067
 13229  00CFF6  F000               	nop	
 13230  00CFF8                     l650:
 13231                           
 13232                           ;operationMode.c: 1051: }
 13233                           ;operationMode.c: 1053: uartTransmitBlocking(drawerDown, 1);
 13234  00CFF8  0EF8               	movlw	low _drawerDown
 13235  00CFFA  6E01               	movwf	uartTransmitBlocking@data,c
 13236  00CFFC  0E00               	movlw	high _drawerDown
 13237  00CFFE  6E02               	movwf	uartTransmitBlocking@data+1,c
 13238  00D000  0E01               	movlw	1
 13239  00D002  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13240  00D004  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 13241                           
 13242                           ;operationMode.c: 1054: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13243  00D008  0E33               	movlw	51
 13244  00D00A  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13245  00D00C  0EBB               	movlw	187
 13246  00D00E  6E39               	movwf	??_mainOperation& (0+255),c
 13247  00D010  0EE0               	movlw	224
 13248  00D012                     u15077:
 13249  00D012  2EE8               	decfsz	wreg,f,c
 13250  00D014  D7FE               	bra	u15077
 13251  00D016  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13252  00D018  D7FC               	bra	u15077
 13253  00D01A  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13254  00D01C  D7FA               	bra	u15077
 13255                           
 13256                           ;operationMode.c: 1055: configDrawer(0);
 13257  00D01E  0E00               	movlw	0
 13258  00D020  6E07               	movwf	configDrawer@direction+1,c
 13259  00D022  0E00               	movlw	0
 13260  00D024  6E06               	movwf	configDrawer@direction,c
 13261  00D026  EC59  F04C         	call	_configDrawer	;wreg free
 13262                           
 13263                           ;operationMode.c: 1056: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13264  00D02A  0E33               	movlw	51
 13265  00D02C  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13266  00D02E  0EBB               	movlw	187
 13267  00D030  6E39               	movwf	??_mainOperation& (0+255),c
 13268  00D032  0EE0               	movlw	224
 13269  00D034                     u15087:
 13270  00D034  2EE8               	decfsz	wreg,f,c
 13271  00D036  D7FE               	bra	u15087
 13272  00D038  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13273  00D03A  D7FC               	bra	u15087
 13274  00D03C  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13275  00D03E  D7FA               	bra	u15087
 13276                           
 13277                           ;operationMode.c: 1057: uartTransmitBlocking(drawerUp, 1);
 13278  00D040  0EF9               	movlw	low _drawerUp
 13279  00D042  6E01               	movwf	uartTransmitBlocking@data,c
 13280  00D044  0E00               	movlw	high _drawerUp
 13281  00D046  6E02               	movwf	uartTransmitBlocking@data+1,c
 13282  00D048  0E01               	movlw	1
 13283  00D04A  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13284  00D04C  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 13285                           
 13286                           ;operationMode.c: 1058: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13287  00D050  0E33               	movlw	51
 13288  00D052  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13289  00D054  0EBB               	movlw	187
 13290  00D056  6E39               	movwf	??_mainOperation& (0+255),c
 13291  00D058  0EE0               	movlw	224
 13292  00D05A                     u15097:
 13293  00D05A  2EE8               	decfsz	wreg,f,c
 13294  00D05C  D7FE               	bra	u15097
 13295  00D05E  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13296  00D060  D7FC               	bra	u15097
 13297  00D062  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13298  00D064  D7FA               	bra	u15097
 13299                           
 13300                           ;operationMode.c: 1059: configDrawer(1);
 13301  00D066  0E00               	movlw	0
 13302  00D068  6E07               	movwf	configDrawer@direction+1,c
 13303  00D06A  0E01               	movlw	1
 13304  00D06C  6E06               	movwf	configDrawer@direction,c
 13305  00D06E  EC59  F04C         	call	_configDrawer	;wreg free
 13306                           
 13307                           ;operationMode.c: 1060: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13308  00D072  0E33               	movlw	51
 13309  00D074  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13310  00D076  0EBB               	movlw	187
 13311  00D078  6E39               	movwf	??_mainOperation& (0+255),c
 13312  00D07A  0EE0               	movlw	224
 13313  00D07C                     u15107:
 13314  00D07C  2EE8               	decfsz	wreg,f,c
 13315  00D07E  D7FE               	bra	u15107
 13316  00D080  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13317  00D082  D7FC               	bra	u15107
 13318  00D084  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13319  00D086  D7FA               	bra	u15107
 13320                           
 13321                           ;operationMode.c: 1062: trueValue = findDrawerIndex(drawerTable, sortedDrawerTable[i]);
 13322  00D088  0E80               	movlw	low mainOperation@drawerTable
 13323  00D08A  6E01               	movwf	findDrawerIndex@drawerTable,c
 13324  00D08C  0E00               	movlw	high mainOperation@drawerTable
 13325  00D08E  6E02               	movwf	findDrawerIndex@drawerTable+1,c
 13326  00D090  90D8               	bcf	status,0,c
 13327  00D092  0100               	movlb	0	; () banked
 13328  00D094  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13329  00D096  6ED9               	movwf	fsr2l,c
 13330  00D098  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13331  00D09A  6EDA               	movwf	fsr2h,c
 13332  00D09C  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13333  00D09E  26D9               	addwf	fsr2l,f,c
 13334  00D0A0  0E00               	movlw	high mainOperation@sortedDrawerTable
 13335  00D0A2  22DA               	addwfc	fsr2h,f,c
 13336  00D0A4  CFDE F003          	movff	postinc2,findDrawerIndex@sortedDrawerValue
 13337  00D0A8  CFDD F004          	movff	postdec2,findDrawerIndex@sortedDrawerValue+1
 13338  00D0AC  EC87  F04D         	call	_findDrawerIndex	;wreg free
 13339  00D0B0  C001  F0CC         	movff	?_findDrawerIndex,mainOperation@trueValue
 13340  00D0B4  C002  F0CD         	movff	?_findDrawerIndex+1,mainOperation@trueValue+1
 13341                           
 13342                           ;operationMode.c: 1063: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13343  00D0B8  0E01               	movlw	1
 13344  00D0BA  ECDF  F04B         	call	_lcdInst
 13345  00D0BE  0EC3               	movlw	195
 13346  00D0C0  6E39               	movwf	??_mainOperation& (0+255),c
 13347  00D0C2  0ECD               	movlw	205
 13348  00D0C4                     u15117:
 13349  00D0C4  2EE8               	decfsz	wreg,f,c
 13350  00D0C6  D7FE               	bra	u15117
 13351  00D0C8  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13352  00D0CA  D7FC               	bra	u15117
 13353  00D0CC  F000               	nop	
 13354                           
 13355                           ;operationMode.c: 1064: printf("Diet: %s", inputs[dietTable[trueValue]]);
 13356  00D0CE  0E6E               	movlw	low STR_36
 13357  00D0D0  6E0D               	movwf	printf@f,c
 13358  00D0D2  0EFC               	movlw	high STR_36
 13359  00D0D4  6E0E               	movwf	printf@f+1,c
 13360  00D0D6  90D8               	bcf	status,0,c
 13361  00D0D8  0100               	movlb	0	; () banked
 13362  00D0DA  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13363  00D0DC  6ED9               	movwf	fsr2l,c
 13364  00D0DE  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13365  00D0E0  6EDA               	movwf	fsr2h,c
 13366  00D0E2  0E90               	movlw	low mainOperation@dietTable
 13367  00D0E4  26D9               	addwf	fsr2l,f,c
 13368  00D0E6  0E00               	movlw	high mainOperation@dietTable
 13369  00D0E8  22DA               	addwfc	fsr2h,f,c
 13370  00D0EA  CFDE F039          	movff	postinc2,??_mainOperation
 13371  00D0EE  CFDD F03A          	movff	postdec2,??_mainOperation+1
 13372  00D0F2  90D8               	bcf	status,0,c
 13373  00D0F4  3639               	rlcf	??_mainOperation,f,c
 13374  00D0F6  363A               	rlcf	??_mainOperation+1,f,c
 13375  00D0F8  0E50               	movlw	low _inputs
 13376  00D0FA  2439               	addwf	??_mainOperation,w,c
 13377  00D0FC  6ED9               	movwf	fsr2l,c
 13378  00D0FE  0E02               	movlw	high _inputs
 13379  00D100  203A               	addwfc	??_mainOperation+1,w,c
 13380  00D102  6EDA               	movwf	fsr2h,c
 13381  00D104  CFDE F00F          	movff	postinc2,?_printf+2
 13382  00D108  CFDD F010          	movff	postdec2,?_printf+3
 13383  00D10C  ECBD  F05F         	call	_printf	;wreg free
 13384                           
 13385                           ;operationMode.c: 1065: lcdInst(0xC0);;
 13386  00D110  0EC0               	movlw	192
 13387  00D112  ECDF  F04B         	call	_lcdInst
 13388                           
 13389                           ;operationMode.c: 1066: printf("Food: %s", foodInputs[foodTable[trueValue]]);
 13390  00D116  0E65               	movlw	low STR_37
 13391  00D118  6E0D               	movwf	printf@f,c
 13392  00D11A  0EFC               	movlw	high STR_37
 13393  00D11C  6E0E               	movwf	printf@f+1,c
 13394  00D11E  90D8               	bcf	status,0,c
 13395  00D120  0100               	movlb	0	; () banked
 13396  00D122  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13397  00D124  6ED9               	movwf	fsr2l,c
 13398  00D126  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13399  00D128  6EDA               	movwf	fsr2h,c
 13400  00D12A  0EA0               	movlw	low mainOperation@foodTable
 13401  00D12C  26D9               	addwf	fsr2l,f,c
 13402  00D12E  0E00               	movlw	high mainOperation@foodTable
 13403  00D130  22DA               	addwfc	fsr2h,f,c
 13404  00D132  CFDE F039          	movff	postinc2,??_mainOperation
 13405  00D136  CFDD F03A          	movff	postdec2,??_mainOperation+1
 13406  00D13A  90D8               	bcf	status,0,c
 13407  00D13C  3639               	rlcf	??_mainOperation,f,c
 13408  00D13E  363A               	rlcf	??_mainOperation+1,f,c
 13409  00D140  0E74               	movlw	low _foodInputs
 13410  00D142  2439               	addwf	??_mainOperation,w,c
 13411  00D144  6ED9               	movwf	fsr2l,c
 13412  00D146  0E02               	movlw	high _foodInputs
 13413  00D148  203A               	addwfc	??_mainOperation+1,w,c
 13414  00D14A  6EDA               	movwf	fsr2h,c
 13415  00D14C  CFDE F00F          	movff	postinc2,?_printf+2
 13416  00D150  CFDD F010          	movff	postdec2,?_printf+3
 13417  00D154  ECBD  F05F         	call	_printf	;wreg free
 13418                           
 13419                           ;operationMode.c: 1067: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13420  00D158  0E66               	movlw	102
 13421  00D15A  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13422  00D15C  0E76               	movlw	118
 13423  00D15E  6E39               	movwf	??_mainOperation& (0+255),c
 13424  00D160  0EC1               	movlw	193
 13425  00D162                     u15127:
 13426  00D162  2EE8               	decfsz	wreg,f,c
 13427  00D164  D7FE               	bra	u15127
 13428  00D166  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13429  00D168  D7FC               	bra	u15127
 13430  00D16A  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13431  00D16C  D7FA               	bra	u15127
 13432  00D16E  F000               	nop	
 13433                           
 13434                           ;operationMode.c: 1068: roundPieces = getRoundPieces(dietTable[trueValue], foodTable[tru
      +                          eValue]);
 13435  00D170  90D8               	bcf	status,0,c
 13436  00D172  0100               	movlb	0	; () banked
 13437  00D174  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13438  00D176  6ED9               	movwf	fsr2l,c
 13439  00D178  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13440  00D17A  6EDA               	movwf	fsr2h,c
 13441  00D17C  0E90               	movlw	low mainOperation@dietTable
 13442  00D17E  26D9               	addwf	fsr2l,f,c
 13443  00D180  0E00               	movlw	high mainOperation@dietTable
 13444  00D182  22DA               	addwfc	fsr2h,f,c
 13445  00D184  CFDE F001          	movff	postinc2,getRoundPieces@dietType
 13446  00D188  CFDD F002          	movff	postdec2,getRoundPieces@dietType+1
 13447  00D18C  90D8               	bcf	status,0,c
 13448  00D18E  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13449  00D190  6ED9               	movwf	fsr2l,c
 13450  00D192  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13451  00D194  6EDA               	movwf	fsr2h,c
 13452  00D196  0EA0               	movlw	low mainOperation@foodTable
 13453  00D198  26D9               	addwf	fsr2l,f,c
 13454  00D19A  0E00               	movlw	high mainOperation@foodTable
 13455  00D19C  22DA               	addwfc	fsr2h,f,c
 13456  00D19E  CFDE F003          	movff	postinc2,getRoundPieces@foodType
 13457  00D1A2  CFDD F004          	movff	postdec2,getRoundPieces@foodType+1
 13458  00D1A6  EC92  F054         	call	_getRoundPieces	;wreg free
 13459  00D1AA  C001  F0C0         	movff	?_getRoundPieces,mainOperation@roundPieces
 13460  00D1AE  C002  F0C1         	movff	?_getRoundPieces+1,mainOperation@roundPieces+1
 13461                           
 13462                           ;operationMode.c: 1069: flatPieces = getFlatPieces(dietTable[trueValue], foodTable[trueV
      +                          alue]);
 13463  00D1B2  90D8               	bcf	status,0,c
 13464  00D1B4  0100               	movlb	0	; () banked
 13465  00D1B6  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13466  00D1B8  6ED9               	movwf	fsr2l,c
 13467  00D1BA  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13468  00D1BC  6EDA               	movwf	fsr2h,c
 13469  00D1BE  0E90               	movlw	low mainOperation@dietTable
 13470  00D1C0  26D9               	addwf	fsr2l,f,c
 13471  00D1C2  0E00               	movlw	high mainOperation@dietTable
 13472  00D1C4  22DA               	addwfc	fsr2h,f,c
 13473  00D1C6  CFDE F001          	movff	postinc2,getFlatPieces@dietType
 13474  00D1CA  CFDD F002          	movff	postdec2,getFlatPieces@dietType+1
 13475  00D1CE  90D8               	bcf	status,0,c
 13476  00D1D0  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13477  00D1D2  6ED9               	movwf	fsr2l,c
 13478  00D1D4  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13479  00D1D6  6EDA               	movwf	fsr2h,c
 13480  00D1D8  0EA0               	movlw	low mainOperation@foodTable
 13481  00D1DA  26D9               	addwf	fsr2l,f,c
 13482  00D1DC  0E00               	movlw	high mainOperation@foodTable
 13483  00D1DE  22DA               	addwfc	fsr2h,f,c
 13484  00D1E0  CFDE F003          	movff	postinc2,getFlatPieces@foodType
 13485  00D1E4  CFDD F004          	movff	postdec2,getFlatPieces@foodType+1
 13486  00D1E8  ECC9  F055         	call	_getFlatPieces	;wreg free
 13487  00D1EC  C001  F0C2         	movff	?_getFlatPieces,mainOperation@flatPieces
 13488  00D1F0  C002  F0C3         	movff	?_getFlatPieces+1,mainOperation@flatPieces+1
 13489                           
 13490                           ;operationMode.c: 1070: longPieces = getLongPieces(dietTable[trueValue], foodTable[trueV
      +                          alue]);
 13491  00D1F4  90D8               	bcf	status,0,c
 13492  00D1F6  0100               	movlb	0	; () banked
 13493  00D1F8  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13494  00D1FA  6ED9               	movwf	fsr2l,c
 13495  00D1FC  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13496  00D1FE  6EDA               	movwf	fsr2h,c
 13497  00D200  0E90               	movlw	low mainOperation@dietTable
 13498  00D202  26D9               	addwf	fsr2l,f,c
 13499  00D204  0E00               	movlw	high mainOperation@dietTable
 13500  00D206  22DA               	addwfc	fsr2h,f,c
 13501  00D208  CFDE F001          	movff	postinc2,getLongPieces@dietType
 13502  00D20C  CFDD F002          	movff	postdec2,getLongPieces@dietType+1
 13503  00D210  90D8               	bcf	status,0,c
 13504  00D212  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13505  00D214  6ED9               	movwf	fsr2l,c
 13506  00D216  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13507  00D218  6EDA               	movwf	fsr2h,c
 13508  00D21A  0EA0               	movlw	low mainOperation@foodTable
 13509  00D21C  26D9               	addwf	fsr2l,f,c
 13510  00D21E  0E00               	movlw	high mainOperation@foodTable
 13511  00D220  22DA               	addwfc	fsr2h,f,c
 13512  00D222  CFDE F003          	movff	postinc2,getLongPieces@foodType
 13513  00D226  CFDD F004          	movff	postdec2,getLongPieces@foodType+1
 13514  00D22A  ECED  F057         	call	_getLongPieces	;wreg free
 13515  00D22E  C001  F0C4         	movff	?_getLongPieces,mainOperation@longPieces
 13516  00D232  C002  F0C5         	movff	?_getLongPieces+1,mainOperation@longPieces+1
 13517                           
 13518                           ;operationMode.c: 1071: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13519  00D236  0E01               	movlw	1
 13520  00D238  ECDF  F04B         	call	_lcdInst
 13521  00D23C  0EC3               	movlw	195
 13522  00D23E  6E39               	movwf	??_mainOperation& (0+255),c
 13523  00D240  0ECD               	movlw	205
 13524  00D242                     u15137:
 13525  00D242  2EE8               	decfsz	wreg,f,c
 13526  00D244  D7FE               	bra	u15137
 13527  00D246  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13528  00D248  D7FC               	bra	u15137
 13529  00D24A  F000               	nop	
 13530                           
 13531                           ;operationMode.c: 1072: printf("R:%i F:%i L:%i", roundPieces, flatPieces, longPieces);
 13532  00D24C  0E46               	movlw	low STR_38
 13533  00D24E  6E0D               	movwf	printf@f,c
 13534  00D250  0EFB               	movlw	high STR_38
 13535  00D252  6E0E               	movwf	printf@f+1,c
 13536  00D254  C0C0  F00F         	movff	mainOperation@roundPieces,?_printf+2
 13537  00D258  C0C1  F010         	movff	mainOperation@roundPieces+1,?_printf+3
 13538  00D25C  C0C2  F011         	movff	mainOperation@flatPieces,?_printf+4
 13539  00D260  C0C3  F012         	movff	mainOperation@flatPieces+1,?_printf+5
 13540  00D264  C0C4  F013         	movff	mainOperation@longPieces,?_printf+6
 13541  00D268  C0C5  F014         	movff	mainOperation@longPieces+1,?_printf+7
 13542  00D26C  ECBD  F05F         	call	_printf	;wreg free
 13543                           
 13544                           ;operationMode.c: 1073: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13545  00D270  0E66               	movlw	102
 13546  00D272  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13547  00D274  0E76               	movlw	118
 13548  00D276  6E39               	movwf	??_mainOperation& (0+255),c
 13549  00D278  0EC1               	movlw	193
 13550  00D27A                     u15147:
 13551  00D27A  2EE8               	decfsz	wreg,f,c
 13552  00D27C  D7FE               	bra	u15147
 13553  00D27E  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13554  00D280  D7FC               	bra	u15147
 13555  00D282  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13556  00D284  D7FA               	bra	u15147
 13557  00D286  F000               	nop	
 13558                           
 13559                           ;operationMode.c: 1074: distributePieces(roundPieces, flatPieces, longPieces);
 13560  00D288  C0C0  F00C         	movff	mainOperation@roundPieces,distributePieces@roundPieces
 13561  00D28C  C0C1  F00D         	movff	mainOperation@roundPieces+1,distributePieces@roundPieces+1
 13562  00D290  C0C2  F00E         	movff	mainOperation@flatPieces,distributePieces@flatPieces
 13563  00D294  C0C3  F00F         	movff	mainOperation@flatPieces+1,distributePieces@flatPieces+1
 13564  00D298  C0C4  F010         	movff	mainOperation@longPieces,distributePieces@longPieces
 13565  00D29C  C0C5  F011         	movff	mainOperation@longPieces+1,distributePieces@longPieces+1
 13566  00D2A0  EC7C  F056         	call	_distributePieces	;wreg free
 13567                           
 13568                           ;operationMode.c: 1075: _delay((unsigned long)((5000)*(40000000/4000.0)));
 13569  00D2A4  0EFE               	movlw	254
 13570  00D2A6  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13571  00D2A8  0EA7               	movlw	167
 13572  00D2AA  6E39               	movwf	??_mainOperation& (0+255),c
 13573  00D2AC  0E66               	movlw	102
 13574  00D2AE                     u15157:
 13575  00D2AE  2EE8               	decfsz	wreg,f,c
 13576  00D2B0  D7FE               	bra	u15157
 13577  00D2B2  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13578  00D2B4  D7FC               	bra	u15157
 13579  00D2B6  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13580  00D2B8  D7FA               	bra	u15157
 13581                           
 13582                           ;operationMode.c: 1077: configDrawer(0);
 13583  00D2BA  0E00               	movlw	0
 13584  00D2BC  6E07               	movwf	configDrawer@direction+1,c
 13585  00D2BE  0E00               	movlw	0
 13586  00D2C0  6E06               	movwf	configDrawer@direction,c
 13587  00D2C2  EC59  F04C         	call	_configDrawer	;wreg free
 13588                           
 13589                           ;operationMode.c: 1078: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13590  00D2C6  0E33               	movlw	51
 13591  00D2C8  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13592  00D2CA  0EBB               	movlw	187
 13593  00D2CC  6E39               	movwf	??_mainOperation& (0+255),c
 13594  00D2CE  0EE0               	movlw	224
 13595  00D2D0                     u15167:
 13596  00D2D0  2EE8               	decfsz	wreg,f,c
 13597  00D2D2  D7FE               	bra	u15167
 13598  00D2D4  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13599  00D2D6  D7FC               	bra	u15167
 13600  00D2D8  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13601  00D2DA  D7FA               	bra	u15167
 13602                           
 13603                           ;operationMode.c: 1079: uartTransmitBlocking(drawerDown, 1);
 13604  00D2DC  0EF8               	movlw	low _drawerDown
 13605  00D2DE  6E01               	movwf	uartTransmitBlocking@data,c
 13606  00D2E0  0E00               	movlw	high _drawerDown
 13607  00D2E2  6E02               	movwf	uartTransmitBlocking@data+1,c
 13608  00D2E4  0E01               	movlw	1
 13609  00D2E6  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13610  00D2E8  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 13611                           
 13612                           ;operationMode.c: 1080: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13613  00D2EC  0E33               	movlw	51
 13614  00D2EE  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13615  00D2F0  0EBB               	movlw	187
 13616  00D2F2  6E39               	movwf	??_mainOperation& (0+255),c
 13617  00D2F4  0EE0               	movlw	224
 13618  00D2F6                     u15177:
 13619  00D2F6  2EE8               	decfsz	wreg,f,c
 13620  00D2F8  D7FE               	bra	u15177
 13621  00D2FA  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13622  00D2FC  D7FC               	bra	u15177
 13623  00D2FE  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13624  00D300  D7FA               	bra	u15177
 13625                           
 13626                           ;operationMode.c: 1081: configDrawer(1);
 13627  00D302  0E00               	movlw	0
 13628  00D304  6E07               	movwf	configDrawer@direction+1,c
 13629  00D306  0E01               	movlw	1
 13630  00D308  6E06               	movwf	configDrawer@direction,c
 13631  00D30A  EC59  F04C         	call	_configDrawer	;wreg free
 13632                           
 13633                           ;operationMode.c: 1082: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13634  00D30E  0E33               	movlw	51
 13635  00D310  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13636  00D312  0EBB               	movlw	187
 13637  00D314  6E39               	movwf	??_mainOperation& (0+255),c
 13638  00D316  0EE0               	movlw	224
 13639  00D318                     u15187:
 13640  00D318  2EE8               	decfsz	wreg,f,c
 13641  00D31A  D7FE               	bra	u15187
 13642  00D31C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13643  00D31E  D7FC               	bra	u15187
 13644  00D320  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13645  00D322  D7FA               	bra	u15187
 13646                           
 13647                           ;operationMode.c: 1084: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13648  00D324  0E01               	movlw	1
 13649  00D326  ECDF  F04B         	call	_lcdInst
 13650  00D32A  0EC3               	movlw	195
 13651  00D32C  6E39               	movwf	??_mainOperation& (0+255),c
 13652  00D32E  0ECD               	movlw	205
 13653  00D330                     u15197:
 13654  00D330  2EE8               	decfsz	wreg,f,c
 13655  00D332  D7FE               	bra	u15197
 13656  00D334  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13657  00D336  D7FC               	bra	u15197
 13658  00D338  F000               	nop	
 13659                           
 13660                           ;operationMode.c: 1085: printf("Moving to");
 13661  00D33A  0E52               	movlw	low STR_34
 13662  00D33C  6E0D               	movwf	printf@f,c
 13663  00D33E  0EFC               	movlw	high STR_34
 13664  00D340  6E0E               	movwf	printf@f+1,c
 13665  00D342  ECBD  F05F         	call	_printf	;wreg free
 13666                           
 13667                           ;operationMode.c: 1086: lcdInst(0xC0);;
 13668  00D346  0EC0               	movlw	192
 13669  00D348  ECDF  F04B         	call	_lcdInst
 13670                           
 13671                           ;operationMode.c: 1087: printf("drawer %i", sortedDrawerTable[i+1]);
 13672  00D34C  0E48               	movlw	low STR_35
 13673  00D34E  6E0D               	movwf	printf@f,c
 13674  00D350  0EFC               	movlw	high STR_35
 13675  00D352  6E0E               	movwf	printf@f+1,c
 13676  00D354  C0CE  F039         	movff	mainOperation@i,??_mainOperation
 13677  00D358  C0CF  F03A         	movff	mainOperation@i+1,??_mainOperation+1
 13678  00D35C  90D8               	bcf	status,0,c
 13679  00D35E  3639               	rlcf	??_mainOperation,f,c
 13680  00D360  363A               	rlcf	??_mainOperation+1,f,c
 13681  00D362  0E02               	movlw	2
 13682  00D364  2639               	addwf	??_mainOperation,f,c
 13683  00D366  0E00               	movlw	0
 13684  00D368  223A               	addwfc	??_mainOperation+1,f,c
 13685  00D36A  0EB0               	movlw	low mainOperation@sortedDrawerTable
 13686  00D36C  2439               	addwf	??_mainOperation,w,c
 13687  00D36E  6ED9               	movwf	fsr2l,c
 13688  00D370  0E00               	movlw	high mainOperation@sortedDrawerTable
 13689  00D372  203A               	addwfc	??_mainOperation+1,w,c
 13690  00D374  6EDA               	movwf	fsr2h,c
 13691  00D376  CFDE F00F          	movff	postinc2,?_printf+2
 13692  00D37A  CFDD F010          	movff	postdec2,?_printf+3
 13693  00D37E  ECBD  F05F         	call	_printf	;wreg free
 13694                           
 13695                           ;operationMode.c: 1088: temp = moveVertically(currentDrawer, nextDrawer);
 13696  00D382  C0CA  F00C         	movff	mainOperation@currentDrawer,moveVertically@currentDrawer
 13697  00D386  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveVertically@currentDrawer+1
 13698  00D38A  C0C8  F00E         	movff	mainOperation@nextDrawer,moveVertically@nextDrawer
 13699  00D38E  C0C9  F00F         	movff	mainOperation@nextDrawer+1,moveVertically@nextDrawer+1
 13700  00D392  ECEA  F05B         	call	_moveVertically	;wreg free
 13701  00D396  C00C  F0C6         	movff	?_moveVertically,mainOperation@temp
 13702  00D39A  C00D  F0C7         	movff	?_moveVertically+1,mainOperation@temp+1
 13703                           
 13704                           ;operationMode.c: 1089: currentDrawer = temp;
 13705  00D39E  C0C6  F0CA         	movff	mainOperation@temp,mainOperation@currentDrawer
 13706  00D3A2  C0C7  F0CB         	movff	mainOperation@temp+1,mainOperation@currentDrawer+1
 13707                           
 13708                           ;operationMode.c: 1090: moveHorizontally(currentDrawer, nextDrawer);
 13709  00D3A6  C0CA  F00C         	movff	mainOperation@currentDrawer,moveHorizontally@currentDrawer
 13710  00D3AA  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveHorizontally@currentDrawer+1
 13711  00D3AE  C0C8  F00E         	movff	mainOperation@nextDrawer,moveHorizontally@nextDrawer
 13712  00D3B2  C0C9  F00F         	movff	mainOperation@nextDrawer+1,moveHorizontally@nextDrawer+1
 13713  00D3B6  EC33  F057         	call	_moveHorizontally	;wreg free
 13714                           
 13715                           ;operationMode.c: 1091: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13716  00D3BA  0E66               	movlw	102
 13717  00D3BC  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13718  00D3BE  0E76               	movlw	118
 13719  00D3C0  6E39               	movwf	??_mainOperation& (0+255),c
 13720  00D3C2  0EC1               	movlw	193
 13721  00D3C4                     u15207:
 13722  00D3C4  2EE8               	decfsz	wreg,f,c
 13723  00D3C6  D7FE               	bra	u15207
 13724  00D3C8  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13725  00D3CA  D7FC               	bra	u15207
 13726  00D3CC  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13727  00D3CE  D7FA               	bra	u15207
 13728  00D3D0  F000               	nop	
 13729  00D3D2                     l649:
 13730  00D3D2  0100               	movlb	0	; () banked
 13731  00D3D4  4BCE               	infsnz	mainOperation@i& (0+255),f,b
 13732  00D3D6  2BCF               	incf	(mainOperation@i+1)& (0+255),f,b
 13733                           
 13734                           ; BSR set to: 0
 13735  00D3D8  51CF               	movf	(mainOperation@i+1)& (0+255),w,b
 13736  00D3DA  E101               	bnz	l10794
 13737  00D3DC  D580               	goto	L125
 13738  00D3DE                     u13990:
 13739  00D3DE                     l10794:
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;operationMode.c: 1092: }
 13743                           ;operationMode.c: 1093: }
 13744                           ;operationMode.c: 1094: initArm(currentDrawer);
 13745  00D3DE  C0CA  F00C         	movff	mainOperation@currentDrawer,initArm@currentDrawer
 13746  00D3E2  C0CB  F00D         	movff	mainOperation@currentDrawer+1,initArm@currentDrawer+1
 13747  00D3E6  EC16  F05D         	call	_initArm	;wreg free
 13748                           
 13749                           ;operationMode.c: 1095: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13750  00D3EA  0E01               	movlw	1
 13751  00D3EC  ECDF  F04B         	call	_lcdInst
 13752  00D3F0  0EC3               	movlw	195
 13753  00D3F2  6E39               	movwf	??_mainOperation& (0+255),c
 13754  00D3F4  0ECD               	movlw	205
 13755  00D3F6                     u15217:
 13756  00D3F6  2EE8               	decfsz	wreg,f,c
 13757  00D3F8  D7FE               	bra	u15217
 13758  00D3FA  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13759  00D3FC  D7FC               	bra	u15217
 13760  00D3FE  F000               	nop	
 13761                           
 13762                           ;operationMode.c: 1096: printf("Initializing");
 13763  00D400  0ECF               	movlw	low STR_41
 13764  00D402  6E0D               	movwf	printf@f,c
 13765  00D404  0EFB               	movlw	high STR_41
 13766  00D406  6E0E               	movwf	printf@f+1,c
 13767  00D408  ECBD  F05F         	call	_printf	;wreg free
 13768                           
 13769                           ;operationMode.c: 1097: lcdInst(0xC0);;
 13770  00D40C  0EC0               	movlw	192
 13771  00D40E  ECDF  F04B         	call	_lcdInst
 13772                           
 13773                           ;operationMode.c: 1098: printf("Arm");
 13774  00D412  0EF2               	movlw	low STR_42
 13775  00D414  6E0D               	movwf	printf@f,c
 13776  00D416  0EFC               	movlw	high STR_42
 13777  00D418  6E0E               	movwf	printf@f+1,c
 13778  00D41A  ECBD  F05F         	call	_printf	;wreg free
 13779                           
 13780                           ;operationMode.c: 1099: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13781  00D41E  0E66               	movlw	102
 13782  00D420  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13783  00D422  0E76               	movlw	118
 13784  00D424  6E39               	movwf	??_mainOperation& (0+255),c
 13785  00D426  0EC1               	movlw	193
 13786  00D428                     u15227:
 13787  00D428  2EE8               	decfsz	wreg,f,c
 13788  00D42A  D7FE               	bra	u15227
 13789  00D42C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13790  00D42E  D7FC               	bra	u15227
 13791  00D430  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13792  00D432  D7FA               	bra	u15227
 13793  00D434  F000               	nop	
 13794                           
 13795                           ;operationMode.c: 1102: trapDoor(1);
 13796  00D436  0E00               	movlw	0
 13797  00D438  6E02               	movwf	trapDoor@direction+1,c
 13798  00D43A  0E01               	movlw	1
 13799  00D43C  6E01               	movwf	trapDoor@direction,c
 13800  00D43E  EC2B  F04D         	call	_trapDoor	;wreg free
 13801                           
 13802                           ;operationMode.c: 1103: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13803  00D442  0E01               	movlw	1
 13804  00D444  ECDF  F04B         	call	_lcdInst
 13805  00D448  0EC3               	movlw	195
 13806  00D44A  6E39               	movwf	??_mainOperation& (0+255),c
 13807  00D44C  0ECD               	movlw	205
 13808  00D44E                     u15237:
 13809  00D44E  2EE8               	decfsz	wreg,f,c
 13810  00D450  D7FE               	bra	u15237
 13811  00D452  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13812  00D454  D7FC               	bra	u15237
 13813  00D456  F000               	nop	
 13814                           
 13815                           ;operationMode.c: 1104: printf("Distributing to");
 13816  00D458  0E90               	movlw	low STR_43
 13817  00D45A  6E0D               	movwf	printf@f,c
 13818  00D45C  0EFA               	movlw	high STR_43
 13819  00D45E  6E0E               	movwf	printf@f+1,c
 13820  00D460  ECBD  F05F         	call	_printf	;wreg free
 13821                           
 13822                           ;operationMode.c: 1105: lcdInst(0xC0);;
 13823  00D464  0EC0               	movlw	192
 13824  00D466  ECDF  F04B         	call	_lcdInst
 13825                           
 13826                           ;operationMode.c: 1106: printf("reservoir.");
 13827  00D46A  0E29               	movlw	low STR_44
 13828  00D46C  6E0D               	movwf	printf@f,c
 13829  00D46E  0EFC               	movlw	high STR_44
 13830  00D470  6E0E               	movwf	printf@f+1,c
 13831  00D472  ECBD  F05F         	call	_printf	;wreg free
 13832                           
 13833                           ;operationMode.c: 1107: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13834  00D476  0E66               	movlw	102
 13835  00D478  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13836  00D47A  0E76               	movlw	118
 13837  00D47C  6E39               	movwf	??_mainOperation& (0+255),c
 13838  00D47E  0EC1               	movlw	193
 13839  00D480                     u15247:
 13840  00D480  2EE8               	decfsz	wreg,f,c
 13841  00D482  D7FE               	bra	u15247
 13842  00D484  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13843  00D486  D7FC               	bra	u15247
 13844  00D488  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13845  00D48A  D7FA               	bra	u15247
 13846  00D48C  F000               	nop	
 13847                           
 13848                           ;operationMode.c: 1108: trapDoor(0);
 13849  00D48E  0E00               	movlw	0
 13850  00D490  6E02               	movwf	trapDoor@direction+1,c
 13851  00D492  0E00               	movlw	0
 13852  00D494  6E01               	movwf	trapDoor@direction,c
 13853  00D496  EC2B  F04D         	call	_trapDoor	;wreg free
 13854  00D49A  0012               	return		;funcret
 13855  00D49C                     __end_of_mainOperation:
 13856                           	opt stack 0
 13857                           tblptru	equ	0xFF8
 13858                           tblptrh	equ	0xFF7
 13859                           tblptrl	equ	0xFF6
 13860                           tablat	equ	0xFF5
 13861                           prodh	equ	0xFF4
 13862                           prodl	equ	0xFF3
 13863                           postinc0	equ	0xFEE
 13864                           wreg	equ	0xFE8
 13865                           postdec1	equ	0xFE5
 13866                           plusw1	equ	0xFE3
 13867                           fsr1l	equ	0xFE1
 13868                           indf2	equ	0xFDF
 13869                           postinc2	equ	0xFDE
 13870                           postdec2	equ	0xFDD
 13871                           plusw2	equ	0xFDB
 13872                           fsr2h	equ	0xFDA
 13873                           fsr2l	equ	0xFD9
 13874                           status	equ	0xFD8
 13875                           
 13876 ;; *************** function _trapDoor *****************
 13877 ;; Defined at:
 13878 ;;		line 987 in file "operationMode.c"
 13879 ;; Parameters:    Size  Location     Type
 13880 ;;  direction       2    0[COMRAM] unsigned int 
 13881 ;; Auto vars:     Size  Location     Type
 13882 ;;  i               2    4[COMRAM] unsigned int 
 13883 ;; Return value:  Size  Location     Type
 13884 ;;                  1    wreg      void 
 13885 ;; Registers used:
 13886 ;;		wreg, status,2, status,0
 13887 ;; Tracked objects:
 13888 ;;		On entry : 0/0
 13889 ;;		On exit  : 0/0
 13890 ;;		Unchanged: 0/0
 13891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13892 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13893 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13894 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13896 ;;Total ram usage:        6 bytes
 13897 ;; Hardware stack levels used:    1
 13898 ;; This function calls:
 13899 ;;		Nothing
 13900 ;; This function is called by:
 13901 ;;		_mainOperation
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           	psect	text25
 13906  009A56                     __ptext25:
 13907                           	opt stack 0
 13908  009A56                     _trapDoor:
 13909                           	opt stack 29
 13910                           
 13911                           ;operationMode.c: 992: unsigned int i = 0;
 13912                           
 13913                           ;incstack = 0
 13914  009A56  0E00               	movlw	0
 13915  009A58  6E06               	movwf	trapDoor@i+1,c
 13916  009A5A  0E00               	movlw	0
 13917  009A5C  6E05               	movwf	trapDoor@i,c
 13918                           
 13919                           ;operationMode.c: 995: if (direction == 1){
 13920  009A5E  0401               	decf	trapDoor@direction,w,c
 13921  009A60  1002               	iorwf	trapDoor@direction+1,w,c
 13922  009A62  A4D8               	btfss	status,2,c
 13923  009A64  D00F               	goto	l633
 13924                           
 13925                           ;operationMode.c: 996: LATAbits.LATA4 = 1;
 13926  009A66  8889               	bsf	3977,4,c	;volatile
 13927                           
 13928                           ;operationMode.c: 997: LATAbits.LATA5 = 0;
 13929  009A68  9A89               	bcf	3977,5,c	;volatile
 13930                           
 13931                           ;operationMode.c: 998: LATEbits.LATE1 = 1;
 13932  009A6A  828D               	bsf	3981,1,c	;volatile
 13933                           
 13934                           ;operationMode.c: 999: _delay((unsigned long)((500)*(40000000/4000.0)));
 13935  009A6C  0E1A               	movlw	26
 13936  009A6E  6E04               	movwf	(??_trapDoor+1)& (0+255),c
 13937  009A70  0E5E               	movlw	94
 13938  009A72  6E03               	movwf	??_trapDoor& (0+255),c
 13939  009A74  0E6E               	movlw	110
 13940  009A76                     u15257:
 13941  009A76  2EE8               	decfsz	wreg,f,c
 13942  009A78  D7FE               	bra	u15257
 13943  009A7A  2E03               	decfsz	??_trapDoor& (0+255),f,c
 13944  009A7C  D7FC               	bra	u15257
 13945  009A7E  2E04               	decfsz	(??_trapDoor+1)& (0+255),f,c
 13946  009A80  D7FA               	bra	u15257
 13947  009A82  D012               	goto	L126
 13948  009A84                     l633:
 13949                           
 13950                           ;operationMode.c: 1003: else if (direction == 1){
 13951  009A84  0401               	decf	trapDoor@direction,w,c
 13952  009A86  1002               	iorwf	trapDoor@direction+1,w,c
 13953  009A88  A4D8               	btfss	status,2,c
 13954  009A8A  D00F               	goto	l635
 13955                           
 13956                           ;operationMode.c: 1004: LATAbits.LATA4 = 0;
 13957  009A8C  9889               	bcf	3977,4,c	;volatile
 13958                           
 13959                           ;operationMode.c: 1005: LATAbits.LATA5 = 1;
 13960  009A8E  8A89               	bsf	3977,5,c	;volatile
 13961                           
 13962                           ;operationMode.c: 1006: LATEbits.LATE1 = 1;
 13963  009A90  828D               	bsf	3981,1,c	;volatile
 13964                           
 13965                           ;operationMode.c: 1007: _delay((unsigned long)((500)*(40000000/4000.0)));
 13966  009A92  0E1A               	movlw	26
 13967  009A94  6E04               	movwf	(??_trapDoor+1)& (0+255),c
 13968  009A96  0E5E               	movlw	94
 13969  009A98  6E03               	movwf	??_trapDoor& (0+255),c
 13970  009A9A  0E6E               	movlw	110
 13971  009A9C                     u15267:
 13972  009A9C  2EE8               	decfsz	wreg,f,c
 13973  009A9E  D7FE               	bra	u15267
 13974  009AA0  2E03               	decfsz	??_trapDoor& (0+255),f,c
 13975  009AA2  D7FC               	bra	u15267
 13976  009AA4  2E04               	decfsz	(??_trapDoor+1)& (0+255),f,c
 13977  009AA6  D7FA               	bra	u15267
 13978  009AA8                     L126:
 13979  009AA8  D000               	nop2	
 13980  009AAA                     l635:
 13981                           
 13982                           ;operationMode.c: 1008: }
 13983                           ;operationMode.c: 1010: LATAbits.LATA4 = 0;
 13984  009AAA  9889               	bcf	3977,4,c	;volatile
 13985                           
 13986                           ;operationMode.c: 1011: LATAbits.LATA5 = 0;
 13987  009AAC  9A89               	bcf	3977,5,c	;volatile
 13988                           
 13989                           ;operationMode.c: 1012: LATEbits.LATE1 = 0;
 13990  009AAE  928D               	bcf	3981,1,c	;volatile
 13991  009AB0  0012               	return		;funcret
 13992  009AB2                     __end_of_trapDoor:
 13993                           	opt stack 0
 13994                           tblptru	equ	0xFF8
 13995                           tblptrh	equ	0xFF7
 13996                           tblptrl	equ	0xFF6
 13997                           tablat	equ	0xFF5
 13998                           prodh	equ	0xFF4
 13999                           prodl	equ	0xFF3
 14000                           postinc0	equ	0xFEE
 14001                           wreg	equ	0xFE8
 14002                           postdec1	equ	0xFE5
 14003                           plusw1	equ	0xFE3
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           postdec2	equ	0xFDD
 14008                           plusw2	equ	0xFDB
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8
 14012                           
 14013 ;; *************** function _sortDrawerList *****************
 14014 ;; Defined at:
 14015 ;;		line 59 in file "operationMode.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 14018 ;;		 -> mainOperation@drawerTable(16), 
 14019 ;;  sortedDrawer    2    2[COMRAM] PTR unsigned int 
 14020 ;;		 -> mainOperation@sortedDrawerTable(16), 
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;  sublist3        8   34[COMRAM] unsigned int [4]
 14023 ;;  sublist2        8   26[COMRAM] unsigned int [4]
 14024 ;;  sublist4        8   18[COMRAM] unsigned int [4]
 14025 ;;  sublist1        8   10[COMRAM] unsigned int [4]
 14026 ;;  i               2   54[COMRAM] unsigned int 
 14027 ;;  j               2   52[COMRAM] unsigned int 
 14028 ;;  count3          2   50[COMRAM] unsigned int 
 14029 ;;  count1          2   48[COMRAM] unsigned int 
 14030 ;;  temp            2   46[COMRAM] unsigned int 
 14031 ;;  count2          2   44[COMRAM] unsigned int 
 14032 ;;  count4          2   42[COMRAM] unsigned int 
 14033 ;; Return value:  Size  Location     Type
 14034 ;;                  1    wreg      void 
 14035 ;; Registers used:
 14036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14042 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14043 ;;      Locals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14044 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14045 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14046 ;;Total ram usage:       56 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; This function calls:
 14049 ;;		Nothing
 14050 ;; This function is called by:
 14051 ;;		_mainOperation
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           	psect	text26
 14056  00DF58                     __ptext26:
 14057                           	opt stack 0
 14058  00DF58                     _sortDrawerList:
 14059                           	opt stack 29
 14060                           
 14061                           ;operationMode.c: 60: unsigned int i = 0;
 14062                           
 14063                           ;incstack = 0
 14064  00DF58  0E00               	movlw	0
 14065  00DF5A  6E38               	movwf	sortDrawerList@i+1,c
 14066  00DF5C  0E00               	movlw	0
 14067  00DF5E  6E37               	movwf	sortDrawerList@i,c
 14068                           
 14069                           ;operationMode.c: 61: unsigned int j = 0;
 14070  00DF60  0E00               	movlw	0
 14071  00DF62  6E36               	movwf	sortDrawerList@j+1,c
 14072  00DF64  0E00               	movlw	0
 14073  00DF66  6E35               	movwf	sortDrawerList@j,c
 14074                           
 14075                           ;operationMode.c: 62: unsigned int sublist1[] = {0,0,0,0};
 14076  00DF68  EE20  F0F0         	lfsr	2,sortDrawerList@F3094
 14077  00DF6C  EE10  F00B         	lfsr	1,sortDrawerList@sublist1
 14078  00DF70  0E07               	movlw	7
 14079  00DF72                     u9111:
 14080  00DF72  CFDB FFE3          	movff	plusw2,plusw1
 14081  00DF76  06E8               	decf	wreg,f,c
 14082  00DF78  E2FC               	bc	u9111
 14083                           
 14084                           ;operationMode.c: 63: unsigned int count1 = 0;
 14085  00DF7A  0E00               	movlw	0
 14086  00DF7C  6E32               	movwf	sortDrawerList@count1+1,c
 14087  00DF7E  0E00               	movlw	0
 14088  00DF80  6E31               	movwf	sortDrawerList@count1,c
 14089                           
 14090                           ;operationMode.c: 64: unsigned int sublist2[] = {0,0,0,0};
 14091  00DF82  EE20  F0E8         	lfsr	2,sortDrawerList@F3097
 14092  00DF86  EE10  F01B         	lfsr	1,sortDrawerList@sublist2
 14093  00DF8A  0E07               	movlw	7
 14094  00DF8C                     u9121:
 14095  00DF8C  CFDB FFE3          	movff	plusw2,plusw1
 14096  00DF90  06E8               	decf	wreg,f,c
 14097  00DF92  E2FC               	bc	u9121
 14098                           
 14099                           ;operationMode.c: 65: unsigned int count2 = 0;
 14100  00DF94  0E00               	movlw	0
 14101  00DF96  6E2E               	movwf	sortDrawerList@count2+1,c
 14102  00DF98  0E00               	movlw	0
 14103  00DF9A  6E2D               	movwf	sortDrawerList@count2,c
 14104                           
 14105                           ;operationMode.c: 66: unsigned int sublist3[] = {0,0,0,0};
 14106  00DF9C  EE20  F0E0         	lfsr	2,sortDrawerList@F3100
 14107  00DFA0  EE10  F023         	lfsr	1,sortDrawerList@sublist3
 14108  00DFA4  0E07               	movlw	7
 14109  00DFA6                     u9131:
 14110  00DFA6  CFDB FFE3          	movff	plusw2,plusw1
 14111  00DFAA  06E8               	decf	wreg,f,c
 14112  00DFAC  E2FC               	bc	u9131
 14113                           
 14114                           ;operationMode.c: 67: unsigned int count3 = 0;
 14115  00DFAE  0E00               	movlw	0
 14116  00DFB0  6E34               	movwf	sortDrawerList@count3+1,c
 14117  00DFB2  0E00               	movlw	0
 14118  00DFB4  6E33               	movwf	sortDrawerList@count3,c
 14119                           
 14120                           ;operationMode.c: 68: unsigned int sublist4[] = {0,0,0,0};
 14121  00DFB6  EE20  F0D8         	lfsr	2,sortDrawerList@F3103
 14122  00DFBA  EE10  F013         	lfsr	1,sortDrawerList@sublist4
 14123  00DFBE  0E07               	movlw	7
 14124  00DFC0                     u9141:
 14125  00DFC0  CFDB FFE3          	movff	plusw2,plusw1
 14126  00DFC4  06E8               	decf	wreg,f,c
 14127  00DFC6  E2FC               	bc	u9141
 14128                           
 14129                           ;operationMode.c: 69: unsigned int count4 = 0;
 14130  00DFC8  0E00               	movlw	0
 14131  00DFCA  6E2C               	movwf	sortDrawerList@count4+1,c
 14132  00DFCC  0E00               	movlw	0
 14133  00DFCE  6E2B               	movwf	sortDrawerList@count4,c
 14134                           
 14135                           ;operationMode.c: 70: unsigned int temp;
 14136                           ;operationMode.c: 72: for (i=0; i<8; i++){
 14137  00DFD0  0E00               	movlw	0
 14138  00DFD2  6E38               	movwf	sortDrawerList@i+1,c
 14139  00DFD4  0E00               	movlw	0
 14140  00DFD6  6E37               	movwf	sortDrawerList@i,c
 14141  00DFD8                     l7932:
 14142  00DFD8  5038               	movf	sortDrawerList@i+1,w,c
 14143  00DFDA  E11D               	bnz	l7942
 14144  00DFDC  0E08               	movlw	8
 14145  00DFDE  5C37               	subwf	sortDrawerList@i,w,c
 14146  00DFE0  B0D8               	btfsc	status,0,c
 14147  00DFE2  D019               	goto	u9160
 14148                           
 14149                           ;operationMode.c: 73: sortedDrawerTable[i] = drawerTable[i];
 14150  00DFE4  90D8               	bcf	status,0,c
 14151  00DFE6  3437               	rlcf	sortDrawerList@i,w,c
 14152  00DFE8  6ED9               	movwf	fsr2l,c
 14153  00DFEA  3438               	rlcf	sortDrawerList@i+1,w,c
 14154  00DFEC  6EDA               	movwf	fsr2h,c
 14155  00DFEE  5001               	movf	sortDrawerList@drawerTable,w,c
 14156  00DFF0  26D9               	addwf	fsr2l,f,c
 14157  00DFF2  5002               	movf	sortDrawerList@drawerTable+1,w,c
 14158  00DFF4  22DA               	addwfc	fsr2h,f,c
 14159  00DFF6  90D8               	bcf	status,0,c
 14160  00DFF8  3437               	rlcf	sortDrawerList@i,w,c
 14161  00DFFA  6EE1               	movwf	fsr1l,c
 14162  00DFFC  3438               	rlcf	sortDrawerList@i+1,w,c
 14163  00DFFE  6EE2               	movwf	fsr1h,c
 14164  00E000  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14165  00E002  26E1               	addwf	fsr1l,f,c
 14166  00E004  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14167  00E006  22E2               	addwfc	fsr1h,f,c
 14168  00E008  CFDE FFE6          	movff	postinc2,postinc1
 14169  00E00C  CFDD FFE5          	movff	postdec2,postdec1
 14170  00E010  4A37               	infsnz	sortDrawerList@i,f,c
 14171  00E012  2A38               	incf	sortDrawerList@i+1,f,c
 14172  00E014  D7E1               	goto	l7932
 14173  00E016                     u9160:
 14174  00E016                     l7942:
 14175                           
 14176                           ;operationMode.c: 74: }
 14177                           ;operationMode.c: 76: for(i=0; i<8; i++){
 14178  00E016  0E00               	movlw	0
 14179  00E018  6E38               	movwf	sortDrawerList@i+1,c
 14180  00E01A  0E00               	movlw	0
 14181  00E01C  6E37               	movwf	sortDrawerList@i,c
 14182  00E01E  5038               	movf	sortDrawerList@i+1,w,c
 14183  00E020  E105               	bnz	u9170
 14184  00E022  0E08               	movlw	8
 14185  00E024  5C37               	subwf	sortDrawerList@i,w,c
 14186  00E026  B0D8               	btfsc	status,0,c
 14187  00E028  D149               	goto	u9340
 14188  00E02A  D001               	goto	l163
 14189  00E02C                     u9170:
 14190  00E02C  D147               	goto	u9340
 14191  00E02E                     l163:
 14192                           
 14193                           ;operationMode.c: 77: if (sortedDrawerTable[i] == 1 || sortedDrawerTable[i] == 2 || sort
      +                          edDrawerTable[i] == 3 || sortedDrawerTable[i] == 4){
 14194  00E02E  90D8               	bcf	status,0,c
 14195  00E030  3437               	rlcf	sortDrawerList@i,w,c
 14196  00E032  6ED9               	movwf	fsr2l,c
 14197  00E034  3438               	rlcf	sortDrawerList@i+1,w,c
 14198  00E036  6EDA               	movwf	fsr2h,c
 14199  00E038  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14200  00E03A  26D9               	addwf	fsr2l,f,c
 14201  00E03C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14202  00E03E  22DA               	addwfc	fsr2h,f,c
 14203  00E040  04DE               	decf	postinc2,w,c
 14204  00E042  10DE               	iorwf	postinc2,w,c
 14205  00E044  B4D8               	btfsc	status,2,c
 14206  00E046  D02A               	goto	u9210
 14207  00E048  90D8               	bcf	status,0,c
 14208  00E04A  3437               	rlcf	sortDrawerList@i,w,c
 14209  00E04C  6ED9               	movwf	fsr2l,c
 14210  00E04E  3438               	rlcf	sortDrawerList@i+1,w,c
 14211  00E050  6EDA               	movwf	fsr2h,c
 14212  00E052  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14213  00E054  26D9               	addwf	fsr2l,f,c
 14214  00E056  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14215  00E058  22DA               	addwfc	fsr2h,f,c
 14216  00E05A  0E02               	movlw	2
 14217  00E05C  18DE               	xorwf	postinc2,w,c
 14218  00E05E  10DE               	iorwf	postinc2,w,c
 14219  00E060  B4D8               	btfsc	status,2,c
 14220  00E062  D01C               	goto	u9210
 14221  00E064  90D8               	bcf	status,0,c
 14222  00E066  3437               	rlcf	sortDrawerList@i,w,c
 14223  00E068  6ED9               	movwf	fsr2l,c
 14224  00E06A  3438               	rlcf	sortDrawerList@i+1,w,c
 14225  00E06C  6EDA               	movwf	fsr2h,c
 14226  00E06E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14227  00E070  26D9               	addwf	fsr2l,f,c
 14228  00E072  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14229  00E074  22DA               	addwfc	fsr2h,f,c
 14230  00E076  0E03               	movlw	3
 14231  00E078  18DE               	xorwf	postinc2,w,c
 14232  00E07A  10DE               	iorwf	postinc2,w,c
 14233  00E07C  B4D8               	btfsc	status,2,c
 14234  00E07E  D00E               	goto	u9210
 14235  00E080  90D8               	bcf	status,0,c
 14236  00E082  3437               	rlcf	sortDrawerList@i,w,c
 14237  00E084  6ED9               	movwf	fsr2l,c
 14238  00E086  3438               	rlcf	sortDrawerList@i+1,w,c
 14239  00E088  6EDA               	movwf	fsr2h,c
 14240  00E08A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14241  00E08C  26D9               	addwf	fsr2l,f,c
 14242  00E08E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14243  00E090  22DA               	addwfc	fsr2h,f,c
 14244  00E092  0E04               	movlw	4
 14245  00E094  18DE               	xorwf	postinc2,w,c
 14246  00E096  10DE               	iorwf	postinc2,w,c
 14247  00E098  A4D8               	btfss	status,2,c
 14248  00E09A  D019               	goto	l165
 14249  00E09C                     u9210:
 14250                           
 14251                           ;operationMode.c: 78: sublist1[count1]=sortedDrawerTable[i];
 14252  00E09C  90D8               	bcf	status,0,c
 14253  00E09E  3437               	rlcf	sortDrawerList@i,w,c
 14254  00E0A0  6ED9               	movwf	fsr2l,c
 14255  00E0A2  3438               	rlcf	sortDrawerList@i+1,w,c
 14256  00E0A4  6EDA               	movwf	fsr2h,c
 14257  00E0A6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14258  00E0A8  26D9               	addwf	fsr2l,f,c
 14259  00E0AA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14260  00E0AC  22DA               	addwfc	fsr2h,f,c
 14261  00E0AE  90D8               	bcf	status,0,c
 14262  00E0B0  3431               	rlcf	sortDrawerList@count1,w,c
 14263  00E0B2  6EE1               	movwf	fsr1l,c
 14264  00E0B4  3432               	rlcf	sortDrawerList@count1+1,w,c
 14265  00E0B6  6EE2               	movwf	fsr1h,c
 14266  00E0B8  0E0B               	movlw	low sortDrawerList@sublist1
 14267  00E0BA  26E1               	addwf	fsr1l,f,c
 14268  00E0BC  0E00               	movlw	high sortDrawerList@sublist1
 14269  00E0BE  22E2               	addwfc	fsr1h,f,c
 14270  00E0C0  CFDE FFE6          	movff	postinc2,postinc1
 14271  00E0C4  CFDD FFE5          	movff	postdec2,postdec1
 14272                           
 14273                           ;operationMode.c: 79: count1 += 1;
 14274  00E0C8  4A31               	infsnz	sortDrawerList@count1,f,c
 14275  00E0CA  2A32               	incf	sortDrawerList@count1+1,f,c
 14276                           
 14277                           ;operationMode.c: 80: }
 14278  00E0CC  D0F2               	goto	l177
 14279  00E0CE                     l165:
 14280                           
 14281                           ;operationMode.c: 81: else if (sortedDrawerTable[i] == 5 || sortedDrawerTable[i] == 6 ||
      +                           sortedDrawerTable[i] == 7 || sortedDrawerTable[i] == 8){
 14282  00E0CE  90D8               	bcf	status,0,c
 14283  00E0D0  3437               	rlcf	sortDrawerList@i,w,c
 14284  00E0D2  6ED9               	movwf	fsr2l,c
 14285  00E0D4  3438               	rlcf	sortDrawerList@i+1,w,c
 14286  00E0D6  6EDA               	movwf	fsr2h,c
 14287  00E0D8  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14288  00E0DA  26D9               	addwf	fsr2l,f,c
 14289  00E0DC  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14290  00E0DE  22DA               	addwfc	fsr2h,f,c
 14291  00E0E0  0E05               	movlw	5
 14292  00E0E2  18DE               	xorwf	postinc2,w,c
 14293  00E0E4  10DE               	iorwf	postinc2,w,c
 14294  00E0E6  B4D8               	btfsc	status,2,c
 14295  00E0E8  D02A               	goto	u9250
 14296  00E0EA  90D8               	bcf	status,0,c
 14297  00E0EC  3437               	rlcf	sortDrawerList@i,w,c
 14298  00E0EE  6ED9               	movwf	fsr2l,c
 14299  00E0F0  3438               	rlcf	sortDrawerList@i+1,w,c
 14300  00E0F2  6EDA               	movwf	fsr2h,c
 14301  00E0F4  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14302  00E0F6  26D9               	addwf	fsr2l,f,c
 14303  00E0F8  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14304  00E0FA  22DA               	addwfc	fsr2h,f,c
 14305  00E0FC  0E06               	movlw	6
 14306  00E0FE  18DE               	xorwf	postinc2,w,c
 14307  00E100  10DE               	iorwf	postinc2,w,c
 14308  00E102  B4D8               	btfsc	status,2,c
 14309  00E104  D01C               	goto	u9250
 14310  00E106  90D8               	bcf	status,0,c
 14311  00E108  3437               	rlcf	sortDrawerList@i,w,c
 14312  00E10A  6ED9               	movwf	fsr2l,c
 14313  00E10C  3438               	rlcf	sortDrawerList@i+1,w,c
 14314  00E10E  6EDA               	movwf	fsr2h,c
 14315  00E110  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14316  00E112  26D9               	addwf	fsr2l,f,c
 14317  00E114  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14318  00E116  22DA               	addwfc	fsr2h,f,c
 14319  00E118  0E07               	movlw	7
 14320  00E11A  18DE               	xorwf	postinc2,w,c
 14321  00E11C  10DE               	iorwf	postinc2,w,c
 14322  00E11E  B4D8               	btfsc	status,2,c
 14323  00E120  D00E               	goto	u9250
 14324  00E122  90D8               	bcf	status,0,c
 14325  00E124  3437               	rlcf	sortDrawerList@i,w,c
 14326  00E126  6ED9               	movwf	fsr2l,c
 14327  00E128  3438               	rlcf	sortDrawerList@i+1,w,c
 14328  00E12A  6EDA               	movwf	fsr2h,c
 14329  00E12C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14330  00E12E  26D9               	addwf	fsr2l,f,c
 14331  00E130  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14332  00E132  22DA               	addwfc	fsr2h,f,c
 14333  00E134  0E08               	movlw	8
 14334  00E136  18DE               	xorwf	postinc2,w,c
 14335  00E138  10DE               	iorwf	postinc2,w,c
 14336  00E13A  A4D8               	btfss	status,2,c
 14337  00E13C  D019               	goto	l169
 14338  00E13E                     u9250:
 14339                           
 14340                           ;operationMode.c: 82: sublist2[count2]=sortedDrawerTable[i];
 14341  00E13E  90D8               	bcf	status,0,c
 14342  00E140  3437               	rlcf	sortDrawerList@i,w,c
 14343  00E142  6ED9               	movwf	fsr2l,c
 14344  00E144  3438               	rlcf	sortDrawerList@i+1,w,c
 14345  00E146  6EDA               	movwf	fsr2h,c
 14346  00E148  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14347  00E14A  26D9               	addwf	fsr2l,f,c
 14348  00E14C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14349  00E14E  22DA               	addwfc	fsr2h,f,c
 14350  00E150  90D8               	bcf	status,0,c
 14351  00E152  342D               	rlcf	sortDrawerList@count2,w,c
 14352  00E154  6EE1               	movwf	fsr1l,c
 14353  00E156  342E               	rlcf	sortDrawerList@count2+1,w,c
 14354  00E158  6EE2               	movwf	fsr1h,c
 14355  00E15A  0E1B               	movlw	low sortDrawerList@sublist2
 14356  00E15C  26E1               	addwf	fsr1l,f,c
 14357  00E15E  0E00               	movlw	high sortDrawerList@sublist2
 14358  00E160  22E2               	addwfc	fsr1h,f,c
 14359  00E162  CFDE FFE6          	movff	postinc2,postinc1
 14360  00E166  CFDD FFE5          	movff	postdec2,postdec1
 14361                           
 14362                           ;operationMode.c: 83: count2 += 1;
 14363  00E16A  4A2D               	infsnz	sortDrawerList@count2,f,c
 14364  00E16C  2A2E               	incf	sortDrawerList@count2+1,f,c
 14365                           
 14366                           ;operationMode.c: 84: }
 14367  00E16E  D0A1               	goto	l177
 14368  00E170                     l169:
 14369                           
 14370                           ;operationMode.c: 85: else if (sortedDrawerTable[i] == 9 || sortedDrawerTable[i] == 10 |
      +                          | sortedDrawerTable[i] == 11 || sortedDrawerTable[i] == 12){
 14371  00E170  90D8               	bcf	status,0,c
 14372  00E172  3437               	rlcf	sortDrawerList@i,w,c
 14373  00E174  6ED9               	movwf	fsr2l,c
 14374  00E176  3438               	rlcf	sortDrawerList@i+1,w,c
 14375  00E178  6EDA               	movwf	fsr2h,c
 14376  00E17A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14377  00E17C  26D9               	addwf	fsr2l,f,c
 14378  00E17E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14379  00E180  22DA               	addwfc	fsr2h,f,c
 14380  00E182  0E09               	movlw	9
 14381  00E184  18DE               	xorwf	postinc2,w,c
 14382  00E186  10DE               	iorwf	postinc2,w,c
 14383  00E188  B4D8               	btfsc	status,2,c
 14384  00E18A  D02A               	goto	u9290
 14385  00E18C  90D8               	bcf	status,0,c
 14386  00E18E  3437               	rlcf	sortDrawerList@i,w,c
 14387  00E190  6ED9               	movwf	fsr2l,c
 14388  00E192  3438               	rlcf	sortDrawerList@i+1,w,c
 14389  00E194  6EDA               	movwf	fsr2h,c
 14390  00E196  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14391  00E198  26D9               	addwf	fsr2l,f,c
 14392  00E19A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14393  00E19C  22DA               	addwfc	fsr2h,f,c
 14394  00E19E  0E0A               	movlw	10
 14395  00E1A0  18DE               	xorwf	postinc2,w,c
 14396  00E1A2  10DE               	iorwf	postinc2,w,c
 14397  00E1A4  B4D8               	btfsc	status,2,c
 14398  00E1A6  D01C               	goto	u9290
 14399  00E1A8  90D8               	bcf	status,0,c
 14400  00E1AA  3437               	rlcf	sortDrawerList@i,w,c
 14401  00E1AC  6ED9               	movwf	fsr2l,c
 14402  00E1AE  3438               	rlcf	sortDrawerList@i+1,w,c
 14403  00E1B0  6EDA               	movwf	fsr2h,c
 14404  00E1B2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14405  00E1B4  26D9               	addwf	fsr2l,f,c
 14406  00E1B6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14407  00E1B8  22DA               	addwfc	fsr2h,f,c
 14408  00E1BA  0E0B               	movlw	11
 14409  00E1BC  18DE               	xorwf	postinc2,w,c
 14410  00E1BE  10DE               	iorwf	postinc2,w,c
 14411  00E1C0  B4D8               	btfsc	status,2,c
 14412  00E1C2  D00E               	goto	u9290
 14413  00E1C4  90D8               	bcf	status,0,c
 14414  00E1C6  3437               	rlcf	sortDrawerList@i,w,c
 14415  00E1C8  6ED9               	movwf	fsr2l,c
 14416  00E1CA  3438               	rlcf	sortDrawerList@i+1,w,c
 14417  00E1CC  6EDA               	movwf	fsr2h,c
 14418  00E1CE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14419  00E1D0  26D9               	addwf	fsr2l,f,c
 14420  00E1D2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14421  00E1D4  22DA               	addwfc	fsr2h,f,c
 14422  00E1D6  0E0C               	movlw	12
 14423  00E1D8  18DE               	xorwf	postinc2,w,c
 14424  00E1DA  10DE               	iorwf	postinc2,w,c
 14425  00E1DC  A4D8               	btfss	status,2,c
 14426  00E1DE  D019               	goto	l173
 14427  00E1E0                     u9290:
 14428                           
 14429                           ;operationMode.c: 86: sublist3[count3]=sortedDrawerTable[i];
 14430  00E1E0  90D8               	bcf	status,0,c
 14431  00E1E2  3437               	rlcf	sortDrawerList@i,w,c
 14432  00E1E4  6ED9               	movwf	fsr2l,c
 14433  00E1E6  3438               	rlcf	sortDrawerList@i+1,w,c
 14434  00E1E8  6EDA               	movwf	fsr2h,c
 14435  00E1EA  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14436  00E1EC  26D9               	addwf	fsr2l,f,c
 14437  00E1EE  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14438  00E1F0  22DA               	addwfc	fsr2h,f,c
 14439  00E1F2  90D8               	bcf	status,0,c
 14440  00E1F4  3433               	rlcf	sortDrawerList@count3,w,c
 14441  00E1F6  6EE1               	movwf	fsr1l,c
 14442  00E1F8  3434               	rlcf	sortDrawerList@count3+1,w,c
 14443  00E1FA  6EE2               	movwf	fsr1h,c
 14444  00E1FC  0E23               	movlw	low sortDrawerList@sublist3
 14445  00E1FE  26E1               	addwf	fsr1l,f,c
 14446  00E200  0E00               	movlw	high sortDrawerList@sublist3
 14447  00E202  22E2               	addwfc	fsr1h,f,c
 14448  00E204  CFDE FFE6          	movff	postinc2,postinc1
 14449  00E208  CFDD FFE5          	movff	postdec2,postdec1
 14450                           
 14451                           ;operationMode.c: 87: count3 += 1;
 14452  00E20C  4A33               	infsnz	sortDrawerList@count3,f,c
 14453  00E20E  2A34               	incf	sortDrawerList@count3+1,f,c
 14454                           
 14455                           ;operationMode.c: 88: }
 14456  00E210  D050               	goto	l177
 14457  00E212                     l173:
 14458                           
 14459                           ;operationMode.c: 89: else if (sortedDrawerTable[i] == 13 || sortedDrawerTable[i] == 14 
      +                          || sortedDrawerTable[i] == 15 || sortedDrawerTable[i] == 16){
 14460  00E212  90D8               	bcf	status,0,c
 14461  00E214  3437               	rlcf	sortDrawerList@i,w,c
 14462  00E216  6ED9               	movwf	fsr2l,c
 14463  00E218  3438               	rlcf	sortDrawerList@i+1,w,c
 14464  00E21A  6EDA               	movwf	fsr2h,c
 14465  00E21C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14466  00E21E  26D9               	addwf	fsr2l,f,c
 14467  00E220  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14468  00E222  22DA               	addwfc	fsr2h,f,c
 14469  00E224  0E0D               	movlw	13
 14470  00E226  18DE               	xorwf	postinc2,w,c
 14471  00E228  10DE               	iorwf	postinc2,w,c
 14472  00E22A  B4D8               	btfsc	status,2,c
 14473  00E22C  D02A               	goto	u9330
 14474  00E22E  90D8               	bcf	status,0,c
 14475  00E230  3437               	rlcf	sortDrawerList@i,w,c
 14476  00E232  6ED9               	movwf	fsr2l,c
 14477  00E234  3438               	rlcf	sortDrawerList@i+1,w,c
 14478  00E236  6EDA               	movwf	fsr2h,c
 14479  00E238  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14480  00E23A  26D9               	addwf	fsr2l,f,c
 14481  00E23C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14482  00E23E  22DA               	addwfc	fsr2h,f,c
 14483  00E240  0E0E               	movlw	14
 14484  00E242  18DE               	xorwf	postinc2,w,c
 14485  00E244  10DE               	iorwf	postinc2,w,c
 14486  00E246  B4D8               	btfsc	status,2,c
 14487  00E248  D01C               	goto	u9330
 14488  00E24A  90D8               	bcf	status,0,c
 14489  00E24C  3437               	rlcf	sortDrawerList@i,w,c
 14490  00E24E  6ED9               	movwf	fsr2l,c
 14491  00E250  3438               	rlcf	sortDrawerList@i+1,w,c
 14492  00E252  6EDA               	movwf	fsr2h,c
 14493  00E254  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14494  00E256  26D9               	addwf	fsr2l,f,c
 14495  00E258  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14496  00E25A  22DA               	addwfc	fsr2h,f,c
 14497  00E25C  0E0F               	movlw	15
 14498  00E25E  18DE               	xorwf	postinc2,w,c
 14499  00E260  10DE               	iorwf	postinc2,w,c
 14500  00E262  B4D8               	btfsc	status,2,c
 14501  00E264  D00E               	goto	u9330
 14502  00E266  90D8               	bcf	status,0,c
 14503  00E268  3437               	rlcf	sortDrawerList@i,w,c
 14504  00E26A  6ED9               	movwf	fsr2l,c
 14505  00E26C  3438               	rlcf	sortDrawerList@i+1,w,c
 14506  00E26E  6EDA               	movwf	fsr2h,c
 14507  00E270  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14508  00E272  26D9               	addwf	fsr2l,f,c
 14509  00E274  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14510  00E276  22DA               	addwfc	fsr2h,f,c
 14511  00E278  0E10               	movlw	16
 14512  00E27A  18DE               	xorwf	postinc2,w,c
 14513  00E27C  10DE               	iorwf	postinc2,w,c
 14514  00E27E  A4D8               	btfss	status,2,c
 14515  00E280  D018               	goto	l177
 14516  00E282                     u9330:
 14517                           
 14518                           ;operationMode.c: 90: sublist4[count4]=sortedDrawerTable[i];
 14519  00E282  90D8               	bcf	status,0,c
 14520  00E284  3437               	rlcf	sortDrawerList@i,w,c
 14521  00E286  6ED9               	movwf	fsr2l,c
 14522  00E288  3438               	rlcf	sortDrawerList@i+1,w,c
 14523  00E28A  6EDA               	movwf	fsr2h,c
 14524  00E28C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14525  00E28E  26D9               	addwf	fsr2l,f,c
 14526  00E290  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14527  00E292  22DA               	addwfc	fsr2h,f,c
 14528  00E294  90D8               	bcf	status,0,c
 14529  00E296  342B               	rlcf	sortDrawerList@count4,w,c
 14530  00E298  6EE1               	movwf	fsr1l,c
 14531  00E29A  342C               	rlcf	sortDrawerList@count4+1,w,c
 14532  00E29C  6EE2               	movwf	fsr1h,c
 14533  00E29E  0E13               	movlw	low sortDrawerList@sublist4
 14534  00E2A0  26E1               	addwf	fsr1l,f,c
 14535  00E2A2  0E00               	movlw	high sortDrawerList@sublist4
 14536  00E2A4  22E2               	addwfc	fsr1h,f,c
 14537  00E2A6  CFDE FFE6          	movff	postinc2,postinc1
 14538  00E2AA  CFDD FFE5          	movff	postdec2,postdec1
 14539                           
 14540                           ;operationMode.c: 91: count4 += 1;
 14541  00E2AE  4A2B               	infsnz	sortDrawerList@count4,f,c
 14542  00E2B0  2A2C               	incf	sortDrawerList@count4+1,f,c
 14543  00E2B2                     l177:
 14544  00E2B2  4A37               	infsnz	sortDrawerList@i,f,c
 14545  00E2B4  2A38               	incf	sortDrawerList@i+1,f,c
 14546  00E2B6  5038               	movf	sortDrawerList@i+1,w,c
 14547  00E2B8  E101               	bnz	l8000
 14548  00E2BA  D6B3               	goto	L127
 14549  00E2BC                     u9340:
 14550  00E2BC                     l8000:
 14551                           
 14552                           ;operationMode.c: 92: }
 14553                           ;operationMode.c: 93: }
 14554                           ;operationMode.c: 95: for (i=0; i<count1; i++){
 14555  00E2BC  0E00               	movlw	0
 14556  00E2BE  6E38               	movwf	sortDrawerList@i+1,c
 14557  00E2C0  0E00               	movlw	0
 14558  00E2C2  6E37               	movwf	sortDrawerList@i,c
 14559  00E2C4  D057               	goto	l180
 14560  00E2C6                     
 14561                           ;operationMode.c: 96: for (j=0; j<count1; j++){
 14562  00E2C6  0E00               	movlw	0
 14563  00E2C8  6E36               	movwf	sortDrawerList@j+1,c
 14564  00E2CA  0E00               	movlw	0
 14565  00E2CC  6E35               	movwf	sortDrawerList@j,c
 14566  00E2CE  D04A               	goto	l182
 14567  00E2D0                     
 14568                           ;operationMode.c: 97: if (sublist1[j] > sublist1[i]){
 14569  00E2D0  90D8               	bcf	status,0,c
 14570  00E2D2  3435               	rlcf	sortDrawerList@j,w,c
 14571  00E2D4  6ED9               	movwf	fsr2l,c
 14572  00E2D6  3436               	rlcf	sortDrawerList@j+1,w,c
 14573  00E2D8  6EDA               	movwf	fsr2h,c
 14574  00E2DA  0E0B               	movlw	low sortDrawerList@sublist1
 14575  00E2DC  26D9               	addwf	fsr2l,f,c
 14576  00E2DE  0E00               	movlw	high sortDrawerList@sublist1
 14577  00E2E0  22DA               	addwfc	fsr2h,f,c
 14578  00E2E2  90D8               	bcf	status,0,c
 14579  00E2E4  3437               	rlcf	sortDrawerList@i,w,c
 14580  00E2E6  6EE1               	movwf	fsr1l,c
 14581  00E2E8  3438               	rlcf	sortDrawerList@i+1,w,c
 14582  00E2EA  6EE2               	movwf	fsr1h,c
 14583  00E2EC  0E0B               	movlw	low sortDrawerList@sublist1
 14584  00E2EE  26E1               	addwf	fsr1l,f,c
 14585  00E2F0  0E00               	movlw	high sortDrawerList@sublist1
 14586  00E2F2  22E2               	addwfc	fsr1h,f,c
 14587  00E2F4  50DE               	movf	postinc2,w,c
 14588  00E2F6  5CE6               	subwf	postinc1,w,c
 14589  00E2F8  50DE               	movf	postinc2,w,c
 14590  00E2FA  58E6               	subwfb	postinc1,w,c
 14591  00E2FC  B0D8               	btfsc	status,0,c
 14592  00E2FE  D030               	goto	l184
 14593                           
 14594                           ;operationMode.c: 98: temp = sublist1[i];
 14595  00E300  90D8               	bcf	status,0,c
 14596  00E302  3437               	rlcf	sortDrawerList@i,w,c
 14597  00E304  6ED9               	movwf	fsr2l,c
 14598  00E306  3438               	rlcf	sortDrawerList@i+1,w,c
 14599  00E308  6EDA               	movwf	fsr2h,c
 14600  00E30A  0E0B               	movlw	low sortDrawerList@sublist1
 14601  00E30C  26D9               	addwf	fsr2l,f,c
 14602  00E30E  0E00               	movlw	high sortDrawerList@sublist1
 14603  00E310  22DA               	addwfc	fsr2h,f,c
 14604  00E312  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14605  00E316  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14606                           
 14607                           ;operationMode.c: 99: sublist1[i] = sublist1[j];
 14608  00E31A  90D8               	bcf	status,0,c
 14609  00E31C  3435               	rlcf	sortDrawerList@j,w,c
 14610  00E31E  6ED9               	movwf	fsr2l,c
 14611  00E320  3436               	rlcf	sortDrawerList@j+1,w,c
 14612  00E322  6EDA               	movwf	fsr2h,c
 14613  00E324  0E0B               	movlw	low sortDrawerList@sublist1
 14614  00E326  26D9               	addwf	fsr2l,f,c
 14615  00E328  0E00               	movlw	high sortDrawerList@sublist1
 14616  00E32A  22DA               	addwfc	fsr2h,f,c
 14617  00E32C  90D8               	bcf	status,0,c
 14618  00E32E  3437               	rlcf	sortDrawerList@i,w,c
 14619  00E330  6EE1               	movwf	fsr1l,c
 14620  00E332  3438               	rlcf	sortDrawerList@i+1,w,c
 14621  00E334  6EE2               	movwf	fsr1h,c
 14622  00E336  0E0B               	movlw	low sortDrawerList@sublist1
 14623  00E338  26E1               	addwf	fsr1l,f,c
 14624  00E33A  0E00               	movlw	high sortDrawerList@sublist1
 14625  00E33C  22E2               	addwfc	fsr1h,f,c
 14626  00E33E  CFDE FFE6          	movff	postinc2,postinc1
 14627  00E342  CFDD FFE5          	movff	postdec2,postdec1
 14628                           
 14629                           ;operationMode.c: 100: sublist1[j] = temp;
 14630  00E346  90D8               	bcf	status,0,c
 14631  00E348  3435               	rlcf	sortDrawerList@j,w,c
 14632  00E34A  6ED9               	movwf	fsr2l,c
 14633  00E34C  3436               	rlcf	sortDrawerList@j+1,w,c
 14634  00E34E  6EDA               	movwf	fsr2h,c
 14635  00E350  0E0B               	movlw	low sortDrawerList@sublist1
 14636  00E352  26D9               	addwf	fsr2l,f,c
 14637  00E354  0E00               	movlw	high sortDrawerList@sublist1
 14638  00E356  22DA               	addwfc	fsr2h,f,c
 14639  00E358  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14640  00E35C  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14641  00E360                     l184:
 14642  00E360  4A35               	infsnz	sortDrawerList@j,f,c
 14643  00E362  2A36               	incf	sortDrawerList@j+1,f,c
 14644  00E364                     l182:
 14645  00E364  5031               	movf	sortDrawerList@count1,w,c
 14646  00E366  5C35               	subwf	sortDrawerList@j,w,c
 14647  00E368  5032               	movf	sortDrawerList@count1+1,w,c
 14648  00E36A  5836               	subwfb	sortDrawerList@j+1,w,c
 14649  00E36C  A0D8               	btfss	status,0,c
 14650  00E36E  D7B0               	goto	l183
 14651  00E370  4A37               	infsnz	sortDrawerList@i,f,c
 14652  00E372  2A38               	incf	sortDrawerList@i+1,f,c
 14653  00E374                     l180:
 14654  00E374  5031               	movf	sortDrawerList@count1,w,c
 14655  00E376  5C37               	subwf	sortDrawerList@i,w,c
 14656  00E378  5032               	movf	sortDrawerList@count1+1,w,c
 14657  00E37A  5838               	subwfb	sortDrawerList@i+1,w,c
 14658  00E37C  A0D8               	btfss	status,0,c
 14659  00E37E  D7A3               	goto	l181
 14660                           
 14661                           ;operationMode.c: 101: }
 14662                           ;operationMode.c: 102: }
 14663                           ;operationMode.c: 103: }
 14664                           ;operationMode.c: 105: for (i=0; i<count3; i++){
 14665  00E380  0E00               	movlw	0
 14666  00E382  6E38               	movwf	sortDrawerList@i+1,c
 14667  00E384  0E00               	movlw	0
 14668  00E386  6E37               	movwf	sortDrawerList@i,c
 14669  00E388  D057               	goto	l187
 14670  00E38A                     
 14671                           ;operationMode.c: 106: for (j=0; j<count3; j++){
 14672  00E38A  0E00               	movlw	0
 14673  00E38C  6E36               	movwf	sortDrawerList@j+1,c
 14674  00E38E  0E00               	movlw	0
 14675  00E390  6E35               	movwf	sortDrawerList@j,c
 14676  00E392  D04A               	goto	l189
 14677  00E394                     
 14678                           ;operationMode.c: 107: if (sublist3[j] > sublist3[i]){
 14679  00E394  90D8               	bcf	status,0,c
 14680  00E396  3435               	rlcf	sortDrawerList@j,w,c
 14681  00E398  6ED9               	movwf	fsr2l,c
 14682  00E39A  3436               	rlcf	sortDrawerList@j+1,w,c
 14683  00E39C  6EDA               	movwf	fsr2h,c
 14684  00E39E  0E23               	movlw	low sortDrawerList@sublist3
 14685  00E3A0  26D9               	addwf	fsr2l,f,c
 14686  00E3A2  0E00               	movlw	high sortDrawerList@sublist3
 14687  00E3A4  22DA               	addwfc	fsr2h,f,c
 14688  00E3A6  90D8               	bcf	status,0,c
 14689  00E3A8  3437               	rlcf	sortDrawerList@i,w,c
 14690  00E3AA  6EE1               	movwf	fsr1l,c
 14691  00E3AC  3438               	rlcf	sortDrawerList@i+1,w,c
 14692  00E3AE  6EE2               	movwf	fsr1h,c
 14693  00E3B0  0E23               	movlw	low sortDrawerList@sublist3
 14694  00E3B2  26E1               	addwf	fsr1l,f,c
 14695  00E3B4  0E00               	movlw	high sortDrawerList@sublist3
 14696  00E3B6  22E2               	addwfc	fsr1h,f,c
 14697  00E3B8  50DE               	movf	postinc2,w,c
 14698  00E3BA  5CE6               	subwf	postinc1,w,c
 14699  00E3BC  50DE               	movf	postinc2,w,c
 14700  00E3BE  58E6               	subwfb	postinc1,w,c
 14701  00E3C0  B0D8               	btfsc	status,0,c
 14702  00E3C2  D030               	goto	l191
 14703                           
 14704                           ;operationMode.c: 108: temp = sublist3[i];
 14705  00E3C4  90D8               	bcf	status,0,c
 14706  00E3C6  3437               	rlcf	sortDrawerList@i,w,c
 14707  00E3C8  6ED9               	movwf	fsr2l,c
 14708  00E3CA  3438               	rlcf	sortDrawerList@i+1,w,c
 14709  00E3CC  6EDA               	movwf	fsr2h,c
 14710  00E3CE  0E23               	movlw	low sortDrawerList@sublist3
 14711  00E3D0  26D9               	addwf	fsr2l,f,c
 14712  00E3D2  0E00               	movlw	high sortDrawerList@sublist3
 14713  00E3D4  22DA               	addwfc	fsr2h,f,c
 14714  00E3D6  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14715  00E3DA  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14716                           
 14717                           ;operationMode.c: 109: sublist3[i] = sublist3[j];
 14718  00E3DE  90D8               	bcf	status,0,c
 14719  00E3E0  3435               	rlcf	sortDrawerList@j,w,c
 14720  00E3E2  6ED9               	movwf	fsr2l,c
 14721  00E3E4  3436               	rlcf	sortDrawerList@j+1,w,c
 14722  00E3E6  6EDA               	movwf	fsr2h,c
 14723  00E3E8  0E23               	movlw	low sortDrawerList@sublist3
 14724  00E3EA  26D9               	addwf	fsr2l,f,c
 14725  00E3EC  0E00               	movlw	high sortDrawerList@sublist3
 14726  00E3EE  22DA               	addwfc	fsr2h,f,c
 14727  00E3F0  90D8               	bcf	status,0,c
 14728  00E3F2  3437               	rlcf	sortDrawerList@i,w,c
 14729  00E3F4  6EE1               	movwf	fsr1l,c
 14730  00E3F6  3438               	rlcf	sortDrawerList@i+1,w,c
 14731  00E3F8  6EE2               	movwf	fsr1h,c
 14732  00E3FA  0E23               	movlw	low sortDrawerList@sublist3
 14733  00E3FC  26E1               	addwf	fsr1l,f,c
 14734  00E3FE  0E00               	movlw	high sortDrawerList@sublist3
 14735  00E400  22E2               	addwfc	fsr1h,f,c
 14736  00E402  CFDE FFE6          	movff	postinc2,postinc1
 14737  00E406  CFDD FFE5          	movff	postdec2,postdec1
 14738                           
 14739                           ;operationMode.c: 110: sublist3[j] = temp;
 14740  00E40A  90D8               	bcf	status,0,c
 14741  00E40C  3435               	rlcf	sortDrawerList@j,w,c
 14742  00E40E  6ED9               	movwf	fsr2l,c
 14743  00E410  3436               	rlcf	sortDrawerList@j+1,w,c
 14744  00E412  6EDA               	movwf	fsr2h,c
 14745  00E414  0E23               	movlw	low sortDrawerList@sublist3
 14746  00E416  26D9               	addwf	fsr2l,f,c
 14747  00E418  0E00               	movlw	high sortDrawerList@sublist3
 14748  00E41A  22DA               	addwfc	fsr2h,f,c
 14749  00E41C  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14750  00E420  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14751  00E424                     l191:
 14752  00E424  4A35               	infsnz	sortDrawerList@j,f,c
 14753  00E426  2A36               	incf	sortDrawerList@j+1,f,c
 14754  00E428                     l189:
 14755  00E428  5033               	movf	sortDrawerList@count3,w,c
 14756  00E42A  5C35               	subwf	sortDrawerList@j,w,c
 14757  00E42C  5034               	movf	sortDrawerList@count3+1,w,c
 14758  00E42E  5836               	subwfb	sortDrawerList@j+1,w,c
 14759  00E430  A0D8               	btfss	status,0,c
 14760  00E432  D7B0               	goto	l190
 14761  00E434  4A37               	infsnz	sortDrawerList@i,f,c
 14762  00E436  2A38               	incf	sortDrawerList@i+1,f,c
 14763  00E438                     l187:
 14764  00E438  5033               	movf	sortDrawerList@count3,w,c
 14765  00E43A  5C37               	subwf	sortDrawerList@i,w,c
 14766  00E43C  5034               	movf	sortDrawerList@count3+1,w,c
 14767  00E43E  5838               	subwfb	sortDrawerList@i+1,w,c
 14768  00E440  A0D8               	btfss	status,0,c
 14769  00E442  D7A3               	goto	l188
 14770                           
 14771                           ;operationMode.c: 111: }
 14772                           ;operationMode.c: 112: }
 14773                           ;operationMode.c: 113: }
 14774                           ;operationMode.c: 115: for (i=0; i<count2; i++){
 14775  00E444  0E00               	movlw	0
 14776  00E446  6E38               	movwf	sortDrawerList@i+1,c
 14777  00E448  0E00               	movlw	0
 14778  00E44A  6E37               	movwf	sortDrawerList@i,c
 14779  00E44C  D057               	goto	l194
 14780  00E44E                     
 14781                           ;operationMode.c: 116: for (j=0; j<count2; j++){
 14782  00E44E  0E00               	movlw	0
 14783  00E450  6E36               	movwf	sortDrawerList@j+1,c
 14784  00E452  0E00               	movlw	0
 14785  00E454  6E35               	movwf	sortDrawerList@j,c
 14786  00E456  D04A               	goto	l196
 14787  00E458                     
 14788                           ;operationMode.c: 117: if (sublist2[j] < sublist2[i]){
 14789  00E458  90D8               	bcf	status,0,c
 14790  00E45A  3437               	rlcf	sortDrawerList@i,w,c
 14791  00E45C  6ED9               	movwf	fsr2l,c
 14792  00E45E  3438               	rlcf	sortDrawerList@i+1,w,c
 14793  00E460  6EDA               	movwf	fsr2h,c
 14794  00E462  0E1B               	movlw	low sortDrawerList@sublist2
 14795  00E464  26D9               	addwf	fsr2l,f,c
 14796  00E466  0E00               	movlw	high sortDrawerList@sublist2
 14797  00E468  22DA               	addwfc	fsr2h,f,c
 14798  00E46A  90D8               	bcf	status,0,c
 14799  00E46C  3435               	rlcf	sortDrawerList@j,w,c
 14800  00E46E  6EE1               	movwf	fsr1l,c
 14801  00E470  3436               	rlcf	sortDrawerList@j+1,w,c
 14802  00E472  6EE2               	movwf	fsr1h,c
 14803  00E474  0E1B               	movlw	low sortDrawerList@sublist2
 14804  00E476  26E1               	addwf	fsr1l,f,c
 14805  00E478  0E00               	movlw	high sortDrawerList@sublist2
 14806  00E47A  22E2               	addwfc	fsr1h,f,c
 14807  00E47C  50DE               	movf	postinc2,w,c
 14808  00E47E  5CE6               	subwf	postinc1,w,c
 14809  00E480  50DE               	movf	postinc2,w,c
 14810  00E482  58E6               	subwfb	postinc1,w,c
 14811  00E484  B0D8               	btfsc	status,0,c
 14812  00E486  D030               	goto	l198
 14813                           
 14814                           ;operationMode.c: 118: temp = sublist2[i];
 14815  00E488  90D8               	bcf	status,0,c
 14816  00E48A  3437               	rlcf	sortDrawerList@i,w,c
 14817  00E48C  6ED9               	movwf	fsr2l,c
 14818  00E48E  3438               	rlcf	sortDrawerList@i+1,w,c
 14819  00E490  6EDA               	movwf	fsr2h,c
 14820  00E492  0E1B               	movlw	low sortDrawerList@sublist2
 14821  00E494  26D9               	addwf	fsr2l,f,c
 14822  00E496  0E00               	movlw	high sortDrawerList@sublist2
 14823  00E498  22DA               	addwfc	fsr2h,f,c
 14824  00E49A  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14825  00E49E  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14826                           
 14827                           ;operationMode.c: 119: sublist2[i] = sublist2[j];
 14828  00E4A2  90D8               	bcf	status,0,c
 14829  00E4A4  3435               	rlcf	sortDrawerList@j,w,c
 14830  00E4A6  6ED9               	movwf	fsr2l,c
 14831  00E4A8  3436               	rlcf	sortDrawerList@j+1,w,c
 14832  00E4AA  6EDA               	movwf	fsr2h,c
 14833  00E4AC  0E1B               	movlw	low sortDrawerList@sublist2
 14834  00E4AE  26D9               	addwf	fsr2l,f,c
 14835  00E4B0  0E00               	movlw	high sortDrawerList@sublist2
 14836  00E4B2  22DA               	addwfc	fsr2h,f,c
 14837  00E4B4  90D8               	bcf	status,0,c
 14838  00E4B6  3437               	rlcf	sortDrawerList@i,w,c
 14839  00E4B8  6EE1               	movwf	fsr1l,c
 14840  00E4BA  3438               	rlcf	sortDrawerList@i+1,w,c
 14841  00E4BC  6EE2               	movwf	fsr1h,c
 14842  00E4BE  0E1B               	movlw	low sortDrawerList@sublist2
 14843  00E4C0  26E1               	addwf	fsr1l,f,c
 14844  00E4C2  0E00               	movlw	high sortDrawerList@sublist2
 14845  00E4C4  22E2               	addwfc	fsr1h,f,c
 14846  00E4C6  CFDE FFE6          	movff	postinc2,postinc1
 14847  00E4CA  CFDD FFE5          	movff	postdec2,postdec1
 14848                           
 14849                           ;operationMode.c: 120: sublist2[j] = temp;
 14850  00E4CE  90D8               	bcf	status,0,c
 14851  00E4D0  3435               	rlcf	sortDrawerList@j,w,c
 14852  00E4D2  6ED9               	movwf	fsr2l,c
 14853  00E4D4  3436               	rlcf	sortDrawerList@j+1,w,c
 14854  00E4D6  6EDA               	movwf	fsr2h,c
 14855  00E4D8  0E1B               	movlw	low sortDrawerList@sublist2
 14856  00E4DA  26D9               	addwf	fsr2l,f,c
 14857  00E4DC  0E00               	movlw	high sortDrawerList@sublist2
 14858  00E4DE  22DA               	addwfc	fsr2h,f,c
 14859  00E4E0  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14860  00E4E4  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14861  00E4E8                     l198:
 14862  00E4E8  4A35               	infsnz	sortDrawerList@j,f,c
 14863  00E4EA  2A36               	incf	sortDrawerList@j+1,f,c
 14864  00E4EC                     l196:
 14865  00E4EC  502D               	movf	sortDrawerList@count2,w,c
 14866  00E4EE  5C35               	subwf	sortDrawerList@j,w,c
 14867  00E4F0  502E               	movf	sortDrawerList@count2+1,w,c
 14868  00E4F2  5836               	subwfb	sortDrawerList@j+1,w,c
 14869  00E4F4  A0D8               	btfss	status,0,c
 14870  00E4F6  D7B0               	goto	l197
 14871  00E4F8  4A37               	infsnz	sortDrawerList@i,f,c
 14872  00E4FA  2A38               	incf	sortDrawerList@i+1,f,c
 14873  00E4FC                     l194:
 14874  00E4FC  502D               	movf	sortDrawerList@count2,w,c
 14875  00E4FE  5C37               	subwf	sortDrawerList@i,w,c
 14876  00E500  502E               	movf	sortDrawerList@count2+1,w,c
 14877  00E502  5838               	subwfb	sortDrawerList@i+1,w,c
 14878  00E504  A0D8               	btfss	status,0,c
 14879  00E506  D7A3               	goto	l195
 14880                           
 14881                           ;operationMode.c: 121: }
 14882                           ;operationMode.c: 122: }
 14883                           ;operationMode.c: 123: }
 14884                           ;operationMode.c: 125: for (i=0; i<count4; i++){
 14885  00E508  0E00               	movlw	0
 14886  00E50A  6E38               	movwf	sortDrawerList@i+1,c
 14887  00E50C  0E00               	movlw	0
 14888  00E50E  6E37               	movwf	sortDrawerList@i,c
 14889  00E510  D057               	goto	l201
 14890  00E512                     
 14891                           ;operationMode.c: 126: for (j=0; j<count4; j++){
 14892  00E512  0E00               	movlw	0
 14893  00E514  6E36               	movwf	sortDrawerList@j+1,c
 14894  00E516  0E00               	movlw	0
 14895  00E518  6E35               	movwf	sortDrawerList@j,c
 14896  00E51A  D04A               	goto	l203
 14897  00E51C                     
 14898                           ;operationMode.c: 127: if (sublist4[j] < sublist4[i]){
 14899  00E51C  90D8               	bcf	status,0,c
 14900  00E51E  3437               	rlcf	sortDrawerList@i,w,c
 14901  00E520  6ED9               	movwf	fsr2l,c
 14902  00E522  3438               	rlcf	sortDrawerList@i+1,w,c
 14903  00E524  6EDA               	movwf	fsr2h,c
 14904  00E526  0E13               	movlw	low sortDrawerList@sublist4
 14905  00E528  26D9               	addwf	fsr2l,f,c
 14906  00E52A  0E00               	movlw	high sortDrawerList@sublist4
 14907  00E52C  22DA               	addwfc	fsr2h,f,c
 14908  00E52E  90D8               	bcf	status,0,c
 14909  00E530  3435               	rlcf	sortDrawerList@j,w,c
 14910  00E532  6EE1               	movwf	fsr1l,c
 14911  00E534  3436               	rlcf	sortDrawerList@j+1,w,c
 14912  00E536  6EE2               	movwf	fsr1h,c
 14913  00E538  0E13               	movlw	low sortDrawerList@sublist4
 14914  00E53A  26E1               	addwf	fsr1l,f,c
 14915  00E53C  0E00               	movlw	high sortDrawerList@sublist4
 14916  00E53E  22E2               	addwfc	fsr1h,f,c
 14917  00E540  50DE               	movf	postinc2,w,c
 14918  00E542  5CE6               	subwf	postinc1,w,c
 14919  00E544  50DE               	movf	postinc2,w,c
 14920  00E546  58E6               	subwfb	postinc1,w,c
 14921  00E548  B0D8               	btfsc	status,0,c
 14922  00E54A  D030               	goto	l205
 14923                           
 14924                           ;operationMode.c: 128: temp = sublist4[i];
 14925  00E54C  90D8               	bcf	status,0,c
 14926  00E54E  3437               	rlcf	sortDrawerList@i,w,c
 14927  00E550  6ED9               	movwf	fsr2l,c
 14928  00E552  3438               	rlcf	sortDrawerList@i+1,w,c
 14929  00E554  6EDA               	movwf	fsr2h,c
 14930  00E556  0E13               	movlw	low sortDrawerList@sublist4
 14931  00E558  26D9               	addwf	fsr2l,f,c
 14932  00E55A  0E00               	movlw	high sortDrawerList@sublist4
 14933  00E55C  22DA               	addwfc	fsr2h,f,c
 14934  00E55E  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14935  00E562  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14936                           
 14937                           ;operationMode.c: 129: sublist4[i] = sublist4[j];
 14938  00E566  90D8               	bcf	status,0,c
 14939  00E568  3435               	rlcf	sortDrawerList@j,w,c
 14940  00E56A  6ED9               	movwf	fsr2l,c
 14941  00E56C  3436               	rlcf	sortDrawerList@j+1,w,c
 14942  00E56E  6EDA               	movwf	fsr2h,c
 14943  00E570  0E13               	movlw	low sortDrawerList@sublist4
 14944  00E572  26D9               	addwf	fsr2l,f,c
 14945  00E574  0E00               	movlw	high sortDrawerList@sublist4
 14946  00E576  22DA               	addwfc	fsr2h,f,c
 14947  00E578  90D8               	bcf	status,0,c
 14948  00E57A  3437               	rlcf	sortDrawerList@i,w,c
 14949  00E57C  6EE1               	movwf	fsr1l,c
 14950  00E57E  3438               	rlcf	sortDrawerList@i+1,w,c
 14951  00E580  6EE2               	movwf	fsr1h,c
 14952  00E582  0E13               	movlw	low sortDrawerList@sublist4
 14953  00E584  26E1               	addwf	fsr1l,f,c
 14954  00E586  0E00               	movlw	high sortDrawerList@sublist4
 14955  00E588  22E2               	addwfc	fsr1h,f,c
 14956  00E58A  CFDE FFE6          	movff	postinc2,postinc1
 14957  00E58E  CFDD FFE5          	movff	postdec2,postdec1
 14958                           
 14959                           ;operationMode.c: 130: sublist4[j] = temp;
 14960  00E592  90D8               	bcf	status,0,c
 14961  00E594  3435               	rlcf	sortDrawerList@j,w,c
 14962  00E596  6ED9               	movwf	fsr2l,c
 14963  00E598  3436               	rlcf	sortDrawerList@j+1,w,c
 14964  00E59A  6EDA               	movwf	fsr2h,c
 14965  00E59C  0E13               	movlw	low sortDrawerList@sublist4
 14966  00E59E  26D9               	addwf	fsr2l,f,c
 14967  00E5A0  0E00               	movlw	high sortDrawerList@sublist4
 14968  00E5A2  22DA               	addwfc	fsr2h,f,c
 14969  00E5A4  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14970  00E5A8  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14971  00E5AC                     l205:
 14972  00E5AC  4A35               	infsnz	sortDrawerList@j,f,c
 14973  00E5AE  2A36               	incf	sortDrawerList@j+1,f,c
 14974  00E5B0                     l203:
 14975  00E5B0  502B               	movf	sortDrawerList@count4,w,c
 14976  00E5B2  5C35               	subwf	sortDrawerList@j,w,c
 14977  00E5B4  502C               	movf	sortDrawerList@count4+1,w,c
 14978  00E5B6  5836               	subwfb	sortDrawerList@j+1,w,c
 14979  00E5B8  A0D8               	btfss	status,0,c
 14980  00E5BA  D7B0               	goto	l204
 14981  00E5BC  4A37               	infsnz	sortDrawerList@i,f,c
 14982  00E5BE  2A38               	incf	sortDrawerList@i+1,f,c
 14983  00E5C0                     l201:
 14984  00E5C0  502B               	movf	sortDrawerList@count4,w,c
 14985  00E5C2  5C37               	subwf	sortDrawerList@i,w,c
 14986  00E5C4  502C               	movf	sortDrawerList@count4+1,w,c
 14987  00E5C6  5838               	subwfb	sortDrawerList@i+1,w,c
 14988  00E5C8  A0D8               	btfss	status,0,c
 14989  00E5CA  D7A3               	goto	l202
 14990                           
 14991                           ;operationMode.c: 131: }
 14992                           ;operationMode.c: 132: }
 14993                           ;operationMode.c: 133: }
 14994                           ;operationMode.c: 135: if (sublist3[count3 - 1] == 10 || sublist3[count3 - 1] == 9){
 14995  00E5CC  0EFE               	movlw	254
 14996  00E5CE  6E05               	movwf	??_sortDrawerList& (0+255),c
 14997  00E5D0  0EFF               	movlw	255
 14998  00E5D2  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14999  00E5D4  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 15000  00E5D8  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 15001  00E5DC  90D8               	bcf	status,0,c
 15002  00E5DE  3607               	rlcf	??_sortDrawerList+2,f,c
 15003  00E5E0  3608               	rlcf	??_sortDrawerList+3,f,c
 15004  00E5E2  5005               	movf	??_sortDrawerList,w,c
 15005  00E5E4  2607               	addwf	??_sortDrawerList+2,f,c
 15006  00E5E6  5006               	movf	??_sortDrawerList+1,w,c
 15007  00E5E8  2208               	addwfc	??_sortDrawerList+3,f,c
 15008  00E5EA  0E23               	movlw	low sortDrawerList@sublist3
 15009  00E5EC  2407               	addwf	??_sortDrawerList+2,w,c
 15010  00E5EE  6ED9               	movwf	fsr2l,c
 15011  00E5F0  0E00               	movlw	high sortDrawerList@sublist3
 15012  00E5F2  2008               	addwfc	??_sortDrawerList+3,w,c
 15013  00E5F4  6EDA               	movwf	fsr2h,c
 15014  00E5F6  0E0A               	movlw	10
 15015  00E5F8  18DE               	xorwf	postinc2,w,c
 15016  00E5FA  10DE               	iorwf	postinc2,w,c
 15017  00E5FC  B4D8               	btfsc	status,2,c
 15018  00E5FE  D01A               	goto	u9480
 15019  00E600  0EFE               	movlw	254
 15020  00E602  6E05               	movwf	??_sortDrawerList& (0+255),c
 15021  00E604  0EFF               	movlw	255
 15022  00E606  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15023  00E608  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 15024  00E60C  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 15025  00E610  90D8               	bcf	status,0,c
 15026  00E612  3607               	rlcf	??_sortDrawerList+2,f,c
 15027  00E614  3608               	rlcf	??_sortDrawerList+3,f,c
 15028  00E616  5005               	movf	??_sortDrawerList,w,c
 15029  00E618  2607               	addwf	??_sortDrawerList+2,f,c
 15030  00E61A  5006               	movf	??_sortDrawerList+1,w,c
 15031  00E61C  2208               	addwfc	??_sortDrawerList+3,f,c
 15032  00E61E  0E23               	movlw	low sortDrawerList@sublist3
 15033  00E620  2407               	addwf	??_sortDrawerList+2,w,c
 15034  00E622  6ED9               	movwf	fsr2l,c
 15035  00E624  0E00               	movlw	high sortDrawerList@sublist3
 15036  00E626  2008               	addwfc	??_sortDrawerList+3,w,c
 15037  00E628  6EDA               	movwf	fsr2h,c
 15038  00E62A  0E09               	movlw	9
 15039  00E62C  18DE               	xorwf	postinc2,w,c
 15040  00E62E  10DE               	iorwf	postinc2,w,c
 15041  00E630  A4D8               	btfss	status,2,c
 15042  00E632  D062               	goto	u9510
 15043  00E634                     u9480:
 15044                           
 15045                           ;operationMode.c: 136: for (i=0; i<count4; i++){
 15046  00E634  0E00               	movlw	0
 15047  00E636  6E38               	movwf	sortDrawerList@i+1,c
 15048  00E638  0E00               	movlw	0
 15049  00E63A  6E37               	movwf	sortDrawerList@i,c
 15050  00E63C  D057               	goto	l211
 15051  00E63E                     
 15052                           ;operationMode.c: 137: for (j=0; j<count4; j++){
 15053  00E63E  0E00               	movlw	0
 15054  00E640  6E36               	movwf	sortDrawerList@j+1,c
 15055  00E642  0E00               	movlw	0
 15056  00E644  6E35               	movwf	sortDrawerList@j,c
 15057  00E646  D04A               	goto	l213
 15058  00E648                     
 15059                           ;operationMode.c: 138: if (sublist4[j] > sublist4[i]){
 15060  00E648  90D8               	bcf	status,0,c
 15061  00E64A  3435               	rlcf	sortDrawerList@j,w,c
 15062  00E64C  6ED9               	movwf	fsr2l,c
 15063  00E64E  3436               	rlcf	sortDrawerList@j+1,w,c
 15064  00E650  6EDA               	movwf	fsr2h,c
 15065  00E652  0E13               	movlw	low sortDrawerList@sublist4
 15066  00E654  26D9               	addwf	fsr2l,f,c
 15067  00E656  0E00               	movlw	high sortDrawerList@sublist4
 15068  00E658  22DA               	addwfc	fsr2h,f,c
 15069  00E65A  90D8               	bcf	status,0,c
 15070  00E65C  3437               	rlcf	sortDrawerList@i,w,c
 15071  00E65E  6EE1               	movwf	fsr1l,c
 15072  00E660  3438               	rlcf	sortDrawerList@i+1,w,c
 15073  00E662  6EE2               	movwf	fsr1h,c
 15074  00E664  0E13               	movlw	low sortDrawerList@sublist4
 15075  00E666  26E1               	addwf	fsr1l,f,c
 15076  00E668  0E00               	movlw	high sortDrawerList@sublist4
 15077  00E66A  22E2               	addwfc	fsr1h,f,c
 15078  00E66C  50DE               	movf	postinc2,w,c
 15079  00E66E  5CE6               	subwf	postinc1,w,c
 15080  00E670  50DE               	movf	postinc2,w,c
 15081  00E672  58E6               	subwfb	postinc1,w,c
 15082  00E674  B0D8               	btfsc	status,0,c
 15083  00E676  D030               	goto	l215
 15084                           
 15085                           ;operationMode.c: 139: temp = sublist4[i];
 15086  00E678  90D8               	bcf	status,0,c
 15087  00E67A  3437               	rlcf	sortDrawerList@i,w,c
 15088  00E67C  6ED9               	movwf	fsr2l,c
 15089  00E67E  3438               	rlcf	sortDrawerList@i+1,w,c
 15090  00E680  6EDA               	movwf	fsr2h,c
 15091  00E682  0E13               	movlw	low sortDrawerList@sublist4
 15092  00E684  26D9               	addwf	fsr2l,f,c
 15093  00E686  0E00               	movlw	high sortDrawerList@sublist4
 15094  00E688  22DA               	addwfc	fsr2h,f,c
 15095  00E68A  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15096  00E68E  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15097                           
 15098                           ;operationMode.c: 140: sublist4[i] = sublist4[j];
 15099  00E692  90D8               	bcf	status,0,c
 15100  00E694  3435               	rlcf	sortDrawerList@j,w,c
 15101  00E696  6ED9               	movwf	fsr2l,c
 15102  00E698  3436               	rlcf	sortDrawerList@j+1,w,c
 15103  00E69A  6EDA               	movwf	fsr2h,c
 15104  00E69C  0E13               	movlw	low sortDrawerList@sublist4
 15105  00E69E  26D9               	addwf	fsr2l,f,c
 15106  00E6A0  0E00               	movlw	high sortDrawerList@sublist4
 15107  00E6A2  22DA               	addwfc	fsr2h,f,c
 15108  00E6A4  90D8               	bcf	status,0,c
 15109  00E6A6  3437               	rlcf	sortDrawerList@i,w,c
 15110  00E6A8  6EE1               	movwf	fsr1l,c
 15111  00E6AA  3438               	rlcf	sortDrawerList@i+1,w,c
 15112  00E6AC  6EE2               	movwf	fsr1h,c
 15113  00E6AE  0E13               	movlw	low sortDrawerList@sublist4
 15114  00E6B0  26E1               	addwf	fsr1l,f,c
 15115  00E6B2  0E00               	movlw	high sortDrawerList@sublist4
 15116  00E6B4  22E2               	addwfc	fsr1h,f,c
 15117  00E6B6  CFDE FFE6          	movff	postinc2,postinc1
 15118  00E6BA  CFDD FFE5          	movff	postdec2,postdec1
 15119                           
 15120                           ;operationMode.c: 141: sublist4[j] = temp;
 15121  00E6BE  90D8               	bcf	status,0,c
 15122  00E6C0  3435               	rlcf	sortDrawerList@j,w,c
 15123  00E6C2  6ED9               	movwf	fsr2l,c
 15124  00E6C4  3436               	rlcf	sortDrawerList@j+1,w,c
 15125  00E6C6  6EDA               	movwf	fsr2h,c
 15126  00E6C8  0E13               	movlw	low sortDrawerList@sublist4
 15127  00E6CA  26D9               	addwf	fsr2l,f,c
 15128  00E6CC  0E00               	movlw	high sortDrawerList@sublist4
 15129  00E6CE  22DA               	addwfc	fsr2h,f,c
 15130  00E6D0  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15131  00E6D4  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15132  00E6D8                     l215:
 15133  00E6D8  4A35               	infsnz	sortDrawerList@j,f,c
 15134  00E6DA  2A36               	incf	sortDrawerList@j+1,f,c
 15135  00E6DC                     l213:
 15136  00E6DC  502B               	movf	sortDrawerList@count4,w,c
 15137  00E6DE  5C35               	subwf	sortDrawerList@j,w,c
 15138  00E6E0  502C               	movf	sortDrawerList@count4+1,w,c
 15139  00E6E2  5836               	subwfb	sortDrawerList@j+1,w,c
 15140  00E6E4  A0D8               	btfss	status,0,c
 15141  00E6E6  D7B0               	goto	l214
 15142  00E6E8  4A37               	infsnz	sortDrawerList@i,f,c
 15143  00E6EA  2A38               	incf	sortDrawerList@i+1,f,c
 15144  00E6EC                     l211:
 15145  00E6EC  502B               	movf	sortDrawerList@count4,w,c
 15146  00E6EE  5C37               	subwf	sortDrawerList@i,w,c
 15147  00E6F0  502C               	movf	sortDrawerList@count4+1,w,c
 15148  00E6F2  5838               	subwfb	sortDrawerList@i+1,w,c
 15149  00E6F4  A0D8               	btfss	status,0,c
 15150  00E6F6  D7A3               	goto	l212
 15151  00E6F8                     u9510:
 15152                           
 15153                           ;operationMode.c: 142: }
 15154                           ;operationMode.c: 143: }
 15155                           ;operationMode.c: 144: }
 15156                           ;operationMode.c: 145: }
 15157                           ;operationMode.c: 147: if (sublist2[0] == 7 || sublist2[0] == 8){
 15158  00E6F8  0E07               	movlw	7
 15159  00E6FA  181B               	xorwf	sortDrawerList@sublist2,w,c
 15160  00E6FC  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 15161  00E6FE  B4D8               	btfsc	status,2,c
 15162  00E700  D005               	goto	u9530
 15163  00E702  0E08               	movlw	8
 15164  00E704  181B               	xorwf	sortDrawerList@sublist2,w,c
 15165  00E706  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 15166  00E708  A4D8               	btfss	status,2,c
 15167  00E70A  D062               	goto	u9560
 15168  00E70C                     u9530:
 15169                           
 15170                           ;operationMode.c: 148: for (i=0; i<count3; i++){
 15171  00E70C  0E00               	movlw	0
 15172  00E70E  6E38               	movwf	sortDrawerList@i+1,c
 15173  00E710  0E00               	movlw	0
 15174  00E712  6E37               	movwf	sortDrawerList@i,c
 15175  00E714  D057               	goto	l221
 15176  00E716                     
 15177                           ;operationMode.c: 149: for (j=0; j<count3; j++){
 15178  00E716  0E00               	movlw	0
 15179  00E718  6E36               	movwf	sortDrawerList@j+1,c
 15180  00E71A  0E00               	movlw	0
 15181  00E71C  6E35               	movwf	sortDrawerList@j,c
 15182  00E71E  D04A               	goto	l223
 15183  00E720                     
 15184                           ;operationMode.c: 150: if (sublist3[j] < sublist3[i]){
 15185  00E720  90D8               	bcf	status,0,c
 15186  00E722  3437               	rlcf	sortDrawerList@i,w,c
 15187  00E724  6ED9               	movwf	fsr2l,c
 15188  00E726  3438               	rlcf	sortDrawerList@i+1,w,c
 15189  00E728  6EDA               	movwf	fsr2h,c
 15190  00E72A  0E23               	movlw	low sortDrawerList@sublist3
 15191  00E72C  26D9               	addwf	fsr2l,f,c
 15192  00E72E  0E00               	movlw	high sortDrawerList@sublist3
 15193  00E730  22DA               	addwfc	fsr2h,f,c
 15194  00E732  90D8               	bcf	status,0,c
 15195  00E734  3435               	rlcf	sortDrawerList@j,w,c
 15196  00E736  6EE1               	movwf	fsr1l,c
 15197  00E738  3436               	rlcf	sortDrawerList@j+1,w,c
 15198  00E73A  6EE2               	movwf	fsr1h,c
 15199  00E73C  0E23               	movlw	low sortDrawerList@sublist3
 15200  00E73E  26E1               	addwf	fsr1l,f,c
 15201  00E740  0E00               	movlw	high sortDrawerList@sublist3
 15202  00E742  22E2               	addwfc	fsr1h,f,c
 15203  00E744  50DE               	movf	postinc2,w,c
 15204  00E746  5CE6               	subwf	postinc1,w,c
 15205  00E748  50DE               	movf	postinc2,w,c
 15206  00E74A  58E6               	subwfb	postinc1,w,c
 15207  00E74C  B0D8               	btfsc	status,0,c
 15208  00E74E  D030               	goto	l225
 15209                           
 15210                           ;operationMode.c: 151: temp = sublist3[i];
 15211  00E750  90D8               	bcf	status,0,c
 15212  00E752  3437               	rlcf	sortDrawerList@i,w,c
 15213  00E754  6ED9               	movwf	fsr2l,c
 15214  00E756  3438               	rlcf	sortDrawerList@i+1,w,c
 15215  00E758  6EDA               	movwf	fsr2h,c
 15216  00E75A  0E23               	movlw	low sortDrawerList@sublist3
 15217  00E75C  26D9               	addwf	fsr2l,f,c
 15218  00E75E  0E00               	movlw	high sortDrawerList@sublist3
 15219  00E760  22DA               	addwfc	fsr2h,f,c
 15220  00E762  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15221  00E766  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15222                           
 15223                           ;operationMode.c: 152: sublist3[i] = sublist3[j];
 15224  00E76A  90D8               	bcf	status,0,c
 15225  00E76C  3435               	rlcf	sortDrawerList@j,w,c
 15226  00E76E  6ED9               	movwf	fsr2l,c
 15227  00E770  3436               	rlcf	sortDrawerList@j+1,w,c
 15228  00E772  6EDA               	movwf	fsr2h,c
 15229  00E774  0E23               	movlw	low sortDrawerList@sublist3
 15230  00E776  26D9               	addwf	fsr2l,f,c
 15231  00E778  0E00               	movlw	high sortDrawerList@sublist3
 15232  00E77A  22DA               	addwfc	fsr2h,f,c
 15233  00E77C  90D8               	bcf	status,0,c
 15234  00E77E  3437               	rlcf	sortDrawerList@i,w,c
 15235  00E780  6EE1               	movwf	fsr1l,c
 15236  00E782  3438               	rlcf	sortDrawerList@i+1,w,c
 15237  00E784  6EE2               	movwf	fsr1h,c
 15238  00E786  0E23               	movlw	low sortDrawerList@sublist3
 15239  00E788  26E1               	addwf	fsr1l,f,c
 15240  00E78A  0E00               	movlw	high sortDrawerList@sublist3
 15241  00E78C  22E2               	addwfc	fsr1h,f,c
 15242  00E78E  CFDE FFE6          	movff	postinc2,postinc1
 15243  00E792  CFDD FFE5          	movff	postdec2,postdec1
 15244                           
 15245                           ;operationMode.c: 153: sublist3[j] = temp;
 15246  00E796  90D8               	bcf	status,0,c
 15247  00E798  3435               	rlcf	sortDrawerList@j,w,c
 15248  00E79A  6ED9               	movwf	fsr2l,c
 15249  00E79C  3436               	rlcf	sortDrawerList@j+1,w,c
 15250  00E79E  6EDA               	movwf	fsr2h,c
 15251  00E7A0  0E23               	movlw	low sortDrawerList@sublist3
 15252  00E7A2  26D9               	addwf	fsr2l,f,c
 15253  00E7A4  0E00               	movlw	high sortDrawerList@sublist3
 15254  00E7A6  22DA               	addwfc	fsr2h,f,c
 15255  00E7A8  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15256  00E7AC  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15257  00E7B0                     l225:
 15258  00E7B0  4A35               	infsnz	sortDrawerList@j,f,c
 15259  00E7B2  2A36               	incf	sortDrawerList@j+1,f,c
 15260  00E7B4                     l223:
 15261  00E7B4  5033               	movf	sortDrawerList@count3,w,c
 15262  00E7B6  5C35               	subwf	sortDrawerList@j,w,c
 15263  00E7B8  5034               	movf	sortDrawerList@count3+1,w,c
 15264  00E7BA  5836               	subwfb	sortDrawerList@j+1,w,c
 15265  00E7BC  A0D8               	btfss	status,0,c
 15266  00E7BE  D7B0               	goto	l224
 15267  00E7C0  4A37               	infsnz	sortDrawerList@i,f,c
 15268  00E7C2  2A38               	incf	sortDrawerList@i+1,f,c
 15269  00E7C4                     l221:
 15270  00E7C4  5033               	movf	sortDrawerList@count3,w,c
 15271  00E7C6  5C37               	subwf	sortDrawerList@i,w,c
 15272  00E7C8  5034               	movf	sortDrawerList@count3+1,w,c
 15273  00E7CA  5838               	subwfb	sortDrawerList@i+1,w,c
 15274  00E7CC  A0D8               	btfss	status,0,c
 15275  00E7CE  D7A3               	goto	l222
 15276  00E7D0                     u9560:
 15277                           
 15278                           ;operationMode.c: 154: }
 15279                           ;operationMode.c: 155: }
 15280                           ;operationMode.c: 156: }
 15281                           ;operationMode.c: 157: }
 15282                           ;operationMode.c: 159: if (sublist1[count1 - 1] == 1 || sublist1[count1 - 1] == 2){
 15283  00E7D0  0EFE               	movlw	254
 15284  00E7D2  6E05               	movwf	??_sortDrawerList& (0+255),c
 15285  00E7D4  0EFF               	movlw	255
 15286  00E7D6  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15287  00E7D8  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 15288  00E7DC  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 15289  00E7E0  90D8               	bcf	status,0,c
 15290  00E7E2  3607               	rlcf	??_sortDrawerList+2,f,c
 15291  00E7E4  3608               	rlcf	??_sortDrawerList+3,f,c
 15292  00E7E6  5005               	movf	??_sortDrawerList,w,c
 15293  00E7E8  2607               	addwf	??_sortDrawerList+2,f,c
 15294  00E7EA  5006               	movf	??_sortDrawerList+1,w,c
 15295  00E7EC  2208               	addwfc	??_sortDrawerList+3,f,c
 15296  00E7EE  0E0B               	movlw	low sortDrawerList@sublist1
 15297  00E7F0  2407               	addwf	??_sortDrawerList+2,w,c
 15298  00E7F2  6ED9               	movwf	fsr2l,c
 15299  00E7F4  0E00               	movlw	high sortDrawerList@sublist1
 15300  00E7F6  2008               	addwfc	??_sortDrawerList+3,w,c
 15301  00E7F8  6EDA               	movwf	fsr2h,c
 15302  00E7FA  04DE               	decf	postinc2,w,c
 15303  00E7FC  10DE               	iorwf	postinc2,w,c
 15304  00E7FE  B4D8               	btfsc	status,2,c
 15305  00E800  D01A               	goto	u9580
 15306  00E802  0EFE               	movlw	254
 15307  00E804  6E05               	movwf	??_sortDrawerList& (0+255),c
 15308  00E806  0EFF               	movlw	255
 15309  00E808  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15310  00E80A  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 15311  00E80E  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 15312  00E812  90D8               	bcf	status,0,c
 15313  00E814  3607               	rlcf	??_sortDrawerList+2,f,c
 15314  00E816  3608               	rlcf	??_sortDrawerList+3,f,c
 15315  00E818  5005               	movf	??_sortDrawerList,w,c
 15316  00E81A  2607               	addwf	??_sortDrawerList+2,f,c
 15317  00E81C  5006               	movf	??_sortDrawerList+1,w,c
 15318  00E81E  2208               	addwfc	??_sortDrawerList+3,f,c
 15319  00E820  0E0B               	movlw	low sortDrawerList@sublist1
 15320  00E822  2407               	addwf	??_sortDrawerList+2,w,c
 15321  00E824  6ED9               	movwf	fsr2l,c
 15322  00E826  0E00               	movlw	high sortDrawerList@sublist1
 15323  00E828  2008               	addwfc	??_sortDrawerList+3,w,c
 15324  00E82A  6EDA               	movwf	fsr2h,c
 15325  00E82C  0E02               	movlw	2
 15326  00E82E  18DE               	xorwf	postinc2,w,c
 15327  00E830  10DE               	iorwf	postinc2,w,c
 15328  00E832  A4D8               	btfss	status,2,c
 15329  00E834  D062               	goto	u9610
 15330  00E836                     u9580:
 15331                           
 15332                           ;operationMode.c: 160: for (i=0; i<count2; i++){
 15333  00E836  0E00               	movlw	0
 15334  00E838  6E38               	movwf	sortDrawerList@i+1,c
 15335  00E83A  0E00               	movlw	0
 15336  00E83C  6E37               	movwf	sortDrawerList@i,c
 15337  00E83E  D057               	goto	l231
 15338  00E840                     
 15339                           ;operationMode.c: 161: for (j=0; j<count2; j++){
 15340  00E840  0E00               	movlw	0
 15341  00E842  6E36               	movwf	sortDrawerList@j+1,c
 15342  00E844  0E00               	movlw	0
 15343  00E846  6E35               	movwf	sortDrawerList@j,c
 15344  00E848  D04A               	goto	l233
 15345  00E84A                     
 15346                           ;operationMode.c: 162: if (sublist2[j] > sublist2[i]){
 15347  00E84A  90D8               	bcf	status,0,c
 15348  00E84C  3435               	rlcf	sortDrawerList@j,w,c
 15349  00E84E  6ED9               	movwf	fsr2l,c
 15350  00E850  3436               	rlcf	sortDrawerList@j+1,w,c
 15351  00E852  6EDA               	movwf	fsr2h,c
 15352  00E854  0E1B               	movlw	low sortDrawerList@sublist2
 15353  00E856  26D9               	addwf	fsr2l,f,c
 15354  00E858  0E00               	movlw	high sortDrawerList@sublist2
 15355  00E85A  22DA               	addwfc	fsr2h,f,c
 15356  00E85C  90D8               	bcf	status,0,c
 15357  00E85E  3437               	rlcf	sortDrawerList@i,w,c
 15358  00E860  6EE1               	movwf	fsr1l,c
 15359  00E862  3438               	rlcf	sortDrawerList@i+1,w,c
 15360  00E864  6EE2               	movwf	fsr1h,c
 15361  00E866  0E1B               	movlw	low sortDrawerList@sublist2
 15362  00E868  26E1               	addwf	fsr1l,f,c
 15363  00E86A  0E00               	movlw	high sortDrawerList@sublist2
 15364  00E86C  22E2               	addwfc	fsr1h,f,c
 15365  00E86E  50DE               	movf	postinc2,w,c
 15366  00E870  5CE6               	subwf	postinc1,w,c
 15367  00E872  50DE               	movf	postinc2,w,c
 15368  00E874  58E6               	subwfb	postinc1,w,c
 15369  00E876  B0D8               	btfsc	status,0,c
 15370  00E878  D030               	goto	l235
 15371                           
 15372                           ;operationMode.c: 163: temp = sublist2[i];
 15373  00E87A  90D8               	bcf	status,0,c
 15374  00E87C  3437               	rlcf	sortDrawerList@i,w,c
 15375  00E87E  6ED9               	movwf	fsr2l,c
 15376  00E880  3438               	rlcf	sortDrawerList@i+1,w,c
 15377  00E882  6EDA               	movwf	fsr2h,c
 15378  00E884  0E1B               	movlw	low sortDrawerList@sublist2
 15379  00E886  26D9               	addwf	fsr2l,f,c
 15380  00E888  0E00               	movlw	high sortDrawerList@sublist2
 15381  00E88A  22DA               	addwfc	fsr2h,f,c
 15382  00E88C  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15383  00E890  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15384                           
 15385                           ;operationMode.c: 164: sublist2[i] = sublist2[j];
 15386  00E894  90D8               	bcf	status,0,c
 15387  00E896  3435               	rlcf	sortDrawerList@j,w,c
 15388  00E898  6ED9               	movwf	fsr2l,c
 15389  00E89A  3436               	rlcf	sortDrawerList@j+1,w,c
 15390  00E89C  6EDA               	movwf	fsr2h,c
 15391  00E89E  0E1B               	movlw	low sortDrawerList@sublist2
 15392  00E8A0  26D9               	addwf	fsr2l,f,c
 15393  00E8A2  0E00               	movlw	high sortDrawerList@sublist2
 15394  00E8A4  22DA               	addwfc	fsr2h,f,c
 15395  00E8A6  90D8               	bcf	status,0,c
 15396  00E8A8  3437               	rlcf	sortDrawerList@i,w,c
 15397  00E8AA  6EE1               	movwf	fsr1l,c
 15398  00E8AC  3438               	rlcf	sortDrawerList@i+1,w,c
 15399  00E8AE  6EE2               	movwf	fsr1h,c
 15400  00E8B0  0E1B               	movlw	low sortDrawerList@sublist2
 15401  00E8B2  26E1               	addwf	fsr1l,f,c
 15402  00E8B4  0E00               	movlw	high sortDrawerList@sublist2
 15403  00E8B6  22E2               	addwfc	fsr1h,f,c
 15404  00E8B8  CFDE FFE6          	movff	postinc2,postinc1
 15405  00E8BC  CFDD FFE5          	movff	postdec2,postdec1
 15406                           
 15407                           ;operationMode.c: 165: sublist2[j] = temp;
 15408  00E8C0  90D8               	bcf	status,0,c
 15409  00E8C2  3435               	rlcf	sortDrawerList@j,w,c
 15410  00E8C4  6ED9               	movwf	fsr2l,c
 15411  00E8C6  3436               	rlcf	sortDrawerList@j+1,w,c
 15412  00E8C8  6EDA               	movwf	fsr2h,c
 15413  00E8CA  0E1B               	movlw	low sortDrawerList@sublist2
 15414  00E8CC  26D9               	addwf	fsr2l,f,c
 15415  00E8CE  0E00               	movlw	high sortDrawerList@sublist2
 15416  00E8D0  22DA               	addwfc	fsr2h,f,c
 15417  00E8D2  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15418  00E8D6  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15419  00E8DA                     l235:
 15420  00E8DA  4A35               	infsnz	sortDrawerList@j,f,c
 15421  00E8DC  2A36               	incf	sortDrawerList@j+1,f,c
 15422  00E8DE                     l233:
 15423  00E8DE  502D               	movf	sortDrawerList@count2,w,c
 15424  00E8E0  5C35               	subwf	sortDrawerList@j,w,c
 15425  00E8E2  502E               	movf	sortDrawerList@count2+1,w,c
 15426  00E8E4  5836               	subwfb	sortDrawerList@j+1,w,c
 15427  00E8E6  A0D8               	btfss	status,0,c
 15428  00E8E8  D7B0               	goto	l234
 15429  00E8EA  4A37               	infsnz	sortDrawerList@i,f,c
 15430  00E8EC  2A38               	incf	sortDrawerList@i+1,f,c
 15431  00E8EE                     l231:
 15432  00E8EE  502D               	movf	sortDrawerList@count2,w,c
 15433  00E8F0  5C37               	subwf	sortDrawerList@i,w,c
 15434  00E8F2  502E               	movf	sortDrawerList@count2+1,w,c
 15435  00E8F4  5838               	subwfb	sortDrawerList@i+1,w,c
 15436  00E8F6  A0D8               	btfss	status,0,c
 15437  00E8F8  D7A3               	goto	l232
 15438  00E8FA                     u9610:
 15439                           
 15440                           ;operationMode.c: 166: }
 15441                           ;operationMode.c: 167: }
 15442                           ;operationMode.c: 168: }
 15443                           ;operationMode.c: 169: }
 15444                           ;operationMode.c: 171: for (i=0; i<count1; i++){
 15445  00E8FA  0E00               	movlw	0
 15446  00E8FC  6E38               	movwf	sortDrawerList@i+1,c
 15447  00E8FE  0E00               	movlw	0
 15448  00E900  6E37               	movwf	sortDrawerList@i,c
 15449  00E902  D018               	goto	l238
 15450  00E904                     
 15451                           ;operationMode.c: 172: sortedDrawerTable[i] = sublist1[i];
 15452  00E904  90D8               	bcf	status,0,c
 15453  00E906  3437               	rlcf	sortDrawerList@i,w,c
 15454  00E908  6ED9               	movwf	fsr2l,c
 15455  00E90A  3438               	rlcf	sortDrawerList@i+1,w,c
 15456  00E90C  6EDA               	movwf	fsr2h,c
 15457  00E90E  0E0B               	movlw	low sortDrawerList@sublist1
 15458  00E910  26D9               	addwf	fsr2l,f,c
 15459  00E912  0E00               	movlw	high sortDrawerList@sublist1
 15460  00E914  22DA               	addwfc	fsr2h,f,c
 15461  00E916  90D8               	bcf	status,0,c
 15462  00E918  3437               	rlcf	sortDrawerList@i,w,c
 15463  00E91A  6EE1               	movwf	fsr1l,c
 15464  00E91C  3438               	rlcf	sortDrawerList@i+1,w,c
 15465  00E91E  6EE2               	movwf	fsr1h,c
 15466  00E920  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 15467  00E922  26E1               	addwf	fsr1l,f,c
 15468  00E924  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 15469  00E926  22E2               	addwfc	fsr1h,f,c
 15470  00E928  CFDE FFE6          	movff	postinc2,postinc1
 15471  00E92C  CFDD FFE5          	movff	postdec2,postdec1
 15472  00E930  4A37               	infsnz	sortDrawerList@i,f,c
 15473  00E932  2A38               	incf	sortDrawerList@i+1,f,c
 15474  00E934                     l238:
 15475  00E934  5031               	movf	sortDrawerList@count1,w,c
 15476  00E936  5C37               	subwf	sortDrawerList@i,w,c
 15477  00E938  5032               	movf	sortDrawerList@count1+1,w,c
 15478  00E93A  5838               	subwfb	sortDrawerList@i+1,w,c
 15479  00E93C  A0D8               	btfss	status,0,c
 15480  00E93E  D7E2               	goto	l239
 15481                           
 15482                           ;operationMode.c: 173: }
 15483                           ;operationMode.c: 174: for (i=0; i<count2; i++){
 15484  00E940  0E00               	movlw	0
 15485  00E942  6E38               	movwf	sortDrawerList@i+1,c
 15486  00E944  0E00               	movlw	0
 15487  00E946  6E37               	movwf	sortDrawerList@i,c
 15488  00E948  D01E               	goto	l241
 15489  00E94A                     
 15490                           ;operationMode.c: 175: sortedDrawerTable[i+count1] = sublist2[i];
 15491  00E94A  90D8               	bcf	status,0,c
 15492  00E94C  3437               	rlcf	sortDrawerList@i,w,c
 15493  00E94E  6ED9               	movwf	fsr2l,c
 15494  00E950  3438               	rlcf	sortDrawerList@i+1,w,c
 15495  00E952  6EDA               	movwf	fsr2h,c
 15496  00E954  0E1B               	movlw	low sortDrawerList@sublist2
 15497  00E956  26D9               	addwf	fsr2l,f,c
 15498  00E958  0E00               	movlw	high sortDrawerList@sublist2
 15499  00E95A  22DA               	addwfc	fsr2h,f,c
 15500  00E95C  5031               	movf	sortDrawerList@count1,w,c
 15501  00E95E  2437               	addwf	sortDrawerList@i,w,c
 15502  00E960  6E05               	movwf	??_sortDrawerList& (0+255),c
 15503  00E962  5032               	movf	sortDrawerList@count1+1,w,c
 15504  00E964  2038               	addwfc	sortDrawerList@i+1,w,c
 15505  00E966  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15506  00E968  90D8               	bcf	status,0,c
 15507  00E96A  3605               	rlcf	??_sortDrawerList,f,c
 15508  00E96C  3606               	rlcf	??_sortDrawerList+1,f,c
 15509  00E96E  5005               	movf	??_sortDrawerList,w,c
 15510  00E970  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15511  00E972  6EE1               	movwf	fsr1l,c
 15512  00E974  5006               	movf	??_sortDrawerList+1,w,c
 15513  00E976  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15514  00E978  6EE2               	movwf	fsr1h,c
 15515  00E97A  CFDE FFE6          	movff	postinc2,postinc1
 15516  00E97E  CFDD FFE5          	movff	postdec2,postdec1
 15517  00E982  4A37               	infsnz	sortDrawerList@i,f,c
 15518  00E984  2A38               	incf	sortDrawerList@i+1,f,c
 15519  00E986                     l241:
 15520  00E986  502D               	movf	sortDrawerList@count2,w,c
 15521  00E988  5C37               	subwf	sortDrawerList@i,w,c
 15522  00E98A  502E               	movf	sortDrawerList@count2+1,w,c
 15523  00E98C  5838               	subwfb	sortDrawerList@i+1,w,c
 15524  00E98E  A0D8               	btfss	status,0,c
 15525  00E990  D7DC               	goto	l242
 15526                           
 15527                           ;operationMode.c: 176: }
 15528                           ;operationMode.c: 177: for (i=0; i<count3; i++){
 15529  00E992  0E00               	movlw	0
 15530  00E994  6E38               	movwf	sortDrawerList@i+1,c
 15531  00E996  0E00               	movlw	0
 15532  00E998  6E37               	movwf	sortDrawerList@i,c
 15533  00E99A  D022               	goto	l244
 15534  00E99C                     
 15535                           ;operationMode.c: 178: sortedDrawerTable[i+count1+count2] = sublist3[i];
 15536  00E99C  90D8               	bcf	status,0,c
 15537  00E99E  3437               	rlcf	sortDrawerList@i,w,c
 15538  00E9A0  6ED9               	movwf	fsr2l,c
 15539  00E9A2  3438               	rlcf	sortDrawerList@i+1,w,c
 15540  00E9A4  6EDA               	movwf	fsr2h,c
 15541  00E9A6  0E23               	movlw	low sortDrawerList@sublist3
 15542  00E9A8  26D9               	addwf	fsr2l,f,c
 15543  00E9AA  0E00               	movlw	high sortDrawerList@sublist3
 15544  00E9AC  22DA               	addwfc	fsr2h,f,c
 15545  00E9AE  5031               	movf	sortDrawerList@count1,w,c
 15546  00E9B0  2437               	addwf	sortDrawerList@i,w,c
 15547  00E9B2  6E05               	movwf	??_sortDrawerList& (0+255),c
 15548  00E9B4  5032               	movf	sortDrawerList@count1+1,w,c
 15549  00E9B6  2038               	addwfc	sortDrawerList@i+1,w,c
 15550  00E9B8  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15551  00E9BA  502D               	movf	sortDrawerList@count2,w,c
 15552  00E9BC  2605               	addwf	??_sortDrawerList,f,c
 15553  00E9BE  502E               	movf	sortDrawerList@count2+1,w,c
 15554  00E9C0  2206               	addwfc	??_sortDrawerList+1,f,c
 15555  00E9C2  90D8               	bcf	status,0,c
 15556  00E9C4  3605               	rlcf	??_sortDrawerList,f,c
 15557  00E9C6  3606               	rlcf	??_sortDrawerList+1,f,c
 15558  00E9C8  5005               	movf	??_sortDrawerList,w,c
 15559  00E9CA  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15560  00E9CC  6EE1               	movwf	fsr1l,c
 15561  00E9CE  5006               	movf	??_sortDrawerList+1,w,c
 15562  00E9D0  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15563  00E9D2  6EE2               	movwf	fsr1h,c
 15564  00E9D4  CFDE FFE6          	movff	postinc2,postinc1
 15565  00E9D8  CFDD FFE5          	movff	postdec2,postdec1
 15566  00E9DC  4A37               	infsnz	sortDrawerList@i,f,c
 15567  00E9DE  2A38               	incf	sortDrawerList@i+1,f,c
 15568  00E9E0                     l244:
 15569  00E9E0  5033               	movf	sortDrawerList@count3,w,c
 15570  00E9E2  5C37               	subwf	sortDrawerList@i,w,c
 15571  00E9E4  5034               	movf	sortDrawerList@count3+1,w,c
 15572  00E9E6  5838               	subwfb	sortDrawerList@i+1,w,c
 15573  00E9E8  A0D8               	btfss	status,0,c
 15574  00E9EA  D7D8               	goto	l245
 15575                           
 15576                           ;operationMode.c: 179: }
 15577                           ;operationMode.c: 180: for (i=0; i<count4; i++){
 15578  00E9EC  0E00               	movlw	0
 15579  00E9EE  6E38               	movwf	sortDrawerList@i+1,c
 15580  00E9F0  0E00               	movlw	0
 15581  00E9F2  6E37               	movwf	sortDrawerList@i,c
 15582  00E9F4  D026               	goto	l247
 15583  00E9F6                     
 15584                           ;operationMode.c: 181: sortedDrawerTable[i+count1+count2+count3] = sublist4[i];
 15585  00E9F6  90D8               	bcf	status,0,c
 15586  00E9F8  3437               	rlcf	sortDrawerList@i,w,c
 15587  00E9FA  6ED9               	movwf	fsr2l,c
 15588  00E9FC  3438               	rlcf	sortDrawerList@i+1,w,c
 15589  00E9FE  6EDA               	movwf	fsr2h,c
 15590  00EA00  0E13               	movlw	low sortDrawerList@sublist4
 15591  00EA02  26D9               	addwf	fsr2l,f,c
 15592  00EA04  0E00               	movlw	high sortDrawerList@sublist4
 15593  00EA06  22DA               	addwfc	fsr2h,f,c
 15594  00EA08  5031               	movf	sortDrawerList@count1,w,c
 15595  00EA0A  2437               	addwf	sortDrawerList@i,w,c
 15596  00EA0C  6E05               	movwf	??_sortDrawerList& (0+255),c
 15597  00EA0E  5032               	movf	sortDrawerList@count1+1,w,c
 15598  00EA10  2038               	addwfc	sortDrawerList@i+1,w,c
 15599  00EA12  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15600  00EA14  502D               	movf	sortDrawerList@count2,w,c
 15601  00EA16  2605               	addwf	??_sortDrawerList,f,c
 15602  00EA18  502E               	movf	sortDrawerList@count2+1,w,c
 15603  00EA1A  2206               	addwfc	??_sortDrawerList+1,f,c
 15604  00EA1C  5033               	movf	sortDrawerList@count3,w,c
 15605  00EA1E  2605               	addwf	??_sortDrawerList,f,c
 15606  00EA20  5034               	movf	sortDrawerList@count3+1,w,c
 15607  00EA22  2206               	addwfc	??_sortDrawerList+1,f,c
 15608  00EA24  90D8               	bcf	status,0,c
 15609  00EA26  3605               	rlcf	??_sortDrawerList,f,c
 15610  00EA28  3606               	rlcf	??_sortDrawerList+1,f,c
 15611  00EA2A  5005               	movf	??_sortDrawerList,w,c
 15612  00EA2C  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15613  00EA2E  6EE1               	movwf	fsr1l,c
 15614  00EA30  5006               	movf	??_sortDrawerList+1,w,c
 15615  00EA32  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15616  00EA34  6EE2               	movwf	fsr1h,c
 15617  00EA36  CFDE FFE6          	movff	postinc2,postinc1
 15618  00EA3A  CFDD FFE5          	movff	postdec2,postdec1
 15619  00EA3E  4A37               	infsnz	sortDrawerList@i,f,c
 15620  00EA40  2A38               	incf	sortDrawerList@i+1,f,c
 15621  00EA42                     l247:
 15622  00EA42  502B               	movf	sortDrawerList@count4,w,c
 15623  00EA44  5C37               	subwf	sortDrawerList@i,w,c
 15624  00EA46  502C               	movf	sortDrawerList@count4+1,w,c
 15625  00EA48  5838               	subwfb	sortDrawerList@i+1,w,c
 15626  00EA4A  B0D8               	btfsc	status,0,c
 15627  00EA4C  0012               	return	
 15628  00EA4E  D7D3               	goto	l248
 15629  00EA50                     __end_of_sortDrawerList:
 15630                           	opt stack 0
 15631                           tblptru	equ	0xFF8
 15632                           tblptrh	equ	0xFF7
 15633                           tblptrl	equ	0xFF6
 15634                           tablat	equ	0xFF5
 15635                           prodh	equ	0xFF4
 15636                           prodl	equ	0xFF3
 15637                           postinc0	equ	0xFEE
 15638                           wreg	equ	0xFE8
 15639                           postinc1	equ	0xFE6
 15640                           postdec1	equ	0xFE5
 15641                           plusw1	equ	0xFE3
 15642                           fsr1h	equ	0xFE2
 15643                           fsr1l	equ	0xFE1
 15644                           indf2	equ	0xFDF
 15645                           postinc2	equ	0xFDE
 15646                           postdec2	equ	0xFDD
 15647                           plusw2	equ	0xFDB
 15648                           fsr2h	equ	0xFDA
 15649                           fsr2l	equ	0xFD9
 15650                           status	equ	0xFD8
 15651                           
 15652 ;; *************** function _printf *****************
 15653 ;; Defined at:
 15654 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 15655 ;; Parameters:    Size  Location     Type
 15656 ;;  f               2   12[COMRAM] PTR const unsigned char 
 15657 ;;		 -> STR_152(11), STR_151(13), STR_150(11), STR_149(13), 
 15658 ;;		 -> STR_148(11), STR_147(15), STR_146(15), STR_145(5), 
 15659 ;;		 -> STR_144(11), STR_143(8), STR_142(11), STR_141(14), 
 15660 ;;		 -> STR_140(17), STR_139(8), STR_138(15), STR_137(16), 
 15661 ;;		 -> STR_136(10), STR_135(8), STR_134(15), STR_133(16), 
 15662 ;;		 -> STR_132(10), STR_131(16), STR_130(16), STR_129(17), 
 15663 ;;		 -> STR_128(13), STR_127(17), STR_126(14), STR_125(11), 
 15664 ;;		 -> STR_124(11), STR_123(15), STR_122(15), STR_121(10), 
 15665 ;;		 -> STR_120(13), STR_119(16), STR_118(16), STR_117(17), 
 15666 ;;		 -> STR_116(17), STR_115(8), STR_114(15), STR_113(15), 
 15667 ;;		 -> STR_112(11), STR_111(14), STR_110(16), STR_109(16), 
 15668 ;;		 -> STR_108(11), STR_107(14), STR_106(16), STR_105(16), 
 15669 ;;		 -> STR_104(16), STR_103(13), STR_102(5), STR_101(11), 
 15670 ;;		 -> STR_100(15), STR_99(17), STR_98(18), STR_97(15), 
 15671 ;;		 -> STR_96(11), STR_95(7), STR_94(3), STR_93(16), 
 15672 ;;		 -> STR_92(8), STR_91(16), STR_90(15), STR_89(6), 
 15673 ;;		 -> STR_88(14), STR_87(17), STR_86(7), STR_85(9), 
 15674 ;;		 -> STR_84(17), STR_83(11), STR_82(17), STR_81(14), 
 15675 ;;		 -> STR_80(17), STR_79(11), STR_78(15), STR_77(11), 
 15676 ;;		 -> STR_76(8), STR_44(11), STR_43(16), STR_42(4), 
 15677 ;;		 -> STR_41(13), STR_40(10), STR_39(10), STR_38(15), 
 15678 ;;		 -> STR_37(9), STR_36(9), STR_35(10), STR_34(10), 
 15679 ;;		 -> STR_2(16), STR_1(8), 
 15680 ;; Auto vars:     Size  Location     Type
 15681 ;;  idx             1   26[COMRAM] unsigned char 
 15682 ;;  tmpval          4    0        struct .
 15683 ;;  width           2   37[COMRAM] int 
 15684 ;;  val             2   34[COMRAM] unsigned int 
 15685 ;;  len             2   32[COMRAM] unsigned int 
 15686 ;;  ap              2   30[COMRAM] PTR void [1]
 15687 ;;		 -> ?_printf(2), 
 15688 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 15689 ;;		 -> STR_153(7), STR_75(5), STR_74(4), STR_73(4), 
 15690 ;;		 -> STR_72(4), STR_71(4), STR_70(3), STR_69(3), 
 15691 ;;		 -> STR_68(3), STR_67(3), STR_66(3), STR_65(2), 
 15692 ;;		 -> STR_64(2), STR_63(2), STR_62(5), STR_61(5), 
 15693 ;;		 -> STR_60(5), STR_59(5), STR_58(5), STR_57(4), 
 15694 ;;		 -> STR_56(4), STR_55(4), STR_54(4), STR_53(4), 
 15695 ;;		 -> STR_52(4), STR_51(4), STR_50(3), STR_49(3), 
 15696 ;;		 -> STR_48(3), STR_47(2), STR_46(2), STR_45(2), 
 15697 ;;		 -> STR_33(5), STR_32(4), STR_31(4), STR_30(4), 
 15698 ;;		 -> STR_29(4), STR_28(3), STR_27(3), STR_26(3), 
 15699 ;;		 -> STR_25(3), STR_24(3), STR_23(2), STR_22(2), 
 15700 ;;		 -> STR_21(2), STR_20(5), STR_19(5), STR_18(5), 
 15701 ;;		 -> STR_17(5), STR_16(5), STR_15(4), STR_14(4), 
 15702 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(4), 
 15703 ;;		 -> STR_9(4), STR_8(3), STR_7(3), STR_6(3), 
 15704 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
 15705 ;;  c               1   39[COMRAM] char 
 15706 ;;  flag            1   36[COMRAM] unsigned char 
 15707 ;;  prec            1   27[COMRAM] char 
 15708 ;; Return value:  Size  Location     Type
 15709 ;;                  2   12[COMRAM] int 
 15710 ;; Registers used:
 15711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15712 ;; Tracked objects:
 15713 ;;		On entry : 0/0
 15714 ;;		On exit  : 0/0
 15715 ;;		Unchanged: 0/0
 15716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15717 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15718 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15719 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15720 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15721 ;;Total ram usage:       28 bytes
 15722 ;; Hardware stack levels used:    1
 15723 ;; Hardware stack levels required when called:    2
 15724 ;; This function calls:
 15725 ;;		___lwdiv
 15726 ;;		___lwmod
 15727 ;;		___wmul
 15728 ;;		_isdigit
 15729 ;;		_putch
 15730 ;; This function is called by:
 15731 ;;		_main
 15732 ;;		_mainOperation
 15733 ;;		_viewLogs
 15734 ;;		_displayLogs
 15735 ;;		_food_press
 15736 ;;		_diet_press
 15737 ;;		_which_drawer
 15738 ;;		_standbyMode
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           	psect	text27
 15743  00BF7A                     __ptext27:
 15744                           	opt stack 0
 15745  00BF7A                     _printf:
 15746                           	opt stack 26
 15747                           
 15748                           ;doprnt.c: 466: va_list ap;
 15749                           ;doprnt.c: 499: signed char c;
 15750                           ;doprnt.c: 501: int width;
 15751                           ;doprnt.c: 506: signed char prec;
 15752                           ;doprnt.c: 508: unsigned char flag;
 15753                           ;doprnt.c: 523: union {
 15754                           ;doprnt.c: 524: unsigned long vd;
 15755                           ;doprnt.c: 525: double integ;
 15756                           ;doprnt.c: 526: } tmpval;
 15757                           ;doprnt.c: 528: unsigned int val;
 15758                           ;doprnt.c: 529: unsigned len;
 15759                           ;doprnt.c: 530: const char * cp;
 15760                           ;doprnt.c: 533: *ap = __va_start();
 15761                           
 15762                           ;incstack = 0
 15763  00BF7A  0E0F               	movlw	low (?_printf+2)
 15764  00BF7C  6E1F               	movwf	printf@ap,c
 15765  00BF7E  0E00               	movlw	high (?_printf+2)
 15766  00BF80  6E20               	movwf	printf@ap+1,c
 15767                           
 15768                           ;doprnt.c: 536: while(c = *f++) {
 15769  00BF82  D1E6               	goto	u7470
 15770  00BF84                     
 15771                           ;doprnt.c: 538: if(c != '%')
 15772  00BF84  0E25               	movlw	37
 15773  00BF86  1828               	xorwf	printf@c,w,c
 15774  00BF88  B4D8               	btfsc	status,2,c
 15775  00BF8A  D004               	goto	l1588
 15776                           
 15777                           ;doprnt.c: 540: {
 15778                           ;doprnt.c: 541: (putch(c) );
 15779  00BF8C  5028               	movf	printf@c,w,c
 15780  00BF8E  ECF3  F04B         	call	_putch
 15781                           
 15782                           ;doprnt.c: 542: continue;
 15783  00BF92  D1DE               	goto	u7470
 15784  00BF94                     l1588:
 15785                           
 15786                           ;doprnt.c: 543: }
 15787                           ;doprnt.c: 546: width = 0;
 15788  00BF94  0E00               	movlw	0
 15789  00BF96  6E27               	movwf	printf@width+1,c
 15790  00BF98  0E00               	movlw	0
 15791  00BF9A  6E26               	movwf	printf@width,c
 15792                           
 15793                           ;doprnt.c: 548: flag = 0;
 15794  00BF9C  0E00               	movlw	0
 15795  00BF9E  6E25               	movwf	printf@flag,c
 15796                           
 15797                           ;doprnt.c: 551: switch(*f) {
 15798                           
 15799                           ;doprnt.c: 550: for(;;) {
 15800  00BFA0  D003               	goto	l1590
 15801  00BFA2                     
 15802                           ;doprnt.c: 580: flag |= 0x04;
 15803  00BFA2  8425               	bsf	printf@flag,2,c
 15804                           
 15805                           ;doprnt.c: 581: f++;
 15806  00BFA4  4A0D               	infsnz	printf@f,f,c
 15807  00BFA6  2A0E               	incf	printf@f+1,f,c
 15808  00BFA8                     l1590:
 15809  00BFA8  C00D  FFF6         	movff	printf@f,tblptrl
 15810  00BFAC  C00E  FFF7         	movff	printf@f+1,tblptrh
 15811  00BFB0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15812  00BFB0  6AF8               	clrf	tblptru,c
 15813  00BFB2                     	endif
 15814  00BFB2                     	if	0	;tblptru may be non-zero
 15815  00BFB2                     	endif
 15816  00BFB2  0008               	tblrd		*
 15817  00BFB4  50F5               	movf	tablat,w,c
 15818                           
 15819                           ; Switch size 1, requested type "space"
 15820                           ; Number of cases is 1, Range of values is 48 to 48
 15821                           ; switch strategies available:
 15822                           ; Name         Instructions Cycles
 15823                           ; simple_byte            4     3 (average)
 15824                           ;	Chosen strategy is simple_byte
 15825  00BFB6  0A30               	xorlw	48	; case 48
 15826  00BFB8  B4D8               	btfsc	status,2,c
 15827  00BFBA  D7F3               	goto	l1591
 15828                           
 15829                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15830                           
 15831                           ;doprnt.c: 586: }
 15832                           
 15833                           ;doprnt.c: 585: break;
 15834  00BFBC  C00D  FFF6         	movff	printf@f,tblptrl
 15835  00BFC0  C00E  FFF7         	movff	printf@f+1,tblptrh
 15836  00BFC4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15837  00BFC4  6AF8               	clrf	tblptru,c
 15838  00BFC6                     	endif
 15839  00BFC6                     	if	0	;tblptru may be non-zero
 15840  00BFC6                     	endif
 15841  00BFC6  0008               	tblrd		*
 15842  00BFC8  50F5               	movf	tablat,w,c
 15843  00BFCA  ECFD  F04B         	call	_isdigit
 15844  00BFCE  A0D8               	btfss	status,0,c
 15845  00BFD0  D092               	goto	l1598
 15846                           
 15847                           ;doprnt.c: 598: width = 0;
 15848  00BFD2  0E00               	movlw	0
 15849  00BFD4  6E27               	movwf	printf@width+1,c
 15850  00BFD6  0E00               	movlw	0
 15851  00BFD8  6E26               	movwf	printf@width,c
 15852  00BFDA                     
 15853                           ;doprnt.c: 600: width *= 10;
 15854  00BFDA  C026  F001         	movff	printf@width,___wmul@multiplier
 15855  00BFDE  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 15856  00BFE2  0E00               	movlw	0
 15857  00BFE4  6E04               	movwf	___wmul@multiplicand+1,c
 15858  00BFE6  0E0A               	movlw	10
 15859  00BFE8  6E03               	movwf	___wmul@multiplicand,c
 15860  00BFEA  EC31  F04C         	call	___wmul	;wreg free
 15861  00BFEE  C001  F026         	movff	?___wmul,printf@width
 15862  00BFF2  C002  F027         	movff	?___wmul+1,printf@width+1
 15863                           
 15864                           ;doprnt.c: 601: width += *f++ - '0';
 15865  00BFF6  0ED0               	movlw	208
 15866  00BFF8  6E17               	movwf	??_printf& (0+255),c
 15867  00BFFA  0EFF               	movlw	255
 15868  00BFFC  6E18               	movwf	(??_printf+1)& (0+255),c
 15869  00BFFE  C00D  FFF6         	movff	printf@f,tblptrl
 15870  00C002  C00E  FFF7         	movff	printf@f+1,tblptrh
 15871  00C006                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15872  00C006  6AF8               	clrf	tblptru,c
 15873  00C008                     	endif
 15874  00C008                     	if	0	;tblptru may be non-zero
 15875  00C008                     	endif
 15876  00C008  0008               	tblrd		*
 15877  00C00A  50F5               	movf	tablat,w,c
 15878  00C00C  6E19               	movwf	(??_printf+2)& (0+255),c
 15879  00C00E  6A1A               	clrf	(??_printf+3)& (0+255),c
 15880  00C010  5017               	movf	??_printf,w,c
 15881  00C012  2619               	addwf	??_printf+2,f,c
 15882  00C014  5018               	movf	??_printf+1,w,c
 15883  00C016  221A               	addwfc	??_printf+3,f,c
 15884  00C018  5019               	movf	??_printf+2,w,c
 15885  00C01A  2626               	addwf	printf@width,f,c
 15886  00C01C  501A               	movf	??_printf+3,w,c
 15887  00C01E  2227               	addwfc	printf@width+1,f,c
 15888  00C020  4A0D               	infsnz	printf@f,f,c
 15889  00C022  2A0E               	incf	printf@f+1,f,c
 15890                           
 15891                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15892  00C024  C00D  FFF6         	movff	printf@f,tblptrl
 15893  00C028  C00E  FFF7         	movff	printf@f+1,tblptrh
 15894  00C02C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15895  00C02C  6AF8               	clrf	tblptru,c
 15896  00C02E                     	endif
 15897  00C02E                     	if	0	;tblptru may be non-zero
 15898  00C02E                     	endif
 15899  00C02E  0008               	tblrd		*
 15900  00C030  50F5               	movf	tablat,w,c
 15901  00C032  ECFD  F04B         	call	_isdigit
 15902  00C036  A0D8               	btfss	status,0,c
 15903  00C038  D05E               	goto	l1598
 15904  00C03A  D7CF               	goto	l1596
 15905  00C03C                     
 15906                           ;doprnt.c: 721: flag |= 0x80;
 15907  00C03C  8E25               	bsf	printf@flag,7,c
 15908                           
 15909                           ;doprnt.c: 723: break;
 15910  00C03E  D076               	goto	l1603
 15911  00C040                     
 15912                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15913  00C040  C01F  FFD9         	movff	printf@ap,fsr2l
 15914  00C044  C020  FFDA         	movff	printf@ap+1,fsr2h
 15915  00C048  CFDE F01D          	movff	postinc2,printf@cp
 15916  00C04C  CFDD F01E          	movff	postdec2,printf@cp+1
 15917  00C050  0E02               	movlw	2
 15918  00C052  261F               	addwf	printf@ap,f,c
 15919  00C054  0E00               	movlw	0
 15920  00C056  2220               	addwfc	printf@ap+1,f,c
 15921                           
 15922                           ;doprnt.c: 740: if(!cp)
 15923  00C058  501D               	movf	printf@cp,w,c
 15924  00C05A  101E               	iorwf	printf@cp+1,w,c
 15925  00C05C  A4D8               	btfss	status,2,c
 15926  00C05E  D004               	goto	l1606
 15927                           
 15928                           ;doprnt.c: 741: cp = "(null)";
 15929  00C060  0E9F               	movlw	low STR_153
 15930  00C062  6E1D               	movwf	printf@cp,c
 15931  00C064  0EFC               	movlw	high STR_153
 15932  00C066  6E1E               	movwf	printf@cp+1,c
 15933  00C068                     l1606:
 15934                           
 15935                           ;doprnt.c: 745: len = 0;
 15936  00C068  0E00               	movlw	0
 15937  00C06A  6E22               	movwf	printf@len+1,c
 15938  00C06C  0E00               	movlw	0
 15939  00C06E  6E21               	movwf	printf@len,c
 15940                           
 15941                           ;doprnt.c: 746: while(cp[len])
 15942  00C070  D002               	goto	l1607
 15943  00C072                     
 15944                           ;doprnt.c: 747: len++;
 15945  00C072  4A21               	infsnz	printf@len,f,c
 15946  00C074  2A22               	incf	printf@len+1,f,c
 15947  00C076                     l1607:
 15948  00C076  5021               	movf	printf@len,w,c
 15949  00C078  241D               	addwf	printf@cp,w,c
 15950  00C07A  6E17               	movwf	??_printf& (0+255),c
 15951  00C07C  5022               	movf	printf@len+1,w,c
 15952  00C07E  201E               	addwfc	printf@cp+1,w,c
 15953  00C080  6E18               	movwf	(??_printf+1)& (0+255),c
 15954  00C082  C017  FFF6         	movff	??_printf,tblptrl
 15955  00C086  C018  FFF7         	movff	??_printf+1,tblptrh
 15956  00C08A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15957  00C08A  6AF8               	clrf	tblptru,c
 15958  00C08C                     	endif
 15959  00C08C                     	if	0	;tblptru may be non-zero
 15960  00C08C                     	endif
 15961  00C08C  0008               	tblrd		*
 15962  00C08E  50F5               	movf	tablat,w,c
 15963  00C090  0900               	iorlw	0
 15964  00C092  A4D8               	btfss	status,2,c
 15965  00C094  D7EE               	goto	l1608
 15966                           
 15967                           ;doprnt.c: 757: if(width > len)
 15968  00C096  5026               	movf	printf@width,w,c
 15969  00C098  5C21               	subwf	printf@len,w,c
 15970  00C09A  5027               	movf	printf@width+1,w,c
 15971  00C09C  5822               	subwfb	printf@len+1,w,c
 15972  00C09E  B0D8               	btfsc	status,0,c
 15973  00C0A0  D005               	goto	l1610
 15974                           
 15975                           ;doprnt.c: 758: width -= len;
 15976  00C0A2  5021               	movf	printf@len,w,c
 15977  00C0A4  5E26               	subwf	printf@width,f,c
 15978  00C0A6  5022               	movf	printf@len+1,w,c
 15979  00C0A8  5A27               	subwfb	printf@width+1,f,c
 15980  00C0AA  D008               	goto	l1612
 15981  00C0AC                     l1610:
 15982                           
 15983                           ;doprnt.c: 759: else
 15984                           ;doprnt.c: 760: width = 0;
 15985  00C0AC  0E00               	movlw	0
 15986  00C0AE  6E27               	movwf	printf@width+1,c
 15987  00C0B0  0E00               	movlw	0
 15988  00C0B2  6E26               	movwf	printf@width,c
 15989                           
 15990                           ;doprnt.c: 764: while(width--)
 15991  00C0B4  D003               	goto	l1612
 15992  00C0B6                     l6964:
 15993                           
 15994                           ;doprnt.c: 765: (putch(' ') );
 15995  00C0B6  0E20               	movlw	32
 15996  00C0B8  ECF3  F04B         	call	_putch
 15997  00C0BC                     l1612:
 15998  00C0BC  0626               	decf	printf@width,f,c
 15999  00C0BE  A0D8               	btfss	status,0,c
 16000  00C0C0  0627               	decf	printf@width+1,f,c
 16001  00C0C2  2826               	incf	printf@width,w,c
 16002  00C0C4  E1F8               	bnz	l6964
 16003  00C0C6  2827               	incf	printf@width+1,w,c
 16004  00C0C8  B4D8               	btfsc	status,2,c
 16005  00C0CA  D00C               	goto	l1615
 16006  00C0CC  D7F4               	goto	l1613
 16007  00C0CE                     l6968:
 16008                           
 16009                           ;doprnt.c: 768: (putch(*cp++) );
 16010  00C0CE  C01D  FFF6         	movff	printf@cp,tblptrl
 16011  00C0D2  C01E  FFF7         	movff	printf@cp+1,tblptrh
 16012  00C0D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16013  00C0D6  6AF8               	clrf	tblptru,c
 16014  00C0D8                     	endif
 16015  00C0D8                     	if	0	;tblptru may be non-zero
 16016  00C0D8                     	endif
 16017  00C0D8  0008               	tblrd		*
 16018  00C0DA  50F5               	movf	tablat,w,c
 16019  00C0DC  ECF3  F04B         	call	_putch
 16020  00C0E0  4A1D               	infsnz	printf@cp,f,c
 16021  00C0E2  2A1E               	incf	printf@cp+1,f,c
 16022  00C0E4                     l1615:
 16023  00C0E4  0621               	decf	printf@len,f,c
 16024  00C0E6  A0D8               	btfss	status,0,c
 16025  00C0E8  0622               	decf	printf@len+1,f,c
 16026  00C0EA  2821               	incf	printf@len,w,c
 16027  00C0EC  E1F0               	bnz	l6968
 16028  00C0EE  2822               	incf	printf@len+1,w,c
 16029  00C0F0  B4D8               	btfsc	status,2,c
 16030  00C0F2  D12E               	goto	u7470
 16031  00C0F4  D7EC               	goto	l1616
 16032  00C0F6                     l1598:
 16033  00C0F6  C00D  FFF6         	movff	printf@f,tblptrl
 16034  00C0FA  C00E  FFF7         	movff	printf@f+1,tblptrh
 16035  00C0FE  4A0D               	infsnz	printf@f,f,c
 16036  00C100  2A0E               	incf	printf@f+1,f,c
 16037  00C102                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16038  00C102  6AF8               	clrf	tblptru,c
 16039  00C104                     	endif
 16040  00C104                     	if	0	;tblptru may be non-zero
 16041  00C104                     	endif
 16042  00C104  0008               	tblrd		*
 16043  00C106  CFF5 F028          	movff	tablat,printf@c
 16044  00C10A  5028               	movf	printf@c,w,c
 16045                           
 16046                           ; Switch size 1, requested type "space"
 16047                           ; Number of cases is 5, Range of values is 0 to 120
 16048                           ; switch strategies available:
 16049                           ; Name         Instructions Cycles
 16050                           ; simple_byte           16     9 (average)
 16051                           ;	Chosen strategy is simple_byte
 16052  00C10C  0A00               	xorlw	0	; case 0
 16053  00C10E  B4D8               	btfsc	status,2,c
 16054  00C110  0012               	return	
 16055  00C112  0A64               	xorlw	100	; case 100
 16056  00C114  B4D8               	btfsc	status,2,c
 16057  00C116  D00A               	goto	l1603
 16058  00C118  0A0D               	xorlw	13	; case 105
 16059  00C11A  B4D8               	btfsc	status,2,c
 16060  00C11C  D007               	goto	l1603
 16061  00C11E  0A1A               	xorlw	26	; case 115
 16062  00C120  B4D8               	btfsc	status,2,c
 16063  00C122  D78E               	goto	l1605
 16064  00C124  0A0B               	xorlw	11	; case 120
 16065  00C126  B4D8               	btfsc	status,2,c
 16066  00C128  D789               	goto	l1604
 16067  00C12A  D112               	goto	u7470
 16068  00C12C                     l1603:
 16069                           
 16070                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 16071  00C12C  BE25               	btfsc	printf@flag,7,c
 16072  00C12E  D015               	goto	l1619
 16073                           
 16074                           ;doprnt.c: 1253: {
 16075                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16076  00C130  C01F  FFD9         	movff	printf@ap,fsr2l
 16077  00C134  C020  FFDA         	movff	printf@ap+1,fsr2h
 16078  00C138  CFDE F023          	movff	postinc2,printf@val
 16079  00C13C  CFDD F024          	movff	postdec2,printf@val+1
 16080  00C140  0E02               	movlw	2
 16081  00C142  261F               	addwf	printf@ap,f,c
 16082  00C144  0E00               	movlw	0
 16083  00C146  2220               	addwfc	printf@ap+1,f,c
 16084                           
 16085                           ;doprnt.c: 1261: if((int)val < 0) {
 16086  00C148  AE24               	btfss	printf@val+1,7,c
 16087  00C14A  D04A               	goto	l1622
 16088                           
 16089                           ;doprnt.c: 1262: flag |= 0x03;
 16090  00C14C  0E03               	movlw	3
 16091  00C14E  1225               	iorwf	printf@flag,f,c
 16092                           
 16093                           ;doprnt.c: 1263: val = -val;
 16094  00C150  6C23               	negf	printf@val,c
 16095  00C152  1E24               	comf	printf@val+1,f,c
 16096  00C154  B0D8               	btfsc	status,0,c
 16097  00C156  2A24               	incf	printf@val+1,f,c
 16098                           
 16099                           ;doprnt.c: 1264: }
 16100                           ;doprnt.c: 1266: }
 16101  00C158  D043               	goto	l1622
 16102  00C15A                     l1619:
 16103                           
 16104                           ;doprnt.c: 1268: else
 16105                           ;doprnt.c: 1273: {
 16106                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16107  00C15A  C01F  FFD9         	movff	printf@ap,fsr2l
 16108  00C15E  C020  FFDA         	movff	printf@ap+1,fsr2h
 16109  00C162  CFDE F023          	movff	postinc2,printf@val
 16110  00C166  CFDD F024          	movff	postdec2,printf@val+1
 16111  00C16A  0E02               	movlw	2
 16112  00C16C  261F               	addwf	printf@ap,f,c
 16113  00C16E  0E00               	movlw	0
 16114  00C170  2220               	addwfc	printf@ap+1,f,c
 16115                           
 16116                           ;doprnt.c: 1287: }
 16117                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 16118  00C172  D036               	goto	l1622
 16119  00C174                     
 16120                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16121  00C174  0E01               	movlw	1
 16122  00C176  6E28               	movwf	printf@c,c
 16123  00C178                     l6994:
 16124  00C178  0E05               	movlw	5
 16125  00C17A  1828               	xorwf	printf@c,w,c
 16126  00C17C  B4D8               	btfsc	status,2,c
 16127  00C17E  D038               	goto	l1627
 16128                           
 16129                           ;doprnt.c: 1306: if(val < dpowers[c])
 16130  00C180  5028               	movf	printf@c,w,c
 16131  00C182  0D02               	mullw	2
 16132  00C184  0E47               	movlw	low _dpowers
 16133  00C186  24F3               	addwf	prodl,w,c
 16134  00C188  6EF6               	movwf	tblptrl,c
 16135  00C18A  0EF9               	movlw	high _dpowers
 16136  00C18C  20F4               	addwfc	prodh,w,c
 16137  00C18E  6EF7               	movwf	tblptrh,c
 16138  00C190                     	if	1	;There are 3 active tblptr bytes
 16139  00C190  6AF8               	clrf	tblptru,c
 16140  00C192  0E00               	movlw	low (__mediumconst shr (0+16))
 16141  00C194  22F8               	addwfc	tblptru,f,c
 16142  00C196                     	endif
 16143  00C196  0009               	tblrd		*+
 16144  00C198  50F5               	movf	tablat,w,c
 16145  00C19A  5C23               	subwf	printf@val,w,c
 16146  00C19C  0009               	tblrd		*+
 16147  00C19E  50F5               	movf	tablat,w,c
 16148  00C1A0  5824               	subwfb	printf@val+1,w,c
 16149  00C1A2  A0D8               	btfss	status,0,c
 16150  00C1A4  D025               	goto	l1627
 16151                           
 16152                           ;doprnt.c: 1307: break;
 16153  00C1A6  2A28               	incf	printf@c,f,c
 16154  00C1A8  D7E7               	goto	l6994
 16155  00C1AA                     
 16156                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 16157  00C1AA  0E01               	movlw	1
 16158  00C1AC  6E28               	movwf	printf@c,c
 16159  00C1AE                     l7008:
 16160  00C1AE  0E04               	movlw	4
 16161  00C1B0  1828               	xorwf	printf@c,w,c
 16162  00C1B2  B4D8               	btfsc	status,2,c
 16163  00C1B4  D01D               	goto	l1627
 16164                           
 16165                           ;doprnt.c: 1317: if(val < hexpowers[c])
 16166  00C1B6  5028               	movf	printf@c,w,c
 16167  00C1B8  0D02               	mullw	2
 16168  00C1BA  0E51               	movlw	low _hexpowers
 16169  00C1BC  24F3               	addwf	prodl,w,c
 16170  00C1BE  6EF6               	movwf	tblptrl,c
 16171  00C1C0  0EF9               	movlw	high _hexpowers
 16172  00C1C2  20F4               	addwfc	prodh,w,c
 16173  00C1C4  6EF7               	movwf	tblptrh,c
 16174  00C1C6                     	if	1	;There are 3 active tblptr bytes
 16175  00C1C6  6AF8               	clrf	tblptru,c
 16176  00C1C8  0E00               	movlw	low (__mediumconst shr (0+16))
 16177  00C1CA  22F8               	addwfc	tblptru,f,c
 16178  00C1CC                     	endif
 16179  00C1CC  0009               	tblrd		*+
 16180  00C1CE  50F5               	movf	tablat,w,c
 16181  00C1D0  5C23               	subwf	printf@val,w,c
 16182  00C1D2  0009               	tblrd		*+
 16183  00C1D4  50F5               	movf	tablat,w,c
 16184  00C1D6  5824               	subwfb	printf@val+1,w,c
 16185  00C1D8  A0D8               	btfss	status,0,c
 16186  00C1DA  D00A               	goto	l1627
 16187                           
 16188                           ;doprnt.c: 1318: break;
 16189  00C1DC  2A28               	incf	printf@c,f,c
 16190  00C1DE  D7E7               	goto	l7008
 16191  00C1E0                     l1622:
 16192  00C1E0  5025               	movf	printf@flag,w,c
 16193  00C1E2  0B80               	andlw	128
 16194                           
 16195                           ; Switch size 1, requested type "space"
 16196                           ; Number of cases is 2, Range of values is 0 to 128
 16197                           ; switch strategies available:
 16198                           ; Name         Instructions Cycles
 16199                           ; simple_byte            7     4 (average)
 16200                           ;	Chosen strategy is simple_byte
 16201  00C1E4  0A00               	xorlw	0	; case 0
 16202  00C1E6  B4D8               	btfsc	status,2,c
 16203  00C1E8  D7C5               	goto	l1623
 16204  00C1EA  0A80               	xorlw	128	; case 128
 16205  00C1EC  B4D8               	btfsc	status,2,c
 16206  00C1EE  D7DD               	goto	l1628
 16207  00C1F0                     l1627:
 16208                           
 16209                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16210  00C1F0  5026               	movf	printf@width,w,c
 16211  00C1F2  1027               	iorwf	printf@width+1,w,c
 16212  00C1F4  B4D8               	btfsc	status,2,c
 16213  00C1F6  D009               	goto	l1632
 16214  00C1F8  C025  F017         	movff	printf@flag,??_printf
 16215  00C1FC  0E03               	movlw	3
 16216  00C1FE  1617               	andwf	??_printf,f,c
 16217  00C200  B4D8               	btfsc	status,2,c
 16218  00C202  D003               	goto	l1632
 16219                           
 16220                           ;doprnt.c: 1346: width--;
 16221  00C204  0626               	decf	printf@width,f,c
 16222  00C206  A0D8               	btfss	status,0,c
 16223  00C208  0627               	decf	printf@width+1,f,c
 16224  00C20A                     l1632:
 16225                           
 16226                           ;doprnt.c: 1381: if(width > c)
 16227  00C20A  0E80               	movlw	128
 16228  00C20C  BE28               	btfsc	printf@c,7,c
 16229  00C20E  0E7F               	movlw	127
 16230  00C210  6E17               	movwf	??_printf& (0+255),c
 16231  00C212  5026               	movf	printf@width,w,c
 16232  00C214  5C28               	subwf	printf@c,w,c
 16233  00C216  5027               	movf	printf@width+1,w,c
 16234  00C218  0A80               	xorlw	128
 16235  00C21A  5817               	subwfb	??_printf& (0+255),w,c
 16236  00C21C  B0D8               	btfsc	status,0,c
 16237  00C21E  D007               	goto	l1633
 16238                           
 16239                           ;doprnt.c: 1382: width -= c;
 16240  00C220  5028               	movf	printf@c,w,c
 16241  00C222  5E26               	subwf	printf@width,f,c
 16242  00C224  0E00               	movlw	0
 16243  00C226  BE28               	btfsc	printf@c,7,c
 16244  00C228  0EFF               	movlw	255
 16245  00C22A  5A27               	subwfb	printf@width+1,f,c
 16246  00C22C  D004               	goto	l1634
 16247  00C22E                     l1633:
 16248                           
 16249                           ;doprnt.c: 1383: else
 16250                           ;doprnt.c: 1384: width = 0;
 16251  00C22E  0E00               	movlw	0
 16252  00C230  6E27               	movwf	printf@width+1,c
 16253  00C232  0E00               	movlw	0
 16254  00C234  6E26               	movwf	printf@width,c
 16255  00C236                     l1634:
 16256                           
 16257                           ;doprnt.c: 1387: if(flag & 0x04) {
 16258  00C236  A425               	btfss	printf@flag,2,c
 16259  00C238  D014               	goto	l1635
 16260                           
 16261                           ;doprnt.c: 1392: if(flag & 0x03)
 16262  00C23A  C025  F017         	movff	printf@flag,??_printf
 16263  00C23E  0E03               	movlw	3
 16264  00C240  1617               	andwf	??_printf,f,c
 16265  00C242  B4D8               	btfsc	status,2,c
 16266  00C244  D003               	goto	l1636
 16267                           
 16268                           ;doprnt.c: 1393: (putch('-') );
 16269  00C246  0E2D               	movlw	45
 16270  00C248  ECF3  F04B         	call	_putch
 16271  00C24C                     l1636:
 16272                           
 16273                           ;doprnt.c: 1415: if(width)
 16274  00C24C  5026               	movf	printf@width,w,c
 16275  00C24E  1027               	iorwf	printf@width+1,w,c
 16276  00C250  B4D8               	btfsc	status,2,c
 16277  00C252  D01E               	goto	l1644
 16278                           
 16279                           ;doprnt.c: 1417: (putch('0') );
 16280                           
 16281                           ;doprnt.c: 1416: do
 16282  00C254  0E30               	movlw	48
 16283  00C256  ECF3  F04B         	call	_putch
 16284                           
 16285                           ;doprnt.c: 1418: while(--width);
 16286  00C25A  0626               	decf	printf@width,f,c
 16287  00C25C  A0D8               	btfss	status,0,c
 16288  00C25E  0627               	decf	printf@width+1,f,c
 16289  00C260  D7F5               	goto	l1636
 16290  00C262                     l1635:
 16291                           
 16292                           ;doprnt.c: 1422: {
 16293                           ;doprnt.c: 1424: if(width
 16294                           ;doprnt.c: 1428: )
 16295  00C262  5026               	movf	printf@width,w,c
 16296  00C264  1027               	iorwf	printf@width+1,w,c
 16297  00C266  B4D8               	btfsc	status,2,c
 16298  00C268  D00A               	goto	u7450
 16299  00C26A                     u7440:
 16300                           
 16301                           ;doprnt.c: 1430: (putch(' ') );
 16302                           
 16303                           ;doprnt.c: 1429: do
 16304  00C26A  0E20               	movlw	32
 16305  00C26C  ECF3  F04B         	call	_putch
 16306                           
 16307                           ;doprnt.c: 1431: while(--width);
 16308  00C270  0626               	decf	printf@width,f,c
 16309  00C272  A0D8               	btfss	status,0,c
 16310  00C274  0627               	decf	printf@width+1,f,c
 16311  00C276  5026               	movf	printf@width,w,c
 16312  00C278  1027               	iorwf	printf@width+1,w,c
 16313  00C27A  A4D8               	btfss	status,2,c
 16314  00C27C  D7F6               	goto	u7440
 16315  00C27E                     u7450:
 16316                           
 16317                           ;doprnt.c: 1438: if(flag & 0x03)
 16318  00C27E  C025  F017         	movff	printf@flag,??_printf
 16319  00C282  0E03               	movlw	3
 16320  00C284  1617               	andwf	??_printf,f,c
 16321  00C286  B4D8               	btfsc	status,2,c
 16322  00C288  D003               	goto	l1644
 16323                           
 16324                           ;doprnt.c: 1439: (putch('-') );
 16325  00C28A  0E2D               	movlw	45
 16326  00C28C  ECF3  F04B         	call	_putch
 16327  00C290                     l1644:
 16328                           
 16329                           ;doprnt.c: 1469: }
 16330                           ;doprnt.c: 1472: prec = c;
 16331  00C290  C028  F01C         	movff	printf@c,printf@prec
 16332                           
 16333                           ;doprnt.c: 1474: while(prec--) {
 16334  00C294  D059               	goto	l1645
 16335  00C296                     
 16336                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16337  00C296  501C               	movf	printf@prec,w,c
 16338  00C298  0D02               	mullw	2
 16339  00C29A  0E47               	movlw	low _dpowers
 16340  00C29C  24F3               	addwf	prodl,w,c
 16341  00C29E  6EF6               	movwf	tblptrl,c
 16342  00C2A0  0EF9               	movlw	high _dpowers
 16343  00C2A2  20F4               	addwfc	prodh,w,c
 16344  00C2A4  6EF7               	movwf	tblptrh,c
 16345  00C2A6                     	if	1	;There are 3 active tblptr bytes
 16346  00C2A6  6AF8               	clrf	tblptru,c
 16347  00C2A8  0E00               	movlw	low (__mediumconst shr (0+16))
 16348  00C2AA  22F8               	addwfc	tblptru,f,c
 16349  00C2AC                     	endif
 16350  00C2AC  0009               	tblrd		*+
 16351  00C2AE  CFF5 F003          	movff	tablat,___lwdiv@divisor
 16352  00C2B2  000A               	tblrd		*-
 16353  00C2B4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 16354  00C2B8  C023  F001         	movff	printf@val,___lwdiv@dividend
 16355  00C2BC  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 16356  00C2C0  ECD9  F04C         	call	___lwdiv	;wreg free
 16357  00C2C4  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 16358  00C2C8  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 16359  00C2CC  0E00               	movlw	0
 16360  00C2CE  6E0B               	movwf	___lwmod@divisor+1,c
 16361  00C2D0  0E0A               	movlw	10
 16362  00C2D2  6E0A               	movwf	___lwmod@divisor,c
 16363  00C2D4  EC92  F04C         	call	___lwmod	;wreg free
 16364  00C2D8  5008               	movf	?___lwmod,w,c
 16365  00C2DA  0F30               	addlw	48
 16366  00C2DC  6E28               	movwf	printf@c,c
 16367                           
 16368                           ;doprnt.c: 1491: break;
 16369  00C2DE  D031               	goto	l1649
 16370  00C2E0                     
 16371                           ;doprnt.c: 1499: {
 16372                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16373  00C2E0  C023  F001         	movff	printf@val,___lwdiv@dividend
 16374  00C2E4  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 16375  00C2E8  501C               	movf	printf@prec,w,c
 16376  00C2EA  0D02               	mullw	2
 16377  00C2EC  0E51               	movlw	low _hexpowers
 16378  00C2EE  24F3               	addwf	prodl,w,c
 16379  00C2F0  6EF6               	movwf	tblptrl,c
 16380  00C2F2  0EF9               	movlw	high _hexpowers
 16381  00C2F4  20F4               	addwfc	prodh,w,c
 16382  00C2F6  6EF7               	movwf	tblptrh,c
 16383  00C2F8                     	if	1	;There are 3 active tblptr bytes
 16384  00C2F8  6AF8               	clrf	tblptru,c
 16385  00C2FA  0E00               	movlw	low (__mediumconst shr (0+16))
 16386  00C2FC  22F8               	addwfc	tblptru,f,c
 16387  00C2FE                     	endif
 16388  00C2FE  0009               	tblrd		*+
 16389  00C300  CFF5 F003          	movff	tablat,___lwdiv@divisor
 16390  00C304  000A               	tblrd		*-
 16391  00C306  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 16392  00C30A  ECD9  F04C         	call	___lwdiv	;wreg free
 16393  00C30E  5001               	movf	?___lwdiv,w,c
 16394  00C310  0B0F               	andlw	15
 16395  00C312  6E1B               	movwf	printf@idx,c
 16396                           
 16397                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16398  00C314  501B               	movf	printf@idx,w,c
 16399  00C316  0D01               	mullw	1
 16400  00C318  0E78               	movlw	low STR_154
 16401  00C31A  24F3               	addwf	prodl,w,c
 16402  00C31C  6EF6               	movwf	tblptrl,c
 16403  00C31E  0EF9               	movlw	high STR_154
 16404  00C320  20F4               	addwfc	prodh,w,c
 16405  00C322  6EF7               	movwf	tblptrh,c
 16406  00C324                     	if	1	;There are 3 active tblptr bytes
 16407  00C324  6AF8               	clrf	tblptru,c
 16408  00C326  0E00               	movlw	low (__mediumconst shr (0+16))
 16409  00C328  22F8               	addwfc	tblptru,f,c
 16410  00C32A                     	endif
 16411  00C32A  0008               	tblrd		*
 16412  00C32C  CFF5 F028          	movff	tablat,printf@c
 16413                           
 16414                           ;doprnt.c: 1523: }
 16415                           
 16416                           ;doprnt.c: 1508: }
 16417                           ;doprnt.c: 1510: break;
 16418  00C330  D008               	goto	l1649
 16419  00C332  5025               	movf	printf@flag,w,c
 16420  00C334  0B80               	andlw	128
 16421                           
 16422                           ; Switch size 1, requested type "space"
 16423                           ; Number of cases is 2, Range of values is 0 to 128
 16424                           ; switch strategies available:
 16425                           ; Name         Instructions Cycles
 16426                           ; simple_byte            7     4 (average)
 16427                           ;	Chosen strategy is simple_byte
 16428  00C336  0A00               	xorlw	0	; case 0
 16429  00C338  B4D8               	btfsc	status,2,c
 16430  00C33A  D7AD               	goto	l1648
 16431  00C33C  0A80               	xorlw	128	; case 128
 16432  00C33E  B4D8               	btfsc	status,2,c
 16433  00C340  D7CF               	goto	l1650
 16434  00C342                     l1649:
 16435                           
 16436                           ;doprnt.c: 1524: (putch(c) );
 16437  00C342  5028               	movf	printf@c,w,c
 16438  00C344  ECF3  F04B         	call	_putch
 16439  00C348                     l1645:
 16440  00C348  061C               	decf	printf@prec,f,c
 16441  00C34A  281C               	incf	printf@prec,w,c
 16442  00C34C  A4D8               	btfss	status,2,c
 16443  00C34E  D7F1               	goto	l1647
 16444  00C350                     u7470:
 16445  00C350  C00D  FFF6         	movff	printf@f,tblptrl
 16446  00C354  C00E  FFF7         	movff	printf@f+1,tblptrh
 16447  00C358  4A0D               	infsnz	printf@f,f,c
 16448  00C35A  2A0E               	incf	printf@f+1,f,c
 16449  00C35C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16450  00C35C  6AF8               	clrf	tblptru,c
 16451  00C35E                     	endif
 16452  00C35E                     	if	0	;tblptru may be non-zero
 16453  00C35E                     	endif
 16454  00C35E  0008               	tblrd		*
 16455  00C360  CFF5 F028          	movff	tablat,printf@c
 16456  00C364  5028               	movf	printf@c,w,c
 16457  00C366  B4D8               	btfsc	status,2,c
 16458  00C368  0012               	return	
 16459  00C36A  D60C               	goto	l1587
 16460  00C36C                     __end_of_printf:
 16461                           	opt stack 0
 16462                           tblptru	equ	0xFF8
 16463                           tblptrh	equ	0xFF7
 16464                           tblptrl	equ	0xFF6
 16465                           tablat	equ	0xFF5
 16466                           prodh	equ	0xFF4
 16467                           prodl	equ	0xFF3
 16468                           postinc0	equ	0xFEE
 16469                           wreg	equ	0xFE8
 16470                           postinc1	equ	0xFE6
 16471                           postdec1	equ	0xFE5
 16472                           plusw1	equ	0xFE3
 16473                           fsr1h	equ	0xFE2
 16474                           fsr1l	equ	0xFE1
 16475                           indf2	equ	0xFDF
 16476                           postinc2	equ	0xFDE
 16477                           postdec2	equ	0xFDD
 16478                           plusw2	equ	0xFDB
 16479                           fsr2h	equ	0xFDA
 16480                           fsr2l	equ	0xFD9
 16481                           status	equ	0xFD8
 16482                           
 16483 ;; *************** function _putch *****************
 16484 ;; Defined at:
 16485 ;;		line 72 in file "LCD.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;  data            1    wreg     unsigned char 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;  data            1    2[COMRAM] unsigned char 
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  1    wreg      void 
 16492 ;; Registers used:
 16493 ;;		wreg, status,2, status,0, cstack
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16503 ;;Total ram usage:        1 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    1
 16506 ;; This function calls:
 16507 ;;		_lcdNibble
 16508 ;; This function is called by:
 16509 ;;		_viewLogs
 16510 ;;		_food_press
 16511 ;;		_diet_press
 16512 ;;		_which_drawer
 16513 ;;		_printf
 16514 ;; This function uses a non-reentrant model
 16515 ;;
 16516                           
 16517                           	psect	text28
 16518  0097E6                     __ptext28:
 16519                           	opt stack 0
 16520  0097E6                     _putch:
 16521                           	opt stack 27
 16522                           
 16523                           ;incstack = 0
 16524                           ;putch@data stored from wreg
 16525  0097E6  6E03               	movwf	putch@data,c
 16526                           
 16527                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 16528  0097E8  848C               	bsf	3980,2,c	;volatile
 16529                           
 16530                           ;LCD.c: 81: lcdNibble(data);
 16531  0097EA  5003               	movf	putch@data,w,c
 16532  0097EC  EC27  F04E         	call	_lcdNibble
 16533                           
 16534                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 16535  0097F0  0EC8               	movlw	200
 16536  0097F2                     u15277:
 16537  0097F2  D000               	nop2	
 16538  0097F4  2EE8               	decfsz	wreg,f,c
 16539  0097F6  D7FD               	bra	u15277
 16540  0097F8  0012               	return		;funcret
 16541  0097FA                     __end_of_putch:
 16542                           	opt stack 0
 16543                           tblptru	equ	0xFF8
 16544                           tblptrh	equ	0xFF7
 16545                           tblptrl	equ	0xFF6
 16546                           tablat	equ	0xFF5
 16547                           prodh	equ	0xFF4
 16548                           prodl	equ	0xFF3
 16549                           postinc0	equ	0xFEE
 16550                           wreg	equ	0xFE8
 16551                           postinc1	equ	0xFE6
 16552                           postdec1	equ	0xFE5
 16553                           plusw1	equ	0xFE3
 16554                           fsr1h	equ	0xFE2
 16555                           fsr1l	equ	0xFE1
 16556                           indf2	equ	0xFDF
 16557                           postinc2	equ	0xFDE
 16558                           postdec2	equ	0xFDD
 16559                           plusw2	equ	0xFDB
 16560                           fsr2h	equ	0xFDA
 16561                           fsr2l	equ	0xFD9
 16562                           status	equ	0xFD8
 16563                           
 16564 ;; *************** function _isdigit *****************
 16565 ;; Defined at:
 16566 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 16567 ;; Parameters:    Size  Location     Type
 16568 ;;  c               1    wreg     unsigned char 
 16569 ;; Auto vars:     Size  Location     Type
 16570 ;;  c               1    2[COMRAM] unsigned char 
 16571 ;; Return value:  Size  Location     Type
 16572 ;;		None               void
 16573 ;; Registers used:
 16574 ;;		wreg, status,2, status,0
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16582 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;Total ram usage:        3 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; This function calls:
 16587 ;;		Nothing
 16588 ;; This function is called by:
 16589 ;;		_printf
 16590 ;; This function uses a non-reentrant model
 16591 ;;
 16592                           
 16593                           	psect	text29
 16594  0097FA                     __ptext29:
 16595                           	opt stack 0
 16596  0097FA                     _isdigit:
 16597                           	opt stack 27
 16598                           
 16599                           ;incstack = 0
 16600                           ;isdigit@c stored from wreg
 16601  0097FA  6E03               	movwf	isdigit@c,c
 16602  0097FC  0E00               	movlw	0
 16603  0097FE  6E02               	movwf	_isdigit$1966,c
 16604  009800  0E3A               	movlw	58
 16605  009802  6003               	cpfslt	isdigit@c,c
 16606  009804  D005               	goto	l1983
 16607  009806  0E2F               	movlw	47
 16608  009808  6403               	cpfsgt	isdigit@c,c
 16609  00980A  D002               	goto	l1983
 16610  00980C  0E01               	movlw	1
 16611  00980E  6E02               	movwf	_isdigit$1966,c
 16612  009810                     l1983:
 16613  009810  C002  F001         	movff	_isdigit$1966,??_isdigit
 16614  009814  3001               	rrcf	??_isdigit,w,c
 16615  009816  0012               	return	
 16616  009818                     __end_of_isdigit:
 16617                           	opt stack 0
 16618                           tblptru	equ	0xFF8
 16619                           tblptrh	equ	0xFF7
 16620                           tblptrl	equ	0xFF6
 16621                           tablat	equ	0xFF5
 16622                           prodh	equ	0xFF4
 16623                           prodl	equ	0xFF3
 16624                           postinc0	equ	0xFEE
 16625                           wreg	equ	0xFE8
 16626                           postinc1	equ	0xFE6
 16627                           postdec1	equ	0xFE5
 16628                           plusw1	equ	0xFE3
 16629                           fsr1h	equ	0xFE2
 16630                           fsr1l	equ	0xFE1
 16631                           indf2	equ	0xFDF
 16632                           postinc2	equ	0xFDE
 16633                           postdec2	equ	0xFDD
 16634                           plusw2	equ	0xFDB
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           
 16639 ;; *************** function ___lwmod *****************
 16640 ;; Defined at:
 16641 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  dividend        2    7[COMRAM] unsigned int 
 16644 ;;  divisor         2    9[COMRAM] unsigned int 
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;  counter         1   11[COMRAM] unsigned char 
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  2    7[COMRAM] unsigned int 
 16649 ;; Registers used:
 16650 ;;		wreg, status,2, status,0
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;Total ram usage:        5 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; This function calls:
 16663 ;;		Nothing
 16664 ;; This function is called by:
 16665 ;;		_displayLogs
 16666 ;;		_printf
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           	psect	text30
 16671  009924                     __ptext30:
 16672                           	opt stack 0
 16673  009924                     ___lwmod:
 16674                           	opt stack 27
 16675                           
 16676                           ;incstack = 0
 16677  009924  500A               	movf	___lwmod@divisor,w,c
 16678  009926  100B               	iorwf	___lwmod@divisor+1,w,c
 16679  009928  B4D8               	btfsc	status,2,c
 16680  00992A  D018               	goto	l2077
 16681  00992C  0E01               	movlw	1
 16682  00992E  6E0C               	movwf	___lwmod@counter,c
 16683  009930  D004               	goto	l2072
 16684  009932  90D8               	bcf	status,0,c
 16685  009934  360A               	rlcf	___lwmod@divisor,f,c
 16686  009936  360B               	rlcf	___lwmod@divisor+1,f,c
 16687  009938  2A0C               	incf	___lwmod@counter,f,c
 16688  00993A                     l2072:
 16689  00993A  AE0B               	btfss	___lwmod@divisor+1,7,c
 16690  00993C  D7FA               	goto	l2073
 16691  00993E                     u7190:
 16692  00993E  500A               	movf	___lwmod@divisor,w,c
 16693  009940  5C08               	subwf	___lwmod@dividend,w,c
 16694  009942  500B               	movf	___lwmod@divisor+1,w,c
 16695  009944  5809               	subwfb	___lwmod@dividend+1,w,c
 16696  009946  A0D8               	btfss	status,0,c
 16697  009948  D004               	goto	l2076
 16698  00994A  500A               	movf	___lwmod@divisor,w,c
 16699  00994C  5E08               	subwf	___lwmod@dividend,f,c
 16700  00994E  500B               	movf	___lwmod@divisor+1,w,c
 16701  009950  5A09               	subwfb	___lwmod@dividend+1,f,c
 16702  009952                     l2076:
 16703  009952  90D8               	bcf	status,0,c
 16704  009954  320B               	rrcf	___lwmod@divisor+1,f,c
 16705  009956  320A               	rrcf	___lwmod@divisor,f,c
 16706  009958  2E0C               	decfsz	___lwmod@counter,f,c
 16707  00995A  D7F1               	goto	u7190
 16708  00995C                     l2077:
 16709  00995C  C008  F008         	movff	___lwmod@dividend,?___lwmod
 16710  009960  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 16711  009964  0012               	return		;funcret
 16712  009966                     __end_of___lwmod:
 16713                           	opt stack 0
 16714                           tblptru	equ	0xFF8
 16715                           tblptrh	equ	0xFF7
 16716                           tblptrl	equ	0xFF6
 16717                           tablat	equ	0xFF5
 16718                           prodh	equ	0xFF4
 16719                           prodl	equ	0xFF3
 16720                           postinc0	equ	0xFEE
 16721                           wreg	equ	0xFE8
 16722                           postinc1	equ	0xFE6
 16723                           postdec1	equ	0xFE5
 16724                           plusw1	equ	0xFE3
 16725                           fsr1h	equ	0xFE2
 16726                           fsr1l	equ	0xFE1
 16727                           indf2	equ	0xFDF
 16728                           postinc2	equ	0xFDE
 16729                           postdec2	equ	0xFDD
 16730                           plusw2	equ	0xFDB
 16731                           fsr2h	equ	0xFDA
 16732                           fsr2l	equ	0xFD9
 16733                           status	equ	0xFD8
 16734                           
 16735 ;; *************** function ___lwdiv *****************
 16736 ;; Defined at:
 16737 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  dividend        2    0[COMRAM] unsigned int 
 16740 ;;  divisor         2    2[COMRAM] unsigned int 
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;  quotient        2    4[COMRAM] unsigned int 
 16743 ;;  counter         1    6[COMRAM] unsigned char 
 16744 ;; Return value:  Size  Location     Type
 16745 ;;                  2    0[COMRAM] unsigned int 
 16746 ;; Registers used:
 16747 ;;		wreg, status,2, status,0
 16748 ;; Tracked objects:
 16749 ;;		On entry : 0/0
 16750 ;;		On exit  : 0/0
 16751 ;;		Unchanged: 0/0
 16752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16754 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16756 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16757 ;;Total ram usage:        7 bytes
 16758 ;; Hardware stack levels used:    1
 16759 ;; This function calls:
 16760 ;;		Nothing
 16761 ;; This function is called by:
 16762 ;;		_displayLogs
 16763 ;;		_printf
 16764 ;; This function uses a non-reentrant model
 16765 ;;
 16766                           
 16767                           	psect	text31
 16768  0099B2                     __ptext31:
 16769                           	opt stack 0
 16770  0099B2                     ___lwdiv:
 16771                           	opt stack 27
 16772                           
 16773                           ;incstack = 0
 16774  0099B2  0E00               	movlw	0
 16775  0099B4  6E06               	movwf	___lwdiv@quotient+1,c
 16776  0099B6  0E00               	movlw	0
 16777  0099B8  6E05               	movwf	___lwdiv@quotient,c
 16778  0099BA  5003               	movf	___lwdiv@divisor,w,c
 16779  0099BC  1004               	iorwf	___lwdiv@divisor+1,w,c
 16780  0099BE  B4D8               	btfsc	status,2,c
 16781  0099C0  D01C               	goto	l2067
 16782  0099C2  0E01               	movlw	1
 16783  0099C4  6E07               	movwf	___lwdiv@counter,c
 16784  0099C6  D004               	goto	l2062
 16785  0099C8  90D8               	bcf	status,0,c
 16786  0099CA  3603               	rlcf	___lwdiv@divisor,f,c
 16787  0099CC  3604               	rlcf	___lwdiv@divisor+1,f,c
 16788  0099CE  2A07               	incf	___lwdiv@counter,f,c
 16789  0099D0                     l2062:
 16790  0099D0  AE04               	btfss	___lwdiv@divisor+1,7,c
 16791  0099D2  D7FA               	goto	l2063
 16792  0099D4                     u7160:
 16793  0099D4  90D8               	bcf	status,0,c
 16794  0099D6  3605               	rlcf	___lwdiv@quotient,f,c
 16795  0099D8  3606               	rlcf	___lwdiv@quotient+1,f,c
 16796  0099DA  5003               	movf	___lwdiv@divisor,w,c
 16797  0099DC  5C01               	subwf	___lwdiv@dividend,w,c
 16798  0099DE  5004               	movf	___lwdiv@divisor+1,w,c
 16799  0099E0  5802               	subwfb	___lwdiv@dividend+1,w,c
 16800  0099E2  A0D8               	btfss	status,0,c
 16801  0099E4  D005               	goto	l2066
 16802  0099E6  5003               	movf	___lwdiv@divisor,w,c
 16803  0099E8  5E01               	subwf	___lwdiv@dividend,f,c
 16804  0099EA  5004               	movf	___lwdiv@divisor+1,w,c
 16805  0099EC  5A02               	subwfb	___lwdiv@dividend+1,f,c
 16806  0099EE  8005               	bsf	___lwdiv@quotient,0,c
 16807  0099F0                     l2066:
 16808  0099F0  90D8               	bcf	status,0,c
 16809  0099F2  3204               	rrcf	___lwdiv@divisor+1,f,c
 16810  0099F4  3203               	rrcf	___lwdiv@divisor,f,c
 16811  0099F6  2E07               	decfsz	___lwdiv@counter,f,c
 16812  0099F8  D7ED               	goto	u7160
 16813  0099FA                     l2067:
 16814  0099FA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 16815  0099FE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16816  009A02  0012               	return		;funcret
 16817  009A04                     __end_of___lwdiv:
 16818                           	opt stack 0
 16819                           tblptru	equ	0xFF8
 16820                           tblptrh	equ	0xFF7
 16821                           tblptrl	equ	0xFF6
 16822                           tablat	equ	0xFF5
 16823                           prodh	equ	0xFF4
 16824                           prodl	equ	0xFF3
 16825                           postinc0	equ	0xFEE
 16826                           wreg	equ	0xFE8
 16827                           postinc1	equ	0xFE6
 16828                           postdec1	equ	0xFE5
 16829                           plusw1	equ	0xFE3
 16830                           fsr1h	equ	0xFE2
 16831                           fsr1l	equ	0xFE1
 16832                           indf2	equ	0xFDF
 16833                           postinc2	equ	0xFDE
 16834                           postdec2	equ	0xFDD
 16835                           plusw2	equ	0xFDB
 16836                           fsr2h	equ	0xFDA
 16837                           fsr2l	equ	0xFD9
 16838                           status	equ	0xFD8
 16839                           
 16840 ;; *************** function _moveVertically *****************
 16841 ;; Defined at:
 16842 ;;		line 681 in file "operationMode.c"
 16843 ;; Parameters:    Size  Location     Type
 16844 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 16845 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 16846 ;; Auto vars:     Size  Location     Type
 16847 ;;		None
 16848 ;; Return value:  Size  Location     Type
 16849 ;;                  2   11[COMRAM] unsigned int 
 16850 ;; Registers used:
 16851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16852 ;; Tracked objects:
 16853 ;;		On entry : 0/0
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16861 ;;Total ram usage:        4 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    2
 16864 ;; This function calls:
 16865 ;;		_verticalStepper
 16866 ;; This function is called by:
 16867 ;;		_mainOperation
 16868 ;; This function uses a non-reentrant model
 16869 ;;
 16870                           
 16871                           	psect	text32
 16872  00B7D4                     __ptext32:
 16873                           	opt stack 0
 16874  00B7D4                     _moveVertically:
 16875                           	opt stack 27
 16876                           
 16877                           ;operationMode.c: 683: if (currentDrawer != 0 && nextDrawer != 0 && nextDrawer > current
      +                          Drawer){
 16878                           
 16879                           ;incstack = 0
 16880  00B7D4  500C               	movf	moveVertically@currentDrawer,w,c
 16881  00B7D6  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16882  00B7D8  B4D8               	btfsc	status,2,c
 16883  00B7DA  D123               	goto	l491
 16884  00B7DC  500E               	movf	moveVertically@nextDrawer,w,c
 16885  00B7DE  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16886  00B7E0  B4D8               	btfsc	status,2,c
 16887  00B7E2  D11F               	goto	l491
 16888  00B7E4  500E               	movf	moveVertically@nextDrawer,w,c
 16889  00B7E6  5C0C               	subwf	moveVertically@currentDrawer,w,c
 16890  00B7E8  500F               	movf	moveVertically@nextDrawer+1,w,c
 16891  00B7EA  580D               	subwfb	moveVertically@currentDrawer+1,w,c
 16892  00B7EC  B0D8               	btfsc	status,0,c
 16893  00B7EE  D119               	goto	l491
 16894                           
 16895                           ;operationMode.c: 684: if (currentDrawer == 1 || currentDrawer == 2 || currentDrawer == 
      +                          3 || currentDrawer == 4){
 16896  00B7F0  040C               	decf	moveVertically@currentDrawer,w,c
 16897  00B7F2  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16898  00B7F4  B4D8               	btfsc	status,2,c
 16899  00B7F6  D00F               	goto	u10670
 16900  00B7F8  0E02               	movlw	2
 16901  00B7FA  180C               	xorwf	moveVertically@currentDrawer,w,c
 16902  00B7FC  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16903  00B7FE  B4D8               	btfsc	status,2,c
 16904  00B800  D00A               	goto	u10670
 16905  00B802  0E03               	movlw	3
 16906  00B804  180C               	xorwf	moveVertically@currentDrawer,w,c
 16907  00B806  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16908  00B808  B4D8               	btfsc	status,2,c
 16909  00B80A  D005               	goto	u10670
 16910  00B80C  0E04               	movlw	4
 16911  00B80E  180C               	xorwf	moveVertically@currentDrawer,w,c
 16912  00B810  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16913  00B812  A4D8               	btfss	status,2,c
 16914  00B814  D06F               	goto	l492
 16915  00B816                     u10670:
 16916                           
 16917                           ;operationMode.c: 685: if (nextDrawer == 5 || nextDrawer == 6 || nextDrawer == 7 || next
      +                          Drawer == 8){
 16918  00B816  0E05               	movlw	5
 16919  00B818  180E               	xorwf	moveVertically@nextDrawer,w,c
 16920  00B81A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16921  00B81C  B4D8               	btfsc	status,2,c
 16922  00B81E  D00F               	goto	u10710
 16923  00B820  0E06               	movlw	6
 16924  00B822  180E               	xorwf	moveVertically@nextDrawer,w,c
 16925  00B824  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16926  00B826  B4D8               	btfsc	status,2,c
 16927  00B828  D00A               	goto	u10710
 16928  00B82A  0E07               	movlw	7
 16929  00B82C  180E               	xorwf	moveVertically@nextDrawer,w,c
 16930  00B82E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16931  00B830  B4D8               	btfsc	status,2,c
 16932  00B832  D005               	goto	u10710
 16933  00B834  0E08               	movlw	8
 16934  00B836  180E               	xorwf	moveVertically@nextDrawer,w,c
 16935  00B838  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16936  00B83A  A4D8               	btfss	status,2,c
 16937  00B83C  D011               	goto	l495
 16938  00B83E                     u10710:
 16939                           
 16940                           ;operationMode.c: 686: verticalStepper(1, 0);
 16941  00B83E  0E00               	movlw	0
 16942  00B840  6E07               	movwf	verticalStepper@rotations+1,c
 16943  00B842  0E01               	movlw	1
 16944  00B844  6E06               	movwf	verticalStepper@rotations,c
 16945  00B846  0E00               	movlw	0
 16946  00B848  6E09               	movwf	verticalStepper@direction+1,c
 16947  00B84A  0E00               	movlw	0
 16948  00B84C  6E08               	movwf	verticalStepper@direction,c
 16949  00B84E  ECEF  F04D         	call	_verticalStepper	;wreg free
 16950                           
 16951                           ;operationMode.c: 687: return (currentDrawer + 4);
 16952  00B852  0E04               	movlw	4
 16953  00B854  240C               	addwf	moveVertically@currentDrawer,w,c
 16954  00B856  6E0C               	movwf	?_moveVertically,c
 16955  00B858  0E00               	movlw	0
 16956  00B85A  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 16957  00B85C  6E0D               	movwf	?_moveVertically+1,c
 16958                           
 16959                           ;operationMode.c: 688: }
 16960  00B85E  0012               	return	
 16961  00B860                     l495:
 16962                           
 16963                           ;operationMode.c: 689: else if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 
      +                          || nextDrawer == 12){
 16964  00B860  0E09               	movlw	9
 16965  00B862  180E               	xorwf	moveVertically@nextDrawer,w,c
 16966  00B864  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16967  00B866  B4D8               	btfsc	status,2,c
 16968  00B868  D00F               	goto	u10750
 16969  00B86A  0E0A               	movlw	10
 16970  00B86C  180E               	xorwf	moveVertically@nextDrawer,w,c
 16971  00B86E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16972  00B870  B4D8               	btfsc	status,2,c
 16973  00B872  D00A               	goto	u10750
 16974  00B874  0E0B               	movlw	11
 16975  00B876  180E               	xorwf	moveVertically@nextDrawer,w,c
 16976  00B878  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16977  00B87A  B4D8               	btfsc	status,2,c
 16978  00B87C  D005               	goto	u10750
 16979  00B87E  0E0C               	movlw	12
 16980  00B880  180E               	xorwf	moveVertically@nextDrawer,w,c
 16981  00B882  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16982  00B884  A4D8               	btfss	status,2,c
 16983  00B886  D011               	goto	l500
 16984  00B888                     u10750:
 16985                           
 16986                           ;operationMode.c: 690: verticalStepper(2, 0);
 16987  00B888  0E00               	movlw	0
 16988  00B88A  6E07               	movwf	verticalStepper@rotations+1,c
 16989  00B88C  0E02               	movlw	2
 16990  00B88E  6E06               	movwf	verticalStepper@rotations,c
 16991  00B890  0E00               	movlw	0
 16992  00B892  6E09               	movwf	verticalStepper@direction+1,c
 16993  00B894  0E00               	movlw	0
 16994  00B896  6E08               	movwf	verticalStepper@direction,c
 16995  00B898  ECEF  F04D         	call	_verticalStepper	;wreg free
 16996                           
 16997                           ;operationMode.c: 691: return (currentDrawer + 8);
 16998  00B89C  0E08               	movlw	8
 16999  00B89E  240C               	addwf	moveVertically@currentDrawer,w,c
 17000  00B8A0  6E0C               	movwf	?_moveVertically,c
 17001  00B8A2  0E00               	movlw	0
 17002  00B8A4  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17003  00B8A6  6E0D               	movwf	?_moveVertically+1,c
 17004                           
 17005                           ;operationMode.c: 692: }
 17006  00B8A8  0012               	return	
 17007  00B8AA                     l500:
 17008                           
 17009                           ;operationMode.c: 693: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 17010  00B8AA  0E0D               	movlw	13
 17011  00B8AC  180E               	xorwf	moveVertically@nextDrawer,w,c
 17012  00B8AE  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17013  00B8B0  B4D8               	btfsc	status,2,c
 17014  00B8B2  D00F               	goto	u10790
 17015  00B8B4  0E0E               	movlw	14
 17016  00B8B6  180E               	xorwf	moveVertically@nextDrawer,w,c
 17017  00B8B8  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17018  00B8BA  B4D8               	btfsc	status,2,c
 17019  00B8BC  D00A               	goto	u10790
 17020  00B8BE  0E0F               	movlw	15
 17021  00B8C0  180E               	xorwf	moveVertically@nextDrawer,w,c
 17022  00B8C2  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17023  00B8C4  B4D8               	btfsc	status,2,c
 17024  00B8C6  D005               	goto	u10790
 17025  00B8C8  0E10               	movlw	16
 17026  00B8CA  180E               	xorwf	moveVertically@nextDrawer,w,c
 17027  00B8CC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17028  00B8CE  A4D8               	btfss	status,2,c
 17029  00B8D0  0012               	return	
 17030  00B8D2                     u10790:
 17031                           
 17032                           ;operationMode.c: 694: verticalStepper(3, 0);
 17033  00B8D2  0E00               	movlw	0
 17034  00B8D4  6E07               	movwf	verticalStepper@rotations+1,c
 17035  00B8D6  0E03               	movlw	3
 17036  00B8D8  6E06               	movwf	verticalStepper@rotations,c
 17037  00B8DA  0E00               	movlw	0
 17038  00B8DC  6E09               	movwf	verticalStepper@direction+1,c
 17039  00B8DE  0E00               	movlw	0
 17040  00B8E0  6E08               	movwf	verticalStepper@direction,c
 17041  00B8E2  ECEF  F04D         	call	_verticalStepper	;wreg free
 17042                           
 17043                           ;operationMode.c: 695: return (currentDrawer + 12);
 17044  00B8E6  0E0C               	movlw	12
 17045  00B8E8  240C               	addwf	moveVertically@currentDrawer,w,c
 17046  00B8EA  6E0C               	movwf	?_moveVertically,c
 17047  00B8EC  0E00               	movlw	0
 17048  00B8EE  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17049  00B8F0  6E0D               	movwf	?_moveVertically+1,c
 17050                           
 17051                           ;operationMode.c: 696: }
 17052                           ;operationMode.c: 697: }
 17053  00B8F2  0012               	return	
 17054  00B8F4                     l492:
 17055                           
 17056                           ;operationMode.c: 698: else if (currentDrawer == 5 || currentDrawer == 6 || currentDrawe
      +                          r == 7 || currentDrawer == 8){
 17057  00B8F4  0E05               	movlw	5
 17058  00B8F6  180C               	xorwf	moveVertically@currentDrawer,w,c
 17059  00B8F8  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17060  00B8FA  B4D8               	btfsc	status,2,c
 17061  00B8FC  D00F               	goto	u10830
 17062  00B8FE  0E06               	movlw	6
 17063  00B900  180C               	xorwf	moveVertically@currentDrawer,w,c
 17064  00B902  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17065  00B904  B4D8               	btfsc	status,2,c
 17066  00B906  D00A               	goto	u10830
 17067  00B908  0E07               	movlw	7
 17068  00B90A  180C               	xorwf	moveVertically@currentDrawer,w,c
 17069  00B90C  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17070  00B90E  B4D8               	btfsc	status,2,c
 17071  00B910  D005               	goto	u10830
 17072  00B912  0E08               	movlw	8
 17073  00B914  180C               	xorwf	moveVertically@currentDrawer,w,c
 17074  00B916  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17075  00B918  A4D8               	btfss	status,2,c
 17076  00B91A  D04A               	goto	l508
 17077  00B91C                     u10830:
 17078                           
 17079                           ;operationMode.c: 699: if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 || ne
      +                          xtDrawer == 12){
 17080  00B91C  0E09               	movlw	9
 17081  00B91E  180E               	xorwf	moveVertically@nextDrawer,w,c
 17082  00B920  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17083  00B922  B4D8               	btfsc	status,2,c
 17084  00B924  D00F               	goto	u10870
 17085  00B926  0E0A               	movlw	10
 17086  00B928  180E               	xorwf	moveVertically@nextDrawer,w,c
 17087  00B92A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17088  00B92C  B4D8               	btfsc	status,2,c
 17089  00B92E  D00A               	goto	u10870
 17090  00B930  0E0B               	movlw	11
 17091  00B932  180E               	xorwf	moveVertically@nextDrawer,w,c
 17092  00B934  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17093  00B936  B4D8               	btfsc	status,2,c
 17094  00B938  D005               	goto	u10870
 17095  00B93A  0E0C               	movlw	12
 17096  00B93C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17097  00B93E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17098  00B940  A4D8               	btfss	status,2,c
 17099  00B942  D011               	goto	l511
 17100  00B944                     u10870:
 17101                           
 17102                           ;operationMode.c: 700: verticalStepper(1, 0);
 17103  00B944  0E00               	movlw	0
 17104  00B946  6E07               	movwf	verticalStepper@rotations+1,c
 17105  00B948  0E01               	movlw	1
 17106  00B94A  6E06               	movwf	verticalStepper@rotations,c
 17107  00B94C  0E00               	movlw	0
 17108  00B94E  6E09               	movwf	verticalStepper@direction+1,c
 17109  00B950  0E00               	movlw	0
 17110  00B952  6E08               	movwf	verticalStepper@direction,c
 17111  00B954  ECEF  F04D         	call	_verticalStepper	;wreg free
 17112                           
 17113                           ;operationMode.c: 701: return (currentDrawer + 4);
 17114  00B958  0E04               	movlw	4
 17115  00B95A  240C               	addwf	moveVertically@currentDrawer,w,c
 17116  00B95C  6E0C               	movwf	?_moveVertically,c
 17117  00B95E  0E00               	movlw	0
 17118  00B960  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17119  00B962  6E0D               	movwf	?_moveVertically+1,c
 17120                           
 17121                           ;operationMode.c: 702: }
 17122  00B964  0012               	return	
 17123  00B966                     l511:
 17124                           
 17125                           ;operationMode.c: 703: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 17126  00B966  0E0D               	movlw	13
 17127  00B968  180E               	xorwf	moveVertically@nextDrawer,w,c
 17128  00B96A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17129  00B96C  B4D8               	btfsc	status,2,c
 17130  00B96E  D00F               	goto	u10910
 17131  00B970  0E0E               	movlw	14
 17132  00B972  180E               	xorwf	moveVertically@nextDrawer,w,c
 17133  00B974  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17134  00B976  B4D8               	btfsc	status,2,c
 17135  00B978  D00A               	goto	u10910
 17136  00B97A  0E0F               	movlw	15
 17137  00B97C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17138  00B97E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17139  00B980  B4D8               	btfsc	status,2,c
 17140  00B982  D005               	goto	u10910
 17141  00B984  0E10               	movlw	16
 17142  00B986  180E               	xorwf	moveVertically@nextDrawer,w,c
 17143  00B988  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17144  00B98A  A4D8               	btfss	status,2,c
 17145  00B98C  0012               	return	
 17146  00B98E                     u10910:
 17147                           
 17148                           ;operationMode.c: 704: verticalStepper(2, 0);
 17149  00B98E  0E00               	movlw	0
 17150  00B990  6E07               	movwf	verticalStepper@rotations+1,c
 17151  00B992  0E02               	movlw	2
 17152  00B994  6E06               	movwf	verticalStepper@rotations,c
 17153  00B996  0E00               	movlw	0
 17154  00B998  6E09               	movwf	verticalStepper@direction+1,c
 17155  00B99A  0E00               	movlw	0
 17156  00B99C  6E08               	movwf	verticalStepper@direction,c
 17157  00B99E  ECEF  F04D         	call	_verticalStepper	;wreg free
 17158                           
 17159                           ;operationMode.c: 705: return (currentDrawer + 8);
 17160  00B9A2  0E08               	movlw	8
 17161  00B9A4  240C               	addwf	moveVertically@currentDrawer,w,c
 17162  00B9A6  6E0C               	movwf	?_moveVertically,c
 17163  00B9A8  0E00               	movlw	0
 17164  00B9AA  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17165  00B9AC  6E0D               	movwf	?_moveVertically+1,c
 17166                           
 17167                           ;operationMode.c: 706: }
 17168                           ;operationMode.c: 707: }
 17169  00B9AE  0012               	return	
 17170  00B9B0                     l508:
 17171                           
 17172                           ;operationMode.c: 708: else if (currentDrawer == 9 || currentDrawer == 10 || currentDraw
      +                          er == 11 || currentDrawer == 12){
 17173  00B9B0  0E09               	movlw	9
 17174  00B9B2  180C               	xorwf	moveVertically@currentDrawer,w,c
 17175  00B9B4  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17176  00B9B6  B4D8               	btfsc	status,2,c
 17177  00B9B8  D00F               	goto	u10950
 17178  00B9BA  0E0A               	movlw	10
 17179  00B9BC  180C               	xorwf	moveVertically@currentDrawer,w,c
 17180  00B9BE  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17181  00B9C0  B4D8               	btfsc	status,2,c
 17182  00B9C2  D00A               	goto	u10950
 17183  00B9C4  0E0B               	movlw	11
 17184  00B9C6  180C               	xorwf	moveVertically@currentDrawer,w,c
 17185  00B9C8  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17186  00B9CA  B4D8               	btfsc	status,2,c
 17187  00B9CC  D005               	goto	u10950
 17188  00B9CE  0E0C               	movlw	12
 17189  00B9D0  180C               	xorwf	moveVertically@currentDrawer,w,c
 17190  00B9D2  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17191  00B9D4  A4D8               	btfss	status,2,c
 17192  00B9D6  0012               	return	
 17193  00B9D8                     u10950:
 17194                           
 17195                           ;operationMode.c: 709: if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15 || n
      +                          extDrawer == 16){
 17196  00B9D8  0E0D               	movlw	13
 17197  00B9DA  180E               	xorwf	moveVertically@nextDrawer,w,c
 17198  00B9DC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17199  00B9DE  B4D8               	btfsc	status,2,c
 17200  00B9E0  D00F               	goto	u10990
 17201  00B9E2  0E0E               	movlw	14
 17202  00B9E4  180E               	xorwf	moveVertically@nextDrawer,w,c
 17203  00B9E6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17204  00B9E8  B4D8               	btfsc	status,2,c
 17205  00B9EA  D00A               	goto	u10990
 17206  00B9EC  0E0F               	movlw	15
 17207  00B9EE  180E               	xorwf	moveVertically@nextDrawer,w,c
 17208  00B9F0  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17209  00B9F2  B4D8               	btfsc	status,2,c
 17210  00B9F4  D005               	goto	u10990
 17211  00B9F6  0E10               	movlw	16
 17212  00B9F8  180E               	xorwf	moveVertically@nextDrawer,w,c
 17213  00B9FA  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17214  00B9FC  A4D8               	btfss	status,2,c
 17215  00B9FE  0012               	return	
 17216  00BA00                     u10990:
 17217                           
 17218                           ;operationMode.c: 710: verticalStepper(1, 0);
 17219  00BA00  0E00               	movlw	0
 17220  00BA02  6E07               	movwf	verticalStepper@rotations+1,c
 17221  00BA04  0E01               	movlw	1
 17222  00BA06  6E06               	movwf	verticalStepper@rotations,c
 17223  00BA08  0E00               	movlw	0
 17224  00BA0A  6E09               	movwf	verticalStepper@direction+1,c
 17225  00BA0C  0E00               	movlw	0
 17226  00BA0E  6E08               	movwf	verticalStepper@direction,c
 17227  00BA10  ECEF  F04D         	call	_verticalStepper	;wreg free
 17228                           
 17229                           ;operationMode.c: 711: return (currentDrawer + 4);
 17230  00BA14  0E04               	movlw	4
 17231  00BA16  240C               	addwf	moveVertically@currentDrawer,w,c
 17232  00BA18  6E0C               	movwf	?_moveVertically,c
 17233  00BA1A  0E00               	movlw	0
 17234  00BA1C  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17235  00BA1E  6E0D               	movwf	?_moveVertically+1,c
 17236                           
 17237                           ;operationMode.c: 712: }
 17238                           ;operationMode.c: 713: }
 17239                           ;operationMode.c: 714: }
 17240  00BA20  0012               	return	
 17241  00BA22                     l491:
 17242                           
 17243                           ;operationMode.c: 715: else{
 17244                           ;operationMode.c: 716: return currentDrawer;
 17245  00BA22  C00C  F00C         	movff	moveVertically@currentDrawer,?_moveVertically
 17246  00BA26  C00D  F00D         	movff	moveVertically@currentDrawer+1,?_moveVertically+1
 17247  00BA2A  0012               	return	
 17248  00BA2C                     __end_of_moveVertically:
 17249                           	opt stack 0
 17250                           tblptru	equ	0xFF8
 17251                           tblptrh	equ	0xFF7
 17252                           tblptrl	equ	0xFF6
 17253                           tablat	equ	0xFF5
 17254                           prodh	equ	0xFF4
 17255                           prodl	equ	0xFF3
 17256                           postinc0	equ	0xFEE
 17257                           wreg	equ	0xFE8
 17258                           postinc1	equ	0xFE6
 17259                           postdec1	equ	0xFE5
 17260                           plusw1	equ	0xFE3
 17261                           fsr1h	equ	0xFE2
 17262                           fsr1l	equ	0xFE1
 17263                           indf2	equ	0xFDF
 17264                           postinc2	equ	0xFDE
 17265                           postdec2	equ	0xFDD
 17266                           plusw2	equ	0xFDB
 17267                           fsr2h	equ	0xFDA
 17268                           fsr2l	equ	0xFD9
 17269                           status	equ	0xFD8
 17270                           
 17271 ;; *************** function _moveHorizontally *****************
 17272 ;; Defined at:
 17273 ;;		line 722 in file "operationMode.c"
 17274 ;; Parameters:    Size  Location     Type
 17275 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 17276 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 17277 ;; Auto vars:     Size  Location     Type
 17278 ;;		None
 17279 ;; Return value:  Size  Location     Type
 17280 ;;                  1    wreg      void 
 17281 ;; Registers used:
 17282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17283 ;; Tracked objects:
 17284 ;;		On entry : 0/0
 17285 ;;		On exit  : 0/0
 17286 ;;		Unchanged: 0/0
 17287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17291 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17292 ;;Total ram usage:        6 bytes
 17293 ;; Hardware stack levels used:    1
 17294 ;; Hardware stack levels required when called:    2
 17295 ;; This function calls:
 17296 ;;		_horizontalStepper
 17297 ;; This function is called by:
 17298 ;;		_mainOperation
 17299 ;; This function uses a non-reentrant model
 17300 ;;
 17301                           
 17302                           	psect	text33
 17303  00AE66                     __ptext33:
 17304                           	opt stack 0
 17305  00AE66                     _moveHorizontally:
 17306                           	opt stack 27
 17307                           
 17308                           ;operationMode.c: 723: if (currentDrawer != 0 && nextDrawer != 0){
 17309                           
 17310                           ;incstack = 0
 17311  00AE66  500C               	movf	moveHorizontally@currentDrawer,w,c
 17312  00AE68  100D               	iorwf	moveHorizontally@currentDrawer+1,w,c
 17313  00AE6A  B4D8               	btfsc	status,2,c
 17314  00AE6C  0012               	return	
 17315  00AE6E  500E               	movf	moveHorizontally@nextDrawer,w,c
 17316  00AE70  100F               	iorwf	moveHorizontally@nextDrawer+1,w,c
 17317  00AE72  B4D8               	btfsc	status,2,c
 17318  00AE74  0012               	return	
 17319                           
 17320                           ;operationMode.c: 725: if (currentDrawer < nextDrawer){
 17321  00AE76  500E               	movf	moveHorizontally@nextDrawer,w,c
 17322  00AE78  5C0C               	subwf	moveHorizontally@currentDrawer,w,c
 17323  00AE7A  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17324  00AE7C  580D               	subwfb	moveHorizontally@currentDrawer+1,w,c
 17325  00AE7E  B0D8               	btfsc	status,0,c
 17326  00AE80  D053               	goto	l529
 17327                           
 17328                           ;operationMode.c: 726: if ((nextDrawer - currentDrawer) == 1){
 17329  00AE82  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17330  00AE86  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17331  00AE8A  1E10               	comf	??_moveHorizontally,f,c
 17332  00AE8C  1E11               	comf	??_moveHorizontally+1,f,c
 17333  00AE8E  4A10               	infsnz	??_moveHorizontally,f,c
 17334  00AE90  2A11               	incf	??_moveHorizontally+1,f,c
 17335  00AE92  500E               	movf	moveHorizontally@nextDrawer,w,c
 17336  00AE94  2610               	addwf	??_moveHorizontally,f,c
 17337  00AE96  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17338  00AE98  2211               	addwfc	??_moveHorizontally+1,f,c
 17339  00AE9A  0410               	decf	??_moveHorizontally,w,c
 17340  00AE9C  1011               	iorwf	??_moveHorizontally+1,w,c
 17341  00AE9E  A4D8               	btfss	status,2,c
 17342  00AEA0  D00B               	goto	l530
 17343                           
 17344                           ;operationMode.c: 727: horizontalStepper(1, 0);
 17345  00AEA2  0E00               	movlw	0
 17346  00AEA4  6E07               	movwf	horizontalStepper@rotations+1,c
 17347  00AEA6  0E01               	movlw	1
 17348  00AEA8  6E06               	movwf	horizontalStepper@rotations,c
 17349  00AEAA  0E00               	movlw	0
 17350  00AEAC  6E09               	movwf	horizontalStepper@direction+1,c
 17351  00AEAE  0E00               	movlw	0
 17352  00AEB0  6E08               	movwf	horizontalStepper@direction,c
 17353  00AEB2  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17354                           
 17355                           ;operationMode.c: 728: }
 17356  00AEB6  0012               	return	
 17357  00AEB8                     l530:
 17358                           
 17359                           ;operationMode.c: 729: else if ((nextDrawer - currentDrawer) == 2){
 17360  00AEB8  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17361  00AEBC  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17362  00AEC0  1E10               	comf	??_moveHorizontally,f,c
 17363  00AEC2  1E11               	comf	??_moveHorizontally+1,f,c
 17364  00AEC4  4A10               	infsnz	??_moveHorizontally,f,c
 17365  00AEC6  2A11               	incf	??_moveHorizontally+1,f,c
 17366  00AEC8  500E               	movf	moveHorizontally@nextDrawer,w,c
 17367  00AECA  2610               	addwf	??_moveHorizontally,f,c
 17368  00AECC  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17369  00AECE  2211               	addwfc	??_moveHorizontally+1,f,c
 17370  00AED0  0E02               	movlw	2
 17371  00AED2  1810               	xorwf	??_moveHorizontally,w,c
 17372  00AED4  1011               	iorwf	??_moveHorizontally+1,w,c
 17373  00AED6  A4D8               	btfss	status,2,c
 17374  00AED8  D00B               	goto	l532
 17375                           
 17376                           ;operationMode.c: 730: horizontalStepper(2, 0);
 17377  00AEDA  0E00               	movlw	0
 17378  00AEDC  6E07               	movwf	horizontalStepper@rotations+1,c
 17379  00AEDE  0E02               	movlw	2
 17380  00AEE0  6E06               	movwf	horizontalStepper@rotations,c
 17381  00AEE2  0E00               	movlw	0
 17382  00AEE4  6E09               	movwf	horizontalStepper@direction+1,c
 17383  00AEE6  0E00               	movlw	0
 17384  00AEE8  6E08               	movwf	horizontalStepper@direction,c
 17385  00AEEA  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17386                           
 17387                           ;operationMode.c: 731: }
 17388  00AEEE  0012               	return	
 17389  00AEF0                     l532:
 17390                           
 17391                           ;operationMode.c: 732: else if ((nextDrawer - currentDrawer) == 3){
 17392  00AEF0  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17393  00AEF4  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17394  00AEF8  1E10               	comf	??_moveHorizontally,f,c
 17395  00AEFA  1E11               	comf	??_moveHorizontally+1,f,c
 17396  00AEFC  4A10               	infsnz	??_moveHorizontally,f,c
 17397  00AEFE  2A11               	incf	??_moveHorizontally+1,f,c
 17398  00AF00  500E               	movf	moveHorizontally@nextDrawer,w,c
 17399  00AF02  2610               	addwf	??_moveHorizontally,f,c
 17400  00AF04  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17401  00AF06  2211               	addwfc	??_moveHorizontally+1,f,c
 17402  00AF08  0E03               	movlw	3
 17403  00AF0A  1810               	xorwf	??_moveHorizontally,w,c
 17404  00AF0C  1011               	iorwf	??_moveHorizontally+1,w,c
 17405  00AF0E  A4D8               	btfss	status,2,c
 17406  00AF10  0012               	return	
 17407                           
 17408                           ;operationMode.c: 733: horizontalStepper(3, 0);
 17409  00AF12  0E00               	movlw	0
 17410  00AF14  6E07               	movwf	horizontalStepper@rotations+1,c
 17411  00AF16  0E03               	movlw	3
 17412  00AF18  6E06               	movwf	horizontalStepper@rotations,c
 17413  00AF1A  0E00               	movlw	0
 17414  00AF1C  6E09               	movwf	horizontalStepper@direction+1,c
 17415  00AF1E  0E00               	movlw	0
 17416  00AF20  6E08               	movwf	horizontalStepper@direction,c
 17417  00AF22  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17418                           
 17419                           ;operationMode.c: 734: }
 17420                           ;operationMode.c: 735: }
 17421  00AF26  0012               	return	
 17422  00AF28                     l529:
 17423                           
 17424                           ;operationMode.c: 737: else if (currentDrawer > nextDrawer){
 17425  00AF28  500C               	movf	moveHorizontally@currentDrawer,w,c
 17426  00AF2A  5C0E               	subwf	moveHorizontally@nextDrawer,w,c
 17427  00AF2C  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17428  00AF2E  580F               	subwfb	moveHorizontally@nextDrawer+1,w,c
 17429  00AF30  B0D8               	btfsc	status,0,c
 17430  00AF32  0012               	return	
 17431                           
 17432                           ;operationMode.c: 738: if ((currentDrawer - nextDrawer) == 1){
 17433  00AF34  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17434  00AF38  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17435  00AF3C  1E10               	comf	??_moveHorizontally,f,c
 17436  00AF3E  1E11               	comf	??_moveHorizontally+1,f,c
 17437  00AF40  4A10               	infsnz	??_moveHorizontally,f,c
 17438  00AF42  2A11               	incf	??_moveHorizontally+1,f,c
 17439  00AF44  500C               	movf	moveHorizontally@currentDrawer,w,c
 17440  00AF46  2610               	addwf	??_moveHorizontally,f,c
 17441  00AF48  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17442  00AF4A  2211               	addwfc	??_moveHorizontally+1,f,c
 17443  00AF4C  0410               	decf	??_moveHorizontally,w,c
 17444  00AF4E  1011               	iorwf	??_moveHorizontally+1,w,c
 17445  00AF50  A4D8               	btfss	status,2,c
 17446  00AF52  D00B               	goto	l537
 17447                           
 17448                           ;operationMode.c: 739: horizontalStepper(1, 1);
 17449  00AF54  0E00               	movlw	0
 17450  00AF56  6E07               	movwf	horizontalStepper@rotations+1,c
 17451  00AF58  0E01               	movlw	1
 17452  00AF5A  6E06               	movwf	horizontalStepper@rotations,c
 17453  00AF5C  0E00               	movlw	0
 17454  00AF5E  6E09               	movwf	horizontalStepper@direction+1,c
 17455  00AF60  0E01               	movlw	1
 17456  00AF62  6E08               	movwf	horizontalStepper@direction,c
 17457  00AF64  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17458                           
 17459                           ;operationMode.c: 740: }
 17460  00AF68  0012               	return	
 17461  00AF6A                     l537:
 17462                           
 17463                           ;operationMode.c: 741: else if ((currentDrawer - nextDrawer) == 2){
 17464  00AF6A  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17465  00AF6E  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17466  00AF72  1E10               	comf	??_moveHorizontally,f,c
 17467  00AF74  1E11               	comf	??_moveHorizontally+1,f,c
 17468  00AF76  4A10               	infsnz	??_moveHorizontally,f,c
 17469  00AF78  2A11               	incf	??_moveHorizontally+1,f,c
 17470  00AF7A  500C               	movf	moveHorizontally@currentDrawer,w,c
 17471  00AF7C  2610               	addwf	??_moveHorizontally,f,c
 17472  00AF7E  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17473  00AF80  2211               	addwfc	??_moveHorizontally+1,f,c
 17474  00AF82  0E02               	movlw	2
 17475  00AF84  1810               	xorwf	??_moveHorizontally,w,c
 17476  00AF86  1011               	iorwf	??_moveHorizontally+1,w,c
 17477  00AF88  A4D8               	btfss	status,2,c
 17478  00AF8A  D00B               	goto	l539
 17479                           
 17480                           ;operationMode.c: 742: horizontalStepper(2, 1);
 17481  00AF8C  0E00               	movlw	0
 17482  00AF8E  6E07               	movwf	horizontalStepper@rotations+1,c
 17483  00AF90  0E02               	movlw	2
 17484  00AF92  6E06               	movwf	horizontalStepper@rotations,c
 17485  00AF94  0E00               	movlw	0
 17486  00AF96  6E09               	movwf	horizontalStepper@direction+1,c
 17487  00AF98  0E01               	movlw	1
 17488  00AF9A  6E08               	movwf	horizontalStepper@direction,c
 17489  00AF9C  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17490                           
 17491                           ;operationMode.c: 743: }
 17492  00AFA0  0012               	return	
 17493  00AFA2                     l539:
 17494                           
 17495                           ;operationMode.c: 744: else if ((currentDrawer - nextDrawer) == 3){
 17496  00AFA2  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17497  00AFA6  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17498  00AFAA  1E10               	comf	??_moveHorizontally,f,c
 17499  00AFAC  1E11               	comf	??_moveHorizontally+1,f,c
 17500  00AFAE  4A10               	infsnz	??_moveHorizontally,f,c
 17501  00AFB0  2A11               	incf	??_moveHorizontally+1,f,c
 17502  00AFB2  500C               	movf	moveHorizontally@currentDrawer,w,c
 17503  00AFB4  2610               	addwf	??_moveHorizontally,f,c
 17504  00AFB6  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17505  00AFB8  2211               	addwfc	??_moveHorizontally+1,f,c
 17506  00AFBA  0E03               	movlw	3
 17507  00AFBC  1810               	xorwf	??_moveHorizontally,w,c
 17508  00AFBE  1011               	iorwf	??_moveHorizontally+1,w,c
 17509  00AFC0  A4D8               	btfss	status,2,c
 17510  00AFC2  0012               	return	
 17511                           
 17512                           ;operationMode.c: 745: horizontalStepper(3, 1);
 17513  00AFC4  0E00               	movlw	0
 17514  00AFC6  6E07               	movwf	horizontalStepper@rotations+1,c
 17515  00AFC8  0E03               	movlw	3
 17516  00AFCA  6E06               	movwf	horizontalStepper@rotations,c
 17517  00AFCC  0E00               	movlw	0
 17518  00AFCE  6E09               	movwf	horizontalStepper@direction+1,c
 17519  00AFD0  0E01               	movlw	1
 17520  00AFD2  6E08               	movwf	horizontalStepper@direction,c
 17521  00AFD4  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17522  00AFD8  0012               	return	
 17523  00AFDA                     __end_of_moveHorizontally:
 17524                           	opt stack 0
 17525                           tblptru	equ	0xFF8
 17526                           tblptrh	equ	0xFF7
 17527                           tblptrl	equ	0xFF6
 17528                           tablat	equ	0xFF5
 17529                           prodh	equ	0xFF4
 17530                           prodl	equ	0xFF3
 17531                           postinc0	equ	0xFEE
 17532                           wreg	equ	0xFE8
 17533                           postinc1	equ	0xFE6
 17534                           postdec1	equ	0xFE5
 17535                           plusw1	equ	0xFE3
 17536                           fsr1h	equ	0xFE2
 17537                           fsr1l	equ	0xFE1
 17538                           indf2	equ	0xFDF
 17539                           postinc2	equ	0xFDE
 17540                           postdec2	equ	0xFDD
 17541                           plusw2	equ	0xFDB
 17542                           fsr2h	equ	0xFDA
 17543                           fsr2l	equ	0xFD9
 17544                           status	equ	0xFD8
 17545                           
 17546 ;; *************** function _initArm *****************
 17547 ;; Defined at:
 17548 ;;		line 752 in file "operationMode.c"
 17549 ;; Parameters:    Size  Location     Type
 17550 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 17551 ;; Auto vars:     Size  Location     Type
 17552 ;;		None
 17553 ;; Return value:  Size  Location     Type
 17554 ;;                  1    wreg      void 
 17555 ;; Registers used:
 17556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17557 ;; Tracked objects:
 17558 ;;		On entry : 0/0
 17559 ;;		On exit  : 0/0
 17560 ;;		Unchanged: 0/0
 17561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17566 ;;Total ram usage:        2 bytes
 17567 ;; Hardware stack levels used:    1
 17568 ;; Hardware stack levels required when called:    2
 17569 ;; This function calls:
 17570 ;;		_horizontalStepper
 17571 ;;		_verticalStepper
 17572 ;; This function is called by:
 17573 ;;		_mainOperation
 17574 ;; This function uses a non-reentrant model
 17575 ;;
 17576                           
 17577                           	psect	text34
 17578  00BA2C                     __ptext34:
 17579                           	opt stack 0
 17580  00BA2C                     _initArm:
 17581                           	opt stack 27
 17582                           
 17583                           ;operationMode.c: 753: if (currentDrawer != 0){
 17584                           
 17585                           ;incstack = 0
 17586  00BA2C  500C               	movf	initArm@currentDrawer,w,c
 17587  00BA2E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17588  00BA30  B4D8               	btfsc	status,2,c
 17589  00BA32  0012               	return	
 17590                           
 17591                           ;operationMode.c: 754: if (currentDrawer == 1 || currentDrawer == 2 || currentDrawer == 
      +                          3 || currentDrawer == 4){
 17592  00BA34  040C               	decf	initArm@currentDrawer,w,c
 17593  00BA36  100D               	iorwf	initArm@currentDrawer+1,w,c
 17594  00BA38  B4D8               	btfsc	status,2,c
 17595  00BA3A  D00F               	goto	u11140
 17596  00BA3C  0E02               	movlw	2
 17597  00BA3E  180C               	xorwf	initArm@currentDrawer,w,c
 17598  00BA40  100D               	iorwf	initArm@currentDrawer+1,w,c
 17599  00BA42  B4D8               	btfsc	status,2,c
 17600  00BA44  D00A               	goto	u11140
 17601  00BA46  0E03               	movlw	3
 17602  00BA48  180C               	xorwf	initArm@currentDrawer,w,c
 17603  00BA4A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17604  00BA4C  B4D8               	btfsc	status,2,c
 17605  00BA4E  D005               	goto	u11140
 17606  00BA50  0E04               	movlw	4
 17607  00BA52  180C               	xorwf	initArm@currentDrawer,w,c
 17608  00BA54  100D               	iorwf	initArm@currentDrawer+1,w,c
 17609  00BA56  A4D8               	btfss	status,2,c
 17610  00BA58  D030               	goto	l546
 17611  00BA5A                     u11140:
 17612                           
 17613                           ;operationMode.c: 755: if (currentDrawer == 4){
 17614  00BA5A  0E04               	movlw	4
 17615  00BA5C  180C               	xorwf	initArm@currentDrawer,w,c
 17616  00BA5E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17617  00BA60  A4D8               	btfss	status,2,c
 17618  00BA62  D00B               	goto	l549
 17619                           
 17620                           ;operationMode.c: 756: horizontalStepper(3, 1);
 17621  00BA64  0E00               	movlw	0
 17622  00BA66  6E07               	movwf	horizontalStepper@rotations+1,c
 17623  00BA68  0E03               	movlw	3
 17624  00BA6A  6E06               	movwf	horizontalStepper@rotations,c
 17625  00BA6C  0E00               	movlw	0
 17626  00BA6E  6E09               	movwf	horizontalStepper@direction+1,c
 17627  00BA70  0E01               	movlw	1
 17628  00BA72  6E08               	movwf	horizontalStepper@direction,c
 17629  00BA74  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17630                           
 17631                           ;operationMode.c: 757: }
 17632  00BA78  0012               	return	
 17633  00BA7A                     l549:
 17634                           
 17635                           ;operationMode.c: 758: else if (currentDrawer == 3){
 17636  00BA7A  0E03               	movlw	3
 17637  00BA7C  180C               	xorwf	initArm@currentDrawer,w,c
 17638  00BA7E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17639  00BA80  A4D8               	btfss	status,2,c
 17640  00BA82  D00B               	goto	l551
 17641                           
 17642                           ;operationMode.c: 759: horizontalStepper(2, 1);
 17643  00BA84  0E00               	movlw	0
 17644  00BA86  6E07               	movwf	horizontalStepper@rotations+1,c
 17645  00BA88  0E02               	movlw	2
 17646  00BA8A  6E06               	movwf	horizontalStepper@rotations,c
 17647  00BA8C  0E00               	movlw	0
 17648  00BA8E  6E09               	movwf	horizontalStepper@direction+1,c
 17649  00BA90  0E01               	movlw	1
 17650  00BA92  6E08               	movwf	horizontalStepper@direction,c
 17651  00BA94  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17652                           
 17653                           ;operationMode.c: 760: }
 17654  00BA98  0012               	return	
 17655  00BA9A                     l551:
 17656                           
 17657                           ;operationMode.c: 761: else if (currentDrawer == 2){
 17658  00BA9A  0E02               	movlw	2
 17659  00BA9C  180C               	xorwf	initArm@currentDrawer,w,c
 17660  00BA9E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17661  00BAA0  A4D8               	btfss	status,2,c
 17662  00BAA2  0012               	return	
 17663                           
 17664                           ;operationMode.c: 762: horizontalStepper(1, 1);
 17665  00BAA4  0E00               	movlw	0
 17666  00BAA6  6E07               	movwf	horizontalStepper@rotations+1,c
 17667  00BAA8  0E01               	movlw	1
 17668  00BAAA  6E06               	movwf	horizontalStepper@rotations,c
 17669  00BAAC  0E00               	movlw	0
 17670  00BAAE  6E09               	movwf	horizontalStepper@direction+1,c
 17671  00BAB0  0E01               	movlw	1
 17672  00BAB2  6E08               	movwf	horizontalStepper@direction,c
 17673  00BAB4  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17674                           
 17675                           ;operationMode.c: 763: }
 17676                           ;operationMode.c: 764: }
 17677  00BAB8  0012               	return	
 17678  00BABA                     l546:
 17679                           
 17680                           ;operationMode.c: 765: else if (currentDrawer == 5 || currentDrawer == 6 || currentDrawe
      +                          r == 7 || currentDrawer == 8){
 17681  00BABA  0E05               	movlw	5
 17682  00BABC  180C               	xorwf	initArm@currentDrawer,w,c
 17683  00BABE  100D               	iorwf	initArm@currentDrawer+1,w,c
 17684  00BAC0  B4D8               	btfsc	status,2,c
 17685  00BAC2  D00F               	goto	u11210
 17686  00BAC4  0E06               	movlw	6
 17687  00BAC6  180C               	xorwf	initArm@currentDrawer,w,c
 17688  00BAC8  100D               	iorwf	initArm@currentDrawer+1,w,c
 17689  00BACA  B4D8               	btfsc	status,2,c
 17690  00BACC  D00A               	goto	u11210
 17691  00BACE  0E07               	movlw	7
 17692  00BAD0  180C               	xorwf	initArm@currentDrawer,w,c
 17693  00BAD2  100D               	iorwf	initArm@currentDrawer+1,w,c
 17694  00BAD4  B4D8               	btfsc	status,2,c
 17695  00BAD6  D005               	goto	u11210
 17696  00BAD8  0E08               	movlw	8
 17697  00BADA  180C               	xorwf	initArm@currentDrawer,w,c
 17698  00BADC  100D               	iorwf	initArm@currentDrawer+1,w,c
 17699  00BADE  A4D8               	btfss	status,2,c
 17700  00BAE0  D03A               	goto	l555
 17701  00BAE2                     u11210:
 17702                           
 17703                           ;operationMode.c: 766: verticalStepper(1, 1);
 17704  00BAE2  0E00               	movlw	0
 17705  00BAE4  6E07               	movwf	verticalStepper@rotations+1,c
 17706  00BAE6  0E01               	movlw	1
 17707  00BAE8  6E06               	movwf	verticalStepper@rotations,c
 17708  00BAEA  0E00               	movlw	0
 17709  00BAEC  6E09               	movwf	verticalStepper@direction+1,c
 17710  00BAEE  0E01               	movlw	1
 17711  00BAF0  6E08               	movwf	verticalStepper@direction,c
 17712  00BAF2  ECEF  F04D         	call	_verticalStepper	;wreg free
 17713                           
 17714                           ;operationMode.c: 767: if (currentDrawer == 8){
 17715  00BAF6  0E08               	movlw	8
 17716  00BAF8  180C               	xorwf	initArm@currentDrawer,w,c
 17717  00BAFA  100D               	iorwf	initArm@currentDrawer+1,w,c
 17718  00BAFC  A4D8               	btfss	status,2,c
 17719  00BAFE  D00B               	goto	l558
 17720                           
 17721                           ;operationMode.c: 768: horizontalStepper(3, 1);
 17722  00BB00  0E00               	movlw	0
 17723  00BB02  6E07               	movwf	horizontalStepper@rotations+1,c
 17724  00BB04  0E03               	movlw	3
 17725  00BB06  6E06               	movwf	horizontalStepper@rotations,c
 17726  00BB08  0E00               	movlw	0
 17727  00BB0A  6E09               	movwf	horizontalStepper@direction+1,c
 17728  00BB0C  0E01               	movlw	1
 17729  00BB0E  6E08               	movwf	horizontalStepper@direction,c
 17730  00BB10  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17731                           
 17732                           ;operationMode.c: 769: }
 17733  00BB14  0012               	return	
 17734  00BB16                     l558:
 17735                           
 17736                           ;operationMode.c: 770: else if (currentDrawer == 7){
 17737  00BB16  0E07               	movlw	7
 17738  00BB18  180C               	xorwf	initArm@currentDrawer,w,c
 17739  00BB1A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17740  00BB1C  A4D8               	btfss	status,2,c
 17741  00BB1E  D00B               	goto	l560
 17742                           
 17743                           ;operationMode.c: 771: horizontalStepper(2, 1);
 17744  00BB20  0E00               	movlw	0
 17745  00BB22  6E07               	movwf	horizontalStepper@rotations+1,c
 17746  00BB24  0E02               	movlw	2
 17747  00BB26  6E06               	movwf	horizontalStepper@rotations,c
 17748  00BB28  0E00               	movlw	0
 17749  00BB2A  6E09               	movwf	horizontalStepper@direction+1,c
 17750  00BB2C  0E01               	movlw	1
 17751  00BB2E  6E08               	movwf	horizontalStepper@direction,c
 17752  00BB30  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17753                           
 17754                           ;operationMode.c: 772: }
 17755  00BB34  0012               	return	
 17756  00BB36                     l560:
 17757                           
 17758                           ;operationMode.c: 773: else if (currentDrawer == 6){
 17759  00BB36  0E06               	movlw	6
 17760  00BB38  180C               	xorwf	initArm@currentDrawer,w,c
 17761  00BB3A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17762  00BB3C  A4D8               	btfss	status,2,c
 17763  00BB3E  0012               	return	
 17764                           
 17765                           ;operationMode.c: 774: horizontalStepper(1, 1);
 17766  00BB40  0E00               	movlw	0
 17767  00BB42  6E07               	movwf	horizontalStepper@rotations+1,c
 17768  00BB44  0E01               	movlw	1
 17769  00BB46  6E06               	movwf	horizontalStepper@rotations,c
 17770  00BB48  0E00               	movlw	0
 17771  00BB4A  6E09               	movwf	horizontalStepper@direction+1,c
 17772  00BB4C  0E01               	movlw	1
 17773  00BB4E  6E08               	movwf	horizontalStepper@direction,c
 17774  00BB50  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17775                           
 17776                           ;operationMode.c: 775: }
 17777                           ;operationMode.c: 776: }
 17778  00BB54  0012               	return	
 17779  00BB56                     l555:
 17780                           
 17781                           ;operationMode.c: 777: else if (currentDrawer == 9 || currentDrawer == 10 || currentDraw
      +                          er == 11 || currentDrawer == 12){
 17782  00BB56  0E09               	movlw	9
 17783  00BB58  180C               	xorwf	initArm@currentDrawer,w,c
 17784  00BB5A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17785  00BB5C  B4D8               	btfsc	status,2,c
 17786  00BB5E  D00F               	goto	u11280
 17787  00BB60  0E0A               	movlw	10
 17788  00BB62  180C               	xorwf	initArm@currentDrawer,w,c
 17789  00BB64  100D               	iorwf	initArm@currentDrawer+1,w,c
 17790  00BB66  B4D8               	btfsc	status,2,c
 17791  00BB68  D00A               	goto	u11280
 17792  00BB6A  0E0B               	movlw	11
 17793  00BB6C  180C               	xorwf	initArm@currentDrawer,w,c
 17794  00BB6E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17795  00BB70  B4D8               	btfsc	status,2,c
 17796  00BB72  D005               	goto	u11280
 17797  00BB74  0E0C               	movlw	12
 17798  00BB76  180C               	xorwf	initArm@currentDrawer,w,c
 17799  00BB78  100D               	iorwf	initArm@currentDrawer+1,w,c
 17800  00BB7A  A4D8               	btfss	status,2,c
 17801  00BB7C  D03A               	goto	l564
 17802  00BB7E                     u11280:
 17803                           
 17804                           ;operationMode.c: 778: verticalStepper(2, 1);
 17805  00BB7E  0E00               	movlw	0
 17806  00BB80  6E07               	movwf	verticalStepper@rotations+1,c
 17807  00BB82  0E02               	movlw	2
 17808  00BB84  6E06               	movwf	verticalStepper@rotations,c
 17809  00BB86  0E00               	movlw	0
 17810  00BB88  6E09               	movwf	verticalStepper@direction+1,c
 17811  00BB8A  0E01               	movlw	1
 17812  00BB8C  6E08               	movwf	verticalStepper@direction,c
 17813  00BB8E  ECEF  F04D         	call	_verticalStepper	;wreg free
 17814                           
 17815                           ;operationMode.c: 779: if (currentDrawer == 12){
 17816  00BB92  0E0C               	movlw	12
 17817  00BB94  180C               	xorwf	initArm@currentDrawer,w,c
 17818  00BB96  100D               	iorwf	initArm@currentDrawer+1,w,c
 17819  00BB98  A4D8               	btfss	status,2,c
 17820  00BB9A  D00B               	goto	l567
 17821                           
 17822                           ;operationMode.c: 780: horizontalStepper(3, 1);
 17823  00BB9C  0E00               	movlw	0
 17824  00BB9E  6E07               	movwf	horizontalStepper@rotations+1,c
 17825  00BBA0  0E03               	movlw	3
 17826  00BBA2  6E06               	movwf	horizontalStepper@rotations,c
 17827  00BBA4  0E00               	movlw	0
 17828  00BBA6  6E09               	movwf	horizontalStepper@direction+1,c
 17829  00BBA8  0E01               	movlw	1
 17830  00BBAA  6E08               	movwf	horizontalStepper@direction,c
 17831  00BBAC  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17832                           
 17833                           ;operationMode.c: 781: }
 17834  00BBB0  0012               	return	
 17835  00BBB2                     l567:
 17836                           
 17837                           ;operationMode.c: 782: else if (currentDrawer == 11){
 17838  00BBB2  0E0B               	movlw	11
 17839  00BBB4  180C               	xorwf	initArm@currentDrawer,w,c
 17840  00BBB6  100D               	iorwf	initArm@currentDrawer+1,w,c
 17841  00BBB8  A4D8               	btfss	status,2,c
 17842  00BBBA  D00B               	goto	l569
 17843                           
 17844                           ;operationMode.c: 783: horizontalStepper(2, 1);
 17845  00BBBC  0E00               	movlw	0
 17846  00BBBE  6E07               	movwf	horizontalStepper@rotations+1,c
 17847  00BBC0  0E02               	movlw	2
 17848  00BBC2  6E06               	movwf	horizontalStepper@rotations,c
 17849  00BBC4  0E00               	movlw	0
 17850  00BBC6  6E09               	movwf	horizontalStepper@direction+1,c
 17851  00BBC8  0E01               	movlw	1
 17852  00BBCA  6E08               	movwf	horizontalStepper@direction,c
 17853  00BBCC  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17854                           
 17855                           ;operationMode.c: 784: }
 17856  00BBD0  0012               	return	
 17857  00BBD2                     l569:
 17858                           
 17859                           ;operationMode.c: 785: else if (currentDrawer == 10){
 17860  00BBD2  0E0A               	movlw	10
 17861  00BBD4  180C               	xorwf	initArm@currentDrawer,w,c
 17862  00BBD6  100D               	iorwf	initArm@currentDrawer+1,w,c
 17863  00BBD8  A4D8               	btfss	status,2,c
 17864  00BBDA  0012               	return	
 17865                           
 17866                           ;operationMode.c: 786: horizontalStepper(1, 1);
 17867  00BBDC  0E00               	movlw	0
 17868  00BBDE  6E07               	movwf	horizontalStepper@rotations+1,c
 17869  00BBE0  0E01               	movlw	1
 17870  00BBE2  6E06               	movwf	horizontalStepper@rotations,c
 17871  00BBE4  0E00               	movlw	0
 17872  00BBE6  6E09               	movwf	horizontalStepper@direction+1,c
 17873  00BBE8  0E01               	movlw	1
 17874  00BBEA  6E08               	movwf	horizontalStepper@direction,c
 17875  00BBEC  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17876                           
 17877                           ;operationMode.c: 787: }
 17878                           ;operationMode.c: 788: }
 17879  00BBF0  0012               	return	
 17880  00BBF2                     l564:
 17881                           
 17882                           ;operationMode.c: 789: else if (currentDrawer == 13 || currentDrawer == 14 || currentDra
      +                          wer == 15 || currentDrawer == 16){
 17883  00BBF2  0E0D               	movlw	13
 17884  00BBF4  180C               	xorwf	initArm@currentDrawer,w,c
 17885  00BBF6  100D               	iorwf	initArm@currentDrawer+1,w,c
 17886  00BBF8  B4D8               	btfsc	status,2,c
 17887  00BBFA  D00F               	goto	u11350
 17888  00BBFC  0E0E               	movlw	14
 17889  00BBFE  180C               	xorwf	initArm@currentDrawer,w,c
 17890  00BC00  100D               	iorwf	initArm@currentDrawer+1,w,c
 17891  00BC02  B4D8               	btfsc	status,2,c
 17892  00BC04  D00A               	goto	u11350
 17893  00BC06  0E0F               	movlw	15
 17894  00BC08  180C               	xorwf	initArm@currentDrawer,w,c
 17895  00BC0A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17896  00BC0C  B4D8               	btfsc	status,2,c
 17897  00BC0E  D005               	goto	u11350
 17898  00BC10  0E10               	movlw	16
 17899  00BC12  180C               	xorwf	initArm@currentDrawer,w,c
 17900  00BC14  100D               	iorwf	initArm@currentDrawer+1,w,c
 17901  00BC16  A4D8               	btfss	status,2,c
 17902  00BC18  0012               	return	
 17903  00BC1A                     u11350:
 17904                           
 17905                           ;operationMode.c: 790: verticalStepper(3, 1);
 17906  00BC1A  0E00               	movlw	0
 17907  00BC1C  6E07               	movwf	verticalStepper@rotations+1,c
 17908  00BC1E  0E03               	movlw	3
 17909  00BC20  6E06               	movwf	verticalStepper@rotations,c
 17910  00BC22  0E00               	movlw	0
 17911  00BC24  6E09               	movwf	verticalStepper@direction+1,c
 17912  00BC26  0E01               	movlw	1
 17913  00BC28  6E08               	movwf	verticalStepper@direction,c
 17914  00BC2A  ECEF  F04D         	call	_verticalStepper	;wreg free
 17915                           
 17916                           ;operationMode.c: 791: if (currentDrawer == 16){
 17917  00BC2E  0E10               	movlw	16
 17918  00BC30  180C               	xorwf	initArm@currentDrawer,w,c
 17919  00BC32  100D               	iorwf	initArm@currentDrawer+1,w,c
 17920  00BC34  A4D8               	btfss	status,2,c
 17921  00BC36  D00B               	goto	l576
 17922                           
 17923                           ;operationMode.c: 792: horizontalStepper(3, 1);
 17924  00BC38  0E00               	movlw	0
 17925  00BC3A  6E07               	movwf	horizontalStepper@rotations+1,c
 17926  00BC3C  0E03               	movlw	3
 17927  00BC3E  6E06               	movwf	horizontalStepper@rotations,c
 17928  00BC40  0E00               	movlw	0
 17929  00BC42  6E09               	movwf	horizontalStepper@direction+1,c
 17930  00BC44  0E01               	movlw	1
 17931  00BC46  6E08               	movwf	horizontalStepper@direction,c
 17932  00BC48  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17933                           
 17934                           ;operationMode.c: 793: }
 17935  00BC4C  0012               	return	
 17936  00BC4E                     l576:
 17937                           
 17938                           ;operationMode.c: 794: else if (currentDrawer == 15){
 17939  00BC4E  0E0F               	movlw	15
 17940  00BC50  180C               	xorwf	initArm@currentDrawer,w,c
 17941  00BC52  100D               	iorwf	initArm@currentDrawer+1,w,c
 17942  00BC54  A4D8               	btfss	status,2,c
 17943  00BC56  D00B               	goto	l578
 17944                           
 17945                           ;operationMode.c: 795: horizontalStepper(2, 1);
 17946  00BC58  0E00               	movlw	0
 17947  00BC5A  6E07               	movwf	horizontalStepper@rotations+1,c
 17948  00BC5C  0E02               	movlw	2
 17949  00BC5E  6E06               	movwf	horizontalStepper@rotations,c
 17950  00BC60  0E00               	movlw	0
 17951  00BC62  6E09               	movwf	horizontalStepper@direction+1,c
 17952  00BC64  0E01               	movlw	1
 17953  00BC66  6E08               	movwf	horizontalStepper@direction,c
 17954  00BC68  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17955                           
 17956                           ;operationMode.c: 796: }
 17957  00BC6C  0012               	return	
 17958  00BC6E                     l578:
 17959                           
 17960                           ;operationMode.c: 797: else if (currentDrawer == 14){
 17961  00BC6E  0E0E               	movlw	14
 17962  00BC70  180C               	xorwf	initArm@currentDrawer,w,c
 17963  00BC72  100D               	iorwf	initArm@currentDrawer+1,w,c
 17964  00BC74  A4D8               	btfss	status,2,c
 17965  00BC76  0012               	return	
 17966                           
 17967                           ;operationMode.c: 798: horizontalStepper(1, 1);
 17968  00BC78  0E00               	movlw	0
 17969  00BC7A  6E07               	movwf	horizontalStepper@rotations+1,c
 17970  00BC7C  0E01               	movlw	1
 17971  00BC7E  6E06               	movwf	horizontalStepper@rotations,c
 17972  00BC80  0E00               	movlw	0
 17973  00BC82  6E09               	movwf	horizontalStepper@direction+1,c
 17974  00BC84  0E01               	movlw	1
 17975  00BC86  6E08               	movwf	horizontalStepper@direction,c
 17976  00BC88  ECB7  F04D         	call	_horizontalStepper	;wreg free
 17977  00BC8C  0012               	return	
 17978  00BC8E                     __end_of_initArm:
 17979                           	opt stack 0
 17980                           tblptru	equ	0xFF8
 17981                           tblptrh	equ	0xFF7
 17982                           tblptrl	equ	0xFF6
 17983                           tablat	equ	0xFF5
 17984                           prodh	equ	0xFF4
 17985                           prodl	equ	0xFF3
 17986                           postinc0	equ	0xFEE
 17987                           wreg	equ	0xFE8
 17988                           postinc1	equ	0xFE6
 17989                           postdec1	equ	0xFE5
 17990                           plusw1	equ	0xFE3
 17991                           fsr1h	equ	0xFE2
 17992                           fsr1l	equ	0xFE1
 17993                           indf2	equ	0xFDF
 17994                           postinc2	equ	0xFDE
 17995                           postdec2	equ	0xFDD
 17996                           plusw2	equ	0xFDB
 17997                           fsr2h	equ	0xFDA
 17998                           fsr2l	equ	0xFD9
 17999                           status	equ	0xFD8
 18000                           
 18001 ;; *************** function _verticalStepper *****************
 18002 ;; Defined at:
 18003 ;;		line 625 in file "operationMode.c"
 18004 ;; Parameters:    Size  Location     Type
 18005 ;;  rotations       2    5[COMRAM] unsigned int 
 18006 ;;  direction       2    7[COMRAM] unsigned int 
 18007 ;; Auto vars:     Size  Location     Type
 18008 ;;  i               2    9[COMRAM] unsigned int 
 18009 ;; Return value:  Size  Location     Type
 18010 ;;                  1    wreg      void 
 18011 ;; Registers used:
 18012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18013 ;; Tracked objects:
 18014 ;;		On entry : 0/0
 18015 ;;		On exit  : 0/0
 18016 ;;		Unchanged: 0/0
 18017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18021 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;Total ram usage:        6 bytes
 18023 ;; Hardware stack levels used:    1
 18024 ;; Hardware stack levels required when called:    1
 18025 ;; This function calls:
 18026 ;;		_uartTransmitBlocking
 18027 ;; This function is called by:
 18028 ;;		_moveVertically
 18029 ;;		_initArm
 18030 ;; This function uses a non-reentrant model
 18031 ;;
 18032                           
 18033                           	psect	text35
 18034  009BDE                     __ptext35:
 18035                           	opt stack 0
 18036  009BDE                     _verticalStepper:
 18037                           	opt stack 27
 18038                           
 18039                           ;operationMode.c: 628: unsigned int i = 0;
 18040                           
 18041                           ;incstack = 0
 18042  009BDE  0E00               	movlw	0
 18043  009BE0  6E0B               	movwf	verticalStepper@i+1,c
 18044  009BE2  0E00               	movlw	0
 18045  009BE4  6E0A               	movwf	verticalStepper@i,c
 18046                           
 18047                           ;operationMode.c: 631: if (direction == 1){
 18048  009BE6  0408               	decf	verticalStepper@direction,w,c
 18049  009BE8  1009               	iorwf	verticalStepper@direction+1,w,c
 18050  009BEA  A4D8               	btfss	status,2,c
 18051  009BEC  D016               	goto	l461
 18052                           
 18053                           ;operationMode.c: 632: for (i=0; i<rotations; i++){
 18054  009BEE  0E00               	movlw	0
 18055  009BF0  6E0B               	movwf	verticalStepper@i+1,c
 18056  009BF2  0E00               	movlw	0
 18057  009BF4  6E0A               	movwf	verticalStepper@i,c
 18058  009BF6  D00A               	goto	l462
 18059  009BF8                     
 18060                           ;operationMode.c: 633: uartTransmitBlocking(rowUp, 1);
 18061  009BF8  0E75               	movlw	low _rowUp
 18062  009BFA  6E01               	movwf	uartTransmitBlocking@data,c
 18063  009BFC  0E00               	movlw	high _rowUp
 18064  009BFE  6E02               	movwf	uartTransmitBlocking@data+1,c
 18065  009C00  0E01               	movlw	1
 18066  009C02  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18067  009C04  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 18068  009C08  4A0A               	infsnz	verticalStepper@i,f,c
 18069  009C0A  2A0B               	incf	verticalStepper@i+1,f,c
 18070  009C0C                     l462:
 18071  009C0C  5006               	movf	verticalStepper@rotations,w,c
 18072  009C0E  5C0A               	subwf	verticalStepper@i,w,c
 18073  009C10  5007               	movf	verticalStepper@rotations+1,w,c
 18074  009C12  580B               	subwfb	verticalStepper@i+1,w,c
 18075  009C14  B0D8               	btfsc	status,0,c
 18076  009C16  0012               	return	
 18077  009C18  D7EF               	goto	l463
 18078  009C1A                     l461:
 18079                           
 18080                           ;operationMode.c: 638: else if (direction == 0){
 18081  009C1A  5008               	movf	verticalStepper@direction,w,c
 18082  009C1C  1009               	iorwf	verticalStepper@direction+1,w,c
 18083  009C1E  A4D8               	btfss	status,2,c
 18084  009C20  0012               	return	
 18085                           
 18086                           ;operationMode.c: 639: for (i=0; i<rotations; i++){
 18087  009C22  0E00               	movlw	0
 18088  009C24  6E0B               	movwf	verticalStepper@i+1,c
 18089  009C26  0E00               	movlw	0
 18090  009C28  6E0A               	movwf	verticalStepper@i,c
 18091  009C2A  D00A               	goto	l467
 18092  009C2C                     
 18093                           ;operationMode.c: 640: uartTransmitBlocking(rowDown, 1);
 18094  009C2C  0E74               	movlw	low _rowDown
 18095  009C2E  6E01               	movwf	uartTransmitBlocking@data,c
 18096  009C30  0E00               	movlw	high _rowDown
 18097  009C32  6E02               	movwf	uartTransmitBlocking@data+1,c
 18098  009C34  0E01               	movlw	1
 18099  009C36  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18100  009C38  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 18101  009C3C  4A0A               	infsnz	verticalStepper@i,f,c
 18102  009C3E  2A0B               	incf	verticalStepper@i+1,f,c
 18103  009C40                     l467:
 18104  009C40  5006               	movf	verticalStepper@rotations,w,c
 18105  009C42  5C0A               	subwf	verticalStepper@i,w,c
 18106  009C44  5007               	movf	verticalStepper@rotations+1,w,c
 18107  009C46  580B               	subwfb	verticalStepper@i+1,w,c
 18108  009C48  B0D8               	btfsc	status,0,c
 18109  009C4A  0012               	return	
 18110  009C4C  D7EF               	goto	l468
 18111  009C4E                     __end_of_verticalStepper:
 18112                           	opt stack 0
 18113                           tblptru	equ	0xFF8
 18114                           tblptrh	equ	0xFF7
 18115                           tblptrl	equ	0xFF6
 18116                           tablat	equ	0xFF5
 18117                           prodh	equ	0xFF4
 18118                           prodl	equ	0xFF3
 18119                           postinc0	equ	0xFEE
 18120                           wreg	equ	0xFE8
 18121                           postinc1	equ	0xFE6
 18122                           postdec1	equ	0xFE5
 18123                           plusw1	equ	0xFE3
 18124                           fsr1h	equ	0xFE2
 18125                           fsr1l	equ	0xFE1
 18126                           indf2	equ	0xFDF
 18127                           postinc2	equ	0xFDE
 18128                           postdec2	equ	0xFDD
 18129                           plusw2	equ	0xFDB
 18130                           fsr2h	equ	0xFDA
 18131                           fsr2l	equ	0xFD9
 18132                           status	equ	0xFD8
 18133                           
 18134 ;; *************** function _horizontalStepper *****************
 18135 ;; Defined at:
 18136 ;;		line 646 in file "operationMode.c"
 18137 ;; Parameters:    Size  Location     Type
 18138 ;;  rotations       2    5[COMRAM] unsigned int 
 18139 ;;  direction       2    7[COMRAM] unsigned int 
 18140 ;; Auto vars:     Size  Location     Type
 18141 ;;  i               2    9[COMRAM] unsigned int 
 18142 ;; Return value:  Size  Location     Type
 18143 ;;                  1    wreg      void 
 18144 ;; Registers used:
 18145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18146 ;; Tracked objects:
 18147 ;;		On entry : 0/0
 18148 ;;		On exit  : 0/0
 18149 ;;		Unchanged: 0/0
 18150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18154 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18155 ;;Total ram usage:        6 bytes
 18156 ;; Hardware stack levels used:    1
 18157 ;; Hardware stack levels required when called:    1
 18158 ;; This function calls:
 18159 ;;		_uartTransmitBlocking
 18160 ;; This function is called by:
 18161 ;;		_moveHorizontally
 18162 ;;		_initArm
 18163 ;; This function uses a non-reentrant model
 18164 ;;
 18165                           
 18166                           	psect	text36
 18167  009B6E                     __ptext36:
 18168                           	opt stack 0
 18169  009B6E                     _horizontalStepper:
 18170                           	opt stack 27
 18171                           
 18172                           ;operationMode.c: 649: unsigned int i = 0;
 18173                           
 18174                           ;incstack = 0
 18175  009B6E  0E00               	movlw	0
 18176  009B70  6E0B               	movwf	horizontalStepper@i+1,c
 18177  009B72  0E00               	movlw	0
 18178  009B74  6E0A               	movwf	horizontalStepper@i,c
 18179                           
 18180                           ;operationMode.c: 652: if (direction == 1){
 18181  009B76  0408               	decf	horizontalStepper@direction,w,c
 18182  009B78  1009               	iorwf	horizontalStepper@direction+1,w,c
 18183  009B7A  A4D8               	btfss	status,2,c
 18184  009B7C  D016               	goto	l473
 18185                           
 18186                           ;operationMode.c: 653: for (i=0; i<rotations; i++){
 18187  009B7E  0E00               	movlw	0
 18188  009B80  6E0B               	movwf	horizontalStepper@i+1,c
 18189  009B82  0E00               	movlw	0
 18190  009B84  6E0A               	movwf	horizontalStepper@i,c
 18191  009B86  D00A               	goto	l474
 18192  009B88                     
 18193                           ;operationMode.c: 654: uartTransmitBlocking(columnLeft, 1);
 18194  009B88  0E73               	movlw	low _columnLeft
 18195  009B8A  6E01               	movwf	uartTransmitBlocking@data,c
 18196  009B8C  0E00               	movlw	high _columnLeft
 18197  009B8E  6E02               	movwf	uartTransmitBlocking@data+1,c
 18198  009B90  0E01               	movlw	1
 18199  009B92  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18200  009B94  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 18201  009B98  4A0A               	infsnz	horizontalStepper@i,f,c
 18202  009B9A  2A0B               	incf	horizontalStepper@i+1,f,c
 18203  009B9C                     l474:
 18204  009B9C  5006               	movf	horizontalStepper@rotations,w,c
 18205  009B9E  5C0A               	subwf	horizontalStepper@i,w,c
 18206  009BA0  5007               	movf	horizontalStepper@rotations+1,w,c
 18207  009BA2  580B               	subwfb	horizontalStepper@i+1,w,c
 18208  009BA4  B0D8               	btfsc	status,0,c
 18209  009BA6  0012               	return	
 18210  009BA8  D7EF               	goto	l475
 18211  009BAA                     l473:
 18212                           
 18213                           ;operationMode.c: 658: else if (direction == 0){
 18214  009BAA  5008               	movf	horizontalStepper@direction,w,c
 18215  009BAC  1009               	iorwf	horizontalStepper@direction+1,w,c
 18216  009BAE  A4D8               	btfss	status,2,c
 18217  009BB0  0012               	return	
 18218                           
 18219                           ;operationMode.c: 659: for (i=0; i<rotations; i++){
 18220  009BB2  0E00               	movlw	0
 18221  009BB4  6E0B               	movwf	horizontalStepper@i+1,c
 18222  009BB6  0E00               	movlw	0
 18223  009BB8  6E0A               	movwf	horizontalStepper@i,c
 18224  009BBA  D00A               	goto	l479
 18225  009BBC                     
 18226                           ;operationMode.c: 660: uartTransmitBlocking(columnRight, 1);
 18227  009BBC  0E72               	movlw	low _columnRight
 18228  009BBE  6E01               	movwf	uartTransmitBlocking@data,c
 18229  009BC0  0E00               	movlw	high _columnRight
 18230  009BC2  6E02               	movwf	uartTransmitBlocking@data+1,c
 18231  009BC4  0E01               	movlw	1
 18232  009BC6  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18233  009BC8  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 18234  009BCC  4A0A               	infsnz	horizontalStepper@i,f,c
 18235  009BCE  2A0B               	incf	horizontalStepper@i+1,f,c
 18236  009BD0                     l479:
 18237  009BD0  5006               	movf	horizontalStepper@rotations,w,c
 18238  009BD2  5C0A               	subwf	horizontalStepper@i,w,c
 18239  009BD4  5007               	movf	horizontalStepper@rotations+1,w,c
 18240  009BD6  580B               	subwfb	horizontalStepper@i+1,w,c
 18241  009BD8  B0D8               	btfsc	status,0,c
 18242  009BDA  0012               	return	
 18243  009BDC  D7EF               	goto	l480
 18244  009BDE                     __end_of_horizontalStepper:
 18245                           	opt stack 0
 18246                           tblptru	equ	0xFF8
 18247                           tblptrh	equ	0xFF7
 18248                           tblptrl	equ	0xFF6
 18249                           tablat	equ	0xFF5
 18250                           prodh	equ	0xFF4
 18251                           prodl	equ	0xFF3
 18252                           postinc0	equ	0xFEE
 18253                           wreg	equ	0xFE8
 18254                           postinc1	equ	0xFE6
 18255                           postdec1	equ	0xFE5
 18256                           plusw1	equ	0xFE3
 18257                           fsr1h	equ	0xFE2
 18258                           fsr1l	equ	0xFE1
 18259                           indf2	equ	0xFDF
 18260                           postinc2	equ	0xFDE
 18261                           postdec2	equ	0xFDD
 18262                           plusw2	equ	0xFDB
 18263                           fsr2h	equ	0xFDA
 18264                           fsr2l	equ	0xFD9
 18265                           status	equ	0xFD8
 18266                           
 18267 ;; *************** function _getUserInputs *****************
 18268 ;; Defined at:
 18269 ;;		line 30 in file "operationMode.c"
 18270 ;; Parameters:    Size  Location     Type
 18271 ;;  drawerTable     2    6[COMRAM] PTR unsigned int 
 18272 ;;		 -> mainOperation@drawerTable(16), 
 18273 ;;  dietTable       2    8[COMRAM] PTR unsigned int 
 18274 ;;		 -> mainOperation@dietTable(16), 
 18275 ;;  foodTable       2   10[COMRAM] PTR unsigned int 
 18276 ;;		 -> mainOperation@foodTable(16), 
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;  i               2   22[COMRAM] unsigned int 
 18279 ;;  data            2   20[COMRAM] unsigned int 
 18280 ;;  n               2   18[COMRAM] unsigned int 
 18281 ;;  count           2   16[COMRAM] unsigned int 
 18282 ;;  logNumber       2   14[COMRAM] unsigned int 
 18283 ;; Return value:  Size  Location     Type
 18284 ;;                  1    wreg      void 
 18285 ;; Registers used:
 18286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18287 ;; Tracked objects:
 18288 ;;		On entry : 0/0
 18289 ;;		On exit  : 0/0
 18290 ;;		Unchanged: 0/0
 18291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18292 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18293 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18294 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18295 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18296 ;;Total ram usage:       18 bytes
 18297 ;; Hardware stack levels used:    1
 18298 ;; Hardware stack levels required when called:    1
 18299 ;; This function calls:
 18300 ;;		___wmul
 18301 ;;		_readEEPROM
 18302 ;; This function is called by:
 18303 ;;		_mainOperation
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           	psect	text37
 18308  00A6E6                     __ptext37:
 18309                           	opt stack 0
 18310  00A6E6                     _getUserInputs:
 18311                           	opt stack 28
 18312                           
 18313                           ;operationMode.c: 31: unsigned int data = 0;
 18314                           
 18315                           ;incstack = 0
 18316  00A6E6  0E00               	movlw	0
 18317  00A6E8  6E16               	movwf	getUserInputs@data+1,c
 18318  00A6EA  0E00               	movlw	0
 18319  00A6EC  6E15               	movwf	getUserInputs@data,c
 18320                           
 18321                           ;operationMode.c: 32: unsigned int i = 0;
 18322  00A6EE  0E00               	movlw	0
 18323  00A6F0  6E18               	movwf	getUserInputs@i+1,c
 18324  00A6F2  0E00               	movlw	0
 18325  00A6F4  6E17               	movwf	getUserInputs@i,c
 18326                           
 18327                           ;operationMode.c: 33: unsigned int logNumber = 0;
 18328  00A6F6  0E00               	movlw	0
 18329  00A6F8  6E10               	movwf	getUserInputs@logNumber+1,c
 18330  00A6FA  0E00               	movlw	0
 18331  00A6FC  6E0F               	movwf	getUserInputs@logNumber,c
 18332                           
 18333                           ;operationMode.c: 34: unsigned int n = 0;
 18334  00A6FE  0E00               	movlw	0
 18335  00A700  6E14               	movwf	getUserInputs@n+1,c
 18336  00A702  0E00               	movlw	0
 18337  00A704  6E13               	movwf	getUserInputs@n,c
 18338                           
 18339                           ;operationMode.c: 35: unsigned int count = 0;
 18340  00A706  0E00               	movlw	0
 18341  00A708  6E12               	movwf	getUserInputs@count+1,c
 18342  00A70A  0E00               	movlw	0
 18343  00A70C  6E11               	movwf	getUserInputs@count,c
 18344                           
 18345                           ;operationMode.c: 37: logNumber = readEEPROM(250);
 18346  00A70E  0EFA               	movlw	250
 18347  00A710  ECE9  F04B         	call	_readEEPROM
 18348  00A714  6E0D               	movwf	??_getUserInputs& (0+255),c
 18349  00A716  500D               	movf	??_getUserInputs,w,c
 18350  00A718  6E0F               	movwf	getUserInputs@logNumber,c
 18351  00A71A  6A10               	clrf	getUserInputs@logNumber+1,c
 18352                           
 18353                           ;operationMode.c: 39: if (logNumber == 0 || logNumber == 4){
 18354  00A71C  500F               	movf	getUserInputs@logNumber,w,c
 18355  00A71E  1010               	iorwf	getUserInputs@logNumber+1,w,c
 18356  00A720  B4D8               	btfsc	status,2,c
 18357  00A722  D005               	goto	u9080
 18358  00A724  0E04               	movlw	4
 18359  00A726  180F               	xorwf	getUserInputs@logNumber,w,c
 18360  00A728  1010               	iorwf	getUserInputs@logNumber+1,w,c
 18361  00A72A  A4D8               	btfss	status,2,c
 18362  00A72C  D005               	goto	l144
 18363  00A72E                     u9080:
 18364                           
 18365                           ;operationMode.c: 40: n = 0;
 18366  00A72E  0E00               	movlw	0
 18367  00A730  6E14               	movwf	getUserInputs@n+1,c
 18368  00A732  0E00               	movlw	0
 18369  00A734  6E13               	movwf	getUserInputs@n,c
 18370                           
 18371                           ;operationMode.c: 41: }
 18372  00A736  D010               	goto	l147
 18373  00A738                     l144:
 18374                           
 18375                           ;operationMode.c: 42: else{
 18376                           ;operationMode.c: 43: n = (logNumber-1)*35;
 18377  00A738  0EFF               	movlw	255
 18378  00A73A  240F               	addwf	getUserInputs@logNumber,w,c
 18379  00A73C  6E01               	movwf	___wmul@multiplier,c
 18380  00A73E  0EFF               	movlw	255
 18381  00A740  2010               	addwfc	getUserInputs@logNumber+1,w,c
 18382  00A742  6E02               	movwf	___wmul@multiplier+1,c
 18383  00A744  0E00               	movlw	0
 18384  00A746  6E04               	movwf	___wmul@multiplicand+1,c
 18385  00A748  0E23               	movlw	35
 18386  00A74A  6E03               	movwf	___wmul@multiplicand,c
 18387  00A74C  EC31  F04C         	call	___wmul	;wreg free
 18388  00A750  C001  F013         	movff	?___wmul,getUserInputs@n
 18389  00A754  C002  F014         	movff	?___wmul+1,getUserInputs@n+1
 18390  00A758                     l147:
 18391                           
 18392                           ;operationMode.c: 44: }
 18393                           ;operationMode.c: 46: for (i=11; i<35; i+=3){
 18394  00A758  0E00               	movlw	0
 18395  00A75A  6E18               	movwf	getUserInputs@i+1,c
 18396  00A75C  0E0B               	movlw	11
 18397  00A75E  6E17               	movwf	getUserInputs@i,c
 18398  00A760                     l7896:
 18399  00A760  5018               	movf	getUserInputs@i+1,w,c
 18400  00A762  E14D               	bnz	l150
 18401  00A764  0E23               	movlw	35
 18402  00A766  5C17               	subwf	getUserInputs@i,w,c
 18403  00A768  B0D8               	btfsc	status,0,c
 18404  00A76A  0012               	return	
 18405                           
 18406                           ;operationMode.c: 47: data = readEEPROM(i+n);
 18407  00A76C  5017               	movf	getUserInputs@i,w,c
 18408  00A76E  2413               	addwf	getUserInputs@n,w,c
 18409  00A770  ECE9  F04B         	call	_readEEPROM
 18410  00A774  6E0D               	movwf	??_getUserInputs& (0+255),c
 18411  00A776  500D               	movf	??_getUserInputs,w,c
 18412  00A778  6E15               	movwf	getUserInputs@data,c
 18413  00A77A  6A16               	clrf	getUserInputs@data+1,c
 18414                           
 18415                           ;operationMode.c: 48: drawerTable[count] = data;
 18416  00A77C  90D8               	bcf	status,0,c
 18417  00A77E  3411               	rlcf	getUserInputs@count,w,c
 18418  00A780  6ED9               	movwf	fsr2l,c
 18419  00A782  3412               	rlcf	getUserInputs@count+1,w,c
 18420  00A784  6EDA               	movwf	fsr2h,c
 18421  00A786  5007               	movf	getUserInputs@drawerTable,w,c
 18422  00A788  26D9               	addwf	fsr2l,f,c
 18423  00A78A  5008               	movf	getUserInputs@drawerTable+1,w,c
 18424  00A78C  22DA               	addwfc	fsr2h,f,c
 18425  00A78E  C015  FFDE         	movff	getUserInputs@data,postinc2
 18426  00A792  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18427                           
 18428                           ;operationMode.c: 49: data = readEEPROM(i+1+n);
 18429  00A796  5017               	movf	getUserInputs@i,w,c
 18430  00A798  2413               	addwf	getUserInputs@n,w,c
 18431  00A79A  6E0D               	movwf	??_getUserInputs& (0+255),c
 18432  00A79C  280D               	incf	??_getUserInputs,w,c
 18433  00A79E  ECE9  F04B         	call	_readEEPROM
 18434  00A7A2  6E0E               	movwf	(??_getUserInputs+1)& (0+255),c
 18435  00A7A4  500E               	movf	??_getUserInputs+1,w,c
 18436  00A7A6  6E15               	movwf	getUserInputs@data,c
 18437  00A7A8  6A16               	clrf	getUserInputs@data+1,c
 18438                           
 18439                           ;operationMode.c: 50: dietTable[count] = data;
 18440  00A7AA  90D8               	bcf	status,0,c
 18441  00A7AC  3411               	rlcf	getUserInputs@count,w,c
 18442  00A7AE  6ED9               	movwf	fsr2l,c
 18443  00A7B0  3412               	rlcf	getUserInputs@count+1,w,c
 18444  00A7B2  6EDA               	movwf	fsr2h,c
 18445  00A7B4  5009               	movf	getUserInputs@dietTable,w,c
 18446  00A7B6  26D9               	addwf	fsr2l,f,c
 18447  00A7B8  500A               	movf	getUserInputs@dietTable+1,w,c
 18448  00A7BA  22DA               	addwfc	fsr2h,f,c
 18449  00A7BC  C015  FFDE         	movff	getUserInputs@data,postinc2
 18450  00A7C0  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18451                           
 18452                           ;operationMode.c: 51: data = readEEPROM(i+2+n);
 18453  00A7C4  5017               	movf	getUserInputs@i,w,c
 18454  00A7C6  2413               	addwf	getUserInputs@n,w,c
 18455  00A7C8  0F02               	addlw	2
 18456  00A7CA  ECE9  F04B         	call	_readEEPROM
 18457  00A7CE  6E0D               	movwf	??_getUserInputs& (0+255),c
 18458  00A7D0  500D               	movf	??_getUserInputs,w,c
 18459  00A7D2  6E15               	movwf	getUserInputs@data,c
 18460  00A7D4  6A16               	clrf	getUserInputs@data+1,c
 18461                           
 18462                           ;operationMode.c: 52: foodTable[count] = data;
 18463  00A7D6  90D8               	bcf	status,0,c
 18464  00A7D8  3411               	rlcf	getUserInputs@count,w,c
 18465  00A7DA  6ED9               	movwf	fsr2l,c
 18466  00A7DC  3412               	rlcf	getUserInputs@count+1,w,c
 18467  00A7DE  6EDA               	movwf	fsr2h,c
 18468  00A7E0  500B               	movf	getUserInputs@foodTable,w,c
 18469  00A7E2  26D9               	addwf	fsr2l,f,c
 18470  00A7E4  500C               	movf	getUserInputs@foodTable+1,w,c
 18471  00A7E6  22DA               	addwfc	fsr2h,f,c
 18472  00A7E8  C015  FFDE         	movff	getUserInputs@data,postinc2
 18473  00A7EC  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18474                           
 18475                           ;operationMode.c: 53: count += 1;
 18476  00A7F0  4A11               	infsnz	getUserInputs@count,f,c
 18477  00A7F2  2A12               	incf	getUserInputs@count+1,f,c
 18478  00A7F4  0E03               	movlw	3
 18479  00A7F6  2617               	addwf	getUserInputs@i,f,c
 18480  00A7F8  0E00               	movlw	0
 18481  00A7FA  2218               	addwfc	getUserInputs@i+1,f,c
 18482  00A7FC  D7B1               	goto	l7896
 18483  00A7FE                     l150:
 18484  00A7FE  0012               	return		;funcret
 18485  00A800                     __end_of_getUserInputs:
 18486                           	opt stack 0
 18487                           tblptru	equ	0xFF8
 18488                           tblptrh	equ	0xFF7
 18489                           tblptrl	equ	0xFF6
 18490                           tablat	equ	0xFF5
 18491                           prodh	equ	0xFF4
 18492                           prodl	equ	0xFF3
 18493                           postinc0	equ	0xFEE
 18494                           wreg	equ	0xFE8
 18495                           postinc1	equ	0xFE6
 18496                           postdec1	equ	0xFE5
 18497                           plusw1	equ	0xFE3
 18498                           fsr1h	equ	0xFE2
 18499                           fsr1l	equ	0xFE1
 18500                           indf2	equ	0xFDF
 18501                           postinc2	equ	0xFDE
 18502                           postdec2	equ	0xFDD
 18503                           plusw2	equ	0xFDB
 18504                           fsr2h	equ	0xFDA
 18505                           fsr2l	equ	0xFD9
 18506                           status	equ	0xFD8
 18507                           
 18508 ;; *************** function _readEEPROM *****************
 18509 ;; Defined at:
 18510 ;;		line 29 in file "EEPROMstorage.c"
 18511 ;; Parameters:    Size  Location     Type
 18512 ;;  address         1    wreg     unsigned char 
 18513 ;; Auto vars:     Size  Location     Type
 18514 ;;  address         1    0[COMRAM] unsigned char 
 18515 ;; Return value:  Size  Location     Type
 18516 ;;                  1    wreg      unsigned char 
 18517 ;; Registers used:
 18518 ;;		wreg, status,2
 18519 ;; Tracked objects:
 18520 ;;		On entry : 0/0
 18521 ;;		On exit  : 0/0
 18522 ;;		Unchanged: 0/0
 18523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18528 ;;Total ram usage:        1 bytes
 18529 ;; Hardware stack levels used:    1
 18530 ;; This function calls:
 18531 ;;		Nothing
 18532 ;; This function is called by:
 18533 ;;		_main
 18534 ;;		_getUserInputs
 18535 ;;		_viewLogs
 18536 ;;		_displayLogs
 18537 ;;		_standbyMode
 18538 ;;		_shiftEEPROM
 18539 ;; This function uses a non-reentrant model
 18540 ;;
 18541                           
 18542                           	psect	text38
 18543  0097D2                     __ptext38:
 18544                           	opt stack 0
 18545  0097D2                     _readEEPROM:
 18546                           	opt stack 28
 18547                           
 18548                           ;incstack = 0
 18549                           ;readEEPROM@address stored from wreg
 18550  0097D2  6E01               	movwf	readEEPROM@address,c
 18551  0097D4                     
 18552                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 18553  0097D4  B2A6               	btfsc	4006,1,c	;volsfr
 18554  0097D6  D7FE               	goto	l7076
 18555                           
 18556                           ;EEPROMstorage.c: 32: EEADR = address;
 18557  0097D8  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 18558                           
 18559                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 18560  0097DC  9EA6               	bcf	4006,7,c	;volsfr
 18561                           
 18562                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 18563  0097DE  9CA6               	bcf	4006,6,c	;volsfr
 18564                           
 18565                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 18566  0097E0  80A6               	bsf	4006,0,c	;volsfr
 18567                           
 18568                           ;EEPROMstorage.c: 36: return( EEDATA );
 18569  0097E2  50A8               	movf	4008,w,c	;volatile
 18570  0097E4  0012               	return	
 18571  0097E6                     __end_of_readEEPROM:
 18572                           	opt stack 0
 18573                           tblptru	equ	0xFF8
 18574                           tblptrh	equ	0xFF7
 18575                           tblptrl	equ	0xFF6
 18576                           tablat	equ	0xFF5
 18577                           prodh	equ	0xFF4
 18578                           prodl	equ	0xFF3
 18579                           postinc0	equ	0xFEE
 18580                           wreg	equ	0xFE8
 18581                           postinc1	equ	0xFE6
 18582                           postdec1	equ	0xFE5
 18583                           plusw1	equ	0xFE3
 18584                           fsr1h	equ	0xFE2
 18585                           fsr1l	equ	0xFE1
 18586                           indf2	equ	0xFDF
 18587                           postinc2	equ	0xFDE
 18588                           postdec2	equ	0xFDD
 18589                           plusw2	equ	0xFDB
 18590                           fsr2h	equ	0xFDA
 18591                           fsr2l	equ	0xFD9
 18592                           status	equ	0xFD8
 18593                           
 18594 ;; *************** function _getRoundPieces *****************
 18595 ;; Defined at:
 18596 ;;		line 200 in file "operationMode.c"
 18597 ;; Parameters:    Size  Location     Type
 18598 ;;  dietType        2    0[COMRAM] unsigned int 
 18599 ;;  foodType        2    2[COMRAM] unsigned int 
 18600 ;; Auto vars:     Size  Location     Type
 18601 ;;  returnValue     2    6[COMRAM] unsigned int 
 18602 ;; Return value:  Size  Location     Type
 18603 ;;                  2    0[COMRAM] unsigned int 
 18604 ;; Registers used:
 18605 ;;		wreg, status,2, status,0
 18606 ;; Tracked objects:
 18607 ;;		On entry : 0/0
 18608 ;;		On exit  : 0/0
 18609 ;;		Unchanged: 0/0
 18610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18613 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;Total ram usage:        8 bytes
 18616 ;; Hardware stack levels used:    1
 18617 ;; This function calls:
 18618 ;;		Nothing
 18619 ;; This function is called by:
 18620 ;;		_mainOperation
 18621 ;; This function uses a non-reentrant model
 18622 ;;
 18623                           
 18624                           	psect	text39
 18625  00A924                     __ptext39:
 18626                           	opt stack 0
 18627  00A924                     _getRoundPieces:
 18628                           	opt stack 29
 18629                           
 18630                           ;operationMode.c: 201: unsigned int returnValue = 0;
 18631                           
 18632                           ;incstack = 0
 18633  00A924  0E00               	movlw	0
 18634  00A926  6E08               	movwf	getRoundPieces@returnValue+1,c
 18635  00A928  0E00               	movlw	0
 18636  00A92A  6E07               	movwf	getRoundPieces@returnValue,c
 18637                           
 18638                           ;operationMode.c: 203: switch(dietType){
 18639  00A92C  D060               	goto	l259
 18640  00A92E                     
 18641                           ;operationMode.c: 206: if (foodType == 0){
 18642  00A92E  5003               	movf	getRoundPieces@foodType,w,c
 18643  00A930  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18644  00A932  A4D8               	btfss	status,2,c
 18645  00A934  D004               	goto	l261
 18646  00A936                     u9690:
 18647                           
 18648                           ;operationMode.c: 207: returnValue = 1;
 18649  00A936  0E00               	movlw	0
 18650  00A938  6E08               	movwf	getRoundPieces@returnValue+1,c
 18651  00A93A  0E01               	movlw	1
 18652  00A93C  D008               	goto	L129
 18653  00A93E                     l261:
 18654                           
 18655                           ;operationMode.c: 209: else if (foodType == 1){
 18656  00A93E  0403               	decf	getRoundPieces@foodType,w,c
 18657  00A940  D045               	goto	L168
 18658  00A942                     
 18659                           ;operationMode.c: 215: if (foodType == 3){
 18660  00A942  0E03               	movlw	3
 18661  00A944  1803               	xorwf	getRoundPieces@foodType,w,c
 18662  00A946  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18663  00A948  A4D8               	btfss	status,2,c
 18664  00A94A  D003               	goto	l266
 18665  00A94C  D7F4               	goto	u9690
 18666  00A94E                     L129:
 18667  00A94E  6E07               	movwf	getRoundPieces@returnValue,c
 18668                           
 18669                           ;operationMode.c: 217: }
 18670  00A950  D07C               	goto	l264
 18671  00A952                     l266:
 18672                           
 18673                           ;operationMode.c: 218: else if (foodType == 4){
 18674  00A952  0E04               	movlw	4
 18675  00A954  1803               	xorwf	getRoundPieces@foodType,w,c
 18676  00A956  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18677  00A958  B4D8               	btfsc	status,2,c
 18678  00A95A  D7ED               	goto	u9690
 18679                           
 18680                           ;operationMode.c: 221: else if (foodType == 6){
 18681                           
 18682                           ;operationMode.c: 220: }
 18683                           
 18684                           ;operationMode.c: 219: returnValue = 1;
 18685  00A95C  0E06               	movlw	6
 18686  00A95E  1803               	xorwf	getRoundPieces@foodType,w,c
 18687  00A960  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18688  00A962  B4D8               	btfsc	status,2,c
 18689  00A964  D036               	goto	u9940
 18690  00A966                     
 18691                           ;operationMode.c: 224: else if (foodType == 7){
 18692  00A966  0E07               	movlw	7
 18693  00A968  D030               	goto	L170
 18694  00A96A                     
 18695                           ;operationMode.c: 230: if (foodType == 3){
 18696  00A96A  0E03               	movlw	3
 18697  00A96C  1803               	xorwf	getRoundPieces@foodType,w,c
 18698  00A96E  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18699  00A970  B4D8               	btfsc	status,2,c
 18700  00A972  D7E1               	goto	u9690
 18701                           
 18702                           ;operationMode.c: 233: else if (foodType == 4){
 18703                           
 18704                           ;operationMode.c: 232: }
 18705                           
 18706                           ;operationMode.c: 231: returnValue = 1;
 18707  00A974  0E04               	movlw	4
 18708  00A976  1803               	xorwf	getRoundPieces@foodType,w,c
 18709  00A978  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18710  00A97A  B4D8               	btfsc	status,2,c
 18711  00A97C  D7DC               	goto	u9690
 18712                           
 18713                           ;operationMode.c: 236: else if (foodType == 5){
 18714                           
 18715                           ;operationMode.c: 235: }
 18716                           
 18717                           ;operationMode.c: 234: returnValue = 1;
 18718  00A97E  0E05               	movlw	5
 18719  00A980  1803               	xorwf	getRoundPieces@foodType,w,c
 18720  00A982  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18721  00A984  B4D8               	btfsc	status,2,c
 18722  00A986  D7D7               	goto	u9690
 18723                           
 18724                           ;operationMode.c: 239: else if (foodType == 6){
 18725                           
 18726                           ;operationMode.c: 238: }
 18727                           
 18728                           ;operationMode.c: 237: returnValue = 1;
 18729  00A988  0E06               	movlw	6
 18730  00A98A  1803               	xorwf	getRoundPieces@foodType,w,c
 18731  00A98C  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18732  00A98E  A4D8               	btfss	status,2,c
 18733  00A990  D7EA               	goto	l270
 18734  00A992  D01F               	goto	u9940
 18735  00A994                     
 18736                           ;operationMode.c: 257: if (foodType == 8){
 18737                           
 18738                           ;operationMode.c: 256: case 7:
 18739                           
 18740                           ;operationMode.c: 253: }
 18741                           ;operationMode.c: 254: break;
 18742                           
 18743                           ;operationMode.c: 252: returnValue = 2;
 18744                           
 18745                           ;operationMode.c: 251: else if (foodType == 9){
 18746                           
 18747                           ;operationMode.c: 250: }
 18748                           
 18749                           ;operationMode.c: 249: returnValue = 2;
 18750                           
 18751                           ;operationMode.c: 248: if (foodType == 8){
 18752  00A994  0E08               	movlw	8
 18753  00A996  1803               	xorwf	getRoundPieces@foodType,w,c
 18754  00A998  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18755  00A99A  B4D8               	btfsc	status,2,c
 18756  00A99C  D01A               	goto	u9940
 18757                           
 18758                           ;operationMode.c: 260: else if (foodType == 9){
 18759                           
 18760                           ;operationMode.c: 259: }
 18761                           
 18762                           ;operationMode.c: 258: returnValue = 2;
 18763  00A99E  0E09               	movlw	9
 18764  00A9A0  D014               	goto	L170
 18765  00A9A2                     
 18766                           ;operationMode.c: 266: if (foodType == 8){
 18767  00A9A2  0E08               	movlw	8
 18768  00A9A4  D00B               	goto	L172
 18769  00A9A6                     
 18770                           ;operationMode.c: 290: if (foodType == 8){
 18771                           
 18772                           ;operationMode.c: 289: case 10:
 18773                           
 18774                           ;operationMode.c: 286: }
 18775                           ;operationMode.c: 287: break;
 18776                           
 18777                           ;operationMode.c: 285: returnValue = 2;
 18778                           
 18779                           ;operationMode.c: 284: else if (foodType == 11){
 18780                           
 18781                           ;operationMode.c: 283: }
 18782                           
 18783                           ;operationMode.c: 282: returnValue = 1;
 18784                           
 18785                           ;operationMode.c: 281: else if (foodType == 10){
 18786                           
 18787                           ;operationMode.c: 280: }
 18788                           
 18789                           ;operationMode.c: 279: returnValue = 1;
 18790                           
 18791                           ;operationMode.c: 278: else if (foodType == 9){
 18792                           
 18793                           ;operationMode.c: 277: }
 18794                           
 18795                           ;operationMode.c: 276: returnValue = 1;
 18796                           
 18797                           ;operationMode.c: 275: if (foodType == 8){
 18798  00A9A6  0E08               	movlw	8
 18799  00A9A8  1803               	xorwf	getRoundPieces@foodType,w,c
 18800  00A9AA  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18801  00A9AC  B4D8               	btfsc	status,2,c
 18802  00A9AE  D7C3               	goto	u9690
 18803                           
 18804                           ;operationMode.c: 293: else if (foodType == 9){
 18805                           
 18806                           ;operationMode.c: 292: }
 18807                           
 18808                           ;operationMode.c: 291: returnValue = 1;
 18809  00A9B0  0E09               	movlw	9
 18810  00A9B2  1803               	xorwf	getRoundPieces@foodType,w,c
 18811  00A9B4  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18812  00A9B6  B4D8               	btfsc	status,2,c
 18813  00A9B8  D7BE               	goto	u9690
 18814                           
 18815                           ;operationMode.c: 296: else if (foodType == 10){
 18816                           
 18817                           ;operationMode.c: 295: }
 18818                           
 18819                           ;operationMode.c: 294: returnValue = 1;
 18820  00A9BA  0E0A               	movlw	10
 18821  00A9BC                     L172:
 18822  00A9BC  1803               	xorwf	getRoundPieces@foodType,w,c
 18823  00A9BE  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18824  00A9C0  B4D8               	btfsc	status,2,c
 18825  00A9C2  D7B9               	goto	u9690
 18826                           
 18827                           ;operationMode.c: 299: else if (foodType == 11){
 18828                           
 18829                           ;operationMode.c: 298: }
 18830                           
 18831                           ;operationMode.c: 297: returnValue = 1;
 18832  00A9C4  0E0B               	movlw	11
 18833  00A9C6  D001               	goto	L170
 18834  00A9C8                     
 18835                           ;operationMode.c: 305: if (foodType == 12){
 18836  00A9C8  0E0C               	movlw	12
 18837  00A9CA                     L170:
 18838  00A9CA  1803               	xorwf	getRoundPieces@foodType,w,c
 18839  00A9CC                     L168:
 18840  00A9CC  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18841  00A9CE  A4D8               	btfss	status,2,c
 18842  00A9D0  D03C               	goto	l264
 18843  00A9D2                     u9940:
 18844                           
 18845                           ;operationMode.c: 306: returnValue = 2;
 18846  00A9D2  0E00               	movlw	0
 18847  00A9D4  6E08               	movwf	getRoundPieces@returnValue+1,c
 18848  00A9D6  0E02               	movlw	2
 18849  00A9D8  D7BA               	goto	L129
 18850  00A9DA                     
 18851                           ;operationMode.c: 323: if (foodType == 12){
 18852                           
 18853                           ;operationMode.c: 322: case 16:
 18854                           
 18855                           ;operationMode.c: 319: }
 18856                           ;operationMode.c: 320: break;
 18857                           
 18858                           ;operationMode.c: 318: returnValue = 1;
 18859                           
 18860                           ;operationMode.c: 317: if (foodType == 12){
 18861                           
 18862                           ;operationMode.c: 316: case 15:
 18863                           
 18864                           ;operationMode.c: 313: }
 18865                           ;operationMode.c: 314: break;
 18866                           
 18867                           ;operationMode.c: 312: returnValue = 1;
 18868                           
 18869                           ;operationMode.c: 311: if (foodType == 12){
 18870  00A9DA  0E0C               	movlw	12
 18871  00A9DC  1803               	xorwf	getRoundPieces@foodType,w,c
 18872  00A9DE  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18873  00A9E0  A4D8               	btfss	status,2,c
 18874  00A9E2  D033               	goto	l264
 18875  00A9E4  D7A8               	goto	u9690
 18876  00A9E6                     
 18877                           ;operationMode.c: 328: returnValue = 0;
 18878  00A9E6  0E00               	movlw	0
 18879  00A9E8  6E08               	movwf	getRoundPieces@returnValue+1,c
 18880  00A9EA  0E00               	movlw	0
 18881  00A9EC  D7B0               	goto	L129
 18882  00A9EE                     l259:
 18883  00A9EE  C001  F005         	movff	getRoundPieces@dietType,??_getRoundPieces
 18884  00A9F2  C002  F006         	movff	getRoundPieces@dietType+1,??_getRoundPieces+1
 18885                           
 18886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18887                           ; Switch size 1, requested type "space"
 18888                           ; Number of cases is 1, Range of values is 0 to 0
 18889                           ; switch strategies available:
 18890                           ; Name         Instructions Cycles
 18891                           ; simple_byte            4     3 (average)
 18892                           ;	Chosen strategy is simple_byte
 18893  00A9F6  5006               	movf	??_getRoundPieces+1,w,c
 18894  00A9F8  0A00               	xorlw	0	; case 0
 18895  00A9FA  A4D8               	btfss	status,2,c
 18896  00A9FC  D7F4               	goto	l319
 18897                           
 18898                           ; Switch size 1, requested type "space"
 18899                           ; Number of cases is 12, Range of values is 0 to 16
 18900                           ; switch strategies available:
 18901                           ; Name         Instructions Cycles
 18902                           ; simple_byte           37    19 (average)
 18903                           ;	Chosen strategy is simple_byte
 18904  00A9FE  5005               	movf	??_getRoundPieces,w,c
 18905  00AA00  0A00               	xorlw	0	; case 0
 18906  00AA02  B4D8               	btfsc	status,2,c
 18907  00AA04  D794               	goto	l260
 18908  00AA06  0A03               	xorlw	3	; case 3
 18909  00AA08  B4D8               	btfsc	status,2,c
 18910  00AA0A  D79B               	goto	l265
 18911  00AA0C  0A07               	xorlw	7	; case 4
 18912  00AA0E  B4D8               	btfsc	status,2,c
 18913  00AA10  D7AC               	goto	l273
 18914  00AA12  0A02               	xorlw	2	; case 6
 18915  00AA14  B4D8               	btfsc	status,2,c
 18916  00AA16  D7BE               	goto	l283
 18917  00AA18  0A01               	xorlw	1	; case 7
 18918  00AA1A  B4D8               	btfsc	status,2,c
 18919  00AA1C  D7BB               	goto	l283
 18920  00AA1E  0A0F               	xorlw	15	; case 8
 18921  00AA20  B4D8               	btfsc	status,2,c
 18922  00AA22  D7BF               	goto	l291
 18923  00AA24  0A01               	xorlw	1	; case 9
 18924  00AA26  B4D8               	btfsc	status,2,c
 18925  00AA28  D7BE               	goto	l295
 18926  00AA2A  0A03               	xorlw	3	; case 10
 18927  00AA2C  B4D8               	btfsc	status,2,c
 18928  00AA2E  D7BB               	goto	l295
 18929  00AA30  0A07               	xorlw	7	; case 13
 18930  00AA32  B4D8               	btfsc	status,2,c
 18931  00AA34  D7C9               	goto	l311
 18932  00AA36  0A03               	xorlw	3	; case 14
 18933  00AA38  B4D8               	btfsc	status,2,c
 18934  00AA3A  D7CF               	goto	l313
 18935  00AA3C  0A01               	xorlw	1	; case 15
 18936  00AA3E  B4D8               	btfsc	status,2,c
 18937  00AA40  D7CC               	goto	l313
 18938  00AA42  0A1F               	xorlw	31	; case 16
 18939  00AA44  B4D8               	btfsc	status,2,c
 18940  00AA46  D7C9               	goto	l313
 18941  00AA48  D7CE               	goto	l319
 18942  00AA4A                     l264:
 18943                           
 18944                           ;operationMode.c: 331: return returnValue;
 18945  00AA4A  C007  F001         	movff	getRoundPieces@returnValue,?_getRoundPieces
 18946  00AA4E  C008  F002         	movff	getRoundPieces@returnValue+1,?_getRoundPieces+1
 18947  00AA52  0012               	return		;funcret
 18948  00AA54                     __end_of_getRoundPieces:
 18949                           	opt stack 0
 18950                           tblptru	equ	0xFF8
 18951                           tblptrh	equ	0xFF7
 18952                           tblptrl	equ	0xFF6
 18953                           tablat	equ	0xFF5
 18954                           prodh	equ	0xFF4
 18955                           prodl	equ	0xFF3
 18956                           postinc0	equ	0xFEE
 18957                           wreg	equ	0xFE8
 18958                           postinc1	equ	0xFE6
 18959                           postdec1	equ	0xFE5
 18960                           plusw1	equ	0xFE3
 18961                           fsr1h	equ	0xFE2
 18962                           fsr1l	equ	0xFE1
 18963                           indf2	equ	0xFDF
 18964                           postinc2	equ	0xFDE
 18965                           postdec2	equ	0xFDD
 18966                           plusw2	equ	0xFDB
 18967                           fsr2h	equ	0xFDA
 18968                           fsr2l	equ	0xFD9
 18969                           status	equ	0xFD8
 18970                           
 18971 ;; *************** function _getLongPieces *****************
 18972 ;; Defined at:
 18973 ;;		line 472 in file "operationMode.c"
 18974 ;; Parameters:    Size  Location     Type
 18975 ;;  dietType        2    0[COMRAM] unsigned int 
 18976 ;;  foodType        2    2[COMRAM] unsigned int 
 18977 ;; Auto vars:     Size  Location     Type
 18978 ;;  returnValue     2    6[COMRAM] unsigned int 
 18979 ;; Return value:  Size  Location     Type
 18980 ;;                  2    0[COMRAM] unsigned int 
 18981 ;; Registers used:
 18982 ;;		wreg, status,2, status,0
 18983 ;; Tracked objects:
 18984 ;;		On entry : 0/0
 18985 ;;		On exit  : 0/0
 18986 ;;		Unchanged: 0/0
 18987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18991 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;Total ram usage:        8 bytes
 18993 ;; Hardware stack levels used:    1
 18994 ;; This function calls:
 18995 ;;		Nothing
 18996 ;; This function is called by:
 18997 ;;		_mainOperation
 18998 ;; This function uses a non-reentrant model
 18999 ;;
 19000                           
 19001                           	psect	text40
 19002  00AFDA                     __ptext40:
 19003                           	opt stack 0
 19004  00AFDA                     _getLongPieces:
 19005                           	opt stack 29
 19006                           
 19007                           ;operationMode.c: 473: unsigned int returnValue = 0;
 19008                           
 19009                           ;incstack = 0
 19010  00AFDA  0E00               	movlw	0
 19011  00AFDC  6E08               	movwf	getLongPieces@returnValue+1,c
 19012  00AFDE  0E00               	movlw	0
 19013  00AFE0  6E07               	movwf	getLongPieces@returnValue,c
 19014                           
 19015                           ;operationMode.c: 474: switch(dietType){
 19016  00AFE2  D08F               	goto	l387
 19017  00AFE4                     
 19018                           ;operationMode.c: 477: if (foodType == 0){
 19019  00AFE4  5003               	movf	getLongPieces@foodType,w,c
 19020  00AFE6  1004               	iorwf	getLongPieces@foodType+1,w,c
 19021  00AFE8  B4D8               	btfsc	status,2,c
 19022  00AFEA  D00B               	goto	u10300
 19023                           
 19024                           ;operationMode.c: 480: else if (foodType == 1){
 19025                           
 19026                           ;operationMode.c: 479: }
 19027                           
 19028                           ;operationMode.c: 478: returnValue = 1;
 19029  00AFEC  0403               	decf	getLongPieces@foodType,w,c
 19030  00AFEE  1004               	iorwf	getLongPieces@foodType+1,w,c
 19031  00AFF0  B4D8               	btfsc	status,2,c
 19032  00AFF2  D010               	goto	u10310
 19033                           
 19034                           ;operationMode.c: 483: else if (foodType == 2){
 19035                           
 19036                           ;operationMode.c: 482: }
 19037                           
 19038                           ;operationMode.c: 481: returnValue = 2;
 19039  00AFF4  0E02               	movlw	2
 19040  00AFF6  D07A               	goto	L151
 19041  00AFF8                     
 19042                           ;operationMode.c: 489: if (foodType == 3){
 19043  00AFF8  0E03               	movlw	3
 19044  00AFFA  1803               	xorwf	getLongPieces@foodType,w,c
 19045  00AFFC  1004               	iorwf	getLongPieces@foodType+1,w,c
 19046  00AFFE  A4D8               	btfss	status,2,c
 19047  00B000  D004               	goto	l396
 19048  00B002                     u10300:
 19049                           
 19050                           ;operationMode.c: 490: returnValue = 1;
 19051  00B002  0E00               	movlw	0
 19052  00B004  6E08               	movwf	getLongPieces@returnValue+1,c
 19053  00B006  0E01               	movlw	1
 19054  00B008  D02E               	goto	L148
 19055  00B00A                     l396:
 19056                           
 19057                           ;operationMode.c: 492: else if (foodType == 4){
 19058  00B00A  0E04               	movlw	4
 19059  00B00C  1803               	xorwf	getLongPieces@foodType,w,c
 19060  00B00E  1004               	iorwf	getLongPieces@foodType+1,w,c
 19061  00B010  A4D8               	btfss	status,2,c
 19062  00B012  D004               	goto	l398
 19063  00B014                     u10310:
 19064                           
 19065                           ;operationMode.c: 493: returnValue = 2;
 19066  00B014  0E00               	movlw	0
 19067  00B016  6E08               	movwf	getLongPieces@returnValue+1,c
 19068  00B018  0E02               	movlw	2
 19069  00B01A  D025               	goto	L148
 19070  00B01C                     l398:
 19071                           
 19072                           ;operationMode.c: 495: else if (foodType == 5){
 19073  00B01C  0E05               	movlw	5
 19074  00B01E  1803               	xorwf	getLongPieces@foodType,w,c
 19075  00B020  1004               	iorwf	getLongPieces@foodType+1,w,c
 19076  00B022  A4D8               	btfss	status,2,c
 19077  00B024  D013               	goto	L173
 19078  00B026                     u10320:
 19079                           
 19080                           ;operationMode.c: 496: returnValue = 3;
 19081  00B026  0E00               	movlw	0
 19082  00B028  6E08               	movwf	getLongPieces@returnValue+1,c
 19083  00B02A  0E03               	movlw	3
 19084  00B02C  D01C               	goto	L148
 19085  00B02E                     
 19086                           ;operationMode.c: 507: if (foodType == 3){
 19087  00B02E  0E03               	movlw	3
 19088  00B030  1803               	xorwf	getLongPieces@foodType,w,c
 19089  00B032  1004               	iorwf	getLongPieces@foodType+1,w,c
 19090  00B034  B4D8               	btfsc	status,2,c
 19091  00B036  D7E5               	goto	u10300
 19092                           
 19093                           ;operationMode.c: 510: else if (foodType == 4){
 19094                           
 19095                           ;operationMode.c: 509: }
 19096                           
 19097                           ;operationMode.c: 508: returnValue = 1;
 19098  00B038  0E04               	movlw	4
 19099  00B03A  1803               	xorwf	getLongPieces@foodType,w,c
 19100  00B03C  1004               	iorwf	getLongPieces@foodType+1,w,c
 19101  00B03E  B4D8               	btfsc	status,2,c
 19102  00B040  D7E9               	goto	u10310
 19103                           
 19104                           ;operationMode.c: 513: else if (foodType == 5){
 19105                           
 19106                           ;operationMode.c: 512: }
 19107                           
 19108                           ;operationMode.c: 511: returnValue = 2;
 19109  00B042  0E05               	movlw	5
 19110  00B044  1803               	xorwf	getLongPieces@foodType,w,c
 19111  00B046  1004               	iorwf	getLongPieces@foodType+1,w,c
 19112  00B048  B4D8               	btfsc	status,2,c
 19113  00B04A  D7ED               	goto	u10320
 19114  00B04C                     L173:
 19115                           
 19116                           ;operationMode.c: 516: else if (foodType == 6){
 19117                           
 19118                           ;operationMode.c: 515: }
 19119                           
 19120                           ;operationMode.c: 514: returnValue = 3;
 19121  00B04C  0E06               	movlw	6
 19122  00B04E  1803               	xorwf	getLongPieces@foodType,w,c
 19123  00B050  1004               	iorwf	getLongPieces@foodType+1,w,c
 19124  00B052  B4D8               	btfsc	status,2,c
 19125  00B054  D7D6               	goto	u10300
 19126                           
 19127                           ;operationMode.c: 519: else if (foodType == 7){
 19128                           
 19129                           ;operationMode.c: 518: }
 19130                           
 19131                           ;operationMode.c: 517: returnValue = 1;
 19132  00B056  0E07               	movlw	7
 19133  00B058  D001               	goto	L152
 19134  00B05A                     
 19135                           ;operationMode.c: 528: else if (foodType == 9){
 19136  00B05A  0E09               	movlw	9
 19137  00B05C                     L152:
 19138  00B05C  1803               	xorwf	getLongPieces@foodType,w,c
 19139  00B05E  1004               	iorwf	getLongPieces@foodType+1,w,c
 19140  00B060  A4D8               	btfss	status,2,c
 19141  00B062  D080               	goto	l394
 19142  00B064  D7D7               	goto	u10310
 19143  00B066                     L148:
 19144  00B066  6E07               	movwf	getLongPieces@returnValue,c
 19145                           
 19146                           ;operationMode.c: 530: }
 19147                           ;operationMode.c: 531: break;
 19148  00B068  D07D               	goto	l394
 19149  00B06A                     
 19150                           ;operationMode.c: 534: if (foodType == 8){
 19151  00B06A  0E08               	movlw	8
 19152  00B06C  1803               	xorwf	getLongPieces@foodType,w,c
 19153  00B06E  1004               	iorwf	getLongPieces@foodType+1,w,c
 19154  00B070  B4D8               	btfsc	status,2,c
 19155  00B072  D7D0               	goto	u10310
 19156                           
 19157                           ;operationMode.c: 537: else if (foodType == 9){
 19158                           
 19159                           ;operationMode.c: 536: }
 19160                           
 19161                           ;operationMode.c: 535: returnValue = 2;
 19162  00B074  0E09               	movlw	9
 19163  00B076  1803               	xorwf	getLongPieces@foodType,w,c
 19164  00B078  1004               	iorwf	getLongPieces@foodType+1,w,c
 19165  00B07A  B4D8               	btfsc	status,2,c
 19166  00B07C  D7D4               	goto	u10320
 19167                           
 19168                           ;operationMode.c: 540: else if (foodType == 10){
 19169                           
 19170                           ;operationMode.c: 539: }
 19171                           
 19172                           ;operationMode.c: 538: returnValue = 3;
 19173  00B07E  0E0A               	movlw	10
 19174  00B080  1803               	xorwf	getLongPieces@foodType,w,c
 19175  00B082  1004               	iorwf	getLongPieces@foodType+1,w,c
 19176  00B084  B4D8               	btfsc	status,2,c
 19177  00B086  D7CF               	goto	u10320
 19178  00B088                     
 19179                           ;operationMode.c: 543: else if (foodType == 11){
 19180  00B088  0E0B               	movlw	11
 19181  00B08A  D7E8               	goto	L152
 19182  00B08C                     
 19183                           ;operationMode.c: 549: if (foodType == 8){
 19184  00B08C  0E08               	movlw	8
 19185  00B08E  1803               	xorwf	getLongPieces@foodType,w,c
 19186  00B090  1004               	iorwf	getLongPieces@foodType+1,w,c
 19187  00B092  B4D8               	btfsc	status,2,c
 19188  00B094  D7B6               	goto	u10300
 19189                           
 19190                           ;operationMode.c: 552: else if (foodType == 9){
 19191                           
 19192                           ;operationMode.c: 551: }
 19193                           
 19194                           ;operationMode.c: 550: returnValue = 1;
 19195  00B096  0E09               	movlw	9
 19196  00B098  1803               	xorwf	getLongPieces@foodType,w,c
 19197  00B09A  1004               	iorwf	getLongPieces@foodType+1,w,c
 19198  00B09C  B4D8               	btfsc	status,2,c
 19199  00B09E  D7BA               	goto	u10310
 19200                           
 19201                           ;operationMode.c: 555: else if (foodType == 10){
 19202                           
 19203                           ;operationMode.c: 554: }
 19204                           
 19205                           ;operationMode.c: 553: returnValue = 2;
 19206  00B0A0  0E0A               	movlw	10
 19207  00B0A2  1803               	xorwf	getLongPieces@foodType,w,c
 19208  00B0A4  1004               	iorwf	getLongPieces@foodType+1,w,c
 19209  00B0A6  B4D8               	btfsc	status,2,c
 19210  00B0A8  D7AC               	goto	u10300
 19211                           
 19212                           ;operationMode.c: 558: else if (foodType == 11){
 19213                           
 19214                           ;operationMode.c: 557: }
 19215                           
 19216                           ;operationMode.c: 556: returnValue = 1;
 19217  00B0AA  0E0B               	movlw	11
 19218  00B0AC  D016               	goto	L150
 19219  00B0AE                     l435:
 19220                           
 19221                           ;operationMode.c: 564: if (foodType == 8){
 19222  00B0AE  0E08               	movlw	8
 19223  00B0B0  1803               	xorwf	getLongPieces@foodType,w,c
 19224  00B0B2  1004               	iorwf	getLongPieces@foodType+1,w,c
 19225  00B0B4  A4D8               	btfss	status,2,c
 19226  00B0B6  D7D1               	goto	l416
 19227  00B0B8  D7A4               	goto	u10300
 19228  00B0BA                     
 19229                           ;operationMode.c: 573: if (foodType == 8){
 19230  00B0BA  0E08               	movlw	8
 19231  00B0BC  1803               	xorwf	getLongPieces@foodType,w,c
 19232  00B0BE  1004               	iorwf	getLongPieces@foodType+1,w,c
 19233  00B0C0  B4D8               	btfsc	status,2,c
 19234  00B0C2  D7A8               	goto	u10310
 19235                           
 19236                           ;operationMode.c: 576: else if (foodType == 9){
 19237                           
 19238                           ;operationMode.c: 575: }
 19239                           
 19240                           ;operationMode.c: 574: returnValue = 2;
 19241  00B0C4  0E09               	movlw	9
 19242  00B0C6  1803               	xorwf	getLongPieces@foodType,w,c
 19243  00B0C8  1004               	iorwf	getLongPieces@foodType+1,w,c
 19244  00B0CA  B4D8               	btfsc	status,2,c
 19245  00B0CC  D7AC               	goto	u10320
 19246                           
 19247                           ;operationMode.c: 579: else if (foodType == 10){
 19248                           
 19249                           ;operationMode.c: 578: }
 19250                           
 19251                           ;operationMode.c: 577: returnValue = 3;
 19252  00B0CE  0E0A               	movlw	10
 19253  00B0D0  1803               	xorwf	getLongPieces@foodType,w,c
 19254  00B0D2  1004               	iorwf	getLongPieces@foodType+1,w,c
 19255  00B0D4  A4D8               	btfss	status,2,c
 19256  00B0D6  D7D8               	goto	l424
 19257  00B0D8  D7A6               	goto	u10320
 19258  00B0DA                     L150:
 19259  00B0DA  1803               	xorwf	getLongPieces@foodType,w,c
 19260  00B0DC  1004               	iorwf	getLongPieces@foodType+1,w,c
 19261  00B0DE  A4D8               	btfss	status,2,c
 19262  00B0E0  D041               	goto	l394
 19263  00B0E2  D78F               	goto	u10300
 19264  00B0E4                     l449:
 19265                           
 19266                           ;operationMode.c: 594: if (foodType == 12){
 19267  00B0E4  0E0C               	movlw	12
 19268  00B0E6  D7F9               	goto	L150
 19269  00B0E8                     
 19270                           ;operationMode.c: 600: if (foodType == 12){
 19271  00B0E8  0E0C               	movlw	12
 19272  00B0EA  D7B8               	goto	L152
 19273  00B0EC                     L151:
 19274  00B0EC  1803               	xorwf	getLongPieces@foodType,w,c
 19275  00B0EE  1004               	iorwf	getLongPieces@foodType+1,w,c
 19276  00B0F0  A4D8               	btfss	status,2,c
 19277  00B0F2  D038               	goto	l394
 19278  00B0F4  D798               	goto	u10320
 19279  00B0F6                     l455:
 19280                           
 19281                           ;operationMode.c: 612: if (foodType == 12){
 19282  00B0F6  0E0C               	movlw	12
 19283  00B0F8  D7F9               	goto	L151
 19284  00B0FA                     
 19285                           ;operationMode.c: 617: returnValue = 0;
 19286  00B0FA  0E00               	movlw	0
 19287  00B0FC  6E08               	movwf	getLongPieces@returnValue+1,c
 19288  00B0FE  0E00               	movlw	0
 19289  00B100  D7B2               	goto	L148
 19290  00B102                     l387:
 19291  00B102  C001  F005         	movff	getLongPieces@dietType,??_getLongPieces
 19292  00B106  C002  F006         	movff	getLongPieces@dietType+1,??_getLongPieces+1
 19293                           
 19294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19295                           ; Switch size 1, requested type "space"
 19296                           ; Number of cases is 1, Range of values is 0 to 0
 19297                           ; switch strategies available:
 19298                           ; Name         Instructions Cycles
 19299                           ; simple_byte            4     3 (average)
 19300                           ;	Chosen strategy is simple_byte
 19301  00B10A  5006               	movf	??_getLongPieces+1,w,c
 19302  00B10C  0A00               	xorlw	0	; case 0
 19303  00B10E  A4D8               	btfss	status,2,c
 19304  00B110  D7F4               	goto	l457
 19305                           
 19306                           ; Switch size 1, requested type "space"
 19307                           ; Number of cases is 13, Range of values is 2 to 17
 19308                           ; switch strategies available:
 19309                           ; Name         Instructions Cycles
 19310                           ; simple_byte           40    21 (average)
 19311                           ;	Chosen strategy is simple_byte
 19312  00B112  5005               	movf	??_getLongPieces,w,c
 19313  00B114  0A02               	xorlw	2	; case 2
 19314  00B116  B4D8               	btfsc	status,2,c
 19315  00B118  D765               	goto	l388
 19316  00B11A  0A06               	xorlw	6	; case 4
 19317  00B11C  B4D8               	btfsc	status,2,c
 19318  00B11E  D76C               	goto	l395
 19319  00B120  0A01               	xorlw	1	; case 5
 19320  00B122  B4D8               	btfsc	status,2,c
 19321  00B124  D784               	goto	l405
 19322  00B126  0A02               	xorlw	2	; case 7
 19323  00B128  B4D8               	btfsc	status,2,c
 19324  00B12A  D7C1               	goto	l435
 19325  00B12C  0A0E               	xorlw	14	; case 9
 19326  00B12E  B4D8               	btfsc	status,2,c
 19327  00B130  D79C               	goto	l419
 19328  00B132  0A03               	xorlw	3	; case 10
 19329  00B134  B4D8               	btfsc	status,2,c
 19330  00B136  D7AA               	goto	l427
 19331  00B138  0A01               	xorlw	1	; case 11
 19332  00B13A  B4D8               	btfsc	status,2,c
 19333  00B13C  D7B8               	goto	l435
 19334  00B13E  0A07               	xorlw	7	; case 12
 19335  00B140  B4D8               	btfsc	status,2,c
 19336  00B142  D7BB               	goto	l439
 19337  00B144  0A01               	xorlw	1	; case 13
 19338  00B146  B4D8               	btfsc	status,2,c
 19339  00B148  D7CD               	goto	l449
 19340  00B14A  0A03               	xorlw	3	; case 14
 19341  00B14C  B4D8               	btfsc	status,2,c
 19342  00B14E  D7CA               	goto	l449
 19343  00B150  0A01               	xorlw	1	; case 15
 19344  00B152  B4D8               	btfsc	status,2,c
 19345  00B154  D7C9               	goto	l451
 19346  00B156  0A1F               	xorlw	31	; case 16
 19347  00B158  B4D8               	btfsc	status,2,c
 19348  00B15A  D7CD               	goto	l455
 19349  00B15C  0A01               	xorlw	1	; case 17
 19350  00B15E  B4D8               	btfsc	status,2,c
 19351  00B160  D7CA               	goto	l455
 19352  00B162  D7CB               	goto	l457
 19353  00B164                     l394:
 19354                           
 19355                           ;operationMode.c: 620: return returnValue;
 19356  00B164  C007  F001         	movff	getLongPieces@returnValue,?_getLongPieces
 19357  00B168  C008  F002         	movff	getLongPieces@returnValue+1,?_getLongPieces+1
 19358  00B16C  0012               	return		;funcret
 19359  00B16E                     __end_of_getLongPieces:
 19360                           	opt stack 0
 19361                           tblptru	equ	0xFF8
 19362                           tblptrh	equ	0xFF7
 19363                           tblptrl	equ	0xFF6
 19364                           tablat	equ	0xFF5
 19365                           prodh	equ	0xFF4
 19366                           prodl	equ	0xFF3
 19367                           postinc0	equ	0xFEE
 19368                           wreg	equ	0xFE8
 19369                           postinc1	equ	0xFE6
 19370                           postdec1	equ	0xFE5
 19371                           plusw1	equ	0xFE3
 19372                           fsr1h	equ	0xFE2
 19373                           fsr1l	equ	0xFE1
 19374                           indf2	equ	0xFDF
 19375                           postinc2	equ	0xFDE
 19376                           postdec2	equ	0xFDD
 19377                           plusw2	equ	0xFDB
 19378                           fsr2h	equ	0xFDA
 19379                           fsr2l	equ	0xFD9
 19380                           status	equ	0xFD8
 19381                           
 19382 ;; *************** function _getFlatPieces *****************
 19383 ;; Defined at:
 19384 ;;		line 336 in file "operationMode.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;  dietType        2    0[COMRAM] unsigned int 
 19387 ;;  foodType        2    2[COMRAM] unsigned int 
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;  returnValue     2    6[COMRAM] unsigned int 
 19390 ;; Return value:  Size  Location     Type
 19391 ;;                  2    0[COMRAM] unsigned int 
 19392 ;; Registers used:
 19393 ;;		wreg, status,2, status,0
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19401 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;Total ram usage:        8 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; This function calls:
 19406 ;;		Nothing
 19407 ;; This function is called by:
 19408 ;;		_mainOperation
 19409 ;; This function uses a non-reentrant model
 19410 ;;
 19411                           
 19412                           	psect	text41
 19413  00AB92                     __ptext41:
 19414                           	opt stack 0
 19415  00AB92                     _getFlatPieces:
 19416                           	opt stack 29
 19417                           
 19418                           ;operationMode.c: 337: unsigned int returnValue = 0;
 19419                           
 19420                           ;incstack = 0
 19421  00AB92  0E00               	movlw	0
 19422  00AB94  6E08               	movwf	getFlatPieces@returnValue+1,c
 19423  00AB96  0E00               	movlw	0
 19424  00AB98  6E07               	movwf	getFlatPieces@returnValue,c
 19425                           
 19426                           ;operationMode.c: 339: switch(dietType){
 19427  00AB9A  D07B               	goto	l323
 19428  00AB9C                     
 19429                           ;operationMode.c: 342: if (foodType == 0){
 19430  00AB9C  5003               	movf	getFlatPieces@foodType,w,c
 19431  00AB9E  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19432  00ABA0  A4D8               	btfss	status,2,c
 19433  00ABA2  D004               	goto	l325
 19434  00ABA4                     u9980:
 19435                           
 19436                           ;operationMode.c: 343: returnValue = 1;
 19437  00ABA4  0E00               	movlw	0
 19438  00ABA6  6E08               	movwf	getFlatPieces@returnValue+1,c
 19439  00ABA8  0E01               	movlw	1
 19440  00ABAA  D020               	goto	L158
 19441  00ABAC                     l325:
 19442                           
 19443                           ;operationMode.c: 345: else if (foodType == 1){
 19444  00ABAC  0403               	decf	getFlatPieces@foodType,w,c
 19445  00ABAE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19446  00ABB0  A4D8               	btfss	status,2,c
 19447  00ABB2  D09D               	goto	l328
 19448  00ABB4                     u9990:
 19449                           
 19450                           ;operationMode.c: 346: returnValue = 2;
 19451  00ABB4  0E00               	movlw	0
 19452  00ABB6  6E08               	movwf	getFlatPieces@returnValue+1,c
 19453  00ABB8  0E02               	movlw	2
 19454  00ABBA  D018               	goto	L158
 19455  00ABBC                     
 19456                           ;operationMode.c: 351: if (foodType == 3){
 19457  00ABBC  0E03               	movlw	3
 19458  00ABBE  1803               	xorwf	getFlatPieces@foodType,w,c
 19459  00ABC0  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19460  00ABC2  B4D8               	btfsc	status,2,c
 19461  00ABC4  D7EF               	goto	u9980
 19462                           
 19463                           ;operationMode.c: 354: else if (foodType == 4){
 19464                           
 19465                           ;operationMode.c: 353: }
 19466                           
 19467                           ;operationMode.c: 352: returnValue = 1;
 19468  00ABC6  0E04               	movlw	4
 19469  00ABC8  1803               	xorwf	getFlatPieces@foodType,w,c
 19470  00ABCA  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19471  00ABCC  B4D8               	btfsc	status,2,c
 19472  00ABCE  D7F2               	goto	u9990
 19473                           
 19474                           ;operationMode.c: 357: else if (foodType == 6){
 19475                           
 19476                           ;operationMode.c: 356: }
 19477                           
 19478                           ;operationMode.c: 355: returnValue = 2;
 19479  00ABD0  0E06               	movlw	6
 19480  00ABD2  1803               	xorwf	getFlatPieces@foodType,w,c
 19481  00ABD4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19482  00ABD6  B4D8               	btfsc	status,2,c
 19483  00ABD8  D7E5               	goto	u9980
 19484  00ABDA                     l334:
 19485                           
 19486                           ;operationMode.c: 360: else if (foodType == 7){
 19487  00ABDA  0E07               	movlw	7
 19488  00ABDC  1803               	xorwf	getFlatPieces@foodType,w,c
 19489  00ABDE  D7E7               	goto	L171
 19490  00ABE0                     
 19491                           ;operationMode.c: 366: if (foodType == 3){
 19492  00ABE0  0E03               	movlw	3
 19493  00ABE2  1803               	xorwf	getFlatPieces@foodType,w,c
 19494  00ABE4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19495  00ABE6  A4D8               	btfss	status,2,c
 19496  00ABE8  D003               	goto	l338
 19497  00ABEA  D7DC               	goto	u9980
 19498  00ABEC                     L158:
 19499  00ABEC  6E07               	movwf	getFlatPieces@returnValue,c
 19500                           
 19501                           ;operationMode.c: 368: }
 19502  00ABEE  D07F               	goto	l328
 19503  00ABF0                     l338:
 19504                           
 19505                           ;operationMode.c: 369: else if (foodType == 4){
 19506  00ABF0  0E04               	movlw	4
 19507  00ABF2  1803               	xorwf	getFlatPieces@foodType,w,c
 19508  00ABF4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19509  00ABF6  B4D8               	btfsc	status,2,c
 19510  00ABF8  D7D5               	goto	u9980
 19511                           
 19512                           ;operationMode.c: 372: else if (foodType == 5){
 19513                           
 19514                           ;operationMode.c: 371: }
 19515                           
 19516                           ;operationMode.c: 370: returnValue = 1;
 19517  00ABFA  0E05               	movlw	5
 19518  00ABFC  1803               	xorwf	getFlatPieces@foodType,w,c
 19519  00ABFE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19520  00AC00  B4D8               	btfsc	status,2,c
 19521  00AC02  D7D0               	goto	u9980
 19522                           
 19523                           ;operationMode.c: 375: else if (foodType == 6){
 19524                           
 19525                           ;operationMode.c: 374: }
 19526                           
 19527                           ;operationMode.c: 373: returnValue = 1;
 19528  00AC04  0E06               	movlw	6
 19529  00AC06  1803               	xorwf	getFlatPieces@foodType,w,c
 19530  00AC08  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19531  00AC0A  B4D8               	btfsc	status,2,c
 19532  00AC0C  D7D3               	goto	u9990
 19533                           
 19534                           ;operationMode.c: 377: }
 19535                           
 19536                           ;operationMode.c: 376: returnValue = 2;
 19537  00AC0E  D7E5               	goto	l334
 19538  00AC10                     
 19539                           ;operationMode.c: 384: if (foodType == 8){
 19540  00AC10  0E08               	movlw	8
 19541  00AC12  1803               	xorwf	getFlatPieces@foodType,w,c
 19542  00AC14  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19543  00AC16  A4D8               	btfss	status,2,c
 19544  00AC18  D022               	goto	l364
 19545  00AC1A  D7C4               	goto	u9980
 19546  00AC1C                     
 19547                           ;operationMode.c: 393: if (foodType == 8){
 19548  00AC1C  0E08               	movlw	8
 19549  00AC1E  1803               	xorwf	getFlatPieces@foodType,w,c
 19550  00AC20  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19551  00AC22  B4D8               	btfsc	status,2,c
 19552  00AC24  D7C7               	goto	u9990
 19553  00AC26                     
 19554                           ;operationMode.c: 396: else if (foodType == 11){
 19555  00AC26  0E0B               	movlw	11
 19556  00AC28  D7D9               	goto	L164
 19557  00AC2A                     
 19558                           ;operationMode.c: 402: if (foodType == 8){
 19559  00AC2A  0E08               	movlw	8
 19560  00AC2C  1803               	xorwf	getFlatPieces@foodType,w,c
 19561  00AC2E  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19562  00AC30  B4D8               	btfsc	status,2,c
 19563  00AC32  D7B8               	goto	u9980
 19564                           
 19565                           ;operationMode.c: 405: else if (foodType == 9){
 19566                           
 19567                           ;operationMode.c: 404: }
 19568                           
 19569                           ;operationMode.c: 403: returnValue = 1;
 19570  00AC34  0E09               	movlw	9
 19571  00AC36  1803               	xorwf	getFlatPieces@foodType,w,c
 19572  00AC38  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19573  00AC3A  B4D8               	btfsc	status,2,c
 19574  00AC3C  D7B3               	goto	u9980
 19575                           
 19576                           ;operationMode.c: 408: else if (foodType == 10){
 19577                           
 19578                           ;operationMode.c: 407: }
 19579                           
 19580                           ;operationMode.c: 406: returnValue = 1;
 19581  00AC3E  0E0A               	movlw	10
 19582  00AC40  1803               	xorwf	getFlatPieces@foodType,w,c
 19583  00AC42  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19584  00AC44  B4D8               	btfsc	status,2,c
 19585  00AC46  D7B6               	goto	u9990
 19586                           
 19587                           ;operationMode.c: 411: else if (foodType == 11){
 19588                           
 19589                           ;operationMode.c: 410: }
 19590                           
 19591                           ;operationMode.c: 409: returnValue = 2;
 19592  00AC48  0E0B               	movlw	11
 19593  00AC4A                     L160:
 19594  00AC4A  1803               	xorwf	getFlatPieces@foodType,w,c
 19595  00AC4C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19596  00AC4E  A4D8               	btfss	status,2,c
 19597  00AC50  D04E               	goto	l328
 19598  00AC52  D7A8               	goto	u9980
 19599  00AC54                     
 19600                           ;operationMode.c: 417: if (foodType == 8){
 19601  00AC54  0E08               	movlw	8
 19602  00AC56  1803               	xorwf	getFlatPieces@foodType,w,c
 19603  00AC58  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19604  00AC5A  B4D8               	btfsc	status,2,c
 19605  00AC5C  D7AB               	goto	u9990
 19606  00AC5E                     l364:
 19607                           
 19608                           ;operationMode.c: 420: else if (foodType == 9){
 19609  00AC5E  0E09               	movlw	9
 19610  00AC60  D7BD               	goto	L164
 19611  00AC62                     
 19612                           ;operationMode.c: 426: if (foodType == 8){
 19613  00AC62  0E08               	movlw	8
 19614  00AC64  1803               	xorwf	getFlatPieces@foodType,w,c
 19615  00AC66  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19616  00AC68  B4D8               	btfsc	status,2,c
 19617  00AC6A  D79C               	goto	u9980
 19618                           
 19619                           ;operationMode.c: 429: else if (foodType == 9){
 19620                           
 19621                           ;operationMode.c: 428: }
 19622                           
 19623                           ;operationMode.c: 427: returnValue = 1;
 19624  00AC6C  0E09               	movlw	9
 19625  00AC6E  1803               	xorwf	getFlatPieces@foodType,w,c
 19626  00AC70  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19627  00AC72  B4D8               	btfsc	status,2,c
 19628  00AC74  D797               	goto	u9980
 19629                           
 19630                           ;operationMode.c: 432: else if (foodType == 10){
 19631                           
 19632                           ;operationMode.c: 431: }
 19633                           
 19634                           ;operationMode.c: 430: returnValue = 1;
 19635  00AC76  0E0A               	movlw	10
 19636  00AC78  1803               	xorwf	getFlatPieces@foodType,w,c
 19637  00AC7A  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19638  00AC7C  A4D8               	btfss	status,2,c
 19639  00AC7E  D7D3               	goto	l352
 19640  00AC80  D791               	goto	u9980
 19641  00AC82                     
 19642                           ;operationMode.c: 447: if (foodType == 12){
 19643  00AC82  0E0C               	movlw	12
 19644  00AC84  D7AB               	goto	L164
 19645  00AC86                     
 19646                           ;operationMode.c: 459: if (foodType == 12){
 19647  00AC86  0E0C               	movlw	12
 19648  00AC88  D7E0               	goto	L160
 19649  00AC8A                     
 19650                           ;operationMode.c: 464: returnValue = 0;
 19651  00AC8A  0E00               	movlw	0
 19652  00AC8C  6E08               	movwf	getFlatPieces@returnValue+1,c
 19653  00AC8E  0E00               	movlw	0
 19654  00AC90  D7AD               	goto	L158
 19655  00AC92                     l323:
 19656  00AC92  C001  F005         	movff	getFlatPieces@dietType,??_getFlatPieces
 19657  00AC96  C002  F006         	movff	getFlatPieces@dietType+1,??_getFlatPieces+1
 19658                           
 19659                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19660                           ; Switch size 1, requested type "space"
 19661                           ; Number of cases is 1, Range of values is 0 to 0
 19662                           ; switch strategies available:
 19663                           ; Name         Instructions Cycles
 19664                           ; simple_byte            4     3 (average)
 19665                           ;	Chosen strategy is simple_byte
 19666  00AC9A  5006               	movf	??_getFlatPieces+1,w,c
 19667  00AC9C  0A00               	xorlw	0	; case 0
 19668  00AC9E  A4D8               	btfss	status,2,c
 19669  00ACA0  D7F4               	goto	l383
 19670                           
 19671                           ; Switch size 1, requested type "space"
 19672                           ; Number of cases is 12, Range of values is 1 to 17
 19673                           ; switch strategies available:
 19674                           ; Name         Instructions Cycles
 19675                           ; simple_byte           37    19 (average)
 19676                           ;	Chosen strategy is simple_byte
 19677  00ACA2  5005               	movf	??_getFlatPieces,w,c
 19678  00ACA4  0A01               	xorlw	1	; case 1
 19679  00ACA6  B4D8               	btfsc	status,2,c
 19680  00ACA8  D779               	goto	l324
 19681  00ACAA  0A02               	xorlw	2	; case 3
 19682  00ACAC  B4D8               	btfsc	status,2,c
 19683  00ACAE  D786               	goto	l329
 19684  00ACB0  0A06               	xorlw	6	; case 5
 19685  00ACB2  B4D8               	btfsc	status,2,c
 19686  00ACB4  D795               	goto	l337
 19687  00ACB6  0A03               	xorlw	3	; case 6
 19688  00ACB8  B4D8               	btfsc	status,2,c
 19689  00ACBA  D7AA               	goto	l347
 19690  00ACBC  0A0E               	xorlw	14	; case 8
 19691  00ACBE  B4D8               	btfsc	status,2,c
 19692  00ACC0  D7AD               	goto	l351
 19693  00ACC2  0A02               	xorlw	2	; case 10
 19694  00ACC4  B4D8               	btfsc	status,2,c
 19695  00ACC6  D7B1               	goto	l355
 19696  00ACC8  0A01               	xorlw	1	; case 11
 19697  00ACCA  B4D8               	btfsc	status,2,c
 19698  00ACCC  D7C3               	goto	l363
 19699  00ACCE  0A07               	xorlw	7	; case 12
 19700  00ACD0  B4D8               	btfsc	status,2,c
 19701  00ACD2  D7C7               	goto	l367
 19702  00ACD4  0A01               	xorlw	1	; case 13
 19703  00ACD6  B4D8               	btfsc	status,2,c
 19704  00ACD8  D7D6               	goto	l381
 19705  00ACDA  0A03               	xorlw	3	; case 14
 19706  00ACDC  B4D8               	btfsc	status,2,c
 19707  00ACDE  D7D1               	goto	l377
 19708  00ACE0  0A01               	xorlw	1	; case 15
 19709  00ACE2  B4D8               	btfsc	status,2,c
 19710  00ACE4  D7D0               	goto	l381
 19711  00ACE6  0A1E               	xorlw	30	; case 17
 19712  00ACE8  B4D8               	btfsc	status,2,c
 19713  00ACEA  D7CD               	goto	l381
 19714  00ACEC  D7CE               	goto	l383
 19715  00ACEE                     l328:
 19716                           
 19717                           ;operationMode.c: 467: return returnValue;
 19718  00ACEE  C007  F001         	movff	getFlatPieces@returnValue,?_getFlatPieces
 19719  00ACF2  C008  F002         	movff	getFlatPieces@returnValue+1,?_getFlatPieces+1
 19720  00ACF6  0012               	return		;funcret
 19721  00ACF8                     __end_of_getFlatPieces:
 19722                           	opt stack 0
 19723                           tblptru	equ	0xFF8
 19724                           tblptrh	equ	0xFF7
 19725                           tblptrl	equ	0xFF6
 19726                           tablat	equ	0xFF5
 19727                           prodh	equ	0xFF4
 19728                           prodl	equ	0xFF3
 19729                           postinc0	equ	0xFEE
 19730                           wreg	equ	0xFE8
 19731                           postinc1	equ	0xFE6
 19732                           postdec1	equ	0xFE5
 19733                           plusw1	equ	0xFE3
 19734                           fsr1h	equ	0xFE2
 19735                           fsr1l	equ	0xFE1
 19736                           indf2	equ	0xFDF
 19737                           postinc2	equ	0xFDE
 19738                           postdec2	equ	0xFDD
 19739                           plusw2	equ	0xFDB
 19740                           fsr2h	equ	0xFDA
 19741                           fsr2l	equ	0xFD9
 19742                           status	equ	0xFD8
 19743                           
 19744 ;; *************** function _findDrawerIndex *****************
 19745 ;; Defined at:
 19746 ;;		line 187 in file "operationMode.c"
 19747 ;; Parameters:    Size  Location     Type
 19748 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 19749 ;;		 -> mainOperation@drawerTable(16), 
 19750 ;;  sortedDrawer    2    2[COMRAM] unsigned int 
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;  i               2    8[COMRAM] unsigned int 
 19753 ;;  returnValue     2    6[COMRAM] unsigned int 
 19754 ;; Return value:  Size  Location     Type
 19755 ;;                  2    0[COMRAM] unsigned int 
 19756 ;; Registers used:
 19757 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19758 ;; Tracked objects:
 19759 ;;		On entry : 0/0
 19760 ;;		On exit  : 0/0
 19761 ;;		Unchanged: 0/0
 19762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19764 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19767 ;;Total ram usage:       10 bytes
 19768 ;; Hardware stack levels used:    1
 19769 ;; This function calls:
 19770 ;;		Nothing
 19771 ;; This function is called by:
 19772 ;;		_mainOperation
 19773 ;; This function uses a non-reentrant model
 19774 ;;
 19775                           
 19776                           	psect	text42
 19777  009B0E                     __ptext42:
 19778                           	opt stack 0
 19779  009B0E                     _findDrawerIndex:
 19780                           	opt stack 29
 19781                           
 19782                           ;operationMode.c: 188: unsigned int returnValue = 0;
 19783                           
 19784                           ;incstack = 0
 19785  009B0E  0E00               	movlw	0
 19786  009B10  6E08               	movwf	findDrawerIndex@returnValue+1,c
 19787  009B12  0E00               	movlw	0
 19788  009B14  6E07               	movwf	findDrawerIndex@returnValue,c
 19789                           
 19790                           ;operationMode.c: 189: unsigned int i = 0;
 19791  009B16  0E00               	movlw	0
 19792  009B18  6E0A               	movwf	findDrawerIndex@i+1,c
 19793  009B1A  0E00               	movlw	0
 19794  009B1C  6E09               	movwf	findDrawerIndex@i,c
 19795                           
 19796                           ;operationMode.c: 191: for (i=0; i<8; i++){
 19797  009B1E  0E00               	movlw	0
 19798  009B20  6E0A               	movwf	findDrawerIndex@i+1,c
 19799  009B22  0E00               	movlw	0
 19800  009B24  6E09               	movwf	findDrawerIndex@i,c
 19801  009B26  500A               	movf	findDrawerIndex@i+1,w,c
 19802  009B28  E11D               	bnz	l254
 19803  009B2A  D018               	goto	L165
 19804  009B2C                     
 19805                           ;operationMode.c: 192: if(drawerTable[i] == sortedDrawerValue){
 19806  009B2C  90D8               	bcf	status,0,c
 19807  009B2E  3409               	rlcf	findDrawerIndex@i,w,c
 19808  009B30  6ED9               	movwf	fsr2l,c
 19809  009B32  340A               	rlcf	findDrawerIndex@i+1,w,c
 19810  009B34  6EDA               	movwf	fsr2h,c
 19811  009B36  5001               	movf	findDrawerIndex@drawerTable,w,c
 19812  009B38  26D9               	addwf	fsr2l,f,c
 19813  009B3A  5002               	movf	findDrawerIndex@drawerTable+1,w,c
 19814  009B3C  22DA               	addwfc	fsr2h,f,c
 19815  009B3E  5003               	movf	findDrawerIndex@sortedDrawerValue,w,c
 19816  009B40  18DE               	xorwf	postinc2,w,c
 19817  009B42  E108               	bnz	l8194
 19818  009B44  5004               	movf	findDrawerIndex@sortedDrawerValue+1,w,c
 19819  009B46  18DE               	xorwf	postinc2,w,c
 19820  009B48  A4D8               	btfss	status,2,c
 19821  009B4A  D004               	goto	l255
 19822                           
 19823                           ;operationMode.c: 193: returnValue = i;
 19824  009B4C  C009  F007         	movff	findDrawerIndex@i,findDrawerIndex@returnValue
 19825  009B50  C00A  F008         	movff	findDrawerIndex@i+1,findDrawerIndex@returnValue+1
 19826  009B54                     l255:
 19827  009B54                     l8194:
 19828  009B54  4A09               	infsnz	findDrawerIndex@i,f,c
 19829  009B56  2A0A               	incf	findDrawerIndex@i+1,f,c
 19830  009B58  500A               	movf	findDrawerIndex@i+1,w,c
 19831  009B5A  E104               	bnz	u9680
 19832  009B5C                     L165:
 19833  009B5C  0E08               	movlw	8
 19834  009B5E  5C09               	subwf	findDrawerIndex@i,w,c
 19835  009B60  A0D8               	btfss	status,0,c
 19836  009B62  D7E4               	goto	l253
 19837  009B64                     u9680:
 19838  009B64                     l254:
 19839                           
 19840                           ;operationMode.c: 194: }
 19841                           ;operationMode.c: 195: }
 19842                           ;operationMode.c: 196: return returnValue;
 19843  009B64  C007  F001         	movff	findDrawerIndex@returnValue,?_findDrawerIndex
 19844  009B68  C008  F002         	movff	findDrawerIndex@returnValue+1,?_findDrawerIndex+1
 19845  009B6C  0012               	return		;funcret
 19846  009B6E                     __end_of_findDrawerIndex:
 19847                           	opt stack 0
 19848                           tblptru	equ	0xFF8
 19849                           tblptrh	equ	0xFF7
 19850                           tblptrl	equ	0xFF6
 19851                           tablat	equ	0xFF5
 19852                           prodh	equ	0xFF4
 19853                           prodl	equ	0xFF3
 19854                           postinc0	equ	0xFEE
 19855                           wreg	equ	0xFE8
 19856                           postinc1	equ	0xFE6
 19857                           postdec1	equ	0xFE5
 19858                           plusw1	equ	0xFE3
 19859                           fsr1h	equ	0xFE2
 19860                           fsr1l	equ	0xFE1
 19861                           indf2	equ	0xFDF
 19862                           postinc2	equ	0xFDE
 19863                           postdec2	equ	0xFDD
 19864                           plusw2	equ	0xFDB
 19865                           fsr2h	equ	0xFDA
 19866                           fsr2l	equ	0xFD9
 19867                           status	equ	0xFD8
 19868                           
 19869 ;; *************** function _distributePieces *****************
 19870 ;; Defined at:
 19871 ;;		line 935 in file "operationMode.c"
 19872 ;; Parameters:    Size  Location     Type
 19873 ;;  roundPieces     2   11[COMRAM] unsigned int 
 19874 ;;  flatPieces      2   13[COMRAM] unsigned int 
 19875 ;;  longPieces      2   15[COMRAM] unsigned int 
 19876 ;; Auto vars:     Size  Location     Type
 19877 ;;		None
 19878 ;; Return value:  Size  Location     Type
 19879 ;;                  1    wreg      void 
 19880 ;; Registers used:
 19881 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19882 ;; Tracked objects:
 19883 ;;		On entry : 0/0
 19884 ;;		On exit  : 0/0
 19885 ;;		Unchanged: 0/0
 19886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19887 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19889 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19890 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19891 ;;Total ram usage:        8 bytes
 19892 ;; Hardware stack levels used:    1
 19893 ;; Hardware stack levels required when called:    2
 19894 ;; This function calls:
 19895 ;;		_distributeFlat
 19896 ;;		_distributeLong
 19897 ;;		_distributeRound
 19898 ;; This function is called by:
 19899 ;;		_mainOperation
 19900 ;; This function uses a non-reentrant model
 19901 ;;
 19902                           
 19903                           	psect	text43
 19904  00ACF8                     __ptext43:
 19905                           	opt stack 0
 19906  00ACF8                     _distributePieces:
 19907                           	opt stack 27
 19908                           
 19909                           ;operationMode.c: 936: switch(roundPieces){
 19910                           
 19911                           ;incstack = 0
 19912  00ACF8  D025               	goto	l611
 19913  00ACFA                     
 19914                           ;operationMode.c: 938: distributeRound(1);
 19915  00ACFA  0E00               	movlw	0
 19916  00ACFC  6E08               	movwf	distributeRound@count+1,c
 19917  00ACFE  0E01               	movlw	1
 19918  00AD00  6E07               	movwf	distributeRound@count,c
 19919  00AD02  EC1B  F050         	call	_distributeRound	;wreg free
 19920                           
 19921                           ;operationMode.c: 939: _delay((unsigned long)((2000)*(40000000/4000.0)));
 19922  00AD06  0E66               	movlw	102
 19923  00AD08  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 19924  00AD0A  0E76               	movlw	118
 19925  00AD0C  6E12               	movwf	??_distributePieces& (0+255),c
 19926  00AD0E  0EC1               	movlw	193
 19927  00AD10                     u15287:
 19928  00AD10  2EE8               	decfsz	wreg,f,c
 19929  00AD12  D7FE               	bra	u15287
 19930  00AD14  2E12               	decfsz	??_distributePieces& (0+255),f,c
 19931  00AD16  D7FC               	bra	u15287
 19932  00AD18  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 19933  00AD1A  D7FA               	bra	u15287
 19934  00AD1C  D011               	goto	L166
 19935  00AD1E                     
 19936                           ;operationMode.c: 942: distributeRound(2);
 19937  00AD1E  0E00               	movlw	0
 19938  00AD20  6E08               	movwf	distributeRound@count+1,c
 19939  00AD22  0E02               	movlw	2
 19940  00AD24  6E07               	movwf	distributeRound@count,c
 19941  00AD26  EC1B  F050         	call	_distributeRound	;wreg free
 19942                           
 19943                           ;operationMode.c: 943: _delay((unsigned long)((2000)*(40000000/4000.0)));
 19944  00AD2A  0E66               	movlw	102
 19945  00AD2C  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 19946  00AD2E  0E76               	movlw	118
 19947  00AD30  6E12               	movwf	??_distributePieces& (0+255),c
 19948  00AD32  0EC1               	movlw	193
 19949  00AD34                     u15297:
 19950  00AD34  2EE8               	decfsz	wreg,f,c
 19951  00AD36  D7FE               	bra	u15297
 19952  00AD38  2E12               	decfsz	??_distributePieces& (0+255),f,c
 19953  00AD3A  D7FC               	bra	u15297
 19954  00AD3C  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 19955  00AD3E  D7FA               	bra	u15297
 19956  00AD40                     L166:
 19957  00AD40  F000               	nop	
 19958                           
 19959                           ;operationMode.c: 947: }
 19960                           
 19961                           ;operationMode.c: 946: break;
 19962                           
 19963                           ;operationMode.c: 945: default:
 19964                           
 19965                           ;operationMode.c: 944: break;
 19966  00AD42  D035               	goto	l616
 19967  00AD44                     l611:
 19968  00AD44  C00C  F012         	movff	distributePieces@roundPieces,??_distributePieces
 19969  00AD48  C00D  F013         	movff	distributePieces@roundPieces+1,??_distributePieces+1
 19970                           
 19971                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19972                           ; Switch size 1, requested type "space"
 19973                           ; Number of cases is 1, Range of values is 0 to 0
 19974                           ; switch strategies available:
 19975                           ; Name         Instructions Cycles
 19976                           ; simple_byte            4     3 (average)
 19977                           ;	Chosen strategy is simple_byte
 19978  00AD4C  5013               	movf	??_distributePieces+1,w,c
 19979  00AD4E  0A00               	xorlw	0	; case 0
 19980  00AD50  A4D8               	btfss	status,2,c
 19981  00AD52  D02D               	goto	l616
 19982                           
 19983                           ; Switch size 1, requested type "space"
 19984                           ; Number of cases is 2, Range of values is 1 to 2
 19985                           ; switch strategies available:
 19986                           ; Name         Instructions Cycles
 19987                           ; simple_byte            7     4 (average)
 19988                           ;	Chosen strategy is simple_byte
 19989  00AD54  5012               	movf	??_distributePieces,w,c
 19990  00AD56  0A01               	xorlw	1	; case 1
 19991  00AD58  B4D8               	btfsc	status,2,c
 19992  00AD5A  D7CF               	goto	l612
 19993  00AD5C  0A03               	xorlw	3	; case 2
 19994  00AD5E  B4D8               	btfsc	status,2,c
 19995  00AD60  D7DE               	goto	l614
 19996                           
 19997                           ;operationMode.c: 948: switch(flatPieces){
 19998  00AD62  D025               	goto	l616
 19999  00AD64                     
 20000                           ;operationMode.c: 950: distributeFlat(1);
 20001  00AD64  0E00               	movlw	0
 20002  00AD66  6E08               	movwf	distributeFlat@count+1,c
 20003  00AD68  0E01               	movlw	1
 20004  00AD6A  6E07               	movwf	distributeFlat@count,c
 20005  00AD6C  EC7B  F04F         	call	_distributeFlat	;wreg free
 20006                           
 20007                           ;operationMode.c: 951: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20008  00AD70  0E66               	movlw	102
 20009  00AD72  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20010  00AD74  0E76               	movlw	118
 20011  00AD76  6E12               	movwf	??_distributePieces& (0+255),c
 20012  00AD78  0EC1               	movlw	193
 20013  00AD7A                     u15307:
 20014  00AD7A  2EE8               	decfsz	wreg,f,c
 20015  00AD7C  D7FE               	bra	u15307
 20016  00AD7E  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20017  00AD80  D7FC               	bra	u15307
 20018  00AD82  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20019  00AD84  D7FA               	bra	u15307
 20020  00AD86  D011               	goto	L167
 20021  00AD88                     
 20022                           ;operationMode.c: 954: distributeFlat(2);
 20023  00AD88  0E00               	movlw	0
 20024  00AD8A  6E08               	movwf	distributeFlat@count+1,c
 20025  00AD8C  0E02               	movlw	2
 20026  00AD8E  6E07               	movwf	distributeFlat@count,c
 20027  00AD90  EC7B  F04F         	call	_distributeFlat	;wreg free
 20028                           
 20029                           ;operationMode.c: 955: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20030  00AD94  0E66               	movlw	102
 20031  00AD96  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20032  00AD98  0E76               	movlw	118
 20033  00AD9A  6E12               	movwf	??_distributePieces& (0+255),c
 20034  00AD9C  0EC1               	movlw	193
 20035  00AD9E                     u15317:
 20036  00AD9E  2EE8               	decfsz	wreg,f,c
 20037  00ADA0  D7FE               	bra	u15317
 20038  00ADA2  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20039  00ADA4  D7FC               	bra	u15317
 20040  00ADA6  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20041  00ADA8  D7FA               	bra	u15317
 20042  00ADAA                     L167:
 20043  00ADAA  F000               	nop	
 20044                           
 20045                           ;operationMode.c: 959: }
 20046                           
 20047                           ;operationMode.c: 958: break;
 20048                           
 20049                           ;operationMode.c: 957: default:
 20050                           
 20051                           ;operationMode.c: 956: break;
 20052  00ADAC  D049               	goto	l621
 20053  00ADAE                     l616:
 20054  00ADAE  C00E  F012         	movff	distributePieces@flatPieces,??_distributePieces
 20055  00ADB2  C00F  F013         	movff	distributePieces@flatPieces+1,??_distributePieces+1
 20056                           
 20057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20058                           ; Switch size 1, requested type "space"
 20059                           ; Number of cases is 1, Range of values is 0 to 0
 20060                           ; switch strategies available:
 20061                           ; Name         Instructions Cycles
 20062                           ; simple_byte            4     3 (average)
 20063                           ;	Chosen strategy is simple_byte
 20064  00ADB6  5013               	movf	??_distributePieces+1,w,c
 20065  00ADB8  0A00               	xorlw	0	; case 0
 20066  00ADBA  A4D8               	btfss	status,2,c
 20067  00ADBC  D041               	goto	l621
 20068                           
 20069                           ; Switch size 1, requested type "space"
 20070                           ; Number of cases is 2, Range of values is 1 to 2
 20071                           ; switch strategies available:
 20072                           ; Name         Instructions Cycles
 20073                           ; simple_byte            7     4 (average)
 20074                           ;	Chosen strategy is simple_byte
 20075  00ADBE  5012               	movf	??_distributePieces,w,c
 20076  00ADC0  0A01               	xorlw	1	; case 1
 20077  00ADC2  B4D8               	btfsc	status,2,c
 20078  00ADC4  D7CF               	goto	l617
 20079  00ADC6  0A03               	xorlw	3	; case 2
 20080  00ADC8  B4D8               	btfsc	status,2,c
 20081  00ADCA  D7DE               	goto	l619
 20082                           
 20083                           ;operationMode.c: 960: switch(longPieces){
 20084  00ADCC  D039               	goto	l621
 20085  00ADCE                     
 20086                           ;operationMode.c: 962: distributeLong(1);
 20087  00ADCE  0E00               	movlw	0
 20088  00ADD0  6E08               	movwf	distributeLong@count+1,c
 20089  00ADD2  0E01               	movlw	1
 20090  00ADD4  6E07               	movwf	distributeLong@count,c
 20091  00ADD6  ECCB  F04F         	call	_distributeLong	;wreg free
 20092                           
 20093                           ;operationMode.c: 963: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20094  00ADDA  0E66               	movlw	102
 20095  00ADDC  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20096  00ADDE  0E76               	movlw	118
 20097  00ADE0  6E12               	movwf	??_distributePieces& (0+255),c
 20098  00ADE2  0EC1               	movlw	193
 20099  00ADE4                     u15327:
 20100  00ADE4  2EE8               	decfsz	wreg,f,c
 20101  00ADE6  D7FE               	bra	u15327
 20102  00ADE8  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20103  00ADEA  D7FC               	bra	u15327
 20104  00ADEC  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20105  00ADEE  D7FA               	bra	u15327
 20106  00ADF0  F000               	nop	
 20107                           
 20108                           ;operationMode.c: 964: break;
 20109  00ADF2  0012               	return	
 20110  00ADF4                     
 20111                           ;operationMode.c: 966: distributeLong(2);
 20112  00ADF4  0E00               	movlw	0
 20113  00ADF6  6E08               	movwf	distributeLong@count+1,c
 20114  00ADF8  0E02               	movlw	2
 20115  00ADFA  6E07               	movwf	distributeLong@count,c
 20116  00ADFC  ECCB  F04F         	call	_distributeLong	;wreg free
 20117                           
 20118                           ;operationMode.c: 967: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20119  00AE00  0E66               	movlw	102
 20120  00AE02  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20121  00AE04  0E76               	movlw	118
 20122  00AE06  6E12               	movwf	??_distributePieces& (0+255),c
 20123  00AE08  0EC1               	movlw	193
 20124  00AE0A                     u15337:
 20125  00AE0A  2EE8               	decfsz	wreg,f,c
 20126  00AE0C  D7FE               	bra	u15337
 20127  00AE0E  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20128  00AE10  D7FC               	bra	u15337
 20129  00AE12  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20130  00AE14  D7FA               	bra	u15337
 20131  00AE16  F000               	nop	
 20132                           
 20133                           ;operationMode.c: 968: break;
 20134  00AE18  0012               	return	
 20135  00AE1A                     
 20136                           ;operationMode.c: 970: distributeLong(3);
 20137  00AE1A  0E00               	movlw	0
 20138  00AE1C  6E08               	movwf	distributeLong@count+1,c
 20139  00AE1E  0E03               	movlw	3
 20140  00AE20  6E07               	movwf	distributeLong@count,c
 20141  00AE22  ECCB  F04F         	call	_distributeLong	;wreg free
 20142                           
 20143                           ;operationMode.c: 971: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20144  00AE26  0E66               	movlw	102
 20145  00AE28  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20146  00AE2A  0E76               	movlw	118
 20147  00AE2C  6E12               	movwf	??_distributePieces& (0+255),c
 20148  00AE2E  0EC1               	movlw	193
 20149  00AE30                     u15347:
 20150  00AE30  2EE8               	decfsz	wreg,f,c
 20151  00AE32  D7FE               	bra	u15347
 20152  00AE34  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20153  00AE36  D7FC               	bra	u15347
 20154  00AE38  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20155  00AE3A  D7FA               	bra	u15347
 20156  00AE3C  F000               	nop	
 20157                           
 20158                           ;operationMode.c: 975: }
 20159                           
 20160                           ;operationMode.c: 974: break;
 20161                           
 20162                           ;operationMode.c: 973: default:
 20163                           
 20164                           ;operationMode.c: 972: break;
 20165  00AE3E  0012               	return	
 20166  00AE40                     l621:
 20167  00AE40  C010  F012         	movff	distributePieces@longPieces,??_distributePieces
 20168  00AE44  C011  F013         	movff	distributePieces@longPieces+1,??_distributePieces+1
 20169                           
 20170                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20171                           ; Switch size 1, requested type "space"
 20172                           ; Number of cases is 1, Range of values is 0 to 0
 20173                           ; switch strategies available:
 20174                           ; Name         Instructions Cycles
 20175                           ; simple_byte            4     3 (average)
 20176                           ;	Chosen strategy is simple_byte
 20177  00AE48  5013               	movf	??_distributePieces+1,w,c
 20178  00AE4A  0A00               	xorlw	0	; case 0
 20179  00AE4C  A4D8               	btfss	status,2,c
 20180  00AE4E  0012               	return	
 20181                           
 20182                           ; Switch size 1, requested type "space"
 20183                           ; Number of cases is 3, Range of values is 1 to 3
 20184                           ; switch strategies available:
 20185                           ; Name         Instructions Cycles
 20186                           ; simple_byte           10     6 (average)
 20187                           ;	Chosen strategy is simple_byte
 20188  00AE50  5012               	movf	??_distributePieces,w,c
 20189  00AE52  0A01               	xorlw	1	; case 1
 20190  00AE54  B4D8               	btfsc	status,2,c
 20191  00AE56  D7BB               	goto	l622
 20192  00AE58  0A03               	xorlw	3	; case 2
 20193  00AE5A  B4D8               	btfsc	status,2,c
 20194  00AE5C  D7CB               	goto	l624
 20195  00AE5E  0A01               	xorlw	1	; case 3
 20196  00AE60  A4D8               	btfss	status,2,c
 20197  00AE62  0012               	return	
 20198  00AE64  D7DA               	goto	l625
 20199  00AE66                     __end_of_distributePieces:
 20200                           	opt stack 0
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           postinc0	equ	0xFEE
 20208                           wreg	equ	0xFE8
 20209                           postinc1	equ	0xFE6
 20210                           postdec1	equ	0xFE5
 20211                           plusw1	equ	0xFE3
 20212                           fsr1h	equ	0xFE2
 20213                           fsr1l	equ	0xFE1
 20214                           indf2	equ	0xFDF
 20215                           postinc2	equ	0xFDE
 20216                           postdec2	equ	0xFDD
 20217                           plusw2	equ	0xFDB
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function _distributeRound *****************
 20223 ;; Defined at:
 20224 ;;		line 826 in file "operationMode.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;  count           2    6[COMRAM] unsigned int 
 20227 ;; Auto vars:     Size  Location     Type
 20228 ;;  i               2    9[COMRAM] unsigned int 
 20229 ;; Return value:  Size  Location     Type
 20230 ;;                  1    wreg      void 
 20231 ;; Registers used:
 20232 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20233 ;; Tracked objects:
 20234 ;;		On entry : 0/0
 20235 ;;		On exit  : 0/0
 20236 ;;		Unchanged: 0/0
 20237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20241 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20242 ;;Total ram usage:        5 bytes
 20243 ;; Hardware stack levels used:    1
 20244 ;; Hardware stack levels required when called:    1
 20245 ;; This function calls:
 20246 ;;		___wmul
 20247 ;; This function is called by:
 20248 ;;		_distributePieces
 20249 ;; This function uses a non-reentrant model
 20250 ;;
 20251                           
 20252                           	psect	text44
 20253  00A036                     __ptext44:
 20254                           	opt stack 0
 20255  00A036                     _distributeRound:
 20256                           	opt stack 27
 20257                           
 20258                           ;operationMode.c: 830: unsigned int i = 0;
 20259                           
 20260                           ;incstack = 0
 20261  00A036  0E00               	movlw	0
 20262  00A038  6E0B               	movwf	distributeRound@i+1,c
 20263  00A03A  0E00               	movlw	0
 20264  00A03C  6E0A               	movwf	distributeRound@i,c
 20265                           
 20266                           ;operationMode.c: 832: for (i=0; i<count*523; i++){
 20267  00A03E  0E00               	movlw	0
 20268  00A040  6E0B               	movwf	distributeRound@i+1,c
 20269  00A042  0E00               	movlw	0
 20270  00A044  6E0A               	movwf	distributeRound@i,c
 20271  00A046  D032               	goto	l593
 20272  00A048                     l594:
 20273                           
 20274                           ;operationMode.c: 833: LATDbits.LATD4 = 0;
 20275  00A048  988C               	bcf	3980,4,c	;volatile
 20276                           
 20277                           ;operationMode.c: 834: LATDbits.LATD5 = 0;
 20278  00A04A  9A8C               	bcf	3980,5,c	;volatile
 20279                           
 20280                           ;operationMode.c: 835: LATDbits.LATD6 = 1;
 20281  00A04C  8C8C               	bsf	3980,6,c	;volatile
 20282                           
 20283                           ;operationMode.c: 836: LATDbits.LATD7 = 0;
 20284  00A04E  9E8C               	bcf	3980,7,c	;volatile
 20285                           
 20286                           ;operationMode.c: 837: _delay((unsigned long)((2)*(40000000/4000.0)));
 20287  00A050  0E1A               	movlw	26
 20288  00A052  6E09               	movwf	??_distributeRound& (0+255),c
 20289  00A054  0EF8               	movlw	248
 20290  00A056                     u15357:
 20291  00A056  2EE8               	decfsz	wreg,f,c
 20292  00A058  D7FE               	bra	u15357
 20293  00A05A  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20294  00A05C  D7FC               	bra	u15357
 20295  00A05E  D000               	nop2	
 20296                           
 20297                           ;operationMode.c: 838: LATDbits.LATD4 = 0;
 20298  00A060  988C               	bcf	3980,4,c	;volatile
 20299                           
 20300                           ;operationMode.c: 839: LATDbits.LATD5 = 1;
 20301  00A062  8A8C               	bsf	3980,5,c	;volatile
 20302                           
 20303                           ;operationMode.c: 840: LATDbits.LATD6 = 0;
 20304  00A064  9C8C               	bcf	3980,6,c	;volatile
 20305                           
 20306                           ;operationMode.c: 841: LATDbits.LATD7 = 0;
 20307  00A066  9E8C               	bcf	3980,7,c	;volatile
 20308                           
 20309                           ;operationMode.c: 842: _delay((unsigned long)((2)*(40000000/4000.0)));
 20310  00A068  0E1A               	movlw	26
 20311  00A06A  6E09               	movwf	??_distributeRound& (0+255),c
 20312  00A06C  0EF8               	movlw	248
 20313  00A06E                     u15367:
 20314  00A06E  2EE8               	decfsz	wreg,f,c
 20315  00A070  D7FE               	bra	u15367
 20316  00A072  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20317  00A074  D7FC               	bra	u15367
 20318  00A076  D000               	nop2	
 20319                           
 20320                           ;operationMode.c: 843: LATDbits.LATD4 = 1;
 20321  00A078  888C               	bsf	3980,4,c	;volatile
 20322                           
 20323                           ;operationMode.c: 844: LATDbits.LATD5 = 0;
 20324  00A07A  9A8C               	bcf	3980,5,c	;volatile
 20325                           
 20326                           ;operationMode.c: 845: LATDbits.LATD6 = 0;
 20327  00A07C  9C8C               	bcf	3980,6,c	;volatile
 20328                           
 20329                           ;operationMode.c: 846: LATDbits.LATD7 = 0;
 20330  00A07E  9E8C               	bcf	3980,7,c	;volatile
 20331                           
 20332                           ;operationMode.c: 847: _delay((unsigned long)((2)*(40000000/4000.0)));
 20333  00A080  0E1A               	movlw	26
 20334  00A082  6E09               	movwf	??_distributeRound& (0+255),c
 20335  00A084  0EF8               	movlw	248
 20336  00A086                     u15377:
 20337  00A086  2EE8               	decfsz	wreg,f,c
 20338  00A088  D7FE               	bra	u15377
 20339  00A08A  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20340  00A08C  D7FC               	bra	u15377
 20341  00A08E  D000               	nop2	
 20342                           
 20343                           ;operationMode.c: 848: LATDbits.LATD4 = 0;
 20344  00A090  988C               	bcf	3980,4,c	;volatile
 20345                           
 20346                           ;operationMode.c: 849: LATDbits.LATD5 = 0;
 20347  00A092  9A8C               	bcf	3980,5,c	;volatile
 20348                           
 20349                           ;operationMode.c: 850: LATDbits.LATD6 = 0;
 20350  00A094  9C8C               	bcf	3980,6,c	;volatile
 20351                           
 20352                           ;operationMode.c: 851: LATDbits.LATD7 = 1;
 20353  00A096  8E8C               	bsf	3980,7,c	;volatile
 20354                           
 20355                           ;operationMode.c: 852: _delay((unsigned long)((2)*(40000000/4000.0)));
 20356  00A098  0E1A               	movlw	26
 20357  00A09A  6E09               	movwf	??_distributeRound& (0+255),c
 20358  00A09C  0EF8               	movlw	248
 20359  00A09E                     u15387:
 20360  00A09E  2EE8               	decfsz	wreg,f,c
 20361  00A0A0  D7FE               	bra	u15387
 20362  00A0A2  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20363  00A0A4  D7FC               	bra	u15387
 20364  00A0A6  D000               	nop2	
 20365  00A0A8  4A0A               	infsnz	distributeRound@i,f,c
 20366  00A0AA  2A0B               	incf	distributeRound@i+1,f,c
 20367  00A0AC                     l593:
 20368  00A0AC  C007  F001         	movff	distributeRound@count,___wmul@multiplier
 20369  00A0B0  C008  F002         	movff	distributeRound@count+1,___wmul@multiplier+1
 20370  00A0B4  0E02               	movlw	2
 20371  00A0B6  6E04               	movwf	___wmul@multiplicand+1,c
 20372  00A0B8  0E0B               	movlw	11
 20373  00A0BA  6E03               	movwf	___wmul@multiplicand,c
 20374  00A0BC  EC31  F04C         	call	___wmul	;wreg free
 20375  00A0C0  5001               	movf	?___wmul,w,c
 20376  00A0C2  5C0A               	subwf	distributeRound@i,w,c
 20377  00A0C4  5002               	movf	?___wmul+1,w,c
 20378  00A0C6  580B               	subwfb	distributeRound@i+1,w,c
 20379  00A0C8  A0D8               	btfss	status,0,c
 20380  00A0CA  D7BE               	goto	l594
 20381                           
 20382                           ;operationMode.c: 853: }
 20383                           ;operationMode.c: 855: LATDbits.LATD4 = 0;
 20384  00A0CC  988C               	bcf	3980,4,c	;volatile
 20385                           
 20386                           ;operationMode.c: 856: LATDbits.LATD5 = 0;
 20387  00A0CE  9A8C               	bcf	3980,5,c	;volatile
 20388                           
 20389                           ;operationMode.c: 857: LATDbits.LATD6 = 0;
 20390  00A0D0  9C8C               	bcf	3980,6,c	;volatile
 20391                           
 20392                           ;operationMode.c: 858: LATDbits.LATD7 = 0;
 20393  00A0D2  9E8C               	bcf	3980,7,c	;volatile
 20394  00A0D4  0012               	return		;funcret
 20395  00A0D6                     __end_of_distributeRound:
 20396                           	opt stack 0
 20397                           tblptru	equ	0xFF8
 20398                           tblptrh	equ	0xFF7
 20399                           tblptrl	equ	0xFF6
 20400                           tablat	equ	0xFF5
 20401                           prodh	equ	0xFF4
 20402                           prodl	equ	0xFF3
 20403                           postinc0	equ	0xFEE
 20404                           wreg	equ	0xFE8
 20405                           postinc1	equ	0xFE6
 20406                           postdec1	equ	0xFE5
 20407                           plusw1	equ	0xFE3
 20408                           fsr1h	equ	0xFE2
 20409                           fsr1l	equ	0xFE1
 20410                           indf2	equ	0xFDF
 20411                           postinc2	equ	0xFDE
 20412                           postdec2	equ	0xFDD
 20413                           plusw2	equ	0xFDB
 20414                           fsr2h	equ	0xFDA
 20415                           fsr2l	equ	0xFD9
 20416                           status	equ	0xFD8
 20417                           
 20418 ;; *************** function _distributeLong *****************
 20419 ;; Defined at:
 20420 ;;		line 898 in file "operationMode.c"
 20421 ;; Parameters:    Size  Location     Type
 20422 ;;  count           2    6[COMRAM] unsigned int 
 20423 ;; Auto vars:     Size  Location     Type
 20424 ;;  i               2    9[COMRAM] unsigned int 
 20425 ;; Return value:  Size  Location     Type
 20426 ;;                  1    wreg      void 
 20427 ;; Registers used:
 20428 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20429 ;; Tracked objects:
 20430 ;;		On entry : 0/0
 20431 ;;		On exit  : 0/0
 20432 ;;		Unchanged: 0/0
 20433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20434 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20437 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20438 ;;Total ram usage:        5 bytes
 20439 ;; Hardware stack levels used:    1
 20440 ;; Hardware stack levels required when called:    1
 20441 ;; This function calls:
 20442 ;;		___wmul
 20443 ;; This function is called by:
 20444 ;;		_distributePieces
 20445 ;; This function uses a non-reentrant model
 20446 ;;
 20447                           
 20448                           	psect	text45
 20449  009F96                     __ptext45:
 20450                           	opt stack 0
 20451  009F96                     _distributeLong:
 20452                           	opt stack 27
 20453                           
 20454                           ;operationMode.c: 902: unsigned int i = 0;
 20455                           
 20456                           ;incstack = 0
 20457  009F96  0E00               	movlw	0
 20458  009F98  6E0B               	movwf	distributeLong@i+1,c
 20459  009F9A  0E00               	movlw	0
 20460  009F9C  6E0A               	movwf	distributeLong@i,c
 20461                           
 20462                           ;operationMode.c: 904: for (i=0; i<count*523; i++){
 20463  009F9E  0E00               	movlw	0
 20464  009FA0  6E0B               	movwf	distributeLong@i+1,c
 20465  009FA2  0E00               	movlw	0
 20466  009FA4  6E0A               	movwf	distributeLong@i,c
 20467  009FA6  D032               	goto	l605
 20468  009FA8                     l606:
 20469                           
 20470                           ;operationMode.c: 905: LATCbits.LATC0 = 0;
 20471  009FA8  908B               	bcf	3979,0,c	;volatile
 20472                           
 20473                           ;operationMode.c: 906: LATCbits.LATC1 = 0;
 20474  009FAA  928B               	bcf	3979,1,c	;volatile
 20475                           
 20476                           ;operationMode.c: 907: LATCbits.LATC2 = 1;
 20477  009FAC  848B               	bsf	3979,2,c	;volatile
 20478                           
 20479                           ;operationMode.c: 908: LATEbits.LATE2 = 0;
 20480  009FAE  948D               	bcf	3981,2,c	;volatile
 20481                           
 20482                           ;operationMode.c: 909: _delay((unsigned long)((2)*(40000000/4000.0)));
 20483  009FB0  0E1A               	movlw	26
 20484  009FB2  6E09               	movwf	??_distributeLong& (0+255),c
 20485  009FB4  0EF8               	movlw	248
 20486  009FB6                     u15397:
 20487  009FB6  2EE8               	decfsz	wreg,f,c
 20488  009FB8  D7FE               	bra	u15397
 20489  009FBA  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20490  009FBC  D7FC               	bra	u15397
 20491  009FBE  D000               	nop2	
 20492                           
 20493                           ;operationMode.c: 910: LATCbits.LATC0 = 0;
 20494  009FC0  908B               	bcf	3979,0,c	;volatile
 20495                           
 20496                           ;operationMode.c: 911: LATCbits.LATC1 = 1;
 20497  009FC2  828B               	bsf	3979,1,c	;volatile
 20498                           
 20499                           ;operationMode.c: 912: LATCbits.LATC2 = 0;
 20500  009FC4  948B               	bcf	3979,2,c	;volatile
 20501                           
 20502                           ;operationMode.c: 913: LATEbits.LATE2 = 0;
 20503  009FC6  948D               	bcf	3981,2,c	;volatile
 20504                           
 20505                           ;operationMode.c: 914: _delay((unsigned long)((2)*(40000000/4000.0)));
 20506  009FC8  0E1A               	movlw	26
 20507  009FCA  6E09               	movwf	??_distributeLong& (0+255),c
 20508  009FCC  0EF8               	movlw	248
 20509  009FCE                     u15407:
 20510  009FCE  2EE8               	decfsz	wreg,f,c
 20511  009FD0  D7FE               	bra	u15407
 20512  009FD2  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20513  009FD4  D7FC               	bra	u15407
 20514  009FD6  D000               	nop2	
 20515                           
 20516                           ;operationMode.c: 915: LATCbits.LATC0 = 1;
 20517  009FD8  808B               	bsf	3979,0,c	;volatile
 20518                           
 20519                           ;operationMode.c: 916: LATCbits.LATC1 = 0;
 20520  009FDA  928B               	bcf	3979,1,c	;volatile
 20521                           
 20522                           ;operationMode.c: 917: LATCbits.LATC2 = 0;
 20523  009FDC  948B               	bcf	3979,2,c	;volatile
 20524                           
 20525                           ;operationMode.c: 918: LATEbits.LATE2 = 0;
 20526  009FDE  948D               	bcf	3981,2,c	;volatile
 20527                           
 20528                           ;operationMode.c: 919: _delay((unsigned long)((2)*(40000000/4000.0)));
 20529  009FE0  0E1A               	movlw	26
 20530  009FE2  6E09               	movwf	??_distributeLong& (0+255),c
 20531  009FE4  0EF8               	movlw	248
 20532  009FE6                     u15417:
 20533  009FE6  2EE8               	decfsz	wreg,f,c
 20534  009FE8  D7FE               	bra	u15417
 20535  009FEA  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20536  009FEC  D7FC               	bra	u15417
 20537  009FEE  D000               	nop2	
 20538                           
 20539                           ;operationMode.c: 920: LATCbits.LATC0 = 0;
 20540  009FF0  908B               	bcf	3979,0,c	;volatile
 20541                           
 20542                           ;operationMode.c: 921: LATCbits.LATC1 = 0;
 20543  009FF2  928B               	bcf	3979,1,c	;volatile
 20544                           
 20545                           ;operationMode.c: 922: LATCbits.LATC2 = 0;
 20546  009FF4  948B               	bcf	3979,2,c	;volatile
 20547                           
 20548                           ;operationMode.c: 923: LATEbits.LATE2 = 1;
 20549  009FF6  848D               	bsf	3981,2,c	;volatile
 20550                           
 20551                           ;operationMode.c: 924: _delay((unsigned long)((2)*(40000000/4000.0)));
 20552  009FF8  0E1A               	movlw	26
 20553  009FFA  6E09               	movwf	??_distributeLong& (0+255),c
 20554  009FFC  0EF8               	movlw	248
 20555  009FFE                     u15427:
 20556  009FFE  2EE8               	decfsz	wreg,f,c
 20557  00A000  D7FE               	bra	u15427
 20558  00A002  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20559  00A004  D7FC               	bra	u15427
 20560  00A006  D000               	nop2	
 20561  00A008  4A0A               	infsnz	distributeLong@i,f,c
 20562  00A00A  2A0B               	incf	distributeLong@i+1,f,c
 20563  00A00C                     l605:
 20564  00A00C  C007  F001         	movff	distributeLong@count,___wmul@multiplier
 20565  00A010  C008  F002         	movff	distributeLong@count+1,___wmul@multiplier+1
 20566  00A014  0E02               	movlw	2
 20567  00A016  6E04               	movwf	___wmul@multiplicand+1,c
 20568  00A018  0E0B               	movlw	11
 20569  00A01A  6E03               	movwf	___wmul@multiplicand,c
 20570  00A01C  EC31  F04C         	call	___wmul	;wreg free
 20571  00A020  5001               	movf	?___wmul,w,c
 20572  00A022  5C0A               	subwf	distributeLong@i,w,c
 20573  00A024  5002               	movf	?___wmul+1,w,c
 20574  00A026  580B               	subwfb	distributeLong@i+1,w,c
 20575  00A028  A0D8               	btfss	status,0,c
 20576  00A02A  D7BE               	goto	l606
 20577                           
 20578                           ;operationMode.c: 925: }
 20579                           ;operationMode.c: 927: LATCbits.LATC0 = 0;
 20580  00A02C  908B               	bcf	3979,0,c	;volatile
 20581                           
 20582                           ;operationMode.c: 928: LATCbits.LATC1 = 0;
 20583  00A02E  928B               	bcf	3979,1,c	;volatile
 20584                           
 20585                           ;operationMode.c: 929: LATCbits.LATC2 = 0;
 20586  00A030  948B               	bcf	3979,2,c	;volatile
 20587                           
 20588                           ;operationMode.c: 930: LATEbits.LATE2 = 0;
 20589  00A032  948D               	bcf	3981,2,c	;volatile
 20590  00A034  0012               	return		;funcret
 20591  00A036                     __end_of_distributeLong:
 20592                           	opt stack 0
 20593                           tblptru	equ	0xFF8
 20594                           tblptrh	equ	0xFF7
 20595                           tblptrl	equ	0xFF6
 20596                           tablat	equ	0xFF5
 20597                           prodh	equ	0xFF4
 20598                           prodl	equ	0xFF3
 20599                           postinc0	equ	0xFEE
 20600                           wreg	equ	0xFE8
 20601                           postinc1	equ	0xFE6
 20602                           postdec1	equ	0xFE5
 20603                           plusw1	equ	0xFE3
 20604                           fsr1h	equ	0xFE2
 20605                           fsr1l	equ	0xFE1
 20606                           indf2	equ	0xFDF
 20607                           postinc2	equ	0xFDE
 20608                           postdec2	equ	0xFDD
 20609                           plusw2	equ	0xFDB
 20610                           fsr2h	equ	0xFDA
 20611                           fsr2l	equ	0xFD9
 20612                           status	equ	0xFD8
 20613                           
 20614 ;; *************** function _distributeFlat *****************
 20615 ;; Defined at:
 20616 ;;		line 862 in file "operationMode.c"
 20617 ;; Parameters:    Size  Location     Type
 20618 ;;  count           2    6[COMRAM] unsigned int 
 20619 ;; Auto vars:     Size  Location     Type
 20620 ;;  i               2    9[COMRAM] unsigned int 
 20621 ;; Return value:  Size  Location     Type
 20622 ;;                  1    wreg      void 
 20623 ;; Registers used:
 20624 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20625 ;; Tracked objects:
 20626 ;;		On entry : 0/0
 20627 ;;		On exit  : 0/0
 20628 ;;		Unchanged: 0/0
 20629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20633 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20634 ;;Total ram usage:        5 bytes
 20635 ;; Hardware stack levels used:    1
 20636 ;; Hardware stack levels required when called:    1
 20637 ;; This function calls:
 20638 ;;		___wmul
 20639 ;; This function is called by:
 20640 ;;		_distributePieces
 20641 ;; This function uses a non-reentrant model
 20642 ;;
 20643                           
 20644                           	psect	text46
 20645  009EF6                     __ptext46:
 20646                           	opt stack 0
 20647  009EF6                     _distributeFlat:
 20648                           	opt stack 27
 20649                           
 20650                           ;operationMode.c: 866: unsigned int i = 0;
 20651                           
 20652                           ;incstack = 0
 20653  009EF6  0E00               	movlw	0
 20654  009EF8  6E0B               	movwf	distributeFlat@i+1,c
 20655  009EFA  0E00               	movlw	0
 20656  009EFC  6E0A               	movwf	distributeFlat@i,c
 20657                           
 20658                           ;operationMode.c: 868: for (i=0; i<count*523; i++){
 20659  009EFE  0E00               	movlw	0
 20660  009F00  6E0B               	movwf	distributeFlat@i+1,c
 20661  009F02  0E00               	movlw	0
 20662  009F04  6E0A               	movwf	distributeFlat@i,c
 20663  009F06  D032               	goto	l599
 20664  009F08                     l600:
 20665                           
 20666                           ;operationMode.c: 869: LATDbits.LATD0 = 1;
 20667  009F08  808C               	bsf	3980,0,c	;volatile
 20668                           
 20669                           ;operationMode.c: 870: LATDbits.LATD1 = 0;
 20670  009F0A  928C               	bcf	3980,1,c	;volatile
 20671                           
 20672                           ;operationMode.c: 871: LATDbits.LATD2 = 0;
 20673  009F0C  948C               	bcf	3980,2,c	;volatile
 20674                           
 20675                           ;operationMode.c: 872: LATDbits.LATD3 = 0;
 20676  009F0E  968C               	bcf	3980,3,c	;volatile
 20677                           
 20678                           ;operationMode.c: 873: _delay((unsigned long)((2)*(40000000/4000.0)));
 20679  009F10  0E1A               	movlw	26
 20680  009F12  6E09               	movwf	??_distributeFlat& (0+255),c
 20681  009F14  0EF8               	movlw	248
 20682  009F16                     u15437:
 20683  009F16  2EE8               	decfsz	wreg,f,c
 20684  009F18  D7FE               	bra	u15437
 20685  009F1A  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20686  009F1C  D7FC               	bra	u15437
 20687  009F1E  D000               	nop2	
 20688                           
 20689                           ;operationMode.c: 874: LATDbits.LATD0 = 0;
 20690  009F20  908C               	bcf	3980,0,c	;volatile
 20691                           
 20692                           ;operationMode.c: 875: LATDbits.LATD1 = 1;
 20693  009F22  828C               	bsf	3980,1,c	;volatile
 20694                           
 20695                           ;operationMode.c: 876: LATDbits.LATD2 = 0;
 20696  009F24  948C               	bcf	3980,2,c	;volatile
 20697                           
 20698                           ;operationMode.c: 877: LATDbits.LATD3 = 0;
 20699  009F26  968C               	bcf	3980,3,c	;volatile
 20700                           
 20701                           ;operationMode.c: 878: _delay((unsigned long)((2)*(40000000/4000.0)));
 20702  009F28  0E1A               	movlw	26
 20703  009F2A  6E09               	movwf	??_distributeFlat& (0+255),c
 20704  009F2C  0EF8               	movlw	248
 20705  009F2E                     u15447:
 20706  009F2E  2EE8               	decfsz	wreg,f,c
 20707  009F30  D7FE               	bra	u15447
 20708  009F32  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20709  009F34  D7FC               	bra	u15447
 20710  009F36  D000               	nop2	
 20711                           
 20712                           ;operationMode.c: 879: LATDbits.LATD0 = 0;
 20713  009F38  908C               	bcf	3980,0,c	;volatile
 20714                           
 20715                           ;operationMode.c: 880: LATDbits.LATD1 = 0;
 20716  009F3A  928C               	bcf	3980,1,c	;volatile
 20717                           
 20718                           ;operationMode.c: 881: LATDbits.LATD2 = 1;
 20719  009F3C  848C               	bsf	3980,2,c	;volatile
 20720                           
 20721                           ;operationMode.c: 882: LATDbits.LATD3 = 0;
 20722  009F3E  968C               	bcf	3980,3,c	;volatile
 20723                           
 20724                           ;operationMode.c: 883: _delay((unsigned long)((2)*(40000000/4000.0)));
 20725  009F40  0E1A               	movlw	26
 20726  009F42  6E09               	movwf	??_distributeFlat& (0+255),c
 20727  009F44  0EF8               	movlw	248
 20728  009F46                     u15457:
 20729  009F46  2EE8               	decfsz	wreg,f,c
 20730  009F48  D7FE               	bra	u15457
 20731  009F4A  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20732  009F4C  D7FC               	bra	u15457
 20733  009F4E  D000               	nop2	
 20734                           
 20735                           ;operationMode.c: 884: LATDbits.LATD0 = 0;
 20736  009F50  908C               	bcf	3980,0,c	;volatile
 20737                           
 20738                           ;operationMode.c: 885: LATDbits.LATD1 = 0;
 20739  009F52  928C               	bcf	3980,1,c	;volatile
 20740                           
 20741                           ;operationMode.c: 886: LATDbits.LATD2 = 0;
 20742  009F54  948C               	bcf	3980,2,c	;volatile
 20743                           
 20744                           ;operationMode.c: 887: LATDbits.LATD3 = 1;
 20745  009F56  868C               	bsf	3980,3,c	;volatile
 20746                           
 20747                           ;operationMode.c: 888: _delay((unsigned long)((2)*(40000000/4000.0)));
 20748  009F58  0E1A               	movlw	26
 20749  009F5A  6E09               	movwf	??_distributeFlat& (0+255),c
 20750  009F5C  0EF8               	movlw	248
 20751  009F5E                     u15467:
 20752  009F5E  2EE8               	decfsz	wreg,f,c
 20753  009F60  D7FE               	bra	u15467
 20754  009F62  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20755  009F64  D7FC               	bra	u15467
 20756  009F66  D000               	nop2	
 20757  009F68  4A0A               	infsnz	distributeFlat@i,f,c
 20758  009F6A  2A0B               	incf	distributeFlat@i+1,f,c
 20759  009F6C                     l599:
 20760  009F6C  C007  F001         	movff	distributeFlat@count,___wmul@multiplier
 20761  009F70  C008  F002         	movff	distributeFlat@count+1,___wmul@multiplier+1
 20762  009F74  0E02               	movlw	2
 20763  009F76  6E04               	movwf	___wmul@multiplicand+1,c
 20764  009F78  0E0B               	movlw	11
 20765  009F7A  6E03               	movwf	___wmul@multiplicand,c
 20766  009F7C  EC31  F04C         	call	___wmul	;wreg free
 20767  009F80  5001               	movf	?___wmul,w,c
 20768  009F82  5C0A               	subwf	distributeFlat@i,w,c
 20769  009F84  5002               	movf	?___wmul+1,w,c
 20770  009F86  580B               	subwfb	distributeFlat@i+1,w,c
 20771  009F88  A0D8               	btfss	status,0,c
 20772  009F8A  D7BE               	goto	l600
 20773                           
 20774                           ;operationMode.c: 889: }
 20775                           ;operationMode.c: 891: LATDbits.LATD0 = 0;
 20776  009F8C  908C               	bcf	3980,0,c	;volatile
 20777                           
 20778                           ;operationMode.c: 892: LATDbits.LATD1 = 0;
 20779  009F8E  928C               	bcf	3980,1,c	;volatile
 20780                           
 20781                           ;operationMode.c: 893: LATDbits.LATD2 = 0;
 20782  009F90  948C               	bcf	3980,2,c	;volatile
 20783                           
 20784                           ;operationMode.c: 894: LATDbits.LATD3 = 0;
 20785  009F92  968C               	bcf	3980,3,c	;volatile
 20786  009F94  0012               	return		;funcret
 20787  009F96                     __end_of_distributeFlat:
 20788                           	opt stack 0
 20789                           tblptru	equ	0xFF8
 20790                           tblptrh	equ	0xFF7
 20791                           tblptrl	equ	0xFF6
 20792                           tablat	equ	0xFF5
 20793                           prodh	equ	0xFF4
 20794                           prodl	equ	0xFF3
 20795                           postinc0	equ	0xFEE
 20796                           wreg	equ	0xFE8
 20797                           postinc1	equ	0xFE6
 20798                           postdec1	equ	0xFE5
 20799                           plusw1	equ	0xFE3
 20800                           fsr1h	equ	0xFE2
 20801                           fsr1l	equ	0xFE1
 20802                           indf2	equ	0xFDF
 20803                           postinc2	equ	0xFDE
 20804                           postdec2	equ	0xFDD
 20805                           plusw2	equ	0xFDB
 20806                           fsr2h	equ	0xFDA
 20807                           fsr2l	equ	0xFD9
 20808                           status	equ	0xFD8
 20809                           
 20810 ;; *************** function ___wmul *****************
 20811 ;; Defined at:
 20812 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 20813 ;; Parameters:    Size  Location     Type
 20814 ;;  multiplier      2    0[COMRAM] unsigned int 
 20815 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20816 ;; Auto vars:     Size  Location     Type
 20817 ;;  product         2    4[COMRAM] unsigned int 
 20818 ;; Return value:  Size  Location     Type
 20819 ;;                  2    0[COMRAM] unsigned int 
 20820 ;; Registers used:
 20821 ;;		wreg, status,2, status,0, prodl, prodh
 20822 ;; Tracked objects:
 20823 ;;		On entry : 0/0
 20824 ;;		On exit  : 0/0
 20825 ;;		Unchanged: 0/0
 20826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;Total ram usage:        6 bytes
 20832 ;; Hardware stack levels used:    1
 20833 ;; This function calls:
 20834 ;;		Nothing
 20835 ;; This function is called by:
 20836 ;;		_getUserInputs
 20837 ;;		_distributeRound
 20838 ;;		_distributeFlat
 20839 ;;		_distributeLong
 20840 ;;		_displayLogs
 20841 ;;		_standbyMode
 20842 ;;		_printf
 20843 ;;		_tock
 20844 ;; This function uses a non-reentrant model
 20845 ;;
 20846                           
 20847                           	psect	text47
 20848  009862                     __ptext47:
 20849                           	opt stack 0
 20850  009862                     ___wmul:
 20851                           	opt stack 27
 20852                           
 20853                           ;incstack = 0
 20854  009862  5001               	movf	___wmul@multiplier,w,c
 20855  009864  0203               	mulwf	___wmul@multiplicand,c
 20856  009866  CFF3 F005          	movff	prodl,___wmul@product
 20857  00986A  CFF4 F006          	movff	prodh,___wmul@product+1
 20858  00986E  5001               	movf	___wmul@multiplier,w,c
 20859  009870  0204               	mulwf	___wmul@multiplicand+1,c
 20860  009872  50F3               	movf	prodl,w,c
 20861  009874  2606               	addwf	___wmul@product+1,f,c
 20862  009876  5002               	movf	___wmul@multiplier+1,w,c
 20863  009878  0203               	mulwf	___wmul@multiplicand,c
 20864  00987A  50F3               	movf	prodl,w,c
 20865  00987C  2606               	addwf	___wmul@product+1,f,c
 20866  00987E  C005  F001         	movff	___wmul@product,?___wmul
 20867  009882  C006  F002         	movff	___wmul@product+1,?___wmul+1
 20868  009886  0012               	return	
 20869  009888                     __end_of___wmul:
 20870                           	opt stack 0
 20871                           tblptru	equ	0xFF8
 20872                           tblptrh	equ	0xFF7
 20873                           tblptrl	equ	0xFF6
 20874                           tablat	equ	0xFF5
 20875                           prodh	equ	0xFF4
 20876                           prodl	equ	0xFF3
 20877                           postinc0	equ	0xFEE
 20878                           wreg	equ	0xFE8
 20879                           postinc1	equ	0xFE6
 20880                           postdec1	equ	0xFE5
 20881                           plusw1	equ	0xFE3
 20882                           fsr1h	equ	0xFE2
 20883                           fsr1l	equ	0xFE1
 20884                           indf2	equ	0xFDF
 20885                           postinc2	equ	0xFDE
 20886                           postdec2	equ	0xFDD
 20887                           plusw2	equ	0xFDB
 20888                           fsr2h	equ	0xFDA
 20889                           fsr2l	equ	0xFD9
 20890                           status	equ	0xFD8
 20891                           
 20892 ;; *************** function _configDrawer *****************
 20893 ;; Defined at:
 20894 ;;		line 812 in file "operationMode.c"
 20895 ;; Parameters:    Size  Location     Type
 20896 ;;  direction       2    5[COMRAM] unsigned int 
 20897 ;; Auto vars:     Size  Location     Type
 20898 ;;		None
 20899 ;; Return value:  Size  Location     Type
 20900 ;;                  1    wreg      void 
 20901 ;; Registers used:
 20902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20903 ;; Tracked objects:
 20904 ;;		On entry : 0/0
 20905 ;;		On exit  : 0/0
 20906 ;;		Unchanged: 0/0
 20907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;Total ram usage:        2 bytes
 20913 ;; Hardware stack levels used:    1
 20914 ;; Hardware stack levels required when called:    1
 20915 ;; This function calls:
 20916 ;;		_uartTransmitBlocking
 20917 ;; This function is called by:
 20918 ;;		_mainOperation
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           	psect	text48
 20923  0098B2                     __ptext48:
 20924                           	opt stack 0
 20925  0098B2                     _configDrawer:
 20926                           	opt stack 28
 20927                           
 20928                           ;operationMode.c: 816: if (direction == 1){
 20929                           
 20930                           ;incstack = 0
 20931  0098B2  0406               	decf	configDrawer@direction,w,c
 20932  0098B4  1007               	iorwf	configDrawer@direction+1,w,c
 20933  0098B6  A4D8               	btfss	status,2,c
 20934  0098B8  D009               	goto	l587
 20935                           
 20936                           ;operationMode.c: 817: uartTransmitBlocking(drawerOpen, 1);
 20937  0098BA  0E71               	movlw	low _drawerOpen
 20938  0098BC  6E01               	movwf	uartTransmitBlocking@data,c
 20939  0098BE  0E00               	movlw	high _drawerOpen
 20940  0098C0  6E02               	movwf	uartTransmitBlocking@data+1,c
 20941  0098C2  0E01               	movlw	1
 20942  0098C4  6E03               	movwf	uartTransmitBlocking@numBytes,c
 20943  0098C6  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 20944                           
 20945                           ;operationMode.c: 818: }
 20946  0098CA  0012               	return	
 20947  0098CC                     l587:
 20948                           
 20949                           ;operationMode.c: 820: else if (direction == 0){
 20950  0098CC  5006               	movf	configDrawer@direction,w,c
 20951  0098CE  1007               	iorwf	configDrawer@direction+1,w,c
 20952  0098D0  A4D8               	btfss	status,2,c
 20953  0098D2  0012               	return	
 20954                           
 20955                           ;operationMode.c: 821: uartTransmitBlocking(drawerClose, 1);
 20956  0098D4  0E70               	movlw	low _drawerClose
 20957  0098D6  6E01               	movwf	uartTransmitBlocking@data,c
 20958  0098D8  0E00               	movlw	high _drawerClose
 20959  0098DA  6E02               	movwf	uartTransmitBlocking@data+1,c
 20960  0098DC  0E01               	movlw	1
 20961  0098DE  6E03               	movwf	uartTransmitBlocking@numBytes,c
 20962  0098E0  EC2E  F04F         	call	_uartTransmitBlocking	;wreg free
 20963  0098E4  0012               	return	
 20964  0098E6                     __end_of_configDrawer:
 20965                           	opt stack 0
 20966                           tblptru	equ	0xFF8
 20967                           tblptrh	equ	0xFF7
 20968                           tblptrl	equ	0xFF6
 20969                           tablat	equ	0xFF5
 20970                           prodh	equ	0xFF4
 20971                           prodl	equ	0xFF3
 20972                           postinc0	equ	0xFEE
 20973                           wreg	equ	0xFE8
 20974                           postinc1	equ	0xFE6
 20975                           postdec1	equ	0xFE5
 20976                           plusw1	equ	0xFE3
 20977                           fsr1h	equ	0xFE2
 20978                           fsr1l	equ	0xFE1
 20979                           indf2	equ	0xFDF
 20980                           postinc2	equ	0xFDE
 20981                           postdec2	equ	0xFDD
 20982                           plusw2	equ	0xFDB
 20983                           fsr2h	equ	0xFDA
 20984                           fsr2l	equ	0xFD9
 20985                           status	equ	0xFD8
 20986                           
 20987 ;; *************** function _uartTransmitBlocking *****************
 20988 ;; Defined at:
 20989 ;;		line 19 in file "UART_PIC.c"
 20990 ;; Parameters:    Size  Location     Type
 20991 ;;  data            2    0[COMRAM] PTR unsigned char 
 20992 ;;		 -> drawerClose(1), drawerOpen(1), drawerDown(1), drawerUp(1), 
 20993 ;;		 -> columnRight(1), columnLeft(1), rowDown(1), rowUp(1), 
 20994 ;;  numBytes        1    2[COMRAM] unsigned char 
 20995 ;; Auto vars:     Size  Location     Type
 20996 ;;  numTransmits    1    4[COMRAM] unsigned char 
 20997 ;; Return value:  Size  Location     Type
 20998 ;;                  1    wreg      void 
 20999 ;; Registers used:
 21000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21001 ;; Tracked objects:
 21002 ;;		On entry : 0/0
 21003 ;;		On exit  : 0/0
 21004 ;;		Unchanged: 0/0
 21005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21006 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21009 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;Total ram usage:        5 bytes
 21011 ;; Hardware stack levels used:    1
 21012 ;; This function calls:
 21013 ;;		Nothing
 21014 ;; This function is called by:
 21015 ;;		_verticalStepper
 21016 ;;		_horizontalStepper
 21017 ;;		_configDrawer
 21018 ;;		_mainOperation
 21019 ;;		_drawerStepper
 21020 ;; This function uses a non-reentrant model
 21021 ;;
 21022                           
 21023                           	psect	text49
 21024  009E5C                     __ptext49:
 21025                           	opt stack 0
 21026  009E5C                     _uartTransmitBlocking:
 21027                           	opt stack 29
 21028                           
 21029                           ;UART_PIC.c: 33: while(UART -> _stateTX == UART_STATE_BUSY){ continue; }
 21030                           
 21031                           ;incstack = 0
 21032  009E5C  EE20 F008          	lfsr	2,8
 21033  009E60  506E               	movf	_UART,w,c
 21034  009E62  26D9               	addwf	fsr2l,f,c
 21035  009E64  506F               	movf	_UART+1,w,c
 21036  009E66  22DA               	addwfc	fsr2h,f,c
 21037  009E68  50DF               	movf	indf2,w,c
 21038  009E6A  B4D8               	btfsc	status,2,c
 21039  009E6C  D7F7               	goto	_uartTransmitBlocking
 21040                           
 21041                           ;UART_PIC.c: 36: UART -> _stateTX = UART_STATE_BUSY;
 21042  009E6E  EE20 F008          	lfsr	2,8
 21043  009E72  506E               	movf	_UART,w,c
 21044  009E74  26D9               	addwf	fsr2l,f,c
 21045  009E76  506F               	movf	_UART+1,w,c
 21046  009E78  22DA               	addwfc	fsr2h,f,c
 21047  009E7A  0E00               	movlw	0
 21048  009E7C  6EDF               	movwf	indf2,c
 21049                           
 21050                           ;UART_PIC.c: 39: unsigned char numTransmits = 0;
 21051  009E7E  0E00               	movlw	0
 21052  009E80  6E05               	movwf	uartTransmitBlocking@numTransmits,c
 21053                           
 21054                           ;UART_PIC.c: 42: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(40000000/4000.0)));;
 21055  009E82  8AAC               	bsf	4012,5,c	;volatile
 21056  009E84  0E41               	movlw	65
 21057  009E86  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 21058  009E88  0EEE               	movlw	238
 21059  009E8A                     u15477:
 21060  009E8A  2EE8               	decfsz	wreg,f,c
 21061  009E8C  D7FE               	bra	u15477
 21062  009E8E  2E04               	decfsz	??_uartTransmitBlocking& (0+255),f,c
 21063  009E90  D7FC               	bra	u15477
 21064  009E92  D000               	nop2	
 21065                           
 21066                           ;UART_PIC.c: 45: while(numTransmits < numBytes){
 21067  009E94  D023               	goto	l1498
 21068  009E96                     l7102:
 21069  009E96  B2AC               	btfsc	4012,1,c	;volatile
 21070  009E98  D002               	goto	u7510
 21071  009E9A  0E01               	movlw	1
 21072  009E9C  D001               	goto	u7512
 21073  009E9E                     u7510:
 21074  009E9E  0E00               	movlw	0
 21075  009EA0                     u7512:
 21076  009EA0  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 21077  009EA2  B89E               	btfsc	3998,4,c	;volatile
 21078  009EA4  D002               	goto	u7520
 21079  009EA6  0E01               	movlw	1
 21080  009EA8  D001               	goto	u7522
 21081  009EAA                     u7520:
 21082  009EAA  0E00               	movlw	0
 21083  009EAC                     u7522:
 21084  009EAC  1004               	iorwf	??_uartTransmitBlocking,w,c
 21085  009EAE  E1F3               	bnz	l7102
 21086                           
 21087                           ;UART_PIC.c: 50: __nop();
 21088  009EB0  F000               	nop	
 21089                           
 21090                           ;UART_PIC.c: 53: UARTinterruptState = INTCONbits.GIE;
 21091  009EB2  0E00               	movlw	0
 21092  009EB4  BEF2               	btfsc	intcon,7,c	;volatile
 21093  009EB6  0E01               	movlw	1
 21094  009EB8  6E79               	movwf	_UARTinterruptState,c	;volatile
 21095                           
 21096                           ;UART_PIC.c: 54: (INTCONbits.GIE = 0);
 21097  009EBA  9EF2               	bcf	intcon,7,c	;volatile
 21098                           
 21099                           ;UART_PIC.c: 55: TXREG = data[numTransmits];
 21100  009EBC  5005               	movf	uartTransmitBlocking@numTransmits,w,c
 21101  009EBE  0D01               	mullw	1
 21102  009EC0  50F3               	movf	prodl,w,c
 21103  009EC2  2401               	addwf	uartTransmitBlocking@data,w,c
 21104  009EC4  6ED9               	movwf	fsr2l,c
 21105  009EC6  50F4               	movf	prodh,w,c
 21106  009EC8  2002               	addwfc	uartTransmitBlocking@data+1,w,c
 21107  009ECA  6EDA               	movwf	fsr2h,c
 21108  009ECC  50DF               	movf	indf2,w,c
 21109  009ECE  6EAD               	movwf	4013,c	;volatile
 21110                           
 21111                           ;UART_PIC.c: 56: INTCONbits.GIE = UARTinterruptState;
 21112  009ED0  B079               	btfsc	_UARTinterruptState,0,c	;volatile
 21113  009ED2  D002               	bra	u7535
 21114  009ED4  9EF2               	bcf	intcon,7,c	;volatile
 21115  009ED6  D001               	bra	u7536
 21116  009ED8                     u7535:
 21117  009ED8  8EF2               	bsf	intcon,7,c	;volatile
 21118  009EDA                     u7536:
 21119                           
 21120                           ;UART_PIC.c: 58: numTransmits++;
 21121  009EDA  2A05               	incf	uartTransmitBlocking@numTransmits,f,c
 21122  009EDC                     l1498:
 21123  009EDC  5003               	movf	uartTransmitBlocking@numBytes,w,c
 21124  009EDE  5C05               	subwf	uartTransmitBlocking@numTransmits,w,c
 21125  009EE0  A0D8               	btfss	status,0,c
 21126  009EE2  D7D9               	goto	l1499
 21127                           
 21128                           ;UART_PIC.c: 62: }
 21129                           ;UART_PIC.c: 65: UART -> _stateTX = UART_STATE_READY;
 21130  009EE4  EE20 F008          	lfsr	2,8
 21131  009EE8  506E               	movf	_UART,w,c
 21132  009EEA  26D9               	addwf	fsr2l,f,c
 21133  009EEC  506F               	movf	_UART+1,w,c
 21134  009EEE  22DA               	addwfc	fsr2h,f,c
 21135  009EF0  0E01               	movlw	1
 21136  009EF2  6EDF               	movwf	indf2,c
 21137  009EF4  0012               	return		;funcret
 21138  009EF6                     __end_of_uartTransmitBlocking:
 21139                           	opt stack 0
 21140                           tblptru	equ	0xFF8
 21141                           tblptrh	equ	0xFF7
 21142                           tblptrl	equ	0xFF6
 21143                           tablat	equ	0xFF5
 21144                           prodh	equ	0xFF4
 21145                           prodl	equ	0xFF3
 21146                           intcon	equ	0xFF2
 21147                           postinc0	equ	0xFEE
 21148                           wreg	equ	0xFE8
 21149                           postinc1	equ	0xFE6
 21150                           postdec1	equ	0xFE5
 21151                           plusw1	equ	0xFE3
 21152                           fsr1h	equ	0xFE2
 21153                           fsr1l	equ	0xFE1
 21154                           indf2	equ	0xFDF
 21155                           postinc2	equ	0xFDE
 21156                           postdec2	equ	0xFDD
 21157                           plusw2	equ	0xFDB
 21158                           fsr2h	equ	0xFDA
 21159                           fsr2l	equ	0xFD9
 21160                           status	equ	0xFD8
 21161                           
 21162 ;; *************** function _initLCD *****************
 21163 ;; Defined at:
 21164 ;;		line 27 in file "LCD.c"
 21165 ;; Parameters:    Size  Location     Type
 21166 ;;		None
 21167 ;; Auto vars:     Size  Location     Type
 21168 ;;		None
 21169 ;; Return value:  Size  Location     Type
 21170 ;;                  1    wreg      void 
 21171 ;; Registers used:
 21172 ;;		wreg, status,2, status,0, cstack
 21173 ;; Tracked objects:
 21174 ;;		On entry : 0/0
 21175 ;;		On exit  : 0/0
 21176 ;;		Unchanged: 0/0
 21177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21182 ;;Total ram usage:        1 bytes
 21183 ;; Hardware stack levels used:    1
 21184 ;; Hardware stack levels required when called:    2
 21185 ;; This function calls:
 21186 ;;		_lcdInst
 21187 ;; This function is called by:
 21188 ;;		_main
 21189 ;; This function uses a non-reentrant model
 21190 ;;
 21191                           
 21192                           	psect	text50
 21193  009966                     __ptext50:
 21194                           	opt stack 0
 21195  009966                     _initLCD:
 21196                           	opt stack 28
 21197                           
 21198                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 21199                           
 21200                           ;incstack = 0
 21201  009966  0EC3               	movlw	195
 21202  009968  6E04               	movwf	??_initLCD& (0+255),c
 21203  00996A  0ECD               	movlw	205
 21204  00996C                     u15487:
 21205  00996C  2EE8               	decfsz	wreg,f,c
 21206  00996E  D7FE               	bra	u15487
 21207  009970  2E04               	decfsz	??_initLCD& (0+255),f,c
 21208  009972  D7FC               	bra	u15487
 21209  009974  F000               	nop	
 21210                           
 21211                           ;LCD.c: 36: lcdInst(0b00110011);
 21212  009976  0E33               	movlw	51
 21213  009978  ECDF  F04B         	call	_lcdInst
 21214                           
 21215                           ;LCD.c: 37: lcdInst(0b00110010);
 21216  00997C  0E32               	movlw	50
 21217  00997E  ECDF  F04B         	call	_lcdInst
 21218                           
 21219                           ;LCD.c: 38: lcdInst(0b00101000);
 21220  009982  0E28               	movlw	40
 21221  009984  ECDF  F04B         	call	_lcdInst
 21222                           
 21223                           ;LCD.c: 39: lcdInst(0b00001111);
 21224  009988  0E0F               	movlw	15
 21225  00998A  ECDF  F04B         	call	_lcdInst
 21226                           
 21227                           ;LCD.c: 40: lcdInst(0b00000110);
 21228  00998E  0E06               	movlw	6
 21229  009990  ECDF  F04B         	call	_lcdInst
 21230                           
 21231                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 21232  009994  0E01               	movlw	1
 21233  009996  ECDF  F04B         	call	_lcdInst
 21234  00999A  0EC3               	movlw	195
 21235  00999C  6E04               	movwf	??_initLCD& (0+255),c
 21236  00999E  0ECD               	movlw	205
 21237  0099A0                     u15497:
 21238  0099A0  2EE8               	decfsz	wreg,f,c
 21239  0099A2  D7FE               	bra	u15497
 21240  0099A4  2E04               	decfsz	??_initLCD& (0+255),f,c
 21241  0099A6  D7FC               	bra	u15497
 21242  0099A8  F000               	nop	
 21243                           
 21244                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 21245  0099AA  0E0F               	movlw	15
 21246  0099AC  ECDF  F04B         	call	_lcdInst
 21247  0099B0  0012               	return		;funcret
 21248  0099B2                     __end_of_initLCD:
 21249                           	opt stack 0
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           postinc0	equ	0xFEE
 21258                           wreg	equ	0xFE8
 21259                           postinc1	equ	0xFE6
 21260                           postdec1	equ	0xFE5
 21261                           plusw1	equ	0xFE3
 21262                           fsr1h	equ	0xFE2
 21263                           fsr1l	equ	0xFE1
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           plusw2	equ	0xFDB
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function _lcdInst *****************
 21273 ;; Defined at:
 21274 ;;		line 13 in file "LCD.c"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;  data            1    wreg     unsigned char 
 21277 ;; Auto vars:     Size  Location     Type
 21278 ;;  data            1    2[COMRAM] unsigned char 
 21279 ;; Return value:  Size  Location     Type
 21280 ;;                  1    wreg      void 
 21281 ;; Registers used:
 21282 ;;		wreg, status,2, status,0, cstack
 21283 ;; Tracked objects:
 21284 ;;		On entry : 0/0
 21285 ;;		On exit  : 0/0
 21286 ;;		Unchanged: 0/0
 21287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;Total ram usage:        1 bytes
 21293 ;; Hardware stack levels used:    1
 21294 ;; Hardware stack levels required when called:    1
 21295 ;; This function calls:
 21296 ;;		_lcdNibble
 21297 ;; This function is called by:
 21298 ;;		_main
 21299 ;;		_mainOperation
 21300 ;;		_viewLogs
 21301 ;;		_displayLogs
 21302 ;;		_food_press
 21303 ;;		_diet_press
 21304 ;;		_which_drawer
 21305 ;;		_standbyMode
 21306 ;;		_initLCD
 21307 ;; This function uses a non-reentrant model
 21308 ;;
 21309                           
 21310                           	psect	text51
 21311  0097BE                     __ptext51:
 21312                           	opt stack 0
 21313  0097BE                     _lcdInst:
 21314                           	opt stack 27
 21315                           
 21316                           ;incstack = 0
 21317                           ;lcdInst@data stored from wreg
 21318  0097BE  6E03               	movwf	lcdInst@data,c
 21319                           
 21320                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 21321  0097C0  948C               	bcf	3980,2,c	;volatile
 21322                           
 21323                           ;LCD.c: 22: lcdNibble(data);
 21324  0097C2  5003               	movf	lcdInst@data,w,c
 21325  0097C4  EC27  F04E         	call	_lcdNibble
 21326                           
 21327                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 21328  0097C8  0EC8               	movlw	200
 21329  0097CA                     u15507:
 21330  0097CA  D000               	nop2	
 21331  0097CC  2EE8               	decfsz	wreg,f,c
 21332  0097CE  D7FD               	bra	u15507
 21333  0097D0  0012               	return		;funcret
 21334  0097D2                     __end_of_lcdInst:
 21335                           	opt stack 0
 21336                           tblptru	equ	0xFF8
 21337                           tblptrh	equ	0xFF7
 21338                           tblptrl	equ	0xFF6
 21339                           tablat	equ	0xFF5
 21340                           prodh	equ	0xFF4
 21341                           prodl	equ	0xFF3
 21342                           intcon	equ	0xFF2
 21343                           postinc0	equ	0xFEE
 21344                           wreg	equ	0xFE8
 21345                           postinc1	equ	0xFE6
 21346                           postdec1	equ	0xFE5
 21347                           plusw1	equ	0xFE3
 21348                           fsr1h	equ	0xFE2
 21349                           fsr1l	equ	0xFE1
 21350                           indf2	equ	0xFDF
 21351                           postinc2	equ	0xFDE
 21352                           postdec2	equ	0xFDD
 21353                           plusw2	equ	0xFDB
 21354                           fsr2h	equ	0xFDA
 21355                           fsr2l	equ	0xFD9
 21356                           status	equ	0xFD8
 21357                           
 21358 ;; *************** function _lcdNibble *****************
 21359 ;; Defined at:
 21360 ;;		line 48 in file "LCD.c"
 21361 ;; Parameters:    Size  Location     Type
 21362 ;;  data            1    wreg     unsigned char 
 21363 ;; Auto vars:     Size  Location     Type
 21364 ;;  data            1    1[COMRAM] unsigned char 
 21365 ;;  temp            1    0[COMRAM] unsigned char 
 21366 ;; Return value:  Size  Location     Type
 21367 ;;                  1    wreg      void 
 21368 ;; Registers used:
 21369 ;;		wreg, status,2, status,0
 21370 ;; Tracked objects:
 21371 ;;		On entry : 0/0
 21372 ;;		On exit  : 0/0
 21373 ;;		Unchanged: 0/0
 21374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;Total ram usage:        2 bytes
 21380 ;; Hardware stack levels used:    1
 21381 ;; This function calls:
 21382 ;;		Nothing
 21383 ;; This function is called by:
 21384 ;;		_lcdInst
 21385 ;;		_putch
 21386 ;; This function uses a non-reentrant model
 21387 ;;
 21388                           
 21389                           	psect	text52
 21390  009C4E                     __ptext52:
 21391                           	opt stack 0
 21392  009C4E                     _lcdNibble:
 21393                           	opt stack 27
 21394                           
 21395                           ;incstack = 0
 21396                           ;lcdNibble@data stored from wreg
 21397  009C4E  6E02               	movwf	lcdNibble@data,c
 21398                           
 21399                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 21400  009C50  5002               	movf	lcdNibble@data,w,c
 21401  009C52  0BF0               	andlw	240
 21402  009C54  6E01               	movwf	lcdNibble@temp,c
 21403                           
 21404                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 21405  009C56  508C               	movf	3980,w,c	;volatile
 21406  009C58  0B0F               	andlw	15
 21407  009C5A  6E8C               	movwf	3980,c	;volatile
 21408                           
 21409                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 21410  009C5C  5001               	movf	lcdNibble@temp,w,c
 21411  009C5E  108C               	iorwf	3980,w,c	;volatile
 21412  009C60  6E8C               	movwf	3980,c	;volatile
 21413                           
 21414                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 21415  009C62  0E00               	movlw	0
 21416  009C64  BEF2               	btfsc	intcon,7,c	;volatile
 21417  009C66  0E01               	movlw	1
 21418  009C68  6E78               	movwf	_LCDinterruptState,c
 21419  009C6A  9EF2               	bcf	intcon,7,c	;volatile
 21420  009C6C  868C               	bsf	3980,3,c	;volatile
 21421  009C6E  0E53               	movlw	83
 21422  009C70                     u15517:
 21423  009C70  2EE8               	decfsz	wreg,f,c
 21424  009C72  D7FE               	bra	u15517
 21425  009C74  F000               	nop	
 21426  009C76  968C               	bcf	3980,3,c	;volatile
 21427  009C78  0EC8               	movlw	200
 21428  009C7A                     u15527:
 21429  009C7A  D000               	nop2	
 21430  009C7C  2EE8               	decfsz	wreg,f,c
 21431  009C7E  D7FD               	bra	u15527
 21432  009C80  B078               	btfsc	_LCDinterruptState,0,c
 21433  009C82  D002               	bra	u7115
 21434  009C84  9EF2               	bcf	intcon,7,c	;volatile
 21435  009C86  D001               	bra	u7116
 21436  009C88                     u7115:
 21437  009C88  8EF2               	bsf	intcon,7,c	;volatile
 21438  009C8A                     u7116:
 21439                           
 21440                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 21441  009C8A  3802               	swapf	lcdNibble@data,w,c
 21442  009C8C  0BF0               	andlw	240
 21443  009C8E  6E02               	movwf	lcdNibble@data,c
 21444                           
 21445                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 21446  009C90  5002               	movf	lcdNibble@data,w,c
 21447  009C92  0BF0               	andlw	240
 21448  009C94  6E01               	movwf	lcdNibble@temp,c
 21449                           
 21450                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 21451  009C96  508C               	movf	3980,w,c	;volatile
 21452  009C98  0B0F               	andlw	15
 21453  009C9A  6E8C               	movwf	3980,c	;volatile
 21454                           
 21455                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 21456  009C9C  5001               	movf	lcdNibble@temp,w,c
 21457  009C9E  108C               	iorwf	3980,w,c	;volatile
 21458  009CA0  6E8C               	movwf	3980,c	;volatile
 21459                           
 21460                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 21461  009CA2  0E00               	movlw	0
 21462  009CA4  BEF2               	btfsc	intcon,7,c	;volatile
 21463  009CA6  0E01               	movlw	1
 21464  009CA8  6E78               	movwf	_LCDinterruptState,c
 21465  009CAA  9EF2               	bcf	intcon,7,c	;volatile
 21466  009CAC  868C               	bsf	3980,3,c	;volatile
 21467  009CAE  0E53               	movlw	83
 21468  009CB0                     u15537:
 21469  009CB0  2EE8               	decfsz	wreg,f,c
 21470  009CB2  D7FE               	bra	u15537
 21471  009CB4  F000               	nop	
 21472  009CB6  968C               	bcf	3980,3,c	;volatile
 21473  009CB8  0EC8               	movlw	200
 21474  009CBA                     u15547:
 21475  009CBA  D000               	nop2	
 21476  009CBC  2EE8               	decfsz	wreg,f,c
 21477  009CBE  D7FD               	bra	u15547
 21478  009CC0  B078               	btfsc	_LCDinterruptState,0,c
 21479  009CC2  D002               	bra	u7125
 21480  009CC4  9EF2               	bcf	intcon,7,c	;volatile
 21481  009CC6  D001               	bra	u7126
 21482  009CC8                     u7125:
 21483  009CC8  8EF2               	bsf	intcon,7,c	;volatile
 21484  009CCA                     u7126:
 21485  009CCA  0012               	return		;funcret
 21486  009CCC                     __end_of_lcdNibble:
 21487                           	opt stack 0
 21488                           tblptru	equ	0xFF8
 21489                           tblptrh	equ	0xFF7
 21490                           tblptrl	equ	0xFF6
 21491                           tablat	equ	0xFF5
 21492                           prodh	equ	0xFF4
 21493                           prodl	equ	0xFF3
 21494                           intcon	equ	0xFF2
 21495                           postinc0	equ	0xFEE
 21496                           wreg	equ	0xFE8
 21497                           postinc1	equ	0xFE6
 21498                           postdec1	equ	0xFE5
 21499                           plusw1	equ	0xFE3
 21500                           fsr1h	equ	0xFE2
 21501                           fsr1l	equ	0xFE1
 21502                           indf2	equ	0xFDF
 21503                           postinc2	equ	0xFDE
 21504                           postdec2	equ	0xFDD
 21505                           plusw2	equ	0xFDB
 21506                           fsr2h	equ	0xFDA
 21507                           fsr2l	equ	0xFD9
 21508                           status	equ	0xFD8
 21509                           
 21510 ;; *************** function _initEEPROM *****************
 21511 ;; Defined at:
 21512 ;;		line 40 in file "EEPROMstorage.c"
 21513 ;; Parameters:    Size  Location     Type
 21514 ;;		None
 21515 ;; Auto vars:     Size  Location     Type
 21516 ;;  i               2    2[COMRAM] unsigned int 
 21517 ;; Return value:  Size  Location     Type
 21518 ;;                  1    wreg      void 
 21519 ;; Registers used:
 21520 ;;		wreg, status,2, status,0, cstack
 21521 ;; Tracked objects:
 21522 ;;		On entry : 0/0
 21523 ;;		On exit  : 0/0
 21524 ;;		Unchanged: 0/0
 21525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21530 ;;Total ram usage:        2 bytes
 21531 ;; Hardware stack levels used:    1
 21532 ;; Hardware stack levels required when called:    1
 21533 ;; This function calls:
 21534 ;;		_writeEEPROM
 21535 ;; This function is called by:
 21536 ;;		_main
 21537 ;; This function uses a non-reentrant model
 21538 ;;
 21539                           
 21540                           	psect	text53
 21541  00983C                     __ptext53:
 21542                           	opt stack 0
 21543  00983C                     _initEEPROM:
 21544                           	opt stack 29
 21545                           
 21546                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 21547                           
 21548                           ;incstack = 0
 21549  00983C  0E00               	movlw	0
 21550  00983E  6E04               	movwf	initEEPROM@i+1,c
 21551  009840  0E00               	movlw	0
 21552  009842  6E03               	movwf	initEEPROM@i,c
 21553                           
 21554                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 21555  009844  0E00               	movlw	0
 21556  009846  6E04               	movwf	initEEPROM@i+1,c
 21557  009848  0E00               	movlw	0
 21558  00984A  6E03               	movwf	initEEPROM@i,c
 21559  00984C                     l10124:
 21560  00984C  0404               	decf	initEEPROM@i+1,w,c
 21561  00984E  B0D8               	btfsc	status,0,c
 21562  009850  0012               	return	
 21563                           
 21564                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 21565  009852  0E00               	movlw	0
 21566  009854  6E01               	movwf	writeEEPROM@data,c
 21567  009856  5003               	movf	initEEPROM@i,w,c
 21568  009858  EC44  F04C         	call	_writeEEPROM
 21569  00985C  4A03               	infsnz	initEEPROM@i,f,c
 21570  00985E  2A04               	incf	initEEPROM@i+1,f,c
 21571  009860  D7F5               	goto	l10124
 21572  009862                     __end_of_initEEPROM:
 21573                           	opt stack 0
 21574                           tblptru	equ	0xFF8
 21575                           tblptrh	equ	0xFF7
 21576                           tblptrl	equ	0xFF6
 21577                           tablat	equ	0xFF5
 21578                           prodh	equ	0xFF4
 21579                           prodl	equ	0xFF3
 21580                           intcon	equ	0xFF2
 21581                           postinc0	equ	0xFEE
 21582                           wreg	equ	0xFE8
 21583                           postinc1	equ	0xFE6
 21584                           postdec1	equ	0xFE5
 21585                           plusw1	equ	0xFE3
 21586                           fsr1h	equ	0xFE2
 21587                           fsr1l	equ	0xFE1
 21588                           indf2	equ	0xFDF
 21589                           postinc2	equ	0xFDE
 21590                           postdec2	equ	0xFDD
 21591                           plusw2	equ	0xFDB
 21592                           fsr2h	equ	0xFDA
 21593                           fsr2l	equ	0xFD9
 21594                           status	equ	0xFD8
 21595                           
 21596 ;; *************** function _writeEEPROM *****************
 21597 ;; Defined at:
 21598 ;;		line 10 in file "EEPROMstorage.c"
 21599 ;; Parameters:    Size  Location     Type
 21600 ;;  address         1    wreg     unsigned char 
 21601 ;;  data            1    0[COMRAM] unsigned char 
 21602 ;; Auto vars:     Size  Location     Type
 21603 ;;  address         1    1[COMRAM] unsigned char 
 21604 ;; Return value:  Size  Location     Type
 21605 ;;                  1    wreg      void 
 21606 ;; Registers used:
 21607 ;;		wreg, status,2
 21608 ;; Tracked objects:
 21609 ;;		On entry : 0/0
 21610 ;;		On exit  : 0/0
 21611 ;;		Unchanged: 0/0
 21612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21613 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;Total ram usage:        2 bytes
 21618 ;; Hardware stack levels used:    1
 21619 ;; This function calls:
 21620 ;;		Nothing
 21621 ;; This function is called by:
 21622 ;;		_standbyMode
 21623 ;;		_initEEPROM
 21624 ;;		_shiftEEPROM
 21625 ;; This function uses a non-reentrant model
 21626 ;;
 21627                           
 21628                           	psect	text54
 21629  009888                     __ptext54:
 21630                           	opt stack 0
 21631  009888                     _writeEEPROM:
 21632                           	opt stack 29
 21633                           
 21634                           ;incstack = 0
 21635                           ;writeEEPROM@address stored from wreg
 21636  009888  6E02               	movwf	writeEEPROM@address,c
 21637  00988A                     
 21638                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 21639  00988A  B2A6               	btfsc	4006,1,c	;volsfr
 21640  00988C  D7FE               	goto	l7836
 21641                           
 21642                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 21643  00988E  84A6               	bsf	4006,2,c	;volsfr
 21644                           
 21645                           ;EEPROMstorage.c: 14: EEADR=address;
 21646  009890  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 21647                           
 21648                           ;EEPROMstorage.c: 15: EEDATA=data;
 21649  009894  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 21650                           
 21651                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 21652  009898  9EA6               	bcf	4006,7,c	;volsfr
 21653                           
 21654                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 21655  00989A  9CA6               	bcf	4006,6,c	;volsfr
 21656                           
 21657                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 21658  00989C  9EF2               	bcf	intcon,7,c	;volatile
 21659                           
 21660                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 21661  00989E  0E55               	movlw	85
 21662  0098A0  6EA7               	movwf	4007,c	;volsfr
 21663                           
 21664                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 21665  0098A2  0EAA               	movlw	170
 21666  0098A4  6EA7               	movwf	4007,c	;volsfr
 21667                           
 21668                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 21669  0098A6  82A6               	bsf	4006,1,c	;volsfr
 21670                           
 21671                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 21672  0098A8  8EF2               	bsf	intcon,7,c	;volatile
 21673  0098AA  B2A6               	btfsc	4006,1,c	;volsfr
 21674  0098AC  D7FE               	goto	l1341
 21675                           
 21676                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 21677  0098AE  94A6               	bcf	4006,2,c	;volsfr
 21678  0098B0  0012               	return		;funcret
 21679  0098B2                     __end_of_writeEEPROM:
 21680                           	opt stack 0
 21681                           tblptru	equ	0xFF8
 21682                           tblptrh	equ	0xFF7
 21683                           tblptrl	equ	0xFF6
 21684                           tablat	equ	0xFF5
 21685                           prodh	equ	0xFF4
 21686                           prodl	equ	0xFF3
 21687                           intcon	equ	0xFF2
 21688                           postinc0	equ	0xFEE
 21689                           wreg	equ	0xFE8
 21690                           postinc1	equ	0xFE6
 21691                           postdec1	equ	0xFE5
 21692                           plusw1	equ	0xFE3
 21693                           fsr1h	equ	0xFE2
 21694                           fsr1l	equ	0xFE1
 21695                           indf2	equ	0xFDF
 21696                           postinc2	equ	0xFDE
 21697                           postdec2	equ	0xFDD
 21698                           plusw2	equ	0xFDB
 21699                           fsr2h	equ	0xFDA
 21700                           fsr2l	equ	0xFD9
 21701                           status	equ	0xFD8
 21702                           
 21703 ;; *************** function _UART_Init *****************
 21704 ;; Defined at:
 21705 ;;		line 197 in file "UART_PIC.c"
 21706 ;; Parameters:    Size  Location     Type
 21707 ;;  baud            4   14[COMRAM] long 
 21708 ;; Auto vars:     Size  Location     Type
 21709 ;;		None
 21710 ;; Return value:  Size  Location     Type
 21711 ;;                  1    wreg      void 
 21712 ;; Registers used:
 21713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21714 ;; Tracked objects:
 21715 ;;		On entry : 0/0
 21716 ;;		On exit  : 0/0
 21717 ;;		Unchanged: 0/0
 21718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21721 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21722 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21723 ;;Total ram usage:        8 bytes
 21724 ;; Hardware stack levels used:    1
 21725 ;; Hardware stack levels required when called:    1
 21726 ;; This function calls:
 21727 ;;		___aldiv
 21728 ;; This function is called by:
 21729 ;;		_main
 21730 ;; This function uses a non-reentrant model
 21731 ;;
 21732                           
 21733                           	psect	text55
 21734  009D4E                     __ptext55:
 21735                           	opt stack 0
 21736  009D4E                     _UART_Init:
 21737                           	opt stack 29
 21738                           
 21739                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 21740                           
 21741                           ;incstack = 0
 21742  009D4E  0E00               	movlw	0
 21743  009D50  6E01               	movwf	___aldiv@dividend,c
 21744  009D52  0E5A               	movlw	90
 21745  009D54  6E02               	movwf	___aldiv@dividend+1,c
 21746  009D56  0E62               	movlw	98
 21747  009D58  6E03               	movwf	___aldiv@dividend+2,c
 21748  009D5A  0E02               	movlw	2
 21749  009D5C  6E04               	movwf	___aldiv@dividend+3,c
 21750  009D5E  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 21751  009D62  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 21752  009D66  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 21753  009D6A  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 21754  009D6E  0E06               	movlw	6
 21755  009D70                     u13405:
 21756  009D70  90D8               	bcf	status,0,c
 21757  009D72  3613               	rlcf	??_UART_Init,f,c
 21758  009D74  3614               	rlcf	??_UART_Init+1,f,c
 21759  009D76  3615               	rlcf	??_UART_Init+2,f,c
 21760  009D78  3616               	rlcf	??_UART_Init+3,f,c
 21761  009D7A  2EE8               	decfsz	wreg,f,c
 21762  009D7C  D7F9               	goto	u13405
 21763  009D7E  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 21764  009D82  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 21765  009D86  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 21766  009D8A  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 21767  009D8E  EC21  F051         	call	___aldiv	;wreg free
 21768  009D92  0401               	decf	?___aldiv,w,c
 21769  009D94  6EAF               	movwf	4015,c	;volatile
 21770                           
 21771                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 21772  009D96  9CAC               	bcf	4012,6,c	;volatile
 21773                           
 21774                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 21775  009D98  98AC               	bcf	4012,4,c	;volatile
 21776                           
 21777                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 21778  009D9A  8AAC               	bsf	4012,5,c	;volatile
 21779                           
 21780                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 21781  009D9C  9CAB               	bcf	4011,6,c	;volatile
 21782                           
 21783                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 21784  009D9E  88AB               	bsf	4011,4,c	;volatile
 21785                           
 21786                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 21787  009DA0  EE20 F008          	lfsr	2,8
 21788  009DA4  506E               	movf	_UART,w,c
 21789  009DA6  26D9               	addwf	fsr2l,f,c
 21790  009DA8  506F               	movf	_UART+1,w,c
 21791  009DAA  22DA               	addwfc	fsr2h,f,c
 21792  009DAC  0E01               	movlw	1
 21793  009DAE  6EDF               	movwf	indf2,c
 21794                           
 21795                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 21796  009DB0  EE20 F009          	lfsr	2,9
 21797  009DB4  506E               	movf	_UART,w,c
 21798  009DB6  26D9               	addwf	fsr2l,f,c
 21799  009DB8  506F               	movf	_UART+1,w,c
 21800  009DBA  22DA               	addwfc	fsr2h,f,c
 21801  009DBC  0E01               	movlw	1
 21802  009DBE  6EDF               	movwf	indf2,c
 21803                           
 21804                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 21805  009DC0  0E40               	movlw	low _arr_dataRX
 21806  009DC2  0101               	movlb	1	; () banked
 21807  009DC4  6FF6               	movwf	(_uart+4)& (0+255),b	;volatile
 21808  009DC6  0E02               	movlw	high _arr_dataRX
 21809  009DC8  6FF7               	movwf	(_uart+5)& (0+255),b	;volatile
 21810                           
 21811                           ; BSR set to: 1
 21812                           ;UART_PIC.c: 229: TRISC6 = 0;
 21813  009DCA  9C94               	bcf	3988,6,c	;volatile
 21814                           
 21815                           ; BSR set to: 1
 21816                           ;UART_PIC.c: 230: TRISC7 = 1;
 21817  009DCC  8E94               	bsf	3988,7,c	;volatile
 21818                           
 21819                           ; BSR set to: 1
 21820                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 21821  009DCE  8EAB               	bsf	4011,7,c	;volatile
 21822                           
 21823                           ; BSR set to: 1
 21824  009DD0  0012               	return		;funcret
 21825  009DD2                     __end_of_UART_Init:
 21826                           	opt stack 0
 21827                           tblptru	equ	0xFF8
 21828                           tblptrh	equ	0xFF7
 21829                           tblptrl	equ	0xFF6
 21830                           tablat	equ	0xFF5
 21831                           prodh	equ	0xFF4
 21832                           prodl	equ	0xFF3
 21833                           intcon	equ	0xFF2
 21834                           postinc0	equ	0xFEE
 21835                           wreg	equ	0xFE8
 21836                           postinc1	equ	0xFE6
 21837                           postdec1	equ	0xFE5
 21838                           plusw1	equ	0xFE3
 21839                           fsr1h	equ	0xFE2
 21840                           fsr1l	equ	0xFE1
 21841                           indf2	equ	0xFDF
 21842                           postinc2	equ	0xFDE
 21843                           postdec2	equ	0xFDD
 21844                           plusw2	equ	0xFDB
 21845                           fsr2h	equ	0xFDA
 21846                           fsr2l	equ	0xFD9
 21847                           status	equ	0xFD8
 21848                           
 21849 ;; *************** function ___aldiv *****************
 21850 ;; Defined at:
 21851 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 21852 ;; Parameters:    Size  Location     Type
 21853 ;;  dividend        4    0[COMRAM] long 
 21854 ;;  divisor         4    4[COMRAM] long 
 21855 ;; Auto vars:     Size  Location     Type
 21856 ;;  quotient        4   10[COMRAM] long 
 21857 ;;  sign            1    9[COMRAM] unsigned char 
 21858 ;;  counter         1    8[COMRAM] unsigned char 
 21859 ;; Return value:  Size  Location     Type
 21860 ;;                  4    0[COMRAM] long 
 21861 ;; Registers used:
 21862 ;;		wreg, status,2, status,0
 21863 ;; Tracked objects:
 21864 ;;		On entry : 0/0
 21865 ;;		On exit  : 0/0
 21866 ;;		Unchanged: 0/0
 21867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21868 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21871 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21872 ;;Total ram usage:       14 bytes
 21873 ;; Hardware stack levels used:    1
 21874 ;; This function calls:
 21875 ;;		Nothing
 21876 ;; This function is called by:
 21877 ;;		_UART_Init
 21878 ;; This function uses a non-reentrant model
 21879 ;;
 21880                           
 21881                           	psect	text56
 21882  00A242                     __ptext56:
 21883                           	opt stack 0
 21884  00A242                     ___aldiv:
 21885                           	opt stack 29
 21886                           
 21887                           ; BSR set to: 1
 21888                           ;incstack = 0
 21889  00A242  0E00               	movlw	0
 21890  00A244  6E0A               	movwf	___aldiv@sign,c
 21891  00A246  AE08               	btfss	___aldiv@divisor+3,7,c
 21892  00A248  D00A               	goto	l1709
 21893  00A24A  1E08               	comf	___aldiv@divisor+3,f,c
 21894  00A24C  1E07               	comf	___aldiv@divisor+2,f,c
 21895  00A24E  1E06               	comf	___aldiv@divisor+1,f,c
 21896  00A250  6C05               	negf	___aldiv@divisor,c
 21897  00A252  0E00               	movlw	0
 21898  00A254  2206               	addwfc	___aldiv@divisor+1,f,c
 21899  00A256  2207               	addwfc	___aldiv@divisor+2,f,c
 21900  00A258  2208               	addwfc	___aldiv@divisor+3,f,c
 21901  00A25A  0E01               	movlw	1
 21902  00A25C  6E0A               	movwf	___aldiv@sign,c
 21903  00A25E                     l1709:
 21904  00A25E  AE04               	btfss	___aldiv@dividend+3,7,c
 21905  00A260  D00A               	goto	l1710
 21906  00A262  1E04               	comf	___aldiv@dividend+3,f,c
 21907  00A264  1E03               	comf	___aldiv@dividend+2,f,c
 21908  00A266  1E02               	comf	___aldiv@dividend+1,f,c
 21909  00A268  6C01               	negf	___aldiv@dividend,c
 21910  00A26A  0E00               	movlw	0
 21911  00A26C  2202               	addwfc	___aldiv@dividend+1,f,c
 21912  00A26E  2203               	addwfc	___aldiv@dividend+2,f,c
 21913  00A270  2204               	addwfc	___aldiv@dividend+3,f,c
 21914  00A272  0E01               	movlw	1
 21915  00A274  1A0A               	xorwf	___aldiv@sign,f,c
 21916  00A276                     l1710:
 21917  00A276  0E00               	movlw	0
 21918  00A278  6E0B               	movwf	___aldiv@quotient,c
 21919  00A27A  0E00               	movlw	0
 21920  00A27C  6E0C               	movwf	___aldiv@quotient+1,c
 21921  00A27E  0E00               	movlw	0
 21922  00A280  6E0D               	movwf	___aldiv@quotient+2,c
 21923  00A282  0E00               	movlw	0
 21924  00A284  6E0E               	movwf	___aldiv@quotient+3,c
 21925  00A286  5005               	movf	___aldiv@divisor,w,c
 21926  00A288  1006               	iorwf	___aldiv@divisor+1,w,c
 21927  00A28A  1007               	iorwf	___aldiv@divisor+2,w,c
 21928  00A28C  1008               	iorwf	___aldiv@divisor+3,w,c
 21929  00A28E  B4D8               	btfsc	status,2,c
 21930  00A290  D02A               	goto	l1717
 21931  00A292  0E01               	movlw	1
 21932  00A294  6E09               	movwf	___aldiv@counter,c
 21933  00A296  D006               	goto	l1712
 21934  00A298  90D8               	bcf	status,0,c
 21935  00A29A  3605               	rlcf	___aldiv@divisor,f,c
 21936  00A29C  3606               	rlcf	___aldiv@divisor+1,f,c
 21937  00A29E  3607               	rlcf	___aldiv@divisor+2,f,c
 21938  00A2A0  3608               	rlcf	___aldiv@divisor+3,f,c
 21939  00A2A2  2A09               	incf	___aldiv@counter,f,c
 21940  00A2A4                     l1712:
 21941  00A2A4  AE08               	btfss	___aldiv@divisor+3,7,c
 21942  00A2A6  D7F8               	goto	l1713
 21943  00A2A8                     u13370:
 21944  00A2A8  90D8               	bcf	status,0,c
 21945  00A2AA  360B               	rlcf	___aldiv@quotient,f,c
 21946  00A2AC  360C               	rlcf	___aldiv@quotient+1,f,c
 21947  00A2AE  360D               	rlcf	___aldiv@quotient+2,f,c
 21948  00A2B0  360E               	rlcf	___aldiv@quotient+3,f,c
 21949  00A2B2  5005               	movf	___aldiv@divisor,w,c
 21950  00A2B4  5C01               	subwf	___aldiv@dividend,w,c
 21951  00A2B6  5006               	movf	___aldiv@divisor+1,w,c
 21952  00A2B8  5802               	subwfb	___aldiv@dividend+1,w,c
 21953  00A2BA  5007               	movf	___aldiv@divisor+2,w,c
 21954  00A2BC  5803               	subwfb	___aldiv@dividend+2,w,c
 21955  00A2BE  5008               	movf	___aldiv@divisor+3,w,c
 21956  00A2C0  5804               	subwfb	___aldiv@dividend+3,w,c
 21957  00A2C2  A0D8               	btfss	status,0,c
 21958  00A2C4  D009               	goto	l1716
 21959  00A2C6  5005               	movf	___aldiv@divisor,w,c
 21960  00A2C8  5E01               	subwf	___aldiv@dividend,f,c
 21961  00A2CA  5006               	movf	___aldiv@divisor+1,w,c
 21962  00A2CC  5A02               	subwfb	___aldiv@dividend+1,f,c
 21963  00A2CE  5007               	movf	___aldiv@divisor+2,w,c
 21964  00A2D0  5A03               	subwfb	___aldiv@dividend+2,f,c
 21965  00A2D2  5008               	movf	___aldiv@divisor+3,w,c
 21966  00A2D4  5A04               	subwfb	___aldiv@dividend+3,f,c
 21967  00A2D6  800B               	bsf	___aldiv@quotient,0,c
 21968  00A2D8                     l1716:
 21969  00A2D8  90D8               	bcf	status,0,c
 21970  00A2DA  3208               	rrcf	___aldiv@divisor+3,f,c
 21971  00A2DC  3207               	rrcf	___aldiv@divisor+2,f,c
 21972  00A2DE  3206               	rrcf	___aldiv@divisor+1,f,c
 21973  00A2E0  3205               	rrcf	___aldiv@divisor,f,c
 21974  00A2E2  2E09               	decfsz	___aldiv@counter,f,c
 21975  00A2E4  D7E1               	goto	u13370
 21976  00A2E6                     l1717:
 21977  00A2E6  500A               	movf	___aldiv@sign,w,c
 21978  00A2E8  B4D8               	btfsc	status,2,c
 21979  00A2EA  D008               	goto	l1718
 21980  00A2EC  1E0E               	comf	___aldiv@quotient+3,f,c
 21981  00A2EE  1E0D               	comf	___aldiv@quotient+2,f,c
 21982  00A2F0  1E0C               	comf	___aldiv@quotient+1,f,c
 21983  00A2F2  6C0B               	negf	___aldiv@quotient,c
 21984  00A2F4  0E00               	movlw	0
 21985  00A2F6  220C               	addwfc	___aldiv@quotient+1,f,c
 21986  00A2F8  220D               	addwfc	___aldiv@quotient+2,f,c
 21987  00A2FA  220E               	addwfc	___aldiv@quotient+3,f,c
 21988  00A2FC                     l1718:
 21989  00A2FC  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 21990  00A300  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 21991  00A304  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 21992  00A308  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 21993  00A30C  0012               	return	
 21994  00A30E                     __end_of___aldiv:
 21995                           	opt stack 0
 21996                           tblptru	equ	0xFF8
 21997                           tblptrh	equ	0xFF7
 21998                           tblptrl	equ	0xFF6
 21999                           tablat	equ	0xFF5
 22000                           prodh	equ	0xFF4
 22001                           prodl	equ	0xFF3
 22002                           intcon	equ	0xFF2
 22003                           postinc0	equ	0xFEE
 22004                           wreg	equ	0xFE8
 22005                           postinc1	equ	0xFE6
 22006                           postdec1	equ	0xFE5
 22007                           plusw1	equ	0xFE3
 22008                           fsr1h	equ	0xFE2
 22009                           fsr1l	equ	0xFE1
 22010                           indf2	equ	0xFDF
 22011                           postinc2	equ	0xFDE
 22012                           postdec2	equ	0xFDD
 22013                           plusw2	equ	0xFDB
 22014                           fsr2h	equ	0xFDA
 22015                           fsr2l	equ	0xFD9
 22016                           status	equ	0xFD8
 22017                           tblptru	equ	0xFF8
 22018                           tblptrh	equ	0xFF7
 22019                           tblptrl	equ	0xFF6
 22020                           tablat	equ	0xFF5
 22021                           prodh	equ	0xFF4
 22022                           prodl	equ	0xFF3
 22023                           intcon	equ	0xFF2
 22024                           postinc0	equ	0xFEE
 22025                           wreg	equ	0xFE8
 22026                           postinc1	equ	0xFE6
 22027                           postdec1	equ	0xFE5
 22028                           plusw1	equ	0xFE3
 22029                           fsr1h	equ	0xFE2
 22030                           fsr1l	equ	0xFE1
 22031                           indf2	equ	0xFDF
 22032                           postinc2	equ	0xFDE
 22033                           postdec2	equ	0xFDD
 22034                           plusw2	equ	0xFDB
 22035                           fsr2h	equ	0xFDA
 22036                           fsr2l	equ	0xFD9
 22037                           status	equ	0xFD8
 22038                           
 22039                           	psect	rparam
 22040  0000                     tblptru	equ	0xFF8
 22041                           tblptrh	equ	0xFF7
 22042                           tblptrl	equ	0xFF6
 22043                           tablat	equ	0xFF5
 22044                           prodh	equ	0xFF4
 22045                           prodl	equ	0xFF3
 22046                           intcon	equ	0xFF2
 22047                           postinc0	equ	0xFEE
 22048                           wreg	equ	0xFE8
 22049                           postinc1	equ	0xFE6
 22050                           postdec1	equ	0xFE5
 22051                           plusw1	equ	0xFE3
 22052                           fsr1h	equ	0xFE2
 22053                           fsr1l	equ	0xFE1
 22054                           indf2	equ	0xFDF
 22055                           postinc2	equ	0xFDE
 22056                           postdec2	equ	0xFDD
 22057                           plusw2	equ	0xFDB
 22058                           fsr2h	equ	0xFDA
 22059                           fsr2l	equ	0xFD9
 22060                           status	equ	0xFD8


Data Sizes:
    Strings     920
    Constant    65
    Data        72
    BSS         240
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     121
    BANK0           128     80     122
    BANK1           256    138     254
    BANK2           256      0     142
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    standbyMode$2391	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    standbyMode$2390	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    displayLogs$2389	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    displayLogs$2388	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    mainOperation$2387	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), 
		 -> STR_59(CODE[5]), STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), 
		 -> STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), 
		 -> STR_51(CODE[4]), STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), 
		 -> STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), STR_33(CODE[5]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[7]), STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), 
		 -> STR_68(CODE[3]), STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), 
		 -> STR_64(CODE[2]), STR_63(CODE[2]), STR_62(CODE[5]), STR_61(CODE[5]), 
		 -> STR_60(CODE[5]), STR_59(CODE[5]), STR_58(CODE[5]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), 
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[3]), STR_49(CODE[3]), 
		 -> STR_48(CODE[3]), STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), 
		 -> STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_152(CODE[11]), STR_151(CODE[13]), STR_150(CODE[11]), STR_149(CODE[13]), 
		 -> STR_148(CODE[11]), STR_147(CODE[15]), STR_146(CODE[15]), STR_145(CODE[5]), 
		 -> STR_144(CODE[11]), STR_143(CODE[8]), STR_142(CODE[11]), STR_141(CODE[14]), 
		 -> STR_140(CODE[17]), STR_139(CODE[8]), STR_138(CODE[15]), STR_137(CODE[16]), 
		 -> STR_136(CODE[10]), STR_135(CODE[8]), STR_134(CODE[15]), STR_133(CODE[16]), 
		 -> STR_132(CODE[10]), STR_131(CODE[16]), STR_130(CODE[16]), STR_129(CODE[17]), 
		 -> STR_128(CODE[13]), STR_127(CODE[17]), STR_126(CODE[14]), STR_125(CODE[11]), 
		 -> STR_124(CODE[11]), STR_123(CODE[15]), STR_122(CODE[15]), STR_121(CODE[10]), 
		 -> STR_120(CODE[13]), STR_119(CODE[16]), STR_118(CODE[16]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[8]), STR_114(CODE[15]), STR_113(CODE[15]), 
		 -> STR_112(CODE[11]), STR_111(CODE[14]), STR_110(CODE[16]), STR_109(CODE[16]), 
		 -> STR_108(CODE[11]), STR_107(CODE[14]), STR_106(CODE[16]), STR_105(CODE[16]), 
		 -> STR_104(CODE[16]), STR_103(CODE[13]), STR_102(CODE[5]), STR_101(CODE[11]), 
		 -> STR_100(CODE[15]), STR_99(CODE[17]), STR_98(CODE[18]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[7]), STR_94(CODE[3]), STR_93(CODE[16]), 
		 -> STR_92(CODE[8]), STR_91(CODE[16]), STR_90(CODE[15]), STR_89(CODE[6]), 
		 -> STR_88(CODE[14]), STR_87(CODE[17]), STR_86(CODE[7]), STR_85(CODE[9]), 
		 -> STR_84(CODE[17]), STR_83(CODE[11]), STR_82(CODE[17]), STR_81(CODE[14]), 
		 -> STR_80(CODE[17]), STR_79(CODE[11]), STR_78(CODE[15]), STR_77(CODE[11]), 
		 -> STR_76(CODE[8]), STR_44(CODE[11]), STR_43(CODE[16]), STR_42(CODE[4]), 
		 -> STR_41(CODE[13]), STR_40(CODE[10]), STR_39(CODE[10]), STR_38(CODE[15]), 
		 -> STR_37(CODE[9]), STR_36(CODE[9]), STR_35(CODE[10]), STR_34(CODE[10]), 
		 -> STR_2(CODE[16]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 1
		 -> drawerClose(COMRAM[1]), drawerOpen(COMRAM[1]), drawerDown(BANK0[1]), drawerUp(BANK0[1]), 
		 -> columnRight(COMRAM[1]), columnLeft(COMRAM[1]), rowDown(COMRAM[1]), rowUp(COMRAM[1]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK1[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    findDrawerIndex@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@sortedDrawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@sortedDrawerTable(BANK0[16]), 

    getUserInputs@foodTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@foodTable(BANK0[16]), 

    getUserInputs@dietTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@dietTable(BANK0[16]), 

    getUserInputs@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_sortDrawerList
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _moveVertically->_verticalStepper
    _moveHorizontally->_horizontalStepper
    _initArm->_horizontalStepper
    _initArm->_verticalStepper
    _verticalStepper->_uartTransmitBlocking
    _horizontalStepper->_uartTransmitBlocking
    _getUserInputs->___wmul
    _distributePieces->_distributeFlat
    _distributePieces->_distributeLong
    _distributePieces->_distributeRound
    _distributeRound->___wmul
    _distributeLong->___wmul
    _distributeFlat->___wmul
    _configDrawer->_uartTransmitBlocking
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_mainOperation

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  183279
                                             99 COMRAM    10    10      0
                          _UART_Init
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        144   142      2  106496
                                             93 COMRAM     6     4      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   14229
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   32989
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   19148
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   17124
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   15582
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                       82    82      0   61338
                                             56 COMRAM     2     2      0
                                              0 BANK0     80    80      0
                       _configDrawer
                   _distributePieces
                    _findDrawerIndex
                      _getFlatPieces
                      _getLongPieces
                     _getRoundPieces
                      _getUserInputs
                            _initArm
                            _lcdInst
                   _moveHorizontally
                     _moveVertically
                             _printf
                     _sortDrawerList
                           _trapDoor
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _trapDoor                                             6     4      2     197
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      56    52      4    5015
                                              0 COMRAM    56    52      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   12996
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _moveVertically                                       4     0      4    4605
                                             11 COMRAM     4     0      4
                    _verticalStepper
 ---------------------------------------------------------------------------------
 (2) _moveHorizontally                                     6     2      4    5335
                                             11 COMRAM     6     2      4
                  _horizontalStepper
 ---------------------------------------------------------------------------------
 (2) _initArm                                              2     0      2    8616
                                             11 COMRAM     2     0      2
                  _horizontalStepper
                    _verticalStepper
 ---------------------------------------------------------------------------------
 (3) _verticalStepper                                      6     2      4    3267
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (3) _horizontalStepper                                    6     2      4    4635
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       18    12      6    4351
                                              6 COMRAM    18    12      6
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getRoundPieces                                       8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getLongPieces                                        8     4      4     980
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getFlatPieces                                        8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _findDrawerIndex                                     10     6      4     311
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _distributePieces                                     8     2      6   11908
                                             11 COMRAM     8     2      6
                     _distributeFlat
                     _distributeLong
                    _distributeRound
 ---------------------------------------------------------------------------------
 (3) _distributeRound                                      5     3      2    3846
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _distributeLong                                       5     3      2    3922
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _distributeFlat                                       5     3      2    3846
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3647
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _configDrawer                                         2     0      2    2110
                                              5 COMRAM     2     0      2
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _uartTransmitBlocking                                 5     2      3    1762
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _configDrawer
       _uartTransmitBlocking
     _distributePieces
       _distributeFlat
         ___wmul
       _distributeLong
         ___wmul
       _distributeRound
         ___wmul
     _findDrawerIndex
     _getFlatPieces
     _getLongPieces
     _getRoundPieces
     _getUserInputs
       ___wmul
       _readEEPROM
     _initArm
       _horizontalStepper
         _uartTransmitBlocking
       _verticalStepper
         _uartTransmitBlocking
     _lcdInst
       _lcdNibble
     _moveHorizontally
       _horizontalStepper
         _uartTransmitBlocking
     _moveVertically
       _verticalStepper
         _uartTransmitBlocking
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
     _trapDoor
     _uartTransmitBlocking
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      8E      10       55.5%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8A      FE       8       99.2%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     50      7A       5       95.3%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      79       1       95.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27F       6        0.0%
DATA                 0      0     27F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 28 16:19:22 2018

                     _standbyMode EA50            __end_of_verifyKeypress 9A56  
                    ?_displayLogs 0029                                l83 AB74  
                     __CFG_CPD$ON 000000               ___wmul@multiplicand 0003  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l201 E5C0  
                             l202 E512                               l211 E6EC  
                             l203 E5B0                               l212 E63E  
                             l204 E51C                               l221 E7C4  
                             l213 E6DC                               l205 E5AC  
                             l150 A7FE                               l222 E716  
                             l214 E648                               l311 A9C8  
                             l231 E8EE                               l223 E7B4  
                             l215 E6D8                               l144 A738  
                             l232 E840                               l224 E720  
                             l313 A9DA                               l241 E986  
                             l233 E8DE                               l225 E7B0  
                             l242 E94A                               l234 E84A  
                             l323 AC92                               l147 A758  
                             l235 E8DA                               l163 E02E  
                             l324 AB9C                               l260 A92E  
                             l500 B8AA                               l244 E9E0  
                             l180 E374                               l253 9B2C  
                             l325 ABAC                               l405 B02E  
                             l261 A93E                               l245 E99C  
                             l181 E2C6                               l173 E212  
                             l165 E0CE                               l254 9B64  
                             l334 ABDA                               l270 A966  
                             l238 E934                               l190 E394  
                             l182 E364                               l255 9B54  
                             l351 AC1C                               l319 A9E6  
                             l511 B966                               l247 EA42  
                             l239 E904                               l191 E424  
                             l183 E2D0                               l600 9F08  
                             l352 AC26                               l328 ACEE  
                             l424 B088                               l416 B05A  
                             l264 AA4A                               l248 E9F6  
                             l184 E360                               l337 ABE0  
                             l329 ABBC                               l273 A96A  
                             l265 A942                               l177 E2B2  
                             l169 E170                               l338 ABF0  
                             l266 A952                               l530 AEB8  
                             l194 E4FC                               l611 AD44  
                             l363 AC54                               l355 AC2A  
                             l347 AC10                               l451 B0E8  
                             l435 B0AE                               l427 B08C  
                             l419 B06A                               l259 A9EE  
                             l291 A9A2                               l283 A994  
                             l195 E44E                               l187 E438  
                             l612 ACFA                               l364 AC5E  
                             l532 AEF0                               l508 B9B0  
                             l196 E4EC                               l188 E38A  
                             l605 A00C                               l621 AE40  
                             l381 AC86                               l461 9C1A  
                             l197 E458                               l189 E428  
                             l606 9FA8                               l622 ADCE  
                             l614 AD1E                               l462 9C0C  
                             l198 E4E8                               l710 D4E0  
                             l383 AC8A                               l367 AC62  
                             l455 B0F6                               l439 B0BA  
                             l295 A9A6                               l463 9BF8  
                             l551 BA9A                               l711 D4FA  
                             l624 ADF4                               l616 ADAE  
                             l480 9BBC                               l560 BB36  
                             l704 DEC6                               l720 D56C  
                             l625 AE1A                               l617 AD64  
                             l377 AC82                               l457 B0FA  
                             l449 B0E4                               l473 9BAA  
                             l537 AF6A                               l529 AF28  
                             l633 9A84                               l721 D59A  
                             l705 D4A8                               l394 B164  
                             l474 9B9C                               l546 BABA  
                             l650 CFF8                               l714 D518  
                             l706 D4C2                               l802 A504  
                             l619 AD88                               l387 B102  
                             l395 AFF8                               l475 9B88  
                             l467 9C40                               l555 BB56  
                             l539 AFA2                               l491 BA22  
                             l635 9AAA                               l731 D68E  
                             l723 D5CA                               l715 D532  
                             l396 B00A                               l388 AFE4  
                             l468 9C2C                               l564 BBF2  
                             l492 B8F4                               l804 A5C6  
                             l549 BA7A                               l741 D77A  
                             l733 D6BE                               l725 D5FA  
                             l717 D54E                               l709 DF4E  
                             l805 A4EA                               l398 B01C  
                             l558 BB16                               l830 A4F4  
                             l479 9BD0                               l567 BBB2  
                             l495 B860                               l647 CEEA  
                             l743 D7A8                               l735 D6EC  
                             l576 BC4E                               l760 D98C  
                             l752 D888                               l728 D630  
                             l840 A402                               l912 9A3A  
                             l593 A0AC                               l569 BBD2  
                             l649 D3D2                               l761 D9CC  
                             l753 D8C8                               l745 D7D6  
                             l729 D65E                               l833 A4FC  
                             l913 9A20                               l594 A048  
                             l578 BC6E                               l738 D720  
                             l914 9A36                               l922 BDB6  
                             l587 98CC                               l771 DB14  
                             l763 DA0E                               l739 D74C  
                             l780 DC1A                               l756 D90A  
                             l748 D806                               l908 A5F4  
                             l932 BE48                               l924 BDB0  
                             l781 DC5A                               l773 DB56  
                             l765 DA50                               l757 D94A  
                             l749 D846                               l837 A414  
                             l790 DD74                               l838 A3FA  
                             l599 9F6C                               l783 DC9C  
                             l839 A4D6                               l943 BF58  
                             l927 BE3C                               l919 BD0A  
                             l792 DDC8                               l776 DB98  
                             l768 DA92                               l872 A5FC  
                             l952 B5CC                               l785 DCDE  
                             l777 DBD8                               l769 DAD2  
                             l881 A5E2                               l794 DE1C  
                             l874 A6DC                               l970 B676  
                             l962 B630                               l938 BEB2  
                             l947 B5A4                               l939 BEBE  
                             l796 DE70                               l788 DD20  
                             l868 A40C                               l884 A5EA  
                             l956 B5E0                               l877 A5DA  
                             l990 B78E                               l982 B734  
                             l974 B69E                               l966 B64E  
                             l958 B608                               l994 B7CA  
                             l986 B75C                               l978 B6EE  
                    __CFG_CPB$OFF 000000        findDrawerIndex@drawerTable 0001  
                             wreg 000FE8      uartTransmitBlocking@numBytes 0003  
                   _mainOperation CE0E            mainOperation@dietTable 0090  
             distributeFlat@count 0007                      __CFG_LVP$OFF 000000  
             standbyMode@dietType 0130                      __CFG_WDT$OFF 000000  
                            l1001 CA06                              l1010 CB96  
                            l1011 CBDA                              l1100 C4FA  
                            l1004 CA9E                              l1021 CC9C  
                            l1102 C400                              l1006 CB0E  
                            l1031 CE02                              l1104 C462  
                            l1016 CC42                              l1008 CB52  
                            l1121 C5B4                              l1113 C50A  
                            l1025 CD9C                              l2010 9CEE  
                            l1042 A198                              l1202 B3BA  
                            l1131 C696                              l1123 C5E0  
                            l1115 C534                              l1107 C4AA  
                            l1051 A1A8                              l1019 CC80  
                            l1036 A1B8                              l1044 A1A0  
                            l1028 CDF6                              l1212 B4C4  
                            l1300 F3AA                              l2013 9D2E  
                            l1141 C77E                              l1133 C6C4  
                            l1125 C60C                              l1117 C55E  
                            l1037 A18E                              l1205 B54C  
                            l1213 B492                              l1301 F3E4  
                            l2014 9D3C                              l1150 C894  
                            l1038 A238                              l1310 F7F8  
                            l1302 F504                              l1143 C7AE  
                            l1135 C6F2                              l1127 C63A  
                            l1119 C588                              l1071 B2DC  
                            l1063 B1E4                              l1223 B506  
                            l1207 B3D8                              l1311 F748  
                            l1160 A82A                              l1056 A1B0  
                            l2009 9CFA                              l1161 A832  
                            l1145 C7DE                              l1137 C720  
                            l1129 C668                              l1073 B20E  
                            l1209 B50A                              l1321 F86C  
                            l1305 F5B2                              l1154 A89C  
                            l1170 A87A                              l1162 A83A  
                            l1082 B2EE                              l1314 F78C  
                            l1171 A882                              l1163 A842  
                            l1155 A80A                              l1147 C80E  
                            l1139 C74E                              l1075 B27A  
                            l1307 F69C                              l1251 EE1A  
                            l1172 A88A                              l1164 A84A  
                            l1156 A91A                              l1092 C3D6  
                            l1068 B1F0                              l1180 A3E6  
                            l1228 B560                              l1316 F8C8  
                            l1260 EEA0                              l1341 98AA  
                            l1173 A892                              l1165 A852  
                            l1157 A812                              l1149 C840  
                            l1093 C3D6                              l1085 B35E  
                            l1181 A318                              l2062 99D0  
                            l1166 A85A                              l1158 A81A  
                            l1190 A360                              l1182 A320  
                            l1254 EE28                              l1246 EBAE  
                            l2063 99C8                              l1167 A862  
                            l1159 A822                              l1191 A368  
                            l1183 A328                              l1271 EF2E  
                            l2072 993A                              l1168 A86A  
                            l1192 A370                              l1184 A330  
                            l1256 F802                              l1264 EEDA  
                            l2073 9932                              l1169 A872  
                            l1097 C3E2                              l1193 A37A  
                            l1185 A338      __end_of_uartTransmitBlocking 9EF6  
                            l2066 99F0                              l1610 C0AC  
                            l1178 A384                              l1186 A340  
                            l1258 F1F2                              l1282 F09E  
                            l2067 99FA                              l1603 C12C  
                            l1363 A182                              l1187 A348  
                            l1179 A310                              l1283 F0D8  
                            l1275 EF8C                              l1267 EEE8  
                            l2076 9952                              l1612 C0BC  
                            l1604 C03C                              l1188 A350  
                            l1276 F05E                              l2077 995C  
                            l1613 C0B6                              l1605 C040  
                            l1189 A358                              l1197 B3AE  
                            l1293 F298                              l1285 F1EC  
                            l1269 F1E4                              l1277 F000  
                            l1710 A276                              l1622 C1E0  
                            l1606 C068                              l1286 F4F0  
                            l1294 F36A                              l1278 F052  
                            l1623 C174                              l1615 C0E4  
                            l1607 C076                              l1295 F30C  
                            l1712 A2A4                              l1632 C20A  
                            l1616 C0CE                              l1608 C072  
                            l1296 F35E                              l1713 A298  
                            l1633 C22E                              l1289 F232  
                            l1650 C2E0                              l1634 C236  
                            l1635 C262                              l1627 C1F0  
                            l1619 C15A                              l1716 A2D8  
                            l1644 C290                              l1636 C24C  
                            l1628 C1AA                              l1717 A2E6  
                            l1709 A25E                              l1645 C348  
                            l1718 A2FC                              l1590 BFA8  
                            l1647 C332                              l1591 BFA2  
                            l1648 C296                              l1649 C342  
                            l1498 9EDC                              l1499 9E96  
                            l1587 BF84                              l1596 BFDA  
                            l1588 BF94                              l1598 C0F6  
                            l7102 9E96                              l1983 9810  
                            l7008 C1AE                              l8000 E2BC  
                            l7076 97D4                              l8194 9B54  
                            l7740 CDAA                              l7836 988A  
                            l6964 C0B6                              l7932 DFD8  
                            l7596 9A36                              _ADON 007E10  
                            l7942 E016                              l6968 C0CE  
                            l6994 C178                              l7896 A760  
                            l9596 C4A4                              STR_1 FC97  
                            STR_2 FAA0                              STR_3 FCFC  
                            STR_9 FCE6                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                  ??_configDrawer 0008                              u7115 9C88  
                            _RCIE 007CED                              u7116 9C8A  
                            _RCIF 007CF5                              u7125 9CC8  
                            u7126 9CCA                              u7160 99D4  
                            u7510 9E9E                              u7190 993E  
                            u9111 DF72                              u7520 9EAA  
                            u7512 9EA0                              u7440 C26A  
                            u9121 DF8C                              u7522 9EAC  
                            u7450 C27E                              u9210 E09C  
                            u9050 9CFE                              u9131 DFA6  
                            u9141 DFC0                              u7470 C350  
                            u7535 9ED8                              u7536 9EDA  
                            u9080 A72E                              u9160 E016  
                            u9330 E282                              u9250 E13E  
                            u9170 E02C                              u9340 E2BC  
                            u9510 E6F8                              u9610 E8FA  
                            u9530 E70C                              u9290 E1E0  
                            u9560 E7D0                              u9480 E634  
                            u9580 E836                              u8940 CC9A  
                            u9680 9B64                              u8960 CDA0  
                            u9690 A936                              u8970 CDAA  
                            u9940 A9D2                              _UART 006E  
                            u9980 ABA4                              u9990 ABB4  
                            _TRMT 007D61                              _TXIE 007CEC  
                            _TXIF 007CF4             __end_of_decode_drawer A3F0  
                 ??_getUserInputs 000D               standbyMode@foodType 0140  
               viewLogs@logNumber 005C        horizontalStepper@direction 0008  
                            _main AA54                              _keys F925  
                 food_press@F3117 00D0                              _uart 01F2  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     get_digits@sum 0001  
                            prodh 000FF4                              prodl 000FF3  
          mainOperation@foodTable 00A0                              start 0002  
                   __CFG_IESO$OFF 000000                 viewLogs@keypress2 005D  
                _moveHorizontally AE66               standbyMode@keypress 016B  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                     _writeEEPROM 9888                   diet_press@F3132 01EA  
                 ?_verifyKeypress 0001                  __end_of_LCD_LEFT F961  
             standbyMode@whichKey 0169                   food_press@count 0035  
                 food_press@tally 002F             I2C_Master_Read@ackBit 0002  
                ?_I2C_Master_Init 000E                  ?_I2C_Master_Read 0001  
                ??_getRoundPieces 0005                  ?_I2C_Master_Wait 0001  
                ?_I2C_Master_Stop 0001                             l10004 A0EE  
                           l10014 A11A                             l10016 A122  
                           l10026 A14E                             l10124 984C  
                           l10028 A156                             l10228 ECA8  
                           l10342 EF92                             l10326 EF36  
                           l10238 ECD0                             l10432 F242  
                           l10338 EF8C                             l10444 F298  
                           l10606 F7F8                             l10448 F29E  
                           l10566 F6A8                             l10794 D3DE  
                 __end_of___aldiv A30E                writeEEPROM@address 0002  
                           ?_main 0001                             _EEADR 000FA9  
                           STR_10 FCEE                             STR_11 FCE2  
                           STR_12 FCEA                             STR_20 FCCC  
                           STR_30 FCDE                             STR_31 FCDA  
                           STR_40 FC48                             STR_32 FCD6  
                           STR_16 FCC2                             STR_17 FCBD  
                           STR_33 FCB8                             STR_41 FBCF  
                           STR_26 FCF9                             STR_42 FCF2  
                           STR_18 FCC7                             STR_34 FC52  
                           STR_50 FCBF                             STR_19 FCD1  
                           STR_35 FC48                             STR_43 FA90  
                           STR_51 FCE6                             STR_28 FCF6  
                           STR_36 FC6E                             STR_44 FC29  
                           STR_60 FCC7                             STR_52 FCEE  
                           STR_37 FC65                             STR_61 FCD1  
                           STR_53 FCE2                             STR_45 FCFC  
                           STR_38 FB46                             STR_70 FCF6  
                           STR_62 FCCC                             STR_54 FCEA  
                           STR_46 FCE4                             STR_39 FC52  
                           STR_71 FCB9                             STR_63 FCBB  
                           STR_55 FCC3                             STR_47 FCC0  
                           STR_80 F9DE                             STR_72 FCDE  
                           STR_64 FCE0                             STR_56 FCBE  
                           STR_48 FCE7                             STR_81 FB7F  
                           STR_73 FCDA                             STR_65 FCFA  
                           STR_57 FCC8                             STR_49 FCEF  
                           STR_90 FAFB                             STR_82 F9EF  
                           STR_74 FCD6                             STR_66 FCBA  
                           STR_58 FCC2                             STR_83 FBE7  
                           STR_91 FA30                             STR_75 FCB8  
                           STR_67 FCDF                             STR_59 FCBD  
                           STR_76 FC8F                             STR_92 FC87  
                           STR_84 F9BC                             STR_68 FCF9  
                           STR_85 FC5C                             STR_77 FBE7  
                           STR_93 FA40                             STR_69 FCDB  
                           STR_94 FAF8                             STR_86 FCA6  
                           STR_78 FADD                             STR_79 FBE7  
                           STR_95 FAF4                             STR_87 F9DE  
                           STR_88 FB7F                             STR_96 FAF0  
                           STR_89 FCAD                             STR_97 FAEC  
                           STR_98 F966                             STR_99 F9CD  
                 __end_of___lldiv 9D4E                 viewLogs@returnVal 0058  
                           u10300 B002                             u10310 B014  
                           u10320 B026                             u12000 B7C0  
                           u11210 BAE2                             u12011 B1B8  
                           u11140 BA5A                             u12210 C47E  
                           u12131 C3C6                             u11350 BC1A  
                           u10710 B83E                             u11510 BE68  
                           u11280 BB7E                             u12080 B222  
                           u11600 B5C2                             u11540 BF5C  
                           u13220 B4DA                             u10910 B98E  
                           u10830 B91C                             u10750 B888  
                           u10670 B816                             u13310 A14E  
                           u13230 B502                             u11720 B66C  
                           u11640 B5FE                             u11570 B59A  
                           u13090 B424                             u11820 B6E4  
                           u13180 B46A                             u13405 9D70  
                           u10950 B9D8                             u10870 B944  
                           u10790 B8D2                             u11910 B752  
                           u11750 B694                             u11670 B626  
                           u13510 ECD0                             u15007 B350  
                           u13431 EA5A                             u14207 AA90  
                           u13265 9AE6                             u15017 C378  
                           u13441 EA6C                             u14217 AB46  
                           u13370 A2A8                             u11690 B644  
                           u13290 A11A                             u15107 D07C  
                           u13275 9834                             u15027 C414  
                           u14307 ED36                             u13451 EA7E  
                           u14227 AB66                             u13276 9836  
                           u13540 EE38                             u15117 D0C4  
                           u15037 C84C                             u14317 ED8C  
                           u14237 EB46                             u13461 EA90  
                           u10990 BA00                             u11950 B784  
                           u13550 EE40                             u15207 D3C4  
                           u15127 D162                             u15047 C87E  
                           u14407 EFE6                             u14327 EDA6  
                           u14247 EB6C                             u13471 EAA2  
                           u11880 B72A                             u13800 F5B0  
                           u13640 EF92                             u13560 EE4C  
                           u15217 D3F6                             u15137 D242  
                           u15057 CF64                             u14417 F00C  
                           u14337 EDD8                             u14257 EB86  
                           u13481 EAB4                             u15307 AD7A  
                           u15227 D428                             u15147 D27A  
                           u15067 CFEA                             u14507 F510  
                           u14427 F044                             u14347 EDF2  
                           u14267 EBBE                             u13820 F6A8  
                           u13740 F29E                             u15317 AD9E  
                           u15237 D44E                             u15157 D2AE  
                           u15077 D012                             u14517 F542  
                           u14437 F06A                             u14357 EE58  
                           u14277 EBF6                             u13590 EEF6  
                           u15407 9FCE                             u15327 ADE4  
                           u15247 D480                             u15167 D2D0  
                           u15087 D034                             u13911 CE5A  
                           u14607 F878                             u14527 F55A  
                           u14447 F1FE                             u14367 EE90  
                           u14287 ECEA                             u15417 9FE6  
                           u15337 AE0A                             u15257 9A76  
                           u15177 D2F6                             u15097 D05A  
                           u13921 CE6C                             u14617 F8B0  
                           u14537 F58C                             u14457 F2BA  
                           u14377 EEAC                             u14297 ED1C  
                           u15507 97CA                             u15427 9FFE  
                           u15347 AE30                             u15267 9A9C  
                           u15187 D318                             u13931 CE7E  
                           u14707 BD70                             u14627 F8D4  
                           u14547 F5D8                             u14467 F2F2  
                           u14387 EF02                             u13860 F72A  
                           u15517 9C70                             u15437 9F16  
                           u15357 A056                             u15277 97F2  
                           u15197 D330                             u13941 CE90  
                           u14717 BDA2                             u14637 F90C  
                           u14557 F690                             u14477 F318  
                           u14397 EFAE                             u13950 CEE8  
                           u13870 F7F8                             u15527 9C7A  
                           u15447 9F2E                             u15367 A06E  
                           u15287 AD10                             u14807 C9AE  
                           u14727 BDC2                             u14647 B37A  
                           u14567 F6B4                             u14487 F350  
                           u13880 F80A                             u15537 9CB0  
                           u15457 9F46                             u15377 A086  
                           u15297 AD34                             u14817 C9F8  
                           u14737 BDFA                             u14657 B51E  
                           u14577 F6E6                             u14497 F376  
                           u15547 9CBA                             u15467 9F5E  
                           u15387 A09E                             u14907 CC34  
                           u14827 CA4E                             u14747 BE14  
                           u14667 BCC0                             u14587 F838  
                           u15477 9E8A                             u15397 9FB6  
                           u14917 CC52                             u14837 CA90  
                           u14757 BEC8                             u14677 BCF2  
                           u14597 F85E                             u13990 D3DE  
                           u15487 996C                             u14927 CC72  
                           u14847 CAAE                             u14767 BEE0  
                           u14687 BD24                             u15497 99A0  
                           u14937 CCA8                             u14857 CB00  
                           u14777 BF00                             u14697 BD56  
                           u14947 CD8E                             u14867 CB44  
                           u14787 BF18                             u14957 CDB6  
                           u14877 CB88                             u14797 BF4A  
                           u14967 CDE8                             u14887 CBCC  
                           u14977 B17A                             u14897 CBEA  
                 __end_of___lwdiv 9A04                             u14987 B28E  
                           u14997 B31E                    _distributeFlat 9EF6  
                 __end_of___lwmod 9966                             _RCREG 000FAE  
                  _distributeLong 9F96                             _SPBRG 000FAF  
                           _PORTB 000F81                sortDrawerList@temp 002F  
                           _TRISA 000F92                             _TRISB 000F93  
         mainOperation@flatPieces 00C2                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                  ?_mainOperation 0001                             _TXREG 000FAD  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                 __end_of_getFlat A4E0                     __CFG_WRT3$OFF 000000  
                 diet_press@count 0033                   __end_of_lcdInst 97D2  
                 __end_of_getLong A6E6                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
              __size_of_UART_Init 0084                       initEEPROM@i 0003  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                   __end_of_initLCD 99B2  
                  __CFG_EBTRB$OFF 000000              __size_of_decode_diet 0124  
                 __end_of_initArm BC8E                   __end_of_dpowers F951  
              printFoodInput@food 0001                      displayLogs@i 0046  
                    displayLogs@n 0050                   __end_of_isdigit 9818  
                           _input F936                             _rowUp 0075  
                           _putch 97E6                             main@i 0066  
                           main@l 0068                             tablat 000FF5  
             distributeLong@count 0007              standbyMode@logNumber 017F  
               _LCDinterruptState 0078                             plusw1 000FE3  
                           plusw2 000FDB                             status 000FD8  
     I2C_Master_Read@receivedByte 0003              standbyMode@keypress1 0176  
                  __CFG_PBADEN$ON 000000                   standbyMode@diet 0180  
                 standbyMode@flat 016E                   standbyMode@food 0184  
      horizontalStepper@rotations 0006             getLongPieces@dietType 0001  
                 standbyMode@time 0160                   standbyMode@zero 0179  
                 _findDrawerIndex 9B0E            mainOperation@trueValue 00CC  
                 __initialization 9DD2                      __end_of_main AB92  
                    __end_of_keys F936                    _sortDrawerList DF58  
           getLongPieces@foodType 0003                      standbyMode@i 0188  
                    standbyMode@n 017B                      standbyMode@x 017D  
         __size_of_moveVertically 0258                  ??_printFoodInput 0003  
                  __CFG_OSC$HSPLL 000000            __end_of_distributeFlat 9F96  
          __end_of_distributeLong A036                 __end_of_LCD_RIGHT F962  
                food_press@drawer 002B                            ??_main 0064  
                   __activetblptr 000003               sortDrawerList@F3100 00E0  
             sortDrawerList@F3103 00D8               sortDrawerList@F3094 00F0  
             sortDrawerList@F3097 00E8               food_press@backCheck 0031  
               ?_I2C_Master_Start 0001                 ?_I2C_Master_Write 0002  
       __size_of_distributePieces 016E                      ?_shiftEEPROM 0001  
              ??_I2C_Master_Start 0002           mainOperation@longPieces 00C4  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
              ??_I2C_Master_Write 0004             standbyMode@flatPieces 0110  
                          STR_100 FACE                            STR_101 FC08  
                          STR_110 FA50                            STR_102 FCB3  
                          STR_103 FBB5                            STR_111 FB63  
                          STR_112 FBFD                            STR_120 FBC2  
                          STR_104 FA80                            STR_121 FC34  
                          STR_113 FABF                            STR_105 FA20  
                          STR_106 FA20                            STR_114 FABF  
                          STR_122 FB19                            STR_130 FA60  
                          _ADRESH 000FC4                            STR_131 FA80  
                          STR_115 FC97                            STR_107 FB55  
                          STR_123 FB28                            STR_116 F9DE  
                          STR_132 FC3E                            STR_124 FC1E  
                          STR_108 FBFD                            STR_140 F9AB  
                          STR_125 FBDC                            STR_141 FB71  
                          STR_109 FA50                            STR_133 FA10  
                          STR_117 F99A                            STR_150 FBF2  
                          STR_142 FC13                            STR_126 FB8D  
                          STR_134 FB37                            STR_118 FA70  
                          _ADRESL 000FC3                            STR_151 FB9B  
                          STR_127 F99A                            STR_143 FC7F  
                          STR_135 FC77                            STR_119 FA00  
                          STR_152 FBF2                            STR_144 FC08  
                          STR_136 FC3E                            STR_128 FBA8  
                          STR_137 FA10                            STR_145 FCB3  
                          STR_153 FC9F                            STR_129 F989  
                          STR_138 FB37                            STR_146 FB0A  
                          STR_154 F978                            STR_139 FC77  
                          STR_147 FAB0                            STR_148 FBF2  
                          STR_149 FB9B                            _EEDATA 000FA8  
                          _EECON2 000FA7                            ?_putch 0001  
         mainOperation@nextDrawer 00C8                   _distributeRound A036  
                          _SSPADD 000FC8                            _TRISC6 007CA6  
                          _TRISC7 007CA7                            _SSPBUF 000FC9  
                diet_press@drawer 0029         standbyMode@storedFoodType 0174  
          __end_of_sortDrawerList EA50                    __CFG_XINST$OFF 000000  
                __end_of_getRound A5D0                   _verticalStepper 9BDE  
               __end_of_UART_Init 9DD2                         ??___aldiv 0009  
                          ___wmul 9862                    __CFG_STVREN$ON 000000  
                       ??___lldiv 0009                         ??___lwdiv 0005  
                       ??___lwmod 000C            decode_diet@returnValue 0005  
            _uartTransmitBlocking 9E5C                            clear_0 9E30  
                          clear_1 9E3C                            clear_2 9E48  
                          _inputs 0250              __end_of_configDrawer 98E6  
                 ?_distributeFlat 0007                    _firstIteration 0076  
                       ??_getFlat 0003                   ?_distributeLong 0007  
                       ??_lcdInst 0003                            _printf BF7A  
                       ??_getLong 0003              __size_of_displayLogs 0570  
                 ??_mainOperation 0039               food_press@foodTable 0038  
                       ??_initLCD 0004                         ??_initArm 000E  
                 get_digits@count 0005             __end_of_getFlatPieces ACF8  
                    __pdataCOMRAM 006E                         ??_isdigit 0001  
        getUserInputs@drawerTable 0007        moveHorizontally@nextDrawer 000E  
                    __mediumconst F924                  __end_of_viewLogs BF7A  
        mainOperation@drawerTable 0080                            tblptrh 000FF7  
                          tblptrl 000FF6                  __end_of_trapDoor 9AB2  
                          tblptru 000FF8                  standbyMode@F3160 0210  
                standbyMode@F3152 019A                  standbyMode@F3162 0200  
                standbyMode@F3154 018A                  standbyMode@F3156 0230  
                standbyMode@F3158 0220               decode_diet@dietType 0001  
      findDrawerIndex@returnValue 0007           __end_of_findDrawerIndex 9B6E  
           standbyMode@longPieces 0120                        __accesstop 0080  
         __end_of__initialization 9E56              which_drawer@keypress 0034  
                   ___rparam_used 000001                  standbyMode@round 016C  
                 writeEEPROM@data 0001                   viewLogs@logView 005A  
          standbyMode@decodedDiet 0172                   ?_sortDrawerList 0001  
                    ?_standbyMode 005E              __end_of_happynewyear F960  
                  __pcstackCOMRAM 0001                      __pidataBANK0 9788  
                    __pidataBANK2 98E6                     __end_of_input F947  
           ?_uartTransmitBlocking 0001                     __end_of_putch 97FA  
              __size_of_lcdNibble 007E                     check_food@sum 0001  
           configDrawer@direction 0006          __end_of_moveHorizontally AFDA  
       sortDrawerList@drawerTable 0001                 food_press@dietSum 0029  
         __end_of_distributeRound A0D6             __end_of_getLongPieces B16E  
               food_press@isValid 0033                           ??_putch 0003  
                      __pbssBANK0 00D0                        __pbssBANK1 018A  
                      __pbssBANK2 0200                        _check_food D49C  
               mainOperation@temp 00C6          getLongPieces@returnValue 0007  
         __end_of_verticalStepper 9C4E                  ??_verifyKeypress 0003  
                    ?_writeEEPROM 0001                    _moveVertically B7D4  
                         ?___wmul 0001                        _diet_press C36C  
         displayLogs@drawerNumber 0044                           ?_printf 000D  
                      _arr_dataRX 0240                        _get_digits A184  
                _distributePieces ACF8              sortDrawerList@count1 0031  
            sortDrawerList@count2 002D              sortDrawerList@count3 0033  
            sortDrawerList@count4 002B                         ?_getRound 0001  
                         _SSPCON1 000FC6                           _SSPCON2 000FC5  
                      _drawerDown 00F8                           _SSPSTAT 000FC7  
                      _drawerOpen 0071              __size_of_shiftEEPROM 00AE  
                      _columnLeft 0073                        _foodInputs 0274  
                ?_findDrawerIndex 0001                        _initEEPROM 983C  
                      _readEEPROM 97D2            standbyMode@drawerCount 0186  
           __end_of_getUserInputs A800              distributeRound@count 0007  
                      _food_press B16E                horizontalStepper@i 000A  
               __end_of_lcdNibble 9CCC                           __Hparam 0000  
          __end_of_moveVertically BA2C                           __Lparam 0000  
           __size_of_configDrawer 0034                         ?_viewLogs 0052  
                         ___aldiv A242            ??_uartTransmitBlocking 0004  
        displayLogs@operationTime 0042                         ?_trapDoor 0001  
                         ___lldiv 9CCC                   __size_of___wmul 0026  
                         ___lwdiv 99B2                           ___lwmod 9924  
                         __pcinit 9DD2                           __ramtop 1000  
                         _getFlat A3F0     moveHorizontally@currentDrawer 000C  
                         _lcdInst 97BE                           _getLong A5D0  
                         __ptext0 AA54                           __ptext1 EA50  
                         __ptext2 B368                           __ptext3 A30E  
                         __ptext4 BC8E                           __ptext5 9A04  
                         __ptext6 C89E                           __ptext7 A0D6  
                         __ptext8 B57E                           __ptext9 A4E0  
          __size_of_decode_drawer 00E2                   __size_of_printf 03F2  
                         _initLCD 9966                 __end_of_hexpowers F959  
                         _initArm BA2C                           _dpowers F947  
                   ??_decode_diet 0003             which_drawer@backCheck 0030  
                         _isdigit 97FA                    displayLogs@day 0031  
                ___aldiv@dividend 0001                         _LCD_RIGHT F961  
        __size_of_I2C_Master_Init 005C          __size_of_I2C_Master_Read 0024  
        __size_of_I2C_Master_Wait 0012              displayLogs@logNumber 0029  
        __size_of_I2C_Master_Stop 0008                           _rowDown 0074  
                ?_distributeRound 0007                 _horizontalStepper 9B6E  
                      ??_getRound 0003                   distributeFlat@i 000A  
            end_of_initialization 9E56                   distributeLong@i 000A  
            displayLogs@keypress3 0041                ?_horizontalStepper 0006  
                 which_drawer@sum 002E             __end_of_LCD_SIZE_HORZ F964  
                     ?_check_food 0001             __end_of_LCD_SIZE_VERT F963  
                    _configDrawer 98B2                  ?_verticalStepper 0006  
               main@operationMode 006A         __size_of_I2C_Master_Start 0008  
       __size_of_I2C_Master_Write 000A                   ___lldiv@divisor 0005  
             ??_horizontalStepper 000A                   ___lldiv@counter 000D  
                 ?_moveVertically 000C                  ??_distributeFlat 0009  
                ??_distributeLong 0009                         _RCSTAbits 000FAB  
                         printf@c 0028                           printf@f 000D  
                ___aldiv@quotient 000B                           postdec1 000FE5  
                         postdec2 000FDD                        ??_viewLogs 0054  
                      ??_trapDoor 0003                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
            __size_of_standbyMode 0ED4                       ?_diet_press 0029  
                       _UART_Init 9D4E                         _PORTBbits 000F81  
                   ?_which_drawer 0029               diet_press@backCheck 0031  
                     ?_get_digits 0001         __end_of_horizontalStepper 9BDE  
        mainOperation@roundPieces 00C0            sortDrawerList@sublist1 000B  
          sortDrawerList@sublist2 001B            sortDrawerList@sublist3 0023  
          sortDrawerList@sublist4 0013       distributePieces@roundPieces 000C  
                       _TRISAbits 000F92                         _TRISCbits 000F94  
                       _TRISDbits 000F95                         _TRISEbits 000F96  
                viewLogs@checkLog 0056                      _happynewyear F959  
         __size_of_getRoundPieces 0130                 readEEPROM@address 0001  
             __end_of_decode_diet A924                 standbyMode@drawer 0182  
                     ?_initEEPROM 0001                  ??_sortDrawerList 0005  
                   _decode_drawer A30E                       ?_readEEPROM 0001  
                     printf@width 0026                         _TXSTAbits 000FAC  
                     ?_food_press 0029               diet_press@dietTable 0038  
                 main@checkEEPROM 006C                     ??_displayLogs 002B  
            __size_of_writeEEPROM 002A                    __end_of___wmul 9888  
                      ?_UART_Init 000F                     __pidataCOMRAM 979A  
               trapDoor@direction 0001            standbyMode@validDrawer 0177  
             __size_of_check_food 0ABC                    ??_which_drawer 002B  
                  __end_of_printf C36C             __end_of_mainOperation D49C  
             start_initialization 9DD2              initArm@currentDrawer 000C  
                  standbyMode@lng 0170                 ?_moveHorizontally 000C  
         __size_of_printFoodInput 0256                ??_moveHorizontally 0010  
                  ?_decode_drawer 0001               __size_of_diet_press 0532  
               ??_I2C_Master_Init 0012                 ??_I2C_Master_Read 0002  
               ??_I2C_Master_Wait 0001                 ??_I2C_Master_Stop 0002  
           getFlatPieces@dietType 0001      standbyMode@drawerInformation 0150  
       getRoundPieces@returnValue 0007        distributePieces@flatPieces 000E  
           getFlatPieces@foodType 0003            __size_of_getFlatPieces 0166  
        __end_of_distributePieces AE66               __size_of_get_digits 00BE  
                        ??___wmul 0005                mainOperation@F3180 01BA  
              mainOperation@F3182 01AA                mainOperation@F3176 01DA  
              mainOperation@F3178 01CA          I2C_Master_Init@clockFreq 000E  
                     __pdataBANK0 00F8                       __pdataBANK2 0250  
                __CFG_LPT1OSC$OFF 000000                          ??_printf 0017  
uartTransmitBlocking@numTransmits 0005               __size_of_initEEPROM 0026  
              food_press@keypress 0037               __size_of_readEEPROM 0014  
             __end_of_displayLogs CE0E               __size_of_food_press 01FA  
                     __pbssCOMRAM 0076                       _decode_diet A800  
      __size_of_horizontalStepper 0070                     __pcstackBANK0 0080  
                   __pcstackBANK1 0100                   sortDrawerList@i 0037  
                 sortDrawerList@j 0035                      _isdigit$1966 0002  
             decode_drawer@drawer 0001                 __size_of_getRound 00F0  
findDrawerIndex@sortedDrawerValue 0003            standbyMode@roundPieces 0100  
                _I2C_Master_Start 978A                  _I2C_Master_Write 97A2  
                  mainOperation@i 00CE                  ___lwdiv@dividend 0001  
               __CFG_CCP2MX$PORTC 000000                _UARTinterruptState 0079  
                   __pmediumconst F924                     UART_Init@baud 000F  
                       _lcdNibble 9C4E        distributePieces@longPieces 0010  
                        ?___aldiv 0001                          ?___lldiv 0001  
          __size_of_getLongPieces 0194                getUserInputs@count 0011  
                        ?___lwdiv 0001                          ?___lwmod 0008  
                     ??_UART_Init 0013                 __size_of_viewLogs 02EC  
               __size_of_trapDoor 005C                          ?_getFlat 0001  
                findDrawerIndex@i 0009                          ?_lcdInst 0001  
                        ?_getLong 0001                          ?_initLCD 0001  
                        ?_initArm 000C                          ?_isdigit 0001  
             check_food@foodInput 0003                     _getFlatPieces AB92  
        moveVertically@nextDrawer 000E                     ??_shiftEEPROM 0003  
             displayLogs@dietType 003D                    _getRoundPieces A924  
                       _hexpowers F951                  ___lwdiv@quotient 0005  
                 ??_decode_drawer 0003                    __size_of_putch 0014  
             displayLogs@foodType 003F                      ??_check_food 0005  
          getRoundPieces@dietType 0001                          _LCD_LEFT F960  
                displayLogs@month 002F                   ___aldiv@divisor 0005  
                ??_moveVertically 0010                   ___aldiv@counter 0009  
                  ___wmul@product 0005                          _LATAbits 000F89  
                        _LATCbits 000F8B                          _LATDbits 000F8C  
                        _LATEbits 000F8D              __end_of_which_drawer B57E  
          getRoundPieces@foodType 0003          __size_of_findDrawerIndex 0060  
                __CFG_WDTPS$32768 000000                        ?_lcdNibble 0001  
                    ??_diet_press 002B                      shiftEEPROM@i 0006  
                     _displayLogs C89E     __size_of_uartTransmitBlocking 009A  
                     _drawerClose 0070   sortDrawerList@sortedDrawerTable 0003  
         __size_of_verifyKeypress 0052                        _ADCON0bits 000FC2  
               ___wmul@multiplier 0001                __end_of_check_food DF58  
                   lcdNibble@data 0002                        printf@flag 0025  
                     _columnRight 0072                     lcdNibble@temp 0001  
                  ?_getFlatPieces 0001                        printf@prec 001C  
                    ??_get_digits 0003            __end_of_getRoundPieces AA54  
          __size_of_getUserInputs 011A                    _printFoodInput B57E  
                  _LCD_HORZ_LIMIT F965          verticalStepper@direction 0008  
                   _getLongPieces AFDA                     diet_press@sum 0035  
                       copy_data0 9DE6                         copy_data1 9E1E  
               which_drawer@count 0032                      ??_initEEPROM 0003  
             __end_of_shiftEEPROM A184            getUserInputs@dietTable 0009  
              __end_of_diet_press C89E                      ??_readEEPROM 0001  
                    ??_food_press 002D                diet_press@keypress 0037  
        __size_of_distributeRound 00A0                        _EECON1bits 000FA6  
                        __Hrparam 0000                     ??_standbyMode 0060  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
              __end_of_get_digits A242                diet_press@previous 002D  
        __size_of_verticalStepper 0070    mainOperation@sortedDrawerTable 00B0  
          getUserInputs@foodTable 000B                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082             displayLogs@flatPieces 0035  
                __size_of___lwdiv 0052                  __size_of___lwmod 0042  
                __size_of_getFlat 00F0                  __size_of_lcdInst 0014  
                __size_of_getLong 0116            __end_of_printFoodInput B7D4  
          getUserInputs@logNumber 000F                __end_of_initEEPROM 9862  
                 _I2C_Master_Init 9AB2                   _I2C_Master_Read 9818  
                __size_of_initLCD 004C                   ?_getRoundPieces 0001  
                 _I2C_Master_Wait 97AC                __end_of_readEEPROM 97E6  
                __size_of_initArm 0262                   _I2C_Master_Stop 9792  
          __end_of_LCD_HORZ_LIMIT F966                  __size_of_isdigit 001E  
              __end_of_food_press B368                   ___lwdiv@divisor 0003  
                 ___lwdiv@counter 0007                    ?_getLongPieces 0001  
               getUserInputs@data 0015                          __ptext10 A5D0  
                        __ptext11 A3F0                          __ptext20 9818  
                        __ptext12 B16E                          __ptext21 97AC  
                        __ptext13 A184                          __ptext30 9924  
                        __ptext22 9AB2                          __ptext14 D49C  
                        __ptext31 99B2                          __ptext23 9CCC  
                        __ptext15 C36C                          __ptext40 AFDA  
                        __ptext32 B7D4                          __ptext24 CE0E  
                        __ptext16 A800                          __ptext41 AB92  
                        __ptext33 AE66                          __ptext25 9A56  
                        __ptext17 97A2                          __ptext50 9966  
                        __ptext42 9B0E                          __ptext34 BA2C  
                        __ptext26 DF58                          __ptext18 9792  
                        __ptext51 97BE                          __ptext43 ACF8  
                        __ptext35 9BDE                          __ptext27 BF7A  
                        __ptext19 978A                          __ptext52 9C4E  
                        __ptext44 A036                          __ptext36 9B6E  
                        __ptext28 97E6                          __ptext53 983C  
                        __ptext45 9F96                          __ptext37 A6E6  
                        __ptext29 97FA                          __ptext54 9888  
                        __ptext46 9EF6                          __ptext38 97D2  
                        __ptext55 9D4E                          __ptext47 9862  
                        __ptext39 A924                          __ptext56 A242  
                        __ptext48 98B2                          __ptext49 9E5C  
                        _getRound A4E0                    _LCD_VERT_LIMIT F964  
                        _drawerUp 00F9          verticalStepper@rotations 0006  
                   __size_of_main 013E                   displayLogs@year 002D  
                   _getUserInputs A6E6         __size_of_moveHorizontally 0174  
              displayLogs@minutes 0039                displayLogs@seconds 003B  
                   ??_writeEEPROM 0002                 ?_distributePieces 000C  
        displayLogs@markedDrawer1 0048          displayLogs@markedDrawer2 004A  
        displayLogs@markedDrawer3 004C          displayLogs@markedDrawer4 004E  
                     ??_lcdNibble 0001                          _viewLogs BC8E  
                        _trapDoor 9A56                   verifyKeypress@i 0008  
              getLong@returnValue 0005                ??_distributePieces 0012  
                       printf@idx 001B                         printf@len 0021  
                       printf@val 0023                         trapDoor@i 0005  
             __end_of_standbyMode F924                   ??_getFlatPieces 0005  
     I2C_Master_Write@byteToWrite 0002          decode_drawer@returnValue 0005  
               ??_findDrawerIndex 0005             displayLogs@longPieces 0037  
                 ?_printFoodInput 0001                  which_drawer@rand 002C  
                       putch@data 0003           __size_of_distributeFlat 00A0  
        __end_of_I2C_Master_Start 9792           __size_of_distributeLong 00A0  
        __end_of_I2C_Master_Write 97AC                        _INTCONbits 000FF2  
                    ?_decode_diet 0001                  distributeRound@i 000A  
          __end_of_LCD_VERT_LIMIT F965                       _shiftEEPROM A0D6  
                        isdigit@c 0003             __size_of_which_drawer 0216  
                     getFlat@code 0001         standbyMode@firstIteration 0167  
                   _LCD_SIZE_HORZ F963                  ___lwmod@dividend 0008  
                   _LCD_SIZE_VERT F962                  ___lldiv@dividend 0001  
         verifyKeypress@logNumber 0005                    ?_getUserInputs 0007  
          __size_of_mainOperation 068E                getFlat@returnValue 0005  
     moveVertically@currentDrawer 000C            displayLogs@roundPieces 0033  
                        printf@ap 001F                          printf@cp 001D  
               ??_distributeRound 0009           __size_of_sortDrawerList 0AF8  
                     diet_press@i 002F           __end_of_I2C_Master_Init 9B0E  
         __end_of_I2C_Master_Read 983C           __end_of_I2C_Master_Wait 97BE  
         __end_of_I2C_Master_Stop 979A                       lcdInst@data 0003  
                 shiftEEPROM@temp 0004                    _verifyKeypress 9A04  
             getRound@returnValue 0005                       getLong@code 0001  
             __end_of_writeEEPROM 98B2          uartTransmitBlocking@data 0001  
               ??_verticalStepper 000A           verifyKeypress@returnVal 0006  
                ___lldiv@quotient 0009                      _which_drawer B368  
                 ___lwmod@divisor 000A                   ??_getLongPieces 0005  
                 ___lwmod@counter 000C                      ___aldiv@sign 000A  
          verifyKeypress@keypress 0001                  verticalStepper@i 000A  
                     _SSPCON1bits 000FC6                       _SSPCON2bits 000FC5  
        getFlatPieces@returnValue 0007                    getUserInputs@i 0017  
                  getUserInputs@n 0013                      getRound@code 0001  
                   ?_configDrawer 0006             check_food@returnValue 0007  
      mainOperation@currentDrawer 00CA  
