

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 17:31:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61  0000                     
    62                           ; Version 1.45
    63                           ; Generated 16/11/2017 GMT
    64                           ; 
    65                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataCOMRAM
    98  00AD94                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _UART
   102  00AD94  F0                 	db	low _uart
   103  00AD95  00                 	db	high _uart
   104                           
   105                           ;initializer for _drawerDown
   106  00AD96  36                 	db	54
   107                           
   108                           ;initializer for _drawerUp
   109  00AD97  35                 	db	53
   110                           
   111                           ;initializer for _columnRight
   112  00AD98  34                 	db	52
   113                           
   114                           ;initializer for _columnLeft
   115  00AD99  33                 	db	51
   116                           
   117                           ;initializer for _rowDown
   118  00AD9A  32                 	db	50
   119                           
   120                           ;initializer for _rowUp
   121  00AD9B  31                 	db	49
   122                           
   123                           	psect	idataBANK2
   124  00AEAC                     __pidataBANK2:
   125                           	opt stack 0
   126                           
   127                           ;initializer for _inputs
   128  00AEAC  FD                 	db	low STR_5
   129  00AEAD  FC                 	db	high STR_5
   130  00AEAE  E9                 	db	low (STR_13+2)
   131  00AEAF  FC                 	db	high (STR_13+2)
   132  00AEB0  C0                 	db	low (STR_19+3)
   133  00AEB1  FC                 	db	high (STR_19+3)
   134  00AEB2  EC                 	db	low (STR_11+1)
   135  00AEB3  FC                 	db	high (STR_11+1)
   136  00AEB4  F4                 	db	low (STR_12+1)
   137  00AEB5  FC                 	db	high (STR_12+1)
   138  00AEB6  BF                 	db	low (STR_19+2)
   139  00AEB7  FC                 	db	high (STR_19+2)
   140  00AEB8  EB                 	db	low STR_11
   141  00AEB9  FC                 	db	high STR_11
   142  00AEBA  F3                 	db	low STR_12
   143  00AEBB  FC                 	db	high STR_12
   144  00AEBC  E7                 	db	low STR_13
   145  00AEBD  FC                 	db	high STR_13
   146  00AEBE  EF                 	db	low STR_14
   147  00AEBF  FC                 	db	high STR_14
   148  00AEC0  C3                 	db	low (STR_18+1)
   149  00AEC1  FC                 	db	high (STR_18+1)
   150  00AEC2  BE                 	db	low (STR_19+1)
   151  00AEC3  FC                 	db	high (STR_19+1)
   152  00AEC4  C8                 	db	low (STR_20+1)
   153  00AEC5  FC                 	db	high (STR_20+1)
   154  00AEC6  C2                 	db	low STR_18
   155  00AEC7  FC                 	db	high STR_18
   156  00AEC8  BD                 	db	low STR_19
   157  00AEC9  FC                 	db	high STR_19
   158  00AECA  C7                 	db	low STR_20
   159  00AECB  FC                 	db	high STR_20
   160  00AECC  D1                 	db	low STR_21
   161  00AECD  FC                 	db	high STR_21
   162  00AECE  CC                 	db	low STR_22
   163  00AECF  FC                 	db	high STR_22
   164                           
   165                           ;initializer for _foodInputs
   166  00AED0  BB                 	db	low (STR_35+3)
   167  00AED1  FC                 	db	high (STR_35+3)
   168  00AED2  E5                 	db	low (STR_32+2)
   169  00AED3  FC                 	db	high (STR_32+2)
   170  00AED4  FB                 	db	low (STR_28+1)
   171  00AED5  FC                 	db	high (STR_28+1)
   172  00AED6  BA                 	db	low (STR_35+2)
   173  00AED7  FC                 	db	high (STR_35+2)
   174  00AED8  E4                 	db	low (STR_32+1)
   175  00AED9  FC                 	db	high (STR_32+1)
   176  00AEDA  FA                 	db	low STR_28
   177  00AEDB  FC                 	db	high STR_28
   178  00AEDC  E0                 	db	low (STR_33+1)
   179  00AEDD  FC                 	db	high (STR_33+1)
   180  00AEDE  F7                 	db	low STR_30
   181  00AEDF  FC                 	db	high STR_30
   182  00AEE0  B9                 	db	low (STR_35+1)
   183  00AEE1  FC                 	db	high (STR_35+1)
   184  00AEE2  E3                 	db	low STR_32
   185  00AEE3  FC                 	db	high STR_32
   186  00AEE4  DF                 	db	low STR_33
   187  00AEE5  FC                 	db	high STR_33
   188  00AEE6  DB                 	db	low STR_34
   189  00AEE7  FC                 	db	high STR_34
   190  00AEE8  B8                 	db	low STR_35
   191  00AEE9  FC                 	db	high STR_35
   192                           
   193                           	psect	mediumconst
   194  00F972                     __pmediumconst:
   195                           	opt stack 0
   196  00F972  00                 	db	0
   197  00F973                     _keys:
   198                           	opt stack 0
   199  00F973  31                 	db	49
   200  00F974  32                 	db	50
   201  00F975  33                 	db	51
   202  00F976  41                 	db	65
   203  00F977  34                 	db	52
   204  00F978  35                 	db	53
   205  00F979  36                 	db	54
   206  00F97A  42                 	db	66
   207  00F97B  37                 	db	55
   208  00F97C  38                 	db	56
   209  00F97D  39                 	db	57
   210  00F97E  43                 	db	67
   211  00F97F  2A                 	db	42
   212  00F980  30                 	db	48
   213  00F981  23                 	db	35
   214  00F982  44                 	db	68
   215  00F983  00                 	db	0
   216  00F984                     __end_of_keys:
   217                           	opt stack 0
   218  00F984                     _input:
   219                           	opt stack 0
   220  00F984  31                 	db	49
   221  00F985  32                 	db	50
   222  00F986  33                 	db	51
   223  00F987  52                 	db	82
   224  00F988  34                 	db	52
   225  00F989  35                 	db	53
   226  00F98A  36                 	db	54
   227  00F98B  46                 	db	70
   228  00F98C  37                 	db	55
   229  00F98D  38                 	db	56
   230  00F98E  39                 	db	57
   231  00F98F  4C                 	db	76
   232  00F990  2A                 	db	42
   233  00F991  30                 	db	48
   234  00F992  23                 	db	35
   235  00F993  44                 	db	68
   236  00F994  00                 	db	0
   237  00F995                     __end_of_input:
   238                           	opt stack 0
   239  00F995                     _dpowers:
   240                           	opt stack 0
   241  00F995  0001               	dw	1
   242  00F997  000A               	dw	10
   243  00F999  0064               	dw	100
   244  00F99B  03E8               	dw	1000
   245  00F99D  2710               	dw	10000
   246  00F99F                     __end_of_dpowers:
   247                           	opt stack 0
   248  00F99F                     _hexpowers:
   249                           	opt stack 0
   250  00F99F  0001               	dw	1
   251  00F9A1  0010               	dw	16
   252  00F9A3  0100               	dw	256
   253  00F9A5  1000               	dw	4096
   254  00F9A7                     __end_of_hexpowers:
   255                           	opt stack 0
   256  00F9A7                     _happynewyear:
   257                           	opt stack 0
   258  00F9A7  00                 	db	0
   259  00F9A8  28                 	db	40
   260  00F9A9  00                 	db	0
   261  00F9AA  06                 	db	6
   262  00F9AB  24                 	db	36
   263  00F9AC  02                 	db	2
   264  00F9AD  18                 	db	24
   265  00F9AE                     __end_of_happynewyear:
   266                           	opt stack 0
   267  00F9AE                     _LCD_LEFT:
   268                           	opt stack 0
   269  00F9AE  00                 	db	0
   270  00F9AF                     __end_of_LCD_LEFT:
   271                           	opt stack 0
   272  00F9AF                     _LCD_RIGHT:
   273                           	opt stack 0
   274  00F9AF  01                 	db	1
   275  00F9B0                     __end_of_LCD_RIGHT:
   276                           	opt stack 0
   277  00F9B0                     _LCD_SIZE_VERT:
   278                           	opt stack 0
   279  00F9B0  02                 	db	2
   280  00F9B1                     __end_of_LCD_SIZE_VERT:
   281                           	opt stack 0
   282  00F9B1                     _LCD_SIZE_HORZ:
   283                           	opt stack 0
   284  00F9B1  10                 	db	16
   285  00F9B2                     __end_of_LCD_SIZE_HORZ:
   286                           	opt stack 0
   287  00F9B2                     _LCD_VERT_LIMIT:
   288                           	opt stack 0
   289  00F9B2  02                 	db	2
   290  00F9B3                     __end_of_LCD_VERT_LIMIT:
   291                           	opt stack 0
   292  00F9B3                     _LCD_HORZ_LIMIT:
   293                           	opt stack 0
   294  00F9B3  28                 	db	40
   295  00F9B4                     __end_of_LCD_HORZ_LIMIT:
   296                           	opt stack 0
   297  0000                     _LATDbits	set	3980
   298  0000                     _PORTB	set	3969
   299  0000                     _PORTBbits	set	3969
   300  0000                     _LATCbits	set	3979
   301  0000                     _TRISCbits	set	3988
   302  0000                     _TRISE	set	3990
   303  0000                     _TRISD	set	3989
   304  0000                     _TRISC	set	3988
   305  0000                     _TRISB	set	3987
   306  0000                     _TRISA	set	3986
   307  0000                     _LATE	set	3981
   308  0000                     _LATD	set	3980
   309  0000                     _LATC	set	3979
   310  0000                     _LATB	set	3978
   311  0000                     _LATA	set	3977
   312  0000                     _TRISC7	set	31911
   313  0000                     _TRISC6	set	31910
   314  0000                     _SPBRG	set	4015
   315  0000                     _RCREG	set	4014
   316  0000                     _RCSTAbits	set	4011
   317  0000                     _TXREG	set	4013
   318  0000                     _TXSTAbits	set	4012
   319  0000                     _ADRESL	set	4035
   320  0000                     _ADRESH	set	4036
   321  0000                     _ADCON0bits	set	4034
   322  0000                     _SSPBUF	set	4041
   323  0000                     _SSPCON2bits	set	4037
   324  0000                     _SSPADD	set	4040
   325  0000                     _SSPCON2	set	4037
   326  0000                     _SSPCON1	set	4038
   327  0000                     _SSPSTAT	set	4039
   328  0000                     _SSPCON1bits	set	4038
   329  0000                     _EECON2	set	4007
   330  0000                     _EEDATA	set	4008
   331  0000                     _EEADR	set	4009
   332  0000                     _EECON1bits	set	4006
   333  0000                     _ADCON1	set	4033
   334  0000                     _ADCON0	set	4034
   335  0000                     _RCIE	set	31981
   336  0000                     _RCIF	set	31989
   337  0000                     _TXIE	set	31980
   338  0000                     _TRMT	set	32097
   339  0000                     _TXIF	set	31988
   340  0000                     _ADON	set	32272
   341  0000                     _INTCONbits	set	4082
   342  00F9B4                     STR_58:
   343  00F9B4  52                 	db	82	;'R'
   344  00F9B5  65                 	db	101	;'e'
   345  00F9B6  6D                 	db	109	;'m'
   346  00F9B7  61                 	db	97	;'a'
   347  00F9B8  69                 	db	105	;'i'
   348  00F9B9  6E                 	db	110	;'n'
   349  00F9BA  69                 	db	105	;'i'
   350  00F9BB  6E                 	db	110	;'n'
   351  00F9BC  67                 	db	103	;'g'
   352  00F9BD  20                 	db	32
   353  00F9BE  70                 	db	112	;'p'
   354  00F9BF  69                 	db	105	;'i'
   355  00F9C0  65                 	db	101	;'e'
   356  00F9C1  63                 	db	99	;'c'
   357  00F9C2  65                 	db	101	;'e'
   358  00F9C3  73                 	db	115	;'s'
   359  00F9C4  3A                 	db	58	;':'
   360  00F9C5  00                 	db	0
   361  00F9C6                     STR_114:
   362  00F9C6  30                 	db	48	;'0'
   363  00F9C7  31                 	db	49	;'1'
   364  00F9C8  32                 	db	50	;'2'
   365  00F9C9  33                 	db	51	;'3'
   366  00F9CA  34                 	db	52	;'4'
   367  00F9CB  35                 	db	53	;'5'
   368  00F9CC  36                 	db	54	;'6'
   369  00F9CD  37                 	db	55	;'7'
   370  00F9CE  38                 	db	56	;'8'
   371  00F9CF  39                 	db	57	;'9'
   372  00F9D0  61                 	db	97	;'a'
   373  00F9D1  62                 	db	98	;'b'
   374  00F9D2  63                 	db	99	;'c'
   375  00F9D3  64                 	db	100	;'d'
   376  00F9D4  65                 	db	101	;'e'
   377  00F9D5  66                 	db	102	;'f'
   378  00F9D6  00                 	db	0
   379  00F9D7                     STR_89:
   380  00F9D7  64                 	db	100	;'d'
   381  00F9D8  72                 	db	114	;'r'
   382  00F9D9  61                 	db	97	;'a'
   383  00F9DA  77                 	db	119	;'w'
   384  00F9DB  65                 	db	101	;'e'
   385  00F9DC  72                 	db	114	;'r'
   386  00F9DD  73                 	db	115	;'s'
   387  00F9DE  20                 	db	32
   388  00F9DF  72                 	db	114	;'r'
   389  00F9E0  65                 	db	101	;'e'
   390  00F9E1  61                 	db	97	;'a'
   391  00F9E2  63                 	db	99	;'c'
   392  00F9E3  68                 	db	104	;'h'
   393  00F9E4  65                 	db	101	;'e'
   394  00F9E5  64                 	db	100	;'d'
   395  00F9E6  21                 	db	33
   396  00F9E7  00                 	db	0
   397  00F9E8                     STR_77:
   398  00F9E8  62                 	db	98	;'b'
   399  00F9E9  65                 	db	101	;'e'
   400  00F9EA  67                 	db	103	;'g'
   401  00F9EB  69                 	db	105	;'i'
   402  00F9EC  6E                 	db	110	;'n'
   403  00F9ED  20                 	db	32
   404  00F9EE  6F                 	db	111	;'o'
   405  00F9EF  70                 	db	112	;'p'
   406  00F9F0  65                 	db	101	;'e'
   407  00F9F1  72                 	db	114	;'r'
   408  00F9F2  61                 	db	97	;'a'
   409  00F9F3  74                 	db	116	;'t'
   410  00F9F4  69                 	db	105	;'i'
   411  00F9F5  6F                 	db	111	;'o'
   412  00F9F6  6E                 	db	110	;'n'
   413  00F9F7  2E                 	db	46
   414  00F9F8  00                 	db	0
   415  00F9F9                     STR_100:
   416  00F9F9  49                 	db	73	;'I'
   417  00F9FA  6E                 	db	110	;'n'
   418  00F9FB  70                 	db	112	;'p'
   419  00F9FC  75                 	db	117	;'u'
   420  00F9FD  74                 	db	116	;'t'
   421  00F9FE  73                 	db	115	;'s'
   422  00F9FF  20                 	db	32
   423  00FA00  73                 	db	115	;'s'
   424  00FA01  75                 	db	117	;'u'
   425  00FA02  62                 	db	98	;'b'
   426  00FA03  6D                 	db	109	;'m'
   427  00FA04  69                 	db	105	;'i'
   428  00FA05  74                 	db	116	;'t'
   429  00FA06  74                 	db	116	;'t'
   430  00FA07  65                 	db	101	;'e'
   431  00FA08  64                 	db	100	;'d'
   432  00FA09  00                 	db	0
   433  00FA0A                     STR_44:
   434  00FA0A  50                 	db	80	;'P'
   435  00FA0B  6C                 	db	108	;'l'
   436  00FA0C  65                 	db	101	;'e'
   437  00FA0D  61                 	db	97	;'a'
   438  00FA0E  73                 	db	115	;'s'
   439  00FA0F  65                 	db	101	;'e'
   440  00FA10  20                 	db	32
   441  00FA11  69                 	db	105	;'i'
   442  00FA12  6E                 	db	110	;'n'
   443  00FA13  70                 	db	112	;'p'
   444  00FA14  75                 	db	117	;'u'
   445  00FA15  74                 	db	116	;'t'
   446  00FA16  20                 	db	32
   447  00FA17  6C                 	db	108	;'l'
   448  00FA18  6F                 	db	111	;'o'
   449  00FA19  67                 	db	103	;'g'
   450  00FA1A  00                 	db	0
   451  00FA1B                     STR_59:
   452  00FA1B  52                 	db	82	;'R'
   453  00FA1C  3A                 	db	58	;':'
   454  00FA1D  25                 	db	37
   455  00FA1E  69                 	db	105	;'i'
   456  00FA1F  20                 	db	32
   457  00FA20  20                 	db	32
   458  00FA21  46                 	db	70	;'F'
   459  00FA22  3A                 	db	58	;':'
   460  00FA23  25                 	db	37
   461  00FA24  69                 	db	105	;'i'
   462  00FA25  20                 	db	32
   463  00FA26  20                 	db	32
   464  00FA27  4C                 	db	76	;'L'
   465  00FA28  3A                 	db	58	;':'
   466  00FA29  25                 	db	37
   467  00FA2A  69                 	db	105	;'i'
   468  00FA2B  00                 	db	0
   469  00FA2C                     STR_40:
   470  00FA2C  50                 	db	80	;'P'
   471  00FA2D  72                 	db	114	;'r'
   472  00FA2E  65                 	db	101	;'e'
   473  00FA2F  73                 	db	115	;'s'
   474  00FA30  73                 	db	115	;'s'
   475  00FA31  20                 	db	32
   476  00FA32  61                 	db	97	;'a'
   477  00FA33  6E                 	db	110	;'n'
   478  00FA34  79                 	db	121	;'y'
   479  00FA35  20                 	db	32
   480  00FA36  6B                 	db	107	;'k'
   481  00FA37  65                 	db	101	;'e'
   482  00FA38  79                 	db	121	;'y'
   483  00FA39  20                 	db	32
   484  00FA3A  74                 	db	116	;'t'
   485  00FA3B  6F                 	db	111	;'o'
   486  00FA3C  00                 	db	0
   487  00FA3D                     STR_42:
   488  00FA3D  25                 	db	37
   489  00FA3E  69                 	db	105	;'i'
   490  00FA3F  20                 	db	32
   491  00FA40  70                 	db	112	;'p'
   492  00FA41  72                 	db	114	;'r'
   493  00FA42  65                 	db	101	;'e'
   494  00FA43  76                 	db	118	;'v'
   495  00FA44  69                 	db	105	;'i'
   496  00FA45  6F                 	db	111	;'o'
   497  00FA46  75                 	db	117	;'u'
   498  00FA47  73                 	db	115	;'s'
   499  00FA48  20                 	db	32
   500  00FA49  6C                 	db	108	;'l'
   501  00FA4A  6F                 	db	111	;'o'
   502  00FA4B  67                 	db	103	;'g'
   503  00FA4C  73                 	db	115	;'s'
   504  00FA4D  00                 	db	0
   505  00FA4E                     STR_79:
   506  00FA4E  63                 	db	99	;'c'
   507  00FA4F  61                 	db	97	;'a'
   508  00FA50  62                 	db	98	;'b'
   509  00FA51  69                 	db	105	;'i'
   510  00FA52  6E                 	db	110	;'n'
   511  00FA53  65                 	db	101	;'e'
   512  00FA54  74                 	db	116	;'t'
   513  00FA55  20                 	db	32
   514  00FA56  73                 	db	115	;'s'
   515  00FA57  6F                 	db	111	;'o'
   516  00FA58  72                 	db	114	;'r'
   517  00FA59  74                 	db	116	;'t'
   518  00FA5A  65                 	db	101	;'e'
   519  00FA5B  72                 	db	114	;'r'
   520  00FA5C  21                 	db	33
   521  00FA5D  00                 	db	0
   522  00FA5E                     STR_93:
   523  00FA5E  6E                 	db	110	;'n'
   524  00FA5F  75                 	db	117	;'u'
   525  00FA60  6D                 	db	109	;'m'
   526  00FA61  62                 	db	98	;'b'
   527  00FA62  65                 	db	101	;'e'
   528  00FA63  72                 	db	114	;'r'
   529  00FA64  20                 	db	32
   530  00FA65  70                 	db	112	;'p'
   531  00FA66  72                 	db	114	;'r'
   532  00FA67  65                 	db	101	;'e'
   533  00FA68  73                 	db	115	;'s'
   534  00FA69  73                 	db	115	;'s'
   535  00FA6A  65                 	db	101	;'e'
   536  00FA6B  64                 	db	100	;'d'
   537  00FA6C  2E                 	db	46
   538  00FA6D  00                 	db	0
   539  00FA6E                     STR_65:
   540  00FA6E  44                 	db	68	;'D'
   541  00FA6F  72                 	db	114	;'r'
   542  00FA70  61                 	db	97	;'a'
   543  00FA71  77                 	db	119	;'w'
   544  00FA72  65                 	db	101	;'e'
   545  00FA73  72                 	db	114	;'r'
   546  00FA74  20                 	db	32
   547  00FA75  25                 	db	37
   548  00FA76  69                 	db	105	;'i'
   549  00FA77  20                 	db	32
   550  00FA78  66                 	db	102	;'f'
   551  00FA79  6F                 	db	111	;'o'
   552  00FA7A  6F                 	db	111	;'o'
   553  00FA7B  64                 	db	100	;'d'
   554  00FA7C  3A                 	db	58	;':'
   555  00FA7D  00                 	db	0
   556  00FA7E                     STR_51:
   557  00FA7E  4F                 	db	79	;'O'
   558  00FA7F  70                 	db	112	;'p'
   559  00FA80  65                 	db	101	;'e'
   560  00FA81  72                 	db	114	;'r'
   561  00FA82  61                 	db	97	;'a'
   562  00FA83  74                 	db	116	;'t'
   563  00FA84  69                 	db	105	;'i'
   564  00FA85  6F                 	db	111	;'o'
   565  00FA86  6E                 	db	110	;'n'
   566  00FA87  20                 	db	32
   567  00FA88  74                 	db	116	;'t'
   568  00FA89  69                 	db	105	;'i'
   569  00FA8A  6D                 	db	109	;'m'
   570  00FA8B  65                 	db	101	;'e'
   571  00FA8C  3A                 	db	58	;':'
   572  00FA8D  00                 	db	0
   573  00FA8E                     STR_53:
   574  00FA8E  4D                 	db	77	;'M'
   575  00FA8F  61                 	db	97	;'a'
   576  00FA90  72                 	db	114	;'r'
   577  00FA91  6B                 	db	107	;'k'
   578  00FA92  65                 	db	101	;'e'
   579  00FA93  64                 	db	100	;'d'
   580  00FA94  20                 	db	32
   581  00FA95  64                 	db	100	;'d'
   582  00FA96  72                 	db	114	;'r'
   583  00FA97  61                 	db	97	;'a'
   584  00FA98  77                 	db	119	;'w'
   585  00FA99  65                 	db	101	;'e'
   586  00FA9A  72                 	db	114	;'r'
   587  00FA9B  73                 	db	115	;'s'
   588  00FA9C  3A                 	db	58	;':'
   589  00FA9D  00                 	db	0
   590  00FA9E                     STR_69:
   591  00FA9E  44                 	db	68	;'D'
   592  00FA9F  72                 	db	114	;'r'
   593  00FAA0  61                 	db	97	;'a'
   594  00FAA1  77                 	db	119	;'w'
   595  00FAA2  65                 	db	101	;'e'
   596  00FAA3  72                 	db	114	;'r'
   597  00FAA4  20                 	db	32
   598  00FAA5  25                 	db	37
   599  00FAA6  69                 	db	105	;'i'
   600  00FAA7  20                 	db	32
   601  00FAA8  64                 	db	100	;'d'
   602  00FAA9  69                 	db	105	;'i'
   603  00FAAA  65                 	db	101	;'e'
   604  00FAAB  74                 	db	116	;'t'
   605  00FAAC  3A                 	db	58	;':'
   606  00FAAD  00                 	db	0
   607  00FAAE                     STR_90:
   608  00FAAE  41                 	db	65	;'A'
   609  00FAAF  6E                 	db	110	;'n'
   610  00FAB0  6F                 	db	111	;'o'
   611  00FAB1  74                 	db	116	;'t'
   612  00FAB2  68                 	db	104	;'h'
   613  00FAB3  65                 	db	101	;'e'
   614  00FAB4  72                 	db	114	;'r'
   615  00FAB5  20                 	db	32
   616  00FAB6  64                 	db	100	;'d'
   617  00FAB7  72                 	db	114	;'r'
   618  00FAB8  61                 	db	97	;'a'
   619  00FAB9  77                 	db	119	;'w'
   620  00FABA  65                 	db	101	;'e'
   621  00FABB  72                 	db	114	;'r'
   622  00FABC  3F                 	db	63	;'?'
   623  00FABD  00                 	db	0
   624  00FABE                     STR_78:
   625  00FABE  57                 	db	87	;'W'
   626  00FABF  65                 	db	101	;'e'
   627  00FAC0  6C                 	db	108	;'l'
   628  00FAC1  63                 	db	99	;'c'
   629  00FAC2  6F                 	db	111	;'o'
   630  00FAC3  6D                 	db	109	;'m'
   631  00FAC4  65                 	db	101	;'e'
   632  00FAC5  20                 	db	32
   633  00FAC6  74                 	db	116	;'t'
   634  00FAC7  6F                 	db	111	;'o'
   635  00FAC8  20                 	db	32
   636  00FAC9  79                 	db	121	;'y'
   637  00FACA  6F                 	db	111	;'o'
   638  00FACB  75                 	db	117	;'u'
   639  00FACC  72                 	db	114	;'r'
   640  00FACD  00                 	db	0
   641  00FACE                     STR_64:
   642  00FACE  23                 	db	35
   643  00FACF  20                 	db	32
   644  00FAD0  3D                 	db	61	;'='
   645  00FAD1  20                 	db	32
   646  00FAD2  4E                 	db	78	;'N'
   647  00FAD3  6F                 	db	111	;'o'
   648  00FAD4  2C                 	db	44
   649  00FAD5  20                 	db	32
   650  00FAD6  44                 	db	68	;'D'
   651  00FAD7  20                 	db	32
   652  00FAD8  3D                 	db	61	;'='
   653  00FAD9  20                 	db	32
   654  00FADA  59                 	db	89	;'Y'
   655  00FADB  65                 	db	101	;'e'
   656  00FADC  73                 	db	115	;'s'
   657  00FADD  00                 	db	0
   658  00FADE                     STR_2:
   659  00FADE  43                 	db	67	;'C'
   660  00FADF  6C                 	db	108	;'l'
   661  00FAE0  65                 	db	101	;'e'
   662  00FAE1  61                 	db	97	;'a'
   663  00FAE2  72                 	db	114	;'r'
   664  00FAE3  69                 	db	105	;'i'
   665  00FAE4  6E                 	db	110	;'n'
   666  00FAE5  67                 	db	103	;'g'
   667  00FAE6  20                 	db	32
   668  00FAE7  45                 	db	69	;'E'
   669  00FAE8  45                 	db	69	;'E'
   670  00FAE9  50                 	db	80	;'P'
   671  00FAEA  52                 	db	82	;'R'
   672  00FAEB  4F                 	db	79	;'O'
   673  00FAEC  4D                 	db	77	;'M'
   674  00FAED  00                 	db	0
   675  00FAEE                     STR_107:
   676  00FAEE  62                 	db	98	;'b'
   677  00FAEF  65                 	db	101	;'e'
   678  00FAF0  67                 	db	103	;'g'
   679  00FAF1  69                 	db	105	;'i'
   680  00FAF2  6E                 	db	110	;'n'
   681  00FAF3  20                 	db	32
   682  00FAF4  73                 	db	115	;'s'
   683  00FAF5  68                 	db	104	;'h'
   684  00FAF6  6F                 	db	111	;'o'
   685  00FAF7  72                 	db	114	;'r'
   686  00FAF8  74                 	db	116	;'t'
   687  00FAF9  6C                 	db	108	;'l'
   688  00FAFA  79                 	db	121	;'y'
   689  00FAFB  2E                 	db	46
   690  00FAFC  00                 	db	0
   691  00FAFD                     STR_73:
   692  00FAFD  44                 	db	68	;'D'
   693  00FAFE  72                 	db	114	;'r'
   694  00FAFF  61                 	db	97	;'a'
   695  00FB00  77                 	db	119	;'w'
   696  00FB01  65                 	db	101	;'e'
   697  00FB02  72                 	db	114	;'r'
   698  00FB03  20                 	db	32
   699  00FB04  6E                 	db	110	;'n'
   700  00FB05  75                 	db	117	;'u'
   701  00FB06  6D                 	db	109	;'m'
   702  00FB07  62                 	db	98	;'b'
   703  00FB08  65                 	db	101	;'e'
   704  00FB09  72                 	db	114	;'r'
   705  00FB0A  3A                 	db	58	;':'
   706  00FB0B  00                 	db	0
   707  00FB0C                     STR_60:
   708  00FB0C  49                 	db	73	;'I'
   709  00FB0D  6E                 	db	110	;'n'
   710  00FB0E  70                 	db	112	;'p'
   711  00FB0F  75                 	db	117	;'u'
   712  00FB10  74                 	db	116	;'t'
   713  00FB11  20                 	db	32
   714  00FB12  53                 	db	83	;'S'
   715  00FB13  75                 	db	117	;'u'
   716  00FB14  6D                 	db	109	;'m'
   717  00FB15  6D                 	db	109	;'m'
   718  00FB16  61                 	db	97	;'a'
   719  00FB17  72                 	db	114	;'r'
   720  00FB18  79                 	db	121	;'y'
   721  00FB19  3A                 	db	58	;':'
   722  00FB1A  00                 	db	0
   723  00FB1B                     STR_38:
   724  00FB1B  31                 	db	49	;'1'
   725  00FB1C  20                 	db	32
   726  00FB1D  70                 	db	112	;'p'
   727  00FB1E  72                 	db	114	;'r'
   728  00FB1F  65                 	db	101	;'e'
   729  00FB20  76                 	db	118	;'v'
   730  00FB21  69                 	db	105	;'i'
   731  00FB22  6F                 	db	111	;'o'
   732  00FB23  75                 	db	117	;'u'
   733  00FB24  73                 	db	115	;'s'
   734  00FB25  20                 	db	32
   735  00FB26  6C                 	db	108	;'l'
   736  00FB27  6F                 	db	111	;'o'
   737  00FB28  67                 	db	103	;'g'
   738  00FB29  00                 	db	0
   739  00FB2A                     STR_57:
   740  00FB2A  25                 	db	37
   741  00FB2B  69                 	db	105	;'i'
   742  00FB2C  2C                 	db	44
   743  00FB2D  20                 	db	32
   744  00FB2E  25                 	db	37
   745  00FB2F  69                 	db	105	;'i'
   746  00FB30  2C                 	db	44
   747  00FB31  20                 	db	32
   748  00FB32  25                 	db	37
   749  00FB33  69                 	db	105	;'i'
   750  00FB34  2C                 	db	44
   751  00FB35  20                 	db	32
   752  00FB36  25                 	db	37
   753  00FB37  69                 	db	105	;'i'
   754  00FB38  00                 	db	0
   755  00FB39                     STR_50:
   756  00FB39  25                 	db	37
   757  00FB3A  30                 	db	48	;'0'
   758  00FB3B  32                 	db	50	;'2'
   759  00FB3C  69                 	db	105	;'i'
   760  00FB3D  2F                 	db	47
   761  00FB3E  25                 	db	37
   762  00FB3F  30                 	db	48	;'0'
   763  00FB40  32                 	db	50	;'2'
   764  00FB41  69                 	db	105	;'i'
   765  00FB42  2F                 	db	47
   766  00FB43  25                 	db	37
   767  00FB44  30                 	db	48	;'0'
   768  00FB45  32                 	db	50	;'2'
   769  00FB46  69                 	db	105	;'i'
   770  00FB47  00                 	db	0
   771  00FB48                     STR_106:
   772  00FB48  4F                 	db	79	;'O'
   773  00FB49  70                 	db	112	;'p'
   774  00FB4A  65                 	db	101	;'e'
   775  00FB4B  72                 	db	114	;'r'
   776  00FB4C  61                 	db	97	;'a'
   777  00FB4D  74                 	db	116	;'t'
   778  00FB4E  69                 	db	105	;'i'
   779  00FB4F  6F                 	db	111	;'o'
   780  00FB50  6E                 	db	110	;'n'
   781  00FB51  20                 	db	32
   782  00FB52  77                 	db	119	;'w'
   783  00FB53  69                 	db	105	;'i'
   784  00FB54  6C                 	db	108	;'l'
   785  00FB55  6C                 	db	108	;'l'
   786  00FB56  00                 	db	0
   787  00FB57                     STR_82:
   788  00FB57  25                 	db	37
   789  00FB58  30                 	db	48	;'0'
   790  00FB59  32                 	db	50	;'2'
   791  00FB5A  78                 	db	120	;'x'
   792  00FB5B  2F                 	db	47
   793  00FB5C  25                 	db	37
   794  00FB5D  30                 	db	48	;'0'
   795  00FB5E  32                 	db	50	;'2'
   796  00FB5F  78                 	db	120	;'x'
   797  00FB60  2F                 	db	47
   798  00FB61  25                 	db	37
   799  00FB62  30                 	db	48	;'0'
   800  00FB63  32                 	db	50	;'2'
   801  00FB64  78                 	db	120	;'x'
   802  00FB65  00                 	db	0
   803  00FB66                     STR_83:
   804  00FB66  25                 	db	37
   805  00FB67  30                 	db	48	;'0'
   806  00FB68  32                 	db	50	;'2'
   807  00FB69  78                 	db	120	;'x'
   808  00FB6A  3A                 	db	58	;':'
   809  00FB6B  25                 	db	37
   810  00FB6C  30                 	db	48	;'0'
   811  00FB6D  32                 	db	50	;'2'
   812  00FB6E  78                 	db	120	;'x'
   813  00FB6F  3A                 	db	58	;':'
   814  00FB70  25                 	db	37
   815  00FB71  30                 	db	48	;'0'
   816  00FB72  32                 	db	50	;'2'
   817  00FB73  78                 	db	120	;'x'
   818  00FB74  00                 	db	0
   819  00FB75                     STR_94:
   820  00FB75  44                 	db	68	;'D'
   821  00FB76  72                 	db	114	;'r'
   822  00FB77  61                 	db	97	;'a'
   823  00FB78  77                 	db	119	;'w'
   824  00FB79  65                 	db	101	;'e'
   825  00FB7A  72                 	db	114	;'r'
   826  00FB7B  20                 	db	32
   827  00FB7C  61                 	db	97	;'a'
   828  00FB7D  6C                 	db	108	;'l'
   829  00FB7E  72                 	db	114	;'r'
   830  00FB7F  65                 	db	101	;'e'
   831  00FB80  61                 	db	97	;'a'
   832  00FB81  64                 	db	100	;'d'
   833  00FB82  79                 	db	121	;'y'
   834  00FB83  00                 	db	0
   835  00FB84                     STR_67:
   836  00FB84  49                 	db	73	;'I'
   837  00FB85  6E                 	db	110	;'n'
   838  00FB86  76                 	db	118	;'v'
   839  00FB87  61                 	db	97	;'a'
   840  00FB88  6C                 	db	108	;'l'
   841  00FB89  69                 	db	105	;'i'
   842  00FB8A  64                 	db	100	;'d'
   843  00FB8B  20                 	db	32
   844  00FB8C  66                 	db	102	;'f'
   845  00FB8D  6F                 	db	111	;'o'
   846  00FB8E  6F                 	db	111	;'o'
   847  00FB8F  64                 	db	100	;'d'
   848  00FB90  21                 	db	33
   849  00FB91  00                 	db	0
   850  00FB92                     STR_71:
   851  00FB92  49                 	db	73	;'I'
   852  00FB93  6E                 	db	110	;'n'
   853  00FB94  76                 	db	118	;'v'
   854  00FB95  61                 	db	97	;'a'
   855  00FB96  6C                 	db	108	;'l'
   856  00FB97  69                 	db	105	;'i'
   857  00FB98  64                 	db	100	;'d'
   858  00FB99  20                 	db	32
   859  00FB9A  64                 	db	100	;'d'
   860  00FB9B  69                 	db	105	;'i'
   861  00FB9C  65                 	db	101	;'e'
   862  00FB9D  74                 	db	116	;'t'
   863  00FB9E  21                 	db	33
   864  00FB9F  00                 	db	0
   865  00FBA0                     STR_101:
   866  00FBA0  73                 	db	115	;'s'
   867  00FBA1  75                 	db	117	;'u'
   868  00FBA2  63                 	db	99	;'c'
   869  00FBA3  63                 	db	99	;'c'
   870  00FBA4  65                 	db	101	;'e'
   871  00FBA5  73                 	db	115	;'s'
   872  00FBA6  73                 	db	115	;'s'
   873  00FBA7  66                 	db	102	;'f'
   874  00FBA8  75                 	db	117	;'u'
   875  00FBA9  6C                 	db	108	;'l'
   876  00FBAA  6C                 	db	108	;'l'
   877  00FBAB  79                 	db	121	;'y'
   878  00FBAC  21                 	db	33
   879  00FBAD  00                 	db	0
   880  00FBAE                     STR_41:
   881  00FBAE  6D                 	db	109	;'m'
   882  00FBAF  6F                 	db	111	;'o'
   883  00FBB0  76                 	db	118	;'v'
   884  00FBB1  65                 	db	101	;'e'
   885  00FBB2  20                 	db	32
   886  00FBB3  66                 	db	102	;'f'
   887  00FBB4  6F                 	db	111	;'o'
   888  00FBB5  72                 	db	114	;'r'
   889  00FBB6  77                 	db	119	;'w'
   890  00FBB7  61                 	db	97	;'a'
   891  00FBB8  72                 	db	114	;'r'
   892  00FBB9  64                 	db	100	;'d'
   893  00FBBA  2E                 	db	46
   894  00FBBB  00                 	db	0
   895  00FBBC                     STR_86:
   896  00FBBC  6F                 	db	111	;'o'
   897  00FBBD  72                 	db	114	;'r'
   898  00FBBE  20                 	db	32
   899  00FBBF  70                 	db	112	;'p'
   900  00FBC0  72                 	db	114	;'r'
   901  00FBC1  65                 	db	101	;'e'
   902  00FBC2  73                 	db	115	;'s'
   903  00FBC3  73                 	db	115	;'s'
   904  00FBC4  20                 	db	32
   905  00FBC5  44                 	db	68	;'D'
   906  00FBC6  20                 	db	32
   907  00FBC7  74                 	db	116	;'t'
   908  00FBC8  6F                 	db	111	;'o'
   909  00FBC9  00                 	db	0
   910  00FBCA                     STR_109:
   911  00FBCA  49                 	db	73	;'I'
   912  00FBCB  6E                 	db	110	;'n'
   913  00FBCC  76                 	db	118	;'v'
   914  00FBCD  61                 	db	97	;'a'
   915  00FBCE  6C                 	db	108	;'l'
   916  00FBCF  69                 	db	105	;'i'
   917  00FBD0  64                 	db	100	;'d'
   918  00FBD1  20                 	db	32
   919  00FBD2  6B                 	db	107	;'k'
   920  00FBD3  65                 	db	101	;'e'
   921  00FBD4  79                 	db	121	;'y'
   922  00FBD5  21                 	db	33
   923  00FBD6  00                 	db	0
   924  00FBD7                     STR_88:
   925  00FBD7  4D                 	db	77	;'M'
   926  00FBD8  61                 	db	97	;'a'
   927  00FBD9  78                 	db	120	;'x'
   928  00FBDA  69                 	db	105	;'i'
   929  00FBDB  6D                 	db	109	;'m'
   930  00FBDC  75                 	db	117	;'u'
   931  00FBDD  6D                 	db	109	;'m'
   932  00FBDE  20                 	db	32
   933  00FBDF  6F                 	db	111	;'o'
   934  00FBE0  66                 	db	102	;'f'
   935  00FBE1  20                 	db	32
   936  00FBE2  38                 	db	56	;'8'
   937  00FBE3  00                 	db	0
   938  00FBE4                     STR_63:
   939  00FBE4  41                 	db	65	;'A'
   940  00FBE5  6E                 	db	110	;'n'
   941  00FBE6  6F                 	db	111	;'o'
   942  00FBE7  74                 	db	116	;'t'
   943  00FBE8  68                 	db	104	;'h'
   944  00FBE9  65                 	db	101	;'e'
   945  00FBEA  72                 	db	114	;'r'
   946  00FBEB  20                 	db	32
   947  00FBEC  6C                 	db	108	;'l'
   948  00FBED  6F                 	db	111	;'o'
   949  00FBEE  67                 	db	103	;'g'
   950  00FBEF  3F                 	db	63	;'?'
   951  00FBF0  00                 	db	0
   952  00FBF1                     STR_80:
   953  00FBF1  43                 	db	67	;'C'
   954  00FBF2  75                 	db	117	;'u'
   955  00FBF3  72                 	db	114	;'r'
   956  00FBF4  72                 	db	114	;'r'
   957  00FBF5  65                 	db	101	;'e'
   958  00FBF6  6E                 	db	110	;'n'
   959  00FBF7  74                 	db	116	;'t'
   960  00FBF8  20                 	db	32
   961  00FBF9  64                 	db	100	;'d'
   962  00FBFA  61                 	db	97	;'a'
   963  00FBFB  74                 	db	116	;'t'
   964  00FBFC  65                 	db	101	;'e'
   965  00FBFD  00                 	db	0
   966  00FBFE                     STR_85:
   967  00FBFE  76                 	db	118	;'v'
   968  00FBFF  69                 	db	105	;'i'
   969  00FC00  65                 	db	101	;'e'
   970  00FC01  77                 	db	119	;'w'
   971  00FC02  20                 	db	32
   972  00FC03  6C                 	db	108	;'l'
   973  00FC04  6F                 	db	111	;'o'
   974  00FC05  67                 	db	103	;'g'
   975  00FC06  73                 	db	115	;'s'
   976  00FC07  2C                 	db	44
   977  00FC08  00                 	db	0
   978  00FC09                     STR_37:
   979  00FC09  61                 	db	97	;'a'
   980  00FC0A  76                 	db	118	;'v'
   981  00FC0B  61                 	db	97	;'a'
   982  00FC0C  69                 	db	105	;'i'
   983  00FC0D  6C                 	db	108	;'l'
   984  00FC0E  61                 	db	97	;'a'
   985  00FC0F  62                 	db	98	;'b'
   986  00FC10  6C                 	db	108	;'l'
   987  00FC11  65                 	db	101	;'e'
   988  00FC12  2E                 	db	46
   989  00FC13  00                 	db	0
   990  00FC14                     STR_108:
   991  00FC14  52                 	db	82	;'R'
   992  00FC15  65                 	db	101	;'e'
   993  00FC16  62                 	db	98	;'b'
   994  00FC17  6F                 	db	111	;'o'
   995  00FC18  6F                 	db	111	;'o'
   996  00FC19  74                 	db	116	;'t'
   997  00FC1A  69                 	db	105	;'i'
   998  00FC1B  6E                 	db	110	;'n'
   999  00FC1C  67                 	db	103	;'g'
  1000  00FC1D  2E                 	db	46
  1001  00FC1E  00                 	db	0
  1002  00FC1F                     STR_68:
  1003  00FC1F  54                 	db	84	;'T'
  1004  00FC20  72                 	db	114	;'r'
  1005  00FC21  79                 	db	121	;'y'
  1006  00FC22  20                 	db	32
  1007  00FC23  61                 	db	97	;'a'
  1008  00FC24  67                 	db	103	;'g'
  1009  00FC25  61                 	db	97	;'a'
  1010  00FC26  69                 	db	105	;'i'
  1011  00FC27  6E                 	db	110	;'n'
  1012  00FC28  2E                 	db	46
  1013  00FC29  00                 	db	0
  1014  00FC2A                     STR_61:
  1015  00FC2A  44                 	db	68	;'D'
  1016  00FC2B  72                 	db	114	;'r'
  1017  00FC2C  61                 	db	97	;'a'
  1018  00FC2D  77                 	db	119	;'w'
  1019  00FC2E  65                 	db	101	;'e'
  1020  00FC2F  72                 	db	114	;'r'
  1021  00FC30  20                 	db	32
  1022  00FC31  25                 	db	37
  1023  00FC32  69                 	db	105	;'i'
  1024  00FC33  3A                 	db	58	;':'
  1025  00FC34  00                 	db	0
  1026  00FC35                     STR_102:
  1027  00FC35  53                 	db	83	;'S'
  1028  00FC36  75                 	db	117	;'u'
  1029  00FC37  6D                 	db	109	;'m'
  1030  00FC38  6D                 	db	109	;'m'
  1031  00FC39  61                 	db	97	;'a'
  1032  00FC3A  72                 	db	114	;'r'
  1033  00FC3B  79                 	db	121	;'y'
  1034  00FC3C  20                 	db	32
  1035  00FC3D  6F                 	db	111	;'o'
  1036  00FC3E  66                 	db	102	;'f'
  1037  00FC3F  00                 	db	0
  1038  00FC40                     STR_84:
  1039  00FC40  50                 	db	80	;'P'
  1040  00FC41  72                 	db	114	;'r'
  1041  00FC42  65                 	db	101	;'e'
  1042  00FC43  73                 	db	115	;'s'
  1043  00FC44  73                 	db	115	;'s'
  1044  00FC45  20                 	db	32
  1045  00FC46  23                 	db	35
  1046  00FC47  20                 	db	32
  1047  00FC48  74                 	db	116	;'t'
  1048  00FC49  6F                 	db	111	;'o'
  1049  00FC4A  00                 	db	0
  1050  00FC4B                     STR_81:
  1051  00FC4B  61                 	db	97	;'a'
  1052  00FC4C  6E                 	db	110	;'n'
  1053  00FC4D  64                 	db	100	;'d'
  1054  00FC4E  20                 	db	32
  1055  00FC4F  74                 	db	116	;'t'
  1056  00FC50  69                 	db	105	;'i'
  1057  00FC51  6D                 	db	109	;'m'
  1058  00FC52  65                 	db	101	;'e'
  1059  00FC53  3A                 	db	58	;':'
  1060  00FC54  00                 	db	0
  1061  00FC55                     STR_92:
  1062  00FC55  4E                 	db	78	;'N'
  1063  00FC56  6F                 	db	111	;'o'
  1064  00FC57  20                 	db	32
  1065  00FC58  64                 	db	100	;'d'
  1066  00FC59  72                 	db	114	;'r'
  1067  00FC5A  61                 	db	97	;'a'
  1068  00FC5B  77                 	db	119	;'w'
  1069  00FC5C  65                 	db	101	;'e'
  1070  00FC5D  72                 	db	114	;'r'
  1071  00FC5E  00                 	db	0
  1072  00FC5F                     STR_4:
  1073  00FC5F  64                 	db	100	;'d'
  1074  00FC60  72                 	db	114	;'r'
  1075  00FC61  61                 	db	97	;'a'
  1076  00FC62  77                 	db	119	;'w'
  1077  00FC63  65                 	db	101	;'e'
  1078  00FC64  72                 	db	114	;'r'
  1079  00FC65  20                 	db	32
  1080  00FC66  25                 	db	37
  1081  00FC67  69                 	db	105	;'i'
  1082  00FC68  00                 	db	0
  1083  00FC69                     STR_3:
  1084  00FC69  4D                 	db	77	;'M'
  1085  00FC6A  6F                 	db	111	;'o'
  1086  00FC6B  76                 	db	118	;'v'
  1087  00FC6C  69                 	db	105	;'i'
  1088  00FC6D  6E                 	db	110	;'n'
  1089  00FC6E  67                 	db	103	;'g'
  1090  00FC6F  20                 	db	32
  1091  00FC70  74                 	db	116	;'t'
  1092  00FC71  6F                 	db	111	;'o'
  1093  00FC72  00                 	db	0
  1094  00FC73                     STR_45:
  1095  00FC73  6E                 	db	110	;'n'
  1096  00FC74  75                 	db	117	;'u'
  1097  00FC75  6D                 	db	109	;'m'
  1098  00FC76  62                 	db	98	;'b'
  1099  00FC77  65                 	db	101	;'e'
  1100  00FC78  72                 	db	114	;'r'
  1101  00FC79  3A                 	db	58	;':'
  1102  00FC7A  20                 	db	32
  1103  00FC7B  00                 	db	0
  1104  00FC7C                     STR_95:
  1105  00FC7C  69                 	db	105	;'i'
  1106  00FC7D  6E                 	db	110	;'n'
  1107  00FC7E  20                 	db	32
  1108  00FC7F  75                 	db	117	;'u'
  1109  00FC80  73                 	db	115	;'s'
  1110  00FC81  65                 	db	101	;'e'
  1111  00FC82  21                 	db	33
  1112  00FC83  00                 	db	0
  1113  00FC84                     STR_103:
  1114  00FC84  69                 	db	105	;'i'
  1115  00FC85  6E                 	db	110	;'n'
  1116  00FC86  70                 	db	112	;'p'
  1117  00FC87  75                 	db	117	;'u'
  1118  00FC88  74                 	db	116	;'t'
  1119  00FC89  73                 	db	115	;'s'
  1120  00FC8A  3A                 	db	58	;':'
  1121  00FC8B  00                 	db	0
  1122  00FC8C                     STR_52:
  1123  00FC8C  25                 	db	37
  1124  00FC8D  69                 	db	105	;'i'
  1125  00FC8E  3A                 	db	58	;':'
  1126  00FC8F  25                 	db	37
  1127  00FC90  30                 	db	48	;'0'
  1128  00FC91  32                 	db	50	;'2'
  1129  00FC92  69                 	db	105	;'i'
  1130  00FC93  00                 	db	0
  1131  00FC94                     STR_36:
  1132  00FC94  4E                 	db	78	;'N'
  1133  00FC95  6F                 	db	111	;'o'
  1134  00FC96  20                 	db	32
  1135  00FC97  6C                 	db	108	;'l'
  1136  00FC98  6F                 	db	111	;'o'
  1137  00FC99  67                 	db	103	;'g'
  1138  00FC9A  73                 	db	115	;'s'
  1139  00FC9B  00                 	db	0
  1140  00FC9C                     STR_1:
  1141  00FC9C  53                 	db	83	;'S'
  1142  00FC9D  74                 	db	116	;'t'
  1143  00FC9E  61                 	db	97	;'a'
  1144  00FC9F  6E                 	db	110	;'n'
  1145  00FCA0  64                 	db	100	;'d'
  1146  00FCA1  62                 	db	98	;'b'
  1147  00FCA2  79                 	db	121	;'y'
  1148  00FCA3  00                 	db	0
  1149  00FCA4                     STR_113:
  1150  00FCA4  28                 	db	40
  1151  00FCA5  6E                 	db	110	;'n'
  1152  00FCA6  75                 	db	117	;'u'
  1153  00FCA7  6C                 	db	108	;'l'
  1154  00FCA8  6C                 	db	108	;'l'
  1155  00FCA9  29                 	db	41
  1156  00FCAA  00                 	db	0
  1157  00FCAB                     STR_46:
  1158  00FCAB  47                 	db	71	;'G'
  1159  00FCAC  72                 	db	114	;'r'
  1160  00FCAD  65                 	db	101	;'e'
  1161  00FCAE  61                 	db	97	;'a'
  1162  00FCAF  74                 	db	116	;'t'
  1163  00FCB0  21                 	db	33
  1164  00FCB1  00                 	db	0
  1165  00FCB2                     STR_49:
  1166  00FCB2  44                 	db	68	;'D'
  1167  00FCB3  61                 	db	97	;'a'
  1168  00FCB4  74                 	db	116	;'t'
  1169  00FCB5  65                 	db	101	;'e'
  1170  00FCB6  3A                 	db	58	;':'
  1171  00FCB7  00                 	db	0
  1172  00FCB8                     STR_35:
  1173  00FCB8  31                 	db	49	;'1'
  1174  00FCB9  31                 	db	49	;'1'
  1175  00FCBA  31                 	db	49	;'1'
  1176  00FCBB  31                 	db	49	;'1'
  1177  00FCBC  00                 	db	0
  1178  00FCBD                     STR_19:
  1179  00FCBD  52                 	db	82	;'R'
  1180  00FCBE  46                 	db	70	;'F'
  1181  00FCBF  46                 	db	70	;'F'
  1182  00FCC0  4C                 	db	76	;'L'
  1183  00FCC1  00                 	db	0
  1184  00FCC2                     STR_18:
  1185  00FCC2  52                 	db	82	;'R'
  1186  00FCC3  52                 	db	82	;'R'
  1187  00FCC4  46                 	db	70	;'F'
  1188  00FCC5  4C                 	db	76	;'L'
  1189  00FCC6  00                 	db	0
  1190  00FCC7                     STR_20:
  1191  00FCC7  52                 	db	82	;'R'
  1192  00FCC8  46                 	db	70	;'F'
  1193  00FCC9  4C                 	db	76	;'L'
  1194  00FCCA  4C                 	db	76	;'L'
  1195  00FCCB  00                 	db	0
  1196  00FCCC                     STR_22:
  1197  00FCCC  46                 	db	70	;'F'
  1198  00FCCD  4C                 	db	76	;'L'
  1199  00FCCE  4C                 	db	76	;'L'
  1200  00FCCF  4C                 	db	76	;'L'
  1201  00FCD0  00                 	db	0
  1202  00FCD1                     STR_21:
  1203  00FCD1  52                 	db	82	;'R'
  1204  00FCD2  4C                 	db	76	;'L'
  1205  00FCD3  4C                 	db	76	;'L'
  1206  00FCD4  4C                 	db	76	;'L'
  1207  00FCD5  00                 	db	0
  1208  00FCD6                     STR_62:
  1209  00FCD6  25                 	db	37
  1210  00FCD7  73                 	db	115	;'s'
  1211  00FCD8  25                 	db	37
  1212  00FCD9  73                 	db	115	;'s'
  1213  00FCDA  00                 	db	0
  1214  00FCDB                     STR_34:
  1215  00FCDB  32                 	db	50	;'2'
  1216  00FCDC  31                 	db	49	;'1'
  1217  00FCDD  31                 	db	49	;'1'
  1218  00FCDE  00                 	db	0
  1219  00FCDF                     STR_33:
  1220  00FCDF  31                 	db	49	;'1'
  1221  00FCE0  32                 	db	50	;'2'
  1222  00FCE1  31                 	db	49	;'1'
  1223  00FCE2  00                 	db	0
  1224  00FCE3                     STR_32:
  1225  00FCE3  31                 	db	49	;'1'
  1226  00FCE4  31                 	db	49	;'1'
  1227  00FCE5  32                 	db	50	;'2'
  1228  00FCE6  00                 	db	0
  1229  00FCE7                     STR_13:
  1230  00FCE7  52                 	db	82	;'R'
  1231  00FCE8  46                 	db	70	;'F'
  1232  00FCE9  46                 	db	70	;'F'
  1233  00FCEA  00                 	db	0
  1234  00FCEB                     STR_11:
  1235  00FCEB  52                 	db	82	;'R'
  1236  00FCEC  52                 	db	82	;'R'
  1237  00FCED  46                 	db	70	;'F'
  1238  00FCEE  00                 	db	0
  1239  00FCEF                     STR_14:
  1240  00FCEF  52                 	db	82	;'R'
  1241  00FCF0  4C                 	db	76	;'L'
  1242  00FCF1  4C                 	db	76	;'L'
  1243  00FCF2  00                 	db	0
  1244  00FCF3                     STR_12:
  1245  00FCF3  52                 	db	82	;'R'
  1246  00FCF4  52                 	db	82	;'R'
  1247  00FCF5  4C                 	db	76	;'L'
  1248  00FCF6  00                 	db	0
  1249  00FCF7                     STR_30:
  1250  00FCF7  32                 	db	50	;'2'
  1251  00FCF8  32                 	db	50	;'2'
  1252  00FCF9  00                 	db	0
  1253  00FCFA                     STR_28:
  1254  00FCFA  31                 	db	49	;'1'
  1255  00FCFB  33                 	db	51	;'3'
  1256  00FCFC  00                 	db	0
  1257  00FCFD                     STR_5:
  1258  00FCFD  52                 	db	82	;'R'
  1259  00FCFE  00                 	db	0
  1260  0000                     
  1261                           ; #config settings
  1262  00FCFF  00                 	db	0	; dummy byte at the end
  1263  0000                     
  1264                           	psect	cinit
  1265  00B078                     __pcinit:
  1266                           	opt stack 0
  1267  00B078                     start_initialization:
  1268                           	opt stack 0
  1269  00B078                     __initialization:
  1270                           	opt stack 0
  1271                           
  1272                           ; Initialize objects allocated to BANK2 (62 bytes)
  1273                           ; load TBLPTR registers with __pidataBANK2
  1274  00B078  0EAC               	movlw	low __pidataBANK2
  1275  00B07A  6EF6               	movwf	tblptrl,c
  1276  00B07C  0EAE               	movlw	high __pidataBANK2
  1277  00B07E  6EF7               	movwf	tblptrh,c
  1278  00B080  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1279  00B082  6EF8               	movwf	tblptru,c
  1280  00B084  EE02  F040         	lfsr	0,__pdataBANK2
  1281  00B088  EE10 F03E          	lfsr	1,62
  1282  00B08C                     copy_data0:
  1283  00B08C  0009               	tblrd		*+
  1284  00B08E  CFF5 FFEE          	movff	tablat,postinc0
  1285  00B092  50E5               	movf	postdec1,w,c
  1286  00B094  50E1               	movf	fsr1l,w,c
  1287  00B096  E1FA               	bnz	copy_data0
  1288                           
  1289                           ; Initialize objects allocated to COMRAM (8 bytes)
  1290                           ; load TBLPTR registers with __pidataCOMRAM
  1291  00B098  0E94               	movlw	low __pidataCOMRAM
  1292  00B09A  6EF6               	movwf	tblptrl,c
  1293  00B09C  0EAD               	movlw	high __pidataCOMRAM
  1294  00B09E  6EF7               	movwf	tblptrh,c
  1295  00B0A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1296  00B0A2  6EF8               	movwf	tblptru,c
  1297  00B0A4  EE00  F078         	lfsr	0,__pdataCOMRAM
  1298  00B0A8  EE10 F008          	lfsr	1,8
  1299  00B0AC                     copy_data1:
  1300  00B0AC  0009               	tblrd		*+
  1301  00B0AE  CFF5 FFEE          	movff	tablat,postinc0
  1302  00B0B2  50E5               	movf	postdec1,w,c
  1303  00B0B4  50E1               	movf	fsr1l,w,c
  1304  00B0B6  E1FA               	bnz	copy_data1
  1305                           
  1306                           ; Clear objects allocated to BANK2 (64 bytes)
  1307  00B0B8  EE02  F000         	lfsr	0,__pbssBANK2
  1308  00B0BC  0E40               	movlw	64
  1309  00B0BE                     clear_0:
  1310  00B0BE  6AEE               	clrf	postinc0,c
  1311  00B0C0  06E8               	decf	wreg,f,c
  1312  00B0C2  E1FD               	bnz	clear_0
  1313                           
  1314                           ; Clear objects allocated to BANK1 (112 bytes)
  1315  00B0C4  EE01  F08A         	lfsr	0,__pbssBANK1
  1316  00B0C8  0E70               	movlw	112
  1317  00B0CA                     clear_1:
  1318  00B0CA  6AEE               	clrf	postinc0,c
  1319  00B0CC  06E8               	decf	wreg,f,c
  1320  00B0CE  E1FD               	bnz	clear_1
  1321                           
  1322                           ; Clear objects allocated to BANK0 (52 bytes)
  1323  00B0D0  EE00  F0C8         	lfsr	0,__pbssBANK0
  1324  00B0D4  0E34               	movlw	52
  1325  00B0D6                     clear_2:
  1326  00B0D6  6AEE               	clrf	postinc0,c
  1327  00B0D8  06E8               	decf	wreg,f,c
  1328  00B0DA  E1FD               	bnz	clear_2
  1329                           
  1330                           ; Clear objects allocated to COMRAM (12 bytes)
  1331  00B0DC  EE00  F06C         	lfsr	0,__pbssCOMRAM
  1332  00B0E0  0E0C               	movlw	12
  1333  00B0E2                     clear_3:
  1334  00B0E2  6AEE               	clrf	postinc0,c
  1335  00B0E4  06E8               	decf	wreg,f,c
  1336  00B0E6  E1FD               	bnz	clear_3
  1337  00B0E8                     end_of_initialization:
  1338                           	opt stack 0
  1339  00B0E8                     __end_of__initialization:
  1340                           	opt stack 0
  1341  00B0E8  0100               	movlb	0
  1342  00B0EA  EFB6  F05B         	goto	_main	;jump to C main() function
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	bssCOMRAM
  1353  00006C                     __pbssCOMRAM:
  1354                           	opt stack 0
  1355  00006C                     sortDrawerList@F3072:
  1356                           	opt stack 0
  1357  00006C                     	ds	8
  1358  000074                     _firstIteration:
  1359                           	opt stack 0
  1360  000074                     	ds	2
  1361  000076                     _LCDinterruptState:
  1362                           	opt stack 0
  1363  000076                     	ds	1
  1364  000077                     _UARTinterruptState:
  1365                           	opt stack 0
  1366  000077                     	ds	1
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           	psect	dataCOMRAM
  1377  000078                     __pdataCOMRAM:
  1378                           	opt stack 0
  1379  000078                     _UART:
  1380                           	opt stack 0
  1381  000078                     	ds	2
  1382  00007A                     _drawerDown:
  1383                           	opt stack 0
  1384  00007A                     	ds	1
  1385  00007B                     _drawerUp:
  1386                           	opt stack 0
  1387  00007B                     	ds	1
  1388  00007C                     _columnRight:
  1389                           	opt stack 0
  1390  00007C                     	ds	1
  1391  00007D                     _columnLeft:
  1392                           	opt stack 0
  1393  00007D                     	ds	1
  1394  00007E                     _rowDown:
  1395                           	opt stack 0
  1396  00007E                     	ds	1
  1397  00007F                     _rowUp:
  1398                           	opt stack 0
  1399  00007F                     	ds	1
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           tblptrl	equ	0xFF6
  1403                           tablat	equ	0xFF5
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postdec1	equ	0xFE5
  1407                           fsr1l	equ	0xFE1
  1408                           
  1409                           	psect	bssBANK0
  1410  0000C8                     __pbssBANK0:
  1411                           	opt stack 0
  1412  0000C8                     diet_press@F3132:
  1413                           	opt stack 0
  1414  0000C8                     	ds	8
  1415  0000D0                     food_press@F3117:
  1416                           	opt stack 0
  1417  0000D0                     	ds	8
  1418  0000D8                     sortDrawerList@F3081:
  1419                           	opt stack 0
  1420  0000D8                     	ds	8
  1421  0000E0                     sortDrawerList@F3078:
  1422                           	opt stack 0
  1423  0000E0                     	ds	8
  1424  0000E8                     sortDrawerList@F3075:
  1425                           	opt stack 0
  1426  0000E8                     	ds	8
  1427  0000F0                     _uart:
  1428                           	opt stack 0
  1429  0000F0                     	ds	12
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1l	equ	0xFE1
  1438                           
  1439                           	psect	bssBANK1
  1440  00018A                     __pbssBANK1:
  1441                           	opt stack 0
  1442  00018A                     standbyMode@F3156:
  1443                           	opt stack 0
  1444  00018A                     	ds	16
  1445  00019A                     standbyMode@F3154:
  1446                           	opt stack 0
  1447  00019A                     	ds	16
  1448  0001AA                     standbyMode@F3152:
  1449                           	opt stack 0
  1450  0001AA                     	ds	16
  1451  0001BA                     mainOperation@F3133:
  1452                           	opt stack 0
  1453  0001BA                     	ds	16
  1454  0001CA                     mainOperation@F3131:
  1455                           	opt stack 0
  1456  0001CA                     	ds	16
  1457  0001DA                     mainOperation@F3129:
  1458                           	opt stack 0
  1459  0001DA                     	ds	16
  1460  0001EA                     mainOperation@F3127:
  1461                           	opt stack 0
  1462  0001EA                     	ds	16
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           postdec1	equ	0xFE5
  1470                           fsr1l	equ	0xFE1
  1471                           
  1472                           	psect	bssBANK2
  1473  000200                     __pbssBANK2:
  1474                           	opt stack 0
  1475  000200                     standbyMode@F3162:
  1476                           	opt stack 0
  1477  000200                     	ds	16
  1478  000210                     standbyMode@F3160:
  1479                           	opt stack 0
  1480  000210                     	ds	16
  1481  000220                     standbyMode@F3158:
  1482                           	opt stack 0
  1483  000220                     	ds	16
  1484  000230                     _arr_dataRX:
  1485                           	opt stack 0
  1486  000230                     	ds	16
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1l	equ	0xFE1
  1495                           
  1496                           	psect	dataBANK2
  1497  000240                     __pdataBANK2:
  1498                           	opt stack 0
  1499  000240                     _inputs:
  1500                           	opt stack 0
  1501  000240                     	ds	36
  1502  000264                     _foodInputs:
  1503                           	opt stack 0
  1504  000264                     	ds	26
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           postdec1	equ	0xFE5
  1512                           fsr1l	equ	0xFE1
  1513                           
  1514                           	psect	cstackBANK1
  1515  000100                     __pcstackBANK1:
  1516                           	opt stack 0
  1517  000100                     standbyMode@roundPieces:
  1518                           	opt stack 0
  1519                           
  1520                           ; 16 bytes @ 0x0
  1521  000100                     	ds	16
  1522  000110                     standbyMode@flatPieces:
  1523                           	opt stack 0
  1524                           
  1525                           ; 16 bytes @ 0x10
  1526  000110                     	ds	16
  1527  000120                     standbyMode@longPieces:
  1528                           	opt stack 0
  1529                           
  1530                           ; 16 bytes @ 0x20
  1531  000120                     	ds	16
  1532  000130                     standbyMode@dietType:
  1533                           	opt stack 0
  1534                           
  1535                           ; 16 bytes @ 0x30
  1536  000130                     	ds	16
  1537  000140                     standbyMode@foodType:
  1538                           	opt stack 0
  1539                           
  1540                           ; 16 bytes @ 0x40
  1541  000140                     	ds	16
  1542  000150                     standbyMode@drawerInformation:
  1543                           	opt stack 0
  1544                           
  1545                           ; 16 bytes @ 0x50
  1546  000150                     	ds	16
  1547  000160                     standbyMode@time:
  1548                           	opt stack 0
  1549                           
  1550                           ; 7 bytes @ 0x60
  1551  000160                     	ds	7
  1552  000167                     standbyMode@firstIteration:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x67
  1556  000167                     	ds	2
  1557  000169                     standbyMode@whichKey:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x69
  1561  000169                     	ds	2
  1562  00016B                     standbyMode@keypress:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0x6B
  1566  00016B                     	ds	1
  1567  00016C                     standbyMode@round:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x6C
  1571  00016C                     	ds	2
  1572  00016E                     standbyMode@flat:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x6E
  1576  00016E                     	ds	2
  1577  000170                     standbyMode@lng:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x70
  1581  000170                     	ds	2
  1582  000172                     standbyMode@decodedDiet:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x72
  1586  000172                     	ds	2
  1587  000174                     standbyMode@storedFoodType:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x74
  1591  000174                     	ds	2
  1592  000176                     standbyMode@keypress1:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x76
  1596  000176                     	ds	1
  1597  000177                     standbyMode@validDrawer:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x77
  1601  000177                     	ds	2
  1602  000179                     standbyMode@zero:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x79
  1606  000179                     	ds	2
  1607  00017B                     standbyMode@n:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x7B
  1611  00017B                     	ds	2
  1612  00017D                     standbyMode@x:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x7D
  1616  00017D                     	ds	2
  1617  00017F                     standbyMode@logNumber:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x7F
  1621  00017F                     	ds	1
  1622  000180                     standbyMode@diet:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x80
  1626  000180                     	ds	2
  1627  000182                     standbyMode@drawer:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x82
  1631  000182                     	ds	2
  1632  000184                     standbyMode@food:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x84
  1636  000184                     	ds	2
  1637  000186                     standbyMode@drawerCount:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x86
  1641  000186                     	ds	2
  1642  000188                     standbyMode@i:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x88
  1646  000188                     	ds	2
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	cstackBANK0
  1657  000080                     __pcstackBANK0:
  1658                           	opt stack 0
  1659  000080                     mainOperation@dietTable:
  1660                           	opt stack 0
  1661                           
  1662                           ; 16 bytes @ 0x0
  1663  000080                     	ds	16
  1664  000090                     mainOperation@foodTable:
  1665                           	opt stack 0
  1666                           
  1667                           ; 16 bytes @ 0x10
  1668  000090                     	ds	16
  1669  0000A0                     mainOperation@drawerTable:
  1670                           	opt stack 0
  1671                           
  1672                           ; 16 bytes @ 0x20
  1673  0000A0                     	ds	16
  1674  0000B0                     mainOperation@temp:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x30
  1678  0000B0                     	ds	2
  1679  0000B2                     mainOperation@nextDrawer:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x32
  1683  0000B2                     	ds	2
  1684  0000B4                     mainOperation@currentDrawer:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x34
  1688  0000B4                     	ds	2
  1689  0000B6                     mainOperation@sortedDrawerTable:
  1690                           	opt stack 0
  1691                           
  1692                           ; 16 bytes @ 0x36
  1693  0000B6                     	ds	16
  1694  0000C6                     mainOperation@i:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x46
  1698  0000C6                     	ds	2
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           postdec1	equ	0xFE5
  1706                           fsr1l	equ	0xFE1
  1707                           
  1708                           	psect	cstackCOMRAM
  1709  000001                     __pcstackCOMRAM:
  1710                           	opt stack 0
  1711  000001                     ??_isdigit:
  1712  000001                     ??_I2C_Master_Wait:
  1713  000001                     ?_check_food:
  1714                           	opt stack 0
  1715  000001                     ?_getRound:
  1716                           	opt stack 0
  1717  000001                     ?_getFlat:
  1718                           	opt stack 0
  1719  000001                     ?_getLong:
  1720                           	opt stack 0
  1721  000001                     ?_verifyKeypress:
  1722                           	opt stack 0
  1723  000001                     ?_printFoodInput:
  1724                           	opt stack 0
  1725  000001                     ?_get_digits:
  1726                           	opt stack 0
  1727  000001                     ?_decode_diet:
  1728                           	opt stack 0
  1729  000001                     ?_decode_drawer:
  1730                           	opt stack 0
  1731  000001                     ?___wmul:
  1732                           	opt stack 0
  1733  000001                     ?___lwdiv:
  1734                           	opt stack 0
  1735  000001                     ?___aldiv:
  1736                           	opt stack 0
  1737  000001                     ?___lldiv:
  1738                           	opt stack 0
  1739  000001                     writeEEPROM@data:
  1740                           	opt stack 0
  1741  000001                     readEEPROM@address:
  1742                           	opt stack 0
  1743  000001                     lcdNibble@temp:
  1744                           	opt stack 0
  1745  000001                     sortDrawerList@drawerTable:
  1746                           	opt stack 0
  1747  000001                     check_food@sum:
  1748                           	opt stack 0
  1749  000001                     getRound@code:
  1750                           	opt stack 0
  1751  000001                     getFlat@code:
  1752                           	opt stack 0
  1753  000001                     getLong@code:
  1754                           	opt stack 0
  1755  000001                     verifyKeypress@keypress:
  1756                           	opt stack 0
  1757  000001                     printFoodInput@food:
  1758                           	opt stack 0
  1759  000001                     get_digits@sum:
  1760                           	opt stack 0
  1761  000001                     decode_diet@dietType:
  1762                           	opt stack 0
  1763  000001                     decode_drawer@drawer:
  1764                           	opt stack 0
  1765  000001                     ___wmul@multiplier:
  1766                           	opt stack 0
  1767  000001                     ___lwdiv@dividend:
  1768                           	opt stack 0
  1769  000001                     ___aldiv@dividend:
  1770                           	opt stack 0
  1771  000001                     ___lldiv@dividend:
  1772                           	opt stack 0
  1773                           
  1774                           ; 4 bytes @ 0x0
  1775  000001                     	ds	1
  1776  000002                     writeEEPROM@address:
  1777                           	opt stack 0
  1778  000002                     I2C_Master_Read@ackBit:
  1779                           	opt stack 0
  1780  000002                     lcdNibble@data:
  1781                           	opt stack 0
  1782  000002                     _isdigit$1573:
  1783                           	opt stack 0
  1784  000002                     I2C_Master_Write@byteToWrite:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x1
  1788  000002                     	ds	1
  1789  000003                     ??_shiftEEPROM:
  1790  000003                     ??_getRound:
  1791  000003                     ??_getFlat:
  1792  000003                     ??_getLong:
  1793  000003                     ??_verifyKeypress:
  1794  000003                     ??_get_digits:
  1795  000003                     ??_decode_diet:
  1796  000003                     ??_decode_drawer:
  1797  000003                     I2C_Master_Read@receivedByte:
  1798                           	opt stack 0
  1799  000003                     lcdInst@data:
  1800                           	opt stack 0
  1801  000003                     putch@data:
  1802                           	opt stack 0
  1803  000003                     isdigit@c:
  1804                           	opt stack 0
  1805  000003                     sortDrawerList@sortedDrawerTable:
  1806                           	opt stack 0
  1807  000003                     check_food@foodInput:
  1808                           	opt stack 0
  1809  000003                     initEEPROM@i:
  1810                           	opt stack 0
  1811  000003                     ___wmul@multiplicand:
  1812                           	opt stack 0
  1813  000003                     ___lwdiv@divisor:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x2
  1817  000003                     	ds	1
  1818  000004                     ??_initLCD:
  1819  000004                     shiftEEPROM@temp:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x3
  1823  000004                     	ds	1
  1824  000005                     ??_sortDrawerList:
  1825  000005                     ??_check_food:
  1826  000005                     verifyKeypress@logNumber:
  1827                           	opt stack 0
  1828  000005                     getRound@returnValue:
  1829                           	opt stack 0
  1830  000005                     getFlat@returnValue:
  1831                           	opt stack 0
  1832  000005                     getLong@returnValue:
  1833                           	opt stack 0
  1834  000005                     get_digits@count:
  1835                           	opt stack 0
  1836  000005                     decode_diet@returnValue:
  1837                           	opt stack 0
  1838  000005                     decode_drawer@returnValue:
  1839                           	opt stack 0
  1840  000005                     ___wmul@product:
  1841                           	opt stack 0
  1842  000005                     ___lwdiv@quotient:
  1843                           	opt stack 0
  1844  000005                     ___aldiv@divisor:
  1845                           	opt stack 0
  1846  000005                     ___lldiv@divisor:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0x4
  1850  000005                     	ds	1
  1851  000006                     verifyKeypress@returnVal:
  1852                           	opt stack 0
  1853  000006                     shiftEEPROM@i:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x5
  1857  000006                     	ds	1
  1858  000007                     ___lwdiv@counter:
  1859                           	opt stack 0
  1860  000007                     getUserInputs@drawerTable:
  1861                           	opt stack 0
  1862  000007                     check_food@returnValue:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x6
  1866  000007                     	ds	1
  1867  000008                     ?___lwmod:
  1868                           	opt stack 0
  1869  000008                     verifyKeypress@i:
  1870                           	opt stack 0
  1871  000008                     ___lwmod@dividend:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x7
  1875  000008                     	ds	1
  1876  000009                     ___aldiv@counter:
  1877                           	opt stack 0
  1878  000009                     getUserInputs@dietTable:
  1879                           	opt stack 0
  1880  000009                     ___lldiv@quotient:
  1881                           	opt stack 0
  1882  000009                     sortDrawerList@sublist1:
  1883                           	opt stack 0
  1884                           
  1885                           ; 8 bytes @ 0x8
  1886  000009                     	ds	1
  1887  00000A                     ___aldiv@sign:
  1888                           	opt stack 0
  1889  00000A                     ___lwmod@divisor:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x9
  1893  00000A                     	ds	1
  1894  00000B                     getUserInputs@foodTable:
  1895                           	opt stack 0
  1896  00000B                     ___aldiv@quotient:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0xA
  1900  00000B                     	ds	1
  1901  00000C                     ___lwmod@counter:
  1902                           	opt stack 0
  1903                           
  1904                           ; 1 bytes @ 0xB
  1905  00000C                     	ds	1
  1906  00000D                     ??_getUserInputs:
  1907  00000D                     ?_printf:
  1908                           	opt stack 0
  1909  00000D                     ___lldiv@counter:
  1910                           	opt stack 0
  1911  00000D                     printf@f:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0xC
  1915  00000D                     	ds	1
  1916  00000E                     I2C_Master_Init@clockFreq:
  1917                           	opt stack 0
  1918                           
  1919                           ; 4 bytes @ 0xD
  1920  00000E                     	ds	1
  1921  00000F                     getUserInputs@logNumber:
  1922                           	opt stack 0
  1923  00000F                     UART_Init@baud:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0xE
  1927  00000F                     	ds	2
  1928  000011                     getUserInputs@count:
  1929                           	opt stack 0
  1930  000011                     sortDrawerList@sublist4:
  1931                           	opt stack 0
  1932                           
  1933                           ; 8 bytes @ 0x10
  1934  000011                     	ds	1
  1935  000012                     ??_I2C_Master_Init:
  1936                           
  1937                           ; 1 bytes @ 0x11
  1938  000012                     	ds	1
  1939  000013                     ??_UART_Init:
  1940  000013                     getUserInputs@n:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x12
  1944  000013                     	ds	2
  1945  000015                     getUserInputs@data:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x14
  1949  000015                     	ds	2
  1950  000017                     ??_printf:
  1951  000017                     getUserInputs@i:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x16
  1955  000017                     	ds	2
  1956  000019                     sortDrawerList@sublist2:
  1957                           	opt stack 0
  1958                           
  1959                           ; 8 bytes @ 0x18
  1960  000019                     	ds	2
  1961  00001B                     printf@idx:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0x1A
  1965  00001B                     	ds	1
  1966  00001C                     printf@prec:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x1B
  1970  00001C                     	ds	1
  1971  00001D                     printf@cp:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x1C
  1975  00001D                     	ds	2
  1976  00001F                     printf@ap:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x1E
  1980  00001F                     	ds	2
  1981  000021                     printf@len:
  1982                           	opt stack 0
  1983  000021                     sortDrawerList@sublist3:
  1984                           	opt stack 0
  1985                           
  1986                           ; 8 bytes @ 0x20
  1987  000021                     	ds	2
  1988  000023                     printf@val:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x22
  1992  000023                     	ds	2
  1993  000025                     printf@flag:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x24
  1997  000025                     	ds	1
  1998  000026                     printf@width:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x25
  2002  000026                     	ds	2
  2003  000028                     printf@c:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x27
  2007  000028                     	ds	1
  2008  000029                     ?_displayLogs:
  2009                           	opt stack 0
  2010  000029                     ?_food_press:
  2011                           	opt stack 0
  2012  000029                     ?_diet_press:
  2013                           	opt stack 0
  2014  000029                     ?_which_drawer:
  2015                           	opt stack 0
  2016  000029                     sortDrawerList@count4:
  2017                           	opt stack 0
  2018  000029                     displayLogs@logNumber:
  2019                           	opt stack 0
  2020  000029                     food_press@dietSum:
  2021                           	opt stack 0
  2022  000029                     diet_press@drawer:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x28
  2026  000029                     	ds	2
  2027  00002B                     ??_displayLogs:
  2028  00002B                     ??_diet_press:
  2029  00002B                     ??_which_drawer:
  2030  00002B                     sortDrawerList@temp:
  2031                           	opt stack 0
  2032  00002B                     food_press@drawer:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x2A
  2036  00002B                     	ds	1
  2037  00002C                     which_drawer@rand:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x2B
  2041  00002C                     	ds	1
  2042  00002D                     ??_food_press:
  2043  00002D                     sortDrawerList@count1:
  2044                           	opt stack 0
  2045  00002D                     displayLogs@year:
  2046                           	opt stack 0
  2047  00002D                     diet_press@previous:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x2C
  2051  00002D                     	ds	1
  2052  00002E                     which_drawer@sum:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x2D
  2056  00002E                     	ds	1
  2057  00002F                     sortDrawerList@count3:
  2058                           	opt stack 0
  2059  00002F                     displayLogs@month:
  2060                           	opt stack 0
  2061  00002F                     food_press@tally:
  2062                           	opt stack 0
  2063  00002F                     diet_press@i:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x2E
  2067  00002F                     	ds	1
  2068  000030                     which_drawer@backCheck:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x2F
  2072  000030                     	ds	1
  2073  000031                     sortDrawerList@count2:
  2074                           	opt stack 0
  2075  000031                     displayLogs@day:
  2076                           	opt stack 0
  2077  000031                     food_press@backCheck:
  2078                           	opt stack 0
  2079  000031                     diet_press@backCheck:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x30
  2083  000031                     	ds	1
  2084  000032                     which_drawer@count:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x31
  2088  000032                     	ds	1
  2089  000033                     sortDrawerList@j:
  2090                           	opt stack 0
  2091  000033                     displayLogs@roundPieces:
  2092                           	opt stack 0
  2093  000033                     food_press@isValid:
  2094                           	opt stack 0
  2095  000033                     diet_press@count:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x32
  2099  000033                     	ds	1
  2100  000034                     which_drawer@keypress:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x33
  2104  000034                     	ds	1
  2105  000035                     sortDrawerList@i:
  2106                           	opt stack 0
  2107  000035                     displayLogs@flatPieces:
  2108                           	opt stack 0
  2109  000035                     food_press@count:
  2110                           	opt stack 0
  2111  000035                     diet_press@sum:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x34
  2115  000035                     	ds	2
  2116  000037                     ??_mainOperation:
  2117  000037                     food_press@keypress:
  2118                           	opt stack 0
  2119  000037                     diet_press@keypress:
  2120                           	opt stack 0
  2121  000037                     displayLogs@longPieces:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x36
  2125  000037                     	ds	1
  2126  000038                     food_press@foodTable:
  2127                           	opt stack 0
  2128  000038                     diet_press@dietTable:
  2129                           	opt stack 0
  2130                           
  2131                           ; 8 bytes @ 0x37
  2132  000038                     	ds	1
  2133  000039                     displayLogs@minutes:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x38
  2137  000039                     	ds	2
  2138  00003B                     displayLogs@seconds:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x3A
  2142  00003B                     	ds	2
  2143  00003D                     displayLogs@dietType:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x3C
  2147  00003D                     	ds	2
  2148  00003F                     displayLogs@foodType:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x3E
  2152  00003F                     	ds	2
  2153  000041                     displayLogs@keypress3:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x40
  2157  000041                     	ds	1
  2158  000042                     displayLogs@operationTime:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x41
  2162  000042                     	ds	2
  2163  000044                     displayLogs@drawerNumber:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x43
  2167  000044                     	ds	2
  2168  000046                     displayLogs@i:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x45
  2172  000046                     	ds	2
  2173  000048                     displayLogs@markedDrawer1:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x47
  2177  000048                     	ds	2
  2178  00004A                     displayLogs@markedDrawer2:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x49
  2182  00004A                     	ds	2
  2183  00004C                     displayLogs@markedDrawer3:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x4B
  2187  00004C                     	ds	2
  2188  00004E                     displayLogs@markedDrawer4:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x4D
  2192  00004E                     	ds	2
  2193  000050                     displayLogs@n:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0x4F
  2197  000050                     	ds	2
  2198  000052                     ?_viewLogs:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0x51
  2202  000052                     	ds	2
  2203  000054                     ??_viewLogs:
  2204                           
  2205                           ; 1 bytes @ 0x53
  2206  000054                     	ds	2
  2207  000056                     viewLogs@checkLog:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x55
  2211  000056                     	ds	2
  2212  000058                     viewLogs@returnVal:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x57
  2216  000058                     	ds	2
  2217  00005A                     viewLogs@logView:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x59
  2221  00005A                     	ds	2
  2222  00005C                     viewLogs@logNumber:
  2223                           	opt stack 0
  2224                           
  2225                           ; 1 bytes @ 0x5B
  2226  00005C                     	ds	1
  2227  00005D                     viewLogs@keypress2:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x5C
  2231  00005D                     	ds	1
  2232  00005E                     ?_standbyMode:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x5D
  2236  00005E                     	ds	2
  2237  000060                     ??_standbyMode:
  2238                           
  2239                           ; 1 bytes @ 0x5F
  2240  000060                     	ds	4
  2241  000064                     ??_main:
  2242                           
  2243                           ; 1 bytes @ 0x63
  2244  000064                     	ds	2
  2245  000066                     main@i:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x65
  2249  000066                     	ds	2
  2250  000068                     main@operationMode:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x67
  2254  000068                     	ds	2
  2255  00006A                     main@checkEEPROM:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x69
  2259  00006A                     	ds	2
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           postinc0	equ	0xFEE
  2265                           wreg	equ	0xFE8
  2266                           postdec1	equ	0xFE5
  2267                           fsr1l	equ	0xFE1
  2268                           
  2269 ;;
  2270 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2271 ;;
  2272 ;; *************** function _main *****************
  2273 ;; Defined at:
  2274 ;;		line 19 in file "main.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;  checkEEPROM     2  105[COMRAM] unsigned int 
  2279 ;;  operationMod    2  103[COMRAM] unsigned int 
  2280 ;;  i               2  101[COMRAM] unsigned int 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:        8 bytes
  2295 ;; Hardware stack levels required when called:    6
  2296 ;; This function calls:
  2297 ;;		_UART_Init
  2298 ;;		_initEEPROM
  2299 ;;		_initLCD
  2300 ;;		_lcdInst
  2301 ;;		_mainOperation
  2302 ;;		_printf
  2303 ;;		_readEEPROM
  2304 ;;		_standbyMode
  2305 ;; This function is called by:
  2306 ;;		Startup code after reset
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text0
  2311  00B76C                     __ptext0:
  2312                           	opt stack 0
  2313  00B76C                     _main:
  2314                           	opt stack 25
  2315                           
  2316                           ;main.c: 25: LATA = 0x00;
  2317                           
  2318                           ;incstack = 0
  2319  00B76C  0E00               	movlw	0
  2320  00B76E  6E89               	movwf	3977,c	;volatile
  2321                           
  2322                           ;main.c: 26: LATB = 0x00;
  2323  00B770  0E00               	movlw	0
  2324  00B772  6E8A               	movwf	3978,c	;volatile
  2325                           
  2326                           ;main.c: 27: LATC = 0x00;
  2327  00B774  0E00               	movlw	0
  2328  00B776  6E8B               	movwf	3979,c	;volatile
  2329                           
  2330                           ;main.c: 28: LATD = 0x00;
  2331  00B778  0E00               	movlw	0
  2332  00B77A  6E8C               	movwf	3980,c	;volatile
  2333                           
  2334                           ;main.c: 29: LATE = 0x00;
  2335  00B77C  0E00               	movlw	0
  2336  00B77E  6E8D               	movwf	3981,c	;volatile
  2337                           
  2338                           ;main.c: 33: TRISA = 0xFF;
  2339  00B780  6892               	setf	3986,c	;volatile
  2340                           
  2341                           ;main.c: 34: TRISB = 0xFF;
  2342  00B782  6893               	setf	3987,c	;volatile
  2343                           
  2344                           ;main.c: 35: TRISC = 0x00;
  2345  00B784  0E00               	movlw	0
  2346  00B786  6E94               	movwf	3988,c	;volatile
  2347                           
  2348                           ;main.c: 36: TRISD = 0x00;
  2349  00B788  0E00               	movlw	0
  2350  00B78A  6E95               	movwf	3989,c	;volatile
  2351                           
  2352                           ;main.c: 37: TRISE = 0x00;
  2353  00B78C  0E00               	movlw	0
  2354  00B78E  6E96               	movwf	3990,c	;volatile
  2355                           
  2356                           ;main.c: 40: ADCON0 = 0x00;
  2357  00B790  0E00               	movlw	0
  2358  00B792  6EC2               	movwf	4034,c	;volatile
  2359                           
  2360                           ;main.c: 41: ADCON1 = 0b00001111;
  2361  00B794  0E0F               	movlw	15
  2362  00B796  6EC1               	movwf	4033,c	;volatile
  2363                           
  2364                           ;main.c: 44: initLCD();
  2365  00B798  EC96  F057         	call	_initLCD	;wreg free
  2366                           
  2367                           ;main.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2368  00B79C  0E01               	movlw	1
  2369  00B79E  ECDC  F056         	call	_lcdInst
  2370  00B7A2  0EC3               	movlw	195
  2371  00B7A4  6E64               	movwf	??_main& (0+255),c
  2372  00B7A6  0ECD               	movlw	205
  2373  00B7A8                     u11597:
  2374  00B7A8  2EE8               	decfsz	wreg,f,c
  2375  00B7AA  D7FE               	bra	u11597
  2376  00B7AC  2E64               	decfsz	??_main& (0+255),f,c
  2377  00B7AE  D7FC               	bra	u11597
  2378  00B7B0  F000               	nop	
  2379                           
  2380                           ;main.c: 46: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2381  00B7B2  0E0C               	movlw	12
  2382  00B7B4  ECDC  F056         	call	_lcdInst
  2383                           
  2384                           ;main.c: 47: printf("Standby");
  2385  00B7B8  0E9C               	movlw	low STR_1
  2386  00B7BA  6E0D               	movwf	printf@f,c
  2387  00B7BC  0EFC               	movlw	high STR_1
  2388  00B7BE  6E0E               	movwf	printf@f+1,c
  2389  00B7C0  EC47  F063         	call	_printf	;wreg free
  2390                           
  2391                           ;main.c: 50: UART_Init(9600);
  2392  00B7C4  0E80               	movlw	128
  2393  00B7C6  6E0F               	movwf	UART_Init@baud,c
  2394  00B7C8  0E25               	movlw	37
  2395  00B7CA  6E10               	movwf	UART_Init@baud+1,c
  2396  00B7CC  0E00               	movlw	0
  2397  00B7CE  6E11               	movwf	UART_Init@baud+2,c
  2398  00B7D0  0E00               	movlw	0
  2399  00B7D2  6E12               	movwf	UART_Init@baud+3,c
  2400  00B7D4  ECF7  F058         	call	_UART_Init	;wreg free
  2401                           
  2402                           ;main.c: 54: unsigned int operationMode = 0;
  2403  00B7D8  0E00               	movlw	0
  2404  00B7DA  6E69               	movwf	main@operationMode+1,c
  2405  00B7DC  0E00               	movlw	0
  2406  00B7DE  6E68               	movwf	main@operationMode,c
  2407                           
  2408                           ;main.c: 55: unsigned int i = 0;
  2409  00B7E0  0E00               	movlw	0
  2410  00B7E2  6E67               	movwf	main@i+1,c
  2411  00B7E4  0E00               	movlw	0
  2412  00B7E6  6E66               	movwf	main@i,c
  2413                           
  2414                           ;main.c: 72: unsigned int checkEEPROM = 0;
  2415  00B7E8  0E00               	movlw	0
  2416  00B7EA  6E6B               	movwf	main@checkEEPROM+1,c
  2417  00B7EC  0E00               	movlw	0
  2418  00B7EE  6E6A               	movwf	main@checkEEPROM,c
  2419                           
  2420                           ;main.c: 74: checkEEPROM = readEEPROM(251);
  2421  00B7F0  0EFB               	movlw	251
  2422  00B7F2  ECE6  F056         	call	_readEEPROM
  2423  00B7F6  6E64               	movwf	??_main& (0+255),c
  2424  00B7F8  5064               	movf	??_main,w,c
  2425  00B7FA  6E6A               	movwf	main@checkEEPROM,c
  2426  00B7FC  6A6B               	clrf	main@checkEEPROM+1,c
  2427                           
  2428                           ;main.c: 76: if (checkEEPROM == 255){
  2429  00B7FE  286A               	incf	main@checkEEPROM,w,c
  2430  00B800  106B               	iorwf	main@checkEEPROM+1,w,c
  2431  00B802  A4D8               	btfss	status,2,c
  2432  00B804  D01F               	goto	l67
  2433                           
  2434                           ;main.c: 77: initEEPROM();
  2435  00B806  EC1B  F057         	call	_initEEPROM	;wreg free
  2436                           
  2437                           ;main.c: 78: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2438  00B80A  0E01               	movlw	1
  2439  00B80C  ECDC  F056         	call	_lcdInst
  2440  00B810  0EC3               	movlw	195
  2441  00B812  6E64               	movwf	??_main& (0+255),c
  2442  00B814  0ECD               	movlw	205
  2443  00B816                     u11607:
  2444  00B816  2EE8               	decfsz	wreg,f,c
  2445  00B818  D7FE               	bra	u11607
  2446  00B81A  2E64               	decfsz	??_main& (0+255),f,c
  2447  00B81C  D7FC               	bra	u11607
  2448  00B81E  F000               	nop	
  2449                           
  2450                           ;main.c: 79: printf("Clearing EEPROM");
  2451  00B820  0EDE               	movlw	low STR_2
  2452  00B822  6E0D               	movwf	printf@f,c
  2453  00B824  0EFA               	movlw	high STR_2
  2454  00B826  6E0E               	movwf	printf@f+1,c
  2455  00B828  EC47  F063         	call	_printf	;wreg free
  2456                           
  2457                           ;main.c: 80: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2458  00B82C  0E66               	movlw	102
  2459  00B82E  6E65               	movwf	(??_main+1)& (0+255),c
  2460  00B830  0E76               	movlw	118
  2461  00B832  6E64               	movwf	??_main& (0+255),c
  2462  00B834  0EC1               	movlw	193
  2463  00B836                     u11617:
  2464  00B836  2EE8               	decfsz	wreg,f,c
  2465  00B838  D7FE               	bra	u11617
  2466  00B83A  2E64               	decfsz	??_main& (0+255),f,c
  2467  00B83C  D7FC               	bra	u11617
  2468  00B83E  2E65               	decfsz	(??_main+1)& (0+255),f,c
  2469  00B840  D7FA               	bra	u11617
  2470  00B842  F000               	nop	
  2471  00B844                     l67:
  2472                           
  2473                           ;main.c: 81: }
  2474                           ;main.c: 84: operationMode = standbyMode();
  2475  00B844  EC4F  F075         	call	_standbyMode	;wreg free
  2476  00B848  C05E  F068         	movff	?_standbyMode,main@operationMode
  2477  00B84C  C05F  F069         	movff	?_standbyMode+1,main@operationMode+1
  2478                           
  2479                           ;main.c: 86: if (operationMode == 1){
  2480  00B850  0468               	decf	main@operationMode,w,c
  2481  00B852  1069               	iorwf	main@operationMode+1,w,c
  2482  00B854  B4D8               	btfsc	status,2,c
  2483                           
  2484                           ;main.c: 87: mainOperation();
  2485  00B856  ECDB  F05D         	call	_mainOperation	;wreg free
  2486                           
  2487                           ;main.c: 88: }
  2488                           ;main.c: 90: firstIteration += 1;
  2489  00B85A  4A74               	infsnz	_firstIteration,f,c
  2490  00B85C  2A75               	incf	_firstIteration+1,f,c
  2491                           
  2492                           ;main.c: 91: return;
  2493  00B85E  EF01  F000         	goto	start
  2494  00B862                     __end_of_main:
  2495                           	opt stack 0
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           postdec1	equ	0xFE5
  2503                           fsr1l	equ	0xFE1
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _standbyMode *****************
  2507 ;; Defined at:
  2508 ;;		line 1605 in file "standbyMode.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2513 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2514 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2515 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2516 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2517 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2518 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2519 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2520 ;;  time            7   96[BANK1 ] unsigned char [7]
  2521 ;;  i               2  136[BANK1 ] unsigned int 
  2522 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2523 ;;  food            2  132[BANK1 ] unsigned int 
  2524 ;;  drawer          2  130[BANK1 ] unsigned int 
  2525 ;;  diet            2  128[BANK1 ] unsigned int 
  2526 ;;  x               2  125[BANK1 ] unsigned int 
  2527 ;;  n               2  123[BANK1 ] unsigned int 
  2528 ;;  zero            2  121[BANK1 ] unsigned int 
  2529 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2530 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2531 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2532 ;;  lng             2  112[BANK1 ] unsigned int 
  2533 ;;  flat            2  110[BANK1 ] unsigned int 
  2534 ;;  round           2  108[BANK1 ] unsigned int 
  2535 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2536 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2537 ;;  keypress        1  107[BANK1 ] unsigned char 
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  2   93[COMRAM] unsigned int 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Totals:         6       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;Total ram usage:      144 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    5
  2554 ;; This function calls:
  2555 ;;		_I2C_Master_Init
  2556 ;;		_I2C_Master_Read
  2557 ;;		_I2C_Master_Start
  2558 ;;		_I2C_Master_Stop
  2559 ;;		_I2C_Master_Write
  2560 ;;		___wmul
  2561 ;;		_decode_diet
  2562 ;;		_diet_press
  2563 ;;		_food_press
  2564 ;;		_getFlat
  2565 ;;		_getLong
  2566 ;;		_getRound
  2567 ;;		_lcdInst
  2568 ;;		_printFoodInput
  2569 ;;		_printf
  2570 ;;		_readEEPROM
  2571 ;;		_shiftEEPROM
  2572 ;;		_viewLogs
  2573 ;;		_which_drawer
  2574 ;;		_writeEEPROM
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text1
  2581  00EA9E                     __ptext1:
  2582                           	opt stack 0
  2583  00EA9E                     _standbyMode:
  2584                           	opt stack 25
  2585                           
  2586                           ;standbyMode.c: 1606: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2587                           
  2588                           ;incstack = 0
  2589  00EA9E  EE21  F0AA         	lfsr	2,standbyMode@F3152
  2590  00EAA2  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2591  00EAA6  0E0F               	movlw	15
  2592  00EAA8                     u10221:
  2593  00EAA8  CFDB FFE3          	movff	plusw2,plusw1
  2594  00EAAC  06E8               	decf	wreg,f,c
  2595  00EAAE  E2FC               	bc	u10221
  2596                           
  2597                           ;standbyMode.c: 1607: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2598  00EAB0  EE21  F09A         	lfsr	2,standbyMode@F3154
  2599  00EAB4  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2600  00EAB8  0E0F               	movlw	15
  2601  00EABA                     u10231:
  2602  00EABA  CFDB FFE3          	movff	plusw2,plusw1
  2603  00EABE  06E8               	decf	wreg,f,c
  2604  00EAC0  E2FC               	bc	u10231
  2605                           
  2606                           ;standbyMode.c: 1608: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2607  00EAC2  EE21  F08A         	lfsr	2,standbyMode@F3156
  2608  00EAC6  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2609  00EACA  0E0F               	movlw	15
  2610  00EACC                     u10241:
  2611  00EACC  CFDB FFE3          	movff	plusw2,plusw1
  2612  00EAD0  06E8               	decf	wreg,f,c
  2613  00EAD2  E2FC               	bc	u10241
  2614                           
  2615                           ;standbyMode.c: 1609: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2616  00EAD4  EE22  F020         	lfsr	2,standbyMode@F3158
  2617  00EAD8  EE11  F020         	lfsr	1,standbyMode@longPieces
  2618  00EADC  0E0F               	movlw	15
  2619  00EADE                     u10251:
  2620  00EADE  CFDB FFE3          	movff	plusw2,plusw1
  2621  00EAE2  06E8               	decf	wreg,f,c
  2622  00EAE4  E2FC               	bc	u10251
  2623                           
  2624                           ;standbyMode.c: 1610: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2625  00EAE6  EE22  F010         	lfsr	2,standbyMode@F3160
  2626  00EAEA  EE11  F030         	lfsr	1,standbyMode@dietType
  2627  00EAEE  0E0F               	movlw	15
  2628  00EAF0                     u10261:
  2629  00EAF0  CFDB FFE3          	movff	plusw2,plusw1
  2630  00EAF4  06E8               	decf	wreg,f,c
  2631  00EAF6  E2FC               	bc	u10261
  2632                           
  2633                           ;standbyMode.c: 1611: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  2634  00EAF8  EE22  F000         	lfsr	2,standbyMode@F3162
  2635  00EAFC  EE11  F040         	lfsr	1,standbyMode@foodType
  2636  00EB00  0E0F               	movlw	15
  2637  00EB02                     u10271:
  2638  00EB02  CFDB FFE3          	movff	plusw2,plusw1
  2639  00EB06  06E8               	decf	wreg,f,c
  2640  00EB08  E2FC               	bc	u10271
  2641                           
  2642                           ;standbyMode.c: 1612: unsigned int drawerCount = 0;
  2643  00EB0A  0E00               	movlw	0
  2644  00EB0C  0101               	movlb	1	; () banked
  2645  00EB0E  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2646  00EB10  0E00               	movlw	0
  2647  00EB12  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  2648                           
  2649                           ; BSR set to: 1
  2650                           ;standbyMode.c: 1613: unsigned int i = 0;
  2651  00EB14  0E00               	movlw	0
  2652  00EB16  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  2653  00EB18  0E00               	movlw	0
  2654  00EB1A  6F88               	movwf	standbyMode@i& (0+255),b
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;standbyMode.c: 1614: unsigned int validDrawer = 0;
  2658  00EB1C  0E00               	movlw	0
  2659  00EB1E  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2660  00EB20  0E00               	movlw	0
  2661  00EB22  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  2662                           
  2663                           ; BSR set to: 1
  2664                           ;standbyMode.c: 1615: unsigned int zero = 0;
  2665  00EB24  0E00               	movlw	0
  2666  00EB26  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  2667  00EB28  0E00               	movlw	0
  2668  00EB2A  6F79               	movwf	standbyMode@zero& (0+255),b
  2669                           
  2670                           ; BSR set to: 1
  2671                           ;standbyMode.c: 1616: unsigned int firstIteration = 0;
  2672  00EB2C  0E00               	movlw	0
  2673  00EB2E  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2674  00EB30  0E00               	movlw	0
  2675  00EB32  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;standbyMode.c: 1617: unsigned int drawer = 0;
  2679  00EB34  0E00               	movlw	0
  2680  00EB36  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  2681  00EB38  0E00               	movlw	0
  2682  00EB3A  6F82               	movwf	standbyMode@drawer& (0+255),b
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;standbyMode.c: 1618: unsigned int diet = 0;
  2686  00EB3C  0E00               	movlw	0
  2687  00EB3E  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  2688  00EB40  0E00               	movlw	0
  2689  00EB42  6F80               	movwf	standbyMode@diet& (0+255),b
  2690                           
  2691                           ; BSR set to: 1
  2692                           ;standbyMode.c: 1619: unsigned int food = 0;
  2693  00EB44  0E00               	movlw	0
  2694  00EB46  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  2695  00EB48  0E00               	movlw	0
  2696  00EB4A  6F84               	movwf	standbyMode@food& (0+255),b
  2697                           
  2698                           ; BSR set to: 1
  2699                           ;standbyMode.c: 1620: unsigned char logNumber = 0;
  2700  00EB4C  0E00               	movlw	0
  2701  00EB4E  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;standbyMode.c: 1621: unsigned int n = 0;
  2705  00EB50  0E00               	movlw	0
  2706  00EB52  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  2707  00EB54  0E00               	movlw	0
  2708  00EB56  6F7B               	movwf	standbyMode@n& (0+255),b
  2709                           
  2710                           ; BSR set to: 1
  2711                           ;standbyMode.c: 1622: unsigned int round = 0;
  2712  00EB58  0E00               	movlw	0
  2713  00EB5A  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  2714  00EB5C  0E00               	movlw	0
  2715  00EB5E  6F6C               	movwf	standbyMode@round& (0+255),b
  2716                           
  2717                           ; BSR set to: 1
  2718                           ;standbyMode.c: 1623: unsigned int flat = 0;
  2719  00EB60  0E00               	movlw	0
  2720  00EB62  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  2721  00EB64  0E00               	movlw	0
  2722  00EB66  6F6E               	movwf	standbyMode@flat& (0+255),b
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;standbyMode.c: 1624: unsigned int lng = 0;
  2726  00EB68  0E00               	movlw	0
  2727  00EB6A  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  2728  00EB6C  0E00               	movlw	0
  2729  00EB6E  6F70               	movwf	standbyMode@lng& (0+255),b
  2730                           
  2731                           ; BSR set to: 1
  2732                           ;standbyMode.c: 1625: unsigned int decodedDiet = 0;
  2733  00EB70  0E00               	movlw	0
  2734  00EB72  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2735  00EB74  0E00               	movlw	0
  2736  00EB76  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  2737                           
  2738                           ; BSR set to: 1
  2739                           ;standbyMode.c: 1626: unsigned int storedFoodType = 0;
  2740  00EB78  0E00               	movlw	0
  2741  00EB7A  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  2742  00EB7C  0E00               	movlw	0
  2743  00EB7E  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  2744                           
  2745                           ; BSR set to: 1
  2746                           ;standbyMode.c: 1628: unsigned char time[7];
  2747                           ;standbyMode.c: 1629: unsigned int x = 0;
  2748  00EB80  0E00               	movlw	0
  2749  00EB82  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2750  00EB84  0E00               	movlw	0
  2751  00EB86  6F7D               	movwf	standbyMode@x& (0+255),b
  2752                           
  2753                           ; BSR set to: 1
  2754                           ;standbyMode.c: 1632: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2755  00EB88  0E01               	movlw	1
  2756  00EB8A  ECDC  F056         	call	_lcdInst
  2757  00EB8E  0EC3               	movlw	195
  2758  00EB90  6E60               	movwf	??_standbyMode& (0+255),c
  2759  00EB92  0ECD               	movlw	205
  2760  00EB94                     u11627:
  2761  00EB94  2EE8               	decfsz	wreg,f,c
  2762  00EB96  D7FE               	bra	u11627
  2763  00EB98  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2764  00EB9A  D7FC               	bra	u11627
  2765  00EB9C  F000               	nop	
  2766                           
  2767                           ;standbyMode.c: 1633: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2768  00EB9E  0E0C               	movlw	12
  2769  00EBA0  ECDC  F056         	call	_lcdInst
  2770                           
  2771                           ;standbyMode.c: 1634: printf("Standby");
  2772  00EBA4  0E9C               	movlw	low STR_1
  2773  00EBA6  6E0D               	movwf	printf@f,c
  2774  00EBA8  0EFC               	movlw	high STR_1
  2775  00EBAA  6E0E               	movwf	printf@f+1,c
  2776  00EBAC  EC47  F063         	call	_printf	;wreg free
  2777                           
  2778                           ;standbyMode.c: 1635: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2779  00EBB0  0E66               	movlw	102
  2780  00EBB2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2781  00EBB4  0E76               	movlw	118
  2782  00EBB6  6E60               	movwf	??_standbyMode& (0+255),c
  2783  00EBB8  0EC1               	movlw	193
  2784  00EBBA                     u11637:
  2785  00EBBA  2EE8               	decfsz	wreg,f,c
  2786  00EBBC  D7FE               	bra	u11637
  2787  00EBBE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2788  00EBC0  D7FC               	bra	u11637
  2789  00EBC2  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2790  00EBC4  D7FA               	bra	u11637
  2791  00EBC6  F000               	nop	
  2792                           
  2793                           ;standbyMode.c: 1636: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2794  00EBC8  0E01               	movlw	1
  2795  00EBCA  ECDC  F056         	call	_lcdInst
  2796  00EBCE  0EC3               	movlw	195
  2797  00EBD0  6E60               	movwf	??_standbyMode& (0+255),c
  2798  00EBD2  0ECD               	movlw	205
  2799  00EBD4                     u11647:
  2800  00EBD4  2EE8               	decfsz	wreg,f,c
  2801  00EBD6  D7FE               	bra	u11647
  2802  00EBD8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2803  00EBDA  D7FC               	bra	u11647
  2804  00EBDC  F000               	nop	
  2805                           
  2806                           ;standbyMode.c: 1637: printf("Press any key to");
  2807  00EBDE  0E2C               	movlw	low STR_40
  2808  00EBE0  6E0D               	movwf	printf@f,c
  2809  00EBE2  0EFA               	movlw	high STR_40
  2810  00EBE4  6E0E               	movwf	printf@f+1,c
  2811  00EBE6  EC47  F063         	call	_printf	;wreg free
  2812                           
  2813                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  2814  00EBEA  0EC0               	movlw	192
  2815  00EBEC  ECDC  F056         	call	_lcdInst
  2816                           
  2817                           ;standbyMode.c: 1639: printf("begin operation.");
  2818  00EBF0  0EE8               	movlw	low STR_77
  2819  00EBF2  6E0D               	movwf	printf@f,c
  2820  00EBF4  0EF9               	movlw	high STR_77
  2821  00EBF6  6E0E               	movwf	printf@f+1,c
  2822  00EBF8  EC47  F063         	call	_printf	;wreg free
  2823  00EBFC                     
  2824                           ;standbyMode.c: 1642: continue;
  2825  00EBFC  A281               	btfss	3969,1,c	;volatile
  2826  00EBFE  D7FE               	goto	l950
  2827                           
  2828                           ;standbyMode.c: 1643: }
  2829                           ;standbyMode.c: 1646: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2830  00EC00  0E01               	movlw	1
  2831  00EC02  ECDC  F056         	call	_lcdInst
  2832  00EC06  0EC3               	movlw	195
  2833  00EC08  6E60               	movwf	??_standbyMode& (0+255),c
  2834  00EC0A  0ECD               	movlw	205
  2835  00EC0C                     u11657:
  2836  00EC0C  2EE8               	decfsz	wreg,f,c
  2837  00EC0E  D7FE               	bra	u11657
  2838  00EC10  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2839  00EC12  D7FC               	bra	u11657
  2840  00EC14  F000               	nop	
  2841                           
  2842                           ;standbyMode.c: 1647: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2843  00EC16  0E0C               	movlw	12
  2844  00EC18  ECDC  F056         	call	_lcdInst
  2845                           
  2846                           ;standbyMode.c: 1648: printf("Welcome to your");
  2847  00EC1C  0EBE               	movlw	low STR_78
  2848  00EC1E  6E0D               	movwf	printf@f,c
  2849  00EC20  0EFA               	movlw	high STR_78
  2850  00EC22  6E0E               	movwf	printf@f+1,c
  2851  00EC24  EC47  F063         	call	_printf	;wreg free
  2852                           
  2853                           ;standbyMode.c: 1649: lcdInst(0xC0);;
  2854  00EC28  0EC0               	movlw	192
  2855  00EC2A  ECDC  F056         	call	_lcdInst
  2856                           
  2857                           ;standbyMode.c: 1650: printf("cabinet sorter!");
  2858  00EC2E  0E4E               	movlw	low STR_79
  2859  00EC30  6E0D               	movwf	printf@f,c
  2860  00EC32  0EFA               	movlw	high STR_79
  2861  00EC34  6E0E               	movwf	printf@f+1,c
  2862  00EC36  EC47  F063         	call	_printf	;wreg free
  2863                           
  2864                           ;standbyMode.c: 1651: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2865  00EC3A  0E33               	movlw	51
  2866  00EC3C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2867  00EC3E  0EBB               	movlw	187
  2868  00EC40  6E60               	movwf	??_standbyMode& (0+255),c
  2869  00EC42  0EE0               	movlw	224
  2870  00EC44                     u11667:
  2871  00EC44  2EE8               	decfsz	wreg,f,c
  2872  00EC46  D7FE               	bra	u11667
  2873  00EC48  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2874  00EC4A  D7FC               	bra	u11667
  2875  00EC4C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2876  00EC4E  D7FA               	bra	u11667
  2877                           
  2878                           ;standbyMode.c: 1654: writeEEPROM(250, 3);
  2879  00EC50  0E03               	movlw	3
  2880  00EC52  6E01               	movwf	writeEEPROM@data,c
  2881  00EC54  0EFA               	movlw	250
  2882  00EC56  EC41  F057         	call	_writeEEPROM
  2883                           
  2884                           ;standbyMode.c: 1655: writeEEPROM(0, 18);
  2885  00EC5A  0E12               	movlw	18
  2886  00EC5C  6E01               	movwf	writeEEPROM@data,c
  2887  00EC5E  0E00               	movlw	0
  2888  00EC60  EC41  F057         	call	_writeEEPROM
  2889                           
  2890                           ;standbyMode.c: 1656: writeEEPROM(1, 2);
  2891  00EC64  0E02               	movlw	2
  2892  00EC66  6E01               	movwf	writeEEPROM@data,c
  2893  00EC68  0E01               	movlw	1
  2894  00EC6A  EC41  F057         	call	_writeEEPROM
  2895                           
  2896                           ;standbyMode.c: 1657: writeEEPROM(2, 28);
  2897  00EC6E  0E1C               	movlw	28
  2898  00EC70  6E01               	movwf	writeEEPROM@data,c
  2899  00EC72  0E02               	movlw	2
  2900  00EC74  EC41  F057         	call	_writeEEPROM
  2901                           
  2902                           ;standbyMode.c: 1658: writeEEPROM(3, 91);
  2903  00EC78  0E5B               	movlw	91
  2904  00EC7A  6E01               	movwf	writeEEPROM@data,c
  2905  00EC7C  0E03               	movlw	3
  2906  00EC7E  EC41  F057         	call	_writeEEPROM
  2907                           
  2908                           ;standbyMode.c: 1659: writeEEPROM(4, 3);
  2909  00EC82  0E03               	movlw	3
  2910  00EC84  6E01               	movwf	writeEEPROM@data,c
  2911  00EC86  0E04               	movlw	4
  2912  00EC88  EC41  F057         	call	_writeEEPROM
  2913                           
  2914                           ;standbyMode.c: 1660: writeEEPROM(5, 15);
  2915  00EC8C  0E0F               	movlw	15
  2916  00EC8E  6E01               	movwf	writeEEPROM@data,c
  2917  00EC90  0E05               	movlw	5
  2918  00EC92  EC41  F057         	call	_writeEEPROM
  2919                           
  2920                           ;standbyMode.c: 1661: writeEEPROM(6, 8);
  2921  00EC96  0E08               	movlw	8
  2922  00EC98  6E01               	movwf	writeEEPROM@data,c
  2923  00EC9A  0E06               	movlw	6
  2924  00EC9C  EC41  F057         	call	_writeEEPROM
  2925                           
  2926                           ;standbyMode.c: 1662: writeEEPROM(7, 12);
  2927  00ECA0  0E0C               	movlw	12
  2928  00ECA2  6E01               	movwf	writeEEPROM@data,c
  2929  00ECA4  0E07               	movlw	7
  2930  00ECA6  EC41  F057         	call	_writeEEPROM
  2931                           
  2932                           ;standbyMode.c: 1663: writeEEPROM(8, 1);
  2933  00ECAA  0E01               	movlw	1
  2934  00ECAC  6E01               	movwf	writeEEPROM@data,c
  2935  00ECAE  0E08               	movlw	8
  2936  00ECB0  EC41  F057         	call	_writeEEPROM
  2937                           
  2938                           ;standbyMode.c: 1664: writeEEPROM(9, 13);
  2939  00ECB4  0E0D               	movlw	13
  2940  00ECB6  6E01               	movwf	writeEEPROM@data,c
  2941  00ECB8  0E09               	movlw	9
  2942  00ECBA  EC41  F057         	call	_writeEEPROM
  2943                           
  2944                           ;standbyMode.c: 1665: writeEEPROM(10, 0);
  2945  00ECBE  0E00               	movlw	0
  2946  00ECC0  6E01               	movwf	writeEEPROM@data,c
  2947  00ECC2  0E0A               	movlw	10
  2948  00ECC4  EC41  F057         	call	_writeEEPROM
  2949                           
  2950                           ;standbyMode.c: 1675: I2C_Master_Init(100000);
  2951  00ECC8  0EA0               	movlw	160
  2952  00ECCA  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2953  00ECCC  0E86               	movlw	134
  2954  00ECCE  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2955  00ECD0  0E01               	movlw	1
  2956  00ECD2  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2957  00ECD4  0E00               	movlw	0
  2958  00ECD6  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2959  00ECD8  EC0E  F058         	call	_I2C_Master_Init	;wreg free
  2960                           
  2961                           ;standbyMode.c: 1676: I2C_Master_Start();
  2962  00ECDC  ECC2  F056         	call	_I2C_Master_Start	;wreg free
  2963                           
  2964                           ;standbyMode.c: 1677: I2C_Master_Write(0b11010001);
  2965  00ECE0  0E00               	movlw	0
  2966  00ECE2  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2967  00ECE4  0ED1               	movlw	209
  2968  00ECE6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2969  00ECE8  ECCE  F056         	call	_I2C_Master_Write	;wreg free
  2970                           
  2971                           ;standbyMode.c: 1678: for(x = 0; x < 6; x++){
  2972  00ECEC  0E00               	movlw	0
  2973  00ECEE  0101               	movlb	1	; () banked
  2974  00ECF0  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2975  00ECF2  0E00               	movlw	0
  2976  00ECF4  6F7D               	movwf	standbyMode@x& (0+255),b
  2977  00ECF6                     l8202:
  2978                           
  2979                           ; BSR set to: 1
  2980  00ECF6  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  2981  00ECF8  E112               	bnz	l8212
  2982  00ECFA  0E06               	movlw	6
  2983  00ECFC  5D7D               	subwf	standbyMode@x& (0+255),w,b
  2984  00ECFE  B0D8               	btfsc	status,0,c
  2985  00ED00  D00E               	goto	u10300
  2986                           
  2987                           ; BSR set to: 1
  2988                           ;standbyMode.c: 1679: time[x] = I2C_Master_Read(0);
  2989                           
  2990                           ; BSR set to: 1
  2991                           
  2992                           ; BSR set to: 1
  2993  00ED02  0E60               	movlw	low standbyMode@time
  2994  00ED04  257D               	addwf	standbyMode@x& (0+255),w,b
  2995  00ED06  6ED9               	movwf	fsr2l,c
  2996  00ED08  0E01               	movlw	high standbyMode@time
  2997  00ED0A  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  2998  00ED0C  6EDA               	movwf	fsr2h,c
  2999  00ED0E  0E00               	movlw	0
  3000  00ED10  EC09  F057         	call	_I2C_Master_Read
  3001  00ED14  6EDF               	movwf	indf2,c
  3002  00ED16  0101               	movlb	1	; () banked
  3003  00ED18  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  3004  00ED1A  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  3005  00ED1C  D7EC               	goto	l8202
  3006  00ED1E                     u10300:
  3007  00ED1E                     l8212:
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;standbyMode.c: 1680: }
  3011                           ;standbyMode.c: 1681: time[6] = I2C_Master_Read(1);
  3012  00ED1E  0E01               	movlw	1
  3013  00ED20  EC09  F057         	call	_I2C_Master_Read
  3014  00ED24  0101               	movlb	1	; () banked
  3015  00ED26  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  3016                           
  3017                           ;standbyMode.c: 1682: I2C_Master_Stop();
  3018  00ED28  ECC6  F056         	call	_I2C_Master_Stop	;wreg free
  3019                           
  3020                           ;standbyMode.c: 1684: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3021  00ED2C  0E01               	movlw	1
  3022  00ED2E  ECDC  F056         	call	_lcdInst
  3023  00ED32  0EC3               	movlw	195
  3024  00ED34  6E60               	movwf	??_standbyMode& (0+255),c
  3025  00ED36  0ECD               	movlw	205
  3026  00ED38                     u11677:
  3027  00ED38  2EE8               	decfsz	wreg,f,c
  3028  00ED3A  D7FE               	bra	u11677
  3029  00ED3C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3030  00ED3E  D7FC               	bra	u11677
  3031  00ED40  F000               	nop	
  3032                           
  3033                           ;standbyMode.c: 1685: printf("Current date");
  3034  00ED42  0EF1               	movlw	low STR_80
  3035  00ED44  6E0D               	movwf	printf@f,c
  3036  00ED46  0EFB               	movlw	high STR_80
  3037  00ED48  6E0E               	movwf	printf@f+1,c
  3038  00ED4A  EC47  F063         	call	_printf	;wreg free
  3039                           
  3040                           ;standbyMode.c: 1686: lcdInst(0xC0);;
  3041  00ED4E  0EC0               	movlw	192
  3042  00ED50  ECDC  F056         	call	_lcdInst
  3043                           
  3044                           ;standbyMode.c: 1687: printf("and time:");
  3045  00ED54  0E4B               	movlw	low STR_81
  3046  00ED56  6E0D               	movwf	printf@f,c
  3047  00ED58  0EFC               	movlw	high STR_81
  3048  00ED5A  6E0E               	movwf	printf@f+1,c
  3049  00ED5C  EC47  F063         	call	_printf	;wreg free
  3050                           
  3051                           ;standbyMode.c: 1688: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3052  00ED60  0E66               	movlw	102
  3053  00ED62  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3054  00ED64  0E76               	movlw	118
  3055  00ED66  6E60               	movwf	??_standbyMode& (0+255),c
  3056  00ED68  0EC1               	movlw	193
  3057  00ED6A                     u11687:
  3058  00ED6A  2EE8               	decfsz	wreg,f,c
  3059  00ED6C  D7FE               	bra	u11687
  3060  00ED6E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3061  00ED70  D7FC               	bra	u11687
  3062  00ED72  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3063  00ED74  D7FA               	bra	u11687
  3064  00ED76  F000               	nop	
  3065                           
  3066                           ;standbyMode.c: 1690: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3067  00ED78  0E01               	movlw	1
  3068  00ED7A  ECDC  F056         	call	_lcdInst
  3069  00ED7E  0EC3               	movlw	195
  3070  00ED80  6E60               	movwf	??_standbyMode& (0+255),c
  3071  00ED82  0ECD               	movlw	205
  3072  00ED84                     u11697:
  3073  00ED84  2EE8               	decfsz	wreg,f,c
  3074  00ED86  D7FE               	bra	u11697
  3075  00ED88  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3076  00ED8A  D7FC               	bra	u11697
  3077  00ED8C  F000               	nop	
  3078                           
  3079                           ;standbyMode.c: 1691: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  3080  00ED8E  0E57               	movlw	low STR_82
  3081  00ED90  6E0D               	movwf	printf@f,c
  3082  00ED92  0EFB               	movlw	high STR_82
  3083  00ED94  6E0E               	movwf	printf@f+1,c
  3084  00ED96  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  3085  00ED9A  6A10               	clrf	?_printf+3,c
  3086  00ED9C  C165  F011         	movff	standbyMode@time+5,?_printf+4
  3087  00EDA0  6A12               	clrf	?_printf+5,c
  3088  00EDA2  C164  F013         	movff	standbyMode@time+4,?_printf+6
  3089  00EDA6  6A14               	clrf	?_printf+7,c
  3090  00EDA8  EC47  F063         	call	_printf	;wreg free
  3091                           
  3092                           ;standbyMode.c: 1692: lcdInst(0xC0);;
  3093  00EDAC  0EC0               	movlw	192
  3094  00EDAE  ECDC  F056         	call	_lcdInst
  3095                           
  3096                           ;standbyMode.c: 1693: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3097  00EDB2  0E66               	movlw	low STR_83
  3098  00EDB4  6E0D               	movwf	printf@f,c
  3099  00EDB6  0EFB               	movlw	high STR_83
  3100  00EDB8  6E0E               	movwf	printf@f+1,c
  3101  00EDBA  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  3102  00EDBE  6A10               	clrf	?_printf+3,c
  3103  00EDC0  C161  F011         	movff	standbyMode@time+1,?_printf+4
  3104  00EDC4  6A12               	clrf	?_printf+5,c
  3105  00EDC6  C160  F013         	movff	standbyMode@time,?_printf+6
  3106  00EDCA  6A14               	clrf	?_printf+7,c
  3107  00EDCC  EC47  F063         	call	_printf	;wreg free
  3108                           
  3109                           ;standbyMode.c: 1694: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3110  00EDD0  0E66               	movlw	102
  3111  00EDD2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3112  00EDD4  0E76               	movlw	118
  3113  00EDD6  6E60               	movwf	??_standbyMode& (0+255),c
  3114  00EDD8  0EC1               	movlw	193
  3115  00EDDA                     u11707:
  3116  00EDDA  2EE8               	decfsz	wreg,f,c
  3117  00EDDC  D7FE               	bra	u11707
  3118  00EDDE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3119  00EDE0  D7FC               	bra	u11707
  3120  00EDE2  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3121  00EDE4  D7FA               	bra	u11707
  3122  00EDE6  F000               	nop	
  3123                           
  3124                           ;standbyMode.c: 1697: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3125  00EDE8  0E01               	movlw	1
  3126  00EDEA  ECDC  F056         	call	_lcdInst
  3127  00EDEE  0EC3               	movlw	195
  3128  00EDF0  6E60               	movwf	??_standbyMode& (0+255),c
  3129  00EDF2  0ECD               	movlw	205
  3130  00EDF4                     u11717:
  3131  00EDF4  2EE8               	decfsz	wreg,f,c
  3132  00EDF6  D7FE               	bra	u11717
  3133  00EDF8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3134  00EDFA  D7FC               	bra	u11717
  3135  00EDFC  F000               	nop	
  3136                           
  3137                           ;standbyMode.c: 1698: printf("Press # to");
  3138  00EDFE  0E40               	movlw	low STR_84
  3139  00EE00  6E0D               	movwf	printf@f,c
  3140  00EE02  0EFC               	movlw	high STR_84
  3141  00EE04  6E0E               	movwf	printf@f+1,c
  3142  00EE06  EC47  F063         	call	_printf	;wreg free
  3143                           
  3144                           ;standbyMode.c: 1699: lcdInst(0xC0);;
  3145  00EE0A  0EC0               	movlw	192
  3146  00EE0C  ECDC  F056         	call	_lcdInst
  3147                           
  3148                           ;standbyMode.c: 1700: printf("view logs,");
  3149  00EE10  0EFE               	movlw	low STR_85
  3150  00EE12  6E0D               	movwf	printf@f,c
  3151  00EE14  0EFB               	movlw	high STR_85
  3152  00EE16  6E0E               	movwf	printf@f+1,c
  3153  00EE18  EC47  F063         	call	_printf	;wreg free
  3154                           
  3155                           ;standbyMode.c: 1701: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3156  00EE1C  0E66               	movlw	102
  3157  00EE1E  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3158  00EE20  0E76               	movlw	118
  3159  00EE22  6E60               	movwf	??_standbyMode& (0+255),c
  3160  00EE24  0EC1               	movlw	193
  3161  00EE26                     u11727:
  3162  00EE26  2EE8               	decfsz	wreg,f,c
  3163  00EE28  D7FE               	bra	u11727
  3164  00EE2A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3165  00EE2C  D7FC               	bra	u11727
  3166  00EE2E  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3167  00EE30  D7FA               	bra	u11727
  3168  00EE32  F000               	nop	
  3169                           
  3170                           ;standbyMode.c: 1702: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3171  00EE34  0E01               	movlw	1
  3172  00EE36  ECDC  F056         	call	_lcdInst
  3173  00EE3A  0EC3               	movlw	195
  3174  00EE3C  6E60               	movwf	??_standbyMode& (0+255),c
  3175  00EE3E  0ECD               	movlw	205
  3176  00EE40                     u11737:
  3177  00EE40  2EE8               	decfsz	wreg,f,c
  3178  00EE42  D7FE               	bra	u11737
  3179  00EE44  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3180  00EE46  D7FC               	bra	u11737
  3181  00EE48  F000               	nop	
  3182                           
  3183                           ;standbyMode.c: 1703: printf("or press D to");
  3184  00EE4A  0EBC               	movlw	low STR_86
  3185  00EE4C  6E0D               	movwf	printf@f,c
  3186  00EE4E  0EFB               	movlw	high STR_86
  3187  00EE50  6E0E               	movwf	printf@f+1,c
  3188  00EE52  EC47  F063         	call	_printf	;wreg free
  3189                           
  3190                           ;standbyMode.c: 1704: lcdInst(0xC0);;
  3191  00EE56  0EC0               	movlw	192
  3192  00EE58  ECDC  F056         	call	_lcdInst
  3193                           
  3194                           ;standbyMode.c: 1705: printf("begin operation.");
  3195  00EE5C  0EE8               	movlw	low STR_77
  3196  00EE5E  6E0D               	movwf	printf@f,c
  3197  00EE60  0EF9               	movlw	high STR_77
  3198  00EE62  6E0E               	movwf	printf@f+1,c
  3199  00EE64  EC47  F063         	call	_printf	;wreg free
  3200  00EE68  A281               	btfss	3969,1,c	;volatile
  3201  00EE6A  D7FE               	goto	l955
  3202                           
  3203                           ;standbyMode.c: 1708: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3204  00EE6C  3881               	swapf	3969,w,c	;volatile
  3205  00EE6E  0B0F               	andlw	15
  3206  00EE70  0B0F               	andlw	15
  3207  00EE72  0101               	movlb	1	; () banked
  3208  00EE74  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3209  00EE76                     
  3210                           ; BSR set to: 1
  3211  00EE76  B281               	btfsc	3969,1,c	;volatile
  3212  00EE78  D7FE               	goto	l958
  3213                           
  3214                           ;standbyMode.c: 1711: if (keypress == 15){
  3215  00EE7A  0E0F               	movlw	15
  3216  00EE7C  0101               	movlb	1	; () banked
  3217  00EE7E  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3218  00EE80  A4D8               	btfss	status,2,c
  3219  00EE82  EF28  F07C         	goto	l960
  3220  00EE86                     u10330:
  3221                           
  3222                           ; BSR set to: 1
  3223                           ;standbyMode.c: 1755: if (firstIteration == 1){
  3224                           
  3225                           ; BSR set to: 1
  3226                           
  3227                           ;standbyMode.c: 1754: while (1){
  3228  00EE86  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3229  00EE88  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3230  00EE8A  A4D8               	btfss	status,2,c
  3231  00EE8C  D1D9               	goto	l962
  3232  00EE8E                     u10340:
  3233                           
  3234                           ; BSR set to: 1
  3235                           ;standbyMode.c: 1758: if(drawerCount >= 8){
  3236                           
  3237                           ; BSR set to: 1
  3238                           
  3239                           ;standbyMode.c: 1756: while (1){
  3240  00EE8E  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3241  00EE90  E104               	bnz	u10350
  3242  00EE92  0E08               	movlw	8
  3243  00EE94  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3244  00EE96  A0D8               	btfss	status,0,c
  3245  00EE98  D02A               	goto	l964
  3246  00EE9A                     u10350:
  3247                           
  3248                           ; BSR set to: 1
  3249                           ;standbyMode.c: 1759: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3250  00EE9A  0E01               	movlw	1
  3251  00EE9C  ECDC  F056         	call	_lcdInst
  3252  00EEA0  0EC3               	movlw	195
  3253  00EEA2  6E60               	movwf	??_standbyMode& (0+255),c
  3254  00EEA4  0ECD               	movlw	205
  3255  00EEA6                     u11747:
  3256  00EEA6  2EE8               	decfsz	wreg,f,c
  3257  00EEA8  D7FE               	bra	u11747
  3258  00EEAA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3259  00EEAC  D7FC               	bra	u11747
  3260  00EEAE  F000               	nop	
  3261                           
  3262                           ;standbyMode.c: 1760: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3263  00EEB0  0E0C               	movlw	12
  3264  00EEB2  ECDC  F056         	call	_lcdInst
  3265                           
  3266                           ;standbyMode.c: 1761: printf("Maximum of 8");
  3267  00EEB6  0ED7               	movlw	low STR_88
  3268  00EEB8  6E0D               	movwf	printf@f,c
  3269  00EEBA  0EFB               	movlw	high STR_88
  3270  00EEBC  6E0E               	movwf	printf@f+1,c
  3271  00EEBE  EC47  F063         	call	_printf	;wreg free
  3272                           
  3273                           ;standbyMode.c: 1762: lcdInst(0xC0);;
  3274  00EEC2  0EC0               	movlw	192
  3275  00EEC4  ECDC  F056         	call	_lcdInst
  3276                           
  3277                           ;standbyMode.c: 1763: printf("drawers reached!");
  3278  00EEC8  0ED7               	movlw	low STR_89
  3279  00EECA  6E0D               	movwf	printf@f,c
  3280  00EECC  0EF9               	movlw	high STR_89
  3281  00EECE  6E0E               	movwf	printf@f+1,c
  3282  00EED0  EC47  F063         	call	_printf	;wreg free
  3283                           
  3284                           ;standbyMode.c: 1764: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3285  00EED4  0E66               	movlw	102
  3286  00EED6  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3287  00EED8  0E76               	movlw	118
  3288  00EEDA  6E60               	movwf	??_standbyMode& (0+255),c
  3289  00EEDC  0EC1               	movlw	193
  3290  00EEDE                     u11757:
  3291  00EEDE  2EE8               	decfsz	wreg,f,c
  3292  00EEE0  D7FE               	bra	u11757
  3293  00EEE2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3294  00EEE4  D7FC               	bra	u11757
  3295  00EEE6  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3296  00EEE8  D7FA               	bra	u11757
  3297  00EEEA  F000               	nop	
  3298                           
  3299                           ;standbyMode.c: 1765: break;
  3300  00EEEC  D328               	goto	l990
  3301  00EEEE                     l964:
  3302                           
  3303                           ;standbyMode.c: 1766: }
  3304                           ;standbyMode.c: 1768: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3305  00EEEE  0E01               	movlw	1
  3306  00EEF0  ECDC  F056         	call	_lcdInst
  3307  00EEF4  0EC3               	movlw	195
  3308  00EEF6  6E60               	movwf	??_standbyMode& (0+255),c
  3309  00EEF8  0ECD               	movlw	205
  3310  00EEFA                     u11767:
  3311  00EEFA  2EE8               	decfsz	wreg,f,c
  3312  00EEFC  D7FE               	bra	u11767
  3313  00EEFE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3314  00EF00  D7FC               	bra	u11767
  3315  00EF02  F000               	nop	
  3316                           
  3317                           ;standbyMode.c: 1769: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3318  00EF04  0E0C               	movlw	12
  3319  00EF06  ECDC  F056         	call	_lcdInst
  3320                           
  3321                           ;standbyMode.c: 1770: printf("Another drawer?");
  3322  00EF0A  0EAE               	movlw	low STR_90
  3323  00EF0C  6E0D               	movwf	printf@f,c
  3324  00EF0E  0EFA               	movlw	high STR_90
  3325  00EF10  6E0E               	movwf	printf@f+1,c
  3326  00EF12  EC47  F063         	call	_printf	;wreg free
  3327                           
  3328                           ;standbyMode.c: 1771: lcdInst(0xC0);;
  3329  00EF16  0EC0               	movlw	192
  3330  00EF18  ECDC  F056         	call	_lcdInst
  3331                           
  3332                           ;standbyMode.c: 1772: printf("# = No, D = Yes");
  3333  00EF1C  0ECE               	movlw	low STR_64
  3334  00EF1E  6E0D               	movwf	printf@f,c
  3335  00EF20  0EFA               	movlw	high STR_64
  3336  00EF22  6E0E               	movwf	printf@f+1,c
  3337  00EF24  EC47  F063         	call	_printf	;wreg free
  3338  00EF28  A281               	btfss	3969,1,c	;volatile
  3339  00EF2A  D7FE               	goto	l968
  3340                           
  3341                           ;standbyMode.c: 1775: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3342  00EF2C  3881               	swapf	3969,w,c	;volatile
  3343  00EF2E  0B0F               	andlw	15
  3344  00EF30  0B0F               	andlw	15
  3345  00EF32  0101               	movlb	1	; () banked
  3346  00EF34  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3347  00EF36                     
  3348                           ; BSR set to: 1
  3349  00EF36  B281               	btfsc	3969,1,c	;volatile
  3350  00EF38  D7FE               	goto	l971
  3351                           
  3352                           ;standbyMode.c: 1778: if (keypress1 == 15){
  3353  00EF3A  0E0F               	movlw	15
  3354  00EF3C  0101               	movlb	1	; () banked
  3355  00EF3E  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3356  00EF40  A4D8               	btfss	status,2,c
  3357  00EF42  D177               	goto	l973
  3358  00EF44                     u10380:
  3359                           
  3360                           ; BSR set to: 1
  3361                           
  3362                           ; BSR set to: 1
  3363                           
  3364                           ;standbyMode.c: 1779: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3365  00EF44  0E01               	movlw	1
  3366  00EF46  ECDC  F056         	call	_lcdInst
  3367  00EF4A  0EC3               	movlw	195
  3368  00EF4C  6E60               	movwf	??_standbyMode& (0+255),c
  3369  00EF4E  0ECD               	movlw	205
  3370  00EF50                     u11777:
  3371  00EF50  2EE8               	decfsz	wreg,f,c
  3372  00EF52  D7FE               	bra	u11777
  3373  00EF54  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3374  00EF56  D7FC               	bra	u11777
  3375  00EF58  F000               	nop	
  3376                           
  3377                           ;standbyMode.c: 1780: drawer = which_drawer();
  3378  00EF5A  EC9B  F05F         	call	_which_drawer	;wreg free
  3379  00EF5E  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3380  00EF62  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3381                           
  3382                           ;standbyMode.c: 1782: if (drawer == 100){
  3383  00EF66  0E64               	movlw	100
  3384  00EF68  0101               	movlb	1	; () banked
  3385  00EF6A  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3386  00EF6C  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3387  00EF6E  A4D8               	btfss	status,2,c
  3388  00EF70  D005               	goto	l975
  3389                           
  3390                           ; BSR set to: 1
  3391                           ;standbyMode.c: 1783: drawer = 0;
  3392  00EF72  0E00               	movlw	0
  3393  00EF74  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3394  00EF76  0E00               	movlw	0
  3395  00EF78  6F82               	movwf	standbyMode@drawer& (0+255),b
  3396                           
  3397                           ;standbyMode.c: 1784: goto DRAWER_BACK;
  3398  00EF7A  D7B9               	goto	l964
  3399  00EF7C                     l975:
  3400                           
  3401                           ; BSR set to: 1
  3402                           ;standbyMode.c: 1785: }
  3403                           ;standbyMode.c: 1787: for (i=0; i<8; i++){
  3404                           
  3405                           ; BSR set to: 1
  3406  00EF7C  0E00               	movlw	0
  3407  00EF7E  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3408  00EF80  0E00               	movlw	0
  3409  00EF82  6F88               	movwf	standbyMode@i& (0+255),b
  3410  00EF84                     l8300:
  3411                           
  3412                           ; BSR set to: 1
  3413  00EF84  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3414  00EF86  E12C               	bnz	l8316
  3415  00EF88  0E08               	movlw	8
  3416  00EF8A  5D88               	subwf	standbyMode@i& (0+255),w,b
  3417  00EF8C  B0D8               	btfsc	status,0,c
  3418  00EF8E  D028               	goto	u10430
  3419                           
  3420                           ; BSR set to: 1
  3421                           ;standbyMode.c: 1788: if (drawerInformation[i] == drawer){
  3422                           
  3423                           ; BSR set to: 1
  3424                           
  3425                           ; BSR set to: 1
  3426  00EF90  90D8               	bcf	status,0,c
  3427  00EF92  3588               	rlcf	standbyMode@i& (0+255),w,b
  3428  00EF94  6ED9               	movwf	fsr2l,c
  3429  00EF96  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3430  00EF98  6EDA               	movwf	fsr2h,c
  3431  00EF9A  0E50               	movlw	low standbyMode@drawerInformation
  3432  00EF9C  26D9               	addwf	fsr2l,f,c
  3433  00EF9E  0E01               	movlw	high standbyMode@drawerInformation
  3434  00EFA0  22DA               	addwfc	fsr2h,f,c
  3435  00EFA2  5182               	movf	standbyMode@drawer& (0+255),w,b
  3436  00EFA4  18DE               	xorwf	postinc2,w,c
  3437  00EFA6  E119               	bnz	l8312
  3438  00EFA8  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3439  00EFAA  18DE               	xorwf	postinc2,w,c
  3440  00EFAC  A4D8               	btfss	status,2,c
  3441  00EFAE  D015               	goto	l979
  3442                           
  3443                           ; BSR set to: 1
  3444                           ;standbyMode.c: 1789: validDrawer = 1;
  3445  00EFB0  0E00               	movlw	0
  3446  00EFB2  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3447  00EFB4  0E01               	movlw	1
  3448  00EFB6  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3449                           
  3450                           ; BSR set to: 1
  3451                           ;standbyMode.c: 1790: if (drawerInformation[i] == 0){
  3452  00EFB8  90D8               	bcf	status,0,c
  3453  00EFBA  3588               	rlcf	standbyMode@i& (0+255),w,b
  3454  00EFBC  6ED9               	movwf	fsr2l,c
  3455  00EFBE  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3456  00EFC0  6EDA               	movwf	fsr2h,c
  3457  00EFC2  0E50               	movlw	low standbyMode@drawerInformation
  3458  00EFC4  26D9               	addwf	fsr2l,f,c
  3459  00EFC6  0E01               	movlw	high standbyMode@drawerInformation
  3460  00EFC8  22DA               	addwfc	fsr2h,f,c
  3461  00EFCA  50DE               	movf	postinc2,w,c
  3462  00EFCC  10DE               	iorwf	postinc2,w,c
  3463  00EFCE  A4D8               	btfss	status,2,c
  3464  00EFD0  D004               	goto	l979
  3465                           
  3466                           ; BSR set to: 1
  3467                           ;standbyMode.c: 1791: zero = 1;
  3468  00EFD2  0E00               	movlw	0
  3469  00EFD4  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3470  00EFD6  0E01               	movlw	1
  3471  00EFD8  6F79               	movwf	standbyMode@zero& (0+255),b
  3472  00EFDA                     l979:
  3473  00EFDA                     l8312:
  3474                           
  3475                           ; BSR set to: 1
  3476  00EFDA  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3477  00EFDC  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3478  00EFDE  D7D2               	goto	l8300
  3479  00EFE0                     u10430:
  3480  00EFE0                     l8316:
  3481                           
  3482                           ; BSR set to: 1
  3483                           ;standbyMode.c: 1792: }
  3484                           ;standbyMode.c: 1793: }
  3485                           ;standbyMode.c: 1794: }
  3486                           ;standbyMode.c: 1795: if (validDrawer == 1){
  3487  00EFE0  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3488  00EFE2  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3489  00EFE4  A4D8               	btfss	status,2,c
  3490  00EFE6  D062               	goto	l980
  3491                           
  3492                           ; BSR set to: 1
  3493                           ;standbyMode.c: 1796: if (zero == 1){
  3494  00EFE8  0579               	decf	standbyMode@zero& (0+255),w,b
  3495  00EFEA  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3496  00EFEC  A4D8               	btfss	status,2,c
  3497  00EFEE  D02F               	goto	l981
  3498                           
  3499                           ; BSR set to: 1
  3500                           ;standbyMode.c: 1797: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3501  00EFF0  0E01               	movlw	1
  3502  00EFF2  ECDC  F056         	call	_lcdInst
  3503  00EFF6  0EC3               	movlw	195
  3504  00EFF8  6E60               	movwf	??_standbyMode& (0+255),c
  3505  00EFFA  0ECD               	movlw	205
  3506  00EFFC                     u11787:
  3507  00EFFC  2EE8               	decfsz	wreg,f,c
  3508  00EFFE  D7FE               	bra	u11787
  3509  00F000  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3510  00F002  D7FC               	bra	u11787
  3511  00F004  F000               	nop	
  3512                           
  3513                           ;standbyMode.c: 1798: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3514  00F006  0E0C               	movlw	12
  3515  00F008  ECDC  F056         	call	_lcdInst
  3516                           
  3517                           ;standbyMode.c: 1799: printf("No drawer");
  3518  00F00C  0E55               	movlw	low STR_92
  3519  00F00E  6E0D               	movwf	printf@f,c
  3520  00F010  0EFC               	movlw	high STR_92
  3521  00F012  6E0E               	movwf	printf@f+1,c
  3522  00F014  EC47  F063         	call	_printf	;wreg free
  3523                           
  3524                           ;standbyMode.c: 1800: lcdInst(0xC0);;
  3525  00F018  0EC0               	movlw	192
  3526  00F01A  ECDC  F056         	call	_lcdInst
  3527                           
  3528                           ;standbyMode.c: 1801: printf("number pressed.");
  3529  00F01E  0E5E               	movlw	low STR_93
  3530  00F020  6E0D               	movwf	printf@f,c
  3531  00F022  0EFA               	movlw	high STR_93
  3532  00F024  6E0E               	movwf	printf@f+1,c
  3533  00F026  EC47  F063         	call	_printf	;wreg free
  3534                           
  3535                           ;standbyMode.c: 1802: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3536  00F02A  0E66               	movlw	102
  3537  00F02C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3538  00F02E  0E76               	movlw	118
  3539  00F030  6E60               	movwf	??_standbyMode& (0+255),c
  3540  00F032  0EC1               	movlw	193
  3541  00F034                     u11797:
  3542  00F034  2EE8               	decfsz	wreg,f,c
  3543  00F036  D7FE               	bra	u11797
  3544  00F038  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3545  00F03A  D7FC               	bra	u11797
  3546  00F03C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3547  00F03E  D7FA               	bra	u11797
  3548  00F040  F000               	nop	
  3549                           
  3550                           ;standbyMode.c: 1803: zero = 0;
  3551  00F042  0E00               	movlw	0
  3552  00F044  0101               	movlb	1	; () banked
  3553  00F046  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3554  00F048  0E00               	movlw	0
  3555  00F04A  6F79               	movwf	standbyMode@zero& (0+255),b
  3556                           
  3557                           ;standbyMode.c: 1804: }
  3558  00F04C  D029               	goto	l982
  3559  00F04E                     l981:
  3560                           
  3561                           ; BSR set to: 1
  3562                           ;standbyMode.c: 1805: else{
  3563                           ;standbyMode.c: 1806: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3564                           
  3565                           ; BSR set to: 1
  3566  00F04E  0E01               	movlw	1
  3567  00F050  ECDC  F056         	call	_lcdInst
  3568  00F054  0EC3               	movlw	195
  3569  00F056  6E60               	movwf	??_standbyMode& (0+255),c
  3570  00F058  0ECD               	movlw	205
  3571  00F05A                     u11807:
  3572  00F05A  2EE8               	decfsz	wreg,f,c
  3573  00F05C  D7FE               	bra	u11807
  3574  00F05E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3575  00F060  D7FC               	bra	u11807
  3576  00F062  F000               	nop	
  3577                           
  3578                           ;standbyMode.c: 1807: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3579  00F064  0E0C               	movlw	12
  3580  00F066  ECDC  F056         	call	_lcdInst
  3581                           
  3582                           ;standbyMode.c: 1808: printf("Drawer already");
  3583  00F06A  0E75               	movlw	low STR_94
  3584  00F06C  6E0D               	movwf	printf@f,c
  3585  00F06E  0EFB               	movlw	high STR_94
  3586  00F070  6E0E               	movwf	printf@f+1,c
  3587  00F072  EC47  F063         	call	_printf	;wreg free
  3588                           
  3589                           ;standbyMode.c: 1809: lcdInst(0xC0);;
  3590  00F076  0EC0               	movlw	192
  3591  00F078  ECDC  F056         	call	_lcdInst
  3592                           
  3593                           ;standbyMode.c: 1810: printf("in use!");
  3594  00F07C  0E7C               	movlw	low STR_95
  3595  00F07E  6E0D               	movwf	printf@f,c
  3596  00F080  0EFC               	movlw	high STR_95
  3597  00F082  6E0E               	movwf	printf@f+1,c
  3598  00F084  EC47  F063         	call	_printf	;wreg free
  3599                           
  3600                           ;standbyMode.c: 1811: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3601  00F088  0E66               	movlw	102
  3602  00F08A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3603  00F08C  0E76               	movlw	118
  3604  00F08E  6E60               	movwf	??_standbyMode& (0+255),c
  3605  00F090  0EC1               	movlw	193
  3606  00F092                     u11817:
  3607  00F092  2EE8               	decfsz	wreg,f,c
  3608  00F094  D7FE               	bra	u11817
  3609  00F096  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3610  00F098  D7FC               	bra	u11817
  3611  00F09A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3612  00F09C  D7FA               	bra	u11817
  3613  00F09E  F000               	nop	
  3614  00F0A0                     l982:
  3615                           
  3616                           ;standbyMode.c: 1812: }
  3617                           ;standbyMode.c: 1813: validDrawer = 0;
  3618  00F0A0  0E00               	movlw	0
  3619  00F0A2  0101               	movlb	1	; () banked
  3620  00F0A4  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3621  00F0A6  0E00               	movlw	0
  3622  00F0A8  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3623                           
  3624                           ;standbyMode.c: 1814: continue;
  3625  00F0AA  D6F1               	goto	u10340
  3626  00F0AC                     l980:
  3627                           
  3628                           ; BSR set to: 1
  3629                           
  3630                           ; BSR set to: 1
  3631                           
  3632                           ;standbyMode.c: 1816: else{
  3633                           ;standbyMode.c: 1817: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3634                           
  3635                           ; BSR set to: 1
  3636  00F0AC  0E01               	movlw	1
  3637  00F0AE  ECDC  F056         	call	_lcdInst
  3638  00F0B2  0EC3               	movlw	195
  3639  00F0B4  6E60               	movwf	??_standbyMode& (0+255),c
  3640  00F0B6  0ECD               	movlw	205
  3641  00F0B8                     u11827:
  3642  00F0B8  2EE8               	decfsz	wreg,f,c
  3643  00F0BA  D7FE               	bra	u11827
  3644  00F0BC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3645  00F0BE  D7FC               	bra	u11827
  3646  00F0C0  F000               	nop	
  3647                           
  3648                           ;standbyMode.c: 1818: diet = diet_press(drawer);
  3649  00F0C2  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3650  00F0C6  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3651  00F0CA  EC40  F065         	call	_diet_press	;wreg free
  3652  00F0CE  C029  F180         	movff	?_diet_press,standbyMode@diet
  3653  00F0D2  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3654                           
  3655                           ;standbyMode.c: 1819: if (diet == 100){
  3656  00F0D6  0E64               	movlw	100
  3657  00F0D8  0101               	movlb	1	; () banked
  3658  00F0DA  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3659  00F0DC  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3660  00F0DE  A4D8               	btfss	status,2,c
  3661  00F0E0  D005               	goto	l986
  3662                           
  3663                           ; BSR set to: 1
  3664                           ;standbyMode.c: 1820: diet = 0;
  3665  00F0E2  0E00               	movlw	0
  3666  00F0E4  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3667  00F0E6  0E00               	movlw	0
  3668  00F0E8  6F80               	movwf	standbyMode@diet& (0+255),b
  3669                           
  3670                           ;standbyMode.c: 1821: goto DIET_BACK1;
  3671  00F0EA  D72C               	goto	u10380
  3672  00F0EC                     l986:
  3673                           
  3674                           ; BSR set to: 1
  3675                           ;standbyMode.c: 1822: }
  3676                           ;standbyMode.c: 1824: food = food_press(diet, drawer);
  3677                           
  3678                           ; BSR set to: 1
  3679  00F0EC  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3680  00F0F0  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3681  00F0F4  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3682  00F0F8  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3683  00F0FC  EC9E  F05E         	call	_food_press	;wreg free
  3684  00F100  C029  F184         	movff	?_food_press,standbyMode@food
  3685  00F104  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3686                           
  3687                           ;standbyMode.c: 1825: if (food == 100){
  3688  00F108  0E64               	movlw	100
  3689  00F10A  0101               	movlb	1	; () banked
  3690  00F10C  1984               	xorwf	standbyMode@food& (0+255),w,b
  3691  00F10E  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3692  00F110  A4D8               	btfss	status,2,c
  3693  00F112  D009               	goto	l987
  3694                           
  3695                           ; BSR set to: 1
  3696                           ;standbyMode.c: 1826: diet = 0;
  3697  00F114  0E00               	movlw	0
  3698  00F116  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3699  00F118  0E00               	movlw	0
  3700  00F11A  6F80               	movwf	standbyMode@diet& (0+255),b
  3701                           
  3702                           ;standbyMode.c: 1827: food = 0;
  3703  00F11C  0E00               	movlw	0
  3704  00F11E  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3705  00F120  0E00               	movlw	0
  3706  00F122  6F84               	movwf	standbyMode@food& (0+255),b
  3707                           
  3708                           ;standbyMode.c: 1828: goto FOOD_BACK1;
  3709  00F124  D7C3               	goto	l980
  3710  00F126                     l987:
  3711                           
  3712                           ; BSR set to: 1
  3713                           ;standbyMode.c: 1829: }
  3714                           ;standbyMode.c: 1831: drawerInformation[drawerCount] = drawer;
  3715                           
  3716                           ; BSR set to: 1
  3717  00F126  90D8               	bcf	status,0,c
  3718  00F128  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3719  00F12A  6ED9               	movwf	fsr2l,c
  3720  00F12C  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3721  00F12E  6EDA               	movwf	fsr2h,c
  3722  00F130  0E50               	movlw	low standbyMode@drawerInformation
  3723  00F132  26D9               	addwf	fsr2l,f,c
  3724  00F134  0E01               	movlw	high standbyMode@drawerInformation
  3725  00F136  22DA               	addwfc	fsr2h,f,c
  3726  00F138  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3727  00F13C  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3728                           
  3729                           ; BSR set to: 1
  3730                           ;standbyMode.c: 1832: decodedDiet = decode_diet(diet);
  3731  00F140  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3732  00F144  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3733  00F148  EC49  F05D         	call	_decode_diet	;wreg free
  3734  00F14C  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3735  00F150  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3736                           
  3737                           ;standbyMode.c: 1833: dietType[drawerCount] = decodedDiet;
  3738  00F154  90D8               	bcf	status,0,c
  3739  00F156  0101               	movlb	1	; () banked
  3740  00F158  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3741  00F15A  6ED9               	movwf	fsr2l,c
  3742  00F15C  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3743  00F15E  6EDA               	movwf	fsr2h,c
  3744  00F160  0E30               	movlw	low standbyMode@dietType
  3745  00F162  26D9               	addwf	fsr2l,f,c
  3746  00F164  0E01               	movlw	high standbyMode@dietType
  3747  00F166  22DA               	addwfc	fsr2h,f,c
  3748  00F168  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3749  00F16C  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3750                           
  3751                           ;standbyMode.c: 1834: storedFoodType = printFoodInput(food);
  3752  00F170  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3753  00F174  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3754  00F178  ECA6  F060         	call	_printFoodInput	;wreg free
  3755  00F17C  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3756  00F180  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3757                           
  3758                           ;standbyMode.c: 1835: foodType[drawerCount] = storedFoodType;
  3759  00F184  90D8               	bcf	status,0,c
  3760  00F186  0101               	movlb	1	; () banked
  3761  00F188  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3762  00F18A  6ED9               	movwf	fsr2l,c
  3763  00F18C  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3764  00F18E  6EDA               	movwf	fsr2h,c
  3765  00F190  0E40               	movlw	low standbyMode@foodType
  3766  00F192  26D9               	addwf	fsr2l,f,c
  3767  00F194  0E01               	movlw	high standbyMode@foodType
  3768  00F196  22DA               	addwfc	fsr2h,f,c
  3769  00F198  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  3770  00F19C  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  3771                           
  3772                           ; BSR set to: 1
  3773                           ;standbyMode.c: 1838: round = getRound(food);
  3774  00F1A0  C184  F001         	movff	standbyMode@food,getRound@code
  3775  00F1A4  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  3776  00F1A8  EC3E  F05B         	call	_getRound	;wreg free
  3777  00F1AC  C001  F16C         	movff	?_getRound,standbyMode@round
  3778  00F1B0  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  3779                           
  3780                           ;standbyMode.c: 1839: flat = getFlat(food);
  3781  00F1B4  C184  F001         	movff	standbyMode@food,getFlat@code
  3782  00F1B8  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  3783  00F1BC  ECC6  F05A         	call	_getFlat	;wreg free
  3784  00F1C0  C001  F16E         	movff	?_getFlat,standbyMode@flat
  3785  00F1C4  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  3786                           
  3787                           ;standbyMode.c: 1840: lng = getLong(food);
  3788  00F1C8  C184  F001         	movff	standbyMode@food,getLong@code
  3789  00F1CC  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  3790  00F1D0  EC31  F05C         	call	_getLong	;wreg free
  3791  00F1D4  C001  F170         	movff	?_getLong,standbyMode@lng
  3792  00F1D8  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  3793                           
  3794                           ;standbyMode.c: 1841: roundPieces[drawerCount] = round;
  3795  00F1DC  90D8               	bcf	status,0,c
  3796  00F1DE  0101               	movlb	1	; () banked
  3797  00F1E0  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3798  00F1E2  6ED9               	movwf	fsr2l,c
  3799  00F1E4  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3800  00F1E6  6EDA               	movwf	fsr2h,c
  3801  00F1E8  0E00               	movlw	low standbyMode@roundPieces
  3802  00F1EA  26D9               	addwf	fsr2l,f,c
  3803  00F1EC  0E01               	movlw	high standbyMode@roundPieces
  3804  00F1EE  22DA               	addwfc	fsr2h,f,c
  3805  00F1F0  C16C  FFDE         	movff	standbyMode@round,postinc2
  3806  00F1F4  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  3807                           
  3808                           ;standbyMode.c: 1842: flatPieces[drawerCount] = flat;
  3809  00F1F8  90D8               	bcf	status,0,c
  3810  00F1FA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3811  00F1FC  6ED9               	movwf	fsr2l,c
  3812  00F1FE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3813  00F200  6EDA               	movwf	fsr2h,c
  3814  00F202  0E10               	movlw	low standbyMode@flatPieces
  3815  00F204  26D9               	addwf	fsr2l,f,c
  3816  00F206  0E01               	movlw	high standbyMode@flatPieces
  3817  00F208  22DA               	addwfc	fsr2h,f,c
  3818  00F20A  C16E  FFDE         	movff	standbyMode@flat,postinc2
  3819  00F20E  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  3820                           
  3821                           ;standbyMode.c: 1843: longPieces[drawerCount] = lng;
  3822  00F212  90D8               	bcf	status,0,c
  3823  00F214  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3824  00F216  6ED9               	movwf	fsr2l,c
  3825  00F218  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3826  00F21A  6EDA               	movwf	fsr2h,c
  3827  00F21C  0E20               	movlw	low standbyMode@longPieces
  3828  00F21E  26D9               	addwf	fsr2l,f,c
  3829  00F220  0E01               	movlw	high standbyMode@longPieces
  3830  00F222  22DA               	addwfc	fsr2h,f,c
  3831  00F224  C170  FFDE         	movff	standbyMode@lng,postinc2
  3832  00F228  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;standbyMode.c: 1844: drawerCount += 1;
  3836  00F22C  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3837  00F22E  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3838                           
  3839                           ; BSR set to: 1
  3840                           ;standbyMode.c: 1845: }
  3841                           ;standbyMode.c: 1846: }
  3842  00F230  D004               	goto	l989
  3843  00F232                     l973:
  3844                           
  3845                           ; BSR set to: 1
  3846                           ;standbyMode.c: 1847: else if (keypress1 == 14){
  3847                           
  3848                           ; BSR set to: 1
  3849  00F232  0E0E               	movlw	14
  3850  00F234  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3851  00F236  B4D8               	btfsc	status,2,c
  3852  00F238  D182               	goto	l990
  3853  00F23A                     l989:
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;standbyMode.c: 1849: }
  3857                           ;standbyMode.c: 1850: keypress1 = 0;
  3858                           
  3859                           ; BSR set to: 1
  3860                           
  3861                           ; BSR set to: 1
  3862  00F23A  0E00               	movlw	0
  3863  00F23C  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3864                           
  3865                           ; BSR set to: 1
  3866  00F23E  D627               	goto	u10340
  3867  00F240                     l962:
  3868                           
  3869                           ; BSR set to: 1
  3870                           
  3871                           ; BSR set to: 1
  3872                           
  3873                           ;standbyMode.c: 1854: else{
  3874                           ;standbyMode.c: 1855: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3875                           
  3876                           ; BSR set to: 1
  3877  00F240  0E01               	movlw	1
  3878  00F242  ECDC  F056         	call	_lcdInst
  3879  00F246  0EC3               	movlw	195
  3880  00F248  6E60               	movwf	??_standbyMode& (0+255),c
  3881  00F24A  0ECD               	movlw	205
  3882  00F24C                     u11837:
  3883  00F24C  2EE8               	decfsz	wreg,f,c
  3884  00F24E  D7FE               	bra	u11837
  3885  00F250  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3886  00F252  D7FC               	bra	u11837
  3887  00F254  F000               	nop	
  3888                           
  3889                           ;standbyMode.c: 1856: drawer = which_drawer();
  3890  00F256  EC9B  F05F         	call	_which_drawer	;wreg free
  3891  00F25A  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3892  00F25E  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3893                           
  3894                           ;standbyMode.c: 1858: if (drawer == 100){
  3895  00F262  0E64               	movlw	100
  3896  00F264  0101               	movlb	1	; () banked
  3897  00F266  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3898  00F268  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3899  00F26A  A4D8               	btfss	status,2,c
  3900  00F26C  D009               	goto	l993
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;standbyMode.c: 1859: drawer = 0;
  3904  00F26E  0E00               	movlw	0
  3905  00F270  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3906  00F272  0E00               	movlw	0
  3907  00F274  6F82               	movwf	standbyMode@drawer& (0+255),b
  3908                           
  3909                           ;standbyMode.c: 1860: firstIteration = 1;
  3910  00F276  0E00               	movlw	0
  3911  00F278  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3912  00F27A  0E01               	movlw	1
  3913  00F27C  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3914                           
  3915                           ;standbyMode.c: 1861: goto DRAWER_BACK;
  3916  00F27E  D637               	goto	l964
  3917  00F280                     l993:
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;standbyMode.c: 1862: }
  3921                           ;standbyMode.c: 1864: firstIteration = 1;
  3922                           
  3923                           ; BSR set to: 1
  3924  00F280  0E00               	movlw	0
  3925  00F282  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3926  00F284  0E01               	movlw	1
  3927  00F286  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3928                           
  3929                           ;standbyMode.c: 1865: for (i=0; i<8; i++){
  3930  00F288  0E00               	movlw	0
  3931  00F28A  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3932  00F28C  0E00               	movlw	0
  3933  00F28E  6F88               	movwf	standbyMode@i& (0+255),b
  3934  00F290                     l8406:
  3935                           
  3936                           ; BSR set to: 1
  3937  00F290  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3938  00F292  E12C               	bnz	l8422
  3939  00F294  0E08               	movlw	8
  3940  00F296  5D88               	subwf	standbyMode@i& (0+255),w,b
  3941  00F298  B0D8               	btfsc	status,0,c
  3942  00F29A  D028               	goto	u10530
  3943                           
  3944                           ; BSR set to: 1
  3945                           ;standbyMode.c: 1866: if (drawerInformation[i] == drawer){
  3946                           
  3947                           ; BSR set to: 1
  3948                           
  3949                           ; BSR set to: 1
  3950  00F29C  90D8               	bcf	status,0,c
  3951  00F29E  3588               	rlcf	standbyMode@i& (0+255),w,b
  3952  00F2A0  6ED9               	movwf	fsr2l,c
  3953  00F2A2  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3954  00F2A4  6EDA               	movwf	fsr2h,c
  3955  00F2A6  0E50               	movlw	low standbyMode@drawerInformation
  3956  00F2A8  26D9               	addwf	fsr2l,f,c
  3957  00F2AA  0E01               	movlw	high standbyMode@drawerInformation
  3958  00F2AC  22DA               	addwfc	fsr2h,f,c
  3959  00F2AE  5182               	movf	standbyMode@drawer& (0+255),w,b
  3960  00F2B0  18DE               	xorwf	postinc2,w,c
  3961  00F2B2  E119               	bnz	l8418
  3962  00F2B4  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3963  00F2B6  18DE               	xorwf	postinc2,w,c
  3964  00F2B8  A4D8               	btfss	status,2,c
  3965  00F2BA  D015               	goto	l997
  3966                           
  3967                           ; BSR set to: 1
  3968                           ;standbyMode.c: 1867: validDrawer = 1;
  3969  00F2BC  0E00               	movlw	0
  3970  00F2BE  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3971  00F2C0  0E01               	movlw	1
  3972  00F2C2  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3973                           
  3974                           ; BSR set to: 1
  3975                           ;standbyMode.c: 1868: if (drawerInformation[i] == 0){
  3976  00F2C4  90D8               	bcf	status,0,c
  3977  00F2C6  3588               	rlcf	standbyMode@i& (0+255),w,b
  3978  00F2C8  6ED9               	movwf	fsr2l,c
  3979  00F2CA  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3980  00F2CC  6EDA               	movwf	fsr2h,c
  3981  00F2CE  0E50               	movlw	low standbyMode@drawerInformation
  3982  00F2D0  26D9               	addwf	fsr2l,f,c
  3983  00F2D2  0E01               	movlw	high standbyMode@drawerInformation
  3984  00F2D4  22DA               	addwfc	fsr2h,f,c
  3985  00F2D6  50DE               	movf	postinc2,w,c
  3986  00F2D8  10DE               	iorwf	postinc2,w,c
  3987  00F2DA  A4D8               	btfss	status,2,c
  3988  00F2DC  D004               	goto	l997
  3989                           
  3990                           ; BSR set to: 1
  3991                           ;standbyMode.c: 1869: zero = 1;
  3992  00F2DE  0E00               	movlw	0
  3993  00F2E0  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3994  00F2E2  0E01               	movlw	1
  3995  00F2E4  6F79               	movwf	standbyMode@zero& (0+255),b
  3996  00F2E6                     l997:
  3997  00F2E6                     l8418:
  3998                           
  3999                           ; BSR set to: 1
  4000  00F2E6  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4001  00F2E8  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4002  00F2EA  D7D2               	goto	l8406
  4003  00F2EC                     u10530:
  4004  00F2EC                     l8422:
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;standbyMode.c: 1870: }
  4008                           ;standbyMode.c: 1871: }
  4009                           ;standbyMode.c: 1872: }
  4010                           ;standbyMode.c: 1873: if (validDrawer == 1){
  4011  00F2EC  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  4012  00F2EE  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  4013  00F2F0  A4D8               	btfss	status,2,c
  4014  00F2F2  D062               	goto	l998
  4015                           
  4016                           ; BSR set to: 1
  4017                           ;standbyMode.c: 1874: if (zero == 1){
  4018  00F2F4  0579               	decf	standbyMode@zero& (0+255),w,b
  4019  00F2F6  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  4020  00F2F8  A4D8               	btfss	status,2,c
  4021  00F2FA  D02F               	goto	l999
  4022                           
  4023                           ; BSR set to: 1
  4024                           ;standbyMode.c: 1875: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4025  00F2FC  0E01               	movlw	1
  4026  00F2FE  ECDC  F056         	call	_lcdInst
  4027  00F302  0EC3               	movlw	195
  4028  00F304  6E60               	movwf	??_standbyMode& (0+255),c
  4029  00F306  0ECD               	movlw	205
  4030  00F308                     u11847:
  4031  00F308  2EE8               	decfsz	wreg,f,c
  4032  00F30A  D7FE               	bra	u11847
  4033  00F30C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4034  00F30E  D7FC               	bra	u11847
  4035  00F310  F000               	nop	
  4036                           
  4037                           ;standbyMode.c: 1876: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4038  00F312  0E0C               	movlw	12
  4039  00F314  ECDC  F056         	call	_lcdInst
  4040                           
  4041                           ;standbyMode.c: 1877: printf("No drawer");
  4042  00F318  0E55               	movlw	low STR_92
  4043  00F31A  6E0D               	movwf	printf@f,c
  4044  00F31C  0EFC               	movlw	high STR_92
  4045  00F31E  6E0E               	movwf	printf@f+1,c
  4046  00F320  EC47  F063         	call	_printf	;wreg free
  4047                           
  4048                           ;standbyMode.c: 1878: lcdInst(0xC0);;
  4049  00F324  0EC0               	movlw	192
  4050  00F326  ECDC  F056         	call	_lcdInst
  4051                           
  4052                           ;standbyMode.c: 1879: printf("number pressed.");
  4053  00F32A  0E5E               	movlw	low STR_93
  4054  00F32C  6E0D               	movwf	printf@f,c
  4055  00F32E  0EFA               	movlw	high STR_93
  4056  00F330  6E0E               	movwf	printf@f+1,c
  4057  00F332  EC47  F063         	call	_printf	;wreg free
  4058                           
  4059                           ;standbyMode.c: 1880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4060  00F336  0E66               	movlw	102
  4061  00F338  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4062  00F33A  0E76               	movlw	118
  4063  00F33C  6E60               	movwf	??_standbyMode& (0+255),c
  4064  00F33E  0EC1               	movlw	193
  4065  00F340                     u11857:
  4066  00F340  2EE8               	decfsz	wreg,f,c
  4067  00F342  D7FE               	bra	u11857
  4068  00F344  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4069  00F346  D7FC               	bra	u11857
  4070  00F348  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4071  00F34A  D7FA               	bra	u11857
  4072  00F34C  F000               	nop	
  4073                           
  4074                           ;standbyMode.c: 1881: zero = 0;
  4075  00F34E  0E00               	movlw	0
  4076  00F350  0101               	movlb	1	; () banked
  4077  00F352  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4078  00F354  0E00               	movlw	0
  4079  00F356  6F79               	movwf	standbyMode@zero& (0+255),b
  4080                           
  4081                           ;standbyMode.c: 1882: }
  4082  00F358  D029               	goto	l1000
  4083  00F35A                     l999:
  4084                           
  4085                           ; BSR set to: 1
  4086                           ;standbyMode.c: 1883: else{
  4087                           ;standbyMode.c: 1884: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4088                           
  4089                           ; BSR set to: 1
  4090  00F35A  0E01               	movlw	1
  4091  00F35C  ECDC  F056         	call	_lcdInst
  4092  00F360  0EC3               	movlw	195
  4093  00F362  6E60               	movwf	??_standbyMode& (0+255),c
  4094  00F364  0ECD               	movlw	205
  4095  00F366                     u11867:
  4096  00F366  2EE8               	decfsz	wreg,f,c
  4097  00F368  D7FE               	bra	u11867
  4098  00F36A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4099  00F36C  D7FC               	bra	u11867
  4100  00F36E  F000               	nop	
  4101                           
  4102                           ;standbyMode.c: 1885: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4103  00F370  0E0C               	movlw	12
  4104  00F372  ECDC  F056         	call	_lcdInst
  4105                           
  4106                           ;standbyMode.c: 1886: printf("Drawer already");
  4107  00F376  0E75               	movlw	low STR_94
  4108  00F378  6E0D               	movwf	printf@f,c
  4109  00F37A  0EFB               	movlw	high STR_94
  4110  00F37C  6E0E               	movwf	printf@f+1,c
  4111  00F37E  EC47  F063         	call	_printf	;wreg free
  4112                           
  4113                           ;standbyMode.c: 1887: lcdInst(0xC0);;
  4114  00F382  0EC0               	movlw	192
  4115  00F384  ECDC  F056         	call	_lcdInst
  4116                           
  4117                           ;standbyMode.c: 1888: printf("in use!");
  4118  00F388  0E7C               	movlw	low STR_95
  4119  00F38A  6E0D               	movwf	printf@f,c
  4120  00F38C  0EFC               	movlw	high STR_95
  4121  00F38E  6E0E               	movwf	printf@f+1,c
  4122  00F390  EC47  F063         	call	_printf	;wreg free
  4123                           
  4124                           ;standbyMode.c: 1889: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4125  00F394  0E66               	movlw	102
  4126  00F396  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4127  00F398  0E76               	movlw	118
  4128  00F39A  6E60               	movwf	??_standbyMode& (0+255),c
  4129  00F39C  0EC1               	movlw	193
  4130  00F39E                     u11877:
  4131  00F39E  2EE8               	decfsz	wreg,f,c
  4132  00F3A0  D7FE               	bra	u11877
  4133  00F3A2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4134  00F3A4  D7FC               	bra	u11877
  4135  00F3A6  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4136  00F3A8  D7FA               	bra	u11877
  4137  00F3AA  F000               	nop	
  4138  00F3AC                     l1000:
  4139                           
  4140                           ;standbyMode.c: 1890: }
  4141                           ;standbyMode.c: 1891: validDrawer = 0;
  4142  00F3AC  0E00               	movlw	0
  4143  00F3AE  0101               	movlb	1	; () banked
  4144  00F3B0  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4145  00F3B2  0E00               	movlw	0
  4146  00F3B4  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4147                           
  4148                           ; BSR set to: 1
  4149                           ;standbyMode.c: 1893: }
  4150                           
  4151                           ;standbyMode.c: 1892: continue;
  4152  00F3B6  D567               	goto	u10330
  4153  00F3B8                     l998:
  4154                           
  4155                           ; BSR set to: 1
  4156                           
  4157                           ; BSR set to: 1
  4158                           
  4159                           ;standbyMode.c: 1894: else{
  4160                           ;standbyMode.c: 1895: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4161                           
  4162                           ; BSR set to: 1
  4163  00F3B8  0E01               	movlw	1
  4164  00F3BA  ECDC  F056         	call	_lcdInst
  4165  00F3BE  0EC3               	movlw	195
  4166  00F3C0  6E60               	movwf	??_standbyMode& (0+255),c
  4167  00F3C2  0ECD               	movlw	205
  4168  00F3C4                     u11887:
  4169  00F3C4  2EE8               	decfsz	wreg,f,c
  4170  00F3C6  D7FE               	bra	u11887
  4171  00F3C8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4172  00F3CA  D7FC               	bra	u11887
  4173  00F3CC  F000               	nop	
  4174                           
  4175                           ;standbyMode.c: 1896: diet = diet_press(drawer);
  4176  00F3CE  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4177  00F3D2  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4178  00F3D6  EC40  F065         	call	_diet_press	;wreg free
  4179  00F3DA  C029  F180         	movff	?_diet_press,standbyMode@diet
  4180  00F3DE  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4181                           
  4182                           ;standbyMode.c: 1897: if (diet == 100){
  4183  00F3E2  0E64               	movlw	100
  4184  00F3E4  0101               	movlb	1	; () banked
  4185  00F3E6  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4186  00F3E8  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4187  00F3EA  A4D8               	btfss	status,2,c
  4188  00F3EC  D005               	goto	l1004
  4189                           
  4190                           ; BSR set to: 1
  4191                           ;standbyMode.c: 1898: diet = 0;
  4192  00F3EE  0E00               	movlw	0
  4193  00F3F0  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4194  00F3F2  0E00               	movlw	0
  4195  00F3F4  6F80               	movwf	standbyMode@diet& (0+255),b
  4196                           
  4197                           ;standbyMode.c: 1899: goto DIET_BACK2;
  4198  00F3F6  D724               	goto	l962
  4199  00F3F8                     l1004:
  4200                           
  4201                           ; BSR set to: 1
  4202                           ;standbyMode.c: 1900: }
  4203                           ;standbyMode.c: 1902: food = food_press(diet, drawer);
  4204                           
  4205                           ; BSR set to: 1
  4206  00F3F8  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4207  00F3FC  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4208  00F400  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4209  00F404  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4210  00F408  EC9E  F05E         	call	_food_press	;wreg free
  4211  00F40C  C029  F184         	movff	?_food_press,standbyMode@food
  4212  00F410  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4213                           
  4214                           ;standbyMode.c: 1903: if (food == 100){
  4215  00F414  0E64               	movlw	100
  4216  00F416  0101               	movlb	1	; () banked
  4217  00F418  1984               	xorwf	standbyMode@food& (0+255),w,b
  4218  00F41A  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4219  00F41C  A4D8               	btfss	status,2,c
  4220  00F41E  D009               	goto	l1005
  4221                           
  4222                           ; BSR set to: 1
  4223                           ;standbyMode.c: 1904: diet = 0;
  4224  00F420  0E00               	movlw	0
  4225  00F422  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4226  00F424  0E00               	movlw	0
  4227  00F426  6F80               	movwf	standbyMode@diet& (0+255),b
  4228                           
  4229                           ;standbyMode.c: 1905: food = 0;
  4230  00F428  0E00               	movlw	0
  4231  00F42A  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4232  00F42C  0E00               	movlw	0
  4233  00F42E  6F84               	movwf	standbyMode@food& (0+255),b
  4234                           
  4235                           ;standbyMode.c: 1906: goto FOOD_BACK2;
  4236  00F430  D7C3               	goto	l998
  4237  00F432                     l1005:
  4238                           
  4239                           ; BSR set to: 1
  4240                           ;standbyMode.c: 1907: }
  4241                           ;standbyMode.c: 1909: drawerInformation[drawerCount] = drawer;
  4242                           
  4243                           ; BSR set to: 1
  4244  00F432  90D8               	bcf	status,0,c
  4245  00F434  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4246  00F436  6ED9               	movwf	fsr2l,c
  4247  00F438  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4248  00F43A  6EDA               	movwf	fsr2h,c
  4249  00F43C  0E50               	movlw	low standbyMode@drawerInformation
  4250  00F43E  26D9               	addwf	fsr2l,f,c
  4251  00F440  0E01               	movlw	high standbyMode@drawerInformation
  4252  00F442  22DA               	addwfc	fsr2h,f,c
  4253  00F444  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4254  00F448  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;standbyMode.c: 1910: decodedDiet = decode_diet(diet);
  4258  00F44C  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4259  00F450  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4260  00F454  EC49  F05D         	call	_decode_diet	;wreg free
  4261  00F458  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4262  00F45C  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4263                           
  4264                           ;standbyMode.c: 1911: dietType[drawerCount] = decodedDiet;
  4265  00F460  90D8               	bcf	status,0,c
  4266  00F462  0101               	movlb	1	; () banked
  4267  00F464  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4268  00F466  6ED9               	movwf	fsr2l,c
  4269  00F468  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4270  00F46A  6EDA               	movwf	fsr2h,c
  4271  00F46C  0E30               	movlw	low standbyMode@dietType
  4272  00F46E  26D9               	addwf	fsr2l,f,c
  4273  00F470  0E01               	movlw	high standbyMode@dietType
  4274  00F472  22DA               	addwfc	fsr2h,f,c
  4275  00F474  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4276  00F478  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4277                           
  4278                           ;standbyMode.c: 1912: storedFoodType = printFoodInput(food);
  4279  00F47C  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4280  00F480  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4281  00F484  ECA6  F060         	call	_printFoodInput	;wreg free
  4282  00F488  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4283  00F48C  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4284                           
  4285                           ;standbyMode.c: 1913: foodType[drawerCount] = storedFoodType;
  4286  00F490  90D8               	bcf	status,0,c
  4287  00F492  0101               	movlb	1	; () banked
  4288  00F494  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4289  00F496  6ED9               	movwf	fsr2l,c
  4290  00F498  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4291  00F49A  6EDA               	movwf	fsr2h,c
  4292  00F49C  0E40               	movlw	low standbyMode@foodType
  4293  00F49E  26D9               	addwf	fsr2l,f,c
  4294  00F4A0  0E01               	movlw	high standbyMode@foodType
  4295  00F4A2  22DA               	addwfc	fsr2h,f,c
  4296  00F4A4  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4297  00F4A8  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4298                           
  4299                           ; BSR set to: 1
  4300                           ;standbyMode.c: 1916: round = getRound(food);
  4301  00F4AC  C184  F001         	movff	standbyMode@food,getRound@code
  4302  00F4B0  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4303  00F4B4  EC3E  F05B         	call	_getRound	;wreg free
  4304  00F4B8  C001  F16C         	movff	?_getRound,standbyMode@round
  4305  00F4BC  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4306                           
  4307                           ;standbyMode.c: 1917: flat = getFlat(food);
  4308  00F4C0  C184  F001         	movff	standbyMode@food,getFlat@code
  4309  00F4C4  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4310  00F4C8  ECC6  F05A         	call	_getFlat	;wreg free
  4311  00F4CC  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4312  00F4D0  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4313                           
  4314                           ;standbyMode.c: 1918: lng = getLong(food);
  4315  00F4D4  C184  F001         	movff	standbyMode@food,getLong@code
  4316  00F4D8  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4317  00F4DC  EC31  F05C         	call	_getLong	;wreg free
  4318  00F4E0  C001  F170         	movff	?_getLong,standbyMode@lng
  4319  00F4E4  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4320                           
  4321                           ;standbyMode.c: 1919: roundPieces[drawerCount] = round;
  4322  00F4E8  90D8               	bcf	status,0,c
  4323  00F4EA  0101               	movlb	1	; () banked
  4324  00F4EC  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4325  00F4EE  6ED9               	movwf	fsr2l,c
  4326  00F4F0  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4327  00F4F2  6EDA               	movwf	fsr2h,c
  4328  00F4F4  0E00               	movlw	low standbyMode@roundPieces
  4329  00F4F6  26D9               	addwf	fsr2l,f,c
  4330  00F4F8  0E01               	movlw	high standbyMode@roundPieces
  4331  00F4FA  22DA               	addwfc	fsr2h,f,c
  4332  00F4FC  C16C  FFDE         	movff	standbyMode@round,postinc2
  4333  00F500  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4334                           
  4335                           ;standbyMode.c: 1920: flatPieces[drawerCount] = flat;
  4336  00F504  90D8               	bcf	status,0,c
  4337  00F506  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4338  00F508  6ED9               	movwf	fsr2l,c
  4339  00F50A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4340  00F50C  6EDA               	movwf	fsr2h,c
  4341  00F50E  0E10               	movlw	low standbyMode@flatPieces
  4342  00F510  26D9               	addwf	fsr2l,f,c
  4343  00F512  0E01               	movlw	high standbyMode@flatPieces
  4344  00F514  22DA               	addwfc	fsr2h,f,c
  4345  00F516  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4346  00F51A  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4347                           
  4348                           ;standbyMode.c: 1921: longPieces[drawerCount] = lng;
  4349  00F51E  90D8               	bcf	status,0,c
  4350  00F520  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4351  00F522  6ED9               	movwf	fsr2l,c
  4352  00F524  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4353  00F526  6EDA               	movwf	fsr2h,c
  4354  00F528  0E20               	movlw	low standbyMode@longPieces
  4355  00F52A  26D9               	addwf	fsr2l,f,c
  4356  00F52C  0E01               	movlw	high standbyMode@longPieces
  4357  00F52E  22DA               	addwfc	fsr2h,f,c
  4358  00F530  C170  FFDE         	movff	standbyMode@lng,postinc2
  4359  00F534  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4360                           
  4361                           ; BSR set to: 1
  4362                           ;standbyMode.c: 1922: drawerCount += 1;
  4363  00F538  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4364  00F53A  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4365                           
  4366                           ; BSR set to: 1
  4367                           
  4368                           ; BSR set to: 1
  4369                           
  4370                           ; BSR set to: 1
  4371  00F53C  D4A4               	goto	u10330
  4372  00F53E                     l990:
  4373                           
  4374                           ;standbyMode.c: 1923: }
  4375                           ;standbyMode.c: 1924: }
  4376                           ;standbyMode.c: 1925: }
  4377                           ;standbyMode.c: 1927: if (drawerCount == 0){
  4378                           
  4379                           ; BSR set to: 1
  4380  00F53E  0101               	movlb	1	; () banked
  4381  00F540  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4382  00F542  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4383  00F544  A4D8               	btfss	status,2,c
  4384  00F546  D005               	goto	l1006
  4385                           
  4386                           ; BSR set to: 1
  4387                           ;standbyMode.c: 1928: return 0;
  4388  00F548  0E00               	movlw	0
  4389  00F54A  6E5F               	movwf	?_standbyMode+1,c
  4390  00F54C  0E00               	movlw	0
  4391  00F54E  6E5E               	movwf	?_standbyMode,c
  4392                           
  4393                           ; BSR set to: 1
  4394                           ;standbyMode.c: 1929: }
  4395                           
  4396                           ; BSR set to: 1
  4397  00F550  0012               	return	
  4398  00F552                     l1006:
  4399                           
  4400                           ; BSR set to: 1
  4401                           ;standbyMode.c: 1930: else{
  4402                           ;standbyMode.c: 1931: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4403                           
  4404                           ; BSR set to: 1
  4405  00F552  0E01               	movlw	1
  4406  00F554  ECDC  F056         	call	_lcdInst
  4407  00F558  0EC3               	movlw	195
  4408  00F55A  6E60               	movwf	??_standbyMode& (0+255),c
  4409  00F55C  0ECD               	movlw	205
  4410  00F55E                     u11897:
  4411  00F55E  2EE8               	decfsz	wreg,f,c
  4412  00F560  D7FE               	bra	u11897
  4413  00F562  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4414  00F564  D7FC               	bra	u11897
  4415  00F566  F000               	nop	
  4416                           
  4417                           ;standbyMode.c: 1932: printf("Inputs submitted");
  4418  00F568  0EF9               	movlw	low STR_100
  4419  00F56A  6E0D               	movwf	printf@f,c
  4420  00F56C  0EF9               	movlw	high STR_100
  4421  00F56E  6E0E               	movwf	printf@f+1,c
  4422  00F570  EC47  F063         	call	_printf	;wreg free
  4423                           
  4424                           ;standbyMode.c: 1933: lcdInst(0xC0);;
  4425  00F574  0EC0               	movlw	192
  4426  00F576  ECDC  F056         	call	_lcdInst
  4427                           
  4428                           ;standbyMode.c: 1934: printf("successfully!");
  4429  00F57A  0EA0               	movlw	low STR_101
  4430  00F57C  6E0D               	movwf	printf@f,c
  4431  00F57E  0EFB               	movlw	high STR_101
  4432  00F580  6E0E               	movwf	printf@f+1,c
  4433  00F582  EC47  F063         	call	_printf	;wreg free
  4434                           
  4435                           ;standbyMode.c: 1935: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4436  00F586  0E33               	movlw	51
  4437  00F588  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4438  00F58A  0EBB               	movlw	187
  4439  00F58C  6E60               	movwf	??_standbyMode& (0+255),c
  4440  00F58E  0EE0               	movlw	224
  4441  00F590                     u11907:
  4442  00F590  2EE8               	decfsz	wreg,f,c
  4443  00F592  D7FE               	bra	u11907
  4444  00F594  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4445  00F596  D7FC               	bra	u11907
  4446  00F598  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4447  00F59A  D7FA               	bra	u11907
  4448                           
  4449                           ;standbyMode.c: 1937: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4450  00F59C  0E01               	movlw	1
  4451  00F59E  ECDC  F056         	call	_lcdInst
  4452  00F5A2  0EC3               	movlw	195
  4453  00F5A4  6E60               	movwf	??_standbyMode& (0+255),c
  4454  00F5A6  0ECD               	movlw	205
  4455  00F5A8                     u11917:
  4456  00F5A8  2EE8               	decfsz	wreg,f,c
  4457  00F5AA  D7FE               	bra	u11917
  4458  00F5AC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4459  00F5AE  D7FC               	bra	u11917
  4460  00F5B0  F000               	nop	
  4461                           
  4462                           ;standbyMode.c: 1938: printf("Summary of");
  4463  00F5B2  0E35               	movlw	low STR_102
  4464  00F5B4  6E0D               	movwf	printf@f,c
  4465  00F5B6  0EFC               	movlw	high STR_102
  4466  00F5B8  6E0E               	movwf	printf@f+1,c
  4467  00F5BA  EC47  F063         	call	_printf	;wreg free
  4468                           
  4469                           ;standbyMode.c: 1939: lcdInst(0xC0);;
  4470  00F5BE  0EC0               	movlw	192
  4471  00F5C0  ECDC  F056         	call	_lcdInst
  4472                           
  4473                           ;standbyMode.c: 1940: printf("inputs:");
  4474  00F5C4  0E84               	movlw	low STR_103
  4475  00F5C6  6E0D               	movwf	printf@f,c
  4476  00F5C8  0EFC               	movlw	high STR_103
  4477  00F5CA  6E0E               	movwf	printf@f+1,c
  4478  00F5CC  EC47  F063         	call	_printf	;wreg free
  4479                           
  4480                           ;standbyMode.c: 1941: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4481  00F5D0  0E33               	movlw	51
  4482  00F5D2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4483  00F5D4  0EBB               	movlw	187
  4484  00F5D6  6E60               	movwf	??_standbyMode& (0+255),c
  4485  00F5D8  0EE0               	movlw	224
  4486  00F5DA                     u11927:
  4487  00F5DA  2EE8               	decfsz	wreg,f,c
  4488  00F5DC  D7FE               	bra	u11927
  4489  00F5DE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4490  00F5E0  D7FC               	bra	u11927
  4491  00F5E2  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4492  00F5E4  D7FA               	bra	u11927
  4493                           
  4494                           ;standbyMode.c: 1943: for (i=0; i<8; i++){
  4495  00F5E6  0E00               	movlw	0
  4496  00F5E8  0101               	movlb	1	; () banked
  4497  00F5EA  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4498  00F5EC  0E00               	movlw	0
  4499  00F5EE  6F88               	movwf	standbyMode@i& (0+255),b
  4500                           
  4501                           ; BSR set to: 1
  4502  00F5F0  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4503  00F5F2  E105               	bnz	u10590
  4504  00F5F4  0E08               	movlw	8
  4505  00F5F6  5D88               	subwf	standbyMode@i& (0+255),w,b
  4506  00F5F8  B0D8               	btfsc	status,0,c
  4507  00F5FA  D07D               	goto	u10610
  4508  00F5FC  D001               	goto	l1009
  4509  00F5FE                     u10590:
  4510                           
  4511                           ; BSR set to: 1
  4512  00F5FE  D07B               	goto	u10610
  4513  00F600                     l1009:
  4514                           
  4515                           ; BSR set to: 1
  4516                           ;standbyMode.c: 1944: if (drawerInformation[i] != 0){
  4517                           
  4518                           ; BSR set to: 1
  4519  00F600  90D8               	bcf	status,0,c
  4520  00F602  3588               	rlcf	standbyMode@i& (0+255),w,b
  4521  00F604  6ED9               	movwf	fsr2l,c
  4522  00F606  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4523  00F608  6EDA               	movwf	fsr2h,c
  4524  00F60A  0E50               	movlw	low standbyMode@drawerInformation
  4525  00F60C  26D9               	addwf	fsr2l,f,c
  4526  00F60E  0E01               	movlw	high standbyMode@drawerInformation
  4527  00F610  22DA               	addwfc	fsr2h,f,c
  4528  00F612  50DE               	movf	postinc2,w,c
  4529  00F614  10DE               	iorwf	postinc2,w,c
  4530  00F616  B4D8               	btfsc	status,2,c
  4531  00F618  D068               	goto	l1011
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;standbyMode.c: 1945: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4535  00F61A  0E01               	movlw	1
  4536  00F61C  ECDC  F056         	call	_lcdInst
  4537  00F620  0EC3               	movlw	195
  4538  00F622  6E60               	movwf	??_standbyMode& (0+255),c
  4539  00F624  0ECD               	movlw	205
  4540  00F626                     u11937:
  4541  00F626  2EE8               	decfsz	wreg,f,c
  4542  00F628  D7FE               	bra	u11937
  4543  00F62A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4544  00F62C  D7FC               	bra	u11937
  4545  00F62E  F000               	nop	
  4546                           
  4547                           ;standbyMode.c: 1946: printf("Drawer %i:", drawerInformation[i]);
  4548  00F630  0E2A               	movlw	low STR_61
  4549  00F632  6E0D               	movwf	printf@f,c
  4550  00F634  0EFC               	movlw	high STR_61
  4551  00F636  6E0E               	movwf	printf@f+1,c
  4552  00F638  90D8               	bcf	status,0,c
  4553  00F63A  0101               	movlb	1	; () banked
  4554  00F63C  3588               	rlcf	standbyMode@i& (0+255),w,b
  4555  00F63E  6ED9               	movwf	fsr2l,c
  4556  00F640  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4557  00F642  6EDA               	movwf	fsr2h,c
  4558  00F644  0E50               	movlw	low standbyMode@drawerInformation
  4559  00F646  26D9               	addwf	fsr2l,f,c
  4560  00F648  0E01               	movlw	high standbyMode@drawerInformation
  4561  00F64A  22DA               	addwfc	fsr2h,f,c
  4562  00F64C  CFDE F00F          	movff	postinc2,?_printf+2
  4563  00F650  CFDD F010          	movff	postdec2,?_printf+3
  4564  00F654  EC47  F063         	call	_printf	;wreg free
  4565                           
  4566                           ;standbyMode.c: 1947: lcdInst(0xC0);;
  4567  00F658  0EC0               	movlw	192
  4568  00F65A  ECDC  F056         	call	_lcdInst
  4569                           
  4570                           ;standbyMode.c: 1948: printf("%s%s",inputs[dietType[i]], foodInputs[foodType[i]]);
  4571  00F65E  0ED6               	movlw	low STR_62
  4572  00F660  6E0D               	movwf	printf@f,c
  4573  00F662  0EFC               	movlw	high STR_62
  4574  00F664  6E0E               	movwf	printf@f+1,c
  4575  00F666  90D8               	bcf	status,0,c
  4576  00F668  0101               	movlb	1	; () banked
  4577  00F66A  3588               	rlcf	standbyMode@i& (0+255),w,b
  4578  00F66C  6ED9               	movwf	fsr2l,c
  4579  00F66E  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4580  00F670  6EDA               	movwf	fsr2h,c
  4581  00F672  0E30               	movlw	low standbyMode@dietType
  4582  00F674  26D9               	addwf	fsr2l,f,c
  4583  00F676  0E01               	movlw	high standbyMode@dietType
  4584  00F678  22DA               	addwfc	fsr2h,f,c
  4585  00F67A  CFDE F060          	movff	postinc2,??_standbyMode
  4586  00F67E  CFDD F061          	movff	postdec2,??_standbyMode+1
  4587  00F682  90D8               	bcf	status,0,c
  4588  00F684  3660               	rlcf	??_standbyMode,f,c
  4589  00F686  3661               	rlcf	??_standbyMode+1,f,c
  4590  00F688  0E40               	movlw	low _inputs
  4591  00F68A  2460               	addwf	??_standbyMode,w,c
  4592  00F68C  6ED9               	movwf	fsr2l,c
  4593  00F68E  0E02               	movlw	high _inputs
  4594  00F690  2061               	addwfc	??_standbyMode+1,w,c
  4595  00F692  6EDA               	movwf	fsr2h,c
  4596  00F694  CFDE F00F          	movff	postinc2,?_printf+2
  4597  00F698  CFDD F010          	movff	postdec2,?_printf+3
  4598  00F69C  90D8               	bcf	status,0,c
  4599  00F69E  3588               	rlcf	standbyMode@i& (0+255),w,b
  4600  00F6A0  6ED9               	movwf	fsr2l,c
  4601  00F6A2  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4602  00F6A4  6EDA               	movwf	fsr2h,c
  4603  00F6A6  0E40               	movlw	low standbyMode@foodType
  4604  00F6A8  26D9               	addwf	fsr2l,f,c
  4605  00F6AA  0E01               	movlw	high standbyMode@foodType
  4606  00F6AC  22DA               	addwfc	fsr2h,f,c
  4607  00F6AE  CFDE F062          	movff	postinc2,??_standbyMode+2
  4608  00F6B2  CFDD F063          	movff	postdec2,??_standbyMode+3
  4609  00F6B6  90D8               	bcf	status,0,c
  4610  00F6B8  3662               	rlcf	??_standbyMode+2,f,c
  4611  00F6BA  3663               	rlcf	??_standbyMode+3,f,c
  4612  00F6BC  0E64               	movlw	low _foodInputs
  4613  00F6BE  2462               	addwf	??_standbyMode+2,w,c
  4614  00F6C0  6ED9               	movwf	fsr2l,c
  4615  00F6C2  0E02               	movlw	high _foodInputs
  4616  00F6C4  2063               	addwfc	??_standbyMode+3,w,c
  4617  00F6C6  6EDA               	movwf	fsr2h,c
  4618  00F6C8  CFDE F011          	movff	postinc2,?_printf+4
  4619  00F6CC  CFDD F012          	movff	postdec2,?_printf+5
  4620  00F6D0  EC47  F063         	call	_printf	;wreg free
  4621                           
  4622                           ;standbyMode.c: 1949: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4623  00F6D4  0E33               	movlw	51
  4624  00F6D6  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4625  00F6D8  0EBB               	movlw	187
  4626  00F6DA  6E60               	movwf	??_standbyMode& (0+255),c
  4627  00F6DC  0EE0               	movlw	224
  4628  00F6DE                     u11947:
  4629  00F6DE  2EE8               	decfsz	wreg,f,c
  4630  00F6E0  D7FE               	bra	u11947
  4631  00F6E2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4632  00F6E4  D7FC               	bra	u11947
  4633  00F6E6  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4634  00F6E8  D7FA               	bra	u11947
  4635  00F6EA                     l1011:
  4636  00F6EA  0101               	movlb	1	; () banked
  4637  00F6EC  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4638  00F6EE  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4639  00F6F0  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4640  00F6F2  E101               	bnz	l8540
  4641  00F6F4  D77F               	goto	L1
  4642  00F6F6                     u10610:
  4643  00F6F6                     l8540:
  4644                           
  4645                           ; BSR set to: 1
  4646                           ;standbyMode.c: 1950: }
  4647                           ;standbyMode.c: 1951: }
  4648                           ;standbyMode.c: 1953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4649  00F6F6  0E01               	movlw	1
  4650  00F6F8  ECDC  F056         	call	_lcdInst
  4651  00F6FC  0EC3               	movlw	195
  4652  00F6FE  6E60               	movwf	??_standbyMode& (0+255),c
  4653  00F700  0ECD               	movlw	205
  4654  00F702                     u11957:
  4655  00F702  2EE8               	decfsz	wreg,f,c
  4656  00F704  D7FE               	bra	u11957
  4657  00F706  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4658  00F708  D7FC               	bra	u11957
  4659  00F70A  F000               	nop	
  4660                           
  4661                           ;standbyMode.c: 1954: printf("Operation will");
  4662  00F70C  0E48               	movlw	low STR_106
  4663  00F70E  6E0D               	movwf	printf@f,c
  4664  00F710  0EFB               	movlw	high STR_106
  4665  00F712  6E0E               	movwf	printf@f+1,c
  4666  00F714  EC47  F063         	call	_printf	;wreg free
  4667                           
  4668                           ;standbyMode.c: 1955: lcdInst(0xC0);;
  4669  00F718  0EC0               	movlw	192
  4670  00F71A  ECDC  F056         	call	_lcdInst
  4671                           
  4672                           ;standbyMode.c: 1956: printf("begin shortly.");
  4673  00F71E  0EEE               	movlw	low STR_107
  4674  00F720  6E0D               	movwf	printf@f,c
  4675  00F722  0EFA               	movlw	high STR_107
  4676  00F724  6E0E               	movwf	printf@f+1,c
  4677  00F726  EC47  F063         	call	_printf	;wreg free
  4678                           
  4679                           ;standbyMode.c: 1957: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4680  00F72A  0E33               	movlw	51
  4681  00F72C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4682  00F72E  0EBB               	movlw	187
  4683  00F730  6E60               	movwf	??_standbyMode& (0+255),c
  4684  00F732  0EE0               	movlw	224
  4685  00F734                     u11967:
  4686  00F734  2EE8               	decfsz	wreg,f,c
  4687  00F736  D7FE               	bra	u11967
  4688  00F738  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4689  00F73A  D7FC               	bra	u11967
  4690  00F73C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4691  00F73E  D7FA               	bra	u11967
  4692                           
  4693                           ;standbyMode.c: 1959: logNumber = readEEPROM(250);
  4694  00F740  0EFA               	movlw	250
  4695  00F742  ECE6  F056         	call	_readEEPROM
  4696  00F746  0101               	movlb	1	; () banked
  4697  00F748  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  4698                           
  4699                           ; BSR set to: 1
  4700                           ;standbyMode.c: 1960: if (logNumber == 4){
  4701  00F74A  0E04               	movlw	4
  4702  00F74C  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4703  00F74E  B4D8               	btfsc	status,2,c
  4704                           
  4705                           ; BSR set to: 1
  4706                           ;standbyMode.c: 1961: shiftEEPROM();
  4707  00F750  EC39  F059         	call	_shiftEEPROM	;wreg free
  4708                           
  4709                           ;standbyMode.c: 1962: }
  4710                           ;standbyMode.c: 1963: for (i=0; i<8; i++){
  4711  00F754  0E00               	movlw	0
  4712  00F756  0101               	movlb	1	; () banked
  4713  00F758  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4714  00F75A  0E00               	movlw	0
  4715  00F75C  6F88               	movwf	standbyMode@i& (0+255),b
  4716                           
  4717                           ; BSR set to: 1
  4718  00F75E  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4719  00F760  E172               	bnz	l1014
  4720  00F762  0E08               	movlw	8
  4721  00F764  5D88               	subwf	standbyMode@i& (0+255),w,b
  4722  00F766  B0D8               	btfsc	status,0,c
  4723  00F768  D06E               	goto	u10660
  4724                           
  4725                           ; BSR set to: 1
  4726                           ;standbyMode.c: 1964: if (logNumber == 0 || logNumber == 4){
  4727                           
  4728                           ; BSR set to: 1
  4729                           
  4730                           ; BSR set to: 1
  4731  00F76A  517F               	movf	standbyMode@logNumber& (0+255),w,b
  4732  00F76C  B4D8               	btfsc	status,2,c
  4733  00F76E  D004               	goto	u10650
  4734                           
  4735                           ; BSR set to: 1
  4736  00F770  0E04               	movlw	4
  4737  00F772  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4738  00F774  A4D8               	btfss	status,2,c
  4739  00F776  D00F               	goto	l1015
  4740  00F778                     u10650:
  4741                           
  4742                           ; BSR set to: 1
  4743                           ;standbyMode.c: 1965: n = 3*i;
  4744                           
  4745                           ; BSR set to: 1
  4746  00F778  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4747  00F77C  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4748  00F780  0E00               	movlw	0
  4749  00F782  6E04               	movwf	___wmul@multiplicand+1,c
  4750  00F784  0E03               	movlw	3
  4751  00F786  6E03               	movwf	___wmul@multiplicand,c
  4752  00F788  EC2E  F057         	call	___wmul	;wreg free
  4753  00F78C  C001  F17B         	movff	?___wmul,standbyMode@n
  4754  00F790  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  4755                           
  4756                           ;standbyMode.c: 1966: }
  4757  00F794  D022               	goto	l1018
  4758  00F796                     l1015:
  4759                           
  4760                           ;standbyMode.c: 1967: else{
  4761                           ;standbyMode.c: 1968: n = (logNumber-1)*35 + 3*i;
  4762  00F796  0EFF               	movlw	255
  4763  00F798  0101               	movlb	1	; () banked
  4764  00F79A  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  4765  00F79C  6E01               	movwf	___wmul@multiplier,c
  4766  00F79E  6A02               	clrf	___wmul@multiplier+1,c
  4767  00F7A0  0EFF               	movlw	255
  4768  00F7A2  2202               	addwfc	___wmul@multiplier+1,f,c
  4769  00F7A4  0E00               	movlw	0
  4770  00F7A6  6E04               	movwf	___wmul@multiplicand+1,c
  4771  00F7A8  0E23               	movlw	35
  4772  00F7AA  6E03               	movwf	___wmul@multiplicand,c
  4773  00F7AC  EC2E  F057         	call	___wmul	;wreg free
  4774  00F7B0  C001  F060         	movff	?___wmul,??_standbyMode
  4775  00F7B4  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  4776  00F7B8  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4777  00F7BC  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4778  00F7C0  0E00               	movlw	0
  4779  00F7C2  6E04               	movwf	___wmul@multiplicand+1,c
  4780  00F7C4  0E03               	movlw	3
  4781  00F7C6  6E03               	movwf	___wmul@multiplicand,c
  4782  00F7C8  EC2E  F057         	call	___wmul	;wreg free
  4783  00F7CC  5001               	movf	?___wmul,w,c
  4784  00F7CE  2460               	addwf	??_standbyMode,w,c
  4785  00F7D0  0101               	movlb	1	; () banked
  4786  00F7D2  6F7B               	movwf	standbyMode@n& (0+255),b
  4787  00F7D4  5002               	movf	?___wmul+1,w,c
  4788  00F7D6  2061               	addwfc	??_standbyMode+1,w,c
  4789  00F7D8  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  4790  00F7DA                     l1018:
  4791                           
  4792                           ;standbyMode.c: 1969: }
  4793                           ;standbyMode.c: 1970: writeEEPROM(11+n, drawerInformation[i]);
  4794                           
  4795                           ; BSR set to: 1
  4796  00F7DA  90D8               	bcf	status,0,c
  4797  00F7DC  0101               	movlb	1	; () banked
  4798  00F7DE  3588               	rlcf	standbyMode@i& (0+255),w,b
  4799  00F7E0  6ED9               	movwf	fsr2l,c
  4800  00F7E2  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4801  00F7E4  6EDA               	movwf	fsr2h,c
  4802  00F7E6  0E50               	movlw	low standbyMode@drawerInformation
  4803  00F7E8  26D9               	addwf	fsr2l,f,c
  4804  00F7EA  0E01               	movlw	high standbyMode@drawerInformation
  4805  00F7EC  22DA               	addwfc	fsr2h,f,c
  4806  00F7EE  50DF               	movf	indf2,w,c
  4807  00F7F0  6E01               	movwf	writeEEPROM@data,c
  4808  00F7F2  517B               	movf	standbyMode@n& (0+255),w,b
  4809  00F7F4  0F0B               	addlw	11
  4810  00F7F6  EC41  F057         	call	_writeEEPROM
  4811                           
  4812                           ;standbyMode.c: 1971: writeEEPROM(12+n, dietType[i]);
  4813  00F7FA  90D8               	bcf	status,0,c
  4814  00F7FC  0101               	movlb	1	; () banked
  4815  00F7FE  3588               	rlcf	standbyMode@i& (0+255),w,b
  4816  00F800  6ED9               	movwf	fsr2l,c
  4817  00F802  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4818  00F804  6EDA               	movwf	fsr2h,c
  4819  00F806  0E30               	movlw	low standbyMode@dietType
  4820  00F808  26D9               	addwf	fsr2l,f,c
  4821  00F80A  0E01               	movlw	high standbyMode@dietType
  4822  00F80C  22DA               	addwfc	fsr2h,f,c
  4823  00F80E  50DF               	movf	indf2,w,c
  4824  00F810  6E01               	movwf	writeEEPROM@data,c
  4825  00F812  517B               	movf	standbyMode@n& (0+255),w,b
  4826  00F814  0F0C               	addlw	12
  4827  00F816  EC41  F057         	call	_writeEEPROM
  4828                           
  4829                           ;standbyMode.c: 1972: writeEEPROM(13+n, foodType[i]);
  4830  00F81A  90D8               	bcf	status,0,c
  4831  00F81C  0101               	movlb	1	; () banked
  4832  00F81E  3588               	rlcf	standbyMode@i& (0+255),w,b
  4833  00F820  6ED9               	movwf	fsr2l,c
  4834  00F822  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4835  00F824  6EDA               	movwf	fsr2h,c
  4836  00F826  0E40               	movlw	low standbyMode@foodType
  4837  00F828  26D9               	addwf	fsr2l,f,c
  4838  00F82A  0E01               	movlw	high standbyMode@foodType
  4839  00F82C  22DA               	addwfc	fsr2h,f,c
  4840  00F82E  50DF               	movf	indf2,w,c
  4841  00F830  6E01               	movwf	writeEEPROM@data,c
  4842  00F832  517B               	movf	standbyMode@n& (0+255),w,b
  4843  00F834  0F0D               	addlw	13
  4844  00F836  EC41  F057         	call	_writeEEPROM
  4845  00F83A  0101               	movlb	1	; () banked
  4846  00F83C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4847  00F83E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4848                           
  4849                           ; BSR set to: 1
  4850  00F840  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4851  00F842  E101               	bnz	l8580
  4852  00F844  D78E               	goto	L2
  4853  00F846                     u10660:
  4854  00F846                     l1014:
  4855  00F846                     l8580:
  4856                           
  4857                           ; BSR set to: 1
  4858                           ;standbyMode.c: 1973: }
  4859                           ;standbyMode.c: 1974: return 1;
  4860  00F846  0E00               	movlw	0
  4861  00F848  6E5F               	movwf	?_standbyMode+1,c
  4862  00F84A  0E01               	movlw	1
  4863  00F84C  6E5E               	movwf	?_standbyMode,c
  4864                           
  4865                           ; BSR set to: 1
  4866                           ;standbyMode.c: 1975: }
  4867                           ;standbyMode.c: 1976: }
  4868                           
  4869                           ; BSR set to: 1
  4870  00F84E  0012               	return	
  4871  00F850                     l960:
  4872                           
  4873                           ; BSR set to: 1
  4874                           ;standbyMode.c: 1977: else if (keypress == 14){
  4875                           
  4876                           ; BSR set to: 1
  4877  00F850  0E0E               	movlw	14
  4878  00F852  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  4879  00F854  A4D8               	btfss	status,2,c
  4880  00F856  D05F               	goto	l1020
  4881  00F858                     u10670:
  4882                           
  4883                           ;standbyMode.c: 1979: unsigned int whichKey = viewLogs();
  4884                           
  4885                           ; BSR set to: 1
  4886                           
  4887                           ;standbyMode.c: 1978: while (1){
  4888  00F858  ECD1  F061         	call	_viewLogs	;wreg free
  4889  00F85C  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  4890  00F860  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4891                           
  4892                           ;standbyMode.c: 1980: if (whichKey == 15){
  4893  00F864  0E0F               	movlw	15
  4894  00F866  0101               	movlb	1	; () banked
  4895  00F868  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4896  00F86A  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4897  00F86C  B4D8               	btfsc	status,2,c
  4898  00F86E  D7F4               	goto	u10670
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;standbyMode.c: 1983: else if (whichKey == 14){
  4902                           
  4903                           ; BSR set to: 1
  4904                           
  4905                           ; BSR set to: 1
  4906                           ;standbyMode.c: 1982: }
  4907                           
  4908                           ; BSR set to: 1
  4909                           ;standbyMode.c: 1981: continue;
  4910  00F870  0E0E               	movlw	14
  4911  00F872  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4912  00F874  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4913  00F876  A4D8               	btfss	status,2,c
  4914  00F878  D020               	goto	l1025
  4915                           
  4916                           ; BSR set to: 1
  4917                           ;standbyMode.c: 1984: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4918  00F87A  0E01               	movlw	1
  4919  00F87C  ECDC  F056         	call	_lcdInst
  4920  00F880  0EC3               	movlw	195
  4921  00F882  6E60               	movwf	??_standbyMode& (0+255),c
  4922  00F884  0ECD               	movlw	205
  4923  00F886                     u11977:
  4924  00F886  2EE8               	decfsz	wreg,f,c
  4925  00F888  D7FE               	bra	u11977
  4926  00F88A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4927  00F88C  D7FC               	bra	u11977
  4928  00F88E  F000               	nop	
  4929                           
  4930                           ;standbyMode.c: 1985: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4931  00F890  0E0C               	movlw	12
  4932  00F892  ECDC  F056         	call	_lcdInst
  4933                           
  4934                           ;standbyMode.c: 1986: printf("Rebooting.");
  4935  00F896  0E14               	movlw	low STR_108
  4936  00F898  6E0D               	movwf	printf@f,c
  4937  00F89A  0EFC               	movlw	high STR_108
  4938  00F89C  6E0E               	movwf	printf@f+1,c
  4939  00F89E  EC47  F063         	call	_printf	;wreg free
  4940                           
  4941                           ;standbyMode.c: 1987: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4942  00F8A2  0E66               	movlw	102
  4943  00F8A4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4944  00F8A6  0E76               	movlw	118
  4945  00F8A8  6E60               	movwf	??_standbyMode& (0+255),c
  4946  00F8AA  0EC1               	movlw	193
  4947  00F8AC                     u11987:
  4948  00F8AC  2EE8               	decfsz	wreg,f,c
  4949  00F8AE  D7FE               	bra	u11987
  4950  00F8B0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4951  00F8B2  D7FC               	bra	u11987
  4952  00F8B4  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4953  00F8B6  D7FA               	bra	u11987
  4954  00F8B8  D028               	goto	L3
  4955  00F8BA                     l1025:
  4956                           
  4957                           ;standbyMode.c: 1990: else{
  4958                           ;standbyMode.c: 1991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4959  00F8BA  0E01               	movlw	1
  4960  00F8BC  ECDC  F056         	call	_lcdInst
  4961  00F8C0  0EC3               	movlw	195
  4962  00F8C2  6E60               	movwf	??_standbyMode& (0+255),c
  4963  00F8C4  0ECD               	movlw	205
  4964  00F8C6                     u11997:
  4965  00F8C6  2EE8               	decfsz	wreg,f,c
  4966  00F8C8  D7FE               	bra	u11997
  4967  00F8CA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4968  00F8CC  D7FC               	bra	u11997
  4969  00F8CE  F000               	nop	
  4970                           
  4971                           ;standbyMode.c: 1992: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4972  00F8D0  0E0C               	movlw	12
  4973  00F8D2  ECDC  F056         	call	_lcdInst
  4974                           
  4975                           ;standbyMode.c: 1993: printf("Invalid key!");
  4976  00F8D6  0ECA               	movlw	low STR_109
  4977  00F8D8  6E0D               	movwf	printf@f,c
  4978  00F8DA  0EFB               	movlw	high STR_109
  4979  00F8DC  6E0E               	movwf	printf@f+1,c
  4980  00F8DE  EC47  F063         	call	_printf	;wreg free
  4981                           
  4982                           ;standbyMode.c: 1994: lcdInst(0xC0);;
  4983  00F8E2  0EC0               	movlw	192
  4984  00F8E4  ECDC  F056         	call	_lcdInst
  4985                           
  4986                           ;standbyMode.c: 1995: printf("Rebooting.");
  4987  00F8E8  0E14               	movlw	low STR_108
  4988  00F8EA  6E0D               	movwf	printf@f,c
  4989  00F8EC  0EFC               	movlw	high STR_108
  4990  00F8EE  6E0E               	movwf	printf@f+1,c
  4991  00F8F0  EC47  F063         	call	_printf	;wreg free
  4992                           
  4993                           ;standbyMode.c: 1996: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4994  00F8F4  0E66               	movlw	102
  4995  00F8F6  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4996  00F8F8  0E76               	movlw	118
  4997  00F8FA  6E60               	movwf	??_standbyMode& (0+255),c
  4998  00F8FC  0EC1               	movlw	193
  4999  00F8FE                     u12007:
  5000  00F8FE  2EE8               	decfsz	wreg,f,c
  5001  00F900  D7FE               	bra	u12007
  5002  00F902  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5003  00F904  D7FC               	bra	u12007
  5004  00F906  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5005  00F908  D7FA               	bra	u12007
  5006  00F90A                     L3:
  5007  00F90A  F000               	nop	
  5008                           
  5009                           ;standbyMode.c: 1998: }
  5010                           ;standbyMode.c: 1999: }
  5011                           ;standbyMode.c: 2000: return 0;
  5012                           
  5013                           ;standbyMode.c: 1997: break;
  5014  00F90C  0E00               	movlw	0
  5015  00F90E  6E5F               	movwf	?_standbyMode+1,c
  5016  00F910  0E00               	movlw	0
  5017  00F912  6E5E               	movwf	?_standbyMode,c
  5018                           
  5019                           ;standbyMode.c: 2001: }
  5020  00F914  0012               	return	
  5021  00F916                     l1020:
  5022                           
  5023                           ;standbyMode.c: 2003: else {
  5024                           ;standbyMode.c: 2004: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5025  00F916  0E01               	movlw	1
  5026  00F918  ECDC  F056         	call	_lcdInst
  5027  00F91C  0EC3               	movlw	195
  5028  00F91E  6E60               	movwf	??_standbyMode& (0+255),c
  5029  00F920  0ECD               	movlw	205
  5030  00F922                     u12017:
  5031  00F922  2EE8               	decfsz	wreg,f,c
  5032  00F924  D7FE               	bra	u12017
  5033  00F926  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5034  00F928  D7FC               	bra	u12017
  5035  00F92A  F000               	nop	
  5036                           
  5037                           ;standbyMode.c: 2005: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5038  00F92C  0E0C               	movlw	12
  5039  00F92E  ECDC  F056         	call	_lcdInst
  5040                           
  5041                           ;standbyMode.c: 2006: printf("Invalid key!");
  5042  00F932  0ECA               	movlw	low STR_109
  5043  00F934  6E0D               	movwf	printf@f,c
  5044  00F936  0EFB               	movlw	high STR_109
  5045  00F938  6E0E               	movwf	printf@f+1,c
  5046  00F93A  EC47  F063         	call	_printf	;wreg free
  5047                           
  5048                           ;standbyMode.c: 2007: lcdInst(0xC0);;
  5049  00F93E  0EC0               	movlw	192
  5050  00F940  ECDC  F056         	call	_lcdInst
  5051                           
  5052                           ;standbyMode.c: 2008: printf("Rebooting.");
  5053  00F944  0E14               	movlw	low STR_108
  5054  00F946  6E0D               	movwf	printf@f,c
  5055  00F948  0EFC               	movlw	high STR_108
  5056  00F94A  6E0E               	movwf	printf@f+1,c
  5057  00F94C  EC47  F063         	call	_printf	;wreg free
  5058                           
  5059                           ;standbyMode.c: 2009: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5060  00F950  0E66               	movlw	102
  5061  00F952  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5062  00F954  0E76               	movlw	118
  5063  00F956  6E60               	movwf	??_standbyMode& (0+255),c
  5064  00F958  0EC1               	movlw	193
  5065  00F95A                     u12027:
  5066  00F95A  2EE8               	decfsz	wreg,f,c
  5067  00F95C  D7FE               	bra	u12027
  5068  00F95E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5069  00F960  D7FC               	bra	u12027
  5070  00F962  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5071  00F964  D7FA               	bra	u12027
  5072  00F966  F000               	nop	
  5073                           
  5074                           ;standbyMode.c: 2010: return 0;
  5075  00F968  0E00               	movlw	0
  5076  00F96A  6E5F               	movwf	?_standbyMode+1,c
  5077  00F96C  0E00               	movlw	0
  5078  00F96E  6E5E               	movwf	?_standbyMode,c
  5079  00F970  0012               	return	
  5080  00F972                     __end_of_standbyMode:
  5081                           	opt stack 0
  5082                           tblptru	equ	0xFF8
  5083                           tblptrh	equ	0xFF7
  5084                           tblptrl	equ	0xFF6
  5085                           tablat	equ	0xFF5
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           plusw1	equ	0xFE3
  5090                           fsr1l	equ	0xFE1
  5091                           indf2	equ	0xFDF
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           plusw2	equ	0xFDB
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _which_drawer *****************
  5100 ;; Defined at:
  5101 ;;		line 1539 in file "standbyMode.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  rand            2   43[COMRAM] unsigned int 
  5106 ;;  keypress        1   51[COMRAM] unsigned char 
  5107 ;;  count           2   49[COMRAM] unsigned int 
  5108 ;;  backCheck       2   47[COMRAM] unsigned int 
  5109 ;;  sum             2   45[COMRAM] unsigned int 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  2   40[COMRAM] unsigned int 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5119 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;Total ram usage:       12 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    3
  5126 ;; This function calls:
  5127 ;;		_decode_drawer
  5128 ;;		_lcdInst
  5129 ;;		_printf
  5130 ;;		_putch
  5131 ;; This function is called by:
  5132 ;;		_standbyMode
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text2
  5137  00BF36                     __ptext2:
  5138                           	opt stack 0
  5139  00BF36                     _which_drawer:
  5140                           	opt stack 26
  5141                           
  5142                           ;standbyMode.c: 1540: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5143                           
  5144                           ;incstack = 0
  5145  00BF36  0E0C               	movlw	12
  5146  00BF38  ECDC  F056         	call	_lcdInst
  5147                           
  5148                           ;standbyMode.c: 1541: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5149  00BF3C  0E01               	movlw	1
  5150  00BF3E  ECDC  F056         	call	_lcdInst
  5151  00BF42  0EC3               	movlw	195
  5152  00BF44  6E2B               	movwf	??_which_drawer& (0+255),c
  5153  00BF46  0ECD               	movlw	205
  5154  00BF48                     u12037:
  5155  00BF48  2EE8               	decfsz	wreg,f,c
  5156  00BF4A  D7FE               	bra	u12037
  5157  00BF4C  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5158  00BF4E  D7FC               	bra	u12037
  5159  00BF50  F000               	nop	
  5160                           
  5161                           ;standbyMode.c: 1542: printf("Drawer number:");
  5162  00BF52  0EFD               	movlw	low STR_73
  5163  00BF54  6E0D               	movwf	printf@f,c
  5164  00BF56  0EFA               	movlw	high STR_73
  5165  00BF58  6E0E               	movwf	printf@f+1,c
  5166  00BF5A  EC47  F063         	call	_printf	;wreg free
  5167                           
  5168                           ;standbyMode.c: 1543: lcdInst(0xC0);;
  5169  00BF5E  0EC0               	movlw	192
  5170  00BF60  ECDC  F056         	call	_lcdInst
  5171                           
  5172                           ;standbyMode.c: 1545: unsigned int count = 0;
  5173  00BF64  0E00               	movlw	0
  5174  00BF66  6E33               	movwf	which_drawer@count+1,c
  5175  00BF68  0E00               	movlw	0
  5176  00BF6A  6E32               	movwf	which_drawer@count,c
  5177                           
  5178                           ;standbyMode.c: 1546: unsigned int sum = 0;
  5179  00BF6C  0E00               	movlw	0
  5180  00BF6E  6E2F               	movwf	which_drawer@sum+1,c
  5181  00BF70  0E00               	movlw	0
  5182  00BF72  6E2E               	movwf	which_drawer@sum,c
  5183                           
  5184                           ;standbyMode.c: 1547: unsigned int backCheck = 0;
  5185  00BF74  0E00               	movlw	0
  5186  00BF76  6E31               	movwf	which_drawer@backCheck+1,c
  5187  00BF78  0E00               	movlw	0
  5188  00BF7A  6E30               	movwf	which_drawer@backCheck,c
  5189  00BF7C                     
  5190                           ;standbyMode.c: 1550: while(PORTBbits.RB1 == 0){ continue; }
  5191  00BF7C  A281               	btfss	3969,1,c	;volatile
  5192  00BF7E  D7FE               	goto	l901
  5193                           
  5194                           ;standbyMode.c: 1551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5195  00BF80  3881               	swapf	3969,w,c	;volatile
  5196  00BF82  0B0F               	andlw	15
  5197  00BF84  0B0F               	andlw	15
  5198  00BF86  6E34               	movwf	which_drawer@keypress,c
  5199  00BF88  B281               	btfsc	3969,1,c	;volatile
  5200  00BF8A  D7FE               	goto	l906
  5201                           
  5202                           ;standbyMode.c: 1554: if(keypress == 15){
  5203  00BF8C  0E0F               	movlw	15
  5204  00BF8E  1834               	xorwf	which_drawer@keypress,w,c
  5205  00BF90  B4D8               	btfsc	status,2,c
  5206  00BF92  D0C3               	goto	l909
  5207                           
  5208                           ;standbyMode.c: 1557: else if (keypress == 14){
  5209                           
  5210                           ;standbyMode.c: 1556: }
  5211                           
  5212                           ;standbyMode.c: 1555: break;
  5213  00BF94  0E0E               	movlw	14
  5214  00BF96  1834               	xorwf	which_drawer@keypress,w,c
  5215  00BF98  A4D8               	btfss	status,2,c
  5216  00BF9A  D005               	goto	l911
  5217                           
  5218                           ;standbyMode.c: 1558: backCheck = 100;
  5219  00BF9C  0E00               	movlw	0
  5220  00BF9E  6E31               	movwf	which_drawer@backCheck+1,c
  5221  00BFA0  0E64               	movlw	100
  5222  00BFA2  6E30               	movwf	which_drawer@backCheck,c
  5223                           
  5224                           ;standbyMode.c: 1559: break;
  5225  00BFA4  D0BA               	goto	l909
  5226  00BFA6                     l911:
  5227                           
  5228                           ;standbyMode.c: 1561: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  5229  00BFA6  5034               	movf	which_drawer@keypress,w,c
  5230  00BFA8  B4D8               	btfsc	status,2,c
  5231  00BFAA  D023               	goto	u9880
  5232  00BFAC  0434               	decf	which_drawer@keypress,w,c
  5233  00BFAE  B4D8               	btfsc	status,2,c
  5234  00BFB0  D020               	goto	u9880
  5235  00BFB2  0E02               	movlw	2
  5236  00BFB4  1834               	xorwf	which_drawer@keypress,w,c
  5237  00BFB6  B4D8               	btfsc	status,2,c
  5238  00BFB8  D01C               	goto	u9880
  5239  00BFBA  0E04               	movlw	4
  5240  00BFBC  1834               	xorwf	which_drawer@keypress,w,c
  5241  00BFBE  B4D8               	btfsc	status,2,c
  5242  00BFC0  D018               	goto	u9880
  5243  00BFC2  0E05               	movlw	5
  5244  00BFC4  1834               	xorwf	which_drawer@keypress,w,c
  5245  00BFC6  B4D8               	btfsc	status,2,c
  5246  00BFC8  D014               	goto	u9880
  5247  00BFCA  0E06               	movlw	6
  5248  00BFCC  1834               	xorwf	which_drawer@keypress,w,c
  5249  00BFCE  B4D8               	btfsc	status,2,c
  5250  00BFD0  D010               	goto	u9880
  5251  00BFD2  0E08               	movlw	8
  5252  00BFD4  1834               	xorwf	which_drawer@keypress,w,c
  5253  00BFD6  B4D8               	btfsc	status,2,c
  5254  00BFD8  D00C               	goto	u9880
  5255  00BFDA  0E09               	movlw	9
  5256  00BFDC  1834               	xorwf	which_drawer@keypress,w,c
  5257  00BFDE  B4D8               	btfsc	status,2,c
  5258  00BFE0  D008               	goto	u9880
  5259  00BFE2  0E0A               	movlw	10
  5260  00BFE4  1834               	xorwf	which_drawer@keypress,w,c
  5261  00BFE6  B4D8               	btfsc	status,2,c
  5262  00BFE8  D004               	goto	u9880
  5263  00BFEA  0E0D               	movlw	13
  5264  00BFEC  1834               	xorwf	which_drawer@keypress,w,c
  5265  00BFEE  A4D8               	btfss	status,2,c
  5266  00BFF0  D073               	goto	l913
  5267  00BFF2                     u9880:
  5268                           
  5269                           ;standbyMode.c: 1562: if (count == 0){
  5270  00BFF2  5032               	movf	which_drawer@count,w,c
  5271  00BFF4  1033               	iorwf	which_drawer@count+1,w,c
  5272  00BFF6  A4D8               	btfss	status,2,c
  5273  00BFF8  D04C               	goto	l916
  5274                           
  5275                           ;standbyMode.c: 1563: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  5276  00BFFA  0434               	decf	which_drawer@keypress,w,c
  5277  00BFFC  B4D8               	btfsc	status,2,c
  5278  00BFFE  D01C               	goto	u9970
  5279  00C000  0E02               	movlw	2
  5280  00C002  1834               	xorwf	which_drawer@keypress,w,c
  5281  00C004  B4D8               	btfsc	status,2,c
  5282  00C006  D018               	goto	u9970
  5283  00C008  0E04               	movlw	4
  5284  00C00A  1834               	xorwf	which_drawer@keypress,w,c
  5285  00C00C  B4D8               	btfsc	status,2,c
  5286  00C00E  D014               	goto	u9970
  5287  00C010  0E05               	movlw	5
  5288  00C012  1834               	xorwf	which_drawer@keypress,w,c
  5289  00C014  B4D8               	btfsc	status,2,c
  5290  00C016  D010               	goto	u9970
  5291  00C018  0E06               	movlw	6
  5292  00C01A  1834               	xorwf	which_drawer@keypress,w,c
  5293  00C01C  B4D8               	btfsc	status,2,c
  5294  00C01E  D00C               	goto	u9970
  5295  00C020  0E08               	movlw	8
  5296  00C022  1834               	xorwf	which_drawer@keypress,w,c
  5297  00C024  B4D8               	btfsc	status,2,c
  5298  00C026  D008               	goto	u9970
  5299  00C028  0E09               	movlw	9
  5300  00C02A  1834               	xorwf	which_drawer@keypress,w,c
  5301  00C02C  B4D8               	btfsc	status,2,c
  5302  00C02E  D004               	goto	u9970
  5303  00C030  0E0A               	movlw	10
  5304  00C032  1834               	xorwf	which_drawer@keypress,w,c
  5305  00C034  A4D8               	btfss	status,2,c
  5306  00C036  D014               	goto	l917
  5307  00C038                     u9970:
  5308                           
  5309                           ;standbyMode.c: 1564: count += 2;
  5310  00C038  0E02               	movlw	2
  5311  00C03A  2632               	addwf	which_drawer@count,f,c
  5312  00C03C  0E00               	movlw	0
  5313  00C03E  2233               	addwfc	which_drawer@count+1,f,c
  5314                           
  5315                           ;standbyMode.c: 1565: putch(input[keypress]);
  5316  00C040  5034               	movf	which_drawer@keypress,w,c
  5317  00C042  0D01               	mullw	1
  5318  00C044  0E84               	movlw	low _input
  5319  00C046  24F3               	addwf	prodl,w,c
  5320  00C048  6EF6               	movwf	tblptrl,c
  5321  00C04A  0EF9               	movlw	high _input
  5322  00C04C  20F4               	addwfc	prodh,w,c
  5323  00C04E  6EF7               	movwf	tblptrh,c
  5324  00C050                     	if	1	;There are 3 active tblptr bytes
  5325  00C050  6AF8               	clrf	tblptru,c
  5326  00C052  0E00               	movlw	low (__mediumconst shr (0+16))
  5327  00C054  22F8               	addwfc	tblptru,f,c
  5328  00C056                     	endif
  5329  00C056  0008               	tblrd		*
  5330  00C058  50F5               	movf	tablat,w,c
  5331  00C05A  ECF0  F056         	call	_putch
  5332  00C05E  D03A               	goto	l927
  5333  00C060                     l917:
  5334                           
  5335                           ;standbyMode.c: 1568: else if (keypress == 0){
  5336  00C060  5034               	movf	which_drawer@keypress,w,c
  5337  00C062  A4D8               	btfss	status,2,c
  5338  00C064  D78B               	goto	l901
  5339                           
  5340                           ;standbyMode.c: 1569: putch(input[keypress]);
  5341  00C066  5034               	movf	which_drawer@keypress,w,c
  5342  00C068  0D01               	mullw	1
  5343  00C06A  0E84               	movlw	low _input
  5344  00C06C  24F3               	addwf	prodl,w,c
  5345  00C06E  6EF6               	movwf	tblptrl,c
  5346  00C070  0EF9               	movlw	high _input
  5347  00C072  20F4               	addwfc	prodh,w,c
  5348  00C074  6EF7               	movwf	tblptrh,c
  5349  00C076                     	if	1	;There are 3 active tblptr bytes
  5350  00C076  6AF8               	clrf	tblptru,c
  5351  00C078  0E00               	movlw	low (__mediumconst shr (0+16))
  5352  00C07A  22F8               	addwfc	tblptru,f,c
  5353  00C07C                     	endif
  5354  00C07C  0008               	tblrd		*
  5355  00C07E  50F5               	movf	tablat,w,c
  5356  00C080  ECF0  F056         	call	_putch
  5357                           
  5358                           ;standbyMode.c: 1570: count += 1;
  5359  00C084  4A32               	infsnz	which_drawer@count,f,c
  5360  00C086  2A33               	incf	which_drawer@count+1,f,c
  5361  00C088  D023               	goto	u10020
  5362  00C08A                     L4:
  5363  00C08A  262E               	addwf	which_drawer@sum,f,c
  5364  00C08C  0E00               	movlw	0
  5365  00C08E  222F               	addwfc	which_drawer@sum+1,f,c
  5366                           
  5367                           ;standbyMode.c: 1572: }
  5368                           ;standbyMode.c: 1573: }
  5369  00C090  D775               	goto	l901
  5370  00C092                     l916:
  5371                           
  5372                           ;standbyMode.c: 1574: else if (count == 1){
  5373  00C092  0432               	decf	which_drawer@count,w,c
  5374  00C094  1033               	iorwf	which_drawer@count+1,w,c
  5375  00C096  A4D8               	btfss	status,2,c
  5376  00C098  D771               	goto	l901
  5377                           
  5378                           ;standbyMode.c: 1575: if (keypress < 8 || keypress == 13){
  5379  00C09A  0E07               	movlw	7
  5380  00C09C  6434               	cpfsgt	which_drawer@keypress,c
  5381  00C09E  D004               	goto	u10010
  5382  00C0A0  0E0D               	movlw	13
  5383  00C0A2  1834               	xorwf	which_drawer@keypress,w,c
  5384  00C0A4  A4D8               	btfss	status,2,c
  5385  00C0A6  D76A               	goto	l901
  5386  00C0A8                     u10010:
  5387                           
  5388                           ;standbyMode.c: 1576: putch(input[keypress]);
  5389  00C0A8  5034               	movf	which_drawer@keypress,w,c
  5390  00C0AA  0D01               	mullw	1
  5391  00C0AC  0E84               	movlw	low _input
  5392  00C0AE  24F3               	addwf	prodl,w,c
  5393  00C0B0  6EF6               	movwf	tblptrl,c
  5394  00C0B2  0EF9               	movlw	high _input
  5395  00C0B4  20F4               	addwfc	prodh,w,c
  5396  00C0B6  6EF7               	movwf	tblptrh,c
  5397  00C0B8                     	if	1	;There are 3 active tblptr bytes
  5398  00C0B8  6AF8               	clrf	tblptru,c
  5399  00C0BA  0E00               	movlw	low (__mediumconst shr (0+16))
  5400  00C0BC  22F8               	addwfc	tblptru,f,c
  5401  00C0BE                     	endif
  5402  00C0BE  0008               	tblrd		*
  5403  00C0C0  50F5               	movf	tablat,w,c
  5404  00C0C2  ECF0  F056         	call	_putch
  5405                           
  5406                           ;standbyMode.c: 1577: count += 1;
  5407  00C0C6  4A32               	infsnz	which_drawer@count,f,c
  5408  00C0C8  2A33               	incf	which_drawer@count+1,f,c
  5409                           
  5410                           ;standbyMode.c: 1578: if(keypress == 0){
  5411  00C0CA  5034               	movf	which_drawer@keypress,w,c
  5412  00C0CC  A4D8               	btfss	status,2,c
  5413  00C0CE  D002               	goto	l927
  5414  00C0D0                     u10020:
  5415                           
  5416                           ;standbyMode.c: 1579: sum += 20;
  5417  00C0D0  0E14               	movlw	20
  5418  00C0D2  D7DB               	goto	L4
  5419  00C0D4                     l927:
  5420                           
  5421                           ;standbyMode.c: 1581: else {
  5422                           ;standbyMode.c: 1582: sum += keypress;
  5423  00C0D4  5034               	movf	which_drawer@keypress,w,c
  5424  00C0D6  D7D9               	goto	L4
  5425  00C0D8                     l913:
  5426                           
  5427                           ;standbyMode.c: 1587: else if (keypress == 12){
  5428  00C0D8  0E0C               	movlw	12
  5429  00C0DA  1834               	xorwf	which_drawer@keypress,w,c
  5430  00C0DC  A4D8               	btfss	status,2,c
  5431  00C0DE  D74E               	goto	l901
  5432                           
  5433                           ;standbyMode.c: 1588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5434  00C0E0  0E01               	movlw	1
  5435  00C0E2  ECDC  F056         	call	_lcdInst
  5436  00C0E6  0EC3               	movlw	195
  5437  00C0E8  6E2B               	movwf	??_which_drawer& (0+255),c
  5438  00C0EA  0ECD               	movlw	205
  5439  00C0EC                     u12047:
  5440  00C0EC  2EE8               	decfsz	wreg,f,c
  5441  00C0EE  D7FE               	bra	u12047
  5442  00C0F0  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5443  00C0F2  D7FC               	bra	u12047
  5444  00C0F4  F000               	nop	
  5445                           
  5446                           ;standbyMode.c: 1589: printf("Drawer number:");
  5447  00C0F6  0EFD               	movlw	low STR_73
  5448  00C0F8  6E0D               	movwf	printf@f,c
  5449  00C0FA  0EFA               	movlw	high STR_73
  5450  00C0FC  6E0E               	movwf	printf@f+1,c
  5451  00C0FE  EC47  F063         	call	_printf	;wreg free
  5452                           
  5453                           ;standbyMode.c: 1590: lcdInst(0xC0);;
  5454  00C102  0EC0               	movlw	192
  5455  00C104  ECDC  F056         	call	_lcdInst
  5456                           
  5457                           ;standbyMode.c: 1591: count = 0;
  5458  00C108  0E00               	movlw	0
  5459  00C10A  6E33               	movwf	which_drawer@count+1,c
  5460  00C10C  0E00               	movlw	0
  5461  00C10E  6E32               	movwf	which_drawer@count,c
  5462                           
  5463                           ;standbyMode.c: 1592: sum = 0;
  5464  00C110  0E00               	movlw	0
  5465  00C112  6E2F               	movwf	which_drawer@sum+1,c
  5466  00C114  0E00               	movlw	0
  5467  00C116  6E2E               	movwf	which_drawer@sum,c
  5468  00C118  D731               	goto	l901
  5469  00C11A                     l909:
  5470                           
  5471                           ;standbyMode.c: 1593: }
  5472                           ;standbyMode.c: 1594: }
  5473                           ;standbyMode.c: 1596: if (backCheck == 100){
  5474  00C11A  0E64               	movlw	100
  5475  00C11C  1830               	xorwf	which_drawer@backCheck,w,c
  5476  00C11E  1031               	iorwf	which_drawer@backCheck+1,w,c
  5477  00C120  A4D8               	btfss	status,2,c
  5478  00C122  D005               	goto	l932
  5479                           
  5480                           ;standbyMode.c: 1597: return backCheck;
  5481  00C124  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5482  00C128  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5483                           
  5484                           ;standbyMode.c: 1598: }
  5485  00C12C  0012               	return	
  5486  00C12E                     l932:
  5487                           
  5488                           ;standbyMode.c: 1599: else{
  5489                           ;standbyMode.c: 1600: unsigned int rand = decode_drawer(sum);
  5490  00C12E  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5491  00C132  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5492  00C136  EC55  F05A         	call	_decode_drawer	;wreg free
  5493  00C13A  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5494  00C13E  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5495                           
  5496                           ;standbyMode.c: 1601: return rand;
  5497  00C142  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5498  00C146  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5499  00C14A  0012               	return	
  5500  00C14C                     __end_of_which_drawer:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           postdec1	equ	0xFE5
  5511                           plusw1	equ	0xFE3
  5512                           fsr1l	equ	0xFE1
  5513                           indf2	equ	0xFDF
  5514                           postinc2	equ	0xFDE
  5515                           postdec2	equ	0xFDD
  5516                           plusw2	equ	0xFDB
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function _decode_drawer *****************
  5522 ;; Defined at:
  5523 ;;		line 1461 in file "standbyMode.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  drawer          2    0[COMRAM] unsigned int 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;  returnValue     2    4[COMRAM] unsigned int 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  2    0[COMRAM] unsigned int 
  5530 ;; Registers used:
  5531 ;;		wreg, status,2, status,0
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;Total ram usage:        6 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_which_drawer
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text3
  5551  00B4AA                     __ptext3:
  5552                           	opt stack 0
  5553  00B4AA                     _decode_drawer:
  5554                           	opt stack 28
  5555                           
  5556                           ;standbyMode.c: 1462: unsigned int returnValue;
  5557                           ;standbyMode.c: 1464: switch(drawer){
  5558                           
  5559                           ;incstack = 0
  5560  00B4AA  D03A               	goto	l882
  5561  00B4AC                     
  5562                           ;standbyMode.c: 1467: returnValue = 1;
  5563  00B4AC  0E00               	movlw	0
  5564  00B4AE  6E06               	movwf	decode_drawer@returnValue+1,c
  5565  00B4B0  0E01               	movlw	1
  5566  00B4B2  D02F               	goto	L16
  5567  00B4B4                     
  5568                           ;standbyMode.c: 1472: returnValue = 2;
  5569  00B4B4  0E00               	movlw	0
  5570  00B4B6  6E06               	movwf	decode_drawer@returnValue+1,c
  5571  00B4B8  0E02               	movlw	2
  5572  00B4BA  D02B               	goto	L16
  5573  00B4BC                     
  5574                           ;standbyMode.c: 1477: returnValue = 3;
  5575  00B4BC  0E00               	movlw	0
  5576  00B4BE  6E06               	movwf	decode_drawer@returnValue+1,c
  5577  00B4C0  0E03               	movlw	3
  5578  00B4C2  D027               	goto	L16
  5579  00B4C4                     
  5580                           ;standbyMode.c: 1482: returnValue = 7;
  5581  00B4C4  0E00               	movlw	0
  5582  00B4C6  6E06               	movwf	decode_drawer@returnValue+1,c
  5583  00B4C8  0E07               	movlw	7
  5584  00B4CA  D023               	goto	L16
  5585  00B4CC                     
  5586                           ;standbyMode.c: 1487: returnValue = 8;
  5587  00B4CC  0E00               	movlw	0
  5588  00B4CE  6E06               	movwf	decode_drawer@returnValue+1,c
  5589  00B4D0  0E08               	movlw	8
  5590  00B4D2  D01F               	goto	L16
  5591  00B4D4                     
  5592                           ;standbyMode.c: 1492: returnValue = 9;
  5593  00B4D4  0E00               	movlw	0
  5594  00B4D6  6E06               	movwf	decode_drawer@returnValue+1,c
  5595  00B4D8  0E09               	movlw	9
  5596  00B4DA  D01B               	goto	L16
  5597  00B4DC                     
  5598                           ;standbyMode.c: 1497: returnValue = 10;
  5599  00B4DC  0E00               	movlw	0
  5600  00B4DE  6E06               	movwf	decode_drawer@returnValue+1,c
  5601  00B4E0  0E0A               	movlw	10
  5602  00B4E2  D017               	goto	L16
  5603  00B4E4                     
  5604                           ;standbyMode.c: 1502: returnValue = 11;
  5605  00B4E4  0E00               	movlw	0
  5606  00B4E6  6E06               	movwf	decode_drawer@returnValue+1,c
  5607  00B4E8  0E0B               	movlw	11
  5608  00B4EA  D013               	goto	L16
  5609  00B4EC                     
  5610                           ;standbyMode.c: 1507: returnValue = 12;
  5611  00B4EC  0E00               	movlw	0
  5612  00B4EE  6E06               	movwf	decode_drawer@returnValue+1,c
  5613  00B4F0  0E0C               	movlw	12
  5614  00B4F2  D00F               	goto	L16
  5615  00B4F4                     
  5616                           ;standbyMode.c: 1512: returnValue = 13;
  5617  00B4F4  0E00               	movlw	0
  5618  00B4F6  6E06               	movwf	decode_drawer@returnValue+1,c
  5619  00B4F8  0E0D               	movlw	13
  5620  00B4FA  D00B               	goto	L16
  5621  00B4FC                     
  5622                           ;standbyMode.c: 1517: returnValue = 14;
  5623  00B4FC  0E00               	movlw	0
  5624  00B4FE  6E06               	movwf	decode_drawer@returnValue+1,c
  5625  00B500  0E0E               	movlw	14
  5626  00B502  D007               	goto	L16
  5627  00B504                     
  5628                           ;standbyMode.c: 1522: returnValue = 15;
  5629  00B504  0E00               	movlw	0
  5630  00B506  6E06               	movwf	decode_drawer@returnValue+1,c
  5631  00B508  0E0F               	movlw	15
  5632  00B50A  D003               	goto	L16
  5633  00B50C                     
  5634                           ;standbyMode.c: 1527: returnValue = 16;
  5635  00B50C  0E00               	movlw	0
  5636  00B50E  6E06               	movwf	decode_drawer@returnValue+1,c
  5637  00B510  0E10               	movlw	16
  5638  00B512                     L16:
  5639  00B512  6E05               	movwf	decode_drawer@returnValue,c
  5640                           
  5641                           ;standbyMode.c: 1528: break;
  5642  00B514  D036               	goto	l884
  5643  00B516                     l897:
  5644                           
  5645                           ;standbyMode.c: 1531: returnValue = drawer;
  5646  00B516  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  5647  00B51A  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  5648                           
  5649                           ;standbyMode.c: 1533: }
  5650                           
  5651                           ;standbyMode.c: 1532: break;
  5652  00B51E  D031               	goto	l884
  5653  00B520                     l882:
  5654  00B520  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  5655  00B524  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  5656                           
  5657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5658                           ; Switch size 1, requested type "space"
  5659                           ; Number of cases is 1, Range of values is 0 to 0
  5660                           ; switch strategies available:
  5661                           ; Name         Instructions Cycles
  5662                           ; simple_byte            4     3 (average)
  5663                           ;	Chosen strategy is simple_byte
  5664  00B528  5004               	movf	??_decode_drawer+1,w,c
  5665  00B52A  0A00               	xorlw	0	; case 0
  5666  00B52C  A4D8               	btfss	status,2,c
  5667  00B52E  D7F3               	goto	l897
  5668                           
  5669                           ; Switch size 1, requested type "space"
  5670                           ; Number of cases is 13, Range of values is 1 to 40
  5671                           ; switch strategies available:
  5672                           ; Name         Instructions Cycles
  5673                           ; simple_byte           40    21 (average)
  5674                           ;	Chosen strategy is simple_byte
  5675  00B530  5003               	movf	??_decode_drawer,w,c
  5676  00B532  0A01               	xorlw	1	; case 1
  5677  00B534  B4D8               	btfsc	status,2,c
  5678  00B536  D7BE               	goto	l885
  5679  00B538  0A03               	xorlw	3	; case 2
  5680  00B53A  B4D8               	btfsc	status,2,c
  5681  00B53C  D7BF               	goto	l886
  5682  00B53E  0A0A               	xorlw	10	; case 8
  5683  00B540  B4D8               	btfsc	status,2,c
  5684  00B542  D7C0               	goto	l887
  5685  00B544  0A01               	xorlw	1	; case 9
  5686  00B546  B4D8               	btfsc	status,2,c
  5687  00B548  D7C1               	goto	l888
  5688  00B54A  0A03               	xorlw	3	; case 10
  5689  00B54C  B4D8               	btfsc	status,2,c
  5690  00B54E  D7C2               	goto	l889
  5691  00B550  0A1E               	xorlw	30	; case 20
  5692  00B552  B4D8               	btfsc	status,2,c
  5693  00B554  D7AB               	goto	l883
  5694  00B556  0A01               	xorlw	1	; case 21
  5695  00B558  B4D8               	btfsc	status,2,c
  5696  00B55A  D7C8               	goto	l892
  5697  00B55C  0A03               	xorlw	3	; case 22
  5698  00B55E  B4D8               	btfsc	status,2,c
  5699  00B560  D7C9               	goto	l893
  5700  00B562  0A0E               	xorlw	14	; case 24
  5701  00B564  B4D8               	btfsc	status,2,c
  5702  00B566  D7CA               	goto	l894
  5703  00B568  0A01               	xorlw	1	; case 25
  5704  00B56A  B4D8               	btfsc	status,2,c
  5705  00B56C  D7CB               	goto	l895
  5706  00B56E  0A03               	xorlw	3	; case 26
  5707  00B570  B4D8               	btfsc	status,2,c
  5708  00B572  D7CC               	goto	l896
  5709  00B574  0A3B               	xorlw	59	; case 33
  5710  00B576  B4D8               	btfsc	status,2,c
  5711  00B578  D7B1               	goto	l890
  5712  00B57A  0A09               	xorlw	9	; case 40
  5713  00B57C  B4D8               	btfsc	status,2,c
  5714  00B57E  D7B2               	goto	l891
  5715  00B580  D7CA               	goto	l897
  5716  00B582                     l884:
  5717                           
  5718                           ;standbyMode.c: 1534: return returnValue;
  5719  00B582  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  5720  00B586  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  5721  00B58A  0012               	return		;funcret
  5722  00B58C                     __end_of_decode_drawer:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           prodh	equ	0xFF4
  5729                           prodl	equ	0xFF3
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           postdec1	equ	0xFE5
  5733                           plusw1	equ	0xFE3
  5734                           fsr1l	equ	0xFE1
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           plusw2	equ	0xFDB
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _viewLogs *****************
  5744 ;; Defined at:
  5745 ;;		line 753 in file "standbyMode.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  keypress2       1   92[COMRAM] unsigned char 
  5750 ;;  logView         2   89[COMRAM] unsigned int 
  5751 ;;  returnVal       2   87[COMRAM] unsigned int 
  5752 ;;  checkLog        2   85[COMRAM] unsigned int 
  5753 ;;  logNumber       1   91[COMRAM] unsigned char 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  2   81[COMRAM] unsigned int 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5763 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;Total ram usage:       12 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    4
  5770 ;; This function calls:
  5771 ;;		_displayLogs
  5772 ;;		_lcdInst
  5773 ;;		_printf
  5774 ;;		_putch
  5775 ;;		_readEEPROM
  5776 ;;		_verifyKeypress
  5777 ;; This function is called by:
  5778 ;;		_standbyMode
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text4
  5783  00C3A2                     __ptext4:
  5784                           	opt stack 0
  5785  00C3A2                     _viewLogs:
  5786                           	opt stack 25
  5787                           
  5788                           ;standbyMode.c: 755: unsigned char logNumber = readEEPROM(250);
  5789                           
  5790                           ;incstack = 0
  5791  00C3A2  0EFA               	movlw	250
  5792  00C3A4  ECE6  F056         	call	_readEEPROM
  5793  00C3A8  6E5C               	movwf	viewLogs@logNumber,c
  5794                           
  5795                           ;standbyMode.c: 756: unsigned int logView = 0;
  5796  00C3AA  0E00               	movlw	0
  5797  00C3AC  6E5B               	movwf	viewLogs@logView+1,c
  5798  00C3AE  0E00               	movlw	0
  5799  00C3B0  6E5A               	movwf	viewLogs@logView,c
  5800                           
  5801                           ;standbyMode.c: 757: unsigned int checkLog = 0;
  5802  00C3B2  0E00               	movlw	0
  5803  00C3B4  6E57               	movwf	viewLogs@checkLog+1,c
  5804  00C3B6  0E00               	movlw	0
  5805  00C3B8  6E56               	movwf	viewLogs@checkLog,c
  5806                           
  5807                           ;standbyMode.c: 758: unsigned int returnVal = 0;
  5808  00C3BA  0E00               	movlw	0
  5809  00C3BC  6E59               	movwf	viewLogs@returnVal+1,c
  5810  00C3BE  0E00               	movlw	0
  5811  00C3C0  6E58               	movwf	viewLogs@returnVal,c
  5812                           
  5813                           ;standbyMode.c: 760: if (logNumber == 0){
  5814  00C3C2  505C               	movf	viewLogs@logNumber,w,c
  5815  00C3C4  A4D8               	btfss	status,2,c
  5816  00C3C6  D02B               	goto	l623
  5817                           
  5818                           ;standbyMode.c: 761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5819  00C3C8  0E01               	movlw	1
  5820  00C3CA  ECDC  F056         	call	_lcdInst
  5821  00C3CE  0EC3               	movlw	195
  5822  00C3D0  6E54               	movwf	??_viewLogs& (0+255),c
  5823  00C3D2  0ECD               	movlw	205
  5824  00C3D4                     u12057:
  5825  00C3D4  2EE8               	decfsz	wreg,f,c
  5826  00C3D6  D7FE               	bra	u12057
  5827  00C3D8  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5828  00C3DA  D7FC               	bra	u12057
  5829  00C3DC  F000               	nop	
  5830                           
  5831                           ;standbyMode.c: 762: printf("No logs");
  5832  00C3DE  0E94               	movlw	low STR_36
  5833  00C3E0  6E0D               	movwf	printf@f,c
  5834  00C3E2  0EFC               	movlw	high STR_36
  5835  00C3E4  6E0E               	movwf	printf@f+1,c
  5836  00C3E6  EC47  F063         	call	_printf	;wreg free
  5837                           
  5838                           ;standbyMode.c: 763: lcdInst(0xC0);;
  5839  00C3EA  0EC0               	movlw	192
  5840  00C3EC  ECDC  F056         	call	_lcdInst
  5841                           
  5842                           ;standbyMode.c: 764: printf("available.");
  5843  00C3F0  0E09               	movlw	low STR_37
  5844  00C3F2  6E0D               	movwf	printf@f,c
  5845  00C3F4  0EFC               	movlw	high STR_37
  5846  00C3F6  6E0E               	movwf	printf@f+1,c
  5847  00C3F8  EC47  F063         	call	_printf	;wreg free
  5848                           
  5849                           ;standbyMode.c: 765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5850  00C3FC  0E66               	movlw	102
  5851  00C3FE  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5852  00C400  0E76               	movlw	118
  5853  00C402  6E54               	movwf	??_viewLogs& (0+255),c
  5854  00C404  0EC1               	movlw	193
  5855  00C406                     u12067:
  5856  00C406  2EE8               	decfsz	wreg,f,c
  5857  00C408  D7FE               	bra	u12067
  5858  00C40A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5859  00C40C  D7FC               	bra	u12067
  5860  00C40E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5861  00C410  D7FA               	bra	u12067
  5862  00C412  F000               	nop	
  5863                           
  5864                           ;standbyMode.c: 766: return 14;
  5865  00C414  0E00               	movlw	0
  5866  00C416  6E53               	movwf	?_viewLogs+1,c
  5867  00C418  0E0E               	movlw	14
  5868  00C41A  6E52               	movwf	?_viewLogs,c
  5869                           
  5870                           ;standbyMode.c: 767: }
  5871  00C41C  0012               	return	
  5872  00C41E                     l623:
  5873                           
  5874                           ;standbyMode.c: 768: else {
  5875                           ;standbyMode.c: 769: if (logNumber == 1){
  5876  00C41E  045C               	decf	viewLogs@logNumber,w,c
  5877  00C420  A4D8               	btfss	status,2,c
  5878  00C422  D053               	goto	l626
  5879                           
  5880                           ;standbyMode.c: 770: logView = 1;
  5881  00C424  0E00               	movlw	0
  5882  00C426  6E5B               	movwf	viewLogs@logView+1,c
  5883  00C428  0E01               	movlw	1
  5884  00C42A  6E5A               	movwf	viewLogs@logView,c
  5885                           
  5886                           ;standbyMode.c: 772: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5887  00C42C  0E01               	movlw	1
  5888  00C42E  ECDC  F056         	call	_lcdInst
  5889  00C432  0EC3               	movlw	195
  5890  00C434  6E54               	movwf	??_viewLogs& (0+255),c
  5891  00C436  0ECD               	movlw	205
  5892  00C438                     u12077:
  5893  00C438  2EE8               	decfsz	wreg,f,c
  5894  00C43A  D7FE               	bra	u12077
  5895  00C43C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5896  00C43E  D7FC               	bra	u12077
  5897  00C440  F000               	nop	
  5898                           
  5899                           ;standbyMode.c: 773: printf("1 previous log");
  5900  00C442  0E1B               	movlw	low STR_38
  5901  00C444  6E0D               	movwf	printf@f,c
  5902  00C446  0EFB               	movlw	high STR_38
  5903  00C448  6E0E               	movwf	printf@f+1,c
  5904  00C44A  EC47  F063         	call	_printf	;wreg free
  5905                           
  5906                           ;standbyMode.c: 774: lcdInst(0xC0);;
  5907  00C44E  0EC0               	movlw	192
  5908  00C450  ECDC  F056         	call	_lcdInst
  5909                           
  5910                           ;standbyMode.c: 775: printf("available.");
  5911  00C454  0E09               	movlw	low STR_37
  5912  00C456  6E0D               	movwf	printf@f,c
  5913  00C458  0EFC               	movlw	high STR_37
  5914  00C45A  6E0E               	movwf	printf@f+1,c
  5915  00C45C  EC47  F063         	call	_printf	;wreg free
  5916                           
  5917                           ;standbyMode.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5918  00C460  0E66               	movlw	102
  5919  00C462  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5920  00C464  0E76               	movlw	118
  5921  00C466  6E54               	movwf	??_viewLogs& (0+255),c
  5922  00C468  0EC1               	movlw	193
  5923  00C46A                     u12087:
  5924  00C46A  2EE8               	decfsz	wreg,f,c
  5925  00C46C  D7FE               	bra	u12087
  5926  00C46E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5927  00C470  D7FC               	bra	u12087
  5928  00C472  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5929  00C474  D7FA               	bra	u12087
  5930  00C476  F000               	nop	
  5931                           
  5932                           ;standbyMode.c: 778: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5933  00C478  0E01               	movlw	1
  5934  00C47A  ECDC  F056         	call	_lcdInst
  5935  00C47E  0EC3               	movlw	195
  5936  00C480  6E54               	movwf	??_viewLogs& (0+255),c
  5937  00C482  0ECD               	movlw	205
  5938  00C484                     u12097:
  5939  00C484  2EE8               	decfsz	wreg,f,c
  5940  00C486  D7FE               	bra	u12097
  5941  00C488  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5942  00C48A  D7FC               	bra	u12097
  5943  00C48C  F000               	nop	
  5944                           
  5945                           ;standbyMode.c: 779: printf("Press any key to");
  5946  00C48E  0E2C               	movlw	low STR_40
  5947  00C490  6E0D               	movwf	printf@f,c
  5948  00C492  0EFA               	movlw	high STR_40
  5949  00C494  6E0E               	movwf	printf@f+1,c
  5950  00C496  EC47  F063         	call	_printf	;wreg free
  5951                           
  5952                           ;standbyMode.c: 780: lcdInst(0xC0);;
  5953  00C49A  0EC0               	movlw	192
  5954  00C49C  ECDC  F056         	call	_lcdInst
  5955                           
  5956                           ;standbyMode.c: 781: printf("move forward.");
  5957  00C4A0  0EAE               	movlw	low STR_41
  5958  00C4A2  6E0D               	movwf	printf@f,c
  5959  00C4A4  0EFB               	movlw	high STR_41
  5960  00C4A6  6E0E               	movwf	printf@f+1,c
  5961  00C4A8  EC47  F063         	call	_printf	;wreg free
  5962                           
  5963                           ;standbyMode.c: 782: _delay((unsigned long)((500)*(40000000/4000.0)));
  5964  00C4AC  0E1A               	movlw	26
  5965  00C4AE  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5966  00C4B0  0E5E               	movlw	94
  5967  00C4B2  6E54               	movwf	??_viewLogs& (0+255),c
  5968  00C4B4  0E6E               	movlw	110
  5969  00C4B6                     u12107:
  5970  00C4B6  2EE8               	decfsz	wreg,f,c
  5971  00C4B8  D7FE               	bra	u12107
  5972  00C4BA  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5973  00C4BC  D7FC               	bra	u12107
  5974  00C4BE  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5975  00C4C0  D7FA               	bra	u12107
  5976  00C4C2  D000               	nop2	
  5977  00C4C4                     
  5978                           ;standbyMode.c: 785: continue;
  5979  00C4C4  B281               	btfsc	3969,1,c	;volatile
  5980  00C4C6  D0D4               	goto	u8330
  5981  00C4C8  D7FD               	goto	l628
  5982  00C4CA                     l626:
  5983                           
  5984                           ;standbyMode.c: 788: else {
  5985                           ;standbyMode.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5986  00C4CA  0E01               	movlw	1
  5987  00C4CC  ECDC  F056         	call	_lcdInst
  5988  00C4D0  0EC3               	movlw	195
  5989  00C4D2  6E54               	movwf	??_viewLogs& (0+255),c
  5990  00C4D4  0ECD               	movlw	205
  5991  00C4D6                     u12117:
  5992  00C4D6  2EE8               	decfsz	wreg,f,c
  5993  00C4D8  D7FE               	bra	u12117
  5994  00C4DA  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5995  00C4DC  D7FC               	bra	u12117
  5996  00C4DE  F000               	nop	
  5997                           
  5998                           ;standbyMode.c: 790: printf("%i previous logs", logNumber);
  5999  00C4E0  0E3D               	movlw	low STR_42
  6000  00C4E2  6E0D               	movwf	printf@f,c
  6001  00C4E4  0EFA               	movlw	high STR_42
  6002  00C4E6  6E0E               	movwf	printf@f+1,c
  6003  00C4E8  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  6004  00C4EC  6A10               	clrf	?_printf+3,c
  6005  00C4EE  EC47  F063         	call	_printf	;wreg free
  6006                           
  6007                           ;standbyMode.c: 791: lcdInst(0xC0);;
  6008  00C4F2  0EC0               	movlw	192
  6009  00C4F4  ECDC  F056         	call	_lcdInst
  6010                           
  6011                           ;standbyMode.c: 792: printf("available.");
  6012  00C4F8  0E09               	movlw	low STR_37
  6013  00C4FA  6E0D               	movwf	printf@f,c
  6014  00C4FC  0EFC               	movlw	high STR_37
  6015  00C4FE  6E0E               	movwf	printf@f+1,c
  6016  00C500  EC47  F063         	call	_printf	;wreg free
  6017                           
  6018                           ;standbyMode.c: 793: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6019  00C504  0E66               	movlw	102
  6020  00C506  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6021  00C508  0E76               	movlw	118
  6022  00C50A  6E54               	movwf	??_viewLogs& (0+255),c
  6023  00C50C  0EC1               	movlw	193
  6024  00C50E                     u12127:
  6025  00C50E  2EE8               	decfsz	wreg,f,c
  6026  00C510  D7FE               	bra	u12127
  6027  00C512  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6028  00C514  D7FC               	bra	u12127
  6029  00C516  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6030  00C518  D7FA               	bra	u12127
  6031  00C51A  F000               	nop	
  6032                           
  6033                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6034  00C51C  0E01               	movlw	1
  6035  00C51E  ECDC  F056         	call	_lcdInst
  6036  00C522  0EC3               	movlw	195
  6037  00C524  6E54               	movwf	??_viewLogs& (0+255),c
  6038  00C526  0ECD               	movlw	205
  6039  00C528                     u12137:
  6040  00C528  2EE8               	decfsz	wreg,f,c
  6041  00C52A  D7FE               	bra	u12137
  6042  00C52C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6043  00C52E  D7FC               	bra	u12137
  6044  00C530  F000               	nop	
  6045                           
  6046                           ;standbyMode.c: 795: printf("Please input log");
  6047  00C532  0E0A               	movlw	low STR_44
  6048  00C534  6E0D               	movwf	printf@f,c
  6049  00C536  0EFA               	movlw	high STR_44
  6050  00C538  6E0E               	movwf	printf@f+1,c
  6051  00C53A  EC47  F063         	call	_printf	;wreg free
  6052                           
  6053                           ;standbyMode.c: 796: lcdInst(0xC0);;
  6054  00C53E  0EC0               	movlw	192
  6055  00C540  ECDC  F056         	call	_lcdInst
  6056                           
  6057                           ;standbyMode.c: 797: printf("number: ");
  6058  00C544  0E73               	movlw	low STR_45
  6059  00C546  6E0D               	movwf	printf@f,c
  6060  00C548  0EFC               	movlw	high STR_45
  6061  00C54A  6E0E               	movwf	printf@f+1,c
  6062  00C54C  EC47  F063         	call	_printf	;wreg free
  6063  00C550                     
  6064                           ;standbyMode.c: 800: while(PORTBbits.RB1 == 0){ continue; }
  6065  00C550  A281               	btfss	3969,1,c	;volatile
  6066  00C552  D7FE               	goto	l631
  6067                           
  6068                           ;standbyMode.c: 801: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  6069  00C554  3881               	swapf	3969,w,c	;volatile
  6070  00C556  0B0F               	andlw	15
  6071  00C558  0B0F               	andlw	15
  6072  00C55A  6E5D               	movwf	viewLogs@keypress2,c
  6073  00C55C  B281               	btfsc	3969,1,c	;volatile
  6074  00C55E  D7FE               	goto	l636
  6075                           
  6076                           ;standbyMode.c: 804: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  6077  00C560  505D               	movf	viewLogs@keypress2,w,c
  6078  00C562  B4D8               	btfsc	status,2,c
  6079  00C564  D00B               	goto	u8300
  6080  00C566  045D               	decf	viewLogs@keypress2,w,c
  6081  00C568  B4D8               	btfsc	status,2,c
  6082  00C56A  D008               	goto	u8300
  6083  00C56C  0E02               	movlw	2
  6084  00C56E  185D               	xorwf	viewLogs@keypress2,w,c
  6085  00C570  B4D8               	btfsc	status,2,c
  6086  00C572  D004               	goto	u8300
  6087  00C574  0E04               	movlw	4
  6088  00C576  185D               	xorwf	viewLogs@keypress2,w,c
  6089  00C578  A4D8               	btfss	status,2,c
  6090  00C57A  D7EA               	goto	l631
  6091  00C57C                     u8300:
  6092                           
  6093                           ;standbyMode.c: 805: checkLog = verifyKeypress(logNumber, keypress2);
  6094  00C57C  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  6095  00C580  6A02               	clrf	verifyKeypress@keypress+1,c
  6096  00C582  505C               	movf	viewLogs@logNumber,w,c
  6097  00C584  ECE5  F057         	call	_verifyKeypress
  6098  00C588  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  6099  00C58C  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  6100                           
  6101                           ;standbyMode.c: 806: if (checkLog == 1){
  6102  00C590  0456               	decf	viewLogs@checkLog,w,c
  6103  00C592  1057               	iorwf	viewLogs@checkLog+1,w,c
  6104  00C594  A4D8               	btfss	status,2,c
  6105  00C596  D7DC               	goto	l631
  6106                           
  6107                           ;standbyMode.c: 807: putch(keys[keypress2]);
  6108  00C598  505D               	movf	viewLogs@keypress2,w,c
  6109  00C59A  0D01               	mullw	1
  6110  00C59C  0E73               	movlw	low _keys
  6111  00C59E  24F3               	addwf	prodl,w,c
  6112  00C5A0  6EF6               	movwf	tblptrl,c
  6113  00C5A2  0EF9               	movlw	high _keys
  6114  00C5A4  20F4               	addwfc	prodh,w,c
  6115  00C5A6  6EF7               	movwf	tblptrh,c
  6116  00C5A8                     	if	1	;There are 3 active tblptr bytes
  6117  00C5A8  6AF8               	clrf	tblptru,c
  6118  00C5AA  0E00               	movlw	low (__mediumconst shr (0+16))
  6119  00C5AC  22F8               	addwfc	tblptru,f,c
  6120  00C5AE                     	endif
  6121  00C5AE  0008               	tblrd		*
  6122  00C5B0  50F5               	movf	tablat,w,c
  6123  00C5B2  ECF0  F056         	call	_putch
  6124                           
  6125                           ;standbyMode.c: 808: if (keypress2 == 4){
  6126  00C5B6  0E04               	movlw	4
  6127  00C5B8  185D               	xorwf	viewLogs@keypress2,w,c
  6128  00C5BA  A4D8               	btfss	status,2,c
  6129  00C5BC  D004               	goto	l642
  6130                           
  6131                           ;standbyMode.c: 809: logView = keypress2;
  6132  00C5BE  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  6133  00C5C2  6A5B               	clrf	viewLogs@logView+1,c
  6134                           
  6135                           ;standbyMode.c: 810: }
  6136  00C5C4  D006               	goto	l643
  6137  00C5C6                     l642:
  6138                           
  6139                           ;standbyMode.c: 811: else{
  6140                           ;standbyMode.c: 812: logView = keypress2 + 1;
  6141  00C5C6  0E01               	movlw	1
  6142  00C5C8  245D               	addwf	viewLogs@keypress2,w,c
  6143  00C5CA  6E5A               	movwf	viewLogs@logView,c
  6144  00C5CC  6A5B               	clrf	viewLogs@logView+1,c
  6145  00C5CE  0E00               	movlw	0
  6146  00C5D0  225B               	addwfc	viewLogs@logView+1,f,c
  6147  00C5D2                     l643:
  6148                           
  6149                           ;standbyMode.c: 813: }
  6150                           ;standbyMode.c: 814: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6151  00C5D2  0E33               	movlw	51
  6152  00C5D4  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6153  00C5D6  0EBB               	movlw	187
  6154  00C5D8  6E54               	movwf	??_viewLogs& (0+255),c
  6155  00C5DA  0EE0               	movlw	224
  6156  00C5DC                     u12147:
  6157  00C5DC  2EE8               	decfsz	wreg,f,c
  6158  00C5DE  D7FE               	bra	u12147
  6159  00C5E0  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6160  00C5E2  D7FC               	bra	u12147
  6161  00C5E4  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6162  00C5E6  D7FA               	bra	u12147
  6163                           
  6164                           ;standbyMode.c: 816: }
  6165                           ;standbyMode.c: 817: }
  6166                           ;standbyMode.c: 818: }
  6167                           ;standbyMode.c: 820: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6168                           
  6169                           ;standbyMode.c: 815: break;
  6170  00C5E8  0E01               	movlw	1
  6171  00C5EA  ECDC  F056         	call	_lcdInst
  6172  00C5EE  0EC3               	movlw	195
  6173  00C5F0  6E54               	movwf	??_viewLogs& (0+255),c
  6174  00C5F2  0ECD               	movlw	205
  6175  00C5F4                     u12157:
  6176  00C5F4  2EE8               	decfsz	wreg,f,c
  6177  00C5F6  D7FE               	bra	u12157
  6178  00C5F8  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6179  00C5FA  D7FC               	bra	u12157
  6180  00C5FC  F000               	nop	
  6181                           
  6182                           ;standbyMode.c: 821: printf("Great!");
  6183  00C5FE  0EAB               	movlw	low STR_46
  6184  00C600  6E0D               	movwf	printf@f,c
  6185  00C602  0EFC               	movlw	high STR_46
  6186  00C604  6E0E               	movwf	printf@f+1,c
  6187  00C606  EC47  F063         	call	_printf	;wreg free
  6188                           
  6189                           ;standbyMode.c: 822: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6190  00C60A  0E33               	movlw	51
  6191  00C60C  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6192  00C60E  0EBB               	movlw	187
  6193  00C610  6E54               	movwf	??_viewLogs& (0+255),c
  6194  00C612  0EE0               	movlw	224
  6195  00C614                     u12167:
  6196  00C614  2EE8               	decfsz	wreg,f,c
  6197  00C616  D7FE               	bra	u12167
  6198  00C618  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6199  00C61A  D7FC               	bra	u12167
  6200  00C61C  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6201  00C61E  D7FA               	bra	u12167
  6202                           
  6203                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6204  00C620  0E01               	movlw	1
  6205  00C622  ECDC  F056         	call	_lcdInst
  6206  00C626  0EC3               	movlw	195
  6207  00C628  6E54               	movwf	??_viewLogs& (0+255),c
  6208  00C62A  0ECD               	movlw	205
  6209  00C62C                     u12177:
  6210  00C62C  2EE8               	decfsz	wreg,f,c
  6211  00C62E  D7FE               	bra	u12177
  6212  00C630  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6213  00C632  D7FC               	bra	u12177
  6214  00C634  F000               	nop	
  6215                           
  6216                           ;standbyMode.c: 824: printf("Press any key to");
  6217  00C636  0E2C               	movlw	low STR_40
  6218  00C638  6E0D               	movwf	printf@f,c
  6219  00C63A  0EFA               	movlw	high STR_40
  6220  00C63C  6E0E               	movwf	printf@f+1,c
  6221  00C63E  EC47  F063         	call	_printf	;wreg free
  6222                           
  6223                           ;standbyMode.c: 825: lcdInst(0xC0);;
  6224  00C642  0EC0               	movlw	192
  6225  00C644  ECDC  F056         	call	_lcdInst
  6226                           
  6227                           ;standbyMode.c: 826: printf("move forward.");
  6228  00C648  0EAE               	movlw	low STR_41
  6229  00C64A  6E0D               	movwf	printf@f,c
  6230  00C64C  0EFB               	movlw	high STR_41
  6231  00C64E  6E0E               	movwf	printf@f+1,c
  6232  00C650  EC47  F063         	call	_printf	;wreg free
  6233                           
  6234                           ;standbyMode.c: 827: _delay((unsigned long)((500)*(40000000/4000.0)));
  6235  00C654  0E1A               	movlw	26
  6236  00C656  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6237  00C658  0E5E               	movlw	94
  6238  00C65A  6E54               	movwf	??_viewLogs& (0+255),c
  6239  00C65C  0E6E               	movlw	110
  6240  00C65E                     u12187:
  6241  00C65E  2EE8               	decfsz	wreg,f,c
  6242  00C660  D7FE               	bra	u12187
  6243  00C662  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6244  00C664  D7FC               	bra	u12187
  6245  00C666  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6246  00C668  D7FA               	bra	u12187
  6247  00C66A  D000               	nop2	
  6248  00C66C                     
  6249                           ;standbyMode.c: 830: continue;
  6250  00C66C  A281               	btfss	3969,1,c	;volatile
  6251  00C66E  D7FE               	goto	l647
  6252  00C670                     u8330:
  6253                           
  6254                           ;standbyMode.c: 831: }
  6255                           ;standbyMode.c: 832: }
  6256                           ;standbyMode.c: 833: returnVal = displayLogs(logView);
  6257  00C670  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  6258  00C674  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  6259  00C678  ECD9  F067         	call	_displayLogs	;wreg free
  6260  00C67C  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  6261  00C680  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  6262                           
  6263                           ;standbyMode.c: 834: return returnVal;
  6264  00C684  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  6265  00C688  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  6266  00C68C  0012               	return	
  6267  00C68E                     __end_of_viewLogs:
  6268                           	opt stack 0
  6269                           tblptru	equ	0xFF8
  6270                           tblptrh	equ	0xFF7
  6271                           tblptrl	equ	0xFF6
  6272                           tablat	equ	0xFF5
  6273                           prodh	equ	0xFF4
  6274                           prodl	equ	0xFF3
  6275                           postinc0	equ	0xFEE
  6276                           wreg	equ	0xFE8
  6277                           postdec1	equ	0xFE5
  6278                           plusw1	equ	0xFE3
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           plusw2	equ	0xFDB
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           
  6288 ;; *************** function _verifyKeypress *****************
  6289 ;; Defined at:
  6290 ;;		line 739 in file "standbyMode.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  logNumber       1    wreg     unsigned char 
  6293 ;;  keypress        2    0[COMRAM] unsigned int 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  logNumber       1    4[COMRAM] unsigned char 
  6296 ;;  i               2    7[COMRAM] unsigned int 
  6297 ;;  returnVal       2    5[COMRAM] unsigned int 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  2    0[COMRAM] unsigned int 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2, status,0
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;Total ram usage:        9 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_viewLogs
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text5
  6321  00AFCA                     __ptext5:
  6322                           	opt stack 0
  6323  00AFCA                     _verifyKeypress:
  6324                           	opt stack 28
  6325                           
  6326                           ;incstack = 0
  6327                           ;verifyKeypress@logNumber stored from wreg
  6328  00AFCA  6E05               	movwf	verifyKeypress@logNumber,c
  6329                           
  6330                           ;standbyMode.c: 740: unsigned int i = 0;
  6331  00AFCC  0E00               	movlw	0
  6332  00AFCE  6E09               	movwf	verifyKeypress@i+1,c
  6333  00AFD0  0E00               	movlw	0
  6334  00AFD2  6E08               	movwf	verifyKeypress@i,c
  6335                           
  6336                           ;standbyMode.c: 741: unsigned int returnVal = 0;
  6337  00AFD4  0E00               	movlw	0
  6338  00AFD6  6E07               	movwf	verifyKeypress@returnVal+1,c
  6339  00AFD8  0E00               	movlw	0
  6340  00AFDA  6E06               	movwf	verifyKeypress@returnVal,c
  6341                           
  6342                           ;standbyMode.c: 743: for (i=0; i<logNumber; i++){
  6343  00AFDC  0E00               	movlw	0
  6344  00AFDE  6E09               	movwf	verifyKeypress@i+1,c
  6345  00AFE0  0E00               	movlw	0
  6346  00AFE2  6E08               	movwf	verifyKeypress@i,c
  6347  00AFE4  D00D               	goto	l616
  6348  00AFE6                     
  6349                           ;standbyMode.c: 744: if (keypress == i){
  6350  00AFE6  5008               	movf	verifyKeypress@i,w,c
  6351  00AFE8  1801               	xorwf	verifyKeypress@keypress,w,c
  6352  00AFEA  E108               	bnz	l6310
  6353  00AFEC  5009               	movf	verifyKeypress@i+1,w,c
  6354  00AFEE  1802               	xorwf	verifyKeypress@keypress+1,w,c
  6355  00AFF0  A4D8               	btfss	status,2,c
  6356  00AFF2  D004               	goto	l618
  6357                           
  6358                           ;standbyMode.c: 745: returnVal = 1;
  6359  00AFF4  0E00               	movlw	0
  6360  00AFF6  6E07               	movwf	verifyKeypress@returnVal+1,c
  6361  00AFF8  0E01               	movlw	1
  6362  00AFFA  6E06               	movwf	verifyKeypress@returnVal,c
  6363  00AFFC                     l618:
  6364  00AFFC                     l6310:
  6365  00AFFC  4A08               	infsnz	verifyKeypress@i,f,c
  6366  00AFFE  2A09               	incf	verifyKeypress@i+1,f,c
  6367  00B000                     l616:
  6368  00B000  5005               	movf	verifyKeypress@logNumber,w,c
  6369  00B002  6E03               	movwf	??_verifyKeypress& (0+255),c
  6370  00B004  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  6371  00B006  5003               	movf	??_verifyKeypress,w,c
  6372  00B008  5C08               	subwf	verifyKeypress@i,w,c
  6373  00B00A  5004               	movf	??_verifyKeypress+1,w,c
  6374  00B00C  5809               	subwfb	verifyKeypress@i+1,w,c
  6375  00B00E  A0D8               	btfss	status,0,c
  6376  00B010  D7EA               	goto	l617
  6377                           
  6378                           ;standbyMode.c: 746: }
  6379                           ;standbyMode.c: 747: }
  6380                           ;standbyMode.c: 748: return returnVal;
  6381  00B012  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  6382  00B016  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  6383  00B01A  0012               	return		;funcret
  6384  00B01C                     __end_of_verifyKeypress:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           postinc0	equ	0xFEE
  6393                           wreg	equ	0xFE8
  6394                           postdec1	equ	0xFE5
  6395                           plusw1	equ	0xFE3
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           plusw2	equ	0xFDB
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8
  6404                           
  6405 ;; *************** function _displayLogs *****************
  6406 ;; Defined at:
  6407 ;;		line 914 in file "standbyMode.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  logNumber       2   40[COMRAM] unsigned int 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  n               2   79[COMRAM] unsigned int 
  6412 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  6413 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  6414 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  6415 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  6416 ;;  i               2   69[COMRAM] unsigned int 
  6417 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  6418 ;;  operationTim    2   65[COMRAM] unsigned int 
  6419 ;;  foodType        2   62[COMRAM] unsigned int 
  6420 ;;  dietType        2   60[COMRAM] unsigned int 
  6421 ;;  seconds         2   58[COMRAM] unsigned int 
  6422 ;;  minutes         2   56[COMRAM] unsigned int 
  6423 ;;  longPieces      2   54[COMRAM] unsigned int 
  6424 ;;  flatPieces      2   52[COMRAM] unsigned int 
  6425 ;;  roundPieces     2   50[COMRAM] unsigned int 
  6426 ;;  day             2   48[COMRAM] unsigned int 
  6427 ;;  month           2   46[COMRAM] unsigned int 
  6428 ;;  year            2   44[COMRAM] unsigned int 
  6429 ;;  keypress3       1   64[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  2   40[COMRAM] unsigned int 
  6432 ;; Registers used:
  6433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;Total ram usage:       41 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    3
  6446 ;; This function calls:
  6447 ;;		___lwdiv
  6448 ;;		___lwmod
  6449 ;;		___wmul
  6450 ;;		_lcdInst
  6451 ;;		_printf
  6452 ;;		_readEEPROM
  6453 ;; This function is called by:
  6454 ;;		_viewLogs
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text6
  6459  00CFB2                     __ptext6:
  6460                           	opt stack 0
  6461  00CFB2                     _displayLogs:
  6462                           	opt stack 25
  6463                           
  6464                           ;standbyMode.c: 915: unsigned int n = (logNumber-1)*35;
  6465                           
  6466                           ;incstack = 0
  6467  00CFB2  0EFF               	movlw	255
  6468  00CFB4  2429               	addwf	displayLogs@logNumber,w,c
  6469  00CFB6  6E01               	movwf	___wmul@multiplier,c
  6470  00CFB8  0EFF               	movlw	255
  6471  00CFBA  202A               	addwfc	displayLogs@logNumber+1,w,c
  6472  00CFBC  6E02               	movwf	___wmul@multiplier+1,c
  6473  00CFBE  0E00               	movlw	0
  6474  00CFC0  6E04               	movwf	___wmul@multiplicand+1,c
  6475  00CFC2  0E23               	movlw	35
  6476  00CFC4  6E03               	movwf	___wmul@multiplicand,c
  6477  00CFC6  EC2E  F057         	call	___wmul	;wreg free
  6478  00CFCA  C001  F050         	movff	?___wmul,displayLogs@n
  6479  00CFCE  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6480                           
  6481                           ;standbyMode.c: 916: unsigned int year = readEEPROM(n);
  6482  00CFD2  5050               	movf	displayLogs@n,w,c
  6483  00CFD4  ECE6  F056         	call	_readEEPROM
  6484  00CFD8  6E2B               	movwf	??_displayLogs& (0+255),c
  6485  00CFDA  502B               	movf	??_displayLogs,w,c
  6486  00CFDC  6E2D               	movwf	displayLogs@year,c
  6487  00CFDE  6A2E               	clrf	displayLogs@year+1,c
  6488                           
  6489                           ;standbyMode.c: 917: unsigned int month = readEEPROM(1+n);
  6490  00CFE0  2850               	incf	displayLogs@n,w,c
  6491  00CFE2  ECE6  F056         	call	_readEEPROM
  6492  00CFE6  6E2B               	movwf	??_displayLogs& (0+255),c
  6493  00CFE8  502B               	movf	??_displayLogs,w,c
  6494  00CFEA  6E2F               	movwf	displayLogs@month,c
  6495  00CFEC  6A30               	clrf	displayLogs@month+1,c
  6496                           
  6497                           ;standbyMode.c: 918: unsigned int day = readEEPROM(2+n);
  6498  00CFEE  5050               	movf	displayLogs@n,w,c
  6499  00CFF0  0F02               	addlw	2
  6500  00CFF2  ECE6  F056         	call	_readEEPROM
  6501  00CFF6  6E2B               	movwf	??_displayLogs& (0+255),c
  6502  00CFF8  502B               	movf	??_displayLogs,w,c
  6503  00CFFA  6E31               	movwf	displayLogs@day,c
  6504  00CFFC  6A32               	clrf	displayLogs@day+1,c
  6505                           
  6506                           ;standbyMode.c: 919: unsigned int operationTime = readEEPROM(3+n);
  6507  00CFFE  5050               	movf	displayLogs@n,w,c
  6508  00D000  0F03               	addlw	3
  6509  00D002  ECE6  F056         	call	_readEEPROM
  6510  00D006  6E2B               	movwf	??_displayLogs& (0+255),c
  6511  00D008  502B               	movf	??_displayLogs,w,c
  6512  00D00A  6E42               	movwf	displayLogs@operationTime,c
  6513  00D00C  6A43               	clrf	displayLogs@operationTime+1,c
  6514                           
  6515                           ;standbyMode.c: 920: unsigned int roundPieces = readEEPROM(4+n);
  6516  00D00E  5050               	movf	displayLogs@n,w,c
  6517  00D010  0F04               	addlw	4
  6518  00D012  ECE6  F056         	call	_readEEPROM
  6519  00D016  6E2B               	movwf	??_displayLogs& (0+255),c
  6520  00D018  502B               	movf	??_displayLogs,w,c
  6521  00D01A  6E33               	movwf	displayLogs@roundPieces,c
  6522  00D01C  6A34               	clrf	displayLogs@roundPieces+1,c
  6523                           
  6524                           ;standbyMode.c: 921: unsigned int flatPieces = readEEPROM(5+n);
  6525  00D01E  5050               	movf	displayLogs@n,w,c
  6526  00D020  0F05               	addlw	5
  6527  00D022  ECE6  F056         	call	_readEEPROM
  6528  00D026  6E2B               	movwf	??_displayLogs& (0+255),c
  6529  00D028  502B               	movf	??_displayLogs,w,c
  6530  00D02A  6E35               	movwf	displayLogs@flatPieces,c
  6531  00D02C  6A36               	clrf	displayLogs@flatPieces+1,c
  6532                           
  6533                           ;standbyMode.c: 922: unsigned int longPieces = readEEPROM(6+n);
  6534  00D02E  5050               	movf	displayLogs@n,w,c
  6535  00D030  0F06               	addlw	6
  6536  00D032  ECE6  F056         	call	_readEEPROM
  6537  00D036  6E2B               	movwf	??_displayLogs& (0+255),c
  6538  00D038  502B               	movf	??_displayLogs,w,c
  6539  00D03A  6E37               	movwf	displayLogs@longPieces,c
  6540  00D03C  6A38               	clrf	displayLogs@longPieces+1,c
  6541                           
  6542                           ;standbyMode.c: 923: unsigned int markedDrawer1 = readEEPROM(7+n);
  6543  00D03E  5050               	movf	displayLogs@n,w,c
  6544  00D040  0F07               	addlw	7
  6545  00D042  ECE6  F056         	call	_readEEPROM
  6546  00D046  6E2B               	movwf	??_displayLogs& (0+255),c
  6547  00D048  502B               	movf	??_displayLogs,w,c
  6548  00D04A  6E48               	movwf	displayLogs@markedDrawer1,c
  6549  00D04C  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6550                           
  6551                           ;standbyMode.c: 924: unsigned int markedDrawer2 = readEEPROM(8+n);
  6552  00D04E  5050               	movf	displayLogs@n,w,c
  6553  00D050  0F08               	addlw	8
  6554  00D052  ECE6  F056         	call	_readEEPROM
  6555  00D056  6E2B               	movwf	??_displayLogs& (0+255),c
  6556  00D058  502B               	movf	??_displayLogs,w,c
  6557  00D05A  6E4A               	movwf	displayLogs@markedDrawer2,c
  6558  00D05C  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6559                           
  6560                           ;standbyMode.c: 925: unsigned int markedDrawer3 = readEEPROM(9+n);
  6561  00D05E  5050               	movf	displayLogs@n,w,c
  6562  00D060  0F09               	addlw	9
  6563  00D062  ECE6  F056         	call	_readEEPROM
  6564  00D066  6E2B               	movwf	??_displayLogs& (0+255),c
  6565  00D068  502B               	movf	??_displayLogs,w,c
  6566  00D06A  6E4C               	movwf	displayLogs@markedDrawer3,c
  6567  00D06C  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6568                           
  6569                           ;standbyMode.c: 926: unsigned int markedDrawer4 = readEEPROM(10+n);
  6570  00D06E  5050               	movf	displayLogs@n,w,c
  6571  00D070  0F0A               	addlw	10
  6572  00D072  ECE6  F056         	call	_readEEPROM
  6573  00D076  6E2B               	movwf	??_displayLogs& (0+255),c
  6574  00D078  502B               	movf	??_displayLogs,w,c
  6575  00D07A  6E4E               	movwf	displayLogs@markedDrawer4,c
  6576  00D07C  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6577                           
  6578                           ;standbyMode.c: 927: unsigned int drawerNumber = readEEPROM(11+n);
  6579  00D07E  5050               	movf	displayLogs@n,w,c
  6580  00D080  0F0B               	addlw	11
  6581  00D082  ECE6  F056         	call	_readEEPROM
  6582  00D086  6E2B               	movwf	??_displayLogs& (0+255),c
  6583  00D088  502B               	movf	??_displayLogs,w,c
  6584  00D08A  6E44               	movwf	displayLogs@drawerNumber,c
  6585  00D08C  6A45               	clrf	displayLogs@drawerNumber+1,c
  6586                           
  6587                           ;standbyMode.c: 928: unsigned int dietType = readEEPROM(12+n);
  6588  00D08E  5050               	movf	displayLogs@n,w,c
  6589  00D090  0F0C               	addlw	12
  6590  00D092  ECE6  F056         	call	_readEEPROM
  6591  00D096  6E2B               	movwf	??_displayLogs& (0+255),c
  6592  00D098  502B               	movf	??_displayLogs,w,c
  6593  00D09A  6E3D               	movwf	displayLogs@dietType,c
  6594  00D09C  6A3E               	clrf	displayLogs@dietType+1,c
  6595                           
  6596                           ;standbyMode.c: 929: unsigned int foodType = readEEPROM(13+n);
  6597  00D09E  5050               	movf	displayLogs@n,w,c
  6598  00D0A0  0F0D               	addlw	13
  6599  00D0A2  ECE6  F056         	call	_readEEPROM
  6600  00D0A6  6E2B               	movwf	??_displayLogs& (0+255),c
  6601  00D0A8  502B               	movf	??_displayLogs,w,c
  6602  00D0AA  6E3F               	movwf	displayLogs@foodType,c
  6603  00D0AC  6A40               	clrf	displayLogs@foodType+1,c
  6604                           
  6605                           ;standbyMode.c: 930: unsigned int i = 0;
  6606  00D0AE  0E00               	movlw	0
  6607  00D0B0  6E47               	movwf	displayLogs@i+1,c
  6608  00D0B2  0E00               	movlw	0
  6609  00D0B4  6E46               	movwf	displayLogs@i,c
  6610                           
  6611                           ;standbyMode.c: 932: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6612  00D0B6  0E01               	movlw	1
  6613  00D0B8  ECDC  F056         	call	_lcdInst
  6614  00D0BC  0EC3               	movlw	195
  6615  00D0BE  6E2B               	movwf	??_displayLogs& (0+255),c
  6616  00D0C0  0ECD               	movlw	205
  6617  00D0C2                     u12197:
  6618  00D0C2  2EE8               	decfsz	wreg,f,c
  6619  00D0C4  D7FE               	bra	u12197
  6620  00D0C6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6621  00D0C8  D7FC               	bra	u12197
  6622  00D0CA  F000               	nop	
  6623                           
  6624                           ;standbyMode.c: 933: printf("Date:");
  6625  00D0CC  0EB2               	movlw	low STR_49
  6626  00D0CE  6E0D               	movwf	printf@f,c
  6627  00D0D0  0EFC               	movlw	high STR_49
  6628  00D0D2  6E0E               	movwf	printf@f+1,c
  6629  00D0D4  EC47  F063         	call	_printf	;wreg free
  6630                           
  6631                           ;standbyMode.c: 934: lcdInst(0xC0);;
  6632  00D0D8  0EC0               	movlw	192
  6633  00D0DA  ECDC  F056         	call	_lcdInst
  6634                           
  6635                           ;standbyMode.c: 935: printf("%02i/%02i/%02i", year, month, day);
  6636  00D0DE  0E39               	movlw	low STR_50
  6637  00D0E0  6E0D               	movwf	printf@f,c
  6638  00D0E2  0EFB               	movlw	high STR_50
  6639  00D0E4  6E0E               	movwf	printf@f+1,c
  6640  00D0E6  C02D  F00F         	movff	displayLogs@year,?_printf+2
  6641  00D0EA  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  6642  00D0EE  C02F  F011         	movff	displayLogs@month,?_printf+4
  6643  00D0F2  C030  F012         	movff	displayLogs@month+1,?_printf+5
  6644  00D0F6  C031  F013         	movff	displayLogs@day,?_printf+6
  6645  00D0FA  C032  F014         	movff	displayLogs@day+1,?_printf+7
  6646  00D0FE  EC47  F063         	call	_printf	;wreg free
  6647                           
  6648                           ;standbyMode.c: 936: _delay((unsigned long)((700)*(40000000/4000.0)));
  6649  00D102  0E24               	movlw	36
  6650  00D104  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6651  00D106  0E83               	movlw	131
  6652  00D108  6E2B               	movwf	??_displayLogs& (0+255),c
  6653  00D10A  0ECF               	movlw	207
  6654  00D10C                     u12207:
  6655  00D10C  2EE8               	decfsz	wreg,f,c
  6656  00D10E  D7FE               	bra	u12207
  6657  00D110  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6658  00D112  D7FC               	bra	u12207
  6659  00D114  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6660  00D116  D7FA               	bra	u12207
  6661  00D118  F000               	nop	
  6662  00D11A                     
  6663                           ;standbyMode.c: 938: continue;
  6664  00D11A  A281               	btfss	3969,1,c	;volatile
  6665  00D11C  D7FE               	goto	l705
  6666                           
  6667                           ;standbyMode.c: 939: }
  6668                           ;standbyMode.c: 941: unsigned int minutes = operationTime/60;
  6669  00D11E  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  6670  00D122  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  6671  00D126  0E00               	movlw	0
  6672  00D128  6E04               	movwf	___lwdiv@divisor+1,c
  6673  00D12A  0E3C               	movlw	60
  6674  00D12C  6E03               	movwf	___lwdiv@divisor,c
  6675  00D12E  ECBC  F057         	call	___lwdiv	;wreg free
  6676  00D132  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  6677  00D136  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  6678                           
  6679                           ;standbyMode.c: 942: unsigned int seconds = operationTime%60;
  6680  00D13A  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  6681  00D13E  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  6682  00D142  0E00               	movlw	0
  6683  00D144  6E0B               	movwf	___lwmod@divisor+1,c
  6684  00D146  0E3C               	movlw	60
  6685  00D148  6E0A               	movwf	___lwmod@divisor,c
  6686  00D14A  EC75  F057         	call	___lwmod	;wreg free
  6687  00D14E  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  6688  00D152  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  6689                           
  6690                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6691  00D156  0E01               	movlw	1
  6692  00D158  ECDC  F056         	call	_lcdInst
  6693  00D15C  0EC3               	movlw	195
  6694  00D15E  6E2B               	movwf	??_displayLogs& (0+255),c
  6695  00D160  0ECD               	movlw	205
  6696  00D162                     u12217:
  6697  00D162  2EE8               	decfsz	wreg,f,c
  6698  00D164  D7FE               	bra	u12217
  6699  00D166  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6700  00D168  D7FC               	bra	u12217
  6701  00D16A  F000               	nop	
  6702                           
  6703                           ;standbyMode.c: 944: printf("Operation time:");
  6704  00D16C  0E7E               	movlw	low STR_51
  6705  00D16E  6E0D               	movwf	printf@f,c
  6706  00D170  0EFA               	movlw	high STR_51
  6707  00D172  6E0E               	movwf	printf@f+1,c
  6708  00D174  EC47  F063         	call	_printf	;wreg free
  6709                           
  6710                           ;standbyMode.c: 945: lcdInst(0xC0);;
  6711  00D178  0EC0               	movlw	192
  6712  00D17A  ECDC  F056         	call	_lcdInst
  6713                           
  6714                           ;standbyMode.c: 946: printf("%i:%02i", minutes, seconds);
  6715  00D17E  0E8C               	movlw	low STR_52
  6716  00D180  6E0D               	movwf	printf@f,c
  6717  00D182  0EFC               	movlw	high STR_52
  6718  00D184  6E0E               	movwf	printf@f+1,c
  6719  00D186  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  6720  00D18A  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  6721  00D18E  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  6722  00D192  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  6723  00D196  EC47  F063         	call	_printf	;wreg free
  6724                           
  6725                           ;standbyMode.c: 947: _delay((unsigned long)((700)*(40000000/4000.0)));
  6726  00D19A  0E24               	movlw	36
  6727  00D19C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6728  00D19E  0E83               	movlw	131
  6729  00D1A0  6E2B               	movwf	??_displayLogs& (0+255),c
  6730  00D1A2  0ECF               	movlw	207
  6731  00D1A4                     u12227:
  6732  00D1A4  2EE8               	decfsz	wreg,f,c
  6733  00D1A6  D7FE               	bra	u12227
  6734  00D1A8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6735  00D1AA  D7FC               	bra	u12227
  6736  00D1AC  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6737  00D1AE  D7FA               	bra	u12227
  6738  00D1B0  F000               	nop	
  6739  00D1B2                     
  6740                           ;standbyMode.c: 950: continue;
  6741  00D1B2  A281               	btfss	3969,1,c	;volatile
  6742  00D1B4  D7FE               	goto	l708
  6743                           
  6744                           ;standbyMode.c: 951: }
  6745                           ;standbyMode.c: 953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6746  00D1B6  0E01               	movlw	1
  6747  00D1B8  ECDC  F056         	call	_lcdInst
  6748  00D1BC  0EC3               	movlw	195
  6749  00D1BE  6E2B               	movwf	??_displayLogs& (0+255),c
  6750  00D1C0  0ECD               	movlw	205
  6751  00D1C2                     u12237:
  6752  00D1C2  2EE8               	decfsz	wreg,f,c
  6753  00D1C4  D7FE               	bra	u12237
  6754  00D1C6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6755  00D1C8  D7FC               	bra	u12237
  6756  00D1CA  F000               	nop	
  6757                           
  6758                           ;standbyMode.c: 954: printf("Marked drawers:");
  6759  00D1CC  0E8E               	movlw	low STR_53
  6760  00D1CE  6E0D               	movwf	printf@f,c
  6761  00D1D0  0EFA               	movlw	high STR_53
  6762  00D1D2  6E0E               	movwf	printf@f+1,c
  6763  00D1D4  EC47  F063         	call	_printf	;wreg free
  6764                           
  6765                           ;standbyMode.c: 955: lcdInst(0xC0);;
  6766  00D1D8  0EC0               	movlw	192
  6767  00D1DA  ECDC  F056         	call	_lcdInst
  6768                           
  6769                           ;standbyMode.c: 957: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  6770  00D1DE  504E               	movf	displayLogs@markedDrawer4,w,c
  6771  00D1E0  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6772  00D1E2  A4D8               	btfss	status,2,c
  6773  00D1E4  D01E               	goto	l710
  6774  00D1E6  504C               	movf	displayLogs@markedDrawer3,w,c
  6775  00D1E8  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6776  00D1EA  A4D8               	btfss	status,2,c
  6777  00D1EC  D01A               	goto	l710
  6778  00D1EE  504A               	movf	displayLogs@markedDrawer2,w,c
  6779  00D1F0  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  6780  00D1F2  A4D8               	btfss	status,2,c
  6781  00D1F4  D016               	goto	l710
  6782                           
  6783                           ;standbyMode.c: 958: printf("%i", markedDrawer1);
  6784  00D1F6  0E36               	movlw	low (STR_57+12)
  6785  00D1F8  6E0D               	movwf	printf@f,c
  6786  00D1FA  0EFB               	movlw	high (STR_57+12)
  6787  00D1FC  6E0E               	movwf	printf@f+1,c
  6788  00D1FE  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6789  00D202  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6790  00D206  EC47  F063         	call	_printf	;wreg free
  6791                           
  6792                           ;standbyMode.c: 959: _delay((unsigned long)((700)*(40000000/4000.0)));
  6793  00D20A  0E24               	movlw	36
  6794  00D20C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6795  00D20E  0E83               	movlw	131
  6796  00D210  6E2B               	movwf	??_displayLogs& (0+255),c
  6797  00D212  0ECF               	movlw	207
  6798  00D214                     u12247:
  6799  00D214  2EE8               	decfsz	wreg,f,c
  6800  00D216  D7FE               	bra	u12247
  6801  00D218  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6802  00D21A  D7FC               	bra	u12247
  6803  00D21C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6804  00D21E  D7FA               	bra	u12247
  6805  00D220  D065               	goto	L19
  6806  00D222                     l710:
  6807                           
  6808                           ;standbyMode.c: 962: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6809  00D222  504E               	movf	displayLogs@markedDrawer4,w,c
  6810  00D224  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6811  00D226  A4D8               	btfss	status,2,c
  6812  00D228  D01E               	goto	l712
  6813  00D22A  504C               	movf	displayLogs@markedDrawer3,w,c
  6814  00D22C  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6815  00D22E  A4D8               	btfss	status,2,c
  6816  00D230  D01A               	goto	l712
  6817                           
  6818                           ;standbyMode.c: 963: printf("%i, %i", markedDrawer1, markedDrawer2);
  6819  00D232  0E32               	movlw	low (STR_57+8)
  6820  00D234  6E0D               	movwf	printf@f,c
  6821  00D236  0EFB               	movlw	high (STR_57+8)
  6822  00D238  6E0E               	movwf	printf@f+1,c
  6823  00D23A  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6824  00D23E  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6825  00D242  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6826  00D246  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6827  00D24A  EC47  F063         	call	_printf	;wreg free
  6828                           
  6829                           ;standbyMode.c: 964: _delay((unsigned long)((700)*(40000000/4000.0)));
  6830  00D24E  0E24               	movlw	36
  6831  00D250  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6832  00D252  0E83               	movlw	131
  6833  00D254  6E2B               	movwf	??_displayLogs& (0+255),c
  6834  00D256  0ECF               	movlw	207
  6835  00D258                     u12257:
  6836  00D258  2EE8               	decfsz	wreg,f,c
  6837  00D25A  D7FE               	bra	u12257
  6838  00D25C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6839  00D25E  D7FC               	bra	u12257
  6840  00D260  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6841  00D262  D7FA               	bra	u12257
  6842  00D264  D043               	goto	L19
  6843  00D266                     l712:
  6844                           
  6845                           ;standbyMode.c: 967: else if (markedDrawer4 == 0){
  6846  00D266  504E               	movf	displayLogs@markedDrawer4,w,c
  6847  00D268  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6848  00D26A  A4D8               	btfss	status,2,c
  6849  00D26C  D01E               	goto	l714
  6850                           
  6851                           ;standbyMode.c: 968: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6852  00D26E  0E2E               	movlw	low (STR_57+4)
  6853  00D270  6E0D               	movwf	printf@f,c
  6854  00D272  0EFB               	movlw	high (STR_57+4)
  6855  00D274  6E0E               	movwf	printf@f+1,c
  6856  00D276  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6857  00D27A  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6858  00D27E  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6859  00D282  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6860  00D286  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6861  00D28A  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6862  00D28E  EC47  F063         	call	_printf	;wreg free
  6863                           
  6864                           ;standbyMode.c: 969: _delay((unsigned long)((700)*(40000000/4000.0)));
  6865  00D292  0E24               	movlw	36
  6866  00D294  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6867  00D296  0E83               	movlw	131
  6868  00D298  6E2B               	movwf	??_displayLogs& (0+255),c
  6869  00D29A  0ECF               	movlw	207
  6870  00D29C                     u12267:
  6871  00D29C  2EE8               	decfsz	wreg,f,c
  6872  00D29E  D7FE               	bra	u12267
  6873  00D2A0  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6874  00D2A2  D7FC               	bra	u12267
  6875  00D2A4  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6876  00D2A6  D7FA               	bra	u12267
  6877  00D2A8  D021               	goto	L19
  6878  00D2AA                     l714:
  6879                           
  6880                           ;standbyMode.c: 972: else {
  6881                           ;standbyMode.c: 973: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  6882  00D2AA  0E2A               	movlw	low STR_57
  6883  00D2AC  6E0D               	movwf	printf@f,c
  6884  00D2AE  0EFB               	movlw	high STR_57
  6885  00D2B0  6E0E               	movwf	printf@f+1,c
  6886  00D2B2  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6887  00D2B6  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6888  00D2BA  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6889  00D2BE  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6890  00D2C2  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6891  00D2C6  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6892  00D2CA  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6893  00D2CE  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6894  00D2D2  EC47  F063         	call	_printf	;wreg free
  6895                           
  6896                           ;standbyMode.c: 974: _delay((unsigned long)((700)*(40000000/4000.0)));
  6897  00D2D6  0E24               	movlw	36
  6898  00D2D8  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6899  00D2DA  0E83               	movlw	131
  6900  00D2DC  6E2B               	movwf	??_displayLogs& (0+255),c
  6901  00D2DE  0ECF               	movlw	207
  6902  00D2E0                     u12277:
  6903  00D2E0  2EE8               	decfsz	wreg,f,c
  6904  00D2E2  D7FE               	bra	u12277
  6905  00D2E4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6906  00D2E6  D7FC               	bra	u12277
  6907  00D2E8  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6908  00D2EA  D7FA               	bra	u12277
  6909  00D2EC                     L19:
  6910  00D2EC  F000               	nop	
  6911  00D2EE                     
  6912                           ;standbyMode.c: 978: continue;
  6913                           
  6914                           ;standbyMode.c: 975: }
  6915                           ;standbyMode.c: 977: while(PORTBbits.RB1 == 0){
  6916  00D2EE  A281               	btfss	3969,1,c	;volatile
  6917  00D2F0  D7FE               	goto	l715
  6918                           
  6919                           ;standbyMode.c: 979: }
  6920                           ;standbyMode.c: 981: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6921  00D2F2  0E01               	movlw	1
  6922  00D2F4  ECDC  F056         	call	_lcdInst
  6923  00D2F8  0EC3               	movlw	195
  6924  00D2FA  6E2B               	movwf	??_displayLogs& (0+255),c
  6925  00D2FC  0ECD               	movlw	205
  6926  00D2FE                     u12287:
  6927  00D2FE  2EE8               	decfsz	wreg,f,c
  6928  00D300  D7FE               	bra	u12287
  6929  00D302  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6930  00D304  D7FC               	bra	u12287
  6931  00D306  F000               	nop	
  6932                           
  6933                           ;standbyMode.c: 982: printf("Remaining pieces:");
  6934  00D308  0EB4               	movlw	low STR_58
  6935  00D30A  6E0D               	movwf	printf@f,c
  6936  00D30C  0EF9               	movlw	high STR_58
  6937  00D30E  6E0E               	movwf	printf@f+1,c
  6938  00D310  EC47  F063         	call	_printf	;wreg free
  6939                           
  6940                           ;standbyMode.c: 983: lcdInst(0xC0);;
  6941  00D314  0EC0               	movlw	192
  6942  00D316  ECDC  F056         	call	_lcdInst
  6943                           
  6944                           ;standbyMode.c: 984: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  6945  00D31A  0E1B               	movlw	low STR_59
  6946  00D31C  6E0D               	movwf	printf@f,c
  6947  00D31E  0EFA               	movlw	high STR_59
  6948  00D320  6E0E               	movwf	printf@f+1,c
  6949  00D322  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  6950  00D326  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  6951  00D32A  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  6952  00D32E  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  6953  00D332  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  6954  00D336  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  6955  00D33A  EC47  F063         	call	_printf	;wreg free
  6956                           
  6957                           ;standbyMode.c: 985: _delay((unsigned long)((700)*(40000000/4000.0)));
  6958  00D33E  0E24               	movlw	36
  6959  00D340  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6960  00D342  0E83               	movlw	131
  6961  00D344  6E2B               	movwf	??_displayLogs& (0+255),c
  6962  00D346  0ECF               	movlw	207
  6963  00D348                     u12297:
  6964  00D348  2EE8               	decfsz	wreg,f,c
  6965  00D34A  D7FE               	bra	u12297
  6966  00D34C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6967  00D34E  D7FC               	bra	u12297
  6968  00D350  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6969  00D352  D7FA               	bra	u12297
  6970  00D354  F000               	nop	
  6971  00D356                     
  6972                           ;standbyMode.c: 988: continue;
  6973  00D356  A281               	btfss	3969,1,c	;volatile
  6974  00D358  D7FE               	goto	l720
  6975                           
  6976                           ;standbyMode.c: 989: }
  6977                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6978  00D35A  0E01               	movlw	1
  6979  00D35C  ECDC  F056         	call	_lcdInst
  6980  00D360  0EC3               	movlw	195
  6981  00D362  6E2B               	movwf	??_displayLogs& (0+255),c
  6982  00D364  0ECD               	movlw	205
  6983  00D366                     u12307:
  6984  00D366  2EE8               	decfsz	wreg,f,c
  6985  00D368  D7FE               	bra	u12307
  6986  00D36A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6987  00D36C  D7FC               	bra	u12307
  6988  00D36E  F000               	nop	
  6989                           
  6990                           ;standbyMode.c: 992: printf("Input Summary:");
  6991  00D370  0E0C               	movlw	low STR_60
  6992  00D372  6E0D               	movwf	printf@f,c
  6993  00D374  0EFB               	movlw	high STR_60
  6994  00D376  6E0E               	movwf	printf@f+1,c
  6995  00D378  EC47  F063         	call	_printf	;wreg free
  6996                           
  6997                           ;standbyMode.c: 993: _delay((unsigned long)((700)*(40000000/4000.0)));
  6998  00D37C  0E24               	movlw	36
  6999  00D37E  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7000  00D380  0E83               	movlw	131
  7001  00D382  6E2B               	movwf	??_displayLogs& (0+255),c
  7002  00D384  0ECF               	movlw	207
  7003  00D386                     u12317:
  7004  00D386  2EE8               	decfsz	wreg,f,c
  7005  00D388  D7FE               	bra	u12317
  7006  00D38A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7007  00D38C  D7FC               	bra	u12317
  7008  00D38E  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7009  00D390  D7FA               	bra	u12317
  7010  00D392  F000               	nop	
  7011  00D394                     
  7012                           ;standbyMode.c: 996: continue;
  7013  00D394  A281               	btfss	3969,1,c	;volatile
  7014  00D396  D7FE               	goto	l723
  7015                           
  7016                           ;standbyMode.c: 997: }
  7017                           ;standbyMode.c: 999: for (i=0; i<8; i++){
  7018  00D398  0E00               	movlw	0
  7019  00D39A  6E47               	movwf	displayLogs@i+1,c
  7020  00D39C  0E00               	movlw	0
  7021  00D39E  6E46               	movwf	displayLogs@i,c
  7022  00D3A0  5047               	movf	displayLogs@i+1,w,c
  7023  00D3A2  E105               	bnz	u7500
  7024  00D3A4  0E08               	movlw	8
  7025  00D3A6  5C46               	subwf	displayLogs@i,w,c
  7026  00D3A8  B0D8               	btfsc	status,0,c
  7027  00D3AA  D089               	goto	u7530
  7028  00D3AC  D001               	goto	l725
  7029  00D3AE                     u7500:
  7030  00D3AE  D087               	goto	u7530
  7031  00D3B0                     l725:
  7032                           
  7033                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7034  00D3B0  0E01               	movlw	1
  7035  00D3B2  ECDC  F056         	call	_lcdInst
  7036  00D3B6  0EC3               	movlw	195
  7037  00D3B8  6E2B               	movwf	??_displayLogs& (0+255),c
  7038  00D3BA  0ECD               	movlw	205
  7039  00D3BC                     u12327:
  7040  00D3BC  2EE8               	decfsz	wreg,f,c
  7041  00D3BE  D7FE               	bra	u12327
  7042  00D3C0  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7043  00D3C2  D7FC               	bra	u12327
  7044  00D3C4  F000               	nop	
  7045                           
  7046                           ;standbyMode.c: 1001: n = (logNumber-1)*35 + 3*i;
  7047  00D3C6  0EFF               	movlw	255
  7048  00D3C8  2429               	addwf	displayLogs@logNumber,w,c
  7049  00D3CA  6E01               	movwf	___wmul@multiplier,c
  7050  00D3CC  0EFF               	movlw	255
  7051  00D3CE  202A               	addwfc	displayLogs@logNumber+1,w,c
  7052  00D3D0  6E02               	movwf	___wmul@multiplier+1,c
  7053  00D3D2  0E00               	movlw	0
  7054  00D3D4  6E04               	movwf	___wmul@multiplicand+1,c
  7055  00D3D6  0E23               	movlw	35
  7056  00D3D8  6E03               	movwf	___wmul@multiplicand,c
  7057  00D3DA  EC2E  F057         	call	___wmul	;wreg free
  7058  00D3DE  C001  F02B         	movff	?___wmul,??_displayLogs
  7059  00D3E2  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  7060  00D3E6  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  7061  00D3EA  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  7062  00D3EE  0E00               	movlw	0
  7063  00D3F0  6E04               	movwf	___wmul@multiplicand+1,c
  7064  00D3F2  0E03               	movlw	3
  7065  00D3F4  6E03               	movwf	___wmul@multiplicand,c
  7066  00D3F6  EC2E  F057         	call	___wmul	;wreg free
  7067  00D3FA  5001               	movf	?___wmul,w,c
  7068  00D3FC  242B               	addwf	??_displayLogs,w,c
  7069  00D3FE  6E50               	movwf	displayLogs@n,c
  7070  00D400  5002               	movf	?___wmul+1,w,c
  7071  00D402  202C               	addwfc	??_displayLogs+1,w,c
  7072  00D404  6E51               	movwf	displayLogs@n+1,c
  7073                           
  7074                           ;standbyMode.c: 1002: drawerNumber = readEEPROM(11+n);
  7075  00D406  5050               	movf	displayLogs@n,w,c
  7076  00D408  0F0B               	addlw	11
  7077  00D40A  ECE6  F056         	call	_readEEPROM
  7078  00D40E  6E2B               	movwf	??_displayLogs& (0+255),c
  7079  00D410  502B               	movf	??_displayLogs,w,c
  7080  00D412  6E44               	movwf	displayLogs@drawerNumber,c
  7081  00D414  6A45               	clrf	displayLogs@drawerNumber+1,c
  7082                           
  7083                           ;standbyMode.c: 1003: dietType = readEEPROM(12+n);
  7084  00D416  5050               	movf	displayLogs@n,w,c
  7085  00D418  0F0C               	addlw	12
  7086  00D41A  ECE6  F056         	call	_readEEPROM
  7087  00D41E  6E2B               	movwf	??_displayLogs& (0+255),c
  7088  00D420  502B               	movf	??_displayLogs,w,c
  7089  00D422  6E3D               	movwf	displayLogs@dietType,c
  7090  00D424  6A3E               	clrf	displayLogs@dietType+1,c
  7091                           
  7092                           ;standbyMode.c: 1004: foodType = readEEPROM(13+n);
  7093  00D426  5050               	movf	displayLogs@n,w,c
  7094  00D428  0F0D               	addlw	13
  7095  00D42A  ECE6  F056         	call	_readEEPROM
  7096  00D42E  6E2B               	movwf	??_displayLogs& (0+255),c
  7097  00D430  502B               	movf	??_displayLogs,w,c
  7098  00D432  6E3F               	movwf	displayLogs@foodType,c
  7099  00D434  6A40               	clrf	displayLogs@foodType+1,c
  7100                           
  7101                           ;standbyMode.c: 1005: if (drawerNumber != 0){
  7102  00D436  5044               	movf	displayLogs@drawerNumber,w,c
  7103  00D438  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  7104  00D43A  B4D8               	btfsc	status,2,c
  7105  00D43C  D03B               	goto	u7520
  7106                           
  7107                           ;standbyMode.c: 1006: printf("Drawer %i:", drawerNumber);
  7108  00D43E  0E2A               	movlw	low STR_61
  7109  00D440  6E0D               	movwf	printf@f,c
  7110  00D442  0EFC               	movlw	high STR_61
  7111  00D444  6E0E               	movwf	printf@f+1,c
  7112  00D446  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  7113  00D44A  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  7114  00D44E  EC47  F063         	call	_printf	;wreg free
  7115                           
  7116                           ;standbyMode.c: 1007: lcdInst(0xC0);;
  7117  00D452  0EC0               	movlw	192
  7118  00D454  ECDC  F056         	call	_lcdInst
  7119                           
  7120                           ;standbyMode.c: 1008: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  7121  00D458  0ED6               	movlw	low STR_62
  7122  00D45A  6E0D               	movwf	printf@f,c
  7123  00D45C  0EFC               	movlw	high STR_62
  7124  00D45E  6E0E               	movwf	printf@f+1,c
  7125  00D460  90D8               	bcf	status,0,c
  7126  00D462  343D               	rlcf	displayLogs@dietType,w,c
  7127  00D464  6ED9               	movwf	fsr2l,c
  7128  00D466  343E               	rlcf	displayLogs@dietType+1,w,c
  7129  00D468  6EDA               	movwf	fsr2h,c
  7130  00D46A  0E40               	movlw	low _inputs
  7131  00D46C  26D9               	addwf	fsr2l,f,c
  7132  00D46E  0E02               	movlw	high _inputs
  7133  00D470  22DA               	addwfc	fsr2h,f,c
  7134  00D472  CFDE F00F          	movff	postinc2,?_printf+2
  7135  00D476  CFDD F010          	movff	postdec2,?_printf+3
  7136  00D47A  90D8               	bcf	status,0,c
  7137  00D47C  343F               	rlcf	displayLogs@foodType,w,c
  7138  00D47E  6ED9               	movwf	fsr2l,c
  7139  00D480  3440               	rlcf	displayLogs@foodType+1,w,c
  7140  00D482  6EDA               	movwf	fsr2h,c
  7141  00D484  0E64               	movlw	low _foodInputs
  7142  00D486  26D9               	addwf	fsr2l,f,c
  7143  00D488  0E02               	movlw	high _foodInputs
  7144  00D48A  22DA               	addwfc	fsr2h,f,c
  7145  00D48C  CFDE F011          	movff	postinc2,?_printf+4
  7146  00D490  CFDD F012          	movff	postdec2,?_printf+5
  7147  00D494  EC47  F063         	call	_printf	;wreg free
  7148                           
  7149                           ;standbyMode.c: 1009: _delay((unsigned long)((700)*(40000000/4000.0)));
  7150  00D498  0E24               	movlw	36
  7151  00D49A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7152  00D49C  0E83               	movlw	131
  7153  00D49E  6E2B               	movwf	??_displayLogs& (0+255),c
  7154  00D4A0  0ECF               	movlw	207
  7155  00D4A2                     u12337:
  7156  00D4A2  2EE8               	decfsz	wreg,f,c
  7157  00D4A4  D7FE               	bra	u12337
  7158  00D4A6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7159  00D4A8  D7FC               	bra	u12337
  7160  00D4AA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7161  00D4AC  D7FA               	bra	u12337
  7162  00D4AE  F000               	nop	
  7163  00D4B0                     
  7164                           ;standbyMode.c: 1011: continue;
  7165  00D4B0  A281               	btfss	3969,1,c	;volatile
  7166  00D4B2  D7FE               	goto	l729
  7167  00D4B4                     u7520:
  7168  00D4B4  4A46               	infsnz	displayLogs@i,f,c
  7169  00D4B6  2A47               	incf	displayLogs@i+1,f,c
  7170  00D4B8  5047               	movf	displayLogs@i+1,w,c
  7171  00D4BA  E101               	bnz	l6454
  7172  00D4BC  D773               	goto	L20
  7173  00D4BE                     u7530:
  7174  00D4BE                     l6454:
  7175                           
  7176                           ;standbyMode.c: 1012: }
  7177                           ;standbyMode.c: 1013: }
  7178                           ;standbyMode.c: 1014: }
  7179                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7180  00D4BE  0E01               	movlw	1
  7181  00D4C0  ECDC  F056         	call	_lcdInst
  7182  00D4C4  0EC3               	movlw	195
  7183  00D4C6  6E2B               	movwf	??_displayLogs& (0+255),c
  7184  00D4C8  0ECD               	movlw	205
  7185  00D4CA                     u12347:
  7186  00D4CA  2EE8               	decfsz	wreg,f,c
  7187  00D4CC  D7FE               	bra	u12347
  7188  00D4CE  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7189  00D4D0  D7FC               	bra	u12347
  7190  00D4D2  F000               	nop	
  7191                           
  7192                           ;standbyMode.c: 1017: printf("Another log?");
  7193  00D4D4  0EE4               	movlw	low STR_63
  7194  00D4D6  6E0D               	movwf	printf@f,c
  7195  00D4D8  0EFB               	movlw	high STR_63
  7196  00D4DA  6E0E               	movwf	printf@f+1,c
  7197  00D4DC  EC47  F063         	call	_printf	;wreg free
  7198                           
  7199                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  7200  00D4E0  0EC0               	movlw	192
  7201  00D4E2  ECDC  F056         	call	_lcdInst
  7202                           
  7203                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  7204  00D4E6  0ECE               	movlw	low STR_64
  7205  00D4E8  6E0D               	movwf	printf@f,c
  7206  00D4EA  0EFA               	movlw	high STR_64
  7207  00D4EC  6E0E               	movwf	printf@f+1,c
  7208  00D4EE  EC47  F063         	call	_printf	;wreg free
  7209                           
  7210                           ;standbyMode.c: 1020: _delay((unsigned long)((700)*(40000000/4000.0)));
  7211  00D4F2  0E24               	movlw	36
  7212  00D4F4  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7213  00D4F6  0E83               	movlw	131
  7214  00D4F8  6E2B               	movwf	??_displayLogs& (0+255),c
  7215  00D4FA  0ECF               	movlw	207
  7216  00D4FC                     u12357:
  7217  00D4FC  2EE8               	decfsz	wreg,f,c
  7218  00D4FE  D7FE               	bra	u12357
  7219  00D500  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7220  00D502  D7FC               	bra	u12357
  7221  00D504  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7222  00D506  D7FA               	bra	u12357
  7223  00D508  F000               	nop	
  7224  00D50A  A281               	btfss	3969,1,c	;volatile
  7225  00D50C  D7FE               	goto	l732
  7226                           
  7227                           ;standbyMode.c: 1023: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  7228  00D50E  3881               	swapf	3969,w,c	;volatile
  7229  00D510  0B0F               	andlw	15
  7230  00D512  0B0F               	andlw	15
  7231  00D514  6E41               	movwf	displayLogs@keypress3,c
  7232  00D516  B281               	btfsc	3969,1,c	;volatile
  7233  00D518  D7FE               	goto	l735
  7234                           
  7235                           ;standbyMode.c: 1025: return keypress3;
  7236  00D51A  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  7237  00D51E  6A2A               	clrf	?_displayLogs+1,c
  7238  00D520  0012               	return		;funcret
  7239  00D522                     __end_of_displayLogs:
  7240                           	opt stack 0
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           postinc0	equ	0xFEE
  7248                           wreg	equ	0xFE8
  7249                           postdec1	equ	0xFE5
  7250                           plusw1	equ	0xFE3
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           plusw2	equ	0xFDB
  7256                           fsr2h	equ	0xFDA
  7257                           fsr2l	equ	0xFD9
  7258                           status	equ	0xFD8
  7259                           
  7260 ;; *************** function _shiftEEPROM *****************
  7261 ;; Defined at:
  7262 ;;		line 68 in file "EEPROMstorage.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  i               2    5[COMRAM] unsigned int 
  7267 ;;  temp            2    3[COMRAM] unsigned int 
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      void 
  7270 ;; Registers used:
  7271 ;;		wreg, status,2, status,0, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7278 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;Total ram usage:        5 bytes
  7282 ;; Hardware stack levels used:    1
  7283 ;; Hardware stack levels required when called:    1
  7284 ;; This function calls:
  7285 ;;		_readEEPROM
  7286 ;;		_writeEEPROM
  7287 ;; This function is called by:
  7288 ;;		_standbyMode
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           	psect	text7
  7293  00B272                     __ptext7:
  7294                           	opt stack 0
  7295  00B272                     _shiftEEPROM:
  7296                           	opt stack 28
  7297                           
  7298                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  7299                           
  7300                           ;incstack = 0
  7301  00B272  0E00               	movlw	0
  7302  00B274  6E07               	movwf	shiftEEPROM@i+1,c
  7303  00B276  0E00               	movlw	0
  7304  00B278  6E06               	movwf	shiftEEPROM@i,c
  7305                           
  7306                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  7307  00B27A  0E00               	movlw	0
  7308  00B27C  6E05               	movwf	shiftEEPROM@temp+1,c
  7309  00B27E  0E00               	movlw	0
  7310  00B280  6E04               	movwf	shiftEEPROM@temp,c
  7311                           
  7312                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  7313  00B282  0E00               	movlw	0
  7314  00B284  6E07               	movwf	shiftEEPROM@i+1,c
  7315  00B286  0E46               	movlw	70
  7316  00B288  6E06               	movwf	shiftEEPROM@i,c
  7317  00B28A                     l7978:
  7318  00B28A  5007               	movf	shiftEEPROM@i+1,w,c
  7319  00B28C  E114               	bnz	l7988
  7320  00B28E  0E69               	movlw	105
  7321  00B290  5C06               	subwf	shiftEEPROM@i,w,c
  7322  00B292  B0D8               	btfsc	status,0,c
  7323  00B294  D010               	goto	u10080
  7324                           
  7325                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  7326  00B296  5006               	movf	shiftEEPROM@i,w,c
  7327  00B298  ECE6  F056         	call	_readEEPROM
  7328  00B29C  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7329  00B29E  5003               	movf	??_shiftEEPROM,w,c
  7330  00B2A0  6E04               	movwf	shiftEEPROM@temp,c
  7331  00B2A2  6A05               	clrf	shiftEEPROM@temp+1,c
  7332                           
  7333                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  7334  00B2A4  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7335  00B2A8  5006               	movf	shiftEEPROM@i,w,c
  7336  00B2AA  0F23               	addlw	35
  7337  00B2AC  EC41  F057         	call	_writeEEPROM
  7338  00B2B0  4A06               	infsnz	shiftEEPROM@i,f,c
  7339  00B2B2  2A07               	incf	shiftEEPROM@i+1,f,c
  7340  00B2B4  D7EA               	goto	l7978
  7341  00B2B6                     u10080:
  7342  00B2B6                     l7988:
  7343                           
  7344                           ;EEPROMstorage.c: 74: }
  7345                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  7346  00B2B6  0E00               	movlw	0
  7347  00B2B8  6E07               	movwf	shiftEEPROM@i+1,c
  7348  00B2BA  0E23               	movlw	35
  7349  00B2BC  6E06               	movwf	shiftEEPROM@i,c
  7350  00B2BE                     l7990:
  7351  00B2BE  5007               	movf	shiftEEPROM@i+1,w,c
  7352  00B2C0  E114               	bnz	l8000
  7353  00B2C2  0E46               	movlw	70
  7354  00B2C4  5C06               	subwf	shiftEEPROM@i,w,c
  7355  00B2C6  B0D8               	btfsc	status,0,c
  7356  00B2C8  D010               	goto	u10100
  7357                           
  7358                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  7359  00B2CA  5006               	movf	shiftEEPROM@i,w,c
  7360  00B2CC  ECE6  F056         	call	_readEEPROM
  7361  00B2D0  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7362  00B2D2  5003               	movf	??_shiftEEPROM,w,c
  7363  00B2D4  6E04               	movwf	shiftEEPROM@temp,c
  7364  00B2D6  6A05               	clrf	shiftEEPROM@temp+1,c
  7365                           
  7366                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  7367  00B2D8  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7368  00B2DC  5006               	movf	shiftEEPROM@i,w,c
  7369  00B2DE  0F23               	addlw	35
  7370  00B2E0  EC41  F057         	call	_writeEEPROM
  7371  00B2E4  4A06               	infsnz	shiftEEPROM@i,f,c
  7372  00B2E6  2A07               	incf	shiftEEPROM@i+1,f,c
  7373  00B2E8  D7EA               	goto	l7990
  7374  00B2EA                     u10100:
  7375  00B2EA                     l8000:
  7376                           
  7377                           ;EEPROMstorage.c: 79: }
  7378                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  7379  00B2EA  0E00               	movlw	0
  7380  00B2EC  6E07               	movwf	shiftEEPROM@i+1,c
  7381  00B2EE  0E00               	movlw	0
  7382  00B2F0  6E06               	movwf	shiftEEPROM@i,c
  7383  00B2F2                     l8002:
  7384  00B2F2  5007               	movf	shiftEEPROM@i+1,w,c
  7385  00B2F4  E114               	bnz	l1067
  7386  00B2F6  0E23               	movlw	35
  7387  00B2F8  5C06               	subwf	shiftEEPROM@i,w,c
  7388  00B2FA  B0D8               	btfsc	status,0,c
  7389  00B2FC  0012               	return	
  7390                           
  7391                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  7392  00B2FE  5006               	movf	shiftEEPROM@i,w,c
  7393  00B300  ECE6  F056         	call	_readEEPROM
  7394  00B304  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7395  00B306  5003               	movf	??_shiftEEPROM,w,c
  7396  00B308  6E04               	movwf	shiftEEPROM@temp,c
  7397  00B30A  6A05               	clrf	shiftEEPROM@temp+1,c
  7398                           
  7399                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  7400  00B30C  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7401  00B310  5006               	movf	shiftEEPROM@i,w,c
  7402  00B312  0F23               	addlw	35
  7403  00B314  EC41  F057         	call	_writeEEPROM
  7404  00B318  4A06               	infsnz	shiftEEPROM@i,f,c
  7405  00B31A  2A07               	incf	shiftEEPROM@i+1,f,c
  7406  00B31C  D7EA               	goto	l8002
  7407  00B31E                     l1067:
  7408  00B31E  0012               	return		;funcret
  7409  00B320                     __end_of_shiftEEPROM:
  7410                           	opt stack 0
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           postinc0	equ	0xFEE
  7418                           wreg	equ	0xFE8
  7419                           postdec1	equ	0xFE5
  7420                           plusw1	equ	0xFE3
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           postdec2	equ	0xFDD
  7425                           plusw2	equ	0xFDB
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function _printFoodInput *****************
  7431 ;; Defined at:
  7432 ;;		line 839 in file "standbyMode.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  food            2    0[COMRAM] unsigned int 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;		None
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  2    0[COMRAM] unsigned int 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;Total ram usage:        2 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_standbyMode
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           	psect	text8
  7460  00C14C                     __ptext8:
  7461                           	opt stack 0
  7462  00C14C                     _printFoodInput:
  7463                           	opt stack 29
  7464                           
  7465                           ;standbyMode.c: 842: if (food == 1 || food == 3 || food == 5){
  7466                           
  7467                           ;incstack = 0
  7468  00C14C  0401               	decf	printFoodInput@food,w,c
  7469  00C14E  1002               	iorwf	printFoodInput@food+1,w,c
  7470  00C150  B4D8               	btfsc	status,2,c
  7471  00C152  D00A               	goto	u8360
  7472  00C154  0E03               	movlw	3
  7473  00C156  1801               	xorwf	printFoodInput@food,w,c
  7474  00C158  1002               	iorwf	printFoodInput@food+1,w,c
  7475  00C15A  B4D8               	btfsc	status,2,c
  7476  00C15C  D005               	goto	u8360
  7477  00C15E  0E05               	movlw	5
  7478  00C160  1801               	xorwf	printFoodInput@food,w,c
  7479  00C162  1002               	iorwf	printFoodInput@food+1,w,c
  7480  00C164  A4D8               	btfss	status,2,c
  7481  00C166  D005               	goto	l651
  7482  00C168                     u8360:
  7483                           
  7484                           ;standbyMode.c: 843: return 0;
  7485  00C168  0E00               	movlw	0
  7486  00C16A  6E02               	movwf	?_printFoodInput+1,c
  7487  00C16C  0E00               	movlw	0
  7488  00C16E  6E01               	movwf	?_printFoodInput,c
  7489                           
  7490                           ;standbyMode.c: 844: }
  7491  00C170  0012               	return	
  7492  00C172                     l651:
  7493                           
  7494                           ;standbyMode.c: 847: else if (food == 2 || food == 4 || food == 6){
  7495  00C172  0E02               	movlw	2
  7496  00C174  1801               	xorwf	printFoodInput@food,w,c
  7497  00C176  1002               	iorwf	printFoodInput@food+1,w,c
  7498  00C178  B4D8               	btfsc	status,2,c
  7499  00C17A  D00A               	goto	u8390
  7500  00C17C  0E04               	movlw	4
  7501  00C17E  1801               	xorwf	printFoodInput@food,w,c
  7502  00C180  1002               	iorwf	printFoodInput@food+1,w,c
  7503  00C182  B4D8               	btfsc	status,2,c
  7504  00C184  D005               	goto	u8390
  7505  00C186  0E06               	movlw	6
  7506  00C188  1801               	xorwf	printFoodInput@food,w,c
  7507  00C18A  1002               	iorwf	printFoodInput@food+1,w,c
  7508  00C18C  A4D8               	btfss	status,2,c
  7509  00C18E  D005               	goto	l656
  7510  00C190                     u8390:
  7511                           
  7512                           ;standbyMode.c: 848: return 1;
  7513  00C190  0E00               	movlw	0
  7514  00C192  6E02               	movwf	?_printFoodInput+1,c
  7515  00C194  0E01               	movlw	1
  7516  00C196  6E01               	movwf	?_printFoodInput,c
  7517                           
  7518                           ;standbyMode.c: 849: }
  7519  00C198  0012               	return	
  7520  00C19A                     l656:
  7521                           
  7522                           ;standbyMode.c: 852: else if (food == 7){
  7523  00C19A  0E07               	movlw	7
  7524  00C19C  1801               	xorwf	printFoodInput@food,w,c
  7525  00C19E  1002               	iorwf	printFoodInput@food+1,w,c
  7526  00C1A0  A4D8               	btfss	status,2,c
  7527  00C1A2  D005               	goto	l660
  7528                           
  7529                           ;standbyMode.c: 853: return 2;
  7530  00C1A4  0E00               	movlw	0
  7531  00C1A6  6E02               	movwf	?_printFoodInput+1,c
  7532  00C1A8  0E02               	movlw	2
  7533  00C1AA  6E01               	movwf	?_printFoodInput,c
  7534                           
  7535                           ;standbyMode.c: 854: }
  7536  00C1AC  0012               	return	
  7537  00C1AE                     l660:
  7538                           
  7539                           ;standbyMode.c: 857: else if (food == 8 || food == 12 || food == 17){
  7540  00C1AE  0E08               	movlw	8
  7541  00C1B0  1801               	xorwf	printFoodInput@food,w,c
  7542  00C1B2  1002               	iorwf	printFoodInput@food+1,w,c
  7543  00C1B4  B4D8               	btfsc	status,2,c
  7544  00C1B6  D00A               	goto	u8430
  7545  00C1B8  0E0C               	movlw	12
  7546  00C1BA  1801               	xorwf	printFoodInput@food,w,c
  7547  00C1BC  1002               	iorwf	printFoodInput@food+1,w,c
  7548  00C1BE  B4D8               	btfsc	status,2,c
  7549  00C1C0  D005               	goto	u8430
  7550  00C1C2  0E11               	movlw	17
  7551  00C1C4  1801               	xorwf	printFoodInput@food,w,c
  7552  00C1C6  1002               	iorwf	printFoodInput@food+1,w,c
  7553  00C1C8  A4D8               	btfss	status,2,c
  7554  00C1CA  D005               	goto	l662
  7555  00C1CC                     u8430:
  7556                           
  7557                           ;standbyMode.c: 858: return 3;
  7558  00C1CC  0E00               	movlw	0
  7559  00C1CE  6E02               	movwf	?_printFoodInput+1,c
  7560  00C1D0  0E03               	movlw	3
  7561  00C1D2  6E01               	movwf	?_printFoodInput,c
  7562                           
  7563                           ;standbyMode.c: 859: }
  7564  00C1D4  0012               	return	
  7565  00C1D6                     l662:
  7566                           
  7567                           ;standbyMode.c: 862: else if (food == 9 || food == 13 || food == 18){
  7568  00C1D6  0E09               	movlw	9
  7569  00C1D8  1801               	xorwf	printFoodInput@food,w,c
  7570  00C1DA  1002               	iorwf	printFoodInput@food+1,w,c
  7571  00C1DC  B4D8               	btfsc	status,2,c
  7572  00C1DE  D00A               	goto	u8460
  7573  00C1E0  0E0D               	movlw	13
  7574  00C1E2  1801               	xorwf	printFoodInput@food,w,c
  7575  00C1E4  1002               	iorwf	printFoodInput@food+1,w,c
  7576  00C1E6  B4D8               	btfsc	status,2,c
  7577  00C1E8  D005               	goto	u8460
  7578  00C1EA  0E12               	movlw	18
  7579  00C1EC  1801               	xorwf	printFoodInput@food,w,c
  7580  00C1EE  1002               	iorwf	printFoodInput@food+1,w,c
  7581  00C1F0  A4D8               	btfss	status,2,c
  7582  00C1F2  D005               	goto	l666
  7583  00C1F4                     u8460:
  7584                           
  7585                           ;standbyMode.c: 863: return 4;
  7586  00C1F4  0E00               	movlw	0
  7587  00C1F6  6E02               	movwf	?_printFoodInput+1,c
  7588  00C1F8  0E04               	movlw	4
  7589  00C1FA  6E01               	movwf	?_printFoodInput,c
  7590                           
  7591                           ;standbyMode.c: 864: }
  7592  00C1FC  0012               	return	
  7593  00C1FE                     l666:
  7594                           
  7595                           ;standbyMode.c: 867: else if (food == 14 || food == 19){
  7596  00C1FE  0E0E               	movlw	14
  7597  00C200  1801               	xorwf	printFoodInput@food,w,c
  7598  00C202  1002               	iorwf	printFoodInput@food+1,w,c
  7599  00C204  B4D8               	btfsc	status,2,c
  7600  00C206  D005               	goto	u8480
  7601  00C208  0E13               	movlw	19
  7602  00C20A  1801               	xorwf	printFoodInput@food,w,c
  7603  00C20C  1002               	iorwf	printFoodInput@food+1,w,c
  7604  00C20E  A4D8               	btfss	status,2,c
  7605  00C210  D005               	goto	l670
  7606  00C212                     u8480:
  7607                           
  7608                           ;standbyMode.c: 868: return 5;
  7609  00C212  0E00               	movlw	0
  7610  00C214  6E02               	movwf	?_printFoodInput+1,c
  7611  00C216  0E05               	movlw	5
  7612  00C218  6E01               	movwf	?_printFoodInput,c
  7613                           
  7614                           ;standbyMode.c: 869: }
  7615  00C21A  0012               	return	
  7616  00C21C                     l670:
  7617                           
  7618                           ;standbyMode.c: 872: else if (food == 10 || food == 15 || food == 20){
  7619  00C21C  0E0A               	movlw	10
  7620  00C21E  1801               	xorwf	printFoodInput@food,w,c
  7621  00C220  1002               	iorwf	printFoodInput@food+1,w,c
  7622  00C222  B4D8               	btfsc	status,2,c
  7623  00C224  D00A               	goto	u8510
  7624  00C226  0E0F               	movlw	15
  7625  00C228  1801               	xorwf	printFoodInput@food,w,c
  7626  00C22A  1002               	iorwf	printFoodInput@food+1,w,c
  7627  00C22C  B4D8               	btfsc	status,2,c
  7628  00C22E  D005               	goto	u8510
  7629  00C230  0E14               	movlw	20
  7630  00C232  1801               	xorwf	printFoodInput@food,w,c
  7631  00C234  1002               	iorwf	printFoodInput@food+1,w,c
  7632  00C236  A4D8               	btfss	status,2,c
  7633  00C238  D005               	goto	l674
  7634  00C23A                     u8510:
  7635                           
  7636                           ;standbyMode.c: 873: return 6;
  7637  00C23A  0E00               	movlw	0
  7638  00C23C  6E02               	movwf	?_printFoodInput+1,c
  7639  00C23E  0E06               	movlw	6
  7640  00C240  6E01               	movwf	?_printFoodInput,c
  7641                           
  7642                           ;standbyMode.c: 874: }
  7643  00C242  0012               	return	
  7644  00C244                     l674:
  7645                           
  7646                           ;standbyMode.c: 877: else if (food == 11 || food == 16 || food == 21){
  7647  00C244  0E0B               	movlw	11
  7648  00C246  1801               	xorwf	printFoodInput@food,w,c
  7649  00C248  1002               	iorwf	printFoodInput@food+1,w,c
  7650  00C24A  B4D8               	btfsc	status,2,c
  7651  00C24C  D00A               	goto	u8540
  7652  00C24E  0E10               	movlw	16
  7653  00C250  1801               	xorwf	printFoodInput@food,w,c
  7654  00C252  1002               	iorwf	printFoodInput@food+1,w,c
  7655  00C254  B4D8               	btfsc	status,2,c
  7656  00C256  D005               	goto	u8540
  7657  00C258  0E15               	movlw	21
  7658  00C25A  1801               	xorwf	printFoodInput@food,w,c
  7659  00C25C  1002               	iorwf	printFoodInput@food+1,w,c
  7660  00C25E  A4D8               	btfss	status,2,c
  7661  00C260  D005               	goto	l678
  7662  00C262                     u8540:
  7663                           
  7664                           ;standbyMode.c: 878: return 7;
  7665  00C262  0E00               	movlw	0
  7666  00C264  6E02               	movwf	?_printFoodInput+1,c
  7667  00C266  0E07               	movlw	7
  7668  00C268  6E01               	movwf	?_printFoodInput,c
  7669                           
  7670                           ;standbyMode.c: 879: }
  7671  00C26A  0012               	return	
  7672  00C26C                     l678:
  7673                           
  7674                           ;standbyMode.c: 882: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  7675  00C26C  0E16               	movlw	22
  7676  00C26E  1801               	xorwf	printFoodInput@food,w,c
  7677  00C270  1002               	iorwf	printFoodInput@food+1,w,c
  7678  00C272  B4D8               	btfsc	status,2,c
  7679  00C274  D01E               	goto	u8610
  7680  00C276  0E18               	movlw	24
  7681  00C278  1801               	xorwf	printFoodInput@food,w,c
  7682  00C27A  1002               	iorwf	printFoodInput@food+1,w,c
  7683  00C27C  B4D8               	btfsc	status,2,c
  7684  00C27E  D019               	goto	u8610
  7685  00C280  0E1A               	movlw	26
  7686  00C282  1801               	xorwf	printFoodInput@food,w,c
  7687  00C284  1002               	iorwf	printFoodInput@food+1,w,c
  7688  00C286  B4D8               	btfsc	status,2,c
  7689  00C288  D014               	goto	u8610
  7690  00C28A  0E1C               	movlw	28
  7691  00C28C  1801               	xorwf	printFoodInput@food,w,c
  7692  00C28E  1002               	iorwf	printFoodInput@food+1,w,c
  7693  00C290  B4D8               	btfsc	status,2,c
  7694  00C292  D00F               	goto	u8610
  7695  00C294  0E20               	movlw	32
  7696  00C296  1801               	xorwf	printFoodInput@food,w,c
  7697  00C298  1002               	iorwf	printFoodInput@food+1,w,c
  7698  00C29A  B4D8               	btfsc	status,2,c
  7699  00C29C  D00A               	goto	u8610
  7700  00C29E  0E24               	movlw	36
  7701  00C2A0  1801               	xorwf	printFoodInput@food,w,c
  7702  00C2A2  1002               	iorwf	printFoodInput@food+1,w,c
  7703  00C2A4  B4D8               	btfsc	status,2,c
  7704  00C2A6  D005               	goto	u8610
  7705  00C2A8  0E26               	movlw	38
  7706  00C2AA  1801               	xorwf	printFoodInput@food,w,c
  7707  00C2AC  1002               	iorwf	printFoodInput@food+1,w,c
  7708  00C2AE  A4D8               	btfss	status,2,c
  7709  00C2B0  D005               	goto	l682
  7710  00C2B2                     u8610:
  7711                           
  7712                           ;standbyMode.c: 883: return 8;
  7713  00C2B2  0E00               	movlw	0
  7714  00C2B4  6E02               	movwf	?_printFoodInput+1,c
  7715  00C2B6  0E08               	movlw	8
  7716  00C2B8  6E01               	movwf	?_printFoodInput,c
  7717                           
  7718                           ;standbyMode.c: 884: }
  7719  00C2BA  0012               	return	
  7720  00C2BC                     l682:
  7721                           
  7722                           ;standbyMode.c: 887: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  7723  00C2BC  0E17               	movlw	23
  7724  00C2BE  1801               	xorwf	printFoodInput@food,w,c
  7725  00C2C0  1002               	iorwf	printFoodInput@food+1,w,c
  7726  00C2C2  B4D8               	btfsc	status,2,c
  7727  00C2C4  D019               	goto	u8670
  7728  00C2C6  0E19               	movlw	25
  7729  00C2C8  1801               	xorwf	printFoodInput@food,w,c
  7730  00C2CA  1002               	iorwf	printFoodInput@food+1,w,c
  7731  00C2CC  B4D8               	btfsc	status,2,c
  7732  00C2CE  D014               	goto	u8670
  7733  00C2D0  0E1D               	movlw	29
  7734  00C2D2  1801               	xorwf	printFoodInput@food,w,c
  7735  00C2D4  1002               	iorwf	printFoodInput@food+1,w,c
  7736  00C2D6  B4D8               	btfsc	status,2,c
  7737  00C2D8  D00F               	goto	u8670
  7738  00C2DA  0E21               	movlw	33
  7739  00C2DC  1801               	xorwf	printFoodInput@food,w,c
  7740  00C2DE  1002               	iorwf	printFoodInput@food+1,w,c
  7741  00C2E0  B4D8               	btfsc	status,2,c
  7742  00C2E2  D00A               	goto	u8670
  7743  00C2E4  0E25               	movlw	37
  7744  00C2E6  1801               	xorwf	printFoodInput@food,w,c
  7745  00C2E8  1002               	iorwf	printFoodInput@food+1,w,c
  7746  00C2EA  B4D8               	btfsc	status,2,c
  7747  00C2EC  D005               	goto	u8670
  7748  00C2EE  0E27               	movlw	39
  7749  00C2F0  1801               	xorwf	printFoodInput@food,w,c
  7750  00C2F2  1002               	iorwf	printFoodInput@food+1,w,c
  7751  00C2F4  A4D8               	btfss	status,2,c
  7752  00C2F6  D005               	goto	l686
  7753  00C2F8                     u8670:
  7754                           
  7755                           ;standbyMode.c: 888: return 9;
  7756  00C2F8  0E00               	movlw	0
  7757  00C2FA  6E02               	movwf	?_printFoodInput+1,c
  7758  00C2FC  0E09               	movlw	9
  7759  00C2FE  6E01               	movwf	?_printFoodInput,c
  7760                           
  7761                           ;standbyMode.c: 889: }
  7762  00C300  0012               	return	
  7763  00C302                     l686:
  7764                           
  7765                           ;standbyMode.c: 892: else if (food == 30 || food == 34 || food == 40){
  7766  00C302  0E1E               	movlw	30
  7767  00C304  1801               	xorwf	printFoodInput@food,w,c
  7768  00C306  1002               	iorwf	printFoodInput@food+1,w,c
  7769  00C308  B4D8               	btfsc	status,2,c
  7770  00C30A  D00A               	goto	u8700
  7771  00C30C  0E22               	movlw	34
  7772  00C30E  1801               	xorwf	printFoodInput@food,w,c
  7773  00C310  1002               	iorwf	printFoodInput@food+1,w,c
  7774  00C312  B4D8               	btfsc	status,2,c
  7775  00C314  D005               	goto	u8700
  7776  00C316  0E28               	movlw	40
  7777  00C318  1801               	xorwf	printFoodInput@food,w,c
  7778  00C31A  1002               	iorwf	printFoodInput@food+1,w,c
  7779  00C31C  A4D8               	btfss	status,2,c
  7780  00C31E  D005               	goto	l690
  7781  00C320                     u8700:
  7782                           
  7783                           ;standbyMode.c: 893: return 10;
  7784  00C320  0E00               	movlw	0
  7785  00C322  6E02               	movwf	?_printFoodInput+1,c
  7786  00C324  0E0A               	movlw	10
  7787  00C326  6E01               	movwf	?_printFoodInput,c
  7788                           
  7789                           ;standbyMode.c: 894: }
  7790  00C328  0012               	return	
  7791  00C32A                     l690:
  7792                           
  7793                           ;standbyMode.c: 897: else if (food == 27 || food == 31 || food == 35 || food == 41){
  7794  00C32A  0E1B               	movlw	27
  7795  00C32C  1801               	xorwf	printFoodInput@food,w,c
  7796  00C32E  1002               	iorwf	printFoodInput@food+1,w,c
  7797  00C330  B4D8               	btfsc	status,2,c
  7798  00C332  D00F               	goto	u8740
  7799  00C334  0E1F               	movlw	31
  7800  00C336  1801               	xorwf	printFoodInput@food,w,c
  7801  00C338  1002               	iorwf	printFoodInput@food+1,w,c
  7802  00C33A  B4D8               	btfsc	status,2,c
  7803  00C33C  D00A               	goto	u8740
  7804  00C33E  0E23               	movlw	35
  7805  00C340  1801               	xorwf	printFoodInput@food,w,c
  7806  00C342  1002               	iorwf	printFoodInput@food+1,w,c
  7807  00C344  B4D8               	btfsc	status,2,c
  7808  00C346  D005               	goto	u8740
  7809  00C348  0E29               	movlw	41
  7810  00C34A  1801               	xorwf	printFoodInput@food,w,c
  7811  00C34C  1002               	iorwf	printFoodInput@food+1,w,c
  7812  00C34E  A4D8               	btfss	status,2,c
  7813  00C350  D005               	goto	l694
  7814  00C352                     u8740:
  7815                           
  7816                           ;standbyMode.c: 898: return 11;
  7817  00C352  0E00               	movlw	0
  7818  00C354  6E02               	movwf	?_printFoodInput+1,c
  7819  00C356  0E0B               	movlw	11
  7820  00C358  6E01               	movwf	?_printFoodInput,c
  7821                           
  7822                           ;standbyMode.c: 899: }
  7823  00C35A  0012               	return	
  7824  00C35C                     l694:
  7825                           
  7826                           ;standbyMode.c: 903: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  7827  00C35C  0E2A               	movlw	42
  7828  00C35E  1801               	xorwf	printFoodInput@food,w,c
  7829  00C360  1002               	iorwf	printFoodInput@food+1,w,c
  7830  00C362  B4D8               	btfsc	status,2,c
  7831  00C364  D014               	goto	u8790
  7832  00C366  0E2B               	movlw	43
  7833  00C368  1801               	xorwf	printFoodInput@food,w,c
  7834  00C36A  1002               	iorwf	printFoodInput@food+1,w,c
  7835  00C36C  B4D8               	btfsc	status,2,c
  7836  00C36E  D00F               	goto	u8790
  7837  00C370  0E2C               	movlw	44
  7838  00C372  1801               	xorwf	printFoodInput@food,w,c
  7839  00C374  1002               	iorwf	printFoodInput@food+1,w,c
  7840  00C376  B4D8               	btfsc	status,2,c
  7841  00C378  D00A               	goto	u8790
  7842  00C37A  0E2D               	movlw	45
  7843  00C37C  1801               	xorwf	printFoodInput@food,w,c
  7844  00C37E  1002               	iorwf	printFoodInput@food+1,w,c
  7845  00C380  B4D8               	btfsc	status,2,c
  7846  00C382  D005               	goto	u8790
  7847  00C384  0E2E               	movlw	46
  7848  00C386  1801               	xorwf	printFoodInput@food,w,c
  7849  00C388  1002               	iorwf	printFoodInput@food+1,w,c
  7850  00C38A  A4D8               	btfss	status,2,c
  7851  00C38C  D005               	goto	l698
  7852  00C38E                     u8790:
  7853                           
  7854                           ;standbyMode.c: 904: return 12;
  7855  00C38E  0E00               	movlw	0
  7856  00C390  6E02               	movwf	?_printFoodInput+1,c
  7857  00C392  0E0C               	movlw	12
  7858  00C394  6E01               	movwf	?_printFoodInput,c
  7859                           
  7860                           ;standbyMode.c: 905: }
  7861  00C396  0012               	return	
  7862  00C398                     l698:
  7863                           
  7864                           ;standbyMode.c: 907: else{
  7865                           ;standbyMode.c: 908: return 0;
  7866  00C398  0E00               	movlw	0
  7867  00C39A  6E02               	movwf	?_printFoodInput+1,c
  7868  00C39C  0E00               	movlw	0
  7869  00C39E  6E01               	movwf	?_printFoodInput,c
  7870  00C3A0  0012               	return	
  7871  00C3A2                     __end_of_printFoodInput:
  7872                           	opt stack 0
  7873                           tblptru	equ	0xFF8
  7874                           tblptrh	equ	0xFF7
  7875                           tblptrl	equ	0xFF6
  7876                           tablat	equ	0xFF5
  7877                           prodh	equ	0xFF4
  7878                           prodl	equ	0xFF3
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           postdec1	equ	0xFE5
  7882                           plusw1	equ	0xFE3
  7883                           fsr1l	equ	0xFE1
  7884                           indf2	equ	0xFDF
  7885                           postinc2	equ	0xFDE
  7886                           postdec2	equ	0xFDD
  7887                           plusw2	equ	0xFDB
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _getRound *****************
  7893 ;; Defined at:
  7894 ;;		line 243 in file "standbyMode.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  code            2    0[COMRAM] unsigned int 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  returnValue     2    4[COMRAM] unsigned int 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  2    0[COMRAM] unsigned int 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;Total ram usage:        6 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; This function calls:
  7915 ;;		Nothing
  7916 ;; This function is called by:
  7917 ;;		_standbyMode
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text9
  7922  00B67C                     __ptext9:
  7923                           	opt stack 0
  7924  00B67C                     _getRound:
  7925                           	opt stack 29
  7926                           
  7927                           ;standbyMode.c: 244: unsigned int returnValue = 0;
  7928                           
  7929                           ;incstack = 0
  7930  00B67C  0E00               	movlw	0
  7931  00B67E  6E06               	movwf	getRound@returnValue+1,c
  7932  00B680  0E00               	movlw	0
  7933  00B682  6E05               	movwf	getRound@returnValue,c
  7934                           
  7935                           ;standbyMode.c: 245: switch(code){
  7936  00B684  D00D               	goto	l506
  7937  00B686                     
  7938                           ;standbyMode.c: 253: returnValue = 2;
  7939  00B686  0E00               	movlw	0
  7940  00B688  6E06               	movwf	getRound@returnValue+1,c
  7941  00B68A  0E02               	movlw	2
  7942  00B68C                     L22:
  7943  00B68C  6E05               	movwf	getRound@returnValue,c
  7944                           
  7945                           ;standbyMode.c: 259: break;
  7946  00B68E  D069               	goto	l508
  7947  00B690                     
  7948                           ;standbyMode.c: 388: returnValue = 1;
  7949                           
  7950                           ;standbyMode.c: 387: case 45:
  7951                           
  7952                           ;standbyMode.c: 384: break;
  7953                           
  7954                           ;standbyMode.c: 383: returnValue = 1;
  7955                           
  7956                           ;standbyMode.c: 382: case 44:
  7957                           
  7958                           ;standbyMode.c: 379: break;
  7959                           
  7960                           ;standbyMode.c: 378: returnValue = 1;
  7961  00B690  0E00               	movlw	0
  7962  00B692  6E06               	movwf	getRound@returnValue+1,c
  7963  00B694  0E01               	movlw	1
  7964  00B696  D7FA               	goto	L22
  7965  00B698                     
  7966                           ;standbyMode.c: 392: returnValue = 0;
  7967  00B698  0E00               	movlw	0
  7968  00B69A  6E06               	movwf	getRound@returnValue+1,c
  7969  00B69C  0E00               	movlw	0
  7970  00B69E  D7F6               	goto	L22
  7971  00B6A0                     l506:
  7972  00B6A0  C001  F003         	movff	getRound@code,??_getRound
  7973  00B6A4  C002  F004         	movff	getRound@code+1,??_getRound+1
  7974                           
  7975                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7976                           ; Switch size 1, requested type "space"
  7977                           ; Number of cases is 1, Range of values is 0 to 0
  7978                           ; switch strategies available:
  7979                           ; Name         Instructions Cycles
  7980                           ; simple_byte            4     3 (average)
  7981                           ;	Chosen strategy is simple_byte
  7982  00B6A8  5004               	movf	??_getRound+1,w,c
  7983  00B6AA  0A00               	xorlw	0	; case 0
  7984  00B6AC  A4D8               	btfss	status,2,c
  7985  00B6AE  D7F4               	goto	l537
  7986                           
  7987                           ; Switch size 1, requested type "space"
  7988                           ; Number of cases is 29, Range of values is 1 to 45
  7989                           ; switch strategies available:
  7990                           ; Name         Instructions Cycles
  7991                           ; simple_byte           88    45 (average)
  7992                           ;	Chosen strategy is simple_byte
  7993  00B6B0  5003               	movf	??_getRound,w,c
  7994  00B6B2  0A01               	xorlw	1	; case 1
  7995  00B6B4  B4D8               	btfsc	status,2,c
  7996  00B6B6  D7EC               	goto	l534
  7997  00B6B8  0A03               	xorlw	3	; case 2
  7998  00B6BA  B4D8               	btfsc	status,2,c
  7999  00B6BC  D7E4               	goto	l509
  8000  00B6BE  0A0A               	xorlw	10	; case 8
  8001  00B6C0  B4D8               	btfsc	status,2,c
  8002  00B6C2  D7E6               	goto	l534
  8003  00B6C4  0A01               	xorlw	1	; case 9
  8004  00B6C6  B4D8               	btfsc	status,2,c
  8005  00B6C8  D7E3               	goto	l534
  8006  00B6CA  0A03               	xorlw	3	; case 10
  8007  00B6CC  B4D8               	btfsc	status,2,c
  8008  00B6CE  D7DB               	goto	l509
  8009  00B6D0  0A01               	xorlw	1	; case 11
  8010  00B6D2  B4D8               	btfsc	status,2,c
  8011  00B6D4  D7D8               	goto	l509
  8012  00B6D6  0A07               	xorlw	7	; case 12
  8013  00B6D8  B4D8               	btfsc	status,2,c
  8014  00B6DA  D7DA               	goto	l534
  8015  00B6DC  0A01               	xorlw	1	; case 13
  8016  00B6DE  B4D8               	btfsc	status,2,c
  8017  00B6E0  D7D7               	goto	l534
  8018  00B6E2  0A03               	xorlw	3	; case 14
  8019  00B6E4  B4D8               	btfsc	status,2,c
  8020  00B6E6  D7D4               	goto	l534
  8021  00B6E8  0A01               	xorlw	1	; case 15
  8022  00B6EA  B4D8               	btfsc	status,2,c
  8023  00B6EC  D7CC               	goto	l509
  8024  00B6EE  0A1F               	xorlw	31	; case 16
  8025  00B6F0  B4D8               	btfsc	status,2,c
  8026  00B6F2  D7C9               	goto	l509
  8027  00B6F4  0A06               	xorlw	6	; case 22
  8028  00B6F6  B4D8               	btfsc	status,2,c
  8029  00B6F8  D7C6               	goto	l509
  8030  00B6FA  0A01               	xorlw	1	; case 23
  8031  00B6FC  B4D8               	btfsc	status,2,c
  8032  00B6FE  D7C3               	goto	l509
  8033  00B700  0A0F               	xorlw	15	; case 24
  8034  00B702  B4D8               	btfsc	status,2,c
  8035  00B704  D7C0               	goto	l509
  8036  00B706  0A01               	xorlw	1	; case 25
  8037  00B708  B4D8               	btfsc	status,2,c
  8038  00B70A  D7BD               	goto	l509
  8039  00B70C  0A03               	xorlw	3	; case 26
  8040  00B70E  B4D8               	btfsc	status,2,c
  8041  00B710  D7BF               	goto	l534
  8042  00B712  0A01               	xorlw	1	; case 27
  8043  00B714  B4D8               	btfsc	status,2,c
  8044  00B716  D7B7               	goto	l509
  8045  00B718  0A07               	xorlw	7	; case 28
  8046  00B71A  B4D8               	btfsc	status,2,c
  8047  00B71C  D7B9               	goto	l534
  8048  00B71E  0A01               	xorlw	1	; case 29
  8049  00B720  B4D8               	btfsc	status,2,c
  8050  00B722  D7B6               	goto	l534
  8051  00B724  0A03               	xorlw	3	; case 30
  8052  00B726  B4D8               	btfsc	status,2,c
  8053  00B728  D7B3               	goto	l534
  8054  00B72A  0A01               	xorlw	1	; case 31
  8055  00B72C  B4D8               	btfsc	status,2,c
  8056  00B72E  D7AB               	goto	l509
  8057  00B730  0A3F               	xorlw	63	; case 32
  8058  00B732  B4D8               	btfsc	status,2,c
  8059  00B734  D7AD               	goto	l534
  8060  00B736  0A01               	xorlw	1	; case 33
  8061  00B738  B4D8               	btfsc	status,2,c
  8062  00B73A  D7AA               	goto	l534
  8063  00B73C  0A03               	xorlw	3	; case 34
  8064  00B73E  B4D8               	btfsc	status,2,c
  8065  00B740  D7A7               	goto	l534
  8066  00B742  0A01               	xorlw	1	; case 35
  8067  00B744  B4D8               	btfsc	status,2,c
  8068  00B746  D79F               	goto	l509
  8069  00B748  0A09               	xorlw	9	; case 42
  8070  00B74A  B4D8               	btfsc	status,2,c
  8071  00B74C  D79C               	goto	l509
  8072  00B74E  0A01               	xorlw	1	; case 43
  8073  00B750  B4D8               	btfsc	status,2,c
  8074  00B752  D79E               	goto	l534
  8075  00B754  0A07               	xorlw	7	; case 44
  8076  00B756  B4D8               	btfsc	status,2,c
  8077  00B758  D79B               	goto	l534
  8078  00B75A  0A01               	xorlw	1	; case 45
  8079  00B75C  B4D8               	btfsc	status,2,c
  8080  00B75E  D798               	goto	l534
  8081  00B760  D79B               	goto	l537
  8082  00B762                     l508:
  8083                           
  8084                           ;standbyMode.c: 395: return returnValue;
  8085  00B762  C005  F001         	movff	getRound@returnValue,?_getRound
  8086  00B766  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  8087  00B76A  0012               	return		;funcret
  8088  00B76C                     __end_of_getRound:
  8089                           	opt stack 0
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           postinc0	equ	0xFEE
  8097                           wreg	equ	0xFE8
  8098                           postdec1	equ	0xFE5
  8099                           plusw1	equ	0xFE3
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           plusw2	equ	0xFDB
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _getLong *****************
  8110 ;; Defined at:
  8111 ;;		line 556 in file "standbyMode.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  code            2    0[COMRAM] unsigned int 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  returnValue     2    4[COMRAM] unsigned int 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  2    0[COMRAM] unsigned int 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8125 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;Total ram usage:        6 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_standbyMode
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text10
  8139  00B862                     __ptext10:
  8140                           	opt stack 0
  8141  00B862                     _getLong:
  8142                           	opt stack 29
  8143                           
  8144                           ;standbyMode.c: 557: unsigned int returnValue = 0;
  8145                           
  8146                           ;incstack = 0
  8147  00B862  0E00               	movlw	0
  8148  00B864  6E06               	movwf	getLong@returnValue+1,c
  8149  00B866  0E00               	movlw	0
  8150  00B868  6E05               	movwf	getLong@returnValue,c
  8151                           
  8152                           ;standbyMode.c: 559: switch(code){
  8153  00B86A  D011               	goto	l576
  8154  00B86C                     
  8155                           ;standbyMode.c: 577: returnValue = 1;
  8156  00B86C  0E00               	movlw	0
  8157  00B86E  6E06               	movwf	getLong@returnValue+1,c
  8158  00B870  0E01               	movlw	1
  8159  00B872  D007               	goto	L36
  8160  00B874                     l585:
  8161                           
  8162                           ;standbyMode.c: 607: returnValue = 2;
  8163                           
  8164                           ;standbyMode.c: 606: case 18:
  8165                           
  8166                           ;standbyMode.c: 603: break;
  8167                           
  8168                           ;standbyMode.c: 602: returnValue = 1;
  8169                           
  8170                           ;standbyMode.c: 601: case 17:
  8171                           
  8172                           ;standbyMode.c: 598: break;
  8173                           
  8174                           ;standbyMode.c: 597: returnValue = 2;
  8175  00B874  0E00               	movlw	0
  8176  00B876  6E06               	movwf	getLong@returnValue+1,c
  8177  00B878  0E02               	movlw	2
  8178  00B87A  D003               	goto	L36
  8179  00B87C                     l588:
  8180                           
  8181                           ;standbyMode.c: 612: returnValue = 3;
  8182  00B87C  0E00               	movlw	0
  8183  00B87E  6E06               	movwf	getLong@returnValue+1,c
  8184  00B880  0E03               	movlw	3
  8185  00B882                     L36:
  8186  00B882  6E05               	movwf	getLong@returnValue,c
  8187                           
  8188                           ;standbyMode.c: 633: break;
  8189  00B884  D074               	goto	l578
  8190  00B886                     
  8191                           ;standbyMode.c: 731: returnValue = 0;
  8192  00B886  0E00               	movlw	0
  8193  00B888  6E06               	movwf	getLong@returnValue+1,c
  8194  00B88A  0E00               	movlw	0
  8195  00B88C  D7FA               	goto	L36
  8196  00B88E                     l576:
  8197  00B88E  C001  F003         	movff	getLong@code,??_getLong
  8198  00B892  C002  F004         	movff	getLong@code+1,??_getLong+1
  8199                           
  8200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8201                           ; Switch size 1, requested type "space"
  8202                           ; Number of cases is 1, Range of values is 0 to 0
  8203                           ; switch strategies available:
  8204                           ; Name         Instructions Cycles
  8205                           ; simple_byte            4     3 (average)
  8206                           ;	Chosen strategy is simple_byte
  8207  00B896  5004               	movf	??_getLong+1,w,c
  8208  00B898  0A00               	xorlw	0	; case 0
  8209  00B89A  A4D8               	btfss	status,2,c
  8210  00B89C  D7F4               	goto	l612
  8211                           
  8212                           ; Switch size 1, requested type "space"
  8213                           ; Number of cases is 34, Range of values is 5 to 46
  8214                           ; switch strategies available:
  8215                           ; Name         Instructions Cycles
  8216                           ; simple_byte          103    52 (average)
  8217                           ;	Chosen strategy is simple_byte
  8218  00B89E  5003               	movf	??_getLong,w,c
  8219  00B8A0  0A05               	xorlw	5	; case 5
  8220  00B8A2  B4D8               	btfsc	status,2,c
  8221  00B8A4  D7E3               	goto	l581
  8222  00B8A6  0A03               	xorlw	3	; case 6
  8223  00B8A8  B4D8               	btfsc	status,2,c
  8224  00B8AA  D7E4               	goto	l585
  8225  00B8AC  0A01               	xorlw	1	; case 7
  8226  00B8AE  B4D8               	btfsc	status,2,c
  8227  00B8B0  D7E5               	goto	l588
  8228  00B8B2  0A0B               	xorlw	11	; case 12
  8229  00B8B4  B4D8               	btfsc	status,2,c
  8230  00B8B6  D7DA               	goto	l581
  8231  00B8B8  0A01               	xorlw	1	; case 13
  8232  00B8BA  B4D8               	btfsc	status,2,c
  8233  00B8BC  D7DB               	goto	l585
  8234  00B8BE  0A03               	xorlw	3	; case 14
  8235  00B8C0  B4D8               	btfsc	status,2,c
  8236  00B8C2  D7DC               	goto	l588
  8237  00B8C4  0A01               	xorlw	1	; case 15
  8238  00B8C6  B4D8               	btfsc	status,2,c
  8239  00B8C8  D7D1               	goto	l581
  8240  00B8CA  0A1F               	xorlw	31	; case 16
  8241  00B8CC  B4D8               	btfsc	status,2,c
  8242  00B8CE  D7D2               	goto	l585
  8243  00B8D0  0A01               	xorlw	1	; case 17
  8244  00B8D2  B4D8               	btfsc	status,2,c
  8245  00B8D4  D7CB               	goto	l581
  8246  00B8D6  0A03               	xorlw	3	; case 18
  8247  00B8D8  B4D8               	btfsc	status,2,c
  8248  00B8DA  D7CC               	goto	l585
  8249  00B8DC  0A01               	xorlw	1	; case 19
  8250  00B8DE  B4D8               	btfsc	status,2,c
  8251  00B8E0  D7CD               	goto	l588
  8252  00B8E2  0A07               	xorlw	7	; case 20
  8253  00B8E4  B4D8               	btfsc	status,2,c
  8254  00B8E6  D7C2               	goto	l581
  8255  00B8E8  0A01               	xorlw	1	; case 21
  8256  00B8EA  B4D8               	btfsc	status,2,c
  8257  00B8EC  D7C3               	goto	l585
  8258  00B8EE  0A0D               	xorlw	13	; case 24
  8259  00B8F0  B4D8               	btfsc	status,2,c
  8260  00B8F2  D7BC               	goto	l581
  8261  00B8F4  0A01               	xorlw	1	; case 25
  8262  00B8F6  B4D8               	btfsc	status,2,c
  8263  00B8F8  D7BD               	goto	l585
  8264  00B8FA  0A05               	xorlw	5	; case 28
  8265  00B8FC  B4D8               	btfsc	status,2,c
  8266  00B8FE  D7BA               	goto	l585
  8267  00B900  0A01               	xorlw	1	; case 29
  8268  00B902  B4D8               	btfsc	status,2,c
  8269  00B904  D7BB               	goto	l588
  8270  00B906  0A03               	xorlw	3	; case 30
  8271  00B908  B4D8               	btfsc	status,2,c
  8272  00B90A  D7B8               	goto	l588
  8273  00B90C  0A01               	xorlw	1	; case 31
  8274  00B90E  B4D8               	btfsc	status,2,c
  8275  00B910  D7B1               	goto	l585
  8276  00B912  0A3F               	xorlw	63	; case 32
  8277  00B914  B4D8               	btfsc	status,2,c
  8278  00B916  D7AA               	goto	l581
  8279  00B918  0A01               	xorlw	1	; case 33
  8280  00B91A  B4D8               	btfsc	status,2,c
  8281  00B91C  D7AB               	goto	l585
  8282  00B91E  0A03               	xorlw	3	; case 34
  8283  00B920  B4D8               	btfsc	status,2,c
  8284  00B922  D7A4               	goto	l581
  8285  00B924  0A01               	xorlw	1	; case 35
  8286  00B926  B4D8               	btfsc	status,2,c
  8287  00B928  D7A1               	goto	l581
  8288  00B92A  0A07               	xorlw	7	; case 36
  8289  00B92C  B4D8               	btfsc	status,2,c
  8290  00B92E  D79E               	goto	l581
  8291  00B930  0A01               	xorlw	1	; case 37
  8292  00B932  B4D8               	btfsc	status,2,c
  8293  00B934  D79F               	goto	l585
  8294  00B936  0A03               	xorlw	3	; case 38
  8295  00B938  B4D8               	btfsc	status,2,c
  8296  00B93A  D79C               	goto	l585
  8297  00B93C  0A01               	xorlw	1	; case 39
  8298  00B93E  B4D8               	btfsc	status,2,c
  8299  00B940  D79D               	goto	l588
  8300  00B942  0A0F               	xorlw	15	; case 40
  8301  00B944  B4D8               	btfsc	status,2,c
  8302  00B946  D79A               	goto	l588
  8303  00B948  0A01               	xorlw	1	; case 41
  8304  00B94A  B4D8               	btfsc	status,2,c
  8305  00B94C  D793               	goto	l585
  8306  00B94E  0A03               	xorlw	3	; case 42
  8307  00B950  B4D8               	btfsc	status,2,c
  8308  00B952  D78C               	goto	l581
  8309  00B954  0A01               	xorlw	1	; case 43
  8310  00B956  B4D8               	btfsc	status,2,c
  8311  00B958  D789               	goto	l581
  8312  00B95A  0A07               	xorlw	7	; case 44
  8313  00B95C  B4D8               	btfsc	status,2,c
  8314  00B95E  D78A               	goto	l585
  8315  00B960  0A01               	xorlw	1	; case 45
  8316  00B962  B4D8               	btfsc	status,2,c
  8317  00B964  D78B               	goto	l588
  8318  00B966  0A03               	xorlw	3	; case 46
  8319  00B968  B4D8               	btfsc	status,2,c
  8320  00B96A  D788               	goto	l588
  8321  00B96C  D78C               	goto	l612
  8322  00B96E                     l578:
  8323                           
  8324                           ;standbyMode.c: 734: return returnValue;
  8325  00B96E  C005  F001         	movff	getLong@returnValue,?_getLong
  8326  00B972  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  8327  00B976  0012               	return		;funcret
  8328  00B978                     __end_of_getLong:
  8329                           	opt stack 0
  8330                           tblptru	equ	0xFF8
  8331                           tblptrh	equ	0xFF7
  8332                           tblptrl	equ	0xFF6
  8333                           tablat	equ	0xFF5
  8334                           prodh	equ	0xFF4
  8335                           prodl	equ	0xFF3
  8336                           postinc0	equ	0xFEE
  8337                           wreg	equ	0xFE8
  8338                           postdec1	equ	0xFE5
  8339                           plusw1	equ	0xFE3
  8340                           fsr1l	equ	0xFE1
  8341                           indf2	equ	0xFDF
  8342                           postinc2	equ	0xFDE
  8343                           postdec2	equ	0xFDD
  8344                           plusw2	equ	0xFDB
  8345                           fsr2h	equ	0xFDA
  8346                           fsr2l	equ	0xFD9
  8347                           status	equ	0xFD8
  8348                           
  8349 ;; *************** function _getFlat *****************
  8350 ;; Defined at:
  8351 ;;		line 399 in file "standbyMode.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  code            2    0[COMRAM] unsigned int 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  returnValue     2    4[COMRAM] unsigned int 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  2    0[COMRAM] unsigned int 
  8358 ;; Registers used:
  8359 ;;		wreg, status,2, status,0
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;Total ram usage:        6 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; This function calls:
  8372 ;;		Nothing
  8373 ;; This function is called by:
  8374 ;;		_standbyMode
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           	psect	text11
  8379  00B58C                     __ptext11:
  8380                           	opt stack 0
  8381  00B58C                     _getFlat:
  8382                           	opt stack 29
  8383                           
  8384                           ;standbyMode.c: 400: unsigned int returnValue = 0;
  8385                           
  8386                           ;incstack = 0
  8387  00B58C  0E00               	movlw	0
  8388  00B58E  6E06               	movwf	getFlat@returnValue+1,c
  8389  00B590  0E00               	movlw	0
  8390  00B592  6E05               	movwf	getFlat@returnValue,c
  8391                           
  8392                           ;standbyMode.c: 402: switch(code){
  8393  00B594  D00D               	goto	l541
  8394  00B596                     
  8395                           ;standbyMode.c: 405: returnValue = 1;
  8396  00B596  0E00               	movlw	0
  8397  00B598  6E06               	movwf	getFlat@returnValue+1,c
  8398  00B59A  0E01               	movlw	1
  8399  00B59C  D003               	goto	L42
  8400  00B59E                     
  8401                           ;standbyMode.c: 430: returnValue = 2;
  8402                           
  8403                           ;standbyMode.c: 429: case 11:
  8404                           
  8405                           ;standbyMode.c: 426: break;
  8406                           
  8407                           ;standbyMode.c: 425: returnValue = 1;
  8408                           
  8409                           ;standbyMode.c: 424: case 10:
  8410                           
  8411                           ;standbyMode.c: 421: break;
  8412                           
  8413                           ;standbyMode.c: 420: returnValue = 2;
  8414                           
  8415                           ;standbyMode.c: 419: case 9:
  8416                           
  8417                           ;standbyMode.c: 416: break;
  8418                           
  8419                           ;standbyMode.c: 415: returnValue = 1;
  8420                           
  8421                           ;standbyMode.c: 414: case 8:
  8422                           
  8423                           ;standbyMode.c: 411: break;
  8424                           
  8425                           ;standbyMode.c: 410: returnValue = 2;
  8426  00B59E  0E00               	movlw	0
  8427  00B5A0  6E06               	movwf	getFlat@returnValue+1,c
  8428  00B5A2  0E02               	movlw	2
  8429  00B5A4                     L42:
  8430  00B5A4  6E05               	movwf	getFlat@returnValue,c
  8431                           
  8432                           ;standbyMode.c: 436: break;
  8433  00B5A6  D065               	goto	l543
  8434  00B5A8                     
  8435                           ;standbyMode.c: 549: returnValue = 0;
  8436  00B5A8  0E00               	movlw	0
  8437  00B5AA  6E06               	movwf	getFlat@returnValue+1,c
  8438  00B5AC  0E00               	movlw	0
  8439  00B5AE  D7FA               	goto	L42
  8440  00B5B0                     l541:
  8441  00B5B0  C001  F003         	movff	getFlat@code,??_getFlat
  8442  00B5B4  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  8443                           
  8444                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8445                           ; Switch size 1, requested type "space"
  8446                           ; Number of cases is 1, Range of values is 0 to 0
  8447                           ; switch strategies available:
  8448                           ; Name         Instructions Cycles
  8449                           ; simple_byte            4     3 (average)
  8450                           ;	Chosen strategy is simple_byte
  8451  00B5B8  5004               	movf	??_getFlat+1,w,c
  8452  00B5BA  0A00               	xorlw	0	; case 0
  8453  00B5BC  A4D8               	btfss	status,2,c
  8454  00B5BE  D7F4               	goto	l572
  8455                           
  8456                           ; Switch size 1, requested type "space"
  8457                           ; Number of cases is 29, Range of values is 3 to 46
  8458                           ; switch strategies available:
  8459                           ; Name         Instructions Cycles
  8460                           ; simple_byte           88    45 (average)
  8461                           ;	Chosen strategy is simple_byte
  8462  00B5C0  5003               	movf	??_getFlat,w,c
  8463  00B5C2  0A03               	xorlw	3	; case 3
  8464  00B5C4  B4D8               	btfsc	status,2,c
  8465  00B5C6  D7E7               	goto	l542
  8466  00B5C8  0A07               	xorlw	7	; case 4
  8467  00B5CA  B4D8               	btfsc	status,2,c
  8468  00B5CC  D7E8               	goto	l544
  8469  00B5CE  0A0C               	xorlw	12	; case 8
  8470  00B5D0  B4D8               	btfsc	status,2,c
  8471  00B5D2  D7E1               	goto	l542
  8472  00B5D4  0A01               	xorlw	1	; case 9
  8473  00B5D6  B4D8               	btfsc	status,2,c
  8474  00B5D8  D7E2               	goto	l544
  8475  00B5DA  0A03               	xorlw	3	; case 10
  8476  00B5DC  B4D8               	btfsc	status,2,c
  8477  00B5DE  D7DB               	goto	l542
  8478  00B5E0  0A01               	xorlw	1	; case 11
  8479  00B5E2  B4D8               	btfsc	status,2,c
  8480  00B5E4  D7DC               	goto	l544
  8481  00B5E6  0A1A               	xorlw	26	; case 17
  8482  00B5E8  B4D8               	btfsc	status,2,c
  8483  00B5EA  D7D5               	goto	l542
  8484  00B5EC  0A03               	xorlw	3	; case 18
  8485  00B5EE  B4D8               	btfsc	status,2,c
  8486  00B5F0  D7D2               	goto	l542
  8487  00B5F2  0A01               	xorlw	1	; case 19
  8488  00B5F4  B4D8               	btfsc	status,2,c
  8489  00B5F6  D7CF               	goto	l542
  8490  00B5F8  0A07               	xorlw	7	; case 20
  8491  00B5FA  B4D8               	btfsc	status,2,c
  8492  00B5FC  D7D0               	goto	l544
  8493  00B5FE  0A01               	xorlw	1	; case 21
  8494  00B600  B4D8               	btfsc	status,2,c
  8495  00B602  D7CD               	goto	l544
  8496  00B604  0A03               	xorlw	3	; case 22
  8497  00B606  B4D8               	btfsc	status,2,c
  8498  00B608  D7C6               	goto	l542
  8499  00B60A  0A01               	xorlw	1	; case 23
  8500  00B60C  B4D8               	btfsc	status,2,c
  8501  00B60E  D7C7               	goto	l544
  8502  00B610  0A0D               	xorlw	13	; case 26
  8503  00B612  B4D8               	btfsc	status,2,c
  8504  00B614  D7C4               	goto	l544
  8505  00B616  0A01               	xorlw	1	; case 27
  8506  00B618  B4D8               	btfsc	status,2,c
  8507  00B61A  D7C1               	goto	l544
  8508  00B61C  0A3B               	xorlw	59	; case 32
  8509  00B61E  B4D8               	btfsc	status,2,c
  8510  00B620  D7BA               	goto	l542
  8511  00B622  0A01               	xorlw	1	; case 33
  8512  00B624  B4D8               	btfsc	status,2,c
  8513  00B626  D7B7               	goto	l542
  8514  00B628  0A03               	xorlw	3	; case 34
  8515  00B62A  B4D8               	btfsc	status,2,c
  8516  00B62C  D7B8               	goto	l544
  8517  00B62E  0A01               	xorlw	1	; case 35
  8518  00B630  B4D8               	btfsc	status,2,c
  8519  00B632  D7B1               	goto	l542
  8520  00B634  0A07               	xorlw	7	; case 36
  8521  00B636  B4D8               	btfsc	status,2,c
  8522  00B638  D7B2               	goto	l544
  8523  00B63A  0A01               	xorlw	1	; case 37
  8524  00B63C  B4D8               	btfsc	status,2,c
  8525  00B63E  D7AF               	goto	l544
  8526  00B640  0A03               	xorlw	3	; case 38
  8527  00B642  B4D8               	btfsc	status,2,c
  8528  00B644  D7A8               	goto	l542
  8529  00B646  0A01               	xorlw	1	; case 39
  8530  00B648  B4D8               	btfsc	status,2,c
  8531  00B64A  D7A5               	goto	l542
  8532  00B64C  0A0F               	xorlw	15	; case 40
  8533  00B64E  B4D8               	btfsc	status,2,c
  8534  00B650  D7A2               	goto	l542
  8535  00B652  0A01               	xorlw	1	; case 41
  8536  00B654  B4D8               	btfsc	status,2,c
  8537  00B656  D7A3               	goto	l544
  8538  00B658  0A03               	xorlw	3	; case 42
  8539  00B65A  B4D8               	btfsc	status,2,c
  8540  00B65C  D79C               	goto	l542
  8541  00B65E  0A01               	xorlw	1	; case 43
  8542  00B660  B4D8               	btfsc	status,2,c
  8543  00B662  D79D               	goto	l544
  8544  00B664  0A07               	xorlw	7	; case 44
  8545  00B666  B4D8               	btfsc	status,2,c
  8546  00B668  D796               	goto	l542
  8547  00B66A  0A02               	xorlw	2	; case 46
  8548  00B66C  B4D8               	btfsc	status,2,c
  8549  00B66E  D793               	goto	l542
  8550  00B670  D79B               	goto	l572
  8551  00B672                     l543:
  8552                           
  8553                           ;standbyMode.c: 552: return returnValue;
  8554  00B672  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8555  00B676  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8556  00B67A  0012               	return		;funcret
  8557  00B67C                     __end_of_getFlat:
  8558                           	opt stack 0
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           postinc0	equ	0xFEE
  8566                           wreg	equ	0xFE8
  8567                           postdec1	equ	0xFE5
  8568                           plusw1	equ	0xFE3
  8569                           fsr1l	equ	0xFE1
  8570                           indf2	equ	0xFDF
  8571                           postinc2	equ	0xFDE
  8572                           postdec2	equ	0xFDD
  8573                           plusw2	equ	0xFDB
  8574                           fsr2h	equ	0xFDA
  8575                           fsr2l	equ	0xFD9
  8576                           status	equ	0xFD8
  8577                           
  8578 ;; *************** function _food_press *****************
  8579 ;; Defined at:
  8580 ;;		line 1135 in file "standbyMode.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  dietSum         2   40[COMRAM] unsigned int 
  8583 ;;  drawer          2   42[COMRAM] unsigned int 
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;  keypress        1   54[COMRAM] unsigned char 
  8586 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8587 ;;  count           2   52[COMRAM] unsigned int 
  8588 ;;  isValid         2   50[COMRAM] unsigned int 
  8589 ;;  backCheck       2   48[COMRAM] unsigned int 
  8590 ;;  tally           2   46[COMRAM] unsigned int 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  2   40[COMRAM] unsigned int 
  8593 ;; Registers used:
  8594 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;Total ram usage:       23 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    3
  8607 ;; This function calls:
  8608 ;;		_check_food
  8609 ;;		_get_digits
  8610 ;;		_lcdInst
  8611 ;;		_printf
  8612 ;;		_putch
  8613 ;; This function is called by:
  8614 ;;		_standbyMode
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text12
  8619  00BD3C                     __ptext12:
  8620                           	opt stack 0
  8621  00BD3C                     _food_press:
  8622                           	opt stack 26
  8623                           
  8624                           ;incstack = 0
  8625                           ;standbyMode.c: 1137: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8626  00BD3C  0E01               	movlw	1
  8627  00BD3E  ECDC  F056         	call	_lcdInst
  8628  00BD42  0EC3               	movlw	195
  8629  00BD44  6E2D               	movwf	??_food_press& (0+255),c
  8630  00BD46  0ECD               	movlw	205
  8631  00BD48                     u12367:
  8632  00BD48  2EE8               	decfsz	wreg,f,c
  8633  00BD4A  D7FE               	bra	u12367
  8634  00BD4C  2E2D               	decfsz	??_food_press& (0+255),f,c
  8635  00BD4E  D7FC               	bra	u12367
  8636  00BD50  F000               	nop	
  8637                           
  8638                           ;standbyMode.c: 1138: printf("Drawer %i food:", drawer);
  8639  00BD52  0E6E               	movlw	low STR_65
  8640  00BD54  6E0D               	movwf	printf@f,c
  8641  00BD56  0EFA               	movlw	high STR_65
  8642  00BD58  6E0E               	movwf	printf@f+1,c
  8643  00BD5A  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8644  00BD5E  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8645  00BD62  EC47  F063         	call	_printf	;wreg free
  8646                           
  8647                           ;standbyMode.c: 1139: lcdInst(0xC0);;
  8648  00BD66  0EC0               	movlw	192
  8649  00BD68  ECDC  F056         	call	_lcdInst
  8650                           
  8651                           ;standbyMode.c: 1141: unsigned int tally = 0;
  8652  00BD6C  0E00               	movlw	0
  8653  00BD6E  6E30               	movwf	food_press@tally+1,c
  8654  00BD70  0E00               	movlw	0
  8655  00BD72  6E2F               	movwf	food_press@tally,c
  8656                           
  8657                           ;standbyMode.c: 1142: unsigned int count = 0;
  8658  00BD74  0E00               	movlw	0
  8659  00BD76  6E36               	movwf	food_press@count+1,c
  8660  00BD78  0E00               	movlw	0
  8661  00BD7A  6E35               	movwf	food_press@count,c
  8662                           
  8663                           ;standbyMode.c: 1143: unsigned int foodTable[4] = {0, 0, 0, 0};
  8664  00BD7C  EE20  F0D0         	lfsr	2,food_press@F3117
  8665  00BD80  EE10  F038         	lfsr	1,food_press@foodTable
  8666  00BD84  0E07               	movlw	7
  8667  00BD86                     u8801:
  8668  00BD86  CFDB FFE3          	movff	plusw2,plusw1
  8669  00BD8A  06E8               	decf	wreg,f,c
  8670  00BD8C  E2FC               	bc	u8801
  8671                           
  8672                           ;standbyMode.c: 1144: unsigned int isValid = 0;
  8673  00BD8E  0E00               	movlw	0
  8674  00BD90  6E34               	movwf	food_press@isValid+1,c
  8675  00BD92  0E00               	movlw	0
  8676  00BD94  6E33               	movwf	food_press@isValid,c
  8677                           
  8678                           ;standbyMode.c: 1145: unsigned int backCheck = 0;
  8679  00BD96  0E00               	movlw	0
  8680  00BD98  6E32               	movwf	food_press@backCheck+1,c
  8681  00BD9A  0E00               	movlw	0
  8682  00BD9C  6E31               	movwf	food_press@backCheck,c
  8683                           
  8684                           ;standbyMode.c: 1146: tally = get_digits(dietSum);
  8685  00BD9E  C029  F001         	movff	food_press@dietSum,get_digits@sum
  8686  00BDA2  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  8687  00BDA6  EC90  F059         	call	_get_digits	;wreg free
  8688  00BDAA  C001  F02F         	movff	?_get_digits,food_press@tally
  8689  00BDAE  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  8690  00BDB2                     
  8691                           ;standbyMode.c: 1149: while(PORTBbits.RB1 == 0){ continue; }
  8692  00BDB2  A281               	btfss	3969,1,c	;volatile
  8693  00BDB4  D7FE               	goto	l767
  8694                           
  8695                           ;standbyMode.c: 1150: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8696  00BDB6  3881               	swapf	3969,w,c	;volatile
  8697  00BDB8  0B0F               	andlw	15
  8698  00BDBA  0B0F               	andlw	15
  8699  00BDBC  6E37               	movwf	food_press@keypress,c
  8700  00BDBE  B281               	btfsc	3969,1,c	;volatile
  8701  00BDC0  D7FE               	goto	l772
  8702                           
  8703                           ;standbyMode.c: 1153: if(keypress == 15){
  8704  00BDC2  0E0F               	movlw	15
  8705  00BDC4  1837               	xorwf	food_press@keypress,w,c
  8706  00BDC6  B4D8               	btfsc	status,2,c
  8707  00BDC8  D070               	goto	l775
  8708                           
  8709                           ;standbyMode.c: 1156: else if (keypress == 14){
  8710                           
  8711                           ;standbyMode.c: 1155: }
  8712                           
  8713                           ;standbyMode.c: 1154: break;
  8714  00BDCA  0E0E               	movlw	14
  8715  00BDCC  1837               	xorwf	food_press@keypress,w,c
  8716  00BDCE  A4D8               	btfss	status,2,c
  8717  00BDD0  D005               	goto	l777
  8718                           
  8719                           ;standbyMode.c: 1157: backCheck = 1;
  8720  00BDD2  0E00               	movlw	0
  8721  00BDD4  6E32               	movwf	food_press@backCheck+1,c
  8722  00BDD6  0E01               	movlw	1
  8723  00BDD8  6E31               	movwf	food_press@backCheck,c
  8724                           
  8725                           ;standbyMode.c: 1158: break;
  8726  00BDDA  D067               	goto	l775
  8727  00BDDC                     l777:
  8728                           
  8729                           ;standbyMode.c: 1160: else if (keypress == 0 || keypress == 1 || keypress == 2){
  8730  00BDDC  5037               	movf	food_press@keypress,w,c
  8731  00BDDE  B4D8               	btfsc	status,2,c
  8732  00BDE0  D007               	goto	u8870
  8733  00BDE2  0437               	decf	food_press@keypress,w,c
  8734  00BDE4  B4D8               	btfsc	status,2,c
  8735  00BDE6  D004               	goto	u8870
  8736  00BDE8  0E02               	movlw	2
  8737  00BDEA  1837               	xorwf	food_press@keypress,w,c
  8738  00BDEC  A4D8               	btfss	status,2,c
  8739  00BDEE  D02C               	goto	l779
  8740  00BDF0                     u8870:
  8741                           
  8742                           ;standbyMode.c: 1161: if (count < tally){
  8743  00BDF0  502F               	movf	food_press@tally,w,c
  8744  00BDF2  5C35               	subwf	food_press@count,w,c
  8745  00BDF4  5030               	movf	food_press@tally+1,w,c
  8746  00BDF6  5836               	subwfb	food_press@count+1,w,c
  8747  00BDF8  B0D8               	btfsc	status,0,c
  8748  00BDFA  D7DB               	goto	l767
  8749                           
  8750                           ;standbyMode.c: 1162: putch(input[keypress]);
  8751  00BDFC  5037               	movf	food_press@keypress,w,c
  8752  00BDFE  0D01               	mullw	1
  8753  00BE00  0E84               	movlw	low _input
  8754  00BE02  24F3               	addwf	prodl,w,c
  8755  00BE04  6EF6               	movwf	tblptrl,c
  8756  00BE06  0EF9               	movlw	high _input
  8757  00BE08  20F4               	addwfc	prodh,w,c
  8758  00BE0A  6EF7               	movwf	tblptrh,c
  8759  00BE0C                     	if	1	;There are 3 active tblptr bytes
  8760  00BE0C  6AF8               	clrf	tblptru,c
  8761  00BE0E  0E00               	movlw	low (__mediumconst shr (0+16))
  8762  00BE10  22F8               	addwfc	tblptru,f,c
  8763  00BE12                     	endif
  8764  00BE12  0008               	tblrd		*
  8765  00BE14  50F5               	movf	tablat,w,c
  8766  00BE16  ECF0  F056         	call	_putch
  8767                           
  8768                           ;standbyMode.c: 1163: foodTable[count] = keypress + 1;
  8769  00BE1A  5037               	movf	food_press@keypress,w,c
  8770  00BE1C  6E2D               	movwf	??_food_press& (0+255),c
  8771  00BE1E  6A2E               	clrf	(??_food_press+1)& (0+255),c
  8772  00BE20  0E01               	movlw	1
  8773  00BE22  262D               	addwf	??_food_press,f,c
  8774  00BE24  0E00               	movlw	0
  8775  00BE26  222E               	addwfc	??_food_press+1,f,c
  8776  00BE28  90D8               	bcf	status,0,c
  8777  00BE2A  3435               	rlcf	food_press@count,w,c
  8778  00BE2C  6ED9               	movwf	fsr2l,c
  8779  00BE2E  3436               	rlcf	food_press@count+1,w,c
  8780  00BE30  6EDA               	movwf	fsr2h,c
  8781  00BE32  0E38               	movlw	low food_press@foodTable
  8782  00BE34  26D9               	addwf	fsr2l,f,c
  8783  00BE36  0E00               	movlw	high food_press@foodTable
  8784  00BE38  22DA               	addwfc	fsr2h,f,c
  8785  00BE3A  C02D  FFDE         	movff	??_food_press,postinc2
  8786  00BE3E  C02E  FFDD         	movff	??_food_press+1,postdec2
  8787                           
  8788                           ;standbyMode.c: 1164: count += 1;
  8789  00BE42  4A35               	infsnz	food_press@count,f,c
  8790  00BE44  2A36               	incf	food_press@count+1,f,c
  8791                           
  8792                           ;standbyMode.c: 1165: }
  8793                           ;standbyMode.c: 1166: }
  8794  00BE46  D7B5               	goto	l767
  8795  00BE48                     l779:
  8796                           
  8797                           ;standbyMode.c: 1167: else if (keypress == 12){
  8798  00BE48  0E0C               	movlw	12
  8799  00BE4A  1837               	xorwf	food_press@keypress,w,c
  8800  00BE4C  A4D8               	btfss	status,2,c
  8801  00BE4E  D7B1               	goto	l767
  8802                           
  8803                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8804  00BE50  0E01               	movlw	1
  8805  00BE52  ECDC  F056         	call	_lcdInst
  8806  00BE56  0EC3               	movlw	195
  8807  00BE58  6E2D               	movwf	??_food_press& (0+255),c
  8808  00BE5A  0ECD               	movlw	205
  8809  00BE5C                     u12377:
  8810  00BE5C  2EE8               	decfsz	wreg,f,c
  8811  00BE5E  D7FE               	bra	u12377
  8812  00BE60  2E2D               	decfsz	??_food_press& (0+255),f,c
  8813  00BE62  D7FC               	bra	u12377
  8814  00BE64  F000               	nop	
  8815                           
  8816                           ;standbyMode.c: 1169: printf("Drawer %i food:", drawer);
  8817  00BE66  0E6E               	movlw	low STR_65
  8818  00BE68  6E0D               	movwf	printf@f,c
  8819  00BE6A  0EFA               	movlw	high STR_65
  8820  00BE6C  6E0E               	movwf	printf@f+1,c
  8821  00BE6E  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8822  00BE72  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8823  00BE76  EC47  F063         	call	_printf	;wreg free
  8824                           
  8825                           ;standbyMode.c: 1170: lcdInst(0xC0);;
  8826  00BE7A  0EC0               	movlw	192
  8827  00BE7C  ECDC  F056         	call	_lcdInst
  8828                           
  8829                           ;standbyMode.c: 1171: count = 0;
  8830  00BE80  0E00               	movlw	0
  8831  00BE82  6E36               	movwf	food_press@count+1,c
  8832  00BE84  0E00               	movlw	0
  8833  00BE86  6E35               	movwf	food_press@count,c
  8834                           
  8835                           ;standbyMode.c: 1172: foodTable[0] = 0;
  8836  00BE88  0E00               	movlw	0
  8837  00BE8A  6E39               	movwf	food_press@foodTable+1,c
  8838  00BE8C  0E00               	movlw	0
  8839  00BE8E  6E38               	movwf	food_press@foodTable,c
  8840                           
  8841                           ;standbyMode.c: 1173: foodTable[1] = 0;
  8842  00BE90  0E00               	movlw	0
  8843  00BE92  6E3B               	movwf	food_press@foodTable+3,c
  8844  00BE94  0E00               	movlw	0
  8845  00BE96  6E3A               	movwf	food_press@foodTable+2,c
  8846                           
  8847                           ;standbyMode.c: 1174: foodTable[2] = 0;
  8848  00BE98  0E00               	movlw	0
  8849  00BE9A  6E3D               	movwf	food_press@foodTable+5,c
  8850  00BE9C  0E00               	movlw	0
  8851  00BE9E  6E3C               	movwf	food_press@foodTable+4,c
  8852                           
  8853                           ;standbyMode.c: 1175: foodTable[3] = 0;
  8854  00BEA0  0E00               	movlw	0
  8855  00BEA2  6E3F               	movwf	food_press@foodTable+7,c
  8856  00BEA4  0E00               	movlw	0
  8857  00BEA6  6E3E               	movwf	food_press@foodTable+6,c
  8858  00BEA8  D784               	goto	l767
  8859  00BEAA                     l775:
  8860                           
  8861                           ;standbyMode.c: 1176: }
  8862                           ;standbyMode.c: 1177: }
  8863                           ;standbyMode.c: 1179: if (backCheck == 1){
  8864  00BEAA  0431               	decf	food_press@backCheck,w,c
  8865  00BEAC  1032               	iorwf	food_press@backCheck+1,w,c
  8866  00BEAE  A4D8               	btfss	status,2,c
  8867  00BEB0  D005               	goto	l786
  8868                           
  8869                           ;standbyMode.c: 1180: return 100;
  8870  00BEB2  0E00               	movlw	0
  8871  00BEB4  6E2A               	movwf	?_food_press+1,c
  8872  00BEB6  0E64               	movlw	100
  8873  00BEB8  6E29               	movwf	?_food_press,c
  8874                           
  8875                           ;standbyMode.c: 1181: }
  8876  00BEBA  0012               	return	
  8877  00BEBC                     l786:
  8878                           
  8879                           ;standbyMode.c: 1182: else {
  8880                           ;standbyMode.c: 1183: isValid = check_food(dietSum, foodTable);
  8881  00BEBC  C029  F001         	movff	food_press@dietSum,check_food@sum
  8882  00BEC0  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  8883  00BEC4  0E38               	movlw	low food_press@foodTable
  8884  00BEC6  6E03               	movwf	check_food@foodInput,c
  8885  00BEC8  0E00               	movlw	high food_press@foodTable
  8886  00BECA  6E04               	movwf	check_food@foodInput+1,c
  8887  00BECC  EC91  F06A         	call	_check_food	;wreg free
  8888  00BED0  C001  F033         	movff	?_check_food,food_press@isValid
  8889  00BED4  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  8890                           
  8891                           ;standbyMode.c: 1185: if (isValid == 0){
  8892  00BED8  5033               	movf	food_press@isValid,w,c
  8893  00BEDA  1034               	iorwf	food_press@isValid+1,w,c
  8894  00BEDC  A4D8               	btfss	status,2,c
  8895  00BEDE  D026               	goto	l789
  8896                           
  8897                           ;standbyMode.c: 1186: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8898  00BEE0  0E01               	movlw	1
  8899  00BEE2  ECDC  F056         	call	_lcdInst
  8900  00BEE6  0EC3               	movlw	195
  8901  00BEE8  6E2D               	movwf	??_food_press& (0+255),c
  8902  00BEEA  0ECD               	movlw	205
  8903  00BEEC                     u12387:
  8904  00BEEC  2EE8               	decfsz	wreg,f,c
  8905  00BEEE  D7FE               	bra	u12387
  8906  00BEF0  2E2D               	decfsz	??_food_press& (0+255),f,c
  8907  00BEF2  D7FC               	bra	u12387
  8908  00BEF4  F000               	nop	
  8909                           
  8910                           ;standbyMode.c: 1187: printf("Invalid food!");
  8911  00BEF6  0E84               	movlw	low STR_67
  8912  00BEF8  6E0D               	movwf	printf@f,c
  8913  00BEFA  0EFB               	movlw	high STR_67
  8914  00BEFC  6E0E               	movwf	printf@f+1,c
  8915  00BEFE  EC47  F063         	call	_printf	;wreg free
  8916                           
  8917                           ;standbyMode.c: 1188: lcdInst(0xC0);;
  8918  00BF02  0EC0               	movlw	192
  8919  00BF04  ECDC  F056         	call	_lcdInst
  8920                           
  8921                           ;standbyMode.c: 1189: printf("Try again.");
  8922  00BF08  0E1F               	movlw	low STR_68
  8923  00BF0A  6E0D               	movwf	printf@f,c
  8924  00BF0C  0EFC               	movlw	high STR_68
  8925  00BF0E  6E0E               	movwf	printf@f+1,c
  8926  00BF10  EC47  F063         	call	_printf	;wreg free
  8927                           
  8928                           ;standbyMode.c: 1190: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8929  00BF14  0E33               	movlw	51
  8930  00BF16  6E2E               	movwf	(??_food_press+1)& (0+255),c
  8931  00BF18  0EBB               	movlw	187
  8932  00BF1A  6E2D               	movwf	??_food_press& (0+255),c
  8933  00BF1C  0EE0               	movlw	224
  8934  00BF1E                     u12397:
  8935  00BF1E  2EE8               	decfsz	wreg,f,c
  8936  00BF20  D7FE               	bra	u12397
  8937  00BF22  2E2D               	decfsz	??_food_press& (0+255),f,c
  8938  00BF24  D7FC               	bra	u12397
  8939  00BF26  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  8940  00BF28  D7FA               	bra	u12397
  8941                           
  8942                           ;standbyMode.c: 1191: goto START;
  8943  00BF2A  D708               	goto	_food_press
  8944  00BF2C                     l789:
  8945                           
  8946                           ;standbyMode.c: 1193: else {
  8947                           ;standbyMode.c: 1194: return isValid;
  8948  00BF2C  C033  F029         	movff	food_press@isValid,?_food_press
  8949  00BF30  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  8950  00BF34  0012               	return	
  8951  00BF36                     __end_of_food_press:
  8952                           	opt stack 0
  8953                           tblptru	equ	0xFF8
  8954                           tblptrh	equ	0xFF7
  8955                           tblptrl	equ	0xFF6
  8956                           tablat	equ	0xFF5
  8957                           prodh	equ	0xFF4
  8958                           prodl	equ	0xFF3
  8959                           postinc0	equ	0xFEE
  8960                           wreg	equ	0xFE8
  8961                           postdec1	equ	0xFE5
  8962                           plusw1	equ	0xFE3
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           plusw2	equ	0xFDB
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8
  8971                           
  8972 ;; *************** function _get_digits *****************
  8973 ;; Defined at:
  8974 ;;		line 1030 in file "standbyMode.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  sum             2    0[COMRAM] unsigned int 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  count           2    4[COMRAM] unsigned int 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  2    0[COMRAM] unsigned int 
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;Total ram usage:        6 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_food_press
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text13
  9002  00B320                     __ptext13:
  9003                           	opt stack 0
  9004  00B320                     _get_digits:
  9005                           	opt stack 28
  9006                           
  9007                           ;standbyMode.c: 1032: unsigned int count = 0;
  9008                           
  9009                           ;incstack = 0
  9010  00B320  0E00               	movlw	0
  9011  00B322  6E06               	movwf	get_digits@count+1,c
  9012  00B324  0E00               	movlw	0
  9013  00B326  6E05               	movwf	get_digits@count,c
  9014                           
  9015                           ;standbyMode.c: 1034: switch(sum){
  9016  00B328  D015               	goto	l740
  9017  00B32A                     
  9018                           ;standbyMode.c: 1047: count = 1;
  9019                           
  9020                           ;standbyMode.c: 1046: case 12:
  9021                           
  9022                           ;standbyMode.c: 1043: break;
  9023                           
  9024                           ;standbyMode.c: 1042: count = 1;
  9025                           
  9026                           ;standbyMode.c: 1041: case 7:
  9027                           
  9028                           ;standbyMode.c: 1038: break;
  9029                           
  9030                           ;standbyMode.c: 1037: count = 1;
  9031  00B32A  0E00               	movlw	0
  9032  00B32C  6E06               	movwf	get_digits@count+1,c
  9033  00B32E  0E01               	movlw	1
  9034  00B330                     L43:
  9035  00B330  6E05               	movwf	get_digits@count,c
  9036                           
  9037                           ;standbyMode.c: 1053: break;
  9038  00B332  D050               	goto	l742
  9039  00B334                     
  9040                           ;standbyMode.c: 1062: count = 2;
  9041                           
  9042                           ;standbyMode.c: 1061: case 19:
  9043                           
  9044                           ;standbyMode.c: 1058: break;
  9045                           
  9046                           ;standbyMode.c: 1057: count = 2;
  9047  00B334  0E00               	movlw	0
  9048  00B336  6E06               	movwf	get_digits@count+1,c
  9049  00B338  0E02               	movlw	2
  9050  00B33A  D7FA               	goto	L43
  9051  00B33C                     
  9052                           ;standbyMode.c: 1097: count = 3;
  9053                           
  9054                           ;standbyMode.c: 1096: case 31:
  9055                           
  9056                           ;standbyMode.c: 1093: break;
  9057                           
  9058                           ;standbyMode.c: 1092: count = 3;
  9059                           
  9060                           ;standbyMode.c: 1091: case 26:
  9061                           
  9062                           ;standbyMode.c: 1088: break;
  9063                           
  9064                           ;standbyMode.c: 1087: count = 3;
  9065                           
  9066                           ;standbyMode.c: 1086: case 22:
  9067                           
  9068                           ;standbyMode.c: 1083: break;
  9069                           
  9070                           ;standbyMode.c: 1082: count = 3;
  9071                           
  9072                           ;standbyMode.c: 1081: case 27:
  9073                           
  9074                           ;standbyMode.c: 1078: break;
  9075                           
  9076                           ;standbyMode.c: 1077: count = 3;
  9077                           
  9078                           ;standbyMode.c: 1076: case 17:
  9079                           
  9080                           ;standbyMode.c: 1073: break;
  9081                           
  9082                           ;standbyMode.c: 1072: count = 3;
  9083                           
  9084                           ;standbyMode.c: 1071: case 18:
  9085                           
  9086                           ;standbyMode.c: 1068: break;
  9087                           
  9088                           ;standbyMode.c: 1067: count = 3;
  9089  00B33C  0E00               	movlw	0
  9090  00B33E  6E06               	movwf	get_digits@count+1,c
  9091  00B340  0E03               	movlw	3
  9092  00B342  D7F6               	goto	L43
  9093  00B344                     
  9094                           ;standbyMode.c: 1122: count = 4;
  9095                           
  9096                           ;standbyMode.c: 1121: case 43:
  9097                           
  9098                           ;standbyMode.c: 1118: break;
  9099                           
  9100                           ;standbyMode.c: 1117: count = 4;
  9101                           
  9102                           ;standbyMode.c: 1116: case 39:
  9103                           
  9104                           ;standbyMode.c: 1113: break;
  9105                           
  9106                           ;standbyMode.c: 1112: count = 4;
  9107                           
  9108                           ;standbyMode.c: 1111: case 34:
  9109                           
  9110                           ;standbyMode.c: 1108: break;
  9111                           
  9112                           ;standbyMode.c: 1107: count = 4;
  9113                           
  9114                           ;standbyMode.c: 1106: case 29:
  9115                           
  9116                           ;standbyMode.c: 1103: break;
  9117                           
  9118                           ;standbyMode.c: 1102: count = 4;
  9119  00B344  0E00               	movlw	0
  9120  00B346  6E06               	movwf	get_digits@count+1,c
  9121  00B348  0E04               	movlw	4
  9122  00B34A  D7F2               	goto	L43
  9123  00B34C                     
  9124                           ;standbyMode.c: 1127: count = 0;
  9125  00B34C  0E00               	movlw	0
  9126  00B34E  6E06               	movwf	get_digits@count+1,c
  9127  00B350  0E00               	movlw	0
  9128  00B352  D7EE               	goto	L43
  9129  00B354                     l740:
  9130  00B354  C001  F003         	movff	get_digits@sum,??_get_digits
  9131  00B358  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  9132                           
  9133                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9134                           ; Switch size 1, requested type "space"
  9135                           ; Number of cases is 1, Range of values is 0 to 0
  9136                           ; switch strategies available:
  9137                           ; Name         Instructions Cycles
  9138                           ; simple_byte            4     3 (average)
  9139                           ;	Chosen strategy is simple_byte
  9140  00B35C  5004               	movf	??_get_digits+1,w,c
  9141  00B35E  0A00               	xorlw	0	; case 0
  9142  00B360  A4D8               	btfss	status,2,c
  9143  00B362  D7F4               	goto	l760
  9144                           
  9145                           ; Switch size 1, requested type "space"
  9146                           ; Number of cases is 18, Range of values is 3 to 43
  9147                           ; switch strategies available:
  9148                           ; Name         Instructions Cycles
  9149                           ; simple_byte           55    28 (average)
  9150                           ;	Chosen strategy is simple_byte
  9151  00B364  5003               	movf	??_get_digits,w,c
  9152  00B366  0A03               	xorlw	3	; case 3
  9153  00B368  B4D8               	btfsc	status,2,c
  9154  00B36A  D7DF               	goto	l741
  9155  00B36C  0A04               	xorlw	4	; case 7
  9156  00B36E  B4D8               	btfsc	status,2,c
  9157  00B370  D7DC               	goto	l741
  9158  00B372  0A0D               	xorlw	13	; case 10
  9159  00B374  B4D8               	btfsc	status,2,c
  9160  00B376  D7DE               	goto	l746
  9161  00B378  0A06               	xorlw	6	; case 12
  9162  00B37A  B4D8               	btfsc	status,2,c
  9163  00B37C  D7D6               	goto	l741
  9164  00B37E  0A01               	xorlw	1	; case 13
  9165  00B380  B4D8               	btfsc	status,2,c
  9166  00B382  D7DC               	goto	l748
  9167  00B384  0A02               	xorlw	2	; case 15
  9168  00B386  B4D8               	btfsc	status,2,c
  9169  00B388  D7D5               	goto	l746
  9170  00B38A  0A1E               	xorlw	30	; case 17
  9171  00B38C  B4D8               	btfsc	status,2,c
  9172  00B38E  D7D6               	goto	l748
  9173  00B390  0A03               	xorlw	3	; case 18
  9174  00B392  B4D8               	btfsc	status,2,c
  9175  00B394  D7D3               	goto	l748
  9176  00B396  0A01               	xorlw	1	; case 19
  9177  00B398  B4D8               	btfsc	status,2,c
  9178  00B39A  D7CC               	goto	l746
  9179  00B39C  0A05               	xorlw	5	; case 22
  9180  00B39E  B4D8               	btfsc	status,2,c
  9181  00B3A0  D7CD               	goto	l748
  9182  00B3A2  0A0F               	xorlw	15	; case 25
  9183  00B3A4  B4D8               	btfsc	status,2,c
  9184  00B3A6  D7CE               	goto	l755
  9185  00B3A8  0A03               	xorlw	3	; case 26
  9186  00B3AA  B4D8               	btfsc	status,2,c
  9187  00B3AC  D7C7               	goto	l748
  9188  00B3AE  0A01               	xorlw	1	; case 27
  9189  00B3B0  B4D8               	btfsc	status,2,c
  9190  00B3B2  D7C4               	goto	l748
  9191  00B3B4  0A06               	xorlw	6	; case 29
  9192  00B3B6  B4D8               	btfsc	status,2,c
  9193  00B3B8  D7C5               	goto	l755
  9194  00B3BA  0A02               	xorlw	2	; case 31
  9195  00B3BC  B4D8               	btfsc	status,2,c
  9196  00B3BE  D7BE               	goto	l748
  9197  00B3C0  0A3D               	xorlw	61	; case 34
  9198  00B3C2  B4D8               	btfsc	status,2,c
  9199  00B3C4  D7BF               	goto	l755
  9200  00B3C6  0A05               	xorlw	5	; case 39
  9201  00B3C8  B4D8               	btfsc	status,2,c
  9202  00B3CA  D7BC               	goto	l755
  9203  00B3CC  0A0C               	xorlw	12	; case 43
  9204  00B3CE  B4D8               	btfsc	status,2,c
  9205  00B3D0  D7B9               	goto	l755
  9206  00B3D2  D7BC               	goto	l760
  9207  00B3D4                     l742:
  9208                           
  9209                           ;standbyMode.c: 1130: return count;
  9210  00B3D4  C005  F001         	movff	get_digits@count,?_get_digits
  9211  00B3D8  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  9212  00B3DC  0012               	return		;funcret
  9213  00B3DE                     __end_of_get_digits:
  9214                           	opt stack 0
  9215                           tblptru	equ	0xFF8
  9216                           tblptrh	equ	0xFF7
  9217                           tblptrl	equ	0xFF6
  9218                           tablat	equ	0xFF5
  9219                           prodh	equ	0xFF4
  9220                           prodl	equ	0xFF3
  9221                           postinc0	equ	0xFEE
  9222                           wreg	equ	0xFE8
  9223                           postdec1	equ	0xFE5
  9224                           plusw1	equ	0xFE3
  9225                           fsr1l	equ	0xFE1
  9226                           indf2	equ	0xFDF
  9227                           postinc2	equ	0xFDE
  9228                           postdec2	equ	0xFDD
  9229                           plusw2	equ	0xFDB
  9230                           fsr2h	equ	0xFDA
  9231                           fsr2l	equ	0xFD9
  9232                           status	equ	0xFD8
  9233                           
  9234 ;; *************** function _check_food *****************
  9235 ;; Defined at:
  9236 ;;		line 21 in file "standbyMode.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;  sum             2    0[COMRAM] unsigned int 
  9239 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  9240 ;;		 -> food_press@foodTable(8), 
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;  returnValue     2    6[COMRAM] unsigned int 
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  2    0[COMRAM] unsigned int 
  9245 ;; Registers used:
  9246 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9252 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;Total ram usage:        8 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_food_press
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text14
  9266  00D522                     __ptext14:
  9267                           	opt stack 0
  9268  00D522                     _check_food:
  9269                           	opt stack 28
  9270                           
  9271                           ;standbyMode.c: 22: unsigned int returnValue = 0;
  9272                           
  9273                           ;incstack = 0
  9274  00D522  0E00               	movlw	0
  9275  00D524  6E08               	movwf	check_food@returnValue+1,c
  9276  00D526  0E00               	movlw	0
  9277  00D528  6E07               	movwf	check_food@returnValue,c
  9278                           
  9279                           ;standbyMode.c: 24: switch(sum){
  9280  00D52A  EFA6  F06F         	goto	l408
  9281  00D52E                     
  9282                           ;standbyMode.c: 27: if (foodInput[0] == 1){
  9283  00D52E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9284  00D532  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9285  00D536  04DE               	decf	postinc2,w,c
  9286  00D538  10DE               	iorwf	postinc2,w,c
  9287  00D53A  A4D8               	btfss	status,2,c
  9288  00D53C  D005               	goto	l410
  9289                           
  9290                           ;standbyMode.c: 28: returnValue = 1;
  9291  00D53E  0E00               	movlw	0
  9292  00D540  6E08               	movwf	check_food@returnValue+1,c
  9293  00D542  0E01               	movlw	1
  9294  00D544  EFA4  F06F         	goto	L88
  9295  00D548                     l410:
  9296                           
  9297                           ;standbyMode.c: 30: else if (foodInput[0] == 2){
  9298  00D548  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9299  00D54C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9300  00D550  0E02               	movlw	2
  9301  00D552  18DE               	xorwf	postinc2,w,c
  9302  00D554  10DE               	iorwf	postinc2,w,c
  9303  00D556  A4D8               	btfss	status,2,c
  9304  00D558  EFEA  F06F         	goto	l413
  9305                           
  9306                           ;standbyMode.c: 31: returnValue = 2;
  9307  00D55C  0E00               	movlw	0
  9308  00D55E  6E08               	movwf	check_food@returnValue+1,c
  9309  00D560  0E02               	movlw	2
  9310  00D562  EFA4  F06F         	goto	L88
  9311  00D566                     
  9312                           ;standbyMode.c: 37: if (foodInput[0] == 1){
  9313  00D566  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9314  00D56A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9315  00D56E  04DE               	decf	postinc2,w,c
  9316  00D570  10DE               	iorwf	postinc2,w,c
  9317  00D572  A4D8               	btfss	status,2,c
  9318  00D574  D005               	goto	l415
  9319                           
  9320                           ;standbyMode.c: 38: returnValue = 3;
  9321  00D576  0E00               	movlw	0
  9322  00D578  6E08               	movwf	check_food@returnValue+1,c
  9323  00D57A  0E03               	movlw	3
  9324  00D57C  EFA4  F06F         	goto	L88
  9325  00D580                     l415:
  9326                           
  9327                           ;standbyMode.c: 40: else if (foodInput[0] == 2){
  9328  00D580  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9329  00D584  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9330  00D588  0E02               	movlw	2
  9331  00D58A  18DE               	xorwf	postinc2,w,c
  9332  00D58C  10DE               	iorwf	postinc2,w,c
  9333  00D58E  A4D8               	btfss	status,2,c
  9334  00D590  EFEA  F06F         	goto	l413
  9335                           
  9336                           ;standbyMode.c: 41: returnValue = 4;
  9337  00D594  0E00               	movlw	0
  9338  00D596  6E08               	movwf	check_food@returnValue+1,c
  9339  00D598  0E04               	movlw	4
  9340  00D59A  EFA4  F06F         	goto	L88
  9341  00D59E                     
  9342                           ;standbyMode.c: 47: if (foodInput[0] == 1){
  9343  00D59E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9344  00D5A2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9345  00D5A6  04DE               	decf	postinc2,w,c
  9346  00D5A8  10DE               	iorwf	postinc2,w,c
  9347  00D5AA  A4D8               	btfss	status,2,c
  9348  00D5AC  D005               	goto	l419
  9349                           
  9350                           ;standbyMode.c: 48: returnValue = 5;
  9351  00D5AE  0E00               	movlw	0
  9352  00D5B0  6E08               	movwf	check_food@returnValue+1,c
  9353  00D5B2  0E05               	movlw	5
  9354  00D5B4  EFA4  F06F         	goto	L88
  9355  00D5B8                     l419:
  9356                           
  9357                           ;standbyMode.c: 50: else if (foodInput[0] == 2){
  9358  00D5B8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9359  00D5BC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9360  00D5C0  0E02               	movlw	2
  9361  00D5C2  18DE               	xorwf	postinc2,w,c
  9362  00D5C4  10DE               	iorwf	postinc2,w,c
  9363  00D5C6  A4D8               	btfss	status,2,c
  9364  00D5C8  D005               	goto	l421
  9365                           
  9366                           ;standbyMode.c: 51: returnValue = 6;
  9367  00D5CA  0E00               	movlw	0
  9368  00D5CC  6E08               	movwf	check_food@returnValue+1,c
  9369  00D5CE  0E06               	movlw	6
  9370  00D5D0  EFA4  F06F         	goto	L88
  9371  00D5D4                     l421:
  9372                           
  9373                           ;standbyMode.c: 53: else if (foodInput[0] == 3){
  9374  00D5D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9375  00D5D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9376  00D5DC  0E03               	movlw	3
  9377  00D5DE  18DE               	xorwf	postinc2,w,c
  9378  00D5E0  10DE               	iorwf	postinc2,w,c
  9379  00D5E2  A4D8               	btfss	status,2,c
  9380  00D5E4  EFEA  F06F         	goto	l413
  9381                           
  9382                           ;standbyMode.c: 54: returnValue = 7;
  9383  00D5E8  0E00               	movlw	0
  9384  00D5EA  6E08               	movwf	check_food@returnValue+1,c
  9385  00D5EC  0E07               	movlw	7
  9386  00D5EE  EFA4  F06F         	goto	L88
  9387  00D5F2                     
  9388                           ;standbyMode.c: 60: if (foodInput[0] == 1 && foodInput[1] == 1){
  9389  00D5F2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9390  00D5F6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9391  00D5FA  04DE               	decf	postinc2,w,c
  9392  00D5FC  10DE               	iorwf	postinc2,w,c
  9393  00D5FE  A4D8               	btfss	status,2,c
  9394  00D600  D00F               	goto	l425
  9395  00D602  EE20 F002          	lfsr	2,2
  9396  00D606  5003               	movf	check_food@foodInput,w,c
  9397  00D608  26D9               	addwf	fsr2l,f,c
  9398  00D60A  5004               	movf	check_food@foodInput+1,w,c
  9399  00D60C  22DA               	addwfc	fsr2h,f,c
  9400  00D60E  04DE               	decf	postinc2,w,c
  9401  00D610  10DE               	iorwf	postinc2,w,c
  9402  00D612  A4D8               	btfss	status,2,c
  9403  00D614  D005               	goto	l425
  9404                           
  9405                           ;standbyMode.c: 61: returnValue = 8;
  9406  00D616  0E00               	movlw	0
  9407  00D618  6E08               	movwf	check_food@returnValue+1,c
  9408  00D61A  0E08               	movlw	8
  9409  00D61C  EFA4  F06F         	goto	L88
  9410  00D620                     l425:
  9411                           
  9412                           ;standbyMode.c: 63: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9413  00D620  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9414  00D624  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9415  00D628  04DE               	decf	postinc2,w,c
  9416  00D62A  10DE               	iorwf	postinc2,w,c
  9417  00D62C  A4D8               	btfss	status,2,c
  9418  00D62E  D010               	goto	l427
  9419  00D630  EE20 F002          	lfsr	2,2
  9420  00D634  5003               	movf	check_food@foodInput,w,c
  9421  00D636  26D9               	addwf	fsr2l,f,c
  9422  00D638  5004               	movf	check_food@foodInput+1,w,c
  9423  00D63A  22DA               	addwfc	fsr2h,f,c
  9424  00D63C  0E02               	movlw	2
  9425  00D63E  18DE               	xorwf	postinc2,w,c
  9426  00D640  10DE               	iorwf	postinc2,w,c
  9427  00D642  A4D8               	btfss	status,2,c
  9428  00D644  D005               	goto	l427
  9429                           
  9430                           ;standbyMode.c: 64: returnValue = 9;
  9431  00D646  0E00               	movlw	0
  9432  00D648  6E08               	movwf	check_food@returnValue+1,c
  9433  00D64A  0E09               	movlw	9
  9434  00D64C  EFA4  F06F         	goto	L88
  9435  00D650                     l427:
  9436                           
  9437                           ;standbyMode.c: 66: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9438  00D650  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9439  00D654  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9440  00D658  0E02               	movlw	2
  9441  00D65A  18DE               	xorwf	postinc2,w,c
  9442  00D65C  10DE               	iorwf	postinc2,w,c
  9443  00D65E  A4D8               	btfss	status,2,c
  9444  00D660  D00F               	goto	l429
  9445  00D662  EE20 F002          	lfsr	2,2
  9446  00D666  5003               	movf	check_food@foodInput,w,c
  9447  00D668  26D9               	addwf	fsr2l,f,c
  9448  00D66A  5004               	movf	check_food@foodInput+1,w,c
  9449  00D66C  22DA               	addwfc	fsr2h,f,c
  9450  00D66E  04DE               	decf	postinc2,w,c
  9451  00D670  10DE               	iorwf	postinc2,w,c
  9452  00D672  A4D8               	btfss	status,2,c
  9453  00D674  D005               	goto	l429
  9454                           
  9455                           ;standbyMode.c: 67: returnValue = 10;
  9456  00D676  0E00               	movlw	0
  9457  00D678  6E08               	movwf	check_food@returnValue+1,c
  9458  00D67A  0E0A               	movlw	10
  9459  00D67C  EFA4  F06F         	goto	L88
  9460  00D680                     l429:
  9461                           
  9462                           ;standbyMode.c: 69: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9463  00D680  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9464  00D684  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9465  00D688  0E02               	movlw	2
  9466  00D68A  18DE               	xorwf	postinc2,w,c
  9467  00D68C  10DE               	iorwf	postinc2,w,c
  9468  00D68E  A4D8               	btfss	status,2,c
  9469  00D690  EFEA  F06F         	goto	l413
  9470  00D694  EE20 F002          	lfsr	2,2
  9471  00D698  5003               	movf	check_food@foodInput,w,c
  9472  00D69A  26D9               	addwf	fsr2l,f,c
  9473  00D69C  5004               	movf	check_food@foodInput+1,w,c
  9474  00D69E  22DA               	addwfc	fsr2h,f,c
  9475  00D6A0  0E02               	movlw	2
  9476  00D6A2  18DE               	xorwf	postinc2,w,c
  9477  00D6A4  10DE               	iorwf	postinc2,w,c
  9478  00D6A6  A4D8               	btfss	status,2,c
  9479  00D6A8  EFEA  F06F         	goto	l413
  9480                           
  9481                           ;standbyMode.c: 70: returnValue = 11;
  9482  00D6AC  0E00               	movlw	0
  9483  00D6AE  6E08               	movwf	check_food@returnValue+1,c
  9484  00D6B0  0E0B               	movlw	11
  9485  00D6B2  EFA4  F06F         	goto	L88
  9486  00D6B6                     
  9487                           ;standbyMode.c: 76: if (foodInput[0] == 1 && foodInput[1] == 1){
  9488  00D6B6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9489  00D6BA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9490  00D6BE  04DE               	decf	postinc2,w,c
  9491  00D6C0  10DE               	iorwf	postinc2,w,c
  9492  00D6C2  A4D8               	btfss	status,2,c
  9493  00D6C4  D00F               	goto	l433
  9494  00D6C6  EE20 F002          	lfsr	2,2
  9495  00D6CA  5003               	movf	check_food@foodInput,w,c
  9496  00D6CC  26D9               	addwf	fsr2l,f,c
  9497  00D6CE  5004               	movf	check_food@foodInput+1,w,c
  9498  00D6D0  22DA               	addwfc	fsr2h,f,c
  9499  00D6D2  04DE               	decf	postinc2,w,c
  9500  00D6D4  10DE               	iorwf	postinc2,w,c
  9501  00D6D6  A4D8               	btfss	status,2,c
  9502  00D6D8  D005               	goto	l433
  9503                           
  9504                           ;standbyMode.c: 77: returnValue = 12;
  9505  00D6DA  0E00               	movlw	0
  9506  00D6DC  6E08               	movwf	check_food@returnValue+1,c
  9507  00D6DE  0E0C               	movlw	12
  9508  00D6E0  EFA4  F06F         	goto	L88
  9509  00D6E4                     l433:
  9510                           
  9511                           ;standbyMode.c: 79: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9512  00D6E4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9513  00D6E8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9514  00D6EC  04DE               	decf	postinc2,w,c
  9515  00D6EE  10DE               	iorwf	postinc2,w,c
  9516  00D6F0  A4D8               	btfss	status,2,c
  9517  00D6F2  D010               	goto	l435
  9518  00D6F4  EE20 F002          	lfsr	2,2
  9519  00D6F8  5003               	movf	check_food@foodInput,w,c
  9520  00D6FA  26D9               	addwf	fsr2l,f,c
  9521  00D6FC  5004               	movf	check_food@foodInput+1,w,c
  9522  00D6FE  22DA               	addwfc	fsr2h,f,c
  9523  00D700  0E02               	movlw	2
  9524  00D702  18DE               	xorwf	postinc2,w,c
  9525  00D704  10DE               	iorwf	postinc2,w,c
  9526  00D706  A4D8               	btfss	status,2,c
  9527  00D708  D005               	goto	l435
  9528                           
  9529                           ;standbyMode.c: 80: returnValue = 13;
  9530  00D70A  0E00               	movlw	0
  9531  00D70C  6E08               	movwf	check_food@returnValue+1,c
  9532  00D70E  0E0D               	movlw	13
  9533  00D710  EFA4  F06F         	goto	L88
  9534  00D714                     l435:
  9535                           
  9536                           ;standbyMode.c: 82: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9537  00D714  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9538  00D718  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9539  00D71C  04DE               	decf	postinc2,w,c
  9540  00D71E  10DE               	iorwf	postinc2,w,c
  9541  00D720  A4D8               	btfss	status,2,c
  9542  00D722  D010               	goto	l437
  9543  00D724  EE20 F002          	lfsr	2,2
  9544  00D728  5003               	movf	check_food@foodInput,w,c
  9545  00D72A  26D9               	addwf	fsr2l,f,c
  9546  00D72C  5004               	movf	check_food@foodInput+1,w,c
  9547  00D72E  22DA               	addwfc	fsr2h,f,c
  9548  00D730  0E03               	movlw	3
  9549  00D732  18DE               	xorwf	postinc2,w,c
  9550  00D734  10DE               	iorwf	postinc2,w,c
  9551  00D736  A4D8               	btfss	status,2,c
  9552  00D738  D005               	goto	l437
  9553                           
  9554                           ;standbyMode.c: 83: returnValue = 14;
  9555  00D73A  0E00               	movlw	0
  9556  00D73C  6E08               	movwf	check_food@returnValue+1,c
  9557  00D73E  0E0E               	movlw	14
  9558  00D740  EFA4  F06F         	goto	L88
  9559  00D744                     l437:
  9560                           
  9561                           ;standbyMode.c: 85: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9562  00D744  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9563  00D748  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9564  00D74C  0E02               	movlw	2
  9565  00D74E  18DE               	xorwf	postinc2,w,c
  9566  00D750  10DE               	iorwf	postinc2,w,c
  9567  00D752  A4D8               	btfss	status,2,c
  9568  00D754  D00E               	goto	l439
  9569  00D756  EE20 F002          	lfsr	2,2
  9570  00D75A  5003               	movf	check_food@foodInput,w,c
  9571  00D75C  26D9               	addwf	fsr2l,f,c
  9572  00D75E  5004               	movf	check_food@foodInput+1,w,c
  9573  00D760  22DA               	addwfc	fsr2h,f,c
  9574  00D762  04DE               	decf	postinc2,w,c
  9575  00D764  10DE               	iorwf	postinc2,w,c
  9576  00D766  A4D8               	btfss	status,2,c
  9577  00D768  D004               	goto	l439
  9578                           
  9579                           ;standbyMode.c: 86: returnValue = 15;
  9580  00D76A  0E00               	movlw	0
  9581  00D76C  6E08               	movwf	check_food@returnValue+1,c
  9582  00D76E  0E0F               	movlw	15
  9583  00D770  D3EB               	goto	L88
  9584  00D772                     l439:
  9585                           
  9586                           ;standbyMode.c: 88: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9587  00D772  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9588  00D776  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9589  00D77A  0E02               	movlw	2
  9590  00D77C  18DE               	xorwf	postinc2,w,c
  9591  00D77E  10DE               	iorwf	postinc2,w,c
  9592  00D780  A4D8               	btfss	status,2,c
  9593  00D782  EFEA  F06F         	goto	l413
  9594  00D786  EE20 F002          	lfsr	2,2
  9595  00D78A  5003               	movf	check_food@foodInput,w,c
  9596  00D78C  26D9               	addwf	fsr2l,f,c
  9597  00D78E  5004               	movf	check_food@foodInput+1,w,c
  9598  00D790  22DA               	addwfc	fsr2h,f,c
  9599  00D792  0E02               	movlw	2
  9600  00D794  18DE               	xorwf	postinc2,w,c
  9601  00D796  10DE               	iorwf	postinc2,w,c
  9602  00D798  A4D8               	btfss	status,2,c
  9603  00D79A  EFEA  F06F         	goto	l413
  9604                           
  9605                           ;standbyMode.c: 89: returnValue = 16;
  9606  00D79E  0E00               	movlw	0
  9607  00D7A0  6E08               	movwf	check_food@returnValue+1,c
  9608  00D7A2  0E10               	movlw	16
  9609  00D7A4  D3D1               	goto	L88
  9610  00D7A6                     
  9611                           ;standbyMode.c: 95: if (foodInput[0] == 1 && foodInput[1] == 1){
  9612  00D7A6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9613  00D7AA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9614  00D7AE  04DE               	decf	postinc2,w,c
  9615  00D7B0  10DE               	iorwf	postinc2,w,c
  9616  00D7B2  A4D8               	btfss	status,2,c
  9617  00D7B4  D00E               	goto	l443
  9618  00D7B6  EE20 F002          	lfsr	2,2
  9619  00D7BA  5003               	movf	check_food@foodInput,w,c
  9620  00D7BC  26D9               	addwf	fsr2l,f,c
  9621  00D7BE  5004               	movf	check_food@foodInput+1,w,c
  9622  00D7C0  22DA               	addwfc	fsr2h,f,c
  9623  00D7C2  04DE               	decf	postinc2,w,c
  9624  00D7C4  10DE               	iorwf	postinc2,w,c
  9625  00D7C6  A4D8               	btfss	status,2,c
  9626  00D7C8  D004               	goto	l443
  9627                           
  9628                           ;standbyMode.c: 96: returnValue = 17;
  9629  00D7CA  0E00               	movlw	0
  9630  00D7CC  6E08               	movwf	check_food@returnValue+1,c
  9631  00D7CE  0E11               	movlw	17
  9632  00D7D0  D3BB               	goto	L88
  9633  00D7D2                     l443:
  9634                           
  9635                           ;standbyMode.c: 98: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9636  00D7D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9637  00D7D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9638  00D7DA  04DE               	decf	postinc2,w,c
  9639  00D7DC  10DE               	iorwf	postinc2,w,c
  9640  00D7DE  A4D8               	btfss	status,2,c
  9641  00D7E0  D00F               	goto	l445
  9642  00D7E2  EE20 F002          	lfsr	2,2
  9643  00D7E6  5003               	movf	check_food@foodInput,w,c
  9644  00D7E8  26D9               	addwf	fsr2l,f,c
  9645  00D7EA  5004               	movf	check_food@foodInput+1,w,c
  9646  00D7EC  22DA               	addwfc	fsr2h,f,c
  9647  00D7EE  0E02               	movlw	2
  9648  00D7F0  18DE               	xorwf	postinc2,w,c
  9649  00D7F2  10DE               	iorwf	postinc2,w,c
  9650  00D7F4  A4D8               	btfss	status,2,c
  9651  00D7F6  D004               	goto	l445
  9652                           
  9653                           ;standbyMode.c: 99: returnValue = 18;
  9654  00D7F8  0E00               	movlw	0
  9655  00D7FA  6E08               	movwf	check_food@returnValue+1,c
  9656  00D7FC  0E12               	movlw	18
  9657  00D7FE  D3A4               	goto	L88
  9658  00D800                     l445:
  9659                           
  9660                           ;standbyMode.c: 101: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9661  00D800  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9662  00D804  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9663  00D808  04DE               	decf	postinc2,w,c
  9664  00D80A  10DE               	iorwf	postinc2,w,c
  9665  00D80C  A4D8               	btfss	status,2,c
  9666  00D80E  D00F               	goto	l447
  9667  00D810  EE20 F002          	lfsr	2,2
  9668  00D814  5003               	movf	check_food@foodInput,w,c
  9669  00D816  26D9               	addwf	fsr2l,f,c
  9670  00D818  5004               	movf	check_food@foodInput+1,w,c
  9671  00D81A  22DA               	addwfc	fsr2h,f,c
  9672  00D81C  0E03               	movlw	3
  9673  00D81E  18DE               	xorwf	postinc2,w,c
  9674  00D820  10DE               	iorwf	postinc2,w,c
  9675  00D822  A4D8               	btfss	status,2,c
  9676  00D824  D004               	goto	l447
  9677                           
  9678                           ;standbyMode.c: 102: returnValue = 19;
  9679  00D826  0E00               	movlw	0
  9680  00D828  6E08               	movwf	check_food@returnValue+1,c
  9681  00D82A  0E13               	movlw	19
  9682  00D82C  D38D               	goto	L88
  9683  00D82E                     l447:
  9684                           
  9685                           ;standbyMode.c: 104: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9686  00D82E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9687  00D832  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9688  00D836  0E02               	movlw	2
  9689  00D838  18DE               	xorwf	postinc2,w,c
  9690  00D83A  10DE               	iorwf	postinc2,w,c
  9691  00D83C  A4D8               	btfss	status,2,c
  9692  00D83E  D00E               	goto	l449
  9693  00D840  EE20 F002          	lfsr	2,2
  9694  00D844  5003               	movf	check_food@foodInput,w,c
  9695  00D846  26D9               	addwf	fsr2l,f,c
  9696  00D848  5004               	movf	check_food@foodInput+1,w,c
  9697  00D84A  22DA               	addwfc	fsr2h,f,c
  9698  00D84C  04DE               	decf	postinc2,w,c
  9699  00D84E  10DE               	iorwf	postinc2,w,c
  9700  00D850  A4D8               	btfss	status,2,c
  9701  00D852  D004               	goto	l449
  9702                           
  9703                           ;standbyMode.c: 105: returnValue = 20;
  9704  00D854  0E00               	movlw	0
  9705  00D856  6E08               	movwf	check_food@returnValue+1,c
  9706  00D858  0E14               	movlw	20
  9707  00D85A  D376               	goto	L88
  9708  00D85C                     l449:
  9709                           
  9710                           ;standbyMode.c: 107: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9711  00D85C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9712  00D860  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9713  00D864  0E02               	movlw	2
  9714  00D866  18DE               	xorwf	postinc2,w,c
  9715  00D868  10DE               	iorwf	postinc2,w,c
  9716  00D86A  A4D8               	btfss	status,2,c
  9717  00D86C  D3B3               	goto	l413
  9718  00D86E  EE20 F002          	lfsr	2,2
  9719  00D872  5003               	movf	check_food@foodInput,w,c
  9720  00D874  26D9               	addwf	fsr2l,f,c
  9721  00D876  5004               	movf	check_food@foodInput+1,w,c
  9722  00D878  22DA               	addwfc	fsr2h,f,c
  9723  00D87A  0E02               	movlw	2
  9724  00D87C  18DE               	xorwf	postinc2,w,c
  9725  00D87E  10DE               	iorwf	postinc2,w,c
  9726  00D880  A4D8               	btfss	status,2,c
  9727  00D882  D3A8               	goto	l413
  9728                           
  9729                           ;standbyMode.c: 108: returnValue = 21;
  9730  00D884  0E00               	movlw	0
  9731  00D886  6E08               	movwf	check_food@returnValue+1,c
  9732  00D888  0E15               	movlw	21
  9733  00D88A  D35E               	goto	L88
  9734  00D88C                     
  9735                           ;standbyMode.c: 114: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9736  00D88C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9737  00D890  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9738  00D894  04DE               	decf	postinc2,w,c
  9739  00D896  10DE               	iorwf	postinc2,w,c
  9740  00D898  A4D8               	btfss	status,2,c
  9741  00D89A  D018               	goto	l453
  9742  00D89C  EE20 F002          	lfsr	2,2
  9743  00D8A0  5003               	movf	check_food@foodInput,w,c
  9744  00D8A2  26D9               	addwf	fsr2l,f,c
  9745  00D8A4  5004               	movf	check_food@foodInput+1,w,c
  9746  00D8A6  22DA               	addwfc	fsr2h,f,c
  9747  00D8A8  04DE               	decf	postinc2,w,c
  9748  00D8AA  10DE               	iorwf	postinc2,w,c
  9749  00D8AC  A4D8               	btfss	status,2,c
  9750  00D8AE  D00E               	goto	l453
  9751  00D8B0  EE20 F004          	lfsr	2,4
  9752  00D8B4  5003               	movf	check_food@foodInput,w,c
  9753  00D8B6  26D9               	addwf	fsr2l,f,c
  9754  00D8B8  5004               	movf	check_food@foodInput+1,w,c
  9755  00D8BA  22DA               	addwfc	fsr2h,f,c
  9756  00D8BC  04DE               	decf	postinc2,w,c
  9757  00D8BE  10DE               	iorwf	postinc2,w,c
  9758  00D8C0  A4D8               	btfss	status,2,c
  9759  00D8C2  D004               	goto	l453
  9760                           
  9761                           ;standbyMode.c: 115: returnValue = 22;
  9762  00D8C4  0E00               	movlw	0
  9763  00D8C6  6E08               	movwf	check_food@returnValue+1,c
  9764  00D8C8  0E16               	movlw	22
  9765  00D8CA  D33E               	goto	L88
  9766  00D8CC                     l453:
  9767                           
  9768                           ;standbyMode.c: 117: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9769  00D8CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9770  00D8D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9771  00D8D4  04DE               	decf	postinc2,w,c
  9772  00D8D6  10DE               	iorwf	postinc2,w,c
  9773  00D8D8  A4D8               	btfss	status,2,c
  9774  00D8DA  D37C               	goto	l413
  9775  00D8DC  EE20 F002          	lfsr	2,2
  9776  00D8E0  5003               	movf	check_food@foodInput,w,c
  9777  00D8E2  26D9               	addwf	fsr2l,f,c
  9778  00D8E4  5004               	movf	check_food@foodInput+1,w,c
  9779  00D8E6  22DA               	addwfc	fsr2h,f,c
  9780  00D8E8  04DE               	decf	postinc2,w,c
  9781  00D8EA  10DE               	iorwf	postinc2,w,c
  9782  00D8EC  A4D8               	btfss	status,2,c
  9783  00D8EE  D372               	goto	l413
  9784  00D8F0  EE20 F004          	lfsr	2,4
  9785  00D8F4  5003               	movf	check_food@foodInput,w,c
  9786  00D8F6  26D9               	addwf	fsr2l,f,c
  9787  00D8F8  5004               	movf	check_food@foodInput+1,w,c
  9788  00D8FA  22DA               	addwfc	fsr2h,f,c
  9789  00D8FC  0E02               	movlw	2
  9790  00D8FE  18DE               	xorwf	postinc2,w,c
  9791  00D900  10DE               	iorwf	postinc2,w,c
  9792  00D902  A4D8               	btfss	status,2,c
  9793  00D904  D367               	goto	l413
  9794                           
  9795                           ;standbyMode.c: 118: returnValue = 23;
  9796  00D906  0E00               	movlw	0
  9797  00D908  6E08               	movwf	check_food@returnValue+1,c
  9798  00D90A  0E17               	movlw	23
  9799  00D90C  D31D               	goto	L88
  9800  00D90E                     
  9801                           ;standbyMode.c: 124: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9802  00D90E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9803  00D912  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9804  00D916  04DE               	decf	postinc2,w,c
  9805  00D918  10DE               	iorwf	postinc2,w,c
  9806  00D91A  A4D8               	btfss	status,2,c
  9807  00D91C  D018               	goto	l457
  9808  00D91E  EE20 F002          	lfsr	2,2
  9809  00D922  5003               	movf	check_food@foodInput,w,c
  9810  00D924  26D9               	addwf	fsr2l,f,c
  9811  00D926  5004               	movf	check_food@foodInput+1,w,c
  9812  00D928  22DA               	addwfc	fsr2h,f,c
  9813  00D92A  04DE               	decf	postinc2,w,c
  9814  00D92C  10DE               	iorwf	postinc2,w,c
  9815  00D92E  A4D8               	btfss	status,2,c
  9816  00D930  D00E               	goto	l457
  9817  00D932  EE20 F004          	lfsr	2,4
  9818  00D936  5003               	movf	check_food@foodInput,w,c
  9819  00D938  26D9               	addwf	fsr2l,f,c
  9820  00D93A  5004               	movf	check_food@foodInput+1,w,c
  9821  00D93C  22DA               	addwfc	fsr2h,f,c
  9822  00D93E  04DE               	decf	postinc2,w,c
  9823  00D940  10DE               	iorwf	postinc2,w,c
  9824  00D942  A4D8               	btfss	status,2,c
  9825  00D944  D004               	goto	l457
  9826                           
  9827                           ;standbyMode.c: 125: returnValue = 24;
  9828  00D946  0E00               	movlw	0
  9829  00D948  6E08               	movwf	check_food@returnValue+1,c
  9830  00D94A  0E18               	movlw	24
  9831  00D94C  D2FD               	goto	L88
  9832  00D94E                     l457:
  9833                           
  9834                           ;standbyMode.c: 127: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9835  00D94E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9836  00D952  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9837  00D956  04DE               	decf	postinc2,w,c
  9838  00D958  10DE               	iorwf	postinc2,w,c
  9839  00D95A  A4D8               	btfss	status,2,c
  9840  00D95C  D33B               	goto	l413
  9841  00D95E  EE20 F002          	lfsr	2,2
  9842  00D962  5003               	movf	check_food@foodInput,w,c
  9843  00D964  26D9               	addwf	fsr2l,f,c
  9844  00D966  5004               	movf	check_food@foodInput+1,w,c
  9845  00D968  22DA               	addwfc	fsr2h,f,c
  9846  00D96A  04DE               	decf	postinc2,w,c
  9847  00D96C  10DE               	iorwf	postinc2,w,c
  9848  00D96E  A4D8               	btfss	status,2,c
  9849  00D970  D331               	goto	l413
  9850  00D972  EE20 F004          	lfsr	2,4
  9851  00D976  5003               	movf	check_food@foodInput,w,c
  9852  00D978  26D9               	addwf	fsr2l,f,c
  9853  00D97A  5004               	movf	check_food@foodInput+1,w,c
  9854  00D97C  22DA               	addwfc	fsr2h,f,c
  9855  00D97E  0E02               	movlw	2
  9856  00D980  18DE               	xorwf	postinc2,w,c
  9857  00D982  10DE               	iorwf	postinc2,w,c
  9858  00D984  A4D8               	btfss	status,2,c
  9859  00D986  D326               	goto	l413
  9860                           
  9861                           ;standbyMode.c: 128: returnValue = 25;
  9862  00D988  0E00               	movlw	0
  9863  00D98A  6E08               	movwf	check_food@returnValue+1,c
  9864  00D98C  0E19               	movlw	25
  9865  00D98E  D2DC               	goto	L88
  9866  00D990                     
  9867                           ;standbyMode.c: 134: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9868  00D990  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9869  00D994  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9870  00D998  04DE               	decf	postinc2,w,c
  9871  00D99A  10DE               	iorwf	postinc2,w,c
  9872  00D99C  A4D8               	btfss	status,2,c
  9873  00D99E  D018               	goto	l461
  9874  00D9A0  EE20 F002          	lfsr	2,2
  9875  00D9A4  5003               	movf	check_food@foodInput,w,c
  9876  00D9A6  26D9               	addwf	fsr2l,f,c
  9877  00D9A8  5004               	movf	check_food@foodInput+1,w,c
  9878  00D9AA  22DA               	addwfc	fsr2h,f,c
  9879  00D9AC  04DE               	decf	postinc2,w,c
  9880  00D9AE  10DE               	iorwf	postinc2,w,c
  9881  00D9B0  A4D8               	btfss	status,2,c
  9882  00D9B2  D00E               	goto	l461
  9883  00D9B4  EE20 F004          	lfsr	2,4
  9884  00D9B8  5003               	movf	check_food@foodInput,w,c
  9885  00D9BA  26D9               	addwf	fsr2l,f,c
  9886  00D9BC  5004               	movf	check_food@foodInput+1,w,c
  9887  00D9BE  22DA               	addwfc	fsr2h,f,c
  9888  00D9C0  04DE               	decf	postinc2,w,c
  9889  00D9C2  10DE               	iorwf	postinc2,w,c
  9890  00D9C4  A4D8               	btfss	status,2,c
  9891  00D9C6  D004               	goto	l461
  9892                           
  9893                           ;standbyMode.c: 135: returnValue = 26;
  9894  00D9C8  0E00               	movlw	0
  9895  00D9CA  6E08               	movwf	check_food@returnValue+1,c
  9896  00D9CC  0E1A               	movlw	26
  9897  00D9CE  D2BC               	goto	L88
  9898  00D9D0                     l461:
  9899                           
  9900                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9901  00D9D0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9902  00D9D4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9903  00D9D8  0E02               	movlw	2
  9904  00D9DA  18DE               	xorwf	postinc2,w,c
  9905  00D9DC  10DE               	iorwf	postinc2,w,c
  9906  00D9DE  A4D8               	btfss	status,2,c
  9907  00D9E0  D2F9               	goto	l413
  9908  00D9E2  EE20 F002          	lfsr	2,2
  9909  00D9E6  5003               	movf	check_food@foodInput,w,c
  9910  00D9E8  26D9               	addwf	fsr2l,f,c
  9911  00D9EA  5004               	movf	check_food@foodInput+1,w,c
  9912  00D9EC  22DA               	addwfc	fsr2h,f,c
  9913  00D9EE  04DE               	decf	postinc2,w,c
  9914  00D9F0  10DE               	iorwf	postinc2,w,c
  9915  00D9F2  A4D8               	btfss	status,2,c
  9916  00D9F4  D2EF               	goto	l413
  9917  00D9F6  EE20 F004          	lfsr	2,4
  9918  00D9FA  5003               	movf	check_food@foodInput,w,c
  9919  00D9FC  26D9               	addwf	fsr2l,f,c
  9920  00D9FE  5004               	movf	check_food@foodInput+1,w,c
  9921  00DA00  22DA               	addwfc	fsr2h,f,c
  9922  00DA02  04DE               	decf	postinc2,w,c
  9923  00DA04  10DE               	iorwf	postinc2,w,c
  9924  00DA06  A4D8               	btfss	status,2,c
  9925  00DA08  D2E5               	goto	l413
  9926                           
  9927                           ;standbyMode.c: 138: returnValue = 27;
  9928  00DA0A  0E00               	movlw	0
  9929  00DA0C  6E08               	movwf	check_food@returnValue+1,c
  9930  00DA0E  0E1B               	movlw	27
  9931  00DA10  D29B               	goto	L88
  9932  00DA12                     
  9933                           ;standbyMode.c: 144: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9934  00DA12  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9935  00DA16  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9936  00DA1A  04DE               	decf	postinc2,w,c
  9937  00DA1C  10DE               	iorwf	postinc2,w,c
  9938  00DA1E  A4D8               	btfss	status,2,c
  9939  00DA20  D018               	goto	l465
  9940  00DA22  EE20 F002          	lfsr	2,2
  9941  00DA26  5003               	movf	check_food@foodInput,w,c
  9942  00DA28  26D9               	addwf	fsr2l,f,c
  9943  00DA2A  5004               	movf	check_food@foodInput+1,w,c
  9944  00DA2C  22DA               	addwfc	fsr2h,f,c
  9945  00DA2E  04DE               	decf	postinc2,w,c
  9946  00DA30  10DE               	iorwf	postinc2,w,c
  9947  00DA32  A4D8               	btfss	status,2,c
  9948  00DA34  D00E               	goto	l465
  9949  00DA36  EE20 F004          	lfsr	2,4
  9950  00DA3A  5003               	movf	check_food@foodInput,w,c
  9951  00DA3C  26D9               	addwf	fsr2l,f,c
  9952  00DA3E  5004               	movf	check_food@foodInput+1,w,c
  9953  00DA40  22DA               	addwfc	fsr2h,f,c
  9954  00DA42  04DE               	decf	postinc2,w,c
  9955  00DA44  10DE               	iorwf	postinc2,w,c
  9956  00DA46  A4D8               	btfss	status,2,c
  9957  00DA48  D004               	goto	l465
  9958                           
  9959                           ;standbyMode.c: 145: returnValue = 28;
  9960  00DA4A  0E00               	movlw	0
  9961  00DA4C  6E08               	movwf	check_food@returnValue+1,c
  9962  00DA4E  0E1C               	movlw	28
  9963  00DA50  D27B               	goto	L88
  9964  00DA52                     l465:
  9965                           
  9966                           ;standbyMode.c: 147: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9967  00DA52  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9968  00DA56  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9969  00DA5A  04DE               	decf	postinc2,w,c
  9970  00DA5C  10DE               	iorwf	postinc2,w,c
  9971  00DA5E  A4D8               	btfss	status,2,c
  9972  00DA60  D019               	goto	l467
  9973  00DA62  EE20 F002          	lfsr	2,2
  9974  00DA66  5003               	movf	check_food@foodInput,w,c
  9975  00DA68  26D9               	addwf	fsr2l,f,c
  9976  00DA6A  5004               	movf	check_food@foodInput+1,w,c
  9977  00DA6C  22DA               	addwfc	fsr2h,f,c
  9978  00DA6E  04DE               	decf	postinc2,w,c
  9979  00DA70  10DE               	iorwf	postinc2,w,c
  9980  00DA72  A4D8               	btfss	status,2,c
  9981  00DA74  D00F               	goto	l467
  9982  00DA76  EE20 F004          	lfsr	2,4
  9983  00DA7A  5003               	movf	check_food@foodInput,w,c
  9984  00DA7C  26D9               	addwf	fsr2l,f,c
  9985  00DA7E  5004               	movf	check_food@foodInput+1,w,c
  9986  00DA80  22DA               	addwfc	fsr2h,f,c
  9987  00DA82  0E02               	movlw	2
  9988  00DA84  18DE               	xorwf	postinc2,w,c
  9989  00DA86  10DE               	iorwf	postinc2,w,c
  9990  00DA88  A4D8               	btfss	status,2,c
  9991  00DA8A  D004               	goto	l467
  9992                           
  9993                           ;standbyMode.c: 148: returnValue = 29;
  9994  00DA8C  0E00               	movlw	0
  9995  00DA8E  6E08               	movwf	check_food@returnValue+1,c
  9996  00DA90  0E1D               	movlw	29
  9997  00DA92  D25A               	goto	L88
  9998  00DA94                     l467:
  9999                           
 10000                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10001  00DA94  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10002  00DA98  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10003  00DA9C  04DE               	decf	postinc2,w,c
 10004  00DA9E  10DE               	iorwf	postinc2,w,c
 10005  00DAA0  A4D8               	btfss	status,2,c
 10006  00DAA2  D019               	goto	l469
 10007  00DAA4  EE20 F002          	lfsr	2,2
 10008  00DAA8  5003               	movf	check_food@foodInput,w,c
 10009  00DAAA  26D9               	addwf	fsr2l,f,c
 10010  00DAAC  5004               	movf	check_food@foodInput+1,w,c
 10011  00DAAE  22DA               	addwfc	fsr2h,f,c
 10012  00DAB0  0E02               	movlw	2
 10013  00DAB2  18DE               	xorwf	postinc2,w,c
 10014  00DAB4  10DE               	iorwf	postinc2,w,c
 10015  00DAB6  A4D8               	btfss	status,2,c
 10016  00DAB8  D00E               	goto	l469
 10017  00DABA  EE20 F004          	lfsr	2,4
 10018  00DABE  5003               	movf	check_food@foodInput,w,c
 10019  00DAC0  26D9               	addwf	fsr2l,f,c
 10020  00DAC2  5004               	movf	check_food@foodInput+1,w,c
 10021  00DAC4  22DA               	addwfc	fsr2h,f,c
 10022  00DAC6  04DE               	decf	postinc2,w,c
 10023  00DAC8  10DE               	iorwf	postinc2,w,c
 10024  00DACA  A4D8               	btfss	status,2,c
 10025  00DACC  D004               	goto	l469
 10026                           
 10027                           ;standbyMode.c: 151: returnValue = 30;
 10028  00DACE  0E00               	movlw	0
 10029  00DAD0  6E08               	movwf	check_food@returnValue+1,c
 10030  00DAD2  0E1E               	movlw	30
 10031  00DAD4  D239               	goto	L88
 10032  00DAD6                     l469:
 10033                           
 10034                           ;standbyMode.c: 153: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10035  00DAD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10036  00DADA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10037  00DADE  0E02               	movlw	2
 10038  00DAE0  18DE               	xorwf	postinc2,w,c
 10039  00DAE2  10DE               	iorwf	postinc2,w,c
 10040  00DAE4  A4D8               	btfss	status,2,c
 10041  00DAE6  D276               	goto	l413
 10042  00DAE8  EE20 F002          	lfsr	2,2
 10043  00DAEC  5003               	movf	check_food@foodInput,w,c
 10044  00DAEE  26D9               	addwf	fsr2l,f,c
 10045  00DAF0  5004               	movf	check_food@foodInput+1,w,c
 10046  00DAF2  22DA               	addwfc	fsr2h,f,c
 10047  00DAF4  04DE               	decf	postinc2,w,c
 10048  00DAF6  10DE               	iorwf	postinc2,w,c
 10049  00DAF8  A4D8               	btfss	status,2,c
 10050  00DAFA  D26C               	goto	l413
 10051  00DAFC  EE20 F004          	lfsr	2,4
 10052  00DB00  5003               	movf	check_food@foodInput,w,c
 10053  00DB02  26D9               	addwf	fsr2l,f,c
 10054  00DB04  5004               	movf	check_food@foodInput+1,w,c
 10055  00DB06  22DA               	addwfc	fsr2h,f,c
 10056  00DB08  04DE               	decf	postinc2,w,c
 10057  00DB0A  10DE               	iorwf	postinc2,w,c
 10058  00DB0C  A4D8               	btfss	status,2,c
 10059  00DB0E  D262               	goto	l413
 10060                           
 10061                           ;standbyMode.c: 154: returnValue = 31;
 10062  00DB10  0E00               	movlw	0
 10063  00DB12  6E08               	movwf	check_food@returnValue+1,c
 10064  00DB14  0E1F               	movlw	31
 10065  00DB16  D218               	goto	L88
 10066  00DB18                     
 10067                           ;standbyMode.c: 160: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10068  00DB18  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10069  00DB1C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10070  00DB20  04DE               	decf	postinc2,w,c
 10071  00DB22  10DE               	iorwf	postinc2,w,c
 10072  00DB24  A4D8               	btfss	status,2,c
 10073  00DB26  D018               	goto	l473
 10074  00DB28  EE20 F002          	lfsr	2,2
 10075  00DB2C  5003               	movf	check_food@foodInput,w,c
 10076  00DB2E  26D9               	addwf	fsr2l,f,c
 10077  00DB30  5004               	movf	check_food@foodInput+1,w,c
 10078  00DB32  22DA               	addwfc	fsr2h,f,c
 10079  00DB34  04DE               	decf	postinc2,w,c
 10080  00DB36  10DE               	iorwf	postinc2,w,c
 10081  00DB38  A4D8               	btfss	status,2,c
 10082  00DB3A  D00E               	goto	l473
 10083  00DB3C  EE20 F004          	lfsr	2,4
 10084  00DB40  5003               	movf	check_food@foodInput,w,c
 10085  00DB42  26D9               	addwf	fsr2l,f,c
 10086  00DB44  5004               	movf	check_food@foodInput+1,w,c
 10087  00DB46  22DA               	addwfc	fsr2h,f,c
 10088  00DB48  04DE               	decf	postinc2,w,c
 10089  00DB4A  10DE               	iorwf	postinc2,w,c
 10090  00DB4C  A4D8               	btfss	status,2,c
 10091  00DB4E  D004               	goto	l473
 10092                           
 10093                           ;standbyMode.c: 161: returnValue = 32;
 10094  00DB50  0E00               	movlw	0
 10095  00DB52  6E08               	movwf	check_food@returnValue+1,c
 10096  00DB54  0E20               	movlw	32
 10097  00DB56  D1F8               	goto	L88
 10098  00DB58                     l473:
 10099                           
 10100                           ;standbyMode.c: 163: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10101  00DB58  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10102  00DB5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10103  00DB60  04DE               	decf	postinc2,w,c
 10104  00DB62  10DE               	iorwf	postinc2,w,c
 10105  00DB64  A4D8               	btfss	status,2,c
 10106  00DB66  D019               	goto	l475
 10107  00DB68  EE20 F002          	lfsr	2,2
 10108  00DB6C  5003               	movf	check_food@foodInput,w,c
 10109  00DB6E  26D9               	addwf	fsr2l,f,c
 10110  00DB70  5004               	movf	check_food@foodInput+1,w,c
 10111  00DB72  22DA               	addwfc	fsr2h,f,c
 10112  00DB74  04DE               	decf	postinc2,w,c
 10113  00DB76  10DE               	iorwf	postinc2,w,c
 10114  00DB78  A4D8               	btfss	status,2,c
 10115  00DB7A  D00F               	goto	l475
 10116  00DB7C  EE20 F004          	lfsr	2,4
 10117  00DB80  5003               	movf	check_food@foodInput,w,c
 10118  00DB82  26D9               	addwf	fsr2l,f,c
 10119  00DB84  5004               	movf	check_food@foodInput+1,w,c
 10120  00DB86  22DA               	addwfc	fsr2h,f,c
 10121  00DB88  0E02               	movlw	2
 10122  00DB8A  18DE               	xorwf	postinc2,w,c
 10123  00DB8C  10DE               	iorwf	postinc2,w,c
 10124  00DB8E  A4D8               	btfss	status,2,c
 10125  00DB90  D004               	goto	l475
 10126                           
 10127                           ;standbyMode.c: 164: returnValue = 33;
 10128  00DB92  0E00               	movlw	0
 10129  00DB94  6E08               	movwf	check_food@returnValue+1,c
 10130  00DB96  0E21               	movlw	33
 10131  00DB98  D1D7               	goto	L88
 10132  00DB9A                     l475:
 10133                           
 10134                           ;standbyMode.c: 166: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10135  00DB9A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10136  00DB9E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10137  00DBA2  04DE               	decf	postinc2,w,c
 10138  00DBA4  10DE               	iorwf	postinc2,w,c
 10139  00DBA6  A4D8               	btfss	status,2,c
 10140  00DBA8  D019               	goto	l477
 10141  00DBAA  EE20 F002          	lfsr	2,2
 10142  00DBAE  5003               	movf	check_food@foodInput,w,c
 10143  00DBB0  26D9               	addwf	fsr2l,f,c
 10144  00DBB2  5004               	movf	check_food@foodInput+1,w,c
 10145  00DBB4  22DA               	addwfc	fsr2h,f,c
 10146  00DBB6  0E02               	movlw	2
 10147  00DBB8  18DE               	xorwf	postinc2,w,c
 10148  00DBBA  10DE               	iorwf	postinc2,w,c
 10149  00DBBC  A4D8               	btfss	status,2,c
 10150  00DBBE  D00E               	goto	l477
 10151  00DBC0  EE20 F004          	lfsr	2,4
 10152  00DBC4  5003               	movf	check_food@foodInput,w,c
 10153  00DBC6  26D9               	addwf	fsr2l,f,c
 10154  00DBC8  5004               	movf	check_food@foodInput+1,w,c
 10155  00DBCA  22DA               	addwfc	fsr2h,f,c
 10156  00DBCC  04DE               	decf	postinc2,w,c
 10157  00DBCE  10DE               	iorwf	postinc2,w,c
 10158  00DBD0  A4D8               	btfss	status,2,c
 10159  00DBD2  D004               	goto	l477
 10160                           
 10161                           ;standbyMode.c: 167: returnValue = 34;
 10162  00DBD4  0E00               	movlw	0
 10163  00DBD6  6E08               	movwf	check_food@returnValue+1,c
 10164  00DBD8  0E22               	movlw	34
 10165  00DBDA  D1B6               	goto	L88
 10166  00DBDC                     l477:
 10167                           
 10168                           ;standbyMode.c: 169: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10169  00DBDC  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10170  00DBE0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10171  00DBE4  0E02               	movlw	2
 10172  00DBE6  18DE               	xorwf	postinc2,w,c
 10173  00DBE8  10DE               	iorwf	postinc2,w,c
 10174  00DBEA  A4D8               	btfss	status,2,c
 10175  00DBEC  D1F3               	goto	l413
 10176  00DBEE  EE20 F002          	lfsr	2,2
 10177  00DBF2  5003               	movf	check_food@foodInput,w,c
 10178  00DBF4  26D9               	addwf	fsr2l,f,c
 10179  00DBF6  5004               	movf	check_food@foodInput+1,w,c
 10180  00DBF8  22DA               	addwfc	fsr2h,f,c
 10181  00DBFA  04DE               	decf	postinc2,w,c
 10182  00DBFC  10DE               	iorwf	postinc2,w,c
 10183  00DBFE  A4D8               	btfss	status,2,c
 10184  00DC00  D1E9               	goto	l413
 10185  00DC02  EE20 F004          	lfsr	2,4
 10186  00DC06  5003               	movf	check_food@foodInput,w,c
 10187  00DC08  26D9               	addwf	fsr2l,f,c
 10188  00DC0A  5004               	movf	check_food@foodInput+1,w,c
 10189  00DC0C  22DA               	addwfc	fsr2h,f,c
 10190  00DC0E  04DE               	decf	postinc2,w,c
 10191  00DC10  10DE               	iorwf	postinc2,w,c
 10192  00DC12  A4D8               	btfss	status,2,c
 10193  00DC14  D1DF               	goto	l413
 10194                           
 10195                           ;standbyMode.c: 170: returnValue = 35;
 10196  00DC16  0E00               	movlw	0
 10197  00DC18  6E08               	movwf	check_food@returnValue+1,c
 10198  00DC1A  0E23               	movlw	35
 10199  00DC1C  D195               	goto	L88
 10200  00DC1E                     
 10201                           ;standbyMode.c: 176: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10202  00DC1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10203  00DC22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10204  00DC26  04DE               	decf	postinc2,w,c
 10205  00DC28  10DE               	iorwf	postinc2,w,c
 10206  00DC2A  A4D8               	btfss	status,2,c
 10207  00DC2C  D018               	goto	l481
 10208  00DC2E  EE20 F002          	lfsr	2,2
 10209  00DC32  5003               	movf	check_food@foodInput,w,c
 10210  00DC34  26D9               	addwf	fsr2l,f,c
 10211  00DC36  5004               	movf	check_food@foodInput+1,w,c
 10212  00DC38  22DA               	addwfc	fsr2h,f,c
 10213  00DC3A  04DE               	decf	postinc2,w,c
 10214  00DC3C  10DE               	iorwf	postinc2,w,c
 10215  00DC3E  A4D8               	btfss	status,2,c
 10216  00DC40  D00E               	goto	l481
 10217  00DC42  EE20 F004          	lfsr	2,4
 10218  00DC46  5003               	movf	check_food@foodInput,w,c
 10219  00DC48  26D9               	addwf	fsr2l,f,c
 10220  00DC4A  5004               	movf	check_food@foodInput+1,w,c
 10221  00DC4C  22DA               	addwfc	fsr2h,f,c
 10222  00DC4E  04DE               	decf	postinc2,w,c
 10223  00DC50  10DE               	iorwf	postinc2,w,c
 10224  00DC52  A4D8               	btfss	status,2,c
 10225  00DC54  D004               	goto	l481
 10226                           
 10227                           ;standbyMode.c: 177: returnValue = 36;
 10228  00DC56  0E00               	movlw	0
 10229  00DC58  6E08               	movwf	check_food@returnValue+1,c
 10230  00DC5A  0E24               	movlw	36
 10231  00DC5C  D175               	goto	L88
 10232  00DC5E                     l481:
 10233                           
 10234                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10235  00DC5E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10236  00DC62  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10237  00DC66  04DE               	decf	postinc2,w,c
 10238  00DC68  10DE               	iorwf	postinc2,w,c
 10239  00DC6A  A4D8               	btfss	status,2,c
 10240  00DC6C  D1B3               	goto	l413
 10241  00DC6E  EE20 F002          	lfsr	2,2
 10242  00DC72  5003               	movf	check_food@foodInput,w,c
 10243  00DC74  26D9               	addwf	fsr2l,f,c
 10244  00DC76  5004               	movf	check_food@foodInput+1,w,c
 10245  00DC78  22DA               	addwfc	fsr2h,f,c
 10246  00DC7A  04DE               	decf	postinc2,w,c
 10247  00DC7C  10DE               	iorwf	postinc2,w,c
 10248  00DC7E  A4D8               	btfss	status,2,c
 10249  00DC80  D1A9               	goto	l413
 10250  00DC82  EE20 F004          	lfsr	2,4
 10251  00DC86  5003               	movf	check_food@foodInput,w,c
 10252  00DC88  26D9               	addwf	fsr2l,f,c
 10253  00DC8A  5004               	movf	check_food@foodInput+1,w,c
 10254  00DC8C  22DA               	addwfc	fsr2h,f,c
 10255  00DC8E  0E02               	movlw	2
 10256  00DC90  18DE               	xorwf	postinc2,w,c
 10257  00DC92  10DE               	iorwf	postinc2,w,c
 10258  00DC94  A4D8               	btfss	status,2,c
 10259  00DC96  D19E               	goto	l413
 10260                           
 10261                           ;standbyMode.c: 180: returnValue = 37;
 10262  00DC98  0E00               	movlw	0
 10263  00DC9A  6E08               	movwf	check_food@returnValue+1,c
 10264  00DC9C  0E25               	movlw	37
 10265  00DC9E  D154               	goto	L88
 10266  00DCA0                     
 10267                           ;standbyMode.c: 186: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10268  00DCA0  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10269  00DCA4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10270  00DCA8  04DE               	decf	postinc2,w,c
 10271  00DCAA  10DE               	iorwf	postinc2,w,c
 10272  00DCAC  A4D8               	btfss	status,2,c
 10273  00DCAE  D018               	goto	l485
 10274  00DCB0  EE20 F002          	lfsr	2,2
 10275  00DCB4  5003               	movf	check_food@foodInput,w,c
 10276  00DCB6  26D9               	addwf	fsr2l,f,c
 10277  00DCB8  5004               	movf	check_food@foodInput+1,w,c
 10278  00DCBA  22DA               	addwfc	fsr2h,f,c
 10279  00DCBC  04DE               	decf	postinc2,w,c
 10280  00DCBE  10DE               	iorwf	postinc2,w,c
 10281  00DCC0  A4D8               	btfss	status,2,c
 10282  00DCC2  D00E               	goto	l485
 10283  00DCC4  EE20 F004          	lfsr	2,4
 10284  00DCC8  5003               	movf	check_food@foodInput,w,c
 10285  00DCCA  26D9               	addwf	fsr2l,f,c
 10286  00DCCC  5004               	movf	check_food@foodInput+1,w,c
 10287  00DCCE  22DA               	addwfc	fsr2h,f,c
 10288  00DCD0  04DE               	decf	postinc2,w,c
 10289  00DCD2  10DE               	iorwf	postinc2,w,c
 10290  00DCD4  A4D8               	btfss	status,2,c
 10291  00DCD6  D004               	goto	l485
 10292                           
 10293                           ;standbyMode.c: 187: returnValue = 38;
 10294  00DCD8  0E00               	movlw	0
 10295  00DCDA  6E08               	movwf	check_food@returnValue+1,c
 10296  00DCDC  0E26               	movlw	38
 10297  00DCDE  D134               	goto	L88
 10298  00DCE0                     l485:
 10299                           
 10300                           ;standbyMode.c: 189: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10301  00DCE0  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10302  00DCE4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10303  00DCE8  04DE               	decf	postinc2,w,c
 10304  00DCEA  10DE               	iorwf	postinc2,w,c
 10305  00DCEC  A4D8               	btfss	status,2,c
 10306  00DCEE  D019               	goto	l487
 10307  00DCF0  EE20 F002          	lfsr	2,2
 10308  00DCF4  5003               	movf	check_food@foodInput,w,c
 10309  00DCF6  26D9               	addwf	fsr2l,f,c
 10310  00DCF8  5004               	movf	check_food@foodInput+1,w,c
 10311  00DCFA  22DA               	addwfc	fsr2h,f,c
 10312  00DCFC  04DE               	decf	postinc2,w,c
 10313  00DCFE  10DE               	iorwf	postinc2,w,c
 10314  00DD00  A4D8               	btfss	status,2,c
 10315  00DD02  D00F               	goto	l487
 10316  00DD04  EE20 F004          	lfsr	2,4
 10317  00DD08  5003               	movf	check_food@foodInput,w,c
 10318  00DD0A  26D9               	addwf	fsr2l,f,c
 10319  00DD0C  5004               	movf	check_food@foodInput+1,w,c
 10320  00DD0E  22DA               	addwfc	fsr2h,f,c
 10321  00DD10  0E02               	movlw	2
 10322  00DD12  18DE               	xorwf	postinc2,w,c
 10323  00DD14  10DE               	iorwf	postinc2,w,c
 10324  00DD16  A4D8               	btfss	status,2,c
 10325  00DD18  D004               	goto	l487
 10326                           
 10327                           ;standbyMode.c: 190: returnValue = 39;
 10328  00DD1A  0E00               	movlw	0
 10329  00DD1C  6E08               	movwf	check_food@returnValue+1,c
 10330  00DD1E  0E27               	movlw	39
 10331  00DD20  D113               	goto	L88
 10332  00DD22                     l487:
 10333                           
 10334                           ;standbyMode.c: 192: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10335  00DD22  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10336  00DD26  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10337  00DD2A  04DE               	decf	postinc2,w,c
 10338  00DD2C  10DE               	iorwf	postinc2,w,c
 10339  00DD2E  A4D8               	btfss	status,2,c
 10340  00DD30  D019               	goto	l489
 10341  00DD32  EE20 F002          	lfsr	2,2
 10342  00DD36  5003               	movf	check_food@foodInput,w,c
 10343  00DD38  26D9               	addwf	fsr2l,f,c
 10344  00DD3A  5004               	movf	check_food@foodInput+1,w,c
 10345  00DD3C  22DA               	addwfc	fsr2h,f,c
 10346  00DD3E  0E02               	movlw	2
 10347  00DD40  18DE               	xorwf	postinc2,w,c
 10348  00DD42  10DE               	iorwf	postinc2,w,c
 10349  00DD44  A4D8               	btfss	status,2,c
 10350  00DD46  D00E               	goto	l489
 10351  00DD48  EE20 F004          	lfsr	2,4
 10352  00DD4C  5003               	movf	check_food@foodInput,w,c
 10353  00DD4E  26D9               	addwf	fsr2l,f,c
 10354  00DD50  5004               	movf	check_food@foodInput+1,w,c
 10355  00DD52  22DA               	addwfc	fsr2h,f,c
 10356  00DD54  04DE               	decf	postinc2,w,c
 10357  00DD56  10DE               	iorwf	postinc2,w,c
 10358  00DD58  A4D8               	btfss	status,2,c
 10359  00DD5A  D004               	goto	l489
 10360                           
 10361                           ;standbyMode.c: 193: returnValue = 40;
 10362  00DD5C  0E00               	movlw	0
 10363  00DD5E  6E08               	movwf	check_food@returnValue+1,c
 10364  00DD60  0E28               	movlw	40
 10365  00DD62  D0F2               	goto	L88
 10366  00DD64                     l489:
 10367                           
 10368                           ;standbyMode.c: 195: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10369  00DD64  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10370  00DD68  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10371  00DD6C  0E02               	movlw	2
 10372  00DD6E  18DE               	xorwf	postinc2,w,c
 10373  00DD70  10DE               	iorwf	postinc2,w,c
 10374  00DD72  A4D8               	btfss	status,2,c
 10375  00DD74  D12F               	goto	l413
 10376  00DD76  EE20 F002          	lfsr	2,2
 10377  00DD7A  5003               	movf	check_food@foodInput,w,c
 10378  00DD7C  26D9               	addwf	fsr2l,f,c
 10379  00DD7E  5004               	movf	check_food@foodInput+1,w,c
 10380  00DD80  22DA               	addwfc	fsr2h,f,c
 10381  00DD82  04DE               	decf	postinc2,w,c
 10382  00DD84  10DE               	iorwf	postinc2,w,c
 10383  00DD86  A4D8               	btfss	status,2,c
 10384  00DD88  D125               	goto	l413
 10385  00DD8A  EE20 F004          	lfsr	2,4
 10386  00DD8E  5003               	movf	check_food@foodInput,w,c
 10387  00DD90  26D9               	addwf	fsr2l,f,c
 10388  00DD92  5004               	movf	check_food@foodInput+1,w,c
 10389  00DD94  22DA               	addwfc	fsr2h,f,c
 10390  00DD96  04DE               	decf	postinc2,w,c
 10391  00DD98  10DE               	iorwf	postinc2,w,c
 10392  00DD9A  A4D8               	btfss	status,2,c
 10393  00DD9C  D11B               	goto	l413
 10394                           
 10395                           ;standbyMode.c: 196: returnValue = 41;
 10396  00DD9E  0E00               	movlw	0
 10397  00DDA0  6E08               	movwf	check_food@returnValue+1,c
 10398  00DDA2  0E29               	movlw	41
 10399  00DDA4  D0D1               	goto	L88
 10400  00DDA6                     
 10401                           ;standbyMode.c: 202: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10402  00DDA6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10403  00DDAA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10404  00DDAE  04DE               	decf	postinc2,w,c
 10405  00DDB0  10DE               	iorwf	postinc2,w,c
 10406  00DDB2  A4D8               	btfss	status,2,c
 10407  00DDB4  D10F               	goto	l413
 10408  00DDB6  EE20 F002          	lfsr	2,2
 10409  00DDBA  5003               	movf	check_food@foodInput,w,c
 10410  00DDBC  26D9               	addwf	fsr2l,f,c
 10411  00DDBE  5004               	movf	check_food@foodInput+1,w,c
 10412  00DDC0  22DA               	addwfc	fsr2h,f,c
 10413  00DDC2  04DE               	decf	postinc2,w,c
 10414  00DDC4  10DE               	iorwf	postinc2,w,c
 10415  00DDC6  A4D8               	btfss	status,2,c
 10416  00DDC8  D105               	goto	l413
 10417  00DDCA  EE20 F004          	lfsr	2,4
 10418  00DDCE  5003               	movf	check_food@foodInput,w,c
 10419  00DDD0  26D9               	addwf	fsr2l,f,c
 10420  00DDD2  5004               	movf	check_food@foodInput+1,w,c
 10421  00DDD4  22DA               	addwfc	fsr2h,f,c
 10422  00DDD6  04DE               	decf	postinc2,w,c
 10423  00DDD8  10DE               	iorwf	postinc2,w,c
 10424  00DDDA  A4D8               	btfss	status,2,c
 10425  00DDDC  D0FB               	goto	l413
 10426  00DDDE  EE20 F006          	lfsr	2,6
 10427  00DDE2  5003               	movf	check_food@foodInput,w,c
 10428  00DDE4  26D9               	addwf	fsr2l,f,c
 10429  00DDE6  5004               	movf	check_food@foodInput+1,w,c
 10430  00DDE8  22DA               	addwfc	fsr2h,f,c
 10431  00DDEA  04DE               	decf	postinc2,w,c
 10432  00DDEC  10DE               	iorwf	postinc2,w,c
 10433  00DDEE  A4D8               	btfss	status,2,c
 10434  00DDF0  D0F1               	goto	l413
 10435                           
 10436                           ;standbyMode.c: 203: returnValue = 42;
 10437  00DDF2  0E00               	movlw	0
 10438  00DDF4  6E08               	movwf	check_food@returnValue+1,c
 10439  00DDF6  0E2A               	movlw	42
 10440  00DDF8  D0A7               	goto	L88
 10441  00DDFA                     
 10442                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10443  00DDFA  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10444  00DDFE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10445  00DE02  04DE               	decf	postinc2,w,c
 10446  00DE04  10DE               	iorwf	postinc2,w,c
 10447  00DE06  A4D8               	btfss	status,2,c
 10448  00DE08  D0E5               	goto	l413
 10449  00DE0A  EE20 F002          	lfsr	2,2
 10450  00DE0E  5003               	movf	check_food@foodInput,w,c
 10451  00DE10  26D9               	addwf	fsr2l,f,c
 10452  00DE12  5004               	movf	check_food@foodInput+1,w,c
 10453  00DE14  22DA               	addwfc	fsr2h,f,c
 10454  00DE16  04DE               	decf	postinc2,w,c
 10455  00DE18  10DE               	iorwf	postinc2,w,c
 10456  00DE1A  A4D8               	btfss	status,2,c
 10457  00DE1C  D0DB               	goto	l413
 10458  00DE1E  EE20 F004          	lfsr	2,4
 10459  00DE22  5003               	movf	check_food@foodInput,w,c
 10460  00DE24  26D9               	addwf	fsr2l,f,c
 10461  00DE26  5004               	movf	check_food@foodInput+1,w,c
 10462  00DE28  22DA               	addwfc	fsr2h,f,c
 10463  00DE2A  04DE               	decf	postinc2,w,c
 10464  00DE2C  10DE               	iorwf	postinc2,w,c
 10465  00DE2E  A4D8               	btfss	status,2,c
 10466  00DE30  D0D1               	goto	l413
 10467  00DE32  EE20 F006          	lfsr	2,6
 10468  00DE36  5003               	movf	check_food@foodInput,w,c
 10469  00DE38  26D9               	addwf	fsr2l,f,c
 10470  00DE3A  5004               	movf	check_food@foodInput+1,w,c
 10471  00DE3C  22DA               	addwfc	fsr2h,f,c
 10472  00DE3E  04DE               	decf	postinc2,w,c
 10473  00DE40  10DE               	iorwf	postinc2,w,c
 10474  00DE42  A4D8               	btfss	status,2,c
 10475  00DE44  D0C7               	goto	l413
 10476                           
 10477                           ;standbyMode.c: 210: returnValue = 43;
 10478  00DE46  0E00               	movlw	0
 10479  00DE48  6E08               	movwf	check_food@returnValue+1,c
 10480  00DE4A  0E2B               	movlw	43
 10481  00DE4C  D07D               	goto	L88
 10482  00DE4E                     
 10483                           ;standbyMode.c: 216: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10484  00DE4E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10485  00DE52  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10486  00DE56  04DE               	decf	postinc2,w,c
 10487  00DE58  10DE               	iorwf	postinc2,w,c
 10488  00DE5A  A4D8               	btfss	status,2,c
 10489  00DE5C  D0BB               	goto	l413
 10490  00DE5E  EE20 F002          	lfsr	2,2
 10491  00DE62  5003               	movf	check_food@foodInput,w,c
 10492  00DE64  26D9               	addwf	fsr2l,f,c
 10493  00DE66  5004               	movf	check_food@foodInput+1,w,c
 10494  00DE68  22DA               	addwfc	fsr2h,f,c
 10495  00DE6A  04DE               	decf	postinc2,w,c
 10496  00DE6C  10DE               	iorwf	postinc2,w,c
 10497  00DE6E  A4D8               	btfss	status,2,c
 10498  00DE70  D0B1               	goto	l413
 10499  00DE72  EE20 F004          	lfsr	2,4
 10500  00DE76  5003               	movf	check_food@foodInput,w,c
 10501  00DE78  26D9               	addwf	fsr2l,f,c
 10502  00DE7A  5004               	movf	check_food@foodInput+1,w,c
 10503  00DE7C  22DA               	addwfc	fsr2h,f,c
 10504  00DE7E  04DE               	decf	postinc2,w,c
 10505  00DE80  10DE               	iorwf	postinc2,w,c
 10506  00DE82  A4D8               	btfss	status,2,c
 10507  00DE84  D0A7               	goto	l413
 10508  00DE86  EE20 F006          	lfsr	2,6
 10509  00DE8A  5003               	movf	check_food@foodInput,w,c
 10510  00DE8C  26D9               	addwf	fsr2l,f,c
 10511  00DE8E  5004               	movf	check_food@foodInput+1,w,c
 10512  00DE90  22DA               	addwfc	fsr2h,f,c
 10513  00DE92  04DE               	decf	postinc2,w,c
 10514  00DE94  10DE               	iorwf	postinc2,w,c
 10515  00DE96  A4D8               	btfss	status,2,c
 10516  00DE98  D09D               	goto	l413
 10517                           
 10518                           ;standbyMode.c: 217: returnValue = 44;
 10519  00DE9A  0E00               	movlw	0
 10520  00DE9C  6E08               	movwf	check_food@returnValue+1,c
 10521  00DE9E  0E2C               	movlw	44
 10522  00DEA0  D053               	goto	L88
 10523  00DEA2                     
 10524                           ;standbyMode.c: 223: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10525  00DEA2  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10526  00DEA6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10527  00DEAA  04DE               	decf	postinc2,w,c
 10528  00DEAC  10DE               	iorwf	postinc2,w,c
 10529  00DEAE  A4D8               	btfss	status,2,c
 10530  00DEB0  D091               	goto	l413
 10531  00DEB2  EE20 F002          	lfsr	2,2
 10532  00DEB6  5003               	movf	check_food@foodInput,w,c
 10533  00DEB8  26D9               	addwf	fsr2l,f,c
 10534  00DEBA  5004               	movf	check_food@foodInput+1,w,c
 10535  00DEBC  22DA               	addwfc	fsr2h,f,c
 10536  00DEBE  04DE               	decf	postinc2,w,c
 10537  00DEC0  10DE               	iorwf	postinc2,w,c
 10538  00DEC2  A4D8               	btfss	status,2,c
 10539  00DEC4  D087               	goto	l413
 10540  00DEC6  EE20 F004          	lfsr	2,4
 10541  00DECA  5003               	movf	check_food@foodInput,w,c
 10542  00DECC  26D9               	addwf	fsr2l,f,c
 10543  00DECE  5004               	movf	check_food@foodInput+1,w,c
 10544  00DED0  22DA               	addwfc	fsr2h,f,c
 10545  00DED2  04DE               	decf	postinc2,w,c
 10546  00DED4  10DE               	iorwf	postinc2,w,c
 10547  00DED6  A4D8               	btfss	status,2,c
 10548  00DED8  D07D               	goto	l413
 10549  00DEDA  EE20 F006          	lfsr	2,6
 10550  00DEDE  5003               	movf	check_food@foodInput,w,c
 10551  00DEE0  26D9               	addwf	fsr2l,f,c
 10552  00DEE2  5004               	movf	check_food@foodInput+1,w,c
 10553  00DEE4  22DA               	addwfc	fsr2h,f,c
 10554  00DEE6  04DE               	decf	postinc2,w,c
 10555  00DEE8  10DE               	iorwf	postinc2,w,c
 10556  00DEEA  A4D8               	btfss	status,2,c
 10557  00DEEC  D073               	goto	l413
 10558                           
 10559                           ;standbyMode.c: 224: returnValue = 45;
 10560  00DEEE  0E00               	movlw	0
 10561  00DEF0  6E08               	movwf	check_food@returnValue+1,c
 10562  00DEF2  0E2D               	movlw	45
 10563  00DEF4  D029               	goto	L88
 10564  00DEF6                     
 10565                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10566  00DEF6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10567  00DEFA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10568  00DEFE  04DE               	decf	postinc2,w,c
 10569  00DF00  10DE               	iorwf	postinc2,w,c
 10570  00DF02  A4D8               	btfss	status,2,c
 10571  00DF04  D067               	goto	l413
 10572  00DF06  EE20 F002          	lfsr	2,2
 10573  00DF0A  5003               	movf	check_food@foodInput,w,c
 10574  00DF0C  26D9               	addwf	fsr2l,f,c
 10575  00DF0E  5004               	movf	check_food@foodInput+1,w,c
 10576  00DF10  22DA               	addwfc	fsr2h,f,c
 10577  00DF12  04DE               	decf	postinc2,w,c
 10578  00DF14  10DE               	iorwf	postinc2,w,c
 10579  00DF16  A4D8               	btfss	status,2,c
 10580  00DF18  D05D               	goto	l413
 10581  00DF1A  EE20 F004          	lfsr	2,4
 10582  00DF1E  5003               	movf	check_food@foodInput,w,c
 10583  00DF20  26D9               	addwf	fsr2l,f,c
 10584  00DF22  5004               	movf	check_food@foodInput+1,w,c
 10585  00DF24  22DA               	addwfc	fsr2h,f,c
 10586  00DF26  04DE               	decf	postinc2,w,c
 10587  00DF28  10DE               	iorwf	postinc2,w,c
 10588  00DF2A  A4D8               	btfss	status,2,c
 10589  00DF2C  D053               	goto	l413
 10590  00DF2E  EE20 F006          	lfsr	2,6
 10591  00DF32  5003               	movf	check_food@foodInput,w,c
 10592  00DF34  26D9               	addwf	fsr2l,f,c
 10593  00DF36  5004               	movf	check_food@foodInput+1,w,c
 10594  00DF38  22DA               	addwfc	fsr2h,f,c
 10595  00DF3A  04DE               	decf	postinc2,w,c
 10596  00DF3C  10DE               	iorwf	postinc2,w,c
 10597  00DF3E  A4D8               	btfss	status,2,c
 10598  00DF40  D049               	goto	l413
 10599                           
 10600                           ;standbyMode.c: 231: returnValue = 46;
 10601  00DF42  0E00               	movlw	0
 10602  00DF44  6E08               	movwf	check_food@returnValue+1,c
 10603  00DF46  0E2E               	movlw	46
 10604  00DF48                     L88:
 10605  00DF48  6E07               	movwf	check_food@returnValue,c
 10606                           
 10607                           ;standbyMode.c: 238: }
 10608                           
 10609                           ;standbyMode.c: 237: break;
 10610                           
 10611                           ;standbyMode.c: 236: default:
 10612                           
 10613                           ;standbyMode.c: 232: }
 10614                           ;standbyMode.c: 233: break;
 10615  00DF4A  D044               	goto	l413
 10616  00DF4C                     l408:
 10617  00DF4C  C001  F005         	movff	check_food@sum,??_check_food
 10618  00DF50  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10619                           
 10620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10621                           ; Switch size 1, requested type "space"
 10622                           ; Number of cases is 1, Range of values is 0 to 0
 10623                           ; switch strategies available:
 10624                           ; Name         Instructions Cycles
 10625                           ; simple_byte            4     3 (average)
 10626                           ;	Chosen strategy is simple_byte
 10627  00DF54  5006               	movf	??_check_food+1,w,c
 10628  00DF56  0A00               	xorlw	0	; case 0
 10629  00DF58  A4D8               	btfss	status,2,c
 10630  00DF5A  D03C               	goto	l413
 10631                           
 10632                           ; Switch size 1, requested type "space"
 10633                           ; Number of cases is 18, Range of values is 3 to 43
 10634                           ; switch strategies available:
 10635                           ; Name         Instructions Cycles
 10636                           ; simple_byte           55    28 (average)
 10637                           ;	Chosen strategy is simple_byte
 10638  00DF5C  5005               	movf	??_check_food,w,c
 10639  00DF5E  0A03               	xorlw	3	; case 3
 10640  00DF60  B4D8               	btfsc	status,2,c
 10641  00DF62  EF97  F06A         	goto	l409
 10642  00DF66  0A04               	xorlw	4	; case 7
 10643  00DF68  B4D8               	btfsc	status,2,c
 10644  00DF6A  EFB3  F06A         	goto	l414
 10645  00DF6E  0A0D               	xorlw	13	; case 10
 10646  00DF70  B4D8               	btfsc	status,2,c
 10647  00DF72  EFF9  F06A         	goto	l424
 10648  00DF76  0A06               	xorlw	6	; case 12
 10649  00DF78  B4D8               	btfsc	status,2,c
 10650  00DF7A  EFCF  F06A         	goto	l418
 10651  00DF7E  0A01               	xorlw	1	; case 13
 10652  00DF80  B4D8               	btfsc	status,2,c
 10653  00DF82  D484               	goto	l452
 10654  00DF84  0A02               	xorlw	2	; case 15
 10655  00DF86  B4D8               	btfsc	status,2,c
 10656  00DF88  EF5B  F06B         	goto	l432
 10657  00DF8C  0A1E               	xorlw	30	; case 17
 10658  00DF8E  B4D8               	btfsc	status,2,c
 10659  00DF90  D4FF               	goto	l460
 10660  00DF92  0A03               	xorlw	3	; case 18
 10661  00DF94  B4D8               	btfsc	status,2,c
 10662  00DF96  D4BB               	goto	l456
 10663  00DF98  0A01               	xorlw	1	; case 19
 10664  00DF9A  B4D8               	btfsc	status,2,c
 10665  00DF9C  D404               	goto	l442
 10666  00DF9E  0A05               	xorlw	5	; case 22
 10667  00DFA0  B4D8               	btfsc	status,2,c
 10668  00DFA2  D5BA               	goto	l472
 10669  00DFA4  0A0F               	xorlw	15	; case 25
 10670  00DFA6  B4D8               	btfsc	status,2,c
 10671  00DFA8  D6FE               	goto	l492
 10672  00DFAA  0A03               	xorlw	3	; case 26
 10673  00DFAC  B4D8               	btfsc	status,2,c
 10674  00DFAE  D637               	goto	l480
 10675  00DFB0  0A01               	xorlw	1	; case 27
 10676  00DFB2  B4D8               	btfsc	status,2,c
 10677  00DFB4  D52E               	goto	l464
 10678  00DFB6  0A06               	xorlw	6	; case 29
 10679  00DFB8  B4D8               	btfsc	status,2,c
 10680  00DFBA  D71F               	goto	l494
 10681  00DFBC  0A02               	xorlw	2	; case 31
 10682  00DFBE  B4D8               	btfsc	status,2,c
 10683  00DFC0  D66F               	goto	l484
 10684  00DFC2  0A3D               	xorlw	61	; case 34
 10685  00DFC4  B4D8               	btfsc	status,2,c
 10686  00DFC6  D743               	goto	l496
 10687  00DFC8  0A05               	xorlw	5	; case 39
 10688  00DFCA  B4D8               	btfsc	status,2,c
 10689  00DFCC  D76A               	goto	l498
 10690  00DFCE  0A0C               	xorlw	12	; case 43
 10691  00DFD0  B4D8               	btfsc	status,2,c
 10692  00DFD2  D791               	goto	l500
 10693  00DFD4                     l413:
 10694                           
 10695                           ;standbyMode.c: 239: return returnValue;
 10696  00DFD4  C007  F001         	movff	check_food@returnValue,?_check_food
 10697  00DFD8  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 10698  00DFDC  0012               	return		;funcret
 10699  00DFDE                     __end_of_check_food:
 10700                           	opt stack 0
 10701                           tblptru	equ	0xFF8
 10702                           tblptrh	equ	0xFF7
 10703                           tblptrl	equ	0xFF6
 10704                           tablat	equ	0xFF5
 10705                           prodh	equ	0xFF4
 10706                           prodl	equ	0xFF3
 10707                           postinc0	equ	0xFEE
 10708                           wreg	equ	0xFE8
 10709                           postdec1	equ	0xFE5
 10710                           plusw1	equ	0xFE3
 10711                           fsr1l	equ	0xFE1
 10712                           indf2	equ	0xFDF
 10713                           postinc2	equ	0xFDE
 10714                           postdec2	equ	0xFDD
 10715                           plusw2	equ	0xFDB
 10716                           fsr2h	equ	0xFDA
 10717                           fsr2l	equ	0xFD9
 10718                           status	equ	0xFD8
 10719                           
 10720 ;; *************** function _diet_press *****************
 10721 ;; Defined at:
 10722 ;;		line 1201 in file "standbyMode.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  drawer          2   40[COMRAM] unsigned int 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  keypress        1   54[COMRAM] unsigned char 
 10727 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 10728 ;;  sum             2   52[COMRAM] unsigned int 
 10729 ;;  count           2   50[COMRAM] unsigned int 
 10730 ;;  backCheck       2   48[COMRAM] unsigned int 
 10731 ;;  i               2   46[COMRAM] unsigned int 
 10732 ;;  previous        2   44[COMRAM] unsigned int 
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  2   40[COMRAM] unsigned int 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;Total ram usage:       23 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; Hardware stack levels required when called:    3
 10749 ;; This function calls:
 10750 ;;		_lcdInst
 10751 ;;		_printf
 10752 ;;		_putch
 10753 ;; This function is called by:
 10754 ;;		_standbyMode
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           	psect	text15
 10759  00CA80                     __ptext15:
 10760                           	opt stack 0
 10761  00CA80                     _diet_press:
 10762                           	opt stack 26
 10763                           
 10764                           ;incstack = 0
 10765                           ;standbyMode.c: 1204: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 10766  00CA80  0E01               	movlw	1
 10767  00CA82  ECDC  F056         	call	_lcdInst
 10768  00CA86  0EC3               	movlw	195
 10769  00CA88  6E2B               	movwf	??_diet_press& (0+255),c
 10770  00CA8A  0ECD               	movlw	205
 10771  00CA8C                     u12407:
 10772  00CA8C  2EE8               	decfsz	wreg,f,c
 10773  00CA8E  D7FE               	bra	u12407
 10774  00CA90  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10775  00CA92  D7FC               	bra	u12407
 10776  00CA94  F000               	nop	
 10777                           
 10778                           ;standbyMode.c: 1205: printf("Drawer %i diet:", drawer);
 10779  00CA96  0E9E               	movlw	low STR_69
 10780  00CA98  6E0D               	movwf	printf@f,c
 10781  00CA9A  0EFA               	movlw	high STR_69
 10782  00CA9C  6E0E               	movwf	printf@f+1,c
 10783  00CA9E  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10784  00CAA2  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10785  00CAA6  EC47  F063         	call	_printf	;wreg free
 10786                           
 10787                           ;standbyMode.c: 1206: lcdInst(0xC0);;
 10788  00CAAA  0EC0               	movlw	192
 10789  00CAAC  ECDC  F056         	call	_lcdInst
 10790                           
 10791                           ;standbyMode.c: 1208: unsigned int count = 0;
 10792  00CAB0  0E00               	movlw	0
 10793  00CAB2  6E34               	movwf	diet_press@count+1,c
 10794  00CAB4  0E00               	movlw	0
 10795  00CAB6  6E33               	movwf	diet_press@count,c
 10796                           
 10797                           ;standbyMode.c: 1209: unsigned int previous = 0;
 10798  00CAB8  0E00               	movlw	0
 10799  00CABA  6E2E               	movwf	diet_press@previous+1,c
 10800  00CABC  0E00               	movlw	0
 10801  00CABE  6E2D               	movwf	diet_press@previous,c
 10802                           
 10803                           ;standbyMode.c: 1210: unsigned int sum = 0;
 10804  00CAC0  0E00               	movlw	0
 10805  00CAC2  6E36               	movwf	diet_press@sum+1,c
 10806  00CAC4  0E00               	movlw	0
 10807  00CAC6  6E35               	movwf	diet_press@sum,c
 10808                           
 10809                           ;standbyMode.c: 1211: unsigned int i = 0;
 10810  00CAC8  0E00               	movlw	0
 10811  00CACA  6E30               	movwf	diet_press@i+1,c
 10812  00CACC  0E00               	movlw	0
 10813  00CACE  6E2F               	movwf	diet_press@i,c
 10814                           
 10815                           ;standbyMode.c: 1212: unsigned int dietTable[4] = {0, 0, 0, 0};
 10816  00CAD0  EE20  F0C8         	lfsr	2,diet_press@F3132
 10817  00CAD4  EE10  F038         	lfsr	1,diet_press@dietTable
 10818  00CAD8  0E07               	movlw	7
 10819  00CADA                     u8921:
 10820  00CADA  CFDB FFE3          	movff	plusw2,plusw1
 10821  00CADE  06E8               	decf	wreg,f,c
 10822  00CAE0  E2FC               	bc	u8921
 10823                           
 10824                           ;standbyMode.c: 1213: unsigned int backCheck = 0;
 10825  00CAE2  0E00               	movlw	0
 10826  00CAE4  6E32               	movwf	diet_press@backCheck+1,c
 10827  00CAE6  0E00               	movlw	0
 10828  00CAE8  6E31               	movwf	diet_press@backCheck,c
 10829  00CAEA                     l797:
 10830  00CAEA  A281               	btfss	3969,1,c	;volatile
 10831  00CAEC  D7FE               	goto	l796
 10832                           
 10833                           ;standbyMode.c: 1217: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10834  00CAEE  3881               	swapf	3969,w,c	;volatile
 10835  00CAF0  0B0F               	andlw	15
 10836  00CAF2  0B0F               	andlw	15
 10837  00CAF4  6E37               	movwf	diet_press@keypress,c
 10838  00CAF6  B281               	btfsc	3969,1,c	;volatile
 10839  00CAF8  D7FE               	goto	l801
 10840                           
 10841                           ;standbyMode.c: 1220: if(keypress == 15){
 10842  00CAFA  0E0F               	movlw	15
 10843  00CAFC  1837               	xorwf	diet_press@keypress,w,c
 10844  00CAFE  B4D8               	btfsc	status,2,c
 10845  00CB00  D086               	goto	l804
 10846                           
 10847                           ;standbyMode.c: 1223: else if (keypress == 14){
 10848                           
 10849                           ;standbyMode.c: 1222: }
 10850                           
 10851                           ;standbyMode.c: 1221: break;
 10852  00CB02  0E0E               	movlw	14
 10853  00CB04  1837               	xorwf	diet_press@keypress,w,c
 10854  00CB06  A4D8               	btfss	status,2,c
 10855  00CB08  D005               	goto	l806
 10856                           
 10857                           ;standbyMode.c: 1224: backCheck = 1;
 10858  00CB0A  0E00               	movlw	0
 10859  00CB0C  6E32               	movwf	diet_press@backCheck+1,c
 10860  00CB0E  0E01               	movlw	1
 10861  00CB10  6E31               	movwf	diet_press@backCheck,c
 10862                           
 10863                           ;standbyMode.c: 1225: break;
 10864  00CB12  D07D               	goto	l804
 10865  00CB14                     l806:
 10866                           
 10867                           ;standbyMode.c: 1227: else if (keypress == 12){
 10868  00CB14  0E0C               	movlw	12
 10869  00CB16  1837               	xorwf	diet_press@keypress,w,c
 10870  00CB18  A4D8               	btfss	status,2,c
 10871  00CB1A  D02D               	goto	l808
 10872                           
 10873                           ;standbyMode.c: 1228: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10874  00CB1C  0E01               	movlw	1
 10875  00CB1E  ECDC  F056         	call	_lcdInst
 10876  00CB22  0EC3               	movlw	195
 10877  00CB24  6E2B               	movwf	??_diet_press& (0+255),c
 10878  00CB26  0ECD               	movlw	205
 10879  00CB28                     u12417:
 10880  00CB28  2EE8               	decfsz	wreg,f,c
 10881  00CB2A  D7FE               	bra	u12417
 10882  00CB2C  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10883  00CB2E  D7FC               	bra	u12417
 10884  00CB30  F000               	nop	
 10885                           
 10886                           ;standbyMode.c: 1229: printf("Drawer %i diet:", drawer);
 10887  00CB32  0E9E               	movlw	low STR_69
 10888  00CB34  6E0D               	movwf	printf@f,c
 10889  00CB36  0EFA               	movlw	high STR_69
 10890  00CB38  6E0E               	movwf	printf@f+1,c
 10891  00CB3A  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10892  00CB3E  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10893  00CB42  EC47  F063         	call	_printf	;wreg free
 10894                           
 10895                           ;standbyMode.c: 1230: lcdInst(0xC0);;
 10896  00CB46  0EC0               	movlw	192
 10897  00CB48  ECDC  F056         	call	_lcdInst
 10898                           
 10899                           ;standbyMode.c: 1231: count = 0;
 10900  00CB4C  0E00               	movlw	0
 10901  00CB4E  6E34               	movwf	diet_press@count+1,c
 10902  00CB50  0E00               	movlw	0
 10903  00CB52  6E33               	movwf	diet_press@count,c
 10904                           
 10905                           ;standbyMode.c: 1232: dietTable[0] = 0;
 10906  00CB54  0E00               	movlw	0
 10907  00CB56  6E39               	movwf	diet_press@dietTable+1,c
 10908  00CB58  0E00               	movlw	0
 10909  00CB5A  6E38               	movwf	diet_press@dietTable,c
 10910                           
 10911                           ;standbyMode.c: 1233: dietTable[1] = 0;
 10912  00CB5C  0E00               	movlw	0
 10913  00CB5E  6E3B               	movwf	diet_press@dietTable+3,c
 10914  00CB60  0E00               	movlw	0
 10915  00CB62  6E3A               	movwf	diet_press@dietTable+2,c
 10916                           
 10917                           ;standbyMode.c: 1234: dietTable[2] = 0;
 10918  00CB64  0E00               	movlw	0
 10919  00CB66  6E3D               	movwf	diet_press@dietTable+5,c
 10920  00CB68  0E00               	movlw	0
 10921  00CB6A  6E3C               	movwf	diet_press@dietTable+4,c
 10922                           
 10923                           ;standbyMode.c: 1235: dietTable[3] = 0;
 10924  00CB6C  0E00               	movlw	0
 10925  00CB6E  6E3F               	movwf	diet_press@dietTable+7,c
 10926  00CB70  0E00               	movlw	0
 10927  00CB72  6E3E               	movwf	diet_press@dietTable+6,c
 10928                           
 10929                           ;standbyMode.c: 1236: }
 10930  00CB74  D7BA               	goto	l796
 10931  00CB76                     l808:
 10932                           
 10933                           ;standbyMode.c: 1237: else if (count <= 3){
 10934  00CB76  5034               	movf	diet_press@count+1,w,c
 10935  00CB78  E1B8               	bnz	l797
 10936  00CB7A  0E04               	movlw	4
 10937  00CB7C  5C33               	subwf	diet_press@count,w,c
 10938  00CB7E  B0D8               	btfsc	status,0,c
 10939  00CB80  D7B4               	goto	l796
 10940                           
 10941                           ;standbyMode.c: 1238: if (keypress == 3 || keypress == 7){
 10942  00CB82  0E03               	movlw	3
 10943  00CB84  1837               	xorwf	diet_press@keypress,w,c
 10944  00CB86  B4D8               	btfsc	status,2,c
 10945  00CB88  D004               	goto	u9000
 10946  00CB8A  0E07               	movlw	7
 10947  00CB8C  1837               	xorwf	diet_press@keypress,w,c
 10948  00CB8E  A4D8               	btfss	status,2,c
 10949  00CB90  D016               	goto	l811
 10950  00CB92                     u9000:
 10951                           
 10952                           ;standbyMode.c: 1239: putch(input[keypress]);
 10953  00CB92  5037               	movf	diet_press@keypress,w,c
 10954  00CB94  0D01               	mullw	1
 10955  00CB96  0E84               	movlw	low _input
 10956  00CB98  24F3               	addwf	prodl,w,c
 10957  00CB9A  6EF6               	movwf	tblptrl,c
 10958  00CB9C  0EF9               	movlw	high _input
 10959  00CB9E  20F4               	addwfc	prodh,w,c
 10960  00CBA0  6EF7               	movwf	tblptrh,c
 10961  00CBA2                     	if	1	;There are 3 active tblptr bytes
 10962  00CBA2  6AF8               	clrf	tblptru,c
 10963  00CBA4  0E00               	movlw	low (__mediumconst shr (0+16))
 10964  00CBA6  22F8               	addwfc	tblptru,f,c
 10965  00CBA8                     	endif
 10966  00CBA8  0008               	tblrd		*
 10967  00CBAA  50F5               	movf	tablat,w,c
 10968  00CBAC  ECF0  F056         	call	_putch
 10969                           
 10970                           ;standbyMode.c: 1240: dietTable[count] = keypress;
 10971  00CBB0  5037               	movf	diet_press@keypress,w,c
 10972  00CBB2  6E2B               	movwf	??_diet_press& (0+255),c
 10973  00CBB4  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10974  00CBB6  D01D               	goto	L107
 10975  00CBB8                     l7570:
 10976                           
 10977                           ;standbyMode.c: 1241: count += 1;
 10978  00CBB8  4A33               	infsnz	diet_press@count,f,c
 10979  00CBBA  2A34               	incf	diet_press@count+1,f,c
 10980                           
 10981                           ;standbyMode.c: 1242: }
 10982  00CBBC  D796               	goto	l796
 10983  00CBBE                     l811:
 10984                           
 10985                           ;standbyMode.c: 1243: else if (keypress == 11){
 10986  00CBBE  0E0B               	movlw	11
 10987  00CBC0  1837               	xorwf	diet_press@keypress,w,c
 10988  00CBC2  A4D8               	btfss	status,2,c
 10989  00CBC4  D792               	goto	l796
 10990                           
 10991                           ;standbyMode.c: 1244: putch(input[keypress]);
 10992  00CBC6  5037               	movf	diet_press@keypress,w,c
 10993  00CBC8  0D01               	mullw	1
 10994  00CBCA  0E84               	movlw	low _input
 10995  00CBCC  24F3               	addwf	prodl,w,c
 10996  00CBCE  6EF6               	movwf	tblptrl,c
 10997  00CBD0  0EF9               	movlw	high _input
 10998  00CBD2  20F4               	addwfc	prodh,w,c
 10999  00CBD4  6EF7               	movwf	tblptrh,c
 11000  00CBD6                     	if	1	;There are 3 active tblptr bytes
 11001  00CBD6  6AF8               	clrf	tblptru,c
 11002  00CBD8  0E00               	movlw	low (__mediumconst shr (0+16))
 11003  00CBDA  22F8               	addwfc	tblptru,f,c
 11004  00CBDC                     	endif
 11005  00CBDC  0008               	tblrd		*
 11006  00CBDE  50F5               	movf	tablat,w,c
 11007  00CBE0  ECF0  F056         	call	_putch
 11008                           
 11009                           ;standbyMode.c: 1245: dietTable[count] = keypress + 1;
 11010  00CBE4  5037               	movf	diet_press@keypress,w,c
 11011  00CBE6  6E2B               	movwf	??_diet_press& (0+255),c
 11012  00CBE8  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11013  00CBEA  0E01               	movlw	1
 11014  00CBEC  262B               	addwf	??_diet_press,f,c
 11015  00CBEE  0E00               	movlw	0
 11016  00CBF0  222C               	addwfc	??_diet_press+1,f,c
 11017  00CBF2                     L107:
 11018  00CBF2  90D8               	bcf	status,0,c
 11019  00CBF4  3433               	rlcf	diet_press@count,w,c
 11020  00CBF6  6ED9               	movwf	fsr2l,c
 11021  00CBF8  3434               	rlcf	diet_press@count+1,w,c
 11022  00CBFA  6EDA               	movwf	fsr2h,c
 11023  00CBFC  0E38               	movlw	low diet_press@dietTable
 11024  00CBFE  26D9               	addwf	fsr2l,f,c
 11025  00CC00  0E00               	movlw	high diet_press@dietTable
 11026  00CC02  22DA               	addwfc	fsr2h,f,c
 11027  00CC04  C02B  FFDE         	movff	??_diet_press,postinc2
 11028  00CC08  C02C  FFDD         	movff	??_diet_press+1,postdec2
 11029  00CC0C  D7D5               	goto	l7570
 11030  00CC0E                     l804:
 11031                           
 11032                           ;standbyMode.c: 1247: }
 11033                           ;standbyMode.c: 1248: }
 11034                           ;standbyMode.c: 1249: }
 11035                           ;standbyMode.c: 1251: if (backCheck == 1){
 11036  00CC0E  0431               	decf	diet_press@backCheck,w,c
 11037  00CC10  1032               	iorwf	diet_press@backCheck+1,w,c
 11038  00CC12  A4D8               	btfss	status,2,c
 11039  00CC14  D004               	goto	l817
 11040                           
 11041                           ;standbyMode.c: 1252: sum = 100;
 11042  00CC16  0E00               	movlw	0
 11043  00CC18  6E36               	movwf	diet_press@sum+1,c
 11044  00CC1A  0E64               	movlw	100
 11045  00CC1C  D199               	goto	L106
 11046  00CC1E                     l817:
 11047                           
 11048                           ;standbyMode.c: 1256: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11049  00CC1E  0E0C               	movlw	12
 11050  00CC20  1838               	xorwf	diet_press@dietTable,w,c
 11051  00CC22  1039               	iorwf	diet_press@dietTable+1,w,c
 11052  00CC24  A4D8               	btfss	status,2,c
 11053  00CC26  D010               	goto	l819
 11054  00CC28  503A               	movf	diet_press@dietTable+2,w,c
 11055  00CC2A  103B               	iorwf	diet_press@dietTable+3,w,c
 11056  00CC2C  A4D8               	btfss	status,2,c
 11057  00CC2E  D00C               	goto	l819
 11058  00CC30  503C               	movf	diet_press@dietTable+4,w,c
 11059  00CC32  103D               	iorwf	diet_press@dietTable+5,w,c
 11060  00CC34  A4D8               	btfss	status,2,c
 11061  00CC36  D008               	goto	l819
 11062  00CC38  503E               	movf	diet_press@dietTable+6,w,c
 11063  00CC3A  103F               	iorwf	diet_press@dietTable+7,w,c
 11064  00CC3C  A4D8               	btfss	status,2,c
 11065  00CC3E  D004               	goto	l819
 11066                           
 11067                           ;standbyMode.c: 1257: sum = 12;
 11068  00CC40  0E00               	movlw	0
 11069  00CC42  6E36               	movwf	diet_press@sum+1,c
 11070  00CC44  0E0C               	movlw	12
 11071  00CC46  D184               	goto	L106
 11072  00CC48                     l819:
 11073                           
 11074                           ;standbyMode.c: 1261: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11075  00CC48  0E03               	movlw	3
 11076  00CC4A  1838               	xorwf	diet_press@dietTable,w,c
 11077  00CC4C  1039               	iorwf	diet_press@dietTable+1,w,c
 11078  00CC4E  A4D8               	btfss	status,2,c
 11079  00CC50  D010               	goto	l821
 11080  00CC52  503A               	movf	diet_press@dietTable+2,w,c
 11081  00CC54  103B               	iorwf	diet_press@dietTable+3,w,c
 11082  00CC56  A4D8               	btfss	status,2,c
 11083  00CC58  D00C               	goto	l821
 11084  00CC5A  503C               	movf	diet_press@dietTable+4,w,c
 11085  00CC5C  103D               	iorwf	diet_press@dietTable+5,w,c
 11086  00CC5E  A4D8               	btfss	status,2,c
 11087  00CC60  D008               	goto	l821
 11088  00CC62  503E               	movf	diet_press@dietTable+6,w,c
 11089  00CC64  103F               	iorwf	diet_press@dietTable+7,w,c
 11090  00CC66  A4D8               	btfss	status,2,c
 11091  00CC68  D004               	goto	l821
 11092                           
 11093                           ;standbyMode.c: 1262: sum = 3;
 11094  00CC6A  0E00               	movlw	0
 11095  00CC6C  6E36               	movwf	diet_press@sum+1,c
 11096  00CC6E  0E03               	movlw	3
 11097  00CC70  D16F               	goto	L106
 11098  00CC72                     l821:
 11099                           
 11100                           ;standbyMode.c: 1266: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11101  00CC72  0E07               	movlw	7
 11102  00CC74  1838               	xorwf	diet_press@dietTable,w,c
 11103  00CC76  1039               	iorwf	diet_press@dietTable+1,w,c
 11104  00CC78  A4D8               	btfss	status,2,c
 11105  00CC7A  D010               	goto	l823
 11106  00CC7C  503A               	movf	diet_press@dietTable+2,w,c
 11107  00CC7E  103B               	iorwf	diet_press@dietTable+3,w,c
 11108  00CC80  A4D8               	btfss	status,2,c
 11109  00CC82  D00C               	goto	l823
 11110  00CC84  503C               	movf	diet_press@dietTable+4,w,c
 11111  00CC86  103D               	iorwf	diet_press@dietTable+5,w,c
 11112  00CC88  A4D8               	btfss	status,2,c
 11113  00CC8A  D008               	goto	l823
 11114  00CC8C  503E               	movf	diet_press@dietTable+6,w,c
 11115  00CC8E  103F               	iorwf	diet_press@dietTable+7,w,c
 11116  00CC90  A4D8               	btfss	status,2,c
 11117  00CC92  D004               	goto	l823
 11118                           
 11119                           ;standbyMode.c: 1267: sum = 7;
 11120  00CC94  0E00               	movlw	0
 11121  00CC96  6E36               	movwf	diet_press@sum+1,c
 11122  00CC98  0E07               	movlw	7
 11123  00CC9A  D15A               	goto	L106
 11124  00CC9C                     l823:
 11125                           
 11126                           ;standbyMode.c: 1271: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11127  00CC9C  0E03               	movlw	3
 11128  00CC9E  1838               	xorwf	diet_press@dietTable,w,c
 11129  00CCA0  1039               	iorwf	diet_press@dietTable+1,w,c
 11130  00CCA2  A4D8               	btfss	status,2,c
 11131  00CCA4  D011               	goto	l825
 11132  00CCA6  0E07               	movlw	7
 11133  00CCA8  183A               	xorwf	diet_press@dietTable+2,w,c
 11134  00CCAA  103B               	iorwf	diet_press@dietTable+3,w,c
 11135  00CCAC  A4D8               	btfss	status,2,c
 11136  00CCAE  D00C               	goto	l825
 11137  00CCB0  503C               	movf	diet_press@dietTable+4,w,c
 11138  00CCB2  103D               	iorwf	diet_press@dietTable+5,w,c
 11139  00CCB4  A4D8               	btfss	status,2,c
 11140  00CCB6  D008               	goto	l825
 11141  00CCB8  503E               	movf	diet_press@dietTable+6,w,c
 11142  00CCBA  103F               	iorwf	diet_press@dietTable+7,w,c
 11143  00CCBC  A4D8               	btfss	status,2,c
 11144  00CCBE  D004               	goto	l825
 11145                           
 11146                           ;standbyMode.c: 1272: sum = 10;
 11147  00CCC0  0E00               	movlw	0
 11148  00CCC2  6E36               	movwf	diet_press@sum+1,c
 11149  00CCC4  0E0A               	movlw	10
 11150  00CCC6  D144               	goto	L106
 11151  00CCC8                     l825:
 11152                           
 11153                           ;standbyMode.c: 1276: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11154  00CCC8  0E03               	movlw	3
 11155  00CCCA  1838               	xorwf	diet_press@dietTable,w,c
 11156  00CCCC  1039               	iorwf	diet_press@dietTable+1,w,c
 11157  00CCCE  A4D8               	btfss	status,2,c
 11158  00CCD0  D011               	goto	l827
 11159  00CCD2  0E0C               	movlw	12
 11160  00CCD4  183A               	xorwf	diet_press@dietTable+2,w,c
 11161  00CCD6  103B               	iorwf	diet_press@dietTable+3,w,c
 11162  00CCD8  A4D8               	btfss	status,2,c
 11163  00CCDA  D00C               	goto	l827
 11164  00CCDC  503C               	movf	diet_press@dietTable+4,w,c
 11165  00CCDE  103D               	iorwf	diet_press@dietTable+5,w,c
 11166  00CCE0  A4D8               	btfss	status,2,c
 11167  00CCE2  D008               	goto	l827
 11168  00CCE4  503E               	movf	diet_press@dietTable+6,w,c
 11169  00CCE6  103F               	iorwf	diet_press@dietTable+7,w,c
 11170  00CCE8  A4D8               	btfss	status,2,c
 11171  00CCEA  D004               	goto	l827
 11172                           
 11173                           ;standbyMode.c: 1277: sum = 15;
 11174  00CCEC  0E00               	movlw	0
 11175  00CCEE  6E36               	movwf	diet_press@sum+1,c
 11176  00CCF0  0E0F               	movlw	15
 11177  00CCF2  D12E               	goto	L106
 11178  00CCF4                     l827:
 11179                           
 11180                           ;standbyMode.c: 1281: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11181  00CCF4  0E07               	movlw	7
 11182  00CCF6  1838               	xorwf	diet_press@dietTable,w,c
 11183  00CCF8  1039               	iorwf	diet_press@dietTable+1,w,c
 11184  00CCFA  A4D8               	btfss	status,2,c
 11185  00CCFC  D011               	goto	l829
 11186  00CCFE  0E0C               	movlw	12
 11187  00CD00  183A               	xorwf	diet_press@dietTable+2,w,c
 11188  00CD02  103B               	iorwf	diet_press@dietTable+3,w,c
 11189  00CD04  A4D8               	btfss	status,2,c
 11190  00CD06  D00C               	goto	l829
 11191  00CD08  503C               	movf	diet_press@dietTable+4,w,c
 11192  00CD0A  103D               	iorwf	diet_press@dietTable+5,w,c
 11193  00CD0C  A4D8               	btfss	status,2,c
 11194  00CD0E  D008               	goto	l829
 11195  00CD10  503E               	movf	diet_press@dietTable+6,w,c
 11196  00CD12  103F               	iorwf	diet_press@dietTable+7,w,c
 11197  00CD14  A4D8               	btfss	status,2,c
 11198  00CD16  D004               	goto	l829
 11199                           
 11200                           ;standbyMode.c: 1282: sum = 19;
 11201  00CD18  0E00               	movlw	0
 11202  00CD1A  6E36               	movwf	diet_press@sum+1,c
 11203  00CD1C  0E13               	movlw	19
 11204  00CD1E  D118               	goto	L106
 11205  00CD20                     l829:
 11206                           
 11207                           ;standbyMode.c: 1286: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11208  00CD20  0E03               	movlw	3
 11209  00CD22  1838               	xorwf	diet_press@dietTable,w,c
 11210  00CD24  1039               	iorwf	diet_press@dietTable+1,w,c
 11211  00CD26  A4D8               	btfss	status,2,c
 11212  00CD28  D012               	goto	l831
 11213  00CD2A  0E03               	movlw	3
 11214  00CD2C  183A               	xorwf	diet_press@dietTable+2,w,c
 11215  00CD2E  103B               	iorwf	diet_press@dietTable+3,w,c
 11216  00CD30  A4D8               	btfss	status,2,c
 11217  00CD32  D00D               	goto	l831
 11218  00CD34  0E07               	movlw	7
 11219  00CD36  183C               	xorwf	diet_press@dietTable+4,w,c
 11220  00CD38  103D               	iorwf	diet_press@dietTable+5,w,c
 11221  00CD3A  A4D8               	btfss	status,2,c
 11222  00CD3C  D008               	goto	l831
 11223  00CD3E  503E               	movf	diet_press@dietTable+6,w,c
 11224  00CD40  103F               	iorwf	diet_press@dietTable+7,w,c
 11225  00CD42  A4D8               	btfss	status,2,c
 11226  00CD44  D004               	goto	l831
 11227                           
 11228                           ;standbyMode.c: 1287: sum = 13;
 11229  00CD46  0E00               	movlw	0
 11230  00CD48  6E36               	movwf	diet_press@sum+1,c
 11231  00CD4A  0E0D               	movlw	13
 11232  00CD4C  D101               	goto	L106
 11233  00CD4E                     l831:
 11234                           
 11235                           ;standbyMode.c: 1291: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11236  00CD4E  0E03               	movlw	3
 11237  00CD50  1838               	xorwf	diet_press@dietTable,w,c
 11238  00CD52  1039               	iorwf	diet_press@dietTable+1,w,c
 11239  00CD54  A4D8               	btfss	status,2,c
 11240  00CD56  D012               	goto	l833
 11241  00CD58  0E03               	movlw	3
 11242  00CD5A  183A               	xorwf	diet_press@dietTable+2,w,c
 11243  00CD5C  103B               	iorwf	diet_press@dietTable+3,w,c
 11244  00CD5E  A4D8               	btfss	status,2,c
 11245  00CD60  D00D               	goto	l833
 11246  00CD62  0E0C               	movlw	12
 11247  00CD64  183C               	xorwf	diet_press@dietTable+4,w,c
 11248  00CD66  103D               	iorwf	diet_press@dietTable+5,w,c
 11249  00CD68  A4D8               	btfss	status,2,c
 11250  00CD6A  D008               	goto	l833
 11251  00CD6C  503E               	movf	diet_press@dietTable+6,w,c
 11252  00CD6E  103F               	iorwf	diet_press@dietTable+7,w,c
 11253  00CD70  A4D8               	btfss	status,2,c
 11254  00CD72  D004               	goto	l833
 11255                           
 11256                           ;standbyMode.c: 1292: sum = 18;
 11257  00CD74  0E00               	movlw	0
 11258  00CD76  6E36               	movwf	diet_press@sum+1,c
 11259  00CD78  0E12               	movlw	18
 11260  00CD7A  D0EA               	goto	L106
 11261  00CD7C                     l833:
 11262                           
 11263                           ;standbyMode.c: 1296: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11264  00CD7C  0E03               	movlw	3
 11265  00CD7E  1838               	xorwf	diet_press@dietTable,w,c
 11266  00CD80  1039               	iorwf	diet_press@dietTable+1,w,c
 11267  00CD82  A4D8               	btfss	status,2,c
 11268  00CD84  D012               	goto	l835
 11269  00CD86  0E07               	movlw	7
 11270  00CD88  183A               	xorwf	diet_press@dietTable+2,w,c
 11271  00CD8A  103B               	iorwf	diet_press@dietTable+3,w,c
 11272  00CD8C  A4D8               	btfss	status,2,c
 11273  00CD8E  D00D               	goto	l835
 11274  00CD90  0E07               	movlw	7
 11275  00CD92  183C               	xorwf	diet_press@dietTable+4,w,c
 11276  00CD94  103D               	iorwf	diet_press@dietTable+5,w,c
 11277  00CD96  A4D8               	btfss	status,2,c
 11278  00CD98  D008               	goto	l835
 11279  00CD9A  503E               	movf	diet_press@dietTable+6,w,c
 11280  00CD9C  103F               	iorwf	diet_press@dietTable+7,w,c
 11281  00CD9E  A4D8               	btfss	status,2,c
 11282  00CDA0  D004               	goto	l835
 11283                           
 11284                           ;standbyMode.c: 1297: sum = 17;
 11285  00CDA2  0E00               	movlw	0
 11286  00CDA4  6E36               	movwf	diet_press@sum+1,c
 11287  00CDA6  0E11               	movlw	17
 11288  00CDA8  D0D3               	goto	L106
 11289  00CDAA                     l835:
 11290                           
 11291                           ;standbyMode.c: 1301: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11292  00CDAA  0E03               	movlw	3
 11293  00CDAC  1838               	xorwf	diet_press@dietTable,w,c
 11294  00CDAE  1039               	iorwf	diet_press@dietTable+1,w,c
 11295  00CDB0  A4D8               	btfss	status,2,c
 11296  00CDB2  D012               	goto	l837
 11297  00CDB4  0E0C               	movlw	12
 11298  00CDB6  183A               	xorwf	diet_press@dietTable+2,w,c
 11299  00CDB8  103B               	iorwf	diet_press@dietTable+3,w,c
 11300  00CDBA  A4D8               	btfss	status,2,c
 11301  00CDBC  D00D               	goto	l837
 11302  00CDBE  0E0C               	movlw	12
 11303  00CDC0  183C               	xorwf	diet_press@dietTable+4,w,c
 11304  00CDC2  103D               	iorwf	diet_press@dietTable+5,w,c
 11305  00CDC4  A4D8               	btfss	status,2,c
 11306  00CDC6  D008               	goto	l837
 11307  00CDC8  503E               	movf	diet_press@dietTable+6,w,c
 11308  00CDCA  103F               	iorwf	diet_press@dietTable+7,w,c
 11309  00CDCC  A4D8               	btfss	status,2,c
 11310  00CDCE  D004               	goto	l837
 11311                           
 11312                           ;standbyMode.c: 1302: sum = 27;
 11313  00CDD0  0E00               	movlw	0
 11314  00CDD2  6E36               	movwf	diet_press@sum+1,c
 11315  00CDD4  0E1B               	movlw	27
 11316  00CDD6  D0BC               	goto	L106
 11317  00CDD8                     l837:
 11318                           
 11319                           ;standbyMode.c: 1306: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11320  00CDD8  0E03               	movlw	3
 11321  00CDDA  1838               	xorwf	diet_press@dietTable,w,c
 11322  00CDDC  1039               	iorwf	diet_press@dietTable+1,w,c
 11323  00CDDE  A4D8               	btfss	status,2,c
 11324  00CDE0  D012               	goto	l839
 11325  00CDE2  0E07               	movlw	7
 11326  00CDE4  183A               	xorwf	diet_press@dietTable+2,w,c
 11327  00CDE6  103B               	iorwf	diet_press@dietTable+3,w,c
 11328  00CDE8  A4D8               	btfss	status,2,c
 11329  00CDEA  D00D               	goto	l839
 11330  00CDEC  0E0C               	movlw	12
 11331  00CDEE  183C               	xorwf	diet_press@dietTable+4,w,c
 11332  00CDF0  103D               	iorwf	diet_press@dietTable+5,w,c
 11333  00CDF2  A4D8               	btfss	status,2,c
 11334  00CDF4  D008               	goto	l839
 11335  00CDF6  503E               	movf	diet_press@dietTable+6,w,c
 11336  00CDF8  103F               	iorwf	diet_press@dietTable+7,w,c
 11337  00CDFA  A4D8               	btfss	status,2,c
 11338  00CDFC  D004               	goto	l839
 11339                           
 11340                           ;standbyMode.c: 1307: sum = 22;
 11341  00CDFE  0E00               	movlw	0
 11342  00CE00  6E36               	movwf	diet_press@sum+1,c
 11343  00CE02  0E16               	movlw	22
 11344  00CE04  D0A5               	goto	L106
 11345  00CE06                     l839:
 11346                           
 11347                           ;standbyMode.c: 1311: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11348  00CE06  0E07               	movlw	7
 11349  00CE08  1838               	xorwf	diet_press@dietTable,w,c
 11350  00CE0A  1039               	iorwf	diet_press@dietTable+1,w,c
 11351  00CE0C  A4D8               	btfss	status,2,c
 11352  00CE0E  D012               	goto	l841
 11353  00CE10  0E07               	movlw	7
 11354  00CE12  183A               	xorwf	diet_press@dietTable+2,w,c
 11355  00CE14  103B               	iorwf	diet_press@dietTable+3,w,c
 11356  00CE16  A4D8               	btfss	status,2,c
 11357  00CE18  D00D               	goto	l841
 11358  00CE1A  0E0C               	movlw	12
 11359  00CE1C  183C               	xorwf	diet_press@dietTable+4,w,c
 11360  00CE1E  103D               	iorwf	diet_press@dietTable+5,w,c
 11361  00CE20  A4D8               	btfss	status,2,c
 11362  00CE22  D008               	goto	l841
 11363  00CE24  503E               	movf	diet_press@dietTable+6,w,c
 11364  00CE26  103F               	iorwf	diet_press@dietTable+7,w,c
 11365  00CE28  A4D8               	btfss	status,2,c
 11366  00CE2A  D004               	goto	l841
 11367                           
 11368                           ;standbyMode.c: 1312: sum = 26;
 11369  00CE2C  0E00               	movlw	0
 11370  00CE2E  6E36               	movwf	diet_press@sum+1,c
 11371  00CE30  0E1A               	movlw	26
 11372  00CE32  D08E               	goto	L106
 11373  00CE34                     l841:
 11374                           
 11375                           ;standbyMode.c: 1316: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11376  00CE34  0E07               	movlw	7
 11377  00CE36  1838               	xorwf	diet_press@dietTable,w,c
 11378  00CE38  1039               	iorwf	diet_press@dietTable+1,w,c
 11379  00CE3A  A4D8               	btfss	status,2,c
 11380  00CE3C  D012               	goto	l843
 11381  00CE3E  0E0C               	movlw	12
 11382  00CE40  183A               	xorwf	diet_press@dietTable+2,w,c
 11383  00CE42  103B               	iorwf	diet_press@dietTable+3,w,c
 11384  00CE44  A4D8               	btfss	status,2,c
 11385  00CE46  D00D               	goto	l843
 11386  00CE48  0E0C               	movlw	12
 11387  00CE4A  183C               	xorwf	diet_press@dietTable+4,w,c
 11388  00CE4C  103D               	iorwf	diet_press@dietTable+5,w,c
 11389  00CE4E  A4D8               	btfss	status,2,c
 11390  00CE50  D008               	goto	l843
 11391  00CE52  503E               	movf	diet_press@dietTable+6,w,c
 11392  00CE54  103F               	iorwf	diet_press@dietTable+7,w,c
 11393  00CE56  A4D8               	btfss	status,2,c
 11394  00CE58  D004               	goto	l843
 11395                           
 11396                           ;standbyMode.c: 1317: sum = 31;
 11397  00CE5A  0E00               	movlw	0
 11398  00CE5C  6E36               	movwf	diet_press@sum+1,c
 11399  00CE5E  0E1F               	movlw	31
 11400  00CE60  D077               	goto	L106
 11401  00CE62                     l843:
 11402                           
 11403                           ;standbyMode.c: 1321: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11404  00CE62  0E03               	movlw	3
 11405  00CE64  1838               	xorwf	diet_press@dietTable,w,c
 11406  00CE66  1039               	iorwf	diet_press@dietTable+1,w,c
 11407  00CE68  A4D8               	btfss	status,2,c
 11408  00CE6A  D013               	goto	l845
 11409  00CE6C  0E03               	movlw	3
 11410  00CE6E  183A               	xorwf	diet_press@dietTable+2,w,c
 11411  00CE70  103B               	iorwf	diet_press@dietTable+3,w,c
 11412  00CE72  A4D8               	btfss	status,2,c
 11413  00CE74  D00E               	goto	l845
 11414  00CE76  0E07               	movlw	7
 11415  00CE78  183C               	xorwf	diet_press@dietTable+4,w,c
 11416  00CE7A  103D               	iorwf	diet_press@dietTable+5,w,c
 11417  00CE7C  A4D8               	btfss	status,2,c
 11418  00CE7E  D009               	goto	l845
 11419  00CE80  0E0C               	movlw	12
 11420  00CE82  183E               	xorwf	diet_press@dietTable+6,w,c
 11421  00CE84  103F               	iorwf	diet_press@dietTable+7,w,c
 11422  00CE86  A4D8               	btfss	status,2,c
 11423  00CE88  D004               	goto	l845
 11424                           
 11425                           ;standbyMode.c: 1322: sum = 25;
 11426  00CE8A  0E00               	movlw	0
 11427  00CE8C  6E36               	movwf	diet_press@sum+1,c
 11428  00CE8E  0E19               	movlw	25
 11429  00CE90  D05F               	goto	L106
 11430  00CE92                     l845:
 11431                           
 11432                           ;standbyMode.c: 1326: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11433  00CE92  0E03               	movlw	3
 11434  00CE94  1838               	xorwf	diet_press@dietTable,w,c
 11435  00CE96  1039               	iorwf	diet_press@dietTable+1,w,c
 11436  00CE98  A4D8               	btfss	status,2,c
 11437  00CE9A  D013               	goto	l847
 11438  00CE9C  0E07               	movlw	7
 11439  00CE9E  183A               	xorwf	diet_press@dietTable+2,w,c
 11440  00CEA0  103B               	iorwf	diet_press@dietTable+3,w,c
 11441  00CEA2  A4D8               	btfss	status,2,c
 11442  00CEA4  D00E               	goto	l847
 11443  00CEA6  0E07               	movlw	7
 11444  00CEA8  183C               	xorwf	diet_press@dietTable+4,w,c
 11445  00CEAA  103D               	iorwf	diet_press@dietTable+5,w,c
 11446  00CEAC  A4D8               	btfss	status,2,c
 11447  00CEAE  D009               	goto	l847
 11448  00CEB0  0E0C               	movlw	12
 11449  00CEB2  183E               	xorwf	diet_press@dietTable+6,w,c
 11450  00CEB4  103F               	iorwf	diet_press@dietTable+7,w,c
 11451  00CEB6  A4D8               	btfss	status,2,c
 11452  00CEB8  D004               	goto	l847
 11453                           
 11454                           ;standbyMode.c: 1327: sum = 29;
 11455  00CEBA  0E00               	movlw	0
 11456  00CEBC  6E36               	movwf	diet_press@sum+1,c
 11457  00CEBE  0E1D               	movlw	29
 11458  00CEC0  D047               	goto	L106
 11459  00CEC2                     l847:
 11460                           
 11461                           ;standbyMode.c: 1331: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 11462  00CEC2  0E03               	movlw	3
 11463  00CEC4  1838               	xorwf	diet_press@dietTable,w,c
 11464  00CEC6  1039               	iorwf	diet_press@dietTable+1,w,c
 11465  00CEC8  A4D8               	btfss	status,2,c
 11466  00CECA  D013               	goto	l849
 11467  00CECC  0E07               	movlw	7
 11468  00CECE  183A               	xorwf	diet_press@dietTable+2,w,c
 11469  00CED0  103B               	iorwf	diet_press@dietTable+3,w,c
 11470  00CED2  A4D8               	btfss	status,2,c
 11471  00CED4  D00E               	goto	l849
 11472  00CED6  0E0C               	movlw	12
 11473  00CED8  183C               	xorwf	diet_press@dietTable+4,w,c
 11474  00CEDA  103D               	iorwf	diet_press@dietTable+5,w,c
 11475  00CEDC  A4D8               	btfss	status,2,c
 11476  00CEDE  D009               	goto	l849
 11477  00CEE0  0E0C               	movlw	12
 11478  00CEE2  183E               	xorwf	diet_press@dietTable+6,w,c
 11479  00CEE4  103F               	iorwf	diet_press@dietTable+7,w,c
 11480  00CEE6  A4D8               	btfss	status,2,c
 11481  00CEE8  D004               	goto	l849
 11482                           
 11483                           ;standbyMode.c: 1332: sum = 34;
 11484  00CEEA  0E00               	movlw	0
 11485  00CEEC  6E36               	movwf	diet_press@sum+1,c
 11486  00CEEE  0E22               	movlw	34
 11487  00CEF0  D02F               	goto	L106
 11488  00CEF2                     l849:
 11489                           
 11490                           ;standbyMode.c: 1336: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11491  00CEF2  0E03               	movlw	3
 11492  00CEF4  1838               	xorwf	diet_press@dietTable,w,c
 11493  00CEF6  1039               	iorwf	diet_press@dietTable+1,w,c
 11494  00CEF8  A4D8               	btfss	status,2,c
 11495  00CEFA  D013               	goto	l851
 11496  00CEFC  0E0C               	movlw	12
 11497  00CEFE  183A               	xorwf	diet_press@dietTable+2,w,c
 11498  00CF00  103B               	iorwf	diet_press@dietTable+3,w,c
 11499  00CF02  A4D8               	btfss	status,2,c
 11500  00CF04  D00E               	goto	l851
 11501  00CF06  0E0C               	movlw	12
 11502  00CF08  183C               	xorwf	diet_press@dietTable+4,w,c
 11503  00CF0A  103D               	iorwf	diet_press@dietTable+5,w,c
 11504  00CF0C  A4D8               	btfss	status,2,c
 11505  00CF0E  D009               	goto	l851
 11506  00CF10  0E0C               	movlw	12
 11507  00CF12  183E               	xorwf	diet_press@dietTable+6,w,c
 11508  00CF14  103F               	iorwf	diet_press@dietTable+7,w,c
 11509  00CF16  A4D8               	btfss	status,2,c
 11510  00CF18  D004               	goto	l851
 11511                           
 11512                           ;standbyMode.c: 1337: sum = 39;
 11513  00CF1A  0E00               	movlw	0
 11514  00CF1C  6E36               	movwf	diet_press@sum+1,c
 11515  00CF1E  0E27               	movlw	39
 11516  00CF20  D017               	goto	L106
 11517  00CF22                     l851:
 11518                           
 11519                           ;standbyMode.c: 1341: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11520  00CF22  0E07               	movlw	7
 11521  00CF24  1838               	xorwf	diet_press@dietTable,w,c
 11522  00CF26  1039               	iorwf	diet_press@dietTable+1,w,c
 11523  00CF28  A4D8               	btfss	status,2,c
 11524  00CF2A  D014               	goto	l853
 11525  00CF2C  0E0C               	movlw	12
 11526  00CF2E  183A               	xorwf	diet_press@dietTable+2,w,c
 11527  00CF30  103B               	iorwf	diet_press@dietTable+3,w,c
 11528  00CF32  A4D8               	btfss	status,2,c
 11529  00CF34  D00F               	goto	l853
 11530  00CF36  0E0C               	movlw	12
 11531  00CF38  183C               	xorwf	diet_press@dietTable+4,w,c
 11532  00CF3A  103D               	iorwf	diet_press@dietTable+5,w,c
 11533  00CF3C  A4D8               	btfss	status,2,c
 11534  00CF3E  D00A               	goto	l853
 11535  00CF40  0E0C               	movlw	12
 11536  00CF42  183E               	xorwf	diet_press@dietTable+6,w,c
 11537  00CF44  103F               	iorwf	diet_press@dietTable+7,w,c
 11538  00CF46  A4D8               	btfss	status,2,c
 11539  00CF48  D005               	goto	l853
 11540                           
 11541                           ;standbyMode.c: 1342: sum = 43;
 11542  00CF4A  0E00               	movlw	0
 11543  00CF4C  6E36               	movwf	diet_press@sum+1,c
 11544  00CF4E  0E2B               	movlw	43
 11545  00CF50                     L106:
 11546  00CF50  6E35               	movwf	diet_press@sum,c
 11547                           
 11548                           ;standbyMode.c: 1343: }
 11549  00CF52  D02A               	goto	l854
 11550  00CF54                     l853:
 11551                           
 11552                           ;standbyMode.c: 1346: else{
 11553                           ;standbyMode.c: 1347: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11554  00CF54  0E01               	movlw	1
 11555  00CF56  ECDC  F056         	call	_lcdInst
 11556  00CF5A  0EC3               	movlw	195
 11557  00CF5C  6E2B               	movwf	??_diet_press& (0+255),c
 11558  00CF5E  0ECD               	movlw	205
 11559  00CF60                     u12427:
 11560  00CF60  2EE8               	decfsz	wreg,f,c
 11561  00CF62  D7FE               	bra	u12427
 11562  00CF64  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11563  00CF66  D7FC               	bra	u12427
 11564  00CF68  F000               	nop	
 11565                           
 11566                           ;standbyMode.c: 1348: printf("Invalid diet!");
 11567  00CF6A  0E92               	movlw	low STR_71
 11568  00CF6C  6E0D               	movwf	printf@f,c
 11569  00CF6E  0EFB               	movlw	high STR_71
 11570  00CF70  6E0E               	movwf	printf@f+1,c
 11571  00CF72  EC47  F063         	call	_printf	;wreg free
 11572                           
 11573                           ;standbyMode.c: 1349: lcdInst(0xC0);;
 11574  00CF76  0EC0               	movlw	192
 11575  00CF78  ECDC  F056         	call	_lcdInst
 11576                           
 11577                           ;standbyMode.c: 1350: printf("Try again.");
 11578  00CF7C  0E1F               	movlw	low STR_68
 11579  00CF7E  6E0D               	movwf	printf@f,c
 11580  00CF80  0EFC               	movlw	high STR_68
 11581  00CF82  6E0E               	movwf	printf@f+1,c
 11582  00CF84  EC47  F063         	call	_printf	;wreg free
 11583                           
 11584                           ;standbyMode.c: 1351: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11585  00CF88  0E33               	movlw	51
 11586  00CF8A  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11587  00CF8C  0EBB               	movlw	187
 11588  00CF8E  6E2B               	movwf	??_diet_press& (0+255),c
 11589  00CF90  0EE0               	movlw	224
 11590  00CF92                     u12437:
 11591  00CF92  2EE8               	decfsz	wreg,f,c
 11592  00CF94  D7FE               	bra	u12437
 11593  00CF96  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11594  00CF98  D7FC               	bra	u12437
 11595  00CF9A  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11596  00CF9C  D7FA               	bra	u12437
 11597                           
 11598                           ;standbyMode.c: 1352: sum = 0;
 11599  00CF9E  0E00               	movlw	0
 11600  00CFA0  6E36               	movwf	diet_press@sum+1,c
 11601  00CFA2  0E00               	movlw	0
 11602  00CFA4  6E35               	movwf	diet_press@sum,c
 11603                           
 11604                           ;standbyMode.c: 1353: goto START;
 11605  00CFA6  D56C               	goto	_diet_press
 11606  00CFA8                     l854:
 11607                           
 11608                           ;standbyMode.c: 1354: }
 11609                           ;standbyMode.c: 1355: return sum;
 11610  00CFA8  C035  F029         	movff	diet_press@sum,?_diet_press
 11611  00CFAC  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11612  00CFB0  0012               	return		;funcret
 11613  00CFB2                     __end_of_diet_press:
 11614                           	opt stack 0
 11615                           tblptru	equ	0xFF8
 11616                           tblptrh	equ	0xFF7
 11617                           tblptrl	equ	0xFF6
 11618                           tablat	equ	0xFF5
 11619                           prodh	equ	0xFF4
 11620                           prodl	equ	0xFF3
 11621                           postinc0	equ	0xFEE
 11622                           wreg	equ	0xFE8
 11623                           postdec1	equ	0xFE5
 11624                           plusw1	equ	0xFE3
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _decode_diet *****************
 11635 ;; Defined at:
 11636 ;;		line 1359 in file "standbyMode.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;  dietType        2    0[COMRAM] unsigned int 
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;  returnValue     2    4[COMRAM] unsigned int 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  2    0[COMRAM] unsigned int 
 11643 ;; Registers used:
 11644 ;;		wreg, status,2, status,0
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11650 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;Total ram usage:        6 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_standbyMode
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text16
 11664  00BA92                     __ptext16:
 11665                           	opt stack 0
 11666  00BA92                     _decode_diet:
 11667                           	opt stack 29
 11668                           
 11669                           ;standbyMode.c: 1360: unsigned int returnValue = 100;
 11670                           
 11671                           ;incstack = 0
 11672  00BA92  0E00               	movlw	0
 11673  00BA94  6E06               	movwf	decode_diet@returnValue+1,c
 11674  00BA96  0E64               	movlw	100
 11675  00BA98  6E05               	movwf	decode_diet@returnValue,c
 11676                           
 11677                           ;standbyMode.c: 1362: switch(dietType){
 11678  00BA9A  D049               	goto	l858
 11679  00BA9C                     
 11680                           ;standbyMode.c: 1365: returnValue = 2;
 11681  00BA9C  0E00               	movlw	0
 11682  00BA9E  6E06               	movwf	decode_diet@returnValue+1,c
 11683  00BAA0  0E02               	movlw	2
 11684  00BAA2  D043               	goto	L124
 11685  00BAA4                     
 11686                           ;standbyMode.c: 1370: returnValue = 0;
 11687  00BAA4  0E00               	movlw	0
 11688  00BAA6  6E06               	movwf	decode_diet@returnValue+1,c
 11689  00BAA8  0E00               	movlw	0
 11690  00BAAA  D03F               	goto	L124
 11691  00BAAC                     
 11692                           ;standbyMode.c: 1375: returnValue = 1;
 11693  00BAAC  0E00               	movlw	0
 11694  00BAAE  6E06               	movwf	decode_diet@returnValue+1,c
 11695  00BAB0  0E01               	movlw	1
 11696  00BAB2  D03B               	goto	L124
 11697  00BAB4                     
 11698                           ;standbyMode.c: 1380: returnValue = 3;
 11699  00BAB4  0E00               	movlw	0
 11700  00BAB6  6E06               	movwf	decode_diet@returnValue+1,c
 11701  00BAB8  0E03               	movlw	3
 11702  00BABA  D037               	goto	L124
 11703  00BABC                     
 11704                           ;standbyMode.c: 1385: returnValue = 4;
 11705  00BABC  0E00               	movlw	0
 11706  00BABE  6E06               	movwf	decode_diet@returnValue+1,c
 11707  00BAC0  0E04               	movlw	4
 11708  00BAC2  D033               	goto	L124
 11709  00BAC4                     
 11710                           ;standbyMode.c: 1390: returnValue = 5;
 11711  00BAC4  0E00               	movlw	0
 11712  00BAC6  6E06               	movwf	decode_diet@returnValue+1,c
 11713  00BAC8  0E05               	movlw	5
 11714  00BACA  D02F               	goto	L124
 11715  00BACC                     
 11716                           ;standbyMode.c: 1395: returnValue = 6;
 11717  00BACC  0E00               	movlw	0
 11718  00BACE  6E06               	movwf	decode_diet@returnValue+1,c
 11719  00BAD0  0E06               	movlw	6
 11720  00BAD2  D02B               	goto	L124
 11721  00BAD4                     
 11722                           ;standbyMode.c: 1400: returnValue = 7;
 11723  00BAD4  0E00               	movlw	0
 11724  00BAD6  6E06               	movwf	decode_diet@returnValue+1,c
 11725  00BAD8  0E07               	movlw	7
 11726  00BADA  D027               	goto	L124
 11727  00BADC                     
 11728                           ;standbyMode.c: 1405: returnValue = 8;
 11729  00BADC  0E00               	movlw	0
 11730  00BADE  6E06               	movwf	decode_diet@returnValue+1,c
 11731  00BAE0  0E08               	movlw	8
 11732  00BAE2  D023               	goto	L124
 11733  00BAE4                     
 11734                           ;standbyMode.c: 1410: returnValue = 9;
 11735  00BAE4  0E00               	movlw	0
 11736  00BAE6  6E06               	movwf	decode_diet@returnValue+1,c
 11737  00BAE8  0E09               	movlw	9
 11738  00BAEA  D01F               	goto	L124
 11739  00BAEC                     
 11740                           ;standbyMode.c: 1415: returnValue = 10;
 11741  00BAEC  0E00               	movlw	0
 11742  00BAEE  6E06               	movwf	decode_diet@returnValue+1,c
 11743  00BAF0  0E0A               	movlw	10
 11744  00BAF2  D01B               	goto	L124
 11745  00BAF4                     
 11746                           ;standbyMode.c: 1420: returnValue = 11;
 11747  00BAF4  0E00               	movlw	0
 11748  00BAF6  6E06               	movwf	decode_diet@returnValue+1,c
 11749  00BAF8  0E0B               	movlw	11
 11750  00BAFA  D017               	goto	L124
 11751  00BAFC                     
 11752                           ;standbyMode.c: 1425: returnValue = 12;
 11753  00BAFC  0E00               	movlw	0
 11754  00BAFE  6E06               	movwf	decode_diet@returnValue+1,c
 11755  00BB00  0E0C               	movlw	12
 11756  00BB02  D013               	goto	L124
 11757  00BB04                     
 11758                           ;standbyMode.c: 1430: returnValue = 13;
 11759  00BB04  0E00               	movlw	0
 11760  00BB06  6E06               	movwf	decode_diet@returnValue+1,c
 11761  00BB08  0E0D               	movlw	13
 11762  00BB0A  D00F               	goto	L124
 11763  00BB0C                     
 11764                           ;standbyMode.c: 1435: returnValue = 14;
 11765  00BB0C  0E00               	movlw	0
 11766  00BB0E  6E06               	movwf	decode_diet@returnValue+1,c
 11767  00BB10  0E0E               	movlw	14
 11768  00BB12  D00B               	goto	L124
 11769  00BB14                     
 11770                           ;standbyMode.c: 1440: returnValue = 15;
 11771  00BB14  0E00               	movlw	0
 11772  00BB16  6E06               	movwf	decode_diet@returnValue+1,c
 11773  00BB18  0E0F               	movlw	15
 11774  00BB1A  D007               	goto	L124
 11775  00BB1C                     
 11776                           ;standbyMode.c: 1445: returnValue = 16;
 11777  00BB1C  0E00               	movlw	0
 11778  00BB1E  6E06               	movwf	decode_diet@returnValue+1,c
 11779  00BB20  0E10               	movlw	16
 11780  00BB22  D003               	goto	L124
 11781  00BB24                     
 11782                           ;standbyMode.c: 1450: returnValue = 17;
 11783  00BB24  0E00               	movlw	0
 11784  00BB26  6E06               	movwf	decode_diet@returnValue+1,c
 11785  00BB28  0E11               	movlw	17
 11786  00BB2A                     L124:
 11787  00BB2A  6E05               	movwf	decode_diet@returnValue,c
 11788                           
 11789                           ;standbyMode.c: 1455: }
 11790                           
 11791                           ;standbyMode.c: 1454: break;
 11792                           
 11793                           ;standbyMode.c: 1453: default:
 11794                           
 11795                           ;standbyMode.c: 1451: break;
 11796  00BB2C  D03F               	goto	l860
 11797  00BB2E                     l858:
 11798  00BB2E  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 11799  00BB32  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 11800                           
 11801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11802                           ; Switch size 1, requested type "space"
 11803                           ; Number of cases is 1, Range of values is 0 to 0
 11804                           ; switch strategies available:
 11805                           ; Name         Instructions Cycles
 11806                           ; simple_byte            4     3 (average)
 11807                           ;	Chosen strategy is simple_byte
 11808  00BB36  5004               	movf	??_decode_diet+1,w,c
 11809  00BB38  0A00               	xorlw	0	; case 0
 11810  00BB3A  A4D8               	btfss	status,2,c
 11811  00BB3C  D037               	goto	l860
 11812                           
 11813                           ; Switch size 1, requested type "space"
 11814                           ; Number of cases is 18, Range of values is 3 to 43
 11815                           ; switch strategies available:
 11816                           ; Name         Instructions Cycles
 11817                           ; simple_byte           55    28 (average)
 11818                           ;	Chosen strategy is simple_byte
 11819  00BB3E  5003               	movf	??_decode_diet,w,c
 11820  00BB40  0A03               	xorlw	3	; case 3
 11821  00BB42  B4D8               	btfsc	status,2,c
 11822  00BB44  D7AF               	goto	l861
 11823  00BB46  0A04               	xorlw	4	; case 7
 11824  00BB48  B4D8               	btfsc	status,2,c
 11825  00BB4A  D7B0               	goto	l862
 11826  00BB4C  0A0D               	xorlw	13	; case 10
 11827  00BB4E  B4D8               	btfsc	status,2,c
 11828  00BB50  D7B1               	goto	l863
 11829  00BB52  0A06               	xorlw	6	; case 12
 11830  00BB54  B4D8               	btfsc	status,2,c
 11831  00BB56  D7A2               	goto	l859
 11832  00BB58  0A01               	xorlw	1	; case 13
 11833  00BB5A  B4D8               	btfsc	status,2,c
 11834  00BB5C  D7B7               	goto	l866
 11835  00BB5E  0A02               	xorlw	2	; case 15
 11836  00BB60  B4D8               	btfsc	status,2,c
 11837  00BB62  D7AC               	goto	l864
 11838  00BB64  0A1E               	xorlw	30	; case 17
 11839  00BB66  B4D8               	btfsc	status,2,c
 11840  00BB68  D7B9               	goto	l868
 11841  00BB6A  0A03               	xorlw	3	; case 18
 11842  00BB6C  B4D8               	btfsc	status,2,c
 11843  00BB6E  D7B2               	goto	l867
 11844  00BB70  0A01               	xorlw	1	; case 19
 11845  00BB72  B4D8               	btfsc	status,2,c
 11846  00BB74  D7A7               	goto	l865
 11847  00BB76  0A05               	xorlw	5	; case 22
 11848  00BB78  B4D8               	btfsc	status,2,c
 11849  00BB7A  D7B8               	goto	l870
 11850  00BB7C  0A0F               	xorlw	15	; case 25
 11851  00BB7E  B4D8               	btfsc	status,2,c
 11852  00BB80  D7C1               	goto	l873
 11853  00BB82  0A03               	xorlw	3	; case 26
 11854  00BB84  B4D8               	btfsc	status,2,c
 11855  00BB86  D7B6               	goto	l871
 11856  00BB88  0A01               	xorlw	1	; case 27
 11857  00BB8A  B4D8               	btfsc	status,2,c
 11858  00BB8C  D7AB               	goto	l869
 11859  00BB8E  0A06               	xorlw	6	; case 29
 11860  00BB90  B4D8               	btfsc	status,2,c
 11861  00BB92  D7BC               	goto	l874
 11862  00BB94  0A02               	xorlw	2	; case 31
 11863  00BB96  B4D8               	btfsc	status,2,c
 11864  00BB98  D7B1               	goto	l872
 11865  00BB9A  0A3D               	xorlw	61	; case 34
 11866  00BB9C  B4D8               	btfsc	status,2,c
 11867  00BB9E  D7BA               	goto	l875
 11868  00BBA0  0A05               	xorlw	5	; case 39
 11869  00BBA2  B4D8               	btfsc	status,2,c
 11870  00BBA4  D7BB               	goto	l876
 11871  00BBA6  0A0C               	xorlw	12	; case 43
 11872  00BBA8  B4D8               	btfsc	status,2,c
 11873  00BBAA  D7BC               	goto	l877
 11874  00BBAC                     l860:
 11875                           
 11876                           ;standbyMode.c: 1456: return returnValue;
 11877  00BBAC  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 11878  00BBB0  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 11879  00BBB4  0012               	return		;funcret
 11880  00BBB6                     __end_of_decode_diet:
 11881                           	opt stack 0
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           postinc0	equ	0xFEE
 11889                           wreg	equ	0xFE8
 11890                           postdec1	equ	0xFE5
 11891                           plusw1	equ	0xFE3
 11892                           fsr1l	equ	0xFE1
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           plusw2	equ	0xFDB
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function _I2C_Master_Write *****************
 11902 ;; Defined at:
 11903 ;;		line 108 in file "I2C.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  1    wreg      void 
 11910 ;; Registers used:
 11911 ;;		wreg, status,2, status,0, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11917 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11921 ;;Total ram usage:        2 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    1
 11924 ;; This function calls:
 11925 ;;		_I2C_Master_Wait
 11926 ;; This function is called by:
 11927 ;;		_standbyMode
 11928 ;;		_RTC_setTime
 11929 ;;		_tick
 11930 ;;		_tock
 11931 ;;		_sendByteToArduino
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text17
 11936  00AD9C                     __ptext17:
 11937                           	opt stack 0
 11938  00AD9C                     _I2C_Master_Write:
 11939                           	opt stack 28
 11940                           
 11941                           ;I2C.c: 116: I2C_Master_Wait();
 11942                           
 11943                           ;incstack = 0
 11944  00AD9C  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 11945                           
 11946                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11947  00ADA0  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11948  00ADA4  0012               	return		;funcret
 11949  00ADA6                     __end_of_I2C_Master_Write:
 11950                           	opt stack 0
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           postinc0	equ	0xFEE
 11958                           wreg	equ	0xFE8
 11959                           postdec1	equ	0xFE5
 11960                           plusw1	equ	0xFE3
 11961                           fsr1l	equ	0xFE1
 11962                           indf2	equ	0xFDF
 11963                           postinc2	equ	0xFDE
 11964                           postdec2	equ	0xFDD
 11965                           plusw2	equ	0xFDB
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8
 11969                           
 11970 ;; *************** function _I2C_Master_Stop *****************
 11971 ;; Defined at:
 11972 ;;		line 95 in file "I2C.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;		None
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;		None
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  1    wreg      void 
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;Total ram usage:        0 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:    1
 11993 ;; This function calls:
 11994 ;;		_I2C_Master_Wait
 11995 ;; This function is called by:
 11996 ;;		_standbyMode
 11997 ;;		_RTC_setTime
 11998 ;;		_tick
 11999 ;;		_tock
 12000 ;;		_sendByteToArduino
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           	psect	text18
 12005  00AD8C                     __ptext18:
 12006                           	opt stack 0
 12007  00AD8C                     _I2C_Master_Stop:
 12008                           	opt stack 28
 12009                           
 12010                           ;I2C.c: 104: I2C_Master_Wait();
 12011                           
 12012                           ;incstack = 0
 12013  00AD8C  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 12014                           
 12015                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12016  00AD90  84C5               	bsf	4037,2,c	;volatile
 12017  00AD92  0012               	return		;funcret
 12018  00AD94                     __end_of_I2C_Master_Stop:
 12019                           	opt stack 0
 12020                           tblptru	equ	0xFF8
 12021                           tblptrh	equ	0xFF7
 12022                           tblptrl	equ	0xFF6
 12023                           tablat	equ	0xFF5
 12024                           prodh	equ	0xFF4
 12025                           prodl	equ	0xFF3
 12026                           postinc0	equ	0xFEE
 12027                           wreg	equ	0xFE8
 12028                           postdec1	equ	0xFE5
 12029                           plusw1	equ	0xFE3
 12030                           fsr1l	equ	0xFE1
 12031                           indf2	equ	0xFDF
 12032                           postinc2	equ	0xFDE
 12033                           postdec2	equ	0xFDD
 12034                           plusw2	equ	0xFDB
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _I2C_Master_Start *****************
 12040 ;; Defined at:
 12041 ;;		line 69 in file "I2C.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;                  1    wreg      void 
 12048 ;; Registers used:
 12049 ;;		wreg, status,2, status,0, cstack
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    1
 12062 ;; This function calls:
 12063 ;;		_I2C_Master_Wait
 12064 ;; This function is called by:
 12065 ;;		_standbyMode
 12066 ;;		_RTC_setTime
 12067 ;;		_tick
 12068 ;;		_tock
 12069 ;;		_sendByteToArduino
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           	psect	text19
 12074  00AD84                     __ptext19:
 12075                           	opt stack 0
 12076  00AD84                     _I2C_Master_Start:
 12077                           	opt stack 28
 12078                           
 12079                           ;I2C.c: 78: I2C_Master_Wait();
 12080                           
 12081                           ;incstack = 0
 12082  00AD84  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 12083                           
 12084                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12085  00AD88  80C5               	bsf	4037,0,c	;volatile
 12086  00AD8A  0012               	return		;funcret
 12087  00AD8C                     __end_of_I2C_Master_Start:
 12088                           	opt stack 0
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           postinc0	equ	0xFEE
 12096                           wreg	equ	0xFE8
 12097                           postdec1	equ	0xFE5
 12098                           plusw1	equ	0xFE3
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           plusw2	equ	0xFDB
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function _I2C_Master_Read *****************
 12109 ;; Defined at:
 12110 ;;		line 120 in file "I2C.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  ackBit          1    wreg     unsigned char 
 12113 ;; Auto vars:     Size  Location     Type
 12114 ;;  ackBit          1    1[COMRAM] unsigned char 
 12115 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      unsigned char 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2, status,0, cstack
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;Total ram usage:        2 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    1
 12132 ;; This function calls:
 12133 ;;		_I2C_Master_Wait
 12134 ;; This function is called by:
 12135 ;;		_standbyMode
 12136 ;;		_tick
 12137 ;;		_tock
 12138 ;; This function uses a non-reentrant model
 12139 ;;
 12140                           
 12141                           	psect	text20
 12142  00AE12                     __ptext20:
 12143                           	opt stack 0
 12144  00AE12                     _I2C_Master_Read:
 12145                           	opt stack 28
 12146                           
 12147                           ;incstack = 0
 12148                           ;I2C_Master_Read@ackBit stored from wreg
 12149  00AE12  6E02               	movwf	I2C_Master_Read@ackBit,c
 12150                           
 12151                           ;I2C.c: 130: unsigned char receivedByte;
 12152                           ;I2C.c: 132: I2C_Master_Wait();
 12153  00AE14  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 12154                           
 12155                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12156  00AE18  86C5               	bsf	4037,3,c	;volatile
 12157                           
 12158                           ;I2C.c: 135: I2C_Master_Wait();
 12159  00AE1A  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 12160                           
 12161                           ;I2C.c: 136: receivedByte = SSPBUF;
 12162  00AE1E  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12163                           
 12164                           ;I2C.c: 138: I2C_Master_Wait();
 12165  00AE22  ECD3  F056         	call	_I2C_Master_Wait	;wreg free
 12166                           
 12167                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12168  00AE26  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12169  00AE28  D002               	bra	u10065
 12170  00AE2A  9AC5               	bcf	4037,5,c	;volatile
 12171  00AE2C  D001               	bra	u10066
 12172  00AE2E                     u10065:
 12173  00AE2E  8AC5               	bsf	4037,5,c	;volatile
 12174  00AE30                     u10066:
 12175                           
 12176                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12177  00AE30  88C5               	bsf	4037,4,c	;volatile
 12178                           
 12179                           ;I2C.c: 142: return receivedByte;
 12180  00AE32  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12181  00AE34  0012               	return	
 12182  00AE36                     __end_of_I2C_Master_Read:
 12183                           	opt stack 0
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           postinc0	equ	0xFEE
 12191                           wreg	equ	0xFE8
 12192                           postdec1	equ	0xFE5
 12193                           plusw1	equ	0xFE3
 12194                           fsr1l	equ	0xFE1
 12195                           indf2	equ	0xFDF
 12196                           postinc2	equ	0xFDE
 12197                           postdec2	equ	0xFDD
 12198                           plusw2	equ	0xFDB
 12199                           fsr2h	equ	0xFDA
 12200                           fsr2l	equ	0xFD9
 12201                           status	equ	0xFD8
 12202                           
 12203 ;; *************** function _I2C_Master_Wait *****************
 12204 ;; Defined at:
 12205 ;;		line 51 in file "I2C.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;		None
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;		None
 12210 ;; Return value:  Size  Location     Type
 12211 ;;                  1    wreg      void 
 12212 ;; Registers used:
 12213 ;;		wreg, status,2, status,0
 12214 ;; Tracked objects:
 12215 ;;		On entry : 0/0
 12216 ;;		On exit  : 0/0
 12217 ;;		Unchanged: 0/0
 12218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;Total ram usage:        1 bytes
 12224 ;; Hardware stack levels used:    1
 12225 ;; This function calls:
 12226 ;;		Nothing
 12227 ;; This function is called by:
 12228 ;;		_I2C_Master_Start
 12229 ;;		_I2C_Master_Stop
 12230 ;;		_I2C_Master_Write
 12231 ;;		_I2C_Master_Read
 12232 ;;		_I2C_Master_RepeatedStart
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text21
 12237  00ADA6                     __ptext21:
 12238                           	opt stack 0
 12239  00ADA6                     _I2C_Master_Wait:
 12240                           	opt stack 28
 12241                           
 12242                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12243                           
 12244                           ;incstack = 0
 12245  00ADA6  B4C7               	btfsc	4039,2,c	;volatile
 12246  00ADA8  D7FE               	goto	_I2C_Master_Wait
 12247  00ADAA  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12248  00ADAE  0E1F               	movlw	31
 12249  00ADB0  1601               	andwf	??_I2C_Master_Wait,f,c
 12250  00ADB2  B4D8               	btfsc	status,2,c
 12251  00ADB4  0012               	return	
 12252  00ADB6  D7F7               	goto	_I2C_Master_Wait
 12253  00ADB8                     __end_of_I2C_Master_Wait:
 12254                           	opt stack 0
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           postinc0	equ	0xFEE
 12262                           wreg	equ	0xFE8
 12263                           postdec1	equ	0xFE5
 12264                           plusw1	equ	0xFE3
 12265                           fsr1l	equ	0xFE1
 12266                           indf2	equ	0xFDF
 12267                           postinc2	equ	0xFDE
 12268                           postdec2	equ	0xFDD
 12269                           plusw2	equ	0xFDB
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274 ;; *************** function _I2C_Master_Init *****************
 12275 ;; Defined at:
 12276 ;;		line 14 in file "I2C.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;		None
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      void 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2, status,0, cstack
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;Total ram usage:        8 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    1
 12297 ;; This function calls:
 12298 ;;		___lldiv
 12299 ;; This function is called by:
 12300 ;;		_standbyMode
 12301 ;;		_tick
 12302 ;;		_tock
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           	psect	text22
 12307  00B01C                     __ptext22:
 12308                           	opt stack 0
 12309  00B01C                     _I2C_Master_Init:
 12310                           	opt stack 28
 12311                           
 12312                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12313                           
 12314                           ;incstack = 0
 12315  00B01C  9AC6               	bcf	4038,5,c	;volatile
 12316                           
 12317                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12318  00B01E  8694               	bsf	3988,3,c	;volatile
 12319                           
 12320                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12321  00B020  8894               	bsf	3988,4,c	;volatile
 12322                           
 12323                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12324  00B022  0E80               	movlw	128
 12325  00B024  6EC7               	movwf	4039,c	;volatile
 12326                           
 12327                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12328  00B026  0E28               	movlw	40
 12329  00B028  6EC6               	movwf	4038,c	;volatile
 12330                           
 12331                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12332  00B02A  0E00               	movlw	0
 12333  00B02C  6EC5               	movwf	4037,c	;volatile
 12334                           
 12335                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12336  00B02E  0E00               	movlw	0
 12337  00B030  6E01               	movwf	___lldiv@dividend,c
 12338  00B032  0E5A               	movlw	90
 12339  00B034  6E02               	movwf	___lldiv@dividend+1,c
 12340  00B036  0E62               	movlw	98
 12341  00B038  6E03               	movwf	___lldiv@dividend+2,c
 12342  00B03A  0E02               	movlw	2
 12343  00B03C  6E04               	movwf	___lldiv@dividend+3,c
 12344  00B03E  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12345  00B042  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12346  00B046  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12347  00B04A  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12348  00B04E  0E02               	movlw	2
 12349  00B050                     u10055:
 12350  00B050  90D8               	bcf	status,0,c
 12351  00B052  3612               	rlcf	??_I2C_Master_Init,f,c
 12352  00B054  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12353  00B056  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12354  00B058  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12355  00B05A  2EE8               	decfsz	wreg,f,c
 12356  00B05C  D7F9               	goto	u10055
 12357  00B05E  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12358  00B062  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12359  00B066  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12360  00B06A  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12361  00B06E  ECB6  F058         	call	___lldiv	;wreg free
 12362  00B072  0401               	decf	?___lldiv,w,c
 12363  00B074  6EC8               	movwf	4040,c	;volatile
 12364  00B076  0012               	return		;funcret
 12365  00B078                     __end_of_I2C_Master_Init:
 12366                           	opt stack 0
 12367                           tblptru	equ	0xFF8
 12368                           tblptrh	equ	0xFF7
 12369                           tblptrl	equ	0xFF6
 12370                           tablat	equ	0xFF5
 12371                           prodh	equ	0xFF4
 12372                           prodl	equ	0xFF3
 12373                           postinc0	equ	0xFEE
 12374                           wreg	equ	0xFE8
 12375                           postdec1	equ	0xFE5
 12376                           plusw1	equ	0xFE3
 12377                           fsr1l	equ	0xFE1
 12378                           indf2	equ	0xFDF
 12379                           postinc2	equ	0xFDE
 12380                           postdec2	equ	0xFDD
 12381                           plusw2	equ	0xFDB
 12382                           fsr2h	equ	0xFDA
 12383                           fsr2l	equ	0xFD9
 12384                           status	equ	0xFD8
 12385                           
 12386 ;; *************** function ___lldiv *****************
 12387 ;; Defined at:
 12388 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  dividend        4    0[COMRAM] unsigned long 
 12391 ;;  divisor         4    4[COMRAM] unsigned long 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  quotient        4    8[COMRAM] unsigned long 
 12394 ;;  counter         1   12[COMRAM] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  4    0[COMRAM] unsigned long 
 12397 ;; Registers used:
 12398 ;;		wreg, status,2, status,0
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12404 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12407 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12408 ;;Total ram usage:       13 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; This function calls:
 12411 ;;		Nothing
 12412 ;; This function is called by:
 12413 ;;		_I2C_Master_Init
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           	psect	text23
 12418  00B16C                     __ptext23:
 12419                           	opt stack 0
 12420  00B16C                     ___lldiv:
 12421                           	opt stack 28
 12422                           
 12423                           ;incstack = 0
 12424  00B16C  0E00               	movlw	0
 12425  00B16E  6E09               	movwf	___lldiv@quotient,c
 12426  00B170  0E00               	movlw	0
 12427  00B172  6E0A               	movwf	___lldiv@quotient+1,c
 12428  00B174  0E00               	movlw	0
 12429  00B176  6E0B               	movwf	___lldiv@quotient+2,c
 12430  00B178  0E00               	movlw	0
 12431  00B17A  6E0C               	movwf	___lldiv@quotient+3,c
 12432  00B17C  5005               	movf	___lldiv@divisor,w,c
 12433  00B17E  1006               	iorwf	___lldiv@divisor+1,w,c
 12434  00B180  1007               	iorwf	___lldiv@divisor+2,w,c
 12435  00B182  1008               	iorwf	___lldiv@divisor+3,w,c
 12436  00B184  B4D8               	btfsc	status,2,c
 12437  00B186  D02A               	goto	l1718
 12438  00B188  0E01               	movlw	1
 12439  00B18A  6E0D               	movwf	___lldiv@counter,c
 12440  00B18C  D006               	goto	l1713
 12441  00B18E  90D8               	bcf	status,0,c
 12442  00B190  3605               	rlcf	___lldiv@divisor,f,c
 12443  00B192  3606               	rlcf	___lldiv@divisor+1,f,c
 12444  00B194  3607               	rlcf	___lldiv@divisor+2,f,c
 12445  00B196  3608               	rlcf	___lldiv@divisor+3,f,c
 12446  00B198  2A0D               	incf	___lldiv@counter,f,c
 12447  00B19A                     l1713:
 12448  00B19A  AE08               	btfss	___lldiv@divisor+3,7,c
 12449  00B19C  D7F8               	goto	l1714
 12450  00B19E                     u7610:
 12451  00B19E  90D8               	bcf	status,0,c
 12452  00B1A0  3609               	rlcf	___lldiv@quotient,f,c
 12453  00B1A2  360A               	rlcf	___lldiv@quotient+1,f,c
 12454  00B1A4  360B               	rlcf	___lldiv@quotient+2,f,c
 12455  00B1A6  360C               	rlcf	___lldiv@quotient+3,f,c
 12456  00B1A8  5005               	movf	___lldiv@divisor,w,c
 12457  00B1AA  5C01               	subwf	___lldiv@dividend,w,c
 12458  00B1AC  5006               	movf	___lldiv@divisor+1,w,c
 12459  00B1AE  5802               	subwfb	___lldiv@dividend+1,w,c
 12460  00B1B0  5007               	movf	___lldiv@divisor+2,w,c
 12461  00B1B2  5803               	subwfb	___lldiv@dividend+2,w,c
 12462  00B1B4  5008               	movf	___lldiv@divisor+3,w,c
 12463  00B1B6  5804               	subwfb	___lldiv@dividend+3,w,c
 12464  00B1B8  A0D8               	btfss	status,0,c
 12465  00B1BA  D009               	goto	l1717
 12466  00B1BC  5005               	movf	___lldiv@divisor,w,c
 12467  00B1BE  5E01               	subwf	___lldiv@dividend,f,c
 12468  00B1C0  5006               	movf	___lldiv@divisor+1,w,c
 12469  00B1C2  5A02               	subwfb	___lldiv@dividend+1,f,c
 12470  00B1C4  5007               	movf	___lldiv@divisor+2,w,c
 12471  00B1C6  5A03               	subwfb	___lldiv@dividend+2,f,c
 12472  00B1C8  5008               	movf	___lldiv@divisor+3,w,c
 12473  00B1CA  5A04               	subwfb	___lldiv@dividend+3,f,c
 12474  00B1CC  8009               	bsf	___lldiv@quotient,0,c
 12475  00B1CE                     l1717:
 12476  00B1CE  90D8               	bcf	status,0,c
 12477  00B1D0  3208               	rrcf	___lldiv@divisor+3,f,c
 12478  00B1D2  3207               	rrcf	___lldiv@divisor+2,f,c
 12479  00B1D4  3206               	rrcf	___lldiv@divisor+1,f,c
 12480  00B1D6  3205               	rrcf	___lldiv@divisor,f,c
 12481  00B1D8  2E0D               	decfsz	___lldiv@counter,f,c
 12482  00B1DA  D7E1               	goto	u7610
 12483  00B1DC                     l1718:
 12484  00B1DC  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12485  00B1E0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12486  00B1E4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12487  00B1E8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12488  00B1EC  0012               	return		;funcret
 12489  00B1EE                     __end_of___lldiv:
 12490                           	opt stack 0
 12491                           tblptru	equ	0xFF8
 12492                           tblptrh	equ	0xFF7
 12493                           tblptrl	equ	0xFF6
 12494                           tablat	equ	0xFF5
 12495                           prodh	equ	0xFF4
 12496                           prodl	equ	0xFF3
 12497                           postinc0	equ	0xFEE
 12498                           wreg	equ	0xFE8
 12499                           postdec1	equ	0xFE5
 12500                           plusw1	equ	0xFE3
 12501                           fsr1l	equ	0xFE1
 12502                           indf2	equ	0xFDF
 12503                           postinc2	equ	0xFDE
 12504                           postdec2	equ	0xFDD
 12505                           plusw2	equ	0xFDB
 12506                           fsr2h	equ	0xFDA
 12507                           fsr2l	equ	0xFD9
 12508                           status	equ	0xFD8
 12509                           
 12510 ;; *************** function _mainOperation *****************
 12511 ;; Defined at:
 12512 ;;		line 492 in file "operationMode.c"
 12513 ;; Parameters:    Size  Location     Type
 12514 ;;		None
 12515 ;; Auto vars:     Size  Location     Type
 12516 ;;  sortedDrawer   16   54[BANK0 ] unsigned int [8]
 12517 ;;  drawerTable    16   32[BANK0 ] unsigned int [8]
 12518 ;;  foodTable      16   16[BANK0 ] unsigned int [8]
 12519 ;;  dietTable      16    0[BANK0 ] unsigned int [8]
 12520 ;;  i               2   70[BANK0 ] unsigned int 
 12521 ;;  currentDrawe    2   52[BANK0 ] unsigned int 
 12522 ;;  nextDrawer      2   50[BANK0 ] unsigned int 
 12523 ;;  temp            2   48[BANK0 ] unsigned int 
 12524 ;; Return value:  Size  Location     Type
 12525 ;;                  1    wreg      void 
 12526 ;; Registers used:
 12527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12528 ;; Tracked objects:
 12529 ;;		On entry : 0/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12536 ;;      Totals:         2      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;Total ram usage:       74 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    3
 12540 ;; This function calls:
 12541 ;;		_getUserInputs
 12542 ;;		_lcdInst
 12543 ;;		_printf
 12544 ;;		_sortDrawerList
 12545 ;; This function is called by:
 12546 ;;		_main
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           	psect	text24
 12551  00BBB6                     __ptext24:
 12552                           	opt stack 0
 12553  00BBB6                     _mainOperation:
 12554                           	opt stack 27
 12555                           
 12556                           ;operationMode.c: 493: unsigned int i = 0;
 12557                           
 12558                           ;incstack = 0
 12559  00BBB6  0E00               	movlw	0
 12560  00BBB8  0100               	movlb	0	; () banked
 12561  00BBBA  6FC7               	movwf	(mainOperation@i+1)& (0+255),b
 12562  00BBBC  0E00               	movlw	0
 12563  00BBBE  6FC6               	movwf	mainOperation@i& (0+255),b
 12564                           
 12565                           ;operationMode.c: 494: unsigned int currentDrawer = 0;
 12566  00BBC0  0E00               	movlw	0
 12567  00BBC2  6FB5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12568  00BBC4  0E00               	movlw	0
 12569  00BBC6  6FB4               	movwf	mainOperation@currentDrawer& (0+255),b
 12570                           
 12571                           ;operationMode.c: 495: unsigned int temp = 0;
 12572  00BBC8  0E00               	movlw	0
 12573  00BBCA  6FB1               	movwf	(mainOperation@temp+1)& (0+255),b
 12574  00BBCC  0E00               	movlw	0
 12575  00BBCE  6FB0               	movwf	mainOperation@temp& (0+255),b
 12576                           
 12577                           ;operationMode.c: 496: unsigned int nextDrawer = 0;
 12578  00BBD0  0E00               	movlw	0
 12579  00BBD2  6FB3               	movwf	(mainOperation@nextDrawer+1)& (0+255),b
 12580  00BBD4  0E00               	movlw	0
 12581  00BBD6  6FB2               	movwf	mainOperation@nextDrawer& (0+255),b
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;operationMode.c: 498: unsigned int drawerTable[8] = {0,0,0,0,0,0,0,0};
 12585  00BBD8  EE21  F0EA         	lfsr	2,mainOperation@F3127
 12586  00BBDC  EE10  F0A0         	lfsr	1,mainOperation@drawerTable
 12587  00BBE0  0E0F               	movlw	15
 12588  00BBE2                     u10701:
 12589  00BBE2  CFDB FFE3          	movff	plusw2,plusw1
 12590  00BBE6  06E8               	decf	wreg,f,c
 12591  00BBE8  E2FC               	bc	u10701
 12592                           
 12593                           ; BSR set to: 0
 12594                           ;operationMode.c: 499: unsigned int sortedDrawerTable[8] = {0,0,0,0,0,0,0,0};
 12595  00BBEA  EE21  F0DA         	lfsr	2,mainOperation@F3129
 12596  00BBEE  EE10  F0B6         	lfsr	1,mainOperation@sortedDrawerTable
 12597  00BBF2  0E0F               	movlw	15
 12598  00BBF4                     u10711:
 12599  00BBF4  CFDB FFE3          	movff	plusw2,plusw1
 12600  00BBF8  06E8               	decf	wreg,f,c
 12601  00BBFA  E2FC               	bc	u10711
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;operationMode.c: 500: unsigned int dietTable[8] = {0,0,0,0,0,0,0,0};
 12605  00BBFC  EE21  F0CA         	lfsr	2,mainOperation@F3131
 12606  00BC00  EE10  F080         	lfsr	1,mainOperation@dietTable
 12607  00BC04  0E0F               	movlw	15
 12608  00BC06                     u10721:
 12609  00BC06  CFDB FFE3          	movff	plusw2,plusw1
 12610  00BC0A  06E8               	decf	wreg,f,c
 12611  00BC0C  E2FC               	bc	u10721
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;operationMode.c: 501: unsigned int foodTable[8] = {0,0,0,0,0,0,0,0};
 12615  00BC0E  EE21  F0BA         	lfsr	2,mainOperation@F3133
 12616  00BC12  EE10  F090         	lfsr	1,mainOperation@foodTable
 12617  00BC16  0E0F               	movlw	15
 12618  00BC18                     u10731:
 12619  00BC18  CFDB FFE3          	movff	plusw2,plusw1
 12620  00BC1C  06E8               	decf	wreg,f,c
 12621  00BC1E  E2FC               	bc	u10731
 12622                           
 12623                           ;operationMode.c: 504: currentDrawer = 1;
 12624  00BC20  0E00               	movlw	0
 12625  00BC22  6FB5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12626  00BC24  0E01               	movlw	1
 12627  00BC26  6FB4               	movwf	mainOperation@currentDrawer& (0+255),b
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;operationMode.c: 506: getUserInputs(drawerTable, dietTable, foodTable);
 12631  00BC28  0EA0               	movlw	low mainOperation@drawerTable
 12632  00BC2A  6E07               	movwf	getUserInputs@drawerTable,c
 12633  00BC2C  0E00               	movlw	high mainOperation@drawerTable
 12634  00BC2E  6E08               	movwf	getUserInputs@drawerTable+1,c
 12635  00BC30  0E80               	movlw	low mainOperation@dietTable
 12636  00BC32  6E09               	movwf	getUserInputs@dietTable,c
 12637  00BC34  0E00               	movlw	high mainOperation@dietTable
 12638  00BC36  6E0A               	movwf	getUserInputs@dietTable+1,c
 12639  00BC38  0E90               	movlw	low mainOperation@foodTable
 12640  00BC3A  6E0B               	movwf	getUserInputs@foodTable,c
 12641  00BC3C  0E00               	movlw	high mainOperation@foodTable
 12642  00BC3E  6E0C               	movwf	getUserInputs@foodTable+1,c
 12643  00BC40  ECBC  F05C         	call	_getUserInputs	;wreg free
 12644                           
 12645                           ;operationMode.c: 507: sortDrawerList(drawerTable, sortedDrawerTable);
 12646  00BC44  0EA0               	movlw	low mainOperation@drawerTable
 12647  00BC46  6E01               	movwf	sortDrawerList@drawerTable,c
 12648  00BC48  0E00               	movlw	high mainOperation@drawerTable
 12649  00BC4A  6E02               	movwf	sortDrawerList@drawerTable+1,c
 12650  00BC4C  0EB6               	movlw	low mainOperation@sortedDrawerTable
 12651  00BC4E  6E03               	movwf	sortDrawerList@sortedDrawerTable,c
 12652  00BC50  0E00               	movlw	high mainOperation@sortedDrawerTable
 12653  00BC52  6E04               	movwf	sortDrawerList@sortedDrawerTable+1,c
 12654  00BC54  ECEF  F06F         	call	_sortDrawerList	;wreg free
 12655                           
 12656                           ;operationMode.c: 509: for (i=0; i<8; i++){
 12657  00BC58  0E00               	movlw	0
 12658  00BC5A  0100               	movlb	0	; () banked
 12659  00BC5C  6FC7               	movwf	(mainOperation@i+1)& (0+255),b
 12660  00BC5E  0E00               	movlw	0
 12661  00BC60  6FC6               	movwf	mainOperation@i& (0+255),b
 12662  00BC62                     l8662:
 12663                           
 12664                           ; BSR set to: 0
 12665  00BC62  51C7               	movf	(mainOperation@i+1)& (0+255),w,b
 12666  00BC64  E16A               	bnz	l355
 12667  00BC66  0E08               	movlw	8
 12668  00BC68  5DC6               	subwf	mainOperation@i& (0+255),w,b
 12669  00BC6A  B0D8               	btfsc	status,0,c
 12670  00BC6C  0012               	return	
 12671                           
 12672                           ; BSR set to: 0
 12673                           ;operationMode.c: 510: if (sortedDrawerTable[i] != 0){
 12674                           
 12675                           ; BSR set to: 0
 12676                           
 12677                           ; BSR set to: 0
 12678  00BC6E  90D8               	bcf	status,0,c
 12679  00BC70  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12680  00BC72  6ED9               	movwf	fsr2l,c
 12681  00BC74  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12682  00BC76  6EDA               	movwf	fsr2h,c
 12683  00BC78  0EB6               	movlw	low mainOperation@sortedDrawerTable
 12684  00BC7A  26D9               	addwf	fsr2l,f,c
 12685  00BC7C  0E00               	movlw	high mainOperation@sortedDrawerTable
 12686  00BC7E  22DA               	addwfc	fsr2h,f,c
 12687  00BC80  50DE               	movf	postinc2,w,c
 12688  00BC82  10DE               	iorwf	postinc2,w,c
 12689  00BC84  B4D8               	btfsc	status,2,c
 12690  00BC86  D055               	goto	l354
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;operationMode.c: 511: currentDrawer = sortedDrawerTable[i];
 12694  00BC88  90D8               	bcf	status,0,c
 12695  00BC8A  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12696  00BC8C  6ED9               	movwf	fsr2l,c
 12697  00BC8E  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12698  00BC90  6EDA               	movwf	fsr2h,c
 12699  00BC92  0EB6               	movlw	low mainOperation@sortedDrawerTable
 12700  00BC94  26D9               	addwf	fsr2l,f,c
 12701  00BC96  0E00               	movlw	high mainOperation@sortedDrawerTable
 12702  00BC98  22DA               	addwfc	fsr2h,f,c
 12703  00BC9A  CFDE F0B4          	movff	postinc2,mainOperation@currentDrawer
 12704  00BC9E  CFDD F0B5          	movff	postdec2,mainOperation@currentDrawer+1
 12705                           
 12706                           ;operationMode.c: 512: nextDrawer = sortedDrawerTable[i+1];
 12707  00BCA2  C0C6  F037         	movff	mainOperation@i,??_mainOperation
 12708  00BCA6  C0C7  F038         	movff	mainOperation@i+1,??_mainOperation+1
 12709  00BCAA  90D8               	bcf	status,0,c
 12710  00BCAC  3637               	rlcf	??_mainOperation,f,c
 12711  00BCAE  3638               	rlcf	??_mainOperation+1,f,c
 12712  00BCB0  0E02               	movlw	2
 12713  00BCB2  2637               	addwf	??_mainOperation,f,c
 12714  00BCB4  0E00               	movlw	0
 12715  00BCB6  2238               	addwfc	??_mainOperation+1,f,c
 12716  00BCB8  0EB6               	movlw	low mainOperation@sortedDrawerTable
 12717  00BCBA  2437               	addwf	??_mainOperation,w,c
 12718  00BCBC  6ED9               	movwf	fsr2l,c
 12719  00BCBE  0E00               	movlw	high mainOperation@sortedDrawerTable
 12720  00BCC0  2038               	addwfc	??_mainOperation+1,w,c
 12721  00BCC2  6EDA               	movwf	fsr2h,c
 12722  00BCC4  CFDE F0B2          	movff	postinc2,mainOperation@nextDrawer
 12723  00BCC8  CFDD F0B3          	movff	postdec2,mainOperation@nextDrawer+1
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;operationMode.c: 513: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12727  00BCCC  0E01               	movlw	1
 12728  00BCCE  ECDC  F056         	call	_lcdInst
 12729  00BCD2  0EC3               	movlw	195
 12730  00BCD4  6E37               	movwf	??_mainOperation& (0+255),c
 12731  00BCD6  0ECD               	movlw	205
 12732  00BCD8                     u12447:
 12733  00BCD8  2EE8               	decfsz	wreg,f,c
 12734  00BCDA  D7FE               	bra	u12447
 12735  00BCDC  2E37               	decfsz	??_mainOperation& (0+255),f,c
 12736  00BCDE  D7FC               	bra	u12447
 12737  00BCE0  F000               	nop	
 12738                           
 12739                           ;operationMode.c: 514: printf("Moving to");
 12740  00BCE2  0E69               	movlw	low STR_3
 12741  00BCE4  6E0D               	movwf	printf@f,c
 12742  00BCE6  0EFC               	movlw	high STR_3
 12743  00BCE8  6E0E               	movwf	printf@f+1,c
 12744  00BCEA  EC47  F063         	call	_printf	;wreg free
 12745                           
 12746                           ;operationMode.c: 515: lcdInst(0xC0);;
 12747  00BCEE  0EC0               	movlw	192
 12748  00BCF0  ECDC  F056         	call	_lcdInst
 12749                           
 12750                           ;operationMode.c: 516: printf("drawer %i", sortedDrawerTable[i]);
 12751  00BCF4  0E5F               	movlw	low STR_4
 12752  00BCF6  6E0D               	movwf	printf@f,c
 12753  00BCF8  0EFC               	movlw	high STR_4
 12754  00BCFA  6E0E               	movwf	printf@f+1,c
 12755  00BCFC  90D8               	bcf	status,0,c
 12756  00BCFE  0100               	movlb	0	; () banked
 12757  00BD00  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12758  00BD02  6ED9               	movwf	fsr2l,c
 12759  00BD04  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12760  00BD06  6EDA               	movwf	fsr2h,c
 12761  00BD08  0EB6               	movlw	low mainOperation@sortedDrawerTable
 12762  00BD0A  26D9               	addwf	fsr2l,f,c
 12763  00BD0C  0E00               	movlw	high mainOperation@sortedDrawerTable
 12764  00BD0E  22DA               	addwfc	fsr2h,f,c
 12765  00BD10  CFDE F00F          	movff	postinc2,?_printf+2
 12766  00BD14  CFDD F010          	movff	postdec2,?_printf+3
 12767  00BD18  EC47  F063         	call	_printf	;wreg free
 12768                           
 12769                           ;operationMode.c: 517: _delay((unsigned long)((1000)*(40000000/4000.0)));
 12770  00BD1C  0E33               	movlw	51
 12771  00BD1E  6E38               	movwf	(??_mainOperation+1)& (0+255),c
 12772  00BD20  0EBB               	movlw	187
 12773  00BD22  6E37               	movwf	??_mainOperation& (0+255),c
 12774  00BD24  0EE0               	movlw	224
 12775  00BD26                     u12457:
 12776  00BD26  2EE8               	decfsz	wreg,f,c
 12777  00BD28  D7FE               	bra	u12457
 12778  00BD2A  2E37               	decfsz	??_mainOperation& (0+255),f,c
 12779  00BD2C  D7FC               	bra	u12457
 12780  00BD2E  2E38               	decfsz	(??_mainOperation+1)& (0+255),f,c
 12781  00BD30  D7FA               	bra	u12457
 12782  00BD32                     l354:
 12783  00BD32  0100               	movlb	0	; () banked
 12784  00BD34  4BC6               	infsnz	mainOperation@i& (0+255),f,b
 12785  00BD36  2BC7               	incf	(mainOperation@i+1)& (0+255),f,b
 12786  00BD38  D794               	goto	l8662
 12787  00BD3A                     l355:
 12788                           
 12789                           ; BSR set to: 0
 12790  00BD3A  0012               	return		;funcret
 12791  00BD3C                     __end_of_mainOperation:
 12792                           	opt stack 0
 12793                           tblptru	equ	0xFF8
 12794                           tblptrh	equ	0xFF7
 12795                           tblptrl	equ	0xFF6
 12796                           tablat	equ	0xFF5
 12797                           prodh	equ	0xFF4
 12798                           prodl	equ	0xFF3
 12799                           postinc0	equ	0xFEE
 12800                           wreg	equ	0xFE8
 12801                           postdec1	equ	0xFE5
 12802                           plusw1	equ	0xFE3
 12803                           fsr1l	equ	0xFE1
 12804                           indf2	equ	0xFDF
 12805                           postinc2	equ	0xFDE
 12806                           postdec2	equ	0xFDD
 12807                           plusw2	equ	0xFDB
 12808                           fsr2h	equ	0xFDA
 12809                           fsr2l	equ	0xFD9
 12810                           status	equ	0xFD8
 12811                           
 12812 ;; *************** function _sortDrawerList *****************
 12813 ;; Defined at:
 12814 ;;		line 54 in file "operationMode.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 12817 ;;		 -> mainOperation@drawerTable(16), 
 12818 ;;  sortedDrawer    2    2[COMRAM] PTR unsigned int 
 12819 ;;		 -> mainOperation@sortedDrawerTable(16), 
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;  sublist3        8   32[COMRAM] unsigned int [4]
 12822 ;;  sublist2        8   24[COMRAM] unsigned int [4]
 12823 ;;  sublist4        8   16[COMRAM] unsigned int [4]
 12824 ;;  sublist1        8    8[COMRAM] unsigned int [4]
 12825 ;;  i               2   52[COMRAM] unsigned int 
 12826 ;;  j               2   50[COMRAM] unsigned int 
 12827 ;;  count2          2   48[COMRAM] unsigned int 
 12828 ;;  count3          2   46[COMRAM] unsigned int 
 12829 ;;  count1          2   44[COMRAM] unsigned int 
 12830 ;;  temp            2   42[COMRAM] unsigned int 
 12831 ;;  count4          2   40[COMRAM] unsigned int 
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  1    wreg      void 
 12834 ;; Registers used:
 12835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12842 ;;      Locals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12843 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12844 ;;      Totals:        54       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12845 ;;Total ram usage:       54 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; This function calls:
 12848 ;;		Nothing
 12849 ;; This function is called by:
 12850 ;;		_mainOperation
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           	psect	text25
 12855  00DFDE                     __ptext25:
 12856                           	opt stack 0
 12857  00DFDE                     _sortDrawerList:
 12858                           	opt stack 29
 12859                           
 12860                           ;operationMode.c: 55: unsigned int i = 0;
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;incstack = 0
 12864  00DFDE  0E00               	movlw	0
 12865  00DFE0  6E36               	movwf	sortDrawerList@i+1,c
 12866  00DFE2  0E00               	movlw	0
 12867  00DFE4  6E35               	movwf	sortDrawerList@i,c
 12868                           
 12869                           ;operationMode.c: 56: unsigned int j = 0;
 12870  00DFE6  0E00               	movlw	0
 12871  00DFE8  6E34               	movwf	sortDrawerList@j+1,c
 12872  00DFEA  0E00               	movlw	0
 12873  00DFEC  6E33               	movwf	sortDrawerList@j,c
 12874                           
 12875                           ;operationMode.c: 57: unsigned int sublist1[] = {0,0,0,0};
 12876  00DFEE  EE20  F06C         	lfsr	2,sortDrawerList@F3072
 12877  00DFF2  EE10  F009         	lfsr	1,sortDrawerList@sublist1
 12878  00DFF6  0E07               	movlw	7
 12879  00DFF8                     u7671:
 12880  00DFF8  CFDB FFE3          	movff	plusw2,plusw1
 12881  00DFFC  06E8               	decf	wreg,f,c
 12882  00DFFE  E2FC               	bc	u7671
 12883                           
 12884                           ;operationMode.c: 58: unsigned int count1 = 0;
 12885  00E000  0E00               	movlw	0
 12886  00E002  6E2E               	movwf	sortDrawerList@count1+1,c
 12887  00E004  0E00               	movlw	0
 12888  00E006  6E2D               	movwf	sortDrawerList@count1,c
 12889                           
 12890                           ;operationMode.c: 59: unsigned int sublist2[] = {0,0,0,0};
 12891  00E008  EE20  F0E8         	lfsr	2,sortDrawerList@F3075
 12892  00E00C  EE10  F019         	lfsr	1,sortDrawerList@sublist2
 12893  00E010  0E07               	movlw	7
 12894  00E012                     u7681:
 12895  00E012  CFDB FFE3          	movff	plusw2,plusw1
 12896  00E016  06E8               	decf	wreg,f,c
 12897  00E018  E2FC               	bc	u7681
 12898                           
 12899                           ;operationMode.c: 60: unsigned int count2 = 0;
 12900  00E01A  0E00               	movlw	0
 12901  00E01C  6E32               	movwf	sortDrawerList@count2+1,c
 12902  00E01E  0E00               	movlw	0
 12903  00E020  6E31               	movwf	sortDrawerList@count2,c
 12904                           
 12905                           ;operationMode.c: 61: unsigned int sublist3[] = {0,0,0,0};
 12906  00E022  EE20  F0E0         	lfsr	2,sortDrawerList@F3078
 12907  00E026  EE10  F021         	lfsr	1,sortDrawerList@sublist3
 12908  00E02A  0E07               	movlw	7
 12909  00E02C                     u7691:
 12910  00E02C  CFDB FFE3          	movff	plusw2,plusw1
 12911  00E030  06E8               	decf	wreg,f,c
 12912  00E032  E2FC               	bc	u7691
 12913                           
 12914                           ;operationMode.c: 62: unsigned int count3 = 0;
 12915  00E034  0E00               	movlw	0
 12916  00E036  6E30               	movwf	sortDrawerList@count3+1,c
 12917  00E038  0E00               	movlw	0
 12918  00E03A  6E2F               	movwf	sortDrawerList@count3,c
 12919                           
 12920                           ;operationMode.c: 63: unsigned int sublist4[] = {0,0,0,0};
 12921  00E03C  EE20  F0D8         	lfsr	2,sortDrawerList@F3081
 12922  00E040  EE10  F011         	lfsr	1,sortDrawerList@sublist4
 12923  00E044  0E07               	movlw	7
 12924  00E046                     u7701:
 12925  00E046  CFDB FFE3          	movff	plusw2,plusw1
 12926  00E04A  06E8               	decf	wreg,f,c
 12927  00E04C  E2FC               	bc	u7701
 12928                           
 12929                           ;operationMode.c: 64: unsigned int count4 = 0;
 12930  00E04E  0E00               	movlw	0
 12931  00E050  6E2A               	movwf	sortDrawerList@count4+1,c
 12932  00E052  0E00               	movlw	0
 12933  00E054  6E29               	movwf	sortDrawerList@count4,c
 12934                           
 12935                           ;operationMode.c: 65: unsigned int temp;
 12936                           ;operationMode.c: 67: for (i=0; i<8; i++){
 12937  00E056  0E00               	movlw	0
 12938  00E058  6E36               	movwf	sortDrawerList@i+1,c
 12939  00E05A  0E00               	movlw	0
 12940  00E05C  6E35               	movwf	sortDrawerList@i,c
 12941  00E05E                     l6646:
 12942  00E05E  5036               	movf	sortDrawerList@i+1,w,c
 12943  00E060  E11D               	bnz	l6656
 12944  00E062  0E08               	movlw	8
 12945  00E064  5C35               	subwf	sortDrawerList@i,w,c
 12946  00E066  B0D8               	btfsc	status,0,c
 12947  00E068  D019               	goto	u7720
 12948                           
 12949                           ;operationMode.c: 68: sortedDrawerTable[i] = drawerTable[i];
 12950  00E06A  90D8               	bcf	status,0,c
 12951  00E06C  3435               	rlcf	sortDrawerList@i,w,c
 12952  00E06E  6ED9               	movwf	fsr2l,c
 12953  00E070  3436               	rlcf	sortDrawerList@i+1,w,c
 12954  00E072  6EDA               	movwf	fsr2h,c
 12955  00E074  5001               	movf	sortDrawerList@drawerTable,w,c
 12956  00E076  26D9               	addwf	fsr2l,f,c
 12957  00E078  5002               	movf	sortDrawerList@drawerTable+1,w,c
 12958  00E07A  22DA               	addwfc	fsr2h,f,c
 12959  00E07C  90D8               	bcf	status,0,c
 12960  00E07E  3435               	rlcf	sortDrawerList@i,w,c
 12961  00E080  6EE1               	movwf	fsr1l,c
 12962  00E082  3436               	rlcf	sortDrawerList@i+1,w,c
 12963  00E084  6EE2               	movwf	fsr1h,c
 12964  00E086  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12965  00E088  26E1               	addwf	fsr1l,f,c
 12966  00E08A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12967  00E08C  22E2               	addwfc	fsr1h,f,c
 12968  00E08E  CFDE FFE6          	movff	postinc2,postinc1
 12969  00E092  CFDD FFE5          	movff	postdec2,postdec1
 12970  00E096  4A35               	infsnz	sortDrawerList@i,f,c
 12971  00E098  2A36               	incf	sortDrawerList@i+1,f,c
 12972  00E09A  D7E1               	goto	l6646
 12973  00E09C                     u7720:
 12974  00E09C                     l6656:
 12975                           
 12976                           ;operationMode.c: 69: }
 12977                           ;operationMode.c: 71: for(i=0; i<8; i++){
 12978  00E09C  0E00               	movlw	0
 12979  00E09E  6E36               	movwf	sortDrawerList@i+1,c
 12980  00E0A0  0E00               	movlw	0
 12981  00E0A2  6E35               	movwf	sortDrawerList@i,c
 12982  00E0A4  5036               	movf	sortDrawerList@i+1,w,c
 12983  00E0A6  E105               	bnz	u7730
 12984  00E0A8  0E08               	movlw	8
 12985  00E0AA  5C35               	subwf	sortDrawerList@i,w,c
 12986  00E0AC  B0D8               	btfsc	status,0,c
 12987  00E0AE  D149               	goto	u7900
 12988  00E0B0  D001               	goto	l135
 12989  00E0B2                     u7730:
 12990  00E0B2  D147               	goto	u7900
 12991  00E0B4                     l135:
 12992                           
 12993                           ;operationMode.c: 72: if (sortedDrawerTable[i] == 1 || sortedDrawerTable[i] == 2 || sort
      +                          edDrawerTable[i] == 3 || sortedDrawerTable[i] == 4){
 12994  00E0B4  90D8               	bcf	status,0,c
 12995  00E0B6  3435               	rlcf	sortDrawerList@i,w,c
 12996  00E0B8  6ED9               	movwf	fsr2l,c
 12997  00E0BA  3436               	rlcf	sortDrawerList@i+1,w,c
 12998  00E0BC  6EDA               	movwf	fsr2h,c
 12999  00E0BE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13000  00E0C0  26D9               	addwf	fsr2l,f,c
 13001  00E0C2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13002  00E0C4  22DA               	addwfc	fsr2h,f,c
 13003  00E0C6  04DE               	decf	postinc2,w,c
 13004  00E0C8  10DE               	iorwf	postinc2,w,c
 13005  00E0CA  B4D8               	btfsc	status,2,c
 13006  00E0CC  D02A               	goto	u7770
 13007  00E0CE  90D8               	bcf	status,0,c
 13008  00E0D0  3435               	rlcf	sortDrawerList@i,w,c
 13009  00E0D2  6ED9               	movwf	fsr2l,c
 13010  00E0D4  3436               	rlcf	sortDrawerList@i+1,w,c
 13011  00E0D6  6EDA               	movwf	fsr2h,c
 13012  00E0D8  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13013  00E0DA  26D9               	addwf	fsr2l,f,c
 13014  00E0DC  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13015  00E0DE  22DA               	addwfc	fsr2h,f,c
 13016  00E0E0  0E02               	movlw	2
 13017  00E0E2  18DE               	xorwf	postinc2,w,c
 13018  00E0E4  10DE               	iorwf	postinc2,w,c
 13019  00E0E6  B4D8               	btfsc	status,2,c
 13020  00E0E8  D01C               	goto	u7770
 13021  00E0EA  90D8               	bcf	status,0,c
 13022  00E0EC  3435               	rlcf	sortDrawerList@i,w,c
 13023  00E0EE  6ED9               	movwf	fsr2l,c
 13024  00E0F0  3436               	rlcf	sortDrawerList@i+1,w,c
 13025  00E0F2  6EDA               	movwf	fsr2h,c
 13026  00E0F4  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13027  00E0F6  26D9               	addwf	fsr2l,f,c
 13028  00E0F8  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13029  00E0FA  22DA               	addwfc	fsr2h,f,c
 13030  00E0FC  0E03               	movlw	3
 13031  00E0FE  18DE               	xorwf	postinc2,w,c
 13032  00E100  10DE               	iorwf	postinc2,w,c
 13033  00E102  B4D8               	btfsc	status,2,c
 13034  00E104  D00E               	goto	u7770
 13035  00E106  90D8               	bcf	status,0,c
 13036  00E108  3435               	rlcf	sortDrawerList@i,w,c
 13037  00E10A  6ED9               	movwf	fsr2l,c
 13038  00E10C  3436               	rlcf	sortDrawerList@i+1,w,c
 13039  00E10E  6EDA               	movwf	fsr2h,c
 13040  00E110  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13041  00E112  26D9               	addwf	fsr2l,f,c
 13042  00E114  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13043  00E116  22DA               	addwfc	fsr2h,f,c
 13044  00E118  0E04               	movlw	4
 13045  00E11A  18DE               	xorwf	postinc2,w,c
 13046  00E11C  10DE               	iorwf	postinc2,w,c
 13047  00E11E  A4D8               	btfss	status,2,c
 13048  00E120  D019               	goto	l137
 13049  00E122                     u7770:
 13050                           
 13051                           ;operationMode.c: 73: sublist1[count1]=sortedDrawerTable[i];
 13052  00E122  90D8               	bcf	status,0,c
 13053  00E124  3435               	rlcf	sortDrawerList@i,w,c
 13054  00E126  6ED9               	movwf	fsr2l,c
 13055  00E128  3436               	rlcf	sortDrawerList@i+1,w,c
 13056  00E12A  6EDA               	movwf	fsr2h,c
 13057  00E12C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13058  00E12E  26D9               	addwf	fsr2l,f,c
 13059  00E130  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13060  00E132  22DA               	addwfc	fsr2h,f,c
 13061  00E134  90D8               	bcf	status,0,c
 13062  00E136  342D               	rlcf	sortDrawerList@count1,w,c
 13063  00E138  6EE1               	movwf	fsr1l,c
 13064  00E13A  342E               	rlcf	sortDrawerList@count1+1,w,c
 13065  00E13C  6EE2               	movwf	fsr1h,c
 13066  00E13E  0E09               	movlw	low sortDrawerList@sublist1
 13067  00E140  26E1               	addwf	fsr1l,f,c
 13068  00E142  0E00               	movlw	high sortDrawerList@sublist1
 13069  00E144  22E2               	addwfc	fsr1h,f,c
 13070  00E146  CFDE FFE6          	movff	postinc2,postinc1
 13071  00E14A  CFDD FFE5          	movff	postdec2,postdec1
 13072                           
 13073                           ;operationMode.c: 74: count1 += 1;
 13074  00E14E  4A2D               	infsnz	sortDrawerList@count1,f,c
 13075  00E150  2A2E               	incf	sortDrawerList@count1+1,f,c
 13076                           
 13077                           ;operationMode.c: 75: }
 13078  00E152  D0F2               	goto	l149
 13079  00E154                     l137:
 13080                           
 13081                           ;operationMode.c: 76: else if (sortedDrawerTable[i] == 5 || sortedDrawerTable[i] == 6 ||
      +                           sortedDrawerTable[i] == 7 || sortedDrawerTable[i] == 8){
 13082  00E154  90D8               	bcf	status,0,c
 13083  00E156  3435               	rlcf	sortDrawerList@i,w,c
 13084  00E158  6ED9               	movwf	fsr2l,c
 13085  00E15A  3436               	rlcf	sortDrawerList@i+1,w,c
 13086  00E15C  6EDA               	movwf	fsr2h,c
 13087  00E15E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13088  00E160  26D9               	addwf	fsr2l,f,c
 13089  00E162  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13090  00E164  22DA               	addwfc	fsr2h,f,c
 13091  00E166  0E05               	movlw	5
 13092  00E168  18DE               	xorwf	postinc2,w,c
 13093  00E16A  10DE               	iorwf	postinc2,w,c
 13094  00E16C  B4D8               	btfsc	status,2,c
 13095  00E16E  D02A               	goto	u7810
 13096  00E170  90D8               	bcf	status,0,c
 13097  00E172  3435               	rlcf	sortDrawerList@i,w,c
 13098  00E174  6ED9               	movwf	fsr2l,c
 13099  00E176  3436               	rlcf	sortDrawerList@i+1,w,c
 13100  00E178  6EDA               	movwf	fsr2h,c
 13101  00E17A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13102  00E17C  26D9               	addwf	fsr2l,f,c
 13103  00E17E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13104  00E180  22DA               	addwfc	fsr2h,f,c
 13105  00E182  0E06               	movlw	6
 13106  00E184  18DE               	xorwf	postinc2,w,c
 13107  00E186  10DE               	iorwf	postinc2,w,c
 13108  00E188  B4D8               	btfsc	status,2,c
 13109  00E18A  D01C               	goto	u7810
 13110  00E18C  90D8               	bcf	status,0,c
 13111  00E18E  3435               	rlcf	sortDrawerList@i,w,c
 13112  00E190  6ED9               	movwf	fsr2l,c
 13113  00E192  3436               	rlcf	sortDrawerList@i+1,w,c
 13114  00E194  6EDA               	movwf	fsr2h,c
 13115  00E196  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13116  00E198  26D9               	addwf	fsr2l,f,c
 13117  00E19A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13118  00E19C  22DA               	addwfc	fsr2h,f,c
 13119  00E19E  0E07               	movlw	7
 13120  00E1A0  18DE               	xorwf	postinc2,w,c
 13121  00E1A2  10DE               	iorwf	postinc2,w,c
 13122  00E1A4  B4D8               	btfsc	status,2,c
 13123  00E1A6  D00E               	goto	u7810
 13124  00E1A8  90D8               	bcf	status,0,c
 13125  00E1AA  3435               	rlcf	sortDrawerList@i,w,c
 13126  00E1AC  6ED9               	movwf	fsr2l,c
 13127  00E1AE  3436               	rlcf	sortDrawerList@i+1,w,c
 13128  00E1B0  6EDA               	movwf	fsr2h,c
 13129  00E1B2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13130  00E1B4  26D9               	addwf	fsr2l,f,c
 13131  00E1B6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13132  00E1B8  22DA               	addwfc	fsr2h,f,c
 13133  00E1BA  0E08               	movlw	8
 13134  00E1BC  18DE               	xorwf	postinc2,w,c
 13135  00E1BE  10DE               	iorwf	postinc2,w,c
 13136  00E1C0  A4D8               	btfss	status,2,c
 13137  00E1C2  D019               	goto	l141
 13138  00E1C4                     u7810:
 13139                           
 13140                           ;operationMode.c: 77: sublist2[count2]=sortedDrawerTable[i];
 13141  00E1C4  90D8               	bcf	status,0,c
 13142  00E1C6  3435               	rlcf	sortDrawerList@i,w,c
 13143  00E1C8  6ED9               	movwf	fsr2l,c
 13144  00E1CA  3436               	rlcf	sortDrawerList@i+1,w,c
 13145  00E1CC  6EDA               	movwf	fsr2h,c
 13146  00E1CE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13147  00E1D0  26D9               	addwf	fsr2l,f,c
 13148  00E1D2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13149  00E1D4  22DA               	addwfc	fsr2h,f,c
 13150  00E1D6  90D8               	bcf	status,0,c
 13151  00E1D8  3431               	rlcf	sortDrawerList@count2,w,c
 13152  00E1DA  6EE1               	movwf	fsr1l,c
 13153  00E1DC  3432               	rlcf	sortDrawerList@count2+1,w,c
 13154  00E1DE  6EE2               	movwf	fsr1h,c
 13155  00E1E0  0E19               	movlw	low sortDrawerList@sublist2
 13156  00E1E2  26E1               	addwf	fsr1l,f,c
 13157  00E1E4  0E00               	movlw	high sortDrawerList@sublist2
 13158  00E1E6  22E2               	addwfc	fsr1h,f,c
 13159  00E1E8  CFDE FFE6          	movff	postinc2,postinc1
 13160  00E1EC  CFDD FFE5          	movff	postdec2,postdec1
 13161                           
 13162                           ;operationMode.c: 78: count2 += 1;
 13163  00E1F0  4A31               	infsnz	sortDrawerList@count2,f,c
 13164  00E1F2  2A32               	incf	sortDrawerList@count2+1,f,c
 13165                           
 13166                           ;operationMode.c: 79: }
 13167  00E1F4  D0A1               	goto	l149
 13168  00E1F6                     l141:
 13169                           
 13170                           ;operationMode.c: 80: else if (sortedDrawerTable[i] == 9 || sortedDrawerTable[i] == 10 |
      +                          | sortedDrawerTable[i] == 11 || sortedDrawerTable[i] == 12){
 13171  00E1F6  90D8               	bcf	status,0,c
 13172  00E1F8  3435               	rlcf	sortDrawerList@i,w,c
 13173  00E1FA  6ED9               	movwf	fsr2l,c
 13174  00E1FC  3436               	rlcf	sortDrawerList@i+1,w,c
 13175  00E1FE  6EDA               	movwf	fsr2h,c
 13176  00E200  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13177  00E202  26D9               	addwf	fsr2l,f,c
 13178  00E204  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13179  00E206  22DA               	addwfc	fsr2h,f,c
 13180  00E208  0E09               	movlw	9
 13181  00E20A  18DE               	xorwf	postinc2,w,c
 13182  00E20C  10DE               	iorwf	postinc2,w,c
 13183  00E20E  B4D8               	btfsc	status,2,c
 13184  00E210  D02A               	goto	u7850
 13185  00E212  90D8               	bcf	status,0,c
 13186  00E214  3435               	rlcf	sortDrawerList@i,w,c
 13187  00E216  6ED9               	movwf	fsr2l,c
 13188  00E218  3436               	rlcf	sortDrawerList@i+1,w,c
 13189  00E21A  6EDA               	movwf	fsr2h,c
 13190  00E21C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13191  00E21E  26D9               	addwf	fsr2l,f,c
 13192  00E220  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13193  00E222  22DA               	addwfc	fsr2h,f,c
 13194  00E224  0E0A               	movlw	10
 13195  00E226  18DE               	xorwf	postinc2,w,c
 13196  00E228  10DE               	iorwf	postinc2,w,c
 13197  00E22A  B4D8               	btfsc	status,2,c
 13198  00E22C  D01C               	goto	u7850
 13199  00E22E  90D8               	bcf	status,0,c
 13200  00E230  3435               	rlcf	sortDrawerList@i,w,c
 13201  00E232  6ED9               	movwf	fsr2l,c
 13202  00E234  3436               	rlcf	sortDrawerList@i+1,w,c
 13203  00E236  6EDA               	movwf	fsr2h,c
 13204  00E238  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13205  00E23A  26D9               	addwf	fsr2l,f,c
 13206  00E23C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13207  00E23E  22DA               	addwfc	fsr2h,f,c
 13208  00E240  0E0B               	movlw	11
 13209  00E242  18DE               	xorwf	postinc2,w,c
 13210  00E244  10DE               	iorwf	postinc2,w,c
 13211  00E246  B4D8               	btfsc	status,2,c
 13212  00E248  D00E               	goto	u7850
 13213  00E24A  90D8               	bcf	status,0,c
 13214  00E24C  3435               	rlcf	sortDrawerList@i,w,c
 13215  00E24E  6ED9               	movwf	fsr2l,c
 13216  00E250  3436               	rlcf	sortDrawerList@i+1,w,c
 13217  00E252  6EDA               	movwf	fsr2h,c
 13218  00E254  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13219  00E256  26D9               	addwf	fsr2l,f,c
 13220  00E258  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13221  00E25A  22DA               	addwfc	fsr2h,f,c
 13222  00E25C  0E0C               	movlw	12
 13223  00E25E  18DE               	xorwf	postinc2,w,c
 13224  00E260  10DE               	iorwf	postinc2,w,c
 13225  00E262  A4D8               	btfss	status,2,c
 13226  00E264  D019               	goto	l145
 13227  00E266                     u7850:
 13228                           
 13229                           ;operationMode.c: 81: sublist3[count3]=sortedDrawerTable[i];
 13230  00E266  90D8               	bcf	status,0,c
 13231  00E268  3435               	rlcf	sortDrawerList@i,w,c
 13232  00E26A  6ED9               	movwf	fsr2l,c
 13233  00E26C  3436               	rlcf	sortDrawerList@i+1,w,c
 13234  00E26E  6EDA               	movwf	fsr2h,c
 13235  00E270  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13236  00E272  26D9               	addwf	fsr2l,f,c
 13237  00E274  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13238  00E276  22DA               	addwfc	fsr2h,f,c
 13239  00E278  90D8               	bcf	status,0,c
 13240  00E27A  342F               	rlcf	sortDrawerList@count3,w,c
 13241  00E27C  6EE1               	movwf	fsr1l,c
 13242  00E27E  3430               	rlcf	sortDrawerList@count3+1,w,c
 13243  00E280  6EE2               	movwf	fsr1h,c
 13244  00E282  0E21               	movlw	low sortDrawerList@sublist3
 13245  00E284  26E1               	addwf	fsr1l,f,c
 13246  00E286  0E00               	movlw	high sortDrawerList@sublist3
 13247  00E288  22E2               	addwfc	fsr1h,f,c
 13248  00E28A  CFDE FFE6          	movff	postinc2,postinc1
 13249  00E28E  CFDD FFE5          	movff	postdec2,postdec1
 13250                           
 13251                           ;operationMode.c: 82: count3 += 1;
 13252  00E292  4A2F               	infsnz	sortDrawerList@count3,f,c
 13253  00E294  2A30               	incf	sortDrawerList@count3+1,f,c
 13254                           
 13255                           ;operationMode.c: 83: }
 13256  00E296  D050               	goto	l149
 13257  00E298                     l145:
 13258                           
 13259                           ;operationMode.c: 84: else if (sortedDrawerTable[i] == 13 || sortedDrawerTable[i] == 14 
      +                          || sortedDrawerTable[i] == 15 || sortedDrawerTable[i] == 16){
 13260  00E298  90D8               	bcf	status,0,c
 13261  00E29A  3435               	rlcf	sortDrawerList@i,w,c
 13262  00E29C  6ED9               	movwf	fsr2l,c
 13263  00E29E  3436               	rlcf	sortDrawerList@i+1,w,c
 13264  00E2A0  6EDA               	movwf	fsr2h,c
 13265  00E2A2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13266  00E2A4  26D9               	addwf	fsr2l,f,c
 13267  00E2A6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13268  00E2A8  22DA               	addwfc	fsr2h,f,c
 13269  00E2AA  0E0D               	movlw	13
 13270  00E2AC  18DE               	xorwf	postinc2,w,c
 13271  00E2AE  10DE               	iorwf	postinc2,w,c
 13272  00E2B0  B4D8               	btfsc	status,2,c
 13273  00E2B2  D02A               	goto	u7890
 13274  00E2B4  90D8               	bcf	status,0,c
 13275  00E2B6  3435               	rlcf	sortDrawerList@i,w,c
 13276  00E2B8  6ED9               	movwf	fsr2l,c
 13277  00E2BA  3436               	rlcf	sortDrawerList@i+1,w,c
 13278  00E2BC  6EDA               	movwf	fsr2h,c
 13279  00E2BE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13280  00E2C0  26D9               	addwf	fsr2l,f,c
 13281  00E2C2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13282  00E2C4  22DA               	addwfc	fsr2h,f,c
 13283  00E2C6  0E0E               	movlw	14
 13284  00E2C8  18DE               	xorwf	postinc2,w,c
 13285  00E2CA  10DE               	iorwf	postinc2,w,c
 13286  00E2CC  B4D8               	btfsc	status,2,c
 13287  00E2CE  D01C               	goto	u7890
 13288  00E2D0  90D8               	bcf	status,0,c
 13289  00E2D2  3435               	rlcf	sortDrawerList@i,w,c
 13290  00E2D4  6ED9               	movwf	fsr2l,c
 13291  00E2D6  3436               	rlcf	sortDrawerList@i+1,w,c
 13292  00E2D8  6EDA               	movwf	fsr2h,c
 13293  00E2DA  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13294  00E2DC  26D9               	addwf	fsr2l,f,c
 13295  00E2DE  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13296  00E2E0  22DA               	addwfc	fsr2h,f,c
 13297  00E2E2  0E0F               	movlw	15
 13298  00E2E4  18DE               	xorwf	postinc2,w,c
 13299  00E2E6  10DE               	iorwf	postinc2,w,c
 13300  00E2E8  B4D8               	btfsc	status,2,c
 13301  00E2EA  D00E               	goto	u7890
 13302  00E2EC  90D8               	bcf	status,0,c
 13303  00E2EE  3435               	rlcf	sortDrawerList@i,w,c
 13304  00E2F0  6ED9               	movwf	fsr2l,c
 13305  00E2F2  3436               	rlcf	sortDrawerList@i+1,w,c
 13306  00E2F4  6EDA               	movwf	fsr2h,c
 13307  00E2F6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13308  00E2F8  26D9               	addwf	fsr2l,f,c
 13309  00E2FA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13310  00E2FC  22DA               	addwfc	fsr2h,f,c
 13311  00E2FE  0E10               	movlw	16
 13312  00E300  18DE               	xorwf	postinc2,w,c
 13313  00E302  10DE               	iorwf	postinc2,w,c
 13314  00E304  A4D8               	btfss	status,2,c
 13315  00E306  D018               	goto	l149
 13316  00E308                     u7890:
 13317                           
 13318                           ;operationMode.c: 85: sublist4[count4]=sortedDrawerTable[i];
 13319  00E308  90D8               	bcf	status,0,c
 13320  00E30A  3435               	rlcf	sortDrawerList@i,w,c
 13321  00E30C  6ED9               	movwf	fsr2l,c
 13322  00E30E  3436               	rlcf	sortDrawerList@i+1,w,c
 13323  00E310  6EDA               	movwf	fsr2h,c
 13324  00E312  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13325  00E314  26D9               	addwf	fsr2l,f,c
 13326  00E316  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13327  00E318  22DA               	addwfc	fsr2h,f,c
 13328  00E31A  90D8               	bcf	status,0,c
 13329  00E31C  3429               	rlcf	sortDrawerList@count4,w,c
 13330  00E31E  6EE1               	movwf	fsr1l,c
 13331  00E320  342A               	rlcf	sortDrawerList@count4+1,w,c
 13332  00E322  6EE2               	movwf	fsr1h,c
 13333  00E324  0E11               	movlw	low sortDrawerList@sublist4
 13334  00E326  26E1               	addwf	fsr1l,f,c
 13335  00E328  0E00               	movlw	high sortDrawerList@sublist4
 13336  00E32A  22E2               	addwfc	fsr1h,f,c
 13337  00E32C  CFDE FFE6          	movff	postinc2,postinc1
 13338  00E330  CFDD FFE5          	movff	postdec2,postdec1
 13339                           
 13340                           ;operationMode.c: 86: count4 += 1;
 13341  00E334  4A29               	infsnz	sortDrawerList@count4,f,c
 13342  00E336  2A2A               	incf	sortDrawerList@count4+1,f,c
 13343  00E338                     l149:
 13344  00E338  4A35               	infsnz	sortDrawerList@i,f,c
 13345  00E33A  2A36               	incf	sortDrawerList@i+1,f,c
 13346  00E33C  5036               	movf	sortDrawerList@i+1,w,c
 13347  00E33E  E101               	bnz	l6714
 13348  00E340  D6B3               	goto	L125
 13349  00E342                     u7900:
 13350  00E342                     l6714:
 13351                           
 13352                           ;operationMode.c: 87: }
 13353                           ;operationMode.c: 88: }
 13354                           ;operationMode.c: 90: for (i=0; i<count1; i++){
 13355  00E342  0E00               	movlw	0
 13356  00E344  6E36               	movwf	sortDrawerList@i+1,c
 13357  00E346  0E00               	movlw	0
 13358  00E348  6E35               	movwf	sortDrawerList@i,c
 13359  00E34A  D057               	goto	l152
 13360  00E34C                     
 13361                           ;operationMode.c: 91: for (j=0; j<count1; j++){
 13362  00E34C  0E00               	movlw	0
 13363  00E34E  6E34               	movwf	sortDrawerList@j+1,c
 13364  00E350  0E00               	movlw	0
 13365  00E352  6E33               	movwf	sortDrawerList@j,c
 13366  00E354  D04A               	goto	l154
 13367  00E356                     
 13368                           ;operationMode.c: 92: if (sublist1[j] > sublist1[i]){
 13369  00E356  90D8               	bcf	status,0,c
 13370  00E358  3433               	rlcf	sortDrawerList@j,w,c
 13371  00E35A  6ED9               	movwf	fsr2l,c
 13372  00E35C  3434               	rlcf	sortDrawerList@j+1,w,c
 13373  00E35E  6EDA               	movwf	fsr2h,c
 13374  00E360  0E09               	movlw	low sortDrawerList@sublist1
 13375  00E362  26D9               	addwf	fsr2l,f,c
 13376  00E364  0E00               	movlw	high sortDrawerList@sublist1
 13377  00E366  22DA               	addwfc	fsr2h,f,c
 13378  00E368  90D8               	bcf	status,0,c
 13379  00E36A  3435               	rlcf	sortDrawerList@i,w,c
 13380  00E36C  6EE1               	movwf	fsr1l,c
 13381  00E36E  3436               	rlcf	sortDrawerList@i+1,w,c
 13382  00E370  6EE2               	movwf	fsr1h,c
 13383  00E372  0E09               	movlw	low sortDrawerList@sublist1
 13384  00E374  26E1               	addwf	fsr1l,f,c
 13385  00E376  0E00               	movlw	high sortDrawerList@sublist1
 13386  00E378  22E2               	addwfc	fsr1h,f,c
 13387  00E37A  50DE               	movf	postinc2,w,c
 13388  00E37C  5CE6               	subwf	postinc1,w,c
 13389  00E37E  50DE               	movf	postinc2,w,c
 13390  00E380  58E6               	subwfb	postinc1,w,c
 13391  00E382  B0D8               	btfsc	status,0,c
 13392  00E384  D030               	goto	l156
 13393                           
 13394                           ;operationMode.c: 93: temp = sublist1[i];
 13395  00E386  90D8               	bcf	status,0,c
 13396  00E388  3435               	rlcf	sortDrawerList@i,w,c
 13397  00E38A  6ED9               	movwf	fsr2l,c
 13398  00E38C  3436               	rlcf	sortDrawerList@i+1,w,c
 13399  00E38E  6EDA               	movwf	fsr2h,c
 13400  00E390  0E09               	movlw	low sortDrawerList@sublist1
 13401  00E392  26D9               	addwf	fsr2l,f,c
 13402  00E394  0E00               	movlw	high sortDrawerList@sublist1
 13403  00E396  22DA               	addwfc	fsr2h,f,c
 13404  00E398  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13405  00E39C  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13406                           
 13407                           ;operationMode.c: 94: sublist1[i] = sublist1[j];
 13408  00E3A0  90D8               	bcf	status,0,c
 13409  00E3A2  3433               	rlcf	sortDrawerList@j,w,c
 13410  00E3A4  6ED9               	movwf	fsr2l,c
 13411  00E3A6  3434               	rlcf	sortDrawerList@j+1,w,c
 13412  00E3A8  6EDA               	movwf	fsr2h,c
 13413  00E3AA  0E09               	movlw	low sortDrawerList@sublist1
 13414  00E3AC  26D9               	addwf	fsr2l,f,c
 13415  00E3AE  0E00               	movlw	high sortDrawerList@sublist1
 13416  00E3B0  22DA               	addwfc	fsr2h,f,c
 13417  00E3B2  90D8               	bcf	status,0,c
 13418  00E3B4  3435               	rlcf	sortDrawerList@i,w,c
 13419  00E3B6  6EE1               	movwf	fsr1l,c
 13420  00E3B8  3436               	rlcf	sortDrawerList@i+1,w,c
 13421  00E3BA  6EE2               	movwf	fsr1h,c
 13422  00E3BC  0E09               	movlw	low sortDrawerList@sublist1
 13423  00E3BE  26E1               	addwf	fsr1l,f,c
 13424  00E3C0  0E00               	movlw	high sortDrawerList@sublist1
 13425  00E3C2  22E2               	addwfc	fsr1h,f,c
 13426  00E3C4  CFDE FFE6          	movff	postinc2,postinc1
 13427  00E3C8  CFDD FFE5          	movff	postdec2,postdec1
 13428                           
 13429                           ;operationMode.c: 95: sublist1[j] = temp;
 13430  00E3CC  90D8               	bcf	status,0,c
 13431  00E3CE  3433               	rlcf	sortDrawerList@j,w,c
 13432  00E3D0  6ED9               	movwf	fsr2l,c
 13433  00E3D2  3434               	rlcf	sortDrawerList@j+1,w,c
 13434  00E3D4  6EDA               	movwf	fsr2h,c
 13435  00E3D6  0E09               	movlw	low sortDrawerList@sublist1
 13436  00E3D8  26D9               	addwf	fsr2l,f,c
 13437  00E3DA  0E00               	movlw	high sortDrawerList@sublist1
 13438  00E3DC  22DA               	addwfc	fsr2h,f,c
 13439  00E3DE  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13440  00E3E2  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13441  00E3E6                     l156:
 13442  00E3E6  4A33               	infsnz	sortDrawerList@j,f,c
 13443  00E3E8  2A34               	incf	sortDrawerList@j+1,f,c
 13444  00E3EA                     l154:
 13445  00E3EA  502D               	movf	sortDrawerList@count1,w,c
 13446  00E3EC  5C33               	subwf	sortDrawerList@j,w,c
 13447  00E3EE  502E               	movf	sortDrawerList@count1+1,w,c
 13448  00E3F0  5834               	subwfb	sortDrawerList@j+1,w,c
 13449  00E3F2  A0D8               	btfss	status,0,c
 13450  00E3F4  D7B0               	goto	l155
 13451  00E3F6  4A35               	infsnz	sortDrawerList@i,f,c
 13452  00E3F8  2A36               	incf	sortDrawerList@i+1,f,c
 13453  00E3FA                     l152:
 13454  00E3FA  502D               	movf	sortDrawerList@count1,w,c
 13455  00E3FC  5C35               	subwf	sortDrawerList@i,w,c
 13456  00E3FE  502E               	movf	sortDrawerList@count1+1,w,c
 13457  00E400  5836               	subwfb	sortDrawerList@i+1,w,c
 13458  00E402  A0D8               	btfss	status,0,c
 13459  00E404  D7A3               	goto	l153
 13460                           
 13461                           ;operationMode.c: 96: }
 13462                           ;operationMode.c: 97: }
 13463                           ;operationMode.c: 98: }
 13464                           ;operationMode.c: 100: for (i=0; i<count3; i++){
 13465  00E406  0E00               	movlw	0
 13466  00E408  6E36               	movwf	sortDrawerList@i+1,c
 13467  00E40A  0E00               	movlw	0
 13468  00E40C  6E35               	movwf	sortDrawerList@i,c
 13469  00E40E  D057               	goto	l159
 13470  00E410                     
 13471                           ;operationMode.c: 101: for (j=0; j<count3; j++){
 13472  00E410  0E00               	movlw	0
 13473  00E412  6E34               	movwf	sortDrawerList@j+1,c
 13474  00E414  0E00               	movlw	0
 13475  00E416  6E33               	movwf	sortDrawerList@j,c
 13476  00E418  D04A               	goto	l161
 13477  00E41A                     
 13478                           ;operationMode.c: 102: if (sublist3[j] > sublist3[i]){
 13479  00E41A  90D8               	bcf	status,0,c
 13480  00E41C  3433               	rlcf	sortDrawerList@j,w,c
 13481  00E41E  6ED9               	movwf	fsr2l,c
 13482  00E420  3434               	rlcf	sortDrawerList@j+1,w,c
 13483  00E422  6EDA               	movwf	fsr2h,c
 13484  00E424  0E21               	movlw	low sortDrawerList@sublist3
 13485  00E426  26D9               	addwf	fsr2l,f,c
 13486  00E428  0E00               	movlw	high sortDrawerList@sublist3
 13487  00E42A  22DA               	addwfc	fsr2h,f,c
 13488  00E42C  90D8               	bcf	status,0,c
 13489  00E42E  3435               	rlcf	sortDrawerList@i,w,c
 13490  00E430  6EE1               	movwf	fsr1l,c
 13491  00E432  3436               	rlcf	sortDrawerList@i+1,w,c
 13492  00E434  6EE2               	movwf	fsr1h,c
 13493  00E436  0E21               	movlw	low sortDrawerList@sublist3
 13494  00E438  26E1               	addwf	fsr1l,f,c
 13495  00E43A  0E00               	movlw	high sortDrawerList@sublist3
 13496  00E43C  22E2               	addwfc	fsr1h,f,c
 13497  00E43E  50DE               	movf	postinc2,w,c
 13498  00E440  5CE6               	subwf	postinc1,w,c
 13499  00E442  50DE               	movf	postinc2,w,c
 13500  00E444  58E6               	subwfb	postinc1,w,c
 13501  00E446  B0D8               	btfsc	status,0,c
 13502  00E448  D030               	goto	l163
 13503                           
 13504                           ;operationMode.c: 103: temp = sublist3[i];
 13505  00E44A  90D8               	bcf	status,0,c
 13506  00E44C  3435               	rlcf	sortDrawerList@i,w,c
 13507  00E44E  6ED9               	movwf	fsr2l,c
 13508  00E450  3436               	rlcf	sortDrawerList@i+1,w,c
 13509  00E452  6EDA               	movwf	fsr2h,c
 13510  00E454  0E21               	movlw	low sortDrawerList@sublist3
 13511  00E456  26D9               	addwf	fsr2l,f,c
 13512  00E458  0E00               	movlw	high sortDrawerList@sublist3
 13513  00E45A  22DA               	addwfc	fsr2h,f,c
 13514  00E45C  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13515  00E460  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13516                           
 13517                           ;operationMode.c: 104: sublist3[i] = sublist3[j];
 13518  00E464  90D8               	bcf	status,0,c
 13519  00E466  3433               	rlcf	sortDrawerList@j,w,c
 13520  00E468  6ED9               	movwf	fsr2l,c
 13521  00E46A  3434               	rlcf	sortDrawerList@j+1,w,c
 13522  00E46C  6EDA               	movwf	fsr2h,c
 13523  00E46E  0E21               	movlw	low sortDrawerList@sublist3
 13524  00E470  26D9               	addwf	fsr2l,f,c
 13525  00E472  0E00               	movlw	high sortDrawerList@sublist3
 13526  00E474  22DA               	addwfc	fsr2h,f,c
 13527  00E476  90D8               	bcf	status,0,c
 13528  00E478  3435               	rlcf	sortDrawerList@i,w,c
 13529  00E47A  6EE1               	movwf	fsr1l,c
 13530  00E47C  3436               	rlcf	sortDrawerList@i+1,w,c
 13531  00E47E  6EE2               	movwf	fsr1h,c
 13532  00E480  0E21               	movlw	low sortDrawerList@sublist3
 13533  00E482  26E1               	addwf	fsr1l,f,c
 13534  00E484  0E00               	movlw	high sortDrawerList@sublist3
 13535  00E486  22E2               	addwfc	fsr1h,f,c
 13536  00E488  CFDE FFE6          	movff	postinc2,postinc1
 13537  00E48C  CFDD FFE5          	movff	postdec2,postdec1
 13538                           
 13539                           ;operationMode.c: 105: sublist3[j] = temp;
 13540  00E490  90D8               	bcf	status,0,c
 13541  00E492  3433               	rlcf	sortDrawerList@j,w,c
 13542  00E494  6ED9               	movwf	fsr2l,c
 13543  00E496  3434               	rlcf	sortDrawerList@j+1,w,c
 13544  00E498  6EDA               	movwf	fsr2h,c
 13545  00E49A  0E21               	movlw	low sortDrawerList@sublist3
 13546  00E49C  26D9               	addwf	fsr2l,f,c
 13547  00E49E  0E00               	movlw	high sortDrawerList@sublist3
 13548  00E4A0  22DA               	addwfc	fsr2h,f,c
 13549  00E4A2  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13550  00E4A6  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13551  00E4AA                     l163:
 13552  00E4AA  4A33               	infsnz	sortDrawerList@j,f,c
 13553  00E4AC  2A34               	incf	sortDrawerList@j+1,f,c
 13554  00E4AE                     l161:
 13555  00E4AE  502F               	movf	sortDrawerList@count3,w,c
 13556  00E4B0  5C33               	subwf	sortDrawerList@j,w,c
 13557  00E4B2  5030               	movf	sortDrawerList@count3+1,w,c
 13558  00E4B4  5834               	subwfb	sortDrawerList@j+1,w,c
 13559  00E4B6  A0D8               	btfss	status,0,c
 13560  00E4B8  D7B0               	goto	l162
 13561  00E4BA  4A35               	infsnz	sortDrawerList@i,f,c
 13562  00E4BC  2A36               	incf	sortDrawerList@i+1,f,c
 13563  00E4BE                     l159:
 13564  00E4BE  502F               	movf	sortDrawerList@count3,w,c
 13565  00E4C0  5C35               	subwf	sortDrawerList@i,w,c
 13566  00E4C2  5030               	movf	sortDrawerList@count3+1,w,c
 13567  00E4C4  5836               	subwfb	sortDrawerList@i+1,w,c
 13568  00E4C6  A0D8               	btfss	status,0,c
 13569  00E4C8  D7A3               	goto	l160
 13570                           
 13571                           ;operationMode.c: 106: }
 13572                           ;operationMode.c: 107: }
 13573                           ;operationMode.c: 108: }
 13574                           ;operationMode.c: 110: for (i=0; i<count2; i++){
 13575  00E4CA  0E00               	movlw	0
 13576  00E4CC  6E36               	movwf	sortDrawerList@i+1,c
 13577  00E4CE  0E00               	movlw	0
 13578  00E4D0  6E35               	movwf	sortDrawerList@i,c
 13579  00E4D2  D057               	goto	l166
 13580  00E4D4                     
 13581                           ;operationMode.c: 111: for (j=0; j<count2; j++){
 13582  00E4D4  0E00               	movlw	0
 13583  00E4D6  6E34               	movwf	sortDrawerList@j+1,c
 13584  00E4D8  0E00               	movlw	0
 13585  00E4DA  6E33               	movwf	sortDrawerList@j,c
 13586  00E4DC  D04A               	goto	l168
 13587  00E4DE                     
 13588                           ;operationMode.c: 112: if (sublist2[j] < sublist2[i]){
 13589  00E4DE  90D8               	bcf	status,0,c
 13590  00E4E0  3435               	rlcf	sortDrawerList@i,w,c
 13591  00E4E2  6ED9               	movwf	fsr2l,c
 13592  00E4E4  3436               	rlcf	sortDrawerList@i+1,w,c
 13593  00E4E6  6EDA               	movwf	fsr2h,c
 13594  00E4E8  0E19               	movlw	low sortDrawerList@sublist2
 13595  00E4EA  26D9               	addwf	fsr2l,f,c
 13596  00E4EC  0E00               	movlw	high sortDrawerList@sublist2
 13597  00E4EE  22DA               	addwfc	fsr2h,f,c
 13598  00E4F0  90D8               	bcf	status,0,c
 13599  00E4F2  3433               	rlcf	sortDrawerList@j,w,c
 13600  00E4F4  6EE1               	movwf	fsr1l,c
 13601  00E4F6  3434               	rlcf	sortDrawerList@j+1,w,c
 13602  00E4F8  6EE2               	movwf	fsr1h,c
 13603  00E4FA  0E19               	movlw	low sortDrawerList@sublist2
 13604  00E4FC  26E1               	addwf	fsr1l,f,c
 13605  00E4FE  0E00               	movlw	high sortDrawerList@sublist2
 13606  00E500  22E2               	addwfc	fsr1h,f,c
 13607  00E502  50DE               	movf	postinc2,w,c
 13608  00E504  5CE6               	subwf	postinc1,w,c
 13609  00E506  50DE               	movf	postinc2,w,c
 13610  00E508  58E6               	subwfb	postinc1,w,c
 13611  00E50A  B0D8               	btfsc	status,0,c
 13612  00E50C  D030               	goto	l170
 13613                           
 13614                           ;operationMode.c: 113: temp = sublist2[i];
 13615  00E50E  90D8               	bcf	status,0,c
 13616  00E510  3435               	rlcf	sortDrawerList@i,w,c
 13617  00E512  6ED9               	movwf	fsr2l,c
 13618  00E514  3436               	rlcf	sortDrawerList@i+1,w,c
 13619  00E516  6EDA               	movwf	fsr2h,c
 13620  00E518  0E19               	movlw	low sortDrawerList@sublist2
 13621  00E51A  26D9               	addwf	fsr2l,f,c
 13622  00E51C  0E00               	movlw	high sortDrawerList@sublist2
 13623  00E51E  22DA               	addwfc	fsr2h,f,c
 13624  00E520  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13625  00E524  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13626                           
 13627                           ;operationMode.c: 114: sublist2[i] = sublist2[j];
 13628  00E528  90D8               	bcf	status,0,c
 13629  00E52A  3433               	rlcf	sortDrawerList@j,w,c
 13630  00E52C  6ED9               	movwf	fsr2l,c
 13631  00E52E  3434               	rlcf	sortDrawerList@j+1,w,c
 13632  00E530  6EDA               	movwf	fsr2h,c
 13633  00E532  0E19               	movlw	low sortDrawerList@sublist2
 13634  00E534  26D9               	addwf	fsr2l,f,c
 13635  00E536  0E00               	movlw	high sortDrawerList@sublist2
 13636  00E538  22DA               	addwfc	fsr2h,f,c
 13637  00E53A  90D8               	bcf	status,0,c
 13638  00E53C  3435               	rlcf	sortDrawerList@i,w,c
 13639  00E53E  6EE1               	movwf	fsr1l,c
 13640  00E540  3436               	rlcf	sortDrawerList@i+1,w,c
 13641  00E542  6EE2               	movwf	fsr1h,c
 13642  00E544  0E19               	movlw	low sortDrawerList@sublist2
 13643  00E546  26E1               	addwf	fsr1l,f,c
 13644  00E548  0E00               	movlw	high sortDrawerList@sublist2
 13645  00E54A  22E2               	addwfc	fsr1h,f,c
 13646  00E54C  CFDE FFE6          	movff	postinc2,postinc1
 13647  00E550  CFDD FFE5          	movff	postdec2,postdec1
 13648                           
 13649                           ;operationMode.c: 115: sublist2[j] = temp;
 13650  00E554  90D8               	bcf	status,0,c
 13651  00E556  3433               	rlcf	sortDrawerList@j,w,c
 13652  00E558  6ED9               	movwf	fsr2l,c
 13653  00E55A  3434               	rlcf	sortDrawerList@j+1,w,c
 13654  00E55C  6EDA               	movwf	fsr2h,c
 13655  00E55E  0E19               	movlw	low sortDrawerList@sublist2
 13656  00E560  26D9               	addwf	fsr2l,f,c
 13657  00E562  0E00               	movlw	high sortDrawerList@sublist2
 13658  00E564  22DA               	addwfc	fsr2h,f,c
 13659  00E566  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13660  00E56A  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13661  00E56E                     l170:
 13662  00E56E  4A33               	infsnz	sortDrawerList@j,f,c
 13663  00E570  2A34               	incf	sortDrawerList@j+1,f,c
 13664  00E572                     l168:
 13665  00E572  5031               	movf	sortDrawerList@count2,w,c
 13666  00E574  5C33               	subwf	sortDrawerList@j,w,c
 13667  00E576  5032               	movf	sortDrawerList@count2+1,w,c
 13668  00E578  5834               	subwfb	sortDrawerList@j+1,w,c
 13669  00E57A  A0D8               	btfss	status,0,c
 13670  00E57C  D7B0               	goto	l169
 13671  00E57E  4A35               	infsnz	sortDrawerList@i,f,c
 13672  00E580  2A36               	incf	sortDrawerList@i+1,f,c
 13673  00E582                     l166:
 13674  00E582  5031               	movf	sortDrawerList@count2,w,c
 13675  00E584  5C35               	subwf	sortDrawerList@i,w,c
 13676  00E586  5032               	movf	sortDrawerList@count2+1,w,c
 13677  00E588  5836               	subwfb	sortDrawerList@i+1,w,c
 13678  00E58A  A0D8               	btfss	status,0,c
 13679  00E58C  D7A3               	goto	l167
 13680                           
 13681                           ;operationMode.c: 116: }
 13682                           ;operationMode.c: 117: }
 13683                           ;operationMode.c: 118: }
 13684                           ;operationMode.c: 120: for (i=0; i<count4; i++){
 13685  00E58E  0E00               	movlw	0
 13686  00E590  6E36               	movwf	sortDrawerList@i+1,c
 13687  00E592  0E00               	movlw	0
 13688  00E594  6E35               	movwf	sortDrawerList@i,c
 13689  00E596  D057               	goto	l173
 13690  00E598                     
 13691                           ;operationMode.c: 121: for (j=0; j<count4; j++){
 13692  00E598  0E00               	movlw	0
 13693  00E59A  6E34               	movwf	sortDrawerList@j+1,c
 13694  00E59C  0E00               	movlw	0
 13695  00E59E  6E33               	movwf	sortDrawerList@j,c
 13696  00E5A0  D04A               	goto	l175
 13697  00E5A2                     
 13698                           ;operationMode.c: 122: if (sublist4[j] < sublist4[i]){
 13699  00E5A2  90D8               	bcf	status,0,c
 13700  00E5A4  3435               	rlcf	sortDrawerList@i,w,c
 13701  00E5A6  6ED9               	movwf	fsr2l,c
 13702  00E5A8  3436               	rlcf	sortDrawerList@i+1,w,c
 13703  00E5AA  6EDA               	movwf	fsr2h,c
 13704  00E5AC  0E11               	movlw	low sortDrawerList@sublist4
 13705  00E5AE  26D9               	addwf	fsr2l,f,c
 13706  00E5B0  0E00               	movlw	high sortDrawerList@sublist4
 13707  00E5B2  22DA               	addwfc	fsr2h,f,c
 13708  00E5B4  90D8               	bcf	status,0,c
 13709  00E5B6  3433               	rlcf	sortDrawerList@j,w,c
 13710  00E5B8  6EE1               	movwf	fsr1l,c
 13711  00E5BA  3434               	rlcf	sortDrawerList@j+1,w,c
 13712  00E5BC  6EE2               	movwf	fsr1h,c
 13713  00E5BE  0E11               	movlw	low sortDrawerList@sublist4
 13714  00E5C0  26E1               	addwf	fsr1l,f,c
 13715  00E5C2  0E00               	movlw	high sortDrawerList@sublist4
 13716  00E5C4  22E2               	addwfc	fsr1h,f,c
 13717  00E5C6  50DE               	movf	postinc2,w,c
 13718  00E5C8  5CE6               	subwf	postinc1,w,c
 13719  00E5CA  50DE               	movf	postinc2,w,c
 13720  00E5CC  58E6               	subwfb	postinc1,w,c
 13721  00E5CE  B0D8               	btfsc	status,0,c
 13722  00E5D0  D030               	goto	l177
 13723                           
 13724                           ;operationMode.c: 123: temp = sublist4[i];
 13725  00E5D2  90D8               	bcf	status,0,c
 13726  00E5D4  3435               	rlcf	sortDrawerList@i,w,c
 13727  00E5D6  6ED9               	movwf	fsr2l,c
 13728  00E5D8  3436               	rlcf	sortDrawerList@i+1,w,c
 13729  00E5DA  6EDA               	movwf	fsr2h,c
 13730  00E5DC  0E11               	movlw	low sortDrawerList@sublist4
 13731  00E5DE  26D9               	addwf	fsr2l,f,c
 13732  00E5E0  0E00               	movlw	high sortDrawerList@sublist4
 13733  00E5E2  22DA               	addwfc	fsr2h,f,c
 13734  00E5E4  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13735  00E5E8  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13736                           
 13737                           ;operationMode.c: 124: sublist4[i] = sublist4[j];
 13738  00E5EC  90D8               	bcf	status,0,c
 13739  00E5EE  3433               	rlcf	sortDrawerList@j,w,c
 13740  00E5F0  6ED9               	movwf	fsr2l,c
 13741  00E5F2  3434               	rlcf	sortDrawerList@j+1,w,c
 13742  00E5F4  6EDA               	movwf	fsr2h,c
 13743  00E5F6  0E11               	movlw	low sortDrawerList@sublist4
 13744  00E5F8  26D9               	addwf	fsr2l,f,c
 13745  00E5FA  0E00               	movlw	high sortDrawerList@sublist4
 13746  00E5FC  22DA               	addwfc	fsr2h,f,c
 13747  00E5FE  90D8               	bcf	status,0,c
 13748  00E600  3435               	rlcf	sortDrawerList@i,w,c
 13749  00E602  6EE1               	movwf	fsr1l,c
 13750  00E604  3436               	rlcf	sortDrawerList@i+1,w,c
 13751  00E606  6EE2               	movwf	fsr1h,c
 13752  00E608  0E11               	movlw	low sortDrawerList@sublist4
 13753  00E60A  26E1               	addwf	fsr1l,f,c
 13754  00E60C  0E00               	movlw	high sortDrawerList@sublist4
 13755  00E60E  22E2               	addwfc	fsr1h,f,c
 13756  00E610  CFDE FFE6          	movff	postinc2,postinc1
 13757  00E614  CFDD FFE5          	movff	postdec2,postdec1
 13758                           
 13759                           ;operationMode.c: 125: sublist4[j] = temp;
 13760  00E618  90D8               	bcf	status,0,c
 13761  00E61A  3433               	rlcf	sortDrawerList@j,w,c
 13762  00E61C  6ED9               	movwf	fsr2l,c
 13763  00E61E  3434               	rlcf	sortDrawerList@j+1,w,c
 13764  00E620  6EDA               	movwf	fsr2h,c
 13765  00E622  0E11               	movlw	low sortDrawerList@sublist4
 13766  00E624  26D9               	addwf	fsr2l,f,c
 13767  00E626  0E00               	movlw	high sortDrawerList@sublist4
 13768  00E628  22DA               	addwfc	fsr2h,f,c
 13769  00E62A  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13770  00E62E  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13771  00E632                     l177:
 13772  00E632  4A33               	infsnz	sortDrawerList@j,f,c
 13773  00E634  2A34               	incf	sortDrawerList@j+1,f,c
 13774  00E636                     l175:
 13775  00E636  5029               	movf	sortDrawerList@count4,w,c
 13776  00E638  5C33               	subwf	sortDrawerList@j,w,c
 13777  00E63A  502A               	movf	sortDrawerList@count4+1,w,c
 13778  00E63C  5834               	subwfb	sortDrawerList@j+1,w,c
 13779  00E63E  A0D8               	btfss	status,0,c
 13780  00E640  D7B0               	goto	l176
 13781  00E642  4A35               	infsnz	sortDrawerList@i,f,c
 13782  00E644  2A36               	incf	sortDrawerList@i+1,f,c
 13783  00E646                     l173:
 13784  00E646  5029               	movf	sortDrawerList@count4,w,c
 13785  00E648  5C35               	subwf	sortDrawerList@i,w,c
 13786  00E64A  502A               	movf	sortDrawerList@count4+1,w,c
 13787  00E64C  5836               	subwfb	sortDrawerList@i+1,w,c
 13788  00E64E  A0D8               	btfss	status,0,c
 13789  00E650  D7A3               	goto	l174
 13790                           
 13791                           ;operationMode.c: 126: }
 13792                           ;operationMode.c: 127: }
 13793                           ;operationMode.c: 128: }
 13794                           ;operationMode.c: 130: if (sublist1[count1] == 1 || sublist1[count1] == 2){
 13795  00E652  90D8               	bcf	status,0,c
 13796  00E654  342D               	rlcf	sortDrawerList@count1,w,c
 13797  00E656  6ED9               	movwf	fsr2l,c
 13798  00E658  342E               	rlcf	sortDrawerList@count1+1,w,c
 13799  00E65A  6EDA               	movwf	fsr2h,c
 13800  00E65C  0E09               	movlw	low sortDrawerList@sublist1
 13801  00E65E  26D9               	addwf	fsr2l,f,c
 13802  00E660  0E00               	movlw	high sortDrawerList@sublist1
 13803  00E662  22DA               	addwfc	fsr2h,f,c
 13804  00E664  04DE               	decf	postinc2,w,c
 13805  00E666  10DE               	iorwf	postinc2,w,c
 13806  00E668  B4D8               	btfsc	status,2,c
 13807  00E66A  D00E               	goto	u8040
 13808  00E66C  90D8               	bcf	status,0,c
 13809  00E66E  342D               	rlcf	sortDrawerList@count1,w,c
 13810  00E670  6ED9               	movwf	fsr2l,c
 13811  00E672  342E               	rlcf	sortDrawerList@count1+1,w,c
 13812  00E674  6EDA               	movwf	fsr2h,c
 13813  00E676  0E09               	movlw	low sortDrawerList@sublist1
 13814  00E678  26D9               	addwf	fsr2l,f,c
 13815  00E67A  0E00               	movlw	high sortDrawerList@sublist1
 13816  00E67C  22DA               	addwfc	fsr2h,f,c
 13817  00E67E  0E02               	movlw	2
 13818  00E680  18DE               	xorwf	postinc2,w,c
 13819  00E682  10DE               	iorwf	postinc2,w,c
 13820  00E684  A4D8               	btfss	status,2,c
 13821  00E686  D063               	goto	l180
 13822  00E688                     u8040:
 13823                           
 13824                           ;operationMode.c: 131: for (i=0; i<count2; i++){
 13825  00E688  0E00               	movlw	0
 13826  00E68A  6E36               	movwf	sortDrawerList@i+1,c
 13827  00E68C  0E00               	movlw	0
 13828  00E68E  6E35               	movwf	sortDrawerList@i,c
 13829  00E690  D057               	goto	l183
 13830  00E692                     
 13831                           ;operationMode.c: 132: for (j=0; j<count2; j++){
 13832  00E692  0E00               	movlw	0
 13833  00E694  6E34               	movwf	sortDrawerList@j+1,c
 13834  00E696  0E00               	movlw	0
 13835  00E698  6E33               	movwf	sortDrawerList@j,c
 13836  00E69A  D04A               	goto	l185
 13837  00E69C                     
 13838                           ;operationMode.c: 133: if (sublist2[j] > sublist2[i]){
 13839  00E69C  90D8               	bcf	status,0,c
 13840  00E69E  3433               	rlcf	sortDrawerList@j,w,c
 13841  00E6A0  6ED9               	movwf	fsr2l,c
 13842  00E6A2  3434               	rlcf	sortDrawerList@j+1,w,c
 13843  00E6A4  6EDA               	movwf	fsr2h,c
 13844  00E6A6  0E19               	movlw	low sortDrawerList@sublist2
 13845  00E6A8  26D9               	addwf	fsr2l,f,c
 13846  00E6AA  0E00               	movlw	high sortDrawerList@sublist2
 13847  00E6AC  22DA               	addwfc	fsr2h,f,c
 13848  00E6AE  90D8               	bcf	status,0,c
 13849  00E6B0  3435               	rlcf	sortDrawerList@i,w,c
 13850  00E6B2  6EE1               	movwf	fsr1l,c
 13851  00E6B4  3436               	rlcf	sortDrawerList@i+1,w,c
 13852  00E6B6  6EE2               	movwf	fsr1h,c
 13853  00E6B8  0E19               	movlw	low sortDrawerList@sublist2
 13854  00E6BA  26E1               	addwf	fsr1l,f,c
 13855  00E6BC  0E00               	movlw	high sortDrawerList@sublist2
 13856  00E6BE  22E2               	addwfc	fsr1h,f,c
 13857  00E6C0  50DE               	movf	postinc2,w,c
 13858  00E6C2  5CE6               	subwf	postinc1,w,c
 13859  00E6C4  50DE               	movf	postinc2,w,c
 13860  00E6C6  58E6               	subwfb	postinc1,w,c
 13861  00E6C8  B0D8               	btfsc	status,0,c
 13862  00E6CA  D030               	goto	l187
 13863                           
 13864                           ;operationMode.c: 134: temp = sublist2[i];
 13865  00E6CC  90D8               	bcf	status,0,c
 13866  00E6CE  3435               	rlcf	sortDrawerList@i,w,c
 13867  00E6D0  6ED9               	movwf	fsr2l,c
 13868  00E6D2  3436               	rlcf	sortDrawerList@i+1,w,c
 13869  00E6D4  6EDA               	movwf	fsr2h,c
 13870  00E6D6  0E19               	movlw	low sortDrawerList@sublist2
 13871  00E6D8  26D9               	addwf	fsr2l,f,c
 13872  00E6DA  0E00               	movlw	high sortDrawerList@sublist2
 13873  00E6DC  22DA               	addwfc	fsr2h,f,c
 13874  00E6DE  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13875  00E6E2  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13876                           
 13877                           ;operationMode.c: 135: sublist2[i] = sublist2[j];
 13878  00E6E6  90D8               	bcf	status,0,c
 13879  00E6E8  3433               	rlcf	sortDrawerList@j,w,c
 13880  00E6EA  6ED9               	movwf	fsr2l,c
 13881  00E6EC  3434               	rlcf	sortDrawerList@j+1,w,c
 13882  00E6EE  6EDA               	movwf	fsr2h,c
 13883  00E6F0  0E19               	movlw	low sortDrawerList@sublist2
 13884  00E6F2  26D9               	addwf	fsr2l,f,c
 13885  00E6F4  0E00               	movlw	high sortDrawerList@sublist2
 13886  00E6F6  22DA               	addwfc	fsr2h,f,c
 13887  00E6F8  90D8               	bcf	status,0,c
 13888  00E6FA  3435               	rlcf	sortDrawerList@i,w,c
 13889  00E6FC  6EE1               	movwf	fsr1l,c
 13890  00E6FE  3436               	rlcf	sortDrawerList@i+1,w,c
 13891  00E700  6EE2               	movwf	fsr1h,c
 13892  00E702  0E19               	movlw	low sortDrawerList@sublist2
 13893  00E704  26E1               	addwf	fsr1l,f,c
 13894  00E706  0E00               	movlw	high sortDrawerList@sublist2
 13895  00E708  22E2               	addwfc	fsr1h,f,c
 13896  00E70A  CFDE FFE6          	movff	postinc2,postinc1
 13897  00E70E  CFDD FFE5          	movff	postdec2,postdec1
 13898                           
 13899                           ;operationMode.c: 136: sublist2[j] = temp;
 13900  00E712  90D8               	bcf	status,0,c
 13901  00E714  3433               	rlcf	sortDrawerList@j,w,c
 13902  00E716  6ED9               	movwf	fsr2l,c
 13903  00E718  3434               	rlcf	sortDrawerList@j+1,w,c
 13904  00E71A  6EDA               	movwf	fsr2h,c
 13905  00E71C  0E19               	movlw	low sortDrawerList@sublist2
 13906  00E71E  26D9               	addwf	fsr2l,f,c
 13907  00E720  0E00               	movlw	high sortDrawerList@sublist2
 13908  00E722  22DA               	addwfc	fsr2h,f,c
 13909  00E724  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13910  00E728  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13911  00E72C                     l187:
 13912  00E72C  4A33               	infsnz	sortDrawerList@j,f,c
 13913  00E72E  2A34               	incf	sortDrawerList@j+1,f,c
 13914  00E730                     l185:
 13915  00E730  5031               	movf	sortDrawerList@count2,w,c
 13916  00E732  5C33               	subwf	sortDrawerList@j,w,c
 13917  00E734  5032               	movf	sortDrawerList@count2+1,w,c
 13918  00E736  5834               	subwfb	sortDrawerList@j+1,w,c
 13919  00E738  A0D8               	btfss	status,0,c
 13920  00E73A  D7B0               	goto	l186
 13921  00E73C  4A35               	infsnz	sortDrawerList@i,f,c
 13922  00E73E  2A36               	incf	sortDrawerList@i+1,f,c
 13923  00E740                     l183:
 13924  00E740  5031               	movf	sortDrawerList@count2,w,c
 13925  00E742  5C35               	subwf	sortDrawerList@i,w,c
 13926  00E744  5032               	movf	sortDrawerList@count2+1,w,c
 13927  00E746  5836               	subwfb	sortDrawerList@i+1,w,c
 13928  00E748  B0D8               	btfsc	status,0,c
 13929  00E74A  D0FE               	goto	u8170
 13930  00E74C  D7A2               	goto	l184
 13931  00E74E                     l180:
 13932                           
 13933                           ;operationMode.c: 142: else if (sublist2[count2] == 7 || sublist2[count2] == 8){
 13934  00E74E  90D8               	bcf	status,0,c
 13935  00E750  3431               	rlcf	sortDrawerList@count2,w,c
 13936  00E752  6ED9               	movwf	fsr2l,c
 13937  00E754  3432               	rlcf	sortDrawerList@count2+1,w,c
 13938  00E756  6EDA               	movwf	fsr2h,c
 13939  00E758  0E19               	movlw	low sortDrawerList@sublist2
 13940  00E75A  26D9               	addwf	fsr2l,f,c
 13941  00E75C  0E00               	movlw	high sortDrawerList@sublist2
 13942  00E75E  22DA               	addwfc	fsr2h,f,c
 13943  00E760  0E07               	movlw	7
 13944  00E762  18DE               	xorwf	postinc2,w,c
 13945  00E764  10DE               	iorwf	postinc2,w,c
 13946  00E766  B4D8               	btfsc	status,2,c
 13947  00E768  D00E               	goto	u8090
 13948  00E76A  90D8               	bcf	status,0,c
 13949  00E76C  3431               	rlcf	sortDrawerList@count2,w,c
 13950  00E76E  6ED9               	movwf	fsr2l,c
 13951  00E770  3432               	rlcf	sortDrawerList@count2+1,w,c
 13952  00E772  6EDA               	movwf	fsr2h,c
 13953  00E774  0E19               	movlw	low sortDrawerList@sublist2
 13954  00E776  26D9               	addwf	fsr2l,f,c
 13955  00E778  0E00               	movlw	high sortDrawerList@sublist2
 13956  00E77A  22DA               	addwfc	fsr2h,f,c
 13957  00E77C  0E08               	movlw	8
 13958  00E77E  18DE               	xorwf	postinc2,w,c
 13959  00E780  10DE               	iorwf	postinc2,w,c
 13960  00E782  A4D8               	btfss	status,2,c
 13961  00E784  D063               	goto	l191
 13962  00E786                     u8090:
 13963                           
 13964                           ;operationMode.c: 143: for (i=0; i<count3; i++){
 13965  00E786  0E00               	movlw	0
 13966  00E788  6E36               	movwf	sortDrawerList@i+1,c
 13967  00E78A  0E00               	movlw	0
 13968  00E78C  6E35               	movwf	sortDrawerList@i,c
 13969  00E78E  D057               	goto	l194
 13970  00E790                     
 13971                           ;operationMode.c: 144: for (j=0; j<count3; j++){
 13972  00E790  0E00               	movlw	0
 13973  00E792  6E34               	movwf	sortDrawerList@j+1,c
 13974  00E794  0E00               	movlw	0
 13975  00E796  6E33               	movwf	sortDrawerList@j,c
 13976  00E798  D04A               	goto	l196
 13977  00E79A                     
 13978                           ;operationMode.c: 145: if (sublist3[j] < sublist3[i]){
 13979  00E79A  90D8               	bcf	status,0,c
 13980  00E79C  3435               	rlcf	sortDrawerList@i,w,c
 13981  00E79E  6ED9               	movwf	fsr2l,c
 13982  00E7A0  3436               	rlcf	sortDrawerList@i+1,w,c
 13983  00E7A2  6EDA               	movwf	fsr2h,c
 13984  00E7A4  0E21               	movlw	low sortDrawerList@sublist3
 13985  00E7A6  26D9               	addwf	fsr2l,f,c
 13986  00E7A8  0E00               	movlw	high sortDrawerList@sublist3
 13987  00E7AA  22DA               	addwfc	fsr2h,f,c
 13988  00E7AC  90D8               	bcf	status,0,c
 13989  00E7AE  3433               	rlcf	sortDrawerList@j,w,c
 13990  00E7B0  6EE1               	movwf	fsr1l,c
 13991  00E7B2  3434               	rlcf	sortDrawerList@j+1,w,c
 13992  00E7B4  6EE2               	movwf	fsr1h,c
 13993  00E7B6  0E21               	movlw	low sortDrawerList@sublist3
 13994  00E7B8  26E1               	addwf	fsr1l,f,c
 13995  00E7BA  0E00               	movlw	high sortDrawerList@sublist3
 13996  00E7BC  22E2               	addwfc	fsr1h,f,c
 13997  00E7BE  50DE               	movf	postinc2,w,c
 13998  00E7C0  5CE6               	subwf	postinc1,w,c
 13999  00E7C2  50DE               	movf	postinc2,w,c
 14000  00E7C4  58E6               	subwfb	postinc1,w,c
 14001  00E7C6  B0D8               	btfsc	status,0,c
 14002  00E7C8  D030               	goto	l198
 14003                           
 14004                           ;operationMode.c: 146: temp = sublist3[i];
 14005  00E7CA  90D8               	bcf	status,0,c
 14006  00E7CC  3435               	rlcf	sortDrawerList@i,w,c
 14007  00E7CE  6ED9               	movwf	fsr2l,c
 14008  00E7D0  3436               	rlcf	sortDrawerList@i+1,w,c
 14009  00E7D2  6EDA               	movwf	fsr2h,c
 14010  00E7D4  0E21               	movlw	low sortDrawerList@sublist3
 14011  00E7D6  26D9               	addwf	fsr2l,f,c
 14012  00E7D8  0E00               	movlw	high sortDrawerList@sublist3
 14013  00E7DA  22DA               	addwfc	fsr2h,f,c
 14014  00E7DC  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 14015  00E7E0  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 14016                           
 14017                           ;operationMode.c: 147: sublist3[i] = sublist3[j];
 14018  00E7E4  90D8               	bcf	status,0,c
 14019  00E7E6  3433               	rlcf	sortDrawerList@j,w,c
 14020  00E7E8  6ED9               	movwf	fsr2l,c
 14021  00E7EA  3434               	rlcf	sortDrawerList@j+1,w,c
 14022  00E7EC  6EDA               	movwf	fsr2h,c
 14023  00E7EE  0E21               	movlw	low sortDrawerList@sublist3
 14024  00E7F0  26D9               	addwf	fsr2l,f,c
 14025  00E7F2  0E00               	movlw	high sortDrawerList@sublist3
 14026  00E7F4  22DA               	addwfc	fsr2h,f,c
 14027  00E7F6  90D8               	bcf	status,0,c
 14028  00E7F8  3435               	rlcf	sortDrawerList@i,w,c
 14029  00E7FA  6EE1               	movwf	fsr1l,c
 14030  00E7FC  3436               	rlcf	sortDrawerList@i+1,w,c
 14031  00E7FE  6EE2               	movwf	fsr1h,c
 14032  00E800  0E21               	movlw	low sortDrawerList@sublist3
 14033  00E802  26E1               	addwf	fsr1l,f,c
 14034  00E804  0E00               	movlw	high sortDrawerList@sublist3
 14035  00E806  22E2               	addwfc	fsr1h,f,c
 14036  00E808  CFDE FFE6          	movff	postinc2,postinc1
 14037  00E80C  CFDD FFE5          	movff	postdec2,postdec1
 14038                           
 14039                           ;operationMode.c: 148: sublist3[j] = temp;
 14040  00E810  90D8               	bcf	status,0,c
 14041  00E812  3433               	rlcf	sortDrawerList@j,w,c
 14042  00E814  6ED9               	movwf	fsr2l,c
 14043  00E816  3434               	rlcf	sortDrawerList@j+1,w,c
 14044  00E818  6EDA               	movwf	fsr2h,c
 14045  00E81A  0E21               	movlw	low sortDrawerList@sublist3
 14046  00E81C  26D9               	addwf	fsr2l,f,c
 14047  00E81E  0E00               	movlw	high sortDrawerList@sublist3
 14048  00E820  22DA               	addwfc	fsr2h,f,c
 14049  00E822  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 14050  00E826  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14051  00E82A                     l198:
 14052  00E82A  4A33               	infsnz	sortDrawerList@j,f,c
 14053  00E82C  2A34               	incf	sortDrawerList@j+1,f,c
 14054  00E82E                     l196:
 14055  00E82E  502F               	movf	sortDrawerList@count3,w,c
 14056  00E830  5C33               	subwf	sortDrawerList@j,w,c
 14057  00E832  5030               	movf	sortDrawerList@count3+1,w,c
 14058  00E834  5834               	subwfb	sortDrawerList@j+1,w,c
 14059  00E836  A0D8               	btfss	status,0,c
 14060  00E838  D7B0               	goto	l197
 14061  00E83A  4A35               	infsnz	sortDrawerList@i,f,c
 14062  00E83C  2A36               	incf	sortDrawerList@i+1,f,c
 14063  00E83E                     l194:
 14064  00E83E  502F               	movf	sortDrawerList@count3,w,c
 14065  00E840  5C35               	subwf	sortDrawerList@i,w,c
 14066  00E842  5030               	movf	sortDrawerList@count3+1,w,c
 14067  00E844  5836               	subwfb	sortDrawerList@i+1,w,c
 14068  00E846  B0D8               	btfsc	status,0,c
 14069  00E848  D07F               	goto	u8170
 14070  00E84A  D7A2               	goto	l195
 14071  00E84C                     l191:
 14072                           
 14073                           ;operationMode.c: 154: else if (sublist3[count3] == 10 || sublist3[count3] == 9){
 14074  00E84C  90D8               	bcf	status,0,c
 14075  00E84E  342F               	rlcf	sortDrawerList@count3,w,c
 14076  00E850  6ED9               	movwf	fsr2l,c
 14077  00E852  3430               	rlcf	sortDrawerList@count3+1,w,c
 14078  00E854  6EDA               	movwf	fsr2h,c
 14079  00E856  0E21               	movlw	low sortDrawerList@sublist3
 14080  00E858  26D9               	addwf	fsr2l,f,c
 14081  00E85A  0E00               	movlw	high sortDrawerList@sublist3
 14082  00E85C  22DA               	addwfc	fsr2h,f,c
 14083  00E85E  0E0A               	movlw	10
 14084  00E860  18DE               	xorwf	postinc2,w,c
 14085  00E862  10DE               	iorwf	postinc2,w,c
 14086  00E864  B4D8               	btfsc	status,2,c
 14087  00E866  D00E               	goto	u8140
 14088  00E868  90D8               	bcf	status,0,c
 14089  00E86A  342F               	rlcf	sortDrawerList@count3,w,c
 14090  00E86C  6ED9               	movwf	fsr2l,c
 14091  00E86E  3430               	rlcf	sortDrawerList@count3+1,w,c
 14092  00E870  6EDA               	movwf	fsr2h,c
 14093  00E872  0E21               	movlw	low sortDrawerList@sublist3
 14094  00E874  26D9               	addwf	fsr2l,f,c
 14095  00E876  0E00               	movlw	high sortDrawerList@sublist3
 14096  00E878  22DA               	addwfc	fsr2h,f,c
 14097  00E87A  0E09               	movlw	9
 14098  00E87C  18DE               	xorwf	postinc2,w,c
 14099  00E87E  10DE               	iorwf	postinc2,w,c
 14100  00E880  A4D8               	btfss	status,2,c
 14101  00E882  D062               	goto	u8170
 14102  00E884                     u8140:
 14103                           
 14104                           ;operationMode.c: 155: for (i=0; i<count4; i++){
 14105  00E884  0E00               	movlw	0
 14106  00E886  6E36               	movwf	sortDrawerList@i+1,c
 14107  00E888  0E00               	movlw	0
 14108  00E88A  6E35               	movwf	sortDrawerList@i,c
 14109  00E88C  D057               	goto	l205
 14110  00E88E                     
 14111                           ;operationMode.c: 156: for (j=0; j<count4; j++){
 14112  00E88E  0E00               	movlw	0
 14113  00E890  6E34               	movwf	sortDrawerList@j+1,c
 14114  00E892  0E00               	movlw	0
 14115  00E894  6E33               	movwf	sortDrawerList@j,c
 14116  00E896  D04A               	goto	l207
 14117  00E898                     
 14118                           ;operationMode.c: 157: if (sublist4[j] > sublist4[i]){
 14119  00E898  90D8               	bcf	status,0,c
 14120  00E89A  3433               	rlcf	sortDrawerList@j,w,c
 14121  00E89C  6ED9               	movwf	fsr2l,c
 14122  00E89E  3434               	rlcf	sortDrawerList@j+1,w,c
 14123  00E8A0  6EDA               	movwf	fsr2h,c
 14124  00E8A2  0E11               	movlw	low sortDrawerList@sublist4
 14125  00E8A4  26D9               	addwf	fsr2l,f,c
 14126  00E8A6  0E00               	movlw	high sortDrawerList@sublist4
 14127  00E8A8  22DA               	addwfc	fsr2h,f,c
 14128  00E8AA  90D8               	bcf	status,0,c
 14129  00E8AC  3435               	rlcf	sortDrawerList@i,w,c
 14130  00E8AE  6EE1               	movwf	fsr1l,c
 14131  00E8B0  3436               	rlcf	sortDrawerList@i+1,w,c
 14132  00E8B2  6EE2               	movwf	fsr1h,c
 14133  00E8B4  0E11               	movlw	low sortDrawerList@sublist4
 14134  00E8B6  26E1               	addwf	fsr1l,f,c
 14135  00E8B8  0E00               	movlw	high sortDrawerList@sublist4
 14136  00E8BA  22E2               	addwfc	fsr1h,f,c
 14137  00E8BC  50DE               	movf	postinc2,w,c
 14138  00E8BE  5CE6               	subwf	postinc1,w,c
 14139  00E8C0  50DE               	movf	postinc2,w,c
 14140  00E8C2  58E6               	subwfb	postinc1,w,c
 14141  00E8C4  B0D8               	btfsc	status,0,c
 14142  00E8C6  D030               	goto	l209
 14143                           
 14144                           ;operationMode.c: 158: temp = sublist4[i];
 14145  00E8C8  90D8               	bcf	status,0,c
 14146  00E8CA  3435               	rlcf	sortDrawerList@i,w,c
 14147  00E8CC  6ED9               	movwf	fsr2l,c
 14148  00E8CE  3436               	rlcf	sortDrawerList@i+1,w,c
 14149  00E8D0  6EDA               	movwf	fsr2h,c
 14150  00E8D2  0E11               	movlw	low sortDrawerList@sublist4
 14151  00E8D4  26D9               	addwf	fsr2l,f,c
 14152  00E8D6  0E00               	movlw	high sortDrawerList@sublist4
 14153  00E8D8  22DA               	addwfc	fsr2h,f,c
 14154  00E8DA  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 14155  00E8DE  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 14156                           
 14157                           ;operationMode.c: 159: sublist4[i] = sublist4[j];
 14158  00E8E2  90D8               	bcf	status,0,c
 14159  00E8E4  3433               	rlcf	sortDrawerList@j,w,c
 14160  00E8E6  6ED9               	movwf	fsr2l,c
 14161  00E8E8  3434               	rlcf	sortDrawerList@j+1,w,c
 14162  00E8EA  6EDA               	movwf	fsr2h,c
 14163  00E8EC  0E11               	movlw	low sortDrawerList@sublist4
 14164  00E8EE  26D9               	addwf	fsr2l,f,c
 14165  00E8F0  0E00               	movlw	high sortDrawerList@sublist4
 14166  00E8F2  22DA               	addwfc	fsr2h,f,c
 14167  00E8F4  90D8               	bcf	status,0,c
 14168  00E8F6  3435               	rlcf	sortDrawerList@i,w,c
 14169  00E8F8  6EE1               	movwf	fsr1l,c
 14170  00E8FA  3436               	rlcf	sortDrawerList@i+1,w,c
 14171  00E8FC  6EE2               	movwf	fsr1h,c
 14172  00E8FE  0E11               	movlw	low sortDrawerList@sublist4
 14173  00E900  26E1               	addwf	fsr1l,f,c
 14174  00E902  0E00               	movlw	high sortDrawerList@sublist4
 14175  00E904  22E2               	addwfc	fsr1h,f,c
 14176  00E906  CFDE FFE6          	movff	postinc2,postinc1
 14177  00E90A  CFDD FFE5          	movff	postdec2,postdec1
 14178                           
 14179                           ;operationMode.c: 160: sublist4[j] = temp;
 14180  00E90E  90D8               	bcf	status,0,c
 14181  00E910  3433               	rlcf	sortDrawerList@j,w,c
 14182  00E912  6ED9               	movwf	fsr2l,c
 14183  00E914  3434               	rlcf	sortDrawerList@j+1,w,c
 14184  00E916  6EDA               	movwf	fsr2h,c
 14185  00E918  0E11               	movlw	low sortDrawerList@sublist4
 14186  00E91A  26D9               	addwf	fsr2l,f,c
 14187  00E91C  0E00               	movlw	high sortDrawerList@sublist4
 14188  00E91E  22DA               	addwfc	fsr2h,f,c
 14189  00E920  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 14190  00E924  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14191  00E928                     l209:
 14192  00E928  4A33               	infsnz	sortDrawerList@j,f,c
 14193  00E92A  2A34               	incf	sortDrawerList@j+1,f,c
 14194  00E92C                     l207:
 14195  00E92C  5029               	movf	sortDrawerList@count4,w,c
 14196  00E92E  5C33               	subwf	sortDrawerList@j,w,c
 14197  00E930  502A               	movf	sortDrawerList@count4+1,w,c
 14198  00E932  5834               	subwfb	sortDrawerList@j+1,w,c
 14199  00E934  A0D8               	btfss	status,0,c
 14200  00E936  D7B0               	goto	l208
 14201  00E938  4A35               	infsnz	sortDrawerList@i,f,c
 14202  00E93A  2A36               	incf	sortDrawerList@i+1,f,c
 14203  00E93C                     l205:
 14204  00E93C  5029               	movf	sortDrawerList@count4,w,c
 14205  00E93E  5C35               	subwf	sortDrawerList@i,w,c
 14206  00E940  502A               	movf	sortDrawerList@count4+1,w,c
 14207  00E942  5836               	subwfb	sortDrawerList@i+1,w,c
 14208  00E944  A0D8               	btfss	status,0,c
 14209  00E946  D7A3               	goto	l206
 14210  00E948                     u8170:
 14211                           
 14212                           ;operationMode.c: 161: }
 14213                           ;operationMode.c: 162: }
 14214                           ;operationMode.c: 163: }
 14215                           ;operationMode.c: 164: }
 14216                           ;operationMode.c: 167: for (i=0; i<count1; i++){
 14217  00E948  0E00               	movlw	0
 14218  00E94A  6E36               	movwf	sortDrawerList@i+1,c
 14219  00E94C  0E00               	movlw	0
 14220  00E94E  6E35               	movwf	sortDrawerList@i,c
 14221  00E950  D018               	goto	l212
 14222  00E952                     
 14223                           ;operationMode.c: 168: sortedDrawerTable[i] = sublist1[i];
 14224  00E952  90D8               	bcf	status,0,c
 14225  00E954  3435               	rlcf	sortDrawerList@i,w,c
 14226  00E956  6ED9               	movwf	fsr2l,c
 14227  00E958  3436               	rlcf	sortDrawerList@i+1,w,c
 14228  00E95A  6EDA               	movwf	fsr2h,c
 14229  00E95C  0E09               	movlw	low sortDrawerList@sublist1
 14230  00E95E  26D9               	addwf	fsr2l,f,c
 14231  00E960  0E00               	movlw	high sortDrawerList@sublist1
 14232  00E962  22DA               	addwfc	fsr2h,f,c
 14233  00E964  90D8               	bcf	status,0,c
 14234  00E966  3435               	rlcf	sortDrawerList@i,w,c
 14235  00E968  6EE1               	movwf	fsr1l,c
 14236  00E96A  3436               	rlcf	sortDrawerList@i+1,w,c
 14237  00E96C  6EE2               	movwf	fsr1h,c
 14238  00E96E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14239  00E970  26E1               	addwf	fsr1l,f,c
 14240  00E972  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14241  00E974  22E2               	addwfc	fsr1h,f,c
 14242  00E976  CFDE FFE6          	movff	postinc2,postinc1
 14243  00E97A  CFDD FFE5          	movff	postdec2,postdec1
 14244  00E97E  4A35               	infsnz	sortDrawerList@i,f,c
 14245  00E980  2A36               	incf	sortDrawerList@i+1,f,c
 14246  00E982                     l212:
 14247  00E982  502D               	movf	sortDrawerList@count1,w,c
 14248  00E984  5C35               	subwf	sortDrawerList@i,w,c
 14249  00E986  502E               	movf	sortDrawerList@count1+1,w,c
 14250  00E988  5836               	subwfb	sortDrawerList@i+1,w,c
 14251  00E98A  A0D8               	btfss	status,0,c
 14252  00E98C  D7E2               	goto	l213
 14253                           
 14254                           ;operationMode.c: 169: }
 14255                           ;operationMode.c: 170: for (i=0; i<count2; i++){
 14256  00E98E  0E00               	movlw	0
 14257  00E990  6E36               	movwf	sortDrawerList@i+1,c
 14258  00E992  0E00               	movlw	0
 14259  00E994  6E35               	movwf	sortDrawerList@i,c
 14260  00E996  D01E               	goto	l215
 14261  00E998                     
 14262                           ;operationMode.c: 171: sortedDrawerTable[i+count1] = sublist2[i];
 14263  00E998  90D8               	bcf	status,0,c
 14264  00E99A  3435               	rlcf	sortDrawerList@i,w,c
 14265  00E99C  6ED9               	movwf	fsr2l,c
 14266  00E99E  3436               	rlcf	sortDrawerList@i+1,w,c
 14267  00E9A0  6EDA               	movwf	fsr2h,c
 14268  00E9A2  0E19               	movlw	low sortDrawerList@sublist2
 14269  00E9A4  26D9               	addwf	fsr2l,f,c
 14270  00E9A6  0E00               	movlw	high sortDrawerList@sublist2
 14271  00E9A8  22DA               	addwfc	fsr2h,f,c
 14272  00E9AA  502D               	movf	sortDrawerList@count1,w,c
 14273  00E9AC  2435               	addwf	sortDrawerList@i,w,c
 14274  00E9AE  6E05               	movwf	??_sortDrawerList& (0+255),c
 14275  00E9B0  502E               	movf	sortDrawerList@count1+1,w,c
 14276  00E9B2  2036               	addwfc	sortDrawerList@i+1,w,c
 14277  00E9B4  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14278  00E9B6  90D8               	bcf	status,0,c
 14279  00E9B8  3605               	rlcf	??_sortDrawerList,f,c
 14280  00E9BA  3606               	rlcf	??_sortDrawerList+1,f,c
 14281  00E9BC  5005               	movf	??_sortDrawerList,w,c
 14282  00E9BE  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14283  00E9C0  6EE1               	movwf	fsr1l,c
 14284  00E9C2  5006               	movf	??_sortDrawerList+1,w,c
 14285  00E9C4  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14286  00E9C6  6EE2               	movwf	fsr1h,c
 14287  00E9C8  CFDE FFE6          	movff	postinc2,postinc1
 14288  00E9CC  CFDD FFE5          	movff	postdec2,postdec1
 14289  00E9D0  4A35               	infsnz	sortDrawerList@i,f,c
 14290  00E9D2  2A36               	incf	sortDrawerList@i+1,f,c
 14291  00E9D4                     l215:
 14292  00E9D4  5031               	movf	sortDrawerList@count2,w,c
 14293  00E9D6  5C35               	subwf	sortDrawerList@i,w,c
 14294  00E9D8  5032               	movf	sortDrawerList@count2+1,w,c
 14295  00E9DA  5836               	subwfb	sortDrawerList@i+1,w,c
 14296  00E9DC  A0D8               	btfss	status,0,c
 14297  00E9DE  D7DC               	goto	l216
 14298                           
 14299                           ;operationMode.c: 172: }
 14300                           ;operationMode.c: 173: for (i=0; i<count3; i++){
 14301  00E9E0  0E00               	movlw	0
 14302  00E9E2  6E36               	movwf	sortDrawerList@i+1,c
 14303  00E9E4  0E00               	movlw	0
 14304  00E9E6  6E35               	movwf	sortDrawerList@i,c
 14305  00E9E8  D022               	goto	l218
 14306  00E9EA                     
 14307                           ;operationMode.c: 174: sortedDrawerTable[i+count1+count2] = sublist3[i];
 14308  00E9EA  90D8               	bcf	status,0,c
 14309  00E9EC  3435               	rlcf	sortDrawerList@i,w,c
 14310  00E9EE  6ED9               	movwf	fsr2l,c
 14311  00E9F0  3436               	rlcf	sortDrawerList@i+1,w,c
 14312  00E9F2  6EDA               	movwf	fsr2h,c
 14313  00E9F4  0E21               	movlw	low sortDrawerList@sublist3
 14314  00E9F6  26D9               	addwf	fsr2l,f,c
 14315  00E9F8  0E00               	movlw	high sortDrawerList@sublist3
 14316  00E9FA  22DA               	addwfc	fsr2h,f,c
 14317  00E9FC  502D               	movf	sortDrawerList@count1,w,c
 14318  00E9FE  2435               	addwf	sortDrawerList@i,w,c
 14319  00EA00  6E05               	movwf	??_sortDrawerList& (0+255),c
 14320  00EA02  502E               	movf	sortDrawerList@count1+1,w,c
 14321  00EA04  2036               	addwfc	sortDrawerList@i+1,w,c
 14322  00EA06  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14323  00EA08  5031               	movf	sortDrawerList@count2,w,c
 14324  00EA0A  2605               	addwf	??_sortDrawerList,f,c
 14325  00EA0C  5032               	movf	sortDrawerList@count2+1,w,c
 14326  00EA0E  2206               	addwfc	??_sortDrawerList+1,f,c
 14327  00EA10  90D8               	bcf	status,0,c
 14328  00EA12  3605               	rlcf	??_sortDrawerList,f,c
 14329  00EA14  3606               	rlcf	??_sortDrawerList+1,f,c
 14330  00EA16  5005               	movf	??_sortDrawerList,w,c
 14331  00EA18  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14332  00EA1A  6EE1               	movwf	fsr1l,c
 14333  00EA1C  5006               	movf	??_sortDrawerList+1,w,c
 14334  00EA1E  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14335  00EA20  6EE2               	movwf	fsr1h,c
 14336  00EA22  CFDE FFE6          	movff	postinc2,postinc1
 14337  00EA26  CFDD FFE5          	movff	postdec2,postdec1
 14338  00EA2A  4A35               	infsnz	sortDrawerList@i,f,c
 14339  00EA2C  2A36               	incf	sortDrawerList@i+1,f,c
 14340  00EA2E                     l218:
 14341  00EA2E  502F               	movf	sortDrawerList@count3,w,c
 14342  00EA30  5C35               	subwf	sortDrawerList@i,w,c
 14343  00EA32  5030               	movf	sortDrawerList@count3+1,w,c
 14344  00EA34  5836               	subwfb	sortDrawerList@i+1,w,c
 14345  00EA36  A0D8               	btfss	status,0,c
 14346  00EA38  D7D8               	goto	l219
 14347                           
 14348                           ;operationMode.c: 175: }
 14349                           ;operationMode.c: 176: for (i=0; i<count4; i++){
 14350  00EA3A  0E00               	movlw	0
 14351  00EA3C  6E36               	movwf	sortDrawerList@i+1,c
 14352  00EA3E  0E00               	movlw	0
 14353  00EA40  6E35               	movwf	sortDrawerList@i,c
 14354  00EA42  D026               	goto	l221
 14355  00EA44                     
 14356                           ;operationMode.c: 177: sortedDrawerTable[i+count1+count2+count3] = sublist4[i];
 14357  00EA44  90D8               	bcf	status,0,c
 14358  00EA46  3435               	rlcf	sortDrawerList@i,w,c
 14359  00EA48  6ED9               	movwf	fsr2l,c
 14360  00EA4A  3436               	rlcf	sortDrawerList@i+1,w,c
 14361  00EA4C  6EDA               	movwf	fsr2h,c
 14362  00EA4E  0E11               	movlw	low sortDrawerList@sublist4
 14363  00EA50  26D9               	addwf	fsr2l,f,c
 14364  00EA52  0E00               	movlw	high sortDrawerList@sublist4
 14365  00EA54  22DA               	addwfc	fsr2h,f,c
 14366  00EA56  502D               	movf	sortDrawerList@count1,w,c
 14367  00EA58  2435               	addwf	sortDrawerList@i,w,c
 14368  00EA5A  6E05               	movwf	??_sortDrawerList& (0+255),c
 14369  00EA5C  502E               	movf	sortDrawerList@count1+1,w,c
 14370  00EA5E  2036               	addwfc	sortDrawerList@i+1,w,c
 14371  00EA60  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14372  00EA62  5031               	movf	sortDrawerList@count2,w,c
 14373  00EA64  2605               	addwf	??_sortDrawerList,f,c
 14374  00EA66  5032               	movf	sortDrawerList@count2+1,w,c
 14375  00EA68  2206               	addwfc	??_sortDrawerList+1,f,c
 14376  00EA6A  502F               	movf	sortDrawerList@count3,w,c
 14377  00EA6C  2605               	addwf	??_sortDrawerList,f,c
 14378  00EA6E  5030               	movf	sortDrawerList@count3+1,w,c
 14379  00EA70  2206               	addwfc	??_sortDrawerList+1,f,c
 14380  00EA72  90D8               	bcf	status,0,c
 14381  00EA74  3605               	rlcf	??_sortDrawerList,f,c
 14382  00EA76  3606               	rlcf	??_sortDrawerList+1,f,c
 14383  00EA78  5005               	movf	??_sortDrawerList,w,c
 14384  00EA7A  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14385  00EA7C  6EE1               	movwf	fsr1l,c
 14386  00EA7E  5006               	movf	??_sortDrawerList+1,w,c
 14387  00EA80  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14388  00EA82  6EE2               	movwf	fsr1h,c
 14389  00EA84  CFDE FFE6          	movff	postinc2,postinc1
 14390  00EA88  CFDD FFE5          	movff	postdec2,postdec1
 14391  00EA8C  4A35               	infsnz	sortDrawerList@i,f,c
 14392  00EA8E  2A36               	incf	sortDrawerList@i+1,f,c
 14393  00EA90                     l221:
 14394  00EA90  5029               	movf	sortDrawerList@count4,w,c
 14395  00EA92  5C35               	subwf	sortDrawerList@i,w,c
 14396  00EA94  502A               	movf	sortDrawerList@count4+1,w,c
 14397  00EA96  5836               	subwfb	sortDrawerList@i+1,w,c
 14398  00EA98  B0D8               	btfsc	status,0,c
 14399  00EA9A  0012               	return	
 14400  00EA9C  D7D3               	goto	l222
 14401  00EA9E                     __end_of_sortDrawerList:
 14402                           	opt stack 0
 14403                           tblptru	equ	0xFF8
 14404                           tblptrh	equ	0xFF7
 14405                           tblptrl	equ	0xFF6
 14406                           tablat	equ	0xFF5
 14407                           prodh	equ	0xFF4
 14408                           prodl	equ	0xFF3
 14409                           postinc0	equ	0xFEE
 14410                           wreg	equ	0xFE8
 14411                           postinc1	equ	0xFE6
 14412                           postdec1	equ	0xFE5
 14413                           plusw1	equ	0xFE3
 14414                           fsr1h	equ	0xFE2
 14415                           fsr1l	equ	0xFE1
 14416                           indf2	equ	0xFDF
 14417                           postinc2	equ	0xFDE
 14418                           postdec2	equ	0xFDD
 14419                           plusw2	equ	0xFDB
 14420                           fsr2h	equ	0xFDA
 14421                           fsr2l	equ	0xFD9
 14422                           status	equ	0xFD8
 14423                           
 14424 ;; *************** function _printf *****************
 14425 ;; Defined at:
 14426 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  f               2   12[COMRAM] PTR const unsigned char 
 14429 ;;		 -> STR_112(11), STR_111(13), STR_110(11), STR_109(13), 
 14430 ;;		 -> STR_108(11), STR_107(15), STR_106(15), STR_105(5), 
 14431 ;;		 -> STR_104(11), STR_103(8), STR_102(11), STR_101(14), 
 14432 ;;		 -> STR_100(17), STR_99(8), STR_98(15), STR_97(16), 
 14433 ;;		 -> STR_96(10), STR_95(8), STR_94(15), STR_93(16), 
 14434 ;;		 -> STR_92(10), STR_91(16), STR_90(16), STR_89(17), 
 14435 ;;		 -> STR_88(13), STR_87(17), STR_86(14), STR_85(11), 
 14436 ;;		 -> STR_84(11), STR_83(15), STR_82(15), STR_81(10), 
 14437 ;;		 -> STR_80(13), STR_79(16), STR_78(16), STR_77(17), 
 14438 ;;		 -> STR_76(17), STR_75(8), STR_74(15), STR_73(15), 
 14439 ;;		 -> STR_72(11), STR_71(14), STR_70(16), STR_69(16), 
 14440 ;;		 -> STR_68(11), STR_67(14), STR_66(16), STR_65(16), 
 14441 ;;		 -> STR_64(16), STR_63(13), STR_62(5), STR_61(11), 
 14442 ;;		 -> STR_60(15), STR_59(17), STR_58(18), STR_57(15), 
 14443 ;;		 -> STR_56(11), STR_55(7), STR_54(3), STR_53(16), 
 14444 ;;		 -> STR_52(8), STR_51(16), STR_50(15), STR_49(6), 
 14445 ;;		 -> STR_48(14), STR_47(17), STR_46(7), STR_45(9), 
 14446 ;;		 -> STR_44(17), STR_43(11), STR_42(17), STR_41(14), 
 14447 ;;		 -> STR_40(17), STR_39(11), STR_38(15), STR_37(11), 
 14448 ;;		 -> STR_36(8), STR_4(10), STR_3(10), STR_2(16), 
 14449 ;;		 -> STR_1(8), 
 14450 ;; Auto vars:     Size  Location     Type
 14451 ;;  idx             1   26[COMRAM] unsigned char 
 14452 ;;  tmpval          4    0        struct .
 14453 ;;  width           2   37[COMRAM] int 
 14454 ;;  val             2   34[COMRAM] unsigned int 
 14455 ;;  len             2   32[COMRAM] unsigned int 
 14456 ;;  ap              2   30[COMRAM] PTR void [1]
 14457 ;;		 -> ?_printf(2), 
 14458 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 14459 ;;		 -> STR_113(7), STR_35(5), STR_34(4), STR_33(4), 
 14460 ;;		 -> STR_32(4), STR_31(4), STR_30(3), STR_29(3), 
 14461 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(2), 
 14462 ;;		 -> STR_24(2), STR_23(2), STR_22(5), STR_21(5), 
 14463 ;;		 -> STR_20(5), STR_19(5), STR_18(5), STR_17(4), 
 14464 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 14465 ;;		 -> STR_12(4), STR_11(4), STR_10(3), STR_9(3), 
 14466 ;;		 -> STR_8(3), STR_7(2), STR_6(2), STR_5(2), 
 14467 ;;  c               1   39[COMRAM] char 
 14468 ;;  flag            1   36[COMRAM] unsigned char 
 14469 ;;  prec            1   27[COMRAM] char 
 14470 ;; Return value:  Size  Location     Type
 14471 ;;                  2   12[COMRAM] int 
 14472 ;; Registers used:
 14473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14474 ;; Tracked objects:
 14475 ;;		On entry : 0/0
 14476 ;;		On exit  : 0/0
 14477 ;;		Unchanged: 0/0
 14478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14479 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14480 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;Total ram usage:       28 bytes
 14484 ;; Hardware stack levels used:    1
 14485 ;; Hardware stack levels required when called:    2
 14486 ;; This function calls:
 14487 ;;		___lwdiv
 14488 ;;		___lwmod
 14489 ;;		___wmul
 14490 ;;		_isdigit
 14491 ;;		_putch
 14492 ;; This function is called by:
 14493 ;;		_main
 14494 ;;		_mainOperation
 14495 ;;		_viewLogs
 14496 ;;		_displayLogs
 14497 ;;		_food_press
 14498 ;;		_diet_press
 14499 ;;		_which_drawer
 14500 ;;		_standbyMode
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           	psect	text26
 14505  00C68E                     __ptext26:
 14506                           	opt stack 0
 14507  00C68E                     _printf:
 14508                           	opt stack 26
 14509                           
 14510                           ;doprnt.c: 466: va_list ap;
 14511                           ;doprnt.c: 499: signed char c;
 14512                           ;doprnt.c: 501: int width;
 14513                           ;doprnt.c: 506: signed char prec;
 14514                           ;doprnt.c: 508: unsigned char flag;
 14515                           ;doprnt.c: 523: union {
 14516                           ;doprnt.c: 524: unsigned long vd;
 14517                           ;doprnt.c: 525: double integ;
 14518                           ;doprnt.c: 526: } tmpval;
 14519                           ;doprnt.c: 528: unsigned int val;
 14520                           ;doprnt.c: 529: unsigned len;
 14521                           ;doprnt.c: 530: const char * cp;
 14522                           ;doprnt.c: 533: *ap = __va_start();
 14523                           
 14524                           ;incstack = 0
 14525  00C68E  0E0F               	movlw	low (?_printf+2)
 14526  00C690  6E1F               	movwf	printf@ap,c
 14527  00C692  0E00               	movlw	high (?_printf+2)
 14528  00C694  6E20               	movwf	printf@ap+1,c
 14529                           
 14530                           ;doprnt.c: 536: while(c = *f++) {
 14531  00C696  D1E6               	goto	u6190
 14532  00C698                     
 14533                           ;doprnt.c: 538: if(c != '%')
 14534  00C698  0E25               	movlw	37
 14535  00C69A  1828               	xorwf	printf@c,w,c
 14536  00C69C  B4D8               	btfsc	status,2,c
 14537  00C69E  D004               	goto	l1292
 14538                           
 14539                           ;doprnt.c: 540: {
 14540                           ;doprnt.c: 541: (putch(c) );
 14541  00C6A0  5028               	movf	printf@c,w,c
 14542  00C6A2  ECF0  F056         	call	_putch
 14543                           
 14544                           ;doprnt.c: 542: continue;
 14545  00C6A6  D1DE               	goto	u6190
 14546  00C6A8                     l1292:
 14547                           
 14548                           ;doprnt.c: 543: }
 14549                           ;doprnt.c: 546: width = 0;
 14550  00C6A8  0E00               	movlw	0
 14551  00C6AA  6E27               	movwf	printf@width+1,c
 14552  00C6AC  0E00               	movlw	0
 14553  00C6AE  6E26               	movwf	printf@width,c
 14554                           
 14555                           ;doprnt.c: 548: flag = 0;
 14556  00C6B0  0E00               	movlw	0
 14557  00C6B2  6E25               	movwf	printf@flag,c
 14558                           
 14559                           ;doprnt.c: 551: switch(*f) {
 14560                           
 14561                           ;doprnt.c: 550: for(;;) {
 14562  00C6B4  D003               	goto	l1294
 14563  00C6B6                     
 14564                           ;doprnt.c: 580: flag |= 0x04;
 14565  00C6B6  8425               	bsf	printf@flag,2,c
 14566                           
 14567                           ;doprnt.c: 581: f++;
 14568  00C6B8  4A0D               	infsnz	printf@f,f,c
 14569  00C6BA  2A0E               	incf	printf@f+1,f,c
 14570  00C6BC                     l1294:
 14571  00C6BC  C00D  FFF6         	movff	printf@f,tblptrl
 14572  00C6C0  C00E  FFF7         	movff	printf@f+1,tblptrh
 14573  00C6C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14574  00C6C4  6AF8               	clrf	tblptru,c
 14575  00C6C6                     	endif
 14576  00C6C6                     	if	0	;tblptru may be non-zero
 14577  00C6C6                     	endif
 14578  00C6C6  0008               	tblrd		*
 14579  00C6C8  50F5               	movf	tablat,w,c
 14580                           
 14581                           ; Switch size 1, requested type "space"
 14582                           ; Number of cases is 1, Range of values is 48 to 48
 14583                           ; switch strategies available:
 14584                           ; Name         Instructions Cycles
 14585                           ; simple_byte            4     3 (average)
 14586                           ;	Chosen strategy is simple_byte
 14587  00C6CA  0A30               	xorlw	48	; case 48
 14588  00C6CC  B4D8               	btfsc	status,2,c
 14589  00C6CE  D7F3               	goto	l1295
 14590                           
 14591                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14592                           
 14593                           ;doprnt.c: 586: }
 14594                           
 14595                           ;doprnt.c: 585: break;
 14596  00C6D0  C00D  FFF6         	movff	printf@f,tblptrl
 14597  00C6D4  C00E  FFF7         	movff	printf@f+1,tblptrh
 14598  00C6D8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14599  00C6D8  6AF8               	clrf	tblptru,c
 14600  00C6DA                     	endif
 14601  00C6DA                     	if	0	;tblptru may be non-zero
 14602  00C6DA                     	endif
 14603  00C6DA  0008               	tblrd		*
 14604  00C6DC  50F5               	movf	tablat,w,c
 14605  00C6DE  ECFA  F056         	call	_isdigit
 14606  00C6E2  A0D8               	btfss	status,0,c
 14607  00C6E4  D092               	goto	l1302
 14608                           
 14609                           ;doprnt.c: 598: width = 0;
 14610  00C6E6  0E00               	movlw	0
 14611  00C6E8  6E27               	movwf	printf@width+1,c
 14612  00C6EA  0E00               	movlw	0
 14613  00C6EC  6E26               	movwf	printf@width,c
 14614  00C6EE                     
 14615                           ;doprnt.c: 600: width *= 10;
 14616  00C6EE  C026  F001         	movff	printf@width,___wmul@multiplier
 14617  00C6F2  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 14618  00C6F6  0E00               	movlw	0
 14619  00C6F8  6E04               	movwf	___wmul@multiplicand+1,c
 14620  00C6FA  0E0A               	movlw	10
 14621  00C6FC  6E03               	movwf	___wmul@multiplicand,c
 14622  00C6FE  EC2E  F057         	call	___wmul	;wreg free
 14623  00C702  C001  F026         	movff	?___wmul,printf@width
 14624  00C706  C002  F027         	movff	?___wmul+1,printf@width+1
 14625                           
 14626                           ;doprnt.c: 601: width += *f++ - '0';
 14627  00C70A  0ED0               	movlw	208
 14628  00C70C  6E17               	movwf	??_printf& (0+255),c
 14629  00C70E  0EFF               	movlw	255
 14630  00C710  6E18               	movwf	(??_printf+1)& (0+255),c
 14631  00C712  C00D  FFF6         	movff	printf@f,tblptrl
 14632  00C716  C00E  FFF7         	movff	printf@f+1,tblptrh
 14633  00C71A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14634  00C71A  6AF8               	clrf	tblptru,c
 14635  00C71C                     	endif
 14636  00C71C                     	if	0	;tblptru may be non-zero
 14637  00C71C                     	endif
 14638  00C71C  0008               	tblrd		*
 14639  00C71E  50F5               	movf	tablat,w,c
 14640  00C720  6E19               	movwf	(??_printf+2)& (0+255),c
 14641  00C722  6A1A               	clrf	(??_printf+3)& (0+255),c
 14642  00C724  5017               	movf	??_printf,w,c
 14643  00C726  2619               	addwf	??_printf+2,f,c
 14644  00C728  5018               	movf	??_printf+1,w,c
 14645  00C72A  221A               	addwfc	??_printf+3,f,c
 14646  00C72C  5019               	movf	??_printf+2,w,c
 14647  00C72E  2626               	addwf	printf@width,f,c
 14648  00C730  501A               	movf	??_printf+3,w,c
 14649  00C732  2227               	addwfc	printf@width+1,f,c
 14650  00C734  4A0D               	infsnz	printf@f,f,c
 14651  00C736  2A0E               	incf	printf@f+1,f,c
 14652                           
 14653                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14654  00C738  C00D  FFF6         	movff	printf@f,tblptrl
 14655  00C73C  C00E  FFF7         	movff	printf@f+1,tblptrh
 14656  00C740                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14657  00C740  6AF8               	clrf	tblptru,c
 14658  00C742                     	endif
 14659  00C742                     	if	0	;tblptru may be non-zero
 14660  00C742                     	endif
 14661  00C742  0008               	tblrd		*
 14662  00C744  50F5               	movf	tablat,w,c
 14663  00C746  ECFA  F056         	call	_isdigit
 14664  00C74A  A0D8               	btfss	status,0,c
 14665  00C74C  D05E               	goto	l1302
 14666  00C74E  D7CF               	goto	l1300
 14667  00C750                     
 14668                           ;doprnt.c: 721: flag |= 0x80;
 14669  00C750  8E25               	bsf	printf@flag,7,c
 14670                           
 14671                           ;doprnt.c: 723: break;
 14672  00C752  D076               	goto	l1307
 14673  00C754                     
 14674                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14675  00C754  C01F  FFD9         	movff	printf@ap,fsr2l
 14676  00C758  C020  FFDA         	movff	printf@ap+1,fsr2h
 14677  00C75C  CFDE F01D          	movff	postinc2,printf@cp
 14678  00C760  CFDD F01E          	movff	postdec2,printf@cp+1
 14679  00C764  0E02               	movlw	2
 14680  00C766  261F               	addwf	printf@ap,f,c
 14681  00C768  0E00               	movlw	0
 14682  00C76A  2220               	addwfc	printf@ap+1,f,c
 14683                           
 14684                           ;doprnt.c: 740: if(!cp)
 14685  00C76C  501D               	movf	printf@cp,w,c
 14686  00C76E  101E               	iorwf	printf@cp+1,w,c
 14687  00C770  A4D8               	btfss	status,2,c
 14688  00C772  D004               	goto	l1310
 14689                           
 14690                           ;doprnt.c: 741: cp = "(null)";
 14691  00C774  0EA4               	movlw	low STR_113
 14692  00C776  6E1D               	movwf	printf@cp,c
 14693  00C778  0EFC               	movlw	high STR_113
 14694  00C77A  6E1E               	movwf	printf@cp+1,c
 14695  00C77C                     l1310:
 14696                           
 14697                           ;doprnt.c: 745: len = 0;
 14698  00C77C  0E00               	movlw	0
 14699  00C77E  6E22               	movwf	printf@len+1,c
 14700  00C780  0E00               	movlw	0
 14701  00C782  6E21               	movwf	printf@len,c
 14702                           
 14703                           ;doprnt.c: 746: while(cp[len])
 14704  00C784  D002               	goto	l1311
 14705  00C786                     
 14706                           ;doprnt.c: 747: len++;
 14707  00C786  4A21               	infsnz	printf@len,f,c
 14708  00C788  2A22               	incf	printf@len+1,f,c
 14709  00C78A                     l1311:
 14710  00C78A  5021               	movf	printf@len,w,c
 14711  00C78C  241D               	addwf	printf@cp,w,c
 14712  00C78E  6E17               	movwf	??_printf& (0+255),c
 14713  00C790  5022               	movf	printf@len+1,w,c
 14714  00C792  201E               	addwfc	printf@cp+1,w,c
 14715  00C794  6E18               	movwf	(??_printf+1)& (0+255),c
 14716  00C796  C017  FFF6         	movff	??_printf,tblptrl
 14717  00C79A  C018  FFF7         	movff	??_printf+1,tblptrh
 14718  00C79E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14719  00C79E  6AF8               	clrf	tblptru,c
 14720  00C7A0                     	endif
 14721  00C7A0                     	if	0	;tblptru may be non-zero
 14722  00C7A0                     	endif
 14723  00C7A0  0008               	tblrd		*
 14724  00C7A2  50F5               	movf	tablat,w,c
 14725  00C7A4  0900               	iorlw	0
 14726  00C7A6  A4D8               	btfss	status,2,c
 14727  00C7A8  D7EE               	goto	l1312
 14728                           
 14729                           ;doprnt.c: 757: if(width > len)
 14730  00C7AA  5026               	movf	printf@width,w,c
 14731  00C7AC  5C21               	subwf	printf@len,w,c
 14732  00C7AE  5027               	movf	printf@width+1,w,c
 14733  00C7B0  5822               	subwfb	printf@len+1,w,c
 14734  00C7B2  B0D8               	btfsc	status,0,c
 14735  00C7B4  D005               	goto	l1314
 14736                           
 14737                           ;doprnt.c: 758: width -= len;
 14738  00C7B6  5021               	movf	printf@len,w,c
 14739  00C7B8  5E26               	subwf	printf@width,f,c
 14740  00C7BA  5022               	movf	printf@len+1,w,c
 14741  00C7BC  5A27               	subwfb	printf@width+1,f,c
 14742  00C7BE  D008               	goto	l1316
 14743  00C7C0                     l1314:
 14744                           
 14745                           ;doprnt.c: 759: else
 14746                           ;doprnt.c: 760: width = 0;
 14747  00C7C0  0E00               	movlw	0
 14748  00C7C2  6E27               	movwf	printf@width+1,c
 14749  00C7C4  0E00               	movlw	0
 14750  00C7C6  6E26               	movwf	printf@width,c
 14751                           
 14752                           ;doprnt.c: 764: while(width--)
 14753  00C7C8  D003               	goto	l1316
 14754  00C7CA                     l5846:
 14755                           
 14756                           ;doprnt.c: 765: (putch(' ') );
 14757  00C7CA  0E20               	movlw	32
 14758  00C7CC  ECF0  F056         	call	_putch
 14759  00C7D0                     l1316:
 14760  00C7D0  0626               	decf	printf@width,f,c
 14761  00C7D2  A0D8               	btfss	status,0,c
 14762  00C7D4  0627               	decf	printf@width+1,f,c
 14763  00C7D6  2826               	incf	printf@width,w,c
 14764  00C7D8  E1F8               	bnz	l5846
 14765  00C7DA  2827               	incf	printf@width+1,w,c
 14766  00C7DC  B4D8               	btfsc	status,2,c
 14767  00C7DE  D00C               	goto	l1319
 14768  00C7E0  D7F4               	goto	l1317
 14769  00C7E2                     l5850:
 14770                           
 14771                           ;doprnt.c: 768: (putch(*cp++) );
 14772  00C7E2  C01D  FFF6         	movff	printf@cp,tblptrl
 14773  00C7E6  C01E  FFF7         	movff	printf@cp+1,tblptrh
 14774  00C7EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14775  00C7EA  6AF8               	clrf	tblptru,c
 14776  00C7EC                     	endif
 14777  00C7EC                     	if	0	;tblptru may be non-zero
 14778  00C7EC                     	endif
 14779  00C7EC  0008               	tblrd		*
 14780  00C7EE  50F5               	movf	tablat,w,c
 14781  00C7F0  ECF0  F056         	call	_putch
 14782  00C7F4  4A1D               	infsnz	printf@cp,f,c
 14783  00C7F6  2A1E               	incf	printf@cp+1,f,c
 14784  00C7F8                     l1319:
 14785  00C7F8  0621               	decf	printf@len,f,c
 14786  00C7FA  A0D8               	btfss	status,0,c
 14787  00C7FC  0622               	decf	printf@len+1,f,c
 14788  00C7FE  2821               	incf	printf@len,w,c
 14789  00C800  E1F0               	bnz	l5850
 14790  00C802  2822               	incf	printf@len+1,w,c
 14791  00C804  B4D8               	btfsc	status,2,c
 14792  00C806  D12E               	goto	u6190
 14793  00C808  D7EC               	goto	l1320
 14794  00C80A                     l1302:
 14795  00C80A  C00D  FFF6         	movff	printf@f,tblptrl
 14796  00C80E  C00E  FFF7         	movff	printf@f+1,tblptrh
 14797  00C812  4A0D               	infsnz	printf@f,f,c
 14798  00C814  2A0E               	incf	printf@f+1,f,c
 14799  00C816                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14800  00C816  6AF8               	clrf	tblptru,c
 14801  00C818                     	endif
 14802  00C818                     	if	0	;tblptru may be non-zero
 14803  00C818                     	endif
 14804  00C818  0008               	tblrd		*
 14805  00C81A  CFF5 F028          	movff	tablat,printf@c
 14806  00C81E  5028               	movf	printf@c,w,c
 14807                           
 14808                           ; Switch size 1, requested type "space"
 14809                           ; Number of cases is 5, Range of values is 0 to 120
 14810                           ; switch strategies available:
 14811                           ; Name         Instructions Cycles
 14812                           ; simple_byte           16     9 (average)
 14813                           ;	Chosen strategy is simple_byte
 14814  00C820  0A00               	xorlw	0	; case 0
 14815  00C822  B4D8               	btfsc	status,2,c
 14816  00C824  0012               	return	
 14817  00C826  0A64               	xorlw	100	; case 100
 14818  00C828  B4D8               	btfsc	status,2,c
 14819  00C82A  D00A               	goto	l1307
 14820  00C82C  0A0D               	xorlw	13	; case 105
 14821  00C82E  B4D8               	btfsc	status,2,c
 14822  00C830  D007               	goto	l1307
 14823  00C832  0A1A               	xorlw	26	; case 115
 14824  00C834  B4D8               	btfsc	status,2,c
 14825  00C836  D78E               	goto	l1309
 14826  00C838  0A0B               	xorlw	11	; case 120
 14827  00C83A  B4D8               	btfsc	status,2,c
 14828  00C83C  D789               	goto	l1308
 14829  00C83E  D112               	goto	u6190
 14830  00C840                     l1307:
 14831                           
 14832                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14833  00C840  BE25               	btfsc	printf@flag,7,c
 14834  00C842  D015               	goto	l1323
 14835                           
 14836                           ;doprnt.c: 1253: {
 14837                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14838  00C844  C01F  FFD9         	movff	printf@ap,fsr2l
 14839  00C848  C020  FFDA         	movff	printf@ap+1,fsr2h
 14840  00C84C  CFDE F023          	movff	postinc2,printf@val
 14841  00C850  CFDD F024          	movff	postdec2,printf@val+1
 14842  00C854  0E02               	movlw	2
 14843  00C856  261F               	addwf	printf@ap,f,c
 14844  00C858  0E00               	movlw	0
 14845  00C85A  2220               	addwfc	printf@ap+1,f,c
 14846                           
 14847                           ;doprnt.c: 1261: if((int)val < 0) {
 14848  00C85C  AE24               	btfss	printf@val+1,7,c
 14849  00C85E  D04A               	goto	l1326
 14850                           
 14851                           ;doprnt.c: 1262: flag |= 0x03;
 14852  00C860  0E03               	movlw	3
 14853  00C862  1225               	iorwf	printf@flag,f,c
 14854                           
 14855                           ;doprnt.c: 1263: val = -val;
 14856  00C864  6C23               	negf	printf@val,c
 14857  00C866  1E24               	comf	printf@val+1,f,c
 14858  00C868  B0D8               	btfsc	status,0,c
 14859  00C86A  2A24               	incf	printf@val+1,f,c
 14860                           
 14861                           ;doprnt.c: 1264: }
 14862                           ;doprnt.c: 1266: }
 14863  00C86C  D043               	goto	l1326
 14864  00C86E                     l1323:
 14865                           
 14866                           ;doprnt.c: 1268: else
 14867                           ;doprnt.c: 1273: {
 14868                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14869  00C86E  C01F  FFD9         	movff	printf@ap,fsr2l
 14870  00C872  C020  FFDA         	movff	printf@ap+1,fsr2h
 14871  00C876  CFDE F023          	movff	postinc2,printf@val
 14872  00C87A  CFDD F024          	movff	postdec2,printf@val+1
 14873  00C87E  0E02               	movlw	2
 14874  00C880  261F               	addwf	printf@ap,f,c
 14875  00C882  0E00               	movlw	0
 14876  00C884  2220               	addwfc	printf@ap+1,f,c
 14877                           
 14878                           ;doprnt.c: 1287: }
 14879                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14880  00C886  D036               	goto	l1326
 14881  00C888                     
 14882                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14883  00C888  0E01               	movlw	1
 14884  00C88A  6E28               	movwf	printf@c,c
 14885  00C88C                     l5876:
 14886  00C88C  0E05               	movlw	5
 14887  00C88E  1828               	xorwf	printf@c,w,c
 14888  00C890  B4D8               	btfsc	status,2,c
 14889  00C892  D038               	goto	l1331
 14890                           
 14891                           ;doprnt.c: 1306: if(val < dpowers[c])
 14892  00C894  5028               	movf	printf@c,w,c
 14893  00C896  0D02               	mullw	2
 14894  00C898  0E95               	movlw	low _dpowers
 14895  00C89A  24F3               	addwf	prodl,w,c
 14896  00C89C  6EF6               	movwf	tblptrl,c
 14897  00C89E  0EF9               	movlw	high _dpowers
 14898  00C8A0  20F4               	addwfc	prodh,w,c
 14899  00C8A2  6EF7               	movwf	tblptrh,c
 14900  00C8A4                     	if	1	;There are 3 active tblptr bytes
 14901  00C8A4  6AF8               	clrf	tblptru,c
 14902  00C8A6  0E00               	movlw	low (__mediumconst shr (0+16))
 14903  00C8A8  22F8               	addwfc	tblptru,f,c
 14904  00C8AA                     	endif
 14905  00C8AA  0009               	tblrd		*+
 14906  00C8AC  50F5               	movf	tablat,w,c
 14907  00C8AE  5C23               	subwf	printf@val,w,c
 14908  00C8B0  0009               	tblrd		*+
 14909  00C8B2  50F5               	movf	tablat,w,c
 14910  00C8B4  5824               	subwfb	printf@val+1,w,c
 14911  00C8B6  A0D8               	btfss	status,0,c
 14912  00C8B8  D025               	goto	l1331
 14913                           
 14914                           ;doprnt.c: 1307: break;
 14915  00C8BA  2A28               	incf	printf@c,f,c
 14916  00C8BC  D7E7               	goto	l5876
 14917  00C8BE                     
 14918                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14919  00C8BE  0E01               	movlw	1
 14920  00C8C0  6E28               	movwf	printf@c,c
 14921  00C8C2                     l5890:
 14922  00C8C2  0E04               	movlw	4
 14923  00C8C4  1828               	xorwf	printf@c,w,c
 14924  00C8C6  B4D8               	btfsc	status,2,c
 14925  00C8C8  D01D               	goto	l1331
 14926                           
 14927                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14928  00C8CA  5028               	movf	printf@c,w,c
 14929  00C8CC  0D02               	mullw	2
 14930  00C8CE  0E9F               	movlw	low _hexpowers
 14931  00C8D0  24F3               	addwf	prodl,w,c
 14932  00C8D2  6EF6               	movwf	tblptrl,c
 14933  00C8D4  0EF9               	movlw	high _hexpowers
 14934  00C8D6  20F4               	addwfc	prodh,w,c
 14935  00C8D8  6EF7               	movwf	tblptrh,c
 14936  00C8DA                     	if	1	;There are 3 active tblptr bytes
 14937  00C8DA  6AF8               	clrf	tblptru,c
 14938  00C8DC  0E00               	movlw	low (__mediumconst shr (0+16))
 14939  00C8DE  22F8               	addwfc	tblptru,f,c
 14940  00C8E0                     	endif
 14941  00C8E0  0009               	tblrd		*+
 14942  00C8E2  50F5               	movf	tablat,w,c
 14943  00C8E4  5C23               	subwf	printf@val,w,c
 14944  00C8E6  0009               	tblrd		*+
 14945  00C8E8  50F5               	movf	tablat,w,c
 14946  00C8EA  5824               	subwfb	printf@val+1,w,c
 14947  00C8EC  A0D8               	btfss	status,0,c
 14948  00C8EE  D00A               	goto	l1331
 14949                           
 14950                           ;doprnt.c: 1318: break;
 14951  00C8F0  2A28               	incf	printf@c,f,c
 14952  00C8F2  D7E7               	goto	l5890
 14953  00C8F4                     l1326:
 14954  00C8F4  5025               	movf	printf@flag,w,c
 14955  00C8F6  0B80               	andlw	128
 14956                           
 14957                           ; Switch size 1, requested type "space"
 14958                           ; Number of cases is 2, Range of values is 0 to 128
 14959                           ; switch strategies available:
 14960                           ; Name         Instructions Cycles
 14961                           ; simple_byte            7     4 (average)
 14962                           ;	Chosen strategy is simple_byte
 14963  00C8F8  0A00               	xorlw	0	; case 0
 14964  00C8FA  B4D8               	btfsc	status,2,c
 14965  00C8FC  D7C5               	goto	l1327
 14966  00C8FE  0A80               	xorlw	128	; case 128
 14967  00C900  B4D8               	btfsc	status,2,c
 14968  00C902  D7DD               	goto	l1332
 14969  00C904                     l1331:
 14970                           
 14971                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14972  00C904  5026               	movf	printf@width,w,c
 14973  00C906  1027               	iorwf	printf@width+1,w,c
 14974  00C908  B4D8               	btfsc	status,2,c
 14975  00C90A  D009               	goto	l1336
 14976  00C90C  C025  F017         	movff	printf@flag,??_printf
 14977  00C910  0E03               	movlw	3
 14978  00C912  1617               	andwf	??_printf,f,c
 14979  00C914  B4D8               	btfsc	status,2,c
 14980  00C916  D003               	goto	l1336
 14981                           
 14982                           ;doprnt.c: 1346: width--;
 14983  00C918  0626               	decf	printf@width,f,c
 14984  00C91A  A0D8               	btfss	status,0,c
 14985  00C91C  0627               	decf	printf@width+1,f,c
 14986  00C91E                     l1336:
 14987                           
 14988                           ;doprnt.c: 1381: if(width > c)
 14989  00C91E  0E80               	movlw	128
 14990  00C920  BE28               	btfsc	printf@c,7,c
 14991  00C922  0E7F               	movlw	127
 14992  00C924  6E17               	movwf	??_printf& (0+255),c
 14993  00C926  5026               	movf	printf@width,w,c
 14994  00C928  5C28               	subwf	printf@c,w,c
 14995  00C92A  5027               	movf	printf@width+1,w,c
 14996  00C92C  0A80               	xorlw	128
 14997  00C92E  5817               	subwfb	??_printf& (0+255),w,c
 14998  00C930  B0D8               	btfsc	status,0,c
 14999  00C932  D007               	goto	l1337
 15000                           
 15001                           ;doprnt.c: 1382: width -= c;
 15002  00C934  5028               	movf	printf@c,w,c
 15003  00C936  5E26               	subwf	printf@width,f,c
 15004  00C938  0E00               	movlw	0
 15005  00C93A  BE28               	btfsc	printf@c,7,c
 15006  00C93C  0EFF               	movlw	255
 15007  00C93E  5A27               	subwfb	printf@width+1,f,c
 15008  00C940  D004               	goto	l1338
 15009  00C942                     l1337:
 15010                           
 15011                           ;doprnt.c: 1383: else
 15012                           ;doprnt.c: 1384: width = 0;
 15013  00C942  0E00               	movlw	0
 15014  00C944  6E27               	movwf	printf@width+1,c
 15015  00C946  0E00               	movlw	0
 15016  00C948  6E26               	movwf	printf@width,c
 15017  00C94A                     l1338:
 15018                           
 15019                           ;doprnt.c: 1387: if(flag & 0x04) {
 15020  00C94A  A425               	btfss	printf@flag,2,c
 15021  00C94C  D014               	goto	l1339
 15022                           
 15023                           ;doprnt.c: 1392: if(flag & 0x03)
 15024  00C94E  C025  F017         	movff	printf@flag,??_printf
 15025  00C952  0E03               	movlw	3
 15026  00C954  1617               	andwf	??_printf,f,c
 15027  00C956  B4D8               	btfsc	status,2,c
 15028  00C958  D003               	goto	l1340
 15029                           
 15030                           ;doprnt.c: 1393: (putch('-') );
 15031  00C95A  0E2D               	movlw	45
 15032  00C95C  ECF0  F056         	call	_putch
 15033  00C960                     l1340:
 15034                           
 15035                           ;doprnt.c: 1415: if(width)
 15036  00C960  5026               	movf	printf@width,w,c
 15037  00C962  1027               	iorwf	printf@width+1,w,c
 15038  00C964  B4D8               	btfsc	status,2,c
 15039  00C966  D01E               	goto	l1348
 15040                           
 15041                           ;doprnt.c: 1417: (putch('0') );
 15042                           
 15043                           ;doprnt.c: 1416: do
 15044  00C968  0E30               	movlw	48
 15045  00C96A  ECF0  F056         	call	_putch
 15046                           
 15047                           ;doprnt.c: 1418: while(--width);
 15048  00C96E  0626               	decf	printf@width,f,c
 15049  00C970  A0D8               	btfss	status,0,c
 15050  00C972  0627               	decf	printf@width+1,f,c
 15051  00C974  D7F5               	goto	l1340
 15052  00C976                     l1339:
 15053                           
 15054                           ;doprnt.c: 1422: {
 15055                           ;doprnt.c: 1424: if(width
 15056                           ;doprnt.c: 1428: )
 15057  00C976  5026               	movf	printf@width,w,c
 15058  00C978  1027               	iorwf	printf@width+1,w,c
 15059  00C97A  B4D8               	btfsc	status,2,c
 15060  00C97C  D00A               	goto	u6170
 15061  00C97E                     u6160:
 15062                           
 15063                           ;doprnt.c: 1430: (putch(' ') );
 15064                           
 15065                           ;doprnt.c: 1429: do
 15066  00C97E  0E20               	movlw	32
 15067  00C980  ECF0  F056         	call	_putch
 15068                           
 15069                           ;doprnt.c: 1431: while(--width);
 15070  00C984  0626               	decf	printf@width,f,c
 15071  00C986  A0D8               	btfss	status,0,c
 15072  00C988  0627               	decf	printf@width+1,f,c
 15073  00C98A  5026               	movf	printf@width,w,c
 15074  00C98C  1027               	iorwf	printf@width+1,w,c
 15075  00C98E  A4D8               	btfss	status,2,c
 15076  00C990  D7F6               	goto	u6160
 15077  00C992                     u6170:
 15078                           
 15079                           ;doprnt.c: 1438: if(flag & 0x03)
 15080  00C992  C025  F017         	movff	printf@flag,??_printf
 15081  00C996  0E03               	movlw	3
 15082  00C998  1617               	andwf	??_printf,f,c
 15083  00C99A  B4D8               	btfsc	status,2,c
 15084  00C99C  D003               	goto	l1348
 15085                           
 15086                           ;doprnt.c: 1439: (putch('-') );
 15087  00C99E  0E2D               	movlw	45
 15088  00C9A0  ECF0  F056         	call	_putch
 15089  00C9A4                     l1348:
 15090                           
 15091                           ;doprnt.c: 1469: }
 15092                           ;doprnt.c: 1472: prec = c;
 15093  00C9A4  C028  F01C         	movff	printf@c,printf@prec
 15094                           
 15095                           ;doprnt.c: 1474: while(prec--) {
 15096  00C9A8  D059               	goto	l1349
 15097  00C9AA                     
 15098                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15099  00C9AA  501C               	movf	printf@prec,w,c
 15100  00C9AC  0D02               	mullw	2
 15101  00C9AE  0E95               	movlw	low _dpowers
 15102  00C9B0  24F3               	addwf	prodl,w,c
 15103  00C9B2  6EF6               	movwf	tblptrl,c
 15104  00C9B4  0EF9               	movlw	high _dpowers
 15105  00C9B6  20F4               	addwfc	prodh,w,c
 15106  00C9B8  6EF7               	movwf	tblptrh,c
 15107  00C9BA                     	if	1	;There are 3 active tblptr bytes
 15108  00C9BA  6AF8               	clrf	tblptru,c
 15109  00C9BC  0E00               	movlw	low (__mediumconst shr (0+16))
 15110  00C9BE  22F8               	addwfc	tblptru,f,c
 15111  00C9C0                     	endif
 15112  00C9C0  0009               	tblrd		*+
 15113  00C9C2  CFF5 F003          	movff	tablat,___lwdiv@divisor
 15114  00C9C6  000A               	tblrd		*-
 15115  00C9C8  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 15116  00C9CC  C023  F001         	movff	printf@val,___lwdiv@dividend
 15117  00C9D0  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 15118  00C9D4  ECBC  F057         	call	___lwdiv	;wreg free
 15119  00C9D8  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 15120  00C9DC  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 15121  00C9E0  0E00               	movlw	0
 15122  00C9E2  6E0B               	movwf	___lwmod@divisor+1,c
 15123  00C9E4  0E0A               	movlw	10
 15124  00C9E6  6E0A               	movwf	___lwmod@divisor,c
 15125  00C9E8  EC75  F057         	call	___lwmod	;wreg free
 15126  00C9EC  5008               	movf	?___lwmod,w,c
 15127  00C9EE  0F30               	addlw	48
 15128  00C9F0  6E28               	movwf	printf@c,c
 15129                           
 15130                           ;doprnt.c: 1491: break;
 15131  00C9F2  D031               	goto	l1353
 15132  00C9F4                     
 15133                           ;doprnt.c: 1499: {
 15134                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15135  00C9F4  C023  F001         	movff	printf@val,___lwdiv@dividend
 15136  00C9F8  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 15137  00C9FC  501C               	movf	printf@prec,w,c
 15138  00C9FE  0D02               	mullw	2
 15139  00CA00  0E9F               	movlw	low _hexpowers
 15140  00CA02  24F3               	addwf	prodl,w,c
 15141  00CA04  6EF6               	movwf	tblptrl,c
 15142  00CA06  0EF9               	movlw	high _hexpowers
 15143  00CA08  20F4               	addwfc	prodh,w,c
 15144  00CA0A  6EF7               	movwf	tblptrh,c
 15145  00CA0C                     	if	1	;There are 3 active tblptr bytes
 15146  00CA0C  6AF8               	clrf	tblptru,c
 15147  00CA0E  0E00               	movlw	low (__mediumconst shr (0+16))
 15148  00CA10  22F8               	addwfc	tblptru,f,c
 15149  00CA12                     	endif
 15150  00CA12  0009               	tblrd		*+
 15151  00CA14  CFF5 F003          	movff	tablat,___lwdiv@divisor
 15152  00CA18  000A               	tblrd		*-
 15153  00CA1A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 15154  00CA1E  ECBC  F057         	call	___lwdiv	;wreg free
 15155  00CA22  5001               	movf	?___lwdiv,w,c
 15156  00CA24  0B0F               	andlw	15
 15157  00CA26  6E1B               	movwf	printf@idx,c
 15158                           
 15159                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15160  00CA28  501B               	movf	printf@idx,w,c
 15161  00CA2A  0D01               	mullw	1
 15162  00CA2C  0EC6               	movlw	low STR_114
 15163  00CA2E  24F3               	addwf	prodl,w,c
 15164  00CA30  6EF6               	movwf	tblptrl,c
 15165  00CA32  0EF9               	movlw	high STR_114
 15166  00CA34  20F4               	addwfc	prodh,w,c
 15167  00CA36  6EF7               	movwf	tblptrh,c
 15168  00CA38                     	if	1	;There are 3 active tblptr bytes
 15169  00CA38  6AF8               	clrf	tblptru,c
 15170  00CA3A  0E00               	movlw	low (__mediumconst shr (0+16))
 15171  00CA3C  22F8               	addwfc	tblptru,f,c
 15172  00CA3E                     	endif
 15173  00CA3E  0008               	tblrd		*
 15174  00CA40  CFF5 F028          	movff	tablat,printf@c
 15175                           
 15176                           ;doprnt.c: 1523: }
 15177                           
 15178                           ;doprnt.c: 1508: }
 15179                           ;doprnt.c: 1510: break;
 15180  00CA44  D008               	goto	l1353
 15181  00CA46  5025               	movf	printf@flag,w,c
 15182  00CA48  0B80               	andlw	128
 15183                           
 15184                           ; Switch size 1, requested type "space"
 15185                           ; Number of cases is 2, Range of values is 0 to 128
 15186                           ; switch strategies available:
 15187                           ; Name         Instructions Cycles
 15188                           ; simple_byte            7     4 (average)
 15189                           ;	Chosen strategy is simple_byte
 15190  00CA4A  0A00               	xorlw	0	; case 0
 15191  00CA4C  B4D8               	btfsc	status,2,c
 15192  00CA4E  D7AD               	goto	l1352
 15193  00CA50  0A80               	xorlw	128	; case 128
 15194  00CA52  B4D8               	btfsc	status,2,c
 15195  00CA54  D7CF               	goto	l1354
 15196  00CA56                     l1353:
 15197                           
 15198                           ;doprnt.c: 1524: (putch(c) );
 15199  00CA56  5028               	movf	printf@c,w,c
 15200  00CA58  ECF0  F056         	call	_putch
 15201  00CA5C                     l1349:
 15202  00CA5C  061C               	decf	printf@prec,f,c
 15203  00CA5E  281C               	incf	printf@prec,w,c
 15204  00CA60  A4D8               	btfss	status,2,c
 15205  00CA62  D7F1               	goto	l1351
 15206  00CA64                     u6190:
 15207  00CA64  C00D  FFF6         	movff	printf@f,tblptrl
 15208  00CA68  C00E  FFF7         	movff	printf@f+1,tblptrh
 15209  00CA6C  4A0D               	infsnz	printf@f,f,c
 15210  00CA6E  2A0E               	incf	printf@f+1,f,c
 15211  00CA70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15212  00CA70  6AF8               	clrf	tblptru,c
 15213  00CA72                     	endif
 15214  00CA72                     	if	0	;tblptru may be non-zero
 15215  00CA72                     	endif
 15216  00CA72  0008               	tblrd		*
 15217  00CA74  CFF5 F028          	movff	tablat,printf@c
 15218  00CA78  5028               	movf	printf@c,w,c
 15219  00CA7A  B4D8               	btfsc	status,2,c
 15220  00CA7C  0012               	return	
 15221  00CA7E  D60C               	goto	l1291
 15222  00CA80                     __end_of_printf:
 15223                           	opt stack 0
 15224                           tblptru	equ	0xFF8
 15225                           tblptrh	equ	0xFF7
 15226                           tblptrl	equ	0xFF6
 15227                           tablat	equ	0xFF5
 15228                           prodh	equ	0xFF4
 15229                           prodl	equ	0xFF3
 15230                           postinc0	equ	0xFEE
 15231                           wreg	equ	0xFE8
 15232                           postinc1	equ	0xFE6
 15233                           postdec1	equ	0xFE5
 15234                           plusw1	equ	0xFE3
 15235                           fsr1h	equ	0xFE2
 15236                           fsr1l	equ	0xFE1
 15237                           indf2	equ	0xFDF
 15238                           postinc2	equ	0xFDE
 15239                           postdec2	equ	0xFDD
 15240                           plusw2	equ	0xFDB
 15241                           fsr2h	equ	0xFDA
 15242                           fsr2l	equ	0xFD9
 15243                           status	equ	0xFD8
 15244                           
 15245 ;; *************** function _putch *****************
 15246 ;; Defined at:
 15247 ;;		line 72 in file "LCD.c"
 15248 ;; Parameters:    Size  Location     Type
 15249 ;;  data            1    wreg     unsigned char 
 15250 ;; Auto vars:     Size  Location     Type
 15251 ;;  data            1    2[COMRAM] unsigned char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  1    wreg      void 
 15254 ;; Registers used:
 15255 ;;		wreg, status,2, status,0, cstack
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;Total ram usage:        1 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; Hardware stack levels required when called:    1
 15268 ;; This function calls:
 15269 ;;		_lcdNibble
 15270 ;; This function is called by:
 15271 ;;		_viewLogs
 15272 ;;		_food_press
 15273 ;;		_diet_press
 15274 ;;		_which_drawer
 15275 ;;		_printf
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text27
 15280  00ADE0                     __ptext27:
 15281                           	opt stack 0
 15282  00ADE0                     _putch:
 15283                           	opt stack 27
 15284                           
 15285                           ;incstack = 0
 15286                           ;putch@data stored from wreg
 15287  00ADE0  6E03               	movwf	putch@data,c
 15288                           
 15289                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 15290  00ADE2  848C               	bsf	3980,2,c	;volatile
 15291                           
 15292                           ;LCD.c: 81: lcdNibble(data);
 15293  00ADE4  5003               	movf	putch@data,w,c
 15294  00ADE6  EC77  F058         	call	_lcdNibble
 15295                           
 15296                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 15297  00ADEA  0EC8               	movlw	200
 15298  00ADEC                     u12467:
 15299  00ADEC  D000               	nop2	
 15300  00ADEE  2EE8               	decfsz	wreg,f,c
 15301  00ADF0  D7FD               	bra	u12467
 15302  00ADF2  0012               	return		;funcret
 15303  00ADF4                     __end_of_putch:
 15304                           	opt stack 0
 15305                           tblptru	equ	0xFF8
 15306                           tblptrh	equ	0xFF7
 15307                           tblptrl	equ	0xFF6
 15308                           tablat	equ	0xFF5
 15309                           prodh	equ	0xFF4
 15310                           prodl	equ	0xFF3
 15311                           postinc0	equ	0xFEE
 15312                           wreg	equ	0xFE8
 15313                           postinc1	equ	0xFE6
 15314                           postdec1	equ	0xFE5
 15315                           plusw1	equ	0xFE3
 15316                           fsr1h	equ	0xFE2
 15317                           fsr1l	equ	0xFE1
 15318                           indf2	equ	0xFDF
 15319                           postinc2	equ	0xFDE
 15320                           postdec2	equ	0xFDD
 15321                           plusw2	equ	0xFDB
 15322                           fsr2h	equ	0xFDA
 15323                           fsr2l	equ	0xFD9
 15324                           status	equ	0xFD8
 15325                           
 15326 ;; *************** function _isdigit *****************
 15327 ;; Defined at:
 15328 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 15329 ;; Parameters:    Size  Location     Type
 15330 ;;  c               1    wreg     unsigned char 
 15331 ;; Auto vars:     Size  Location     Type
 15332 ;;  c               1    2[COMRAM] unsigned char 
 15333 ;; Return value:  Size  Location     Type
 15334 ;;		None               void
 15335 ;; Registers used:
 15336 ;;		wreg, status,2, status,0
 15337 ;; Tracked objects:
 15338 ;;		On entry : 0/0
 15339 ;;		On exit  : 0/0
 15340 ;;		Unchanged: 0/0
 15341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15345 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15346 ;;Total ram usage:        3 bytes
 15347 ;; Hardware stack levels used:    1
 15348 ;; This function calls:
 15349 ;;		Nothing
 15350 ;; This function is called by:
 15351 ;;		_printf
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           	psect	text28
 15356  00ADF4                     __ptext28:
 15357                           	opt stack 0
 15358  00ADF4                     _isdigit:
 15359                           	opt stack 27
 15360                           
 15361                           ;incstack = 0
 15362                           ;isdigit@c stored from wreg
 15363  00ADF4  6E03               	movwf	isdigit@c,c
 15364  00ADF6  0E00               	movlw	0
 15365  00ADF8  6E02               	movwf	_isdigit$1573,c
 15366  00ADFA  0E3A               	movlw	58
 15367  00ADFC  6003               	cpfslt	isdigit@c,c
 15368  00ADFE  D005               	goto	l1687
 15369  00AE00  0E2F               	movlw	47
 15370  00AE02  6403               	cpfsgt	isdigit@c,c
 15371  00AE04  D002               	goto	l1687
 15372  00AE06  0E01               	movlw	1
 15373  00AE08  6E02               	movwf	_isdigit$1573,c
 15374  00AE0A                     l1687:
 15375  00AE0A  C002  F001         	movff	_isdigit$1573,??_isdigit
 15376  00AE0E  3001               	rrcf	??_isdigit,w,c
 15377  00AE10  0012               	return	
 15378  00AE12                     __end_of_isdigit:
 15379                           	opt stack 0
 15380                           tblptru	equ	0xFF8
 15381                           tblptrh	equ	0xFF7
 15382                           tblptrl	equ	0xFF6
 15383                           tablat	equ	0xFF5
 15384                           prodh	equ	0xFF4
 15385                           prodl	equ	0xFF3
 15386                           postinc0	equ	0xFEE
 15387                           wreg	equ	0xFE8
 15388                           postinc1	equ	0xFE6
 15389                           postdec1	equ	0xFE5
 15390                           plusw1	equ	0xFE3
 15391                           fsr1h	equ	0xFE2
 15392                           fsr1l	equ	0xFE1
 15393                           indf2	equ	0xFDF
 15394                           postinc2	equ	0xFDE
 15395                           postdec2	equ	0xFDD
 15396                           plusw2	equ	0xFDB
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function ___lwmod *****************
 15402 ;; Defined at:
 15403 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  dividend        2    7[COMRAM] unsigned int 
 15406 ;;  divisor         2    9[COMRAM] unsigned int 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  counter         1   11[COMRAM] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  2    7[COMRAM] unsigned int 
 15411 ;; Registers used:
 15412 ;;		wreg, status,2, status,0
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;Total ram usage:        5 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; This function calls:
 15425 ;;		Nothing
 15426 ;; This function is called by:
 15427 ;;		_displayLogs
 15428 ;;		_printf
 15429 ;; This function uses a non-reentrant model
 15430 ;;
 15431                           
 15432                           	psect	text29
 15433  00AEEA                     __ptext29:
 15434                           	opt stack 0
 15435  00AEEA                     ___lwmod:
 15436                           	opt stack 27
 15437                           
 15438                           ;incstack = 0
 15439  00AEEA  500A               	movf	___lwmod@divisor,w,c
 15440  00AEEC  100B               	iorwf	___lwmod@divisor+1,w,c
 15441  00AEEE  B4D8               	btfsc	status,2,c
 15442  00AEF0  D018               	goto	l1781
 15443  00AEF2  0E01               	movlw	1
 15444  00AEF4  6E0C               	movwf	___lwmod@counter,c
 15445  00AEF6  D004               	goto	l1776
 15446  00AEF8  90D8               	bcf	status,0,c
 15447  00AEFA  360A               	rlcf	___lwmod@divisor,f,c
 15448  00AEFC  360B               	rlcf	___lwmod@divisor+1,f,c
 15449  00AEFE  2A0C               	incf	___lwmod@counter,f,c
 15450  00AF00                     l1776:
 15451  00AF00  AE0B               	btfss	___lwmod@divisor+1,7,c
 15452  00AF02  D7FA               	goto	l1777
 15453  00AF04                     u5910:
 15454  00AF04  500A               	movf	___lwmod@divisor,w,c
 15455  00AF06  5C08               	subwf	___lwmod@dividend,w,c
 15456  00AF08  500B               	movf	___lwmod@divisor+1,w,c
 15457  00AF0A  5809               	subwfb	___lwmod@dividend+1,w,c
 15458  00AF0C  A0D8               	btfss	status,0,c
 15459  00AF0E  D004               	goto	l1780
 15460  00AF10  500A               	movf	___lwmod@divisor,w,c
 15461  00AF12  5E08               	subwf	___lwmod@dividend,f,c
 15462  00AF14  500B               	movf	___lwmod@divisor+1,w,c
 15463  00AF16  5A09               	subwfb	___lwmod@dividend+1,f,c
 15464  00AF18                     l1780:
 15465  00AF18  90D8               	bcf	status,0,c
 15466  00AF1A  320B               	rrcf	___lwmod@divisor+1,f,c
 15467  00AF1C  320A               	rrcf	___lwmod@divisor,f,c
 15468  00AF1E  2E0C               	decfsz	___lwmod@counter,f,c
 15469  00AF20  D7F1               	goto	u5910
 15470  00AF22                     l1781:
 15471  00AF22  C008  F008         	movff	___lwmod@dividend,?___lwmod
 15472  00AF26  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 15473  00AF2A  0012               	return		;funcret
 15474  00AF2C                     __end_of___lwmod:
 15475                           	opt stack 0
 15476                           tblptru	equ	0xFF8
 15477                           tblptrh	equ	0xFF7
 15478                           tblptrl	equ	0xFF6
 15479                           tablat	equ	0xFF5
 15480                           prodh	equ	0xFF4
 15481                           prodl	equ	0xFF3
 15482                           postinc0	equ	0xFEE
 15483                           wreg	equ	0xFE8
 15484                           postinc1	equ	0xFE6
 15485                           postdec1	equ	0xFE5
 15486                           plusw1	equ	0xFE3
 15487                           fsr1h	equ	0xFE2
 15488                           fsr1l	equ	0xFE1
 15489                           indf2	equ	0xFDF
 15490                           postinc2	equ	0xFDE
 15491                           postdec2	equ	0xFDD
 15492                           plusw2	equ	0xFDB
 15493                           fsr2h	equ	0xFDA
 15494                           fsr2l	equ	0xFD9
 15495                           status	equ	0xFD8
 15496                           
 15497 ;; *************** function ___lwdiv *****************
 15498 ;; Defined at:
 15499 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  dividend        2    0[COMRAM] unsigned int 
 15502 ;;  divisor         2    2[COMRAM] unsigned int 
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  quotient        2    4[COMRAM] unsigned int 
 15505 ;;  counter         1    6[COMRAM] unsigned char 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;                  2    0[COMRAM] unsigned int 
 15508 ;; Registers used:
 15509 ;;		wreg, status,2, status,0
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15516 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15518 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15519 ;;Total ram usage:        7 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; This function calls:
 15522 ;;		Nothing
 15523 ;; This function is called by:
 15524 ;;		_displayLogs
 15525 ;;		_printf
 15526 ;; This function uses a non-reentrant model
 15527 ;;
 15528                           
 15529                           	psect	text30
 15530  00AF78                     __ptext30:
 15531                           	opt stack 0
 15532  00AF78                     ___lwdiv:
 15533                           	opt stack 27
 15534                           
 15535                           ;incstack = 0
 15536  00AF78  0E00               	movlw	0
 15537  00AF7A  6E06               	movwf	___lwdiv@quotient+1,c
 15538  00AF7C  0E00               	movlw	0
 15539  00AF7E  6E05               	movwf	___lwdiv@quotient,c
 15540  00AF80  5003               	movf	___lwdiv@divisor,w,c
 15541  00AF82  1004               	iorwf	___lwdiv@divisor+1,w,c
 15542  00AF84  B4D8               	btfsc	status,2,c
 15543  00AF86  D01C               	goto	l1771
 15544  00AF88  0E01               	movlw	1
 15545  00AF8A  6E07               	movwf	___lwdiv@counter,c
 15546  00AF8C  D004               	goto	l1766
 15547  00AF8E  90D8               	bcf	status,0,c
 15548  00AF90  3603               	rlcf	___lwdiv@divisor,f,c
 15549  00AF92  3604               	rlcf	___lwdiv@divisor+1,f,c
 15550  00AF94  2A07               	incf	___lwdiv@counter,f,c
 15551  00AF96                     l1766:
 15552  00AF96  AE04               	btfss	___lwdiv@divisor+1,7,c
 15553  00AF98  D7FA               	goto	l1767
 15554  00AF9A                     u5880:
 15555  00AF9A  90D8               	bcf	status,0,c
 15556  00AF9C  3605               	rlcf	___lwdiv@quotient,f,c
 15557  00AF9E  3606               	rlcf	___lwdiv@quotient+1,f,c
 15558  00AFA0  5003               	movf	___lwdiv@divisor,w,c
 15559  00AFA2  5C01               	subwf	___lwdiv@dividend,w,c
 15560  00AFA4  5004               	movf	___lwdiv@divisor+1,w,c
 15561  00AFA6  5802               	subwfb	___lwdiv@dividend+1,w,c
 15562  00AFA8  A0D8               	btfss	status,0,c
 15563  00AFAA  D005               	goto	l1770
 15564  00AFAC  5003               	movf	___lwdiv@divisor,w,c
 15565  00AFAE  5E01               	subwf	___lwdiv@dividend,f,c
 15566  00AFB0  5004               	movf	___lwdiv@divisor+1,w,c
 15567  00AFB2  5A02               	subwfb	___lwdiv@dividend+1,f,c
 15568  00AFB4  8005               	bsf	___lwdiv@quotient,0,c
 15569  00AFB6                     l1770:
 15570  00AFB6  90D8               	bcf	status,0,c
 15571  00AFB8  3204               	rrcf	___lwdiv@divisor+1,f,c
 15572  00AFBA  3203               	rrcf	___lwdiv@divisor,f,c
 15573  00AFBC  2E07               	decfsz	___lwdiv@counter,f,c
 15574  00AFBE  D7ED               	goto	u5880
 15575  00AFC0                     l1771:
 15576  00AFC0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 15577  00AFC4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15578  00AFC8  0012               	return		;funcret
 15579  00AFCA                     __end_of___lwdiv:
 15580                           	opt stack 0
 15581                           tblptru	equ	0xFF8
 15582                           tblptrh	equ	0xFF7
 15583                           tblptrl	equ	0xFF6
 15584                           tablat	equ	0xFF5
 15585                           prodh	equ	0xFF4
 15586                           prodl	equ	0xFF3
 15587                           postinc0	equ	0xFEE
 15588                           wreg	equ	0xFE8
 15589                           postinc1	equ	0xFE6
 15590                           postdec1	equ	0xFE5
 15591                           plusw1	equ	0xFE3
 15592                           fsr1h	equ	0xFE2
 15593                           fsr1l	equ	0xFE1
 15594                           indf2	equ	0xFDF
 15595                           postinc2	equ	0xFDE
 15596                           postdec2	equ	0xFDD
 15597                           plusw2	equ	0xFDB
 15598                           fsr2h	equ	0xFDA
 15599                           fsr2l	equ	0xFD9
 15600                           status	equ	0xFD8
 15601                           
 15602 ;; *************** function _getUserInputs *****************
 15603 ;; Defined at:
 15604 ;;		line 25 in file "operationMode.c"
 15605 ;; Parameters:    Size  Location     Type
 15606 ;;  drawerTable     2    6[COMRAM] PTR unsigned int 
 15607 ;;		 -> mainOperation@drawerTable(16), 
 15608 ;;  dietTable       2    8[COMRAM] PTR unsigned int 
 15609 ;;		 -> mainOperation@dietTable(16), 
 15610 ;;  foodTable       2   10[COMRAM] PTR unsigned int 
 15611 ;;		 -> mainOperation@foodTable(16), 
 15612 ;; Auto vars:     Size  Location     Type
 15613 ;;  i               2   22[COMRAM] unsigned int 
 15614 ;;  data            2   20[COMRAM] unsigned int 
 15615 ;;  n               2   18[COMRAM] unsigned int 
 15616 ;;  count           2   16[COMRAM] unsigned int 
 15617 ;;  logNumber       2   14[COMRAM] unsigned int 
 15618 ;; Return value:  Size  Location     Type
 15619 ;;                  1    wreg      void 
 15620 ;; Registers used:
 15621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15622 ;; Tracked objects:
 15623 ;;		On entry : 0/0
 15624 ;;		On exit  : 0/0
 15625 ;;		Unchanged: 0/0
 15626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15628 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15630 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15631 ;;Total ram usage:       18 bytes
 15632 ;; Hardware stack levels used:    1
 15633 ;; Hardware stack levels required when called:    1
 15634 ;; This function calls:
 15635 ;;		___wmul
 15636 ;;		_readEEPROM
 15637 ;; This function is called by:
 15638 ;;		_mainOperation
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           	psect	text31
 15643  00B978                     __ptext31:
 15644                           	opt stack 0
 15645  00B978                     _getUserInputs:
 15646                           	opt stack 28
 15647                           
 15648                           ;operationMode.c: 26: unsigned int data = 0;
 15649                           
 15650                           ;incstack = 0
 15651  00B978  0E00               	movlw	0
 15652  00B97A  6E16               	movwf	getUserInputs@data+1,c
 15653  00B97C  0E00               	movlw	0
 15654  00B97E  6E15               	movwf	getUserInputs@data,c
 15655                           
 15656                           ;operationMode.c: 27: unsigned int i = 0;
 15657  00B980  0E00               	movlw	0
 15658  00B982  6E18               	movwf	getUserInputs@i+1,c
 15659  00B984  0E00               	movlw	0
 15660  00B986  6E17               	movwf	getUserInputs@i,c
 15661                           
 15662                           ;operationMode.c: 28: unsigned int logNumber = 0;
 15663  00B988  0E00               	movlw	0
 15664  00B98A  6E10               	movwf	getUserInputs@logNumber+1,c
 15665  00B98C  0E00               	movlw	0
 15666  00B98E  6E0F               	movwf	getUserInputs@logNumber,c
 15667                           
 15668                           ;operationMode.c: 29: unsigned int n = 0;
 15669  00B990  0E00               	movlw	0
 15670  00B992  6E14               	movwf	getUserInputs@n+1,c
 15671  00B994  0E00               	movlw	0
 15672  00B996  6E13               	movwf	getUserInputs@n,c
 15673                           
 15674                           ;operationMode.c: 30: unsigned int count = 0;
 15675  00B998  0E00               	movlw	0
 15676  00B99A  6E12               	movwf	getUserInputs@count+1,c
 15677  00B99C  0E00               	movlw	0
 15678  00B99E  6E11               	movwf	getUserInputs@count,c
 15679                           
 15680                           ;operationMode.c: 32: logNumber = readEEPROM(250);
 15681  00B9A0  0EFA               	movlw	250
 15682  00B9A2  ECE6  F056         	call	_readEEPROM
 15683  00B9A6  6E0D               	movwf	??_getUserInputs& (0+255),c
 15684  00B9A8  500D               	movf	??_getUserInputs,w,c
 15685  00B9AA  6E0F               	movwf	getUserInputs@logNumber,c
 15686  00B9AC  6A10               	clrf	getUserInputs@logNumber+1,c
 15687                           
 15688                           ;operationMode.c: 34: if (logNumber == 0 || logNumber == 4){
 15689  00B9AE  500F               	movf	getUserInputs@logNumber,w,c
 15690  00B9B0  1010               	iorwf	getUserInputs@logNumber+1,w,c
 15691  00B9B2  B4D8               	btfsc	status,2,c
 15692  00B9B4  D005               	goto	u7640
 15693  00B9B6  0E04               	movlw	4
 15694  00B9B8  180F               	xorwf	getUserInputs@logNumber,w,c
 15695  00B9BA  1010               	iorwf	getUserInputs@logNumber+1,w,c
 15696  00B9BC  A4D8               	btfss	status,2,c
 15697  00B9BE  D005               	goto	l116
 15698  00B9C0                     u7640:
 15699                           
 15700                           ;operationMode.c: 35: n = 0;
 15701  00B9C0  0E00               	movlw	0
 15702  00B9C2  6E14               	movwf	getUserInputs@n+1,c
 15703  00B9C4  0E00               	movlw	0
 15704  00B9C6  6E13               	movwf	getUserInputs@n,c
 15705                           
 15706                           ;operationMode.c: 36: }
 15707  00B9C8  D010               	goto	l119
 15708  00B9CA                     l116:
 15709                           
 15710                           ;operationMode.c: 37: else{
 15711                           ;operationMode.c: 38: n = (logNumber-1)*35;
 15712  00B9CA  0EFF               	movlw	255
 15713  00B9CC  240F               	addwf	getUserInputs@logNumber,w,c
 15714  00B9CE  6E01               	movwf	___wmul@multiplier,c
 15715  00B9D0  0EFF               	movlw	255
 15716  00B9D2  2010               	addwfc	getUserInputs@logNumber+1,w,c
 15717  00B9D4  6E02               	movwf	___wmul@multiplier+1,c
 15718  00B9D6  0E00               	movlw	0
 15719  00B9D8  6E04               	movwf	___wmul@multiplicand+1,c
 15720  00B9DA  0E23               	movlw	35
 15721  00B9DC  6E03               	movwf	___wmul@multiplicand,c
 15722  00B9DE  EC2E  F057         	call	___wmul	;wreg free
 15723  00B9E2  C001  F013         	movff	?___wmul,getUserInputs@n
 15724  00B9E6  C002  F014         	movff	?___wmul+1,getUserInputs@n+1
 15725  00B9EA                     l119:
 15726                           
 15727                           ;operationMode.c: 39: }
 15728                           ;operationMode.c: 41: for (i=11; i<35; i+=3){
 15729  00B9EA  0E00               	movlw	0
 15730  00B9EC  6E18               	movwf	getUserInputs@i+1,c
 15731  00B9EE  0E0B               	movlw	11
 15732  00B9F0  6E17               	movwf	getUserInputs@i,c
 15733  00B9F2                     l6610:
 15734  00B9F2  5018               	movf	getUserInputs@i+1,w,c
 15735  00B9F4  E14D               	bnz	l122
 15736  00B9F6  0E23               	movlw	35
 15737  00B9F8  5C17               	subwf	getUserInputs@i,w,c
 15738  00B9FA  B0D8               	btfsc	status,0,c
 15739  00B9FC  0012               	return	
 15740                           
 15741                           ;operationMode.c: 42: data = readEEPROM(i+n);
 15742  00B9FE  5017               	movf	getUserInputs@i,w,c
 15743  00BA00  2413               	addwf	getUserInputs@n,w,c
 15744  00BA02  ECE6  F056         	call	_readEEPROM
 15745  00BA06  6E0D               	movwf	??_getUserInputs& (0+255),c
 15746  00BA08  500D               	movf	??_getUserInputs,w,c
 15747  00BA0A  6E15               	movwf	getUserInputs@data,c
 15748  00BA0C  6A16               	clrf	getUserInputs@data+1,c
 15749                           
 15750                           ;operationMode.c: 43: drawerTable[count] = data;
 15751  00BA0E  90D8               	bcf	status,0,c
 15752  00BA10  3411               	rlcf	getUserInputs@count,w,c
 15753  00BA12  6ED9               	movwf	fsr2l,c
 15754  00BA14  3412               	rlcf	getUserInputs@count+1,w,c
 15755  00BA16  6EDA               	movwf	fsr2h,c
 15756  00BA18  5007               	movf	getUserInputs@drawerTable,w,c
 15757  00BA1A  26D9               	addwf	fsr2l,f,c
 15758  00BA1C  5008               	movf	getUserInputs@drawerTable+1,w,c
 15759  00BA1E  22DA               	addwfc	fsr2h,f,c
 15760  00BA20  C015  FFDE         	movff	getUserInputs@data,postinc2
 15761  00BA24  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 15762                           
 15763                           ;operationMode.c: 44: data = readEEPROM(i+1+n);
 15764  00BA28  5017               	movf	getUserInputs@i,w,c
 15765  00BA2A  2413               	addwf	getUserInputs@n,w,c
 15766  00BA2C  6E0D               	movwf	??_getUserInputs& (0+255),c
 15767  00BA2E  280D               	incf	??_getUserInputs,w,c
 15768  00BA30  ECE6  F056         	call	_readEEPROM
 15769  00BA34  6E0E               	movwf	(??_getUserInputs+1)& (0+255),c
 15770  00BA36  500E               	movf	??_getUserInputs+1,w,c
 15771  00BA38  6E15               	movwf	getUserInputs@data,c
 15772  00BA3A  6A16               	clrf	getUserInputs@data+1,c
 15773                           
 15774                           ;operationMode.c: 45: dietTable[count] = data;
 15775  00BA3C  90D8               	bcf	status,0,c
 15776  00BA3E  3411               	rlcf	getUserInputs@count,w,c
 15777  00BA40  6ED9               	movwf	fsr2l,c
 15778  00BA42  3412               	rlcf	getUserInputs@count+1,w,c
 15779  00BA44  6EDA               	movwf	fsr2h,c
 15780  00BA46  5009               	movf	getUserInputs@dietTable,w,c
 15781  00BA48  26D9               	addwf	fsr2l,f,c
 15782  00BA4A  500A               	movf	getUserInputs@dietTable+1,w,c
 15783  00BA4C  22DA               	addwfc	fsr2h,f,c
 15784  00BA4E  C015  FFDE         	movff	getUserInputs@data,postinc2
 15785  00BA52  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 15786                           
 15787                           ;operationMode.c: 46: data = readEEPROM(i+2+n);
 15788  00BA56  5017               	movf	getUserInputs@i,w,c
 15789  00BA58  2413               	addwf	getUserInputs@n,w,c
 15790  00BA5A  0F02               	addlw	2
 15791  00BA5C  ECE6  F056         	call	_readEEPROM
 15792  00BA60  6E0D               	movwf	??_getUserInputs& (0+255),c
 15793  00BA62  500D               	movf	??_getUserInputs,w,c
 15794  00BA64  6E15               	movwf	getUserInputs@data,c
 15795  00BA66  6A16               	clrf	getUserInputs@data+1,c
 15796                           
 15797                           ;operationMode.c: 47: foodTable[count] = data;
 15798  00BA68  90D8               	bcf	status,0,c
 15799  00BA6A  3411               	rlcf	getUserInputs@count,w,c
 15800  00BA6C  6ED9               	movwf	fsr2l,c
 15801  00BA6E  3412               	rlcf	getUserInputs@count+1,w,c
 15802  00BA70  6EDA               	movwf	fsr2h,c
 15803  00BA72  500B               	movf	getUserInputs@foodTable,w,c
 15804  00BA74  26D9               	addwf	fsr2l,f,c
 15805  00BA76  500C               	movf	getUserInputs@foodTable+1,w,c
 15806  00BA78  22DA               	addwfc	fsr2h,f,c
 15807  00BA7A  C015  FFDE         	movff	getUserInputs@data,postinc2
 15808  00BA7E  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 15809                           
 15810                           ;operationMode.c: 48: count += 1;
 15811  00BA82  4A11               	infsnz	getUserInputs@count,f,c
 15812  00BA84  2A12               	incf	getUserInputs@count+1,f,c
 15813  00BA86  0E03               	movlw	3
 15814  00BA88  2617               	addwf	getUserInputs@i,f,c
 15815  00BA8A  0E00               	movlw	0
 15816  00BA8C  2218               	addwfc	getUserInputs@i+1,f,c
 15817  00BA8E  D7B1               	goto	l6610
 15818  00BA90                     l122:
 15819  00BA90  0012               	return		;funcret
 15820  00BA92                     __end_of_getUserInputs:
 15821                           	opt stack 0
 15822                           tblptru	equ	0xFF8
 15823                           tblptrh	equ	0xFF7
 15824                           tblptrl	equ	0xFF6
 15825                           tablat	equ	0xFF5
 15826                           prodh	equ	0xFF4
 15827                           prodl	equ	0xFF3
 15828                           postinc0	equ	0xFEE
 15829                           wreg	equ	0xFE8
 15830                           postinc1	equ	0xFE6
 15831                           postdec1	equ	0xFE5
 15832                           plusw1	equ	0xFE3
 15833                           fsr1h	equ	0xFE2
 15834                           fsr1l	equ	0xFE1
 15835                           indf2	equ	0xFDF
 15836                           postinc2	equ	0xFDE
 15837                           postdec2	equ	0xFDD
 15838                           plusw2	equ	0xFDB
 15839                           fsr2h	equ	0xFDA
 15840                           fsr2l	equ	0xFD9
 15841                           status	equ	0xFD8
 15842                           
 15843 ;; *************** function _readEEPROM *****************
 15844 ;; Defined at:
 15845 ;;		line 29 in file "EEPROMstorage.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;  address         1    wreg     unsigned char 
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  address         1    0[COMRAM] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      unsigned char 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;Total ram usage:        1 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; This function calls:
 15866 ;;		Nothing
 15867 ;; This function is called by:
 15868 ;;		_main
 15869 ;;		_getUserInputs
 15870 ;;		_viewLogs
 15871 ;;		_displayLogs
 15872 ;;		_standbyMode
 15873 ;;		_shiftEEPROM
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text32
 15878  00ADCC                     __ptext32:
 15879                           	opt stack 0
 15880  00ADCC                     _readEEPROM:
 15881                           	opt stack 28
 15882                           
 15883                           ;incstack = 0
 15884                           ;readEEPROM@address stored from wreg
 15885  00ADCC  6E01               	movwf	readEEPROM@address,c
 15886  00ADCE                     
 15887                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 15888  00ADCE  B2A6               	btfsc	4006,1,c	;volsfr
 15889  00ADD0  D7FE               	goto	l5958
 15890                           
 15891                           ;EEPROMstorage.c: 32: EEADR = address;
 15892  00ADD2  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 15893                           
 15894                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 15895  00ADD6  9EA6               	bcf	4006,7,c	;volsfr
 15896                           
 15897                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 15898  00ADD8  9CA6               	bcf	4006,6,c	;volsfr
 15899                           
 15900                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 15901  00ADDA  80A6               	bsf	4006,0,c	;volsfr
 15902                           
 15903                           ;EEPROMstorage.c: 36: return( EEDATA );
 15904  00ADDC  50A8               	movf	4008,w,c	;volatile
 15905  00ADDE  0012               	return	
 15906  00ADE0                     __end_of_readEEPROM:
 15907                           	opt stack 0
 15908                           tblptru	equ	0xFF8
 15909                           tblptrh	equ	0xFF7
 15910                           tblptrl	equ	0xFF6
 15911                           tablat	equ	0xFF5
 15912                           prodh	equ	0xFF4
 15913                           prodl	equ	0xFF3
 15914                           postinc0	equ	0xFEE
 15915                           wreg	equ	0xFE8
 15916                           postinc1	equ	0xFE6
 15917                           postdec1	equ	0xFE5
 15918                           plusw1	equ	0xFE3
 15919                           fsr1h	equ	0xFE2
 15920                           fsr1l	equ	0xFE1
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           plusw2	equ	0xFDB
 15925                           fsr2h	equ	0xFDA
 15926                           fsr2l	equ	0xFD9
 15927                           status	equ	0xFD8
 15928                           
 15929 ;; *************** function ___wmul *****************
 15930 ;; Defined at:
 15931 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  multiplier      2    0[COMRAM] unsigned int 
 15934 ;;  multiplicand    2    2[COMRAM] unsigned int 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;  product         2    4[COMRAM] unsigned int 
 15937 ;; Return value:  Size  Location     Type
 15938 ;;                  2    0[COMRAM] unsigned int 
 15939 ;; Registers used:
 15940 ;;		wreg, status,2, status,0, prodl, prodh
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15946 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15947 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;Total ram usage:        6 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_getUserInputs
 15956 ;;		_displayLogs
 15957 ;;		_standbyMode
 15958 ;;		_printf
 15959 ;;		_tock
 15960 ;; This function uses a non-reentrant model
 15961 ;;
 15962                           
 15963                           	psect	text33
 15964  00AE5C                     __ptext33:
 15965                           	opt stack 0
 15966  00AE5C                     ___wmul:
 15967                           	opt stack 27
 15968                           
 15969                           ;incstack = 0
 15970  00AE5C  5001               	movf	___wmul@multiplier,w,c
 15971  00AE5E  0203               	mulwf	___wmul@multiplicand,c
 15972  00AE60  CFF3 F005          	movff	prodl,___wmul@product
 15973  00AE64  CFF4 F006          	movff	prodh,___wmul@product+1
 15974  00AE68  5001               	movf	___wmul@multiplier,w,c
 15975  00AE6A  0204               	mulwf	___wmul@multiplicand+1,c
 15976  00AE6C  50F3               	movf	prodl,w,c
 15977  00AE6E  2606               	addwf	___wmul@product+1,f,c
 15978  00AE70  5002               	movf	___wmul@multiplier+1,w,c
 15979  00AE72  0203               	mulwf	___wmul@multiplicand,c
 15980  00AE74  50F3               	movf	prodl,w,c
 15981  00AE76  2606               	addwf	___wmul@product+1,f,c
 15982  00AE78  C005  F001         	movff	___wmul@product,?___wmul
 15983  00AE7C  C006  F002         	movff	___wmul@product+1,?___wmul+1
 15984  00AE80  0012               	return	
 15985  00AE82                     __end_of___wmul:
 15986                           	opt stack 0
 15987                           tblptru	equ	0xFF8
 15988                           tblptrh	equ	0xFF7
 15989                           tblptrl	equ	0xFF6
 15990                           tablat	equ	0xFF5
 15991                           prodh	equ	0xFF4
 15992                           prodl	equ	0xFF3
 15993                           postinc0	equ	0xFEE
 15994                           wreg	equ	0xFE8
 15995                           postinc1	equ	0xFE6
 15996                           postdec1	equ	0xFE5
 15997                           plusw1	equ	0xFE3
 15998                           fsr1h	equ	0xFE2
 15999                           fsr1l	equ	0xFE1
 16000                           indf2	equ	0xFDF
 16001                           postinc2	equ	0xFDE
 16002                           postdec2	equ	0xFDD
 16003                           plusw2	equ	0xFDB
 16004                           fsr2h	equ	0xFDA
 16005                           fsr2l	equ	0xFD9
 16006                           status	equ	0xFD8
 16007                           
 16008 ;; *************** function _initLCD *****************
 16009 ;; Defined at:
 16010 ;;		line 27 in file "LCD.c"
 16011 ;; Parameters:    Size  Location     Type
 16012 ;;		None
 16013 ;; Auto vars:     Size  Location     Type
 16014 ;;		None
 16015 ;; Return value:  Size  Location     Type
 16016 ;;                  1    wreg      void 
 16017 ;; Registers used:
 16018 ;;		wreg, status,2, status,0, cstack
 16019 ;; Tracked objects:
 16020 ;;		On entry : 0/0
 16021 ;;		On exit  : 0/0
 16022 ;;		Unchanged: 0/0
 16023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16028 ;;Total ram usage:        1 bytes
 16029 ;; Hardware stack levels used:    1
 16030 ;; Hardware stack levels required when called:    2
 16031 ;; This function calls:
 16032 ;;		_lcdInst
 16033 ;; This function is called by:
 16034 ;;		_main
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           	psect	text34
 16039  00AF2C                     __ptext34:
 16040                           	opt stack 0
 16041  00AF2C                     _initLCD:
 16042                           	opt stack 28
 16043                           
 16044                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 16045                           
 16046                           ;incstack = 0
 16047  00AF2C  0EC3               	movlw	195
 16048  00AF2E  6E04               	movwf	??_initLCD& (0+255),c
 16049  00AF30  0ECD               	movlw	205
 16050  00AF32                     u12477:
 16051  00AF32  2EE8               	decfsz	wreg,f,c
 16052  00AF34  D7FE               	bra	u12477
 16053  00AF36  2E04               	decfsz	??_initLCD& (0+255),f,c
 16054  00AF38  D7FC               	bra	u12477
 16055  00AF3A  F000               	nop	
 16056                           
 16057                           ;LCD.c: 36: lcdInst(0b00110011);
 16058  00AF3C  0E33               	movlw	51
 16059  00AF3E  ECDC  F056         	call	_lcdInst
 16060                           
 16061                           ;LCD.c: 37: lcdInst(0b00110010);
 16062  00AF42  0E32               	movlw	50
 16063  00AF44  ECDC  F056         	call	_lcdInst
 16064                           
 16065                           ;LCD.c: 38: lcdInst(0b00101000);
 16066  00AF48  0E28               	movlw	40
 16067  00AF4A  ECDC  F056         	call	_lcdInst
 16068                           
 16069                           ;LCD.c: 39: lcdInst(0b00001111);
 16070  00AF4E  0E0F               	movlw	15
 16071  00AF50  ECDC  F056         	call	_lcdInst
 16072                           
 16073                           ;LCD.c: 40: lcdInst(0b00000110);
 16074  00AF54  0E06               	movlw	6
 16075  00AF56  ECDC  F056         	call	_lcdInst
 16076                           
 16077                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 16078  00AF5A  0E01               	movlw	1
 16079  00AF5C  ECDC  F056         	call	_lcdInst
 16080  00AF60  0EC3               	movlw	195
 16081  00AF62  6E04               	movwf	??_initLCD& (0+255),c
 16082  00AF64  0ECD               	movlw	205
 16083  00AF66                     u12487:
 16084  00AF66  2EE8               	decfsz	wreg,f,c
 16085  00AF68  D7FE               	bra	u12487
 16086  00AF6A  2E04               	decfsz	??_initLCD& (0+255),f,c
 16087  00AF6C  D7FC               	bra	u12487
 16088  00AF6E  F000               	nop	
 16089                           
 16090                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 16091  00AF70  0E0F               	movlw	15
 16092  00AF72  ECDC  F056         	call	_lcdInst
 16093  00AF76  0012               	return		;funcret
 16094  00AF78                     __end_of_initLCD:
 16095                           	opt stack 0
 16096                           tblptru	equ	0xFF8
 16097                           tblptrh	equ	0xFF7
 16098                           tblptrl	equ	0xFF6
 16099                           tablat	equ	0xFF5
 16100                           prodh	equ	0xFF4
 16101                           prodl	equ	0xFF3
 16102                           postinc0	equ	0xFEE
 16103                           wreg	equ	0xFE8
 16104                           postinc1	equ	0xFE6
 16105                           postdec1	equ	0xFE5
 16106                           plusw1	equ	0xFE3
 16107                           fsr1h	equ	0xFE2
 16108                           fsr1l	equ	0xFE1
 16109                           indf2	equ	0xFDF
 16110                           postinc2	equ	0xFDE
 16111                           postdec2	equ	0xFDD
 16112                           plusw2	equ	0xFDB
 16113                           fsr2h	equ	0xFDA
 16114                           fsr2l	equ	0xFD9
 16115                           status	equ	0xFD8
 16116                           
 16117 ;; *************** function _lcdInst *****************
 16118 ;; Defined at:
 16119 ;;		line 13 in file "LCD.c"
 16120 ;; Parameters:    Size  Location     Type
 16121 ;;  data            1    wreg     unsigned char 
 16122 ;; Auto vars:     Size  Location     Type
 16123 ;;  data            1    2[COMRAM] unsigned char 
 16124 ;; Return value:  Size  Location     Type
 16125 ;;                  1    wreg      void 
 16126 ;; Registers used:
 16127 ;;		wreg, status,2, status,0, cstack
 16128 ;; Tracked objects:
 16129 ;;		On entry : 0/0
 16130 ;;		On exit  : 0/0
 16131 ;;		Unchanged: 0/0
 16132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16137 ;;Total ram usage:        1 bytes
 16138 ;; Hardware stack levels used:    1
 16139 ;; Hardware stack levels required when called:    1
 16140 ;; This function calls:
 16141 ;;		_lcdNibble
 16142 ;; This function is called by:
 16143 ;;		_main
 16144 ;;		_mainOperation
 16145 ;;		_viewLogs
 16146 ;;		_displayLogs
 16147 ;;		_food_press
 16148 ;;		_diet_press
 16149 ;;		_which_drawer
 16150 ;;		_standbyMode
 16151 ;;		_initLCD
 16152 ;; This function uses a non-reentrant model
 16153 ;;
 16154                           
 16155                           	psect	text35
 16156  00ADB8                     __ptext35:
 16157                           	opt stack 0
 16158  00ADB8                     _lcdInst:
 16159                           	opt stack 27
 16160                           
 16161                           ;incstack = 0
 16162                           ;lcdInst@data stored from wreg
 16163  00ADB8  6E03               	movwf	lcdInst@data,c
 16164                           
 16165                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 16166  00ADBA  948C               	bcf	3980,2,c	;volatile
 16167                           
 16168                           ;LCD.c: 22: lcdNibble(data);
 16169  00ADBC  5003               	movf	lcdInst@data,w,c
 16170  00ADBE  EC77  F058         	call	_lcdNibble
 16171                           
 16172                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 16173  00ADC2  0EC8               	movlw	200
 16174  00ADC4                     u12497:
 16175  00ADC4  D000               	nop2	
 16176  00ADC6  2EE8               	decfsz	wreg,f,c
 16177  00ADC8  D7FD               	bra	u12497
 16178  00ADCA  0012               	return		;funcret
 16179  00ADCC                     __end_of_lcdInst:
 16180                           	opt stack 0
 16181                           tblptru	equ	0xFF8
 16182                           tblptrh	equ	0xFF7
 16183                           tblptrl	equ	0xFF6
 16184                           tablat	equ	0xFF5
 16185                           prodh	equ	0xFF4
 16186                           prodl	equ	0xFF3
 16187                           postinc0	equ	0xFEE
 16188                           wreg	equ	0xFE8
 16189                           postinc1	equ	0xFE6
 16190                           postdec1	equ	0xFE5
 16191                           plusw1	equ	0xFE3
 16192                           fsr1h	equ	0xFE2
 16193                           fsr1l	equ	0xFE1
 16194                           indf2	equ	0xFDF
 16195                           postinc2	equ	0xFDE
 16196                           postdec2	equ	0xFDD
 16197                           plusw2	equ	0xFDB
 16198                           fsr2h	equ	0xFDA
 16199                           fsr2l	equ	0xFD9
 16200                           status	equ	0xFD8
 16201                           
 16202 ;; *************** function _lcdNibble *****************
 16203 ;; Defined at:
 16204 ;;		line 48 in file "LCD.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;  data            1    wreg     unsigned char 
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;  data            1    1[COMRAM] unsigned char 
 16209 ;;  temp            1    0[COMRAM] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      void 
 16212 ;; Registers used:
 16213 ;;		wreg, status,2, status,0
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;Total ram usage:        2 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; This function calls:
 16226 ;;		Nothing
 16227 ;; This function is called by:
 16228 ;;		_lcdInst
 16229 ;;		_putch
 16230 ;; This function uses a non-reentrant model
 16231 ;;
 16232                           
 16233                           	psect	text36
 16234  00B0EE                     __ptext36:
 16235                           	opt stack 0
 16236  00B0EE                     _lcdNibble:
 16237                           	opt stack 27
 16238                           
 16239                           ;incstack = 0
 16240                           ;lcdNibble@data stored from wreg
 16241  00B0EE  6E02               	movwf	lcdNibble@data,c
 16242                           
 16243                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 16244  00B0F0  5002               	movf	lcdNibble@data,w,c
 16245  00B0F2  0BF0               	andlw	240
 16246  00B0F4  6E01               	movwf	lcdNibble@temp,c
 16247                           
 16248                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 16249  00B0F6  508C               	movf	3980,w,c	;volatile
 16250  00B0F8  0B0F               	andlw	15
 16251  00B0FA  6E8C               	movwf	3980,c	;volatile
 16252                           
 16253                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 16254  00B0FC  5001               	movf	lcdNibble@temp,w,c
 16255  00B0FE  108C               	iorwf	3980,w,c	;volatile
 16256  00B100  6E8C               	movwf	3980,c	;volatile
 16257                           
 16258                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 16259  00B102  0E00               	movlw	0
 16260  00B104  BEF2               	btfsc	intcon,7,c	;volatile
 16261  00B106  0E01               	movlw	1
 16262  00B108  6E76               	movwf	_LCDinterruptState,c
 16263  00B10A  9EF2               	bcf	intcon,7,c	;volatile
 16264  00B10C  868C               	bsf	3980,3,c	;volatile
 16265  00B10E  0E53               	movlw	83
 16266  00B110                     u12507:
 16267  00B110  2EE8               	decfsz	wreg,f,c
 16268  00B112  D7FE               	bra	u12507
 16269  00B114  F000               	nop	
 16270  00B116  968C               	bcf	3980,3,c	;volatile
 16271  00B118  0EC8               	movlw	200
 16272  00B11A                     u12517:
 16273  00B11A  D000               	nop2	
 16274  00B11C  2EE8               	decfsz	wreg,f,c
 16275  00B11E  D7FD               	bra	u12517
 16276  00B120  B076               	btfsc	_LCDinterruptState,0,c
 16277  00B122  D002               	bra	u5835
 16278  00B124  9EF2               	bcf	intcon,7,c	;volatile
 16279  00B126  D001               	bra	u5836
 16280  00B128                     u5835:
 16281  00B128  8EF2               	bsf	intcon,7,c	;volatile
 16282  00B12A                     u5836:
 16283                           
 16284                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 16285  00B12A  3802               	swapf	lcdNibble@data,w,c
 16286  00B12C  0BF0               	andlw	240
 16287  00B12E  6E02               	movwf	lcdNibble@data,c
 16288                           
 16289                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 16290  00B130  5002               	movf	lcdNibble@data,w,c
 16291  00B132  0BF0               	andlw	240
 16292  00B134  6E01               	movwf	lcdNibble@temp,c
 16293                           
 16294                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 16295  00B136  508C               	movf	3980,w,c	;volatile
 16296  00B138  0B0F               	andlw	15
 16297  00B13A  6E8C               	movwf	3980,c	;volatile
 16298                           
 16299                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 16300  00B13C  5001               	movf	lcdNibble@temp,w,c
 16301  00B13E  108C               	iorwf	3980,w,c	;volatile
 16302  00B140  6E8C               	movwf	3980,c	;volatile
 16303                           
 16304                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 16305  00B142  0E00               	movlw	0
 16306  00B144  BEF2               	btfsc	intcon,7,c	;volatile
 16307  00B146  0E01               	movlw	1
 16308  00B148  6E76               	movwf	_LCDinterruptState,c
 16309  00B14A  9EF2               	bcf	intcon,7,c	;volatile
 16310  00B14C  868C               	bsf	3980,3,c	;volatile
 16311  00B14E  0E53               	movlw	83
 16312  00B150                     u12527:
 16313  00B150  2EE8               	decfsz	wreg,f,c
 16314  00B152  D7FE               	bra	u12527
 16315  00B154  F000               	nop	
 16316  00B156  968C               	bcf	3980,3,c	;volatile
 16317  00B158  0EC8               	movlw	200
 16318  00B15A                     u12537:
 16319  00B15A  D000               	nop2	
 16320  00B15C  2EE8               	decfsz	wreg,f,c
 16321  00B15E  D7FD               	bra	u12537
 16322  00B160  B076               	btfsc	_LCDinterruptState,0,c
 16323  00B162  D002               	bra	u5845
 16324  00B164  9EF2               	bcf	intcon,7,c	;volatile
 16325  00B166  D001               	bra	u5846
 16326  00B168                     u5845:
 16327  00B168  8EF2               	bsf	intcon,7,c	;volatile
 16328  00B16A                     u5846:
 16329  00B16A  0012               	return		;funcret
 16330  00B16C                     __end_of_lcdNibble:
 16331                           	opt stack 0
 16332                           tblptru	equ	0xFF8
 16333                           tblptrh	equ	0xFF7
 16334                           tblptrl	equ	0xFF6
 16335                           tablat	equ	0xFF5
 16336                           prodh	equ	0xFF4
 16337                           prodl	equ	0xFF3
 16338                           intcon	equ	0xFF2
 16339                           postinc0	equ	0xFEE
 16340                           wreg	equ	0xFE8
 16341                           postinc1	equ	0xFE6
 16342                           postdec1	equ	0xFE5
 16343                           plusw1	equ	0xFE3
 16344                           fsr1h	equ	0xFE2
 16345                           fsr1l	equ	0xFE1
 16346                           indf2	equ	0xFDF
 16347                           postinc2	equ	0xFDE
 16348                           postdec2	equ	0xFDD
 16349                           plusw2	equ	0xFDB
 16350                           fsr2h	equ	0xFDA
 16351                           fsr2l	equ	0xFD9
 16352                           status	equ	0xFD8
 16353                           
 16354 ;; *************** function _initEEPROM *****************
 16355 ;; Defined at:
 16356 ;;		line 40 in file "EEPROMstorage.c"
 16357 ;; Parameters:    Size  Location     Type
 16358 ;;		None
 16359 ;; Auto vars:     Size  Location     Type
 16360 ;;  i               2    2[COMRAM] unsigned int 
 16361 ;; Return value:  Size  Location     Type
 16362 ;;                  1    wreg      void 
 16363 ;; Registers used:
 16364 ;;		wreg, status,2, status,0, cstack
 16365 ;; Tracked objects:
 16366 ;;		On entry : 0/0
 16367 ;;		On exit  : 0/0
 16368 ;;		Unchanged: 0/0
 16369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;Total ram usage:        2 bytes
 16375 ;; Hardware stack levels used:    1
 16376 ;; Hardware stack levels required when called:    1
 16377 ;; This function calls:
 16378 ;;		_writeEEPROM
 16379 ;; This function is called by:
 16380 ;;		_main
 16381 ;; This function uses a non-reentrant model
 16382 ;;
 16383                           
 16384                           	psect	text37
 16385  00AE36                     __ptext37:
 16386                           	opt stack 0
 16387  00AE36                     _initEEPROM:
 16388                           	opt stack 29
 16389                           
 16390                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 16391                           
 16392                           ;incstack = 0
 16393  00AE36  0E00               	movlw	0
 16394  00AE38  6E04               	movwf	initEEPROM@i+1,c
 16395  00AE3A  0E00               	movlw	0
 16396  00AE3C  6E03               	movwf	initEEPROM@i,c
 16397                           
 16398                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 16399  00AE3E  0E00               	movlw	0
 16400  00AE40  6E04               	movwf	initEEPROM@i+1,c
 16401  00AE42  0E00               	movlw	0
 16402  00AE44  6E03               	movwf	initEEPROM@i,c
 16403  00AE46                     l8098:
 16404  00AE46  0404               	decf	initEEPROM@i+1,w,c
 16405  00AE48  B0D8               	btfsc	status,0,c
 16406  00AE4A  0012               	return	
 16407                           
 16408                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 16409  00AE4C  0E00               	movlw	0
 16410  00AE4E  6E01               	movwf	writeEEPROM@data,c
 16411  00AE50  5003               	movf	initEEPROM@i,w,c
 16412  00AE52  EC41  F057         	call	_writeEEPROM
 16413  00AE56  4A03               	infsnz	initEEPROM@i,f,c
 16414  00AE58  2A04               	incf	initEEPROM@i+1,f,c
 16415  00AE5A  D7F5               	goto	l8098
 16416  00AE5C                     __end_of_initEEPROM:
 16417                           	opt stack 0
 16418                           tblptru	equ	0xFF8
 16419                           tblptrh	equ	0xFF7
 16420                           tblptrl	equ	0xFF6
 16421                           tablat	equ	0xFF5
 16422                           prodh	equ	0xFF4
 16423                           prodl	equ	0xFF3
 16424                           intcon	equ	0xFF2
 16425                           postinc0	equ	0xFEE
 16426                           wreg	equ	0xFE8
 16427                           postinc1	equ	0xFE6
 16428                           postdec1	equ	0xFE5
 16429                           plusw1	equ	0xFE3
 16430                           fsr1h	equ	0xFE2
 16431                           fsr1l	equ	0xFE1
 16432                           indf2	equ	0xFDF
 16433                           postinc2	equ	0xFDE
 16434                           postdec2	equ	0xFDD
 16435                           plusw2	equ	0xFDB
 16436                           fsr2h	equ	0xFDA
 16437                           fsr2l	equ	0xFD9
 16438                           status	equ	0xFD8
 16439                           
 16440 ;; *************** function _writeEEPROM *****************
 16441 ;; Defined at:
 16442 ;;		line 10 in file "EEPROMstorage.c"
 16443 ;; Parameters:    Size  Location     Type
 16444 ;;  address         1    wreg     unsigned char 
 16445 ;;  data            1    0[COMRAM] unsigned char 
 16446 ;; Auto vars:     Size  Location     Type
 16447 ;;  address         1    1[COMRAM] unsigned char 
 16448 ;; Return value:  Size  Location     Type
 16449 ;;                  1    wreg      void 
 16450 ;; Registers used:
 16451 ;;		wreg, status,2
 16452 ;; Tracked objects:
 16453 ;;		On entry : 0/0
 16454 ;;		On exit  : 0/0
 16455 ;;		Unchanged: 0/0
 16456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16457 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16461 ;;Total ram usage:        2 bytes
 16462 ;; Hardware stack levels used:    1
 16463 ;; This function calls:
 16464 ;;		Nothing
 16465 ;; This function is called by:
 16466 ;;		_standbyMode
 16467 ;;		_initEEPROM
 16468 ;;		_shiftEEPROM
 16469 ;; This function uses a non-reentrant model
 16470 ;;
 16471                           
 16472                           	psect	text38
 16473  00AE82                     __ptext38:
 16474                           	opt stack 0
 16475  00AE82                     _writeEEPROM:
 16476                           	opt stack 29
 16477                           
 16478                           ;incstack = 0
 16479                           ;writeEEPROM@address stored from wreg
 16480  00AE82  6E02               	movwf	writeEEPROM@address,c
 16481  00AE84                     
 16482                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 16483  00AE84  B2A6               	btfsc	4006,1,c	;volsfr
 16484  00AE86  D7FE               	goto	l6550
 16485                           
 16486                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 16487  00AE88  84A6               	bsf	4006,2,c	;volsfr
 16488                           
 16489                           ;EEPROMstorage.c: 14: EEADR=address;
 16490  00AE8A  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 16491                           
 16492                           ;EEPROMstorage.c: 15: EEDATA=data;
 16493  00AE8E  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 16494                           
 16495                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 16496  00AE92  9EA6               	bcf	4006,7,c	;volsfr
 16497                           
 16498                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 16499  00AE94  9CA6               	bcf	4006,6,c	;volsfr
 16500                           
 16501                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 16502  00AE96  9EF2               	bcf	intcon,7,c	;volatile
 16503                           
 16504                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 16505  00AE98  0E55               	movlw	85
 16506  00AE9A  6EA7               	movwf	4007,c	;volsfr
 16507                           
 16508                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 16509  00AE9C  0EAA               	movlw	170
 16510  00AE9E  6EA7               	movwf	4007,c	;volsfr
 16511                           
 16512                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 16513  00AEA0  82A6               	bsf	4006,1,c	;volsfr
 16514                           
 16515                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 16516  00AEA2  8EF2               	bsf	intcon,7,c	;volatile
 16517  00AEA4  B2A6               	btfsc	4006,1,c	;volsfr
 16518  00AEA6  D7FE               	goto	l1045
 16519                           
 16520                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 16521  00AEA8  94A6               	bcf	4006,2,c	;volsfr
 16522  00AEAA  0012               	return		;funcret
 16523  00AEAC                     __end_of_writeEEPROM:
 16524                           	opt stack 0
 16525                           tblptru	equ	0xFF8
 16526                           tblptrh	equ	0xFF7
 16527                           tblptrl	equ	0xFF6
 16528                           tablat	equ	0xFF5
 16529                           prodh	equ	0xFF4
 16530                           prodl	equ	0xFF3
 16531                           intcon	equ	0xFF2
 16532                           postinc0	equ	0xFEE
 16533                           wreg	equ	0xFE8
 16534                           postinc1	equ	0xFE6
 16535                           postdec1	equ	0xFE5
 16536                           plusw1	equ	0xFE3
 16537                           fsr1h	equ	0xFE2
 16538                           fsr1l	equ	0xFE1
 16539                           indf2	equ	0xFDF
 16540                           postinc2	equ	0xFDE
 16541                           postdec2	equ	0xFDD
 16542                           plusw2	equ	0xFDB
 16543                           fsr2h	equ	0xFDA
 16544                           fsr2l	equ	0xFD9
 16545                           status	equ	0xFD8
 16546                           
 16547 ;; *************** function _UART_Init *****************
 16548 ;; Defined at:
 16549 ;;		line 197 in file "UART_PIC.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;  baud            4   14[COMRAM] long 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;		None
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  1    wreg      void 
 16556 ;; Registers used:
 16557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16558 ;; Tracked objects:
 16559 ;;		On entry : 0/0
 16560 ;;		On exit  : 0/0
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16565 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16566 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;Total ram usage:        8 bytes
 16568 ;; Hardware stack levels used:    1
 16569 ;; Hardware stack levels required when called:    1
 16570 ;; This function calls:
 16571 ;;		___aldiv
 16572 ;; This function is called by:
 16573 ;;		_main
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           	psect	text39
 16578  00B1EE                     __ptext39:
 16579                           	opt stack 0
 16580  00B1EE                     _UART_Init:
 16581                           	opt stack 29
 16582                           
 16583                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 16584                           
 16585                           ;incstack = 0
 16586  00B1EE  0E00               	movlw	0
 16587  00B1F0  6E01               	movwf	___aldiv@dividend,c
 16588  00B1F2  0E5A               	movlw	90
 16589  00B1F4  6E02               	movwf	___aldiv@dividend+1,c
 16590  00B1F6  0E62               	movlw	98
 16591  00B1F8  6E03               	movwf	___aldiv@dividend+2,c
 16592  00B1FA  0E02               	movlw	2
 16593  00B1FC  6E04               	movwf	___aldiv@dividend+3,c
 16594  00B1FE  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 16595  00B202  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 16596  00B206  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 16597  00B20A  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 16598  00B20E  0E06               	movlw	6
 16599  00B210                     u10195:
 16600  00B210  90D8               	bcf	status,0,c
 16601  00B212  3613               	rlcf	??_UART_Init,f,c
 16602  00B214  3614               	rlcf	??_UART_Init+1,f,c
 16603  00B216  3615               	rlcf	??_UART_Init+2,f,c
 16604  00B218  3616               	rlcf	??_UART_Init+3,f,c
 16605  00B21A  2EE8               	decfsz	wreg,f,c
 16606  00B21C  D7F9               	goto	u10195
 16607  00B21E  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 16608  00B222  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 16609  00B226  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 16610  00B22A  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 16611  00B22E  ECEF  F059         	call	___aldiv	;wreg free
 16612  00B232  0401               	decf	?___aldiv,w,c
 16613  00B234  6EAF               	movwf	4015,c	;volatile
 16614                           
 16615                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 16616  00B236  9CAC               	bcf	4012,6,c	;volatile
 16617                           
 16618                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 16619  00B238  98AC               	bcf	4012,4,c	;volatile
 16620                           
 16621                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 16622  00B23A  8AAC               	bsf	4012,5,c	;volatile
 16623                           
 16624                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 16625  00B23C  9CAB               	bcf	4011,6,c	;volatile
 16626                           
 16627                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 16628  00B23E  88AB               	bsf	4011,4,c	;volatile
 16629                           
 16630                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 16631  00B240  EE20 F008          	lfsr	2,8
 16632  00B244  5078               	movf	_UART,w,c
 16633  00B246  26D9               	addwf	fsr2l,f,c
 16634  00B248  5079               	movf	_UART+1,w,c
 16635  00B24A  22DA               	addwfc	fsr2h,f,c
 16636  00B24C  0E01               	movlw	1
 16637  00B24E  6EDF               	movwf	indf2,c
 16638                           
 16639                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 16640  00B250  EE20 F009          	lfsr	2,9
 16641  00B254  5078               	movf	_UART,w,c
 16642  00B256  26D9               	addwf	fsr2l,f,c
 16643  00B258  5079               	movf	_UART+1,w,c
 16644  00B25A  22DA               	addwfc	fsr2h,f,c
 16645  00B25C  0E01               	movlw	1
 16646  00B25E  6EDF               	movwf	indf2,c
 16647                           
 16648                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 16649  00B260  0E30               	movlw	low _arr_dataRX
 16650  00B262  0100               	movlb	0	; () banked
 16651  00B264  6FF4               	movwf	(_uart+4)& (0+255),b	;volatile
 16652  00B266  0E02               	movlw	high _arr_dataRX
 16653  00B268  6FF5               	movwf	(_uart+5)& (0+255),b	;volatile
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;UART_PIC.c: 229: TRISC6 = 0;
 16657  00B26A  9C94               	bcf	3988,6,c	;volatile
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;UART_PIC.c: 230: TRISC7 = 1;
 16661  00B26C  8E94               	bsf	3988,7,c	;volatile
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 16665  00B26E  8EAB               	bsf	4011,7,c	;volatile
 16666                           
 16667                           ; BSR set to: 0
 16668  00B270  0012               	return		;funcret
 16669  00B272                     __end_of_UART_Init:
 16670                           	opt stack 0
 16671                           tblptru	equ	0xFF8
 16672                           tblptrh	equ	0xFF7
 16673                           tblptrl	equ	0xFF6
 16674                           tablat	equ	0xFF5
 16675                           prodh	equ	0xFF4
 16676                           prodl	equ	0xFF3
 16677                           intcon	equ	0xFF2
 16678                           postinc0	equ	0xFEE
 16679                           wreg	equ	0xFE8
 16680                           postinc1	equ	0xFE6
 16681                           postdec1	equ	0xFE5
 16682                           plusw1	equ	0xFE3
 16683                           fsr1h	equ	0xFE2
 16684                           fsr1l	equ	0xFE1
 16685                           indf2	equ	0xFDF
 16686                           postinc2	equ	0xFDE
 16687                           postdec2	equ	0xFDD
 16688                           plusw2	equ	0xFDB
 16689                           fsr2h	equ	0xFDA
 16690                           fsr2l	equ	0xFD9
 16691                           status	equ	0xFD8
 16692                           
 16693 ;; *************** function ___aldiv *****************
 16694 ;; Defined at:
 16695 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 16696 ;; Parameters:    Size  Location     Type
 16697 ;;  dividend        4    0[COMRAM] long 
 16698 ;;  divisor         4    4[COMRAM] long 
 16699 ;; Auto vars:     Size  Location     Type
 16700 ;;  quotient        4   10[COMRAM] long 
 16701 ;;  sign            1    9[COMRAM] unsigned char 
 16702 ;;  counter         1    8[COMRAM] unsigned char 
 16703 ;; Return value:  Size  Location     Type
 16704 ;;                  4    0[COMRAM] long 
 16705 ;; Registers used:
 16706 ;;		wreg, status,2, status,0
 16707 ;; Tracked objects:
 16708 ;;		On entry : 0/0
 16709 ;;		On exit  : 0/0
 16710 ;;		Unchanged: 0/0
 16711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16712 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;Total ram usage:       14 bytes
 16717 ;; Hardware stack levels used:    1
 16718 ;; This function calls:
 16719 ;;		Nothing
 16720 ;; This function is called by:
 16721 ;;		_UART_Init
 16722 ;; This function uses a non-reentrant model
 16723 ;;
 16724                           
 16725                           	psect	text40
 16726  00B3DE                     __ptext40:
 16727                           	opt stack 0
 16728  00B3DE                     ___aldiv:
 16729                           	opt stack 29
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;incstack = 0
 16733  00B3DE  0E00               	movlw	0
 16734  00B3E0  6E0A               	movwf	___aldiv@sign,c
 16735  00B3E2  AE08               	btfss	___aldiv@divisor+3,7,c
 16736  00B3E4  D00A               	goto	l1413
 16737  00B3E6  1E08               	comf	___aldiv@divisor+3,f,c
 16738  00B3E8  1E07               	comf	___aldiv@divisor+2,f,c
 16739  00B3EA  1E06               	comf	___aldiv@divisor+1,f,c
 16740  00B3EC  6C05               	negf	___aldiv@divisor,c
 16741  00B3EE  0E00               	movlw	0
 16742  00B3F0  2206               	addwfc	___aldiv@divisor+1,f,c
 16743  00B3F2  2207               	addwfc	___aldiv@divisor+2,f,c
 16744  00B3F4  2208               	addwfc	___aldiv@divisor+3,f,c
 16745  00B3F6  0E01               	movlw	1
 16746  00B3F8  6E0A               	movwf	___aldiv@sign,c
 16747  00B3FA                     l1413:
 16748  00B3FA  AE04               	btfss	___aldiv@dividend+3,7,c
 16749  00B3FC  D00A               	goto	l1414
 16750  00B3FE  1E04               	comf	___aldiv@dividend+3,f,c
 16751  00B400  1E03               	comf	___aldiv@dividend+2,f,c
 16752  00B402  1E02               	comf	___aldiv@dividend+1,f,c
 16753  00B404  6C01               	negf	___aldiv@dividend,c
 16754  00B406  0E00               	movlw	0
 16755  00B408  2202               	addwfc	___aldiv@dividend+1,f,c
 16756  00B40A  2203               	addwfc	___aldiv@dividend+2,f,c
 16757  00B40C  2204               	addwfc	___aldiv@dividend+3,f,c
 16758  00B40E  0E01               	movlw	1
 16759  00B410  1A0A               	xorwf	___aldiv@sign,f,c
 16760  00B412                     l1414:
 16761  00B412  0E00               	movlw	0
 16762  00B414  6E0B               	movwf	___aldiv@quotient,c
 16763  00B416  0E00               	movlw	0
 16764  00B418  6E0C               	movwf	___aldiv@quotient+1,c
 16765  00B41A  0E00               	movlw	0
 16766  00B41C  6E0D               	movwf	___aldiv@quotient+2,c
 16767  00B41E  0E00               	movlw	0
 16768  00B420  6E0E               	movwf	___aldiv@quotient+3,c
 16769  00B422  5005               	movf	___aldiv@divisor,w,c
 16770  00B424  1006               	iorwf	___aldiv@divisor+1,w,c
 16771  00B426  1007               	iorwf	___aldiv@divisor+2,w,c
 16772  00B428  1008               	iorwf	___aldiv@divisor+3,w,c
 16773  00B42A  B4D8               	btfsc	status,2,c
 16774  00B42C  D02A               	goto	l1421
 16775  00B42E  0E01               	movlw	1
 16776  00B430  6E09               	movwf	___aldiv@counter,c
 16777  00B432  D006               	goto	l1416
 16778  00B434  90D8               	bcf	status,0,c
 16779  00B436  3605               	rlcf	___aldiv@divisor,f,c
 16780  00B438  3606               	rlcf	___aldiv@divisor+1,f,c
 16781  00B43A  3607               	rlcf	___aldiv@divisor+2,f,c
 16782  00B43C  3608               	rlcf	___aldiv@divisor+3,f,c
 16783  00B43E  2A09               	incf	___aldiv@counter,f,c
 16784  00B440                     l1416:
 16785  00B440  AE08               	btfss	___aldiv@divisor+3,7,c
 16786  00B442  D7F8               	goto	l1417
 16787  00B444                     u10160:
 16788  00B444  90D8               	bcf	status,0,c
 16789  00B446  360B               	rlcf	___aldiv@quotient,f,c
 16790  00B448  360C               	rlcf	___aldiv@quotient+1,f,c
 16791  00B44A  360D               	rlcf	___aldiv@quotient+2,f,c
 16792  00B44C  360E               	rlcf	___aldiv@quotient+3,f,c
 16793  00B44E  5005               	movf	___aldiv@divisor,w,c
 16794  00B450  5C01               	subwf	___aldiv@dividend,w,c
 16795  00B452  5006               	movf	___aldiv@divisor+1,w,c
 16796  00B454  5802               	subwfb	___aldiv@dividend+1,w,c
 16797  00B456  5007               	movf	___aldiv@divisor+2,w,c
 16798  00B458  5803               	subwfb	___aldiv@dividend+2,w,c
 16799  00B45A  5008               	movf	___aldiv@divisor+3,w,c
 16800  00B45C  5804               	subwfb	___aldiv@dividend+3,w,c
 16801  00B45E  A0D8               	btfss	status,0,c
 16802  00B460  D009               	goto	l1420
 16803  00B462  5005               	movf	___aldiv@divisor,w,c
 16804  00B464  5E01               	subwf	___aldiv@dividend,f,c
 16805  00B466  5006               	movf	___aldiv@divisor+1,w,c
 16806  00B468  5A02               	subwfb	___aldiv@dividend+1,f,c
 16807  00B46A  5007               	movf	___aldiv@divisor+2,w,c
 16808  00B46C  5A03               	subwfb	___aldiv@dividend+2,f,c
 16809  00B46E  5008               	movf	___aldiv@divisor+3,w,c
 16810  00B470  5A04               	subwfb	___aldiv@dividend+3,f,c
 16811  00B472  800B               	bsf	___aldiv@quotient,0,c
 16812  00B474                     l1420:
 16813  00B474  90D8               	bcf	status,0,c
 16814  00B476  3208               	rrcf	___aldiv@divisor+3,f,c
 16815  00B478  3207               	rrcf	___aldiv@divisor+2,f,c
 16816  00B47A  3206               	rrcf	___aldiv@divisor+1,f,c
 16817  00B47C  3205               	rrcf	___aldiv@divisor,f,c
 16818  00B47E  2E09               	decfsz	___aldiv@counter,f,c
 16819  00B480  D7E1               	goto	u10160
 16820  00B482                     l1421:
 16821  00B482  500A               	movf	___aldiv@sign,w,c
 16822  00B484  B4D8               	btfsc	status,2,c
 16823  00B486  D008               	goto	l1422
 16824  00B488  1E0E               	comf	___aldiv@quotient+3,f,c
 16825  00B48A  1E0D               	comf	___aldiv@quotient+2,f,c
 16826  00B48C  1E0C               	comf	___aldiv@quotient+1,f,c
 16827  00B48E  6C0B               	negf	___aldiv@quotient,c
 16828  00B490  0E00               	movlw	0
 16829  00B492  220C               	addwfc	___aldiv@quotient+1,f,c
 16830  00B494  220D               	addwfc	___aldiv@quotient+2,f,c
 16831  00B496  220E               	addwfc	___aldiv@quotient+3,f,c
 16832  00B498                     l1422:
 16833  00B498  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 16834  00B49C  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 16835  00B4A0  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 16836  00B4A4  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 16837  00B4A8  0012               	return	
 16838  00B4AA                     __end_of___aldiv:
 16839                           	opt stack 0
 16840                           tblptru	equ	0xFF8
 16841                           tblptrh	equ	0xFF7
 16842                           tblptrl	equ	0xFF6
 16843                           tablat	equ	0xFF5
 16844                           prodh	equ	0xFF4
 16845                           prodl	equ	0xFF3
 16846                           intcon	equ	0xFF2
 16847                           postinc0	equ	0xFEE
 16848                           wreg	equ	0xFE8
 16849                           postinc1	equ	0xFE6
 16850                           postdec1	equ	0xFE5
 16851                           plusw1	equ	0xFE3
 16852                           fsr1h	equ	0xFE2
 16853                           fsr1l	equ	0xFE1
 16854                           indf2	equ	0xFDF
 16855                           postinc2	equ	0xFDE
 16856                           postdec2	equ	0xFDD
 16857                           plusw2	equ	0xFDB
 16858                           fsr2h	equ	0xFDA
 16859                           fsr2l	equ	0xFD9
 16860                           status	equ	0xFD8
 16861                           tblptru	equ	0xFF8
 16862                           tblptrh	equ	0xFF7
 16863                           tblptrl	equ	0xFF6
 16864                           tablat	equ	0xFF5
 16865                           prodh	equ	0xFF4
 16866                           prodl	equ	0xFF3
 16867                           intcon	equ	0xFF2
 16868                           postinc0	equ	0xFEE
 16869                           wreg	equ	0xFE8
 16870                           postinc1	equ	0xFE6
 16871                           postdec1	equ	0xFE5
 16872                           plusw1	equ	0xFE3
 16873                           fsr1h	equ	0xFE2
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           plusw2	equ	0xFDB
 16879                           fsr2h	equ	0xFDA
 16880                           fsr2l	equ	0xFD9
 16881                           status	equ	0xFD8
 16882                           
 16883                           	psect	rparam
 16884  0000                     tblptru	equ	0xFF8
 16885                           tblptrh	equ	0xFF7
 16886                           tblptrl	equ	0xFF6
 16887                           tablat	equ	0xFF5
 16888                           prodh	equ	0xFF4
 16889                           prodl	equ	0xFF3
 16890                           intcon	equ	0xFF2
 16891                           postinc0	equ	0xFEE
 16892                           wreg	equ	0xFE8
 16893                           postinc1	equ	0xFE6
 16894                           postdec1	equ	0xFE5
 16895                           plusw1	equ	0xFE3
 16896                           fsr1h	equ	0xFE2
 16897                           fsr1l	equ	0xFE1
 16898                           indf2	equ	0xFDF
 16899                           postinc2	equ	0xFDE
 16900                           postdec2	equ	0xFDD
 16901                           plusw2	equ	0xFDB
 16902                           fsr2h	equ	0xFDA
 16903                           fsr2l	equ	0xFD9
 16904                           status	equ	0xFD8


Data Sizes:
    Strings     843
    Constant    65
    Data        70
    BSS         240
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    107     127
    BANK0           128     72     124
    BANK1           256    138     250
    BANK2           256      0     126
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    standbyMode$1992	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), 

    standbyMode$1991	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), 

    displayLogs$1990	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), 

    displayLogs$1989	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_113(CODE[7]), STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), 
		 -> STR_24(CODE[2]), STR_23(CODE[2]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_112(CODE[11]), STR_111(CODE[13]), STR_110(CODE[11]), STR_109(CODE[13]), 
		 -> STR_108(CODE[11]), STR_107(CODE[15]), STR_106(CODE[15]), STR_105(CODE[5]), 
		 -> STR_104(CODE[11]), STR_103(CODE[8]), STR_102(CODE[11]), STR_101(CODE[14]), 
		 -> STR_100(CODE[17]), STR_99(CODE[8]), STR_98(CODE[15]), STR_97(CODE[16]), 
		 -> STR_96(CODE[10]), STR_95(CODE[8]), STR_94(CODE[15]), STR_93(CODE[16]), 
		 -> STR_92(CODE[10]), STR_91(CODE[16]), STR_90(CODE[16]), STR_89(CODE[17]), 
		 -> STR_88(CODE[13]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[11]), 
		 -> STR_84(CODE[11]), STR_83(CODE[15]), STR_82(CODE[15]), STR_81(CODE[10]), 
		 -> STR_80(CODE[13]), STR_79(CODE[16]), STR_78(CODE[16]), STR_77(CODE[17]), 
		 -> STR_76(CODE[17]), STR_75(CODE[8]), STR_74(CODE[15]), STR_73(CODE[15]), 
		 -> STR_72(CODE[11]), STR_71(CODE[14]), STR_70(CODE[16]), STR_69(CODE[16]), 
		 -> STR_68(CODE[11]), STR_67(CODE[14]), STR_66(CODE[16]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[13]), STR_62(CODE[5]), STR_61(CODE[11]), 
		 -> STR_60(CODE[15]), STR_59(CODE[17]), STR_58(CODE[18]), STR_57(CODE[15]), 
		 -> STR_56(CODE[11]), STR_55(CODE[7]), STR_54(CODE[3]), STR_53(CODE[16]), 
		 -> STR_52(CODE[8]), STR_51(CODE[16]), STR_50(CODE[15]), STR_49(CODE[6]), 
		 -> STR_48(CODE[14]), STR_47(CODE[17]), STR_46(CODE[7]), STR_45(CODE[9]), 
		 -> STR_44(CODE[17]), STR_43(CODE[11]), STR_42(CODE[17]), STR_41(CODE[14]), 
		 -> STR_40(CODE[17]), STR_39(CODE[11]), STR_38(CODE[15]), STR_37(CODE[11]), 
		 -> STR_36(CODE[8]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[16]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK0[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), 

    sortDrawerList@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@sortedDrawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@sortedDrawerTable(BANK0[16]), 

    getUserInputs@foodTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@foodTable(BANK0[16]), 

    getUserInputs@dietTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@dietTable(BANK0[16]), 

    getUserInputs@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_sortDrawerList
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getUserInputs->___wmul
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_mainOperation

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  132179
                                             99 COMRAM     8     8      0
                          _UART_Init
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        144   142      2   97144
                                             93 COMRAM     6     4      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   12889
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   29653
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   17152
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   15784
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   14242
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                       74    74      0   20931
                                             54 COMRAM     2     2      0
                                              0 BANK0     72    72      0
                      _getUserInputs
                            _lcdInst
                             _printf
                     _sortDrawerList
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      54    50      4    5061
                                              0 COMRAM    54    50      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   11656
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       18    12      6    3695
                                              6 COMRAM    18    12      6
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2991
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _getUserInputs
       ___wmul
       _readEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      7E      10       49.2%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8A      FA       8       97.7%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     48      7C       5       96.9%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6B      7F       1      100.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     273       6        0.0%
DATA                 0      0     273       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 17:31:34 2018

                    _standbyMode EA9E           __end_of_verifyKeypress B01C  
                   ?_displayLogs 0029                               l67 B844  
                    __CFG_CPD$ON 000000              ___wmul@multiplicand 0003  
                    __CFG_BORV$3 000000                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                              l122 BA90  
                            l116 B9CA                              l212 E982  
                            l221 EA90                              l213 E952  
                            l205 E93C                              l141 E1F6  
                            l222 EA44                              l206 E88E  
                            l119 B9EA                              l215 E9D4  
                            l207 E92C                              l135 E0B4  
                            l216 E998                              l208 E898  
                            l160 E410                              l152 E3FA  
                            l209 E928                              l161 E4AE  
                            l153 E34C                              l145 E298  
                            l137 E154                              l218 EA2E  
                            l170 E56E                              l162 E41A  
                            l154 E3EA                              l410 D548  
                            l219 E9EA                              l163 E4AA  
                            l155 E356                              l180 E74E  
                            l156 E3E6                              l500 DEF6  
                            l173 E646                              l149 E338  
                            l421 D5D4                              l413 DFD4  
                            l174 E598                              l166 E582  
                            l414 D566                              l191 E84C  
                            l183 E740                              l175 E636  
                            l167 E4D4                              l159 E4BE  
                            l415 D580                              l184 E692  
                            l176 E5A2                              l168 E572  
                            l408 DF4C                              l432 D6B6  
                            l424 D5F2                              l185 E730  
                            l177 E632                              l169 E4DE  
                            l433 D6E4                              l425 D620  
                            l409 D52E                              l194 E83E  
                            l186 E69C                              l354 BD32  
                            l442 D7A6                              l418 D59E  
                            l506 B6A0                              l195 E790  
                            l187 E72C                              l355 BD3A  
                            l443 D7D2                              l435 D714  
                            l427 D650                              l419 D5B8  
                            l196 E82E                              l460 D990  
                            l452 D88C                              l612 B886  
                            l508 B762                              l197 E79A  
                            l461 D9D0                              l453 D8CC  
                            l445 D800                              l437 D744  
                            l429 D680                              l541 B5B0  
                            l509 B686                              l198 E82A  
                            l542 B596                              l534 B690  
                            l710 D222                              l447 D82E  
                            l439 D772                              l543 B672  
                            l631 C550                              l623 C41E  
                            l480 DC1E                              l472 DB18  
                            l464 DA12                              l456 D90E  
                            l544 B59E                              l720 D356  
                            l712 D266                              l616 B000  
                            l801 CAF6                              l481 DC5E  
                            l473 DB58                              l465 DA52  
                            l457 D94E                              l449 D85C  
                            l537 B698                              l705 D11A  
                            l617 AFE6                              l714 D2AA  
                            l618 AFFC                              l642 C5C6  
                            l626 C4CA                              l811 CBBE  
                            l475 DB9A                              l467 DA94  
                            l651 C172                              l723 D394  
                            l715 D2EE                              l643 C5D2  
                            l804 CC0E                              l492 DDA6  
                            l484 DCA0                              l740 B354  
                            l572 B5A8                              l660 C1AE  
                            l732 D50A                              l708 D1B2  
                            l636 C55C                              l628 C4C4  
                            l821 CC72                              l485 DCE0  
                            l477 DBDC                              l469 DAD6  
                            l741 B32A                              l581 B86C  
                            l725 D3B0                              l901 BF7C  
                            l806 CB14                              l494 DDFA  
                            l742 B3D4                              l670 C21C  
                            l662 C1D6                              l831 CD4E  
                            l823 CC9C                              l487 DD22  
                            l735 D516                              l647 C66C  
                            l911 BFA6                              l808 CB76  
                            l496 DE4E                              l760 B34C  
                            l576 B88E                              l656 C19A  
                            l841 CE34                              l833 CD7C  
                            l825 CCC8                              l817 CC1E  
                            l489 DD64                              l585 B874  
                            l729 D4B0                              l913 C0D8  
                            l498 DEA2                              l746 B334  
                            l578 B96E                              l690 C32A  
                            l682 C2BC                              l674 C244  
                            l666 C1FE                              l906 BF88  
                            l851 CF22                              l843 CE62  
                            l835 CDAA                              l827 CCF4  
                            l819 CC48                              l755 B344  
                            l860 BBAC                              l748 B33C  
                            l772 BDBE                              l588 B87C  
                            l932 C12E                              l916 C092  
                            l861 BAA4                              l853 CF54  
                            l845 CE92                              l837 CDD8  
                            l829 CD20                              l909 C11A  
                            l917 C060                              l870 BAEC  
                            l862 BAAC                              l854 CFA8  
                            l694 C35C                              l686 C302  
                            l678 C26C                              l950 EBFC  
                            l871 BAF4                              l863 BAB4  
                            l847 CEC2                              l839 CE06  
                            l775 BEAA                              l767 BDB2  
                            l927 C0D4                              l872 BAFC  
                            l864 BABC                              l960 F850  
                            l873 BB04                              l865 BAC4  
                            l849 CEF2                              l777 BDDC  
                            l858 BB2E                              l874 BB0C  
                            l866 BACC                              l786 BEBC  
                            l698 C398                              l882 B520  
                            l890 B4DC                              l962 F240  
                            l875 BB14                              l867 BAD4  
                            l859 BA9C                              l779 BE48  
                            l891 B4E4                              l883 B4AC  
                            l971 EF36                              l955 EE68  
                            l876 BB1C                              l868 BADC  
                            l796 CAEA                              l892 B4EC  
                            l884 B582                              l980 F0AC  
                            l964 EEEE                              l877 BB24  
                            l869 BAE4                              l797 CAEA  
                            l789 BF2C                              l893 B4F4  
                            l885 B4B4                              l973 F232  
                            l981 F04E                              l894 B4FC  
                            l886 B4BC                              l990 F53E  
                            l982 F0A0                              l958 EE76  
                            l895 B504                              l887 B4C4  
                            l975 EF7C                              l896 B50C  
                            l888 B4CC                              l968 EF28  
                            l897 B516                              l889 B4D4  
                            l993 F280                              l986 F0EC  
                            l987 F126                              l979 EFDA  
                            l997 F2E6                              l989 F23A  
                            l998 F3B8                              l999 F35A  
                   __CFG_CPB$OFF 000000                              wreg 000FE8  
                  _mainOperation BBB6           mainOperation@dietTable 0080  
                   __CFG_LVP$OFF 000000              standbyMode@dietType 0130  
                   __CFG_WDT$OFF 000000                             l1000 F3AC  
                           l1011 F6EA                             l1020 F916  
                           l1004 F3F8                             l1005 F432  
                           l1014 F846                             l1006 F552  
                           l1015 F796                             l1025 F8BA  
                           l1009 F600                             l1018 F7DA  
                           l1300 C6EE                             l1045 AEA4  
                           l1302 C80A                             l1310 C77C  
                           l1311 C78A                             l1320 C7E2  
                           l1312 C786                             l1314 C7C0  
                           l1331 C904                             l1323 C86E  
                           l1307 C840                             l1067 B31E  
                           l1420 B474                             l1340 C960  
                           l1332 C8BE                             l1316 C7D0  
                           l1308 C750                             l1421 B482  
                           l1413 B3FA                             l1317 C7CA  
                           l1309 C754                             l1422 B498  
                           l1414 B412                             l1326 C8F4  
                           l1351 CA46                             l1327 C888  
                           l1319 C7F8                             l1416 B440  
                           l1352 C9AA                             l1336 C91E  
                           l1417 B434                             l1353 CA56  
                           l1337 C942                             l1354 C9F4  
                           l1338 C94A                             l1339 C976  
                           l1291 C698                             l1348 C9A4  
                           l1292 C6A8                             l1349 CA5C  
                           l1294 C6BC                             l1295 C6B6  
                           l1713 B19A                             l1714 B18E  
                           l1717 B1CE                             l1718 B1DC  
                           l1770 AFB6                             l1771 AFC0  
                           l1780 AF18                             l1781 AF22  
                           l1766 AF96                             l1767 AF8E  
                           l1687 AE0A                             l1776 AF00  
                           l1777 AEF8                             l6310 AFFC  
                           l8000 B2EA                             l8002 B2F2  
                           l6610 B9F2                             l8202 ECF6  
                           l8300 EF84                             l8212 ED1E  
                           l6550 AE84                             l6454 D4BE  
                           l8312 EFDA                             l5850 C7E2  
                           l6714 E342                             l8316 EFE0  
                           l5846 C7CA                             l6646 E05E  
                           l8422 F2EC                             l8406 F290  
                           l6656 E09C                             l8098 AE46  
                           l5890 C8C2                             l7570 CBB8  
                           l8418 F2E6                             l5876 C88C  
                           l8540 F6F6                             l5958 ADCE  
                           l8580 F846                             _ADON 007E10  
                           l8662 BC62                             l7990 B2BE  
                           l7978 B28A                             l7988 B2B6  
                           STR_1 FC9C                             STR_2 FADE  
                           STR_3 FC69                             STR_4 FC5F  
                           STR_5 FCFD                             STR_6 FCE9  
                           STR_7 FCC0                             STR_8 FCEC  
                           STR_9 FCF4                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u6160 C97E                             u6170 C992  
                           _RCIE 007CED                             _RCIF 007CF5  
                           u6190 CA64                             u8040 E688  
                           u9000 CB92                             u8140 E884  
                           u7500 D3AE                             u8300 C57C  
                           u5910 AF04                             u7520 D4B4  
                           u8170 E948                             u8090 E786  
                           u7610 B19E                             u7530 D4BE  
                           u8330 C670                             u5835 B128  
                           u5836 B12A                             u5845 B168  
                           u7701 E046                             u5846 B16A  
                           u8510 C23A                             u8430 C1CC  
                           u7640 B9C0                             u5880 AF9A  
                           u7720 E09C                             u8360 C168  
                           u7810 E1C4                             u7730 E0B2  
                           u8610 C2B2                             u7900 E342  
                           u8700 C320                             u8540 C262  
                           u8460 C1F4                             u8390 C190  
                           u7671 DFF8                             u8480 C212  
                           u7681 E012                             u8801 BD86  
                           u7850 E266                             u7770 E122  
                           u7691 E02C                             u8740 C352  
                           u8670 C2F8                             u8921 CADA  
                           u7890 E308                             u8870 BDF0  
                           u8790 C38E                             _UART 0078  
                           u9880 BFF2                             u9970 C038  
                           _TRMT 007D61                             _TXIE 007CEC  
                           _TXIF 007CF4            __end_of_decode_drawer B58C  
                ??_getUserInputs 000D              standbyMode@foodType 0140  
              viewLogs@logNumber 005C                             _main B76C  
                           _keys F973                  food_press@F3117 00D0  
                           _uart 00F0                             fsr1h 000FE2  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                  get_digits@sum 0001                             prodh 000FF4  
                           prodl 000FF3           mainOperation@foodTable 0090  
                           start 0002                    __CFG_IESO$OFF 000000  
              viewLogs@keypress2 005D              standbyMode@keypress 016B  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
                    _writeEEPROM AE82                  diet_press@F3132 00C8  
                ?_verifyKeypress 0001                 __end_of_LCD_LEFT F9AF  
            standbyMode@whichKey 0169                  food_press@count 0035  
                food_press@tally 002F            I2C_Master_Read@ackBit 0002  
               ?_I2C_Master_Init 000E                 ?_I2C_Master_Read 0001  
               ?_I2C_Master_Wait 0001                 ?_I2C_Master_Stop 0001  
                __end_of___aldiv B4AA               writeEEPROM@address 0002  
                          ?_main 0001                            _EEADR 000FA9  
                          STR_10 FCBF                            STR_11 FCEB  
                          STR_20 FCC7                            STR_12 FCF3  
                          STR_21 FCD1                            STR_13 FCE7  
                          STR_30 FCF7                            STR_22 FCCC  
                          STR_14 FCEF                            STR_31 FCB9  
                          STR_23 FCBB                            STR_15 FCC3  
                          STR_40 FA2C                            STR_32 FCE3  
                          STR_24 FCE5                            STR_16 FCBE  
                          STR_41 FBAE                            STR_33 FCDF  
                          STR_25 FCFB                            STR_17 FCC8  
                          STR_50 FB39                            STR_42 FA3D  
                          STR_34 FCDB                            STR_26 FCBA  
                          STR_18 FCC2                            STR_43 FC09  
                          STR_51 FA7E                            STR_35 FCB8  
                          STR_27 FCE4                            STR_19 FCBD  
                          STR_36 FC94                            STR_52 FC8C  
                          STR_60 FB0C                            STR_44 FA0A  
                          STR_28 FCFA                            STR_45 FC73  
                          STR_61 FC2A                            STR_37 FC09  
                          STR_53 FA8E                            STR_29 FCE0  
                          STR_70 FA9E                            STR_54 FB36  
                          STR_62 FCD6                            STR_46 FCAB  
                          STR_38 FB1B                            STR_39 FC09  
                          STR_55 FB32                            STR_47 FA2C  
                          STR_63 FBE4                            STR_71 FB92  
                          STR_48 FBAE                            STR_72 FC1F  
                          STR_56 FB2E                            STR_80 FBF1  
                          STR_64 FACE                            STR_49 FCB2  
                          STR_81 FC4B                            STR_57 FB2A  
                          STR_73 FAFD                            STR_65 FA6E  
                          STR_66 FA6E                            STR_74 FAFD  
                          STR_82 FB57                            STR_90 FAAE  
                          STR_58 F9B4                            STR_91 FACE  
                          STR_75 FC9C                            STR_67 FB84  
                          STR_83 FB66                            STR_59 FA1B  
                          STR_76 FA2C                            STR_92 FC55  
                          STR_84 FC40                            STR_68 FC1F  
                          STR_85 FBFE                            STR_69 FA9E  
                          STR_93 FA5E                            STR_77 F9E8  
                          STR_86 FBBC                            STR_94 FB75  
                          STR_78 FABE                            STR_87 F9E8  
                          STR_95 FC7C                            STR_79 FA4E  
                          STR_96 FC55                            STR_88 FBD7  
                          STR_97 FA5E                            STR_89 F9D7  
                          STR_98 FB75                            STR_99 FC7C  
                          u10010 C0A8                  __end_of___lldiv B1EE  
                          u10100 B2EA                            u10020 C0D0  
              viewLogs@returnVal 0058                            u10300 ED1E  
                          u10221 EAA8                            u10055 B050  
                          u10231 EABA                            u10160 B444  
                          u10080 B2B6                            u10065 AE2E  
                          u10241 EACC                            u10066 AE30  
                          u10330 EE86                            u10251 EADE  
                          u10340 EE8E                            u10261 EAF0  
                          u10430 EFE0                            u10350 EE9A  
                          u12007 F8FE                            u10271 EB02  
                          u12017 F922                            u10610 F6F6  
                          u10530 F2EC                            u10195 B210  
                          u12107 C4B6                            u12027 F95A  
                          u10380 EF44                            u10701 BBE2  
                          u12117 C4D6                            u12037 BF48  
                          u10711 BBF4                            u12207 D10C  
                          u12127 C50E                            u12047 C0EC  
                          u10721 BC06                            u12217 D162  
                          u12137 C528                            u12057 C3D4  
                          u10650 F778                            u10731 BC18  
                          u12307 D366                            u12227 D1A4  
                          u12147 C5DC                            u12067 C406  
                          u10660 F846                            u12317 D386  
                          u12237 D1C2                            u12157 C5F4  
                          u12077 C438                            u10670 F858  
                          u10590 F5FE                            u12407 CA8C  
                          u12327 D3BC                            u12247 D214  
                          u12167 C614                            u12087 C46A  
                          u11607 B816                            u12417 CB28  
                          u12337 D4A2                            u12257 D258  
                          u12177 C62C                            u12097 C484  
                          u11617 B836                            u12507 B110  
                          u12427 CF60                            u12347 D4CA  
                          u12267 D29C                            u12187 C65E  
                          u11707 EDDA                            u11627 EB94  
                          u12517 B11A                            u12437 CF92  
                          u12357 D4FC                            u12277 D2E0  
                          u12197 D0C2                            u11717 EDF4  
                          u11637 EBBA                            u12527 B150  
                          u12447 BCD8                            u12367 BD48  
                          u12287 D2FE                            u11807 F05A  
                          u11727 EE26                            u11647 EBD4  
                          u12537 B15A                            u12457 BD26  
                          u12377 BE5C                            u12297 D348  
                          u11817 F092                            u11737 EE40  
                          u11657 EC0C                            u12467 ADEC  
                          u12387 BEEC                            u11907 F590  
                          u11827 F0B8                            u11747 EEA6  
                          u11667 EC44                            u12477 AF32  
                          u12397 BF1E                            u11917 F5A8  
                          u11837 F24C                            u11757 EEDE  
                          u11677 ED38                            u11597 B7A8  
                          u12487 AF66                            u11927 F5DA  
                          u11847 F308                            u11767 EEFA  
                          u11687 ED6A                            u12497 ADC4  
                          u11937 F626                            u11857 F340  
                          u11777 EF50                            u11697 ED84  
                          u11947 F6DE                            u11867 F366  
                          u11787 EFFC                            u11957 F702  
                          u11877 F39E                            u11797 F034  
                          u11967 F734                            u11887 F3C4  
                          u11977 F886                            u11897 F55E  
                          u11987 F8AC                            u11997 F8C6  
                __end_of___lwdiv AFCA                  __end_of___lwmod AF2C  
                          _RCREG 000FAE                            _SPBRG 000FAF  
                          _PORTB 000F81               sortDrawerList@temp 002B  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                   ?_mainOperation 0001  
                          _TXREG 000FAD                    __CFG_PWRT$OFF 000000  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                  __end_of_getFlat B67C  
                  __CFG_WRT3$OFF 000000                  diet_press@count 0033  
                __end_of_lcdInst ADCC                  __end_of_getLong B978  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000               __size_of_UART_Init 0084  
                    initEEPROM@i 0003                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                __end_of_initLCD AF78                   __CFG_EBTRB$OFF 000000  
           __size_of_decode_diet 0124                  __end_of_dpowers F99F  
             printFoodInput@food 0001                     displayLogs@i 0046  
                   displayLogs@n 0050                  __end_of_isdigit AE12  
                          _input F984                            _rowUp 007F  
                          _putch ADE0                            main@i 0066  
                          tablat 000FF5             standbyMode@logNumber 017F  
              _LCDinterruptState 0076                            plusw1 000FE3  
                          plusw2 000FDB                            status 000FD8  
    I2C_Master_Read@receivedByte 0003             standbyMode@keypress1 0176  
                 __CFG_PBADEN$ON 000000                  standbyMode@diet 0180  
                standbyMode@flat 016E                  standbyMode@food 0184  
                standbyMode@time 0160                  standbyMode@zero 0179  
                __initialization B078                     __end_of_main B862  
                   __end_of_keys F984                   _sortDrawerList DFDE  
                   standbyMode@i 0188                     standbyMode@n 017B  
                   standbyMode@x 017D                 ??_printFoodInput 0003  
                 __CFG_OSC$HSPLL 000000                __end_of_LCD_RIGHT F9B0  
               food_press@drawer 002B                           ??_main 0064  
                  __activetblptr 000003              sortDrawerList@F3072 006C  
            sortDrawerList@F3081 00D8              sortDrawerList@F3075 00E8  
            sortDrawerList@F3078 00E0              food_press@backCheck 0031  
              ?_I2C_Master_Start 0001                ?_I2C_Master_Write 0002  
                   ?_shiftEEPROM 0001               ??_I2C_Master_Start 0002  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
             ??_I2C_Master_Write 0004            standbyMode@flatPieces 0110  
                         STR_100 F9F9                           STR_101 FBA0  
                         STR_110 FC14                           STR_102 FC35  
                         STR_111 FBCA                           STR_103 FC84  
                         STR_112 FC14                           STR_104 FC2A  
                         STR_105 FCD6                           STR_113 FCA4  
                         STR_106 FB48                           STR_114 F9C6  
                         _ADRESH 000FC4                           STR_107 FAEE  
                         STR_108 FC14                           STR_109 FBCA  
                         _ADRESL 000FC3                           _EEDATA 000FA8  
                         _EECON2 000FA7                           ?_putch 0001  
        mainOperation@nextDrawer 00B2                           _SSPADD 000FC8  
                         _TRISC6 007CA6                           _TRISC7 007CA7  
                         _SSPBUF 000FC9                 diet_press@drawer 0029  
      standbyMode@storedFoodType 0174           __end_of_sortDrawerList EA9E  
                 __CFG_XINST$OFF 000000                 __end_of_getRound B76C  
              __end_of_UART_Init B272                        ??___aldiv 0009  
                         ___wmul AE5C                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                        ??___lwdiv 0005  
                      ??___lwmod 000C           decode_diet@returnValue 0005  
                         clear_0 B0BE                           clear_1 B0CA  
                         clear_2 B0D6                           clear_3 B0E2  
                         _inputs 0240                   _firstIteration 0074  
                      ??_getFlat 0003                        ??_lcdInst 0003  
                         _printf C68E                        ??_getLong 0003  
           __size_of_displayLogs 0570                  ??_mainOperation 0037  
            food_press@foodTable 0038                        ??_initLCD 0004  
                get_digits@count 0005                     __pdataCOMRAM 0078  
                      ??_isdigit 0001         getUserInputs@drawerTable 0007  
                   __mediumconst F972                 __end_of_viewLogs C68E  
       mainOperation@drawerTable 00A0                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               standbyMode@F3160 0210                 standbyMode@F3152 01AA  
               standbyMode@F3162 0200                 standbyMode@F3154 019A  
               standbyMode@F3156 018A                 standbyMode@F3158 0220  
            decode_diet@dietType 0001            standbyMode@longPieces 0120  
                     __accesstop 0080          __end_of__initialization B0E8  
           which_drawer@keypress 0034                    ___rparam_used 000001  
               standbyMode@round 016C                  writeEEPROM@data 0001  
                viewLogs@logView 005A           standbyMode@decodedDiet 0172  
                ?_sortDrawerList 0001                     ?_standbyMode 005E  
           __end_of_happynewyear F9AE                   __pcstackCOMRAM 0001  
                   __pidataBANK2 AEAC                    __end_of_input F995  
                  __end_of_putch ADF4               __size_of_lcdNibble 007E  
                  check_food@sum 0001        sortDrawerList@drawerTable 0001  
              food_press@dietSum 0029                food_press@isValid 0033  
                        ??_putch 0003                       __pbssBANK0 00C8  
                     __pbssBANK1 018A                       __pbssBANK2 0200  
                     _check_food D522                mainOperation@temp 00B0  
               ??_verifyKeypress 0003                     ?_writeEEPROM 0001  
                        ?___wmul 0001                       _diet_press CA80  
        displayLogs@drawerNumber 0044                          ?_printf 000D  
                     _arr_dataRX 0230                       _get_digits B320  
           sortDrawerList@count1 002D             sortDrawerList@count2 0031  
           sortDrawerList@count3 002F             sortDrawerList@count4 0029  
                      ?_getRound 0001                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5                       _drawerDown 007A  
                        _SSPSTAT 000FC7             __size_of_shiftEEPROM 00AE  
                     _columnLeft 007D                       _foodInputs 0264  
                     _initEEPROM AE36                       _readEEPROM ADCC  
         standbyMode@drawerCount 0186            __end_of_getUserInputs BA92  
                     _food_press BD3C                __end_of_lcdNibble B16C  
                        __Hparam 0000                          __Lparam 0000  
                      ?_viewLogs 0052                          ___aldiv B3DE  
       displayLogs@operationTime 0042                          ___lldiv B16C  
                __size_of___wmul 0026                          ___lwdiv AF78  
                        ___lwmod AEEA                          __pcinit B078  
                        __ramtop 1000                          _getFlat B58C  
                        _lcdInst ADB8                          _getLong B862  
                        __ptext0 B76C                          __ptext1 EA9E  
                        __ptext2 BF36                          __ptext3 B4AA  
                        __ptext4 C3A2                          __ptext5 AFCA  
                        __ptext6 CFB2                          __ptext7 B272  
                        __ptext8 C14C                          __ptext9 B67C  
         __size_of_decode_drawer 00E2                  __size_of_printf 03F2  
                        _initLCD AF2C                __end_of_hexpowers F9A7  
                        _dpowers F995                    ??_decode_diet 0003  
          which_drawer@backCheck 0030                          _isdigit ADF4  
                 displayLogs@day 0031                 ___aldiv@dividend 0001  
                      _LCD_RIGHT F9AF         __size_of_I2C_Master_Init 005C  
       __size_of_I2C_Master_Read 0024         __size_of_I2C_Master_Wait 0012  
           displayLogs@logNumber 0029         __size_of_I2C_Master_Stop 0008  
                        _rowDown 007E                       ??_getRound 0003  
           end_of_initialization B0E8             displayLogs@keypress3 0041  
                which_drawer@sum 002E            __end_of_LCD_SIZE_HORZ F9B2  
                    ?_check_food 0001            __end_of_LCD_SIZE_VERT F9B1  
              main@operationMode 0068        __size_of_I2C_Master_Start 0008  
      __size_of_I2C_Master_Write 000A                  ___lldiv@divisor 0005  
                ___lldiv@counter 000D                        _RCSTAbits 000FAB  
                        printf@c 0028                          printf@f 000D  
               ___aldiv@quotient 000B                          postdec1 000FE5  
                        postdec2 000FDD                       ??_viewLogs 0054  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE             __size_of_standbyMode 0ED4  
                    ?_diet_press 0029                        _UART_Init B1EE  
                      _PORTBbits 000F81                    ?_which_drawer 0029  
            diet_press@backCheck 0031                      ?_get_digits 0001  
         sortDrawerList@sublist1 0009           sortDrawerList@sublist2 0019  
         sortDrawerList@sublist3 0021           sortDrawerList@sublist4 0011  
                      _TRISCbits 000F94                 viewLogs@checkLog 0056  
                   _happynewyear F9A7                readEEPROM@address 0001  
            __end_of_decode_diet BBB6                standbyMode@drawer 0182  
                    ?_initEEPROM 0001                 ??_sortDrawerList 0005  
                  _decode_drawer B4AA                      ?_readEEPROM 0001  
                    printf@width 0026                        _TXSTAbits 000FAC  
                    ?_food_press 0029              diet_press@dietTable 0038  
                main@checkEEPROM 006A                    ??_displayLogs 002B  
           __size_of_writeEEPROM 002A                   __end_of___wmul AE82  
                     ?_UART_Init 000F                    __pidataCOMRAM AD94  
         standbyMode@validDrawer 0177              __size_of_check_food 0ABC  
                 ??_which_drawer 002B                   __end_of_printf CA80  
          __end_of_mainOperation BD3C              start_initialization B078  
                 standbyMode@lng 0170          __size_of_printFoodInput 0256  
                 ?_decode_drawer 0001              __size_of_diet_press 0532  
              ??_I2C_Master_Init 0012                ??_I2C_Master_Read 0002  
              ??_I2C_Master_Wait 0001                ??_I2C_Master_Stop 0002  
   standbyMode@drawerInformation 0150              __size_of_get_digits 00BE  
             mainOperation@F3131 01CA                         ??___wmul 0005  
             mainOperation@F3133 01BA               mainOperation@F3127 01EA  
             mainOperation@F3129 01DA         I2C_Master_Init@clockFreq 000E  
                    __pdataBANK2 0240                 __CFG_LPT1OSC$OFF 000000  
                       ??_printf 0017              __size_of_initEEPROM 0026  
             food_press@keypress 0037              __size_of_readEEPROM 0014  
            __end_of_displayLogs D522              __size_of_food_press 01FA  
                    __pbssCOMRAM 006C                      _decode_diet BA92  
                  __pcstackBANK0 0080                    __pcstackBANK1 0100  
                sortDrawerList@i 0035                  sortDrawerList@j 0033  
                   _isdigit$1573 0002              decode_drawer@drawer 0001  
              __size_of_getRound 00F0           standbyMode@roundPieces 0100  
               _I2C_Master_Start AD84                 _I2C_Master_Write AD9C  
                 mainOperation@i 00C6                 ___lwdiv@dividend 0001  
              __CFG_CCP2MX$PORTC 000000               _UARTinterruptState 0077  
                  __pmediumconst F972                    UART_Init@baud 000F  
                      _lcdNibble B0EE                         ?___aldiv 0001  
                       ?___lldiv 0001               getUserInputs@count 0011  
                       ?___lwdiv 0001                         ?___lwmod 0008  
                    ??_UART_Init 0013                __size_of_viewLogs 02EC  
                       ?_getFlat 0001                         ?_lcdInst 0001  
                       ?_getLong 0001                         ?_initLCD 0001  
                       ?_isdigit 0001              check_food@foodInput 0003  
                  ??_shiftEEPROM 0003              displayLogs@dietType 003D  
                      _hexpowers F99F                 ___lwdiv@quotient 0005  
                ??_decode_drawer 0003                   __size_of_putch 0014  
            displayLogs@foodType 003F                     ??_check_food 0005  
                       _LCD_LEFT F9AE                 displayLogs@month 002F  
                ___aldiv@divisor 0005                  ___aldiv@counter 0009  
                 ___wmul@product 0005                         _LATCbits 000F8B  
                       _LATDbits 000F8C             __end_of_which_drawer C14C  
               __CFG_WDTPS$32768 000000                       ?_lcdNibble 0001  
                   ??_diet_press 002B                     shiftEEPROM@i 0006  
                    _displayLogs CFB2  sortDrawerList@sortedDrawerTable 0003  
        __size_of_verifyKeypress 0052                       _ADCON0bits 000FC2  
              ___wmul@multiplier 0001               __end_of_check_food DFDE  
                  lcdNibble@data 0002                       printf@flag 0025  
                    _columnRight 007C                    lcdNibble@temp 0001  
                     printf@prec 001C                     ??_get_digits 0003  
         __size_of_getUserInputs 011A                   _printFoodInput C14C  
                 _LCD_HORZ_LIMIT F9B3                    diet_press@sum 0035  
                      copy_data0 B08C                        copy_data1 B0AC  
              which_drawer@count 0032                     ??_initEEPROM 0003  
            __end_of_shiftEEPROM B320           getUserInputs@dietTable 0009  
             __end_of_diet_press CFB2                     ??_readEEPROM 0001  
                   ??_food_press 002D               diet_press@keypress 0037  
                     _EECON1bits 000FA6                         __Hrparam 0000  
                  ??_standbyMode 0060                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000               __end_of_get_digits B3DE  
             diet_press@previous 002D   mainOperation@sortedDrawerTable 00B6  
         getUserInputs@foodTable 000B                 __size_of___aldiv 00CC  
               __size_of___lldiv 0082            displayLogs@flatPieces 0035  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
               __size_of_getFlat 00F0                 __size_of_lcdInst 0014  
               __size_of_getLong 0116           __end_of_printFoodInput C3A2  
         getUserInputs@logNumber 000F               __end_of_initEEPROM AE5C  
                _I2C_Master_Init B01C                  _I2C_Master_Read AE12  
               __size_of_initLCD 004C                  _I2C_Master_Wait ADA6  
             __end_of_readEEPROM ADE0                  _I2C_Master_Stop AD8C  
         __end_of_LCD_HORZ_LIMIT F9B4                 __size_of_isdigit 001E  
             __end_of_food_press BF36                  ___lwdiv@divisor 0003  
                ___lwdiv@counter 0007                getUserInputs@data 0015  
                       __ptext10 B862                         __ptext11 B58C  
                       __ptext20 AE12                         __ptext12 BD3C  
                       __ptext21 ADA6                         __ptext13 B320  
                       __ptext30 AF78                         __ptext22 B01C  
                       __ptext14 D522                         __ptext31 B978  
                       __ptext23 B16C                         __ptext15 CA80  
                       __ptext40 B3DE                         __ptext32 ADCC  
                       __ptext24 BBB6                         __ptext16 BA92  
                       __ptext33 AE5C                         __ptext25 DFDE  
                       __ptext17 AD9C                         __ptext34 AF2C  
                       __ptext26 C68E                         __ptext18 AD8C  
                       __ptext35 ADB8                         __ptext27 ADE0  
                       __ptext19 AD84                         __ptext36 B0EE  
                       __ptext28 ADF4                         __ptext37 AE36  
                       __ptext29 AEEA                         __ptext38 AE82  
                       __ptext39 B1EE                         _getRound B67C  
                 _LCD_VERT_LIMIT F9B2                         _drawerUp 007B  
                  __size_of_main 00F6                  displayLogs@year 002D  
                  _getUserInputs B978               displayLogs@minutes 0039  
             displayLogs@seconds 003B                    ??_writeEEPROM 0002  
       displayLogs@markedDrawer1 0048         displayLogs@markedDrawer2 004A  
       displayLogs@markedDrawer3 004C         displayLogs@markedDrawer4 004E  
                    ??_lcdNibble 0001                         _viewLogs C3A2  
                verifyKeypress@i 0008               getLong@returnValue 0005  
                      printf@idx 001B                        printf@len 0021  
                      printf@val 0023              __end_of_standbyMode F972  
    I2C_Master_Write@byteToWrite 0002         decode_drawer@returnValue 0005  
          displayLogs@longPieces 0037                  ?_printFoodInput 0001  
               which_drawer@rand 002C                        putch@data 0003  
       __end_of_I2C_Master_Start AD8C         __end_of_I2C_Master_Write ADA6  
                     _INTCONbits 000FF2                     ?_decode_diet 0001  
         __end_of_LCD_VERT_LIMIT F9B3                      _shiftEEPROM B272  
                       isdigit@c 0003            __size_of_which_drawer 0216  
                    getFlat@code 0001        standbyMode@firstIteration 0167  
                  _LCD_SIZE_HORZ F9B1                 ___lwmod@dividend 0008  
                  _LCD_SIZE_VERT F9B0                 ___lldiv@dividend 0001  
        verifyKeypress@logNumber 0005                   ?_getUserInputs 0007  
         __size_of_mainOperation 0186               getFlat@returnValue 0005  
         displayLogs@roundPieces 0033                         printf@ap 001F  
                       printf@cp 001D          __size_of_sortDrawerList 0AC0  
                    diet_press@i 002F          __end_of_I2C_Master_Init B078  
        __end_of_I2C_Master_Read AE36          __end_of_I2C_Master_Wait ADB8  
        __end_of_I2C_Master_Stop AD94                      lcdInst@data 0003  
                shiftEEPROM@temp 0004                   _verifyKeypress AFCA  
            getRound@returnValue 0005                      getLong@code 0001  
            __end_of_writeEEPROM AEAC          verifyKeypress@returnVal 0006  
               ___lldiv@quotient 0009                     _which_drawer BF36  
                ___lwmod@divisor 000A                  ___lwmod@counter 000C  
                   ___aldiv@sign 000A           verifyKeypress@keypress 0001  
                    _SSPCON1bits 000FC6                      _SSPCON2bits 000FC5  
                 getUserInputs@i 0017                   getUserInputs@n 0013  
                   getRound@code 0001            check_food@returnValue 0007  
     mainOperation@currentDrawer 00B4  
