

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar  6 00:31:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  00C352                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _UART
    97  00C352  60                 	db	low _uart
    98  00C353  01                 	db	high _uart
    99                           
   100                           ;initializer for _columnRight
   101  00C354  34                 	db	52
   102                           
   103                           ;initializer for _columnLeft
   104  00C355  33                 	db	51
   105                           
   106                           ;initializer for _rowDown
   107  00C356  32                 	db	50
   108                           
   109                           ;initializer for _rowUp
   110  00C357  31                 	db	49
   111                           
   112                           	psect	idataBANK1
   113  00C418                     __pidataBANK1:
   114                           	opt stack 0
   115                           
   116                           ;initializer for _inputs
   117  00C418  FC                 	db	low STR_2
   118  00C419  FF                 	db	high STR_2
   119  00C41A  EE                 	db	low (STR_10+2)
   120  00C41B  FF                 	db	high (STR_10+2)
   121  00C41C  D6                 	db	low (STR_16+3)
   122  00C41D  FF                 	db	high (STR_16+3)
   123  00C41E  F1                 	db	low (STR_8+1)
   124  00C41F  FF                 	db	high (STR_8+1)
   125  00C420  F9                 	db	low (STR_9+1)
   126  00C421  FF                 	db	high (STR_9+1)
   127  00C422  D5                 	db	low (STR_16+2)
   128  00C423  FF                 	db	high (STR_16+2)
   129  00C424  F0                 	db	low STR_8
   130  00C425  FF                 	db	high STR_8
   131  00C426  F8                 	db	low STR_9
   132  00C427  FF                 	db	high STR_9
   133  00C428  EC                 	db	low STR_10
   134  00C429  FF                 	db	high STR_10
   135  00C42A  F4                 	db	low STR_11
   136  00C42B  FF                 	db	high STR_11
   137  00C42C  D9                 	db	low (STR_15+1)
   138  00C42D  FF                 	db	high (STR_15+1)
   139  00C42E  D4                 	db	low (STR_16+1)
   140  00C42F  FF                 	db	high (STR_16+1)
   141  00C430  DE                 	db	low (STR_17+1)
   142  00C431  FF                 	db	high (STR_17+1)
   143  00C432  D8                 	db	low STR_15
   144  00C433  FF                 	db	high STR_15
   145  00C434  D3                 	db	low STR_16
   146  00C435  FF                 	db	high STR_16
   147  00C436  DD                 	db	low STR_17
   148  00C437  FF                 	db	high STR_17
   149  00C438  E7                 	db	low STR_18
   150  00C439  FF                 	db	high STR_18
   151  00C43A  E2                 	db	low STR_19
   152  00C43B  FF                 	db	high STR_19
   153                           
   154                           	psect	mediumconst
   155  00FCFE                     __pmediumconst:
   156                           	opt stack 0
   157  00FCFE  00                 	db	0
   158  00FCFF                     _keys:
   159                           	opt stack 0
   160  00FCFF  31                 	db	49
   161  00FD00  32                 	db	50
   162  00FD01  33                 	db	51
   163  00FD02  41                 	db	65
   164  00FD03  34                 	db	52
   165  00FD04  35                 	db	53
   166  00FD05  36                 	db	54
   167  00FD06  42                 	db	66
   168  00FD07  37                 	db	55
   169  00FD08  38                 	db	56
   170  00FD09  39                 	db	57
   171  00FD0A  43                 	db	67
   172  00FD0B  2A                 	db	42
   173  00FD0C  30                 	db	48
   174  00FD0D  23                 	db	35
   175  00FD0E  44                 	db	68
   176  00FD0F  00                 	db	0
   177  00FD10                     __end_of_keys:
   178                           	opt stack 0
   179  00FD10                     _input:
   180                           	opt stack 0
   181  00FD10  31                 	db	49
   182  00FD11  32                 	db	50
   183  00FD12  33                 	db	51
   184  00FD13  52                 	db	82
   185  00FD14  34                 	db	52
   186  00FD15  35                 	db	53
   187  00FD16  36                 	db	54
   188  00FD17  46                 	db	70
   189  00FD18  37                 	db	55
   190  00FD19  38                 	db	56
   191  00FD1A  39                 	db	57
   192  00FD1B  4C                 	db	76
   193  00FD1C  2A                 	db	42
   194  00FD1D  30                 	db	48
   195  00FD1E  23                 	db	35
   196  00FD1F  44                 	db	68
   197  00FD20  00                 	db	0
   198  00FD21                     __end_of_input:
   199                           	opt stack 0
   200  00FD21                     _dpowers:
   201                           	opt stack 0
   202  00FD21  0001               	dw	1
   203  00FD23  000A               	dw	10
   204  00FD25  0064               	dw	100
   205  00FD27  03E8               	dw	1000
   206  00FD29  2710               	dw	10000
   207  00FD2B                     __end_of_dpowers:
   208                           	opt stack 0
   209  00FD2B                     _hexpowers:
   210                           	opt stack 0
   211  00FD2B  0001               	dw	1
   212  00FD2D  0010               	dw	16
   213  00FD2F  0100               	dw	256
   214  00FD31  1000               	dw	4096
   215  00FD33                     __end_of_hexpowers:
   216                           	opt stack 0
   217  00FD33                     _happynewyear:
   218                           	opt stack 0
   219  00FD33  00                 	db	0
   220  00FD34  28                 	db	40
   221  00FD35  00                 	db	0
   222  00FD36  06                 	db	6
   223  00FD37  24                 	db	36
   224  00FD38  02                 	db	2
   225  00FD39  18                 	db	24
   226  00FD3A                     __end_of_happynewyear:
   227                           	opt stack 0
   228  00FD3A                     _LCD_LEFT:
   229                           	opt stack 0
   230  00FD3A  00                 	db	0
   231  00FD3B                     __end_of_LCD_LEFT:
   232                           	opt stack 0
   233  00FD3B                     _LCD_RIGHT:
   234                           	opt stack 0
   235  00FD3B  01                 	db	1
   236  00FD3C                     __end_of_LCD_RIGHT:
   237                           	opt stack 0
   238  00FD3C                     _LCD_SIZE_VERT:
   239                           	opt stack 0
   240  00FD3C  02                 	db	2
   241  00FD3D                     __end_of_LCD_SIZE_VERT:
   242                           	opt stack 0
   243  00FD3D                     _LCD_SIZE_HORZ:
   244                           	opt stack 0
   245  00FD3D  10                 	db	16
   246  00FD3E                     __end_of_LCD_SIZE_HORZ:
   247                           	opt stack 0
   248  00FD3E                     _LCD_VERT_LIMIT:
   249                           	opt stack 0
   250  00FD3E  02                 	db	2
   251  00FD3F                     __end_of_LCD_VERT_LIMIT:
   252                           	opt stack 0
   253  00FD3F                     _LCD_HORZ_LIMIT:
   254                           	opt stack 0
   255  00FD3F  28                 	db	40
   256  00FD40                     __end_of_LCD_HORZ_LIMIT:
   257                           	opt stack 0
   258  0000                     _SPBRG	set	4015
   259  0000                     _RCREG	set	4014
   260  0000                     _RCSTAbits	set	4011
   261  0000                     _TXREG	set	4013
   262  0000                     _TXSTAbits	set	4012
   263  0000                     _ADRESL	set	4035
   264  0000                     _ADRESH	set	4036
   265  0000                     _ADCON0bits	set	4034
   266  0000                     _SSPBUF	set	4041
   267  0000                     _SSPCON2bits	set	4037
   268  0000                     _SSPADD	set	4040
   269  0000                     _SSPCON2	set	4037
   270  0000                     _SSPCON1	set	4038
   271  0000                     _SSPSTAT	set	4039
   272  0000                     _SSPCON1bits	set	4038
   273  0000                     _EECON2	set	4007
   274  0000                     _EEDATA	set	4008
   275  0000                     _EEADR	set	4009
   276  0000                     _EECON1bits	set	4006
   277  0000                     _PORTB	set	3969
   278  0000                     _PORTBbits	set	3969
   279  0000                     _INTCONbits	set	4082
   280  0000                     _LATDbits	set	3980
   281  0000                     _LATCbits	set	3979
   282  0000                     _TRISCbits	set	3988
   283  0000                     _ADCON1	set	4033
   284  0000                     _ADCON0	set	4034
   285  0000                     _TRISE	set	3990
   286  0000                     _TRISD	set	3989
   287  0000                     _TRISC	set	3988
   288  0000                     _TRISB	set	3987
   289  0000                     _TRISA	set	3986
   290  0000                     _LATE	set	3981
   291  0000                     _LATD	set	3980
   292  0000                     _LATC	set	3979
   293  0000                     _LATB	set	3978
   294  0000                     _LATA	set	3977
   295  0000                     _TRISC7	set	31911
   296  0000                     _TRISC6	set	31910
   297  0000                     _RCIE	set	31981
   298  0000                     _RCIF	set	31989
   299  0000                     _TXIE	set	31980
   300  0000                     _TRMT	set	32097
   301  0000                     _TXIF	set	31988
   302  0000                     _ADON	set	32272
   303  00FD40                     STR_42:
   304  00FD40  52                 	db	82	;'R'
   305  00FD41  65                 	db	101	;'e'
   306  00FD42  6D                 	db	109	;'m'
   307  00FD43  61                 	db	97	;'a'
   308  00FD44  69                 	db	105	;'i'
   309  00FD45  6E                 	db	110	;'n'
   310  00FD46  69                 	db	105	;'i'
   311  00FD47  6E                 	db	110	;'n'
   312  00FD48  67                 	db	103	;'g'
   313  00FD49  20                 	db	32
   314  00FD4A  70                 	db	112	;'p'
   315  00FD4B  69                 	db	105	;'i'
   316  00FD4C  65                 	db	101	;'e'
   317  00FD4D  63                 	db	99	;'c'
   318  00FD4E  65                 	db	101	;'e'
   319  00FD4F  73                 	db	115	;'s'
   320  00FD50  3A                 	db	58	;':'
   321  00FD51  00                 	db	0
   322  00FD52                     STR_90:
   323  00FD52  30                 	db	48	;'0'
   324  00FD53  31                 	db	49	;'1'
   325  00FD54  32                 	db	50	;'2'
   326  00FD55  33                 	db	51	;'3'
   327  00FD56  34                 	db	52	;'4'
   328  00FD57  35                 	db	53	;'5'
   329  00FD58  36                 	db	54	;'6'
   330  00FD59  37                 	db	55	;'7'
   331  00FD5A  38                 	db	56	;'8'
   332  00FD5B  39                 	db	57	;'9'
   333  00FD5C  61                 	db	97	;'a'
   334  00FD5D  62                 	db	98	;'b'
   335  00FD5E  63                 	db	99	;'c'
   336  00FD5F  64                 	db	100	;'d'
   337  00FD60  65                 	db	101	;'e'
   338  00FD61  66                 	db	102	;'f'
   339  00FD62  00                 	db	0
   340  00FD63                     STR_73:
   341  00FD63  64                 	db	100	;'d'
   342  00FD64  72                 	db	114	;'r'
   343  00FD65  61                 	db	97	;'a'
   344  00FD66  77                 	db	119	;'w'
   345  00FD67  65                 	db	101	;'e'
   346  00FD68  72                 	db	114	;'r'
   347  00FD69  73                 	db	115	;'s'
   348  00FD6A  20                 	db	32
   349  00FD6B  72                 	db	114	;'r'
   350  00FD6C  65                 	db	101	;'e'
   351  00FD6D  61                 	db	97	;'a'
   352  00FD6E  63                 	db	99	;'c'
   353  00FD6F  68                 	db	104	;'h'
   354  00FD70  65                 	db	101	;'e'
   355  00FD71  64                 	db	100	;'d'
   356  00FD72  21                 	db	33
   357  00FD73  00                 	db	0
   358  00FD74                     STR_61:
   359  00FD74  62                 	db	98	;'b'
   360  00FD75  65                 	db	101	;'e'
   361  00FD76  67                 	db	103	;'g'
   362  00FD77  69                 	db	105	;'i'
   363  00FD78  6E                 	db	110	;'n'
   364  00FD79  20                 	db	32
   365  00FD7A  6F                 	db	111	;'o'
   366  00FD7B  70                 	db	112	;'p'
   367  00FD7C  65                 	db	101	;'e'
   368  00FD7D  72                 	db	114	;'r'
   369  00FD7E  61                 	db	97	;'a'
   370  00FD7F  74                 	db	116	;'t'
   371  00FD80  69                 	db	105	;'i'
   372  00FD81  6F                 	db	111	;'o'
   373  00FD82  6E                 	db	110	;'n'
   374  00FD83  2E                 	db	46
   375  00FD84  00                 	db	0
   376  00FD85                     STR_28:
   377  00FD85  50                 	db	80	;'P'
   378  00FD86  6C                 	db	108	;'l'
   379  00FD87  65                 	db	101	;'e'
   380  00FD88  61                 	db	97	;'a'
   381  00FD89  73                 	db	115	;'s'
   382  00FD8A  65                 	db	101	;'e'
   383  00FD8B  20                 	db	32
   384  00FD8C  69                 	db	105	;'i'
   385  00FD8D  6E                 	db	110	;'n'
   386  00FD8E  70                 	db	112	;'p'
   387  00FD8F  75                 	db	117	;'u'
   388  00FD90  74                 	db	116	;'t'
   389  00FD91  20                 	db	32
   390  00FD92  6C                 	db	108	;'l'
   391  00FD93  6F                 	db	111	;'o'
   392  00FD94  67                 	db	103	;'g'
   393  00FD95  00                 	db	0
   394  00FD96                     STR_43:
   395  00FD96  52                 	db	82	;'R'
   396  00FD97  3A                 	db	58	;':'
   397  00FD98  25                 	db	37
   398  00FD99  69                 	db	105	;'i'
   399  00FD9A  20                 	db	32
   400  00FD9B  20                 	db	32
   401  00FD9C  46                 	db	70	;'F'
   402  00FD9D  3A                 	db	58	;':'
   403  00FD9E  25                 	db	37
   404  00FD9F  69                 	db	105	;'i'
   405  00FDA0  20                 	db	32
   406  00FDA1  20                 	db	32
   407  00FDA2  4C                 	db	76	;'L'
   408  00FDA3  3A                 	db	58	;':'
   409  00FDA4  25                 	db	37
   410  00FDA5  69                 	db	105	;'i'
   411  00FDA6  00                 	db	0
   412  00FDA7                     STR_24:
   413  00FDA7  50                 	db	80	;'P'
   414  00FDA8  72                 	db	114	;'r'
   415  00FDA9  65                 	db	101	;'e'
   416  00FDAA  73                 	db	115	;'s'
   417  00FDAB  73                 	db	115	;'s'
   418  00FDAC  20                 	db	32
   419  00FDAD  61                 	db	97	;'a'
   420  00FDAE  6E                 	db	110	;'n'
   421  00FDAF  79                 	db	121	;'y'
   422  00FDB0  20                 	db	32
   423  00FDB1  6B                 	db	107	;'k'
   424  00FDB2  65                 	db	101	;'e'
   425  00FDB3  79                 	db	121	;'y'
   426  00FDB4  20                 	db	32
   427  00FDB5  74                 	db	116	;'t'
   428  00FDB6  6F                 	db	111	;'o'
   429  00FDB7  00                 	db	0
   430  00FDB8                     STR_26:
   431  00FDB8  25                 	db	37
   432  00FDB9  69                 	db	105	;'i'
   433  00FDBA  20                 	db	32
   434  00FDBB  70                 	db	112	;'p'
   435  00FDBC  72                 	db	114	;'r'
   436  00FDBD  65                 	db	101	;'e'
   437  00FDBE  76                 	db	118	;'v'
   438  00FDBF  69                 	db	105	;'i'
   439  00FDC0  6F                 	db	111	;'o'
   440  00FDC1  75                 	db	117	;'u'
   441  00FDC2  73                 	db	115	;'s'
   442  00FDC3  20                 	db	32
   443  00FDC4  6C                 	db	108	;'l'
   444  00FDC5  6F                 	db	111	;'o'
   445  00FDC6  67                 	db	103	;'g'
   446  00FDC7  73                 	db	115	;'s'
   447  00FDC8  00                 	db	0
   448  00FDC9                     STR_63:
   449  00FDC9  63                 	db	99	;'c'
   450  00FDCA  61                 	db	97	;'a'
   451  00FDCB  62                 	db	98	;'b'
   452  00FDCC  69                 	db	105	;'i'
   453  00FDCD  6E                 	db	110	;'n'
   454  00FDCE  65                 	db	101	;'e'
   455  00FDCF  74                 	db	116	;'t'
   456  00FDD0  20                 	db	32
   457  00FDD1  73                 	db	115	;'s'
   458  00FDD2  6F                 	db	111	;'o'
   459  00FDD3  72                 	db	114	;'r'
   460  00FDD4  74                 	db	116	;'t'
   461  00FDD5  65                 	db	101	;'e'
   462  00FDD6  72                 	db	114	;'r'
   463  00FDD7  21                 	db	33
   464  00FDD8  00                 	db	0
   465  00FDD9                     STR_77:
   466  00FDD9  6E                 	db	110	;'n'
   467  00FDDA  75                 	db	117	;'u'
   468  00FDDB  6D                 	db	109	;'m'
   469  00FDDC  62                 	db	98	;'b'
   470  00FDDD  65                 	db	101	;'e'
   471  00FDDE  72                 	db	114	;'r'
   472  00FDDF  20                 	db	32
   473  00FDE0  70                 	db	112	;'p'
   474  00FDE1  72                 	db	114	;'r'
   475  00FDE2  65                 	db	101	;'e'
   476  00FDE3  73                 	db	115	;'s'
   477  00FDE4  73                 	db	115	;'s'
   478  00FDE5  65                 	db	101	;'e'
   479  00FDE6  64                 	db	100	;'d'
   480  00FDE7  2E                 	db	46
   481  00FDE8  00                 	db	0
   482  00FDE9                     STR_49:
   483  00FDE9  44                 	db	68	;'D'
   484  00FDEA  72                 	db	114	;'r'
   485  00FDEB  61                 	db	97	;'a'
   486  00FDEC  77                 	db	119	;'w'
   487  00FDED  65                 	db	101	;'e'
   488  00FDEE  72                 	db	114	;'r'
   489  00FDEF  20                 	db	32
   490  00FDF0  25                 	db	37
   491  00FDF1  69                 	db	105	;'i'
   492  00FDF2  20                 	db	32
   493  00FDF3  66                 	db	102	;'f'
   494  00FDF4  6F                 	db	111	;'o'
   495  00FDF5  6F                 	db	111	;'o'
   496  00FDF6  64                 	db	100	;'d'
   497  00FDF7  3A                 	db	58	;':'
   498  00FDF8  00                 	db	0
   499  00FDF9                     STR_35:
   500  00FDF9  4F                 	db	79	;'O'
   501  00FDFA  70                 	db	112	;'p'
   502  00FDFB  65                 	db	101	;'e'
   503  00FDFC  72                 	db	114	;'r'
   504  00FDFD  61                 	db	97	;'a'
   505  00FDFE  74                 	db	116	;'t'
   506  00FDFF  69                 	db	105	;'i'
   507  00FE00  6F                 	db	111	;'o'
   508  00FE01  6E                 	db	110	;'n'
   509  00FE02  20                 	db	32
   510  00FE03  74                 	db	116	;'t'
   511  00FE04  69                 	db	105	;'i'
   512  00FE05  6D                 	db	109	;'m'
   513  00FE06  65                 	db	101	;'e'
   514  00FE07  3A                 	db	58	;':'
   515  00FE08  00                 	db	0
   516  00FE09                     STR_37:
   517  00FE09  4D                 	db	77	;'M'
   518  00FE0A  61                 	db	97	;'a'
   519  00FE0B  72                 	db	114	;'r'
   520  00FE0C  6B                 	db	107	;'k'
   521  00FE0D  65                 	db	101	;'e'
   522  00FE0E  64                 	db	100	;'d'
   523  00FE0F  20                 	db	32
   524  00FE10  64                 	db	100	;'d'
   525  00FE11  72                 	db	114	;'r'
   526  00FE12  61                 	db	97	;'a'
   527  00FE13  77                 	db	119	;'w'
   528  00FE14  65                 	db	101	;'e'
   529  00FE15  72                 	db	114	;'r'
   530  00FE16  73                 	db	115	;'s'
   531  00FE17  3A                 	db	58	;':'
   532  00FE18  00                 	db	0
   533  00FE19                     STR_53:
   534  00FE19  44                 	db	68	;'D'
   535  00FE1A  72                 	db	114	;'r'
   536  00FE1B  61                 	db	97	;'a'
   537  00FE1C  77                 	db	119	;'w'
   538  00FE1D  65                 	db	101	;'e'
   539  00FE1E  72                 	db	114	;'r'
   540  00FE1F  20                 	db	32
   541  00FE20  25                 	db	37
   542  00FE21  69                 	db	105	;'i'
   543  00FE22  20                 	db	32
   544  00FE23  64                 	db	100	;'d'
   545  00FE24  69                 	db	105	;'i'
   546  00FE25  65                 	db	101	;'e'
   547  00FE26  74                 	db	116	;'t'
   548  00FE27  3A                 	db	58	;':'
   549  00FE28  00                 	db	0
   550  00FE29                     STR_74:
   551  00FE29  41                 	db	65	;'A'
   552  00FE2A  6E                 	db	110	;'n'
   553  00FE2B  6F                 	db	111	;'o'
   554  00FE2C  74                 	db	116	;'t'
   555  00FE2D  68                 	db	104	;'h'
   556  00FE2E  65                 	db	101	;'e'
   557  00FE2F  72                 	db	114	;'r'
   558  00FE30  20                 	db	32
   559  00FE31  64                 	db	100	;'d'
   560  00FE32  72                 	db	114	;'r'
   561  00FE33  61                 	db	97	;'a'
   562  00FE34  77                 	db	119	;'w'
   563  00FE35  65                 	db	101	;'e'
   564  00FE36  72                 	db	114	;'r'
   565  00FE37  3F                 	db	63	;'?'
   566  00FE38  00                 	db	0
   567  00FE39                     STR_62:
   568  00FE39  57                 	db	87	;'W'
   569  00FE3A  65                 	db	101	;'e'
   570  00FE3B  6C                 	db	108	;'l'
   571  00FE3C  63                 	db	99	;'c'
   572  00FE3D  6F                 	db	111	;'o'
   573  00FE3E  6D                 	db	109	;'m'
   574  00FE3F  65                 	db	101	;'e'
   575  00FE40  20                 	db	32
   576  00FE41  74                 	db	116	;'t'
   577  00FE42  6F                 	db	111	;'o'
   578  00FE43  20                 	db	32
   579  00FE44  79                 	db	121	;'y'
   580  00FE45  6F                 	db	111	;'o'
   581  00FE46  75                 	db	117	;'u'
   582  00FE47  72                 	db	114	;'r'
   583  00FE48  00                 	db	0
   584  00FE49                     STR_48:
   585  00FE49  23                 	db	35
   586  00FE4A  20                 	db	32
   587  00FE4B  3D                 	db	61	;'='
   588  00FE4C  20                 	db	32
   589  00FE4D  4E                 	db	78	;'N'
   590  00FE4E  6F                 	db	111	;'o'
   591  00FE4F  2C                 	db	44
   592  00FE50  20                 	db	32
   593  00FE51  44                 	db	68	;'D'
   594  00FE52  20                 	db	32
   595  00FE53  3D                 	db	61	;'='
   596  00FE54  20                 	db	32
   597  00FE55  59                 	db	89	;'Y'
   598  00FE56  65                 	db	101	;'e'
   599  00FE57  73                 	db	115	;'s'
   600  00FE58  00                 	db	0
   601  00FE59                     STR_57:
   602  00FE59  44                 	db	68	;'D'
   603  00FE5A  72                 	db	114	;'r'
   604  00FE5B  61                 	db	97	;'a'
   605  00FE5C  77                 	db	119	;'w'
   606  00FE5D  65                 	db	101	;'e'
   607  00FE5E  72                 	db	114	;'r'
   608  00FE5F  20                 	db	32
   609  00FE60  6E                 	db	110	;'n'
   610  00FE61  75                 	db	117	;'u'
   611  00FE62  6D                 	db	109	;'m'
   612  00FE63  62                 	db	98	;'b'
   613  00FE64  65                 	db	101	;'e'
   614  00FE65  72                 	db	114	;'r'
   615  00FE66  3A                 	db	58	;':'
   616  00FE67  00                 	db	0
   617  00FE68                     STR_44:
   618  00FE68  49                 	db	73	;'I'
   619  00FE69  6E                 	db	110	;'n'
   620  00FE6A  70                 	db	112	;'p'
   621  00FE6B  75                 	db	117	;'u'
   622  00FE6C  74                 	db	116	;'t'
   623  00FE6D  20                 	db	32
   624  00FE6E  53                 	db	83	;'S'
   625  00FE6F  75                 	db	117	;'u'
   626  00FE70  6D                 	db	109	;'m'
   627  00FE71  6D                 	db	109	;'m'
   628  00FE72  61                 	db	97	;'a'
   629  00FE73  72                 	db	114	;'r'
   630  00FE74  79                 	db	121	;'y'
   631  00FE75  3A                 	db	58	;':'
   632  00FE76  00                 	db	0
   633  00FE77                     STR_22:
   634  00FE77  31                 	db	49	;'1'
   635  00FE78  20                 	db	32
   636  00FE79  70                 	db	112	;'p'
   637  00FE7A  72                 	db	114	;'r'
   638  00FE7B  65                 	db	101	;'e'
   639  00FE7C  76                 	db	118	;'v'
   640  00FE7D  69                 	db	105	;'i'
   641  00FE7E  6F                 	db	111	;'o'
   642  00FE7F  75                 	db	117	;'u'
   643  00FE80  73                 	db	115	;'s'
   644  00FE81  20                 	db	32
   645  00FE82  6C                 	db	108	;'l'
   646  00FE83  6F                 	db	111	;'o'
   647  00FE84  67                 	db	103	;'g'
   648  00FE85  00                 	db	0
   649  00FE86                     STR_41:
   650  00FE86  25                 	db	37
   651  00FE87  69                 	db	105	;'i'
   652  00FE88  2C                 	db	44
   653  00FE89  20                 	db	32
   654  00FE8A  25                 	db	37
   655  00FE8B  69                 	db	105	;'i'
   656  00FE8C  2C                 	db	44
   657  00FE8D  20                 	db	32
   658  00FE8E  25                 	db	37
   659  00FE8F  69                 	db	105	;'i'
   660  00FE90  2C                 	db	44
   661  00FE91  20                 	db	32
   662  00FE92  25                 	db	37
   663  00FE93  69                 	db	105	;'i'
   664  00FE94  00                 	db	0
   665  00FE95                     STR_34:
   666  00FE95  25                 	db	37
   667  00FE96  30                 	db	48	;'0'
   668  00FE97  32                 	db	50	;'2'
   669  00FE98  69                 	db	105	;'i'
   670  00FE99  2F                 	db	47
   671  00FE9A  25                 	db	37
   672  00FE9B  30                 	db	48	;'0'
   673  00FE9C  32                 	db	50	;'2'
   674  00FE9D  69                 	db	105	;'i'
   675  00FE9E  2F                 	db	47
   676  00FE9F  25                 	db	37
   677  00FEA0  30                 	db	48	;'0'
   678  00FEA1  32                 	db	50	;'2'
   679  00FEA2  69                 	db	105	;'i'
   680  00FEA3  00                 	db	0
   681  00FEA4                     STR_66:
   682  00FEA4  25                 	db	37
   683  00FEA5  30                 	db	48	;'0'
   684  00FEA6  32                 	db	50	;'2'
   685  00FEA7  78                 	db	120	;'x'
   686  00FEA8  2F                 	db	47
   687  00FEA9  25                 	db	37
   688  00FEAA  30                 	db	48	;'0'
   689  00FEAB  32                 	db	50	;'2'
   690  00FEAC  78                 	db	120	;'x'
   691  00FEAD  2F                 	db	47
   692  00FEAE  25                 	db	37
   693  00FEAF  30                 	db	48	;'0'
   694  00FEB0  32                 	db	50	;'2'
   695  00FEB1  78                 	db	120	;'x'
   696  00FEB2  00                 	db	0
   697  00FEB3                     STR_67:
   698  00FEB3  25                 	db	37
   699  00FEB4  30                 	db	48	;'0'
   700  00FEB5  32                 	db	50	;'2'
   701  00FEB6  78                 	db	120	;'x'
   702  00FEB7  3A                 	db	58	;':'
   703  00FEB8  25                 	db	37
   704  00FEB9  30                 	db	48	;'0'
   705  00FEBA  32                 	db	50	;'2'
   706  00FEBB  78                 	db	120	;'x'
   707  00FEBC  3A                 	db	58	;':'
   708  00FEBD  25                 	db	37
   709  00FEBE  30                 	db	48	;'0'
   710  00FEBF  32                 	db	50	;'2'
   711  00FEC0  78                 	db	120	;'x'
   712  00FEC1  00                 	db	0
   713  00FEC2                     STR_78:
   714  00FEC2  44                 	db	68	;'D'
   715  00FEC3  72                 	db	114	;'r'
   716  00FEC4  61                 	db	97	;'a'
   717  00FEC5  77                 	db	119	;'w'
   718  00FEC6  65                 	db	101	;'e'
   719  00FEC7  72                 	db	114	;'r'
   720  00FEC8  20                 	db	32
   721  00FEC9  61                 	db	97	;'a'
   722  00FECA  6C                 	db	108	;'l'
   723  00FECB  72                 	db	114	;'r'
   724  00FECC  65                 	db	101	;'e'
   725  00FECD  61                 	db	97	;'a'
   726  00FECE  64                 	db	100	;'d'
   727  00FECF  79                 	db	121	;'y'
   728  00FED0  00                 	db	0
   729  00FED1                     STR_51:
   730  00FED1  49                 	db	73	;'I'
   731  00FED2  6E                 	db	110	;'n'
   732  00FED3  76                 	db	118	;'v'
   733  00FED4  61                 	db	97	;'a'
   734  00FED5  6C                 	db	108	;'l'
   735  00FED6  69                 	db	105	;'i'
   736  00FED7  64                 	db	100	;'d'
   737  00FED8  20                 	db	32
   738  00FED9  66                 	db	102	;'f'
   739  00FEDA  6F                 	db	111	;'o'
   740  00FEDB  6F                 	db	111	;'o'
   741  00FEDC  64                 	db	100	;'d'
   742  00FEDD  21                 	db	33
   743  00FEDE  00                 	db	0
   744  00FEDF                     STR_55:
   745  00FEDF  49                 	db	73	;'I'
   746  00FEE0  6E                 	db	110	;'n'
   747  00FEE1  76                 	db	118	;'v'
   748  00FEE2  61                 	db	97	;'a'
   749  00FEE3  6C                 	db	108	;'l'
   750  00FEE4  69                 	db	105	;'i'
   751  00FEE5  64                 	db	100	;'d'
   752  00FEE6  20                 	db	32
   753  00FEE7  64                 	db	100	;'d'
   754  00FEE8  69                 	db	105	;'i'
   755  00FEE9  65                 	db	101	;'e'
   756  00FEEA  74                 	db	116	;'t'
   757  00FEEB  21                 	db	33
   758  00FEEC  00                 	db	0
   759  00FEED                     STR_25:
   760  00FEED  6D                 	db	109	;'m'
   761  00FEEE  6F                 	db	111	;'o'
   762  00FEEF  76                 	db	118	;'v'
   763  00FEF0  65                 	db	101	;'e'
   764  00FEF1  20                 	db	32
   765  00FEF2  66                 	db	102	;'f'
   766  00FEF3  6F                 	db	111	;'o'
   767  00FEF4  72                 	db	114	;'r'
   768  00FEF5  77                 	db	119	;'w'
   769  00FEF6  61                 	db	97	;'a'
   770  00FEF7  72                 	db	114	;'r'
   771  00FEF8  64                 	db	100	;'d'
   772  00FEF9  2E                 	db	46
   773  00FEFA  00                 	db	0
   774  00FEFB                     STR_70:
   775  00FEFB  6F                 	db	111	;'o'
   776  00FEFC  72                 	db	114	;'r'
   777  00FEFD  20                 	db	32
   778  00FEFE  70                 	db	112	;'p'
   779  00FEFF  72                 	db	114	;'r'
   780  00FF00  65                 	db	101	;'e'
   781  00FF01  73                 	db	115	;'s'
   782  00FF02  73                 	db	115	;'s'
   783  00FF03  20                 	db	32
   784  00FF04  44                 	db	68	;'D'
   785  00FF05  20                 	db	32
   786  00FF06  74                 	db	116	;'t'
   787  00FF07  6F                 	db	111	;'o'
   788  00FF08  00                 	db	0
   789  00FF09                     STR_45:
   790  00FF09  44                 	db	68	;'D'
   791  00FF0A  72                 	db	114	;'r'
   792  00FF0B  61                 	db	97	;'a'
   793  00FF0C  77                 	db	119	;'w'
   794  00FF0D  65                 	db	101	;'e'
   795  00FF0E  72                 	db	114	;'r'
   796  00FF0F  20                 	db	32
   797  00FF10  25                 	db	37
   798  00FF11  69                 	db	105	;'i'
   799  00FF12  3A                 	db	58	;':'
   800  00FF13  20                 	db	32
   801  00FF14  25                 	db	37
   802  00FF15  73                 	db	115	;'s'
   803  00FF16  00                 	db	0
   804  00FF17                     STR_85:
   805  00FF17  49                 	db	73	;'I'
   806  00FF18  6E                 	db	110	;'n'
   807  00FF19  76                 	db	118	;'v'
   808  00FF1A  61                 	db	97	;'a'
   809  00FF1B  6C                 	db	108	;'l'
   810  00FF1C  69                 	db	105	;'i'
   811  00FF1D  64                 	db	100	;'d'
   812  00FF1E  20                 	db	32
   813  00FF1F  6B                 	db	107	;'k'
   814  00FF20  65                 	db	101	;'e'
   815  00FF21  79                 	db	121	;'y'
   816  00FF22  21                 	db	33
   817  00FF23  00                 	db	0
   818  00FF24                     STR_72:
   819  00FF24  4D                 	db	77	;'M'
   820  00FF25  61                 	db	97	;'a'
   821  00FF26  78                 	db	120	;'x'
   822  00FF27  69                 	db	105	;'i'
   823  00FF28  6D                 	db	109	;'m'
   824  00FF29  75                 	db	117	;'u'
   825  00FF2A  6D                 	db	109	;'m'
   826  00FF2B  20                 	db	32
   827  00FF2C  6F                 	db	111	;'o'
   828  00FF2D  66                 	db	102	;'f'
   829  00FF2E  20                 	db	32
   830  00FF2F  38                 	db	56	;'8'
   831  00FF30  00                 	db	0
   832  00FF31                     STR_47:
   833  00FF31  41                 	db	65	;'A'
   834  00FF32  6E                 	db	110	;'n'
   835  00FF33  6F                 	db	111	;'o'
   836  00FF34  74                 	db	116	;'t'
   837  00FF35  68                 	db	104	;'h'
   838  00FF36  65                 	db	101	;'e'
   839  00FF37  72                 	db	114	;'r'
   840  00FF38  20                 	db	32
   841  00FF39  6C                 	db	108	;'l'
   842  00FF3A  6F                 	db	111	;'o'
   843  00FF3B  67                 	db	103	;'g'
   844  00FF3C  3F                 	db	63	;'?'
   845  00FF3D  00                 	db	0
   846  00FF3E                     STR_64:
   847  00FF3E  43                 	db	67	;'C'
   848  00FF3F  75                 	db	117	;'u'
   849  00FF40  72                 	db	114	;'r'
   850  00FF41  72                 	db	114	;'r'
   851  00FF42  65                 	db	101	;'e'
   852  00FF43  6E                 	db	110	;'n'
   853  00FF44  74                 	db	116	;'t'
   854  00FF45  20                 	db	32
   855  00FF46  64                 	db	100	;'d'
   856  00FF47  61                 	db	97	;'a'
   857  00FF48  74                 	db	116	;'t'
   858  00FF49  65                 	db	101	;'e'
   859  00FF4A  00                 	db	0
   860  00FF4B                     STR_69:
   861  00FF4B  76                 	db	118	;'v'
   862  00FF4C  69                 	db	105	;'i'
   863  00FF4D  65                 	db	101	;'e'
   864  00FF4E  77                 	db	119	;'w'
   865  00FF4F  20                 	db	32
   866  00FF50  6C                 	db	108	;'l'
   867  00FF51  6F                 	db	111	;'o'
   868  00FF52  67                 	db	103	;'g'
   869  00FF53  73                 	db	115	;'s'
   870  00FF54  2C                 	db	44
   871  00FF55  00                 	db	0
   872  00FF56                     STR_21:
   873  00FF56  61                 	db	97	;'a'
   874  00FF57  76                 	db	118	;'v'
   875  00FF58  61                 	db	97	;'a'
   876  00FF59  69                 	db	105	;'i'
   877  00FF5A  6C                 	db	108	;'l'
   878  00FF5B  61                 	db	97	;'a'
   879  00FF5C  62                 	db	98	;'b'
   880  00FF5D  6C                 	db	108	;'l'
   881  00FF5E  65                 	db	101	;'e'
   882  00FF5F  2E                 	db	46
   883  00FF60  00                 	db	0
   884  00FF61                     STR_84:
   885  00FF61  52                 	db	82	;'R'
   886  00FF62  65                 	db	101	;'e'
   887  00FF63  62                 	db	98	;'b'
   888  00FF64  6F                 	db	111	;'o'
   889  00FF65  6F                 	db	111	;'o'
   890  00FF66  74                 	db	116	;'t'
   891  00FF67  69                 	db	105	;'i'
   892  00FF68  6E                 	db	110	;'n'
   893  00FF69  67                 	db	103	;'g'
   894  00FF6A  2E                 	db	46
   895  00FF6B  00                 	db	0
   896  00FF6C                     STR_52:
   897  00FF6C  54                 	db	84	;'T'
   898  00FF6D  72                 	db	114	;'r'
   899  00FF6E  79                 	db	121	;'y'
   900  00FF6F  20                 	db	32
   901  00FF70  61                 	db	97	;'a'
   902  00FF71  67                 	db	103	;'g'
   903  00FF72  61                 	db	97	;'a'
   904  00FF73  69                 	db	105	;'i'
   905  00FF74  6E                 	db	110	;'n'
   906  00FF75  2E                 	db	46
   907  00FF76  00                 	db	0
   908  00FF77                     STR_68:
   909  00FF77  50                 	db	80	;'P'
   910  00FF78  72                 	db	114	;'r'
   911  00FF79  65                 	db	101	;'e'
   912  00FF7A  73                 	db	115	;'s'
   913  00FF7B  73                 	db	115	;'s'
   914  00FF7C  20                 	db	32
   915  00FF7D  23                 	db	35
   916  00FF7E  20                 	db	32
   917  00FF7F  74                 	db	116	;'t'
   918  00FF80  6F                 	db	111	;'o'
   919  00FF81  00                 	db	0
   920  00FF82                     STR_65:
   921  00FF82  61                 	db	97	;'a'
   922  00FF83  6E                 	db	110	;'n'
   923  00FF84  64                 	db	100	;'d'
   924  00FF85  20                 	db	32
   925  00FF86  74                 	db	116	;'t'
   926  00FF87  69                 	db	105	;'i'
   927  00FF88  6D                 	db	109	;'m'
   928  00FF89  65                 	db	101	;'e'
   929  00FF8A  3A                 	db	58	;':'
   930  00FF8B  00                 	db	0
   931  00FF8C                     STR_76:
   932  00FF8C  4E                 	db	78	;'N'
   933  00FF8D  6F                 	db	111	;'o'
   934  00FF8E  20                 	db	32
   935  00FF8F  64                 	db	100	;'d'
   936  00FF90  72                 	db	114	;'r'
   937  00FF91  61                 	db	97	;'a'
   938  00FF92  77                 	db	119	;'w'
   939  00FF93  65                 	db	101	;'e'
   940  00FF94  72                 	db	114	;'r'
   941  00FF95  00                 	db	0
   942  00FF96                     STR_29:
   943  00FF96  6E                 	db	110	;'n'
   944  00FF97  75                 	db	117	;'u'
   945  00FF98  6D                 	db	109	;'m'
   946  00FF99  62                 	db	98	;'b'
   947  00FF9A  65                 	db	101	;'e'
   948  00FF9B  72                 	db	114	;'r'
   949  00FF9C  3A                 	db	58	;':'
   950  00FF9D  20                 	db	32
   951  00FF9E  00                 	db	0
   952  00FF9F                     STR_79:
   953  00FF9F  69                 	db	105	;'i'
   954  00FFA0  6E                 	db	110	;'n'
   955  00FFA1  20                 	db	32
   956  00FFA2  75                 	db	117	;'u'
   957  00FFA3  73                 	db	115	;'s'
   958  00FFA4  65                 	db	101	;'e'
   959  00FFA5  21                 	db	33
   960  00FFA6  00                 	db	0
   961  00FFA7                     STR_36:
   962  00FFA7  25                 	db	37
   963  00FFA8  69                 	db	105	;'i'
   964  00FFA9  3A                 	db	58	;':'
   965  00FFAA  25                 	db	37
   966  00FFAB  30                 	db	48	;'0'
   967  00FFAC  32                 	db	50	;'2'
   968  00FFAD  69                 	db	105	;'i'
   969  00FFAE  00                 	db	0
   970  00FFAF                     STR_20:
   971  00FFAF  4E                 	db	78	;'N'
   972  00FFB0  6F                 	db	111	;'o'
   973  00FFB1  20                 	db	32
   974  00FFB2  6C                 	db	108	;'l'
   975  00FFB3  6F                 	db	111	;'o'
   976  00FFB4  67                 	db	103	;'g'
   977  00FFB5  73                 	db	115	;'s'
   978  00FFB6  00                 	db	0
   979  00FFB7                     STR_1:
   980  00FFB7  53                 	db	83	;'S'
   981  00FFB8  74                 	db	116	;'t'
   982  00FFB9  61                 	db	97	;'a'
   983  00FFBA  6E                 	db	110	;'n'
   984  00FFBB  64                 	db	100	;'d'
   985  00FFBC  62                 	db	98	;'b'
   986  00FFBD  79                 	db	121	;'y'
   987  00FFBE  00                 	db	0
   988  00FFBF                     STR_89:
   989  00FFBF  28                 	db	40
   990  00FFC0  6E                 	db	110	;'n'
   991  00FFC1  75                 	db	117	;'u'
   992  00FFC2  6C                 	db	108	;'l'
   993  00FFC3  6C                 	db	108	;'l'
   994  00FFC4  29                 	db	41
   995  00FFC5  00                 	db	0
   996  00FFC6                     STR_30:
   997  00FFC6  47                 	db	71	;'G'
   998  00FFC7  72                 	db	114	;'r'
   999  00FFC8  65                 	db	101	;'e'
  1000  00FFC9  61                 	db	97	;'a'
  1001  00FFCA  74                 	db	116	;'t'
  1002  00FFCB  21                 	db	33
  1003  00FFCC  00                 	db	0
  1004  00FFCD                     STR_33:
  1005  00FFCD  44                 	db	68	;'D'
  1006  00FFCE  61                 	db	97	;'a'
  1007  00FFCF  74                 	db	116	;'t'
  1008  00FFD0  65                 	db	101	;'e'
  1009  00FFD1  3A                 	db	58	;':'
  1010  00FFD2  00                 	db	0
  1011  00FFD3                     STR_16:
  1012  00FFD3  52                 	db	82	;'R'
  1013  00FFD4  46                 	db	70	;'F'
  1014  00FFD5  46                 	db	70	;'F'
  1015  00FFD6  4C                 	db	76	;'L'
  1016  00FFD7  00                 	db	0
  1017  00FFD8                     STR_15:
  1018  00FFD8  52                 	db	82	;'R'
  1019  00FFD9  52                 	db	82	;'R'
  1020  00FFDA  46                 	db	70	;'F'
  1021  00FFDB  4C                 	db	76	;'L'
  1022  00FFDC  00                 	db	0
  1023  00FFDD                     STR_17:
  1024  00FFDD  52                 	db	82	;'R'
  1025  00FFDE  46                 	db	70	;'F'
  1026  00FFDF  4C                 	db	76	;'L'
  1027  00FFE0  4C                 	db	76	;'L'
  1028  00FFE1  00                 	db	0
  1029  00FFE2                     STR_19:
  1030  00FFE2  46                 	db	70	;'F'
  1031  00FFE3  4C                 	db	76	;'L'
  1032  00FFE4  4C                 	db	76	;'L'
  1033  00FFE5  4C                 	db	76	;'L'
  1034  00FFE6  00                 	db	0
  1035  00FFE7                     STR_18:
  1036  00FFE7  52                 	db	82	;'R'
  1037  00FFE8  4C                 	db	76	;'L'
  1038  00FFE9  4C                 	db	76	;'L'
  1039  00FFEA  4C                 	db	76	;'L'
  1040  00FFEB  00                 	db	0
  1041  00FFEC                     STR_10:
  1042  00FFEC  52                 	db	82	;'R'
  1043  00FFED  46                 	db	70	;'F'
  1044  00FFEE  46                 	db	70	;'F'
  1045  00FFEF  00                 	db	0
  1046  00FFF0                     STR_8:
  1047  00FFF0  52                 	db	82	;'R'
  1048  00FFF1  52                 	db	82	;'R'
  1049  00FFF2  46                 	db	70	;'F'
  1050  00FFF3  00                 	db	0
  1051  00FFF4                     STR_11:
  1052  00FFF4  52                 	db	82	;'R'
  1053  00FFF5  4C                 	db	76	;'L'
  1054  00FFF6  4C                 	db	76	;'L'
  1055  00FFF7  00                 	db	0
  1056  00FFF8                     STR_9:
  1057  00FFF8  52                 	db	82	;'R'
  1058  00FFF9  52                 	db	82	;'R'
  1059  00FFFA  4C                 	db	76	;'L'
  1060  00FFFB  00                 	db	0
  1061  00FFFC                     STR_2:
  1062  00FFFC  52                 	db	82	;'R'
  1063  00FFFD  00                 	db	0
  1064  0000                     
  1065                           ; #config settings
  1066  00FFFE  00                 	db	0	; dummy byte at the end
  1067  0000                     
  1068                           	psect	cinit
  1069  00C640                     __pcinit:
  1070                           	opt stack 0
  1071  00C640                     start_initialization:
  1072                           	opt stack 0
  1073  00C640                     __initialization:
  1074                           	opt stack 0
  1075                           
  1076                           ; Initialize objects allocated to BANK1 (36 bytes)
  1077                           ; load TBLPTR registers with __pidataBANK1
  1078  00C640  0E18               	movlw	low __pidataBANK1
  1079  00C642  6EF6               	movwf	tblptrl,c
  1080  00C644  0EC4               	movlw	high __pidataBANK1
  1081  00C646  6EF7               	movwf	tblptrh,c
  1082  00C648  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1083  00C64A  6EF8               	movwf	tblptru,c
  1084  00C64C  EE01  F06C         	lfsr	0,__pdataBANK1
  1085  00C650  EE10 F024          	lfsr	1,36
  1086  00C654                     copy_data0:
  1087  00C654  0009               	tblrd		*+
  1088  00C656  CFF5 FFEE          	movff	tablat,postinc0
  1089  00C65A  50E5               	movf	postdec1,w,c
  1090  00C65C  50E1               	movf	fsr1l,w,c
  1091  00C65E  E1FA               	bnz	copy_data0
  1092                           
  1093                           ; Initialize objects allocated to COMRAM (6 bytes)
  1094                           ; load TBLPTR registers with __pidataCOMRAM
  1095  00C660  0E52               	movlw	low __pidataCOMRAM
  1096  00C662  6EF6               	movwf	tblptrl,c
  1097  00C664  0EC3               	movlw	high __pidataCOMRAM
  1098  00C666  6EF7               	movwf	tblptrh,c
  1099  00C668  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1100  00C66A  6EF8               	movwf	tblptru,c
  1101  00C66C  EE00  F074         	lfsr	0,__pdataCOMRAM
  1102  00C670  EE10 F006          	lfsr	1,6
  1103  00C674                     copy_data1:
  1104  00C674  0009               	tblrd		*+
  1105  00C676  CFF5 FFEE          	movff	tablat,postinc0
  1106  00C67A  50E5               	movf	postdec1,w,c
  1107  00C67C  50E1               	movf	fsr1l,w,c
  1108  00C67E  E1FA               	bnz	copy_data1
  1109                           
  1110                           ; Clear objects allocated to BANK1 (108 bytes)
  1111  00C680  EE01  F000         	lfsr	0,__pbssBANK1
  1112  00C684  0E6C               	movlw	108
  1113  00C686                     clear_0:
  1114  00C686  6AEE               	clrf	postinc0,c
  1115  00C688  06E8               	decf	wreg,f,c
  1116  00C68A  E1FD               	bnz	clear_0
  1117                           
  1118                           ; Clear objects allocated to BANK0 (8 bytes)
  1119  00C68C  EE00  F0F8         	lfsr	0,__pbssBANK0
  1120  00C690  0E08               	movlw	8
  1121  00C692                     clear_1:
  1122  00C692  6AEE               	clrf	postinc0,c
  1123  00C694  06E8               	decf	wreg,f,c
  1124  00C696  E1FD               	bnz	clear_1
  1125                           
  1126                           ; Clear objects allocated to COMRAM (11 bytes)
  1127  00C698  EE00  F069         	lfsr	0,__pbssCOMRAM
  1128  00C69C  0E0B               	movlw	11
  1129  00C69E                     clear_2:
  1130  00C69E  6AEE               	clrf	postinc0,c
  1131  00C6A0  06E8               	decf	wreg,f,c
  1132  00C6A2  E1FD               	bnz	clear_2
  1133  00C6A4                     end_of_initialization:
  1134                           	opt stack 0
  1135  00C6A4                     __end_of__initialization:
  1136                           	opt stack 0
  1137  00C6A4  0100               	movlb	0
  1138  00C6A6  EF94  F063         	goto	_main	;jump to C main() function
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1l	equ	0xFE1
  1147                           
  1148                           	psect	bssCOMRAM
  1149  000069                     __pbssCOMRAM:
  1150                           	opt stack 0
  1151  000069                     food_press@F3131:
  1152                           	opt stack 0
  1153  000069                     	ds	8
  1154  000071                     standbyMode@LCDinterruptState:
  1155                           	opt stack 0
  1156  000071                     	ds	1
  1157  000072                     _UARTinterruptState:
  1158                           	opt stack 0
  1159  000072                     	ds	1
  1160  000073                     	ds	1
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170                           	psect	dataCOMRAM
  1171  000074                     __pdataCOMRAM:
  1172                           	opt stack 0
  1173  000074                     _UART:
  1174                           	opt stack 0
  1175  000074                     	ds	2
  1176  000076                     _columnRight:
  1177                           	opt stack 0
  1178  000076                     	ds	1
  1179  000077                     _columnLeft:
  1180                           	opt stack 0
  1181  000077                     	ds	1
  1182  000078                     _rowDown:
  1183                           	opt stack 0
  1184  000078                     	ds	1
  1185  000079                     _rowUp:
  1186                           	opt stack 0
  1187  000079                     	ds	1
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           postdec1	equ	0xFE5
  1195                           fsr1l	equ	0xFE1
  1196                           
  1197                           	psect	bssBANK0
  1198  0000F8                     __pbssBANK0:
  1199                           	opt stack 0
  1200  0000F8                     diet_press@F3146:
  1201                           	opt stack 0
  1202  0000F8                     	ds	8
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           
  1212                           	psect	bssBANK1
  1213  000100                     __pbssBANK1:
  1214                           	opt stack 0
  1215  000100                     standbyMode@F3174:
  1216                           	opt stack 0
  1217  000100                     	ds	16
  1218  000110                     standbyMode@F3172:
  1219                           	opt stack 0
  1220  000110                     	ds	16
  1221  000120                     standbyMode@F3170:
  1222                           	opt stack 0
  1223  000120                     	ds	16
  1224  000130                     standbyMode@F3168:
  1225                           	opt stack 0
  1226  000130                     	ds	16
  1227  000140                     standbyMode@F3166:
  1228                           	opt stack 0
  1229  000140                     	ds	16
  1230  000150                     _arr_dataRX:
  1231                           	opt stack 0
  1232  000150                     	ds	16
  1233  000160                     _uart:
  1234                           	opt stack 0
  1235  000160                     	ds	12
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1l	equ	0xFE1
  1244                           
  1245                           	psect	dataBANK1
  1246  00016C                     __pdataBANK1:
  1247                           	opt stack 0
  1248  00016C                     _inputs:
  1249                           	opt stack 0
  1250  00016C                     	ds	36
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           postdec1	equ	0xFE5
  1258                           fsr1l	equ	0xFE1
  1259                           
  1260                           	psect	cstackBANK0
  1261  000080                     __pcstackBANK0:
  1262                           	opt stack 0
  1263  000080                     standbyMode@roundPieces:
  1264                           	opt stack 0
  1265                           
  1266                           ; 16 bytes @ 0x0
  1267  000080                     	ds	16
  1268  000090                     standbyMode@flatPieces:
  1269                           	opt stack 0
  1270                           
  1271                           ; 16 bytes @ 0x10
  1272  000090                     	ds	16
  1273  0000A0                     standbyMode@longPieces:
  1274                           	opt stack 0
  1275                           
  1276                           ; 16 bytes @ 0x20
  1277  0000A0                     	ds	16
  1278  0000B0                     standbyMode@dietType:
  1279                           	opt stack 0
  1280                           
  1281                           ; 16 bytes @ 0x30
  1282  0000B0                     	ds	16
  1283  0000C0                     standbyMode@drawerInformation:
  1284                           	opt stack 0
  1285                           
  1286                           ; 16 bytes @ 0x40
  1287  0000C0                     	ds	16
  1288  0000D0                     standbyMode@time:
  1289                           	opt stack 0
  1290                           
  1291                           ; 7 bytes @ 0x50
  1292  0000D0                     	ds	7
  1293  0000D7                     standbyMode@firstIteration:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x57
  1297  0000D7                     	ds	2
  1298  0000D9                     standbyMode@whichKey:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x59
  1302  0000D9                     	ds	2
  1303  0000DB                     standbyMode@keypress:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x5B
  1307  0000DB                     	ds	1
  1308  0000DC                     standbyMode@round:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x5C
  1312  0000DC                     	ds	2
  1313  0000DE                     standbyMode@flat:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x5E
  1317  0000DE                     	ds	2
  1318  0000E0                     standbyMode@lng:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x60
  1322  0000E0                     	ds	2
  1323  0000E2                     standbyMode@decodedDiet:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x62
  1327  0000E2                     	ds	2
  1328  0000E4                     standbyMode@keypress1:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x64
  1332  0000E4                     	ds	1
  1333  0000E5                     standbyMode@validDrawer:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x65
  1337  0000E5                     	ds	2
  1338  0000E7                     standbyMode@zero:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x67
  1342  0000E7                     	ds	2
  1343  0000E9                     standbyMode@x:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x69
  1347  0000E9                     	ds	2
  1348  0000EB                     standbyMode@logNumber:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x6B
  1352  0000EB                     	ds	1
  1353  0000EC                     standbyMode@n:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x6C
  1357  0000EC                     	ds	2
  1358  0000EE                     standbyMode@diet:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x6E
  1362  0000EE                     	ds	2
  1363  0000F0                     standbyMode@food:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x70
  1367  0000F0                     	ds	2
  1368  0000F2                     standbyMode@drawer:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x72
  1372  0000F2                     	ds	2
  1373  0000F4                     standbyMode@drawerCount:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x74
  1377  0000F4                     	ds	2
  1378  0000F6                     standbyMode@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x76
  1382  0000F6                     	ds	2
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           postinc0	equ	0xFEE
  1388                           wreg	equ	0xFE8
  1389                           postdec1	equ	0xFE5
  1390                           fsr1l	equ	0xFE1
  1391                           
  1392                           	psect	cstackCOMRAM
  1393  000001                     __pcstackCOMRAM:
  1394                           	opt stack 0
  1395  000001                     ??_isdigit:
  1396  000001                     ??_I2C_Master_Wait:
  1397  000001                     ?_check_food:
  1398                           	opt stack 0
  1399  000001                     ?_getRound:
  1400                           	opt stack 0
  1401  000001                     ?_getFlat:
  1402                           	opt stack 0
  1403  000001                     ?_getLong:
  1404                           	opt stack 0
  1405  000001                     ?_verifyKeypress:
  1406                           	opt stack 0
  1407  000001                     ?_get_digits:
  1408                           	opt stack 0
  1409  000001                     ?_decode_diet:
  1410                           	opt stack 0
  1411  000001                     ?_decode_drawer:
  1412                           	opt stack 0
  1413  000001                     ?___wmul:
  1414                           	opt stack 0
  1415  000001                     ?___lwdiv:
  1416                           	opt stack 0
  1417  000001                     ?___aldiv:
  1418                           	opt stack 0
  1419  000001                     ?___lldiv:
  1420                           	opt stack 0
  1421  000001                     lcdNibble@temp:
  1422                           	opt stack 0
  1423  000001                     writeEEPROM@data:
  1424                           	opt stack 0
  1425  000001                     readEEPROM@address:
  1426                           	opt stack 0
  1427  000001                     check_food@sum:
  1428                           	opt stack 0
  1429  000001                     getRound@code:
  1430                           	opt stack 0
  1431  000001                     getFlat@code:
  1432                           	opt stack 0
  1433  000001                     getLong@code:
  1434                           	opt stack 0
  1435  000001                     verifyKeypress@keypress:
  1436                           	opt stack 0
  1437  000001                     get_digits@sum:
  1438                           	opt stack 0
  1439  000001                     decode_diet@dietType:
  1440                           	opt stack 0
  1441  000001                     decode_drawer@drawer:
  1442                           	opt stack 0
  1443  000001                     ___wmul@multiplier:
  1444                           	opt stack 0
  1445  000001                     ___lwdiv@dividend:
  1446                           	opt stack 0
  1447  000001                     ___aldiv@dividend:
  1448                           	opt stack 0
  1449  000001                     ___lldiv@dividend:
  1450                           	opt stack 0
  1451                           
  1452                           ; 4 bytes @ 0x0
  1453  000001                     	ds	1
  1454  000002                     lcdNibble@data:
  1455                           	opt stack 0
  1456  000002                     writeEEPROM@address:
  1457                           	opt stack 0
  1458  000002                     I2C_Master_Read@ackBit:
  1459                           	opt stack 0
  1460  000002                     _isdigit$1453:
  1461                           	opt stack 0
  1462  000002                     I2C_Master_Write@byteToWrite:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x1
  1466  000002                     	ds	1
  1467  000003                     ??_shiftEEPROM:
  1468  000003                     ??_getRound:
  1469  000003                     ??_getFlat:
  1470  000003                     ??_getLong:
  1471  000003                     ??_verifyKeypress:
  1472  000003                     ??_get_digits:
  1473  000003                     ??_decode_diet:
  1474  000003                     ??_decode_drawer:
  1475  000003                     lcdInst@data:
  1476                           	opt stack 0
  1477  000003                     putch@data:
  1478                           	opt stack 0
  1479  000003                     I2C_Master_Read@receivedByte:
  1480                           	opt stack 0
  1481  000003                     isdigit@c:
  1482                           	opt stack 0
  1483  000003                     check_food@foodInput:
  1484                           	opt stack 0
  1485  000003                     initEEPROM@i:
  1486                           	opt stack 0
  1487  000003                     ___wmul@multiplicand:
  1488                           	opt stack 0
  1489  000003                     ___lwdiv@divisor:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x2
  1493  000003                     	ds	1
  1494  000004                     ??_initLCD:
  1495  000004                     shiftEEPROM@temp:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x3
  1499  000004                     	ds	1
  1500  000005                     ??_check_food:
  1501  000005                     verifyKeypress@logNumber:
  1502                           	opt stack 0
  1503  000005                     getRound@returnValue:
  1504                           	opt stack 0
  1505  000005                     getFlat@returnValue:
  1506                           	opt stack 0
  1507  000005                     getLong@returnValue:
  1508                           	opt stack 0
  1509  000005                     get_digits@count:
  1510                           	opt stack 0
  1511  000005                     decode_diet@returnValue:
  1512                           	opt stack 0
  1513  000005                     decode_drawer@returnValue:
  1514                           	opt stack 0
  1515  000005                     ___wmul@product:
  1516                           	opt stack 0
  1517  000005                     ___lwdiv@quotient:
  1518                           	opt stack 0
  1519  000005                     ___aldiv@divisor:
  1520                           	opt stack 0
  1521  000005                     ___lldiv@divisor:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x4
  1525  000005                     	ds	1
  1526  000006                     verifyKeypress@returnVal:
  1527                           	opt stack 0
  1528  000006                     shiftEEPROM@i:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x5
  1532  000006                     	ds	1
  1533  000007                     ___lwdiv@counter:
  1534                           	opt stack 0
  1535  000007                     check_food@returnValue:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x6
  1539  000007                     	ds	1
  1540  000008                     ?___lwmod:
  1541                           	opt stack 0
  1542  000008                     verifyKeypress@i:
  1543                           	opt stack 0
  1544  000008                     ___lwmod@dividend:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x7
  1548  000008                     	ds	1
  1549  000009                     ___aldiv@counter:
  1550                           	opt stack 0
  1551  000009                     ___lldiv@quotient:
  1552                           	opt stack 0
  1553                           
  1554                           ; 4 bytes @ 0x8
  1555  000009                     	ds	1
  1556  00000A                     ___aldiv@sign:
  1557                           	opt stack 0
  1558  00000A                     ___lwmod@divisor:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x9
  1562  00000A                     	ds	1
  1563  00000B                     ___aldiv@quotient:
  1564                           	opt stack 0
  1565                           
  1566                           ; 4 bytes @ 0xA
  1567  00000B                     	ds	1
  1568  00000C                     ___lwmod@counter:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0xB
  1572  00000C                     	ds	1
  1573  00000D                     ?_printf:
  1574                           	opt stack 0
  1575  00000D                     ___lldiv@counter:
  1576                           	opt stack 0
  1577  00000D                     printf@f:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0xC
  1581  00000D                     	ds	1
  1582  00000E                     I2C_Master_Init@clockFreq:
  1583                           	opt stack 0
  1584                           
  1585                           ; 4 bytes @ 0xD
  1586  00000E                     	ds	1
  1587  00000F                     UART_Init@baud:
  1588                           	opt stack 0
  1589                           
  1590                           ; 4 bytes @ 0xE
  1591  00000F                     	ds	3
  1592  000012                     ??_I2C_Master_Init:
  1593                           
  1594                           ; 1 bytes @ 0x11
  1595  000012                     	ds	1
  1596  000013                     ??_UART_Init:
  1597                           
  1598                           ; 1 bytes @ 0x12
  1599  000013                     	ds	4
  1600  000017                     ??_printf:
  1601  000017                     
  1602                           ; 1 bytes @ 0x16
  1603  000017                     	ds	4
  1604  00001B                     printf@idx:
  1605                           	opt stack 0
  1606                           
  1607                           ; 1 bytes @ 0x1A
  1608  00001B                     	ds	1
  1609  00001C                     printf@prec:
  1610                           	opt stack 0
  1611                           
  1612                           ; 1 bytes @ 0x1B
  1613  00001C                     	ds	1
  1614  00001D                     printf@cp:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x1C
  1618  00001D                     	ds	2
  1619  00001F                     printf@ap:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x1E
  1623  00001F                     	ds	2
  1624  000021                     printf@len:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x20
  1628  000021                     	ds	2
  1629  000023                     printf@val:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x22
  1633  000023                     	ds	2
  1634  000025                     printf@flag:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x24
  1638  000025                     	ds	1
  1639  000026                     printf@width:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x25
  1643  000026                     	ds	2
  1644  000028                     printf@c:
  1645                           	opt stack 0
  1646                           
  1647                           ; 1 bytes @ 0x27
  1648  000028                     	ds	1
  1649  000029                     ?_displayLogs:
  1650                           	opt stack 0
  1651  000029                     ?_food_press:
  1652                           	opt stack 0
  1653  000029                     ?_diet_press:
  1654                           	opt stack 0
  1655  000029                     ?_which_drawer:
  1656                           	opt stack 0
  1657  000029                     displayLogs@logNumber:
  1658                           	opt stack 0
  1659  000029                     food_press@dietSum:
  1660                           	opt stack 0
  1661  000029                     diet_press@drawer:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x28
  1665  000029                     	ds	2
  1666  00002B                     ??_displayLogs:
  1667  00002B                     ??_diet_press:
  1668  00002B                     ??_which_drawer:
  1669  00002B                     food_press@drawer:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2A
  1673  00002B                     	ds	1
  1674  00002C                     which_drawer@rand:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x2B
  1678  00002C                     	ds	1
  1679  00002D                     ??_food_press:
  1680  00002D                     displayLogs@round:
  1681                           	opt stack 0
  1682  00002D                     diet_press@previous:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x2C
  1686  00002D                     	ds	1
  1687  00002E                     which_drawer@sum:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x2D
  1691  00002E                     	ds	1
  1692  00002F                     displayLogs@flat:
  1693                           	opt stack 0
  1694  00002F                     food_press@tally:
  1695                           	opt stack 0
  1696  00002F                     diet_press@i:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x2E
  1700  00002F                     	ds	1
  1701  000030                     which_drawer@backCheck:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x2F
  1705  000030                     	ds	1
  1706  000031                     displayLogs@lng:
  1707                           	opt stack 0
  1708  000031                     food_press@backCheck:
  1709                           	opt stack 0
  1710  000031                     diet_press@backCheck:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x30
  1714  000031                     	ds	1
  1715  000032                     which_drawer@count:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x31
  1719  000032                     	ds	1
  1720  000033                     displayLogs@year:
  1721                           	opt stack 0
  1722  000033                     food_press@isValid:
  1723                           	opt stack 0
  1724  000033                     diet_press@count:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x32
  1728  000033                     	ds	1
  1729  000034                     which_drawer@keypress:
  1730                           	opt stack 0
  1731                           
  1732                           ; 1 bytes @ 0x33
  1733  000034                     	ds	1
  1734  000035                     displayLogs@month:
  1735                           	opt stack 0
  1736  000035                     food_press@count:
  1737                           	opt stack 0
  1738  000035                     diet_press@sum:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x34
  1742  000035                     	ds	2
  1743  000037                     food_press@keypress:
  1744                           	opt stack 0
  1745  000037                     diet_press@keypress:
  1746                           	opt stack 0
  1747  000037                     displayLogs@day:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x36
  1751  000037                     	ds	1
  1752  000038                     food_press@foodTable:
  1753                           	opt stack 0
  1754  000038                     diet_press@dietTable:
  1755                           	opt stack 0
  1756                           
  1757                           ; 8 bytes @ 0x37
  1758  000038                     	ds	1
  1759  000039                     displayLogs@roundPieces:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x38
  1763  000039                     	ds	2
  1764  00003B                     displayLogs@flatPieces:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x3A
  1768  00003B                     	ds	2
  1769  00003D                     displayLogs@longPieces:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x3C
  1773  00003D                     	ds	2
  1774  00003F                     displayLogs@minutes:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x3E
  1778  00003F                     	ds	2
  1779  000041                     displayLogs@seconds:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x40
  1783  000041                     	ds	2
  1784  000043                     displayLogs@keypress3:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0x42
  1788  000043                     	ds	1
  1789  000044                     displayLogs@operationTime:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x43
  1793  000044                     	ds	2
  1794  000046                     displayLogs@dietType:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x45
  1798  000046                     	ds	2
  1799  000048                     displayLogs@i:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x47
  1803  000048                     	ds	2
  1804  00004A                     displayLogs@markedDrawer1:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x49
  1808  00004A                     	ds	2
  1809  00004C                     displayLogs@markedDrawer2:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x4B
  1813  00004C                     	ds	2
  1814  00004E                     displayLogs@markedDrawer3:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x4D
  1818  00004E                     	ds	2
  1819  000050                     displayLogs@markedDrawer4:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x4F
  1823  000050                     	ds	2
  1824  000052                     displayLogs@drawerNumber:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x51
  1828  000052                     	ds	2
  1829  000054                     displayLogs@n:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x53
  1833  000054                     	ds	2
  1834  000056                     ?_viewLogs:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x55
  1838  000056                     	ds	2
  1839  000058                     ??_viewLogs:
  1840                           
  1841                           ; 1 bytes @ 0x57
  1842  000058                     	ds	2
  1843  00005A                     viewLogs@checkLog:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x59
  1847  00005A                     	ds	2
  1848  00005C                     viewLogs@returnVal:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x5B
  1852  00005C                     	ds	2
  1853  00005E                     viewLogs@logView:
  1854                           	opt stack 0
  1855                           
  1856                           ; 2 bytes @ 0x5D
  1857  00005E                     	ds	2
  1858  000060                     viewLogs@logNumber:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x5F
  1862  000060                     	ds	1
  1863  000061                     viewLogs@keypress2:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x60
  1867  000061                     	ds	1
  1868  000062                     ?_standbyMode:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x61
  1872  000062                     	ds	2
  1873  000064                     ??_standbyMode:
  1874                           
  1875                           ; 1 bytes @ 0x63
  1876  000064                     	ds	2
  1877  000066                     ??_main:
  1878                           
  1879                           ; 1 bytes @ 0x65
  1880  000066                     	ds	1
  1881  000067                     main@operationMode:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x66
  1885  000067                     	ds	2
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           postdec1	equ	0xFE5
  1893                           fsr1l	equ	0xFE1
  1894                           
  1895 ;;
  1896 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1897 ;;
  1898 ;; *************** function _main *****************
  1899 ;; Defined at:
  1900 ;;		line 14 in file "main.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  operationMod    2  102[COMRAM] unsigned int 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        3 bytes
  1919 ;; Hardware stack levels required when called:    6
  1920 ;; This function calls:
  1921 ;;		_initLCD
  1922 ;;		_lcdInst
  1923 ;;		_mainOperation
  1924 ;;		_printf
  1925 ;;		_standbyMode
  1926 ;; This function is called by:
  1927 ;;		Startup code after reset
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text0
  1932  00C728                     __ptext0:
  1933                           	opt stack 0
  1934  00C728                     _main:
  1935                           	opt stack 25
  1936                           
  1937                           ;main.c: 20: LATA = 0x00;
  1938                           
  1939                           ;incstack = 0
  1940  00C728  0E00               	movlw	0
  1941  00C72A  6E89               	movwf	3977,c	;volatile
  1942                           
  1943                           ;main.c: 21: LATB = 0x00;
  1944  00C72C  0E00               	movlw	0
  1945  00C72E  6E8A               	movwf	3978,c	;volatile
  1946                           
  1947                           ;main.c: 22: LATC = 0x00;
  1948  00C730  0E00               	movlw	0
  1949  00C732  6E8B               	movwf	3979,c	;volatile
  1950                           
  1951                           ;main.c: 23: LATD = 0x00;
  1952  00C734  0E00               	movlw	0
  1953  00C736  6E8C               	movwf	3980,c	;volatile
  1954                           
  1955                           ;main.c: 24: LATE = 0x00;
  1956  00C738  0E00               	movlw	0
  1957  00C73A  6E8D               	movwf	3981,c	;volatile
  1958                           
  1959                           ;main.c: 28: TRISA = 0xFF;
  1960  00C73C  6892               	setf	3986,c	;volatile
  1961                           
  1962                           ;main.c: 29: TRISB = 0xFF;
  1963  00C73E  6893               	setf	3987,c	;volatile
  1964                           
  1965                           ;main.c: 30: TRISC = 0x00;
  1966  00C740  0E00               	movlw	0
  1967  00C742  6E94               	movwf	3988,c	;volatile
  1968                           
  1969                           ;main.c: 31: TRISD = 0x00;
  1970  00C744  0E00               	movlw	0
  1971  00C746  6E95               	movwf	3989,c	;volatile
  1972                           
  1973                           ;main.c: 32: TRISE = 0x00;
  1974  00C748  0E00               	movlw	0
  1975  00C74A  6E96               	movwf	3990,c	;volatile
  1976                           
  1977                           ;main.c: 35: ADCON0 = 0x00;
  1978  00C74C  0E00               	movlw	0
  1979  00C74E  6EC2               	movwf	4034,c	;volatile
  1980                           
  1981                           ;main.c: 36: ADCON1 = 0b00001111;
  1982  00C750  0E0F               	movlw	15
  1983  00C752  6EC1               	movwf	4033,c	;volatile
  1984                           
  1985                           ;main.c: 39: initLCD();
  1986  00C754  EC7A  F062         	call	_initLCD	;wreg free
  1987                           
  1988                           ;main.c: 40: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1989  00C758  0E01               	movlw	1
  1990  00C75A  ECC2  F061         	call	_lcdInst
  1991  00C75E  0EC3               	movlw	195
  1992  00C760  6E66               	movwf	??_main& (0+255),c
  1993  00C762  0ECD               	movlw	205
  1994  00C764                     u8217:
  1995  00C764  2EE8               	decfsz	wreg,f,c
  1996  00C766  D7FE               	bra	u8217
  1997  00C768  2E66               	decfsz	??_main& (0+255),f,c
  1998  00C76A  D7FC               	bra	u8217
  1999  00C76C  F000               	nop	
  2000                           
  2001                           ;main.c: 41: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2002  00C76E  0E0C               	movlw	12
  2003  00C770  ECC2  F061         	call	_lcdInst
  2004                           
  2005                           ;main.c: 42: printf("Standby");
  2006  00C774  0EB7               	movlw	low STR_1
  2007  00C776  6E0D               	movwf	printf@f,c
  2008  00C778  0EFF               	movlw	high STR_1
  2009  00C77A  6E0E               	movwf	printf@f+1,c
  2010  00C77C  EC6E  F06B         	call	_printf	;wreg free
  2011                           
  2012                           ;main.c: 44: unsigned int operationMode = 0;
  2013  00C780  0E00               	movlw	0
  2014  00C782  6E68               	movwf	main@operationMode+1,c
  2015  00C784  0E00               	movlw	0
  2016  00C786  6E67               	movwf	main@operationMode,c
  2017                           
  2018                           ;main.c: 89: operationMode = standbyMode();
  2019  00C788  EC34  F078         	call	_standbyMode	;wreg free
  2020  00C78C  C062  F067         	movff	?_standbyMode,main@operationMode
  2021  00C790  C063  F068         	movff	?_standbyMode+1,main@operationMode+1
  2022                           
  2023                           ;main.c: 91: if (operationMode == 1){
  2024  00C794  0467               	decf	main@operationMode,w,c
  2025  00C796  1068               	iorwf	main@operationMode+1,w,c
  2026  00C798  A4D8               	btfss	status,2,c
  2027  00C79A  EF00  F000         	goto	start
  2028                           
  2029                           ;main.c: 92: mainOperation();
  2030  00C79E  ECE0  F061         	call	_mainOperation	;wreg free
  2031                           
  2032                           ;main.c: 93: }
  2033                           ;main.c: 94: return;
  2034  00C7A2  EF00  F000         	goto	start
  2035  00C7A6                     __end_of_main:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postdec1	equ	0xFE5
  2044                           fsr1l	equ	0xFE1
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _standbyMode *****************
  2048 ;; Defined at:
  2049 ;;		line 1604 in file "standbyMode.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  keypress1       1  100[BANK0 ] unsigned char 
  2054 ;;  whichKey        2   89[BANK0 ] unsigned int 
  2055 ;;  drawerInform   16   64[BANK0 ] unsigned int [8]
  2056 ;;  dietType       16   48[BANK0 ] unsigned int [8]
  2057 ;;  longPieces     16   32[BANK0 ] unsigned int [8]
  2058 ;;  flatPieces     16   16[BANK0 ] unsigned int [8]
  2059 ;;  roundPieces    16    0[BANK0 ] unsigned int [8]
  2060 ;;  time            7   80[BANK0 ] unsigned char [7]
  2061 ;;  i               2  118[BANK0 ] unsigned int 
  2062 ;;  drawerCount     2  116[BANK0 ] unsigned int 
  2063 ;;  drawer          2  114[BANK0 ] unsigned int 
  2064 ;;  food            2  112[BANK0 ] unsigned int 
  2065 ;;  diet            2  110[BANK0 ] unsigned int 
  2066 ;;  n               2  108[BANK0 ] unsigned int 
  2067 ;;  x               2  105[BANK0 ] unsigned int 
  2068 ;;  zero            2  103[BANK0 ] unsigned int 
  2069 ;;  validDrawer     2  101[BANK0 ] unsigned int 
  2070 ;;  decodedDiet     2   98[BANK0 ] unsigned int 
  2071 ;;  lng             2   96[BANK0 ] unsigned int 
  2072 ;;  flat            2   94[BANK0 ] unsigned int 
  2073 ;;  round           2   92[BANK0 ] unsigned int 
  2074 ;;  firstIterati    2   87[BANK0 ] unsigned int 
  2075 ;;  logNumber       1  107[BANK0 ] unsigned char 
  2076 ;;  keypress        1   91[BANK0 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  2   97[COMRAM] unsigned int 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Locals:         0     120       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Totals:         4     120       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;Total ram usage:      124 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    5
  2093 ;; This function calls:
  2094 ;;		_I2C_Master_Init
  2095 ;;		_I2C_Master_Read
  2096 ;;		_I2C_Master_Start
  2097 ;;		_I2C_Master_Stop
  2098 ;;		_I2C_Master_Write
  2099 ;;		___wmul
  2100 ;;		_decode_diet
  2101 ;;		_diet_press
  2102 ;;		_food_press
  2103 ;;		_getFlat
  2104 ;;		_getLong
  2105 ;;		_getRound
  2106 ;;		_initEEPROM
  2107 ;;		_lcdInst
  2108 ;;		_printf
  2109 ;;		_readEEPROM
  2110 ;;		_shiftEEPROM
  2111 ;;		_viewLogs
  2112 ;;		_which_drawer
  2113 ;;		_writeEEPROM
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text1
  2120  00F068                     __ptext1:
  2121                           	opt stack 0
  2122  00F068                     _standbyMode:
  2123                           	opt stack 25
  2124                           
  2125                           ;standbyMode.c: 1605: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2126                           
  2127                           ;incstack = 0
  2128  00F068  EE21  F040         	lfsr	2,standbyMode@F3166
  2129  00F06C  EE10  F0C0         	lfsr	1,standbyMode@drawerInformation
  2130  00F070  0E0F               	movlw	15
  2131  00F072                     u7471:
  2132  00F072  CFDB FFE3          	movff	plusw2,plusw1
  2133  00F076  06E8               	decf	wreg,f,c
  2134  00F078  E2FC               	bc	u7471
  2135                           
  2136                           ;standbyMode.c: 1606: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2137  00F07A  EE21  F030         	lfsr	2,standbyMode@F3168
  2138  00F07E  EE10  F080         	lfsr	1,standbyMode@roundPieces
  2139  00F082  0E0F               	movlw	15
  2140  00F084                     u7481:
  2141  00F084  CFDB FFE3          	movff	plusw2,plusw1
  2142  00F088  06E8               	decf	wreg,f,c
  2143  00F08A  E2FC               	bc	u7481
  2144                           
  2145                           ;standbyMode.c: 1607: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2146  00F08C  EE21  F020         	lfsr	2,standbyMode@F3170
  2147  00F090  EE10  F090         	lfsr	1,standbyMode@flatPieces
  2148  00F094  0E0F               	movlw	15
  2149  00F096                     u7491:
  2150  00F096  CFDB FFE3          	movff	plusw2,plusw1
  2151  00F09A  06E8               	decf	wreg,f,c
  2152  00F09C  E2FC               	bc	u7491
  2153                           
  2154                           ;standbyMode.c: 1608: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2155  00F09E  EE21  F010         	lfsr	2,standbyMode@F3172
  2156  00F0A2  EE10  F0A0         	lfsr	1,standbyMode@longPieces
  2157  00F0A6  0E0F               	movlw	15
  2158  00F0A8                     u7501:
  2159  00F0A8  CFDB FFE3          	movff	plusw2,plusw1
  2160  00F0AC  06E8               	decf	wreg,f,c
  2161  00F0AE  E2FC               	bc	u7501
  2162                           
  2163                           ;standbyMode.c: 1609: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2164  00F0B0  EE21  F000         	lfsr	2,standbyMode@F3174
  2165  00F0B4  EE10  F0B0         	lfsr	1,standbyMode@dietType
  2166  00F0B8  0E0F               	movlw	15
  2167  00F0BA                     u7511:
  2168  00F0BA  CFDB FFE3          	movff	plusw2,plusw1
  2169  00F0BE  06E8               	decf	wreg,f,c
  2170  00F0C0  E2FC               	bc	u7511
  2171                           
  2172                           ;standbyMode.c: 1610: unsigned int drawerCount = 0;
  2173  00F0C2  0E00               	movlw	0
  2174  00F0C4  0100               	movlb	0	; () banked
  2175  00F0C6  6FF5               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2176  00F0C8  0E00               	movlw	0
  2177  00F0CA  6FF4               	movwf	standbyMode@drawerCount& (0+255),b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;standbyMode.c: 1611: unsigned int i = 0;
  2181  00F0CC  0E00               	movlw	0
  2182  00F0CE  6FF7               	movwf	(standbyMode@i+1)& (0+255),b
  2183  00F0D0  0E00               	movlw	0
  2184  00F0D2  6FF6               	movwf	standbyMode@i& (0+255),b
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;standbyMode.c: 1612: unsigned int validDrawer = 0;
  2188  00F0D4  0E00               	movlw	0
  2189  00F0D6  6FE6               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2190  00F0D8  0E00               	movlw	0
  2191  00F0DA  6FE5               	movwf	standbyMode@validDrawer& (0+255),b
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;standbyMode.c: 1613: unsigned int zero = 0;
  2195  00F0DC  0E00               	movlw	0
  2196  00F0DE  6FE8               	movwf	(standbyMode@zero+1)& (0+255),b
  2197  00F0E0  0E00               	movlw	0
  2198  00F0E2  6FE7               	movwf	standbyMode@zero& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;standbyMode.c: 1614: unsigned int firstIteration = 0;
  2202  00F0E4  0E00               	movlw	0
  2203  00F0E6  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2204  00F0E8  0E00               	movlw	0
  2205  00F0EA  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;standbyMode.c: 1615: unsigned int drawer = 0;
  2209  00F0EC  0E00               	movlw	0
  2210  00F0EE  6FF3               	movwf	(standbyMode@drawer+1)& (0+255),b
  2211  00F0F0  0E00               	movlw	0
  2212  00F0F2  6FF2               	movwf	standbyMode@drawer& (0+255),b
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;standbyMode.c: 1616: unsigned int diet = 0;
  2216  00F0F4  0E00               	movlw	0
  2217  00F0F6  6FEF               	movwf	(standbyMode@diet+1)& (0+255),b
  2218  00F0F8  0E00               	movlw	0
  2219  00F0FA  6FEE               	movwf	standbyMode@diet& (0+255),b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;standbyMode.c: 1617: unsigned int food = 0;
  2223  00F0FC  0E00               	movlw	0
  2224  00F0FE  6FF1               	movwf	(standbyMode@food+1)& (0+255),b
  2225  00F100  0E00               	movlw	0
  2226  00F102  6FF0               	movwf	standbyMode@food& (0+255),b
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;standbyMode.c: 1618: unsigned char logNumber = 0;
  2230  00F104  0E00               	movlw	0
  2231  00F106  6FEB               	movwf	standbyMode@logNumber& (0+255),b
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;standbyMode.c: 1619: unsigned int n = 0;
  2235  00F108  0E00               	movlw	0
  2236  00F10A  6FED               	movwf	(standbyMode@n+1)& (0+255),b
  2237  00F10C  0E00               	movlw	0
  2238  00F10E  6FEC               	movwf	standbyMode@n& (0+255),b
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;standbyMode.c: 1620: unsigned int round = 0;
  2242  00F110  0E00               	movlw	0
  2243  00F112  6FDD               	movwf	(standbyMode@round+1)& (0+255),b
  2244  00F114  0E00               	movlw	0
  2245  00F116  6FDC               	movwf	standbyMode@round& (0+255),b
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;standbyMode.c: 1621: unsigned int flat = 0;
  2249  00F118  0E00               	movlw	0
  2250  00F11A  6FDF               	movwf	(standbyMode@flat+1)& (0+255),b
  2251  00F11C  0E00               	movlw	0
  2252  00F11E  6FDE               	movwf	standbyMode@flat& (0+255),b
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;standbyMode.c: 1622: unsigned int lng = 0;
  2256  00F120  0E00               	movlw	0
  2257  00F122  6FE1               	movwf	(standbyMode@lng+1)& (0+255),b
  2258  00F124  0E00               	movlw	0
  2259  00F126  6FE0               	movwf	standbyMode@lng& (0+255),b
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;standbyMode.c: 1623: unsigned int decodedDiet = 0;
  2263  00F128  0E00               	movlw	0
  2264  00F12A  6FE3               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2265  00F12C  0E00               	movlw	0
  2266  00F12E  6FE2               	movwf	standbyMode@decodedDiet& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;standbyMode.c: 1625: unsigned char time[7];
  2270                           ;standbyMode.c: 1626: unsigned int x = 0;
  2271  00F130  0E00               	movlw	0
  2272  00F132  6FEA               	movwf	(standbyMode@x+1)& (0+255),b
  2273  00F134  0E00               	movlw	0
  2274  00F136  6FE9               	movwf	standbyMode@x& (0+255),b
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;standbyMode.c: 1627: initEEPROM();
  2278  00F138  EC31  F062         	call	_initEEPROM	;wreg free
  2279                           
  2280                           ;standbyMode.c: 1630: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2281  00F13C  0E01               	movlw	1
  2282  00F13E  ECC2  F061         	call	_lcdInst
  2283  00F142  0EC3               	movlw	195
  2284  00F144  6E64               	movwf	??_standbyMode& (0+255),c
  2285  00F146  0ECD               	movlw	205
  2286  00F148                     u8227:
  2287  00F148  2EE8               	decfsz	wreg,f,c
  2288  00F14A  D7FE               	bra	u8227
  2289  00F14C  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2290  00F14E  D7FC               	bra	u8227
  2291  00F150  F000               	nop	
  2292                           
  2293                           ;standbyMode.c: 1631: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2294  00F152  0E0C               	movlw	12
  2295  00F154  ECC2  F061         	call	_lcdInst
  2296                           
  2297                           ;standbyMode.c: 1632: printf("Standby");
  2298  00F158  0EB7               	movlw	low STR_1
  2299  00F15A  6E0D               	movwf	printf@f,c
  2300  00F15C  0EFF               	movlw	high STR_1
  2301  00F15E  6E0E               	movwf	printf@f+1,c
  2302  00F160  EC6E  F06B         	call	_printf	;wreg free
  2303                           
  2304                           ;standbyMode.c: 1633: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2305  00F164  0E33               	movlw	51
  2306  00F166  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2307  00F168  0EBB               	movlw	187
  2308  00F16A  6E64               	movwf	??_standbyMode& (0+255),c
  2309  00F16C  0EE0               	movlw	224
  2310  00F16E                     u8237:
  2311  00F16E  2EE8               	decfsz	wreg,f,c
  2312  00F170  D7FE               	bra	u8237
  2313  00F172  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2314  00F174  D7FC               	bra	u8237
  2315  00F176  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2316  00F178  D7FA               	bra	u8237
  2317                           
  2318                           ;standbyMode.c: 1634: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2319  00F17A  0E01               	movlw	1
  2320  00F17C  ECC2  F061         	call	_lcdInst
  2321  00F180  0EC3               	movlw	195
  2322  00F182  6E64               	movwf	??_standbyMode& (0+255),c
  2323  00F184  0ECD               	movlw	205
  2324  00F186                     u8247:
  2325  00F186  2EE8               	decfsz	wreg,f,c
  2326  00F188  D7FE               	bra	u8247
  2327  00F18A  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2328  00F18C  D7FC               	bra	u8247
  2329  00F18E  F000               	nop	
  2330                           
  2331                           ;standbyMode.c: 1635: printf("Press any key to");
  2332  00F190  0EA7               	movlw	low STR_24
  2333  00F192  6E0D               	movwf	printf@f,c
  2334  00F194  0EFD               	movlw	high STR_24
  2335  00F196  6E0E               	movwf	printf@f+1,c
  2336  00F198  EC6E  F06B         	call	_printf	;wreg free
  2337                           
  2338                           ;standbyMode.c: 1636: lcdInst(0xC0);;
  2339  00F19C  0EC0               	movlw	192
  2340  00F19E  ECC2  F061         	call	_lcdInst
  2341                           
  2342                           ;standbyMode.c: 1637: printf("begin operation.");
  2343  00F1A2  0E74               	movlw	low STR_61
  2344  00F1A4  6E0D               	movwf	printf@f,c
  2345  00F1A6  0EFD               	movlw	high STR_61
  2346  00F1A8  6E0E               	movwf	printf@f+1,c
  2347  00F1AA  EC6E  F06B         	call	_printf	;wreg free
  2348  00F1AE                     
  2349                           ;standbyMode.c: 1640: continue;
  2350  00F1AE  A281               	btfss	3969,1,c	;volatile
  2351  00F1B0  D7FE               	goto	l693
  2352                           
  2353                           ;standbyMode.c: 1641: }
  2354                           ;standbyMode.c: 1644: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2355  00F1B2  0E01               	movlw	1
  2356  00F1B4  ECC2  F061         	call	_lcdInst
  2357  00F1B8  0EC3               	movlw	195
  2358  00F1BA  6E64               	movwf	??_standbyMode& (0+255),c
  2359  00F1BC  0ECD               	movlw	205
  2360  00F1BE                     u8257:
  2361  00F1BE  2EE8               	decfsz	wreg,f,c
  2362  00F1C0  D7FE               	bra	u8257
  2363  00F1C2  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2364  00F1C4  D7FC               	bra	u8257
  2365  00F1C6  F000               	nop	
  2366                           
  2367                           ;standbyMode.c: 1645: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2368  00F1C8  0E0C               	movlw	12
  2369  00F1CA  ECC2  F061         	call	_lcdInst
  2370                           
  2371                           ;standbyMode.c: 1646: printf("Welcome to your");
  2372  00F1CE  0E39               	movlw	low STR_62
  2373  00F1D0  6E0D               	movwf	printf@f,c
  2374  00F1D2  0EFE               	movlw	high STR_62
  2375  00F1D4  6E0E               	movwf	printf@f+1,c
  2376  00F1D6  EC6E  F06B         	call	_printf	;wreg free
  2377                           
  2378                           ;standbyMode.c: 1647: lcdInst(0xC0);;
  2379  00F1DA  0EC0               	movlw	192
  2380  00F1DC  ECC2  F061         	call	_lcdInst
  2381                           
  2382                           ;standbyMode.c: 1648: printf("cabinet sorter!");
  2383  00F1E0  0EC9               	movlw	low STR_63
  2384  00F1E2  6E0D               	movwf	printf@f,c
  2385  00F1E4  0EFD               	movlw	high STR_63
  2386  00F1E6  6E0E               	movwf	printf@f+1,c
  2387  00F1E8  EC6E  F06B         	call	_printf	;wreg free
  2388                           
  2389                           ;standbyMode.c: 1649: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2390  00F1EC  0E33               	movlw	51
  2391  00F1EE  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2392  00F1F0  0EBB               	movlw	187
  2393  00F1F2  6E64               	movwf	??_standbyMode& (0+255),c
  2394  00F1F4  0EE0               	movlw	224
  2395  00F1F6                     u8267:
  2396  00F1F6  2EE8               	decfsz	wreg,f,c
  2397  00F1F8  D7FE               	bra	u8267
  2398  00F1FA  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2399  00F1FC  D7FC               	bra	u8267
  2400  00F1FE  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2401  00F200  D7FA               	bra	u8267
  2402                           
  2403                           ;standbyMode.c: 1652: writeEEPROM(250, 3);
  2404  00F202  0E03               	movlw	3
  2405  00F204  6E01               	movwf	writeEEPROM@data,c
  2406  00F206  0EFA               	movlw	250
  2407  00F208  EC44  F062         	call	_writeEEPROM
  2408                           
  2409                           ;standbyMode.c: 1653: writeEEPROM(0, 18);
  2410  00F20C  0E12               	movlw	18
  2411  00F20E  6E01               	movwf	writeEEPROM@data,c
  2412  00F210  0E00               	movlw	0
  2413  00F212  EC44  F062         	call	_writeEEPROM
  2414                           
  2415                           ;standbyMode.c: 1654: writeEEPROM(1, 2);
  2416  00F216  0E02               	movlw	2
  2417  00F218  6E01               	movwf	writeEEPROM@data,c
  2418  00F21A  0E01               	movlw	1
  2419  00F21C  EC44  F062         	call	_writeEEPROM
  2420                           
  2421                           ;standbyMode.c: 1655: writeEEPROM(2, 28);
  2422  00F220  0E1C               	movlw	28
  2423  00F222  6E01               	movwf	writeEEPROM@data,c
  2424  00F224  0E02               	movlw	2
  2425  00F226  EC44  F062         	call	_writeEEPROM
  2426                           
  2427                           ;standbyMode.c: 1656: writeEEPROM(3, 91);
  2428  00F22A  0E5B               	movlw	91
  2429  00F22C  6E01               	movwf	writeEEPROM@data,c
  2430  00F22E  0E03               	movlw	3
  2431  00F230  EC44  F062         	call	_writeEEPROM
  2432                           
  2433                           ;standbyMode.c: 1657: writeEEPROM(4, 3);
  2434  00F234  0E03               	movlw	3
  2435  00F236  6E01               	movwf	writeEEPROM@data,c
  2436  00F238  0E04               	movlw	4
  2437  00F23A  EC44  F062         	call	_writeEEPROM
  2438                           
  2439                           ;standbyMode.c: 1658: writeEEPROM(5, 15);
  2440  00F23E  0E0F               	movlw	15
  2441  00F240  6E01               	movwf	writeEEPROM@data,c
  2442  00F242  0E05               	movlw	5
  2443  00F244  EC44  F062         	call	_writeEEPROM
  2444                           
  2445                           ;standbyMode.c: 1659: writeEEPROM(6, 8);
  2446  00F248  0E08               	movlw	8
  2447  00F24A  6E01               	movwf	writeEEPROM@data,c
  2448  00F24C  0E06               	movlw	6
  2449  00F24E  EC44  F062         	call	_writeEEPROM
  2450                           
  2451                           ;standbyMode.c: 1660: writeEEPROM(7, 12);
  2452  00F252  0E0C               	movlw	12
  2453  00F254  6E01               	movwf	writeEEPROM@data,c
  2454  00F256  0E07               	movlw	7
  2455  00F258  EC44  F062         	call	_writeEEPROM
  2456                           
  2457                           ;standbyMode.c: 1661: writeEEPROM(8, 1);
  2458  00F25C  0E01               	movlw	1
  2459  00F25E  6E01               	movwf	writeEEPROM@data,c
  2460  00F260  0E08               	movlw	8
  2461  00F262  EC44  F062         	call	_writeEEPROM
  2462                           
  2463                           ;standbyMode.c: 1662: writeEEPROM(9, 13);
  2464  00F266  0E0D               	movlw	13
  2465  00F268  6E01               	movwf	writeEEPROM@data,c
  2466  00F26A  0E09               	movlw	9
  2467  00F26C  EC44  F062         	call	_writeEEPROM
  2468                           
  2469                           ;standbyMode.c: 1663: writeEEPROM(10, 0);
  2470  00F270  0E00               	movlw	0
  2471  00F272  6E01               	movwf	writeEEPROM@data,c
  2472  00F274  0E0A               	movlw	10
  2473  00F276  EC44  F062         	call	_writeEEPROM
  2474                           
  2475                           ;standbyMode.c: 1664: shiftEEPROM();
  2476  00F27A  EC56  F064         	call	_shiftEEPROM	;wreg free
  2477                           
  2478                           ;standbyMode.c: 1673: I2C_Master_Init(100000);
  2479  00F27E  0EA0               	movlw	160
  2480  00F280  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2481  00F282  0E86               	movlw	134
  2482  00F284  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2483  00F286  0E01               	movlw	1
  2484  00F288  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2485  00F28A  0E00               	movlw	0
  2486  00F28C  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2487  00F28E  ECF2  F062         	call	_I2C_Master_Init	;wreg free
  2488                           
  2489                           ;standbyMode.c: 1674: I2C_Master_Start();
  2490  00F292  ECAC  F061         	call	_I2C_Master_Start	;wreg free
  2491                           
  2492                           ;standbyMode.c: 1675: I2C_Master_Write(0b11010001);
  2493  00F296  0E00               	movlw	0
  2494  00F298  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2495  00F29A  0ED1               	movlw	209
  2496  00F29C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2497  00F29E  ECB4  F061         	call	_I2C_Master_Write	;wreg free
  2498                           
  2499                           ;standbyMode.c: 1676: for(x = 0; x < 6; x++){
  2500  00F2A2  0E00               	movlw	0
  2501  00F2A4  0100               	movlb	0	; () banked
  2502  00F2A6  6FEA               	movwf	(standbyMode@x+1)& (0+255),b
  2503  00F2A8  0E00               	movlw	0
  2504  00F2AA  6FE9               	movwf	standbyMode@x& (0+255),b
  2505  00F2AC                     l6692:
  2506                           
  2507                           ; BSR set to: 0
  2508  00F2AC  51EA               	movf	(standbyMode@x+1)& (0+255),w,b
  2509  00F2AE  E112               	bnz	l6702
  2510  00F2B0  0E06               	movlw	6
  2511  00F2B2  5DE9               	subwf	standbyMode@x& (0+255),w,b
  2512  00F2B4  B0D8               	btfsc	status,0,c
  2513  00F2B6  D00E               	goto	u7540
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;standbyMode.c: 1677: time[x] = I2C_Master_Read(0);
  2517                           
  2518                           ; BSR set to: 0
  2519                           
  2520                           ; BSR set to: 0
  2521  00F2B8  0ED0               	movlw	low standbyMode@time
  2522  00F2BA  25E9               	addwf	standbyMode@x& (0+255),w,b
  2523  00F2BC  6ED9               	movwf	fsr2l,c
  2524  00F2BE  0E00               	movlw	high standbyMode@time
  2525  00F2C0  21EA               	addwfc	(standbyMode@x+1)& (0+255),w,b
  2526  00F2C2  6EDA               	movwf	fsr2h,c
  2527  00F2C4  0E00               	movlw	0
  2528  00F2C6  ECFA  F061         	call	_I2C_Master_Read
  2529  00F2CA  6EDF               	movwf	indf2,c
  2530  00F2CC  0100               	movlb	0	; () banked
  2531  00F2CE  4BE9               	infsnz	standbyMode@x& (0+255),f,b
  2532  00F2D0  2BEA               	incf	(standbyMode@x+1)& (0+255),f,b
  2533  00F2D2  D7EC               	goto	l6692
  2534  00F2D4                     u7540:
  2535  00F2D4                     l6702:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;standbyMode.c: 1678: }
  2539                           ;standbyMode.c: 1679: time[6] = I2C_Master_Read(1);
  2540  00F2D4  0E01               	movlw	1
  2541  00F2D6  ECFA  F061         	call	_I2C_Master_Read
  2542  00F2DA  0100               	movlb	0	; () banked
  2543  00F2DC  6FD6               	movwf	(standbyMode@time+6)& (0+255),b
  2544                           
  2545                           ;standbyMode.c: 1680: I2C_Master_Stop();
  2546  00F2DE  ECB0  F061         	call	_I2C_Master_Stop	;wreg free
  2547                           
  2548                           ;standbyMode.c: 1682: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2549  00F2E2  0E01               	movlw	1
  2550  00F2E4  ECC2  F061         	call	_lcdInst
  2551  00F2E8  0EC3               	movlw	195
  2552  00F2EA  6E64               	movwf	??_standbyMode& (0+255),c
  2553  00F2EC  0ECD               	movlw	205
  2554  00F2EE                     u8277:
  2555  00F2EE  2EE8               	decfsz	wreg,f,c
  2556  00F2F0  D7FE               	bra	u8277
  2557  00F2F2  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2558  00F2F4  D7FC               	bra	u8277
  2559  00F2F6  F000               	nop	
  2560                           
  2561                           ;standbyMode.c: 1683: printf("Current date");
  2562  00F2F8  0E3E               	movlw	low STR_64
  2563  00F2FA  6E0D               	movwf	printf@f,c
  2564  00F2FC  0EFF               	movlw	high STR_64
  2565  00F2FE  6E0E               	movwf	printf@f+1,c
  2566  00F300  EC6E  F06B         	call	_printf	;wreg free
  2567                           
  2568                           ;standbyMode.c: 1684: lcdInst(0xC0);;
  2569  00F304  0EC0               	movlw	192
  2570  00F306  ECC2  F061         	call	_lcdInst
  2571                           
  2572                           ;standbyMode.c: 1685: printf("and time:");
  2573  00F30A  0E82               	movlw	low STR_65
  2574  00F30C  6E0D               	movwf	printf@f,c
  2575  00F30E  0EFF               	movlw	high STR_65
  2576  00F310  6E0E               	movwf	printf@f+1,c
  2577  00F312  EC6E  F06B         	call	_printf	;wreg free
  2578                           
  2579                           ;standbyMode.c: 1686: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2580  00F316  0E66               	movlw	102
  2581  00F318  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2582  00F31A  0E76               	movlw	118
  2583  00F31C  6E64               	movwf	??_standbyMode& (0+255),c
  2584  00F31E  0EC1               	movlw	193
  2585  00F320                     u8287:
  2586  00F320  2EE8               	decfsz	wreg,f,c
  2587  00F322  D7FE               	bra	u8287
  2588  00F324  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2589  00F326  D7FC               	bra	u8287
  2590  00F328  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2591  00F32A  D7FA               	bra	u8287
  2592  00F32C  F000               	nop	
  2593                           
  2594                           ;standbyMode.c: 1688: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2595  00F32E  0E01               	movlw	1
  2596  00F330  ECC2  F061         	call	_lcdInst
  2597  00F334  0EC3               	movlw	195
  2598  00F336  6E64               	movwf	??_standbyMode& (0+255),c
  2599  00F338  0ECD               	movlw	205
  2600  00F33A                     u8297:
  2601  00F33A  2EE8               	decfsz	wreg,f,c
  2602  00F33C  D7FE               	bra	u8297
  2603  00F33E  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2604  00F340  D7FC               	bra	u8297
  2605  00F342  F000               	nop	
  2606                           
  2607                           ;standbyMode.c: 1689: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2608  00F344  0EA4               	movlw	low STR_66
  2609  00F346  6E0D               	movwf	printf@f,c
  2610  00F348  0EFE               	movlw	high STR_66
  2611  00F34A  6E0E               	movwf	printf@f+1,c
  2612  00F34C  C0D6  F00F         	movff	standbyMode@time+6,?_printf+2
  2613  00F350  6A10               	clrf	?_printf+3,c
  2614  00F352  C0D5  F011         	movff	standbyMode@time+5,?_printf+4
  2615  00F356  6A12               	clrf	?_printf+5,c
  2616  00F358  C0D4  F013         	movff	standbyMode@time+4,?_printf+6
  2617  00F35C  6A14               	clrf	?_printf+7,c
  2618  00F35E  EC6E  F06B         	call	_printf	;wreg free
  2619                           
  2620                           ;standbyMode.c: 1690: lcdInst(0xC0);;
  2621  00F362  0EC0               	movlw	192
  2622  00F364  ECC2  F061         	call	_lcdInst
  2623                           
  2624                           ;standbyMode.c: 1691: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2625  00F368  0EB3               	movlw	low STR_67
  2626  00F36A  6E0D               	movwf	printf@f,c
  2627  00F36C  0EFE               	movlw	high STR_67
  2628  00F36E  6E0E               	movwf	printf@f+1,c
  2629  00F370  C0D2  F00F         	movff	standbyMode@time+2,?_printf+2
  2630  00F374  6A10               	clrf	?_printf+3,c
  2631  00F376  C0D1  F011         	movff	standbyMode@time+1,?_printf+4
  2632  00F37A  6A12               	clrf	?_printf+5,c
  2633  00F37C  C0D0  F013         	movff	standbyMode@time,?_printf+6
  2634  00F380  6A14               	clrf	?_printf+7,c
  2635  00F382  EC6E  F06B         	call	_printf	;wreg free
  2636                           
  2637                           ;standbyMode.c: 1692: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2638  00F386  0E66               	movlw	102
  2639  00F388  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2640  00F38A  0E76               	movlw	118
  2641  00F38C  6E64               	movwf	??_standbyMode& (0+255),c
  2642  00F38E  0EC1               	movlw	193
  2643  00F390                     u8307:
  2644  00F390  2EE8               	decfsz	wreg,f,c
  2645  00F392  D7FE               	bra	u8307
  2646  00F394  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2647  00F396  D7FC               	bra	u8307
  2648  00F398  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2649  00F39A  D7FA               	bra	u8307
  2650  00F39C  F000               	nop	
  2651                           
  2652                           ;standbyMode.c: 1695: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2653  00F39E  0E01               	movlw	1
  2654  00F3A0  ECC2  F061         	call	_lcdInst
  2655  00F3A4  0EC3               	movlw	195
  2656  00F3A6  6E64               	movwf	??_standbyMode& (0+255),c
  2657  00F3A8  0ECD               	movlw	205
  2658  00F3AA                     u8317:
  2659  00F3AA  2EE8               	decfsz	wreg,f,c
  2660  00F3AC  D7FE               	bra	u8317
  2661  00F3AE  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2662  00F3B0  D7FC               	bra	u8317
  2663  00F3B2  F000               	nop	
  2664                           
  2665                           ;standbyMode.c: 1696: printf("Press # to");
  2666  00F3B4  0E77               	movlw	low STR_68
  2667  00F3B6  6E0D               	movwf	printf@f,c
  2668  00F3B8  0EFF               	movlw	high STR_68
  2669  00F3BA  6E0E               	movwf	printf@f+1,c
  2670  00F3BC  EC6E  F06B         	call	_printf	;wreg free
  2671                           
  2672                           ;standbyMode.c: 1697: lcdInst(0xC0);;
  2673  00F3C0  0EC0               	movlw	192
  2674  00F3C2  ECC2  F061         	call	_lcdInst
  2675                           
  2676                           ;standbyMode.c: 1698: printf("view logs,");
  2677  00F3C6  0E4B               	movlw	low STR_69
  2678  00F3C8  6E0D               	movwf	printf@f,c
  2679  00F3CA  0EFF               	movlw	high STR_69
  2680  00F3CC  6E0E               	movwf	printf@f+1,c
  2681  00F3CE  EC6E  F06B         	call	_printf	;wreg free
  2682                           
  2683                           ;standbyMode.c: 1699: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2684  00F3D2  0E66               	movlw	102
  2685  00F3D4  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2686  00F3D6  0E76               	movlw	118
  2687  00F3D8  6E64               	movwf	??_standbyMode& (0+255),c
  2688  00F3DA  0EC1               	movlw	193
  2689  00F3DC                     u8327:
  2690  00F3DC  2EE8               	decfsz	wreg,f,c
  2691  00F3DE  D7FE               	bra	u8327
  2692  00F3E0  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2693  00F3E2  D7FC               	bra	u8327
  2694  00F3E4  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2695  00F3E6  D7FA               	bra	u8327
  2696  00F3E8  F000               	nop	
  2697                           
  2698                           ;standbyMode.c: 1700: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2699  00F3EA  0E01               	movlw	1
  2700  00F3EC  ECC2  F061         	call	_lcdInst
  2701  00F3F0  0EC3               	movlw	195
  2702  00F3F2  6E64               	movwf	??_standbyMode& (0+255),c
  2703  00F3F4  0ECD               	movlw	205
  2704  00F3F6                     u8337:
  2705  00F3F6  2EE8               	decfsz	wreg,f,c
  2706  00F3F8  D7FE               	bra	u8337
  2707  00F3FA  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2708  00F3FC  D7FC               	bra	u8337
  2709  00F3FE  F000               	nop	
  2710                           
  2711                           ;standbyMode.c: 1701: printf("or press D to");
  2712  00F400  0EFB               	movlw	low STR_70
  2713  00F402  6E0D               	movwf	printf@f,c
  2714  00F404  0EFE               	movlw	high STR_70
  2715  00F406  6E0E               	movwf	printf@f+1,c
  2716  00F408  EC6E  F06B         	call	_printf	;wreg free
  2717                           
  2718                           ;standbyMode.c: 1702: lcdInst(0xC0);;
  2719  00F40C  0EC0               	movlw	192
  2720  00F40E  ECC2  F061         	call	_lcdInst
  2721                           
  2722                           ;standbyMode.c: 1703: printf("begin operation.");
  2723  00F412  0E74               	movlw	low STR_61
  2724  00F414  6E0D               	movwf	printf@f,c
  2725  00F416  0EFD               	movlw	high STR_61
  2726  00F418  6E0E               	movwf	printf@f+1,c
  2727  00F41A  EC6E  F06B         	call	_printf	;wreg free
  2728  00F41E  A281               	btfss	3969,1,c	;volatile
  2729  00F420  D7FE               	goto	l698
  2730                           
  2731                           ;standbyMode.c: 1706: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2732  00F422  3881               	swapf	3969,w,c	;volatile
  2733  00F424  0B0F               	andlw	15
  2734  00F426  0B0F               	andlw	15
  2735  00F428  0100               	movlb	0	; () banked
  2736  00F42A  6FDB               	movwf	standbyMode@keypress& (0+255),b
  2737  00F42C                     
  2738                           ; BSR set to: 0
  2739  00F42C  B281               	btfsc	3969,1,c	;volatile
  2740  00F42E  D7FE               	goto	l701
  2741                           
  2742                           ;standbyMode.c: 1709: if (keypress == 15){
  2743  00F430  0E0F               	movlw	15
  2744  00F432  0100               	movlb	0	; () banked
  2745  00F434  19DB               	xorwf	standbyMode@keypress& (0+255),w,b
  2746  00F436  A4D8               	btfss	status,2,c
  2747  00F438  D3D1               	goto	l703
  2748  00F43A                     u7570:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;standbyMode.c: 1753: if (firstIteration == 1){
  2752                           
  2753                           ; BSR set to: 0
  2754                           
  2755                           ;standbyMode.c: 1752: while (1){
  2756  00F43A  05D7               	decf	standbyMode@firstIteration& (0+255),w,b
  2757  00F43C  11D8               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  2758  00F43E  A4D8               	btfss	status,2,c
  2759  00F440  D1C1               	goto	l705
  2760  00F442                     u7580:
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;standbyMode.c: 1756: if(drawerCount >= 8){
  2764                           
  2765                           ; BSR set to: 0
  2766                           
  2767                           ;standbyMode.c: 1754: while (1){
  2768  00F442  51F5               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  2769  00F444  E104               	bnz	u7590
  2770  00F446  0E08               	movlw	8
  2771  00F448  5DF4               	subwf	standbyMode@drawerCount& (0+255),w,b
  2772  00F44A  A0D8               	btfss	status,0,c
  2773  00F44C  D02A               	goto	l707
  2774  00F44E                     u7590:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;standbyMode.c: 1757: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2778  00F44E  0E01               	movlw	1
  2779  00F450  ECC2  F061         	call	_lcdInst
  2780  00F454  0EC3               	movlw	195
  2781  00F456  6E64               	movwf	??_standbyMode& (0+255),c
  2782  00F458  0ECD               	movlw	205
  2783  00F45A                     u8347:
  2784  00F45A  2EE8               	decfsz	wreg,f,c
  2785  00F45C  D7FE               	bra	u8347
  2786  00F45E  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2787  00F460  D7FC               	bra	u8347
  2788  00F462  F000               	nop	
  2789                           
  2790                           ;standbyMode.c: 1758: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2791  00F464  0E0C               	movlw	12
  2792  00F466  ECC2  F061         	call	_lcdInst
  2793                           
  2794                           ;standbyMode.c: 1759: printf("Maximum of 8");
  2795  00F46A  0E24               	movlw	low STR_72
  2796  00F46C  6E0D               	movwf	printf@f,c
  2797  00F46E  0EFF               	movlw	high STR_72
  2798  00F470  6E0E               	movwf	printf@f+1,c
  2799  00F472  EC6E  F06B         	call	_printf	;wreg free
  2800                           
  2801                           ;standbyMode.c: 1760: lcdInst(0xC0);;
  2802  00F476  0EC0               	movlw	192
  2803  00F478  ECC2  F061         	call	_lcdInst
  2804                           
  2805                           ;standbyMode.c: 1761: printf("drawers reached!");
  2806  00F47C  0E63               	movlw	low STR_73
  2807  00F47E  6E0D               	movwf	printf@f,c
  2808  00F480  0EFD               	movlw	high STR_73
  2809  00F482  6E0E               	movwf	printf@f+1,c
  2810  00F484  EC6E  F06B         	call	_printf	;wreg free
  2811                           
  2812                           ;standbyMode.c: 1762: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2813  00F488  0E66               	movlw	102
  2814  00F48A  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  2815  00F48C  0E76               	movlw	118
  2816  00F48E  6E64               	movwf	??_standbyMode& (0+255),c
  2817  00F490  0EC1               	movlw	193
  2818  00F492                     u8357:
  2819  00F492  2EE8               	decfsz	wreg,f,c
  2820  00F494  D7FE               	bra	u8357
  2821  00F496  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2822  00F498  D7FC               	bra	u8357
  2823  00F49A  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2824  00F49C  D7FA               	bra	u8357
  2825  00F49E  F000               	nop	
  2826                           
  2827                           ;standbyMode.c: 1763: break;
  2828  00F4A0  D2F8               	goto	l733
  2829  00F4A2                     l707:
  2830                           
  2831                           ;standbyMode.c: 1764: }
  2832                           ;standbyMode.c: 1766: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  2833  00F4A2  0E01               	movlw	1
  2834  00F4A4  ECC2  F061         	call	_lcdInst
  2835  00F4A8  0EC3               	movlw	195
  2836  00F4AA  6E64               	movwf	??_standbyMode& (0+255),c
  2837  00F4AC  0ECD               	movlw	205
  2838  00F4AE                     u8367:
  2839  00F4AE  2EE8               	decfsz	wreg,f,c
  2840  00F4B0  D7FE               	bra	u8367
  2841  00F4B2  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2842  00F4B4  D7FC               	bra	u8367
  2843  00F4B6  F000               	nop	
  2844                           
  2845                           ;standbyMode.c: 1767: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2846  00F4B8  0E0C               	movlw	12
  2847  00F4BA  ECC2  F061         	call	_lcdInst
  2848                           
  2849                           ;standbyMode.c: 1768: printf("Another drawer?");
  2850  00F4BE  0E29               	movlw	low STR_74
  2851  00F4C0  6E0D               	movwf	printf@f,c
  2852  00F4C2  0EFE               	movlw	high STR_74
  2853  00F4C4  6E0E               	movwf	printf@f+1,c
  2854  00F4C6  EC6E  F06B         	call	_printf	;wreg free
  2855                           
  2856                           ;standbyMode.c: 1769: lcdInst(0xC0);;
  2857  00F4CA  0EC0               	movlw	192
  2858  00F4CC  ECC2  F061         	call	_lcdInst
  2859                           
  2860                           ;standbyMode.c: 1770: printf("# = No, D = Yes");
  2861  00F4D0  0E49               	movlw	low STR_48
  2862  00F4D2  6E0D               	movwf	printf@f,c
  2863  00F4D4  0EFE               	movlw	high STR_48
  2864  00F4D6  6E0E               	movwf	printf@f+1,c
  2865  00F4D8  EC6E  F06B         	call	_printf	;wreg free
  2866  00F4DC  A281               	btfss	3969,1,c	;volatile
  2867  00F4DE  D7FE               	goto	l711
  2868                           
  2869                           ;standbyMode.c: 1773: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2870  00F4E0  3881               	swapf	3969,w,c	;volatile
  2871  00F4E2  0B0F               	andlw	15
  2872  00F4E4  0B0F               	andlw	15
  2873  00F4E6  0100               	movlb	0	; () banked
  2874  00F4E8  6FE4               	movwf	standbyMode@keypress1& (0+255),b
  2875  00F4EA                     
  2876                           ; BSR set to: 0
  2877  00F4EA  B281               	btfsc	3969,1,c	;volatile
  2878  00F4EC  D7FE               	goto	l714
  2879                           
  2880                           ;standbyMode.c: 1776: if (keypress1 == 15){
  2881  00F4EE  0E0F               	movlw	15
  2882  00F4F0  0100               	movlb	0	; () banked
  2883  00F4F2  19E4               	xorwf	standbyMode@keypress1& (0+255),w,b
  2884  00F4F4  A4D8               	btfss	status,2,c
  2885  00F4F6  D15F               	goto	l716
  2886  00F4F8                     u7620:
  2887                           
  2888                           ; BSR set to: 0
  2889                           
  2890                           ; BSR set to: 0
  2891                           
  2892                           ;standbyMode.c: 1777: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2893  00F4F8  0E01               	movlw	1
  2894  00F4FA  ECC2  F061         	call	_lcdInst
  2895  00F4FE  0EC3               	movlw	195
  2896  00F500  6E64               	movwf	??_standbyMode& (0+255),c
  2897  00F502  0ECD               	movlw	205
  2898  00F504                     u8377:
  2899  00F504  2EE8               	decfsz	wreg,f,c
  2900  00F506  D7FE               	bra	u8377
  2901  00F508  2E64               	decfsz	??_standbyMode& (0+255),f,c
  2902  00F50A  D7FC               	bra	u8377
  2903  00F50C  F000               	nop	
  2904                           
  2905                           ;standbyMode.c: 1778: drawer = which_drawer();
  2906  00F50E  ECED  F068         	call	_which_drawer	;wreg free
  2907  00F512  C029  F0F2         	movff	?_which_drawer,standbyMode@drawer
  2908  00F516  C02A  F0F3         	movff	?_which_drawer+1,standbyMode@drawer+1
  2909                           
  2910                           ;standbyMode.c: 1780: if (drawer == 100){
  2911  00F51A  0E64               	movlw	100
  2912  00F51C  0100               	movlb	0	; () banked
  2913  00F51E  19F2               	xorwf	standbyMode@drawer& (0+255),w,b
  2914  00F520  11F3               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  2915  00F522  A4D8               	btfss	status,2,c
  2916  00F524  D005               	goto	l718
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;standbyMode.c: 1781: drawer = 0;
  2920  00F526  0E00               	movlw	0
  2921  00F528  6FF3               	movwf	(standbyMode@drawer+1)& (0+255),b
  2922  00F52A  0E00               	movlw	0
  2923  00F52C  6FF2               	movwf	standbyMode@drawer& (0+255),b
  2924                           
  2925                           ;standbyMode.c: 1782: goto DRAWER_BACK;
  2926  00F52E  D7B9               	goto	l707
  2927  00F530                     l718:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;standbyMode.c: 1783: }
  2931                           ;standbyMode.c: 1785: for (i=0; i<8; i++){
  2932                           
  2933                           ; BSR set to: 0
  2934  00F530  0E00               	movlw	0
  2935  00F532  6FF7               	movwf	(standbyMode@i+1)& (0+255),b
  2936  00F534  0E00               	movlw	0
  2937  00F536  6FF6               	movwf	standbyMode@i& (0+255),b
  2938  00F538                     l6790:
  2939                           
  2940                           ; BSR set to: 0
  2941  00F538  51F7               	movf	(standbyMode@i+1)& (0+255),w,b
  2942  00F53A  E12C               	bnz	l6806
  2943  00F53C  0E08               	movlw	8
  2944  00F53E  5DF6               	subwf	standbyMode@i& (0+255),w,b
  2945  00F540  B0D8               	btfsc	status,0,c
  2946  00F542  D028               	goto	u7670
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;standbyMode.c: 1786: if (drawerInformation[i] == drawer){
  2950                           
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954  00F544  90D8               	bcf	status,0,c
  2955  00F546  35F6               	rlcf	standbyMode@i& (0+255),w,b
  2956  00F548  6ED9               	movwf	fsr2l,c
  2957  00F54A  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  2958  00F54C  6EDA               	movwf	fsr2h,c
  2959  00F54E  0EC0               	movlw	low standbyMode@drawerInformation
  2960  00F550  26D9               	addwf	fsr2l,f,c
  2961  00F552  0E00               	movlw	high standbyMode@drawerInformation
  2962  00F554  22DA               	addwfc	fsr2h,f,c
  2963  00F556  51F2               	movf	standbyMode@drawer& (0+255),w,b
  2964  00F558  18DE               	xorwf	postinc2,w,c
  2965  00F55A  E119               	bnz	l6802
  2966  00F55C  51F3               	movf	(standbyMode@drawer+1)& (0+255),w,b
  2967  00F55E  18DE               	xorwf	postinc2,w,c
  2968  00F560  A4D8               	btfss	status,2,c
  2969  00F562  D015               	goto	l722
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;standbyMode.c: 1787: validDrawer = 1;
  2973  00F564  0E00               	movlw	0
  2974  00F566  6FE6               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2975  00F568  0E01               	movlw	1
  2976  00F56A  6FE5               	movwf	standbyMode@validDrawer& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;standbyMode.c: 1788: if (drawerInformation[i] == 0){
  2980  00F56C  90D8               	bcf	status,0,c
  2981  00F56E  35F6               	rlcf	standbyMode@i& (0+255),w,b
  2982  00F570  6ED9               	movwf	fsr2l,c
  2983  00F572  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  2984  00F574  6EDA               	movwf	fsr2h,c
  2985  00F576  0EC0               	movlw	low standbyMode@drawerInformation
  2986  00F578  26D9               	addwf	fsr2l,f,c
  2987  00F57A  0E00               	movlw	high standbyMode@drawerInformation
  2988  00F57C  22DA               	addwfc	fsr2h,f,c
  2989  00F57E  50DE               	movf	postinc2,w,c
  2990  00F580  10DE               	iorwf	postinc2,w,c
  2991  00F582  A4D8               	btfss	status,2,c
  2992  00F584  D004               	goto	l722
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;standbyMode.c: 1789: zero = 1;
  2996  00F586  0E00               	movlw	0
  2997  00F588  6FE8               	movwf	(standbyMode@zero+1)& (0+255),b
  2998  00F58A  0E01               	movlw	1
  2999  00F58C  6FE7               	movwf	standbyMode@zero& (0+255),b
  3000  00F58E                     l722:
  3001  00F58E                     l6802:
  3002                           
  3003                           ; BSR set to: 0
  3004  00F58E  4BF6               	infsnz	standbyMode@i& (0+255),f,b
  3005  00F590  2BF7               	incf	(standbyMode@i+1)& (0+255),f,b
  3006  00F592  D7D2               	goto	l6790
  3007  00F594                     u7670:
  3008  00F594                     l6806:
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;standbyMode.c: 1790: }
  3012                           ;standbyMode.c: 1791: }
  3013                           ;standbyMode.c: 1792: }
  3014                           ;standbyMode.c: 1793: if (validDrawer == 1){
  3015  00F594  05E5               	decf	standbyMode@validDrawer& (0+255),w,b
  3016  00F596  11E6               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3017  00F598  A4D8               	btfss	status,2,c
  3018  00F59A  D062               	goto	l723
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;standbyMode.c: 1794: if (zero == 1){
  3022  00F59C  05E7               	decf	standbyMode@zero& (0+255),w,b
  3023  00F59E  11E8               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3024  00F5A0  A4D8               	btfss	status,2,c
  3025  00F5A2  D02F               	goto	l724
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;standbyMode.c: 1795: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3029  00F5A4  0E01               	movlw	1
  3030  00F5A6  ECC2  F061         	call	_lcdInst
  3031  00F5AA  0EC3               	movlw	195
  3032  00F5AC  6E64               	movwf	??_standbyMode& (0+255),c
  3033  00F5AE  0ECD               	movlw	205
  3034  00F5B0                     u8387:
  3035  00F5B0  2EE8               	decfsz	wreg,f,c
  3036  00F5B2  D7FE               	bra	u8387
  3037  00F5B4  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3038  00F5B6  D7FC               	bra	u8387
  3039  00F5B8  F000               	nop	
  3040                           
  3041                           ;standbyMode.c: 1796: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3042  00F5BA  0E0C               	movlw	12
  3043  00F5BC  ECC2  F061         	call	_lcdInst
  3044                           
  3045                           ;standbyMode.c: 1797: printf("No drawer");
  3046  00F5C0  0E8C               	movlw	low STR_76
  3047  00F5C2  6E0D               	movwf	printf@f,c
  3048  00F5C4  0EFF               	movlw	high STR_76
  3049  00F5C6  6E0E               	movwf	printf@f+1,c
  3050  00F5C8  EC6E  F06B         	call	_printf	;wreg free
  3051                           
  3052                           ;standbyMode.c: 1798: lcdInst(0xC0);;
  3053  00F5CC  0EC0               	movlw	192
  3054  00F5CE  ECC2  F061         	call	_lcdInst
  3055                           
  3056                           ;standbyMode.c: 1799: printf("number pressed.");
  3057  00F5D2  0ED9               	movlw	low STR_77
  3058  00F5D4  6E0D               	movwf	printf@f,c
  3059  00F5D6  0EFD               	movlw	high STR_77
  3060  00F5D8  6E0E               	movwf	printf@f+1,c
  3061  00F5DA  EC6E  F06B         	call	_printf	;wreg free
  3062                           
  3063                           ;standbyMode.c: 1800: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3064  00F5DE  0E66               	movlw	102
  3065  00F5E0  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  3066  00F5E2  0E76               	movlw	118
  3067  00F5E4  6E64               	movwf	??_standbyMode& (0+255),c
  3068  00F5E6  0EC1               	movlw	193
  3069  00F5E8                     u8397:
  3070  00F5E8  2EE8               	decfsz	wreg,f,c
  3071  00F5EA  D7FE               	bra	u8397
  3072  00F5EC  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3073  00F5EE  D7FC               	bra	u8397
  3074  00F5F0  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3075  00F5F2  D7FA               	bra	u8397
  3076  00F5F4  F000               	nop	
  3077                           
  3078                           ;standbyMode.c: 1801: zero = 0;
  3079  00F5F6  0E00               	movlw	0
  3080  00F5F8  0100               	movlb	0	; () banked
  3081  00F5FA  6FE8               	movwf	(standbyMode@zero+1)& (0+255),b
  3082  00F5FC  0E00               	movlw	0
  3083  00F5FE  6FE7               	movwf	standbyMode@zero& (0+255),b
  3084                           
  3085                           ;standbyMode.c: 1802: }
  3086  00F600  D029               	goto	l725
  3087  00F602                     l724:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;standbyMode.c: 1803: else{
  3091                           ;standbyMode.c: 1804: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3092                           
  3093                           ; BSR set to: 0
  3094  00F602  0E01               	movlw	1
  3095  00F604  ECC2  F061         	call	_lcdInst
  3096  00F608  0EC3               	movlw	195
  3097  00F60A  6E64               	movwf	??_standbyMode& (0+255),c
  3098  00F60C  0ECD               	movlw	205
  3099  00F60E                     u8407:
  3100  00F60E  2EE8               	decfsz	wreg,f,c
  3101  00F610  D7FE               	bra	u8407
  3102  00F612  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3103  00F614  D7FC               	bra	u8407
  3104  00F616  F000               	nop	
  3105                           
  3106                           ;standbyMode.c: 1805: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3107  00F618  0E0C               	movlw	12
  3108  00F61A  ECC2  F061         	call	_lcdInst
  3109                           
  3110                           ;standbyMode.c: 1806: printf("Drawer already");
  3111  00F61E  0EC2               	movlw	low STR_78
  3112  00F620  6E0D               	movwf	printf@f,c
  3113  00F622  0EFE               	movlw	high STR_78
  3114  00F624  6E0E               	movwf	printf@f+1,c
  3115  00F626  EC6E  F06B         	call	_printf	;wreg free
  3116                           
  3117                           ;standbyMode.c: 1807: lcdInst(0xC0);;
  3118  00F62A  0EC0               	movlw	192
  3119  00F62C  ECC2  F061         	call	_lcdInst
  3120                           
  3121                           ;standbyMode.c: 1808: printf("in use!");
  3122  00F630  0E9F               	movlw	low STR_79
  3123  00F632  6E0D               	movwf	printf@f,c
  3124  00F634  0EFF               	movlw	high STR_79
  3125  00F636  6E0E               	movwf	printf@f+1,c
  3126  00F638  EC6E  F06B         	call	_printf	;wreg free
  3127                           
  3128                           ;standbyMode.c: 1809: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3129  00F63C  0E66               	movlw	102
  3130  00F63E  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  3131  00F640  0E76               	movlw	118
  3132  00F642  6E64               	movwf	??_standbyMode& (0+255),c
  3133  00F644  0EC1               	movlw	193
  3134  00F646                     u8417:
  3135  00F646  2EE8               	decfsz	wreg,f,c
  3136  00F648  D7FE               	bra	u8417
  3137  00F64A  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3138  00F64C  D7FC               	bra	u8417
  3139  00F64E  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3140  00F650  D7FA               	bra	u8417
  3141  00F652  F000               	nop	
  3142  00F654                     l725:
  3143                           
  3144                           ;standbyMode.c: 1810: }
  3145                           ;standbyMode.c: 1811: validDrawer = 0;
  3146  00F654  0E00               	movlw	0
  3147  00F656  0100               	movlb	0	; () banked
  3148  00F658  6FE6               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3149  00F65A  0E00               	movlw	0
  3150  00F65C  6FE5               	movwf	standbyMode@validDrawer& (0+255),b
  3151                           
  3152                           ;standbyMode.c: 1812: continue;
  3153  00F65E  D6F1               	goto	u7580
  3154  00F660                     l723:
  3155                           
  3156                           ; BSR set to: 0
  3157                           
  3158                           ; BSR set to: 0
  3159                           
  3160                           ;standbyMode.c: 1814: else{
  3161                           ;standbyMode.c: 1815: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3162                           
  3163                           ; BSR set to: 0
  3164  00F660  0E01               	movlw	1
  3165  00F662  ECC2  F061         	call	_lcdInst
  3166  00F666  0EC3               	movlw	195
  3167  00F668  6E64               	movwf	??_standbyMode& (0+255),c
  3168  00F66A  0ECD               	movlw	205
  3169  00F66C                     u8427:
  3170  00F66C  2EE8               	decfsz	wreg,f,c
  3171  00F66E  D7FE               	bra	u8427
  3172  00F670  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3173  00F672  D7FC               	bra	u8427
  3174  00F674  F000               	nop	
  3175                           
  3176                           ;standbyMode.c: 1816: diet = diet_press(drawer);
  3177  00F676  C0F2  F029         	movff	standbyMode@drawer,diet_press@drawer
  3178  00F67A  C0F3  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3179  00F67E  EC67  F06D         	call	_diet_press	;wreg free
  3180  00F682  C029  F0EE         	movff	?_diet_press,standbyMode@diet
  3181  00F686  C02A  F0EF         	movff	?_diet_press+1,standbyMode@diet+1
  3182                           
  3183                           ;standbyMode.c: 1817: if (diet == 100){
  3184  00F68A  0E64               	movlw	100
  3185  00F68C  0100               	movlb	0	; () banked
  3186  00F68E  19EE               	xorwf	standbyMode@diet& (0+255),w,b
  3187  00F690  11EF               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3188  00F692  A4D8               	btfss	status,2,c
  3189  00F694  D005               	goto	l729
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;standbyMode.c: 1818: diet = 0;
  3193  00F696  0E00               	movlw	0
  3194  00F698  6FEF               	movwf	(standbyMode@diet+1)& (0+255),b
  3195  00F69A  0E00               	movlw	0
  3196  00F69C  6FEE               	movwf	standbyMode@diet& (0+255),b
  3197                           
  3198                           ;standbyMode.c: 1819: goto DIET_BACK1;
  3199  00F69E  D72C               	goto	u7620
  3200  00F6A0                     l729:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;standbyMode.c: 1820: }
  3204                           ;standbyMode.c: 1822: food = food_press(diet, drawer);
  3205                           
  3206                           ; BSR set to: 0
  3207  00F6A0  C0EE  F029         	movff	standbyMode@diet,food_press@dietSum
  3208  00F6A4  C0EF  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3209  00F6A8  C0F2  F02B         	movff	standbyMode@drawer,food_press@drawer
  3210  00F6AC  C0F3  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3211  00F6B0  ECF0  F067         	call	_food_press	;wreg free
  3212  00F6B4  C029  F0F0         	movff	?_food_press,standbyMode@food
  3213  00F6B8  C02A  F0F1         	movff	?_food_press+1,standbyMode@food+1
  3214                           
  3215                           ;standbyMode.c: 1823: if (food == 100){
  3216  00F6BC  0E64               	movlw	100
  3217  00F6BE  0100               	movlb	0	; () banked
  3218  00F6C0  19F0               	xorwf	standbyMode@food& (0+255),w,b
  3219  00F6C2  11F1               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3220  00F6C4  A4D8               	btfss	status,2,c
  3221  00F6C6  D009               	goto	l730
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;standbyMode.c: 1824: diet = 0;
  3225  00F6C8  0E00               	movlw	0
  3226  00F6CA  6FEF               	movwf	(standbyMode@diet+1)& (0+255),b
  3227  00F6CC  0E00               	movlw	0
  3228  00F6CE  6FEE               	movwf	standbyMode@diet& (0+255),b
  3229                           
  3230                           ;standbyMode.c: 1825: food = 0;
  3231  00F6D0  0E00               	movlw	0
  3232  00F6D2  6FF1               	movwf	(standbyMode@food+1)& (0+255),b
  3233  00F6D4  0E00               	movlw	0
  3234  00F6D6  6FF0               	movwf	standbyMode@food& (0+255),b
  3235                           
  3236                           ;standbyMode.c: 1826: goto FOOD_BACK1;
  3237  00F6D8  D7C3               	goto	l723
  3238  00F6DA                     l730:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;standbyMode.c: 1827: }
  3242                           ;standbyMode.c: 1828: drawerInformation[drawerCount] = drawer;
  3243                           
  3244                           ; BSR set to: 0
  3245  00F6DA  90D8               	bcf	status,0,c
  3246  00F6DC  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3247  00F6DE  6ED9               	movwf	fsr2l,c
  3248  00F6E0  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3249  00F6E2  6EDA               	movwf	fsr2h,c
  3250  00F6E4  0EC0               	movlw	low standbyMode@drawerInformation
  3251  00F6E6  26D9               	addwf	fsr2l,f,c
  3252  00F6E8  0E00               	movlw	high standbyMode@drawerInformation
  3253  00F6EA  22DA               	addwfc	fsr2h,f,c
  3254  00F6EC  C0F2  FFDE         	movff	standbyMode@drawer,postinc2
  3255  00F6F0  C0F3  FFDD         	movff	standbyMode@drawer+1,postdec2
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;standbyMode.c: 1829: decodedDiet = decode_diet(diet);
  3259  00F6F4  C0EE  F001         	movff	standbyMode@diet,decode_diet@dietType
  3260  00F6F8  C0EF  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3261  00F6FC  EC5E  F067         	call	_decode_diet	;wreg free
  3262  00F700  C001  F0E2         	movff	?_decode_diet,standbyMode@decodedDiet
  3263  00F704  C002  F0E3         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3264                           
  3265                           ;standbyMode.c: 1830: dietType[drawerCount] = decodedDiet;
  3266  00F708  90D8               	bcf	status,0,c
  3267  00F70A  0100               	movlb	0	; () banked
  3268  00F70C  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3269  00F70E  6ED9               	movwf	fsr2l,c
  3270  00F710  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3271  00F712  6EDA               	movwf	fsr2h,c
  3272  00F714  0EB0               	movlw	low standbyMode@dietType
  3273  00F716  26D9               	addwf	fsr2l,f,c
  3274  00F718  0E00               	movlw	high standbyMode@dietType
  3275  00F71A  22DA               	addwfc	fsr2h,f,c
  3276  00F71C  C0E2  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3277  00F720  C0E3  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3278                           
  3279                           ;standbyMode.c: 1831: round = getRound(food);
  3280  00F724  C0F0  F001         	movff	standbyMode@food,getRound@code
  3281  00F728  C0F1  F002         	movff	standbyMode@food+1,getRound@code+1
  3282  00F72C  EC5B  F066         	call	_getRound	;wreg free
  3283  00F730  C001  F0DC         	movff	?_getRound,standbyMode@round
  3284  00F734  C002  F0DD         	movff	?_getRound+1,standbyMode@round+1
  3285                           
  3286                           ;standbyMode.c: 1832: flat = getFlat(food);
  3287  00F738  C0F0  F001         	movff	standbyMode@food,getFlat@code
  3288  00F73C  C0F1  F002         	movff	standbyMode@food+1,getFlat@code+1
  3289  00F740  ECE3  F065         	call	_getFlat	;wreg free
  3290  00F744  C001  F0DE         	movff	?_getFlat,standbyMode@flat
  3291  00F748  C002  F0DF         	movff	?_getFlat+1,standbyMode@flat+1
  3292                           
  3293                           ;standbyMode.c: 1833: lng = getLong(food);
  3294  00F74C  C0F0  F001         	movff	standbyMode@food,getLong@code
  3295  00F750  C0F1  F002         	movff	standbyMode@food+1,getLong@code+1
  3296  00F754  ECD3  F066         	call	_getLong	;wreg free
  3297  00F758  C001  F0E0         	movff	?_getLong,standbyMode@lng
  3298  00F75C  C002  F0E1         	movff	?_getLong+1,standbyMode@lng+1
  3299                           
  3300                           ;standbyMode.c: 1834: roundPieces[drawerCount] = round;
  3301  00F760  90D8               	bcf	status,0,c
  3302  00F762  0100               	movlb	0	; () banked
  3303  00F764  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3304  00F766  6ED9               	movwf	fsr2l,c
  3305  00F768  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3306  00F76A  6EDA               	movwf	fsr2h,c
  3307  00F76C  0E80               	movlw	low standbyMode@roundPieces
  3308  00F76E  26D9               	addwf	fsr2l,f,c
  3309  00F770  0E00               	movlw	high standbyMode@roundPieces
  3310  00F772  22DA               	addwfc	fsr2h,f,c
  3311  00F774  C0DC  FFDE         	movff	standbyMode@round,postinc2
  3312  00F778  C0DD  FFDD         	movff	standbyMode@round+1,postdec2
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;standbyMode.c: 1835: flatPieces[drawerCount] = flat;
  3316  00F77C  90D8               	bcf	status,0,c
  3317  00F77E  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3318  00F780  6ED9               	movwf	fsr2l,c
  3319  00F782  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3320  00F784  6EDA               	movwf	fsr2h,c
  3321  00F786  0E90               	movlw	low standbyMode@flatPieces
  3322  00F788  26D9               	addwf	fsr2l,f,c
  3323  00F78A  0E00               	movlw	high standbyMode@flatPieces
  3324  00F78C  22DA               	addwfc	fsr2h,f,c
  3325  00F78E  C0DE  FFDE         	movff	standbyMode@flat,postinc2
  3326  00F792  C0DF  FFDD         	movff	standbyMode@flat+1,postdec2
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;standbyMode.c: 1836: longPieces[drawerCount] = lng;
  3330  00F796  90D8               	bcf	status,0,c
  3331  00F798  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3332  00F79A  6ED9               	movwf	fsr2l,c
  3333  00F79C  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3334  00F79E  6EDA               	movwf	fsr2h,c
  3335  00F7A0  0EA0               	movlw	low standbyMode@longPieces
  3336  00F7A2  26D9               	addwf	fsr2l,f,c
  3337  00F7A4  0E00               	movlw	high standbyMode@longPieces
  3338  00F7A6  22DA               	addwfc	fsr2h,f,c
  3339  00F7A8  C0E0  FFDE         	movff	standbyMode@lng,postinc2
  3340  00F7AC  C0E1  FFDD         	movff	standbyMode@lng+1,postdec2
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;standbyMode.c: 1837: drawerCount += 1;
  3344  00F7B0  4BF4               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3345  00F7B2  2BF5               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;standbyMode.c: 1838: }
  3349                           ;standbyMode.c: 1839: }
  3350  00F7B4  D004               	goto	l732
  3351  00F7B6                     l716:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;standbyMode.c: 1840: else if (keypress1 == 14){
  3355                           
  3356                           ; BSR set to: 0
  3357  00F7B6  0E0E               	movlw	14
  3358  00F7B8  19E4               	xorwf	standbyMode@keypress1& (0+255),w,b
  3359  00F7BA  B4D8               	btfsc	status,2,c
  3360  00F7BC  D16A               	goto	l733
  3361  00F7BE                     l732:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;standbyMode.c: 1842: }
  3365                           ;standbyMode.c: 1843: keypress1 = 0;
  3366                           
  3367                           ; BSR set to: 0
  3368                           
  3369                           ; BSR set to: 0
  3370  00F7BE  0E00               	movlw	0
  3371  00F7C0  6FE4               	movwf	standbyMode@keypress1& (0+255),b
  3372                           
  3373                           ; BSR set to: 0
  3374  00F7C2  D63F               	goto	u7580
  3375  00F7C4                     l705:
  3376                           
  3377                           ; BSR set to: 0
  3378                           
  3379                           ; BSR set to: 0
  3380                           
  3381                           ;standbyMode.c: 1847: else{
  3382                           ;standbyMode.c: 1848: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3383                           
  3384                           ; BSR set to: 0
  3385  00F7C4  0E01               	movlw	1
  3386  00F7C6  ECC2  F061         	call	_lcdInst
  3387  00F7CA  0EC3               	movlw	195
  3388  00F7CC  6E64               	movwf	??_standbyMode& (0+255),c
  3389  00F7CE  0ECD               	movlw	205
  3390  00F7D0                     u8437:
  3391  00F7D0  2EE8               	decfsz	wreg,f,c
  3392  00F7D2  D7FE               	bra	u8437
  3393  00F7D4  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3394  00F7D6  D7FC               	bra	u8437
  3395  00F7D8  F000               	nop	
  3396                           
  3397                           ;standbyMode.c: 1849: drawer = which_drawer();
  3398  00F7DA  ECED  F068         	call	_which_drawer	;wreg free
  3399  00F7DE  C029  F0F2         	movff	?_which_drawer,standbyMode@drawer
  3400  00F7E2  C02A  F0F3         	movff	?_which_drawer+1,standbyMode@drawer+1
  3401                           
  3402                           ;standbyMode.c: 1851: if (drawer == 100){
  3403  00F7E6  0E64               	movlw	100
  3404  00F7E8  0100               	movlb	0	; () banked
  3405  00F7EA  19F2               	xorwf	standbyMode@drawer& (0+255),w,b
  3406  00F7EC  11F3               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3407  00F7EE  A4D8               	btfss	status,2,c
  3408  00F7F0  D009               	goto	l736
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;standbyMode.c: 1852: drawer = 0;
  3412  00F7F2  0E00               	movlw	0
  3413  00F7F4  6FF3               	movwf	(standbyMode@drawer+1)& (0+255),b
  3414  00F7F6  0E00               	movlw	0
  3415  00F7F8  6FF2               	movwf	standbyMode@drawer& (0+255),b
  3416                           
  3417                           ;standbyMode.c: 1853: firstIteration = 1;
  3418  00F7FA  0E00               	movlw	0
  3419  00F7FC  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3420  00F7FE  0E01               	movlw	1
  3421  00F800  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  3422                           
  3423                           ;standbyMode.c: 1854: goto DRAWER_BACK;
  3424  00F802  D64F               	goto	l707
  3425  00F804                     l736:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;standbyMode.c: 1855: }
  3429                           ;standbyMode.c: 1857: firstIteration = 1;
  3430                           
  3431                           ; BSR set to: 0
  3432  00F804  0E00               	movlw	0
  3433  00F806  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3434  00F808  0E01               	movlw	1
  3435  00F80A  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  3436                           
  3437                           ;standbyMode.c: 1858: for (i=0; i<8; i++){
  3438  00F80C  0E00               	movlw	0
  3439  00F80E  6FF7               	movwf	(standbyMode@i+1)& (0+255),b
  3440  00F810  0E00               	movlw	0
  3441  00F812  6FF6               	movwf	standbyMode@i& (0+255),b
  3442  00F814                     l6894:
  3443                           
  3444                           ; BSR set to: 0
  3445  00F814  51F7               	movf	(standbyMode@i+1)& (0+255),w,b
  3446  00F816  E12C               	bnz	l6910
  3447  00F818  0E08               	movlw	8
  3448  00F81A  5DF6               	subwf	standbyMode@i& (0+255),w,b
  3449  00F81C  B0D8               	btfsc	status,0,c
  3450  00F81E  D028               	goto	u7770
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;standbyMode.c: 1859: if (drawerInformation[i] == drawer){
  3454                           
  3455                           ; BSR set to: 0
  3456                           
  3457                           ; BSR set to: 0
  3458  00F820  90D8               	bcf	status,0,c
  3459  00F822  35F6               	rlcf	standbyMode@i& (0+255),w,b
  3460  00F824  6ED9               	movwf	fsr2l,c
  3461  00F826  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3462  00F828  6EDA               	movwf	fsr2h,c
  3463  00F82A  0EC0               	movlw	low standbyMode@drawerInformation
  3464  00F82C  26D9               	addwf	fsr2l,f,c
  3465  00F82E  0E00               	movlw	high standbyMode@drawerInformation
  3466  00F830  22DA               	addwfc	fsr2h,f,c
  3467  00F832  51F2               	movf	standbyMode@drawer& (0+255),w,b
  3468  00F834  18DE               	xorwf	postinc2,w,c
  3469  00F836  E119               	bnz	l6906
  3470  00F838  51F3               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3471  00F83A  18DE               	xorwf	postinc2,w,c
  3472  00F83C  A4D8               	btfss	status,2,c
  3473  00F83E  D015               	goto	l740
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;standbyMode.c: 1860: validDrawer = 1;
  3477  00F840  0E00               	movlw	0
  3478  00F842  6FE6               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3479  00F844  0E01               	movlw	1
  3480  00F846  6FE5               	movwf	standbyMode@validDrawer& (0+255),b
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;standbyMode.c: 1861: if (drawerInformation[i] == 0){
  3484  00F848  90D8               	bcf	status,0,c
  3485  00F84A  35F6               	rlcf	standbyMode@i& (0+255),w,b
  3486  00F84C  6ED9               	movwf	fsr2l,c
  3487  00F84E  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3488  00F850  6EDA               	movwf	fsr2h,c
  3489  00F852  0EC0               	movlw	low standbyMode@drawerInformation
  3490  00F854  26D9               	addwf	fsr2l,f,c
  3491  00F856  0E00               	movlw	high standbyMode@drawerInformation
  3492  00F858  22DA               	addwfc	fsr2h,f,c
  3493  00F85A  50DE               	movf	postinc2,w,c
  3494  00F85C  10DE               	iorwf	postinc2,w,c
  3495  00F85E  A4D8               	btfss	status,2,c
  3496  00F860  D004               	goto	l740
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;standbyMode.c: 1862: zero = 1;
  3500  00F862  0E00               	movlw	0
  3501  00F864  6FE8               	movwf	(standbyMode@zero+1)& (0+255),b
  3502  00F866  0E01               	movlw	1
  3503  00F868  6FE7               	movwf	standbyMode@zero& (0+255),b
  3504  00F86A                     l740:
  3505  00F86A                     l6906:
  3506                           
  3507                           ; BSR set to: 0
  3508  00F86A  4BF6               	infsnz	standbyMode@i& (0+255),f,b
  3509  00F86C  2BF7               	incf	(standbyMode@i+1)& (0+255),f,b
  3510  00F86E  D7D2               	goto	l6894
  3511  00F870                     u7770:
  3512  00F870                     l6910:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;standbyMode.c: 1863: }
  3516                           ;standbyMode.c: 1864: }
  3517                           ;standbyMode.c: 1865: }
  3518                           ;standbyMode.c: 1866: if (validDrawer == 1){
  3519  00F870  05E5               	decf	standbyMode@validDrawer& (0+255),w,b
  3520  00F872  11E6               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3521  00F874  A4D8               	btfss	status,2,c
  3522  00F876  D062               	goto	l741
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;standbyMode.c: 1867: if (zero == 1){
  3526  00F878  05E7               	decf	standbyMode@zero& (0+255),w,b
  3527  00F87A  11E8               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3528  00F87C  A4D8               	btfss	status,2,c
  3529  00F87E  D02F               	goto	l742
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;standbyMode.c: 1868: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3533  00F880  0E01               	movlw	1
  3534  00F882  ECC2  F061         	call	_lcdInst
  3535  00F886  0EC3               	movlw	195
  3536  00F888  6E64               	movwf	??_standbyMode& (0+255),c
  3537  00F88A  0ECD               	movlw	205
  3538  00F88C                     u8447:
  3539  00F88C  2EE8               	decfsz	wreg,f,c
  3540  00F88E  D7FE               	bra	u8447
  3541  00F890  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3542  00F892  D7FC               	bra	u8447
  3543  00F894  F000               	nop	
  3544                           
  3545                           ;standbyMode.c: 1869: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3546  00F896  0E0C               	movlw	12
  3547  00F898  ECC2  F061         	call	_lcdInst
  3548                           
  3549                           ;standbyMode.c: 1870: printf("No drawer");
  3550  00F89C  0E8C               	movlw	low STR_76
  3551  00F89E  6E0D               	movwf	printf@f,c
  3552  00F8A0  0EFF               	movlw	high STR_76
  3553  00F8A2  6E0E               	movwf	printf@f+1,c
  3554  00F8A4  EC6E  F06B         	call	_printf	;wreg free
  3555                           
  3556                           ;standbyMode.c: 1871: lcdInst(0xC0);;
  3557  00F8A8  0EC0               	movlw	192
  3558  00F8AA  ECC2  F061         	call	_lcdInst
  3559                           
  3560                           ;standbyMode.c: 1872: printf("number pressed.");
  3561  00F8AE  0ED9               	movlw	low STR_77
  3562  00F8B0  6E0D               	movwf	printf@f,c
  3563  00F8B2  0EFD               	movlw	high STR_77
  3564  00F8B4  6E0E               	movwf	printf@f+1,c
  3565  00F8B6  EC6E  F06B         	call	_printf	;wreg free
  3566                           
  3567                           ;standbyMode.c: 1873: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3568  00F8BA  0E66               	movlw	102
  3569  00F8BC  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  3570  00F8BE  0E76               	movlw	118
  3571  00F8C0  6E64               	movwf	??_standbyMode& (0+255),c
  3572  00F8C2  0EC1               	movlw	193
  3573  00F8C4                     u8457:
  3574  00F8C4  2EE8               	decfsz	wreg,f,c
  3575  00F8C6  D7FE               	bra	u8457
  3576  00F8C8  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3577  00F8CA  D7FC               	bra	u8457
  3578  00F8CC  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3579  00F8CE  D7FA               	bra	u8457
  3580  00F8D0  F000               	nop	
  3581                           
  3582                           ;standbyMode.c: 1874: zero = 0;
  3583  00F8D2  0E00               	movlw	0
  3584  00F8D4  0100               	movlb	0	; () banked
  3585  00F8D6  6FE8               	movwf	(standbyMode@zero+1)& (0+255),b
  3586  00F8D8  0E00               	movlw	0
  3587  00F8DA  6FE7               	movwf	standbyMode@zero& (0+255),b
  3588                           
  3589                           ;standbyMode.c: 1875: }
  3590  00F8DC  D029               	goto	l743
  3591  00F8DE                     l742:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;standbyMode.c: 1876: else{
  3595                           ;standbyMode.c: 1877: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3596                           
  3597                           ; BSR set to: 0
  3598  00F8DE  0E01               	movlw	1
  3599  00F8E0  ECC2  F061         	call	_lcdInst
  3600  00F8E4  0EC3               	movlw	195
  3601  00F8E6  6E64               	movwf	??_standbyMode& (0+255),c
  3602  00F8E8  0ECD               	movlw	205
  3603  00F8EA                     u8467:
  3604  00F8EA  2EE8               	decfsz	wreg,f,c
  3605  00F8EC  D7FE               	bra	u8467
  3606  00F8EE  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3607  00F8F0  D7FC               	bra	u8467
  3608  00F8F2  F000               	nop	
  3609                           
  3610                           ;standbyMode.c: 1878: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3611  00F8F4  0E0C               	movlw	12
  3612  00F8F6  ECC2  F061         	call	_lcdInst
  3613                           
  3614                           ;standbyMode.c: 1879: printf("Drawer already");
  3615  00F8FA  0EC2               	movlw	low STR_78
  3616  00F8FC  6E0D               	movwf	printf@f,c
  3617  00F8FE  0EFE               	movlw	high STR_78
  3618  00F900  6E0E               	movwf	printf@f+1,c
  3619  00F902  EC6E  F06B         	call	_printf	;wreg free
  3620                           
  3621                           ;standbyMode.c: 1880: lcdInst(0xC0);;
  3622  00F906  0EC0               	movlw	192
  3623  00F908  ECC2  F061         	call	_lcdInst
  3624                           
  3625                           ;standbyMode.c: 1881: printf("in use!");
  3626  00F90C  0E9F               	movlw	low STR_79
  3627  00F90E  6E0D               	movwf	printf@f,c
  3628  00F910  0EFF               	movlw	high STR_79
  3629  00F912  6E0E               	movwf	printf@f+1,c
  3630  00F914  EC6E  F06B         	call	_printf	;wreg free
  3631                           
  3632                           ;standbyMode.c: 1882: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3633  00F918  0E66               	movlw	102
  3634  00F91A  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  3635  00F91C  0E76               	movlw	118
  3636  00F91E  6E64               	movwf	??_standbyMode& (0+255),c
  3637  00F920  0EC1               	movlw	193
  3638  00F922                     u8477:
  3639  00F922  2EE8               	decfsz	wreg,f,c
  3640  00F924  D7FE               	bra	u8477
  3641  00F926  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3642  00F928  D7FC               	bra	u8477
  3643  00F92A  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3644  00F92C  D7FA               	bra	u8477
  3645  00F92E  F000               	nop	
  3646  00F930                     l743:
  3647                           
  3648                           ;standbyMode.c: 1883: }
  3649                           ;standbyMode.c: 1884: validDrawer = 0;
  3650  00F930  0E00               	movlw	0
  3651  00F932  0100               	movlb	0	; () banked
  3652  00F934  6FE6               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3653  00F936  0E00               	movlw	0
  3654  00F938  6FE5               	movwf	standbyMode@validDrawer& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;standbyMode.c: 1886: }
  3658                           
  3659                           ;standbyMode.c: 1885: continue;
  3660  00F93A  D57F               	goto	u7570
  3661  00F93C                     l741:
  3662                           
  3663                           ; BSR set to: 0
  3664                           
  3665                           ; BSR set to: 0
  3666                           
  3667                           ;standbyMode.c: 1887: else{
  3668                           ;standbyMode.c: 1888: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3669                           
  3670                           ; BSR set to: 0
  3671  00F93C  0E01               	movlw	1
  3672  00F93E  ECC2  F061         	call	_lcdInst
  3673  00F942  0EC3               	movlw	195
  3674  00F944  6E64               	movwf	??_standbyMode& (0+255),c
  3675  00F946  0ECD               	movlw	205
  3676  00F948                     u8487:
  3677  00F948  2EE8               	decfsz	wreg,f,c
  3678  00F94A  D7FE               	bra	u8487
  3679  00F94C  2E64               	decfsz	??_standbyMode& (0+255),f,c
  3680  00F94E  D7FC               	bra	u8487
  3681  00F950  F000               	nop	
  3682                           
  3683                           ;standbyMode.c: 1889: diet = diet_press(drawer);
  3684  00F952  C0F2  F029         	movff	standbyMode@drawer,diet_press@drawer
  3685  00F956  C0F3  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3686  00F95A  EC67  F06D         	call	_diet_press	;wreg free
  3687  00F95E  C029  F0EE         	movff	?_diet_press,standbyMode@diet
  3688  00F962  C02A  F0EF         	movff	?_diet_press+1,standbyMode@diet+1
  3689                           
  3690                           ;standbyMode.c: 1890: if (diet == 100){
  3691  00F966  0E64               	movlw	100
  3692  00F968  0100               	movlb	0	; () banked
  3693  00F96A  19EE               	xorwf	standbyMode@diet& (0+255),w,b
  3694  00F96C  11EF               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3695  00F96E  A4D8               	btfss	status,2,c
  3696  00F970  D005               	goto	l747
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;standbyMode.c: 1891: diet = 0;
  3700  00F972  0E00               	movlw	0
  3701  00F974  6FEF               	movwf	(standbyMode@diet+1)& (0+255),b
  3702  00F976  0E00               	movlw	0
  3703  00F978  6FEE               	movwf	standbyMode@diet& (0+255),b
  3704                           
  3705                           ;standbyMode.c: 1892: goto DIET_BACK2;
  3706  00F97A  D724               	goto	l705
  3707  00F97C                     l747:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;standbyMode.c: 1893: }
  3711                           ;standbyMode.c: 1895: food = food_press(diet, drawer);
  3712                           
  3713                           ; BSR set to: 0
  3714  00F97C  C0EE  F029         	movff	standbyMode@diet,food_press@dietSum
  3715  00F980  C0EF  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3716  00F984  C0F2  F02B         	movff	standbyMode@drawer,food_press@drawer
  3717  00F988  C0F3  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3718  00F98C  ECF0  F067         	call	_food_press	;wreg free
  3719  00F990  C029  F0F0         	movff	?_food_press,standbyMode@food
  3720  00F994  C02A  F0F1         	movff	?_food_press+1,standbyMode@food+1
  3721                           
  3722                           ;standbyMode.c: 1896: if (food == 100){
  3723  00F998  0E64               	movlw	100
  3724  00F99A  0100               	movlb	0	; () banked
  3725  00F99C  19F0               	xorwf	standbyMode@food& (0+255),w,b
  3726  00F99E  11F1               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3727  00F9A0  A4D8               	btfss	status,2,c
  3728  00F9A2  D009               	goto	l748
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;standbyMode.c: 1897: diet = 0;
  3732  00F9A4  0E00               	movlw	0
  3733  00F9A6  6FEF               	movwf	(standbyMode@diet+1)& (0+255),b
  3734  00F9A8  0E00               	movlw	0
  3735  00F9AA  6FEE               	movwf	standbyMode@diet& (0+255),b
  3736                           
  3737                           ;standbyMode.c: 1898: food = 0;
  3738  00F9AC  0E00               	movlw	0
  3739  00F9AE  6FF1               	movwf	(standbyMode@food+1)& (0+255),b
  3740  00F9B0  0E00               	movlw	0
  3741  00F9B2  6FF0               	movwf	standbyMode@food& (0+255),b
  3742                           
  3743                           ;standbyMode.c: 1899: goto FOOD_BACK2;
  3744  00F9B4  D7C3               	goto	l741
  3745  00F9B6                     l748:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;standbyMode.c: 1900: }
  3749                           ;standbyMode.c: 1901: drawerInformation[drawerCount] = drawer;
  3750                           
  3751                           ; BSR set to: 0
  3752  00F9B6  90D8               	bcf	status,0,c
  3753  00F9B8  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3754  00F9BA  6ED9               	movwf	fsr2l,c
  3755  00F9BC  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3756  00F9BE  6EDA               	movwf	fsr2h,c
  3757  00F9C0  0EC0               	movlw	low standbyMode@drawerInformation
  3758  00F9C2  26D9               	addwf	fsr2l,f,c
  3759  00F9C4  0E00               	movlw	high standbyMode@drawerInformation
  3760  00F9C6  22DA               	addwfc	fsr2h,f,c
  3761  00F9C8  C0F2  FFDE         	movff	standbyMode@drawer,postinc2
  3762  00F9CC  C0F3  FFDD         	movff	standbyMode@drawer+1,postdec2
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;standbyMode.c: 1902: decodedDiet = decode_diet(diet);
  3766  00F9D0  C0EE  F001         	movff	standbyMode@diet,decode_diet@dietType
  3767  00F9D4  C0EF  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3768  00F9D8  EC5E  F067         	call	_decode_diet	;wreg free
  3769  00F9DC  C001  F0E2         	movff	?_decode_diet,standbyMode@decodedDiet
  3770  00F9E0  C002  F0E3         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3771                           
  3772                           ;standbyMode.c: 1903: dietType[drawerCount] = decodedDiet;
  3773  00F9E4  90D8               	bcf	status,0,c
  3774  00F9E6  0100               	movlb	0	; () banked
  3775  00F9E8  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3776  00F9EA  6ED9               	movwf	fsr2l,c
  3777  00F9EC  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3778  00F9EE  6EDA               	movwf	fsr2h,c
  3779  00F9F0  0EB0               	movlw	low standbyMode@dietType
  3780  00F9F2  26D9               	addwf	fsr2l,f,c
  3781  00F9F4  0E00               	movlw	high standbyMode@dietType
  3782  00F9F6  22DA               	addwfc	fsr2h,f,c
  3783  00F9F8  C0E2  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3784  00F9FC  C0E3  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3785                           
  3786                           ;standbyMode.c: 1904: round = getRound(food);
  3787  00FA00  C0F0  F001         	movff	standbyMode@food,getRound@code
  3788  00FA04  C0F1  F002         	movff	standbyMode@food+1,getRound@code+1
  3789  00FA08  EC5B  F066         	call	_getRound	;wreg free
  3790  00FA0C  C001  F0DC         	movff	?_getRound,standbyMode@round
  3791  00FA10  C002  F0DD         	movff	?_getRound+1,standbyMode@round+1
  3792                           
  3793                           ;standbyMode.c: 1905: flat = getFlat(food);
  3794  00FA14  C0F0  F001         	movff	standbyMode@food,getFlat@code
  3795  00FA18  C0F1  F002         	movff	standbyMode@food+1,getFlat@code+1
  3796  00FA1C  ECE3  F065         	call	_getFlat	;wreg free
  3797  00FA20  C001  F0DE         	movff	?_getFlat,standbyMode@flat
  3798  00FA24  C002  F0DF         	movff	?_getFlat+1,standbyMode@flat+1
  3799                           
  3800                           ;standbyMode.c: 1906: lng = getLong(food);
  3801  00FA28  C0F0  F001         	movff	standbyMode@food,getLong@code
  3802  00FA2C  C0F1  F002         	movff	standbyMode@food+1,getLong@code+1
  3803  00FA30  ECD3  F066         	call	_getLong	;wreg free
  3804  00FA34  C001  F0E0         	movff	?_getLong,standbyMode@lng
  3805  00FA38  C002  F0E1         	movff	?_getLong+1,standbyMode@lng+1
  3806                           
  3807                           ;standbyMode.c: 1907: roundPieces[drawerCount] = round;
  3808  00FA3C  90D8               	bcf	status,0,c
  3809  00FA3E  0100               	movlb	0	; () banked
  3810  00FA40  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3811  00FA42  6ED9               	movwf	fsr2l,c
  3812  00FA44  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3813  00FA46  6EDA               	movwf	fsr2h,c
  3814  00FA48  0E80               	movlw	low standbyMode@roundPieces
  3815  00FA4A  26D9               	addwf	fsr2l,f,c
  3816  00FA4C  0E00               	movlw	high standbyMode@roundPieces
  3817  00FA4E  22DA               	addwfc	fsr2h,f,c
  3818  00FA50  C0DC  FFDE         	movff	standbyMode@round,postinc2
  3819  00FA54  C0DD  FFDD         	movff	standbyMode@round+1,postdec2
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;standbyMode.c: 1908: flatPieces[drawerCount] = flat;
  3823  00FA58  90D8               	bcf	status,0,c
  3824  00FA5A  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3825  00FA5C  6ED9               	movwf	fsr2l,c
  3826  00FA5E  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3827  00FA60  6EDA               	movwf	fsr2h,c
  3828  00FA62  0E90               	movlw	low standbyMode@flatPieces
  3829  00FA64  26D9               	addwf	fsr2l,f,c
  3830  00FA66  0E00               	movlw	high standbyMode@flatPieces
  3831  00FA68  22DA               	addwfc	fsr2h,f,c
  3832  00FA6A  C0DE  FFDE         	movff	standbyMode@flat,postinc2
  3833  00FA6E  C0DF  FFDD         	movff	standbyMode@flat+1,postdec2
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;standbyMode.c: 1909: longPieces[drawerCount] = lng;
  3837  00FA72  90D8               	bcf	status,0,c
  3838  00FA74  35F4               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3839  00FA76  6ED9               	movwf	fsr2l,c
  3840  00FA78  35F5               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3841  00FA7A  6EDA               	movwf	fsr2h,c
  3842  00FA7C  0EA0               	movlw	low standbyMode@longPieces
  3843  00FA7E  26D9               	addwf	fsr2l,f,c
  3844  00FA80  0E00               	movlw	high standbyMode@longPieces
  3845  00FA82  22DA               	addwfc	fsr2h,f,c
  3846  00FA84  C0E0  FFDE         	movff	standbyMode@lng,postinc2
  3847  00FA88  C0E1  FFDD         	movff	standbyMode@lng+1,postdec2
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;standbyMode.c: 1910: drawerCount += 1;
  3851  00FA8C  4BF4               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3852  00FA8E  2BF5               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3853                           
  3854                           ; BSR set to: 0
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859  00FA90  D4D4               	goto	u7570
  3860  00FA92                     l733:
  3861                           
  3862                           ;standbyMode.c: 1911: }
  3863                           ;standbyMode.c: 1912: }
  3864                           ;standbyMode.c: 1913: }
  3865                           ;standbyMode.c: 1915: if (drawerCount == 0){
  3866                           
  3867                           ; BSR set to: 0
  3868  00FA92  0100               	movlb	0	; () banked
  3869  00FA94  51F4               	movf	standbyMode@drawerCount& (0+255),w,b
  3870  00FA96  11F5               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  3871  00FA98  A4D8               	btfss	status,2,c
  3872  00FA9A  D005               	goto	l749
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;standbyMode.c: 1916: return 0;
  3876  00FA9C  0E00               	movlw	0
  3877  00FA9E  6E63               	movwf	?_standbyMode+1,c
  3878  00FAA0  0E00               	movlw	0
  3879  00FAA2  6E62               	movwf	?_standbyMode,c
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;standbyMode.c: 1917: }
  3883                           
  3884                           ; BSR set to: 0
  3885  00FAA4  0012               	return	
  3886  00FAA6                     l749:
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;standbyMode.c: 1918: else{
  3890                           ;standbyMode.c: 1919: logNumber = readEEPROM(250);
  3891                           
  3892                           ; BSR set to: 0
  3893  00FAA6  0EFA               	movlw	250
  3894  00FAA8  ECD6  F061         	call	_readEEPROM
  3895  00FAAC  0100               	movlb	0	; () banked
  3896  00FAAE  6FEB               	movwf	standbyMode@logNumber& (0+255),b
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;standbyMode.c: 1920: if (logNumber == 4){
  3900  00FAB0  0E04               	movlw	4
  3901  00FAB2  19EB               	xorwf	standbyMode@logNumber& (0+255),w,b
  3902  00FAB4  B4D8               	btfsc	status,2,c
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;standbyMode.c: 1921: shiftEEPROM();
  3906  00FAB6  EC56  F064         	call	_shiftEEPROM	;wreg free
  3907                           
  3908                           ;standbyMode.c: 1922: }
  3909                           ;standbyMode.c: 1923: for (i=0; i<8; i++){
  3910  00FABA  0E00               	movlw	0
  3911  00FABC  0100               	movlb	0	; () banked
  3912  00FABE  6FF7               	movwf	(standbyMode@i+1)& (0+255),b
  3913  00FAC0  0E00               	movlw	0
  3914  00FAC2  6FF6               	movwf	standbyMode@i& (0+255),b
  3915                           
  3916                           ; BSR set to: 0
  3917  00FAC4  51F7               	movf	(standbyMode@i+1)& (0+255),w,b
  3918  00FAC6  E105               	bnz	u7840
  3919  00FAC8  0E08               	movlw	8
  3920  00FACA  5DF6               	subwf	standbyMode@i& (0+255),w,b
  3921  00FACC  B0D8               	btfsc	status,0,c
  3922  00FACE  D081               	goto	u7870
  3923  00FAD0  D001               	goto	l753
  3924  00FAD2                     u7840:
  3925                           
  3926                           ; BSR set to: 0
  3927  00FAD2  D07F               	goto	u7870
  3928  00FAD4                     l753:
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;standbyMode.c: 1924: if (logNumber == 0 || logNumber == 4){
  3932                           
  3933                           ; BSR set to: 0
  3934  00FAD4  51EB               	movf	standbyMode@logNumber& (0+255),w,b
  3935  00FAD6  B4D8               	btfsc	status,2,c
  3936  00FAD8  D004               	goto	u7860
  3937                           
  3938                           ; BSR set to: 0
  3939  00FADA  0E04               	movlw	4
  3940  00FADC  19EB               	xorwf	standbyMode@logNumber& (0+255),w,b
  3941  00FADE  A4D8               	btfss	status,2,c
  3942  00FAE0  D00F               	goto	l755
  3943  00FAE2                     u7860:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;standbyMode.c: 1925: n = 5*i;
  3947                           
  3948                           ; BSR set to: 0
  3949  00FAE2  C0F6  F001         	movff	standbyMode@i,___wmul@multiplier
  3950  00FAE6  C0F7  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  3951  00FAEA  0E00               	movlw	0
  3952  00FAEC  6E04               	movwf	___wmul@multiplicand+1,c
  3953  00FAEE  0E05               	movlw	5
  3954  00FAF0  6E03               	movwf	___wmul@multiplicand,c
  3955  00FAF2  EC1E  F062         	call	___wmul	;wreg free
  3956  00FAF6  C001  F0EC         	movff	?___wmul,standbyMode@n
  3957  00FAFA  C002  F0ED         	movff	?___wmul+1,standbyMode@n+1
  3958                           
  3959                           ;standbyMode.c: 1926: }
  3960  00FAFE  D013               	goto	l758
  3961  00FB00                     l755:
  3962                           
  3963                           ;standbyMode.c: 1927: else{
  3964                           ;standbyMode.c: 1928: n = (logNumber)*51 + 5*i;
  3965  00FB00  C0F6  F001         	movff	standbyMode@i,___wmul@multiplier
  3966  00FB04  C0F7  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  3967  00FB08  0E00               	movlw	0
  3968  00FB0A  6E04               	movwf	___wmul@multiplicand+1,c
  3969  00FB0C  0E05               	movlw	5
  3970  00FB0E  6E03               	movwf	___wmul@multiplicand,c
  3971  00FB10  EC1E  F062         	call	___wmul	;wreg free
  3972  00FB14  0100               	movlb	0	; () banked
  3973  00FB16  51EB               	movf	standbyMode@logNumber& (0+255),w,b
  3974  00FB18  0D33               	mullw	51
  3975  00FB1A  5001               	movf	?___wmul,w,c
  3976  00FB1C  24F3               	addwf	prodl,w,c
  3977  00FB1E  6FEC               	movwf	standbyMode@n& (0+255),b
  3978  00FB20  5002               	movf	?___wmul+1,w,c
  3979  00FB22  20F4               	addwfc	prodh,w,c
  3980  00FB24  6FED               	movwf	(standbyMode@n+1)& (0+255),b
  3981  00FB26                     l758:
  3982                           
  3983                           ;standbyMode.c: 1929: }
  3984                           ;standbyMode.c: 1930: writeEEPROM(11+n, drawerInformation[i]);
  3985                           
  3986                           ; BSR set to: 0
  3987  00FB26  90D8               	bcf	status,0,c
  3988  00FB28  0100               	movlb	0	; () banked
  3989  00FB2A  35F6               	rlcf	standbyMode@i& (0+255),w,b
  3990  00FB2C  6ED9               	movwf	fsr2l,c
  3991  00FB2E  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3992  00FB30  6EDA               	movwf	fsr2h,c
  3993  00FB32  0EC0               	movlw	low standbyMode@drawerInformation
  3994  00FB34  26D9               	addwf	fsr2l,f,c
  3995  00FB36  0E00               	movlw	high standbyMode@drawerInformation
  3996  00FB38  22DA               	addwfc	fsr2h,f,c
  3997  00FB3A  50DF               	movf	indf2,w,c
  3998  00FB3C  6E01               	movwf	writeEEPROM@data,c
  3999  00FB3E  51EC               	movf	standbyMode@n& (0+255),w,b
  4000  00FB40  0F0B               	addlw	11
  4001  00FB42  EC44  F062         	call	_writeEEPROM
  4002                           
  4003                           ;standbyMode.c: 1931: writeEEPROM(12+n, dietType[i]);
  4004  00FB46  90D8               	bcf	status,0,c
  4005  00FB48  0100               	movlb	0	; () banked
  4006  00FB4A  35F6               	rlcf	standbyMode@i& (0+255),w,b
  4007  00FB4C  6ED9               	movwf	fsr2l,c
  4008  00FB4E  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4009  00FB50  6EDA               	movwf	fsr2h,c
  4010  00FB52  0EB0               	movlw	low standbyMode@dietType
  4011  00FB54  26D9               	addwf	fsr2l,f,c
  4012  00FB56  0E00               	movlw	high standbyMode@dietType
  4013  00FB58  22DA               	addwfc	fsr2h,f,c
  4014  00FB5A  50DF               	movf	indf2,w,c
  4015  00FB5C  6E01               	movwf	writeEEPROM@data,c
  4016  00FB5E  51EC               	movf	standbyMode@n& (0+255),w,b
  4017  00FB60  0F0C               	addlw	12
  4018  00FB62  EC44  F062         	call	_writeEEPROM
  4019                           
  4020                           ;standbyMode.c: 1932: writeEEPROM(13+n, roundPieces[i]);
  4021  00FB66  90D8               	bcf	status,0,c
  4022  00FB68  0100               	movlb	0	; () banked
  4023  00FB6A  35F6               	rlcf	standbyMode@i& (0+255),w,b
  4024  00FB6C  6ED9               	movwf	fsr2l,c
  4025  00FB6E  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4026  00FB70  6EDA               	movwf	fsr2h,c
  4027  00FB72  0E80               	movlw	low standbyMode@roundPieces
  4028  00FB74  26D9               	addwf	fsr2l,f,c
  4029  00FB76  0E00               	movlw	high standbyMode@roundPieces
  4030  00FB78  22DA               	addwfc	fsr2h,f,c
  4031  00FB7A  50DF               	movf	indf2,w,c
  4032  00FB7C  6E01               	movwf	writeEEPROM@data,c
  4033  00FB7E  51EC               	movf	standbyMode@n& (0+255),w,b
  4034  00FB80  0F0D               	addlw	13
  4035  00FB82  EC44  F062         	call	_writeEEPROM
  4036                           
  4037                           ;standbyMode.c: 1933: writeEEPROM(14+n, flatPieces[i]);
  4038  00FB86  90D8               	bcf	status,0,c
  4039  00FB88  0100               	movlb	0	; () banked
  4040  00FB8A  35F6               	rlcf	standbyMode@i& (0+255),w,b
  4041  00FB8C  6ED9               	movwf	fsr2l,c
  4042  00FB8E  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4043  00FB90  6EDA               	movwf	fsr2h,c
  4044  00FB92  0E90               	movlw	low standbyMode@flatPieces
  4045  00FB94  26D9               	addwf	fsr2l,f,c
  4046  00FB96  0E00               	movlw	high standbyMode@flatPieces
  4047  00FB98  22DA               	addwfc	fsr2h,f,c
  4048  00FB9A  50DF               	movf	indf2,w,c
  4049  00FB9C  6E01               	movwf	writeEEPROM@data,c
  4050  00FB9E  51EC               	movf	standbyMode@n& (0+255),w,b
  4051  00FBA0  0F0E               	addlw	14
  4052  00FBA2  EC44  F062         	call	_writeEEPROM
  4053                           
  4054                           ;standbyMode.c: 1934: writeEEPROM(15+n, longPieces[i]);
  4055  00FBA6  90D8               	bcf	status,0,c
  4056  00FBA8  0100               	movlb	0	; () banked
  4057  00FBAA  35F6               	rlcf	standbyMode@i& (0+255),w,b
  4058  00FBAC  6ED9               	movwf	fsr2l,c
  4059  00FBAE  35F7               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4060  00FBB0  6EDA               	movwf	fsr2h,c
  4061  00FBB2  0EA0               	movlw	low standbyMode@longPieces
  4062  00FBB4  26D9               	addwf	fsr2l,f,c
  4063  00FBB6  0E00               	movlw	high standbyMode@longPieces
  4064  00FBB8  22DA               	addwfc	fsr2h,f,c
  4065  00FBBA  50DF               	movf	indf2,w,c
  4066  00FBBC  6E01               	movwf	writeEEPROM@data,c
  4067  00FBBE  51EC               	movf	standbyMode@n& (0+255),w,b
  4068  00FBC0  0F0F               	addlw	15
  4069  00FBC2  EC44  F062         	call	_writeEEPROM
  4070  00FBC6  0100               	movlb	0	; () banked
  4071  00FBC8  4BF6               	infsnz	standbyMode@i& (0+255),f,b
  4072  00FBCA  2BF7               	incf	(standbyMode@i+1)& (0+255),f,b
  4073                           
  4074                           ; BSR set to: 0
  4075  00FBCC  51F7               	movf	(standbyMode@i+1)& (0+255),w,b
  4076  00FBCE  E101               	bnz	l7020
  4077  00FBD0  D77B               	goto	L1
  4078  00FBD2                     u7870:
  4079  00FBD2                     l7020:
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;standbyMode.c: 1935: }
  4083                           ;standbyMode.c: 1936: return 1;
  4084  00FBD2  0E00               	movlw	0
  4085  00FBD4  6E63               	movwf	?_standbyMode+1,c
  4086  00FBD6  0E01               	movlw	1
  4087  00FBD8  6E62               	movwf	?_standbyMode,c
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;standbyMode.c: 1937: }
  4091                           ;standbyMode.c: 1938: }
  4092                           
  4093                           ; BSR set to: 0
  4094  00FBDA  0012               	return	
  4095  00FBDC                     l703:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;standbyMode.c: 1939: else if (keypress == 14){
  4099                           
  4100                           ; BSR set to: 0
  4101  00FBDC  0E0E               	movlw	14
  4102  00FBDE  19DB               	xorwf	standbyMode@keypress& (0+255),w,b
  4103  00FBE0  A4D8               	btfss	status,2,c
  4104  00FBE2  D05F               	goto	l760
  4105  00FBE4                     u7880:
  4106                           
  4107                           ;standbyMode.c: 1941: unsigned int whichKey = viewLogs();
  4108                           
  4109                           ; BSR set to: 0
  4110                           
  4111                           ;standbyMode.c: 1940: while (1){
  4112  00FBE4  ECF8  F069         	call	_viewLogs	;wreg free
  4113  00FBE8  C056  F0D9         	movff	?_viewLogs,standbyMode@whichKey
  4114  00FBEC  C057  F0DA         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4115                           
  4116                           ;standbyMode.c: 1942: if (whichKey == 15){
  4117  00FBF0  0E0F               	movlw	15
  4118  00FBF2  0100               	movlb	0	; () banked
  4119  00FBF4  19D9               	xorwf	standbyMode@whichKey& (0+255),w,b
  4120  00FBF6  11DA               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4121  00FBF8  B4D8               	btfsc	status,2,c
  4122  00FBFA  D7F4               	goto	u7880
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;standbyMode.c: 1945: else if (whichKey == 14){
  4126                           
  4127                           ; BSR set to: 0
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;standbyMode.c: 1944: }
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;standbyMode.c: 1943: continue;
  4134  00FBFC  0E0E               	movlw	14
  4135  00FBFE  19D9               	xorwf	standbyMode@whichKey& (0+255),w,b
  4136  00FC00  11DA               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4137  00FC02  A4D8               	btfss	status,2,c
  4138  00FC04  D020               	goto	l765
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;standbyMode.c: 1946: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4142  00FC06  0E01               	movlw	1
  4143  00FC08  ECC2  F061         	call	_lcdInst
  4144  00FC0C  0EC3               	movlw	195
  4145  00FC0E  6E64               	movwf	??_standbyMode& (0+255),c
  4146  00FC10  0ECD               	movlw	205
  4147  00FC12                     u8497:
  4148  00FC12  2EE8               	decfsz	wreg,f,c
  4149  00FC14  D7FE               	bra	u8497
  4150  00FC16  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4151  00FC18  D7FC               	bra	u8497
  4152  00FC1A  F000               	nop	
  4153                           
  4154                           ;standbyMode.c: 1947: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4155  00FC1C  0E0C               	movlw	12
  4156  00FC1E  ECC2  F061         	call	_lcdInst
  4157                           
  4158                           ;standbyMode.c: 1948: printf("Rebooting.");
  4159  00FC22  0E61               	movlw	low STR_84
  4160  00FC24  6E0D               	movwf	printf@f,c
  4161  00FC26  0EFF               	movlw	high STR_84
  4162  00FC28  6E0E               	movwf	printf@f+1,c
  4163  00FC2A  EC6E  F06B         	call	_printf	;wreg free
  4164                           
  4165                           ;standbyMode.c: 1949: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4166  00FC2E  0E66               	movlw	102
  4167  00FC30  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  4168  00FC32  0E76               	movlw	118
  4169  00FC34  6E64               	movwf	??_standbyMode& (0+255),c
  4170  00FC36  0EC1               	movlw	193
  4171  00FC38                     u8507:
  4172  00FC38  2EE8               	decfsz	wreg,f,c
  4173  00FC3A  D7FE               	bra	u8507
  4174  00FC3C  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4175  00FC3E  D7FC               	bra	u8507
  4176  00FC40  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4177  00FC42  D7FA               	bra	u8507
  4178  00FC44  D028               	goto	L2
  4179  00FC46                     l765:
  4180                           
  4181                           ;standbyMode.c: 1952: else{
  4182                           ;standbyMode.c: 1953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4183  00FC46  0E01               	movlw	1
  4184  00FC48  ECC2  F061         	call	_lcdInst
  4185  00FC4C  0EC3               	movlw	195
  4186  00FC4E  6E64               	movwf	??_standbyMode& (0+255),c
  4187  00FC50  0ECD               	movlw	205
  4188  00FC52                     u8517:
  4189  00FC52  2EE8               	decfsz	wreg,f,c
  4190  00FC54  D7FE               	bra	u8517
  4191  00FC56  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4192  00FC58  D7FC               	bra	u8517
  4193  00FC5A  F000               	nop	
  4194                           
  4195                           ;standbyMode.c: 1954: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4196  00FC5C  0E0C               	movlw	12
  4197  00FC5E  ECC2  F061         	call	_lcdInst
  4198                           
  4199                           ;standbyMode.c: 1955: printf("Invalid key!");
  4200  00FC62  0E17               	movlw	low STR_85
  4201  00FC64  6E0D               	movwf	printf@f,c
  4202  00FC66  0EFF               	movlw	high STR_85
  4203  00FC68  6E0E               	movwf	printf@f+1,c
  4204  00FC6A  EC6E  F06B         	call	_printf	;wreg free
  4205                           
  4206                           ;standbyMode.c: 1956: lcdInst(0xC0);;
  4207  00FC6E  0EC0               	movlw	192
  4208  00FC70  ECC2  F061         	call	_lcdInst
  4209                           
  4210                           ;standbyMode.c: 1957: printf("Rebooting.");
  4211  00FC74  0E61               	movlw	low STR_84
  4212  00FC76  6E0D               	movwf	printf@f,c
  4213  00FC78  0EFF               	movlw	high STR_84
  4214  00FC7A  6E0E               	movwf	printf@f+1,c
  4215  00FC7C  EC6E  F06B         	call	_printf	;wreg free
  4216                           
  4217                           ;standbyMode.c: 1958: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4218  00FC80  0E66               	movlw	102
  4219  00FC82  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  4220  00FC84  0E76               	movlw	118
  4221  00FC86  6E64               	movwf	??_standbyMode& (0+255),c
  4222  00FC88  0EC1               	movlw	193
  4223  00FC8A                     u8527:
  4224  00FC8A  2EE8               	decfsz	wreg,f,c
  4225  00FC8C  D7FE               	bra	u8527
  4226  00FC8E  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4227  00FC90  D7FC               	bra	u8527
  4228  00FC92  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4229  00FC94  D7FA               	bra	u8527
  4230  00FC96                     L2:
  4231  00FC96  F000               	nop	
  4232                           
  4233                           ;standbyMode.c: 1960: }
  4234                           ;standbyMode.c: 1961: }
  4235                           ;standbyMode.c: 1962: return 0;
  4236                           
  4237                           ;standbyMode.c: 1959: break;
  4238  00FC98  0E00               	movlw	0
  4239  00FC9A  6E63               	movwf	?_standbyMode+1,c
  4240  00FC9C  0E00               	movlw	0
  4241  00FC9E  6E62               	movwf	?_standbyMode,c
  4242                           
  4243                           ;standbyMode.c: 1963: }
  4244  00FCA0  0012               	return	
  4245  00FCA2                     l760:
  4246                           
  4247                           ;standbyMode.c: 1965: else {
  4248                           ;standbyMode.c: 1966: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4249  00FCA2  0E01               	movlw	1
  4250  00FCA4  ECC2  F061         	call	_lcdInst
  4251  00FCA8  0EC3               	movlw	195
  4252  00FCAA  6E64               	movwf	??_standbyMode& (0+255),c
  4253  00FCAC  0ECD               	movlw	205
  4254  00FCAE                     u8537:
  4255  00FCAE  2EE8               	decfsz	wreg,f,c
  4256  00FCB0  D7FE               	bra	u8537
  4257  00FCB2  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4258  00FCB4  D7FC               	bra	u8537
  4259  00FCB6  F000               	nop	
  4260                           
  4261                           ;standbyMode.c: 1967: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4262  00FCB8  0E0C               	movlw	12
  4263  00FCBA  ECC2  F061         	call	_lcdInst
  4264                           
  4265                           ;standbyMode.c: 1968: printf("Invalid key!");
  4266  00FCBE  0E17               	movlw	low STR_85
  4267  00FCC0  6E0D               	movwf	printf@f,c
  4268  00FCC2  0EFF               	movlw	high STR_85
  4269  00FCC4  6E0E               	movwf	printf@f+1,c
  4270  00FCC6  EC6E  F06B         	call	_printf	;wreg free
  4271                           
  4272                           ;standbyMode.c: 1969: lcdInst(0xC0);;
  4273  00FCCA  0EC0               	movlw	192
  4274  00FCCC  ECC2  F061         	call	_lcdInst
  4275                           
  4276                           ;standbyMode.c: 1970: printf("Rebooting.");
  4277  00FCD0  0E61               	movlw	low STR_84
  4278  00FCD2  6E0D               	movwf	printf@f,c
  4279  00FCD4  0EFF               	movlw	high STR_84
  4280  00FCD6  6E0E               	movwf	printf@f+1,c
  4281  00FCD8  EC6E  F06B         	call	_printf	;wreg free
  4282                           
  4283                           ;standbyMode.c: 1971: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4284  00FCDC  0E66               	movlw	102
  4285  00FCDE  6E65               	movwf	(??_standbyMode+1)& (0+255),c
  4286  00FCE0  0E76               	movlw	118
  4287  00FCE2  6E64               	movwf	??_standbyMode& (0+255),c
  4288  00FCE4  0EC1               	movlw	193
  4289  00FCE6                     u8547:
  4290  00FCE6  2EE8               	decfsz	wreg,f,c
  4291  00FCE8  D7FE               	bra	u8547
  4292  00FCEA  2E64               	decfsz	??_standbyMode& (0+255),f,c
  4293  00FCEC  D7FC               	bra	u8547
  4294  00FCEE  2E65               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4295  00FCF0  D7FA               	bra	u8547
  4296  00FCF2  F000               	nop	
  4297                           
  4298                           ;standbyMode.c: 1972: return 0;
  4299  00FCF4  0E00               	movlw	0
  4300  00FCF6  6E63               	movwf	?_standbyMode+1,c
  4301  00FCF8  0E00               	movlw	0
  4302  00FCFA  6E62               	movwf	?_standbyMode,c
  4303  00FCFC  0012               	return	
  4304  00FCFE                     __end_of_standbyMode:
  4305                           	opt stack 0
  4306                           tblptru	equ	0xFF8
  4307                           tblptrh	equ	0xFF7
  4308                           tblptrl	equ	0xFF6
  4309                           tablat	equ	0xFF5
  4310                           prodh	equ	0xFF4
  4311                           prodl	equ	0xFF3
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           plusw1	equ	0xFE3
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           plusw2	equ	0xFDB
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _which_drawer *****************
  4326 ;; Defined at:
  4327 ;;		line 1538 in file "standbyMode.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  rand            2   43[COMRAM] unsigned int 
  4332 ;;  keypress        1   51[COMRAM] unsigned char 
  4333 ;;  count           2   49[COMRAM] unsigned int 
  4334 ;;  backCheck       2   47[COMRAM] unsigned int 
  4335 ;;  sum             2   45[COMRAM] unsigned int 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  2   40[COMRAM] unsigned int 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;Total ram usage:       12 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    3
  4352 ;; This function calls:
  4353 ;;		_decode_drawer
  4354 ;;		_lcdInst
  4355 ;;		_printf
  4356 ;;		_putch
  4357 ;; This function is called by:
  4358 ;;		_standbyMode
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text2
  4363  00D1DA                     __ptext2:
  4364                           	opt stack 0
  4365  00D1DA                     _which_drawer:
  4366                           	opt stack 26
  4367                           
  4368                           ;standbyMode.c: 1539: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4369                           
  4370                           ;incstack = 0
  4371  00D1DA  0E0C               	movlw	12
  4372  00D1DC  ECC2  F061         	call	_lcdInst
  4373                           
  4374                           ;standbyMode.c: 1540: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4375  00D1E0  0E01               	movlw	1
  4376  00D1E2  ECC2  F061         	call	_lcdInst
  4377  00D1E6  0EC3               	movlw	195
  4378  00D1E8  6E2B               	movwf	??_which_drawer& (0+255),c
  4379  00D1EA  0ECD               	movlw	205
  4380  00D1EC                     u8557:
  4381  00D1EC  2EE8               	decfsz	wreg,f,c
  4382  00D1EE  D7FE               	bra	u8557
  4383  00D1F0  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4384  00D1F2  D7FC               	bra	u8557
  4385  00D1F4  F000               	nop	
  4386                           
  4387                           ;standbyMode.c: 1541: printf("Drawer number:");
  4388  00D1F6  0E59               	movlw	low STR_57
  4389  00D1F8  6E0D               	movwf	printf@f,c
  4390  00D1FA  0EFE               	movlw	high STR_57
  4391  00D1FC  6E0E               	movwf	printf@f+1,c
  4392  00D1FE  EC6E  F06B         	call	_printf	;wreg free
  4393                           
  4394                           ;standbyMode.c: 1542: lcdInst(0xC0);;
  4395  00D202  0EC0               	movlw	192
  4396  00D204  ECC2  F061         	call	_lcdInst
  4397                           
  4398                           ;standbyMode.c: 1544: unsigned int count = 0;
  4399  00D208  0E00               	movlw	0
  4400  00D20A  6E33               	movwf	which_drawer@count+1,c
  4401  00D20C  0E00               	movlw	0
  4402  00D20E  6E32               	movwf	which_drawer@count,c
  4403                           
  4404                           ;standbyMode.c: 1545: unsigned int sum = 0;
  4405  00D210  0E00               	movlw	0
  4406  00D212  6E2F               	movwf	which_drawer@sum+1,c
  4407  00D214  0E00               	movlw	0
  4408  00D216  6E2E               	movwf	which_drawer@sum,c
  4409                           
  4410                           ;standbyMode.c: 1546: unsigned int backCheck = 0;
  4411  00D218  0E00               	movlw	0
  4412  00D21A  6E31               	movwf	which_drawer@backCheck+1,c
  4413  00D21C  0E00               	movlw	0
  4414  00D21E  6E30               	movwf	which_drawer@backCheck,c
  4415  00D220                     
  4416                           ;standbyMode.c: 1549: while(PORTBbits.RB1 == 0){ continue; }
  4417  00D220  A281               	btfss	3969,1,c	;volatile
  4418  00D222  D7FE               	goto	l646
  4419                           
  4420                           ;standbyMode.c: 1550: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4421  00D224  3881               	swapf	3969,w,c	;volatile
  4422  00D226  0B0F               	andlw	15
  4423  00D228  0B0F               	andlw	15
  4424  00D22A  6E34               	movwf	which_drawer@keypress,c
  4425  00D22C  B281               	btfsc	3969,1,c	;volatile
  4426  00D22E  D7FE               	goto	l651
  4427                           
  4428                           ;standbyMode.c: 1553: if(keypress == 15){
  4429  00D230  0E0F               	movlw	15
  4430  00D232  1834               	xorwf	which_drawer@keypress,w,c
  4431  00D234  B4D8               	btfsc	status,2,c
  4432  00D236  D0C3               	goto	l654
  4433                           
  4434                           ;standbyMode.c: 1556: else if (keypress == 14){
  4435                           
  4436                           ;standbyMode.c: 1555: }
  4437                           
  4438                           ;standbyMode.c: 1554: break;
  4439  00D238  0E0E               	movlw	14
  4440  00D23A  1834               	xorwf	which_drawer@keypress,w,c
  4441  00D23C  A4D8               	btfss	status,2,c
  4442  00D23E  D005               	goto	l656
  4443                           
  4444                           ;standbyMode.c: 1557: backCheck = 100;
  4445  00D240  0E00               	movlw	0
  4446  00D242  6E31               	movwf	which_drawer@backCheck+1,c
  4447  00D244  0E64               	movlw	100
  4448  00D246  6E30               	movwf	which_drawer@backCheck,c
  4449                           
  4450                           ;standbyMode.c: 1558: break;
  4451  00D248  D0BA               	goto	l654
  4452  00D24A                     l656:
  4453                           
  4454                           ;standbyMode.c: 1560: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  4455  00D24A  5034               	movf	which_drawer@keypress,w,c
  4456  00D24C  B4D8               	btfsc	status,2,c
  4457  00D24E  D023               	goto	u7200
  4458  00D250  0434               	decf	which_drawer@keypress,w,c
  4459  00D252  B4D8               	btfsc	status,2,c
  4460  00D254  D020               	goto	u7200
  4461  00D256  0E02               	movlw	2
  4462  00D258  1834               	xorwf	which_drawer@keypress,w,c
  4463  00D25A  B4D8               	btfsc	status,2,c
  4464  00D25C  D01C               	goto	u7200
  4465  00D25E  0E04               	movlw	4
  4466  00D260  1834               	xorwf	which_drawer@keypress,w,c
  4467  00D262  B4D8               	btfsc	status,2,c
  4468  00D264  D018               	goto	u7200
  4469  00D266  0E05               	movlw	5
  4470  00D268  1834               	xorwf	which_drawer@keypress,w,c
  4471  00D26A  B4D8               	btfsc	status,2,c
  4472  00D26C  D014               	goto	u7200
  4473  00D26E  0E06               	movlw	6
  4474  00D270  1834               	xorwf	which_drawer@keypress,w,c
  4475  00D272  B4D8               	btfsc	status,2,c
  4476  00D274  D010               	goto	u7200
  4477  00D276  0E08               	movlw	8
  4478  00D278  1834               	xorwf	which_drawer@keypress,w,c
  4479  00D27A  B4D8               	btfsc	status,2,c
  4480  00D27C  D00C               	goto	u7200
  4481  00D27E  0E09               	movlw	9
  4482  00D280  1834               	xorwf	which_drawer@keypress,w,c
  4483  00D282  B4D8               	btfsc	status,2,c
  4484  00D284  D008               	goto	u7200
  4485  00D286  0E0A               	movlw	10
  4486  00D288  1834               	xorwf	which_drawer@keypress,w,c
  4487  00D28A  B4D8               	btfsc	status,2,c
  4488  00D28C  D004               	goto	u7200
  4489  00D28E  0E0D               	movlw	13
  4490  00D290  1834               	xorwf	which_drawer@keypress,w,c
  4491  00D292  A4D8               	btfss	status,2,c
  4492  00D294  D073               	goto	l658
  4493  00D296                     u7200:
  4494                           
  4495                           ;standbyMode.c: 1561: if (count == 0){
  4496  00D296  5032               	movf	which_drawer@count,w,c
  4497  00D298  1033               	iorwf	which_drawer@count+1,w,c
  4498  00D29A  A4D8               	btfss	status,2,c
  4499  00D29C  D04C               	goto	l661
  4500                           
  4501                           ;standbyMode.c: 1562: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  4502  00D29E  0434               	decf	which_drawer@keypress,w,c
  4503  00D2A0  B4D8               	btfsc	status,2,c
  4504  00D2A2  D01C               	goto	u7290
  4505  00D2A4  0E02               	movlw	2
  4506  00D2A6  1834               	xorwf	which_drawer@keypress,w,c
  4507  00D2A8  B4D8               	btfsc	status,2,c
  4508  00D2AA  D018               	goto	u7290
  4509  00D2AC  0E04               	movlw	4
  4510  00D2AE  1834               	xorwf	which_drawer@keypress,w,c
  4511  00D2B0  B4D8               	btfsc	status,2,c
  4512  00D2B2  D014               	goto	u7290
  4513  00D2B4  0E05               	movlw	5
  4514  00D2B6  1834               	xorwf	which_drawer@keypress,w,c
  4515  00D2B8  B4D8               	btfsc	status,2,c
  4516  00D2BA  D010               	goto	u7290
  4517  00D2BC  0E06               	movlw	6
  4518  00D2BE  1834               	xorwf	which_drawer@keypress,w,c
  4519  00D2C0  B4D8               	btfsc	status,2,c
  4520  00D2C2  D00C               	goto	u7290
  4521  00D2C4  0E08               	movlw	8
  4522  00D2C6  1834               	xorwf	which_drawer@keypress,w,c
  4523  00D2C8  B4D8               	btfsc	status,2,c
  4524  00D2CA  D008               	goto	u7290
  4525  00D2CC  0E09               	movlw	9
  4526  00D2CE  1834               	xorwf	which_drawer@keypress,w,c
  4527  00D2D0  B4D8               	btfsc	status,2,c
  4528  00D2D2  D004               	goto	u7290
  4529  00D2D4  0E0A               	movlw	10
  4530  00D2D6  1834               	xorwf	which_drawer@keypress,w,c
  4531  00D2D8  A4D8               	btfss	status,2,c
  4532  00D2DA  D014               	goto	l662
  4533  00D2DC                     u7290:
  4534                           
  4535                           ;standbyMode.c: 1563: count += 2;
  4536  00D2DC  0E02               	movlw	2
  4537  00D2DE  2632               	addwf	which_drawer@count,f,c
  4538  00D2E0  0E00               	movlw	0
  4539  00D2E2  2233               	addwfc	which_drawer@count+1,f,c
  4540                           
  4541                           ;standbyMode.c: 1564: putch(input[keypress]);
  4542  00D2E4  5034               	movf	which_drawer@keypress,w,c
  4543  00D2E6  0D01               	mullw	1
  4544  00D2E8  0E10               	movlw	low _input
  4545  00D2EA  24F3               	addwf	prodl,w,c
  4546  00D2EC  6EF6               	movwf	tblptrl,c
  4547  00D2EE  0EFD               	movlw	high _input
  4548  00D2F0  20F4               	addwfc	prodh,w,c
  4549  00D2F2  6EF7               	movwf	tblptrh,c
  4550  00D2F4                     	if	1	;There are 3 active tblptr bytes
  4551  00D2F4  6AF8               	clrf	tblptru,c
  4552  00D2F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4553  00D2F8  22F8               	addwfc	tblptru,f,c
  4554  00D2FA                     	endif
  4555  00D2FA  0008               	tblrd		*
  4556  00D2FC  50F5               	movf	tablat,w,c
  4557  00D2FE  ECCC  F061         	call	_putch
  4558  00D302  D03A               	goto	l672
  4559  00D304                     l662:
  4560                           
  4561                           ;standbyMode.c: 1567: else if (keypress == 0){
  4562  00D304  5034               	movf	which_drawer@keypress,w,c
  4563  00D306  A4D8               	btfss	status,2,c
  4564  00D308  D78B               	goto	l646
  4565                           
  4566                           ;standbyMode.c: 1568: putch(input[keypress]);
  4567  00D30A  5034               	movf	which_drawer@keypress,w,c
  4568  00D30C  0D01               	mullw	1
  4569  00D30E  0E10               	movlw	low _input
  4570  00D310  24F3               	addwf	prodl,w,c
  4571  00D312  6EF6               	movwf	tblptrl,c
  4572  00D314  0EFD               	movlw	high _input
  4573  00D316  20F4               	addwfc	prodh,w,c
  4574  00D318  6EF7               	movwf	tblptrh,c
  4575  00D31A                     	if	1	;There are 3 active tblptr bytes
  4576  00D31A  6AF8               	clrf	tblptru,c
  4577  00D31C  0E00               	movlw	low (__mediumconst shr (0+16))
  4578  00D31E  22F8               	addwfc	tblptru,f,c
  4579  00D320                     	endif
  4580  00D320  0008               	tblrd		*
  4581  00D322  50F5               	movf	tablat,w,c
  4582  00D324  ECCC  F061         	call	_putch
  4583                           
  4584                           ;standbyMode.c: 1569: count += 1;
  4585  00D328  4A32               	infsnz	which_drawer@count,f,c
  4586  00D32A  2A33               	incf	which_drawer@count+1,f,c
  4587  00D32C  D023               	goto	u7340
  4588  00D32E                     L3:
  4589  00D32E  262E               	addwf	which_drawer@sum,f,c
  4590  00D330  0E00               	movlw	0
  4591  00D332  222F               	addwfc	which_drawer@sum+1,f,c
  4592                           
  4593                           ;standbyMode.c: 1571: }
  4594                           ;standbyMode.c: 1572: }
  4595  00D334  D775               	goto	l646
  4596  00D336                     l661:
  4597                           
  4598                           ;standbyMode.c: 1573: else if (count == 1){
  4599  00D336  0432               	decf	which_drawer@count,w,c
  4600  00D338  1033               	iorwf	which_drawer@count+1,w,c
  4601  00D33A  A4D8               	btfss	status,2,c
  4602  00D33C  D771               	goto	l646
  4603                           
  4604                           ;standbyMode.c: 1574: if (keypress < 8 || keypress == 13){
  4605  00D33E  0E07               	movlw	7
  4606  00D340  6434               	cpfsgt	which_drawer@keypress,c
  4607  00D342  D004               	goto	u7330
  4608  00D344  0E0D               	movlw	13
  4609  00D346  1834               	xorwf	which_drawer@keypress,w,c
  4610  00D348  A4D8               	btfss	status,2,c
  4611  00D34A  D76A               	goto	l646
  4612  00D34C                     u7330:
  4613                           
  4614                           ;standbyMode.c: 1575: putch(input[keypress]);
  4615  00D34C  5034               	movf	which_drawer@keypress,w,c
  4616  00D34E  0D01               	mullw	1
  4617  00D350  0E10               	movlw	low _input
  4618  00D352  24F3               	addwf	prodl,w,c
  4619  00D354  6EF6               	movwf	tblptrl,c
  4620  00D356  0EFD               	movlw	high _input
  4621  00D358  20F4               	addwfc	prodh,w,c
  4622  00D35A  6EF7               	movwf	tblptrh,c
  4623  00D35C                     	if	1	;There are 3 active tblptr bytes
  4624  00D35C  6AF8               	clrf	tblptru,c
  4625  00D35E  0E00               	movlw	low (__mediumconst shr (0+16))
  4626  00D360  22F8               	addwfc	tblptru,f,c
  4627  00D362                     	endif
  4628  00D362  0008               	tblrd		*
  4629  00D364  50F5               	movf	tablat,w,c
  4630  00D366  ECCC  F061         	call	_putch
  4631                           
  4632                           ;standbyMode.c: 1576: count += 1;
  4633  00D36A  4A32               	infsnz	which_drawer@count,f,c
  4634  00D36C  2A33               	incf	which_drawer@count+1,f,c
  4635                           
  4636                           ;standbyMode.c: 1577: if(keypress == 0){
  4637  00D36E  5034               	movf	which_drawer@keypress,w,c
  4638  00D370  A4D8               	btfss	status,2,c
  4639  00D372  D002               	goto	l672
  4640  00D374                     u7340:
  4641                           
  4642                           ;standbyMode.c: 1578: sum += 20;
  4643  00D374  0E14               	movlw	20
  4644  00D376  D7DB               	goto	L3
  4645  00D378                     l672:
  4646                           
  4647                           ;standbyMode.c: 1580: else {
  4648                           ;standbyMode.c: 1581: sum += keypress;
  4649  00D378  5034               	movf	which_drawer@keypress,w,c
  4650  00D37A  D7D9               	goto	L3
  4651  00D37C                     l658:
  4652                           
  4653                           ;standbyMode.c: 1586: else if (keypress == 12){
  4654  00D37C  0E0C               	movlw	12
  4655  00D37E  1834               	xorwf	which_drawer@keypress,w,c
  4656  00D380  A4D8               	btfss	status,2,c
  4657  00D382  D74E               	goto	l646
  4658                           
  4659                           ;standbyMode.c: 1587: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4660  00D384  0E01               	movlw	1
  4661  00D386  ECC2  F061         	call	_lcdInst
  4662  00D38A  0EC3               	movlw	195
  4663  00D38C  6E2B               	movwf	??_which_drawer& (0+255),c
  4664  00D38E  0ECD               	movlw	205
  4665  00D390                     u8567:
  4666  00D390  2EE8               	decfsz	wreg,f,c
  4667  00D392  D7FE               	bra	u8567
  4668  00D394  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4669  00D396  D7FC               	bra	u8567
  4670  00D398  F000               	nop	
  4671                           
  4672                           ;standbyMode.c: 1588: printf("Drawer number:");
  4673  00D39A  0E59               	movlw	low STR_57
  4674  00D39C  6E0D               	movwf	printf@f,c
  4675  00D39E  0EFE               	movlw	high STR_57
  4676  00D3A0  6E0E               	movwf	printf@f+1,c
  4677  00D3A2  EC6E  F06B         	call	_printf	;wreg free
  4678                           
  4679                           ;standbyMode.c: 1589: lcdInst(0xC0);;
  4680  00D3A6  0EC0               	movlw	192
  4681  00D3A8  ECC2  F061         	call	_lcdInst
  4682                           
  4683                           ;standbyMode.c: 1590: count = 0;
  4684  00D3AC  0E00               	movlw	0
  4685  00D3AE  6E33               	movwf	which_drawer@count+1,c
  4686  00D3B0  0E00               	movlw	0
  4687  00D3B2  6E32               	movwf	which_drawer@count,c
  4688                           
  4689                           ;standbyMode.c: 1591: sum = 0;
  4690  00D3B4  0E00               	movlw	0
  4691  00D3B6  6E2F               	movwf	which_drawer@sum+1,c
  4692  00D3B8  0E00               	movlw	0
  4693  00D3BA  6E2E               	movwf	which_drawer@sum,c
  4694  00D3BC  D731               	goto	l646
  4695  00D3BE                     l654:
  4696                           
  4697                           ;standbyMode.c: 1592: }
  4698                           ;standbyMode.c: 1593: }
  4699                           ;standbyMode.c: 1595: if (backCheck == 100){
  4700  00D3BE  0E64               	movlw	100
  4701  00D3C0  1830               	xorwf	which_drawer@backCheck,w,c
  4702  00D3C2  1031               	iorwf	which_drawer@backCheck+1,w,c
  4703  00D3C4  A4D8               	btfss	status,2,c
  4704  00D3C6  D005               	goto	l677
  4705                           
  4706                           ;standbyMode.c: 1596: return backCheck;
  4707  00D3C8  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  4708  00D3CC  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  4709                           
  4710                           ;standbyMode.c: 1597: }
  4711  00D3D0  0012               	return	
  4712  00D3D2                     l677:
  4713                           
  4714                           ;standbyMode.c: 1598: else{
  4715                           ;standbyMode.c: 1599: unsigned int rand = decode_drawer(sum);
  4716  00D3D2  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  4717  00D3D6  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  4718  00D3DA  EC72  F065         	call	_decode_drawer	;wreg free
  4719  00D3DE  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  4720  00D3E2  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  4721                           
  4722                           ;standbyMode.c: 1600: return rand;
  4723  00D3E6  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  4724  00D3EA  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  4725  00D3EE  0012               	return	
  4726  00D3F0                     __end_of_which_drawer:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           postinc0	equ	0xFEE
  4735                           wreg	equ	0xFE8
  4736                           postdec1	equ	0xFE5
  4737                           plusw1	equ	0xFE3
  4738                           fsr1l	equ	0xFE1
  4739                           indf2	equ	0xFDF
  4740                           postinc2	equ	0xFDE
  4741                           postdec2	equ	0xFDD
  4742                           plusw2	equ	0xFDB
  4743                           fsr2h	equ	0xFDA
  4744                           fsr2l	equ	0xFD9
  4745                           status	equ	0xFD8
  4746                           
  4747 ;; *************** function _decode_drawer *****************
  4748 ;; Defined at:
  4749 ;;		line 1460 in file "standbyMode.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  drawer          2    0[COMRAM] unsigned int 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  returnValue     2    4[COMRAM] unsigned int 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  2    0[COMRAM] unsigned int 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4763 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;Total ram usage:        6 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_which_drawer
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text3
  4777  00CAE4                     __ptext3:
  4778                           	opt stack 0
  4779  00CAE4                     _decode_drawer:
  4780                           	opt stack 28
  4781                           
  4782                           ;standbyMode.c: 1461: unsigned int returnValue;
  4783                           ;standbyMode.c: 1463: switch(drawer){
  4784                           
  4785                           ;incstack = 0
  4786  00CAE4  D03A               	goto	l627
  4787  00CAE6                     
  4788                           ;standbyMode.c: 1466: returnValue = 1;
  4789  00CAE6  0E00               	movlw	0
  4790  00CAE8  6E06               	movwf	decode_drawer@returnValue+1,c
  4791  00CAEA  0E01               	movlw	1
  4792  00CAEC  D02F               	goto	L15
  4793  00CAEE                     
  4794                           ;standbyMode.c: 1471: returnValue = 2;
  4795  00CAEE  0E00               	movlw	0
  4796  00CAF0  6E06               	movwf	decode_drawer@returnValue+1,c
  4797  00CAF2  0E02               	movlw	2
  4798  00CAF4  D02B               	goto	L15
  4799  00CAF6                     
  4800                           ;standbyMode.c: 1476: returnValue = 3;
  4801  00CAF6  0E00               	movlw	0
  4802  00CAF8  6E06               	movwf	decode_drawer@returnValue+1,c
  4803  00CAFA  0E03               	movlw	3
  4804  00CAFC  D027               	goto	L15
  4805  00CAFE                     
  4806                           ;standbyMode.c: 1481: returnValue = 7;
  4807  00CAFE  0E00               	movlw	0
  4808  00CB00  6E06               	movwf	decode_drawer@returnValue+1,c
  4809  00CB02  0E07               	movlw	7
  4810  00CB04  D023               	goto	L15
  4811  00CB06                     
  4812                           ;standbyMode.c: 1486: returnValue = 8;
  4813  00CB06  0E00               	movlw	0
  4814  00CB08  6E06               	movwf	decode_drawer@returnValue+1,c
  4815  00CB0A  0E08               	movlw	8
  4816  00CB0C  D01F               	goto	L15
  4817  00CB0E                     
  4818                           ;standbyMode.c: 1491: returnValue = 9;
  4819  00CB0E  0E00               	movlw	0
  4820  00CB10  6E06               	movwf	decode_drawer@returnValue+1,c
  4821  00CB12  0E09               	movlw	9
  4822  00CB14  D01B               	goto	L15
  4823  00CB16                     
  4824                           ;standbyMode.c: 1496: returnValue = 10;
  4825  00CB16  0E00               	movlw	0
  4826  00CB18  6E06               	movwf	decode_drawer@returnValue+1,c
  4827  00CB1A  0E0A               	movlw	10
  4828  00CB1C  D017               	goto	L15
  4829  00CB1E                     
  4830                           ;standbyMode.c: 1501: returnValue = 11;
  4831  00CB1E  0E00               	movlw	0
  4832  00CB20  6E06               	movwf	decode_drawer@returnValue+1,c
  4833  00CB22  0E0B               	movlw	11
  4834  00CB24  D013               	goto	L15
  4835  00CB26                     
  4836                           ;standbyMode.c: 1506: returnValue = 12;
  4837  00CB26  0E00               	movlw	0
  4838  00CB28  6E06               	movwf	decode_drawer@returnValue+1,c
  4839  00CB2A  0E0C               	movlw	12
  4840  00CB2C  D00F               	goto	L15
  4841  00CB2E                     
  4842                           ;standbyMode.c: 1511: returnValue = 13;
  4843  00CB2E  0E00               	movlw	0
  4844  00CB30  6E06               	movwf	decode_drawer@returnValue+1,c
  4845  00CB32  0E0D               	movlw	13
  4846  00CB34  D00B               	goto	L15
  4847  00CB36                     
  4848                           ;standbyMode.c: 1516: returnValue = 14;
  4849  00CB36  0E00               	movlw	0
  4850  00CB38  6E06               	movwf	decode_drawer@returnValue+1,c
  4851  00CB3A  0E0E               	movlw	14
  4852  00CB3C  D007               	goto	L15
  4853  00CB3E                     
  4854                           ;standbyMode.c: 1521: returnValue = 15;
  4855  00CB3E  0E00               	movlw	0
  4856  00CB40  6E06               	movwf	decode_drawer@returnValue+1,c
  4857  00CB42  0E0F               	movlw	15
  4858  00CB44  D003               	goto	L15
  4859  00CB46                     
  4860                           ;standbyMode.c: 1526: returnValue = 16;
  4861  00CB46  0E00               	movlw	0
  4862  00CB48  6E06               	movwf	decode_drawer@returnValue+1,c
  4863  00CB4A  0E10               	movlw	16
  4864  00CB4C                     L15:
  4865  00CB4C  6E05               	movwf	decode_drawer@returnValue,c
  4866                           
  4867                           ;standbyMode.c: 1527: break;
  4868  00CB4E  D036               	goto	l629
  4869  00CB50                     l642:
  4870                           
  4871                           ;standbyMode.c: 1530: returnValue = drawer;
  4872  00CB50  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  4873  00CB54  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  4874                           
  4875                           ;standbyMode.c: 1532: }
  4876                           
  4877                           ;standbyMode.c: 1531: break;
  4878  00CB58  D031               	goto	l629
  4879  00CB5A                     l627:
  4880  00CB5A  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  4881  00CB5E  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  4882                           
  4883                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4884                           ; Switch size 1, requested type "space"
  4885                           ; Number of cases is 1, Range of values is 0 to 0
  4886                           ; switch strategies available:
  4887                           ; Name         Instructions Cycles
  4888                           ; simple_byte            4     3 (average)
  4889                           ;	Chosen strategy is simple_byte
  4890  00CB62  5004               	movf	??_decode_drawer+1,w,c
  4891  00CB64  0A00               	xorlw	0	; case 0
  4892  00CB66  A4D8               	btfss	status,2,c
  4893  00CB68  D7F3               	goto	l642
  4894                           
  4895                           ; Switch size 1, requested type "space"
  4896                           ; Number of cases is 13, Range of values is 1 to 40
  4897                           ; switch strategies available:
  4898                           ; Name         Instructions Cycles
  4899                           ; simple_byte           40    21 (average)
  4900                           ;	Chosen strategy is simple_byte
  4901  00CB6A  5003               	movf	??_decode_drawer,w,c
  4902  00CB6C  0A01               	xorlw	1	; case 1
  4903  00CB6E  B4D8               	btfsc	status,2,c
  4904  00CB70  D7BE               	goto	l630
  4905  00CB72  0A03               	xorlw	3	; case 2
  4906  00CB74  B4D8               	btfsc	status,2,c
  4907  00CB76  D7BF               	goto	l631
  4908  00CB78  0A0A               	xorlw	10	; case 8
  4909  00CB7A  B4D8               	btfsc	status,2,c
  4910  00CB7C  D7C0               	goto	l632
  4911  00CB7E  0A01               	xorlw	1	; case 9
  4912  00CB80  B4D8               	btfsc	status,2,c
  4913  00CB82  D7C1               	goto	l633
  4914  00CB84  0A03               	xorlw	3	; case 10
  4915  00CB86  B4D8               	btfsc	status,2,c
  4916  00CB88  D7C2               	goto	l634
  4917  00CB8A  0A1E               	xorlw	30	; case 20
  4918  00CB8C  B4D8               	btfsc	status,2,c
  4919  00CB8E  D7AB               	goto	l628
  4920  00CB90  0A01               	xorlw	1	; case 21
  4921  00CB92  B4D8               	btfsc	status,2,c
  4922  00CB94  D7C8               	goto	l637
  4923  00CB96  0A03               	xorlw	3	; case 22
  4924  00CB98  B4D8               	btfsc	status,2,c
  4925  00CB9A  D7C9               	goto	l638
  4926  00CB9C  0A0E               	xorlw	14	; case 24
  4927  00CB9E  B4D8               	btfsc	status,2,c
  4928  00CBA0  D7CA               	goto	l639
  4929  00CBA2  0A01               	xorlw	1	; case 25
  4930  00CBA4  B4D8               	btfsc	status,2,c
  4931  00CBA6  D7CB               	goto	l640
  4932  00CBA8  0A03               	xorlw	3	; case 26
  4933  00CBAA  B4D8               	btfsc	status,2,c
  4934  00CBAC  D7CC               	goto	l641
  4935  00CBAE  0A3B               	xorlw	59	; case 33
  4936  00CBB0  B4D8               	btfsc	status,2,c
  4937  00CBB2  D7B1               	goto	l635
  4938  00CBB4  0A09               	xorlw	9	; case 40
  4939  00CBB6  B4D8               	btfsc	status,2,c
  4940  00CBB8  D7B2               	goto	l636
  4941  00CBBA  D7CA               	goto	l642
  4942  00CBBC                     l629:
  4943                           
  4944                           ;standbyMode.c: 1533: return returnValue;
  4945  00CBBC  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  4946  00CBC0  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  4947  00CBC4  0012               	return		;funcret
  4948  00CBC6                     __end_of_decode_drawer:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           postdec1	equ	0xFE5
  4959                           plusw1	equ	0xFE3
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           plusw2	equ	0xFDB
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _viewLogs *****************
  4970 ;; Defined at:
  4971 ;;		line 823 in file "standbyMode.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  keypress2       1   96[COMRAM] unsigned char 
  4976 ;;  logView         2   93[COMRAM] unsigned int 
  4977 ;;  returnVal       2   91[COMRAM] unsigned int 
  4978 ;;  checkLog        2   89[COMRAM] unsigned int 
  4979 ;;  logNumber       1   95[COMRAM] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  2   85[COMRAM] unsigned int 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4989 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;Total ram usage:       12 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    4
  4996 ;; This function calls:
  4997 ;;		_displayLogs
  4998 ;;		_lcdInst
  4999 ;;		_printf
  5000 ;;		_putch
  5001 ;;		_readEEPROM
  5002 ;;		_verifyKeypress
  5003 ;; This function is called by:
  5004 ;;		_standbyMode
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text4
  5009  00D3F0                     __ptext4:
  5010                           	opt stack 0
  5011  00D3F0                     _viewLogs:
  5012                           	opt stack 25
  5013                           
  5014                           ;standbyMode.c: 825: unsigned char logNumber = readEEPROM(250);
  5015                           
  5016                           ;incstack = 0
  5017  00D3F0  0EFA               	movlw	250
  5018  00D3F2  ECD6  F061         	call	_readEEPROM
  5019  00D3F6  6E60               	movwf	viewLogs@logNumber,c
  5020                           
  5021                           ;standbyMode.c: 826: unsigned int logView = 0;
  5022  00D3F8  0E00               	movlw	0
  5023  00D3FA  6E5F               	movwf	viewLogs@logView+1,c
  5024  00D3FC  0E00               	movlw	0
  5025  00D3FE  6E5E               	movwf	viewLogs@logView,c
  5026                           
  5027                           ;standbyMode.c: 827: unsigned int checkLog = 0;
  5028  00D400  0E00               	movlw	0
  5029  00D402  6E5B               	movwf	viewLogs@checkLog+1,c
  5030  00D404  0E00               	movlw	0
  5031  00D406  6E5A               	movwf	viewLogs@checkLog,c
  5032                           
  5033                           ;standbyMode.c: 828: unsigned int returnVal = 0;
  5034  00D408  0E00               	movlw	0
  5035  00D40A  6E5D               	movwf	viewLogs@returnVal+1,c
  5036  00D40C  0E00               	movlw	0
  5037  00D40E  6E5C               	movwf	viewLogs@returnVal,c
  5038                           
  5039                           ;standbyMode.c: 830: if (logNumber == 0){
  5040  00D410  5060               	movf	viewLogs@logNumber,w,c
  5041  00D412  A4D8               	btfss	status,2,c
  5042  00D414  D02B               	goto	l423
  5043                           
  5044                           ;standbyMode.c: 831: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5045  00D416  0E01               	movlw	1
  5046  00D418  ECC2  F061         	call	_lcdInst
  5047  00D41C  0EC3               	movlw	195
  5048  00D41E  6E58               	movwf	??_viewLogs& (0+255),c
  5049  00D420  0ECD               	movlw	205
  5050  00D422                     u8577:
  5051  00D422  2EE8               	decfsz	wreg,f,c
  5052  00D424  D7FE               	bra	u8577
  5053  00D426  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5054  00D428  D7FC               	bra	u8577
  5055  00D42A  F000               	nop	
  5056                           
  5057                           ;standbyMode.c: 832: printf("No logs");
  5058  00D42C  0EAF               	movlw	low STR_20
  5059  00D42E  6E0D               	movwf	printf@f,c
  5060  00D430  0EFF               	movlw	high STR_20
  5061  00D432  6E0E               	movwf	printf@f+1,c
  5062  00D434  EC6E  F06B         	call	_printf	;wreg free
  5063                           
  5064                           ;standbyMode.c: 833: lcdInst(0xC0);;
  5065  00D438  0EC0               	movlw	192
  5066  00D43A  ECC2  F061         	call	_lcdInst
  5067                           
  5068                           ;standbyMode.c: 834: printf("available.");
  5069  00D43E  0E56               	movlw	low STR_21
  5070  00D440  6E0D               	movwf	printf@f,c
  5071  00D442  0EFF               	movlw	high STR_21
  5072  00D444  6E0E               	movwf	printf@f+1,c
  5073  00D446  EC6E  F06B         	call	_printf	;wreg free
  5074                           
  5075                           ;standbyMode.c: 835: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5076  00D44A  0E66               	movlw	102
  5077  00D44C  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5078  00D44E  0E76               	movlw	118
  5079  00D450  6E58               	movwf	??_viewLogs& (0+255),c
  5080  00D452  0EC1               	movlw	193
  5081  00D454                     u8587:
  5082  00D454  2EE8               	decfsz	wreg,f,c
  5083  00D456  D7FE               	bra	u8587
  5084  00D458  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5085  00D45A  D7FC               	bra	u8587
  5086  00D45C  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5087  00D45E  D7FA               	bra	u8587
  5088  00D460  F000               	nop	
  5089                           
  5090                           ;standbyMode.c: 836: return 14;
  5091  00D462  0E00               	movlw	0
  5092  00D464  6E57               	movwf	?_viewLogs+1,c
  5093  00D466  0E0E               	movlw	14
  5094  00D468  6E56               	movwf	?_viewLogs,c
  5095                           
  5096                           ;standbyMode.c: 837: }
  5097  00D46A  0012               	return	
  5098  00D46C                     l423:
  5099                           
  5100                           ;standbyMode.c: 838: else {
  5101                           ;standbyMode.c: 839: if (logNumber == 1){
  5102  00D46C  0460               	decf	viewLogs@logNumber,w,c
  5103  00D46E  A4D8               	btfss	status,2,c
  5104  00D470  D053               	goto	l426
  5105                           
  5106                           ;standbyMode.c: 840: logView = 1;
  5107  00D472  0E00               	movlw	0
  5108  00D474  6E5F               	movwf	viewLogs@logView+1,c
  5109  00D476  0E01               	movlw	1
  5110  00D478  6E5E               	movwf	viewLogs@logView,c
  5111                           
  5112                           ;standbyMode.c: 842: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5113  00D47A  0E01               	movlw	1
  5114  00D47C  ECC2  F061         	call	_lcdInst
  5115  00D480  0EC3               	movlw	195
  5116  00D482  6E58               	movwf	??_viewLogs& (0+255),c
  5117  00D484  0ECD               	movlw	205
  5118  00D486                     u8597:
  5119  00D486  2EE8               	decfsz	wreg,f,c
  5120  00D488  D7FE               	bra	u8597
  5121  00D48A  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5122  00D48C  D7FC               	bra	u8597
  5123  00D48E  F000               	nop	
  5124                           
  5125                           ;standbyMode.c: 843: printf("1 previous log");
  5126  00D490  0E77               	movlw	low STR_22
  5127  00D492  6E0D               	movwf	printf@f,c
  5128  00D494  0EFE               	movlw	high STR_22
  5129  00D496  6E0E               	movwf	printf@f+1,c
  5130  00D498  EC6E  F06B         	call	_printf	;wreg free
  5131                           
  5132                           ;standbyMode.c: 844: lcdInst(0xC0);;
  5133  00D49C  0EC0               	movlw	192
  5134  00D49E  ECC2  F061         	call	_lcdInst
  5135                           
  5136                           ;standbyMode.c: 845: printf("available.");
  5137  00D4A2  0E56               	movlw	low STR_21
  5138  00D4A4  6E0D               	movwf	printf@f,c
  5139  00D4A6  0EFF               	movlw	high STR_21
  5140  00D4A8  6E0E               	movwf	printf@f+1,c
  5141  00D4AA  EC6E  F06B         	call	_printf	;wreg free
  5142                           
  5143                           ;standbyMode.c: 846: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5144  00D4AE  0E66               	movlw	102
  5145  00D4B0  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5146  00D4B2  0E76               	movlw	118
  5147  00D4B4  6E58               	movwf	??_viewLogs& (0+255),c
  5148  00D4B6  0EC1               	movlw	193
  5149  00D4B8                     u8607:
  5150  00D4B8  2EE8               	decfsz	wreg,f,c
  5151  00D4BA  D7FE               	bra	u8607
  5152  00D4BC  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5153  00D4BE  D7FC               	bra	u8607
  5154  00D4C0  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5155  00D4C2  D7FA               	bra	u8607
  5156  00D4C4  F000               	nop	
  5157                           
  5158                           ;standbyMode.c: 848: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5159  00D4C6  0E01               	movlw	1
  5160  00D4C8  ECC2  F061         	call	_lcdInst
  5161  00D4CC  0EC3               	movlw	195
  5162  00D4CE  6E58               	movwf	??_viewLogs& (0+255),c
  5163  00D4D0  0ECD               	movlw	205
  5164  00D4D2                     u8617:
  5165  00D4D2  2EE8               	decfsz	wreg,f,c
  5166  00D4D4  D7FE               	bra	u8617
  5167  00D4D6  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5168  00D4D8  D7FC               	bra	u8617
  5169  00D4DA  F000               	nop	
  5170                           
  5171                           ;standbyMode.c: 849: printf("Press any key to");
  5172  00D4DC  0EA7               	movlw	low STR_24
  5173  00D4DE  6E0D               	movwf	printf@f,c
  5174  00D4E0  0EFD               	movlw	high STR_24
  5175  00D4E2  6E0E               	movwf	printf@f+1,c
  5176  00D4E4  EC6E  F06B         	call	_printf	;wreg free
  5177                           
  5178                           ;standbyMode.c: 850: lcdInst(0xC0);;
  5179  00D4E8  0EC0               	movlw	192
  5180  00D4EA  ECC2  F061         	call	_lcdInst
  5181                           
  5182                           ;standbyMode.c: 851: printf("move forward.");
  5183  00D4EE  0EED               	movlw	low STR_25
  5184  00D4F0  6E0D               	movwf	printf@f,c
  5185  00D4F2  0EFE               	movlw	high STR_25
  5186  00D4F4  6E0E               	movwf	printf@f+1,c
  5187  00D4F6  EC6E  F06B         	call	_printf	;wreg free
  5188                           
  5189                           ;standbyMode.c: 852: _delay((unsigned long)((500)*(40000000/4000.0)));
  5190  00D4FA  0E1A               	movlw	26
  5191  00D4FC  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5192  00D4FE  0E5E               	movlw	94
  5193  00D500  6E58               	movwf	??_viewLogs& (0+255),c
  5194  00D502  0E6E               	movlw	110
  5195  00D504                     u8627:
  5196  00D504  2EE8               	decfsz	wreg,f,c
  5197  00D506  D7FE               	bra	u8627
  5198  00D508  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5199  00D50A  D7FC               	bra	u8627
  5200  00D50C  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5201  00D50E  D7FA               	bra	u8627
  5202  00D510  D000               	nop2	
  5203  00D512                     
  5204                           ;standbyMode.c: 855: continue;
  5205  00D512  B281               	btfsc	3969,1,c	;volatile
  5206  00D514  D0D4               	goto	u6110
  5207  00D516  D7FD               	goto	l428
  5208  00D518                     l426:
  5209                           
  5210                           ;standbyMode.c: 858: else {
  5211                           ;standbyMode.c: 859: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5212  00D518  0E01               	movlw	1
  5213  00D51A  ECC2  F061         	call	_lcdInst
  5214  00D51E  0EC3               	movlw	195
  5215  00D520  6E58               	movwf	??_viewLogs& (0+255),c
  5216  00D522  0ECD               	movlw	205
  5217  00D524                     u8637:
  5218  00D524  2EE8               	decfsz	wreg,f,c
  5219  00D526  D7FE               	bra	u8637
  5220  00D528  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5221  00D52A  D7FC               	bra	u8637
  5222  00D52C  F000               	nop	
  5223                           
  5224                           ;standbyMode.c: 860: printf("%i previous logs", logNumber);
  5225  00D52E  0EB8               	movlw	low STR_26
  5226  00D530  6E0D               	movwf	printf@f,c
  5227  00D532  0EFD               	movlw	high STR_26
  5228  00D534  6E0E               	movwf	printf@f+1,c
  5229  00D536  C060  F00F         	movff	viewLogs@logNumber,?_printf+2
  5230  00D53A  6A10               	clrf	?_printf+3,c
  5231  00D53C  EC6E  F06B         	call	_printf	;wreg free
  5232                           
  5233                           ;standbyMode.c: 861: lcdInst(0xC0);;
  5234  00D540  0EC0               	movlw	192
  5235  00D542  ECC2  F061         	call	_lcdInst
  5236                           
  5237                           ;standbyMode.c: 862: printf("available.");
  5238  00D546  0E56               	movlw	low STR_21
  5239  00D548  6E0D               	movwf	printf@f,c
  5240  00D54A  0EFF               	movlw	high STR_21
  5241  00D54C  6E0E               	movwf	printf@f+1,c
  5242  00D54E  EC6E  F06B         	call	_printf	;wreg free
  5243                           
  5244                           ;standbyMode.c: 863: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5245  00D552  0E66               	movlw	102
  5246  00D554  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5247  00D556  0E76               	movlw	118
  5248  00D558  6E58               	movwf	??_viewLogs& (0+255),c
  5249  00D55A  0EC1               	movlw	193
  5250  00D55C                     u8647:
  5251  00D55C  2EE8               	decfsz	wreg,f,c
  5252  00D55E  D7FE               	bra	u8647
  5253  00D560  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5254  00D562  D7FC               	bra	u8647
  5255  00D564  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5256  00D566  D7FA               	bra	u8647
  5257  00D568  F000               	nop	
  5258                           
  5259                           ;standbyMode.c: 864: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5260  00D56A  0E01               	movlw	1
  5261  00D56C  ECC2  F061         	call	_lcdInst
  5262  00D570  0EC3               	movlw	195
  5263  00D572  6E58               	movwf	??_viewLogs& (0+255),c
  5264  00D574  0ECD               	movlw	205
  5265  00D576                     u8657:
  5266  00D576  2EE8               	decfsz	wreg,f,c
  5267  00D578  D7FE               	bra	u8657
  5268  00D57A  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5269  00D57C  D7FC               	bra	u8657
  5270  00D57E  F000               	nop	
  5271                           
  5272                           ;standbyMode.c: 865: printf("Please input log");
  5273  00D580  0E85               	movlw	low STR_28
  5274  00D582  6E0D               	movwf	printf@f,c
  5275  00D584  0EFD               	movlw	high STR_28
  5276  00D586  6E0E               	movwf	printf@f+1,c
  5277  00D588  EC6E  F06B         	call	_printf	;wreg free
  5278                           
  5279                           ;standbyMode.c: 866: lcdInst(0xC0);;
  5280  00D58C  0EC0               	movlw	192
  5281  00D58E  ECC2  F061         	call	_lcdInst
  5282                           
  5283                           ;standbyMode.c: 867: printf("number: ");
  5284  00D592  0E96               	movlw	low STR_29
  5285  00D594  6E0D               	movwf	printf@f,c
  5286  00D596  0EFF               	movlw	high STR_29
  5287  00D598  6E0E               	movwf	printf@f+1,c
  5288  00D59A  EC6E  F06B         	call	_printf	;wreg free
  5289  00D59E                     
  5290                           ;standbyMode.c: 870: while(PORTBbits.RB1 == 0){ continue; }
  5291  00D59E  A281               	btfss	3969,1,c	;volatile
  5292  00D5A0  D7FE               	goto	l431
  5293                           
  5294                           ;standbyMode.c: 871: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  5295  00D5A2  3881               	swapf	3969,w,c	;volatile
  5296  00D5A4  0B0F               	andlw	15
  5297  00D5A6  0B0F               	andlw	15
  5298  00D5A8  6E61               	movwf	viewLogs@keypress2,c
  5299  00D5AA  B281               	btfsc	3969,1,c	;volatile
  5300  00D5AC  D7FE               	goto	l436
  5301                           
  5302                           ;standbyMode.c: 874: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  5303  00D5AE  5061               	movf	viewLogs@keypress2,w,c
  5304  00D5B0  B4D8               	btfsc	status,2,c
  5305  00D5B2  D00B               	goto	u6080
  5306  00D5B4  0461               	decf	viewLogs@keypress2,w,c
  5307  00D5B6  B4D8               	btfsc	status,2,c
  5308  00D5B8  D008               	goto	u6080
  5309  00D5BA  0E02               	movlw	2
  5310  00D5BC  1861               	xorwf	viewLogs@keypress2,w,c
  5311  00D5BE  B4D8               	btfsc	status,2,c
  5312  00D5C0  D004               	goto	u6080
  5313  00D5C2  0E04               	movlw	4
  5314  00D5C4  1861               	xorwf	viewLogs@keypress2,w,c
  5315  00D5C6  A4D8               	btfss	status,2,c
  5316  00D5C8  D7EA               	goto	l431
  5317  00D5CA                     u6080:
  5318                           
  5319                           ;standbyMode.c: 875: checkLog = verifyKeypress(logNumber, keypress2);
  5320  00D5CA  C061  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  5321  00D5CE  6A02               	clrf	verifyKeypress@keypress+1,c
  5322  00D5D0  5060               	movf	viewLogs@logNumber,w,c
  5323  00D5D2  ECC9  F062         	call	_verifyKeypress
  5324  00D5D6  C001  F05A         	movff	?_verifyKeypress,viewLogs@checkLog
  5325  00D5DA  C002  F05B         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  5326                           
  5327                           ;standbyMode.c: 876: if (checkLog == 1){
  5328  00D5DE  045A               	decf	viewLogs@checkLog,w,c
  5329  00D5E0  105B               	iorwf	viewLogs@checkLog+1,w,c
  5330  00D5E2  A4D8               	btfss	status,2,c
  5331  00D5E4  D7DC               	goto	l431
  5332                           
  5333                           ;standbyMode.c: 877: putch(keys[keypress2]);
  5334  00D5E6  5061               	movf	viewLogs@keypress2,w,c
  5335  00D5E8  0D01               	mullw	1
  5336  00D5EA  0EFF               	movlw	low _keys
  5337  00D5EC  24F3               	addwf	prodl,w,c
  5338  00D5EE  6EF6               	movwf	tblptrl,c
  5339  00D5F0  0EFC               	movlw	high _keys
  5340  00D5F2  20F4               	addwfc	prodh,w,c
  5341  00D5F4  6EF7               	movwf	tblptrh,c
  5342  00D5F6                     	if	1	;There are 3 active tblptr bytes
  5343  00D5F6  6AF8               	clrf	tblptru,c
  5344  00D5F8  0E00               	movlw	low (__mediumconst shr (0+16))
  5345  00D5FA  22F8               	addwfc	tblptru,f,c
  5346  00D5FC                     	endif
  5347  00D5FC  0008               	tblrd		*
  5348  00D5FE  50F5               	movf	tablat,w,c
  5349  00D600  ECCC  F061         	call	_putch
  5350                           
  5351                           ;standbyMode.c: 878: if (keypress2 == 4){
  5352  00D604  0E04               	movlw	4
  5353  00D606  1861               	xorwf	viewLogs@keypress2,w,c
  5354  00D608  A4D8               	btfss	status,2,c
  5355  00D60A  D004               	goto	l442
  5356                           
  5357                           ;standbyMode.c: 879: logView = keypress2;
  5358  00D60C  C061  F05E         	movff	viewLogs@keypress2,viewLogs@logView
  5359  00D610  6A5F               	clrf	viewLogs@logView+1,c
  5360                           
  5361                           ;standbyMode.c: 880: }
  5362  00D612  D006               	goto	l443
  5363  00D614                     l442:
  5364                           
  5365                           ;standbyMode.c: 881: else{
  5366                           ;standbyMode.c: 882: logView = keypress2 + 1;
  5367  00D614  0E01               	movlw	1
  5368  00D616  2461               	addwf	viewLogs@keypress2,w,c
  5369  00D618  6E5E               	movwf	viewLogs@logView,c
  5370  00D61A  6A5F               	clrf	viewLogs@logView+1,c
  5371  00D61C  0E00               	movlw	0
  5372  00D61E  225F               	addwfc	viewLogs@logView+1,f,c
  5373  00D620                     l443:
  5374                           
  5375                           ;standbyMode.c: 883: }
  5376                           ;standbyMode.c: 884: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5377  00D620  0E33               	movlw	51
  5378  00D622  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5379  00D624  0EBB               	movlw	187
  5380  00D626  6E58               	movwf	??_viewLogs& (0+255),c
  5381  00D628  0EE0               	movlw	224
  5382  00D62A                     u8667:
  5383  00D62A  2EE8               	decfsz	wreg,f,c
  5384  00D62C  D7FE               	bra	u8667
  5385  00D62E  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5386  00D630  D7FC               	bra	u8667
  5387  00D632  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5388  00D634  D7FA               	bra	u8667
  5389                           
  5390                           ;standbyMode.c: 886: }
  5391                           ;standbyMode.c: 887: }
  5392                           ;standbyMode.c: 888: }
  5393                           ;standbyMode.c: 890: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5394                           
  5395                           ;standbyMode.c: 885: break;
  5396  00D636  0E01               	movlw	1
  5397  00D638  ECC2  F061         	call	_lcdInst
  5398  00D63C  0EC3               	movlw	195
  5399  00D63E  6E58               	movwf	??_viewLogs& (0+255),c
  5400  00D640  0ECD               	movlw	205
  5401  00D642                     u8677:
  5402  00D642  2EE8               	decfsz	wreg,f,c
  5403  00D644  D7FE               	bra	u8677
  5404  00D646  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5405  00D648  D7FC               	bra	u8677
  5406  00D64A  F000               	nop	
  5407                           
  5408                           ;standbyMode.c: 891: printf("Great!");
  5409  00D64C  0EC6               	movlw	low STR_30
  5410  00D64E  6E0D               	movwf	printf@f,c
  5411  00D650  0EFF               	movlw	high STR_30
  5412  00D652  6E0E               	movwf	printf@f+1,c
  5413  00D654  EC6E  F06B         	call	_printf	;wreg free
  5414                           
  5415                           ;standbyMode.c: 892: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5416  00D658  0E33               	movlw	51
  5417  00D65A  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5418  00D65C  0EBB               	movlw	187
  5419  00D65E  6E58               	movwf	??_viewLogs& (0+255),c
  5420  00D660  0EE0               	movlw	224
  5421  00D662                     u8687:
  5422  00D662  2EE8               	decfsz	wreg,f,c
  5423  00D664  D7FE               	bra	u8687
  5424  00D666  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5425  00D668  D7FC               	bra	u8687
  5426  00D66A  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5427  00D66C  D7FA               	bra	u8687
  5428                           
  5429                           ;standbyMode.c: 893: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5430  00D66E  0E01               	movlw	1
  5431  00D670  ECC2  F061         	call	_lcdInst
  5432  00D674  0EC3               	movlw	195
  5433  00D676  6E58               	movwf	??_viewLogs& (0+255),c
  5434  00D678  0ECD               	movlw	205
  5435  00D67A                     u8697:
  5436  00D67A  2EE8               	decfsz	wreg,f,c
  5437  00D67C  D7FE               	bra	u8697
  5438  00D67E  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5439  00D680  D7FC               	bra	u8697
  5440  00D682  F000               	nop	
  5441                           
  5442                           ;standbyMode.c: 894: printf("Press any key to");
  5443  00D684  0EA7               	movlw	low STR_24
  5444  00D686  6E0D               	movwf	printf@f,c
  5445  00D688  0EFD               	movlw	high STR_24
  5446  00D68A  6E0E               	movwf	printf@f+1,c
  5447  00D68C  EC6E  F06B         	call	_printf	;wreg free
  5448                           
  5449                           ;standbyMode.c: 895: lcdInst(0xC0);;
  5450  00D690  0EC0               	movlw	192
  5451  00D692  ECC2  F061         	call	_lcdInst
  5452                           
  5453                           ;standbyMode.c: 896: printf("move forward.");
  5454  00D696  0EED               	movlw	low STR_25
  5455  00D698  6E0D               	movwf	printf@f,c
  5456  00D69A  0EFE               	movlw	high STR_25
  5457  00D69C  6E0E               	movwf	printf@f+1,c
  5458  00D69E  EC6E  F06B         	call	_printf	;wreg free
  5459                           
  5460                           ;standbyMode.c: 897: _delay((unsigned long)((500)*(40000000/4000.0)));
  5461  00D6A2  0E1A               	movlw	26
  5462  00D6A4  6E59               	movwf	(??_viewLogs+1)& (0+255),c
  5463  00D6A6  0E5E               	movlw	94
  5464  00D6A8  6E58               	movwf	??_viewLogs& (0+255),c
  5465  00D6AA  0E6E               	movlw	110
  5466  00D6AC                     u8707:
  5467  00D6AC  2EE8               	decfsz	wreg,f,c
  5468  00D6AE  D7FE               	bra	u8707
  5469  00D6B0  2E58               	decfsz	??_viewLogs& (0+255),f,c
  5470  00D6B2  D7FC               	bra	u8707
  5471  00D6B4  2E59               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5472  00D6B6  D7FA               	bra	u8707
  5473  00D6B8  D000               	nop2	
  5474  00D6BA                     
  5475                           ;standbyMode.c: 900: continue;
  5476  00D6BA  A281               	btfss	3969,1,c	;volatile
  5477  00D6BC  D7FE               	goto	l447
  5478  00D6BE                     u6110:
  5479                           
  5480                           ;standbyMode.c: 901: }
  5481                           ;standbyMode.c: 902: }
  5482                           ;standbyMode.c: 903: returnVal = displayLogs(logView);
  5483  00D6BE  C05E  F029         	movff	viewLogs@logView,displayLogs@logNumber
  5484  00D6C2  C05F  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  5485  00D6C6  EC00  F070         	call	_displayLogs	;wreg free
  5486  00D6CA  C029  F05C         	movff	?_displayLogs,viewLogs@returnVal
  5487  00D6CE  C02A  F05D         	movff	?_displayLogs+1,viewLogs@returnVal+1
  5488                           
  5489                           ;standbyMode.c: 904: return returnVal;
  5490  00D6D2  C05C  F056         	movff	viewLogs@returnVal,?_viewLogs
  5491  00D6D6  C05D  F057         	movff	viewLogs@returnVal+1,?_viewLogs+1
  5492  00D6DA  0012               	return	
  5493  00D6DC                     __end_of_viewLogs:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           postdec1	equ	0xFE5
  5504                           plusw1	equ	0xFE3
  5505                           fsr1l	equ	0xFE1
  5506                           indf2	equ	0xFDF
  5507                           postinc2	equ	0xFDE
  5508                           postdec2	equ	0xFDD
  5509                           plusw2	equ	0xFDB
  5510                           fsr2h	equ	0xFDA
  5511                           fsr2l	equ	0xFD9
  5512                           status	equ	0xFD8
  5513                           
  5514 ;; *************** function _verifyKeypress *****************
  5515 ;; Defined at:
  5516 ;;		line 809 in file "standbyMode.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  logNumber       1    wreg     unsigned char 
  5519 ;;  keypress        2    0[COMRAM] unsigned int 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  logNumber       1    4[COMRAM] unsigned char 
  5522 ;;  i               2    7[COMRAM] unsigned int 
  5523 ;;  returnVal       2    5[COMRAM] unsigned int 
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  2    0[COMRAM] unsigned int 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;Total ram usage:        9 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_viewLogs
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text5
  5547  00C592                     __ptext5:
  5548                           	opt stack 0
  5549  00C592                     _verifyKeypress:
  5550                           	opt stack 28
  5551                           
  5552                           ;incstack = 0
  5553                           ;verifyKeypress@logNumber stored from wreg
  5554  00C592  6E05               	movwf	verifyKeypress@logNumber,c
  5555                           
  5556                           ;standbyMode.c: 810: unsigned int i = 0;
  5557  00C594  0E00               	movlw	0
  5558  00C596  6E09               	movwf	verifyKeypress@i+1,c
  5559  00C598  0E00               	movlw	0
  5560  00C59A  6E08               	movwf	verifyKeypress@i,c
  5561                           
  5562                           ;standbyMode.c: 811: unsigned int returnVal = 0;
  5563  00C59C  0E00               	movlw	0
  5564  00C59E  6E07               	movwf	verifyKeypress@returnVal+1,c
  5565  00C5A0  0E00               	movlw	0
  5566  00C5A2  6E06               	movwf	verifyKeypress@returnVal,c
  5567                           
  5568                           ;standbyMode.c: 813: for (i=0; i<logNumber; i++){
  5569  00C5A4  0E00               	movlw	0
  5570  00C5A6  6E09               	movwf	verifyKeypress@i+1,c
  5571  00C5A8  0E00               	movlw	0
  5572  00C5AA  6E08               	movwf	verifyKeypress@i,c
  5573  00C5AC  D00D               	goto	l416
  5574  00C5AE                     
  5575                           ;standbyMode.c: 814: if (keypress == i){
  5576  00C5AE  5008               	movf	verifyKeypress@i,w,c
  5577  00C5B0  1801               	xorwf	verifyKeypress@keypress,w,c
  5578  00C5B2  E108               	bnz	l5264
  5579  00C5B4  5009               	movf	verifyKeypress@i+1,w,c
  5580  00C5B6  1802               	xorwf	verifyKeypress@keypress+1,w,c
  5581  00C5B8  A4D8               	btfss	status,2,c
  5582  00C5BA  D004               	goto	l418
  5583                           
  5584                           ;standbyMode.c: 815: returnVal = 1;
  5585  00C5BC  0E00               	movlw	0
  5586  00C5BE  6E07               	movwf	verifyKeypress@returnVal+1,c
  5587  00C5C0  0E01               	movlw	1
  5588  00C5C2  6E06               	movwf	verifyKeypress@returnVal,c
  5589  00C5C4                     l418:
  5590  00C5C4                     l5264:
  5591  00C5C4  4A08               	infsnz	verifyKeypress@i,f,c
  5592  00C5C6  2A09               	incf	verifyKeypress@i+1,f,c
  5593  00C5C8                     l416:
  5594  00C5C8  5005               	movf	verifyKeypress@logNumber,w,c
  5595  00C5CA  6E03               	movwf	??_verifyKeypress& (0+255),c
  5596  00C5CC  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  5597  00C5CE  5003               	movf	??_verifyKeypress,w,c
  5598  00C5D0  5C08               	subwf	verifyKeypress@i,w,c
  5599  00C5D2  5004               	movf	??_verifyKeypress+1,w,c
  5600  00C5D4  5809               	subwfb	verifyKeypress@i+1,w,c
  5601  00C5D6  A0D8               	btfss	status,0,c
  5602  00C5D8  D7EA               	goto	l417
  5603                           
  5604                           ;standbyMode.c: 816: }
  5605                           ;standbyMode.c: 817: }
  5606                           ;standbyMode.c: 818: return returnVal;
  5607  00C5DA  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  5608  00C5DE  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  5609  00C5E2  0012               	return		;funcret
  5610  00C5E4                     __end_of_verifyKeypress:
  5611                           	opt stack 0
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           postdec1	equ	0xFE5
  5621                           plusw1	equ	0xFE3
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           plusw2	equ	0xFDB
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _displayLogs *****************
  5632 ;; Defined at:
  5633 ;;		line 910 in file "standbyMode.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  logNumber       2   40[COMRAM] unsigned int 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  n               2   83[COMRAM] unsigned int 
  5638 ;;  drawerNumber    2   81[COMRAM] unsigned int 
  5639 ;;  markedDrawer    2   79[COMRAM] unsigned int 
  5640 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  5641 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  5642 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  5643 ;;  i               2   71[COMRAM] unsigned int 
  5644 ;;  dietType        2   69[COMRAM] unsigned int 
  5645 ;;  operationTim    2   67[COMRAM] unsigned int 
  5646 ;;  seconds         2   64[COMRAM] unsigned int 
  5647 ;;  minutes         2   62[COMRAM] unsigned int 
  5648 ;;  longPieces      2   60[COMRAM] unsigned int 
  5649 ;;  flatPieces      2   58[COMRAM] unsigned int 
  5650 ;;  roundPieces     2   56[COMRAM] unsigned int 
  5651 ;;  day             2   54[COMRAM] unsigned int 
  5652 ;;  month           2   52[COMRAM] unsigned int 
  5653 ;;  year            2   50[COMRAM] unsigned int 
  5654 ;;  lng             2   48[COMRAM] unsigned int 
  5655 ;;  flat            2   46[COMRAM] unsigned int 
  5656 ;;  round           2   44[COMRAM] unsigned int 
  5657 ;;  keypress3       1   66[COMRAM] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  2   40[COMRAM] unsigned int 
  5660 ;; Registers used:
  5661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Locals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;Total ram usage:       45 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    3
  5674 ;; This function calls:
  5675 ;;		___lwdiv
  5676 ;;		___lwmod
  5677 ;;		___wmul
  5678 ;;		_lcdInst
  5679 ;;		_printf
  5680 ;;		_readEEPROM
  5681 ;; This function is called by:
  5682 ;;		_viewLogs
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text6
  5687  00E000                     __ptext6:
  5688                           	opt stack 0
  5689  00E000                     _displayLogs:
  5690                           	opt stack 25
  5691                           
  5692                           ;standbyMode.c: 911: unsigned int n = (logNumber-1)*51;
  5693                           
  5694                           ;incstack = 0
  5695  00E000  0EFF               	movlw	255
  5696  00E002  2429               	addwf	displayLogs@logNumber,w,c
  5697  00E004  6E01               	movwf	___wmul@multiplier,c
  5698  00E006  0EFF               	movlw	255
  5699  00E008  202A               	addwfc	displayLogs@logNumber+1,w,c
  5700  00E00A  6E02               	movwf	___wmul@multiplier+1,c
  5701  00E00C  0E00               	movlw	0
  5702  00E00E  6E04               	movwf	___wmul@multiplicand+1,c
  5703  00E010  0E33               	movlw	51
  5704  00E012  6E03               	movwf	___wmul@multiplicand,c
  5705  00E014  EC1E  F062         	call	___wmul	;wreg free
  5706  00E018  C001  F054         	movff	?___wmul,displayLogs@n
  5707  00E01C  C002  F055         	movff	?___wmul+1,displayLogs@n+1
  5708                           
  5709                           ;standbyMode.c: 912: unsigned int year = readEEPROM(n);
  5710  00E020  5054               	movf	displayLogs@n,w,c
  5711  00E022  ECD6  F061         	call	_readEEPROM
  5712  00E026  6E2B               	movwf	??_displayLogs& (0+255),c
  5713  00E028  502B               	movf	??_displayLogs,w,c
  5714  00E02A  6E33               	movwf	displayLogs@year,c
  5715  00E02C  6A34               	clrf	displayLogs@year+1,c
  5716                           
  5717                           ;standbyMode.c: 913: unsigned int month = readEEPROM(1+n);
  5718  00E02E  2854               	incf	displayLogs@n,w,c
  5719  00E030  ECD6  F061         	call	_readEEPROM
  5720  00E034  6E2B               	movwf	??_displayLogs& (0+255),c
  5721  00E036  502B               	movf	??_displayLogs,w,c
  5722  00E038  6E35               	movwf	displayLogs@month,c
  5723  00E03A  6A36               	clrf	displayLogs@month+1,c
  5724                           
  5725                           ;standbyMode.c: 914: unsigned int day = readEEPROM(2+n);
  5726  00E03C  5054               	movf	displayLogs@n,w,c
  5727  00E03E  0F02               	addlw	2
  5728  00E040  ECD6  F061         	call	_readEEPROM
  5729  00E044  6E2B               	movwf	??_displayLogs& (0+255),c
  5730  00E046  502B               	movf	??_displayLogs,w,c
  5731  00E048  6E37               	movwf	displayLogs@day,c
  5732  00E04A  6A38               	clrf	displayLogs@day+1,c
  5733                           
  5734                           ;standbyMode.c: 915: unsigned int operationTime = readEEPROM(3+n);
  5735  00E04C  5054               	movf	displayLogs@n,w,c
  5736  00E04E  0F03               	addlw	3
  5737  00E050  ECD6  F061         	call	_readEEPROM
  5738  00E054  6E2B               	movwf	??_displayLogs& (0+255),c
  5739  00E056  502B               	movf	??_displayLogs,w,c
  5740  00E058  6E44               	movwf	displayLogs@operationTime,c
  5741  00E05A  6A45               	clrf	displayLogs@operationTime+1,c
  5742                           
  5743                           ;standbyMode.c: 916: unsigned int roundPieces = readEEPROM(4+n);
  5744  00E05C  5054               	movf	displayLogs@n,w,c
  5745  00E05E  0F04               	addlw	4
  5746  00E060  ECD6  F061         	call	_readEEPROM
  5747  00E064  6E2B               	movwf	??_displayLogs& (0+255),c
  5748  00E066  502B               	movf	??_displayLogs,w,c
  5749  00E068  6E39               	movwf	displayLogs@roundPieces,c
  5750  00E06A  6A3A               	clrf	displayLogs@roundPieces+1,c
  5751                           
  5752                           ;standbyMode.c: 917: unsigned int flatPieces = readEEPROM(5+n);
  5753  00E06C  5054               	movf	displayLogs@n,w,c
  5754  00E06E  0F05               	addlw	5
  5755  00E070  ECD6  F061         	call	_readEEPROM
  5756  00E074  6E2B               	movwf	??_displayLogs& (0+255),c
  5757  00E076  502B               	movf	??_displayLogs,w,c
  5758  00E078  6E3B               	movwf	displayLogs@flatPieces,c
  5759  00E07A  6A3C               	clrf	displayLogs@flatPieces+1,c
  5760                           
  5761                           ;standbyMode.c: 918: unsigned int longPieces = readEEPROM(6+n);
  5762  00E07C  5054               	movf	displayLogs@n,w,c
  5763  00E07E  0F06               	addlw	6
  5764  00E080  ECD6  F061         	call	_readEEPROM
  5765  00E084  6E2B               	movwf	??_displayLogs& (0+255),c
  5766  00E086  502B               	movf	??_displayLogs,w,c
  5767  00E088  6E3D               	movwf	displayLogs@longPieces,c
  5768  00E08A  6A3E               	clrf	displayLogs@longPieces+1,c
  5769                           
  5770                           ;standbyMode.c: 919: unsigned int markedDrawer1 = readEEPROM(7+n);
  5771  00E08C  5054               	movf	displayLogs@n,w,c
  5772  00E08E  0F07               	addlw	7
  5773  00E090  ECD6  F061         	call	_readEEPROM
  5774  00E094  6E2B               	movwf	??_displayLogs& (0+255),c
  5775  00E096  502B               	movf	??_displayLogs,w,c
  5776  00E098  6E4A               	movwf	displayLogs@markedDrawer1,c
  5777  00E09A  6A4B               	clrf	displayLogs@markedDrawer1+1,c
  5778                           
  5779                           ;standbyMode.c: 920: unsigned int markedDrawer2 = readEEPROM(8+n);
  5780  00E09C  5054               	movf	displayLogs@n,w,c
  5781  00E09E  0F08               	addlw	8
  5782  00E0A0  ECD6  F061         	call	_readEEPROM
  5783  00E0A4  6E2B               	movwf	??_displayLogs& (0+255),c
  5784  00E0A6  502B               	movf	??_displayLogs,w,c
  5785  00E0A8  6E4C               	movwf	displayLogs@markedDrawer2,c
  5786  00E0AA  6A4D               	clrf	displayLogs@markedDrawer2+1,c
  5787                           
  5788                           ;standbyMode.c: 921: unsigned int markedDrawer3 = readEEPROM(9+n);
  5789  00E0AC  5054               	movf	displayLogs@n,w,c
  5790  00E0AE  0F09               	addlw	9
  5791  00E0B0  ECD6  F061         	call	_readEEPROM
  5792  00E0B4  6E2B               	movwf	??_displayLogs& (0+255),c
  5793  00E0B6  502B               	movf	??_displayLogs,w,c
  5794  00E0B8  6E4E               	movwf	displayLogs@markedDrawer3,c
  5795  00E0BA  6A4F               	clrf	displayLogs@markedDrawer3+1,c
  5796                           
  5797                           ;standbyMode.c: 922: unsigned int markedDrawer4 = readEEPROM(10+n);
  5798  00E0BC  5054               	movf	displayLogs@n,w,c
  5799  00E0BE  0F0A               	addlw	10
  5800  00E0C0  ECD6  F061         	call	_readEEPROM
  5801  00E0C4  6E2B               	movwf	??_displayLogs& (0+255),c
  5802  00E0C6  502B               	movf	??_displayLogs,w,c
  5803  00E0C8  6E50               	movwf	displayLogs@markedDrawer4,c
  5804  00E0CA  6A51               	clrf	displayLogs@markedDrawer4+1,c
  5805                           
  5806                           ;standbyMode.c: 923: unsigned int drawerNumber = readEEPROM(11+n);
  5807  00E0CC  5054               	movf	displayLogs@n,w,c
  5808  00E0CE  0F0B               	addlw	11
  5809  00E0D0  ECD6  F061         	call	_readEEPROM
  5810  00E0D4  6E2B               	movwf	??_displayLogs& (0+255),c
  5811  00E0D6  502B               	movf	??_displayLogs,w,c
  5812  00E0D8  6E52               	movwf	displayLogs@drawerNumber,c
  5813  00E0DA  6A53               	clrf	displayLogs@drawerNumber+1,c
  5814                           
  5815                           ;standbyMode.c: 924: unsigned int dietType = readEEPROM(12+n);
  5816  00E0DC  5054               	movf	displayLogs@n,w,c
  5817  00E0DE  0F0C               	addlw	12
  5818  00E0E0  ECD6  F061         	call	_readEEPROM
  5819  00E0E4  6E2B               	movwf	??_displayLogs& (0+255),c
  5820  00E0E6  502B               	movf	??_displayLogs,w,c
  5821  00E0E8  6E46               	movwf	displayLogs@dietType,c
  5822  00E0EA  6A47               	clrf	displayLogs@dietType+1,c
  5823                           
  5824                           ;standbyMode.c: 925: unsigned int round = readEEPROM(13+n);
  5825  00E0EC  5054               	movf	displayLogs@n,w,c
  5826  00E0EE  0F0D               	addlw	13
  5827  00E0F0  ECD6  F061         	call	_readEEPROM
  5828  00E0F4  6E2B               	movwf	??_displayLogs& (0+255),c
  5829  00E0F6  502B               	movf	??_displayLogs,w,c
  5830  00E0F8  6E2D               	movwf	displayLogs@round,c
  5831  00E0FA  6A2E               	clrf	displayLogs@round+1,c
  5832                           
  5833                           ;standbyMode.c: 926: unsigned int flat = readEEPROM(14+n);
  5834  00E0FC  5054               	movf	displayLogs@n,w,c
  5835  00E0FE  0F0E               	addlw	14
  5836  00E100  ECD6  F061         	call	_readEEPROM
  5837  00E104  6E2B               	movwf	??_displayLogs& (0+255),c
  5838  00E106  502B               	movf	??_displayLogs,w,c
  5839  00E108  6E2F               	movwf	displayLogs@flat,c
  5840  00E10A  6A30               	clrf	displayLogs@flat+1,c
  5841                           
  5842                           ;standbyMode.c: 927: unsigned int lng = readEEPROM(15+n);
  5843  00E10C  5054               	movf	displayLogs@n,w,c
  5844  00E10E  0F0F               	addlw	15
  5845  00E110  ECD6  F061         	call	_readEEPROM
  5846  00E114  6E2B               	movwf	??_displayLogs& (0+255),c
  5847  00E116  502B               	movf	??_displayLogs,w,c
  5848  00E118  6E31               	movwf	displayLogs@lng,c
  5849  00E11A  6A32               	clrf	displayLogs@lng+1,c
  5850                           
  5851                           ;standbyMode.c: 928: unsigned int i = 0;
  5852  00E11C  0E00               	movlw	0
  5853  00E11E  6E49               	movwf	displayLogs@i+1,c
  5854  00E120  0E00               	movlw	0
  5855  00E122  6E48               	movwf	displayLogs@i,c
  5856                           
  5857                           ;standbyMode.c: 930: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5858  00E124  0E01               	movlw	1
  5859  00E126  ECC2  F061         	call	_lcdInst
  5860  00E12A  0EC3               	movlw	195
  5861  00E12C  6E2B               	movwf	??_displayLogs& (0+255),c
  5862  00E12E  0ECD               	movlw	205
  5863  00E130                     u8717:
  5864  00E130  2EE8               	decfsz	wreg,f,c
  5865  00E132  D7FE               	bra	u8717
  5866  00E134  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  5867  00E136  D7FC               	bra	u8717
  5868  00E138  F000               	nop	
  5869                           
  5870                           ;standbyMode.c: 931: printf("Date:");
  5871  00E13A  0ECD               	movlw	low STR_33
  5872  00E13C  6E0D               	movwf	printf@f,c
  5873  00E13E  0EFF               	movlw	high STR_33
  5874  00E140  6E0E               	movwf	printf@f+1,c
  5875  00E142  EC6E  F06B         	call	_printf	;wreg free
  5876                           
  5877                           ;standbyMode.c: 932: lcdInst(0xC0);;
  5878  00E146  0EC0               	movlw	192
  5879  00E148  ECC2  F061         	call	_lcdInst
  5880                           
  5881                           ;standbyMode.c: 933: printf("%02i/%02i/%02i", year, month, day);
  5882  00E14C  0E95               	movlw	low STR_34
  5883  00E14E  6E0D               	movwf	printf@f,c
  5884  00E150  0EFE               	movlw	high STR_34
  5885  00E152  6E0E               	movwf	printf@f+1,c
  5886  00E154  C033  F00F         	movff	displayLogs@year,?_printf+2
  5887  00E158  C034  F010         	movff	displayLogs@year+1,?_printf+3
  5888  00E15C  C035  F011         	movff	displayLogs@month,?_printf+4
  5889  00E160  C036  F012         	movff	displayLogs@month+1,?_printf+5
  5890  00E164  C037  F013         	movff	displayLogs@day,?_printf+6
  5891  00E168  C038  F014         	movff	displayLogs@day+1,?_printf+7
  5892  00E16C  EC6E  F06B         	call	_printf	;wreg free
  5893                           
  5894                           ;standbyMode.c: 934: _delay((unsigned long)((500)*(40000000/4000.0)));
  5895  00E170  0E1A               	movlw	26
  5896  00E172  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  5897  00E174  0E5E               	movlw	94
  5898  00E176  6E2B               	movwf	??_displayLogs& (0+255),c
  5899  00E178  0E6E               	movlw	110
  5900  00E17A                     u8727:
  5901  00E17A  2EE8               	decfsz	wreg,f,c
  5902  00E17C  D7FE               	bra	u8727
  5903  00E17E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  5904  00E180  D7FC               	bra	u8727
  5905  00E182  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5906  00E184  D7FA               	bra	u8727
  5907  00E186  D000               	nop2	
  5908  00E188                     
  5909                           ;standbyMode.c: 936: continue;
  5910  00E188  A281               	btfss	3969,1,c	;volatile
  5911  00E18A  D7FE               	goto	l452
  5912                           
  5913                           ;standbyMode.c: 937: }
  5914                           ;standbyMode.c: 939: unsigned int minutes = operationTime/60;
  5915  00E18C  C044  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  5916  00E190  C045  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  5917  00E194  0E00               	movlw	0
  5918  00E196  6E04               	movwf	___lwdiv@divisor+1,c
  5919  00E198  0E3C               	movlw	60
  5920  00E19A  6E03               	movwf	___lwdiv@divisor,c
  5921  00E19C  ECA0  F062         	call	___lwdiv	;wreg free
  5922  00E1A0  C001  F03F         	movff	?___lwdiv,displayLogs@minutes
  5923  00E1A4  C002  F040         	movff	?___lwdiv+1,displayLogs@minutes+1
  5924                           
  5925                           ;standbyMode.c: 940: unsigned int seconds = operationTime%60;
  5926  00E1A8  C044  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  5927  00E1AC  C045  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  5928  00E1B0  0E00               	movlw	0
  5929  00E1B2  6E0B               	movwf	___lwmod@divisor+1,c
  5930  00E1B4  0E3C               	movlw	60
  5931  00E1B6  6E0A               	movwf	___lwmod@divisor,c
  5932  00E1B8  EC59  F062         	call	___lwmod	;wreg free
  5933  00E1BC  C008  F041         	movff	?___lwmod,displayLogs@seconds
  5934  00E1C0  C009  F042         	movff	?___lwmod+1,displayLogs@seconds+1
  5935                           
  5936                           ;standbyMode.c: 941: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5937  00E1C4  0E01               	movlw	1
  5938  00E1C6  ECC2  F061         	call	_lcdInst
  5939  00E1CA  0EC3               	movlw	195
  5940  00E1CC  6E2B               	movwf	??_displayLogs& (0+255),c
  5941  00E1CE  0ECD               	movlw	205
  5942  00E1D0                     u8737:
  5943  00E1D0  2EE8               	decfsz	wreg,f,c
  5944  00E1D2  D7FE               	bra	u8737
  5945  00E1D4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  5946  00E1D6  D7FC               	bra	u8737
  5947  00E1D8  F000               	nop	
  5948                           
  5949                           ;standbyMode.c: 942: printf("Operation time:");
  5950  00E1DA  0EF9               	movlw	low STR_35
  5951  00E1DC  6E0D               	movwf	printf@f,c
  5952  00E1DE  0EFD               	movlw	high STR_35
  5953  00E1E0  6E0E               	movwf	printf@f+1,c
  5954  00E1E2  EC6E  F06B         	call	_printf	;wreg free
  5955                           
  5956                           ;standbyMode.c: 943: lcdInst(0xC0);;
  5957  00E1E6  0EC0               	movlw	192
  5958  00E1E8  ECC2  F061         	call	_lcdInst
  5959                           
  5960                           ;standbyMode.c: 944: printf("%i:%02i", minutes, seconds);
  5961  00E1EC  0EA7               	movlw	low STR_36
  5962  00E1EE  6E0D               	movwf	printf@f,c
  5963  00E1F0  0EFF               	movlw	high STR_36
  5964  00E1F2  6E0E               	movwf	printf@f+1,c
  5965  00E1F4  C03F  F00F         	movff	displayLogs@minutes,?_printf+2
  5966  00E1F8  C040  F010         	movff	displayLogs@minutes+1,?_printf+3
  5967  00E1FC  C041  F011         	movff	displayLogs@seconds,?_printf+4
  5968  00E200  C042  F012         	movff	displayLogs@seconds+1,?_printf+5
  5969  00E204  EC6E  F06B         	call	_printf	;wreg free
  5970                           
  5971                           ;standbyMode.c: 945: _delay((unsigned long)((500)*(40000000/4000.0)));
  5972  00E208  0E1A               	movlw	26
  5973  00E20A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  5974  00E20C  0E5E               	movlw	94
  5975  00E20E  6E2B               	movwf	??_displayLogs& (0+255),c
  5976  00E210  0E6E               	movlw	110
  5977  00E212                     u8747:
  5978  00E212  2EE8               	decfsz	wreg,f,c
  5979  00E214  D7FE               	bra	u8747
  5980  00E216  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  5981  00E218  D7FC               	bra	u8747
  5982  00E21A  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5983  00E21C  D7FA               	bra	u8747
  5984  00E21E  D000               	nop2	
  5985  00E220                     
  5986                           ;standbyMode.c: 948: continue;
  5987  00E220  A281               	btfss	3969,1,c	;volatile
  5988  00E222  D7FE               	goto	l455
  5989                           
  5990                           ;standbyMode.c: 949: }
  5991                           ;standbyMode.c: 951: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5992  00E224  0E01               	movlw	1
  5993  00E226  ECC2  F061         	call	_lcdInst
  5994  00E22A  0EC3               	movlw	195
  5995  00E22C  6E2B               	movwf	??_displayLogs& (0+255),c
  5996  00E22E  0ECD               	movlw	205
  5997  00E230                     u8757:
  5998  00E230  2EE8               	decfsz	wreg,f,c
  5999  00E232  D7FE               	bra	u8757
  6000  00E234  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6001  00E236  D7FC               	bra	u8757
  6002  00E238  F000               	nop	
  6003                           
  6004                           ;standbyMode.c: 952: printf("Marked drawers:");
  6005  00E23A  0E09               	movlw	low STR_37
  6006  00E23C  6E0D               	movwf	printf@f,c
  6007  00E23E  0EFE               	movlw	high STR_37
  6008  00E240  6E0E               	movwf	printf@f+1,c
  6009  00E242  EC6E  F06B         	call	_printf	;wreg free
  6010                           
  6011                           ;standbyMode.c: 953: lcdInst(0xC0);;
  6012  00E246  0EC0               	movlw	192
  6013  00E248  ECC2  F061         	call	_lcdInst
  6014                           
  6015                           ;standbyMode.c: 955: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  6016  00E24C  5050               	movf	displayLogs@markedDrawer4,w,c
  6017  00E24E  1051               	iorwf	displayLogs@markedDrawer4+1,w,c
  6018  00E250  A4D8               	btfss	status,2,c
  6019  00E252  D01E               	goto	l457
  6020  00E254  504E               	movf	displayLogs@markedDrawer3,w,c
  6021  00E256  104F               	iorwf	displayLogs@markedDrawer3+1,w,c
  6022  00E258  A4D8               	btfss	status,2,c
  6023  00E25A  D01A               	goto	l457
  6024  00E25C  504C               	movf	displayLogs@markedDrawer2,w,c
  6025  00E25E  104D               	iorwf	displayLogs@markedDrawer2+1,w,c
  6026  00E260  A4D8               	btfss	status,2,c
  6027  00E262  D016               	goto	l457
  6028                           
  6029                           ;standbyMode.c: 956: printf("%i", markedDrawer1);
  6030  00E264  0E92               	movlw	low (STR_41+12)
  6031  00E266  6E0D               	movwf	printf@f,c
  6032  00E268  0EFE               	movlw	high (STR_41+12)
  6033  00E26A  6E0E               	movwf	printf@f+1,c
  6034  00E26C  C04A  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6035  00E270  C04B  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6036  00E274  EC6E  F06B         	call	_printf	;wreg free
  6037                           
  6038                           ;standbyMode.c: 957: _delay((unsigned long)((500)*(40000000/4000.0)));
  6039  00E278  0E1A               	movlw	26
  6040  00E27A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6041  00E27C  0E5E               	movlw	94
  6042  00E27E  6E2B               	movwf	??_displayLogs& (0+255),c
  6043  00E280  0E6E               	movlw	110
  6044  00E282                     u8767:
  6045  00E282  2EE8               	decfsz	wreg,f,c
  6046  00E284  D7FE               	bra	u8767
  6047  00E286  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6048  00E288  D7FC               	bra	u8767
  6049  00E28A  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6050  00E28C  D7FA               	bra	u8767
  6051  00E28E  D065               	goto	L18
  6052  00E290                     l457:
  6053                           
  6054                           ;standbyMode.c: 960: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6055  00E290  5050               	movf	displayLogs@markedDrawer4,w,c
  6056  00E292  1051               	iorwf	displayLogs@markedDrawer4+1,w,c
  6057  00E294  A4D8               	btfss	status,2,c
  6058  00E296  D01E               	goto	l459
  6059  00E298  504E               	movf	displayLogs@markedDrawer3,w,c
  6060  00E29A  104F               	iorwf	displayLogs@markedDrawer3+1,w,c
  6061  00E29C  A4D8               	btfss	status,2,c
  6062  00E29E  D01A               	goto	l459
  6063                           
  6064                           ;standbyMode.c: 961: printf("%i, %i", markedDrawer1, markedDrawer2);
  6065  00E2A0  0E8E               	movlw	low (STR_41+8)
  6066  00E2A2  6E0D               	movwf	printf@f,c
  6067  00E2A4  0EFE               	movlw	high (STR_41+8)
  6068  00E2A6  6E0E               	movwf	printf@f+1,c
  6069  00E2A8  C04A  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6070  00E2AC  C04B  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6071  00E2B0  C04C  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6072  00E2B4  C04D  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6073  00E2B8  EC6E  F06B         	call	_printf	;wreg free
  6074                           
  6075                           ;standbyMode.c: 962: _delay((unsigned long)((500)*(40000000/4000.0)));
  6076  00E2BC  0E1A               	movlw	26
  6077  00E2BE  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6078  00E2C0  0E5E               	movlw	94
  6079  00E2C2  6E2B               	movwf	??_displayLogs& (0+255),c
  6080  00E2C4  0E6E               	movlw	110
  6081  00E2C6                     u8777:
  6082  00E2C6  2EE8               	decfsz	wreg,f,c
  6083  00E2C8  D7FE               	bra	u8777
  6084  00E2CA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6085  00E2CC  D7FC               	bra	u8777
  6086  00E2CE  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6087  00E2D0  D7FA               	bra	u8777
  6088  00E2D2  D043               	goto	L18
  6089  00E2D4                     l459:
  6090                           
  6091                           ;standbyMode.c: 965: else if (markedDrawer4 == 0){
  6092  00E2D4  5050               	movf	displayLogs@markedDrawer4,w,c
  6093  00E2D6  1051               	iorwf	displayLogs@markedDrawer4+1,w,c
  6094  00E2D8  A4D8               	btfss	status,2,c
  6095  00E2DA  D01E               	goto	l461
  6096                           
  6097                           ;standbyMode.c: 966: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6098  00E2DC  0E8A               	movlw	low (STR_41+4)
  6099  00E2DE  6E0D               	movwf	printf@f,c
  6100  00E2E0  0EFE               	movlw	high (STR_41+4)
  6101  00E2E2  6E0E               	movwf	printf@f+1,c
  6102  00E2E4  C04A  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6103  00E2E8  C04B  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6104  00E2EC  C04C  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6105  00E2F0  C04D  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6106  00E2F4  C04E  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6107  00E2F8  C04F  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6108  00E2FC  EC6E  F06B         	call	_printf	;wreg free
  6109                           
  6110                           ;standbyMode.c: 967: _delay((unsigned long)((500)*(40000000/4000.0)));
  6111  00E300  0E1A               	movlw	26
  6112  00E302  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6113  00E304  0E5E               	movlw	94
  6114  00E306  6E2B               	movwf	??_displayLogs& (0+255),c
  6115  00E308  0E6E               	movlw	110
  6116  00E30A                     u8787:
  6117  00E30A  2EE8               	decfsz	wreg,f,c
  6118  00E30C  D7FE               	bra	u8787
  6119  00E30E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6120  00E310  D7FC               	bra	u8787
  6121  00E312  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6122  00E314  D7FA               	bra	u8787
  6123  00E316  D021               	goto	L18
  6124  00E318                     l461:
  6125                           
  6126                           ;standbyMode.c: 970: else {
  6127                           ;standbyMode.c: 971: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  6128  00E318  0E86               	movlw	low STR_41
  6129  00E31A  6E0D               	movwf	printf@f,c
  6130  00E31C  0EFE               	movlw	high STR_41
  6131  00E31E  6E0E               	movwf	printf@f+1,c
  6132  00E320  C04A  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6133  00E324  C04B  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6134  00E328  C04C  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6135  00E32C  C04D  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6136  00E330  C04E  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6137  00E334  C04F  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6138  00E338  C050  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6139  00E33C  C051  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6140  00E340  EC6E  F06B         	call	_printf	;wreg free
  6141                           
  6142                           ;standbyMode.c: 972: _delay((unsigned long)((500)*(40000000/4000.0)));
  6143  00E344  0E1A               	movlw	26
  6144  00E346  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6145  00E348  0E5E               	movlw	94
  6146  00E34A  6E2B               	movwf	??_displayLogs& (0+255),c
  6147  00E34C  0E6E               	movlw	110
  6148  00E34E                     u8797:
  6149  00E34E  2EE8               	decfsz	wreg,f,c
  6150  00E350  D7FE               	bra	u8797
  6151  00E352  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6152  00E354  D7FC               	bra	u8797
  6153  00E356  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6154  00E358  D7FA               	bra	u8797
  6155  00E35A                     L18:
  6156  00E35A  D000               	nop2	
  6157  00E35C                     
  6158                           ;standbyMode.c: 976: continue;
  6159                           
  6160                           ;standbyMode.c: 973: }
  6161                           ;standbyMode.c: 975: while(PORTBbits.RB1 == 0){
  6162  00E35C  A281               	btfss	3969,1,c	;volatile
  6163  00E35E  D7FE               	goto	l462
  6164                           
  6165                           ;standbyMode.c: 977: }
  6166                           ;standbyMode.c: 979: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6167  00E360  0E01               	movlw	1
  6168  00E362  ECC2  F061         	call	_lcdInst
  6169  00E366  0EC3               	movlw	195
  6170  00E368  6E2B               	movwf	??_displayLogs& (0+255),c
  6171  00E36A  0ECD               	movlw	205
  6172  00E36C                     u8807:
  6173  00E36C  2EE8               	decfsz	wreg,f,c
  6174  00E36E  D7FE               	bra	u8807
  6175  00E370  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6176  00E372  D7FC               	bra	u8807
  6177  00E374  F000               	nop	
  6178                           
  6179                           ;standbyMode.c: 980: printf("Remaining pieces:");
  6180  00E376  0E40               	movlw	low STR_42
  6181  00E378  6E0D               	movwf	printf@f,c
  6182  00E37A  0EFD               	movlw	high STR_42
  6183  00E37C  6E0E               	movwf	printf@f+1,c
  6184  00E37E  EC6E  F06B         	call	_printf	;wreg free
  6185                           
  6186                           ;standbyMode.c: 981: lcdInst(0xC0);;
  6187  00E382  0EC0               	movlw	192
  6188  00E384  ECC2  F061         	call	_lcdInst
  6189                           
  6190                           ;standbyMode.c: 982: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  6191  00E388  0E96               	movlw	low STR_43
  6192  00E38A  6E0D               	movwf	printf@f,c
  6193  00E38C  0EFD               	movlw	high STR_43
  6194  00E38E  6E0E               	movwf	printf@f+1,c
  6195  00E390  C039  F00F         	movff	displayLogs@roundPieces,?_printf+2
  6196  00E394  C03A  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  6197  00E398  C03B  F011         	movff	displayLogs@flatPieces,?_printf+4
  6198  00E39C  C03C  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  6199  00E3A0  C03D  F013         	movff	displayLogs@longPieces,?_printf+6
  6200  00E3A4  C03E  F014         	movff	displayLogs@longPieces+1,?_printf+7
  6201  00E3A8  EC6E  F06B         	call	_printf	;wreg free
  6202                           
  6203                           ;standbyMode.c: 983: _delay((unsigned long)((500)*(40000000/4000.0)));
  6204  00E3AC  0E1A               	movlw	26
  6205  00E3AE  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6206  00E3B0  0E5E               	movlw	94
  6207  00E3B2  6E2B               	movwf	??_displayLogs& (0+255),c
  6208  00E3B4  0E6E               	movlw	110
  6209  00E3B6                     u8817:
  6210  00E3B6  2EE8               	decfsz	wreg,f,c
  6211  00E3B8  D7FE               	bra	u8817
  6212  00E3BA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6213  00E3BC  D7FC               	bra	u8817
  6214  00E3BE  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6215  00E3C0  D7FA               	bra	u8817
  6216  00E3C2  D000               	nop2	
  6217  00E3C4                     
  6218                           ;standbyMode.c: 986: continue;
  6219  00E3C4  A281               	btfss	3969,1,c	;volatile
  6220  00E3C6  D7FE               	goto	l467
  6221                           
  6222                           ;standbyMode.c: 987: }
  6223                           ;standbyMode.c: 989: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6224  00E3C8  0E01               	movlw	1
  6225  00E3CA  ECC2  F061         	call	_lcdInst
  6226  00E3CE  0EC3               	movlw	195
  6227  00E3D0  6E2B               	movwf	??_displayLogs& (0+255),c
  6228  00E3D2  0ECD               	movlw	205
  6229  00E3D4                     u8827:
  6230  00E3D4  2EE8               	decfsz	wreg,f,c
  6231  00E3D6  D7FE               	bra	u8827
  6232  00E3D8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6233  00E3DA  D7FC               	bra	u8827
  6234  00E3DC  F000               	nop	
  6235                           
  6236                           ;standbyMode.c: 990: printf("Input Summary:");
  6237  00E3DE  0E68               	movlw	low STR_44
  6238  00E3E0  6E0D               	movwf	printf@f,c
  6239  00E3E2  0EFE               	movlw	high STR_44
  6240  00E3E4  6E0E               	movwf	printf@f+1,c
  6241  00E3E6  EC6E  F06B         	call	_printf	;wreg free
  6242                           
  6243                           ;standbyMode.c: 991: _delay((unsigned long)((500)*(40000000/4000.0)));
  6244  00E3EA  0E1A               	movlw	26
  6245  00E3EC  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6246  00E3EE  0E5E               	movlw	94
  6247  00E3F0  6E2B               	movwf	??_displayLogs& (0+255),c
  6248  00E3F2  0E6E               	movlw	110
  6249  00E3F4                     u8837:
  6250  00E3F4  2EE8               	decfsz	wreg,f,c
  6251  00E3F6  D7FE               	bra	u8837
  6252  00E3F8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6253  00E3FA  D7FC               	bra	u8837
  6254  00E3FC  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6255  00E3FE  D7FA               	bra	u8837
  6256  00E400  D000               	nop2	
  6257  00E402                     
  6258                           ;standbyMode.c: 994: continue;
  6259  00E402  A281               	btfss	3969,1,c	;volatile
  6260  00E404  D7FE               	goto	l470
  6261                           
  6262                           ;standbyMode.c: 995: }
  6263                           ;standbyMode.c: 997: for (i=0; i<4; i++){
  6264  00E406  0E00               	movlw	0
  6265  00E408  6E49               	movwf	displayLogs@i+1,c
  6266  00E40A  0E00               	movlw	0
  6267  00E40C  6E48               	movwf	displayLogs@i,c
  6268  00E40E  5049               	movf	displayLogs@i+1,w,c
  6269  00E410  E105               	bnz	u5800
  6270  00E412  0E04               	movlw	4
  6271  00E414  5C48               	subwf	displayLogs@i,w,c
  6272  00E416  B0D8               	btfsc	status,0,c
  6273  00E418  D0A3               	goto	u5830
  6274  00E41A  D001               	goto	l472
  6275  00E41C                     u5800:
  6276  00E41C  D0A1               	goto	u5830
  6277  00E41E                     l472:
  6278                           
  6279                           ;standbyMode.c: 998: n = (logNumber-1)*51 + 5*i;
  6280  00E41E  0EFF               	movlw	255
  6281  00E420  2429               	addwf	displayLogs@logNumber,w,c
  6282  00E422  6E01               	movwf	___wmul@multiplier,c
  6283  00E424  0EFF               	movlw	255
  6284  00E426  202A               	addwfc	displayLogs@logNumber+1,w,c
  6285  00E428  6E02               	movwf	___wmul@multiplier+1,c
  6286  00E42A  0E00               	movlw	0
  6287  00E42C  6E04               	movwf	___wmul@multiplicand+1,c
  6288  00E42E  0E33               	movlw	51
  6289  00E430  6E03               	movwf	___wmul@multiplicand,c
  6290  00E432  EC1E  F062         	call	___wmul	;wreg free
  6291  00E436  C001  F02B         	movff	?___wmul,??_displayLogs
  6292  00E43A  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  6293  00E43E  C048  F001         	movff	displayLogs@i,___wmul@multiplier
  6294  00E442  C049  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  6295  00E446  0E00               	movlw	0
  6296  00E448  6E04               	movwf	___wmul@multiplicand+1,c
  6297  00E44A  0E05               	movlw	5
  6298  00E44C  6E03               	movwf	___wmul@multiplicand,c
  6299  00E44E  EC1E  F062         	call	___wmul	;wreg free
  6300  00E452  5001               	movf	?___wmul,w,c
  6301  00E454  242B               	addwf	??_displayLogs,w,c
  6302  00E456  6E54               	movwf	displayLogs@n,c
  6303  00E458  5002               	movf	?___wmul+1,w,c
  6304  00E45A  202C               	addwfc	??_displayLogs+1,w,c
  6305  00E45C  6E55               	movwf	displayLogs@n+1,c
  6306                           
  6307                           ;standbyMode.c: 999: if (drawerNumber != 0){
  6308  00E45E  5052               	movf	displayLogs@drawerNumber,w,c
  6309  00E460  1053               	iorwf	displayLogs@drawerNumber+1,w,c
  6310  00E462  B4D8               	btfsc	status,2,c
  6311  00E464  D078               	goto	l475
  6312                           
  6313                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6314  00E466  0E01               	movlw	1
  6315  00E468  ECC2  F061         	call	_lcdInst
  6316  00E46C  0EC3               	movlw	195
  6317  00E46E  6E2B               	movwf	??_displayLogs& (0+255),c
  6318  00E470  0ECD               	movlw	205
  6319  00E472                     u8847:
  6320  00E472  2EE8               	decfsz	wreg,f,c
  6321  00E474  D7FE               	bra	u8847
  6322  00E476  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6323  00E478  D7FC               	bra	u8847
  6324  00E47A  F000               	nop	
  6325                           
  6326                           ;standbyMode.c: 1001: printf("Drawer %i: %s", drawerNumber, inputs[dietType]);
  6327  00E47C  0E09               	movlw	low STR_45
  6328  00E47E  6E0D               	movwf	printf@f,c
  6329  00E480  0EFF               	movlw	high STR_45
  6330  00E482  6E0E               	movwf	printf@f+1,c
  6331  00E484  C052  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  6332  00E488  C053  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  6333  00E48C  90D8               	bcf	status,0,c
  6334  00E48E  3446               	rlcf	displayLogs@dietType,w,c
  6335  00E490  6ED9               	movwf	fsr2l,c
  6336  00E492  3447               	rlcf	displayLogs@dietType+1,w,c
  6337  00E494  6EDA               	movwf	fsr2h,c
  6338  00E496  0E6C               	movlw	low _inputs
  6339  00E498  26D9               	addwf	fsr2l,f,c
  6340  00E49A  0E01               	movlw	high _inputs
  6341  00E49C  22DA               	addwfc	fsr2h,f,c
  6342  00E49E  CFDE F011          	movff	postinc2,?_printf+4
  6343  00E4A2  CFDD F012          	movff	postdec2,?_printf+5
  6344  00E4A6  EC6E  F06B         	call	_printf	;wreg free
  6345                           
  6346                           ;standbyMode.c: 1002: n += 5;
  6347  00E4AA  0E05               	movlw	5
  6348  00E4AC  2654               	addwf	displayLogs@n,f,c
  6349  00E4AE  0E00               	movlw	0
  6350  00E4B0  2255               	addwfc	displayLogs@n+1,f,c
  6351                           
  6352                           ;standbyMode.c: 1003: drawerNumber = readEEPROM(11+n);
  6353  00E4B2  5054               	movf	displayLogs@n,w,c
  6354  00E4B4  0F0B               	addlw	11
  6355  00E4B6  ECD6  F061         	call	_readEEPROM
  6356  00E4BA  6E2B               	movwf	??_displayLogs& (0+255),c
  6357  00E4BC  502B               	movf	??_displayLogs,w,c
  6358  00E4BE  6E52               	movwf	displayLogs@drawerNumber,c
  6359  00E4C0  6A53               	clrf	displayLogs@drawerNumber+1,c
  6360                           
  6361                           ;standbyMode.c: 1004: dietType = readEEPROM(12+n);
  6362  00E4C2  5054               	movf	displayLogs@n,w,c
  6363  00E4C4  0F0C               	addlw	12
  6364  00E4C6  ECD6  F061         	call	_readEEPROM
  6365  00E4CA  6E2B               	movwf	??_displayLogs& (0+255),c
  6366  00E4CC  502B               	movf	??_displayLogs,w,c
  6367  00E4CE  6E46               	movwf	displayLogs@dietType,c
  6368  00E4D0  6A47               	clrf	displayLogs@dietType+1,c
  6369                           
  6370                           ;standbyMode.c: 1005: round = readEEPROM(13+n);
  6371  00E4D2  5054               	movf	displayLogs@n,w,c
  6372  00E4D4  0F0D               	addlw	13
  6373  00E4D6  ECD6  F061         	call	_readEEPROM
  6374  00E4DA  6E2B               	movwf	??_displayLogs& (0+255),c
  6375  00E4DC  502B               	movf	??_displayLogs,w,c
  6376  00E4DE  6E2D               	movwf	displayLogs@round,c
  6377  00E4E0  6A2E               	clrf	displayLogs@round+1,c
  6378                           
  6379                           ;standbyMode.c: 1006: flat = readEEPROM(14+n);
  6380  00E4E2  5054               	movf	displayLogs@n,w,c
  6381  00E4E4  0F0E               	addlw	14
  6382  00E4E6  ECD6  F061         	call	_readEEPROM
  6383  00E4EA  6E2B               	movwf	??_displayLogs& (0+255),c
  6384  00E4EC  502B               	movf	??_displayLogs,w,c
  6385  00E4EE  6E2F               	movwf	displayLogs@flat,c
  6386  00E4F0  6A30               	clrf	displayLogs@flat+1,c
  6387                           
  6388                           ;standbyMode.c: 1007: lng = readEEPROM(15+n);
  6389  00E4F2  5054               	movf	displayLogs@n,w,c
  6390  00E4F4  0F0F               	addlw	15
  6391  00E4F6  ECD6  F061         	call	_readEEPROM
  6392  00E4FA  6E2B               	movwf	??_displayLogs& (0+255),c
  6393  00E4FC  502B               	movf	??_displayLogs,w,c
  6394  00E4FE  6E31               	movwf	displayLogs@lng,c
  6395  00E500  6A32               	clrf	displayLogs@lng+1,c
  6396                           
  6397                           ;standbyMode.c: 1008: if (drawerNumber != 0){
  6398  00E502  5052               	movf	displayLogs@drawerNumber,w,c
  6399  00E504  1053               	iorwf	displayLogs@drawerNumber+1,w,c
  6400  00E506  B4D8               	btfsc	status,2,c
  6401  00E508  D026               	goto	l475
  6402                           
  6403                           ;standbyMode.c: 1009: lcdInst(0xC0);;
  6404  00E50A  0EC0               	movlw	192
  6405  00E50C  ECC2  F061         	call	_lcdInst
  6406                           
  6407                           ;standbyMode.c: 1010: printf("Drawer %i: %s", drawerNumber, inputs[dietType]);
  6408  00E510  0E09               	movlw	low STR_45
  6409  00E512  6E0D               	movwf	printf@f,c
  6410  00E514  0EFF               	movlw	high STR_45
  6411  00E516  6E0E               	movwf	printf@f+1,c
  6412  00E518  C052  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  6413  00E51C  C053  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  6414  00E520  90D8               	bcf	status,0,c
  6415  00E522  3446               	rlcf	displayLogs@dietType,w,c
  6416  00E524  6ED9               	movwf	fsr2l,c
  6417  00E526  3447               	rlcf	displayLogs@dietType+1,w,c
  6418  00E528  6EDA               	movwf	fsr2h,c
  6419  00E52A  0E6C               	movlw	low _inputs
  6420  00E52C  26D9               	addwf	fsr2l,f,c
  6421  00E52E  0E01               	movlw	high _inputs
  6422  00E530  22DA               	addwfc	fsr2h,f,c
  6423  00E532  CFDE F011          	movff	postinc2,?_printf+4
  6424  00E536  CFDD F012          	movff	postdec2,?_printf+5
  6425  00E53A  EC6E  F06B         	call	_printf	;wreg free
  6426                           
  6427                           ;standbyMode.c: 1011: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6428  00E53E  0E66               	movlw	102
  6429  00E540  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6430  00E542  0E76               	movlw	118
  6431  00E544  6E2B               	movwf	??_displayLogs& (0+255),c
  6432  00E546  0EC1               	movlw	193
  6433  00E548                     u8857:
  6434  00E548  2EE8               	decfsz	wreg,f,c
  6435  00E54A  D7FE               	bra	u8857
  6436  00E54C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6437  00E54E  D7FC               	bra	u8857
  6438  00E550  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6439  00E552  D7FA               	bra	u8857
  6440  00E554  F000               	nop	
  6441  00E556                     l475:
  6442  00E556  4A48               	infsnz	displayLogs@i,f,c
  6443  00E558  2A49               	incf	displayLogs@i+1,f,c
  6444  00E55A  5049               	movf	displayLogs@i+1,w,c
  6445  00E55C  E101               	bnz	l5420
  6446  00E55E  D759               	goto	L19
  6447  00E560                     u5830:
  6448  00E560                     l5420:
  6449                           
  6450                           ;standbyMode.c: 1012: }
  6451                           ;standbyMode.c: 1013: }
  6452                           ;standbyMode.c: 1014: }
  6453                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6454  00E560  0E01               	movlw	1
  6455  00E562  ECC2  F061         	call	_lcdInst
  6456  00E566  0EC3               	movlw	195
  6457  00E568  6E2B               	movwf	??_displayLogs& (0+255),c
  6458  00E56A  0ECD               	movlw	205
  6459  00E56C                     u8867:
  6460  00E56C  2EE8               	decfsz	wreg,f,c
  6461  00E56E  D7FE               	bra	u8867
  6462  00E570  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6463  00E572  D7FC               	bra	u8867
  6464  00E574  F000               	nop	
  6465                           
  6466                           ;standbyMode.c: 1017: printf("Another log?");
  6467  00E576  0E31               	movlw	low STR_47
  6468  00E578  6E0D               	movwf	printf@f,c
  6469  00E57A  0EFF               	movlw	high STR_47
  6470  00E57C  6E0E               	movwf	printf@f+1,c
  6471  00E57E  EC6E  F06B         	call	_printf	;wreg free
  6472                           
  6473                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  6474  00E582  0EC0               	movlw	192
  6475  00E584  ECC2  F061         	call	_lcdInst
  6476                           
  6477                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  6478  00E588  0E49               	movlw	low STR_48
  6479  00E58A  6E0D               	movwf	printf@f,c
  6480  00E58C  0EFE               	movlw	high STR_48
  6481  00E58E  6E0E               	movwf	printf@f+1,c
  6482  00E590  EC6E  F06B         	call	_printf	;wreg free
  6483  00E594  A281               	btfss	3969,1,c	;volatile
  6484  00E596  D7FE               	goto	l477
  6485                           
  6486                           ;standbyMode.c: 1022: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  6487  00E598  3881               	swapf	3969,w,c	;volatile
  6488  00E59A  0B0F               	andlw	15
  6489  00E59C  0B0F               	andlw	15
  6490  00E59E  6E43               	movwf	displayLogs@keypress3,c
  6491  00E5A0  B281               	btfsc	3969,1,c	;volatile
  6492  00E5A2  D7FE               	goto	l480
  6493                           
  6494                           ;standbyMode.c: 1024: return keypress3;
  6495  00E5A4  C043  F029         	movff	displayLogs@keypress3,?_displayLogs
  6496  00E5A8  6A2A               	clrf	?_displayLogs+1,c
  6497  00E5AA  0012               	return		;funcret
  6498  00E5AC                     __end_of_displayLogs:
  6499                           	opt stack 0
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           postinc0	equ	0xFEE
  6507                           wreg	equ	0xFE8
  6508                           postdec1	equ	0xFE5
  6509                           plusw1	equ	0xFE3
  6510                           fsr1l	equ	0xFE1
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           plusw2	equ	0xFDB
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _shiftEEPROM *****************
  6520 ;; Defined at:
  6521 ;;		line 48 in file "EEPROMstorage.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  i               2    5[COMRAM] unsigned int 
  6526 ;;  temp            2    3[COMRAM] unsigned int 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2, status,0, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        5 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    1
  6543 ;; This function calls:
  6544 ;;		_readEEPROM
  6545 ;;		_writeEEPROM
  6546 ;; This function is called by:
  6547 ;;		_standbyMode
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text7
  6552  00C8AC                     __ptext7:
  6553                           	opt stack 0
  6554  00C8AC                     _shiftEEPROM:
  6555                           	opt stack 28
  6556                           
  6557                           ;EEPROMstorage.c: 49: unsigned int i = 0;
  6558                           
  6559                           ;incstack = 0
  6560  00C8AC  0E00               	movlw	0
  6561  00C8AE  6E07               	movwf	shiftEEPROM@i+1,c
  6562  00C8B0  0E00               	movlw	0
  6563  00C8B2  6E06               	movwf	shiftEEPROM@i,c
  6564                           
  6565                           ;EEPROMstorage.c: 50: unsigned int temp = 0;
  6566  00C8B4  0E00               	movlw	0
  6567  00C8B6  6E05               	movwf	shiftEEPROM@temp+1,c
  6568  00C8B8  0E00               	movlw	0
  6569  00C8BA  6E04               	movwf	shiftEEPROM@temp,c
  6570                           
  6571                           ;EEPROMstorage.c: 51: for (i=102; i<153; i++){
  6572  00C8BC  0E00               	movlw	0
  6573  00C8BE  6E07               	movwf	shiftEEPROM@i+1,c
  6574  00C8C0  0E66               	movlw	102
  6575  00C8C2  6E06               	movwf	shiftEEPROM@i,c
  6576  00C8C4                     l6516:
  6577  00C8C4  5007               	movf	shiftEEPROM@i+1,w,c
  6578  00C8C6  E114               	bnz	l6526
  6579  00C8C8  0E99               	movlw	153
  6580  00C8CA  5C06               	subwf	shiftEEPROM@i,w,c
  6581  00C8CC  B0D8               	btfsc	status,0,c
  6582  00C8CE  D010               	goto	u7400
  6583                           
  6584                           ;EEPROMstorage.c: 52: temp = readEEPROM(i);
  6585  00C8D0  5006               	movf	shiftEEPROM@i,w,c
  6586  00C8D2  ECD6  F061         	call	_readEEPROM
  6587  00C8D6  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6588  00C8D8  5003               	movf	??_shiftEEPROM,w,c
  6589  00C8DA  6E04               	movwf	shiftEEPROM@temp,c
  6590  00C8DC  6A05               	clrf	shiftEEPROM@temp+1,c
  6591                           
  6592                           ;EEPROMstorage.c: 53: writeEEPROM(i+51, temp);
  6593  00C8DE  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6594  00C8E2  5006               	movf	shiftEEPROM@i,w,c
  6595  00C8E4  0F33               	addlw	51
  6596  00C8E6  EC44  F062         	call	_writeEEPROM
  6597  00C8EA  4A06               	infsnz	shiftEEPROM@i,f,c
  6598  00C8EC  2A07               	incf	shiftEEPROM@i+1,f,c
  6599  00C8EE  D7EA               	goto	l6516
  6600  00C8F0                     u7400:
  6601  00C8F0                     l6526:
  6602                           
  6603                           ;EEPROMstorage.c: 54: }
  6604                           ;EEPROMstorage.c: 56: for (i=51; i<102; i++){
  6605  00C8F0  0E00               	movlw	0
  6606  00C8F2  6E07               	movwf	shiftEEPROM@i+1,c
  6607  00C8F4  0E33               	movlw	51
  6608  00C8F6  6E06               	movwf	shiftEEPROM@i,c
  6609  00C8F8                     l6528:
  6610  00C8F8  5007               	movf	shiftEEPROM@i+1,w,c
  6611  00C8FA  E114               	bnz	l6538
  6612  00C8FC  0E66               	movlw	102
  6613  00C8FE  5C06               	subwf	shiftEEPROM@i,w,c
  6614  00C900  B0D8               	btfsc	status,0,c
  6615  00C902  D010               	goto	u7420
  6616                           
  6617                           ;EEPROMstorage.c: 57: temp = readEEPROM(i);
  6618  00C904  5006               	movf	shiftEEPROM@i,w,c
  6619  00C906  ECD6  F061         	call	_readEEPROM
  6620  00C90A  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6621  00C90C  5003               	movf	??_shiftEEPROM,w,c
  6622  00C90E  6E04               	movwf	shiftEEPROM@temp,c
  6623  00C910  6A05               	clrf	shiftEEPROM@temp+1,c
  6624                           
  6625                           ;EEPROMstorage.c: 58: writeEEPROM(i+51, temp);
  6626  00C912  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6627  00C916  5006               	movf	shiftEEPROM@i,w,c
  6628  00C918  0F33               	addlw	51
  6629  00C91A  EC44  F062         	call	_writeEEPROM
  6630  00C91E  4A06               	infsnz	shiftEEPROM@i,f,c
  6631  00C920  2A07               	incf	shiftEEPROM@i+1,f,c
  6632  00C922  D7EA               	goto	l6528
  6633  00C924                     u7420:
  6634  00C924                     l6538:
  6635                           
  6636                           ;EEPROMstorage.c: 59: }
  6637                           ;EEPROMstorage.c: 61: for (i=0; i<51; i++){
  6638  00C924  0E00               	movlw	0
  6639  00C926  6E07               	movwf	shiftEEPROM@i+1,c
  6640  00C928  0E00               	movlw	0
  6641  00C92A  6E06               	movwf	shiftEEPROM@i,c
  6642  00C92C                     l6540:
  6643  00C92C  5007               	movf	shiftEEPROM@i+1,w,c
  6644  00C92E  E114               	bnz	l807
  6645  00C930  0E33               	movlw	51
  6646  00C932  5C06               	subwf	shiftEEPROM@i,w,c
  6647  00C934  B0D8               	btfsc	status,0,c
  6648  00C936  0012               	return	
  6649                           
  6650                           ;EEPROMstorage.c: 62: temp = readEEPROM(i);
  6651  00C938  5006               	movf	shiftEEPROM@i,w,c
  6652  00C93A  ECD6  F061         	call	_readEEPROM
  6653  00C93E  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6654  00C940  5003               	movf	??_shiftEEPROM,w,c
  6655  00C942  6E04               	movwf	shiftEEPROM@temp,c
  6656  00C944  6A05               	clrf	shiftEEPROM@temp+1,c
  6657                           
  6658                           ;EEPROMstorage.c: 63: writeEEPROM(i+51, temp);
  6659  00C946  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6660  00C94A  5006               	movf	shiftEEPROM@i,w,c
  6661  00C94C  0F33               	addlw	51
  6662  00C94E  EC44  F062         	call	_writeEEPROM
  6663  00C952  4A06               	infsnz	shiftEEPROM@i,f,c
  6664  00C954  2A07               	incf	shiftEEPROM@i+1,f,c
  6665  00C956  D7EA               	goto	l6540
  6666  00C958                     l807:
  6667  00C958  0012               	return		;funcret
  6668  00C95A                     __end_of_shiftEEPROM:
  6669                           	opt stack 0
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           postinc0	equ	0xFEE
  6677                           wreg	equ	0xFE8
  6678                           postdec1	equ	0xFE5
  6679                           plusw1	equ	0xFE3
  6680                           fsr1l	equ	0xFE1
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           plusw2	equ	0xFDB
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _readEEPROM *****************
  6690 ;; Defined at:
  6691 ;;		line 29 in file "EEPROMstorage.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  address         1    wreg     unsigned char 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  address         1    0[COMRAM] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      unsigned char 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;Total ram usage:        1 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_viewLogs
  6715 ;;		_displayLogs
  6716 ;;		_standbyMode
  6717 ;;		_shiftEEPROM
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text8
  6722  00C3AC                     __ptext8:
  6723                           	opt stack 0
  6724  00C3AC                     _readEEPROM:
  6725                           	opt stack 28
  6726                           
  6727                           ;incstack = 0
  6728                           ;readEEPROM@address stored from wreg
  6729  00C3AC  6E01               	movwf	readEEPROM@address,c
  6730  00C3AE                     
  6731                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  6732  00C3AE  B2A6               	btfsc	4006,1,c	;volsfr
  6733  00C3B0  D7FE               	goto	l4912
  6734                           
  6735                           ;EEPROMstorage.c: 32: EEADR = address;
  6736  00C3B2  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  6737                           
  6738                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  6739  00C3B6  9EA6               	bcf	4006,7,c	;volsfr
  6740                           
  6741                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  6742  00C3B8  9CA6               	bcf	4006,6,c	;volsfr
  6743                           
  6744                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  6745  00C3BA  80A6               	bsf	4006,0,c	;volsfr
  6746                           
  6747                           ;EEPROMstorage.c: 36: return( EEDATA );
  6748  00C3BC  50A8               	movf	4008,w,c	;volatile
  6749  00C3BE  0012               	return	
  6750  00C3C0                     __end_of_readEEPROM:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postdec1	equ	0xFE5
  6761                           plusw1	equ	0xFE3
  6762                           fsr1l	equ	0xFE1
  6763                           indf2	equ	0xFDF
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           plusw2	equ	0xFDB
  6767                           fsr2h	equ	0xFDA
  6768                           fsr2l	equ	0xFD9
  6769                           status	equ	0xFD8
  6770                           
  6771 ;; *************** function _initEEPROM *****************
  6772 ;; Defined at:
  6773 ;;		line 40 in file "EEPROMstorage.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  i               2    2[COMRAM] unsigned int 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;Total ram usage:        2 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    1
  6794 ;; This function calls:
  6795 ;;		_writeEEPROM
  6796 ;; This function is called by:
  6797 ;;		_standbyMode
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text9
  6802  00C462                     __ptext9:
  6803                           	opt stack 0
  6804  00C462                     _initEEPROM:
  6805                           	opt stack 28
  6806                           
  6807                           ;EEPROMstorage.c: 41: unsigned int i = 0;
  6808                           
  6809                           ;incstack = 0
  6810  00C462  0E00               	movlw	0
  6811  00C464  6E04               	movwf	initEEPROM@i+1,c
  6812  00C466  0E00               	movlw	0
  6813  00C468  6E03               	movwf	initEEPROM@i,c
  6814                           
  6815                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
  6816  00C46A  0E00               	movlw	0
  6817  00C46C  6E04               	movwf	initEEPROM@i+1,c
  6818  00C46E  0E00               	movlw	0
  6819  00C470  6E03               	movwf	initEEPROM@i,c
  6820  00C472                     l6504:
  6821  00C472  0404               	decf	initEEPROM@i+1,w,c
  6822  00C474  B0D8               	btfsc	status,0,c
  6823  00C476  0012               	return	
  6824                           
  6825                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
  6826  00C478  0E00               	movlw	0
  6827  00C47A  6E01               	movwf	writeEEPROM@data,c
  6828  00C47C  5003               	movf	initEEPROM@i,w,c
  6829  00C47E  EC44  F062         	call	_writeEEPROM
  6830  00C482  4A03               	infsnz	initEEPROM@i,f,c
  6831  00C484  2A04               	incf	initEEPROM@i+1,f,c
  6832  00C486  D7F5               	goto	l6504
  6833  00C488                     __end_of_initEEPROM:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           postdec1	equ	0xFE5
  6844                           plusw1	equ	0xFE3
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           plusw2	equ	0xFDB
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _writeEEPROM *****************
  6855 ;; Defined at:
  6856 ;;		line 10 in file "EEPROMstorage.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  address         1    wreg     unsigned char 
  6859 ;;  data            1    0[COMRAM] unsigned char 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  address         1    1[COMRAM] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:        2 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_standbyMode
  6881 ;;		_initEEPROM
  6882 ;;		_shiftEEPROM
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text10
  6887  00C488                     __ptext10:
  6888                           	opt stack 0
  6889  00C488                     _writeEEPROM:
  6890                           	opt stack 29
  6891                           
  6892                           ;incstack = 0
  6893                           ;writeEEPROM@address stored from wreg
  6894  00C488  6E02               	movwf	writeEEPROM@address,c
  6895  00C48A                     
  6896                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  6897  00C48A  B2A6               	btfsc	4006,1,c	;volsfr
  6898  00C48C  D7FE               	goto	l5516
  6899                           
  6900                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  6901  00C48E  84A6               	bsf	4006,2,c	;volsfr
  6902                           
  6903                           ;EEPROMstorage.c: 14: EEADR=address;
  6904  00C490  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  6905                           
  6906                           ;EEPROMstorage.c: 15: EEDATA=data;
  6907  00C494  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  6908                           
  6909                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  6910  00C498  9EA6               	bcf	4006,7,c	;volsfr
  6911                           
  6912                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  6913  00C49A  9CA6               	bcf	4006,6,c	;volsfr
  6914                           
  6915                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  6916  00C49C  9EF2               	bcf	intcon,7,c	;volatile
  6917                           
  6918                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  6919  00C49E  0E55               	movlw	85
  6920  00C4A0  6EA7               	movwf	4007,c	;volsfr
  6921                           
  6922                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  6923  00C4A2  0EAA               	movlw	170
  6924  00C4A4  6EA7               	movwf	4007,c	;volsfr
  6925                           
  6926                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  6927  00C4A6  82A6               	bsf	4006,1,c	;volsfr
  6928                           
  6929                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  6930  00C4A8  8EF2               	bsf	intcon,7,c	;volatile
  6931  00C4AA  B2A6               	btfsc	4006,1,c	;volsfr
  6932  00C4AC  D7FE               	goto	l785
  6933                           
  6934                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  6935  00C4AE  94A6               	bcf	4006,2,c	;volsfr
  6936  00C4B0  0012               	return		;funcret
  6937  00C4B2                     __end_of_writeEEPROM:
  6938                           	opt stack 0
  6939                           tblptru	equ	0xFF8
  6940                           tblptrh	equ	0xFF7
  6941                           tblptrl	equ	0xFF6
  6942                           tablat	equ	0xFF5
  6943                           prodh	equ	0xFF4
  6944                           prodl	equ	0xFF3
  6945                           intcon	equ	0xFF2
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           postdec1	equ	0xFE5
  6949                           plusw1	equ	0xFE3
  6950                           fsr1l	equ	0xFE1
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           plusw2	equ	0xFDB
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function _getRound *****************
  6960 ;; Defined at:
  6961 ;;		line 313 in file "standbyMode.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  code            2    0[COMRAM] unsigned int 
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  returnValue     2    4[COMRAM] unsigned int 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  2    0[COMRAM] unsigned int 
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;Total ram usage:        6 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_standbyMode
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text11
  6989  00CCB6                     __ptext11:
  6990                           	opt stack 0
  6991  00CCB6                     _getRound:
  6992                           	opt stack 29
  6993                           
  6994                           ;standbyMode.c: 314: unsigned int returnValue = 0;
  6995                           
  6996                           ;incstack = 0
  6997  00CCB6  0E00               	movlw	0
  6998  00CCB8  6E06               	movwf	getRound@returnValue+1,c
  6999  00CCBA  0E00               	movlw	0
  7000  00CCBC  6E05               	movwf	getRound@returnValue,c
  7001                           
  7002                           ;standbyMode.c: 315: switch(code){
  7003  00CCBE  D00D               	goto	l306
  7004  00CCC0                     
  7005                           ;standbyMode.c: 323: returnValue = 2;
  7006  00CCC0  0E00               	movlw	0
  7007  00CCC2  6E06               	movwf	getRound@returnValue+1,c
  7008  00CCC4  0E02               	movlw	2
  7009  00CCC6                     L21:
  7010  00CCC6  6E05               	movwf	getRound@returnValue,c
  7011                           
  7012                           ;standbyMode.c: 329: break;
  7013  00CCC8  D069               	goto	l308
  7014  00CCCA                     
  7015                           ;standbyMode.c: 458: returnValue = 1;
  7016                           
  7017                           ;standbyMode.c: 457: case 45:
  7018                           
  7019                           ;standbyMode.c: 454: break;
  7020                           
  7021                           ;standbyMode.c: 453: returnValue = 1;
  7022                           
  7023                           ;standbyMode.c: 452: case 44:
  7024                           
  7025                           ;standbyMode.c: 449: break;
  7026                           
  7027                           ;standbyMode.c: 448: returnValue = 1;
  7028  00CCCA  0E00               	movlw	0
  7029  00CCCC  6E06               	movwf	getRound@returnValue+1,c
  7030  00CCCE  0E01               	movlw	1
  7031  00CCD0  D7FA               	goto	L21
  7032  00CCD2                     
  7033                           ;standbyMode.c: 462: returnValue = 0;
  7034  00CCD2  0E00               	movlw	0
  7035  00CCD4  6E06               	movwf	getRound@returnValue+1,c
  7036  00CCD6  0E00               	movlw	0
  7037  00CCD8  D7F6               	goto	L21
  7038  00CCDA                     l306:
  7039  00CCDA  C001  F003         	movff	getRound@code,??_getRound
  7040  00CCDE  C002  F004         	movff	getRound@code+1,??_getRound+1
  7041                           
  7042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7043                           ; Switch size 1, requested type "space"
  7044                           ; Number of cases is 1, Range of values is 0 to 0
  7045                           ; switch strategies available:
  7046                           ; Name         Instructions Cycles
  7047                           ; simple_byte            4     3 (average)
  7048                           ;	Chosen strategy is simple_byte
  7049  00CCE2  5004               	movf	??_getRound+1,w,c
  7050  00CCE4  0A00               	xorlw	0	; case 0
  7051  00CCE6  A4D8               	btfss	status,2,c
  7052  00CCE8  D7F4               	goto	l337
  7053                           
  7054                           ; Switch size 1, requested type "space"
  7055                           ; Number of cases is 29, Range of values is 1 to 45
  7056                           ; switch strategies available:
  7057                           ; Name         Instructions Cycles
  7058                           ; simple_byte           88    45 (average)
  7059                           ;	Chosen strategy is simple_byte
  7060  00CCEA  5003               	movf	??_getRound,w,c
  7061  00CCEC  0A01               	xorlw	1	; case 1
  7062  00CCEE  B4D8               	btfsc	status,2,c
  7063  00CCF0  D7EC               	goto	l334
  7064  00CCF2  0A03               	xorlw	3	; case 2
  7065  00CCF4  B4D8               	btfsc	status,2,c
  7066  00CCF6  D7E4               	goto	l309
  7067  00CCF8  0A0A               	xorlw	10	; case 8
  7068  00CCFA  B4D8               	btfsc	status,2,c
  7069  00CCFC  D7E6               	goto	l334
  7070  00CCFE  0A01               	xorlw	1	; case 9
  7071  00CD00  B4D8               	btfsc	status,2,c
  7072  00CD02  D7E3               	goto	l334
  7073  00CD04  0A03               	xorlw	3	; case 10
  7074  00CD06  B4D8               	btfsc	status,2,c
  7075  00CD08  D7DB               	goto	l309
  7076  00CD0A  0A01               	xorlw	1	; case 11
  7077  00CD0C  B4D8               	btfsc	status,2,c
  7078  00CD0E  D7D8               	goto	l309
  7079  00CD10  0A07               	xorlw	7	; case 12
  7080  00CD12  B4D8               	btfsc	status,2,c
  7081  00CD14  D7DA               	goto	l334
  7082  00CD16  0A01               	xorlw	1	; case 13
  7083  00CD18  B4D8               	btfsc	status,2,c
  7084  00CD1A  D7D7               	goto	l334
  7085  00CD1C  0A03               	xorlw	3	; case 14
  7086  00CD1E  B4D8               	btfsc	status,2,c
  7087  00CD20  D7D4               	goto	l334
  7088  00CD22  0A01               	xorlw	1	; case 15
  7089  00CD24  B4D8               	btfsc	status,2,c
  7090  00CD26  D7CC               	goto	l309
  7091  00CD28  0A1F               	xorlw	31	; case 16
  7092  00CD2A  B4D8               	btfsc	status,2,c
  7093  00CD2C  D7C9               	goto	l309
  7094  00CD2E  0A06               	xorlw	6	; case 22
  7095  00CD30  B4D8               	btfsc	status,2,c
  7096  00CD32  D7C6               	goto	l309
  7097  00CD34  0A01               	xorlw	1	; case 23
  7098  00CD36  B4D8               	btfsc	status,2,c
  7099  00CD38  D7C3               	goto	l309
  7100  00CD3A  0A0F               	xorlw	15	; case 24
  7101  00CD3C  B4D8               	btfsc	status,2,c
  7102  00CD3E  D7C0               	goto	l309
  7103  00CD40  0A01               	xorlw	1	; case 25
  7104  00CD42  B4D8               	btfsc	status,2,c
  7105  00CD44  D7BD               	goto	l309
  7106  00CD46  0A03               	xorlw	3	; case 26
  7107  00CD48  B4D8               	btfsc	status,2,c
  7108  00CD4A  D7BF               	goto	l334
  7109  00CD4C  0A01               	xorlw	1	; case 27
  7110  00CD4E  B4D8               	btfsc	status,2,c
  7111  00CD50  D7B7               	goto	l309
  7112  00CD52  0A07               	xorlw	7	; case 28
  7113  00CD54  B4D8               	btfsc	status,2,c
  7114  00CD56  D7B9               	goto	l334
  7115  00CD58  0A01               	xorlw	1	; case 29
  7116  00CD5A  B4D8               	btfsc	status,2,c
  7117  00CD5C  D7B6               	goto	l334
  7118  00CD5E  0A03               	xorlw	3	; case 30
  7119  00CD60  B4D8               	btfsc	status,2,c
  7120  00CD62  D7B3               	goto	l334
  7121  00CD64  0A01               	xorlw	1	; case 31
  7122  00CD66  B4D8               	btfsc	status,2,c
  7123  00CD68  D7AB               	goto	l309
  7124  00CD6A  0A3F               	xorlw	63	; case 32
  7125  00CD6C  B4D8               	btfsc	status,2,c
  7126  00CD6E  D7AD               	goto	l334
  7127  00CD70  0A01               	xorlw	1	; case 33
  7128  00CD72  B4D8               	btfsc	status,2,c
  7129  00CD74  D7AA               	goto	l334
  7130  00CD76  0A03               	xorlw	3	; case 34
  7131  00CD78  B4D8               	btfsc	status,2,c
  7132  00CD7A  D7A7               	goto	l334
  7133  00CD7C  0A01               	xorlw	1	; case 35
  7134  00CD7E  B4D8               	btfsc	status,2,c
  7135  00CD80  D79F               	goto	l309
  7136  00CD82  0A09               	xorlw	9	; case 42
  7137  00CD84  B4D8               	btfsc	status,2,c
  7138  00CD86  D79C               	goto	l309
  7139  00CD88  0A01               	xorlw	1	; case 43
  7140  00CD8A  B4D8               	btfsc	status,2,c
  7141  00CD8C  D79E               	goto	l334
  7142  00CD8E  0A07               	xorlw	7	; case 44
  7143  00CD90  B4D8               	btfsc	status,2,c
  7144  00CD92  D79B               	goto	l334
  7145  00CD94  0A01               	xorlw	1	; case 45
  7146  00CD96  B4D8               	btfsc	status,2,c
  7147  00CD98  D798               	goto	l334
  7148  00CD9A  D79B               	goto	l337
  7149  00CD9C                     l308:
  7150                           
  7151                           ;standbyMode.c: 465: return returnValue;
  7152  00CD9C  C005  F001         	movff	getRound@returnValue,?_getRound
  7153  00CDA0  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  7154  00CDA4  0012               	return		;funcret
  7155  00CDA6                     __end_of_getRound:
  7156                           	opt stack 0
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           postinc0	equ	0xFEE
  7165                           wreg	equ	0xFE8
  7166                           postdec1	equ	0xFE5
  7167                           plusw1	equ	0xFE3
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           plusw2	equ	0xFDB
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _getLong *****************
  7178 ;; Defined at:
  7179 ;;		line 626 in file "standbyMode.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;  code            2    0[COMRAM] unsigned int 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  returnValue     2    4[COMRAM] unsigned int 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  2    0[COMRAM] unsigned int 
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;Total ram usage:        6 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; This function calls:
  7200 ;;		Nothing
  7201 ;; This function is called by:
  7202 ;;		_standbyMode
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           	psect	text12
  7207  00CDA6                     __ptext12:
  7208                           	opt stack 0
  7209  00CDA6                     _getLong:
  7210                           	opt stack 29
  7211                           
  7212                           ;standbyMode.c: 627: unsigned int returnValue = 0;
  7213                           
  7214                           ;incstack = 0
  7215  00CDA6  0E00               	movlw	0
  7216  00CDA8  6E06               	movwf	getLong@returnValue+1,c
  7217  00CDAA  0E00               	movlw	0
  7218  00CDAC  6E05               	movwf	getLong@returnValue,c
  7219                           
  7220                           ;standbyMode.c: 629: switch(code){
  7221  00CDAE  D011               	goto	l376
  7222  00CDB0                     
  7223                           ;standbyMode.c: 647: returnValue = 1;
  7224  00CDB0  0E00               	movlw	0
  7225  00CDB2  6E06               	movwf	getLong@returnValue+1,c
  7226  00CDB4  0E01               	movlw	1
  7227  00CDB6  D007               	goto	L35
  7228  00CDB8                     l385:
  7229                           
  7230                           ;standbyMode.c: 677: returnValue = 2;
  7231                           
  7232                           ;standbyMode.c: 676: case 18:
  7233                           
  7234                           ;standbyMode.c: 673: break;
  7235                           
  7236                           ;standbyMode.c: 672: returnValue = 1;
  7237                           
  7238                           ;standbyMode.c: 671: case 17:
  7239                           
  7240                           ;standbyMode.c: 668: break;
  7241                           
  7242                           ;standbyMode.c: 667: returnValue = 2;
  7243  00CDB8  0E00               	movlw	0
  7244  00CDBA  6E06               	movwf	getLong@returnValue+1,c
  7245  00CDBC  0E02               	movlw	2
  7246  00CDBE  D003               	goto	L35
  7247  00CDC0                     l388:
  7248                           
  7249                           ;standbyMode.c: 682: returnValue = 3;
  7250  00CDC0  0E00               	movlw	0
  7251  00CDC2  6E06               	movwf	getLong@returnValue+1,c
  7252  00CDC4  0E03               	movlw	3
  7253  00CDC6                     L35:
  7254  00CDC6  6E05               	movwf	getLong@returnValue,c
  7255                           
  7256                           ;standbyMode.c: 703: break;
  7257  00CDC8  D074               	goto	l378
  7258  00CDCA                     
  7259                           ;standbyMode.c: 801: returnValue = 0;
  7260  00CDCA  0E00               	movlw	0
  7261  00CDCC  6E06               	movwf	getLong@returnValue+1,c
  7262  00CDCE  0E00               	movlw	0
  7263  00CDD0  D7FA               	goto	L35
  7264  00CDD2                     l376:
  7265  00CDD2  C001  F003         	movff	getLong@code,??_getLong
  7266  00CDD6  C002  F004         	movff	getLong@code+1,??_getLong+1
  7267                           
  7268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7269                           ; Switch size 1, requested type "space"
  7270                           ; Number of cases is 1, Range of values is 0 to 0
  7271                           ; switch strategies available:
  7272                           ; Name         Instructions Cycles
  7273                           ; simple_byte            4     3 (average)
  7274                           ;	Chosen strategy is simple_byte
  7275  00CDDA  5004               	movf	??_getLong+1,w,c
  7276  00CDDC  0A00               	xorlw	0	; case 0
  7277  00CDDE  A4D8               	btfss	status,2,c
  7278  00CDE0  D7F4               	goto	l412
  7279                           
  7280                           ; Switch size 1, requested type "space"
  7281                           ; Number of cases is 34, Range of values is 5 to 46
  7282                           ; switch strategies available:
  7283                           ; Name         Instructions Cycles
  7284                           ; simple_byte          103    52 (average)
  7285                           ;	Chosen strategy is simple_byte
  7286  00CDE2  5003               	movf	??_getLong,w,c
  7287  00CDE4  0A05               	xorlw	5	; case 5
  7288  00CDE6  B4D8               	btfsc	status,2,c
  7289  00CDE8  D7E3               	goto	l381
  7290  00CDEA  0A03               	xorlw	3	; case 6
  7291  00CDEC  B4D8               	btfsc	status,2,c
  7292  00CDEE  D7E4               	goto	l385
  7293  00CDF0  0A01               	xorlw	1	; case 7
  7294  00CDF2  B4D8               	btfsc	status,2,c
  7295  00CDF4  D7E5               	goto	l388
  7296  00CDF6  0A0B               	xorlw	11	; case 12
  7297  00CDF8  B4D8               	btfsc	status,2,c
  7298  00CDFA  D7DA               	goto	l381
  7299  00CDFC  0A01               	xorlw	1	; case 13
  7300  00CDFE  B4D8               	btfsc	status,2,c
  7301  00CE00  D7DB               	goto	l385
  7302  00CE02  0A03               	xorlw	3	; case 14
  7303  00CE04  B4D8               	btfsc	status,2,c
  7304  00CE06  D7DC               	goto	l388
  7305  00CE08  0A01               	xorlw	1	; case 15
  7306  00CE0A  B4D8               	btfsc	status,2,c
  7307  00CE0C  D7D1               	goto	l381
  7308  00CE0E  0A1F               	xorlw	31	; case 16
  7309  00CE10  B4D8               	btfsc	status,2,c
  7310  00CE12  D7D2               	goto	l385
  7311  00CE14  0A01               	xorlw	1	; case 17
  7312  00CE16  B4D8               	btfsc	status,2,c
  7313  00CE18  D7CB               	goto	l381
  7314  00CE1A  0A03               	xorlw	3	; case 18
  7315  00CE1C  B4D8               	btfsc	status,2,c
  7316  00CE1E  D7CC               	goto	l385
  7317  00CE20  0A01               	xorlw	1	; case 19
  7318  00CE22  B4D8               	btfsc	status,2,c
  7319  00CE24  D7CD               	goto	l388
  7320  00CE26  0A07               	xorlw	7	; case 20
  7321  00CE28  B4D8               	btfsc	status,2,c
  7322  00CE2A  D7C2               	goto	l381
  7323  00CE2C  0A01               	xorlw	1	; case 21
  7324  00CE2E  B4D8               	btfsc	status,2,c
  7325  00CE30  D7C3               	goto	l385
  7326  00CE32  0A0D               	xorlw	13	; case 24
  7327  00CE34  B4D8               	btfsc	status,2,c
  7328  00CE36  D7BC               	goto	l381
  7329  00CE38  0A01               	xorlw	1	; case 25
  7330  00CE3A  B4D8               	btfsc	status,2,c
  7331  00CE3C  D7BD               	goto	l385
  7332  00CE3E  0A05               	xorlw	5	; case 28
  7333  00CE40  B4D8               	btfsc	status,2,c
  7334  00CE42  D7BA               	goto	l385
  7335  00CE44  0A01               	xorlw	1	; case 29
  7336  00CE46  B4D8               	btfsc	status,2,c
  7337  00CE48  D7BB               	goto	l388
  7338  00CE4A  0A03               	xorlw	3	; case 30
  7339  00CE4C  B4D8               	btfsc	status,2,c
  7340  00CE4E  D7B8               	goto	l388
  7341  00CE50  0A01               	xorlw	1	; case 31
  7342  00CE52  B4D8               	btfsc	status,2,c
  7343  00CE54  D7B1               	goto	l385
  7344  00CE56  0A3F               	xorlw	63	; case 32
  7345  00CE58  B4D8               	btfsc	status,2,c
  7346  00CE5A  D7AA               	goto	l381
  7347  00CE5C  0A01               	xorlw	1	; case 33
  7348  00CE5E  B4D8               	btfsc	status,2,c
  7349  00CE60  D7AB               	goto	l385
  7350  00CE62  0A03               	xorlw	3	; case 34
  7351  00CE64  B4D8               	btfsc	status,2,c
  7352  00CE66  D7A4               	goto	l381
  7353  00CE68  0A01               	xorlw	1	; case 35
  7354  00CE6A  B4D8               	btfsc	status,2,c
  7355  00CE6C  D7A1               	goto	l381
  7356  00CE6E  0A07               	xorlw	7	; case 36
  7357  00CE70  B4D8               	btfsc	status,2,c
  7358  00CE72  D79E               	goto	l381
  7359  00CE74  0A01               	xorlw	1	; case 37
  7360  00CE76  B4D8               	btfsc	status,2,c
  7361  00CE78  D79F               	goto	l385
  7362  00CE7A  0A03               	xorlw	3	; case 38
  7363  00CE7C  B4D8               	btfsc	status,2,c
  7364  00CE7E  D79C               	goto	l385
  7365  00CE80  0A01               	xorlw	1	; case 39
  7366  00CE82  B4D8               	btfsc	status,2,c
  7367  00CE84  D79D               	goto	l388
  7368  00CE86  0A0F               	xorlw	15	; case 40
  7369  00CE88  B4D8               	btfsc	status,2,c
  7370  00CE8A  D79A               	goto	l388
  7371  00CE8C  0A01               	xorlw	1	; case 41
  7372  00CE8E  B4D8               	btfsc	status,2,c
  7373  00CE90  D793               	goto	l385
  7374  00CE92  0A03               	xorlw	3	; case 42
  7375  00CE94  B4D8               	btfsc	status,2,c
  7376  00CE96  D78C               	goto	l381
  7377  00CE98  0A01               	xorlw	1	; case 43
  7378  00CE9A  B4D8               	btfsc	status,2,c
  7379  00CE9C  D789               	goto	l381
  7380  00CE9E  0A07               	xorlw	7	; case 44
  7381  00CEA0  B4D8               	btfsc	status,2,c
  7382  00CEA2  D78A               	goto	l385
  7383  00CEA4  0A01               	xorlw	1	; case 45
  7384  00CEA6  B4D8               	btfsc	status,2,c
  7385  00CEA8  D78B               	goto	l388
  7386  00CEAA  0A03               	xorlw	3	; case 46
  7387  00CEAC  B4D8               	btfsc	status,2,c
  7388  00CEAE  D788               	goto	l388
  7389  00CEB0  D78C               	goto	l412
  7390  00CEB2                     l378:
  7391                           
  7392                           ;standbyMode.c: 804: return returnValue;
  7393  00CEB2  C005  F001         	movff	getLong@returnValue,?_getLong
  7394  00CEB6  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  7395  00CEBA  0012               	return		;funcret
  7396  00CEBC                     __end_of_getLong:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           postdec1	equ	0xFE5
  7408                           plusw1	equ	0xFE3
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           plusw2	equ	0xFDB
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _getFlat *****************
  7419 ;; Defined at:
  7420 ;;		line 469 in file "standbyMode.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  code            2    0[COMRAM] unsigned int 
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  returnValue     2    4[COMRAM] unsigned int 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  2    0[COMRAM] unsigned int 
  7427 ;; Registers used:
  7428 ;;		wreg, status,2, status,0
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7434 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;Total ram usage:        6 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_standbyMode
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text13
  7448  00CBC6                     __ptext13:
  7449                           	opt stack 0
  7450  00CBC6                     _getFlat:
  7451                           	opt stack 29
  7452                           
  7453                           ;standbyMode.c: 470: unsigned int returnValue = 0;
  7454                           
  7455                           ;incstack = 0
  7456  00CBC6  0E00               	movlw	0
  7457  00CBC8  6E06               	movwf	getFlat@returnValue+1,c
  7458  00CBCA  0E00               	movlw	0
  7459  00CBCC  6E05               	movwf	getFlat@returnValue,c
  7460                           
  7461                           ;standbyMode.c: 472: switch(code){
  7462  00CBCE  D00D               	goto	l341
  7463  00CBD0                     
  7464                           ;standbyMode.c: 475: returnValue = 1;
  7465  00CBD0  0E00               	movlw	0
  7466  00CBD2  6E06               	movwf	getFlat@returnValue+1,c
  7467  00CBD4  0E01               	movlw	1
  7468  00CBD6  D003               	goto	L41
  7469  00CBD8                     
  7470                           ;standbyMode.c: 500: returnValue = 2;
  7471                           
  7472                           ;standbyMode.c: 499: case 11:
  7473                           
  7474                           ;standbyMode.c: 496: break;
  7475                           
  7476                           ;standbyMode.c: 495: returnValue = 1;
  7477                           
  7478                           ;standbyMode.c: 494: case 10:
  7479                           
  7480                           ;standbyMode.c: 491: break;
  7481                           
  7482                           ;standbyMode.c: 490: returnValue = 2;
  7483                           
  7484                           ;standbyMode.c: 489: case 9:
  7485                           
  7486                           ;standbyMode.c: 486: break;
  7487                           
  7488                           ;standbyMode.c: 485: returnValue = 1;
  7489                           
  7490                           ;standbyMode.c: 484: case 8:
  7491                           
  7492                           ;standbyMode.c: 481: break;
  7493                           
  7494                           ;standbyMode.c: 480: returnValue = 2;
  7495  00CBD8  0E00               	movlw	0
  7496  00CBDA  6E06               	movwf	getFlat@returnValue+1,c
  7497  00CBDC  0E02               	movlw	2
  7498  00CBDE                     L41:
  7499  00CBDE  6E05               	movwf	getFlat@returnValue,c
  7500                           
  7501                           ;standbyMode.c: 506: break;
  7502  00CBE0  D065               	goto	l343
  7503  00CBE2                     
  7504                           ;standbyMode.c: 619: returnValue = 0;
  7505  00CBE2  0E00               	movlw	0
  7506  00CBE4  6E06               	movwf	getFlat@returnValue+1,c
  7507  00CBE6  0E00               	movlw	0
  7508  00CBE8  D7FA               	goto	L41
  7509  00CBEA                     l341:
  7510  00CBEA  C001  F003         	movff	getFlat@code,??_getFlat
  7511  00CBEE  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  7512                           
  7513                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7514                           ; Switch size 1, requested type "space"
  7515                           ; Number of cases is 1, Range of values is 0 to 0
  7516                           ; switch strategies available:
  7517                           ; Name         Instructions Cycles
  7518                           ; simple_byte            4     3 (average)
  7519                           ;	Chosen strategy is simple_byte
  7520  00CBF2  5004               	movf	??_getFlat+1,w,c
  7521  00CBF4  0A00               	xorlw	0	; case 0
  7522  00CBF6  A4D8               	btfss	status,2,c
  7523  00CBF8  D7F4               	goto	l372
  7524                           
  7525                           ; Switch size 1, requested type "space"
  7526                           ; Number of cases is 29, Range of values is 3 to 46
  7527                           ; switch strategies available:
  7528                           ; Name         Instructions Cycles
  7529                           ; simple_byte           88    45 (average)
  7530                           ;	Chosen strategy is simple_byte
  7531  00CBFA  5003               	movf	??_getFlat,w,c
  7532  00CBFC  0A03               	xorlw	3	; case 3
  7533  00CBFE  B4D8               	btfsc	status,2,c
  7534  00CC00  D7E7               	goto	l342
  7535  00CC02  0A07               	xorlw	7	; case 4
  7536  00CC04  B4D8               	btfsc	status,2,c
  7537  00CC06  D7E8               	goto	l344
  7538  00CC08  0A0C               	xorlw	12	; case 8
  7539  00CC0A  B4D8               	btfsc	status,2,c
  7540  00CC0C  D7E1               	goto	l342
  7541  00CC0E  0A01               	xorlw	1	; case 9
  7542  00CC10  B4D8               	btfsc	status,2,c
  7543  00CC12  D7E2               	goto	l344
  7544  00CC14  0A03               	xorlw	3	; case 10
  7545  00CC16  B4D8               	btfsc	status,2,c
  7546  00CC18  D7DB               	goto	l342
  7547  00CC1A  0A01               	xorlw	1	; case 11
  7548  00CC1C  B4D8               	btfsc	status,2,c
  7549  00CC1E  D7DC               	goto	l344
  7550  00CC20  0A1A               	xorlw	26	; case 17
  7551  00CC22  B4D8               	btfsc	status,2,c
  7552  00CC24  D7D5               	goto	l342
  7553  00CC26  0A03               	xorlw	3	; case 18
  7554  00CC28  B4D8               	btfsc	status,2,c
  7555  00CC2A  D7D2               	goto	l342
  7556  00CC2C  0A01               	xorlw	1	; case 19
  7557  00CC2E  B4D8               	btfsc	status,2,c
  7558  00CC30  D7CF               	goto	l342
  7559  00CC32  0A07               	xorlw	7	; case 20
  7560  00CC34  B4D8               	btfsc	status,2,c
  7561  00CC36  D7D0               	goto	l344
  7562  00CC38  0A01               	xorlw	1	; case 21
  7563  00CC3A  B4D8               	btfsc	status,2,c
  7564  00CC3C  D7CD               	goto	l344
  7565  00CC3E  0A03               	xorlw	3	; case 22
  7566  00CC40  B4D8               	btfsc	status,2,c
  7567  00CC42  D7C6               	goto	l342
  7568  00CC44  0A01               	xorlw	1	; case 23
  7569  00CC46  B4D8               	btfsc	status,2,c
  7570  00CC48  D7C7               	goto	l344
  7571  00CC4A  0A0D               	xorlw	13	; case 26
  7572  00CC4C  B4D8               	btfsc	status,2,c
  7573  00CC4E  D7C4               	goto	l344
  7574  00CC50  0A01               	xorlw	1	; case 27
  7575  00CC52  B4D8               	btfsc	status,2,c
  7576  00CC54  D7C1               	goto	l344
  7577  00CC56  0A3B               	xorlw	59	; case 32
  7578  00CC58  B4D8               	btfsc	status,2,c
  7579  00CC5A  D7BA               	goto	l342
  7580  00CC5C  0A01               	xorlw	1	; case 33
  7581  00CC5E  B4D8               	btfsc	status,2,c
  7582  00CC60  D7B7               	goto	l342
  7583  00CC62  0A03               	xorlw	3	; case 34
  7584  00CC64  B4D8               	btfsc	status,2,c
  7585  00CC66  D7B8               	goto	l344
  7586  00CC68  0A01               	xorlw	1	; case 35
  7587  00CC6A  B4D8               	btfsc	status,2,c
  7588  00CC6C  D7B1               	goto	l342
  7589  00CC6E  0A07               	xorlw	7	; case 36
  7590  00CC70  B4D8               	btfsc	status,2,c
  7591  00CC72  D7B2               	goto	l344
  7592  00CC74  0A01               	xorlw	1	; case 37
  7593  00CC76  B4D8               	btfsc	status,2,c
  7594  00CC78  D7AF               	goto	l344
  7595  00CC7A  0A03               	xorlw	3	; case 38
  7596  00CC7C  B4D8               	btfsc	status,2,c
  7597  00CC7E  D7A8               	goto	l342
  7598  00CC80  0A01               	xorlw	1	; case 39
  7599  00CC82  B4D8               	btfsc	status,2,c
  7600  00CC84  D7A5               	goto	l342
  7601  00CC86  0A0F               	xorlw	15	; case 40
  7602  00CC88  B4D8               	btfsc	status,2,c
  7603  00CC8A  D7A2               	goto	l342
  7604  00CC8C  0A01               	xorlw	1	; case 41
  7605  00CC8E  B4D8               	btfsc	status,2,c
  7606  00CC90  D7A3               	goto	l344
  7607  00CC92  0A03               	xorlw	3	; case 42
  7608  00CC94  B4D8               	btfsc	status,2,c
  7609  00CC96  D79C               	goto	l342
  7610  00CC98  0A01               	xorlw	1	; case 43
  7611  00CC9A  B4D8               	btfsc	status,2,c
  7612  00CC9C  D79D               	goto	l344
  7613  00CC9E  0A07               	xorlw	7	; case 44
  7614  00CCA0  B4D8               	btfsc	status,2,c
  7615  00CCA2  D796               	goto	l342
  7616  00CCA4  0A02               	xorlw	2	; case 46
  7617  00CCA6  B4D8               	btfsc	status,2,c
  7618  00CCA8  D793               	goto	l342
  7619  00CCAA  D79B               	goto	l372
  7620  00CCAC                     l343:
  7621                           
  7622                           ;standbyMode.c: 622: return returnValue;
  7623  00CCAC  C005  F001         	movff	getFlat@returnValue,?_getFlat
  7624  00CCB0  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  7625  00CCB4  0012               	return		;funcret
  7626  00CCB6                     __end_of_getFlat:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           postinc0	equ	0xFEE
  7636                           wreg	equ	0xFE8
  7637                           postdec1	equ	0xFE5
  7638                           plusw1	equ	0xFE3
  7639                           fsr1l	equ	0xFE1
  7640                           indf2	equ	0xFDF
  7641                           postinc2	equ	0xFDE
  7642                           postdec2	equ	0xFDD
  7643                           plusw2	equ	0xFDB
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _food_press *****************
  7649 ;; Defined at:
  7650 ;;		line 1134 in file "standbyMode.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  dietSum         2   40[COMRAM] unsigned int 
  7653 ;;  drawer          2   42[COMRAM] unsigned int 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  keypress        1   54[COMRAM] unsigned char 
  7656 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  7657 ;;  count           2   52[COMRAM] unsigned int 
  7658 ;;  isValid         2   50[COMRAM] unsigned int 
  7659 ;;  backCheck       2   48[COMRAM] unsigned int 
  7660 ;;  tally           2   46[COMRAM] unsigned int 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  2   40[COMRAM] unsigned int 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;Total ram usage:       23 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    3
  7677 ;; This function calls:
  7678 ;;		_check_food
  7679 ;;		_get_digits
  7680 ;;		_lcdInst
  7681 ;;		_printf
  7682 ;;		_putch
  7683 ;; This function is called by:
  7684 ;;		_standbyMode
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text14
  7689  00CFE0                     __ptext14:
  7690                           	opt stack 0
  7691  00CFE0                     _food_press:
  7692                           	opt stack 26
  7693                           
  7694                           ;incstack = 0
  7695                           ;standbyMode.c: 1136: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  7696  00CFE0  0E01               	movlw	1
  7697  00CFE2  ECC2  F061         	call	_lcdInst
  7698  00CFE6  0EC3               	movlw	195
  7699  00CFE8  6E2D               	movwf	??_food_press& (0+255),c
  7700  00CFEA  0ECD               	movlw	205
  7701  00CFEC                     u8877:
  7702  00CFEC  2EE8               	decfsz	wreg,f,c
  7703  00CFEE  D7FE               	bra	u8877
  7704  00CFF0  2E2D               	decfsz	??_food_press& (0+255),f,c
  7705  00CFF2  D7FC               	bra	u8877
  7706  00CFF4  F000               	nop	
  7707                           
  7708                           ;standbyMode.c: 1137: printf("Drawer %i food:", drawer);
  7709  00CFF6  0EE9               	movlw	low STR_49
  7710  00CFF8  6E0D               	movwf	printf@f,c
  7711  00CFFA  0EFD               	movlw	high STR_49
  7712  00CFFC  6E0E               	movwf	printf@f+1,c
  7713  00CFFE  C02B  F00F         	movff	food_press@drawer,?_printf+2
  7714  00D002  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  7715  00D006  EC6E  F06B         	call	_printf	;wreg free
  7716                           
  7717                           ;standbyMode.c: 1138: lcdInst(0xC0);;
  7718  00D00A  0EC0               	movlw	192
  7719  00D00C  ECC2  F061         	call	_lcdInst
  7720                           
  7721                           ;standbyMode.c: 1140: unsigned int tally = 0;
  7722  00D010  0E00               	movlw	0
  7723  00D012  6E30               	movwf	food_press@tally+1,c
  7724  00D014  0E00               	movlw	0
  7725  00D016  6E2F               	movwf	food_press@tally,c
  7726                           
  7727                           ;standbyMode.c: 1141: unsigned int count = 0;
  7728  00D018  0E00               	movlw	0
  7729  00D01A  6E36               	movwf	food_press@count+1,c
  7730  00D01C  0E00               	movlw	0
  7731  00D01E  6E35               	movwf	food_press@count,c
  7732                           
  7733                           ;standbyMode.c: 1142: unsigned int foodTable[4] = {0, 0, 0, 0};
  7734  00D020  EE20  F069         	lfsr	2,food_press@F3131
  7735  00D024  EE10  F038         	lfsr	1,food_press@foodTable
  7736  00D028  0E07               	movlw	7
  7737  00D02A                     u6121:
  7738  00D02A  CFDB FFE3          	movff	plusw2,plusw1
  7739  00D02E  06E8               	decf	wreg,f,c
  7740  00D030  E2FC               	bc	u6121
  7741                           
  7742                           ;standbyMode.c: 1143: unsigned int isValid = 0;
  7743  00D032  0E00               	movlw	0
  7744  00D034  6E34               	movwf	food_press@isValid+1,c
  7745  00D036  0E00               	movlw	0
  7746  00D038  6E33               	movwf	food_press@isValid,c
  7747                           
  7748                           ;standbyMode.c: 1144: unsigned int backCheck = 0;
  7749  00D03A  0E00               	movlw	0
  7750  00D03C  6E32               	movwf	food_press@backCheck+1,c
  7751  00D03E  0E00               	movlw	0
  7752  00D040  6E31               	movwf	food_press@backCheck,c
  7753                           
  7754                           ;standbyMode.c: 1145: tally = get_digits(dietSum);
  7755  00D042  C029  F001         	movff	food_press@dietSum,get_digits@sum
  7756  00D046  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  7757  00D04A  ECAD  F064         	call	_get_digits	;wreg free
  7758  00D04E  C001  F02F         	movff	?_get_digits,food_press@tally
  7759  00D052  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  7760  00D056                     
  7761                           ;standbyMode.c: 1148: while(PORTBbits.RB1 == 0){ continue; }
  7762  00D056  A281               	btfss	3969,1,c	;volatile
  7763  00D058  D7FE               	goto	l512
  7764                           
  7765                           ;standbyMode.c: 1149: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7766  00D05A  3881               	swapf	3969,w,c	;volatile
  7767  00D05C  0B0F               	andlw	15
  7768  00D05E  0B0F               	andlw	15
  7769  00D060  6E37               	movwf	food_press@keypress,c
  7770  00D062  B281               	btfsc	3969,1,c	;volatile
  7771  00D064  D7FE               	goto	l517
  7772                           
  7773                           ;standbyMode.c: 1152: if(keypress == 15){
  7774  00D066  0E0F               	movlw	15
  7775  00D068  1837               	xorwf	food_press@keypress,w,c
  7776  00D06A  B4D8               	btfsc	status,2,c
  7777  00D06C  D070               	goto	l520
  7778                           
  7779                           ;standbyMode.c: 1155: else if (keypress == 14){
  7780                           
  7781                           ;standbyMode.c: 1154: }
  7782                           
  7783                           ;standbyMode.c: 1153: break;
  7784  00D06E  0E0E               	movlw	14
  7785  00D070  1837               	xorwf	food_press@keypress,w,c
  7786  00D072  A4D8               	btfss	status,2,c
  7787  00D074  D005               	goto	l522
  7788                           
  7789                           ;standbyMode.c: 1156: backCheck = 1;
  7790  00D076  0E00               	movlw	0
  7791  00D078  6E32               	movwf	food_press@backCheck+1,c
  7792  00D07A  0E01               	movlw	1
  7793  00D07C  6E31               	movwf	food_press@backCheck,c
  7794                           
  7795                           ;standbyMode.c: 1157: break;
  7796  00D07E  D067               	goto	l520
  7797  00D080                     l522:
  7798                           
  7799                           ;standbyMode.c: 1159: else if (keypress == 0 || keypress == 1 || keypress == 2){
  7800  00D080  5037               	movf	food_press@keypress,w,c
  7801  00D082  B4D8               	btfsc	status,2,c
  7802  00D084  D007               	goto	u6190
  7803  00D086  0437               	decf	food_press@keypress,w,c
  7804  00D088  B4D8               	btfsc	status,2,c
  7805  00D08A  D004               	goto	u6190
  7806  00D08C  0E02               	movlw	2
  7807  00D08E  1837               	xorwf	food_press@keypress,w,c
  7808  00D090  A4D8               	btfss	status,2,c
  7809  00D092  D02C               	goto	l524
  7810  00D094                     u6190:
  7811                           
  7812                           ;standbyMode.c: 1160: if (count < tally){
  7813  00D094  502F               	movf	food_press@tally,w,c
  7814  00D096  5C35               	subwf	food_press@count,w,c
  7815  00D098  5030               	movf	food_press@tally+1,w,c
  7816  00D09A  5836               	subwfb	food_press@count+1,w,c
  7817  00D09C  B0D8               	btfsc	status,0,c
  7818  00D09E  D7DB               	goto	l512
  7819                           
  7820                           ;standbyMode.c: 1161: putch(input[keypress]);
  7821  00D0A0  5037               	movf	food_press@keypress,w,c
  7822  00D0A2  0D01               	mullw	1
  7823  00D0A4  0E10               	movlw	low _input
  7824  00D0A6  24F3               	addwf	prodl,w,c
  7825  00D0A8  6EF6               	movwf	tblptrl,c
  7826  00D0AA  0EFD               	movlw	high _input
  7827  00D0AC  20F4               	addwfc	prodh,w,c
  7828  00D0AE  6EF7               	movwf	tblptrh,c
  7829  00D0B0                     	if	1	;There are 3 active tblptr bytes
  7830  00D0B0  6AF8               	clrf	tblptru,c
  7831  00D0B2  0E00               	movlw	low (__mediumconst shr (0+16))
  7832  00D0B4  22F8               	addwfc	tblptru,f,c
  7833  00D0B6                     	endif
  7834  00D0B6  0008               	tblrd		*
  7835  00D0B8  50F5               	movf	tablat,w,c
  7836  00D0BA  ECCC  F061         	call	_putch
  7837                           
  7838                           ;standbyMode.c: 1162: foodTable[count] = keypress + 1;
  7839  00D0BE  5037               	movf	food_press@keypress,w,c
  7840  00D0C0  6E2D               	movwf	??_food_press& (0+255),c
  7841  00D0C2  6A2E               	clrf	(??_food_press+1)& (0+255),c
  7842  00D0C4  0E01               	movlw	1
  7843  00D0C6  262D               	addwf	??_food_press,f,c
  7844  00D0C8  0E00               	movlw	0
  7845  00D0CA  222E               	addwfc	??_food_press+1,f,c
  7846  00D0CC  90D8               	bcf	status,0,c
  7847  00D0CE  3435               	rlcf	food_press@count,w,c
  7848  00D0D0  6ED9               	movwf	fsr2l,c
  7849  00D0D2  3436               	rlcf	food_press@count+1,w,c
  7850  00D0D4  6EDA               	movwf	fsr2h,c
  7851  00D0D6  0E38               	movlw	low food_press@foodTable
  7852  00D0D8  26D9               	addwf	fsr2l,f,c
  7853  00D0DA  0E00               	movlw	high food_press@foodTable
  7854  00D0DC  22DA               	addwfc	fsr2h,f,c
  7855  00D0DE  C02D  FFDE         	movff	??_food_press,postinc2
  7856  00D0E2  C02E  FFDD         	movff	??_food_press+1,postdec2
  7857                           
  7858                           ;standbyMode.c: 1163: count += 1;
  7859  00D0E6  4A35               	infsnz	food_press@count,f,c
  7860  00D0E8  2A36               	incf	food_press@count+1,f,c
  7861                           
  7862                           ;standbyMode.c: 1164: }
  7863                           ;standbyMode.c: 1165: }
  7864  00D0EA  D7B5               	goto	l512
  7865  00D0EC                     l524:
  7866                           
  7867                           ;standbyMode.c: 1166: else if (keypress == 12){
  7868  00D0EC  0E0C               	movlw	12
  7869  00D0EE  1837               	xorwf	food_press@keypress,w,c
  7870  00D0F0  A4D8               	btfss	status,2,c
  7871  00D0F2  D7B1               	goto	l512
  7872                           
  7873                           ;standbyMode.c: 1167: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7874  00D0F4  0E01               	movlw	1
  7875  00D0F6  ECC2  F061         	call	_lcdInst
  7876  00D0FA  0EC3               	movlw	195
  7877  00D0FC  6E2D               	movwf	??_food_press& (0+255),c
  7878  00D0FE  0ECD               	movlw	205
  7879  00D100                     u8887:
  7880  00D100  2EE8               	decfsz	wreg,f,c
  7881  00D102  D7FE               	bra	u8887
  7882  00D104  2E2D               	decfsz	??_food_press& (0+255),f,c
  7883  00D106  D7FC               	bra	u8887
  7884  00D108  F000               	nop	
  7885                           
  7886                           ;standbyMode.c: 1168: printf("Drawer %i food:", drawer);
  7887  00D10A  0EE9               	movlw	low STR_49
  7888  00D10C  6E0D               	movwf	printf@f,c
  7889  00D10E  0EFD               	movlw	high STR_49
  7890  00D110  6E0E               	movwf	printf@f+1,c
  7891  00D112  C02B  F00F         	movff	food_press@drawer,?_printf+2
  7892  00D116  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  7893  00D11A  EC6E  F06B         	call	_printf	;wreg free
  7894                           
  7895                           ;standbyMode.c: 1169: lcdInst(0xC0);;
  7896  00D11E  0EC0               	movlw	192
  7897  00D120  ECC2  F061         	call	_lcdInst
  7898                           
  7899                           ;standbyMode.c: 1170: count = 0;
  7900  00D124  0E00               	movlw	0
  7901  00D126  6E36               	movwf	food_press@count+1,c
  7902  00D128  0E00               	movlw	0
  7903  00D12A  6E35               	movwf	food_press@count,c
  7904                           
  7905                           ;standbyMode.c: 1171: foodTable[0] = 0;
  7906  00D12C  0E00               	movlw	0
  7907  00D12E  6E39               	movwf	food_press@foodTable+1,c
  7908  00D130  0E00               	movlw	0
  7909  00D132  6E38               	movwf	food_press@foodTable,c
  7910                           
  7911                           ;standbyMode.c: 1172: foodTable[1] = 0;
  7912  00D134  0E00               	movlw	0
  7913  00D136  6E3B               	movwf	food_press@foodTable+3,c
  7914  00D138  0E00               	movlw	0
  7915  00D13A  6E3A               	movwf	food_press@foodTable+2,c
  7916                           
  7917                           ;standbyMode.c: 1173: foodTable[2] = 0;
  7918  00D13C  0E00               	movlw	0
  7919  00D13E  6E3D               	movwf	food_press@foodTable+5,c
  7920  00D140  0E00               	movlw	0
  7921  00D142  6E3C               	movwf	food_press@foodTable+4,c
  7922                           
  7923                           ;standbyMode.c: 1174: foodTable[3] = 0;
  7924  00D144  0E00               	movlw	0
  7925  00D146  6E3F               	movwf	food_press@foodTable+7,c
  7926  00D148  0E00               	movlw	0
  7927  00D14A  6E3E               	movwf	food_press@foodTable+6,c
  7928  00D14C  D784               	goto	l512
  7929  00D14E                     l520:
  7930                           
  7931                           ;standbyMode.c: 1175: }
  7932                           ;standbyMode.c: 1176: }
  7933                           ;standbyMode.c: 1178: if (backCheck == 1){
  7934  00D14E  0431               	decf	food_press@backCheck,w,c
  7935  00D150  1032               	iorwf	food_press@backCheck+1,w,c
  7936  00D152  A4D8               	btfss	status,2,c
  7937  00D154  D005               	goto	l531
  7938                           
  7939                           ;standbyMode.c: 1179: return 100;
  7940  00D156  0E00               	movlw	0
  7941  00D158  6E2A               	movwf	?_food_press+1,c
  7942  00D15A  0E64               	movlw	100
  7943  00D15C  6E29               	movwf	?_food_press,c
  7944                           
  7945                           ;standbyMode.c: 1180: }
  7946  00D15E  0012               	return	
  7947  00D160                     l531:
  7948                           
  7949                           ;standbyMode.c: 1181: else {
  7950                           ;standbyMode.c: 1182: isValid = check_food(dietSum, foodTable);
  7951  00D160  C029  F001         	movff	food_press@dietSum,check_food@sum
  7952  00D164  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  7953  00D168  0E38               	movlw	low food_press@foodTable
  7954  00D16A  6E03               	movwf	check_food@foodInput,c
  7955  00D16C  0E00               	movlw	high food_press@foodTable
  7956  00D16E  6E04               	movwf	check_food@foodInput+1,c
  7957  00D170  ECD6  F072         	call	_check_food	;wreg free
  7958  00D174  C001  F033         	movff	?_check_food,food_press@isValid
  7959  00D178  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  7960                           
  7961                           ;standbyMode.c: 1184: if (isValid == 0){
  7962  00D17C  5033               	movf	food_press@isValid,w,c
  7963  00D17E  1034               	iorwf	food_press@isValid+1,w,c
  7964  00D180  A4D8               	btfss	status,2,c
  7965  00D182  D026               	goto	l534
  7966                           
  7967                           ;standbyMode.c: 1185: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7968  00D184  0E01               	movlw	1
  7969  00D186  ECC2  F061         	call	_lcdInst
  7970  00D18A  0EC3               	movlw	195
  7971  00D18C  6E2D               	movwf	??_food_press& (0+255),c
  7972  00D18E  0ECD               	movlw	205
  7973  00D190                     u8897:
  7974  00D190  2EE8               	decfsz	wreg,f,c
  7975  00D192  D7FE               	bra	u8897
  7976  00D194  2E2D               	decfsz	??_food_press& (0+255),f,c
  7977  00D196  D7FC               	bra	u8897
  7978  00D198  F000               	nop	
  7979                           
  7980                           ;standbyMode.c: 1186: printf("Invalid food!");
  7981  00D19A  0ED1               	movlw	low STR_51
  7982  00D19C  6E0D               	movwf	printf@f,c
  7983  00D19E  0EFE               	movlw	high STR_51
  7984  00D1A0  6E0E               	movwf	printf@f+1,c
  7985  00D1A2  EC6E  F06B         	call	_printf	;wreg free
  7986                           
  7987                           ;standbyMode.c: 1187: lcdInst(0xC0);;
  7988  00D1A6  0EC0               	movlw	192
  7989  00D1A8  ECC2  F061         	call	_lcdInst
  7990                           
  7991                           ;standbyMode.c: 1188: printf("Try again.");
  7992  00D1AC  0E6C               	movlw	low STR_52
  7993  00D1AE  6E0D               	movwf	printf@f,c
  7994  00D1B0  0EFF               	movlw	high STR_52
  7995  00D1B2  6E0E               	movwf	printf@f+1,c
  7996  00D1B4  EC6E  F06B         	call	_printf	;wreg free
  7997                           
  7998                           ;standbyMode.c: 1189: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7999  00D1B8  0E33               	movlw	51
  8000  00D1BA  6E2E               	movwf	(??_food_press+1)& (0+255),c
  8001  00D1BC  0EBB               	movlw	187
  8002  00D1BE  6E2D               	movwf	??_food_press& (0+255),c
  8003  00D1C0  0EE0               	movlw	224
  8004  00D1C2                     u8907:
  8005  00D1C2  2EE8               	decfsz	wreg,f,c
  8006  00D1C4  D7FE               	bra	u8907
  8007  00D1C6  2E2D               	decfsz	??_food_press& (0+255),f,c
  8008  00D1C8  D7FC               	bra	u8907
  8009  00D1CA  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  8010  00D1CC  D7FA               	bra	u8907
  8011                           
  8012                           ;standbyMode.c: 1190: goto START;
  8013  00D1CE  D708               	goto	_food_press
  8014  00D1D0                     l534:
  8015                           
  8016                           ;standbyMode.c: 1192: else {
  8017                           ;standbyMode.c: 1193: return isValid;
  8018  00D1D0  C033  F029         	movff	food_press@isValid,?_food_press
  8019  00D1D4  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  8020  00D1D8  0012               	return	
  8021  00D1DA                     __end_of_food_press:
  8022                           	opt stack 0
  8023                           tblptru	equ	0xFF8
  8024                           tblptrh	equ	0xFF7
  8025                           tblptrl	equ	0xFF6
  8026                           tablat	equ	0xFF5
  8027                           prodh	equ	0xFF4
  8028                           prodl	equ	0xFF3
  8029                           intcon	equ	0xFF2
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postdec1	equ	0xFE5
  8033                           plusw1	equ	0xFE3
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           plusw2	equ	0xFDB
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _get_digits *****************
  8044 ;; Defined at:
  8045 ;;		line 1029 in file "standbyMode.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  sum             2    0[COMRAM] unsigned int 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  count           2    4[COMRAM] unsigned int 
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  2    0[COMRAM] unsigned int 
  8052 ;; Registers used:
  8053 ;;		wreg, status,2, status,0
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/0
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;Total ram usage:        6 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_food_press
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text15
  8073  00C95A                     __ptext15:
  8074                           	opt stack 0
  8075  00C95A                     _get_digits:
  8076                           	opt stack 28
  8077                           
  8078                           ;standbyMode.c: 1031: unsigned int count = 0;
  8079                           
  8080                           ;incstack = 0
  8081  00C95A  0E00               	movlw	0
  8082  00C95C  6E06               	movwf	get_digits@count+1,c
  8083  00C95E  0E00               	movlw	0
  8084  00C960  6E05               	movwf	get_digits@count,c
  8085                           
  8086                           ;standbyMode.c: 1033: switch(sum){
  8087  00C962  D015               	goto	l485
  8088  00C964                     
  8089                           ;standbyMode.c: 1046: count = 1;
  8090                           
  8091                           ;standbyMode.c: 1045: case 12:
  8092                           
  8093                           ;standbyMode.c: 1042: break;
  8094                           
  8095                           ;standbyMode.c: 1041: count = 1;
  8096                           
  8097                           ;standbyMode.c: 1040: case 7:
  8098                           
  8099                           ;standbyMode.c: 1037: break;
  8100                           
  8101                           ;standbyMode.c: 1036: count = 1;
  8102  00C964  0E00               	movlw	0
  8103  00C966  6E06               	movwf	get_digits@count+1,c
  8104  00C968  0E01               	movlw	1
  8105  00C96A                     L42:
  8106  00C96A  6E05               	movwf	get_digits@count,c
  8107                           
  8108                           ;standbyMode.c: 1052: break;
  8109  00C96C  D050               	goto	l487
  8110  00C96E                     
  8111                           ;standbyMode.c: 1061: count = 2;
  8112                           
  8113                           ;standbyMode.c: 1060: case 19:
  8114                           
  8115                           ;standbyMode.c: 1057: break;
  8116                           
  8117                           ;standbyMode.c: 1056: count = 2;
  8118  00C96E  0E00               	movlw	0
  8119  00C970  6E06               	movwf	get_digits@count+1,c
  8120  00C972  0E02               	movlw	2
  8121  00C974  D7FA               	goto	L42
  8122  00C976                     
  8123                           ;standbyMode.c: 1096: count = 3;
  8124                           
  8125                           ;standbyMode.c: 1095: case 31:
  8126                           
  8127                           ;standbyMode.c: 1092: break;
  8128                           
  8129                           ;standbyMode.c: 1091: count = 3;
  8130                           
  8131                           ;standbyMode.c: 1090: case 26:
  8132                           
  8133                           ;standbyMode.c: 1087: break;
  8134                           
  8135                           ;standbyMode.c: 1086: count = 3;
  8136                           
  8137                           ;standbyMode.c: 1085: case 22:
  8138                           
  8139                           ;standbyMode.c: 1082: break;
  8140                           
  8141                           ;standbyMode.c: 1081: count = 3;
  8142                           
  8143                           ;standbyMode.c: 1080: case 27:
  8144                           
  8145                           ;standbyMode.c: 1077: break;
  8146                           
  8147                           ;standbyMode.c: 1076: count = 3;
  8148                           
  8149                           ;standbyMode.c: 1075: case 17:
  8150                           
  8151                           ;standbyMode.c: 1072: break;
  8152                           
  8153                           ;standbyMode.c: 1071: count = 3;
  8154                           
  8155                           ;standbyMode.c: 1070: case 18:
  8156                           
  8157                           ;standbyMode.c: 1067: break;
  8158                           
  8159                           ;standbyMode.c: 1066: count = 3;
  8160  00C976  0E00               	movlw	0
  8161  00C978  6E06               	movwf	get_digits@count+1,c
  8162  00C97A  0E03               	movlw	3
  8163  00C97C  D7F6               	goto	L42
  8164  00C97E                     
  8165                           ;standbyMode.c: 1121: count = 4;
  8166                           
  8167                           ;standbyMode.c: 1120: case 43:
  8168                           
  8169                           ;standbyMode.c: 1117: break;
  8170                           
  8171                           ;standbyMode.c: 1116: count = 4;
  8172                           
  8173                           ;standbyMode.c: 1115: case 39:
  8174                           
  8175                           ;standbyMode.c: 1112: break;
  8176                           
  8177                           ;standbyMode.c: 1111: count = 4;
  8178                           
  8179                           ;standbyMode.c: 1110: case 34:
  8180                           
  8181                           ;standbyMode.c: 1107: break;
  8182                           
  8183                           ;standbyMode.c: 1106: count = 4;
  8184                           
  8185                           ;standbyMode.c: 1105: case 29:
  8186                           
  8187                           ;standbyMode.c: 1102: break;
  8188                           
  8189                           ;standbyMode.c: 1101: count = 4;
  8190  00C97E  0E00               	movlw	0
  8191  00C980  6E06               	movwf	get_digits@count+1,c
  8192  00C982  0E04               	movlw	4
  8193  00C984  D7F2               	goto	L42
  8194  00C986                     
  8195                           ;standbyMode.c: 1126: count = 0;
  8196  00C986  0E00               	movlw	0
  8197  00C988  6E06               	movwf	get_digits@count+1,c
  8198  00C98A  0E00               	movlw	0
  8199  00C98C  D7EE               	goto	L42
  8200  00C98E                     l485:
  8201  00C98E  C001  F003         	movff	get_digits@sum,??_get_digits
  8202  00C992  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  8203                           
  8204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8205                           ; Switch size 1, requested type "space"
  8206                           ; Number of cases is 1, Range of values is 0 to 0
  8207                           ; switch strategies available:
  8208                           ; Name         Instructions Cycles
  8209                           ; simple_byte            4     3 (average)
  8210                           ;	Chosen strategy is simple_byte
  8211  00C996  5004               	movf	??_get_digits+1,w,c
  8212  00C998  0A00               	xorlw	0	; case 0
  8213  00C99A  A4D8               	btfss	status,2,c
  8214  00C99C  D7F4               	goto	l505
  8215                           
  8216                           ; Switch size 1, requested type "space"
  8217                           ; Number of cases is 18, Range of values is 3 to 43
  8218                           ; switch strategies available:
  8219                           ; Name         Instructions Cycles
  8220                           ; simple_byte           55    28 (average)
  8221                           ;	Chosen strategy is simple_byte
  8222  00C99E  5003               	movf	??_get_digits,w,c
  8223  00C9A0  0A03               	xorlw	3	; case 3
  8224  00C9A2  B4D8               	btfsc	status,2,c
  8225  00C9A4  D7DF               	goto	l486
  8226  00C9A6  0A04               	xorlw	4	; case 7
  8227  00C9A8  B4D8               	btfsc	status,2,c
  8228  00C9AA  D7DC               	goto	l486
  8229  00C9AC  0A0D               	xorlw	13	; case 10
  8230  00C9AE  B4D8               	btfsc	status,2,c
  8231  00C9B0  D7DE               	goto	l491
  8232  00C9B2  0A06               	xorlw	6	; case 12
  8233  00C9B4  B4D8               	btfsc	status,2,c
  8234  00C9B6  D7D6               	goto	l486
  8235  00C9B8  0A01               	xorlw	1	; case 13
  8236  00C9BA  B4D8               	btfsc	status,2,c
  8237  00C9BC  D7DC               	goto	l493
  8238  00C9BE  0A02               	xorlw	2	; case 15
  8239  00C9C0  B4D8               	btfsc	status,2,c
  8240  00C9C2  D7D5               	goto	l491
  8241  00C9C4  0A1E               	xorlw	30	; case 17
  8242  00C9C6  B4D8               	btfsc	status,2,c
  8243  00C9C8  D7D6               	goto	l493
  8244  00C9CA  0A03               	xorlw	3	; case 18
  8245  00C9CC  B4D8               	btfsc	status,2,c
  8246  00C9CE  D7D3               	goto	l493
  8247  00C9D0  0A01               	xorlw	1	; case 19
  8248  00C9D2  B4D8               	btfsc	status,2,c
  8249  00C9D4  D7CC               	goto	l491
  8250  00C9D6  0A05               	xorlw	5	; case 22
  8251  00C9D8  B4D8               	btfsc	status,2,c
  8252  00C9DA  D7CD               	goto	l493
  8253  00C9DC  0A0F               	xorlw	15	; case 25
  8254  00C9DE  B4D8               	btfsc	status,2,c
  8255  00C9E0  D7CE               	goto	l500
  8256  00C9E2  0A03               	xorlw	3	; case 26
  8257  00C9E4  B4D8               	btfsc	status,2,c
  8258  00C9E6  D7C7               	goto	l493
  8259  00C9E8  0A01               	xorlw	1	; case 27
  8260  00C9EA  B4D8               	btfsc	status,2,c
  8261  00C9EC  D7C4               	goto	l493
  8262  00C9EE  0A06               	xorlw	6	; case 29
  8263  00C9F0  B4D8               	btfsc	status,2,c
  8264  00C9F2  D7C5               	goto	l500
  8265  00C9F4  0A02               	xorlw	2	; case 31
  8266  00C9F6  B4D8               	btfsc	status,2,c
  8267  00C9F8  D7BE               	goto	l493
  8268  00C9FA  0A3D               	xorlw	61	; case 34
  8269  00C9FC  B4D8               	btfsc	status,2,c
  8270  00C9FE  D7BF               	goto	l500
  8271  00CA00  0A05               	xorlw	5	; case 39
  8272  00CA02  B4D8               	btfsc	status,2,c
  8273  00CA04  D7BC               	goto	l500
  8274  00CA06  0A0C               	xorlw	12	; case 43
  8275  00CA08  B4D8               	btfsc	status,2,c
  8276  00CA0A  D7B9               	goto	l500
  8277  00CA0C  D7BC               	goto	l505
  8278  00CA0E                     l487:
  8279                           
  8280                           ;standbyMode.c: 1129: return count;
  8281  00CA0E  C005  F001         	movff	get_digits@count,?_get_digits
  8282  00CA12  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  8283  00CA16  0012               	return		;funcret
  8284  00CA18                     __end_of_get_digits:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           plusw1	equ	0xFE3
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           plusw2	equ	0xFDB
  8302                           fsr2h	equ	0xFDA
  8303                           fsr2l	equ	0xFD9
  8304                           status	equ	0xFD8
  8305                           
  8306 ;; *************** function _check_food *****************
  8307 ;; Defined at:
  8308 ;;		line 91 in file "standbyMode.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  sum             2    0[COMRAM] unsigned int 
  8311 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  8312 ;;		 -> food_press@foodTable(8), 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;  returnValue     2    6[COMRAM] unsigned int 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  2    0[COMRAM] unsigned int 
  8317 ;; Registers used:
  8318 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;Total ram usage:        8 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_food_press
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text16
  8338  00E5AC                     __ptext16:
  8339                           	opt stack 0
  8340  00E5AC                     _check_food:
  8341                           	opt stack 28
  8342                           
  8343                           ;standbyMode.c: 92: unsigned int returnValue = 0;
  8344                           
  8345                           ;incstack = 0
  8346  00E5AC  0E00               	movlw	0
  8347  00E5AE  6E08               	movwf	check_food@returnValue+1,c
  8348  00E5B0  0E00               	movlw	0
  8349  00E5B2  6E07               	movwf	check_food@returnValue,c
  8350                           
  8351                           ;standbyMode.c: 94: switch(sum){
  8352  00E5B4  EFEB  F077         	goto	l208
  8353  00E5B8                     
  8354                           ;standbyMode.c: 97: if (foodInput[0] == 1){
  8355  00E5B8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8356  00E5BC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8357  00E5C0  04DE               	decf	postinc2,w,c
  8358  00E5C2  10DE               	iorwf	postinc2,w,c
  8359  00E5C4  A4D8               	btfss	status,2,c
  8360  00E5C6  D005               	goto	l210
  8361                           
  8362                           ;standbyMode.c: 98: returnValue = 1;
  8363  00E5C8  0E00               	movlw	0
  8364  00E5CA  6E08               	movwf	check_food@returnValue+1,c
  8365  00E5CC  0E01               	movlw	1
  8366  00E5CE  EFE9  F077         	goto	L87
  8367  00E5D2                     l210:
  8368                           
  8369                           ;standbyMode.c: 100: else if (foodInput[0] == 2){
  8370  00E5D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8371  00E5D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8372  00E5DA  0E02               	movlw	2
  8373  00E5DC  18DE               	xorwf	postinc2,w,c
  8374  00E5DE  10DE               	iorwf	postinc2,w,c
  8375  00E5E0  A4D8               	btfss	status,2,c
  8376  00E5E2  EF2F  F078         	goto	l213
  8377                           
  8378                           ;standbyMode.c: 101: returnValue = 2;
  8379  00E5E6  0E00               	movlw	0
  8380  00E5E8  6E08               	movwf	check_food@returnValue+1,c
  8381  00E5EA  0E02               	movlw	2
  8382  00E5EC  EFE9  F077         	goto	L87
  8383  00E5F0                     
  8384                           ;standbyMode.c: 107: if (foodInput[0] == 1){
  8385  00E5F0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8386  00E5F4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8387  00E5F8  04DE               	decf	postinc2,w,c
  8388  00E5FA  10DE               	iorwf	postinc2,w,c
  8389  00E5FC  A4D8               	btfss	status,2,c
  8390  00E5FE  D005               	goto	l215
  8391                           
  8392                           ;standbyMode.c: 108: returnValue = 3;
  8393  00E600  0E00               	movlw	0
  8394  00E602  6E08               	movwf	check_food@returnValue+1,c
  8395  00E604  0E03               	movlw	3
  8396  00E606  EFE9  F077         	goto	L87
  8397  00E60A                     l215:
  8398                           
  8399                           ;standbyMode.c: 110: else if (foodInput[0] == 2){
  8400  00E60A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8401  00E60E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8402  00E612  0E02               	movlw	2
  8403  00E614  18DE               	xorwf	postinc2,w,c
  8404  00E616  10DE               	iorwf	postinc2,w,c
  8405  00E618  A4D8               	btfss	status,2,c
  8406  00E61A  EF2F  F078         	goto	l213
  8407                           
  8408                           ;standbyMode.c: 111: returnValue = 4;
  8409  00E61E  0E00               	movlw	0
  8410  00E620  6E08               	movwf	check_food@returnValue+1,c
  8411  00E622  0E04               	movlw	4
  8412  00E624  EFE9  F077         	goto	L87
  8413  00E628                     
  8414                           ;standbyMode.c: 117: if (foodInput[0] == 1){
  8415  00E628  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8416  00E62C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8417  00E630  04DE               	decf	postinc2,w,c
  8418  00E632  10DE               	iorwf	postinc2,w,c
  8419  00E634  A4D8               	btfss	status,2,c
  8420  00E636  D005               	goto	l219
  8421                           
  8422                           ;standbyMode.c: 118: returnValue = 5;
  8423  00E638  0E00               	movlw	0
  8424  00E63A  6E08               	movwf	check_food@returnValue+1,c
  8425  00E63C  0E05               	movlw	5
  8426  00E63E  EFE9  F077         	goto	L87
  8427  00E642                     l219:
  8428                           
  8429                           ;standbyMode.c: 120: else if (foodInput[0] == 2){
  8430  00E642  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8431  00E646  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8432  00E64A  0E02               	movlw	2
  8433  00E64C  18DE               	xorwf	postinc2,w,c
  8434  00E64E  10DE               	iorwf	postinc2,w,c
  8435  00E650  A4D8               	btfss	status,2,c
  8436  00E652  D005               	goto	l221
  8437                           
  8438                           ;standbyMode.c: 121: returnValue = 6;
  8439  00E654  0E00               	movlw	0
  8440  00E656  6E08               	movwf	check_food@returnValue+1,c
  8441  00E658  0E06               	movlw	6
  8442  00E65A  EFE9  F077         	goto	L87
  8443  00E65E                     l221:
  8444                           
  8445                           ;standbyMode.c: 123: else if (foodInput[0] == 3){
  8446  00E65E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8447  00E662  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8448  00E666  0E03               	movlw	3
  8449  00E668  18DE               	xorwf	postinc2,w,c
  8450  00E66A  10DE               	iorwf	postinc2,w,c
  8451  00E66C  A4D8               	btfss	status,2,c
  8452  00E66E  EF2F  F078         	goto	l213
  8453                           
  8454                           ;standbyMode.c: 124: returnValue = 7;
  8455  00E672  0E00               	movlw	0
  8456  00E674  6E08               	movwf	check_food@returnValue+1,c
  8457  00E676  0E07               	movlw	7
  8458  00E678  EFE9  F077         	goto	L87
  8459  00E67C                     
  8460                           ;standbyMode.c: 130: if (foodInput[0] == 1 && foodInput[1] == 1){
  8461  00E67C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8462  00E680  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8463  00E684  04DE               	decf	postinc2,w,c
  8464  00E686  10DE               	iorwf	postinc2,w,c
  8465  00E688  A4D8               	btfss	status,2,c
  8466  00E68A  D00F               	goto	l225
  8467  00E68C  EE20 F002          	lfsr	2,2
  8468  00E690  5003               	movf	check_food@foodInput,w,c
  8469  00E692  26D9               	addwf	fsr2l,f,c
  8470  00E694  5004               	movf	check_food@foodInput+1,w,c
  8471  00E696  22DA               	addwfc	fsr2h,f,c
  8472  00E698  04DE               	decf	postinc2,w,c
  8473  00E69A  10DE               	iorwf	postinc2,w,c
  8474  00E69C  A4D8               	btfss	status,2,c
  8475  00E69E  D005               	goto	l225
  8476                           
  8477                           ;standbyMode.c: 131: returnValue = 8;
  8478  00E6A0  0E00               	movlw	0
  8479  00E6A2  6E08               	movwf	check_food@returnValue+1,c
  8480  00E6A4  0E08               	movlw	8
  8481  00E6A6  EFE9  F077         	goto	L87
  8482  00E6AA                     l225:
  8483                           
  8484                           ;standbyMode.c: 133: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8485  00E6AA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8486  00E6AE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8487  00E6B2  04DE               	decf	postinc2,w,c
  8488  00E6B4  10DE               	iorwf	postinc2,w,c
  8489  00E6B6  A4D8               	btfss	status,2,c
  8490  00E6B8  D010               	goto	l227
  8491  00E6BA  EE20 F002          	lfsr	2,2
  8492  00E6BE  5003               	movf	check_food@foodInput,w,c
  8493  00E6C0  26D9               	addwf	fsr2l,f,c
  8494  00E6C2  5004               	movf	check_food@foodInput+1,w,c
  8495  00E6C4  22DA               	addwfc	fsr2h,f,c
  8496  00E6C6  0E02               	movlw	2
  8497  00E6C8  18DE               	xorwf	postinc2,w,c
  8498  00E6CA  10DE               	iorwf	postinc2,w,c
  8499  00E6CC  A4D8               	btfss	status,2,c
  8500  00E6CE  D005               	goto	l227
  8501                           
  8502                           ;standbyMode.c: 134: returnValue = 9;
  8503  00E6D0  0E00               	movlw	0
  8504  00E6D2  6E08               	movwf	check_food@returnValue+1,c
  8505  00E6D4  0E09               	movlw	9
  8506  00E6D6  EFE9  F077         	goto	L87
  8507  00E6DA                     l227:
  8508                           
  8509                           ;standbyMode.c: 136: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8510  00E6DA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8511  00E6DE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8512  00E6E2  0E02               	movlw	2
  8513  00E6E4  18DE               	xorwf	postinc2,w,c
  8514  00E6E6  10DE               	iorwf	postinc2,w,c
  8515  00E6E8  A4D8               	btfss	status,2,c
  8516  00E6EA  D00F               	goto	l229
  8517  00E6EC  EE20 F002          	lfsr	2,2
  8518  00E6F0  5003               	movf	check_food@foodInput,w,c
  8519  00E6F2  26D9               	addwf	fsr2l,f,c
  8520  00E6F4  5004               	movf	check_food@foodInput+1,w,c
  8521  00E6F6  22DA               	addwfc	fsr2h,f,c
  8522  00E6F8  04DE               	decf	postinc2,w,c
  8523  00E6FA  10DE               	iorwf	postinc2,w,c
  8524  00E6FC  A4D8               	btfss	status,2,c
  8525  00E6FE  D005               	goto	l229
  8526                           
  8527                           ;standbyMode.c: 137: returnValue = 10;
  8528  00E700  0E00               	movlw	0
  8529  00E702  6E08               	movwf	check_food@returnValue+1,c
  8530  00E704  0E0A               	movlw	10
  8531  00E706  EFE9  F077         	goto	L87
  8532  00E70A                     l229:
  8533                           
  8534                           ;standbyMode.c: 139: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8535  00E70A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8536  00E70E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8537  00E712  0E02               	movlw	2
  8538  00E714  18DE               	xorwf	postinc2,w,c
  8539  00E716  10DE               	iorwf	postinc2,w,c
  8540  00E718  A4D8               	btfss	status,2,c
  8541  00E71A  EF2F  F078         	goto	l213
  8542  00E71E  EE20 F002          	lfsr	2,2
  8543  00E722  5003               	movf	check_food@foodInput,w,c
  8544  00E724  26D9               	addwf	fsr2l,f,c
  8545  00E726  5004               	movf	check_food@foodInput+1,w,c
  8546  00E728  22DA               	addwfc	fsr2h,f,c
  8547  00E72A  0E02               	movlw	2
  8548  00E72C  18DE               	xorwf	postinc2,w,c
  8549  00E72E  10DE               	iorwf	postinc2,w,c
  8550  00E730  A4D8               	btfss	status,2,c
  8551  00E732  EF2F  F078         	goto	l213
  8552                           
  8553                           ;standbyMode.c: 140: returnValue = 11;
  8554  00E736  0E00               	movlw	0
  8555  00E738  6E08               	movwf	check_food@returnValue+1,c
  8556  00E73A  0E0B               	movlw	11
  8557  00E73C  EFE9  F077         	goto	L87
  8558  00E740                     
  8559                           ;standbyMode.c: 146: if (foodInput[0] == 1 && foodInput[1] == 1){
  8560  00E740  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8561  00E744  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8562  00E748  04DE               	decf	postinc2,w,c
  8563  00E74A  10DE               	iorwf	postinc2,w,c
  8564  00E74C  A4D8               	btfss	status,2,c
  8565  00E74E  D00F               	goto	l233
  8566  00E750  EE20 F002          	lfsr	2,2
  8567  00E754  5003               	movf	check_food@foodInput,w,c
  8568  00E756  26D9               	addwf	fsr2l,f,c
  8569  00E758  5004               	movf	check_food@foodInput+1,w,c
  8570  00E75A  22DA               	addwfc	fsr2h,f,c
  8571  00E75C  04DE               	decf	postinc2,w,c
  8572  00E75E  10DE               	iorwf	postinc2,w,c
  8573  00E760  A4D8               	btfss	status,2,c
  8574  00E762  D005               	goto	l233
  8575                           
  8576                           ;standbyMode.c: 147: returnValue = 12;
  8577  00E764  0E00               	movlw	0
  8578  00E766  6E08               	movwf	check_food@returnValue+1,c
  8579  00E768  0E0C               	movlw	12
  8580  00E76A  EFE9  F077         	goto	L87
  8581  00E76E                     l233:
  8582                           
  8583                           ;standbyMode.c: 149: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8584  00E76E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8585  00E772  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8586  00E776  04DE               	decf	postinc2,w,c
  8587  00E778  10DE               	iorwf	postinc2,w,c
  8588  00E77A  A4D8               	btfss	status,2,c
  8589  00E77C  D010               	goto	l235
  8590  00E77E  EE20 F002          	lfsr	2,2
  8591  00E782  5003               	movf	check_food@foodInput,w,c
  8592  00E784  26D9               	addwf	fsr2l,f,c
  8593  00E786  5004               	movf	check_food@foodInput+1,w,c
  8594  00E788  22DA               	addwfc	fsr2h,f,c
  8595  00E78A  0E02               	movlw	2
  8596  00E78C  18DE               	xorwf	postinc2,w,c
  8597  00E78E  10DE               	iorwf	postinc2,w,c
  8598  00E790  A4D8               	btfss	status,2,c
  8599  00E792  D005               	goto	l235
  8600                           
  8601                           ;standbyMode.c: 150: returnValue = 13;
  8602  00E794  0E00               	movlw	0
  8603  00E796  6E08               	movwf	check_food@returnValue+1,c
  8604  00E798  0E0D               	movlw	13
  8605  00E79A  EFE9  F077         	goto	L87
  8606  00E79E                     l235:
  8607                           
  8608                           ;standbyMode.c: 152: else if (foodInput[0] == 1 && foodInput[1] == 3){
  8609  00E79E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8610  00E7A2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8611  00E7A6  04DE               	decf	postinc2,w,c
  8612  00E7A8  10DE               	iorwf	postinc2,w,c
  8613  00E7AA  A4D8               	btfss	status,2,c
  8614  00E7AC  D010               	goto	l237
  8615  00E7AE  EE20 F002          	lfsr	2,2
  8616  00E7B2  5003               	movf	check_food@foodInput,w,c
  8617  00E7B4  26D9               	addwf	fsr2l,f,c
  8618  00E7B6  5004               	movf	check_food@foodInput+1,w,c
  8619  00E7B8  22DA               	addwfc	fsr2h,f,c
  8620  00E7BA  0E03               	movlw	3
  8621  00E7BC  18DE               	xorwf	postinc2,w,c
  8622  00E7BE  10DE               	iorwf	postinc2,w,c
  8623  00E7C0  A4D8               	btfss	status,2,c
  8624  00E7C2  D005               	goto	l237
  8625                           
  8626                           ;standbyMode.c: 153: returnValue = 14;
  8627  00E7C4  0E00               	movlw	0
  8628  00E7C6  6E08               	movwf	check_food@returnValue+1,c
  8629  00E7C8  0E0E               	movlw	14
  8630  00E7CA  EFE9  F077         	goto	L87
  8631  00E7CE                     l237:
  8632                           
  8633                           ;standbyMode.c: 155: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8634  00E7CE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8635  00E7D2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8636  00E7D6  0E02               	movlw	2
  8637  00E7D8  18DE               	xorwf	postinc2,w,c
  8638  00E7DA  10DE               	iorwf	postinc2,w,c
  8639  00E7DC  A4D8               	btfss	status,2,c
  8640  00E7DE  D00E               	goto	l239
  8641  00E7E0  EE20 F002          	lfsr	2,2
  8642  00E7E4  5003               	movf	check_food@foodInput,w,c
  8643  00E7E6  26D9               	addwf	fsr2l,f,c
  8644  00E7E8  5004               	movf	check_food@foodInput+1,w,c
  8645  00E7EA  22DA               	addwfc	fsr2h,f,c
  8646  00E7EC  04DE               	decf	postinc2,w,c
  8647  00E7EE  10DE               	iorwf	postinc2,w,c
  8648  00E7F0  A4D8               	btfss	status,2,c
  8649  00E7F2  D004               	goto	l239
  8650                           
  8651                           ;standbyMode.c: 156: returnValue = 15;
  8652  00E7F4  0E00               	movlw	0
  8653  00E7F6  6E08               	movwf	check_food@returnValue+1,c
  8654  00E7F8  0E0F               	movlw	15
  8655  00E7FA  D3EB               	goto	L87
  8656  00E7FC                     l239:
  8657                           
  8658                           ;standbyMode.c: 158: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8659  00E7FC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8660  00E800  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8661  00E804  0E02               	movlw	2
  8662  00E806  18DE               	xorwf	postinc2,w,c
  8663  00E808  10DE               	iorwf	postinc2,w,c
  8664  00E80A  A4D8               	btfss	status,2,c
  8665  00E80C  EF2F  F078         	goto	l213
  8666  00E810  EE20 F002          	lfsr	2,2
  8667  00E814  5003               	movf	check_food@foodInput,w,c
  8668  00E816  26D9               	addwf	fsr2l,f,c
  8669  00E818  5004               	movf	check_food@foodInput+1,w,c
  8670  00E81A  22DA               	addwfc	fsr2h,f,c
  8671  00E81C  0E02               	movlw	2
  8672  00E81E  18DE               	xorwf	postinc2,w,c
  8673  00E820  10DE               	iorwf	postinc2,w,c
  8674  00E822  A4D8               	btfss	status,2,c
  8675  00E824  EF2F  F078         	goto	l213
  8676                           
  8677                           ;standbyMode.c: 159: returnValue = 16;
  8678  00E828  0E00               	movlw	0
  8679  00E82A  6E08               	movwf	check_food@returnValue+1,c
  8680  00E82C  0E10               	movlw	16
  8681  00E82E  D3D1               	goto	L87
  8682  00E830                     
  8683                           ;standbyMode.c: 165: if (foodInput[0] == 1 && foodInput[1] == 1){
  8684  00E830  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8685  00E834  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8686  00E838  04DE               	decf	postinc2,w,c
  8687  00E83A  10DE               	iorwf	postinc2,w,c
  8688  00E83C  A4D8               	btfss	status,2,c
  8689  00E83E  D00E               	goto	l243
  8690  00E840  EE20 F002          	lfsr	2,2
  8691  00E844  5003               	movf	check_food@foodInput,w,c
  8692  00E846  26D9               	addwf	fsr2l,f,c
  8693  00E848  5004               	movf	check_food@foodInput+1,w,c
  8694  00E84A  22DA               	addwfc	fsr2h,f,c
  8695  00E84C  04DE               	decf	postinc2,w,c
  8696  00E84E  10DE               	iorwf	postinc2,w,c
  8697  00E850  A4D8               	btfss	status,2,c
  8698  00E852  D004               	goto	l243
  8699                           
  8700                           ;standbyMode.c: 166: returnValue = 17;
  8701  00E854  0E00               	movlw	0
  8702  00E856  6E08               	movwf	check_food@returnValue+1,c
  8703  00E858  0E11               	movlw	17
  8704  00E85A  D3BB               	goto	L87
  8705  00E85C                     l243:
  8706                           
  8707                           ;standbyMode.c: 168: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8708  00E85C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8709  00E860  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8710  00E864  04DE               	decf	postinc2,w,c
  8711  00E866  10DE               	iorwf	postinc2,w,c
  8712  00E868  A4D8               	btfss	status,2,c
  8713  00E86A  D00F               	goto	l245
  8714  00E86C  EE20 F002          	lfsr	2,2
  8715  00E870  5003               	movf	check_food@foodInput,w,c
  8716  00E872  26D9               	addwf	fsr2l,f,c
  8717  00E874  5004               	movf	check_food@foodInput+1,w,c
  8718  00E876  22DA               	addwfc	fsr2h,f,c
  8719  00E878  0E02               	movlw	2
  8720  00E87A  18DE               	xorwf	postinc2,w,c
  8721  00E87C  10DE               	iorwf	postinc2,w,c
  8722  00E87E  A4D8               	btfss	status,2,c
  8723  00E880  D004               	goto	l245
  8724                           
  8725                           ;standbyMode.c: 169: returnValue = 18;
  8726  00E882  0E00               	movlw	0
  8727  00E884  6E08               	movwf	check_food@returnValue+1,c
  8728  00E886  0E12               	movlw	18
  8729  00E888  D3A4               	goto	L87
  8730  00E88A                     l245:
  8731                           
  8732                           ;standbyMode.c: 171: else if (foodInput[0] == 1 && foodInput[1] == 3){
  8733  00E88A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8734  00E88E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8735  00E892  04DE               	decf	postinc2,w,c
  8736  00E894  10DE               	iorwf	postinc2,w,c
  8737  00E896  A4D8               	btfss	status,2,c
  8738  00E898  D00F               	goto	l247
  8739  00E89A  EE20 F002          	lfsr	2,2
  8740  00E89E  5003               	movf	check_food@foodInput,w,c
  8741  00E8A0  26D9               	addwf	fsr2l,f,c
  8742  00E8A2  5004               	movf	check_food@foodInput+1,w,c
  8743  00E8A4  22DA               	addwfc	fsr2h,f,c
  8744  00E8A6  0E03               	movlw	3
  8745  00E8A8  18DE               	xorwf	postinc2,w,c
  8746  00E8AA  10DE               	iorwf	postinc2,w,c
  8747  00E8AC  A4D8               	btfss	status,2,c
  8748  00E8AE  D004               	goto	l247
  8749                           
  8750                           ;standbyMode.c: 172: returnValue = 19;
  8751  00E8B0  0E00               	movlw	0
  8752  00E8B2  6E08               	movwf	check_food@returnValue+1,c
  8753  00E8B4  0E13               	movlw	19
  8754  00E8B6  D38D               	goto	L87
  8755  00E8B8                     l247:
  8756                           
  8757                           ;standbyMode.c: 174: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8758  00E8B8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8759  00E8BC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8760  00E8C0  0E02               	movlw	2
  8761  00E8C2  18DE               	xorwf	postinc2,w,c
  8762  00E8C4  10DE               	iorwf	postinc2,w,c
  8763  00E8C6  A4D8               	btfss	status,2,c
  8764  00E8C8  D00E               	goto	l249
  8765  00E8CA  EE20 F002          	lfsr	2,2
  8766  00E8CE  5003               	movf	check_food@foodInput,w,c
  8767  00E8D0  26D9               	addwf	fsr2l,f,c
  8768  00E8D2  5004               	movf	check_food@foodInput+1,w,c
  8769  00E8D4  22DA               	addwfc	fsr2h,f,c
  8770  00E8D6  04DE               	decf	postinc2,w,c
  8771  00E8D8  10DE               	iorwf	postinc2,w,c
  8772  00E8DA  A4D8               	btfss	status,2,c
  8773  00E8DC  D004               	goto	l249
  8774                           
  8775                           ;standbyMode.c: 175: returnValue = 20;
  8776  00E8DE  0E00               	movlw	0
  8777  00E8E0  6E08               	movwf	check_food@returnValue+1,c
  8778  00E8E2  0E14               	movlw	20
  8779  00E8E4  D376               	goto	L87
  8780  00E8E6                     l249:
  8781                           
  8782                           ;standbyMode.c: 177: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8783  00E8E6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8784  00E8EA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8785  00E8EE  0E02               	movlw	2
  8786  00E8F0  18DE               	xorwf	postinc2,w,c
  8787  00E8F2  10DE               	iorwf	postinc2,w,c
  8788  00E8F4  A4D8               	btfss	status,2,c
  8789  00E8F6  D3B3               	goto	l213
  8790  00E8F8  EE20 F002          	lfsr	2,2
  8791  00E8FC  5003               	movf	check_food@foodInput,w,c
  8792  00E8FE  26D9               	addwf	fsr2l,f,c
  8793  00E900  5004               	movf	check_food@foodInput+1,w,c
  8794  00E902  22DA               	addwfc	fsr2h,f,c
  8795  00E904  0E02               	movlw	2
  8796  00E906  18DE               	xorwf	postinc2,w,c
  8797  00E908  10DE               	iorwf	postinc2,w,c
  8798  00E90A  A4D8               	btfss	status,2,c
  8799  00E90C  D3A8               	goto	l213
  8800                           
  8801                           ;standbyMode.c: 178: returnValue = 21;
  8802  00E90E  0E00               	movlw	0
  8803  00E910  6E08               	movwf	check_food@returnValue+1,c
  8804  00E912  0E15               	movlw	21
  8805  00E914  D35E               	goto	L87
  8806  00E916                     
  8807                           ;standbyMode.c: 184: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8808  00E916  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8809  00E91A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8810  00E91E  04DE               	decf	postinc2,w,c
  8811  00E920  10DE               	iorwf	postinc2,w,c
  8812  00E922  A4D8               	btfss	status,2,c
  8813  00E924  D018               	goto	l253
  8814  00E926  EE20 F002          	lfsr	2,2
  8815  00E92A  5003               	movf	check_food@foodInput,w,c
  8816  00E92C  26D9               	addwf	fsr2l,f,c
  8817  00E92E  5004               	movf	check_food@foodInput+1,w,c
  8818  00E930  22DA               	addwfc	fsr2h,f,c
  8819  00E932  04DE               	decf	postinc2,w,c
  8820  00E934  10DE               	iorwf	postinc2,w,c
  8821  00E936  A4D8               	btfss	status,2,c
  8822  00E938  D00E               	goto	l253
  8823  00E93A  EE20 F004          	lfsr	2,4
  8824  00E93E  5003               	movf	check_food@foodInput,w,c
  8825  00E940  26D9               	addwf	fsr2l,f,c
  8826  00E942  5004               	movf	check_food@foodInput+1,w,c
  8827  00E944  22DA               	addwfc	fsr2h,f,c
  8828  00E946  04DE               	decf	postinc2,w,c
  8829  00E948  10DE               	iorwf	postinc2,w,c
  8830  00E94A  A4D8               	btfss	status,2,c
  8831  00E94C  D004               	goto	l253
  8832                           
  8833                           ;standbyMode.c: 185: returnValue = 22;
  8834  00E94E  0E00               	movlw	0
  8835  00E950  6E08               	movwf	check_food@returnValue+1,c
  8836  00E952  0E16               	movlw	22
  8837  00E954  D33E               	goto	L87
  8838  00E956                     l253:
  8839                           
  8840                           ;standbyMode.c: 187: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8841  00E956  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8842  00E95A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8843  00E95E  04DE               	decf	postinc2,w,c
  8844  00E960  10DE               	iorwf	postinc2,w,c
  8845  00E962  A4D8               	btfss	status,2,c
  8846  00E964  D37C               	goto	l213
  8847  00E966  EE20 F002          	lfsr	2,2
  8848  00E96A  5003               	movf	check_food@foodInput,w,c
  8849  00E96C  26D9               	addwf	fsr2l,f,c
  8850  00E96E  5004               	movf	check_food@foodInput+1,w,c
  8851  00E970  22DA               	addwfc	fsr2h,f,c
  8852  00E972  04DE               	decf	postinc2,w,c
  8853  00E974  10DE               	iorwf	postinc2,w,c
  8854  00E976  A4D8               	btfss	status,2,c
  8855  00E978  D372               	goto	l213
  8856  00E97A  EE20 F004          	lfsr	2,4
  8857  00E97E  5003               	movf	check_food@foodInput,w,c
  8858  00E980  26D9               	addwf	fsr2l,f,c
  8859  00E982  5004               	movf	check_food@foodInput+1,w,c
  8860  00E984  22DA               	addwfc	fsr2h,f,c
  8861  00E986  0E02               	movlw	2
  8862  00E988  18DE               	xorwf	postinc2,w,c
  8863  00E98A  10DE               	iorwf	postinc2,w,c
  8864  00E98C  A4D8               	btfss	status,2,c
  8865  00E98E  D367               	goto	l213
  8866                           
  8867                           ;standbyMode.c: 188: returnValue = 23;
  8868  00E990  0E00               	movlw	0
  8869  00E992  6E08               	movwf	check_food@returnValue+1,c
  8870  00E994  0E17               	movlw	23
  8871  00E996  D31D               	goto	L87
  8872  00E998                     
  8873                           ;standbyMode.c: 194: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8874  00E998  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8875  00E99C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8876  00E9A0  04DE               	decf	postinc2,w,c
  8877  00E9A2  10DE               	iorwf	postinc2,w,c
  8878  00E9A4  A4D8               	btfss	status,2,c
  8879  00E9A6  D018               	goto	l257
  8880  00E9A8  EE20 F002          	lfsr	2,2
  8881  00E9AC  5003               	movf	check_food@foodInput,w,c
  8882  00E9AE  26D9               	addwf	fsr2l,f,c
  8883  00E9B0  5004               	movf	check_food@foodInput+1,w,c
  8884  00E9B2  22DA               	addwfc	fsr2h,f,c
  8885  00E9B4  04DE               	decf	postinc2,w,c
  8886  00E9B6  10DE               	iorwf	postinc2,w,c
  8887  00E9B8  A4D8               	btfss	status,2,c
  8888  00E9BA  D00E               	goto	l257
  8889  00E9BC  EE20 F004          	lfsr	2,4
  8890  00E9C0  5003               	movf	check_food@foodInput,w,c
  8891  00E9C2  26D9               	addwf	fsr2l,f,c
  8892  00E9C4  5004               	movf	check_food@foodInput+1,w,c
  8893  00E9C6  22DA               	addwfc	fsr2h,f,c
  8894  00E9C8  04DE               	decf	postinc2,w,c
  8895  00E9CA  10DE               	iorwf	postinc2,w,c
  8896  00E9CC  A4D8               	btfss	status,2,c
  8897  00E9CE  D004               	goto	l257
  8898                           
  8899                           ;standbyMode.c: 195: returnValue = 24;
  8900  00E9D0  0E00               	movlw	0
  8901  00E9D2  6E08               	movwf	check_food@returnValue+1,c
  8902  00E9D4  0E18               	movlw	24
  8903  00E9D6  D2FD               	goto	L87
  8904  00E9D8                     l257:
  8905                           
  8906                           ;standbyMode.c: 197: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8907  00E9D8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8908  00E9DC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8909  00E9E0  04DE               	decf	postinc2,w,c
  8910  00E9E2  10DE               	iorwf	postinc2,w,c
  8911  00E9E4  A4D8               	btfss	status,2,c
  8912  00E9E6  D33B               	goto	l213
  8913  00E9E8  EE20 F002          	lfsr	2,2
  8914  00E9EC  5003               	movf	check_food@foodInput,w,c
  8915  00E9EE  26D9               	addwf	fsr2l,f,c
  8916  00E9F0  5004               	movf	check_food@foodInput+1,w,c
  8917  00E9F2  22DA               	addwfc	fsr2h,f,c
  8918  00E9F4  04DE               	decf	postinc2,w,c
  8919  00E9F6  10DE               	iorwf	postinc2,w,c
  8920  00E9F8  A4D8               	btfss	status,2,c
  8921  00E9FA  D331               	goto	l213
  8922  00E9FC  EE20 F004          	lfsr	2,4
  8923  00EA00  5003               	movf	check_food@foodInput,w,c
  8924  00EA02  26D9               	addwf	fsr2l,f,c
  8925  00EA04  5004               	movf	check_food@foodInput+1,w,c
  8926  00EA06  22DA               	addwfc	fsr2h,f,c
  8927  00EA08  0E02               	movlw	2
  8928  00EA0A  18DE               	xorwf	postinc2,w,c
  8929  00EA0C  10DE               	iorwf	postinc2,w,c
  8930  00EA0E  A4D8               	btfss	status,2,c
  8931  00EA10  D326               	goto	l213
  8932                           
  8933                           ;standbyMode.c: 198: returnValue = 25;
  8934  00EA12  0E00               	movlw	0
  8935  00EA14  6E08               	movwf	check_food@returnValue+1,c
  8936  00EA16  0E19               	movlw	25
  8937  00EA18  D2DC               	goto	L87
  8938  00EA1A                     
  8939                           ;standbyMode.c: 204: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8940  00EA1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8941  00EA1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8942  00EA22  04DE               	decf	postinc2,w,c
  8943  00EA24  10DE               	iorwf	postinc2,w,c
  8944  00EA26  A4D8               	btfss	status,2,c
  8945  00EA28  D018               	goto	l261
  8946  00EA2A  EE20 F002          	lfsr	2,2
  8947  00EA2E  5003               	movf	check_food@foodInput,w,c
  8948  00EA30  26D9               	addwf	fsr2l,f,c
  8949  00EA32  5004               	movf	check_food@foodInput+1,w,c
  8950  00EA34  22DA               	addwfc	fsr2h,f,c
  8951  00EA36  04DE               	decf	postinc2,w,c
  8952  00EA38  10DE               	iorwf	postinc2,w,c
  8953  00EA3A  A4D8               	btfss	status,2,c
  8954  00EA3C  D00E               	goto	l261
  8955  00EA3E  EE20 F004          	lfsr	2,4
  8956  00EA42  5003               	movf	check_food@foodInput,w,c
  8957  00EA44  26D9               	addwf	fsr2l,f,c
  8958  00EA46  5004               	movf	check_food@foodInput+1,w,c
  8959  00EA48  22DA               	addwfc	fsr2h,f,c
  8960  00EA4A  04DE               	decf	postinc2,w,c
  8961  00EA4C  10DE               	iorwf	postinc2,w,c
  8962  00EA4E  A4D8               	btfss	status,2,c
  8963  00EA50  D004               	goto	l261
  8964                           
  8965                           ;standbyMode.c: 205: returnValue = 26;
  8966  00EA52  0E00               	movlw	0
  8967  00EA54  6E08               	movwf	check_food@returnValue+1,c
  8968  00EA56  0E1A               	movlw	26
  8969  00EA58  D2BC               	goto	L87
  8970  00EA5A                     l261:
  8971                           
  8972                           ;standbyMode.c: 207: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  8973  00EA5A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8974  00EA5E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8975  00EA62  0E02               	movlw	2
  8976  00EA64  18DE               	xorwf	postinc2,w,c
  8977  00EA66  10DE               	iorwf	postinc2,w,c
  8978  00EA68  A4D8               	btfss	status,2,c
  8979  00EA6A  D2F9               	goto	l213
  8980  00EA6C  EE20 F002          	lfsr	2,2
  8981  00EA70  5003               	movf	check_food@foodInput,w,c
  8982  00EA72  26D9               	addwf	fsr2l,f,c
  8983  00EA74  5004               	movf	check_food@foodInput+1,w,c
  8984  00EA76  22DA               	addwfc	fsr2h,f,c
  8985  00EA78  04DE               	decf	postinc2,w,c
  8986  00EA7A  10DE               	iorwf	postinc2,w,c
  8987  00EA7C  A4D8               	btfss	status,2,c
  8988  00EA7E  D2EF               	goto	l213
  8989  00EA80  EE20 F004          	lfsr	2,4
  8990  00EA84  5003               	movf	check_food@foodInput,w,c
  8991  00EA86  26D9               	addwf	fsr2l,f,c
  8992  00EA88  5004               	movf	check_food@foodInput+1,w,c
  8993  00EA8A  22DA               	addwfc	fsr2h,f,c
  8994  00EA8C  04DE               	decf	postinc2,w,c
  8995  00EA8E  10DE               	iorwf	postinc2,w,c
  8996  00EA90  A4D8               	btfss	status,2,c
  8997  00EA92  D2E5               	goto	l213
  8998                           
  8999                           ;standbyMode.c: 208: returnValue = 27;
  9000  00EA94  0E00               	movlw	0
  9001  00EA96  6E08               	movwf	check_food@returnValue+1,c
  9002  00EA98  0E1B               	movlw	27
  9003  00EA9A  D29B               	goto	L87
  9004  00EA9C                     
  9005                           ;standbyMode.c: 214: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9006  00EA9C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9007  00EAA0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9008  00EAA4  04DE               	decf	postinc2,w,c
  9009  00EAA6  10DE               	iorwf	postinc2,w,c
  9010  00EAA8  A4D8               	btfss	status,2,c
  9011  00EAAA  D018               	goto	l265
  9012  00EAAC  EE20 F002          	lfsr	2,2
  9013  00EAB0  5003               	movf	check_food@foodInput,w,c
  9014  00EAB2  26D9               	addwf	fsr2l,f,c
  9015  00EAB4  5004               	movf	check_food@foodInput+1,w,c
  9016  00EAB6  22DA               	addwfc	fsr2h,f,c
  9017  00EAB8  04DE               	decf	postinc2,w,c
  9018  00EABA  10DE               	iorwf	postinc2,w,c
  9019  00EABC  A4D8               	btfss	status,2,c
  9020  00EABE  D00E               	goto	l265
  9021  00EAC0  EE20 F004          	lfsr	2,4
  9022  00EAC4  5003               	movf	check_food@foodInput,w,c
  9023  00EAC6  26D9               	addwf	fsr2l,f,c
  9024  00EAC8  5004               	movf	check_food@foodInput+1,w,c
  9025  00EACA  22DA               	addwfc	fsr2h,f,c
  9026  00EACC  04DE               	decf	postinc2,w,c
  9027  00EACE  10DE               	iorwf	postinc2,w,c
  9028  00EAD0  A4D8               	btfss	status,2,c
  9029  00EAD2  D004               	goto	l265
  9030                           
  9031                           ;standbyMode.c: 215: returnValue = 28;
  9032  00EAD4  0E00               	movlw	0
  9033  00EAD6  6E08               	movwf	check_food@returnValue+1,c
  9034  00EAD8  0E1C               	movlw	28
  9035  00EADA  D27B               	goto	L87
  9036  00EADC                     l265:
  9037                           
  9038                           ;standbyMode.c: 217: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9039  00EADC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9040  00EAE0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9041  00EAE4  04DE               	decf	postinc2,w,c
  9042  00EAE6  10DE               	iorwf	postinc2,w,c
  9043  00EAE8  A4D8               	btfss	status,2,c
  9044  00EAEA  D019               	goto	l267
  9045  00EAEC  EE20 F002          	lfsr	2,2
  9046  00EAF0  5003               	movf	check_food@foodInput,w,c
  9047  00EAF2  26D9               	addwf	fsr2l,f,c
  9048  00EAF4  5004               	movf	check_food@foodInput+1,w,c
  9049  00EAF6  22DA               	addwfc	fsr2h,f,c
  9050  00EAF8  04DE               	decf	postinc2,w,c
  9051  00EAFA  10DE               	iorwf	postinc2,w,c
  9052  00EAFC  A4D8               	btfss	status,2,c
  9053  00EAFE  D00F               	goto	l267
  9054  00EB00  EE20 F004          	lfsr	2,4
  9055  00EB04  5003               	movf	check_food@foodInput,w,c
  9056  00EB06  26D9               	addwf	fsr2l,f,c
  9057  00EB08  5004               	movf	check_food@foodInput+1,w,c
  9058  00EB0A  22DA               	addwfc	fsr2h,f,c
  9059  00EB0C  0E02               	movlw	2
  9060  00EB0E  18DE               	xorwf	postinc2,w,c
  9061  00EB10  10DE               	iorwf	postinc2,w,c
  9062  00EB12  A4D8               	btfss	status,2,c
  9063  00EB14  D004               	goto	l267
  9064                           
  9065                           ;standbyMode.c: 218: returnValue = 29;
  9066  00EB16  0E00               	movlw	0
  9067  00EB18  6E08               	movwf	check_food@returnValue+1,c
  9068  00EB1A  0E1D               	movlw	29
  9069  00EB1C  D25A               	goto	L87
  9070  00EB1E                     l267:
  9071                           
  9072                           ;standbyMode.c: 220: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9073  00EB1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9074  00EB22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9075  00EB26  04DE               	decf	postinc2,w,c
  9076  00EB28  10DE               	iorwf	postinc2,w,c
  9077  00EB2A  A4D8               	btfss	status,2,c
  9078  00EB2C  D019               	goto	l269
  9079  00EB2E  EE20 F002          	lfsr	2,2
  9080  00EB32  5003               	movf	check_food@foodInput,w,c
  9081  00EB34  26D9               	addwf	fsr2l,f,c
  9082  00EB36  5004               	movf	check_food@foodInput+1,w,c
  9083  00EB38  22DA               	addwfc	fsr2h,f,c
  9084  00EB3A  0E02               	movlw	2
  9085  00EB3C  18DE               	xorwf	postinc2,w,c
  9086  00EB3E  10DE               	iorwf	postinc2,w,c
  9087  00EB40  A4D8               	btfss	status,2,c
  9088  00EB42  D00E               	goto	l269
  9089  00EB44  EE20 F004          	lfsr	2,4
  9090  00EB48  5003               	movf	check_food@foodInput,w,c
  9091  00EB4A  26D9               	addwf	fsr2l,f,c
  9092  00EB4C  5004               	movf	check_food@foodInput+1,w,c
  9093  00EB4E  22DA               	addwfc	fsr2h,f,c
  9094  00EB50  04DE               	decf	postinc2,w,c
  9095  00EB52  10DE               	iorwf	postinc2,w,c
  9096  00EB54  A4D8               	btfss	status,2,c
  9097  00EB56  D004               	goto	l269
  9098                           
  9099                           ;standbyMode.c: 221: returnValue = 30;
  9100  00EB58  0E00               	movlw	0
  9101  00EB5A  6E08               	movwf	check_food@returnValue+1,c
  9102  00EB5C  0E1E               	movlw	30
  9103  00EB5E  D239               	goto	L87
  9104  00EB60                     l269:
  9105                           
  9106                           ;standbyMode.c: 223: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9107  00EB60  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9108  00EB64  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9109  00EB68  0E02               	movlw	2
  9110  00EB6A  18DE               	xorwf	postinc2,w,c
  9111  00EB6C  10DE               	iorwf	postinc2,w,c
  9112  00EB6E  A4D8               	btfss	status,2,c
  9113  00EB70  D276               	goto	l213
  9114  00EB72  EE20 F002          	lfsr	2,2
  9115  00EB76  5003               	movf	check_food@foodInput,w,c
  9116  00EB78  26D9               	addwf	fsr2l,f,c
  9117  00EB7A  5004               	movf	check_food@foodInput+1,w,c
  9118  00EB7C  22DA               	addwfc	fsr2h,f,c
  9119  00EB7E  04DE               	decf	postinc2,w,c
  9120  00EB80  10DE               	iorwf	postinc2,w,c
  9121  00EB82  A4D8               	btfss	status,2,c
  9122  00EB84  D26C               	goto	l213
  9123  00EB86  EE20 F004          	lfsr	2,4
  9124  00EB8A  5003               	movf	check_food@foodInput,w,c
  9125  00EB8C  26D9               	addwf	fsr2l,f,c
  9126  00EB8E  5004               	movf	check_food@foodInput+1,w,c
  9127  00EB90  22DA               	addwfc	fsr2h,f,c
  9128  00EB92  04DE               	decf	postinc2,w,c
  9129  00EB94  10DE               	iorwf	postinc2,w,c
  9130  00EB96  A4D8               	btfss	status,2,c
  9131  00EB98  D262               	goto	l213
  9132                           
  9133                           ;standbyMode.c: 224: returnValue = 31;
  9134  00EB9A  0E00               	movlw	0
  9135  00EB9C  6E08               	movwf	check_food@returnValue+1,c
  9136  00EB9E  0E1F               	movlw	31
  9137  00EBA0  D218               	goto	L87
  9138  00EBA2                     
  9139                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9140  00EBA2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9141  00EBA6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9142  00EBAA  04DE               	decf	postinc2,w,c
  9143  00EBAC  10DE               	iorwf	postinc2,w,c
  9144  00EBAE  A4D8               	btfss	status,2,c
  9145  00EBB0  D018               	goto	l273
  9146  00EBB2  EE20 F002          	lfsr	2,2
  9147  00EBB6  5003               	movf	check_food@foodInput,w,c
  9148  00EBB8  26D9               	addwf	fsr2l,f,c
  9149  00EBBA  5004               	movf	check_food@foodInput+1,w,c
  9150  00EBBC  22DA               	addwfc	fsr2h,f,c
  9151  00EBBE  04DE               	decf	postinc2,w,c
  9152  00EBC0  10DE               	iorwf	postinc2,w,c
  9153  00EBC2  A4D8               	btfss	status,2,c
  9154  00EBC4  D00E               	goto	l273
  9155  00EBC6  EE20 F004          	lfsr	2,4
  9156  00EBCA  5003               	movf	check_food@foodInput,w,c
  9157  00EBCC  26D9               	addwf	fsr2l,f,c
  9158  00EBCE  5004               	movf	check_food@foodInput+1,w,c
  9159  00EBD0  22DA               	addwfc	fsr2h,f,c
  9160  00EBD2  04DE               	decf	postinc2,w,c
  9161  00EBD4  10DE               	iorwf	postinc2,w,c
  9162  00EBD6  A4D8               	btfss	status,2,c
  9163  00EBD8  D004               	goto	l273
  9164                           
  9165                           ;standbyMode.c: 231: returnValue = 32;
  9166  00EBDA  0E00               	movlw	0
  9167  00EBDC  6E08               	movwf	check_food@returnValue+1,c
  9168  00EBDE  0E20               	movlw	32
  9169  00EBE0  D1F8               	goto	L87
  9170  00EBE2                     l273:
  9171                           
  9172                           ;standbyMode.c: 233: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9173  00EBE2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9174  00EBE6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9175  00EBEA  04DE               	decf	postinc2,w,c
  9176  00EBEC  10DE               	iorwf	postinc2,w,c
  9177  00EBEE  A4D8               	btfss	status,2,c
  9178  00EBF0  D019               	goto	l275
  9179  00EBF2  EE20 F002          	lfsr	2,2
  9180  00EBF6  5003               	movf	check_food@foodInput,w,c
  9181  00EBF8  26D9               	addwf	fsr2l,f,c
  9182  00EBFA  5004               	movf	check_food@foodInput+1,w,c
  9183  00EBFC  22DA               	addwfc	fsr2h,f,c
  9184  00EBFE  04DE               	decf	postinc2,w,c
  9185  00EC00  10DE               	iorwf	postinc2,w,c
  9186  00EC02  A4D8               	btfss	status,2,c
  9187  00EC04  D00F               	goto	l275
  9188  00EC06  EE20 F004          	lfsr	2,4
  9189  00EC0A  5003               	movf	check_food@foodInput,w,c
  9190  00EC0C  26D9               	addwf	fsr2l,f,c
  9191  00EC0E  5004               	movf	check_food@foodInput+1,w,c
  9192  00EC10  22DA               	addwfc	fsr2h,f,c
  9193  00EC12  0E02               	movlw	2
  9194  00EC14  18DE               	xorwf	postinc2,w,c
  9195  00EC16  10DE               	iorwf	postinc2,w,c
  9196  00EC18  A4D8               	btfss	status,2,c
  9197  00EC1A  D004               	goto	l275
  9198                           
  9199                           ;standbyMode.c: 234: returnValue = 33;
  9200  00EC1C  0E00               	movlw	0
  9201  00EC1E  6E08               	movwf	check_food@returnValue+1,c
  9202  00EC20  0E21               	movlw	33
  9203  00EC22  D1D7               	goto	L87
  9204  00EC24                     l275:
  9205                           
  9206                           ;standbyMode.c: 236: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9207  00EC24  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9208  00EC28  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9209  00EC2C  04DE               	decf	postinc2,w,c
  9210  00EC2E  10DE               	iorwf	postinc2,w,c
  9211  00EC30  A4D8               	btfss	status,2,c
  9212  00EC32  D019               	goto	l277
  9213  00EC34  EE20 F002          	lfsr	2,2
  9214  00EC38  5003               	movf	check_food@foodInput,w,c
  9215  00EC3A  26D9               	addwf	fsr2l,f,c
  9216  00EC3C  5004               	movf	check_food@foodInput+1,w,c
  9217  00EC3E  22DA               	addwfc	fsr2h,f,c
  9218  00EC40  0E02               	movlw	2
  9219  00EC42  18DE               	xorwf	postinc2,w,c
  9220  00EC44  10DE               	iorwf	postinc2,w,c
  9221  00EC46  A4D8               	btfss	status,2,c
  9222  00EC48  D00E               	goto	l277
  9223  00EC4A  EE20 F004          	lfsr	2,4
  9224  00EC4E  5003               	movf	check_food@foodInput,w,c
  9225  00EC50  26D9               	addwf	fsr2l,f,c
  9226  00EC52  5004               	movf	check_food@foodInput+1,w,c
  9227  00EC54  22DA               	addwfc	fsr2h,f,c
  9228  00EC56  04DE               	decf	postinc2,w,c
  9229  00EC58  10DE               	iorwf	postinc2,w,c
  9230  00EC5A  A4D8               	btfss	status,2,c
  9231  00EC5C  D004               	goto	l277
  9232                           
  9233                           ;standbyMode.c: 237: returnValue = 34;
  9234  00EC5E  0E00               	movlw	0
  9235  00EC60  6E08               	movwf	check_food@returnValue+1,c
  9236  00EC62  0E22               	movlw	34
  9237  00EC64  D1B6               	goto	L87
  9238  00EC66                     l277:
  9239                           
  9240                           ;standbyMode.c: 239: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9241  00EC66  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9242  00EC6A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9243  00EC6E  0E02               	movlw	2
  9244  00EC70  18DE               	xorwf	postinc2,w,c
  9245  00EC72  10DE               	iorwf	postinc2,w,c
  9246  00EC74  A4D8               	btfss	status,2,c
  9247  00EC76  D1F3               	goto	l213
  9248  00EC78  EE20 F002          	lfsr	2,2
  9249  00EC7C  5003               	movf	check_food@foodInput,w,c
  9250  00EC7E  26D9               	addwf	fsr2l,f,c
  9251  00EC80  5004               	movf	check_food@foodInput+1,w,c
  9252  00EC82  22DA               	addwfc	fsr2h,f,c
  9253  00EC84  04DE               	decf	postinc2,w,c
  9254  00EC86  10DE               	iorwf	postinc2,w,c
  9255  00EC88  A4D8               	btfss	status,2,c
  9256  00EC8A  D1E9               	goto	l213
  9257  00EC8C  EE20 F004          	lfsr	2,4
  9258  00EC90  5003               	movf	check_food@foodInput,w,c
  9259  00EC92  26D9               	addwf	fsr2l,f,c
  9260  00EC94  5004               	movf	check_food@foodInput+1,w,c
  9261  00EC96  22DA               	addwfc	fsr2h,f,c
  9262  00EC98  04DE               	decf	postinc2,w,c
  9263  00EC9A  10DE               	iorwf	postinc2,w,c
  9264  00EC9C  A4D8               	btfss	status,2,c
  9265  00EC9E  D1DF               	goto	l213
  9266                           
  9267                           ;standbyMode.c: 240: returnValue = 35;
  9268  00ECA0  0E00               	movlw	0
  9269  00ECA2  6E08               	movwf	check_food@returnValue+1,c
  9270  00ECA4  0E23               	movlw	35
  9271  00ECA6  D195               	goto	L87
  9272  00ECA8                     
  9273                           ;standbyMode.c: 246: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9274  00ECA8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9275  00ECAC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9276  00ECB0  04DE               	decf	postinc2,w,c
  9277  00ECB2  10DE               	iorwf	postinc2,w,c
  9278  00ECB4  A4D8               	btfss	status,2,c
  9279  00ECB6  D018               	goto	l281
  9280  00ECB8  EE20 F002          	lfsr	2,2
  9281  00ECBC  5003               	movf	check_food@foodInput,w,c
  9282  00ECBE  26D9               	addwf	fsr2l,f,c
  9283  00ECC0  5004               	movf	check_food@foodInput+1,w,c
  9284  00ECC2  22DA               	addwfc	fsr2h,f,c
  9285  00ECC4  04DE               	decf	postinc2,w,c
  9286  00ECC6  10DE               	iorwf	postinc2,w,c
  9287  00ECC8  A4D8               	btfss	status,2,c
  9288  00ECCA  D00E               	goto	l281
  9289  00ECCC  EE20 F004          	lfsr	2,4
  9290  00ECD0  5003               	movf	check_food@foodInput,w,c
  9291  00ECD2  26D9               	addwf	fsr2l,f,c
  9292  00ECD4  5004               	movf	check_food@foodInput+1,w,c
  9293  00ECD6  22DA               	addwfc	fsr2h,f,c
  9294  00ECD8  04DE               	decf	postinc2,w,c
  9295  00ECDA  10DE               	iorwf	postinc2,w,c
  9296  00ECDC  A4D8               	btfss	status,2,c
  9297  00ECDE  D004               	goto	l281
  9298                           
  9299                           ;standbyMode.c: 247: returnValue = 36;
  9300  00ECE0  0E00               	movlw	0
  9301  00ECE2  6E08               	movwf	check_food@returnValue+1,c
  9302  00ECE4  0E24               	movlw	36
  9303  00ECE6  D175               	goto	L87
  9304  00ECE8                     l281:
  9305                           
  9306                           ;standbyMode.c: 249: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9307  00ECE8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9308  00ECEC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9309  00ECF0  04DE               	decf	postinc2,w,c
  9310  00ECF2  10DE               	iorwf	postinc2,w,c
  9311  00ECF4  A4D8               	btfss	status,2,c
  9312  00ECF6  D1B3               	goto	l213
  9313  00ECF8  EE20 F002          	lfsr	2,2
  9314  00ECFC  5003               	movf	check_food@foodInput,w,c
  9315  00ECFE  26D9               	addwf	fsr2l,f,c
  9316  00ED00  5004               	movf	check_food@foodInput+1,w,c
  9317  00ED02  22DA               	addwfc	fsr2h,f,c
  9318  00ED04  04DE               	decf	postinc2,w,c
  9319  00ED06  10DE               	iorwf	postinc2,w,c
  9320  00ED08  A4D8               	btfss	status,2,c
  9321  00ED0A  D1A9               	goto	l213
  9322  00ED0C  EE20 F004          	lfsr	2,4
  9323  00ED10  5003               	movf	check_food@foodInput,w,c
  9324  00ED12  26D9               	addwf	fsr2l,f,c
  9325  00ED14  5004               	movf	check_food@foodInput+1,w,c
  9326  00ED16  22DA               	addwfc	fsr2h,f,c
  9327  00ED18  0E02               	movlw	2
  9328  00ED1A  18DE               	xorwf	postinc2,w,c
  9329  00ED1C  10DE               	iorwf	postinc2,w,c
  9330  00ED1E  A4D8               	btfss	status,2,c
  9331  00ED20  D19E               	goto	l213
  9332                           
  9333                           ;standbyMode.c: 250: returnValue = 37;
  9334  00ED22  0E00               	movlw	0
  9335  00ED24  6E08               	movwf	check_food@returnValue+1,c
  9336  00ED26  0E25               	movlw	37
  9337  00ED28  D154               	goto	L87
  9338  00ED2A                     
  9339                           ;standbyMode.c: 256: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9340  00ED2A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9341  00ED2E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9342  00ED32  04DE               	decf	postinc2,w,c
  9343  00ED34  10DE               	iorwf	postinc2,w,c
  9344  00ED36  A4D8               	btfss	status,2,c
  9345  00ED38  D018               	goto	l285
  9346  00ED3A  EE20 F002          	lfsr	2,2
  9347  00ED3E  5003               	movf	check_food@foodInput,w,c
  9348  00ED40  26D9               	addwf	fsr2l,f,c
  9349  00ED42  5004               	movf	check_food@foodInput+1,w,c
  9350  00ED44  22DA               	addwfc	fsr2h,f,c
  9351  00ED46  04DE               	decf	postinc2,w,c
  9352  00ED48  10DE               	iorwf	postinc2,w,c
  9353  00ED4A  A4D8               	btfss	status,2,c
  9354  00ED4C  D00E               	goto	l285
  9355  00ED4E  EE20 F004          	lfsr	2,4
  9356  00ED52  5003               	movf	check_food@foodInput,w,c
  9357  00ED54  26D9               	addwf	fsr2l,f,c
  9358  00ED56  5004               	movf	check_food@foodInput+1,w,c
  9359  00ED58  22DA               	addwfc	fsr2h,f,c
  9360  00ED5A  04DE               	decf	postinc2,w,c
  9361  00ED5C  10DE               	iorwf	postinc2,w,c
  9362  00ED5E  A4D8               	btfss	status,2,c
  9363  00ED60  D004               	goto	l285
  9364                           
  9365                           ;standbyMode.c: 257: returnValue = 38;
  9366  00ED62  0E00               	movlw	0
  9367  00ED64  6E08               	movwf	check_food@returnValue+1,c
  9368  00ED66  0E26               	movlw	38
  9369  00ED68  D134               	goto	L87
  9370  00ED6A                     l285:
  9371                           
  9372                           ;standbyMode.c: 259: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9373  00ED6A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9374  00ED6E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9375  00ED72  04DE               	decf	postinc2,w,c
  9376  00ED74  10DE               	iorwf	postinc2,w,c
  9377  00ED76  A4D8               	btfss	status,2,c
  9378  00ED78  D019               	goto	l287
  9379  00ED7A  EE20 F002          	lfsr	2,2
  9380  00ED7E  5003               	movf	check_food@foodInput,w,c
  9381  00ED80  26D9               	addwf	fsr2l,f,c
  9382  00ED82  5004               	movf	check_food@foodInput+1,w,c
  9383  00ED84  22DA               	addwfc	fsr2h,f,c
  9384  00ED86  04DE               	decf	postinc2,w,c
  9385  00ED88  10DE               	iorwf	postinc2,w,c
  9386  00ED8A  A4D8               	btfss	status,2,c
  9387  00ED8C  D00F               	goto	l287
  9388  00ED8E  EE20 F004          	lfsr	2,4
  9389  00ED92  5003               	movf	check_food@foodInput,w,c
  9390  00ED94  26D9               	addwf	fsr2l,f,c
  9391  00ED96  5004               	movf	check_food@foodInput+1,w,c
  9392  00ED98  22DA               	addwfc	fsr2h,f,c
  9393  00ED9A  0E02               	movlw	2
  9394  00ED9C  18DE               	xorwf	postinc2,w,c
  9395  00ED9E  10DE               	iorwf	postinc2,w,c
  9396  00EDA0  A4D8               	btfss	status,2,c
  9397  00EDA2  D004               	goto	l287
  9398                           
  9399                           ;standbyMode.c: 260: returnValue = 39;
  9400  00EDA4  0E00               	movlw	0
  9401  00EDA6  6E08               	movwf	check_food@returnValue+1,c
  9402  00EDA8  0E27               	movlw	39
  9403  00EDAA  D113               	goto	L87
  9404  00EDAC                     l287:
  9405                           
  9406                           ;standbyMode.c: 262: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9407  00EDAC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9408  00EDB0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9409  00EDB4  04DE               	decf	postinc2,w,c
  9410  00EDB6  10DE               	iorwf	postinc2,w,c
  9411  00EDB8  A4D8               	btfss	status,2,c
  9412  00EDBA  D019               	goto	l289
  9413  00EDBC  EE20 F002          	lfsr	2,2
  9414  00EDC0  5003               	movf	check_food@foodInput,w,c
  9415  00EDC2  26D9               	addwf	fsr2l,f,c
  9416  00EDC4  5004               	movf	check_food@foodInput+1,w,c
  9417  00EDC6  22DA               	addwfc	fsr2h,f,c
  9418  00EDC8  0E02               	movlw	2
  9419  00EDCA  18DE               	xorwf	postinc2,w,c
  9420  00EDCC  10DE               	iorwf	postinc2,w,c
  9421  00EDCE  A4D8               	btfss	status,2,c
  9422  00EDD0  D00E               	goto	l289
  9423  00EDD2  EE20 F004          	lfsr	2,4
  9424  00EDD6  5003               	movf	check_food@foodInput,w,c
  9425  00EDD8  26D9               	addwf	fsr2l,f,c
  9426  00EDDA  5004               	movf	check_food@foodInput+1,w,c
  9427  00EDDC  22DA               	addwfc	fsr2h,f,c
  9428  00EDDE  04DE               	decf	postinc2,w,c
  9429  00EDE0  10DE               	iorwf	postinc2,w,c
  9430  00EDE2  A4D8               	btfss	status,2,c
  9431  00EDE4  D004               	goto	l289
  9432                           
  9433                           ;standbyMode.c: 263: returnValue = 40;
  9434  00EDE6  0E00               	movlw	0
  9435  00EDE8  6E08               	movwf	check_food@returnValue+1,c
  9436  00EDEA  0E28               	movlw	40
  9437  00EDEC  D0F2               	goto	L87
  9438  00EDEE                     l289:
  9439                           
  9440                           ;standbyMode.c: 265: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9441  00EDEE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9442  00EDF2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9443  00EDF6  0E02               	movlw	2
  9444  00EDF8  18DE               	xorwf	postinc2,w,c
  9445  00EDFA  10DE               	iorwf	postinc2,w,c
  9446  00EDFC  A4D8               	btfss	status,2,c
  9447  00EDFE  D12F               	goto	l213
  9448  00EE00  EE20 F002          	lfsr	2,2
  9449  00EE04  5003               	movf	check_food@foodInput,w,c
  9450  00EE06  26D9               	addwf	fsr2l,f,c
  9451  00EE08  5004               	movf	check_food@foodInput+1,w,c
  9452  00EE0A  22DA               	addwfc	fsr2h,f,c
  9453  00EE0C  04DE               	decf	postinc2,w,c
  9454  00EE0E  10DE               	iorwf	postinc2,w,c
  9455  00EE10  A4D8               	btfss	status,2,c
  9456  00EE12  D125               	goto	l213
  9457  00EE14  EE20 F004          	lfsr	2,4
  9458  00EE18  5003               	movf	check_food@foodInput,w,c
  9459  00EE1A  26D9               	addwf	fsr2l,f,c
  9460  00EE1C  5004               	movf	check_food@foodInput+1,w,c
  9461  00EE1E  22DA               	addwfc	fsr2h,f,c
  9462  00EE20  04DE               	decf	postinc2,w,c
  9463  00EE22  10DE               	iorwf	postinc2,w,c
  9464  00EE24  A4D8               	btfss	status,2,c
  9465  00EE26  D11B               	goto	l213
  9466                           
  9467                           ;standbyMode.c: 266: returnValue = 41;
  9468  00EE28  0E00               	movlw	0
  9469  00EE2A  6E08               	movwf	check_food@returnValue+1,c
  9470  00EE2C  0E29               	movlw	41
  9471  00EE2E  D0D1               	goto	L87
  9472  00EE30                     
  9473                           ;standbyMode.c: 272: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9474  00EE30  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9475  00EE34  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9476  00EE38  04DE               	decf	postinc2,w,c
  9477  00EE3A  10DE               	iorwf	postinc2,w,c
  9478  00EE3C  A4D8               	btfss	status,2,c
  9479  00EE3E  D10F               	goto	l213
  9480  00EE40  EE20 F002          	lfsr	2,2
  9481  00EE44  5003               	movf	check_food@foodInput,w,c
  9482  00EE46  26D9               	addwf	fsr2l,f,c
  9483  00EE48  5004               	movf	check_food@foodInput+1,w,c
  9484  00EE4A  22DA               	addwfc	fsr2h,f,c
  9485  00EE4C  04DE               	decf	postinc2,w,c
  9486  00EE4E  10DE               	iorwf	postinc2,w,c
  9487  00EE50  A4D8               	btfss	status,2,c
  9488  00EE52  D105               	goto	l213
  9489  00EE54  EE20 F004          	lfsr	2,4
  9490  00EE58  5003               	movf	check_food@foodInput,w,c
  9491  00EE5A  26D9               	addwf	fsr2l,f,c
  9492  00EE5C  5004               	movf	check_food@foodInput+1,w,c
  9493  00EE5E  22DA               	addwfc	fsr2h,f,c
  9494  00EE60  04DE               	decf	postinc2,w,c
  9495  00EE62  10DE               	iorwf	postinc2,w,c
  9496  00EE64  A4D8               	btfss	status,2,c
  9497  00EE66  D0FB               	goto	l213
  9498  00EE68  EE20 F006          	lfsr	2,6
  9499  00EE6C  5003               	movf	check_food@foodInput,w,c
  9500  00EE6E  26D9               	addwf	fsr2l,f,c
  9501  00EE70  5004               	movf	check_food@foodInput+1,w,c
  9502  00EE72  22DA               	addwfc	fsr2h,f,c
  9503  00EE74  04DE               	decf	postinc2,w,c
  9504  00EE76  10DE               	iorwf	postinc2,w,c
  9505  00EE78  A4D8               	btfss	status,2,c
  9506  00EE7A  D0F1               	goto	l213
  9507                           
  9508                           ;standbyMode.c: 273: returnValue = 42;
  9509  00EE7C  0E00               	movlw	0
  9510  00EE7E  6E08               	movwf	check_food@returnValue+1,c
  9511  00EE80  0E2A               	movlw	42
  9512  00EE82  D0A7               	goto	L87
  9513  00EE84                     
  9514                           ;standbyMode.c: 279: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9515  00EE84  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9516  00EE88  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9517  00EE8C  04DE               	decf	postinc2,w,c
  9518  00EE8E  10DE               	iorwf	postinc2,w,c
  9519  00EE90  A4D8               	btfss	status,2,c
  9520  00EE92  D0E5               	goto	l213
  9521  00EE94  EE20 F002          	lfsr	2,2
  9522  00EE98  5003               	movf	check_food@foodInput,w,c
  9523  00EE9A  26D9               	addwf	fsr2l,f,c
  9524  00EE9C  5004               	movf	check_food@foodInput+1,w,c
  9525  00EE9E  22DA               	addwfc	fsr2h,f,c
  9526  00EEA0  04DE               	decf	postinc2,w,c
  9527  00EEA2  10DE               	iorwf	postinc2,w,c
  9528  00EEA4  A4D8               	btfss	status,2,c
  9529  00EEA6  D0DB               	goto	l213
  9530  00EEA8  EE20 F004          	lfsr	2,4
  9531  00EEAC  5003               	movf	check_food@foodInput,w,c
  9532  00EEAE  26D9               	addwf	fsr2l,f,c
  9533  00EEB0  5004               	movf	check_food@foodInput+1,w,c
  9534  00EEB2  22DA               	addwfc	fsr2h,f,c
  9535  00EEB4  04DE               	decf	postinc2,w,c
  9536  00EEB6  10DE               	iorwf	postinc2,w,c
  9537  00EEB8  A4D8               	btfss	status,2,c
  9538  00EEBA  D0D1               	goto	l213
  9539  00EEBC  EE20 F006          	lfsr	2,6
  9540  00EEC0  5003               	movf	check_food@foodInput,w,c
  9541  00EEC2  26D9               	addwf	fsr2l,f,c
  9542  00EEC4  5004               	movf	check_food@foodInput+1,w,c
  9543  00EEC6  22DA               	addwfc	fsr2h,f,c
  9544  00EEC8  04DE               	decf	postinc2,w,c
  9545  00EECA  10DE               	iorwf	postinc2,w,c
  9546  00EECC  A4D8               	btfss	status,2,c
  9547  00EECE  D0C7               	goto	l213
  9548                           
  9549                           ;standbyMode.c: 280: returnValue = 43;
  9550  00EED0  0E00               	movlw	0
  9551  00EED2  6E08               	movwf	check_food@returnValue+1,c
  9552  00EED4  0E2B               	movlw	43
  9553  00EED6  D07D               	goto	L87
  9554  00EED8                     
  9555                           ;standbyMode.c: 286: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9556  00EED8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9557  00EEDC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9558  00EEE0  04DE               	decf	postinc2,w,c
  9559  00EEE2  10DE               	iorwf	postinc2,w,c
  9560  00EEE4  A4D8               	btfss	status,2,c
  9561  00EEE6  D0BB               	goto	l213
  9562  00EEE8  EE20 F002          	lfsr	2,2
  9563  00EEEC  5003               	movf	check_food@foodInput,w,c
  9564  00EEEE  26D9               	addwf	fsr2l,f,c
  9565  00EEF0  5004               	movf	check_food@foodInput+1,w,c
  9566  00EEF2  22DA               	addwfc	fsr2h,f,c
  9567  00EEF4  04DE               	decf	postinc2,w,c
  9568  00EEF6  10DE               	iorwf	postinc2,w,c
  9569  00EEF8  A4D8               	btfss	status,2,c
  9570  00EEFA  D0B1               	goto	l213
  9571  00EEFC  EE20 F004          	lfsr	2,4
  9572  00EF00  5003               	movf	check_food@foodInput,w,c
  9573  00EF02  26D9               	addwf	fsr2l,f,c
  9574  00EF04  5004               	movf	check_food@foodInput+1,w,c
  9575  00EF06  22DA               	addwfc	fsr2h,f,c
  9576  00EF08  04DE               	decf	postinc2,w,c
  9577  00EF0A  10DE               	iorwf	postinc2,w,c
  9578  00EF0C  A4D8               	btfss	status,2,c
  9579  00EF0E  D0A7               	goto	l213
  9580  00EF10  EE20 F006          	lfsr	2,6
  9581  00EF14  5003               	movf	check_food@foodInput,w,c
  9582  00EF16  26D9               	addwf	fsr2l,f,c
  9583  00EF18  5004               	movf	check_food@foodInput+1,w,c
  9584  00EF1A  22DA               	addwfc	fsr2h,f,c
  9585  00EF1C  04DE               	decf	postinc2,w,c
  9586  00EF1E  10DE               	iorwf	postinc2,w,c
  9587  00EF20  A4D8               	btfss	status,2,c
  9588  00EF22  D09D               	goto	l213
  9589                           
  9590                           ;standbyMode.c: 287: returnValue = 44;
  9591  00EF24  0E00               	movlw	0
  9592  00EF26  6E08               	movwf	check_food@returnValue+1,c
  9593  00EF28  0E2C               	movlw	44
  9594  00EF2A  D053               	goto	L87
  9595  00EF2C                     
  9596                           ;standbyMode.c: 293: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9597  00EF2C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9598  00EF30  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9599  00EF34  04DE               	decf	postinc2,w,c
  9600  00EF36  10DE               	iorwf	postinc2,w,c
  9601  00EF38  A4D8               	btfss	status,2,c
  9602  00EF3A  D091               	goto	l213
  9603  00EF3C  EE20 F002          	lfsr	2,2
  9604  00EF40  5003               	movf	check_food@foodInput,w,c
  9605  00EF42  26D9               	addwf	fsr2l,f,c
  9606  00EF44  5004               	movf	check_food@foodInput+1,w,c
  9607  00EF46  22DA               	addwfc	fsr2h,f,c
  9608  00EF48  04DE               	decf	postinc2,w,c
  9609  00EF4A  10DE               	iorwf	postinc2,w,c
  9610  00EF4C  A4D8               	btfss	status,2,c
  9611  00EF4E  D087               	goto	l213
  9612  00EF50  EE20 F004          	lfsr	2,4
  9613  00EF54  5003               	movf	check_food@foodInput,w,c
  9614  00EF56  26D9               	addwf	fsr2l,f,c
  9615  00EF58  5004               	movf	check_food@foodInput+1,w,c
  9616  00EF5A  22DA               	addwfc	fsr2h,f,c
  9617  00EF5C  04DE               	decf	postinc2,w,c
  9618  00EF5E  10DE               	iorwf	postinc2,w,c
  9619  00EF60  A4D8               	btfss	status,2,c
  9620  00EF62  D07D               	goto	l213
  9621  00EF64  EE20 F006          	lfsr	2,6
  9622  00EF68  5003               	movf	check_food@foodInput,w,c
  9623  00EF6A  26D9               	addwf	fsr2l,f,c
  9624  00EF6C  5004               	movf	check_food@foodInput+1,w,c
  9625  00EF6E  22DA               	addwfc	fsr2h,f,c
  9626  00EF70  04DE               	decf	postinc2,w,c
  9627  00EF72  10DE               	iorwf	postinc2,w,c
  9628  00EF74  A4D8               	btfss	status,2,c
  9629  00EF76  D073               	goto	l213
  9630                           
  9631                           ;standbyMode.c: 294: returnValue = 45;
  9632  00EF78  0E00               	movlw	0
  9633  00EF7A  6E08               	movwf	check_food@returnValue+1,c
  9634  00EF7C  0E2D               	movlw	45
  9635  00EF7E  D029               	goto	L87
  9636  00EF80                     
  9637                           ;standbyMode.c: 300: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9638  00EF80  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9639  00EF84  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9640  00EF88  04DE               	decf	postinc2,w,c
  9641  00EF8A  10DE               	iorwf	postinc2,w,c
  9642  00EF8C  A4D8               	btfss	status,2,c
  9643  00EF8E  D067               	goto	l213
  9644  00EF90  EE20 F002          	lfsr	2,2
  9645  00EF94  5003               	movf	check_food@foodInput,w,c
  9646  00EF96  26D9               	addwf	fsr2l,f,c
  9647  00EF98  5004               	movf	check_food@foodInput+1,w,c
  9648  00EF9A  22DA               	addwfc	fsr2h,f,c
  9649  00EF9C  04DE               	decf	postinc2,w,c
  9650  00EF9E  10DE               	iorwf	postinc2,w,c
  9651  00EFA0  A4D8               	btfss	status,2,c
  9652  00EFA2  D05D               	goto	l213
  9653  00EFA4  EE20 F004          	lfsr	2,4
  9654  00EFA8  5003               	movf	check_food@foodInput,w,c
  9655  00EFAA  26D9               	addwf	fsr2l,f,c
  9656  00EFAC  5004               	movf	check_food@foodInput+1,w,c
  9657  00EFAE  22DA               	addwfc	fsr2h,f,c
  9658  00EFB0  04DE               	decf	postinc2,w,c
  9659  00EFB2  10DE               	iorwf	postinc2,w,c
  9660  00EFB4  A4D8               	btfss	status,2,c
  9661  00EFB6  D053               	goto	l213
  9662  00EFB8  EE20 F006          	lfsr	2,6
  9663  00EFBC  5003               	movf	check_food@foodInput,w,c
  9664  00EFBE  26D9               	addwf	fsr2l,f,c
  9665  00EFC0  5004               	movf	check_food@foodInput+1,w,c
  9666  00EFC2  22DA               	addwfc	fsr2h,f,c
  9667  00EFC4  04DE               	decf	postinc2,w,c
  9668  00EFC6  10DE               	iorwf	postinc2,w,c
  9669  00EFC8  A4D8               	btfss	status,2,c
  9670  00EFCA  D049               	goto	l213
  9671                           
  9672                           ;standbyMode.c: 301: returnValue = 46;
  9673  00EFCC  0E00               	movlw	0
  9674  00EFCE  6E08               	movwf	check_food@returnValue+1,c
  9675  00EFD0  0E2E               	movlw	46
  9676  00EFD2                     L87:
  9677  00EFD2  6E07               	movwf	check_food@returnValue,c
  9678                           
  9679                           ;standbyMode.c: 308: }
  9680                           
  9681                           ;standbyMode.c: 307: break;
  9682                           
  9683                           ;standbyMode.c: 306: default:
  9684                           
  9685                           ;standbyMode.c: 302: }
  9686                           ;standbyMode.c: 303: break;
  9687  00EFD4  D044               	goto	l213
  9688  00EFD6                     l208:
  9689  00EFD6  C001  F005         	movff	check_food@sum,??_check_food
  9690  00EFDA  C002  F006         	movff	check_food@sum+1,??_check_food+1
  9691                           
  9692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9693                           ; Switch size 1, requested type "space"
  9694                           ; Number of cases is 1, Range of values is 0 to 0
  9695                           ; switch strategies available:
  9696                           ; Name         Instructions Cycles
  9697                           ; simple_byte            4     3 (average)
  9698                           ;	Chosen strategy is simple_byte
  9699  00EFDE  5006               	movf	??_check_food+1,w,c
  9700  00EFE0  0A00               	xorlw	0	; case 0
  9701  00EFE2  A4D8               	btfss	status,2,c
  9702  00EFE4  D03C               	goto	l213
  9703                           
  9704                           ; Switch size 1, requested type "space"
  9705                           ; Number of cases is 18, Range of values is 3 to 43
  9706                           ; switch strategies available:
  9707                           ; Name         Instructions Cycles
  9708                           ; simple_byte           55    28 (average)
  9709                           ;	Chosen strategy is simple_byte
  9710  00EFE6  5005               	movf	??_check_food,w,c
  9711  00EFE8  0A03               	xorlw	3	; case 3
  9712  00EFEA  B4D8               	btfsc	status,2,c
  9713  00EFEC  EFDC  F072         	goto	l209
  9714  00EFF0  0A04               	xorlw	4	; case 7
  9715  00EFF2  B4D8               	btfsc	status,2,c
  9716  00EFF4  EFF8  F072         	goto	l214
  9717  00EFF8  0A0D               	xorlw	13	; case 10
  9718  00EFFA  B4D8               	btfsc	status,2,c
  9719  00EFFC  EF3E  F073         	goto	l224
  9720  00F000  0A06               	xorlw	6	; case 12
  9721  00F002  B4D8               	btfsc	status,2,c
  9722  00F004  EF14  F073         	goto	l218
  9723  00F008  0A01               	xorlw	1	; case 13
  9724  00F00A  B4D8               	btfsc	status,2,c
  9725  00F00C  D484               	goto	l252
  9726  00F00E  0A02               	xorlw	2	; case 15
  9727  00F010  B4D8               	btfsc	status,2,c
  9728  00F012  EFA0  F073         	goto	l232
  9729  00F016  0A1E               	xorlw	30	; case 17
  9730  00F018  B4D8               	btfsc	status,2,c
  9731  00F01A  D4FF               	goto	l260
  9732  00F01C  0A03               	xorlw	3	; case 18
  9733  00F01E  B4D8               	btfsc	status,2,c
  9734  00F020  D4BB               	goto	l256
  9735  00F022  0A01               	xorlw	1	; case 19
  9736  00F024  B4D8               	btfsc	status,2,c
  9737  00F026  D404               	goto	l242
  9738  00F028  0A05               	xorlw	5	; case 22
  9739  00F02A  B4D8               	btfsc	status,2,c
  9740  00F02C  D5BA               	goto	l272
  9741  00F02E  0A0F               	xorlw	15	; case 25
  9742  00F030  B4D8               	btfsc	status,2,c
  9743  00F032  D6FE               	goto	l292
  9744  00F034  0A03               	xorlw	3	; case 26
  9745  00F036  B4D8               	btfsc	status,2,c
  9746  00F038  D637               	goto	l280
  9747  00F03A  0A01               	xorlw	1	; case 27
  9748  00F03C  B4D8               	btfsc	status,2,c
  9749  00F03E  D52E               	goto	l264
  9750  00F040  0A06               	xorlw	6	; case 29
  9751  00F042  B4D8               	btfsc	status,2,c
  9752  00F044  D71F               	goto	l294
  9753  00F046  0A02               	xorlw	2	; case 31
  9754  00F048  B4D8               	btfsc	status,2,c
  9755  00F04A  D66F               	goto	l284
  9756  00F04C  0A3D               	xorlw	61	; case 34
  9757  00F04E  B4D8               	btfsc	status,2,c
  9758  00F050  D743               	goto	l296
  9759  00F052  0A05               	xorlw	5	; case 39
  9760  00F054  B4D8               	btfsc	status,2,c
  9761  00F056  D76A               	goto	l298
  9762  00F058  0A0C               	xorlw	12	; case 43
  9763  00F05A  B4D8               	btfsc	status,2,c
  9764  00F05C  D791               	goto	l300
  9765  00F05E                     l213:
  9766                           
  9767                           ;standbyMode.c: 309: return returnValue;
  9768  00F05E  C007  F001         	movff	check_food@returnValue,?_check_food
  9769  00F062  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  9770  00F066  0012               	return		;funcret
  9771  00F068                     __end_of_check_food:
  9772                           	opt stack 0
  9773                           tblptru	equ	0xFF8
  9774                           tblptrh	equ	0xFF7
  9775                           tblptrl	equ	0xFF6
  9776                           tablat	equ	0xFF5
  9777                           prodh	equ	0xFF4
  9778                           prodl	equ	0xFF3
  9779                           intcon	equ	0xFF2
  9780                           postinc0	equ	0xFEE
  9781                           wreg	equ	0xFE8
  9782                           postdec1	equ	0xFE5
  9783                           plusw1	equ	0xFE3
  9784                           fsr1l	equ	0xFE1
  9785                           indf2	equ	0xFDF
  9786                           postinc2	equ	0xFDE
  9787                           postdec2	equ	0xFDD
  9788                           plusw2	equ	0xFDB
  9789                           fsr2h	equ	0xFDA
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function _diet_press *****************
  9794 ;; Defined at:
  9795 ;;		line 1200 in file "standbyMode.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  drawer          2   40[COMRAM] unsigned int 
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;  keypress        1   54[COMRAM] unsigned char 
  9800 ;;  dietTable       8   55[COMRAM] unsigned int [4]
  9801 ;;  sum             2   52[COMRAM] unsigned int 
  9802 ;;  count           2   50[COMRAM] unsigned int 
  9803 ;;  backCheck       2   48[COMRAM] unsigned int 
  9804 ;;  i               2   46[COMRAM] unsigned int 
  9805 ;;  previous        2   44[COMRAM] unsigned int 
  9806 ;; Return value:  Size  Location     Type
  9807 ;;                  2   40[COMRAM] unsigned int 
  9808 ;; Registers used:
  9809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9810 ;; Tracked objects:
  9811 ;;		On entry : 0/0
  9812 ;;		On exit  : 0/0
  9813 ;;		Unchanged: 0/0
  9814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;Total ram usage:       23 bytes
  9820 ;; Hardware stack levels used:    1
  9821 ;; Hardware stack levels required when called:    3
  9822 ;; This function calls:
  9823 ;;		_lcdInst
  9824 ;;		_printf
  9825 ;;		_putch
  9826 ;; This function is called by:
  9827 ;;		_standbyMode
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text17
  9832  00DACE                     __ptext17:
  9833                           	opt stack 0
  9834  00DACE                     _diet_press:
  9835                           	opt stack 26
  9836                           
  9837                           ;incstack = 0
  9838                           ;standbyMode.c: 1203: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  9839  00DACE  0E01               	movlw	1
  9840  00DAD0  ECC2  F061         	call	_lcdInst
  9841  00DAD4  0EC3               	movlw	195
  9842  00DAD6  6E2B               	movwf	??_diet_press& (0+255),c
  9843  00DAD8  0ECD               	movlw	205
  9844  00DADA                     u8917:
  9845  00DADA  2EE8               	decfsz	wreg,f,c
  9846  00DADC  D7FE               	bra	u8917
  9847  00DADE  2E2B               	decfsz	??_diet_press& (0+255),f,c
  9848  00DAE0  D7FC               	bra	u8917
  9849  00DAE2  F000               	nop	
  9850                           
  9851                           ;standbyMode.c: 1204: printf("Drawer %i diet:", drawer);
  9852  00DAE4  0E19               	movlw	low STR_53
  9853  00DAE6  6E0D               	movwf	printf@f,c
  9854  00DAE8  0EFE               	movlw	high STR_53
  9855  00DAEA  6E0E               	movwf	printf@f+1,c
  9856  00DAEC  C029  F00F         	movff	diet_press@drawer,?_printf+2
  9857  00DAF0  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
  9858  00DAF4  EC6E  F06B         	call	_printf	;wreg free
  9859                           
  9860                           ;standbyMode.c: 1205: lcdInst(0xC0);;
  9861  00DAF8  0EC0               	movlw	192
  9862  00DAFA  ECC2  F061         	call	_lcdInst
  9863                           
  9864                           ;standbyMode.c: 1207: unsigned int count = 0;
  9865  00DAFE  0E00               	movlw	0
  9866  00DB00  6E34               	movwf	diet_press@count+1,c
  9867  00DB02  0E00               	movlw	0
  9868  00DB04  6E33               	movwf	diet_press@count,c
  9869                           
  9870                           ;standbyMode.c: 1208: unsigned int previous = 0;
  9871  00DB06  0E00               	movlw	0
  9872  00DB08  6E2E               	movwf	diet_press@previous+1,c
  9873  00DB0A  0E00               	movlw	0
  9874  00DB0C  6E2D               	movwf	diet_press@previous,c
  9875                           
  9876                           ;standbyMode.c: 1209: unsigned int sum = 0;
  9877  00DB0E  0E00               	movlw	0
  9878  00DB10  6E36               	movwf	diet_press@sum+1,c
  9879  00DB12  0E00               	movlw	0
  9880  00DB14  6E35               	movwf	diet_press@sum,c
  9881                           
  9882                           ;standbyMode.c: 1210: unsigned int i = 0;
  9883  00DB16  0E00               	movlw	0
  9884  00DB18  6E30               	movwf	diet_press@i+1,c
  9885  00DB1A  0E00               	movlw	0
  9886  00DB1C  6E2F               	movwf	diet_press@i,c
  9887                           
  9888                           ;standbyMode.c: 1211: unsigned int dietTable[4] = {0, 0, 0, 0};
  9889  00DB1E  EE20  F0F8         	lfsr	2,diet_press@F3146
  9890  00DB22  EE10  F038         	lfsr	1,diet_press@dietTable
  9891  00DB26  0E07               	movlw	7
  9892  00DB28                     u6241:
  9893  00DB28  CFDB FFE3          	movff	plusw2,plusw1
  9894  00DB2C  06E8               	decf	wreg,f,c
  9895  00DB2E  E2FC               	bc	u6241
  9896                           
  9897                           ;standbyMode.c: 1212: unsigned int backCheck = 0;
  9898  00DB30  0E00               	movlw	0
  9899  00DB32  6E32               	movwf	diet_press@backCheck+1,c
  9900  00DB34  0E00               	movlw	0
  9901  00DB36  6E31               	movwf	diet_press@backCheck,c
  9902  00DB38                     l542:
  9903  00DB38  A281               	btfss	3969,1,c	;volatile
  9904  00DB3A  D7FE               	goto	l541
  9905                           
  9906                           ;standbyMode.c: 1216: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9907  00DB3C  3881               	swapf	3969,w,c	;volatile
  9908  00DB3E  0B0F               	andlw	15
  9909  00DB40  0B0F               	andlw	15
  9910  00DB42  6E37               	movwf	diet_press@keypress,c
  9911  00DB44  B281               	btfsc	3969,1,c	;volatile
  9912  00DB46  D7FE               	goto	l546
  9913                           
  9914                           ;standbyMode.c: 1219: if(keypress == 15){
  9915  00DB48  0E0F               	movlw	15
  9916  00DB4A  1837               	xorwf	diet_press@keypress,w,c
  9917  00DB4C  B4D8               	btfsc	status,2,c
  9918  00DB4E  D086               	goto	l549
  9919                           
  9920                           ;standbyMode.c: 1222: else if (keypress == 14){
  9921                           
  9922                           ;standbyMode.c: 1221: }
  9923                           
  9924                           ;standbyMode.c: 1220: break;
  9925  00DB50  0E0E               	movlw	14
  9926  00DB52  1837               	xorwf	diet_press@keypress,w,c
  9927  00DB54  A4D8               	btfss	status,2,c
  9928  00DB56  D005               	goto	l551
  9929                           
  9930                           ;standbyMode.c: 1223: backCheck = 1;
  9931  00DB58  0E00               	movlw	0
  9932  00DB5A  6E32               	movwf	diet_press@backCheck+1,c
  9933  00DB5C  0E01               	movlw	1
  9934  00DB5E  6E31               	movwf	diet_press@backCheck,c
  9935                           
  9936                           ;standbyMode.c: 1224: break;
  9937  00DB60  D07D               	goto	l549
  9938  00DB62                     l551:
  9939                           
  9940                           ;standbyMode.c: 1226: else if (keypress == 12){
  9941  00DB62  0E0C               	movlw	12
  9942  00DB64  1837               	xorwf	diet_press@keypress,w,c
  9943  00DB66  A4D8               	btfss	status,2,c
  9944  00DB68  D02D               	goto	l553
  9945                           
  9946                           ;standbyMode.c: 1227: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9947  00DB6A  0E01               	movlw	1
  9948  00DB6C  ECC2  F061         	call	_lcdInst
  9949  00DB70  0EC3               	movlw	195
  9950  00DB72  6E2B               	movwf	??_diet_press& (0+255),c
  9951  00DB74  0ECD               	movlw	205
  9952  00DB76                     u8927:
  9953  00DB76  2EE8               	decfsz	wreg,f,c
  9954  00DB78  D7FE               	bra	u8927
  9955  00DB7A  2E2B               	decfsz	??_diet_press& (0+255),f,c
  9956  00DB7C  D7FC               	bra	u8927
  9957  00DB7E  F000               	nop	
  9958                           
  9959                           ;standbyMode.c: 1228: printf("Drawer %i diet:", drawer);
  9960  00DB80  0E19               	movlw	low STR_53
  9961  00DB82  6E0D               	movwf	printf@f,c
  9962  00DB84  0EFE               	movlw	high STR_53
  9963  00DB86  6E0E               	movwf	printf@f+1,c
  9964  00DB88  C029  F00F         	movff	diet_press@drawer,?_printf+2
  9965  00DB8C  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
  9966  00DB90  EC6E  F06B         	call	_printf	;wreg free
  9967                           
  9968                           ;standbyMode.c: 1229: lcdInst(0xC0);;
  9969  00DB94  0EC0               	movlw	192
  9970  00DB96  ECC2  F061         	call	_lcdInst
  9971                           
  9972                           ;standbyMode.c: 1230: count = 0;
  9973  00DB9A  0E00               	movlw	0
  9974  00DB9C  6E34               	movwf	diet_press@count+1,c
  9975  00DB9E  0E00               	movlw	0
  9976  00DBA0  6E33               	movwf	diet_press@count,c
  9977                           
  9978                           ;standbyMode.c: 1231: dietTable[0] = 0;
  9979  00DBA2  0E00               	movlw	0
  9980  00DBA4  6E39               	movwf	diet_press@dietTable+1,c
  9981  00DBA6  0E00               	movlw	0
  9982  00DBA8  6E38               	movwf	diet_press@dietTable,c
  9983                           
  9984                           ;standbyMode.c: 1232: dietTable[1] = 0;
  9985  00DBAA  0E00               	movlw	0
  9986  00DBAC  6E3B               	movwf	diet_press@dietTable+3,c
  9987  00DBAE  0E00               	movlw	0
  9988  00DBB0  6E3A               	movwf	diet_press@dietTable+2,c
  9989                           
  9990                           ;standbyMode.c: 1233: dietTable[2] = 0;
  9991  00DBB2  0E00               	movlw	0
  9992  00DBB4  6E3D               	movwf	diet_press@dietTable+5,c
  9993  00DBB6  0E00               	movlw	0
  9994  00DBB8  6E3C               	movwf	diet_press@dietTable+4,c
  9995                           
  9996                           ;standbyMode.c: 1234: dietTable[3] = 0;
  9997  00DBBA  0E00               	movlw	0
  9998  00DBBC  6E3F               	movwf	diet_press@dietTable+7,c
  9999  00DBBE  0E00               	movlw	0
 10000  00DBC0  6E3E               	movwf	diet_press@dietTable+6,c
 10001                           
 10002                           ;standbyMode.c: 1235: }
 10003  00DBC2  D7BA               	goto	l541
 10004  00DBC4                     l553:
 10005                           
 10006                           ;standbyMode.c: 1236: else if (count <= 3){
 10007  00DBC4  5034               	movf	diet_press@count+1,w,c
 10008  00DBC6  E1B8               	bnz	l542
 10009  00DBC8  0E04               	movlw	4
 10010  00DBCA  5C33               	subwf	diet_press@count,w,c
 10011  00DBCC  B0D8               	btfsc	status,0,c
 10012  00DBCE  D7B4               	goto	l541
 10013                           
 10014                           ;standbyMode.c: 1237: if (keypress == 3 || keypress == 7){
 10015  00DBD0  0E03               	movlw	3
 10016  00DBD2  1837               	xorwf	diet_press@keypress,w,c
 10017  00DBD4  B4D8               	btfsc	status,2,c
 10018  00DBD6  D004               	goto	u6320
 10019  00DBD8  0E07               	movlw	7
 10020  00DBDA  1837               	xorwf	diet_press@keypress,w,c
 10021  00DBDC  A4D8               	btfss	status,2,c
 10022  00DBDE  D016               	goto	l556
 10023  00DBE0                     u6320:
 10024                           
 10025                           ;standbyMode.c: 1238: putch(input[keypress]);
 10026  00DBE0  5037               	movf	diet_press@keypress,w,c
 10027  00DBE2  0D01               	mullw	1
 10028  00DBE4  0E10               	movlw	low _input
 10029  00DBE6  24F3               	addwf	prodl,w,c
 10030  00DBE8  6EF6               	movwf	tblptrl,c
 10031  00DBEA  0EFD               	movlw	high _input
 10032  00DBEC  20F4               	addwfc	prodh,w,c
 10033  00DBEE  6EF7               	movwf	tblptrh,c
 10034  00DBF0                     	if	1	;There are 3 active tblptr bytes
 10035  00DBF0  6AF8               	clrf	tblptru,c
 10036  00DBF2  0E00               	movlw	low (__mediumconst shr (0+16))
 10037  00DBF4  22F8               	addwfc	tblptru,f,c
 10038  00DBF6                     	endif
 10039  00DBF6  0008               	tblrd		*
 10040  00DBF8  50F5               	movf	tablat,w,c
 10041  00DBFA  ECCC  F061         	call	_putch
 10042                           
 10043                           ;standbyMode.c: 1239: dietTable[count] = keypress;
 10044  00DBFE  5037               	movf	diet_press@keypress,w,c
 10045  00DC00  6E2B               	movwf	??_diet_press& (0+255),c
 10046  00DC02  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10047  00DC04  D01D               	goto	L106
 10048  00DC06                     l6128:
 10049                           
 10050                           ;standbyMode.c: 1240: count += 1;
 10051  00DC06  4A33               	infsnz	diet_press@count,f,c
 10052  00DC08  2A34               	incf	diet_press@count+1,f,c
 10053                           
 10054                           ;standbyMode.c: 1241: }
 10055  00DC0A  D796               	goto	l541
 10056  00DC0C                     l556:
 10057                           
 10058                           ;standbyMode.c: 1242: else if (keypress == 11){
 10059  00DC0C  0E0B               	movlw	11
 10060  00DC0E  1837               	xorwf	diet_press@keypress,w,c
 10061  00DC10  A4D8               	btfss	status,2,c
 10062  00DC12  D792               	goto	l541
 10063                           
 10064                           ;standbyMode.c: 1243: putch(input[keypress]);
 10065  00DC14  5037               	movf	diet_press@keypress,w,c
 10066  00DC16  0D01               	mullw	1
 10067  00DC18  0E10               	movlw	low _input
 10068  00DC1A  24F3               	addwf	prodl,w,c
 10069  00DC1C  6EF6               	movwf	tblptrl,c
 10070  00DC1E  0EFD               	movlw	high _input
 10071  00DC20  20F4               	addwfc	prodh,w,c
 10072  00DC22  6EF7               	movwf	tblptrh,c
 10073  00DC24                     	if	1	;There are 3 active tblptr bytes
 10074  00DC24  6AF8               	clrf	tblptru,c
 10075  00DC26  0E00               	movlw	low (__mediumconst shr (0+16))
 10076  00DC28  22F8               	addwfc	tblptru,f,c
 10077  00DC2A                     	endif
 10078  00DC2A  0008               	tblrd		*
 10079  00DC2C  50F5               	movf	tablat,w,c
 10080  00DC2E  ECCC  F061         	call	_putch
 10081                           
 10082                           ;standbyMode.c: 1244: dietTable[count] = keypress + 1;
 10083  00DC32  5037               	movf	diet_press@keypress,w,c
 10084  00DC34  6E2B               	movwf	??_diet_press& (0+255),c
 10085  00DC36  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10086  00DC38  0E01               	movlw	1
 10087  00DC3A  262B               	addwf	??_diet_press,f,c
 10088  00DC3C  0E00               	movlw	0
 10089  00DC3E  222C               	addwfc	??_diet_press+1,f,c
 10090  00DC40                     L106:
 10091  00DC40  90D8               	bcf	status,0,c
 10092  00DC42  3433               	rlcf	diet_press@count,w,c
 10093  00DC44  6ED9               	movwf	fsr2l,c
 10094  00DC46  3434               	rlcf	diet_press@count+1,w,c
 10095  00DC48  6EDA               	movwf	fsr2h,c
 10096  00DC4A  0E38               	movlw	low diet_press@dietTable
 10097  00DC4C  26D9               	addwf	fsr2l,f,c
 10098  00DC4E  0E00               	movlw	high diet_press@dietTable
 10099  00DC50  22DA               	addwfc	fsr2h,f,c
 10100  00DC52  C02B  FFDE         	movff	??_diet_press,postinc2
 10101  00DC56  C02C  FFDD         	movff	??_diet_press+1,postdec2
 10102  00DC5A  D7D5               	goto	l6128
 10103  00DC5C                     l549:
 10104                           
 10105                           ;standbyMode.c: 1246: }
 10106                           ;standbyMode.c: 1247: }
 10107                           ;standbyMode.c: 1248: }
 10108                           ;standbyMode.c: 1250: if (backCheck == 1){
 10109  00DC5C  0431               	decf	diet_press@backCheck,w,c
 10110  00DC5E  1032               	iorwf	diet_press@backCheck+1,w,c
 10111  00DC60  A4D8               	btfss	status,2,c
 10112  00DC62  D004               	goto	l562
 10113                           
 10114                           ;standbyMode.c: 1251: sum = 100;
 10115  00DC64  0E00               	movlw	0
 10116  00DC66  6E36               	movwf	diet_press@sum+1,c
 10117  00DC68  0E64               	movlw	100
 10118  00DC6A  D199               	goto	L105
 10119  00DC6C                     l562:
 10120                           
 10121                           ;standbyMode.c: 1255: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10122  00DC6C  0E0C               	movlw	12
 10123  00DC6E  1838               	xorwf	diet_press@dietTable,w,c
 10124  00DC70  1039               	iorwf	diet_press@dietTable+1,w,c
 10125  00DC72  A4D8               	btfss	status,2,c
 10126  00DC74  D010               	goto	l564
 10127  00DC76  503A               	movf	diet_press@dietTable+2,w,c
 10128  00DC78  103B               	iorwf	diet_press@dietTable+3,w,c
 10129  00DC7A  A4D8               	btfss	status,2,c
 10130  00DC7C  D00C               	goto	l564
 10131  00DC7E  503C               	movf	diet_press@dietTable+4,w,c
 10132  00DC80  103D               	iorwf	diet_press@dietTable+5,w,c
 10133  00DC82  A4D8               	btfss	status,2,c
 10134  00DC84  D008               	goto	l564
 10135  00DC86  503E               	movf	diet_press@dietTable+6,w,c
 10136  00DC88  103F               	iorwf	diet_press@dietTable+7,w,c
 10137  00DC8A  A4D8               	btfss	status,2,c
 10138  00DC8C  D004               	goto	l564
 10139                           
 10140                           ;standbyMode.c: 1256: sum = 12;
 10141  00DC8E  0E00               	movlw	0
 10142  00DC90  6E36               	movwf	diet_press@sum+1,c
 10143  00DC92  0E0C               	movlw	12
 10144  00DC94  D184               	goto	L105
 10145  00DC96                     l564:
 10146                           
 10147                           ;standbyMode.c: 1260: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10148  00DC96  0E03               	movlw	3
 10149  00DC98  1838               	xorwf	diet_press@dietTable,w,c
 10150  00DC9A  1039               	iorwf	diet_press@dietTable+1,w,c
 10151  00DC9C  A4D8               	btfss	status,2,c
 10152  00DC9E  D010               	goto	l566
 10153  00DCA0  503A               	movf	diet_press@dietTable+2,w,c
 10154  00DCA2  103B               	iorwf	diet_press@dietTable+3,w,c
 10155  00DCA4  A4D8               	btfss	status,2,c
 10156  00DCA6  D00C               	goto	l566
 10157  00DCA8  503C               	movf	diet_press@dietTable+4,w,c
 10158  00DCAA  103D               	iorwf	diet_press@dietTable+5,w,c
 10159  00DCAC  A4D8               	btfss	status,2,c
 10160  00DCAE  D008               	goto	l566
 10161  00DCB0  503E               	movf	diet_press@dietTable+6,w,c
 10162  00DCB2  103F               	iorwf	diet_press@dietTable+7,w,c
 10163  00DCB4  A4D8               	btfss	status,2,c
 10164  00DCB6  D004               	goto	l566
 10165                           
 10166                           ;standbyMode.c: 1261: sum = 3;
 10167  00DCB8  0E00               	movlw	0
 10168  00DCBA  6E36               	movwf	diet_press@sum+1,c
 10169  00DCBC  0E03               	movlw	3
 10170  00DCBE  D16F               	goto	L105
 10171  00DCC0                     l566:
 10172                           
 10173                           ;standbyMode.c: 1265: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10174  00DCC0  0E07               	movlw	7
 10175  00DCC2  1838               	xorwf	diet_press@dietTable,w,c
 10176  00DCC4  1039               	iorwf	diet_press@dietTable+1,w,c
 10177  00DCC6  A4D8               	btfss	status,2,c
 10178  00DCC8  D010               	goto	l568
 10179  00DCCA  503A               	movf	diet_press@dietTable+2,w,c
 10180  00DCCC  103B               	iorwf	diet_press@dietTable+3,w,c
 10181  00DCCE  A4D8               	btfss	status,2,c
 10182  00DCD0  D00C               	goto	l568
 10183  00DCD2  503C               	movf	diet_press@dietTable+4,w,c
 10184  00DCD4  103D               	iorwf	diet_press@dietTable+5,w,c
 10185  00DCD6  A4D8               	btfss	status,2,c
 10186  00DCD8  D008               	goto	l568
 10187  00DCDA  503E               	movf	diet_press@dietTable+6,w,c
 10188  00DCDC  103F               	iorwf	diet_press@dietTable+7,w,c
 10189  00DCDE  A4D8               	btfss	status,2,c
 10190  00DCE0  D004               	goto	l568
 10191                           
 10192                           ;standbyMode.c: 1266: sum = 7;
 10193  00DCE2  0E00               	movlw	0
 10194  00DCE4  6E36               	movwf	diet_press@sum+1,c
 10195  00DCE6  0E07               	movlw	7
 10196  00DCE8  D15A               	goto	L105
 10197  00DCEA                     l568:
 10198                           
 10199                           ;standbyMode.c: 1270: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10200  00DCEA  0E03               	movlw	3
 10201  00DCEC  1838               	xorwf	diet_press@dietTable,w,c
 10202  00DCEE  1039               	iorwf	diet_press@dietTable+1,w,c
 10203  00DCF0  A4D8               	btfss	status,2,c
 10204  00DCF2  D011               	goto	l570
 10205  00DCF4  0E07               	movlw	7
 10206  00DCF6  183A               	xorwf	diet_press@dietTable+2,w,c
 10207  00DCF8  103B               	iorwf	diet_press@dietTable+3,w,c
 10208  00DCFA  A4D8               	btfss	status,2,c
 10209  00DCFC  D00C               	goto	l570
 10210  00DCFE  503C               	movf	diet_press@dietTable+4,w,c
 10211  00DD00  103D               	iorwf	diet_press@dietTable+5,w,c
 10212  00DD02  A4D8               	btfss	status,2,c
 10213  00DD04  D008               	goto	l570
 10214  00DD06  503E               	movf	diet_press@dietTable+6,w,c
 10215  00DD08  103F               	iorwf	diet_press@dietTable+7,w,c
 10216  00DD0A  A4D8               	btfss	status,2,c
 10217  00DD0C  D004               	goto	l570
 10218                           
 10219                           ;standbyMode.c: 1271: sum = 10;
 10220  00DD0E  0E00               	movlw	0
 10221  00DD10  6E36               	movwf	diet_press@sum+1,c
 10222  00DD12  0E0A               	movlw	10
 10223  00DD14  D144               	goto	L105
 10224  00DD16                     l570:
 10225                           
 10226                           ;standbyMode.c: 1275: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10227  00DD16  0E03               	movlw	3
 10228  00DD18  1838               	xorwf	diet_press@dietTable,w,c
 10229  00DD1A  1039               	iorwf	diet_press@dietTable+1,w,c
 10230  00DD1C  A4D8               	btfss	status,2,c
 10231  00DD1E  D011               	goto	l572
 10232  00DD20  0E0C               	movlw	12
 10233  00DD22  183A               	xorwf	diet_press@dietTable+2,w,c
 10234  00DD24  103B               	iorwf	diet_press@dietTable+3,w,c
 10235  00DD26  A4D8               	btfss	status,2,c
 10236  00DD28  D00C               	goto	l572
 10237  00DD2A  503C               	movf	diet_press@dietTable+4,w,c
 10238  00DD2C  103D               	iorwf	diet_press@dietTable+5,w,c
 10239  00DD2E  A4D8               	btfss	status,2,c
 10240  00DD30  D008               	goto	l572
 10241  00DD32  503E               	movf	diet_press@dietTable+6,w,c
 10242  00DD34  103F               	iorwf	diet_press@dietTable+7,w,c
 10243  00DD36  A4D8               	btfss	status,2,c
 10244  00DD38  D004               	goto	l572
 10245                           
 10246                           ;standbyMode.c: 1276: sum = 15;
 10247  00DD3A  0E00               	movlw	0
 10248  00DD3C  6E36               	movwf	diet_press@sum+1,c
 10249  00DD3E  0E0F               	movlw	15
 10250  00DD40  D12E               	goto	L105
 10251  00DD42                     l572:
 10252                           
 10253                           ;standbyMode.c: 1280: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10254  00DD42  0E07               	movlw	7
 10255  00DD44  1838               	xorwf	diet_press@dietTable,w,c
 10256  00DD46  1039               	iorwf	diet_press@dietTable+1,w,c
 10257  00DD48  A4D8               	btfss	status,2,c
 10258  00DD4A  D011               	goto	l574
 10259  00DD4C  0E0C               	movlw	12
 10260  00DD4E  183A               	xorwf	diet_press@dietTable+2,w,c
 10261  00DD50  103B               	iorwf	diet_press@dietTable+3,w,c
 10262  00DD52  A4D8               	btfss	status,2,c
 10263  00DD54  D00C               	goto	l574
 10264  00DD56  503C               	movf	diet_press@dietTable+4,w,c
 10265  00DD58  103D               	iorwf	diet_press@dietTable+5,w,c
 10266  00DD5A  A4D8               	btfss	status,2,c
 10267  00DD5C  D008               	goto	l574
 10268  00DD5E  503E               	movf	diet_press@dietTable+6,w,c
 10269  00DD60  103F               	iorwf	diet_press@dietTable+7,w,c
 10270  00DD62  A4D8               	btfss	status,2,c
 10271  00DD64  D004               	goto	l574
 10272                           
 10273                           ;standbyMode.c: 1281: sum = 19;
 10274  00DD66  0E00               	movlw	0
 10275  00DD68  6E36               	movwf	diet_press@sum+1,c
 10276  00DD6A  0E13               	movlw	19
 10277  00DD6C  D118               	goto	L105
 10278  00DD6E                     l574:
 10279                           
 10280                           ;standbyMode.c: 1285: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10281  00DD6E  0E03               	movlw	3
 10282  00DD70  1838               	xorwf	diet_press@dietTable,w,c
 10283  00DD72  1039               	iorwf	diet_press@dietTable+1,w,c
 10284  00DD74  A4D8               	btfss	status,2,c
 10285  00DD76  D012               	goto	l576
 10286  00DD78  0E03               	movlw	3
 10287  00DD7A  183A               	xorwf	diet_press@dietTable+2,w,c
 10288  00DD7C  103B               	iorwf	diet_press@dietTable+3,w,c
 10289  00DD7E  A4D8               	btfss	status,2,c
 10290  00DD80  D00D               	goto	l576
 10291  00DD82  0E07               	movlw	7
 10292  00DD84  183C               	xorwf	diet_press@dietTable+4,w,c
 10293  00DD86  103D               	iorwf	diet_press@dietTable+5,w,c
 10294  00DD88  A4D8               	btfss	status,2,c
 10295  00DD8A  D008               	goto	l576
 10296  00DD8C  503E               	movf	diet_press@dietTable+6,w,c
 10297  00DD8E  103F               	iorwf	diet_press@dietTable+7,w,c
 10298  00DD90  A4D8               	btfss	status,2,c
 10299  00DD92  D004               	goto	l576
 10300                           
 10301                           ;standbyMode.c: 1286: sum = 13;
 10302  00DD94  0E00               	movlw	0
 10303  00DD96  6E36               	movwf	diet_press@sum+1,c
 10304  00DD98  0E0D               	movlw	13
 10305  00DD9A  D101               	goto	L105
 10306  00DD9C                     l576:
 10307                           
 10308                           ;standbyMode.c: 1290: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10309  00DD9C  0E03               	movlw	3
 10310  00DD9E  1838               	xorwf	diet_press@dietTable,w,c
 10311  00DDA0  1039               	iorwf	diet_press@dietTable+1,w,c
 10312  00DDA2  A4D8               	btfss	status,2,c
 10313  00DDA4  D012               	goto	l578
 10314  00DDA6  0E03               	movlw	3
 10315  00DDA8  183A               	xorwf	diet_press@dietTable+2,w,c
 10316  00DDAA  103B               	iorwf	diet_press@dietTable+3,w,c
 10317  00DDAC  A4D8               	btfss	status,2,c
 10318  00DDAE  D00D               	goto	l578
 10319  00DDB0  0E0C               	movlw	12
 10320  00DDB2  183C               	xorwf	diet_press@dietTable+4,w,c
 10321  00DDB4  103D               	iorwf	diet_press@dietTable+5,w,c
 10322  00DDB6  A4D8               	btfss	status,2,c
 10323  00DDB8  D008               	goto	l578
 10324  00DDBA  503E               	movf	diet_press@dietTable+6,w,c
 10325  00DDBC  103F               	iorwf	diet_press@dietTable+7,w,c
 10326  00DDBE  A4D8               	btfss	status,2,c
 10327  00DDC0  D004               	goto	l578
 10328                           
 10329                           ;standbyMode.c: 1291: sum = 18;
 10330  00DDC2  0E00               	movlw	0
 10331  00DDC4  6E36               	movwf	diet_press@sum+1,c
 10332  00DDC6  0E12               	movlw	18
 10333  00DDC8  D0EA               	goto	L105
 10334  00DDCA                     l578:
 10335                           
 10336                           ;standbyMode.c: 1295: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10337  00DDCA  0E03               	movlw	3
 10338  00DDCC  1838               	xorwf	diet_press@dietTable,w,c
 10339  00DDCE  1039               	iorwf	diet_press@dietTable+1,w,c
 10340  00DDD0  A4D8               	btfss	status,2,c
 10341  00DDD2  D012               	goto	l580
 10342  00DDD4  0E07               	movlw	7
 10343  00DDD6  183A               	xorwf	diet_press@dietTable+2,w,c
 10344  00DDD8  103B               	iorwf	diet_press@dietTable+3,w,c
 10345  00DDDA  A4D8               	btfss	status,2,c
 10346  00DDDC  D00D               	goto	l580
 10347  00DDDE  0E07               	movlw	7
 10348  00DDE0  183C               	xorwf	diet_press@dietTable+4,w,c
 10349  00DDE2  103D               	iorwf	diet_press@dietTable+5,w,c
 10350  00DDE4  A4D8               	btfss	status,2,c
 10351  00DDE6  D008               	goto	l580
 10352  00DDE8  503E               	movf	diet_press@dietTable+6,w,c
 10353  00DDEA  103F               	iorwf	diet_press@dietTable+7,w,c
 10354  00DDEC  A4D8               	btfss	status,2,c
 10355  00DDEE  D004               	goto	l580
 10356                           
 10357                           ;standbyMode.c: 1296: sum = 17;
 10358  00DDF0  0E00               	movlw	0
 10359  00DDF2  6E36               	movwf	diet_press@sum+1,c
 10360  00DDF4  0E11               	movlw	17
 10361  00DDF6  D0D3               	goto	L105
 10362  00DDF8                     l580:
 10363                           
 10364                           ;standbyMode.c: 1300: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10365  00DDF8  0E03               	movlw	3
 10366  00DDFA  1838               	xorwf	diet_press@dietTable,w,c
 10367  00DDFC  1039               	iorwf	diet_press@dietTable+1,w,c
 10368  00DDFE  A4D8               	btfss	status,2,c
 10369  00DE00  D012               	goto	l582
 10370  00DE02  0E0C               	movlw	12
 10371  00DE04  183A               	xorwf	diet_press@dietTable+2,w,c
 10372  00DE06  103B               	iorwf	diet_press@dietTable+3,w,c
 10373  00DE08  A4D8               	btfss	status,2,c
 10374  00DE0A  D00D               	goto	l582
 10375  00DE0C  0E0C               	movlw	12
 10376  00DE0E  183C               	xorwf	diet_press@dietTable+4,w,c
 10377  00DE10  103D               	iorwf	diet_press@dietTable+5,w,c
 10378  00DE12  A4D8               	btfss	status,2,c
 10379  00DE14  D008               	goto	l582
 10380  00DE16  503E               	movf	diet_press@dietTable+6,w,c
 10381  00DE18  103F               	iorwf	diet_press@dietTable+7,w,c
 10382  00DE1A  A4D8               	btfss	status,2,c
 10383  00DE1C  D004               	goto	l582
 10384                           
 10385                           ;standbyMode.c: 1301: sum = 27;
 10386  00DE1E  0E00               	movlw	0
 10387  00DE20  6E36               	movwf	diet_press@sum+1,c
 10388  00DE22  0E1B               	movlw	27
 10389  00DE24  D0BC               	goto	L105
 10390  00DE26                     l582:
 10391                           
 10392                           ;standbyMode.c: 1305: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10393  00DE26  0E03               	movlw	3
 10394  00DE28  1838               	xorwf	diet_press@dietTable,w,c
 10395  00DE2A  1039               	iorwf	diet_press@dietTable+1,w,c
 10396  00DE2C  A4D8               	btfss	status,2,c
 10397  00DE2E  D012               	goto	l584
 10398  00DE30  0E07               	movlw	7
 10399  00DE32  183A               	xorwf	diet_press@dietTable+2,w,c
 10400  00DE34  103B               	iorwf	diet_press@dietTable+3,w,c
 10401  00DE36  A4D8               	btfss	status,2,c
 10402  00DE38  D00D               	goto	l584
 10403  00DE3A  0E0C               	movlw	12
 10404  00DE3C  183C               	xorwf	diet_press@dietTable+4,w,c
 10405  00DE3E  103D               	iorwf	diet_press@dietTable+5,w,c
 10406  00DE40  A4D8               	btfss	status,2,c
 10407  00DE42  D008               	goto	l584
 10408  00DE44  503E               	movf	diet_press@dietTable+6,w,c
 10409  00DE46  103F               	iorwf	diet_press@dietTable+7,w,c
 10410  00DE48  A4D8               	btfss	status,2,c
 10411  00DE4A  D004               	goto	l584
 10412                           
 10413                           ;standbyMode.c: 1306: sum = 22;
 10414  00DE4C  0E00               	movlw	0
 10415  00DE4E  6E36               	movwf	diet_press@sum+1,c
 10416  00DE50  0E16               	movlw	22
 10417  00DE52  D0A5               	goto	L105
 10418  00DE54                     l584:
 10419                           
 10420                           ;standbyMode.c: 1310: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10421  00DE54  0E07               	movlw	7
 10422  00DE56  1838               	xorwf	diet_press@dietTable,w,c
 10423  00DE58  1039               	iorwf	diet_press@dietTable+1,w,c
 10424  00DE5A  A4D8               	btfss	status,2,c
 10425  00DE5C  D012               	goto	l586
 10426  00DE5E  0E07               	movlw	7
 10427  00DE60  183A               	xorwf	diet_press@dietTable+2,w,c
 10428  00DE62  103B               	iorwf	diet_press@dietTable+3,w,c
 10429  00DE64  A4D8               	btfss	status,2,c
 10430  00DE66  D00D               	goto	l586
 10431  00DE68  0E0C               	movlw	12
 10432  00DE6A  183C               	xorwf	diet_press@dietTable+4,w,c
 10433  00DE6C  103D               	iorwf	diet_press@dietTable+5,w,c
 10434  00DE6E  A4D8               	btfss	status,2,c
 10435  00DE70  D008               	goto	l586
 10436  00DE72  503E               	movf	diet_press@dietTable+6,w,c
 10437  00DE74  103F               	iorwf	diet_press@dietTable+7,w,c
 10438  00DE76  A4D8               	btfss	status,2,c
 10439  00DE78  D004               	goto	l586
 10440                           
 10441                           ;standbyMode.c: 1311: sum = 26;
 10442  00DE7A  0E00               	movlw	0
 10443  00DE7C  6E36               	movwf	diet_press@sum+1,c
 10444  00DE7E  0E1A               	movlw	26
 10445  00DE80  D08E               	goto	L105
 10446  00DE82                     l586:
 10447                           
 10448                           ;standbyMode.c: 1315: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10449  00DE82  0E07               	movlw	7
 10450  00DE84  1838               	xorwf	diet_press@dietTable,w,c
 10451  00DE86  1039               	iorwf	diet_press@dietTable+1,w,c
 10452  00DE88  A4D8               	btfss	status,2,c
 10453  00DE8A  D012               	goto	l588
 10454  00DE8C  0E0C               	movlw	12
 10455  00DE8E  183A               	xorwf	diet_press@dietTable+2,w,c
 10456  00DE90  103B               	iorwf	diet_press@dietTable+3,w,c
 10457  00DE92  A4D8               	btfss	status,2,c
 10458  00DE94  D00D               	goto	l588
 10459  00DE96  0E0C               	movlw	12
 10460  00DE98  183C               	xorwf	diet_press@dietTable+4,w,c
 10461  00DE9A  103D               	iorwf	diet_press@dietTable+5,w,c
 10462  00DE9C  A4D8               	btfss	status,2,c
 10463  00DE9E  D008               	goto	l588
 10464  00DEA0  503E               	movf	diet_press@dietTable+6,w,c
 10465  00DEA2  103F               	iorwf	diet_press@dietTable+7,w,c
 10466  00DEA4  A4D8               	btfss	status,2,c
 10467  00DEA6  D004               	goto	l588
 10468                           
 10469                           ;standbyMode.c: 1316: sum = 31;
 10470  00DEA8  0E00               	movlw	0
 10471  00DEAA  6E36               	movwf	diet_press@sum+1,c
 10472  00DEAC  0E1F               	movlw	31
 10473  00DEAE  D077               	goto	L105
 10474  00DEB0                     l588:
 10475                           
 10476                           ;standbyMode.c: 1320: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10477  00DEB0  0E03               	movlw	3
 10478  00DEB2  1838               	xorwf	diet_press@dietTable,w,c
 10479  00DEB4  1039               	iorwf	diet_press@dietTable+1,w,c
 10480  00DEB6  A4D8               	btfss	status,2,c
 10481  00DEB8  D013               	goto	l590
 10482  00DEBA  0E03               	movlw	3
 10483  00DEBC  183A               	xorwf	diet_press@dietTable+2,w,c
 10484  00DEBE  103B               	iorwf	diet_press@dietTable+3,w,c
 10485  00DEC0  A4D8               	btfss	status,2,c
 10486  00DEC2  D00E               	goto	l590
 10487  00DEC4  0E07               	movlw	7
 10488  00DEC6  183C               	xorwf	diet_press@dietTable+4,w,c
 10489  00DEC8  103D               	iorwf	diet_press@dietTable+5,w,c
 10490  00DECA  A4D8               	btfss	status,2,c
 10491  00DECC  D009               	goto	l590
 10492  00DECE  0E0C               	movlw	12
 10493  00DED0  183E               	xorwf	diet_press@dietTable+6,w,c
 10494  00DED2  103F               	iorwf	diet_press@dietTable+7,w,c
 10495  00DED4  A4D8               	btfss	status,2,c
 10496  00DED6  D004               	goto	l590
 10497                           
 10498                           ;standbyMode.c: 1321: sum = 25;
 10499  00DED8  0E00               	movlw	0
 10500  00DEDA  6E36               	movwf	diet_press@sum+1,c
 10501  00DEDC  0E19               	movlw	25
 10502  00DEDE  D05F               	goto	L105
 10503  00DEE0                     l590:
 10504                           
 10505                           ;standbyMode.c: 1325: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10506  00DEE0  0E03               	movlw	3
 10507  00DEE2  1838               	xorwf	diet_press@dietTable,w,c
 10508  00DEE4  1039               	iorwf	diet_press@dietTable+1,w,c
 10509  00DEE6  A4D8               	btfss	status,2,c
 10510  00DEE8  D013               	goto	l592
 10511  00DEEA  0E07               	movlw	7
 10512  00DEEC  183A               	xorwf	diet_press@dietTable+2,w,c
 10513  00DEEE  103B               	iorwf	diet_press@dietTable+3,w,c
 10514  00DEF0  A4D8               	btfss	status,2,c
 10515  00DEF2  D00E               	goto	l592
 10516  00DEF4  0E07               	movlw	7
 10517  00DEF6  183C               	xorwf	diet_press@dietTable+4,w,c
 10518  00DEF8  103D               	iorwf	diet_press@dietTable+5,w,c
 10519  00DEFA  A4D8               	btfss	status,2,c
 10520  00DEFC  D009               	goto	l592
 10521  00DEFE  0E0C               	movlw	12
 10522  00DF00  183E               	xorwf	diet_press@dietTable+6,w,c
 10523  00DF02  103F               	iorwf	diet_press@dietTable+7,w,c
 10524  00DF04  A4D8               	btfss	status,2,c
 10525  00DF06  D004               	goto	l592
 10526                           
 10527                           ;standbyMode.c: 1326: sum = 29;
 10528  00DF08  0E00               	movlw	0
 10529  00DF0A  6E36               	movwf	diet_press@sum+1,c
 10530  00DF0C  0E1D               	movlw	29
 10531  00DF0E  D047               	goto	L105
 10532  00DF10                     l592:
 10533                           
 10534                           ;standbyMode.c: 1330: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 10535  00DF10  0E03               	movlw	3
 10536  00DF12  1838               	xorwf	diet_press@dietTable,w,c
 10537  00DF14  1039               	iorwf	diet_press@dietTable+1,w,c
 10538  00DF16  A4D8               	btfss	status,2,c
 10539  00DF18  D013               	goto	l594
 10540  00DF1A  0E07               	movlw	7
 10541  00DF1C  183A               	xorwf	diet_press@dietTable+2,w,c
 10542  00DF1E  103B               	iorwf	diet_press@dietTable+3,w,c
 10543  00DF20  A4D8               	btfss	status,2,c
 10544  00DF22  D00E               	goto	l594
 10545  00DF24  0E0C               	movlw	12
 10546  00DF26  183C               	xorwf	diet_press@dietTable+4,w,c
 10547  00DF28  103D               	iorwf	diet_press@dietTable+5,w,c
 10548  00DF2A  A4D8               	btfss	status,2,c
 10549  00DF2C  D009               	goto	l594
 10550  00DF2E  0E0C               	movlw	12
 10551  00DF30  183E               	xorwf	diet_press@dietTable+6,w,c
 10552  00DF32  103F               	iorwf	diet_press@dietTable+7,w,c
 10553  00DF34  A4D8               	btfss	status,2,c
 10554  00DF36  D004               	goto	l594
 10555                           
 10556                           ;standbyMode.c: 1331: sum = 34;
 10557  00DF38  0E00               	movlw	0
 10558  00DF3A  6E36               	movwf	diet_press@sum+1,c
 10559  00DF3C  0E22               	movlw	34
 10560  00DF3E  D02F               	goto	L105
 10561  00DF40                     l594:
 10562                           
 10563                           ;standbyMode.c: 1335: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 10564  00DF40  0E03               	movlw	3
 10565  00DF42  1838               	xorwf	diet_press@dietTable,w,c
 10566  00DF44  1039               	iorwf	diet_press@dietTable+1,w,c
 10567  00DF46  A4D8               	btfss	status,2,c
 10568  00DF48  D013               	goto	l596
 10569  00DF4A  0E0C               	movlw	12
 10570  00DF4C  183A               	xorwf	diet_press@dietTable+2,w,c
 10571  00DF4E  103B               	iorwf	diet_press@dietTable+3,w,c
 10572  00DF50  A4D8               	btfss	status,2,c
 10573  00DF52  D00E               	goto	l596
 10574  00DF54  0E0C               	movlw	12
 10575  00DF56  183C               	xorwf	diet_press@dietTable+4,w,c
 10576  00DF58  103D               	iorwf	diet_press@dietTable+5,w,c
 10577  00DF5A  A4D8               	btfss	status,2,c
 10578  00DF5C  D009               	goto	l596
 10579  00DF5E  0E0C               	movlw	12
 10580  00DF60  183E               	xorwf	diet_press@dietTable+6,w,c
 10581  00DF62  103F               	iorwf	diet_press@dietTable+7,w,c
 10582  00DF64  A4D8               	btfss	status,2,c
 10583  00DF66  D004               	goto	l596
 10584                           
 10585                           ;standbyMode.c: 1336: sum = 39;
 10586  00DF68  0E00               	movlw	0
 10587  00DF6A  6E36               	movwf	diet_press@sum+1,c
 10588  00DF6C  0E27               	movlw	39
 10589  00DF6E  D017               	goto	L105
 10590  00DF70                     l596:
 10591                           
 10592                           ;standbyMode.c: 1340: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 10593  00DF70  0E07               	movlw	7
 10594  00DF72  1838               	xorwf	diet_press@dietTable,w,c
 10595  00DF74  1039               	iorwf	diet_press@dietTable+1,w,c
 10596  00DF76  A4D8               	btfss	status,2,c
 10597  00DF78  D014               	goto	l598
 10598  00DF7A  0E0C               	movlw	12
 10599  00DF7C  183A               	xorwf	diet_press@dietTable+2,w,c
 10600  00DF7E  103B               	iorwf	diet_press@dietTable+3,w,c
 10601  00DF80  A4D8               	btfss	status,2,c
 10602  00DF82  D00F               	goto	l598
 10603  00DF84  0E0C               	movlw	12
 10604  00DF86  183C               	xorwf	diet_press@dietTable+4,w,c
 10605  00DF88  103D               	iorwf	diet_press@dietTable+5,w,c
 10606  00DF8A  A4D8               	btfss	status,2,c
 10607  00DF8C  D00A               	goto	l598
 10608  00DF8E  0E0C               	movlw	12
 10609  00DF90  183E               	xorwf	diet_press@dietTable+6,w,c
 10610  00DF92  103F               	iorwf	diet_press@dietTable+7,w,c
 10611  00DF94  A4D8               	btfss	status,2,c
 10612  00DF96  D005               	goto	l598
 10613                           
 10614                           ;standbyMode.c: 1341: sum = 43;
 10615  00DF98  0E00               	movlw	0
 10616  00DF9A  6E36               	movwf	diet_press@sum+1,c
 10617  00DF9C  0E2B               	movlw	43
 10618  00DF9E                     L105:
 10619  00DF9E  6E35               	movwf	diet_press@sum,c
 10620                           
 10621                           ;standbyMode.c: 1342: }
 10622  00DFA0  D02A               	goto	l599
 10623  00DFA2                     l598:
 10624                           
 10625                           ;standbyMode.c: 1345: else{
 10626                           ;standbyMode.c: 1346: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10627  00DFA2  0E01               	movlw	1
 10628  00DFA4  ECC2  F061         	call	_lcdInst
 10629  00DFA8  0EC3               	movlw	195
 10630  00DFAA  6E2B               	movwf	??_diet_press& (0+255),c
 10631  00DFAC  0ECD               	movlw	205
 10632  00DFAE                     u8937:
 10633  00DFAE  2EE8               	decfsz	wreg,f,c
 10634  00DFB0  D7FE               	bra	u8937
 10635  00DFB2  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10636  00DFB4  D7FC               	bra	u8937
 10637  00DFB6  F000               	nop	
 10638                           
 10639                           ;standbyMode.c: 1347: printf("Invalid diet!");
 10640  00DFB8  0EDF               	movlw	low STR_55
 10641  00DFBA  6E0D               	movwf	printf@f,c
 10642  00DFBC  0EFE               	movlw	high STR_55
 10643  00DFBE  6E0E               	movwf	printf@f+1,c
 10644  00DFC0  EC6E  F06B         	call	_printf	;wreg free
 10645                           
 10646                           ;standbyMode.c: 1348: lcdInst(0xC0);;
 10647  00DFC4  0EC0               	movlw	192
 10648  00DFC6  ECC2  F061         	call	_lcdInst
 10649                           
 10650                           ;standbyMode.c: 1349: printf("Try again.");
 10651  00DFCA  0E6C               	movlw	low STR_52
 10652  00DFCC  6E0D               	movwf	printf@f,c
 10653  00DFCE  0EFF               	movlw	high STR_52
 10654  00DFD0  6E0E               	movwf	printf@f+1,c
 10655  00DFD2  EC6E  F06B         	call	_printf	;wreg free
 10656                           
 10657                           ;standbyMode.c: 1350: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10658  00DFD6  0E33               	movlw	51
 10659  00DFD8  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 10660  00DFDA  0EBB               	movlw	187
 10661  00DFDC  6E2B               	movwf	??_diet_press& (0+255),c
 10662  00DFDE  0EE0               	movlw	224
 10663  00DFE0                     u8947:
 10664  00DFE0  2EE8               	decfsz	wreg,f,c
 10665  00DFE2  D7FE               	bra	u8947
 10666  00DFE4  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10667  00DFE6  D7FC               	bra	u8947
 10668  00DFE8  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 10669  00DFEA  D7FA               	bra	u8947
 10670                           
 10671                           ;standbyMode.c: 1351: sum = 0;
 10672  00DFEC  0E00               	movlw	0
 10673  00DFEE  6E36               	movwf	diet_press@sum+1,c
 10674  00DFF0  0E00               	movlw	0
 10675  00DFF2  6E35               	movwf	diet_press@sum,c
 10676                           
 10677                           ;standbyMode.c: 1352: goto START;
 10678  00DFF4  D56C               	goto	_diet_press
 10679  00DFF6                     l599:
 10680                           
 10681                           ;standbyMode.c: 1353: }
 10682                           ;standbyMode.c: 1354: return sum;
 10683  00DFF6  C035  F029         	movff	diet_press@sum,?_diet_press
 10684  00DFFA  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 10685  00DFFE  0012               	return		;funcret
 10686  00E000                     __end_of_diet_press:
 10687                           	opt stack 0
 10688                           tblptru	equ	0xFF8
 10689                           tblptrh	equ	0xFF7
 10690                           tblptrl	equ	0xFF6
 10691                           tablat	equ	0xFF5
 10692                           prodh	equ	0xFF4
 10693                           prodl	equ	0xFF3
 10694                           intcon	equ	0xFF2
 10695                           postinc0	equ	0xFEE
 10696                           wreg	equ	0xFE8
 10697                           postdec1	equ	0xFE5
 10698                           plusw1	equ	0xFE3
 10699                           fsr1l	equ	0xFE1
 10700                           indf2	equ	0xFDF
 10701                           postinc2	equ	0xFDE
 10702                           postdec2	equ	0xFDD
 10703                           plusw2	equ	0xFDB
 10704                           fsr2h	equ	0xFDA
 10705                           fsr2l	equ	0xFD9
 10706                           status	equ	0xFD8
 10707                           
 10708 ;; *************** function _printf *****************
 10709 ;; Defined at:
 10710 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10713 ;;		 -> STR_88(11), STR_87(13), STR_86(11), STR_85(13), 
 10714 ;;		 -> STR_84(11), STR_83(8), STR_82(15), STR_81(16), 
 10715 ;;		 -> STR_80(10), STR_79(8), STR_78(15), STR_77(16), 
 10716 ;;		 -> STR_76(10), STR_75(16), STR_74(16), STR_73(17), 
 10717 ;;		 -> STR_72(13), STR_71(17), STR_70(14), STR_69(11), 
 10718 ;;		 -> STR_68(11), STR_67(15), STR_66(15), STR_65(10), 
 10719 ;;		 -> STR_64(13), STR_63(16), STR_62(16), STR_61(17), 
 10720 ;;		 -> STR_60(17), STR_59(8), STR_58(15), STR_57(15), 
 10721 ;;		 -> STR_56(11), STR_55(14), STR_54(16), STR_53(16), 
 10722 ;;		 -> STR_52(11), STR_51(14), STR_50(16), STR_49(16), 
 10723 ;;		 -> STR_48(16), STR_47(13), STR_46(14), STR_45(14), 
 10724 ;;		 -> STR_44(15), STR_43(17), STR_42(18), STR_41(15), 
 10725 ;;		 -> STR_40(11), STR_39(7), STR_38(3), STR_37(16), 
 10726 ;;		 -> STR_36(8), STR_35(16), STR_34(15), STR_33(6), 
 10727 ;;		 -> STR_32(14), STR_31(17), STR_30(7), STR_29(9), 
 10728 ;;		 -> STR_28(17), STR_27(11), STR_26(17), STR_25(14), 
 10729 ;;		 -> STR_24(17), STR_23(11), STR_22(15), STR_21(11), 
 10730 ;;		 -> STR_20(8), STR_1(8), 
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;  idx             1   26[COMRAM] unsigned char 
 10733 ;;  tmpval          4    0        struct .
 10734 ;;  width           2   37[COMRAM] int 
 10735 ;;  val             2   34[COMRAM] unsigned int 
 10736 ;;  len             2   32[COMRAM] unsigned int 
 10737 ;;  ap              2   30[COMRAM] PTR void [1]
 10738 ;;		 -> ?_printf(2), 
 10739 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 10740 ;;		 -> STR_89(7), STR_19(5), STR_18(5), STR_17(5), 
 10741 ;;		 -> STR_16(5), STR_15(5), STR_14(4), STR_13(4), 
 10742 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10743 ;;		 -> STR_8(4), STR_7(3), STR_6(3), STR_5(3), 
 10744 ;;		 -> STR_4(2), STR_3(2), STR_2(2), 
 10745 ;;  c               1   39[COMRAM] char 
 10746 ;;  flag            1   36[COMRAM] unsigned char 
 10747 ;;  prec            1   27[COMRAM] char 
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  2   12[COMRAM] int 
 10750 ;; Registers used:
 10751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10757 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;Total ram usage:       28 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    2
 10764 ;; This function calls:
 10765 ;;		___lwdiv
 10766 ;;		___lwmod
 10767 ;;		___wmul
 10768 ;;		_isdigit
 10769 ;;		_putch
 10770 ;; This function is called by:
 10771 ;;		_main
 10772 ;;		_viewLogs
 10773 ;;		_displayLogs
 10774 ;;		_food_press
 10775 ;;		_diet_press
 10776 ;;		_which_drawer
 10777 ;;		_standbyMode
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           	psect	text18
 10782  00D6DC                     __ptext18:
 10783                           	opt stack 0
 10784  00D6DC                     _printf:
 10785                           	opt stack 26
 10786                           
 10787                           ;doprnt.c: 466: va_list ap;
 10788                           ;doprnt.c: 499: signed char c;
 10789                           ;doprnt.c: 501: int width;
 10790                           ;doprnt.c: 506: signed char prec;
 10791                           ;doprnt.c: 508: unsigned char flag;
 10792                           ;doprnt.c: 523: union {
 10793                           ;doprnt.c: 524: unsigned long vd;
 10794                           ;doprnt.c: 525: double integ;
 10795                           ;doprnt.c: 526: } tmpval;
 10796                           ;doprnt.c: 528: unsigned int val;
 10797                           ;doprnt.c: 529: unsigned len;
 10798                           ;doprnt.c: 530: const char * cp;
 10799                           ;doprnt.c: 533: *ap = __va_start();
 10800                           
 10801                           ;incstack = 0
 10802  00D6DC  0E0F               	movlw	low (?_printf+2)
 10803  00D6DE  6E1F               	movwf	printf@ap,c
 10804  00D6E0  0E00               	movlw	high (?_printf+2)
 10805  00D6E2  6E20               	movwf	printf@ap+1,c
 10806                           
 10807                           ;doprnt.c: 536: while(c = *f++) {
 10808  00D6E4  D1E6               	goto	u4490
 10809  00D6E6                     
 10810                           ;doprnt.c: 538: if(c != '%')
 10811  00D6E6  0E25               	movlw	37
 10812  00D6E8  1828               	xorwf	printf@c,w,c
 10813  00D6EA  B4D8               	btfsc	status,2,c
 10814  00D6EC  D004               	goto	l996
 10815                           
 10816                           ;doprnt.c: 540: {
 10817                           ;doprnt.c: 541: (putch(c) );
 10818  00D6EE  5028               	movf	printf@c,w,c
 10819  00D6F0  ECCC  F061         	call	_putch
 10820                           
 10821                           ;doprnt.c: 542: continue;
 10822  00D6F4  D1DE               	goto	u4490
 10823  00D6F6                     l996:
 10824                           
 10825                           ;doprnt.c: 543: }
 10826                           ;doprnt.c: 546: width = 0;
 10827  00D6F6  0E00               	movlw	0
 10828  00D6F8  6E27               	movwf	printf@width+1,c
 10829  00D6FA  0E00               	movlw	0
 10830  00D6FC  6E26               	movwf	printf@width,c
 10831                           
 10832                           ;doprnt.c: 548: flag = 0;
 10833  00D6FE  0E00               	movlw	0
 10834  00D700  6E25               	movwf	printf@flag,c
 10835                           
 10836                           ;doprnt.c: 551: switch(*f) {
 10837                           
 10838                           ;doprnt.c: 550: for(;;) {
 10839  00D702  D003               	goto	l998
 10840  00D704                     
 10841                           ;doprnt.c: 580: flag |= 0x04;
 10842  00D704  8425               	bsf	printf@flag,2,c
 10843                           
 10844                           ;doprnt.c: 581: f++;
 10845  00D706  4A0D               	infsnz	printf@f,f,c
 10846  00D708  2A0E               	incf	printf@f+1,f,c
 10847  00D70A                     l998:
 10848  00D70A  C00D  FFF6         	movff	printf@f,tblptrl
 10849  00D70E  C00E  FFF7         	movff	printf@f+1,tblptrh
 10850  00D712                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10851  00D712  6AF8               	clrf	tblptru,c
 10852  00D714                     	endif
 10853  00D714                     	if	0	;tblptru may be non-zero
 10854  00D714                     	endif
 10855  00D714  0008               	tblrd		*
 10856  00D716  50F5               	movf	tablat,w,c
 10857                           
 10858                           ; Switch size 1, requested type "space"
 10859                           ; Number of cases is 1, Range of values is 48 to 48
 10860                           ; switch strategies available:
 10861                           ; Name         Instructions Cycles
 10862                           ; simple_byte            4     3 (average)
 10863                           ;	Chosen strategy is simple_byte
 10864  00D718  0A30               	xorlw	48	; case 48
 10865  00D71A  B4D8               	btfsc	status,2,c
 10866  00D71C  D7F3               	goto	l999
 10867                           
 10868                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10869                           
 10870                           ;doprnt.c: 586: }
 10871                           
 10872                           ;doprnt.c: 585: break;
 10873  00D71E  C00D  FFF6         	movff	printf@f,tblptrl
 10874  00D722  C00E  FFF7         	movff	printf@f+1,tblptrh
 10875  00D726                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10876  00D726  6AF8               	clrf	tblptru,c
 10877  00D728                     	endif
 10878  00D728                     	if	0	;tblptru may be non-zero
 10879  00D728                     	endif
 10880  00D728  0008               	tblrd		*
 10881  00D72A  50F5               	movf	tablat,w,c
 10882  00D72C  ECEB  F061         	call	_isdigit
 10883  00D730  A0D8               	btfss	status,0,c
 10884  00D732  D092               	goto	l1006
 10885                           
 10886                           ;doprnt.c: 598: width = 0;
 10887  00D734  0E00               	movlw	0
 10888  00D736  6E27               	movwf	printf@width+1,c
 10889  00D738  0E00               	movlw	0
 10890  00D73A  6E26               	movwf	printf@width,c
 10891  00D73C                     
 10892                           ;doprnt.c: 600: width *= 10;
 10893  00D73C  C026  F001         	movff	printf@width,___wmul@multiplier
 10894  00D740  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 10895  00D744  0E00               	movlw	0
 10896  00D746  6E04               	movwf	___wmul@multiplicand+1,c
 10897  00D748  0E0A               	movlw	10
 10898  00D74A  6E03               	movwf	___wmul@multiplicand,c
 10899  00D74C  EC1E  F062         	call	___wmul	;wreg free
 10900  00D750  C001  F026         	movff	?___wmul,printf@width
 10901  00D754  C002  F027         	movff	?___wmul+1,printf@width+1
 10902                           
 10903                           ;doprnt.c: 601: width += *f++ - '0';
 10904  00D758  0ED0               	movlw	208
 10905  00D75A  6E17               	movwf	??_printf& (0+255),c
 10906  00D75C  0EFF               	movlw	255
 10907  00D75E  6E18               	movwf	(??_printf+1)& (0+255),c
 10908  00D760  C00D  FFF6         	movff	printf@f,tblptrl
 10909  00D764  C00E  FFF7         	movff	printf@f+1,tblptrh
 10910  00D768                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10911  00D768  6AF8               	clrf	tblptru,c
 10912  00D76A                     	endif
 10913  00D76A                     	if	0	;tblptru may be non-zero
 10914  00D76A                     	endif
 10915  00D76A  0008               	tblrd		*
 10916  00D76C  50F5               	movf	tablat,w,c
 10917  00D76E  6E19               	movwf	(??_printf+2)& (0+255),c
 10918  00D770  6A1A               	clrf	(??_printf+3)& (0+255),c
 10919  00D772  5017               	movf	??_printf,w,c
 10920  00D774  2619               	addwf	??_printf+2,f,c
 10921  00D776  5018               	movf	??_printf+1,w,c
 10922  00D778  221A               	addwfc	??_printf+3,f,c
 10923  00D77A  5019               	movf	??_printf+2,w,c
 10924  00D77C  2626               	addwf	printf@width,f,c
 10925  00D77E  501A               	movf	??_printf+3,w,c
 10926  00D780  2227               	addwfc	printf@width+1,f,c
 10927  00D782  4A0D               	infsnz	printf@f,f,c
 10928  00D784  2A0E               	incf	printf@f+1,f,c
 10929                           
 10930                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10931  00D786  C00D  FFF6         	movff	printf@f,tblptrl
 10932  00D78A  C00E  FFF7         	movff	printf@f+1,tblptrh
 10933  00D78E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10934  00D78E  6AF8               	clrf	tblptru,c
 10935  00D790                     	endif
 10936  00D790                     	if	0	;tblptru may be non-zero
 10937  00D790                     	endif
 10938  00D790  0008               	tblrd		*
 10939  00D792  50F5               	movf	tablat,w,c
 10940  00D794  ECEB  F061         	call	_isdigit
 10941  00D798  A0D8               	btfss	status,0,c
 10942  00D79A  D05E               	goto	l1006
 10943  00D79C  D7CF               	goto	l1004
 10944  00D79E                     
 10945                           ;doprnt.c: 721: flag |= 0x80;
 10946  00D79E  8E25               	bsf	printf@flag,7,c
 10947                           
 10948                           ;doprnt.c: 723: break;
 10949  00D7A0  D076               	goto	l1011
 10950  00D7A2                     
 10951                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10952  00D7A2  C01F  FFD9         	movff	printf@ap,fsr2l
 10953  00D7A6  C020  FFDA         	movff	printf@ap+1,fsr2h
 10954  00D7AA  CFDE F01D          	movff	postinc2,printf@cp
 10955  00D7AE  CFDD F01E          	movff	postdec2,printf@cp+1
 10956  00D7B2  0E02               	movlw	2
 10957  00D7B4  261F               	addwf	printf@ap,f,c
 10958  00D7B6  0E00               	movlw	0
 10959  00D7B8  2220               	addwfc	printf@ap+1,f,c
 10960                           
 10961                           ;doprnt.c: 740: if(!cp)
 10962  00D7BA  501D               	movf	printf@cp,w,c
 10963  00D7BC  101E               	iorwf	printf@cp+1,w,c
 10964  00D7BE  A4D8               	btfss	status,2,c
 10965  00D7C0  D004               	goto	l1014
 10966                           
 10967                           ;doprnt.c: 741: cp = "(null)";
 10968  00D7C2  0EBF               	movlw	low STR_89
 10969  00D7C4  6E1D               	movwf	printf@cp,c
 10970  00D7C6  0EFF               	movlw	high STR_89
 10971  00D7C8  6E1E               	movwf	printf@cp+1,c
 10972  00D7CA                     l1014:
 10973                           
 10974                           ;doprnt.c: 745: len = 0;
 10975  00D7CA  0E00               	movlw	0
 10976  00D7CC  6E22               	movwf	printf@len+1,c
 10977  00D7CE  0E00               	movlw	0
 10978  00D7D0  6E21               	movwf	printf@len,c
 10979                           
 10980                           ;doprnt.c: 746: while(cp[len])
 10981  00D7D2  D002               	goto	l1015
 10982  00D7D4                     
 10983                           ;doprnt.c: 747: len++;
 10984  00D7D4  4A21               	infsnz	printf@len,f,c
 10985  00D7D6  2A22               	incf	printf@len+1,f,c
 10986  00D7D8                     l1015:
 10987  00D7D8  5021               	movf	printf@len,w,c
 10988  00D7DA  241D               	addwf	printf@cp,w,c
 10989  00D7DC  6E17               	movwf	??_printf& (0+255),c
 10990  00D7DE  5022               	movf	printf@len+1,w,c
 10991  00D7E0  201E               	addwfc	printf@cp+1,w,c
 10992  00D7E2  6E18               	movwf	(??_printf+1)& (0+255),c
 10993  00D7E4  C017  FFF6         	movff	??_printf,tblptrl
 10994  00D7E8  C018  FFF7         	movff	??_printf+1,tblptrh
 10995  00D7EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10996  00D7EC  6AF8               	clrf	tblptru,c
 10997  00D7EE                     	endif
 10998  00D7EE                     	if	0	;tblptru may be non-zero
 10999  00D7EE                     	endif
 11000  00D7EE  0008               	tblrd		*
 11001  00D7F0  50F5               	movf	tablat,w,c
 11002  00D7F2  0900               	iorlw	0
 11003  00D7F4  A4D8               	btfss	status,2,c
 11004  00D7F6  D7EE               	goto	l1016
 11005                           
 11006                           ;doprnt.c: 757: if(width > len)
 11007  00D7F8  5026               	movf	printf@width,w,c
 11008  00D7FA  5C21               	subwf	printf@len,w,c
 11009  00D7FC  5027               	movf	printf@width+1,w,c
 11010  00D7FE  5822               	subwfb	printf@len+1,w,c
 11011  00D800  B0D8               	btfsc	status,0,c
 11012  00D802  D005               	goto	l1018
 11013                           
 11014                           ;doprnt.c: 758: width -= len;
 11015  00D804  5021               	movf	printf@len,w,c
 11016  00D806  5E26               	subwf	printf@width,f,c
 11017  00D808  5022               	movf	printf@len+1,w,c
 11018  00D80A  5A27               	subwfb	printf@width+1,f,c
 11019  00D80C  D008               	goto	l1020
 11020  00D80E                     l1018:
 11021                           
 11022                           ;doprnt.c: 759: else
 11023                           ;doprnt.c: 760: width = 0;
 11024  00D80E  0E00               	movlw	0
 11025  00D810  6E27               	movwf	printf@width+1,c
 11026  00D812  0E00               	movlw	0
 11027  00D814  6E26               	movwf	printf@width,c
 11028                           
 11029                           ;doprnt.c: 764: while(width--)
 11030  00D816  D003               	goto	l1020
 11031  00D818                     l4800:
 11032                           
 11033                           ;doprnt.c: 765: (putch(' ') );
 11034  00D818  0E20               	movlw	32
 11035  00D81A  ECCC  F061         	call	_putch
 11036  00D81E                     l1020:
 11037  00D81E  0626               	decf	printf@width,f,c
 11038  00D820  A0D8               	btfss	status,0,c
 11039  00D822  0627               	decf	printf@width+1,f,c
 11040  00D824  2826               	incf	printf@width,w,c
 11041  00D826  E1F8               	bnz	l4800
 11042  00D828  2827               	incf	printf@width+1,w,c
 11043  00D82A  B4D8               	btfsc	status,2,c
 11044  00D82C  D00C               	goto	l1023
 11045  00D82E  D7F4               	goto	l1021
 11046  00D830                     l4804:
 11047                           
 11048                           ;doprnt.c: 768: (putch(*cp++) );
 11049  00D830  C01D  FFF6         	movff	printf@cp,tblptrl
 11050  00D834  C01E  FFF7         	movff	printf@cp+1,tblptrh
 11051  00D838                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11052  00D838  6AF8               	clrf	tblptru,c
 11053  00D83A                     	endif
 11054  00D83A                     	if	0	;tblptru may be non-zero
 11055  00D83A                     	endif
 11056  00D83A  0008               	tblrd		*
 11057  00D83C  50F5               	movf	tablat,w,c
 11058  00D83E  ECCC  F061         	call	_putch
 11059  00D842  4A1D               	infsnz	printf@cp,f,c
 11060  00D844  2A1E               	incf	printf@cp+1,f,c
 11061  00D846                     l1023:
 11062  00D846  0621               	decf	printf@len,f,c
 11063  00D848  A0D8               	btfss	status,0,c
 11064  00D84A  0622               	decf	printf@len+1,f,c
 11065  00D84C  2821               	incf	printf@len,w,c
 11066  00D84E  E1F0               	bnz	l4804
 11067  00D850  2822               	incf	printf@len+1,w,c
 11068  00D852  B4D8               	btfsc	status,2,c
 11069  00D854  D12E               	goto	u4490
 11070  00D856  D7EC               	goto	l1024
 11071  00D858                     l1006:
 11072  00D858  C00D  FFF6         	movff	printf@f,tblptrl
 11073  00D85C  C00E  FFF7         	movff	printf@f+1,tblptrh
 11074  00D860  4A0D               	infsnz	printf@f,f,c
 11075  00D862  2A0E               	incf	printf@f+1,f,c
 11076  00D864                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11077  00D864  6AF8               	clrf	tblptru,c
 11078  00D866                     	endif
 11079  00D866                     	if	0	;tblptru may be non-zero
 11080  00D866                     	endif
 11081  00D866  0008               	tblrd		*
 11082  00D868  CFF5 F028          	movff	tablat,printf@c
 11083  00D86C  5028               	movf	printf@c,w,c
 11084                           
 11085                           ; Switch size 1, requested type "space"
 11086                           ; Number of cases is 5, Range of values is 0 to 120
 11087                           ; switch strategies available:
 11088                           ; Name         Instructions Cycles
 11089                           ; simple_byte           16     9 (average)
 11090                           ;	Chosen strategy is simple_byte
 11091  00D86E  0A00               	xorlw	0	; case 0
 11092  00D870  B4D8               	btfsc	status,2,c
 11093  00D872  0012               	return	
 11094  00D874  0A64               	xorlw	100	; case 100
 11095  00D876  B4D8               	btfsc	status,2,c
 11096  00D878  D00A               	goto	l1011
 11097  00D87A  0A0D               	xorlw	13	; case 105
 11098  00D87C  B4D8               	btfsc	status,2,c
 11099  00D87E  D007               	goto	l1011
 11100  00D880  0A1A               	xorlw	26	; case 115
 11101  00D882  B4D8               	btfsc	status,2,c
 11102  00D884  D78E               	goto	l1013
 11103  00D886  0A0B               	xorlw	11	; case 120
 11104  00D888  B4D8               	btfsc	status,2,c
 11105  00D88A  D789               	goto	l1012
 11106  00D88C  D112               	goto	u4490
 11107  00D88E                     l1011:
 11108                           
 11109                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11110  00D88E  BE25               	btfsc	printf@flag,7,c
 11111  00D890  D015               	goto	l1027
 11112                           
 11113                           ;doprnt.c: 1253: {
 11114                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11115  00D892  C01F  FFD9         	movff	printf@ap,fsr2l
 11116  00D896  C020  FFDA         	movff	printf@ap+1,fsr2h
 11117  00D89A  CFDE F023          	movff	postinc2,printf@val
 11118  00D89E  CFDD F024          	movff	postdec2,printf@val+1
 11119  00D8A2  0E02               	movlw	2
 11120  00D8A4  261F               	addwf	printf@ap,f,c
 11121  00D8A6  0E00               	movlw	0
 11122  00D8A8  2220               	addwfc	printf@ap+1,f,c
 11123                           
 11124                           ;doprnt.c: 1261: if((int)val < 0) {
 11125  00D8AA  AE24               	btfss	printf@val+1,7,c
 11126  00D8AC  D04A               	goto	l1030
 11127                           
 11128                           ;doprnt.c: 1262: flag |= 0x03;
 11129  00D8AE  0E03               	movlw	3
 11130  00D8B0  1225               	iorwf	printf@flag,f,c
 11131                           
 11132                           ;doprnt.c: 1263: val = -val;
 11133  00D8B2  6C23               	negf	printf@val,c
 11134  00D8B4  1E24               	comf	printf@val+1,f,c
 11135  00D8B6  B0D8               	btfsc	status,0,c
 11136  00D8B8  2A24               	incf	printf@val+1,f,c
 11137                           
 11138                           ;doprnt.c: 1264: }
 11139                           ;doprnt.c: 1266: }
 11140  00D8BA  D043               	goto	l1030
 11141  00D8BC                     l1027:
 11142                           
 11143                           ;doprnt.c: 1268: else
 11144                           ;doprnt.c: 1273: {
 11145                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11146  00D8BC  C01F  FFD9         	movff	printf@ap,fsr2l
 11147  00D8C0  C020  FFDA         	movff	printf@ap+1,fsr2h
 11148  00D8C4  CFDE F023          	movff	postinc2,printf@val
 11149  00D8C8  CFDD F024          	movff	postdec2,printf@val+1
 11150  00D8CC  0E02               	movlw	2
 11151  00D8CE  261F               	addwf	printf@ap,f,c
 11152  00D8D0  0E00               	movlw	0
 11153  00D8D2  2220               	addwfc	printf@ap+1,f,c
 11154                           
 11155                           ;doprnt.c: 1287: }
 11156                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11157  00D8D4  D036               	goto	l1030
 11158  00D8D6                     
 11159                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11160  00D8D6  0E01               	movlw	1
 11161  00D8D8  6E28               	movwf	printf@c,c
 11162  00D8DA                     l4830:
 11163  00D8DA  0E05               	movlw	5
 11164  00D8DC  1828               	xorwf	printf@c,w,c
 11165  00D8DE  B4D8               	btfsc	status,2,c
 11166  00D8E0  D038               	goto	l1035
 11167                           
 11168                           ;doprnt.c: 1306: if(val < dpowers[c])
 11169  00D8E2  5028               	movf	printf@c,w,c
 11170  00D8E4  0D02               	mullw	2
 11171  00D8E6  0E21               	movlw	low _dpowers
 11172  00D8E8  24F3               	addwf	prodl,w,c
 11173  00D8EA  6EF6               	movwf	tblptrl,c
 11174  00D8EC  0EFD               	movlw	high _dpowers
 11175  00D8EE  20F4               	addwfc	prodh,w,c
 11176  00D8F0  6EF7               	movwf	tblptrh,c
 11177  00D8F2                     	if	1	;There are 3 active tblptr bytes
 11178  00D8F2  6AF8               	clrf	tblptru,c
 11179  00D8F4  0E00               	movlw	low (__mediumconst shr (0+16))
 11180  00D8F6  22F8               	addwfc	tblptru,f,c
 11181  00D8F8                     	endif
 11182  00D8F8  0009               	tblrd		*+
 11183  00D8FA  50F5               	movf	tablat,w,c
 11184  00D8FC  5C23               	subwf	printf@val,w,c
 11185  00D8FE  0009               	tblrd		*+
 11186  00D900  50F5               	movf	tablat,w,c
 11187  00D902  5824               	subwfb	printf@val+1,w,c
 11188  00D904  A0D8               	btfss	status,0,c
 11189  00D906  D025               	goto	l1035
 11190                           
 11191                           ;doprnt.c: 1307: break;
 11192  00D908  2A28               	incf	printf@c,f,c
 11193  00D90A  D7E7               	goto	l4830
 11194  00D90C                     
 11195                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11196  00D90C  0E01               	movlw	1
 11197  00D90E  6E28               	movwf	printf@c,c
 11198  00D910                     l4844:
 11199  00D910  0E04               	movlw	4
 11200  00D912  1828               	xorwf	printf@c,w,c
 11201  00D914  B4D8               	btfsc	status,2,c
 11202  00D916  D01D               	goto	l1035
 11203                           
 11204                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11205  00D918  5028               	movf	printf@c,w,c
 11206  00D91A  0D02               	mullw	2
 11207  00D91C  0E2B               	movlw	low _hexpowers
 11208  00D91E  24F3               	addwf	prodl,w,c
 11209  00D920  6EF6               	movwf	tblptrl,c
 11210  00D922  0EFD               	movlw	high _hexpowers
 11211  00D924  20F4               	addwfc	prodh,w,c
 11212  00D926  6EF7               	movwf	tblptrh,c
 11213  00D928                     	if	1	;There are 3 active tblptr bytes
 11214  00D928  6AF8               	clrf	tblptru,c
 11215  00D92A  0E00               	movlw	low (__mediumconst shr (0+16))
 11216  00D92C  22F8               	addwfc	tblptru,f,c
 11217  00D92E                     	endif
 11218  00D92E  0009               	tblrd		*+
 11219  00D930  50F5               	movf	tablat,w,c
 11220  00D932  5C23               	subwf	printf@val,w,c
 11221  00D934  0009               	tblrd		*+
 11222  00D936  50F5               	movf	tablat,w,c
 11223  00D938  5824               	subwfb	printf@val+1,w,c
 11224  00D93A  A0D8               	btfss	status,0,c
 11225  00D93C  D00A               	goto	l1035
 11226                           
 11227                           ;doprnt.c: 1318: break;
 11228  00D93E  2A28               	incf	printf@c,f,c
 11229  00D940  D7E7               	goto	l4844
 11230  00D942                     l1030:
 11231  00D942  5025               	movf	printf@flag,w,c
 11232  00D944  0B80               	andlw	128
 11233                           
 11234                           ; Switch size 1, requested type "space"
 11235                           ; Number of cases is 2, Range of values is 0 to 128
 11236                           ; switch strategies available:
 11237                           ; Name         Instructions Cycles
 11238                           ; simple_byte            7     4 (average)
 11239                           ;	Chosen strategy is simple_byte
 11240  00D946  0A00               	xorlw	0	; case 0
 11241  00D948  B4D8               	btfsc	status,2,c
 11242  00D94A  D7C5               	goto	l1031
 11243  00D94C  0A80               	xorlw	128	; case 128
 11244  00D94E  B4D8               	btfsc	status,2,c
 11245  00D950  D7DD               	goto	l1036
 11246  00D952                     l1035:
 11247                           
 11248                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11249  00D952  5026               	movf	printf@width,w,c
 11250  00D954  1027               	iorwf	printf@width+1,w,c
 11251  00D956  B4D8               	btfsc	status,2,c
 11252  00D958  D009               	goto	l1040
 11253  00D95A  C025  F017         	movff	printf@flag,??_printf
 11254  00D95E  0E03               	movlw	3
 11255  00D960  1617               	andwf	??_printf,f,c
 11256  00D962  B4D8               	btfsc	status,2,c
 11257  00D964  D003               	goto	l1040
 11258                           
 11259                           ;doprnt.c: 1346: width--;
 11260  00D966  0626               	decf	printf@width,f,c
 11261  00D968  A0D8               	btfss	status,0,c
 11262  00D96A  0627               	decf	printf@width+1,f,c
 11263  00D96C                     l1040:
 11264                           
 11265                           ;doprnt.c: 1381: if(width > c)
 11266  00D96C  0E80               	movlw	128
 11267  00D96E  BE28               	btfsc	printf@c,7,c
 11268  00D970  0E7F               	movlw	127
 11269  00D972  6E17               	movwf	??_printf& (0+255),c
 11270  00D974  5026               	movf	printf@width,w,c
 11271  00D976  5C28               	subwf	printf@c,w,c
 11272  00D978  5027               	movf	printf@width+1,w,c
 11273  00D97A  0A80               	xorlw	128
 11274  00D97C  5817               	subwfb	??_printf& (0+255),w,c
 11275  00D97E  B0D8               	btfsc	status,0,c
 11276  00D980  D007               	goto	l1041
 11277                           
 11278                           ;doprnt.c: 1382: width -= c;
 11279  00D982  5028               	movf	printf@c,w,c
 11280  00D984  5E26               	subwf	printf@width,f,c
 11281  00D986  0E00               	movlw	0
 11282  00D988  BE28               	btfsc	printf@c,7,c
 11283  00D98A  0EFF               	movlw	255
 11284  00D98C  5A27               	subwfb	printf@width+1,f,c
 11285  00D98E  D004               	goto	l1042
 11286  00D990                     l1041:
 11287                           
 11288                           ;doprnt.c: 1383: else
 11289                           ;doprnt.c: 1384: width = 0;
 11290  00D990  0E00               	movlw	0
 11291  00D992  6E27               	movwf	printf@width+1,c
 11292  00D994  0E00               	movlw	0
 11293  00D996  6E26               	movwf	printf@width,c
 11294  00D998                     l1042:
 11295                           
 11296                           ;doprnt.c: 1387: if(flag & 0x04) {
 11297  00D998  A425               	btfss	printf@flag,2,c
 11298  00D99A  D014               	goto	l1043
 11299                           
 11300                           ;doprnt.c: 1392: if(flag & 0x03)
 11301  00D99C  C025  F017         	movff	printf@flag,??_printf
 11302  00D9A0  0E03               	movlw	3
 11303  00D9A2  1617               	andwf	??_printf,f,c
 11304  00D9A4  B4D8               	btfsc	status,2,c
 11305  00D9A6  D003               	goto	l1044
 11306                           
 11307                           ;doprnt.c: 1393: (putch('-') );
 11308  00D9A8  0E2D               	movlw	45
 11309  00D9AA  ECCC  F061         	call	_putch
 11310  00D9AE                     l1044:
 11311                           
 11312                           ;doprnt.c: 1415: if(width)
 11313  00D9AE  5026               	movf	printf@width,w,c
 11314  00D9B0  1027               	iorwf	printf@width+1,w,c
 11315  00D9B2  B4D8               	btfsc	status,2,c
 11316  00D9B4  D01E               	goto	l1052
 11317                           
 11318                           ;doprnt.c: 1417: (putch('0') );
 11319                           
 11320                           ;doprnt.c: 1416: do
 11321  00D9B6  0E30               	movlw	48
 11322  00D9B8  ECCC  F061         	call	_putch
 11323                           
 11324                           ;doprnt.c: 1418: while(--width);
 11325  00D9BC  0626               	decf	printf@width,f,c
 11326  00D9BE  A0D8               	btfss	status,0,c
 11327  00D9C0  0627               	decf	printf@width+1,f,c
 11328  00D9C2  D7F5               	goto	l1044
 11329  00D9C4                     l1043:
 11330                           
 11331                           ;doprnt.c: 1422: {
 11332                           ;doprnt.c: 1424: if(width
 11333                           ;doprnt.c: 1428: )
 11334  00D9C4  5026               	movf	printf@width,w,c
 11335  00D9C6  1027               	iorwf	printf@width+1,w,c
 11336  00D9C8  B4D8               	btfsc	status,2,c
 11337  00D9CA  D00A               	goto	u4470
 11338  00D9CC                     u4460:
 11339                           
 11340                           ;doprnt.c: 1430: (putch(' ') );
 11341                           
 11342                           ;doprnt.c: 1429: do
 11343  00D9CC  0E20               	movlw	32
 11344  00D9CE  ECCC  F061         	call	_putch
 11345                           
 11346                           ;doprnt.c: 1431: while(--width);
 11347  00D9D2  0626               	decf	printf@width,f,c
 11348  00D9D4  A0D8               	btfss	status,0,c
 11349  00D9D6  0627               	decf	printf@width+1,f,c
 11350  00D9D8  5026               	movf	printf@width,w,c
 11351  00D9DA  1027               	iorwf	printf@width+1,w,c
 11352  00D9DC  A4D8               	btfss	status,2,c
 11353  00D9DE  D7F6               	goto	u4460
 11354  00D9E0                     u4470:
 11355                           
 11356                           ;doprnt.c: 1438: if(flag & 0x03)
 11357  00D9E0  C025  F017         	movff	printf@flag,??_printf
 11358  00D9E4  0E03               	movlw	3
 11359  00D9E6  1617               	andwf	??_printf,f,c
 11360  00D9E8  B4D8               	btfsc	status,2,c
 11361  00D9EA  D003               	goto	l1052
 11362                           
 11363                           ;doprnt.c: 1439: (putch('-') );
 11364  00D9EC  0E2D               	movlw	45
 11365  00D9EE  ECCC  F061         	call	_putch
 11366  00D9F2                     l1052:
 11367                           
 11368                           ;doprnt.c: 1469: }
 11369                           ;doprnt.c: 1472: prec = c;
 11370  00D9F2  C028  F01C         	movff	printf@c,printf@prec
 11371                           
 11372                           ;doprnt.c: 1474: while(prec--) {
 11373  00D9F6  D059               	goto	l1053
 11374  00D9F8                     
 11375                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11376  00D9F8  501C               	movf	printf@prec,w,c
 11377  00D9FA  0D02               	mullw	2
 11378  00D9FC  0E21               	movlw	low _dpowers
 11379  00D9FE  24F3               	addwf	prodl,w,c
 11380  00DA00  6EF6               	movwf	tblptrl,c
 11381  00DA02  0EFD               	movlw	high _dpowers
 11382  00DA04  20F4               	addwfc	prodh,w,c
 11383  00DA06  6EF7               	movwf	tblptrh,c
 11384  00DA08                     	if	1	;There are 3 active tblptr bytes
 11385  00DA08  6AF8               	clrf	tblptru,c
 11386  00DA0A  0E00               	movlw	low (__mediumconst shr (0+16))
 11387  00DA0C  22F8               	addwfc	tblptru,f,c
 11388  00DA0E                     	endif
 11389  00DA0E  0009               	tblrd		*+
 11390  00DA10  CFF5 F003          	movff	tablat,___lwdiv@divisor
 11391  00DA14  000A               	tblrd		*-
 11392  00DA16  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 11393  00DA1A  C023  F001         	movff	printf@val,___lwdiv@dividend
 11394  00DA1E  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 11395  00DA22  ECA0  F062         	call	___lwdiv	;wreg free
 11396  00DA26  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 11397  00DA2A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 11398  00DA2E  0E00               	movlw	0
 11399  00DA30  6E0B               	movwf	___lwmod@divisor+1,c
 11400  00DA32  0E0A               	movlw	10
 11401  00DA34  6E0A               	movwf	___lwmod@divisor,c
 11402  00DA36  EC59  F062         	call	___lwmod	;wreg free
 11403  00DA3A  5008               	movf	?___lwmod,w,c
 11404  00DA3C  0F30               	addlw	48
 11405  00DA3E  6E28               	movwf	printf@c,c
 11406                           
 11407                           ;doprnt.c: 1491: break;
 11408  00DA40  D031               	goto	l1057
 11409  00DA42                     
 11410                           ;doprnt.c: 1499: {
 11411                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11412  00DA42  C023  F001         	movff	printf@val,___lwdiv@dividend
 11413  00DA46  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 11414  00DA4A  501C               	movf	printf@prec,w,c
 11415  00DA4C  0D02               	mullw	2
 11416  00DA4E  0E2B               	movlw	low _hexpowers
 11417  00DA50  24F3               	addwf	prodl,w,c
 11418  00DA52  6EF6               	movwf	tblptrl,c
 11419  00DA54  0EFD               	movlw	high _hexpowers
 11420  00DA56  20F4               	addwfc	prodh,w,c
 11421  00DA58  6EF7               	movwf	tblptrh,c
 11422  00DA5A                     	if	1	;There are 3 active tblptr bytes
 11423  00DA5A  6AF8               	clrf	tblptru,c
 11424  00DA5C  0E00               	movlw	low (__mediumconst shr (0+16))
 11425  00DA5E  22F8               	addwfc	tblptru,f,c
 11426  00DA60                     	endif
 11427  00DA60  0009               	tblrd		*+
 11428  00DA62  CFF5 F003          	movff	tablat,___lwdiv@divisor
 11429  00DA66  000A               	tblrd		*-
 11430  00DA68  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 11431  00DA6C  ECA0  F062         	call	___lwdiv	;wreg free
 11432  00DA70  5001               	movf	?___lwdiv,w,c
 11433  00DA72  0B0F               	andlw	15
 11434  00DA74  6E1B               	movwf	printf@idx,c
 11435                           
 11436                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11437  00DA76  501B               	movf	printf@idx,w,c
 11438  00DA78  0D01               	mullw	1
 11439  00DA7A  0E52               	movlw	low STR_90
 11440  00DA7C  24F3               	addwf	prodl,w,c
 11441  00DA7E  6EF6               	movwf	tblptrl,c
 11442  00DA80  0EFD               	movlw	high STR_90
 11443  00DA82  20F4               	addwfc	prodh,w,c
 11444  00DA84  6EF7               	movwf	tblptrh,c
 11445  00DA86                     	if	1	;There are 3 active tblptr bytes
 11446  00DA86  6AF8               	clrf	tblptru,c
 11447  00DA88  0E00               	movlw	low (__mediumconst shr (0+16))
 11448  00DA8A  22F8               	addwfc	tblptru,f,c
 11449  00DA8C                     	endif
 11450  00DA8C  0008               	tblrd		*
 11451  00DA8E  CFF5 F028          	movff	tablat,printf@c
 11452                           
 11453                           ;doprnt.c: 1523: }
 11454                           
 11455                           ;doprnt.c: 1508: }
 11456                           ;doprnt.c: 1510: break;
 11457  00DA92  D008               	goto	l1057
 11458  00DA94  5025               	movf	printf@flag,w,c
 11459  00DA96  0B80               	andlw	128
 11460                           
 11461                           ; Switch size 1, requested type "space"
 11462                           ; Number of cases is 2, Range of values is 0 to 128
 11463                           ; switch strategies available:
 11464                           ; Name         Instructions Cycles
 11465                           ; simple_byte            7     4 (average)
 11466                           ;	Chosen strategy is simple_byte
 11467  00DA98  0A00               	xorlw	0	; case 0
 11468  00DA9A  B4D8               	btfsc	status,2,c
 11469  00DA9C  D7AD               	goto	l1056
 11470  00DA9E  0A80               	xorlw	128	; case 128
 11471  00DAA0  B4D8               	btfsc	status,2,c
 11472  00DAA2  D7CF               	goto	l1058
 11473  00DAA4                     l1057:
 11474                           
 11475                           ;doprnt.c: 1524: (putch(c) );
 11476  00DAA4  5028               	movf	printf@c,w,c
 11477  00DAA6  ECCC  F061         	call	_putch
 11478  00DAAA                     l1053:
 11479  00DAAA  061C               	decf	printf@prec,f,c
 11480  00DAAC  281C               	incf	printf@prec,w,c
 11481  00DAAE  A4D8               	btfss	status,2,c
 11482  00DAB0  D7F1               	goto	l1055
 11483  00DAB2                     u4490:
 11484  00DAB2  C00D  FFF6         	movff	printf@f,tblptrl
 11485  00DAB6  C00E  FFF7         	movff	printf@f+1,tblptrh
 11486  00DABA  4A0D               	infsnz	printf@f,f,c
 11487  00DABC  2A0E               	incf	printf@f+1,f,c
 11488  00DABE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11489  00DABE  6AF8               	clrf	tblptru,c
 11490  00DAC0                     	endif
 11491  00DAC0                     	if	0	;tblptru may be non-zero
 11492  00DAC0                     	endif
 11493  00DAC0  0008               	tblrd		*
 11494  00DAC2  CFF5 F028          	movff	tablat,printf@c
 11495  00DAC6  5028               	movf	printf@c,w,c
 11496  00DAC8  B4D8               	btfsc	status,2,c
 11497  00DACA  0012               	return	
 11498  00DACC  D60C               	goto	l995
 11499  00DACE                     __end_of_printf:
 11500                           	opt stack 0
 11501                           tblptru	equ	0xFF8
 11502                           tblptrh	equ	0xFF7
 11503                           tblptrl	equ	0xFF6
 11504                           tablat	equ	0xFF5
 11505                           prodh	equ	0xFF4
 11506                           prodl	equ	0xFF3
 11507                           intcon	equ	0xFF2
 11508                           postinc0	equ	0xFEE
 11509                           wreg	equ	0xFE8
 11510                           postdec1	equ	0xFE5
 11511                           plusw1	equ	0xFE3
 11512                           fsr1l	equ	0xFE1
 11513                           indf2	equ	0xFDF
 11514                           postinc2	equ	0xFDE
 11515                           postdec2	equ	0xFDD
 11516                           plusw2	equ	0xFDB
 11517                           fsr2h	equ	0xFDA
 11518                           fsr2l	equ	0xFD9
 11519                           status	equ	0xFD8
 11520                           
 11521 ;; *************** function _putch *****************
 11522 ;; Defined at:
 11523 ;;		line 77 in file "standbyMode.c"
 11524 ;; Parameters:    Size  Location     Type
 11525 ;;  data            1    wreg     unsigned char 
 11526 ;; Auto vars:     Size  Location     Type
 11527 ;;  data            1    2[COMRAM] unsigned char 
 11528 ;; Return value:  Size  Location     Type
 11529 ;;                  1    wreg      void 
 11530 ;; Registers used:
 11531 ;;		wreg, status,2, status,0, cstack
 11532 ;; Tracked objects:
 11533 ;;		On entry : 0/0
 11534 ;;		On exit  : 0/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11541 ;;Total ram usage:        1 bytes
 11542 ;; Hardware stack levels used:    1
 11543 ;; Hardware stack levels required when called:    1
 11544 ;; This function calls:
 11545 ;;		_lcdNibble
 11546 ;; This function is called by:
 11547 ;;		_viewLogs
 11548 ;;		_food_press
 11549 ;;		_diet_press
 11550 ;;		_which_drawer
 11551 ;;		_printf
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text19
 11556  00C398                     __ptext19:
 11557                           	opt stack 0
 11558  00C398                     _putch:
 11559                           	opt stack 27
 11560                           
 11561                           ;incstack = 0
 11562                           ;putch@data stored from wreg
 11563  00C398  6E03               	movwf	putch@data,c
 11564                           
 11565                           ;standbyMode.c: 85: LATDbits.LATD2 = 1;
 11566  00C39A  848C               	bsf	3980,2,c	;volatile
 11567                           
 11568                           ;standbyMode.c: 86: lcdNibble(data);
 11569  00C39C  5003               	movf	putch@data,w,c
 11570  00C39E  EC55  F063         	call	_lcdNibble
 11571                           
 11572                           ;standbyMode.c: 87: _delay((unsigned long)((100)*(40000000/4000000.0)));
 11573  00C3A2  0EC8               	movlw	200
 11574  00C3A4                     u8957:
 11575  00C3A4  D000               	nop2	
 11576  00C3A6  2EE8               	decfsz	wreg,f,c
 11577  00C3A8  D7FD               	bra	u8957
 11578  00C3AA  0012               	return		;funcret
 11579  00C3AC                     __end_of_putch:
 11580                           	opt stack 0
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           postinc0	equ	0xFEE
 11589                           wreg	equ	0xFE8
 11590                           postdec1	equ	0xFE5
 11591                           plusw1	equ	0xFE3
 11592                           fsr1l	equ	0xFE1
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           plusw2	equ	0xFDB
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8
 11600                           
 11601 ;; *************** function _isdigit *****************
 11602 ;; Defined at:
 11603 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  c               1    wreg     unsigned char 
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;  c               1    2[COMRAM] unsigned char 
 11608 ;; Return value:  Size  Location     Type
 11609 ;;		None               void
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;Total ram usage:        3 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_printf
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text20
 11631  00C3D6                     __ptext20:
 11632                           	opt stack 0
 11633  00C3D6                     _isdigit:
 11634                           	opt stack 27
 11635                           
 11636                           ;incstack = 0
 11637                           ;isdigit@c stored from wreg
 11638  00C3D6  6E03               	movwf	isdigit@c,c
 11639  00C3D8  0E00               	movlw	0
 11640  00C3DA  6E02               	movwf	_isdigit$1453,c
 11641  00C3DC  0E3A               	movlw	58
 11642  00C3DE  6003               	cpfslt	isdigit@c,c
 11643  00C3E0  D005               	goto	l1391
 11644  00C3E2  0E2F               	movlw	47
 11645  00C3E4  6403               	cpfsgt	isdigit@c,c
 11646  00C3E6  D002               	goto	l1391
 11647  00C3E8  0E01               	movlw	1
 11648  00C3EA  6E02               	movwf	_isdigit$1453,c
 11649  00C3EC                     l1391:
 11650  00C3EC  C002  F001         	movff	_isdigit$1453,??_isdigit
 11651  00C3F0  3001               	rrcf	??_isdigit,w,c
 11652  00C3F2  0012               	return	
 11653  00C3F4                     __end_of_isdigit:
 11654                           	opt stack 0
 11655                           tblptru	equ	0xFF8
 11656                           tblptrh	equ	0xFF7
 11657                           tblptrl	equ	0xFF6
 11658                           tablat	equ	0xFF5
 11659                           prodh	equ	0xFF4
 11660                           prodl	equ	0xFF3
 11661                           intcon	equ	0xFF2
 11662                           postinc0	equ	0xFEE
 11663                           wreg	equ	0xFE8
 11664                           postdec1	equ	0xFE5
 11665                           plusw1	equ	0xFE3
 11666                           fsr1l	equ	0xFE1
 11667                           indf2	equ	0xFDF
 11668                           postinc2	equ	0xFDE
 11669                           postdec2	equ	0xFDD
 11670                           plusw2	equ	0xFDB
 11671                           fsr2h	equ	0xFDA
 11672                           fsr2l	equ	0xFD9
 11673                           status	equ	0xFD8
 11674                           
 11675 ;; *************** function ___wmul *****************
 11676 ;; Defined at:
 11677 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;  multiplier      2    0[COMRAM] unsigned int 
 11680 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11681 ;; Auto vars:     Size  Location     Type
 11682 ;;  product         2    4[COMRAM] unsigned int 
 11683 ;; Return value:  Size  Location     Type
 11684 ;;                  2    0[COMRAM] unsigned int 
 11685 ;; Registers used:
 11686 ;;		wreg, status,2, status,0, prodl, prodh
 11687 ;; Tracked objects:
 11688 ;;		On entry : 0/0
 11689 ;;		On exit  : 0/0
 11690 ;;		Unchanged: 0/0
 11691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11695 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11696 ;;Total ram usage:        6 bytes
 11697 ;; Hardware stack levels used:    1
 11698 ;; This function calls:
 11699 ;;		Nothing
 11700 ;; This function is called by:
 11701 ;;		_displayLogs
 11702 ;;		_standbyMode
 11703 ;;		_printf
 11704 ;;		_tock
 11705 ;; This function uses a non-reentrant model
 11706 ;;
 11707                           
 11708                           	psect	text21
 11709  00C43C                     __ptext21:
 11710                           	opt stack 0
 11711  00C43C                     ___wmul:
 11712                           	opt stack 27
 11713                           
 11714                           ;incstack = 0
 11715  00C43C  5001               	movf	___wmul@multiplier,w,c
 11716  00C43E  0203               	mulwf	___wmul@multiplicand,c
 11717  00C440  CFF3 F005          	movff	prodl,___wmul@product
 11718  00C444  CFF4 F006          	movff	prodh,___wmul@product+1
 11719  00C448  5001               	movf	___wmul@multiplier,w,c
 11720  00C44A  0204               	mulwf	___wmul@multiplicand+1,c
 11721  00C44C  50F3               	movf	prodl,w,c
 11722  00C44E  2606               	addwf	___wmul@product+1,f,c
 11723  00C450  5002               	movf	___wmul@multiplier+1,w,c
 11724  00C452  0203               	mulwf	___wmul@multiplicand,c
 11725  00C454  50F3               	movf	prodl,w,c
 11726  00C456  2606               	addwf	___wmul@product+1,f,c
 11727  00C458  C005  F001         	movff	___wmul@product,?___wmul
 11728  00C45C  C006  F002         	movff	___wmul@product+1,?___wmul+1
 11729  00C460  0012               	return	
 11730  00C462                     __end_of___wmul:
 11731                           	opt stack 0
 11732                           tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           postinc0	equ	0xFEE
 11740                           wreg	equ	0xFE8
 11741                           postdec1	equ	0xFE5
 11742                           plusw1	equ	0xFE3
 11743                           fsr1l	equ	0xFE1
 11744                           indf2	equ	0xFDF
 11745                           postinc2	equ	0xFDE
 11746                           postdec2	equ	0xFDD
 11747                           plusw2	equ	0xFDB
 11748                           fsr2h	equ	0xFDA
 11749                           fsr2l	equ	0xFD9
 11750                           status	equ	0xFD8
 11751                           
 11752 ;; *************** function ___lwmod *****************
 11753 ;; Defined at:
 11754 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 11755 ;; Parameters:    Size  Location     Type
 11756 ;;  dividend        2    7[COMRAM] unsigned int 
 11757 ;;  divisor         2    9[COMRAM] unsigned int 
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  counter         1   11[COMRAM] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  2    7[COMRAM] unsigned int 
 11762 ;; Registers used:
 11763 ;;		wreg, status,2, status,0
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;Total ram usage:        5 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; This function calls:
 11776 ;;		Nothing
 11777 ;; This function is called by:
 11778 ;;		_displayLogs
 11779 ;;		_printf
 11780 ;; This function uses a non-reentrant model
 11781 ;;
 11782                           
 11783                           	psect	text22
 11784  00C4B2                     __ptext22:
 11785                           	opt stack 0
 11786  00C4B2                     ___lwmod:
 11787                           	opt stack 27
 11788                           
 11789                           ;incstack = 0
 11790  00C4B2  500A               	movf	___lwmod@divisor,w,c
 11791  00C4B4  100B               	iorwf	___lwmod@divisor+1,w,c
 11792  00C4B6  B4D8               	btfsc	status,2,c
 11793  00C4B8  D018               	goto	l1485
 11794  00C4BA  0E01               	movlw	1
 11795  00C4BC  6E0C               	movwf	___lwmod@counter,c
 11796  00C4BE  D004               	goto	l1480
 11797  00C4C0  90D8               	bcf	status,0,c
 11798  00C4C2  360A               	rlcf	___lwmod@divisor,f,c
 11799  00C4C4  360B               	rlcf	___lwmod@divisor+1,f,c
 11800  00C4C6  2A0C               	incf	___lwmod@counter,f,c
 11801  00C4C8                     l1480:
 11802  00C4C8  AE0B               	btfss	___lwmod@divisor+1,7,c
 11803  00C4CA  D7FA               	goto	l1481
 11804  00C4CC                     u4210:
 11805  00C4CC  500A               	movf	___lwmod@divisor,w,c
 11806  00C4CE  5C08               	subwf	___lwmod@dividend,w,c
 11807  00C4D0  500B               	movf	___lwmod@divisor+1,w,c
 11808  00C4D2  5809               	subwfb	___lwmod@dividend+1,w,c
 11809  00C4D4  A0D8               	btfss	status,0,c
 11810  00C4D6  D004               	goto	l1484
 11811  00C4D8  500A               	movf	___lwmod@divisor,w,c
 11812  00C4DA  5E08               	subwf	___lwmod@dividend,f,c
 11813  00C4DC  500B               	movf	___lwmod@divisor+1,w,c
 11814  00C4DE  5A09               	subwfb	___lwmod@dividend+1,f,c
 11815  00C4E0                     l1484:
 11816  00C4E0  90D8               	bcf	status,0,c
 11817  00C4E2  320B               	rrcf	___lwmod@divisor+1,f,c
 11818  00C4E4  320A               	rrcf	___lwmod@divisor,f,c
 11819  00C4E6  2E0C               	decfsz	___lwmod@counter,f,c
 11820  00C4E8  D7F1               	goto	u4210
 11821  00C4EA                     l1485:
 11822  00C4EA  C008  F008         	movff	___lwmod@dividend,?___lwmod
 11823  00C4EE  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 11824  00C4F2  0012               	return		;funcret
 11825  00C4F4                     __end_of___lwmod:
 11826                           	opt stack 0
 11827                           tblptru	equ	0xFF8
 11828                           tblptrh	equ	0xFF7
 11829                           tblptrl	equ	0xFF6
 11830                           tablat	equ	0xFF5
 11831                           prodh	equ	0xFF4
 11832                           prodl	equ	0xFF3
 11833                           intcon	equ	0xFF2
 11834                           postinc0	equ	0xFEE
 11835                           wreg	equ	0xFE8
 11836                           postdec1	equ	0xFE5
 11837                           plusw1	equ	0xFE3
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           postdec2	equ	0xFDD
 11842                           plusw2	equ	0xFDB
 11843                           fsr2h	equ	0xFDA
 11844                           fsr2l	equ	0xFD9
 11845                           status	equ	0xFD8
 11846                           
 11847 ;; *************** function ___lwdiv *****************
 11848 ;; Defined at:
 11849 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  dividend        2    0[COMRAM] unsigned int 
 11852 ;;  divisor         2    2[COMRAM] unsigned int 
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;  quotient        2    4[COMRAM] unsigned int 
 11855 ;;  counter         1    6[COMRAM] unsigned char 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;                  2    0[COMRAM] unsigned int 
 11858 ;; Registers used:
 11859 ;;		wreg, status,2, status,0
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11865 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11869 ;;Total ram usage:        7 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; This function calls:
 11872 ;;		Nothing
 11873 ;; This function is called by:
 11874 ;;		_displayLogs
 11875 ;;		_printf
 11876 ;; This function uses a non-reentrant model
 11877 ;;
 11878                           
 11879                           	psect	text23
 11880  00C540                     __ptext23:
 11881                           	opt stack 0
 11882  00C540                     ___lwdiv:
 11883                           	opt stack 27
 11884                           
 11885                           ;incstack = 0
 11886  00C540  0E00               	movlw	0
 11887  00C542  6E06               	movwf	___lwdiv@quotient+1,c
 11888  00C544  0E00               	movlw	0
 11889  00C546  6E05               	movwf	___lwdiv@quotient,c
 11890  00C548  5003               	movf	___lwdiv@divisor,w,c
 11891  00C54A  1004               	iorwf	___lwdiv@divisor+1,w,c
 11892  00C54C  B4D8               	btfsc	status,2,c
 11893  00C54E  D01C               	goto	l1475
 11894  00C550  0E01               	movlw	1
 11895  00C552  6E07               	movwf	___lwdiv@counter,c
 11896  00C554  D004               	goto	l1470
 11897  00C556  90D8               	bcf	status,0,c
 11898  00C558  3603               	rlcf	___lwdiv@divisor,f,c
 11899  00C55A  3604               	rlcf	___lwdiv@divisor+1,f,c
 11900  00C55C  2A07               	incf	___lwdiv@counter,f,c
 11901  00C55E                     l1470:
 11902  00C55E  AE04               	btfss	___lwdiv@divisor+1,7,c
 11903  00C560  D7FA               	goto	l1471
 11904  00C562                     u4180:
 11905  00C562  90D8               	bcf	status,0,c
 11906  00C564  3605               	rlcf	___lwdiv@quotient,f,c
 11907  00C566  3606               	rlcf	___lwdiv@quotient+1,f,c
 11908  00C568  5003               	movf	___lwdiv@divisor,w,c
 11909  00C56A  5C01               	subwf	___lwdiv@dividend,w,c
 11910  00C56C  5004               	movf	___lwdiv@divisor+1,w,c
 11911  00C56E  5802               	subwfb	___lwdiv@dividend+1,w,c
 11912  00C570  A0D8               	btfss	status,0,c
 11913  00C572  D005               	goto	l1474
 11914  00C574  5003               	movf	___lwdiv@divisor,w,c
 11915  00C576  5E01               	subwf	___lwdiv@dividend,f,c
 11916  00C578  5004               	movf	___lwdiv@divisor+1,w,c
 11917  00C57A  5A02               	subwfb	___lwdiv@dividend+1,f,c
 11918  00C57C  8005               	bsf	___lwdiv@quotient,0,c
 11919  00C57E                     l1474:
 11920  00C57E  90D8               	bcf	status,0,c
 11921  00C580  3204               	rrcf	___lwdiv@divisor+1,f,c
 11922  00C582  3203               	rrcf	___lwdiv@divisor,f,c
 11923  00C584  2E07               	decfsz	___lwdiv@counter,f,c
 11924  00C586  D7ED               	goto	u4180
 11925  00C588                     l1475:
 11926  00C588  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 11927  00C58C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11928  00C590  0012               	return		;funcret
 11929  00C592                     __end_of___lwdiv:
 11930                           	opt stack 0
 11931                           tblptru	equ	0xFF8
 11932                           tblptrh	equ	0xFF7
 11933                           tblptrl	equ	0xFF6
 11934                           tablat	equ	0xFF5
 11935                           prodh	equ	0xFF4
 11936                           prodl	equ	0xFF3
 11937                           intcon	equ	0xFF2
 11938                           postinc0	equ	0xFEE
 11939                           wreg	equ	0xFE8
 11940                           postdec1	equ	0xFE5
 11941                           plusw1	equ	0xFE3
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           plusw2	equ	0xFDB
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function _decode_diet *****************
 11952 ;; Defined at:
 11953 ;;		line 1358 in file "standbyMode.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  dietType        2    0[COMRAM] unsigned int 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  returnValue     2    4[COMRAM] unsigned int 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  2    0[COMRAM] unsigned int 
 11960 ;; Registers used:
 11961 ;;		wreg, status,2, status,0
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;Total ram usage:        6 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; This function calls:
 11974 ;;		Nothing
 11975 ;; This function is called by:
 11976 ;;		_standbyMode
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           	psect	text24
 11981  00CEBC                     __ptext24:
 11982                           	opt stack 0
 11983  00CEBC                     _decode_diet:
 11984                           	opt stack 29
 11985                           
 11986                           ;standbyMode.c: 1359: unsigned int returnValue = 100;
 11987                           
 11988                           ;incstack = 0
 11989  00CEBC  0E00               	movlw	0
 11990  00CEBE  6E06               	movwf	decode_diet@returnValue+1,c
 11991  00CEC0  0E64               	movlw	100
 11992  00CEC2  6E05               	movwf	decode_diet@returnValue,c
 11993                           
 11994                           ;standbyMode.c: 1361: switch(dietType){
 11995  00CEC4  D049               	goto	l603
 11996  00CEC6                     
 11997                           ;standbyMode.c: 1364: returnValue = 2;
 11998  00CEC6  0E00               	movlw	0
 11999  00CEC8  6E06               	movwf	decode_diet@returnValue+1,c
 12000  00CECA  0E02               	movlw	2
 12001  00CECC  D043               	goto	L123
 12002  00CECE                     
 12003                           ;standbyMode.c: 1369: returnValue = 0;
 12004  00CECE  0E00               	movlw	0
 12005  00CED0  6E06               	movwf	decode_diet@returnValue+1,c
 12006  00CED2  0E00               	movlw	0
 12007  00CED4  D03F               	goto	L123
 12008  00CED6                     
 12009                           ;standbyMode.c: 1374: returnValue = 1;
 12010  00CED6  0E00               	movlw	0
 12011  00CED8  6E06               	movwf	decode_diet@returnValue+1,c
 12012  00CEDA  0E01               	movlw	1
 12013  00CEDC  D03B               	goto	L123
 12014  00CEDE                     
 12015                           ;standbyMode.c: 1379: returnValue = 3;
 12016  00CEDE  0E00               	movlw	0
 12017  00CEE0  6E06               	movwf	decode_diet@returnValue+1,c
 12018  00CEE2  0E03               	movlw	3
 12019  00CEE4  D037               	goto	L123
 12020  00CEE6                     
 12021                           ;standbyMode.c: 1384: returnValue = 4;
 12022  00CEE6  0E00               	movlw	0
 12023  00CEE8  6E06               	movwf	decode_diet@returnValue+1,c
 12024  00CEEA  0E04               	movlw	4
 12025  00CEEC  D033               	goto	L123
 12026  00CEEE                     
 12027                           ;standbyMode.c: 1389: returnValue = 5;
 12028  00CEEE  0E00               	movlw	0
 12029  00CEF0  6E06               	movwf	decode_diet@returnValue+1,c
 12030  00CEF2  0E05               	movlw	5
 12031  00CEF4  D02F               	goto	L123
 12032  00CEF6                     
 12033                           ;standbyMode.c: 1394: returnValue = 6;
 12034  00CEF6  0E00               	movlw	0
 12035  00CEF8  6E06               	movwf	decode_diet@returnValue+1,c
 12036  00CEFA  0E06               	movlw	6
 12037  00CEFC  D02B               	goto	L123
 12038  00CEFE                     
 12039                           ;standbyMode.c: 1399: returnValue = 7;
 12040  00CEFE  0E00               	movlw	0
 12041  00CF00  6E06               	movwf	decode_diet@returnValue+1,c
 12042  00CF02  0E07               	movlw	7
 12043  00CF04  D027               	goto	L123
 12044  00CF06                     
 12045                           ;standbyMode.c: 1404: returnValue = 8;
 12046  00CF06  0E00               	movlw	0
 12047  00CF08  6E06               	movwf	decode_diet@returnValue+1,c
 12048  00CF0A  0E08               	movlw	8
 12049  00CF0C  D023               	goto	L123
 12050  00CF0E                     
 12051                           ;standbyMode.c: 1409: returnValue = 9;
 12052  00CF0E  0E00               	movlw	0
 12053  00CF10  6E06               	movwf	decode_diet@returnValue+1,c
 12054  00CF12  0E09               	movlw	9
 12055  00CF14  D01F               	goto	L123
 12056  00CF16                     
 12057                           ;standbyMode.c: 1414: returnValue = 10;
 12058  00CF16  0E00               	movlw	0
 12059  00CF18  6E06               	movwf	decode_diet@returnValue+1,c
 12060  00CF1A  0E0A               	movlw	10
 12061  00CF1C  D01B               	goto	L123
 12062  00CF1E                     
 12063                           ;standbyMode.c: 1419: returnValue = 11;
 12064  00CF1E  0E00               	movlw	0
 12065  00CF20  6E06               	movwf	decode_diet@returnValue+1,c
 12066  00CF22  0E0B               	movlw	11
 12067  00CF24  D017               	goto	L123
 12068  00CF26                     
 12069                           ;standbyMode.c: 1424: returnValue = 12;
 12070  00CF26  0E00               	movlw	0
 12071  00CF28  6E06               	movwf	decode_diet@returnValue+1,c
 12072  00CF2A  0E0C               	movlw	12
 12073  00CF2C  D013               	goto	L123
 12074  00CF2E                     
 12075                           ;standbyMode.c: 1429: returnValue = 13;
 12076  00CF2E  0E00               	movlw	0
 12077  00CF30  6E06               	movwf	decode_diet@returnValue+1,c
 12078  00CF32  0E0D               	movlw	13
 12079  00CF34  D00F               	goto	L123
 12080  00CF36                     
 12081                           ;standbyMode.c: 1434: returnValue = 14;
 12082  00CF36  0E00               	movlw	0
 12083  00CF38  6E06               	movwf	decode_diet@returnValue+1,c
 12084  00CF3A  0E0E               	movlw	14
 12085  00CF3C  D00B               	goto	L123
 12086  00CF3E                     
 12087                           ;standbyMode.c: 1439: returnValue = 15;
 12088  00CF3E  0E00               	movlw	0
 12089  00CF40  6E06               	movwf	decode_diet@returnValue+1,c
 12090  00CF42  0E0F               	movlw	15
 12091  00CF44  D007               	goto	L123
 12092  00CF46                     
 12093                           ;standbyMode.c: 1444: returnValue = 16;
 12094  00CF46  0E00               	movlw	0
 12095  00CF48  6E06               	movwf	decode_diet@returnValue+1,c
 12096  00CF4A  0E10               	movlw	16
 12097  00CF4C  D003               	goto	L123
 12098  00CF4E                     
 12099                           ;standbyMode.c: 1449: returnValue = 17;
 12100  00CF4E  0E00               	movlw	0
 12101  00CF50  6E06               	movwf	decode_diet@returnValue+1,c
 12102  00CF52  0E11               	movlw	17
 12103  00CF54                     L123:
 12104  00CF54  6E05               	movwf	decode_diet@returnValue,c
 12105                           
 12106                           ;standbyMode.c: 1454: }
 12107                           
 12108                           ;standbyMode.c: 1453: break;
 12109                           
 12110                           ;standbyMode.c: 1452: default:
 12111                           
 12112                           ;standbyMode.c: 1450: break;
 12113  00CF56  D03F               	goto	l605
 12114  00CF58                     l603:
 12115  00CF58  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 12116  00CF5C  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 12117                           
 12118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12119                           ; Switch size 1, requested type "space"
 12120                           ; Number of cases is 1, Range of values is 0 to 0
 12121                           ; switch strategies available:
 12122                           ; Name         Instructions Cycles
 12123                           ; simple_byte            4     3 (average)
 12124                           ;	Chosen strategy is simple_byte
 12125  00CF60  5004               	movf	??_decode_diet+1,w,c
 12126  00CF62  0A00               	xorlw	0	; case 0
 12127  00CF64  A4D8               	btfss	status,2,c
 12128  00CF66  D037               	goto	l605
 12129                           
 12130                           ; Switch size 1, requested type "space"
 12131                           ; Number of cases is 18, Range of values is 3 to 43
 12132                           ; switch strategies available:
 12133                           ; Name         Instructions Cycles
 12134                           ; simple_byte           55    28 (average)
 12135                           ;	Chosen strategy is simple_byte
 12136  00CF68  5003               	movf	??_decode_diet,w,c
 12137  00CF6A  0A03               	xorlw	3	; case 3
 12138  00CF6C  B4D8               	btfsc	status,2,c
 12139  00CF6E  D7AF               	goto	l606
 12140  00CF70  0A04               	xorlw	4	; case 7
 12141  00CF72  B4D8               	btfsc	status,2,c
 12142  00CF74  D7B0               	goto	l607
 12143  00CF76  0A0D               	xorlw	13	; case 10
 12144  00CF78  B4D8               	btfsc	status,2,c
 12145  00CF7A  D7B1               	goto	l608
 12146  00CF7C  0A06               	xorlw	6	; case 12
 12147  00CF7E  B4D8               	btfsc	status,2,c
 12148  00CF80  D7A2               	goto	l604
 12149  00CF82  0A01               	xorlw	1	; case 13
 12150  00CF84  B4D8               	btfsc	status,2,c
 12151  00CF86  D7B7               	goto	l611
 12152  00CF88  0A02               	xorlw	2	; case 15
 12153  00CF8A  B4D8               	btfsc	status,2,c
 12154  00CF8C  D7AC               	goto	l609
 12155  00CF8E  0A1E               	xorlw	30	; case 17
 12156  00CF90  B4D8               	btfsc	status,2,c
 12157  00CF92  D7B9               	goto	l613
 12158  00CF94  0A03               	xorlw	3	; case 18
 12159  00CF96  B4D8               	btfsc	status,2,c
 12160  00CF98  D7B2               	goto	l612
 12161  00CF9A  0A01               	xorlw	1	; case 19
 12162  00CF9C  B4D8               	btfsc	status,2,c
 12163  00CF9E  D7A7               	goto	l610
 12164  00CFA0  0A05               	xorlw	5	; case 22
 12165  00CFA2  B4D8               	btfsc	status,2,c
 12166  00CFA4  D7B8               	goto	l615
 12167  00CFA6  0A0F               	xorlw	15	; case 25
 12168  00CFA8  B4D8               	btfsc	status,2,c
 12169  00CFAA  D7C1               	goto	l618
 12170  00CFAC  0A03               	xorlw	3	; case 26
 12171  00CFAE  B4D8               	btfsc	status,2,c
 12172  00CFB0  D7B6               	goto	l616
 12173  00CFB2  0A01               	xorlw	1	; case 27
 12174  00CFB4  B4D8               	btfsc	status,2,c
 12175  00CFB6  D7AB               	goto	l614
 12176  00CFB8  0A06               	xorlw	6	; case 29
 12177  00CFBA  B4D8               	btfsc	status,2,c
 12178  00CFBC  D7BC               	goto	l619
 12179  00CFBE  0A02               	xorlw	2	; case 31
 12180  00CFC0  B4D8               	btfsc	status,2,c
 12181  00CFC2  D7B1               	goto	l617
 12182  00CFC4  0A3D               	xorlw	61	; case 34
 12183  00CFC6  B4D8               	btfsc	status,2,c
 12184  00CFC8  D7BA               	goto	l620
 12185  00CFCA  0A05               	xorlw	5	; case 39
 12186  00CFCC  B4D8               	btfsc	status,2,c
 12187  00CFCE  D7BB               	goto	l621
 12188  00CFD0  0A0C               	xorlw	12	; case 43
 12189  00CFD2  B4D8               	btfsc	status,2,c
 12190  00CFD4  D7BC               	goto	l622
 12191  00CFD6                     l605:
 12192                           
 12193                           ;standbyMode.c: 1455: return returnValue;
 12194  00CFD6  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 12195  00CFDA  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 12196  00CFDE  0012               	return		;funcret
 12197  00CFE0                     __end_of_decode_diet:
 12198                           	opt stack 0
 12199                           tblptru	equ	0xFF8
 12200                           tblptrh	equ	0xFF7
 12201                           tblptrl	equ	0xFF6
 12202                           tablat	equ	0xFF5
 12203                           prodh	equ	0xFF4
 12204                           prodl	equ	0xFF3
 12205                           intcon	equ	0xFF2
 12206                           postinc0	equ	0xFEE
 12207                           wreg	equ	0xFE8
 12208                           postdec1	equ	0xFE5
 12209                           plusw1	equ	0xFE3
 12210                           fsr1l	equ	0xFE1
 12211                           indf2	equ	0xFDF
 12212                           postinc2	equ	0xFDE
 12213                           postdec2	equ	0xFDD
 12214                           plusw2	equ	0xFDB
 12215                           fsr2h	equ	0xFDA
 12216                           fsr2l	equ	0xFD9
 12217                           status	equ	0xFD8
 12218                           
 12219 ;; *************** function _I2C_Master_Write *****************
 12220 ;; Defined at:
 12221 ;;		line 108 in file "I2C.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;		None
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, status,2, status,0, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12235 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12239 ;;Total ram usage:        2 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    1
 12242 ;; This function calls:
 12243 ;;		_I2C_Master_Wait
 12244 ;; This function is called by:
 12245 ;;		_standbyMode
 12246 ;;		_RTC_setTime
 12247 ;;		_tick
 12248 ;;		_tock
 12249 ;;		_sendByteToArduino
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text25
 12254  00C368                     __ptext25:
 12255                           	opt stack 0
 12256  00C368                     _I2C_Master_Write:
 12257                           	opt stack 28
 12258                           
 12259                           ;I2C.c: 116: I2C_Master_Wait();
 12260                           
 12261                           ;incstack = 0
 12262  00C368  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12263                           
 12264                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12265  00C36C  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12266  00C370  0012               	return		;funcret
 12267  00C372                     __end_of_I2C_Master_Write:
 12268                           	opt stack 0
 12269                           tblptru	equ	0xFF8
 12270                           tblptrh	equ	0xFF7
 12271                           tblptrl	equ	0xFF6
 12272                           tablat	equ	0xFF5
 12273                           prodh	equ	0xFF4
 12274                           prodl	equ	0xFF3
 12275                           intcon	equ	0xFF2
 12276                           postinc0	equ	0xFEE
 12277                           wreg	equ	0xFE8
 12278                           postdec1	equ	0xFE5
 12279                           plusw1	equ	0xFE3
 12280                           fsr1l	equ	0xFE1
 12281                           indf2	equ	0xFDF
 12282                           postinc2	equ	0xFDE
 12283                           postdec2	equ	0xFDD
 12284                           plusw2	equ	0xFDB
 12285                           fsr2h	equ	0xFDA
 12286                           fsr2l	equ	0xFD9
 12287                           status	equ	0xFD8
 12288                           
 12289 ;; *************** function _I2C_Master_Stop *****************
 12290 ;; Defined at:
 12291 ;;		line 95 in file "I2C.c"
 12292 ;; Parameters:    Size  Location     Type
 12293 ;;		None
 12294 ;; Auto vars:     Size  Location     Type
 12295 ;;		None
 12296 ;; Return value:  Size  Location     Type
 12297 ;;                  1    wreg      void 
 12298 ;; Registers used:
 12299 ;;		wreg, status,2, status,0, cstack
 12300 ;; Tracked objects:
 12301 ;;		On entry : 0/0
 12302 ;;		On exit  : 0/0
 12303 ;;		Unchanged: 0/0
 12304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;Total ram usage:        0 bytes
 12310 ;; Hardware stack levels used:    1
 12311 ;; Hardware stack levels required when called:    1
 12312 ;; This function calls:
 12313 ;;		_I2C_Master_Wait
 12314 ;; This function is called by:
 12315 ;;		_standbyMode
 12316 ;;		_RTC_setTime
 12317 ;;		_tick
 12318 ;;		_tock
 12319 ;;		_sendByteToArduino
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text26
 12324  00C360                     __ptext26:
 12325                           	opt stack 0
 12326  00C360                     _I2C_Master_Stop:
 12327                           	opt stack 28
 12328                           
 12329                           ;I2C.c: 104: I2C_Master_Wait();
 12330                           
 12331                           ;incstack = 0
 12332  00C360  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12333                           
 12334                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12335  00C364  84C5               	bsf	4037,2,c	;volatile
 12336  00C366  0012               	return		;funcret
 12337  00C368                     __end_of_I2C_Master_Stop:
 12338                           	opt stack 0
 12339                           tblptru	equ	0xFF8
 12340                           tblptrh	equ	0xFF7
 12341                           tblptrl	equ	0xFF6
 12342                           tablat	equ	0xFF5
 12343                           prodh	equ	0xFF4
 12344                           prodl	equ	0xFF3
 12345                           intcon	equ	0xFF2
 12346                           postinc0	equ	0xFEE
 12347                           wreg	equ	0xFE8
 12348                           postdec1	equ	0xFE5
 12349                           plusw1	equ	0xFE3
 12350                           fsr1l	equ	0xFE1
 12351                           indf2	equ	0xFDF
 12352                           postinc2	equ	0xFDE
 12353                           postdec2	equ	0xFDD
 12354                           plusw2	equ	0xFDB
 12355                           fsr2h	equ	0xFDA
 12356                           fsr2l	equ	0xFD9
 12357                           status	equ	0xFD8
 12358                           
 12359 ;; *************** function _I2C_Master_Start *****************
 12360 ;; Defined at:
 12361 ;;		line 69 in file "I2C.c"
 12362 ;; Parameters:    Size  Location     Type
 12363 ;;		None
 12364 ;; Auto vars:     Size  Location     Type
 12365 ;;		None
 12366 ;; Return value:  Size  Location     Type
 12367 ;;                  1    wreg      void 
 12368 ;; Registers used:
 12369 ;;		wreg, status,2, status,0, cstack
 12370 ;; Tracked objects:
 12371 ;;		On entry : 0/0
 12372 ;;		On exit  : 0/0
 12373 ;;		Unchanged: 0/0
 12374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;Total ram usage:        0 bytes
 12380 ;; Hardware stack levels used:    1
 12381 ;; Hardware stack levels required when called:    1
 12382 ;; This function calls:
 12383 ;;		_I2C_Master_Wait
 12384 ;; This function is called by:
 12385 ;;		_standbyMode
 12386 ;;		_RTC_setTime
 12387 ;;		_tick
 12388 ;;		_tock
 12389 ;;		_sendByteToArduino
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           	psect	text27
 12394  00C358                     __ptext27:
 12395                           	opt stack 0
 12396  00C358                     _I2C_Master_Start:
 12397                           	opt stack 28
 12398                           
 12399                           ;I2C.c: 78: I2C_Master_Wait();
 12400                           
 12401                           ;incstack = 0
 12402  00C358  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12403                           
 12404                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12405  00C35C  80C5               	bsf	4037,0,c	;volatile
 12406  00C35E  0012               	return		;funcret
 12407  00C360                     __end_of_I2C_Master_Start:
 12408                           	opt stack 0
 12409                           tblptru	equ	0xFF8
 12410                           tblptrh	equ	0xFF7
 12411                           tblptrl	equ	0xFF6
 12412                           tablat	equ	0xFF5
 12413                           prodh	equ	0xFF4
 12414                           prodl	equ	0xFF3
 12415                           intcon	equ	0xFF2
 12416                           postinc0	equ	0xFEE
 12417                           wreg	equ	0xFE8
 12418                           postdec1	equ	0xFE5
 12419                           plusw1	equ	0xFE3
 12420                           fsr1l	equ	0xFE1
 12421                           indf2	equ	0xFDF
 12422                           postinc2	equ	0xFDE
 12423                           postdec2	equ	0xFDD
 12424                           plusw2	equ	0xFDB
 12425                           fsr2h	equ	0xFDA
 12426                           fsr2l	equ	0xFD9
 12427                           status	equ	0xFD8
 12428                           
 12429 ;; *************** function _I2C_Master_Read *****************
 12430 ;; Defined at:
 12431 ;;		line 120 in file "I2C.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;  ackBit          1    wreg     unsigned char 
 12434 ;; Auto vars:     Size  Location     Type
 12435 ;;  ackBit          1    1[COMRAM] unsigned char 
 12436 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  1    wreg      unsigned char 
 12439 ;; Registers used:
 12440 ;;		wreg, status,2, status,0, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;Total ram usage:        2 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    1
 12453 ;; This function calls:
 12454 ;;		_I2C_Master_Wait
 12455 ;; This function is called by:
 12456 ;;		_standbyMode
 12457 ;;		_tick
 12458 ;;		_tock
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           	psect	text28
 12463  00C3F4                     __ptext28:
 12464                           	opt stack 0
 12465  00C3F4                     _I2C_Master_Read:
 12466                           	opt stack 28
 12467                           
 12468                           ;incstack = 0
 12469                           ;I2C_Master_Read@ackBit stored from wreg
 12470  00C3F4  6E02               	movwf	I2C_Master_Read@ackBit,c
 12471                           
 12472                           ;I2C.c: 130: unsigned char receivedByte;
 12473                           ;I2C.c: 132: I2C_Master_Wait();
 12474  00C3F6  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12475                           
 12476                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12477  00C3FA  86C5               	bsf	4037,3,c	;volatile
 12478                           
 12479                           ;I2C.c: 135: I2C_Master_Wait();
 12480  00C3FC  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12481                           
 12482                           ;I2C.c: 136: receivedByte = SSPBUF;
 12483  00C400  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12484                           
 12485                           ;I2C.c: 138: I2C_Master_Wait();
 12486  00C404  ECB9  F061         	call	_I2C_Master_Wait	;wreg free
 12487                           
 12488                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12489  00C408  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12490  00C40A  D002               	bra	u7465
 12491  00C40C  9AC5               	bcf	4037,5,c	;volatile
 12492  00C40E  D001               	bra	u7466
 12493  00C410                     u7465:
 12494  00C410  8AC5               	bsf	4037,5,c	;volatile
 12495  00C412                     u7466:
 12496                           
 12497                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12498  00C412  88C5               	bsf	4037,4,c	;volatile
 12499                           
 12500                           ;I2C.c: 142: return receivedByte;
 12501  00C414  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12502  00C416  0012               	return	
 12503  00C418                     __end_of_I2C_Master_Read:
 12504                           	opt stack 0
 12505                           tblptru	equ	0xFF8
 12506                           tblptrh	equ	0xFF7
 12507                           tblptrl	equ	0xFF6
 12508                           tablat	equ	0xFF5
 12509                           prodh	equ	0xFF4
 12510                           prodl	equ	0xFF3
 12511                           intcon	equ	0xFF2
 12512                           postinc0	equ	0xFEE
 12513                           wreg	equ	0xFE8
 12514                           postdec1	equ	0xFE5
 12515                           plusw1	equ	0xFE3
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           plusw2	equ	0xFDB
 12521                           fsr2h	equ	0xFDA
 12522                           fsr2l	equ	0xFD9
 12523                           status	equ	0xFD8
 12524                           
 12525 ;; *************** function _I2C_Master_Wait *****************
 12526 ;; Defined at:
 12527 ;;		line 51 in file "I2C.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;		None
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;		None
 12532 ;; Return value:  Size  Location     Type
 12533 ;;                  1    wreg      void 
 12534 ;; Registers used:
 12535 ;;		wreg, status,2, status,0
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;Total ram usage:        1 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; This function calls:
 12548 ;;		Nothing
 12549 ;; This function is called by:
 12550 ;;		_I2C_Master_Start
 12551 ;;		_I2C_Master_Stop
 12552 ;;		_I2C_Master_Write
 12553 ;;		_I2C_Master_Read
 12554 ;;		_I2C_Master_RepeatedStart
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558                           	psect	text29
 12559  00C372                     __ptext29:
 12560                           	opt stack 0
 12561  00C372                     _I2C_Master_Wait:
 12562                           	opt stack 28
 12563                           
 12564                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12565                           
 12566                           ;incstack = 0
 12567  00C372  B4C7               	btfsc	4039,2,c	;volatile
 12568  00C374  D7FE               	goto	_I2C_Master_Wait
 12569  00C376  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12570  00C37A  0E1F               	movlw	31
 12571  00C37C  1601               	andwf	??_I2C_Master_Wait,f,c
 12572  00C37E  B4D8               	btfsc	status,2,c
 12573  00C380  0012               	return	
 12574  00C382  D7F7               	goto	_I2C_Master_Wait
 12575  00C384                     __end_of_I2C_Master_Wait:
 12576                           	opt stack 0
 12577                           tblptru	equ	0xFF8
 12578                           tblptrh	equ	0xFF7
 12579                           tblptrl	equ	0xFF6
 12580                           tablat	equ	0xFF5
 12581                           prodh	equ	0xFF4
 12582                           prodl	equ	0xFF3
 12583                           intcon	equ	0xFF2
 12584                           postinc0	equ	0xFEE
 12585                           wreg	equ	0xFE8
 12586                           postdec1	equ	0xFE5
 12587                           plusw1	equ	0xFE3
 12588                           fsr1l	equ	0xFE1
 12589                           indf2	equ	0xFDF
 12590                           postinc2	equ	0xFDE
 12591                           postdec2	equ	0xFDD
 12592                           plusw2	equ	0xFDB
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function _I2C_Master_Init *****************
 12598 ;; Defined at:
 12599 ;;		line 14 in file "I2C.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;		None
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg, status,2, status,0, cstack
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12615 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12616 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;Total ram usage:        8 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    1
 12620 ;; This function calls:
 12621 ;;		___lldiv
 12622 ;; This function is called by:
 12623 ;;		_standbyMode
 12624 ;;		_tick
 12625 ;;		_tock
 12626 ;; This function uses a non-reentrant model
 12627 ;;
 12628                           
 12629                           	psect	text30
 12630  00C5E4                     __ptext30:
 12631                           	opt stack 0
 12632  00C5E4                     _I2C_Master_Init:
 12633                           	opt stack 28
 12634                           
 12635                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12636                           
 12637                           ;incstack = 0
 12638  00C5E4  9AC6               	bcf	4038,5,c	;volatile
 12639                           
 12640                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12641  00C5E6  8694               	bsf	3988,3,c	;volatile
 12642                           
 12643                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12644  00C5E8  8894               	bsf	3988,4,c	;volatile
 12645                           
 12646                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12647  00C5EA  0E80               	movlw	128
 12648  00C5EC  6EC7               	movwf	4039,c	;volatile
 12649                           
 12650                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12651  00C5EE  0E28               	movlw	40
 12652  00C5F0  6EC6               	movwf	4038,c	;volatile
 12653                           
 12654                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12655  00C5F2  0E00               	movlw	0
 12656  00C5F4  6EC5               	movwf	4037,c	;volatile
 12657                           
 12658                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12659  00C5F6  0E00               	movlw	0
 12660  00C5F8  6E01               	movwf	___lldiv@dividend,c
 12661  00C5FA  0E5A               	movlw	90
 12662  00C5FC  6E02               	movwf	___lldiv@dividend+1,c
 12663  00C5FE  0E62               	movlw	98
 12664  00C600  6E03               	movwf	___lldiv@dividend+2,c
 12665  00C602  0E02               	movlw	2
 12666  00C604  6E04               	movwf	___lldiv@dividend+3,c
 12667  00C606  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12668  00C60A  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12669  00C60E  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12670  00C612  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12671  00C616  0E02               	movlw	2
 12672  00C618                     u7455:
 12673  00C618  90D8               	bcf	status,0,c
 12674  00C61A  3612               	rlcf	??_I2C_Master_Init,f,c
 12675  00C61C  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12676  00C61E  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12677  00C620  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12678  00C622  2EE8               	decfsz	wreg,f,c
 12679  00C624  D7F9               	goto	u7455
 12680  00C626  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12681  00C62A  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12682  00C62E  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12683  00C632  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12684  00C636  ECD3  F063         	call	___lldiv	;wreg free
 12685  00C63A  0401               	decf	?___lldiv,w,c
 12686  00C63C  6EC8               	movwf	4040,c	;volatile
 12687  00C63E  0012               	return		;funcret
 12688  00C640                     __end_of_I2C_Master_Init:
 12689                           	opt stack 0
 12690                           tblptru	equ	0xFF8
 12691                           tblptrh	equ	0xFF7
 12692                           tblptrl	equ	0xFF6
 12693                           tablat	equ	0xFF5
 12694                           prodh	equ	0xFF4
 12695                           prodl	equ	0xFF3
 12696                           intcon	equ	0xFF2
 12697                           postinc0	equ	0xFEE
 12698                           wreg	equ	0xFE8
 12699                           postdec1	equ	0xFE5
 12700                           plusw1	equ	0xFE3
 12701                           fsr1l	equ	0xFE1
 12702                           indf2	equ	0xFDF
 12703                           postinc2	equ	0xFDE
 12704                           postdec2	equ	0xFDD
 12705                           plusw2	equ	0xFDB
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function ___lldiv *****************
 12711 ;; Defined at:
 12712 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  dividend        4    0[COMRAM] unsigned long 
 12715 ;;  divisor         4    4[COMRAM] unsigned long 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  quotient        4    8[COMRAM] unsigned long 
 12718 ;;  counter         1   12[COMRAM] unsigned char 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  4    0[COMRAM] unsigned long 
 12721 ;; Registers used:
 12722 ;;		wreg, status,2, status,0
 12723 ;; Tracked objects:
 12724 ;;		On entry : 0/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12728 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12729 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;Total ram usage:       13 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_I2C_Master_Init
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text31
 12742  00C7A6                     __ptext31:
 12743                           	opt stack 0
 12744  00C7A6                     ___lldiv:
 12745                           	opt stack 28
 12746                           
 12747                           ;incstack = 0
 12748  00C7A6  0E00               	movlw	0
 12749  00C7A8  6E09               	movwf	___lldiv@quotient,c
 12750  00C7AA  0E00               	movlw	0
 12751  00C7AC  6E0A               	movwf	___lldiv@quotient+1,c
 12752  00C7AE  0E00               	movlw	0
 12753  00C7B0  6E0B               	movwf	___lldiv@quotient+2,c
 12754  00C7B2  0E00               	movlw	0
 12755  00C7B4  6E0C               	movwf	___lldiv@quotient+3,c
 12756  00C7B6  5005               	movf	___lldiv@divisor,w,c
 12757  00C7B8  1006               	iorwf	___lldiv@divisor+1,w,c
 12758  00C7BA  1007               	iorwf	___lldiv@divisor+2,w,c
 12759  00C7BC  1008               	iorwf	___lldiv@divisor+3,w,c
 12760  00C7BE  B4D8               	btfsc	status,2,c
 12761  00C7C0  D02A               	goto	l1422
 12762  00C7C2  0E01               	movlw	1
 12763  00C7C4  6E0D               	movwf	___lldiv@counter,c
 12764  00C7C6  D006               	goto	l1417
 12765  00C7C8  90D8               	bcf	status,0,c
 12766  00C7CA  3605               	rlcf	___lldiv@divisor,f,c
 12767  00C7CC  3606               	rlcf	___lldiv@divisor+1,f,c
 12768  00C7CE  3607               	rlcf	___lldiv@divisor+2,f,c
 12769  00C7D0  3608               	rlcf	___lldiv@divisor+3,f,c
 12770  00C7D2  2A0D               	incf	___lldiv@counter,f,c
 12771  00C7D4                     l1417:
 12772  00C7D4  AE08               	btfss	___lldiv@divisor+3,7,c
 12773  00C7D6  D7F8               	goto	l1418
 12774  00C7D8                     u5970:
 12775  00C7D8  90D8               	bcf	status,0,c
 12776  00C7DA  3609               	rlcf	___lldiv@quotient,f,c
 12777  00C7DC  360A               	rlcf	___lldiv@quotient+1,f,c
 12778  00C7DE  360B               	rlcf	___lldiv@quotient+2,f,c
 12779  00C7E0  360C               	rlcf	___lldiv@quotient+3,f,c
 12780  00C7E2  5005               	movf	___lldiv@divisor,w,c
 12781  00C7E4  5C01               	subwf	___lldiv@dividend,w,c
 12782  00C7E6  5006               	movf	___lldiv@divisor+1,w,c
 12783  00C7E8  5802               	subwfb	___lldiv@dividend+1,w,c
 12784  00C7EA  5007               	movf	___lldiv@divisor+2,w,c
 12785  00C7EC  5803               	subwfb	___lldiv@dividend+2,w,c
 12786  00C7EE  5008               	movf	___lldiv@divisor+3,w,c
 12787  00C7F0  5804               	subwfb	___lldiv@dividend+3,w,c
 12788  00C7F2  A0D8               	btfss	status,0,c
 12789  00C7F4  D009               	goto	l1421
 12790  00C7F6  5005               	movf	___lldiv@divisor,w,c
 12791  00C7F8  5E01               	subwf	___lldiv@dividend,f,c
 12792  00C7FA  5006               	movf	___lldiv@divisor+1,w,c
 12793  00C7FC  5A02               	subwfb	___lldiv@dividend+1,f,c
 12794  00C7FE  5007               	movf	___lldiv@divisor+2,w,c
 12795  00C800  5A03               	subwfb	___lldiv@dividend+2,f,c
 12796  00C802  5008               	movf	___lldiv@divisor+3,w,c
 12797  00C804  5A04               	subwfb	___lldiv@dividend+3,f,c
 12798  00C806  8009               	bsf	___lldiv@quotient,0,c
 12799  00C808                     l1421:
 12800  00C808  90D8               	bcf	status,0,c
 12801  00C80A  3208               	rrcf	___lldiv@divisor+3,f,c
 12802  00C80C  3207               	rrcf	___lldiv@divisor+2,f,c
 12803  00C80E  3206               	rrcf	___lldiv@divisor+1,f,c
 12804  00C810  3205               	rrcf	___lldiv@divisor,f,c
 12805  00C812  2E0D               	decfsz	___lldiv@counter,f,c
 12806  00C814  D7E1               	goto	u5970
 12807  00C816                     l1422:
 12808  00C816  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12809  00C81A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12810  00C81E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12811  00C822  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12812  00C826  0012               	return		;funcret
 12813  00C828                     __end_of___lldiv:
 12814                           	opt stack 0
 12815                           tblptru	equ	0xFF8
 12816                           tblptrh	equ	0xFF7
 12817                           tblptrl	equ	0xFF6
 12818                           tablat	equ	0xFF5
 12819                           prodh	equ	0xFF4
 12820                           prodl	equ	0xFF3
 12821                           intcon	equ	0xFF2
 12822                           postinc0	equ	0xFEE
 12823                           wreg	equ	0xFE8
 12824                           postdec1	equ	0xFE5
 12825                           plusw1	equ	0xFE3
 12826                           fsr1l	equ	0xFE1
 12827                           indf2	equ	0xFDF
 12828                           postinc2	equ	0xFDE
 12829                           postdec2	equ	0xFDD
 12830                           plusw2	equ	0xFDB
 12831                           fsr2h	equ	0xFDA
 12832                           fsr2l	equ	0xFD9
 12833                           status	equ	0xFD8
 12834                           
 12835 ;; *************** function _mainOperation *****************
 12836 ;; Defined at:
 12837 ;;		line 214 in file "operationMode.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;		None
 12840 ;; Auto vars:     Size  Location     Type
 12841 ;;		None
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  1    wreg      void 
 12844 ;; Registers used:
 12845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        0 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; Hardware stack levels required when called:    2
 12858 ;; This function calls:
 12859 ;;		_UART_Init
 12860 ;; This function is called by:
 12861 ;;		_main
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text32
 12866  00C3C0                     __ptext32:
 12867                           	opt stack 0
 12868  00C3C0                     _mainOperation:
 12869                           	opt stack 28
 12870                           
 12871                           ;operationMode.c: 216: UART_Init(9600);
 12872                           
 12873                           ;incstack = 0
 12874  00C3C0  0E80               	movlw	128
 12875  00C3C2  6E0F               	movwf	UART_Init@baud,c
 12876  00C3C4  0E25               	movlw	37
 12877  00C3C6  6E10               	movwf	UART_Init@baud+1,c
 12878  00C3C8  0E00               	movlw	0
 12879  00C3CA  6E11               	movwf	UART_Init@baud+2,c
 12880  00C3CC  0E00               	movlw	0
 12881  00C3CE  6E12               	movwf	UART_Init@baud+3,c
 12882  00C3D0  EC14  F064         	call	_UART_Init	;wreg free
 12883  00C3D4  0012               	return		;funcret
 12884  00C3D6                     __end_of_mainOperation:
 12885                           	opt stack 0
 12886                           tblptru	equ	0xFF8
 12887                           tblptrh	equ	0xFF7
 12888                           tblptrl	equ	0xFF6
 12889                           tablat	equ	0xFF5
 12890                           prodh	equ	0xFF4
 12891                           prodl	equ	0xFF3
 12892                           intcon	equ	0xFF2
 12893                           postinc0	equ	0xFEE
 12894                           wreg	equ	0xFE8
 12895                           postdec1	equ	0xFE5
 12896                           plusw1	equ	0xFE3
 12897                           fsr1l	equ	0xFE1
 12898                           indf2	equ	0xFDF
 12899                           postinc2	equ	0xFDE
 12900                           postdec2	equ	0xFDD
 12901                           plusw2	equ	0xFDB
 12902                           fsr2h	equ	0xFDA
 12903                           fsr2l	equ	0xFD9
 12904                           status	equ	0xFD8
 12905                           
 12906 ;; *************** function _UART_Init *****************
 12907 ;; Defined at:
 12908 ;;		line 197 in file "UART_PIC.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  baud            4   14[COMRAM] long 
 12911 ;; Auto vars:     Size  Location     Type
 12912 ;;		None
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  1    wreg      void 
 12915 ;; Registers used:
 12916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12926 ;;Total ram usage:        8 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    1
 12929 ;; This function calls:
 12930 ;;		___aldiv
 12931 ;; This function is called by:
 12932 ;;		_mainOperation
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text33
 12937  00C828                     __ptext33:
 12938                           	opt stack 0
 12939  00C828                     _UART_Init:
 12940                           	opt stack 28
 12941                           
 12942                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 12943                           
 12944                           ;incstack = 0
 12945  00C828  0E00               	movlw	0
 12946  00C82A  6E01               	movwf	___aldiv@dividend,c
 12947  00C82C  0E5A               	movlw	90
 12948  00C82E  6E02               	movwf	___aldiv@dividend+1,c
 12949  00C830  0E62               	movlw	98
 12950  00C832  6E03               	movwf	___aldiv@dividend+2,c
 12951  00C834  0E02               	movlw	2
 12952  00C836  6E04               	movwf	___aldiv@dividend+3,c
 12953  00C838  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 12954  00C83C  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 12955  00C840  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 12956  00C844  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 12957  00C848  0E06               	movlw	6
 12958  00C84A                     u5995:
 12959  00C84A  90D8               	bcf	status,0,c
 12960  00C84C  3613               	rlcf	??_UART_Init,f,c
 12961  00C84E  3614               	rlcf	??_UART_Init+1,f,c
 12962  00C850  3615               	rlcf	??_UART_Init+2,f,c
 12963  00C852  3616               	rlcf	??_UART_Init+3,f,c
 12964  00C854  2EE8               	decfsz	wreg,f,c
 12965  00C856  D7F9               	goto	u5995
 12966  00C858  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 12967  00C85C  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 12968  00C860  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 12969  00C864  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 12970  00C868  EC0C  F065         	call	___aldiv	;wreg free
 12971  00C86C  0401               	decf	?___aldiv,w,c
 12972  00C86E  6EAF               	movwf	4015,c	;volatile
 12973                           
 12974                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 12975  00C870  9CAC               	bcf	4012,6,c	;volatile
 12976                           
 12977                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 12978  00C872  98AC               	bcf	4012,4,c	;volatile
 12979                           
 12980                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 12981  00C874  8AAC               	bsf	4012,5,c	;volatile
 12982                           
 12983                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 12984  00C876  9CAB               	bcf	4011,6,c	;volatile
 12985                           
 12986                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 12987  00C878  88AB               	bsf	4011,4,c	;volatile
 12988                           
 12989                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 12990  00C87A  EE20 F008          	lfsr	2,8
 12991  00C87E  5074               	movf	_UART,w,c
 12992  00C880  26D9               	addwf	fsr2l,f,c
 12993  00C882  5075               	movf	_UART+1,w,c
 12994  00C884  22DA               	addwfc	fsr2h,f,c
 12995  00C886  0E01               	movlw	1
 12996  00C888  6EDF               	movwf	indf2,c
 12997                           
 12998                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 12999  00C88A  EE20 F009          	lfsr	2,9
 13000  00C88E  5074               	movf	_UART,w,c
 13001  00C890  26D9               	addwf	fsr2l,f,c
 13002  00C892  5075               	movf	_UART+1,w,c
 13003  00C894  22DA               	addwfc	fsr2h,f,c
 13004  00C896  0E01               	movlw	1
 13005  00C898  6EDF               	movwf	indf2,c
 13006                           
 13007                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 13008  00C89A  0E50               	movlw	low _arr_dataRX
 13009  00C89C  0101               	movlb	1	; () banked
 13010  00C89E  6F64               	movwf	(_uart+4)& (0+255),b	;volatile
 13011  00C8A0  0E01               	movlw	high _arr_dataRX
 13012  00C8A2  6F65               	movwf	(_uart+5)& (0+255),b	;volatile
 13013                           
 13014                           ; BSR set to: 1
 13015                           ;UART_PIC.c: 229: TRISC6 = 0;
 13016  00C8A4  9C94               	bcf	3988,6,c	;volatile
 13017                           
 13018                           ; BSR set to: 1
 13019                           ;UART_PIC.c: 230: TRISC7 = 1;
 13020  00C8A6  8E94               	bsf	3988,7,c	;volatile
 13021                           
 13022                           ; BSR set to: 1
 13023                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 13024  00C8A8  8EAB               	bsf	4011,7,c	;volatile
 13025                           
 13026                           ; BSR set to: 1
 13027  00C8AA  0012               	return		;funcret
 13028  00C8AC                     __end_of_UART_Init:
 13029                           	opt stack 0
 13030                           tblptru	equ	0xFF8
 13031                           tblptrh	equ	0xFF7
 13032                           tblptrl	equ	0xFF6
 13033                           tablat	equ	0xFF5
 13034                           prodh	equ	0xFF4
 13035                           prodl	equ	0xFF3
 13036                           intcon	equ	0xFF2
 13037                           postinc0	equ	0xFEE
 13038                           wreg	equ	0xFE8
 13039                           postdec1	equ	0xFE5
 13040                           plusw1	equ	0xFE3
 13041                           fsr1l	equ	0xFE1
 13042                           indf2	equ	0xFDF
 13043                           postinc2	equ	0xFDE
 13044                           postdec2	equ	0xFDD
 13045                           plusw2	equ	0xFDB
 13046                           fsr2h	equ	0xFDA
 13047                           fsr2l	equ	0xFD9
 13048                           status	equ	0xFD8
 13049                           
 13050 ;; *************** function ___aldiv *****************
 13051 ;; Defined at:
 13052 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;  dividend        4    0[COMRAM] long 
 13055 ;;  divisor         4    4[COMRAM] long 
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;  quotient        4   10[COMRAM] long 
 13058 ;;  sign            1    9[COMRAM] unsigned char 
 13059 ;;  counter         1    8[COMRAM] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;                  4    0[COMRAM] long 
 13062 ;; Registers used:
 13063 ;;		wreg, status,2, status,0
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13069 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13070 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13072 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13073 ;;Total ram usage:       14 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; This function calls:
 13076 ;;		Nothing
 13077 ;; This function is called by:
 13078 ;;		_UART_Init
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           	psect	text34
 13083  00CA18                     __ptext34:
 13084                           	opt stack 0
 13085  00CA18                     ___aldiv:
 13086                           	opt stack 28
 13087                           
 13088                           ; BSR set to: 1
 13089                           ;incstack = 0
 13090  00CA18  0E00               	movlw	0
 13091  00CA1A  6E0A               	movwf	___aldiv@sign,c
 13092  00CA1C  AE08               	btfss	___aldiv@divisor+3,7,c
 13093  00CA1E  D00A               	goto	l1117
 13094  00CA20  1E08               	comf	___aldiv@divisor+3,f,c
 13095  00CA22  1E07               	comf	___aldiv@divisor+2,f,c
 13096  00CA24  1E06               	comf	___aldiv@divisor+1,f,c
 13097  00CA26  6C05               	negf	___aldiv@divisor,c
 13098  00CA28  0E00               	movlw	0
 13099  00CA2A  2206               	addwfc	___aldiv@divisor+1,f,c
 13100  00CA2C  2207               	addwfc	___aldiv@divisor+2,f,c
 13101  00CA2E  2208               	addwfc	___aldiv@divisor+3,f,c
 13102  00CA30  0E01               	movlw	1
 13103  00CA32  6E0A               	movwf	___aldiv@sign,c
 13104  00CA34                     l1117:
 13105  00CA34  AE04               	btfss	___aldiv@dividend+3,7,c
 13106  00CA36  D00A               	goto	l1118
 13107  00CA38  1E04               	comf	___aldiv@dividend+3,f,c
 13108  00CA3A  1E03               	comf	___aldiv@dividend+2,f,c
 13109  00CA3C  1E02               	comf	___aldiv@dividend+1,f,c
 13110  00CA3E  6C01               	negf	___aldiv@dividend,c
 13111  00CA40  0E00               	movlw	0
 13112  00CA42  2202               	addwfc	___aldiv@dividend+1,f,c
 13113  00CA44  2203               	addwfc	___aldiv@dividend+2,f,c
 13114  00CA46  2204               	addwfc	___aldiv@dividend+3,f,c
 13115  00CA48  0E01               	movlw	1
 13116  00CA4A  1A0A               	xorwf	___aldiv@sign,f,c
 13117  00CA4C                     l1118:
 13118  00CA4C  0E00               	movlw	0
 13119  00CA4E  6E0B               	movwf	___aldiv@quotient,c
 13120  00CA50  0E00               	movlw	0
 13121  00CA52  6E0C               	movwf	___aldiv@quotient+1,c
 13122  00CA54  0E00               	movlw	0
 13123  00CA56  6E0D               	movwf	___aldiv@quotient+2,c
 13124  00CA58  0E00               	movlw	0
 13125  00CA5A  6E0E               	movwf	___aldiv@quotient+3,c
 13126  00CA5C  5005               	movf	___aldiv@divisor,w,c
 13127  00CA5E  1006               	iorwf	___aldiv@divisor+1,w,c
 13128  00CA60  1007               	iorwf	___aldiv@divisor+2,w,c
 13129  00CA62  1008               	iorwf	___aldiv@divisor+3,w,c
 13130  00CA64  B4D8               	btfsc	status,2,c
 13131  00CA66  D02A               	goto	l1125
 13132  00CA68  0E01               	movlw	1
 13133  00CA6A  6E09               	movwf	___aldiv@counter,c
 13134  00CA6C  D006               	goto	l1120
 13135  00CA6E  90D8               	bcf	status,0,c
 13136  00CA70  3605               	rlcf	___aldiv@divisor,f,c
 13137  00CA72  3606               	rlcf	___aldiv@divisor+1,f,c
 13138  00CA74  3607               	rlcf	___aldiv@divisor+2,f,c
 13139  00CA76  3608               	rlcf	___aldiv@divisor+3,f,c
 13140  00CA78  2A09               	incf	___aldiv@counter,f,c
 13141  00CA7A                     l1120:
 13142  00CA7A  AE08               	btfss	___aldiv@divisor+3,7,c
 13143  00CA7C  D7F8               	goto	l1121
 13144  00CA7E                     u5930:
 13145  00CA7E  90D8               	bcf	status,0,c
 13146  00CA80  360B               	rlcf	___aldiv@quotient,f,c
 13147  00CA82  360C               	rlcf	___aldiv@quotient+1,f,c
 13148  00CA84  360D               	rlcf	___aldiv@quotient+2,f,c
 13149  00CA86  360E               	rlcf	___aldiv@quotient+3,f,c
 13150  00CA88  5005               	movf	___aldiv@divisor,w,c
 13151  00CA8A  5C01               	subwf	___aldiv@dividend,w,c
 13152  00CA8C  5006               	movf	___aldiv@divisor+1,w,c
 13153  00CA8E  5802               	subwfb	___aldiv@dividend+1,w,c
 13154  00CA90  5007               	movf	___aldiv@divisor+2,w,c
 13155  00CA92  5803               	subwfb	___aldiv@dividend+2,w,c
 13156  00CA94  5008               	movf	___aldiv@divisor+3,w,c
 13157  00CA96  5804               	subwfb	___aldiv@dividend+3,w,c
 13158  00CA98  A0D8               	btfss	status,0,c
 13159  00CA9A  D009               	goto	l1124
 13160  00CA9C  5005               	movf	___aldiv@divisor,w,c
 13161  00CA9E  5E01               	subwf	___aldiv@dividend,f,c
 13162  00CAA0  5006               	movf	___aldiv@divisor+1,w,c
 13163  00CAA2  5A02               	subwfb	___aldiv@dividend+1,f,c
 13164  00CAA4  5007               	movf	___aldiv@divisor+2,w,c
 13165  00CAA6  5A03               	subwfb	___aldiv@dividend+2,f,c
 13166  00CAA8  5008               	movf	___aldiv@divisor+3,w,c
 13167  00CAAA  5A04               	subwfb	___aldiv@dividend+3,f,c
 13168  00CAAC  800B               	bsf	___aldiv@quotient,0,c
 13169  00CAAE                     l1124:
 13170  00CAAE  90D8               	bcf	status,0,c
 13171  00CAB0  3208               	rrcf	___aldiv@divisor+3,f,c
 13172  00CAB2  3207               	rrcf	___aldiv@divisor+2,f,c
 13173  00CAB4  3206               	rrcf	___aldiv@divisor+1,f,c
 13174  00CAB6  3205               	rrcf	___aldiv@divisor,f,c
 13175  00CAB8  2E09               	decfsz	___aldiv@counter,f,c
 13176  00CABA  D7E1               	goto	u5930
 13177  00CABC                     l1125:
 13178  00CABC  500A               	movf	___aldiv@sign,w,c
 13179  00CABE  B4D8               	btfsc	status,2,c
 13180  00CAC0  D008               	goto	l1126
 13181  00CAC2  1E0E               	comf	___aldiv@quotient+3,f,c
 13182  00CAC4  1E0D               	comf	___aldiv@quotient+2,f,c
 13183  00CAC6  1E0C               	comf	___aldiv@quotient+1,f,c
 13184  00CAC8  6C0B               	negf	___aldiv@quotient,c
 13185  00CACA  0E00               	movlw	0
 13186  00CACC  220C               	addwfc	___aldiv@quotient+1,f,c
 13187  00CACE  220D               	addwfc	___aldiv@quotient+2,f,c
 13188  00CAD0  220E               	addwfc	___aldiv@quotient+3,f,c
 13189  00CAD2                     l1126:
 13190  00CAD2  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 13191  00CAD6  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 13192  00CADA  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 13193  00CADE  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 13194  00CAE2  0012               	return	
 13195  00CAE4                     __end_of___aldiv:
 13196                           	opt stack 0
 13197                           tblptru	equ	0xFF8
 13198                           tblptrh	equ	0xFF7
 13199                           tblptrl	equ	0xFF6
 13200                           tablat	equ	0xFF5
 13201                           prodh	equ	0xFF4
 13202                           prodl	equ	0xFF3
 13203                           intcon	equ	0xFF2
 13204                           postinc0	equ	0xFEE
 13205                           wreg	equ	0xFE8
 13206                           postdec1	equ	0xFE5
 13207                           plusw1	equ	0xFE3
 13208                           fsr1l	equ	0xFE1
 13209                           indf2	equ	0xFDF
 13210                           postinc2	equ	0xFDE
 13211                           postdec2	equ	0xFDD
 13212                           plusw2	equ	0xFDB
 13213                           fsr2h	equ	0xFDA
 13214                           fsr2l	equ	0xFD9
 13215                           status	equ	0xFD8
 13216                           
 13217 ;; *************** function _initLCD *****************
 13218 ;; Defined at:
 13219 ;;		line 32 in file "standbyMode.c"
 13220 ;; Parameters:    Size  Location     Type
 13221 ;;		None
 13222 ;; Auto vars:     Size  Location     Type
 13223 ;;		None
 13224 ;; Return value:  Size  Location     Type
 13225 ;;                  1    wreg      void 
 13226 ;; Registers used:
 13227 ;;		wreg, status,2, status,0, cstack
 13228 ;; Tracked objects:
 13229 ;;		On entry : 0/0
 13230 ;;		On exit  : 0/0
 13231 ;;		Unchanged: 0/0
 13232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13237 ;;Total ram usage:        1 bytes
 13238 ;; Hardware stack levels used:    1
 13239 ;; Hardware stack levels required when called:    2
 13240 ;; This function calls:
 13241 ;;		_lcdInst
 13242 ;; This function is called by:
 13243 ;;		_main
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           	psect	text35
 13248  00C4F4                     __ptext35:
 13249                           	opt stack 0
 13250  00C4F4                     _initLCD:
 13251                           	opt stack 28
 13252                           
 13253                           ;standbyMode.c: 40: _delay((unsigned long)((15)*(40000000/4000.0)));
 13254                           
 13255                           ;incstack = 0
 13256  00C4F4  0EC3               	movlw	195
 13257  00C4F6  6E04               	movwf	??_initLCD& (0+255),c
 13258  00C4F8  0ECD               	movlw	205
 13259  00C4FA                     u8967:
 13260  00C4FA  2EE8               	decfsz	wreg,f,c
 13261  00C4FC  D7FE               	bra	u8967
 13262  00C4FE  2E04               	decfsz	??_initLCD& (0+255),f,c
 13263  00C500  D7FC               	bra	u8967
 13264  00C502  F000               	nop	
 13265                           
 13266                           ;standbyMode.c: 41: lcdInst(0b00110011);
 13267  00C504  0E33               	movlw	51
 13268  00C506  ECC2  F061         	call	_lcdInst
 13269                           
 13270                           ;standbyMode.c: 42: lcdInst(0b00110010);
 13271  00C50A  0E32               	movlw	50
 13272  00C50C  ECC2  F061         	call	_lcdInst
 13273                           
 13274                           ;standbyMode.c: 43: lcdInst(0b00101000);
 13275  00C510  0E28               	movlw	40
 13276  00C512  ECC2  F061         	call	_lcdInst
 13277                           
 13278                           ;standbyMode.c: 44: lcdInst(0b00001111);
 13279  00C516  0E0F               	movlw	15
 13280  00C518  ECC2  F061         	call	_lcdInst
 13281                           
 13282                           ;standbyMode.c: 45: lcdInst(0b00000110);
 13283  00C51C  0E06               	movlw	6
 13284  00C51E  ECC2  F061         	call	_lcdInst
 13285                           
 13286                           ;standbyMode.c: 46: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13287  00C522  0E01               	movlw	1
 13288  00C524  ECC2  F061         	call	_lcdInst
 13289  00C528  0EC3               	movlw	195
 13290  00C52A  6E04               	movwf	??_initLCD& (0+255),c
 13291  00C52C  0ECD               	movlw	205
 13292  00C52E                     u8977:
 13293  00C52E  2EE8               	decfsz	wreg,f,c
 13294  00C530  D7FE               	bra	u8977
 13295  00C532  2E04               	decfsz	??_initLCD& (0+255),f,c
 13296  00C534  D7FC               	bra	u8977
 13297  00C536  F000               	nop	
 13298                           
 13299                           ;standbyMode.c: 49: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 13300  00C538  0E0F               	movlw	15
 13301  00C53A  ECC2  F061         	call	_lcdInst
 13302  00C53E  0012               	return		;funcret
 13303  00C540                     __end_of_initLCD:
 13304                           	opt stack 0
 13305                           tblptru	equ	0xFF8
 13306                           tblptrh	equ	0xFF7
 13307                           tblptrl	equ	0xFF6
 13308                           tablat	equ	0xFF5
 13309                           prodh	equ	0xFF4
 13310                           prodl	equ	0xFF3
 13311                           intcon	equ	0xFF2
 13312                           postinc0	equ	0xFEE
 13313                           wreg	equ	0xFE8
 13314                           postdec1	equ	0xFE5
 13315                           plusw1	equ	0xFE3
 13316                           fsr1l	equ	0xFE1
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           postdec2	equ	0xFDD
 13320                           plusw2	equ	0xFDB
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function _lcdInst *****************
 13326 ;; Defined at:
 13327 ;;		line 18 in file "standbyMode.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;  data            1    wreg     unsigned char 
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  data            1    2[COMRAM] unsigned char 
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0, cstack
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;Total ram usage:        1 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    1
 13348 ;; This function calls:
 13349 ;;		_lcdNibble
 13350 ;; This function is called by:
 13351 ;;		_main
 13352 ;;		_initLCD
 13353 ;;		_viewLogs
 13354 ;;		_displayLogs
 13355 ;;		_food_press
 13356 ;;		_diet_press
 13357 ;;		_which_drawer
 13358 ;;		_standbyMode
 13359 ;; This function uses a non-reentrant model
 13360 ;;
 13361                           
 13362                           	psect	text36
 13363  00C384                     __ptext36:
 13364                           	opt stack 0
 13365  00C384                     _lcdInst:
 13366                           	opt stack 27
 13367                           
 13368                           ;incstack = 0
 13369                           ;lcdInst@data stored from wreg
 13370  00C384  6E03               	movwf	lcdInst@data,c
 13371                           
 13372                           ;standbyMode.c: 26: LATDbits.LATD2 = 0;
 13373  00C386  948C               	bcf	3980,2,c	;volatile
 13374                           
 13375                           ;standbyMode.c: 27: lcdNibble(data);
 13376  00C388  5003               	movf	lcdInst@data,w,c
 13377  00C38A  EC55  F063         	call	_lcdNibble
 13378                           
 13379                           ;standbyMode.c: 28: _delay((unsigned long)((100)*(40000000/4000000.0)));
 13380  00C38E  0EC8               	movlw	200
 13381  00C390                     u8987:
 13382  00C390  D000               	nop2	
 13383  00C392  2EE8               	decfsz	wreg,f,c
 13384  00C394  D7FD               	bra	u8987
 13385  00C396  0012               	return		;funcret
 13386  00C398                     __end_of_lcdInst:
 13387                           	opt stack 0
 13388                           tblptru	equ	0xFF8
 13389                           tblptrh	equ	0xFF7
 13390                           tblptrl	equ	0xFF6
 13391                           tablat	equ	0xFF5
 13392                           prodh	equ	0xFF4
 13393                           prodl	equ	0xFF3
 13394                           intcon	equ	0xFF2
 13395                           postinc0	equ	0xFEE
 13396                           wreg	equ	0xFE8
 13397                           postdec1	equ	0xFE5
 13398                           plusw1	equ	0xFE3
 13399                           fsr1l	equ	0xFE1
 13400                           indf2	equ	0xFDF
 13401                           postinc2	equ	0xFDE
 13402                           postdec2	equ	0xFDD
 13403                           plusw2	equ	0xFDB
 13404                           fsr2h	equ	0xFDA
 13405                           fsr2l	equ	0xFD9
 13406                           status	equ	0xFD8
 13407                           
 13408 ;; *************** function _lcdNibble *****************
 13409 ;; Defined at:
 13410 ;;		line 53 in file "standbyMode.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;  data            1    wreg     unsigned char 
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;  data            1    1[COMRAM] unsigned char 
 13415 ;;  temp            1    0[COMRAM] unsigned char 
 13416 ;; Return value:  Size  Location     Type
 13417 ;;                  1    wreg      void 
 13418 ;; Registers used:
 13419 ;;		wreg, status,2, status,0
 13420 ;; Tracked objects:
 13421 ;;		On entry : 0/0
 13422 ;;		On exit  : 0/0
 13423 ;;		Unchanged: 0/0
 13424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13429 ;;Total ram usage:        2 bytes
 13430 ;; Hardware stack levels used:    1
 13431 ;; This function calls:
 13432 ;;		Nothing
 13433 ;; This function is called by:
 13434 ;;		_lcdInst
 13435 ;;		_putch
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           	psect	text37
 13440  00C6AA                     __ptext37:
 13441                           	opt stack 0
 13442  00C6AA                     _lcdNibble:
 13443                           	opt stack 27
 13444                           
 13445                           ;incstack = 0
 13446                           ;lcdNibble@data stored from wreg
 13447  00C6AA  6E02               	movwf	lcdNibble@data,c
 13448                           
 13449                           ;standbyMode.c: 61: char temp = (unsigned char) (data & 0xF0);
 13450  00C6AC  5002               	movf	lcdNibble@data,w,c
 13451  00C6AE  0BF0               	andlw	240
 13452  00C6B0  6E01               	movwf	lcdNibble@temp,c
 13453                           
 13454                           ;standbyMode.c: 62: LATD = (unsigned char) (LATD & 0x0F);
 13455  00C6B2  508C               	movf	3980,w,c	;volatile
 13456  00C6B4  0B0F               	andlw	15
 13457  00C6B6  6E8C               	movwf	3980,c	;volatile
 13458                           
 13459                           ;standbyMode.c: 63: LATD = (unsigned char) (temp | LATD);
 13460  00C6B8  5001               	movf	lcdNibble@temp,w,c
 13461  00C6BA  108C               	iorwf	3980,w,c	;volatile
 13462  00C6BC  6E8C               	movwf	3980,c	;volatile
 13463                           
 13464                           ;standbyMode.c: 65: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13465  00C6BE  0E00               	movlw	0
 13466  00C6C0  BEF2               	btfsc	intcon,7,c	;volatile
 13467  00C6C2  0E01               	movlw	1
 13468  00C6C4  6E71               	movwf	standbyMode@LCDinterruptState,c
 13469  00C6C6  9EF2               	bcf	intcon,7,c	;volatile
 13470  00C6C8  868C               	bsf	3980,3,c	;volatile
 13471  00C6CA  0E53               	movlw	83
 13472  00C6CC                     u8997:
 13473  00C6CC  2EE8               	decfsz	wreg,f,c
 13474  00C6CE  D7FE               	bra	u8997
 13475  00C6D0  F000               	nop	
 13476  00C6D2  968C               	bcf	3980,3,c	;volatile
 13477  00C6D4  0EC8               	movlw	200
 13478  00C6D6                     u9007:
 13479  00C6D6  D000               	nop2	
 13480  00C6D8  2EE8               	decfsz	wreg,f,c
 13481  00C6DA  D7FD               	bra	u9007
 13482  00C6DC  B071               	btfsc	standbyMode@LCDinterruptState,0,c
 13483  00C6DE  D002               	bra	u4135
 13484  00C6E0  9EF2               	bcf	intcon,7,c	;volatile
 13485  00C6E2  D001               	bra	u4136
 13486  00C6E4                     u4135:
 13487  00C6E4  8EF2               	bsf	intcon,7,c	;volatile
 13488  00C6E6                     u4136:
 13489                           
 13490                           ;standbyMode.c: 68: data = (unsigned char) (data << 4);
 13491  00C6E6  3802               	swapf	lcdNibble@data,w,c
 13492  00C6E8  0BF0               	andlw	240
 13493  00C6EA  6E02               	movwf	lcdNibble@data,c
 13494                           
 13495                           ;standbyMode.c: 69: temp = (unsigned char) (data & 0xF0);
 13496  00C6EC  5002               	movf	lcdNibble@data,w,c
 13497  00C6EE  0BF0               	andlw	240
 13498  00C6F0  6E01               	movwf	lcdNibble@temp,c
 13499                           
 13500                           ;standbyMode.c: 70: LATD = (unsigned char) (LATD & 0x0F);
 13501  00C6F2  508C               	movf	3980,w,c	;volatile
 13502  00C6F4  0B0F               	andlw	15
 13503  00C6F6  6E8C               	movwf	3980,c	;volatile
 13504                           
 13505                           ;standbyMode.c: 71: LATD = (unsigned char) (temp | LATD);
 13506  00C6F8  5001               	movf	lcdNibble@temp,w,c
 13507  00C6FA  108C               	iorwf	3980,w,c	;volatile
 13508  00C6FC  6E8C               	movwf	3980,c	;volatile
 13509                           
 13510                           ;standbyMode.c: 73: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13511  00C6FE  0E00               	movlw	0
 13512  00C700  BEF2               	btfsc	intcon,7,c	;volatile
 13513  00C702  0E01               	movlw	1
 13514  00C704  6E71               	movwf	standbyMode@LCDinterruptState,c
 13515  00C706  9EF2               	bcf	intcon,7,c	;volatile
 13516  00C708  868C               	bsf	3980,3,c	;volatile
 13517  00C70A  0E53               	movlw	83
 13518  00C70C                     u9017:
 13519  00C70C  2EE8               	decfsz	wreg,f,c
 13520  00C70E  D7FE               	bra	u9017
 13521  00C710  F000               	nop	
 13522  00C712  968C               	bcf	3980,3,c	;volatile
 13523  00C714  0EC8               	movlw	200
 13524  00C716                     u9027:
 13525  00C716  D000               	nop2	
 13526  00C718  2EE8               	decfsz	wreg,f,c
 13527  00C71A  D7FD               	bra	u9027
 13528  00C71C  B071               	btfsc	standbyMode@LCDinterruptState,0,c
 13529  00C71E  D002               	bra	u4145
 13530  00C720  9EF2               	bcf	intcon,7,c	;volatile
 13531  00C722  D001               	bra	u4146
 13532  00C724                     u4145:
 13533  00C724  8EF2               	bsf	intcon,7,c	;volatile
 13534  00C726                     u4146:
 13535  00C726  0012               	return		;funcret
 13536  00C728                     __end_of_lcdNibble:
 13537                           	opt stack 0
 13538                           tblptru	equ	0xFF8
 13539                           tblptrh	equ	0xFF7
 13540                           tblptrl	equ	0xFF6
 13541                           tablat	equ	0xFF5
 13542                           prodh	equ	0xFF4
 13543                           prodl	equ	0xFF3
 13544                           intcon	equ	0xFF2
 13545                           postinc0	equ	0xFEE
 13546                           wreg	equ	0xFE8
 13547                           postdec1	equ	0xFE5
 13548                           plusw1	equ	0xFE3
 13549                           fsr1l	equ	0xFE1
 13550                           indf2	equ	0xFDF
 13551                           postinc2	equ	0xFDE
 13552                           postdec2	equ	0xFDD
 13553                           plusw2	equ	0xFDB
 13554                           fsr2h	equ	0xFDA
 13555                           fsr2l	equ	0xFD9
 13556                           status	equ	0xFD8
 13557                           tblptru	equ	0xFF8
 13558                           tblptrh	equ	0xFF7
 13559                           tblptrl	equ	0xFF6
 13560                           tablat	equ	0xFF5
 13561                           prodh	equ	0xFF4
 13562                           prodl	equ	0xFF3
 13563                           intcon	equ	0xFF2
 13564                           postinc0	equ	0xFEE
 13565                           wreg	equ	0xFE8
 13566                           postdec1	equ	0xFE5
 13567                           plusw1	equ	0xFE3
 13568                           fsr1l	equ	0xFE1
 13569                           indf2	equ	0xFDF
 13570                           postinc2	equ	0xFDE
 13571                           postdec2	equ	0xFDD
 13572                           plusw2	equ	0xFDB
 13573                           fsr2h	equ	0xFDA
 13574                           fsr2l	equ	0xFD9
 13575                           status	equ	0xFD8
 13576                           
 13577                           	psect	rparam
 13578  0000                     tblptru	equ	0xFF8
 13579                           tblptrh	equ	0xFF7
 13580                           tblptrl	equ	0xFF6
 13581                           tablat	equ	0xFF5
 13582                           prodh	equ	0xFF4
 13583                           prodl	equ	0xFF3
 13584                           intcon	equ	0xFF2
 13585                           postinc0	equ	0xFEE
 13586                           wreg	equ	0xFE8
 13587                           postdec1	equ	0xFE5
 13588                           plusw1	equ	0xFE3
 13589                           fsr1l	equ	0xFE1
 13590                           indf2	equ	0xFDF
 13591                           postinc2	equ	0xFDE
 13592                           postdec2	equ	0xFDD
 13593                           plusw2	equ	0xFDB
 13594                           fsr2h	equ	0xFDA
 13595                           fsr2l	equ	0xFD9
 13596                           status	equ	0xFD8


Data Sizes:
    Strings     702
    Constant    65
    Data        42
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    104     121
    BANK0           128    120     128
    BANK1           256      0     144
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    displayLogs$1858	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_89(CODE[7]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_88(CODE[11]), STR_87(CODE[13]), STR_86(CODE[11]), STR_85(CODE[13]), 
		 -> STR_84(CODE[11]), STR_83(CODE[8]), STR_82(CODE[15]), STR_81(CODE[16]), 
		 -> STR_80(CODE[10]), STR_79(CODE[8]), STR_78(CODE[15]), STR_77(CODE[16]), 
		 -> STR_76(CODE[10]), STR_75(CODE[16]), STR_74(CODE[16]), STR_73(CODE[17]), 
		 -> STR_72(CODE[13]), STR_71(CODE[17]), STR_70(CODE[14]), STR_69(CODE[11]), 
		 -> STR_68(CODE[11]), STR_67(CODE[15]), STR_66(CODE[15]), STR_65(CODE[10]), 
		 -> STR_64(CODE[13]), STR_63(CODE[16]), STR_62(CODE[16]), STR_61(CODE[17]), 
		 -> STR_60(CODE[17]), STR_59(CODE[8]), STR_58(CODE[15]), STR_57(CODE[15]), 
		 -> STR_56(CODE[11]), STR_55(CODE[14]), STR_54(CODE[16]), STR_53(CODE[16]), 
		 -> STR_52(CODE[11]), STR_51(CODE[14]), STR_50(CODE[16]), STR_49(CODE[16]), 
		 -> STR_48(CODE[16]), STR_47(CODE[13]), STR_46(CODE[14]), STR_45(CODE[14]), 
		 -> STR_44(CODE[15]), STR_43(CODE[17]), STR_42(CODE[18]), STR_41(CODE[15]), 
		 -> STR_40(CODE[11]), STR_39(CODE[7]), STR_38(CODE[3]), STR_37(CODE[16]), 
		 -> STR_36(CODE[8]), STR_35(CODE[16]), STR_34(CODE[15]), STR_33(CODE[6]), 
		 -> STR_32(CODE[14]), STR_31(CODE[17]), STR_30(CODE[7]), STR_29(CODE[9]), 
		 -> STR_28(CODE[17]), STR_27(CODE[11]), STR_26(CODE[17]), STR_25(CODE[14]), 
		 -> STR_24(CODE[17]), STR_23(CODE[11]), STR_22(CODE[15]), STR_21(CODE[11]), 
		 -> STR_20(CODE[8]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK1[12]), 

    S75$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    S75$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _initEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_UART_Init
    _UART_Init->___aldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    _main->_standbyMode

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   99966
                                            101 COMRAM     3     3      0
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        124   122      2   88806
                                             97 COMRAM     4     2      2
                                              0 BANK0    120   120      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                         _initEEPROM
                            _lcdInst
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   11549
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   26606
                                             85 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         45    43      2   15445
                                             40 COMRAM    45    43      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    2003
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEEPROM                                           2     2      0    1709
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1640
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   14444
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   12902
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   10316
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2487
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                        0     0      0     550
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _UART_Init
       ___aldiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _initEEPROM
       _writeEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     78      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     68      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     189      34        0.0%
DATA                 0      0     189       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar  6 00:31:21 2018

                 _standbyMode F068        __end_of_verifyKeypress C5E4                  ?_displayLogs 0029  
                 __CFG_CPD$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l210 E5D2                           l300 EF80  
                         l221 E65E                           l213 F05E                           l214 E5F0  
                         l215 E60A                           l208 EFD6                           l232 E740  
                         l224 E67C                           l233 E76E                           l225 E6AA  
                         l209 E5B8                           l242 E830                           l218 E628  
                         l306 CCDA                           l243 E85C                           l235 E79E  
                         l227 E6DA                           l219 E642                           l260 EA1A  
                         l252 E916                           l500 C97E                           l412 CDCA  
                         l308 CD9C                           l261 EA5A                           l253 E956  
                         l245 E88A                           l237 E7CE                           l229 E70A  
                         l341 CBEA                           l309 CCC0                           l342 CBD0  
                         l334 CCCA                           l247 E8B8                           l239 E7FC  
                         l343 CCAC                           l431 D59E                           l423 D46C  
                         l280 ECA8                           l272 EBA2                           l264 EA9C  
                         l256 E998                           l520 D14E                           l512 D056  
                         l344 CBD8                           l416 C5C8                           l281 ECE8  
                         l273 EBE2                           l265 EADC                           l257 E9D8  
                         l249 E8E6                           l505 C986                           l337 CCD2  
                         l417 C5AE                           l610 CEEE                           l522 D080  
                         l418 C5C4                           l442 D614                           l426 D518  
                         l603 CF58                           l611 CEF6                           l275 EC24  
                         l267 EB1E                           l531 D160                           l443 D620  
                         l620 CF3E                           l612 CEFE                           l604 CEC6  
                         l292 EE30                           l284 ED2A                           l524 D0EC  
                         l372 CBE2                           l452 E188                           l436 D5AA  
                         l428 D512                           l621 CF46                           l613 CF06  
                         l605 CFD6                           l541 DB38                           l285 ED6A  
                         l277 EC66                           l269 EB60                           l517 D062  
                         l381 CDB0                           l461 E318                           l701 F42C  
                         l622 CF4E                           l614 CF0E                           l606 CECE  
                         l542 DB38                           l294 EE84                           l534 D1D0  
                         l470 E402                           l462 E35C                           l630 CAEE  
                         l615 CF16                           l607 CED6                           l551 DB62  
                         l287 EDAC                           l455 E220                           l447 D6BA  
                         l631 CAF6                           l703 FBDC                           l711 F4DC  
                         l616 CF1E                           l608 CEDE                           l296 EED8  
                         l376 CDD2                           l480 E5A0                           l472 E41E  
                         l640 CB3E                           l632 CAFE                           l617 CF26  
                         l609 CEE6                           l553 DBC4                           l289 EDEE  
                         l385 CDB8                           l457 E290                           l641 CB46  
                         l633 CB06                           l705 F7C4                           l618 CF2E  
                         l570 DD16                           l562 DC6C                           l546 DB44  
                         l298 EF2C                           l378 CEB2                           l642 CB50  
                         l634 CB0E                           l730 F6DA                           l722 F58E  
                         l714 F4EA                           l619 CF36                           l491 C96E  
                         l475 E556                           l467 E3C4                           l459 E2D4  
                         l627 CB5A                           l635 CB16                           l651 D22C  
                         l723 F660                           l707 F4A2                           l580 DDF8  
                         l572 DD42                           l564 DC96                           l556 DC0C  
                         l388 CDC0                           l636 CB1E                           l628 CAE6  
                         l740 F86A                           l732 F7BE                           l716 F7B6  
                         l724 F602                           l549 DC5C                           l485 C98E  
                         l493 C976                           l477 E594                           l637 CB26  
                         l629 CBBC                           l661 D336                           l733 FA92  
                         l741 F93C                           l725 F654                           l590 DEE0  
                         l582 DE26                           l574 DD6E                           l566 DCC0  
                         l486 C964                           l638 CB2E                           l654 D3BE  
                         l662 D304                           l646 D220                           l742 F8DE  
                         l718 F530                           l487 CA0E                           l807 C958  
                         l639 CB36                           l743 F930                           l592 DF10  
                         l584 DE54                           l576 DD9C                           l568 DCEA  
                         l672 D378                           l656 D24A                           l760 FCA2  
                         l736 F804                           l753 FAD4                           l729 F6A0  
                         l594 DF40                           l586 DE82                           l578 DDCA  
                         l658 D37C                           l755 FB00                           l747 F97C  
                         l596 DF70                           l588 DEB0                           l748 F9B6  
                         l677 D3D2                           l765 FC46                           l749 FAA6  
                         l693 F1AE                           l598 DFA2                           l758 FB26  
                         l599 DFF6                           l785 C4AA                           l698 F41E  
                         l995 D6E6                           l996 D6F6                           l998 D70A  
                         l999 D704                  __CFG_CPB$OFF 000000                           wreg 000FE8  
               _mainOperation C3C0                  __CFG_LVP$OFF 000000           standbyMode@dietType 00B0  
                __CFG_WDT$OFF 000000                          l1011 D88E                          l1020 D81E  
                        l1012 D79E                          l1004 D73C                          l1021 D818  
                        l1013 D7A2                          l1030 D942                          l1006 D858  
                        l1014 D7CA                          l1031 D8D6                          l1023 D846  
                        l1015 D7D8                          l1120 CA7A                          l1040 D96C  
                        l1024 D830                          l1016 D7D4                          l1121 CA6E  
                        l1041 D990                          l1042 D998                          l1018 D80E  
                        l1043 D9C4                          l1035 D952                          l1027 D8BC  
                        l1124 CAAE                          l1052 D9F2                          l1044 D9AE  
                        l1036 D90C                          l1125 CABC                          l1117 CA34  
                        l1053 DAAA                          l1126 CAD2                          l1118 CA4C  
                        l1055 DA94                          l1056 D9F8                          l1057 DAA4  
                        l1058 DA42                          l1421 C808                          l1422 C816  
                        l1417 C7D4                          l1418 C7C8                          l1470 C55E  
                        l1471 C556                          l1391 C3EC                          l1480 C4C8  
                        l1481 C4C0                          l1474 C57E                          l1475 C588  
                        l1484 C4E0                          l1485 C4EA                          l5420 E560  
                        l7020 FBD2                          l4800 D818                          l6128 DC06  
                        l5264 C5C4                          l4804 D830                          l5516 C48A  
                        l4830 D8DA                          l6504 C472                          l4912 C3AE  
                        l4844 D910                          l6540 C92C                          l6516 C8C4  
                        l6526 C8F0                          l6702 F2D4                          l6528 C8F8  
                        l6538 C924                          l6802 F58E                          l6910 F870  
                        l6806 F594                          l6906 F86A                          l6692 F2AC  
                        l6790 F538                          _ADON 007E10                          l6894 F814  
                        STR_1 FFB7                          STR_2 FFFC                          STR_3 FFEE  
                        STR_4 FFD6                          STR_5 FFF1                          STR_6 FFF9  
                        STR_7 FFD5                          STR_8 FFF0                          STR_9 FFF8  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        _LATD 000F8C                          _LATE 000F8D                          u4210 C4CC  
                        u4135 C6E4                          u4136 C6E6                          u4145 C724  
                        u4146 C726                          u4180 C562                          u6110 D6BE  
                        u6121 D02A                          u4460 D9CC                          u4470 D9E0  
                        u6320 DBE0                          u6080 D5CA                          u7200 D296  
                        u6241 DB28                          u4490 DAB2                          _RCIE 007CED  
                        _RCIF 007CF5                          u6190 D094                          u7400 C8F0  
                        u5800 E41C                          u7330 D34C                          u7420 C924  
                        u7340 D374                          u7501 F0A8                          u5830 E560  
                        u9007 C6D6                          u7511 F0BA                          u9017 C70C  
                        u8217 C764                          u5930 CA7E                          u7290 D2DC  
                        u9027 C716                          u8307 F390                          u8227 F148  
                        u7620 F4F8                          u7540 F2D4                          u8317 F3AA  
                        u8237 F16E                          u7455 C618                          u8407 F60E  
                        u8327 F3DC                          u8247 F186                          u7471 F072  
                        u7465 C410                          u8417 F646                          u8337 F3F6  
                        u8257 F1BE                          u7481 F084                          u5970 C7D8  
                        u7466 C412                          u7570 F43A                          u8507 FC38  
                        u8427 F66C                          u8347 F45A                          u8267 F1F6  
                        u7491 F096                          u7580 F442                          u8517 FC52  
                        u8437 F7D0                          u8357 F492                          u8277 F2EE  
                        u7670 F594                          u7590 F44E                          u8607 D4B8  
                        u8527 FC8A                          u8447 F88C                          u8367 F4AE  
                        u8287 F320                          u7840 FAD2                          u8617 D4D2  
                        u8537 FCAE                          u8457 F8C4                          u8377 F504  
                        u8297 F33A                          u7770 F870                          u5995 C84A  
                        u8707 D6AC                          u8627 D504                          u8547 FCE6  
                        u8467 F8EA                          u8387 F5B0                          u7860 FAE2  
                        u8717 E130                          u8637 D524                          u8557 D1EC  
                        u8477 F922                          u8397 F5E8                          u7870 FBD2  
                        u8807 E36C                          u8727 E17A                          u8647 D55C  
                        u8567 D390                          u8487 F948                          u7880 FBE4  
                        u8817 E3B6                          u8737 E1D0                          u8657 D576  
                        u8577 D422                          u8497 FC12                          u8907 D1C2  
                        u8827 E3D4                          u8747 E212                          u8667 D62A  
                        u8587 D454                          u8917 DADA                          u8837 E3F4  
                        u8757 E230                          u8677 D642                          u8597 D486  
                        u8927 DB76                          u8847 E472                          u8767 E282  
                        u8687 D662                          u8937 DFAE                          u8857 E548  
                        u8777 E2C6                          u8697 D67A                          u8947 DFE0  
                        u8867 E56C                          u8787 E30A                          _UART 0074  
                        u8957 C3A4                          u8877 CFEC                          u8797 E34E  
                        u8967 C4FA                          u8887 D100                          u8977 C52E  
                        u8897 D190                          u8987 C390                          u8997 C6CC  
                        _TRMT 007D61                          _TXIE 007CEC                          _TXIF 007CF4  
       __end_of_decode_drawer CBC6             viewLogs@logNumber 0060                          _main C728  
                        _keys FCFF               food_press@F3131 0069                          _uart 0160  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 0061           standbyMode@keypress 00DB                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM C488               diet_press@F3146 00F8  
             ?_verifyKeypress 0001              __end_of_LCD_LEFT FD3B           standbyMode@whichKey 00D9  
             food_press@count 0035               food_press@tally 002F         I2C_Master_Read@ackBit 0002  
            ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001               __end_of___aldiv CAE4            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FFEC  
                       STR_11 FFF4                         STR_20 FFAF                         STR_12 FFD9  
                       STR_21 FF56                         STR_13 FFD4                         STR_30 FFC6  
                       STR_22 FE77                         STR_14 FFDE                         STR_23 FF56  
                       STR_31 FDA7                         STR_15 FFD8                         STR_32 FEED  
                       STR_40 FE8A                         STR_24 FDA7                         STR_16 FFD3  
                       STR_33 FFCD                         STR_25 FEED                         STR_41 FE86  
                       STR_17 FFDD                         STR_50 FDE9                         STR_34 FE95  
                       STR_26 FDB8                         STR_42 FD40                         STR_18 FFE7  
                       STR_27 FF56                         STR_51 FED1                         STR_35 FDF9  
                       STR_43 FD96                         STR_19 FFE2                         STR_60 FDA7  
                       STR_36 FFA7                         STR_52 FF6C                         STR_44 FE68  
                       STR_28 FD85                         STR_29 FF96                         STR_45 FF09  
                       STR_53 FE19                         STR_37 FE09                         STR_61 FD74  
                       STR_54 FE19                         STR_38 FE92                         STR_46 FF09  
                       STR_70 FEFB                         STR_62 FE39                         STR_71 FD74  
                       STR_39 FE8E                         STR_47 FF31                         STR_55 FEDF  
                       STR_63 FDC9                         STR_56 FF6C                         STR_80 FF8C  
                       STR_64 FF3E                         STR_72 FF24                         STR_48 FE49  
                       STR_81 FDD9                         STR_65 FF82                         STR_57 FE59  
                       STR_49 FDE9                         STR_73 FD63                         STR_58 FE59  
                       STR_82 FEC2                         STR_66 FEA4                         STR_74 FE29  
                       STR_90 FD52                         STR_83 FF9F                         STR_75 FE49  
                       STR_59 FFB7                         STR_67 FEB3                         STR_76 FF8C  
                       STR_68 FF77                         STR_84 FF61                         STR_69 FF4B  
                       STR_85 FF17                         STR_77 FDD9                         STR_86 FF61  
                       STR_78 FEC2                         STR_87 FF17                         STR_79 FF9F  
                       STR_88 FF61                         STR_89 FFBF               __end_of___lldiv C828  
           viewLogs@returnVal 005C               __end_of___lwdiv C592               __end_of___lwmod C4F4  
                       _RCREG 000FAE                         _SPBRG 000FAF                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                ?_mainOperation 0001  
                       _TXREG 000FAD                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000               __end_of_getFlat CCB6  
               __CFG_WRT3$OFF 000000               diet_press@count 0033               __end_of_lcdInst C398  
             __end_of_getLong CEBC                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
          __size_of_UART_Init 0084                   initEEPROM@i 0003                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD C540  
              __CFG_EBTRB$OFF 000000          __size_of_decode_diet 0124               __end_of_dpowers FD2B  
                displayLogs@i 0048                  displayLogs@n 0054               __end_of_isdigit C3F4  
                       _input FD10                         _rowUp 0079                         _putch C398  
                       tablat 000FF5          standbyMode@logNumber 00EB             _LCDinterruptState 0073  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
 I2C_Master_Read@receivedByte 0003          standbyMode@keypress1 00E4                __CFG_PBADEN$ON 000000  
             standbyMode@diet 00EE               standbyMode@flat 00DE               standbyMode@food 00F0  
             standbyMode@time 00D0               standbyMode@zero 00E7               __initialization C640  
                __end_of_main C7A6                  __end_of_keys FD10                  standbyMode@i 00F6  
                standbyMode@n 00EC                  standbyMode@x 00E9                __CFG_OSC$HSPLL 000000  
           __end_of_LCD_RIGHT FD3C              food_press@drawer 002B                        ??_main 0066  
               __activetblptr 000003           food_press@backCheck 0031             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0002                  ?_shiftEEPROM 0001            ??_I2C_Master_Start 0002  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0004  
       standbyMode@flatPieces 0090                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _EEDATA 000FA8                        _EECON2 000FA7                        ?_putch 0001  
                      _SSPADD 000FC8                        _TRISC6 007CA6                        _TRISC7 007CA7  
                      _SSPBUF 000FC9              diet_press@drawer 0029                __CFG_XINST$OFF 000000  
            __end_of_getRound CDA6             __end_of_UART_Init C8AC                     ??___aldiv 0009  
                      ___wmul C43C                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C        decode_diet@returnValue 0005  
                      clear_0 C686                        clear_1 C692                        clear_2 C69E  
                      _inputs 016C                     ??_getFlat 0003                     ??_lcdInst 0003  
                      _printf D6DC                     ??_getLong 0003          __size_of_displayLogs 05AC  
             ??_mainOperation 0017           food_press@foodTable 0038                     ??_initLCD 0004  
             get_digits@count 0005                  __pdataCOMRAM 0074                     ??_isdigit 0001  
                __mediumconst FCFE              __end_of_viewLogs D6DC                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              standbyMode@F3170 0120  
            standbyMode@F3172 0110              standbyMode@F3166 0140              standbyMode@F3174 0100  
            standbyMode@F3168 0130           decode_diet@dietType 0001         standbyMode@longPieces 00A0  
                  __accesstop 0080       __end_of__initialization C6A4          which_drawer@keypress 0034  
               ___rparam_used 000001              standbyMode@round 00DC               writeEEPROM@data 0001  
             viewLogs@logView 005E        standbyMode@decodedDiet 00E2                  ?_standbyMode 0062  
        __end_of_happynewyear FD3A                __pcstackCOMRAM 0001                  __pidataBANK1 C418  
               __end_of_input FD21                 __end_of_putch C3AC            __size_of_lcdNibble 007E  
               check_food@sum 0001             food_press@dietSum 0029             food_press@isValid 0033  
                     ??_putch 0003                    __pbssBANK0 00F8                    __pbssBANK1 0100  
                  _check_food E5AC              ??_verifyKeypress 0003                  ?_writeEEPROM 0001  
                     ?___wmul 0001                    _diet_press DACE       displayLogs@drawerNumber 0052  
                     ?_printf 000D                    _arr_dataRX 0150                    _get_digits C95A  
                   ?_getRound 0001                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7          __size_of_shiftEEPROM 00AE                    _columnLeft 0077  
                  _initEEPROM C462                    _readEEPROM C3AC        standbyMode@drawerCount 00F4  
                  _food_press CFE0             __end_of_lcdNibble C728                       __Hparam 0000  
                     __Lparam 0000                     ?_viewLogs 0056                       ___aldiv CA18  
    displayLogs@operationTime 0044                       ___lldiv C7A6               __size_of___wmul 0026  
                     ___lwdiv C540                       ___lwmod C4B2                       __pcinit C640  
                     __ramtop 1000                       _getFlat CBC6                       _lcdInst C384  
                     _getLong CDA6                       __ptext0 C728                       __ptext1 F068  
                     __ptext2 D1DA                       __ptext3 CAE4                       __ptext4 D3F0  
                     __ptext5 C592                       __ptext6 E000                       __ptext7 C8AC  
                     __ptext8 C3AC                       __ptext9 C462        __size_of_decode_drawer 00E2  
             __size_of_printf 03F2                       _initLCD C4F4             __end_of_hexpowers FD33  
                     _dpowers FD21                 ??_decode_diet 0003         which_drawer@backCheck 0030  
                     _isdigit C3D6                displayLogs@day 0037                displayLogs@lng 0031  
            ___aldiv@dividend 0001                     _LCD_RIGHT FD3B      __size_of_I2C_Master_Init 005C  
    __size_of_I2C_Master_Read 0024      __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0029  
    __size_of_I2C_Master_Stop 0008                       _rowDown 0078                    ??_getRound 0003  
        end_of_initialization C6A4          displayLogs@keypress3 0043               which_drawer@sum 002E  
       __end_of_LCD_SIZE_HORZ FD3E                   ?_check_food 0001         __end_of_LCD_SIZE_VERT FD3D  
           main@operationMode 0067     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                     _RCSTAbits 000FAB  
                     printf@c 0028                       printf@f 000D              ___aldiv@quotient 000B  
                     postdec1 000FE5                       postdec2 000FDD                    ??_viewLogs 0058  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 0C96  
                 ?_diet_press 0029                     _UART_Init C828                     _PORTBbits 000F81  
               ?_which_drawer 0029           diet_press@backCheck 0031                   ?_get_digits 0001  
                   _TRISCbits 000F94              viewLogs@checkLog 005A                  _happynewyear FD33  
           readEEPROM@address 0001           __end_of_decode_diet CFE0             standbyMode@drawer 00F2  
                 ?_initEEPROM 0001                 _decode_drawer CAE4                   ?_readEEPROM 0001  
                 printf@width 0026                     _TXSTAbits 000FAC                   ?_food_press 0029  
         diet_press@dietTable 0038                 ??_displayLogs 002B          __size_of_writeEEPROM 002A  
              __end_of___wmul C462                    ?_UART_Init 000F                 __pidataCOMRAM C352  
      standbyMode@validDrawer 00E5           __size_of_check_food 0ABC                ??_which_drawer 002B  
              __end_of_printf DACE         __end_of_mainOperation C3D6           start_initialization C640  
              standbyMode@lng 00E0                ?_decode_drawer 0001           __size_of_diet_press 0532  
           ??_I2C_Master_Init 0012             ??_I2C_Master_Read 0002             ??_I2C_Master_Wait 0001  
           ??_I2C_Master_Stop 0002  standbyMode@drawerInformation 00C0           __size_of_get_digits 00BE  
                    ??___wmul 0005      I2C_Master_Init@clockFreq 000E                   __pdataBANK1 016C  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0017           __size_of_initEEPROM 0026  
          food_press@keypress 0037           __size_of_readEEPROM 0014           __end_of_displayLogs E5AC  
         __size_of_food_press 01FA  standbyMode@LCDinterruptState 0071                   __pbssCOMRAM 0069  
                 _decode_diet CEBC                 __pcstackBANK0 0080                  _isdigit$1453 0002  
         decode_drawer@drawer 0001             __size_of_getRound 00F0        standbyMode@roundPieces 0080  
            _I2C_Master_Start C358              _I2C_Master_Write C368              ___lwdiv@dividend 0001  
           __CFG_CCP2MX$PORTC 000000            _UARTinterruptState 0072                 __pmediumconst FCFE  
               UART_Init@baud 000F                     _lcdNibble C6AA                      ?___aldiv 0001  
                    ?___lldiv 0001                      ?___lwdiv 0001                      ?___lwmod 0008  
                 ??_UART_Init 0013             __size_of_viewLogs 02EC                      ?_getFlat 0001  
                    ?_lcdInst 0001                      ?_getLong 0001                      ?_initLCD 0001  
                    ?_isdigit 0001           check_food@foodInput 0003                 ??_shiftEEPROM 0003  
         displayLogs@dietType 0046                     _hexpowers FD2B              ___lwdiv@quotient 0005  
             ??_decode_drawer 0003                __size_of_putch 0014                  ??_check_food 0005  
                    _LCD_LEFT FD3A              displayLogs@month 0035               ___aldiv@divisor 0005  
            displayLogs@round 002D               ___aldiv@counter 0009                ___wmul@product 0005  
                    _LATCbits 000F8B                      _LATDbits 000F8C          __end_of_which_drawer D3F0  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 002B  
                shiftEEPROM@i 0006                   _displayLogs E000       __size_of_verifyKeypress 0052  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0001            __end_of_check_food F068  
               lcdNibble@data 0002                    printf@flag 0025                   _columnRight 0076  
               lcdNibble@temp 0001                    printf@prec 001C                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FD3F                 diet_press@sum 0035                     copy_data0 C654  
                   copy_data1 C674             which_drawer@count 0032                  ??_initEEPROM 0003  
         __end_of_shiftEEPROM C95A            __end_of_diet_press E000                  ??_readEEPROM 0001  
                ??_food_press 002D            diet_press@keypress 0037                    _EECON1bits 000FA6  
                    __Hrparam 0000                 ??_standbyMode 0064                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits CA18            diet_press@previous 002D  
            __size_of___aldiv 00CC              __size_of___lldiv 0082         displayLogs@flatPieces 003B  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_getFlat 00F0  
            __size_of_lcdInst 0014              __size_of_getLong 0116            __end_of_initEEPROM C488  
             _I2C_Master_Init C5E4               _I2C_Master_Read C3F4              __size_of_initLCD 004C  
             _I2C_Master_Wait C372            __end_of_readEEPROM C3C0               _I2C_Master_Stop C360  
      __end_of_LCD_HORZ_LIMIT FD40              __size_of_isdigit 001E            __end_of_food_press D1DA  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 C488  
                    __ptext11 CCB6                      __ptext20 C3D6                      __ptext12 CDA6  
                    __ptext21 C43C                      __ptext13 CBC6                      __ptext30 C5E4  
                    __ptext22 C4B2                      __ptext14 CFE0                      __ptext31 C7A6  
                    __ptext23 C540                      __ptext15 C95A                      __ptext32 C3C0  
                    __ptext24 CEBC                      __ptext16 E5AC                      __ptext33 C828  
                    __ptext25 C368                      __ptext17 DACE                      __ptext34 CA18  
                    __ptext26 C360                      __ptext18 D6DC                      __ptext35 C4F4  
                    __ptext27 C358                      __ptext19 C398                      __ptext36 C384  
                    __ptext28 C3F4                      __ptext37 C6AA                      __ptext29 C372  
                    _getRound CCB6                _LCD_VERT_LIMIT FD3E                 __size_of_main 007E  
             displayLogs@flat 002F               displayLogs@year 0033            displayLogs@minutes 003F  
          displayLogs@seconds 0041                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 004A  
    displayLogs@markedDrawer2 004C      displayLogs@markedDrawer3 004E      displayLogs@markedDrawer4 0050  
                 ??_lcdNibble 0001                      _viewLogs D3F0               verifyKeypress@i 0008  
          getLong@returnValue 0005                     printf@idx 001B                     printf@len 0021  
                   printf@val 0023           __end_of_standbyMode FCFE   I2C_Master_Write@byteToWrite 0002  
    decode_drawer@returnValue 0005         displayLogs@longPieces 003D              which_drawer@rand 002C  
                   putch@data 0003      __end_of_I2C_Master_Start C360      __end_of_I2C_Master_Write C372  
                  _INTCONbits 000FF2                  ?_decode_diet 0001        __end_of_LCD_VERT_LIMIT FD3F  
                 _shiftEEPROM C8AC                      isdigit@c 0003         __size_of_which_drawer 0216  
                 getFlat@code 0001     standbyMode@firstIteration 00D7                 _LCD_SIZE_HORZ FD3D  
            ___lwmod@dividend 0008                 _LCD_SIZE_VERT FD3C              ___lldiv@dividend 0001  
     verifyKeypress@logNumber 0005        __size_of_mainOperation 0016            getFlat@returnValue 0005  
      displayLogs@roundPieces 0039                      printf@ap 001F                      printf@cp 001D  
                 diet_press@i 002F       __end_of_I2C_Master_Init C640       __end_of_I2C_Master_Read C418  
     __end_of_I2C_Master_Wait C384       __end_of_I2C_Master_Stop C368                   lcdInst@data 0003  
             shiftEEPROM@temp 0004                _verifyKeypress C592           getRound@returnValue 0005  
                 getLong@code 0001           __end_of_writeEEPROM C4B2       verifyKeypress@returnVal 0006  
            ___lldiv@quotient 0009                  _which_drawer D1DA               ___lwmod@divisor 000A  
             ___lwmod@counter 000C                  ___aldiv@sign 000A        verifyKeypress@keypress 0001  
                 _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5                  getRound@code 0001  
       check_food@returnValue 0007  
