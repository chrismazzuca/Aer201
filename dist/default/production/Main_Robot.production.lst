

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar  6 21:26:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61  0000                     
    62                           ; Version 1.45
    63                           ; Generated 16/11/2017 GMT
    64                           ; 
    65                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	idataCOMRAM
    98  00BC90                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _UART
   102  00BC90  D8                 	db	low _uart
   103  00BC91  00                 	db	high _uart
   104                           
   105                           ;initializer for _columnRight
   106  00BC92  34                 	db	52
   107                           
   108                           ;initializer for _columnLeft
   109  00BC93  33                 	db	51
   110                           
   111                           ;initializer for _rowDown
   112  00BC94  32                 	db	50
   113                           
   114                           ;initializer for _rowUp
   115  00BC95  31                 	db	49
   116                           
   117                           	psect	idataBANK0
   118  00BCFE                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _foodInputs
   122  00BCFE  BB                 	db	low (STR_37+3)
   123  00BCFF  FF                 	db	high (STR_37+3)
   124  00BD00  E5                 	db	low (STR_34+2)
   125  00BD01  FF                 	db	high (STR_34+2)
   126  00BD02  FB                 	db	low (STR_30+1)
   127  00BD03  FF                 	db	high (STR_30+1)
   128  00BD04  BA                 	db	low (STR_37+2)
   129  00BD05  FF                 	db	high (STR_37+2)
   130  00BD06  E4                 	db	low (STR_34+1)
   131  00BD07  FF                 	db	high (STR_34+1)
   132  00BD08  FA                 	db	low STR_30
   133  00BD09  FF                 	db	high STR_30
   134  00BD0A  E0                 	db	low (STR_35+1)
   135  00BD0B  FF                 	db	high (STR_35+1)
   136  00BD0C  F7                 	db	low STR_32
   137  00BD0D  FF                 	db	high STR_32
   138  00BD0E  B9                 	db	low (STR_37+1)
   139  00BD0F  FF                 	db	high (STR_37+1)
   140  00BD10  E3                 	db	low STR_34
   141  00BD11  FF                 	db	high STR_34
   142  00BD12  DF                 	db	low STR_35
   143  00BD13  FF                 	db	high STR_35
   144  00BD14  DB                 	db	low STR_36
   145  00BD15  FF                 	db	high STR_36
   146  00BD16  B8                 	db	low STR_37
   147  00BD17  FF                 	db	high STR_37
   148                           
   149                           	psect	idataBANK2
   150  00BD5A                     __pidataBANK2:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _inputs
   154  00BD5A  FD                 	db	low STR_7
   155  00BD5B  FF                 	db	high STR_7
   156  00BD5C  E9                 	db	low (STR_15+2)
   157  00BD5D  FF                 	db	high (STR_15+2)
   158  00BD5E  C0                 	db	low (STR_21+3)
   159  00BD5F  FF                 	db	high (STR_21+3)
   160  00BD60  EC                 	db	low (STR_13+1)
   161  00BD61  FF                 	db	high (STR_13+1)
   162  00BD62  F4                 	db	low (STR_14+1)
   163  00BD63  FF                 	db	high (STR_14+1)
   164  00BD64  BF                 	db	low (STR_21+2)
   165  00BD65  FF                 	db	high (STR_21+2)
   166  00BD66  EB                 	db	low STR_13
   167  00BD67  FF                 	db	high STR_13
   168  00BD68  F3                 	db	low STR_14
   169  00BD69  FF                 	db	high STR_14
   170  00BD6A  E7                 	db	low STR_15
   171  00BD6B  FF                 	db	high STR_15
   172  00BD6C  EF                 	db	low STR_16
   173  00BD6D  FF                 	db	high STR_16
   174  00BD6E  C3                 	db	low (STR_20+1)
   175  00BD6F  FF                 	db	high (STR_20+1)
   176  00BD70  BE                 	db	low (STR_21+1)
   177  00BD71  FF                 	db	high (STR_21+1)
   178  00BD72  C8                 	db	low (STR_22+1)
   179  00BD73  FF                 	db	high (STR_22+1)
   180  00BD74  C2                 	db	low STR_20
   181  00BD75  FF                 	db	high STR_20
   182  00BD76  BD                 	db	low STR_21
   183  00BD77  FF                 	db	high STR_21
   184  00BD78  C7                 	db	low STR_22
   185  00BD79  FF                 	db	high STR_22
   186  00BD7A  D1                 	db	low STR_23
   187  00BD7B  FF                 	db	high STR_23
   188  00BD7C  CC                 	db	low STR_24
   189  00BD7D  FF                 	db	high STR_24
   190                           
   191                           	psect	mediumconst
   192  00FCBA                     __pmediumconst:
   193                           	opt stack 0
   194  00FCBA  00                 	db	0
   195  00FCBB                     _keys:
   196                           	opt stack 0
   197  00FCBB  31                 	db	49
   198  00FCBC  32                 	db	50
   199  00FCBD  33                 	db	51
   200  00FCBE  41                 	db	65
   201  00FCBF  34                 	db	52
   202  00FCC0  35                 	db	53
   203  00FCC1  36                 	db	54
   204  00FCC2  42                 	db	66
   205  00FCC3  37                 	db	55
   206  00FCC4  38                 	db	56
   207  00FCC5  39                 	db	57
   208  00FCC6  43                 	db	67
   209  00FCC7  2A                 	db	42
   210  00FCC8  30                 	db	48
   211  00FCC9  23                 	db	35
   212  00FCCA  44                 	db	68
   213  00FCCB  00                 	db	0
   214  00FCCC                     __end_of_keys:
   215                           	opt stack 0
   216  00FCCC                     _input:
   217                           	opt stack 0
   218  00FCCC  31                 	db	49
   219  00FCCD  32                 	db	50
   220  00FCCE  33                 	db	51
   221  00FCCF  52                 	db	82
   222  00FCD0  34                 	db	52
   223  00FCD1  35                 	db	53
   224  00FCD2  36                 	db	54
   225  00FCD3  46                 	db	70
   226  00FCD4  37                 	db	55
   227  00FCD5  38                 	db	56
   228  00FCD6  39                 	db	57
   229  00FCD7  4C                 	db	76
   230  00FCD8  2A                 	db	42
   231  00FCD9  30                 	db	48
   232  00FCDA  23                 	db	35
   233  00FCDB  44                 	db	68
   234  00FCDC  00                 	db	0
   235  00FCDD                     __end_of_input:
   236                           	opt stack 0
   237  00FCDD                     _dpowers:
   238                           	opt stack 0
   239  00FCDD  0001               	dw	1
   240  00FCDF  000A               	dw	10
   241  00FCE1  0064               	dw	100
   242  00FCE3  03E8               	dw	1000
   243  00FCE5  2710               	dw	10000
   244  00FCE7                     __end_of_dpowers:
   245                           	opt stack 0
   246  00FCE7                     _hexpowers:
   247                           	opt stack 0
   248  00FCE7  0001               	dw	1
   249  00FCE9  0010               	dw	16
   250  00FCEB  0100               	dw	256
   251  00FCED  1000               	dw	4096
   252  00FCEF                     __end_of_hexpowers:
   253                           	opt stack 0
   254  00FCEF                     _happynewyear:
   255                           	opt stack 0
   256  00FCEF  00                 	db	0
   257  00FCF0  28                 	db	40
   258  00FCF1  00                 	db	0
   259  00FCF2  06                 	db	6
   260  00FCF3  24                 	db	36
   261  00FCF4  02                 	db	2
   262  00FCF5  18                 	db	24
   263  00FCF6                     __end_of_happynewyear:
   264                           	opt stack 0
   265  00FCF6                     _LCD_LEFT:
   266                           	opt stack 0
   267  00FCF6  00                 	db	0
   268  00FCF7                     __end_of_LCD_LEFT:
   269                           	opt stack 0
   270  00FCF7                     _LCD_RIGHT:
   271                           	opt stack 0
   272  00FCF7  01                 	db	1
   273  00FCF8                     __end_of_LCD_RIGHT:
   274                           	opt stack 0
   275  00FCF8                     _LCD_SIZE_VERT:
   276                           	opt stack 0
   277  00FCF8  02                 	db	2
   278  00FCF9                     __end_of_LCD_SIZE_VERT:
   279                           	opt stack 0
   280  00FCF9                     _LCD_SIZE_HORZ:
   281                           	opt stack 0
   282  00FCF9  10                 	db	16
   283  00FCFA                     __end_of_LCD_SIZE_HORZ:
   284                           	opt stack 0
   285  00FCFA                     _LCD_VERT_LIMIT:
   286                           	opt stack 0
   287  00FCFA  02                 	db	2
   288  00FCFB                     __end_of_LCD_VERT_LIMIT:
   289                           	opt stack 0
   290  00FCFB                     _LCD_HORZ_LIMIT:
   291                           	opt stack 0
   292  00FCFB  28                 	db	40
   293  00FCFC                     __end_of_LCD_HORZ_LIMIT:
   294                           	opt stack 0
   295  0000                     _LATDbits	set	3980
   296  0000                     _SPBRG	set	4015
   297  0000                     _RCREG	set	4014
   298  0000                     _RCSTAbits	set	4011
   299  0000                     _TXREG	set	4013
   300  0000                     _TXSTAbits	set	4012
   301  0000                     _ADRESL	set	4035
   302  0000                     _ADRESH	set	4036
   303  0000                     _ADCON0bits	set	4034
   304  0000                     _SSPBUF	set	4041
   305  0000                     _SSPCON2bits	set	4037
   306  0000                     _SSPADD	set	4040
   307  0000                     _SSPCON2	set	4037
   308  0000                     _SSPCON1	set	4038
   309  0000                     _SSPSTAT	set	4039
   310  0000                     _SSPCON1bits	set	4038
   311  0000                     _EECON2	set	4007
   312  0000                     _INTCONbits	set	4082
   313  0000                     _EEDATA	set	4008
   314  0000                     _EEADR	set	4009
   315  0000                     _EECON1bits	set	4006
   316  0000                     _PORTB	set	3969
   317  0000                     _PORTBbits	set	3969
   318  0000                     _LATCbits	set	3979
   319  0000                     _TRISCbits	set	3988
   320  0000                     _ADCON1	set	4033
   321  0000                     _ADCON0	set	4034
   322  0000                     _TRISE	set	3990
   323  0000                     _TRISD	set	3989
   324  0000                     _TRISC	set	3988
   325  0000                     _TRISB	set	3987
   326  0000                     _TRISA	set	3986
   327  0000                     _LATE	set	3981
   328  0000                     _LATD	set	3980
   329  0000                     _LATC	set	3979
   330  0000                     _LATB	set	3978
   331  0000                     _LATA	set	3977
   332  0000                     _TRISC7	set	31911
   333  0000                     _TRISC6	set	31910
   334  0000                     _RCIE	set	31981
   335  0000                     _RCIF	set	31989
   336  0000                     _TXIE	set	31980
   337  0000                     _TRMT	set	32097
   338  0000                     _TXIF	set	31988
   339  0000                     _ADON	set	32272
   340  00FCFC                     STR_60:
   341  00FCFC  52                 	db	82	;'R'
   342  00FCFD  65                 	db	101	;'e'
   343  00FCFE  6D                 	db	109	;'m'
   344  00FCFF  61                 	db	97	;'a'
   345  00FD00  69                 	db	105	;'i'
   346  00FD01  6E                 	db	110	;'n'
   347  00FD02  69                 	db	105	;'i'
   348  00FD03  6E                 	db	110	;'n'
   349  00FD04  67                 	db	103	;'g'
   350  00FD05  20                 	db	32
   351  00FD06  70                 	db	112	;'p'
   352  00FD07  69                 	db	105	;'i'
   353  00FD08  65                 	db	101	;'e'
   354  00FD09  63                 	db	99	;'c'
   355  00FD0A  65                 	db	101	;'e'
   356  00FD0B  73                 	db	115	;'s'
   357  00FD0C  3A                 	db	58	;':'
   358  00FD0D  00                 	db	0
   359  00FD0E                     STR_108:
   360  00FD0E  30                 	db	48	;'0'
   361  00FD0F  31                 	db	49	;'1'
   362  00FD10  32                 	db	50	;'2'
   363  00FD11  33                 	db	51	;'3'
   364  00FD12  34                 	db	52	;'4'
   365  00FD13  35                 	db	53	;'5'
   366  00FD14  36                 	db	54	;'6'
   367  00FD15  37                 	db	55	;'7'
   368  00FD16  38                 	db	56	;'8'
   369  00FD17  39                 	db	57	;'9'
   370  00FD18  61                 	db	97	;'a'
   371  00FD19  62                 	db	98	;'b'
   372  00FD1A  63                 	db	99	;'c'
   373  00FD1B  64                 	db	100	;'d'
   374  00FD1C  65                 	db	101	;'e'
   375  00FD1D  66                 	db	102	;'f'
   376  00FD1E  00                 	db	0
   377  00FD1F                     STR_91:
   378  00FD1F  64                 	db	100	;'d'
   379  00FD20  72                 	db	114	;'r'
   380  00FD21  61                 	db	97	;'a'
   381  00FD22  77                 	db	119	;'w'
   382  00FD23  65                 	db	101	;'e'
   383  00FD24  72                 	db	114	;'r'
   384  00FD25  73                 	db	115	;'s'
   385  00FD26  20                 	db	32
   386  00FD27  72                 	db	114	;'r'
   387  00FD28  65                 	db	101	;'e'
   388  00FD29  61                 	db	97	;'a'
   389  00FD2A  63                 	db	99	;'c'
   390  00FD2B  68                 	db	104	;'h'
   391  00FD2C  65                 	db	101	;'e'
   392  00FD2D  64                 	db	100	;'d'
   393  00FD2E  21                 	db	33
   394  00FD2F  00                 	db	0
   395  00FD30                     STR_79:
   396  00FD30  62                 	db	98	;'b'
   397  00FD31  65                 	db	101	;'e'
   398  00FD32  67                 	db	103	;'g'
   399  00FD33  69                 	db	105	;'i'
   400  00FD34  6E                 	db	110	;'n'
   401  00FD35  20                 	db	32
   402  00FD36  6F                 	db	111	;'o'
   403  00FD37  70                 	db	112	;'p'
   404  00FD38  65                 	db	101	;'e'
   405  00FD39  72                 	db	114	;'r'
   406  00FD3A  61                 	db	97	;'a'
   407  00FD3B  74                 	db	116	;'t'
   408  00FD3C  69                 	db	105	;'i'
   409  00FD3D  6F                 	db	111	;'o'
   410  00FD3E  6E                 	db	110	;'n'
   411  00FD3F  2E                 	db	46
   412  00FD40  00                 	db	0
   413  00FD41                     STR_46:
   414  00FD41  50                 	db	80	;'P'
   415  00FD42  6C                 	db	108	;'l'
   416  00FD43  65                 	db	101	;'e'
   417  00FD44  61                 	db	97	;'a'
   418  00FD45  73                 	db	115	;'s'
   419  00FD46  65                 	db	101	;'e'
   420  00FD47  20                 	db	32
   421  00FD48  69                 	db	105	;'i'
   422  00FD49  6E                 	db	110	;'n'
   423  00FD4A  70                 	db	112	;'p'
   424  00FD4B  75                 	db	117	;'u'
   425  00FD4C  74                 	db	116	;'t'
   426  00FD4D  20                 	db	32
   427  00FD4E  6C                 	db	108	;'l'
   428  00FD4F  6F                 	db	111	;'o'
   429  00FD50  67                 	db	103	;'g'
   430  00FD51  00                 	db	0
   431  00FD52                     STR_61:
   432  00FD52  52                 	db	82	;'R'
   433  00FD53  3A                 	db	58	;':'
   434  00FD54  25                 	db	37
   435  00FD55  69                 	db	105	;'i'
   436  00FD56  20                 	db	32
   437  00FD57  20                 	db	32
   438  00FD58  46                 	db	70	;'F'
   439  00FD59  3A                 	db	58	;':'
   440  00FD5A  25                 	db	37
   441  00FD5B  69                 	db	105	;'i'
   442  00FD5C  20                 	db	32
   443  00FD5D  20                 	db	32
   444  00FD5E  4C                 	db	76	;'L'
   445  00FD5F  3A                 	db	58	;':'
   446  00FD60  25                 	db	37
   447  00FD61  69                 	db	105	;'i'
   448  00FD62  00                 	db	0
   449  00FD63                     STR_42:
   450  00FD63  50                 	db	80	;'P'
   451  00FD64  72                 	db	114	;'r'
   452  00FD65  65                 	db	101	;'e'
   453  00FD66  73                 	db	115	;'s'
   454  00FD67  73                 	db	115	;'s'
   455  00FD68  20                 	db	32
   456  00FD69  61                 	db	97	;'a'
   457  00FD6A  6E                 	db	110	;'n'
   458  00FD6B  79                 	db	121	;'y'
   459  00FD6C  20                 	db	32
   460  00FD6D  6B                 	db	107	;'k'
   461  00FD6E  65                 	db	101	;'e'
   462  00FD6F  79                 	db	121	;'y'
   463  00FD70  20                 	db	32
   464  00FD71  74                 	db	116	;'t'
   465  00FD72  6F                 	db	111	;'o'
   466  00FD73  00                 	db	0
   467  00FD74                     STR_44:
   468  00FD74  25                 	db	37
   469  00FD75  69                 	db	105	;'i'
   470  00FD76  20                 	db	32
   471  00FD77  70                 	db	112	;'p'
   472  00FD78  72                 	db	114	;'r'
   473  00FD79  65                 	db	101	;'e'
   474  00FD7A  76                 	db	118	;'v'
   475  00FD7B  69                 	db	105	;'i'
   476  00FD7C  6F                 	db	111	;'o'
   477  00FD7D  75                 	db	117	;'u'
   478  00FD7E  73                 	db	115	;'s'
   479  00FD7F  20                 	db	32
   480  00FD80  6C                 	db	108	;'l'
   481  00FD81  6F                 	db	111	;'o'
   482  00FD82  67                 	db	103	;'g'
   483  00FD83  73                 	db	115	;'s'
   484  00FD84  00                 	db	0
   485  00FD85                     STR_81:
   486  00FD85  63                 	db	99	;'c'
   487  00FD86  61                 	db	97	;'a'
   488  00FD87  62                 	db	98	;'b'
   489  00FD88  69                 	db	105	;'i'
   490  00FD89  6E                 	db	110	;'n'
   491  00FD8A  65                 	db	101	;'e'
   492  00FD8B  74                 	db	116	;'t'
   493  00FD8C  20                 	db	32
   494  00FD8D  73                 	db	115	;'s'
   495  00FD8E  6F                 	db	111	;'o'
   496  00FD8F  72                 	db	114	;'r'
   497  00FD90  74                 	db	116	;'t'
   498  00FD91  65                 	db	101	;'e'
   499  00FD92  72                 	db	114	;'r'
   500  00FD93  21                 	db	33
   501  00FD94  00                 	db	0
   502  00FD95                     STR_95:
   503  00FD95  6E                 	db	110	;'n'
   504  00FD96  75                 	db	117	;'u'
   505  00FD97  6D                 	db	109	;'m'
   506  00FD98  62                 	db	98	;'b'
   507  00FD99  65                 	db	101	;'e'
   508  00FD9A  72                 	db	114	;'r'
   509  00FD9B  20                 	db	32
   510  00FD9C  70                 	db	112	;'p'
   511  00FD9D  72                 	db	114	;'r'
   512  00FD9E  65                 	db	101	;'e'
   513  00FD9F  73                 	db	115	;'s'
   514  00FDA0  73                 	db	115	;'s'
   515  00FDA1  65                 	db	101	;'e'
   516  00FDA2  64                 	db	100	;'d'
   517  00FDA3  2E                 	db	46
   518  00FDA4  00                 	db	0
   519  00FDA5                     STR_67:
   520  00FDA5  44                 	db	68	;'D'
   521  00FDA6  72                 	db	114	;'r'
   522  00FDA7  61                 	db	97	;'a'
   523  00FDA8  77                 	db	119	;'w'
   524  00FDA9  65                 	db	101	;'e'
   525  00FDAA  72                 	db	114	;'r'
   526  00FDAB  20                 	db	32
   527  00FDAC  25                 	db	37
   528  00FDAD  69                 	db	105	;'i'
   529  00FDAE  20                 	db	32
   530  00FDAF  66                 	db	102	;'f'
   531  00FDB0  6F                 	db	111	;'o'
   532  00FDB1  6F                 	db	111	;'o'
   533  00FDB2  64                 	db	100	;'d'
   534  00FDB3  3A                 	db	58	;':'
   535  00FDB4  00                 	db	0
   536  00FDB5                     STR_53:
   537  00FDB5  4F                 	db	79	;'O'
   538  00FDB6  70                 	db	112	;'p'
   539  00FDB7  65                 	db	101	;'e'
   540  00FDB8  72                 	db	114	;'r'
   541  00FDB9  61                 	db	97	;'a'
   542  00FDBA  74                 	db	116	;'t'
   543  00FDBB  69                 	db	105	;'i'
   544  00FDBC  6F                 	db	111	;'o'
   545  00FDBD  6E                 	db	110	;'n'
   546  00FDBE  20                 	db	32
   547  00FDBF  74                 	db	116	;'t'
   548  00FDC0  69                 	db	105	;'i'
   549  00FDC1  6D                 	db	109	;'m'
   550  00FDC2  65                 	db	101	;'e'
   551  00FDC3  3A                 	db	58	;':'
   552  00FDC4  00                 	db	0
   553  00FDC5                     STR_55:
   554  00FDC5  4D                 	db	77	;'M'
   555  00FDC6  61                 	db	97	;'a'
   556  00FDC7  72                 	db	114	;'r'
   557  00FDC8  6B                 	db	107	;'k'
   558  00FDC9  65                 	db	101	;'e'
   559  00FDCA  64                 	db	100	;'d'
   560  00FDCB  20                 	db	32
   561  00FDCC  64                 	db	100	;'d'
   562  00FDCD  72                 	db	114	;'r'
   563  00FDCE  61                 	db	97	;'a'
   564  00FDCF  77                 	db	119	;'w'
   565  00FDD0  65                 	db	101	;'e'
   566  00FDD1  72                 	db	114	;'r'
   567  00FDD2  73                 	db	115	;'s'
   568  00FDD3  3A                 	db	58	;':'
   569  00FDD4  00                 	db	0
   570  00FDD5                     STR_71:
   571  00FDD5  44                 	db	68	;'D'
   572  00FDD6  72                 	db	114	;'r'
   573  00FDD7  61                 	db	97	;'a'
   574  00FDD8  77                 	db	119	;'w'
   575  00FDD9  65                 	db	101	;'e'
   576  00FDDA  72                 	db	114	;'r'
   577  00FDDB  20                 	db	32
   578  00FDDC  25                 	db	37
   579  00FDDD  69                 	db	105	;'i'
   580  00FDDE  20                 	db	32
   581  00FDDF  64                 	db	100	;'d'
   582  00FDE0  69                 	db	105	;'i'
   583  00FDE1  65                 	db	101	;'e'
   584  00FDE2  74                 	db	116	;'t'
   585  00FDE3  3A                 	db	58	;':'
   586  00FDE4  00                 	db	0
   587  00FDE5                     STR_92:
   588  00FDE5  41                 	db	65	;'A'
   589  00FDE6  6E                 	db	110	;'n'
   590  00FDE7  6F                 	db	111	;'o'
   591  00FDE8  74                 	db	116	;'t'
   592  00FDE9  68                 	db	104	;'h'
   593  00FDEA  65                 	db	101	;'e'
   594  00FDEB  72                 	db	114	;'r'
   595  00FDEC  20                 	db	32
   596  00FDED  64                 	db	100	;'d'
   597  00FDEE  72                 	db	114	;'r'
   598  00FDEF  61                 	db	97	;'a'
   599  00FDF0  77                 	db	119	;'w'
   600  00FDF1  65                 	db	101	;'e'
   601  00FDF2  72                 	db	114	;'r'
   602  00FDF3  3F                 	db	63	;'?'
   603  00FDF4  00                 	db	0
   604  00FDF5                     STR_80:
   605  00FDF5  57                 	db	87	;'W'
   606  00FDF6  65                 	db	101	;'e'
   607  00FDF7  6C                 	db	108	;'l'
   608  00FDF8  63                 	db	99	;'c'
   609  00FDF9  6F                 	db	111	;'o'
   610  00FDFA  6D                 	db	109	;'m'
   611  00FDFB  65                 	db	101	;'e'
   612  00FDFC  20                 	db	32
   613  00FDFD  74                 	db	116	;'t'
   614  00FDFE  6F                 	db	111	;'o'
   615  00FDFF  20                 	db	32
   616  00FE00  79                 	db	121	;'y'
   617  00FE01  6F                 	db	111	;'o'
   618  00FE02  75                 	db	117	;'u'
   619  00FE03  72                 	db	114	;'r'
   620  00FE04  00                 	db	0
   621  00FE05                     STR_66:
   622  00FE05  23                 	db	35
   623  00FE06  20                 	db	32
   624  00FE07  3D                 	db	61	;'='
   625  00FE08  20                 	db	32
   626  00FE09  4E                 	db	78	;'N'
   627  00FE0A  6F                 	db	111	;'o'
   628  00FE0B  2C                 	db	44
   629  00FE0C  20                 	db	32
   630  00FE0D  44                 	db	68	;'D'
   631  00FE0E  20                 	db	32
   632  00FE0F  3D                 	db	61	;'='
   633  00FE10  20                 	db	32
   634  00FE11  59                 	db	89	;'Y'
   635  00FE12  65                 	db	101	;'e'
   636  00FE13  73                 	db	115	;'s'
   637  00FE14  00                 	db	0
   638  00FE15                     STR_2:
   639  00FE15  43                 	db	67	;'C'
   640  00FE16  6C                 	db	108	;'l'
   641  00FE17  65                 	db	101	;'e'
   642  00FE18  61                 	db	97	;'a'
   643  00FE19  72                 	db	114	;'r'
   644  00FE1A  69                 	db	105	;'i'
   645  00FE1B  6E                 	db	110	;'n'
   646  00FE1C  67                 	db	103	;'g'
   647  00FE1D  20                 	db	32
   648  00FE1E  45                 	db	69	;'E'
   649  00FE1F  45                 	db	69	;'E'
   650  00FE20  50                 	db	80	;'P'
   651  00FE21  52                 	db	82	;'R'
   652  00FE22  4F                 	db	79	;'O'
   653  00FE23  4D                 	db	77	;'M'
   654  00FE24  00                 	db	0
   655  00FE25                     STR_75:
   656  00FE25  44                 	db	68	;'D'
   657  00FE26  72                 	db	114	;'r'
   658  00FE27  61                 	db	97	;'a'
   659  00FE28  77                 	db	119	;'w'
   660  00FE29  65                 	db	101	;'e'
   661  00FE2A  72                 	db	114	;'r'
   662  00FE2B  20                 	db	32
   663  00FE2C  6E                 	db	110	;'n'
   664  00FE2D  75                 	db	117	;'u'
   665  00FE2E  6D                 	db	109	;'m'
   666  00FE2F  62                 	db	98	;'b'
   667  00FE30  65                 	db	101	;'e'
   668  00FE31  72                 	db	114	;'r'
   669  00FE32  3A                 	db	58	;':'
   670  00FE33  00                 	db	0
   671  00FE34                     STR_62:
   672  00FE34  49                 	db	73	;'I'
   673  00FE35  6E                 	db	110	;'n'
   674  00FE36  70                 	db	112	;'p'
   675  00FE37  75                 	db	117	;'u'
   676  00FE38  74                 	db	116	;'t'
   677  00FE39  20                 	db	32
   678  00FE3A  53                 	db	83	;'S'
   679  00FE3B  75                 	db	117	;'u'
   680  00FE3C  6D                 	db	109	;'m'
   681  00FE3D  6D                 	db	109	;'m'
   682  00FE3E  61                 	db	97	;'a'
   683  00FE3F  72                 	db	114	;'r'
   684  00FE40  79                 	db	121	;'y'
   685  00FE41  3A                 	db	58	;':'
   686  00FE42  00                 	db	0
   687  00FE43                     STR_40:
   688  00FE43  31                 	db	49	;'1'
   689  00FE44  20                 	db	32
   690  00FE45  70                 	db	112	;'p'
   691  00FE46  72                 	db	114	;'r'
   692  00FE47  65                 	db	101	;'e'
   693  00FE48  76                 	db	118	;'v'
   694  00FE49  69                 	db	105	;'i'
   695  00FE4A  6F                 	db	111	;'o'
   696  00FE4B  75                 	db	117	;'u'
   697  00FE4C  73                 	db	115	;'s'
   698  00FE4D  20                 	db	32
   699  00FE4E  6C                 	db	108	;'l'
   700  00FE4F  6F                 	db	111	;'o'
   701  00FE50  67                 	db	103	;'g'
   702  00FE51  00                 	db	0
   703  00FE52                     STR_59:
   704  00FE52  25                 	db	37
   705  00FE53  69                 	db	105	;'i'
   706  00FE54  2C                 	db	44
   707  00FE55  20                 	db	32
   708  00FE56  25                 	db	37
   709  00FE57  69                 	db	105	;'i'
   710  00FE58  2C                 	db	44
   711  00FE59  20                 	db	32
   712  00FE5A  25                 	db	37
   713  00FE5B  69                 	db	105	;'i'
   714  00FE5C  2C                 	db	44
   715  00FE5D  20                 	db	32
   716  00FE5E  25                 	db	37
   717  00FE5F  69                 	db	105	;'i'
   718  00FE60  00                 	db	0
   719  00FE61                     STR_52:
   720  00FE61  25                 	db	37
   721  00FE62  30                 	db	48	;'0'
   722  00FE63  32                 	db	50	;'2'
   723  00FE64  69                 	db	105	;'i'
   724  00FE65  2F                 	db	47
   725  00FE66  25                 	db	37
   726  00FE67  30                 	db	48	;'0'
   727  00FE68  32                 	db	50	;'2'
   728  00FE69  69                 	db	105	;'i'
   729  00FE6A  2F                 	db	47
   730  00FE6B  25                 	db	37
   731  00FE6C  30                 	db	48	;'0'
   732  00FE6D  32                 	db	50	;'2'
   733  00FE6E  69                 	db	105	;'i'
   734  00FE6F  00                 	db	0
   735  00FE70                     STR_84:
   736  00FE70  25                 	db	37
   737  00FE71  30                 	db	48	;'0'
   738  00FE72  32                 	db	50	;'2'
   739  00FE73  78                 	db	120	;'x'
   740  00FE74  2F                 	db	47
   741  00FE75  25                 	db	37
   742  00FE76  30                 	db	48	;'0'
   743  00FE77  32                 	db	50	;'2'
   744  00FE78  78                 	db	120	;'x'
   745  00FE79  2F                 	db	47
   746  00FE7A  25                 	db	37
   747  00FE7B  30                 	db	48	;'0'
   748  00FE7C  32                 	db	50	;'2'
   749  00FE7D  78                 	db	120	;'x'
   750  00FE7E  00                 	db	0
   751  00FE7F                     STR_85:
   752  00FE7F  25                 	db	37
   753  00FE80  30                 	db	48	;'0'
   754  00FE81  32                 	db	50	;'2'
   755  00FE82  78                 	db	120	;'x'
   756  00FE83  3A                 	db	58	;':'
   757  00FE84  25                 	db	37
   758  00FE85  30                 	db	48	;'0'
   759  00FE86  32                 	db	50	;'2'
   760  00FE87  78                 	db	120	;'x'
   761  00FE88  3A                 	db	58	;':'
   762  00FE89  25                 	db	37
   763  00FE8A  30                 	db	48	;'0'
   764  00FE8B  32                 	db	50	;'2'
   765  00FE8C  78                 	db	120	;'x'
   766  00FE8D  00                 	db	0
   767  00FE8E                     STR_96:
   768  00FE8E  44                 	db	68	;'D'
   769  00FE8F  72                 	db	114	;'r'
   770  00FE90  61                 	db	97	;'a'
   771  00FE91  77                 	db	119	;'w'
   772  00FE92  65                 	db	101	;'e'
   773  00FE93  72                 	db	114	;'r'
   774  00FE94  20                 	db	32
   775  00FE95  61                 	db	97	;'a'
   776  00FE96  6C                 	db	108	;'l'
   777  00FE97  72                 	db	114	;'r'
   778  00FE98  65                 	db	101	;'e'
   779  00FE99  61                 	db	97	;'a'
   780  00FE9A  64                 	db	100	;'d'
   781  00FE9B  79                 	db	121	;'y'
   782  00FE9C  00                 	db	0
   783  00FE9D                     STR_69:
   784  00FE9D  49                 	db	73	;'I'
   785  00FE9E  6E                 	db	110	;'n'
   786  00FE9F  76                 	db	118	;'v'
   787  00FEA0  61                 	db	97	;'a'
   788  00FEA1  6C                 	db	108	;'l'
   789  00FEA2  69                 	db	105	;'i'
   790  00FEA3  64                 	db	100	;'d'
   791  00FEA4  20                 	db	32
   792  00FEA5  66                 	db	102	;'f'
   793  00FEA6  6F                 	db	111	;'o'
   794  00FEA7  6F                 	db	111	;'o'
   795  00FEA8  64                 	db	100	;'d'
   796  00FEA9  21                 	db	33
   797  00FEAA  00                 	db	0
   798  00FEAB                     STR_73:
   799  00FEAB  49                 	db	73	;'I'
   800  00FEAC  6E                 	db	110	;'n'
   801  00FEAD  76                 	db	118	;'v'
   802  00FEAE  61                 	db	97	;'a'
   803  00FEAF  6C                 	db	108	;'l'
   804  00FEB0  69                 	db	105	;'i'
   805  00FEB1  64                 	db	100	;'d'
   806  00FEB2  20                 	db	32
   807  00FEB3  64                 	db	100	;'d'
   808  00FEB4  69                 	db	105	;'i'
   809  00FEB5  65                 	db	101	;'e'
   810  00FEB6  74                 	db	116	;'t'
   811  00FEB7  21                 	db	33
   812  00FEB8  00                 	db	0
   813  00FEB9                     STR_43:
   814  00FEB9  6D                 	db	109	;'m'
   815  00FEBA  6F                 	db	111	;'o'
   816  00FEBB  76                 	db	118	;'v'
   817  00FEBC  65                 	db	101	;'e'
   818  00FEBD  20                 	db	32
   819  00FEBE  66                 	db	102	;'f'
   820  00FEBF  6F                 	db	111	;'o'
   821  00FEC0  72                 	db	114	;'r'
   822  00FEC1  77                 	db	119	;'w'
   823  00FEC2  61                 	db	97	;'a'
   824  00FEC3  72                 	db	114	;'r'
   825  00FEC4  64                 	db	100	;'d'
   826  00FEC5  2E                 	db	46
   827  00FEC6  00                 	db	0
   828  00FEC7                     STR_88:
   829  00FEC7  6F                 	db	111	;'o'
   830  00FEC8  72                 	db	114	;'r'
   831  00FEC9  20                 	db	32
   832  00FECA  70                 	db	112	;'p'
   833  00FECB  72                 	db	114	;'r'
   834  00FECC  65                 	db	101	;'e'
   835  00FECD  73                 	db	115	;'s'
   836  00FECE  73                 	db	115	;'s'
   837  00FECF  20                 	db	32
   838  00FED0  44                 	db	68	;'D'
   839  00FED1  20                 	db	32
   840  00FED2  74                 	db	116	;'t'
   841  00FED3  6F                 	db	111	;'o'
   842  00FED4  00                 	db	0
   843  00FED5                     STR_103:
   844  00FED5  49                 	db	73	;'I'
   845  00FED6  6E                 	db	110	;'n'
   846  00FED7  76                 	db	118	;'v'
   847  00FED8  61                 	db	97	;'a'
   848  00FED9  6C                 	db	108	;'l'
   849  00FEDA  69                 	db	105	;'i'
   850  00FEDB  64                 	db	100	;'d'
   851  00FEDC  20                 	db	32
   852  00FEDD  6B                 	db	107	;'k'
   853  00FEDE  65                 	db	101	;'e'
   854  00FEDF  79                 	db	121	;'y'
   855  00FEE0  21                 	db	33
   856  00FEE1  00                 	db	0
   857  00FEE2                     STR_90:
   858  00FEE2  4D                 	db	77	;'M'
   859  00FEE3  61                 	db	97	;'a'
   860  00FEE4  78                 	db	120	;'x'
   861  00FEE5  69                 	db	105	;'i'
   862  00FEE6  6D                 	db	109	;'m'
   863  00FEE7  75                 	db	117	;'u'
   864  00FEE8  6D                 	db	109	;'m'
   865  00FEE9  20                 	db	32
   866  00FEEA  6F                 	db	111	;'o'
   867  00FEEB  66                 	db	102	;'f'
   868  00FEEC  20                 	db	32
   869  00FEED  38                 	db	56	;'8'
   870  00FEEE  00                 	db	0
   871  00FEEF                     STR_65:
   872  00FEEF  41                 	db	65	;'A'
   873  00FEF0  6E                 	db	110	;'n'
   874  00FEF1  6F                 	db	111	;'o'
   875  00FEF2  74                 	db	116	;'t'
   876  00FEF3  68                 	db	104	;'h'
   877  00FEF4  65                 	db	101	;'e'
   878  00FEF5  72                 	db	114	;'r'
   879  00FEF6  20                 	db	32
   880  00FEF7  6C                 	db	108	;'l'
   881  00FEF8  6F                 	db	111	;'o'
   882  00FEF9  67                 	db	103	;'g'
   883  00FEFA  3F                 	db	63	;'?'
   884  00FEFB  00                 	db	0
   885  00FEFC                     STR_82:
   886  00FEFC  43                 	db	67	;'C'
   887  00FEFD  75                 	db	117	;'u'
   888  00FEFE  72                 	db	114	;'r'
   889  00FEFF  72                 	db	114	;'r'
   890  00FF00  65                 	db	101	;'e'
   891  00FF01  6E                 	db	110	;'n'
   892  00FF02  74                 	db	116	;'t'
   893  00FF03  20                 	db	32
   894  00FF04  64                 	db	100	;'d'
   895  00FF05  61                 	db	97	;'a'
   896  00FF06  74                 	db	116	;'t'
   897  00FF07  65                 	db	101	;'e'
   898  00FF08  00                 	db	0
   899  00FF09                     STR_87:
   900  00FF09  76                 	db	118	;'v'
   901  00FF0A  69                 	db	105	;'i'
   902  00FF0B  65                 	db	101	;'e'
   903  00FF0C  77                 	db	119	;'w'
   904  00FF0D  20                 	db	32
   905  00FF0E  6C                 	db	108	;'l'
   906  00FF0F  6F                 	db	111	;'o'
   907  00FF10  67                 	db	103	;'g'
   908  00FF11  73                 	db	115	;'s'
   909  00FF12  2C                 	db	44
   910  00FF13  00                 	db	0
   911  00FF14                     STR_39:
   912  00FF14  61                 	db	97	;'a'
   913  00FF15  76                 	db	118	;'v'
   914  00FF16  61                 	db	97	;'a'
   915  00FF17  69                 	db	105	;'i'
   916  00FF18  6C                 	db	108	;'l'
   917  00FF19  61                 	db	97	;'a'
   918  00FF1A  62                 	db	98	;'b'
   919  00FF1B  6C                 	db	108	;'l'
   920  00FF1C  65                 	db	101	;'e'
   921  00FF1D  2E                 	db	46
   922  00FF1E  00                 	db	0
   923  00FF1F                     STR_102:
   924  00FF1F  52                 	db	82	;'R'
   925  00FF20  65                 	db	101	;'e'
   926  00FF21  62                 	db	98	;'b'
   927  00FF22  6F                 	db	111	;'o'
   928  00FF23  6F                 	db	111	;'o'
   929  00FF24  74                 	db	116	;'t'
   930  00FF25  69                 	db	105	;'i'
   931  00FF26  6E                 	db	110	;'n'
   932  00FF27  67                 	db	103	;'g'
   933  00FF28  2E                 	db	46
   934  00FF29  00                 	db	0
   935  00FF2A                     STR_70:
   936  00FF2A  54                 	db	84	;'T'
   937  00FF2B  72                 	db	114	;'r'
   938  00FF2C  79                 	db	121	;'y'
   939  00FF2D  20                 	db	32
   940  00FF2E  61                 	db	97	;'a'
   941  00FF2F  67                 	db	103	;'g'
   942  00FF30  61                 	db	97	;'a'
   943  00FF31  69                 	db	105	;'i'
   944  00FF32  6E                 	db	110	;'n'
   945  00FF33  2E                 	db	46
   946  00FF34  00                 	db	0
   947  00FF35                     STR_63:
   948  00FF35  44                 	db	68	;'D'
   949  00FF36  72                 	db	114	;'r'
   950  00FF37  61                 	db	97	;'a'
   951  00FF38  77                 	db	119	;'w'
   952  00FF39  65                 	db	101	;'e'
   953  00FF3A  72                 	db	114	;'r'
   954  00FF3B  20                 	db	32
   955  00FF3C  25                 	db	37
   956  00FF3D  69                 	db	105	;'i'
   957  00FF3E  3A                 	db	58	;':'
   958  00FF3F  00                 	db	0
   959  00FF40                     STR_86:
   960  00FF40  50                 	db	80	;'P'
   961  00FF41  72                 	db	114	;'r'
   962  00FF42  65                 	db	101	;'e'
   963  00FF43  73                 	db	115	;'s'
   964  00FF44  73                 	db	115	;'s'
   965  00FF45  20                 	db	32
   966  00FF46  23                 	db	35
   967  00FF47  20                 	db	32
   968  00FF48  74                 	db	116	;'t'
   969  00FF49  6F                 	db	111	;'o'
   970  00FF4A  00                 	db	0
   971  00FF4B                     STR_83:
   972  00FF4B  61                 	db	97	;'a'
   973  00FF4C  6E                 	db	110	;'n'
   974  00FF4D  64                 	db	100	;'d'
   975  00FF4E  20                 	db	32
   976  00FF4F  74                 	db	116	;'t'
   977  00FF50  69                 	db	105	;'i'
   978  00FF51  6D                 	db	109	;'m'
   979  00FF52  65                 	db	101	;'e'
   980  00FF53  3A                 	db	58	;':'
   981  00FF54  00                 	db	0
   982  00FF55                     STR_94:
   983  00FF55  4E                 	db	78	;'N'
   984  00FF56  6F                 	db	111	;'o'
   985  00FF57  20                 	db	32
   986  00FF58  64                 	db	100	;'d'
   987  00FF59  72                 	db	114	;'r'
   988  00FF5A  61                 	db	97	;'a'
   989  00FF5B  77                 	db	119	;'w'
   990  00FF5C  65                 	db	101	;'e'
   991  00FF5D  72                 	db	114	;'r'
   992  00FF5E  00                 	db	0
   993  00FF5F                     STR_4:
   994  00FF5F  64                 	db	100	;'d'
   995  00FF60  72                 	db	114	;'r'
   996  00FF61  61                 	db	97	;'a'
   997  00FF62  77                 	db	119	;'w'
   998  00FF63  65                 	db	101	;'e'
   999  00FF64  72                 	db	114	;'r'
  1000  00FF65  20                 	db	32
  1001  00FF66  25                 	db	37
  1002  00FF67  69                 	db	105	;'i'
  1003  00FF68  00                 	db	0
  1004  00FF69                     STR_5:
  1005  00FF69  4D                 	db	77	;'M'
  1006  00FF6A  6F                 	db	111	;'o'
  1007  00FF6B  76                 	db	118	;'v'
  1008  00FF6C  69                 	db	105	;'i'
  1009  00FF6D  6E                 	db	110	;'n'
  1010  00FF6E  67                 	db	103	;'g'
  1011  00FF6F  20                 	db	32
  1012  00FF70  74                 	db	116	;'t'
  1013  00FF71  6F                 	db	111	;'o'
  1014  00FF72  00                 	db	0
  1015  00FF73                     STR_47:
  1016  00FF73  6E                 	db	110	;'n'
  1017  00FF74  75                 	db	117	;'u'
  1018  00FF75  6D                 	db	109	;'m'
  1019  00FF76  62                 	db	98	;'b'
  1020  00FF77  65                 	db	101	;'e'
  1021  00FF78  72                 	db	114	;'r'
  1022  00FF79  3A                 	db	58	;':'
  1023  00FF7A  20                 	db	32
  1024  00FF7B  00                 	db	0
  1025  00FF7C                     STR_97:
  1026  00FF7C  69                 	db	105	;'i'
  1027  00FF7D  6E                 	db	110	;'n'
  1028  00FF7E  20                 	db	32
  1029  00FF7F  75                 	db	117	;'u'
  1030  00FF80  73                 	db	115	;'s'
  1031  00FF81  65                 	db	101	;'e'
  1032  00FF82  21                 	db	33
  1033  00FF83  00                 	db	0
  1034  00FF84                     STR_54:
  1035  00FF84  25                 	db	37
  1036  00FF85  69                 	db	105	;'i'
  1037  00FF86  3A                 	db	58	;':'
  1038  00FF87  25                 	db	37
  1039  00FF88  30                 	db	48	;'0'
  1040  00FF89  32                 	db	50	;'2'
  1041  00FF8A  69                 	db	105	;'i'
  1042  00FF8B  00                 	db	0
  1043  00FF8C                     STR_38:
  1044  00FF8C  4E                 	db	78	;'N'
  1045  00FF8D  6F                 	db	111	;'o'
  1046  00FF8E  20                 	db	32
  1047  00FF8F  6C                 	db	108	;'l'
  1048  00FF90  6F                 	db	111	;'o'
  1049  00FF91  67                 	db	103	;'g'
  1050  00FF92  73                 	db	115	;'s'
  1051  00FF93  00                 	db	0
  1052  00FF94                     STR_3:
  1053  00FF94  46                 	db	70	;'F'
  1054  00FF95  69                 	db	105	;'i'
  1055  00FF96  6C                 	db	108	;'l'
  1056  00FF97  6C                 	db	108	;'l'
  1057  00FF98  69                 	db	105	;'i'
  1058  00FF99  6E                 	db	110	;'n'
  1059  00FF9A  67                 	db	103	;'g'
  1060  00FF9B  00                 	db	0
  1061  00FF9C                     STR_1:
  1062  00FF9C  53                 	db	83	;'S'
  1063  00FF9D  74                 	db	116	;'t'
  1064  00FF9E  61                 	db	97	;'a'
  1065  00FF9F  6E                 	db	110	;'n'
  1066  00FFA0  64                 	db	100	;'d'
  1067  00FFA1  62                 	db	98	;'b'
  1068  00FFA2  79                 	db	121	;'y'
  1069  00FFA3  00                 	db	0
  1070  00FFA4                     STR_107:
  1071  00FFA4  28                 	db	40
  1072  00FFA5  6E                 	db	110	;'n'
  1073  00FFA6  75                 	db	117	;'u'
  1074  00FFA7  6C                 	db	108	;'l'
  1075  00FFA8  6C                 	db	108	;'l'
  1076  00FFA9  29                 	db	41
  1077  00FFAA  00                 	db	0
  1078  00FFAB                     STR_48:
  1079  00FFAB  47                 	db	71	;'G'
  1080  00FFAC  72                 	db	114	;'r'
  1081  00FFAD  65                 	db	101	;'e'
  1082  00FFAE  61                 	db	97	;'a'
  1083  00FFAF  74                 	db	116	;'t'
  1084  00FFB0  21                 	db	33
  1085  00FFB1  00                 	db	0
  1086  00FFB2                     STR_51:
  1087  00FFB2  44                 	db	68	;'D'
  1088  00FFB3  61                 	db	97	;'a'
  1089  00FFB4  74                 	db	116	;'t'
  1090  00FFB5  65                 	db	101	;'e'
  1091  00FFB6  3A                 	db	58	;':'
  1092  00FFB7  00                 	db	0
  1093  00FFB8                     STR_37:
  1094  00FFB8  31                 	db	49	;'1'
  1095  00FFB9  31                 	db	49	;'1'
  1096  00FFBA  31                 	db	49	;'1'
  1097  00FFBB  31                 	db	49	;'1'
  1098  00FFBC  00                 	db	0
  1099  00FFBD                     STR_21:
  1100  00FFBD  52                 	db	82	;'R'
  1101  00FFBE  46                 	db	70	;'F'
  1102  00FFBF  46                 	db	70	;'F'
  1103  00FFC0  4C                 	db	76	;'L'
  1104  00FFC1  00                 	db	0
  1105  00FFC2                     STR_20:
  1106  00FFC2  52                 	db	82	;'R'
  1107  00FFC3  52                 	db	82	;'R'
  1108  00FFC4  46                 	db	70	;'F'
  1109  00FFC5  4C                 	db	76	;'L'
  1110  00FFC6  00                 	db	0
  1111  00FFC7                     STR_22:
  1112  00FFC7  52                 	db	82	;'R'
  1113  00FFC8  46                 	db	70	;'F'
  1114  00FFC9  4C                 	db	76	;'L'
  1115  00FFCA  4C                 	db	76	;'L'
  1116  00FFCB  00                 	db	0
  1117  00FFCC                     STR_24:
  1118  00FFCC  46                 	db	70	;'F'
  1119  00FFCD  4C                 	db	76	;'L'
  1120  00FFCE  4C                 	db	76	;'L'
  1121  00FFCF  4C                 	db	76	;'L'
  1122  00FFD0  00                 	db	0
  1123  00FFD1                     STR_23:
  1124  00FFD1  52                 	db	82	;'R'
  1125  00FFD2  4C                 	db	76	;'L'
  1126  00FFD3  4C                 	db	76	;'L'
  1127  00FFD4  4C                 	db	76	;'L'
  1128  00FFD5  00                 	db	0
  1129  00FFD6                     STR_64:
  1130  00FFD6  25                 	db	37
  1131  00FFD7  73                 	db	115	;'s'
  1132  00FFD8  25                 	db	37
  1133  00FFD9  73                 	db	115	;'s'
  1134  00FFDA  00                 	db	0
  1135  00FFDB                     STR_36:
  1136  00FFDB  32                 	db	50	;'2'
  1137  00FFDC  31                 	db	49	;'1'
  1138  00FFDD  31                 	db	49	;'1'
  1139  00FFDE  00                 	db	0
  1140  00FFDF                     STR_35:
  1141  00FFDF  31                 	db	49	;'1'
  1142  00FFE0  32                 	db	50	;'2'
  1143  00FFE1  31                 	db	49	;'1'
  1144  00FFE2  00                 	db	0
  1145  00FFE3                     STR_34:
  1146  00FFE3  31                 	db	49	;'1'
  1147  00FFE4  31                 	db	49	;'1'
  1148  00FFE5  32                 	db	50	;'2'
  1149  00FFE6  00                 	db	0
  1150  00FFE7                     STR_15:
  1151  00FFE7  52                 	db	82	;'R'
  1152  00FFE8  46                 	db	70	;'F'
  1153  00FFE9  46                 	db	70	;'F'
  1154  00FFEA  00                 	db	0
  1155  00FFEB                     STR_13:
  1156  00FFEB  52                 	db	82	;'R'
  1157  00FFEC  52                 	db	82	;'R'
  1158  00FFED  46                 	db	70	;'F'
  1159  00FFEE  00                 	db	0
  1160  00FFEF                     STR_16:
  1161  00FFEF  52                 	db	82	;'R'
  1162  00FFF0  4C                 	db	76	;'L'
  1163  00FFF1  4C                 	db	76	;'L'
  1164  00FFF2  00                 	db	0
  1165  00FFF3                     STR_14:
  1166  00FFF3  52                 	db	82	;'R'
  1167  00FFF4  52                 	db	82	;'R'
  1168  00FFF5  4C                 	db	76	;'L'
  1169  00FFF6  00                 	db	0
  1170  00FFF7                     STR_32:
  1171  00FFF7  32                 	db	50	;'2'
  1172  00FFF8  32                 	db	50	;'2'
  1173  00FFF9  00                 	db	0
  1174  00FFFA                     STR_30:
  1175  00FFFA  31                 	db	49	;'1'
  1176  00FFFB  33                 	db	51	;'3'
  1177  00FFFC  00                 	db	0
  1178  00FFFD                     STR_7:
  1179  00FFFD  52                 	db	82	;'R'
  1180  00FFFE  00                 	db	0
  1181  0000                     
  1182                           ; #config settings
  1183  00FFFF  00                 	db	0	; dummy byte at the end
  1184  0000                     
  1185                           	psect	cinit
  1186  00C106                     __pcinit:
  1187                           	opt stack 0
  1188  00C106                     start_initialization:
  1189                           	opt stack 0
  1190  00C106                     __initialization:
  1191                           	opt stack 0
  1192                           
  1193                           ; Initialize objects allocated to BANK2 (36 bytes)
  1194                           ; load TBLPTR registers with __pidataBANK2
  1195  00C106  0E5A               	movlw	low __pidataBANK2
  1196  00C108  6EF6               	movwf	tblptrl,c
  1197  00C10A  0EBD               	movlw	high __pidataBANK2
  1198  00C10C  6EF7               	movwf	tblptrh,c
  1199  00C10E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1200  00C110  6EF8               	movwf	tblptru,c
  1201  00C112  EE02  F000         	lfsr	0,__pdataBANK2
  1202  00C116  EE10 F024          	lfsr	1,36
  1203  00C11A                     copy_data0:
  1204  00C11A  0009               	tblrd		*+
  1205  00C11C  CFF5 FFEE          	movff	tablat,postinc0
  1206  00C120  50E5               	movf	postdec1,w,c
  1207  00C122  50E1               	movf	fsr1l,w,c
  1208  00C124  E1FA               	bnz	copy_data0
  1209                           
  1210                           ; Initialize objects allocated to BANK0 (26 bytes)
  1211                           ; load TBLPTR registers with __pidataBANK0
  1212  00C126  0EFE               	movlw	low __pidataBANK0
  1213  00C128  6EF6               	movwf	tblptrl,c
  1214  00C12A  0EBC               	movlw	high __pidataBANK0
  1215  00C12C  6EF7               	movwf	tblptrh,c
  1216  00C12E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1217  00C130  6EF8               	movwf	tblptru,c
  1218  00C132  EE00  F0E4         	lfsr	0,__pdataBANK0
  1219  00C136  EE10 F01A          	lfsr	1,26
  1220  00C13A                     copy_data1:
  1221  00C13A  0009               	tblrd		*+
  1222  00C13C  CFF5 FFEE          	movff	tablat,postinc0
  1223  00C140  50E5               	movf	postdec1,w,c
  1224  00C142  50E1               	movf	fsr1l,w,c
  1225  00C144  E1FA               	bnz	copy_data1
  1226                           
  1227                           ; Initialize objects allocated to COMRAM (6 bytes)
  1228                           ; load TBLPTR registers with __pidataCOMRAM
  1229  00C146  0E90               	movlw	low __pidataCOMRAM
  1230  00C148  6EF6               	movwf	tblptrl,c
  1231  00C14A  0EBC               	movlw	high __pidataCOMRAM
  1232  00C14C  6EF7               	movwf	tblptrh,c
  1233  00C14E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1234  00C150  6EF8               	movwf	tblptru,c
  1235  00C152  EE00  F074         	lfsr	0,__pdataCOMRAM
  1236  00C156  EE10 F006          	lfsr	1,6
  1237  00C15A                     copy_data2:
  1238  00C15A  0009               	tblrd		*+
  1239  00C15C  CFF5 FFEE          	movff	tablat,postinc0
  1240  00C160  50E5               	movf	postdec1,w,c
  1241  00C162  50E1               	movf	fsr1l,w,c
  1242  00C164  E1FA               	bnz	copy_data2
  1243                           
  1244                           ; Clear objects allocated to BANK1 (96 bytes)
  1245  00C166  EE01  F08A         	lfsr	0,__pbssBANK1
  1246  00C16A  0E60               	movlw	96
  1247  00C16C                     clear_0:
  1248  00C16C  6AEE               	clrf	postinc0,c
  1249  00C16E  06E8               	decf	wreg,f,c
  1250  00C170  E1FD               	bnz	clear_0
  1251                           
  1252                           ; Clear objects allocated to BANK0 (100 bytes)
  1253  00C172  EE00  F080         	lfsr	0,__pbssBANK0
  1254  00C176  0E64               	movlw	100
  1255  00C178                     clear_1:
  1256  00C178  6AEE               	clrf	postinc0,c
  1257  00C17A  06E8               	decf	wreg,f,c
  1258  00C17C  E1FD               	bnz	clear_1
  1259                           
  1260                           ; Clear objects allocated to COMRAM (12 bytes)
  1261  00C17E  EE00  F068         	lfsr	0,__pbssCOMRAM
  1262  00C182  0E0C               	movlw	12
  1263  00C184                     clear_2:
  1264  00C184  6AEE               	clrf	postinc0,c
  1265  00C186  06E8               	decf	wreg,f,c
  1266  00C188  E1FD               	bnz	clear_2
  1267  00C18A                     end_of_initialization:
  1268                           	opt stack 0
  1269  00C18A                     __end_of__initialization:
  1270                           	opt stack 0
  1271  00C18A  0100               	movlb	0
  1272  00C18C  EFE4  F061         	goto	_main	;jump to C main() function
  1273                           tblptru	equ	0xFF8
  1274                           tblptrh	equ	0xFF7
  1275                           tblptrl	equ	0xFF6
  1276                           tablat	equ	0xFF5
  1277                           postinc0	equ	0xFEE
  1278                           wreg	equ	0xFE8
  1279                           postdec1	equ	0xFE5
  1280                           fsr1l	equ	0xFE1
  1281                           
  1282                           	psect	bssCOMRAM
  1283  000068                     __pbssCOMRAM:
  1284                           	opt stack 0
  1285  000068                     food_press@F3117:
  1286                           	opt stack 0
  1287  000068                     	ds	8
  1288  000070                     _firstIteration:
  1289                           	opt stack 0
  1290  000070                     	ds	2
  1291  000072                     _LCDinterruptState:
  1292                           	opt stack 0
  1293  000072                     	ds	1
  1294  000073                     _UARTinterruptState:
  1295                           	opt stack 0
  1296  000073                     	ds	1
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postdec1	equ	0xFE5
  1304                           fsr1l	equ	0xFE1
  1305                           
  1306                           	psect	dataCOMRAM
  1307  000074                     __pdataCOMRAM:
  1308                           	opt stack 0
  1309  000074                     _UART:
  1310                           	opt stack 0
  1311  000074                     	ds	2
  1312  000076                     _columnRight:
  1313                           	opt stack 0
  1314  000076                     	ds	1
  1315  000077                     _columnLeft:
  1316                           	opt stack 0
  1317  000077                     	ds	1
  1318  000078                     _rowDown:
  1319                           	opt stack 0
  1320  000078                     	ds	1
  1321  000079                     _rowUp:
  1322                           	opt stack 0
  1323  000079                     	ds	1
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postdec1	equ	0xFE5
  1331                           fsr1l	equ	0xFE1
  1332                           
  1333                           	psect	bssBANK0
  1334  000080                     __pbssBANK0:
  1335                           	opt stack 0
  1336  000080                     _foodTable:
  1337                           	opt stack 0
  1338  000080                     	ds	16
  1339  000090                     _dietTable:
  1340                           	opt stack 0
  1341  000090                     	ds	16
  1342  0000A0                     _sortedDrawerTable:
  1343                           	opt stack 0
  1344  0000A0                     	ds	16
  1345  0000B0                     _drawerTable:
  1346                           	opt stack 0
  1347  0000B0                     	ds	16
  1348  0000C0                     diet_press@F3132:
  1349                           	opt stack 0
  1350  0000C0                     	ds	8
  1351  0000C8                     _arr_dataRX:
  1352                           	opt stack 0
  1353  0000C8                     	ds	16
  1354  0000D8                     _uart:
  1355                           	opt stack 0
  1356  0000D8                     	ds	12
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postdec1	equ	0xFE5
  1364                           fsr1l	equ	0xFE1
  1365                           
  1366                           	psect	dataBANK0
  1367  0000E4                     __pdataBANK0:
  1368                           	opt stack 0
  1369  0000E4                     _foodInputs:
  1370                           	opt stack 0
  1371  0000E4                     	ds	26
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	bssBANK1
  1382  00018A                     __pbssBANK1:
  1383                           	opt stack 0
  1384  00018A                     standbyMode@F3162:
  1385                           	opt stack 0
  1386  00018A                     	ds	16
  1387  00019A                     standbyMode@F3160:
  1388                           	opt stack 0
  1389  00019A                     	ds	16
  1390  0001AA                     standbyMode@F3158:
  1391                           	opt stack 0
  1392  0001AA                     	ds	16
  1393  0001BA                     standbyMode@F3156:
  1394                           	opt stack 0
  1395  0001BA                     	ds	16
  1396  0001CA                     standbyMode@F3154:
  1397                           	opt stack 0
  1398  0001CA                     	ds	16
  1399  0001DA                     standbyMode@F3152:
  1400                           	opt stack 0
  1401  0001DA                     	ds	16
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           fsr1l	equ	0xFE1
  1410                           
  1411                           	psect	dataBANK2
  1412  000200                     __pdataBANK2:
  1413                           	opt stack 0
  1414  000200                     _inputs:
  1415                           	opt stack 0
  1416  000200                     	ds	36
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1l	equ	0xFE1
  1425                           
  1426                           	psect	cstackBANK1
  1427  000100                     __pcstackBANK1:
  1428                           	opt stack 0
  1429  000100                     standbyMode@roundPieces:
  1430                           	opt stack 0
  1431                           
  1432                           ; 16 bytes @ 0x0
  1433  000100                     	ds	16
  1434  000110                     standbyMode@flatPieces:
  1435                           	opt stack 0
  1436                           
  1437                           ; 16 bytes @ 0x10
  1438  000110                     	ds	16
  1439  000120                     standbyMode@longPieces:
  1440                           	opt stack 0
  1441                           
  1442                           ; 16 bytes @ 0x20
  1443  000120                     	ds	16
  1444  000130                     standbyMode@dietType:
  1445                           	opt stack 0
  1446                           
  1447                           ; 16 bytes @ 0x30
  1448  000130                     	ds	16
  1449  000140                     standbyMode@foodType:
  1450                           	opt stack 0
  1451                           
  1452                           ; 16 bytes @ 0x40
  1453  000140                     	ds	16
  1454  000150                     standbyMode@drawerInformation:
  1455                           	opt stack 0
  1456                           
  1457                           ; 16 bytes @ 0x50
  1458  000150                     	ds	16
  1459  000160                     standbyMode@time:
  1460                           	opt stack 0
  1461                           
  1462                           ; 7 bytes @ 0x60
  1463  000160                     	ds	7
  1464  000167                     standbyMode@firstIteration:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x67
  1468  000167                     	ds	2
  1469  000169                     standbyMode@whichKey:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x69
  1473  000169                     	ds	2
  1474  00016B                     standbyMode@keypress:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x6B
  1478  00016B                     	ds	1
  1479  00016C                     standbyMode@round:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x6C
  1483  00016C                     	ds	2
  1484  00016E                     standbyMode@flat:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x6E
  1488  00016E                     	ds	2
  1489  000170                     standbyMode@lng:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x70
  1493  000170                     	ds	2
  1494  000172                     standbyMode@decodedDiet:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x72
  1498  000172                     	ds	2
  1499  000174                     standbyMode@storedFoodType:
  1500                           	opt stack 0
  1501                           
  1502                           ; 2 bytes @ 0x74
  1503  000174                     	ds	2
  1504  000176                     standbyMode@keypress1:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x76
  1508  000176                     	ds	1
  1509  000177                     standbyMode@validDrawer:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x77
  1513  000177                     	ds	2
  1514  000179                     standbyMode@zero:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x79
  1518  000179                     	ds	2
  1519  00017B                     standbyMode@n:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x7B
  1523  00017B                     	ds	2
  1524  00017D                     standbyMode@x:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x7D
  1528  00017D                     	ds	2
  1529  00017F                     standbyMode@logNumber:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x7F
  1533  00017F                     	ds	1
  1534  000180                     standbyMode@diet:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x80
  1538  000180                     	ds	2
  1539  000182                     standbyMode@drawer:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x82
  1543  000182                     	ds	2
  1544  000184                     standbyMode@food:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x84
  1548  000184                     	ds	2
  1549  000186                     standbyMode@drawerCount:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x86
  1553  000186                     	ds	2
  1554  000188                     standbyMode@i:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x88
  1558  000188                     	ds	2
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1l	equ	0xFE1
  1567                           
  1568                           	psect	cstackCOMRAM
  1569  000001                     __pcstackCOMRAM:
  1570                           	opt stack 0
  1571  000001                     ??_isdigit:
  1572  000001                     ??_I2C_Master_Wait:
  1573  000001                     ?_check_food:
  1574                           	opt stack 0
  1575  000001                     ?_getRound:
  1576                           	opt stack 0
  1577  000001                     ?_getFlat:
  1578                           	opt stack 0
  1579  000001                     ?_getLong:
  1580                           	opt stack 0
  1581  000001                     ?_verifyKeypress:
  1582                           	opt stack 0
  1583  000001                     ?_printFoodInput:
  1584                           	opt stack 0
  1585  000001                     ?_get_digits:
  1586                           	opt stack 0
  1587  000001                     ?_decode_diet:
  1588                           	opt stack 0
  1589  000001                     ?_decode_drawer:
  1590                           	opt stack 0
  1591  000001                     ?___wmul:
  1592                           	opt stack 0
  1593  000001                     ?___lwdiv:
  1594                           	opt stack 0
  1595  000001                     ?___aldiv:
  1596                           	opt stack 0
  1597  000001                     ?___lldiv:
  1598                           	opt stack 0
  1599  000001                     writeEEPROM@data:
  1600                           	opt stack 0
  1601  000001                     readEEPROM@address:
  1602                           	opt stack 0
  1603  000001                     lcdNibble@temp:
  1604                           	opt stack 0
  1605  000001                     check_food@sum:
  1606                           	opt stack 0
  1607  000001                     getRound@code:
  1608                           	opt stack 0
  1609  000001                     getFlat@code:
  1610                           	opt stack 0
  1611  000001                     getLong@code:
  1612                           	opt stack 0
  1613  000001                     verifyKeypress@keypress:
  1614                           	opt stack 0
  1615  000001                     printFoodInput@food:
  1616                           	opt stack 0
  1617  000001                     get_digits@sum:
  1618                           	opt stack 0
  1619  000001                     decode_diet@dietType:
  1620                           	opt stack 0
  1621  000001                     decode_drawer@drawer:
  1622                           	opt stack 0
  1623  000001                     ___wmul@multiplier:
  1624                           	opt stack 0
  1625  000001                     ___lwdiv@dividend:
  1626                           	opt stack 0
  1627  000001                     ___aldiv@dividend:
  1628                           	opt stack 0
  1629  000001                     ___lldiv@dividend:
  1630                           	opt stack 0
  1631                           
  1632                           ; 4 bytes @ 0x0
  1633  000001                     	ds	1
  1634  000002                     writeEEPROM@address:
  1635                           	opt stack 0
  1636  000002                     I2C_Master_Read@ackBit:
  1637                           	opt stack 0
  1638  000002                     lcdNibble@data:
  1639                           	opt stack 0
  1640  000002                     _isdigit$1519:
  1641                           	opt stack 0
  1642  000002                     I2C_Master_Write@byteToWrite:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x1
  1646  000002                     	ds	1
  1647  000003                     ??_shiftEEPROM:
  1648  000003                     ??_getRound:
  1649  000003                     ??_getFlat:
  1650  000003                     ??_getLong:
  1651  000003                     ??_verifyKeypress:
  1652  000003                     ??_get_digits:
  1653  000003                     ??_decode_diet:
  1654  000003                     ??_decode_drawer:
  1655  000003                     I2C_Master_Read@receivedByte:
  1656                           	opt stack 0
  1657  000003                     lcdInst@data:
  1658                           	opt stack 0
  1659  000003                     putch@data:
  1660                           	opt stack 0
  1661  000003                     isdigit@c:
  1662                           	opt stack 0
  1663  000003                     check_food@foodInput:
  1664                           	opt stack 0
  1665  000003                     initEEPROM@i:
  1666                           	opt stack 0
  1667  000003                     ___wmul@multiplicand:
  1668                           	opt stack 0
  1669  000003                     ___lwdiv@divisor:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2
  1673  000003                     	ds	1
  1674  000004                     ??_initLCD:
  1675  000004                     shiftEEPROM@temp:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x3
  1679  000004                     	ds	1
  1680  000005                     ??_check_food:
  1681  000005                     verifyKeypress@logNumber:
  1682                           	opt stack 0
  1683  000005                     sortDrawerList@temp:
  1684                           	opt stack 0
  1685  000005                     getRound@returnValue:
  1686                           	opt stack 0
  1687  000005                     getFlat@returnValue:
  1688                           	opt stack 0
  1689  000005                     getLong@returnValue:
  1690                           	opt stack 0
  1691  000005                     get_digits@count:
  1692                           	opt stack 0
  1693  000005                     decode_diet@returnValue:
  1694                           	opt stack 0
  1695  000005                     decode_drawer@returnValue:
  1696                           	opt stack 0
  1697  000005                     ___wmul@product:
  1698                           	opt stack 0
  1699  000005                     ___lwdiv@quotient:
  1700                           	opt stack 0
  1701  000005                     ___aldiv@divisor:
  1702                           	opt stack 0
  1703  000005                     ___lldiv@divisor:
  1704                           	opt stack 0
  1705                           
  1706                           ; 4 bytes @ 0x4
  1707  000005                     	ds	1
  1708  000006                     verifyKeypress@returnVal:
  1709                           	opt stack 0
  1710  000006                     shiftEEPROM@i:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x5
  1714  000006                     	ds	1
  1715  000007                     ??_getUserInputs:
  1716  000007                     ___lwdiv@counter:
  1717                           	opt stack 0
  1718  000007                     sortDrawerList@j:
  1719                           	opt stack 0
  1720  000007                     check_food@returnValue:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x6
  1724  000007                     	ds	1
  1725  000008                     ?___lwmod:
  1726                           	opt stack 0
  1727  000008                     verifyKeypress@i:
  1728                           	opt stack 0
  1729  000008                     ___lwmod@dividend:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x7
  1733  000008                     	ds	1
  1734  000009                     ___aldiv@counter:
  1735                           	opt stack 0
  1736  000009                     getUserInputs@logNumber:
  1737                           	opt stack 0
  1738  000009                     sortDrawerList@i:
  1739                           	opt stack 0
  1740  000009                     ___lldiv@quotient:
  1741                           	opt stack 0
  1742                           
  1743                           ; 4 bytes @ 0x8
  1744  000009                     	ds	1
  1745  00000A                     ___aldiv@sign:
  1746                           	opt stack 0
  1747  00000A                     ___lwmod@divisor:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x9
  1751  00000A                     	ds	1
  1752  00000B                     getUserInputs@count:
  1753                           	opt stack 0
  1754  00000B                     ___aldiv@quotient:
  1755                           	opt stack 0
  1756                           
  1757                           ; 4 bytes @ 0xA
  1758  00000B                     	ds	1
  1759  00000C                     ___lwmod@counter:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0xB
  1763  00000C                     	ds	1
  1764  00000D                     ?_printf:
  1765                           	opt stack 0
  1766  00000D                     ___lldiv@counter:
  1767                           	opt stack 0
  1768  00000D                     getUserInputs@n:
  1769                           	opt stack 0
  1770  00000D                     printf@f:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0xC
  1774  00000D                     	ds	1
  1775  00000E                     I2C_Master_Init@clockFreq:
  1776                           	opt stack 0
  1777                           
  1778                           ; 4 bytes @ 0xD
  1779  00000E                     	ds	1
  1780  00000F                     getUserInputs@data:
  1781                           	opt stack 0
  1782  00000F                     UART_Init@baud:
  1783                           	opt stack 0
  1784                           
  1785                           ; 4 bytes @ 0xE
  1786  00000F                     	ds	2
  1787  000011                     getUserInputs@i:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x10
  1791  000011                     	ds	1
  1792  000012                     ??_I2C_Master_Init:
  1793                           
  1794                           ; 1 bytes @ 0x11
  1795  000012                     	ds	1
  1796  000013                     ??_UART_Init:
  1797                           
  1798                           ; 1 bytes @ 0x12
  1799  000013                     	ds	4
  1800  000017                     ??_printf:
  1801                           
  1802                           ; 1 bytes @ 0x16
  1803  000017                     	ds	4
  1804  00001B                     printf@idx:
  1805                           	opt stack 0
  1806                           
  1807                           ; 1 bytes @ 0x1A
  1808  00001B                     	ds	1
  1809  00001C                     printf@prec:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x1B
  1813  00001C                     	ds	1
  1814  00001D                     printf@cp:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x1C
  1818  00001D                     	ds	2
  1819  00001F                     printf@ap:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x1E
  1823  00001F                     	ds	2
  1824  000021                     printf@len:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x20
  1828  000021                     	ds	2
  1829  000023                     printf@val:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x22
  1833  000023                     	ds	2
  1834  000025                     printf@flag:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x24
  1838  000025                     	ds	1
  1839  000026                     printf@width:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x25
  1843  000026                     	ds	2
  1844  000028                     printf@c:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x27
  1848  000028                     	ds	1
  1849  000029                     ??_mainOperation:
  1850  000029                     ?_displayLogs:
  1851                           	opt stack 0
  1852  000029                     ?_food_press:
  1853                           	opt stack 0
  1854  000029                     ?_diet_press:
  1855                           	opt stack 0
  1856  000029                     ?_which_drawer:
  1857                           	opt stack 0
  1858  000029                     displayLogs@logNumber:
  1859                           	opt stack 0
  1860  000029                     food_press@dietSum:
  1861                           	opt stack 0
  1862  000029                     diet_press@drawer:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x28
  1866  000029                     	ds	2
  1867  00002B                     ??_displayLogs:
  1868  00002B                     ??_diet_press:
  1869  00002B                     ??_which_drawer:
  1870  00002B                     mainOperation@nextDrawer:
  1871                           	opt stack 0
  1872  00002B                     food_press@drawer:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x2A
  1876  00002B                     	ds	1
  1877  00002C                     which_drawer@rand:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x2B
  1881  00002C                     	ds	1
  1882  00002D                     ??_food_press:
  1883  00002D                     mainOperation@currentDrawer:
  1884                           	opt stack 0
  1885  00002D                     displayLogs@year:
  1886                           	opt stack 0
  1887  00002D                     diet_press@previous:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x2C
  1891  00002D                     	ds	1
  1892  00002E                     which_drawer@sum:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x2D
  1896  00002E                     	ds	1
  1897  00002F                     mainOperation@i:
  1898                           	opt stack 0
  1899  00002F                     displayLogs@month:
  1900                           	opt stack 0
  1901  00002F                     food_press@tally:
  1902                           	opt stack 0
  1903  00002F                     diet_press@i:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x2E
  1907  00002F                     	ds	1
  1908  000030                     which_drawer@backCheck:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x2F
  1912  000030                     	ds	1
  1913  000031                     displayLogs@day:
  1914                           	opt stack 0
  1915  000031                     food_press@backCheck:
  1916                           	opt stack 0
  1917  000031                     diet_press@backCheck:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x30
  1921  000031                     	ds	1
  1922  000032                     which_drawer@count:
  1923                           	opt stack 0
  1924                           
  1925                           ; 2 bytes @ 0x31
  1926  000032                     	ds	1
  1927  000033                     displayLogs@roundPieces:
  1928                           	opt stack 0
  1929  000033                     food_press@isValid:
  1930                           	opt stack 0
  1931  000033                     diet_press@count:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x32
  1935  000033                     	ds	1
  1936  000034                     which_drawer@keypress:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x33
  1940  000034                     	ds	1
  1941  000035                     displayLogs@flatPieces:
  1942                           	opt stack 0
  1943  000035                     food_press@count:
  1944                           	opt stack 0
  1945  000035                     diet_press@sum:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x34
  1949  000035                     	ds	2
  1950  000037                     food_press@keypress:
  1951                           	opt stack 0
  1952  000037                     diet_press@keypress:
  1953                           	opt stack 0
  1954  000037                     displayLogs@longPieces:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x36
  1958  000037                     	ds	1
  1959  000038                     food_press@foodTable:
  1960                           	opt stack 0
  1961  000038                     diet_press@dietTable:
  1962                           	opt stack 0
  1963                           
  1964                           ; 8 bytes @ 0x37
  1965  000038                     	ds	1
  1966  000039                     displayLogs@minutes:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x38
  1970  000039                     	ds	2
  1971  00003B                     displayLogs@seconds:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x3A
  1975  00003B                     	ds	2
  1976  00003D                     displayLogs@dietType:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x3C
  1980  00003D                     	ds	2
  1981  00003F                     displayLogs@foodType:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x3E
  1985  00003F                     	ds	2
  1986  000041                     displayLogs@keypress3:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x40
  1990  000041                     	ds	1
  1991  000042                     displayLogs@operationTime:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x41
  1995  000042                     	ds	2
  1996  000044                     displayLogs@drawerNumber:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x43
  2000  000044                     	ds	2
  2001  000046                     displayLogs@i:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x45
  2005  000046                     	ds	2
  2006  000048                     displayLogs@markedDrawer1:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x47
  2010  000048                     	ds	2
  2011  00004A                     displayLogs@markedDrawer2:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x49
  2015  00004A                     	ds	2
  2016  00004C                     displayLogs@markedDrawer3:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x4B
  2020  00004C                     	ds	2
  2021  00004E                     displayLogs@markedDrawer4:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x4D
  2025  00004E                     	ds	2
  2026  000050                     displayLogs@n:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x4F
  2030  000050                     	ds	2
  2031  000052                     ?_viewLogs:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x51
  2035  000052                     	ds	2
  2036  000054                     ??_viewLogs:
  2037                           
  2038                           ; 1 bytes @ 0x53
  2039  000054                     	ds	2
  2040  000056                     viewLogs@checkLog:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x55
  2044  000056                     	ds	2
  2045  000058                     viewLogs@returnVal:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x57
  2049  000058                     	ds	2
  2050  00005A                     viewLogs@logView:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x59
  2054  00005A                     	ds	2
  2055  00005C                     viewLogs@logNumber:
  2056                           	opt stack 0
  2057                           
  2058                           ; 1 bytes @ 0x5B
  2059  00005C                     	ds	1
  2060  00005D                     viewLogs@keypress2:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x5C
  2064  00005D                     	ds	1
  2065  00005E                     ?_standbyMode:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x5D
  2069  00005E                     	ds	2
  2070  000060                     ??_standbyMode:
  2071                           
  2072                           ; 1 bytes @ 0x5F
  2073  000060                     	ds	2
  2074  000062                     ??_main:
  2075                           
  2076                           ; 1 bytes @ 0x61
  2077  000062                     	ds	2
  2078  000064                     main@operationMode:
  2079                           	opt stack 0
  2080                           
  2081                           ; 2 bytes @ 0x63
  2082  000064                     	ds	2
  2083  000066                     main@checkEEPROM:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x65
  2087  000066                     	ds	2
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           postdec1	equ	0xFE5
  2095                           fsr1l	equ	0xFE1
  2096                           
  2097 ;;
  2098 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2099 ;;
  2100 ;; *************** function _main *****************
  2101 ;; Defined at:
  2102 ;;		line 18 in file "main.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  checkEEPROM     2  101[COMRAM] unsigned int 
  2107 ;;  operationMod    2   99[COMRAM] unsigned int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:        6 bytes
  2122 ;; Hardware stack levels required when called:    6
  2123 ;; This function calls:
  2124 ;;		_initEEPROM
  2125 ;;		_initLCD
  2126 ;;		_lcdInst
  2127 ;;		_mainOperation
  2128 ;;		_printf
  2129 ;;		_readEEPROM
  2130 ;;		_standbyMode
  2131 ;; This function is called by:
  2132 ;;		Startup code after reset
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text0
  2137  00C3C8                     __ptext0:
  2138                           	opt stack 0
  2139  00C3C8                     _main:
  2140                           	opt stack 25
  2141                           
  2142                           ;main.c: 24: LATA = 0x00;
  2143                           
  2144                           ;incstack = 0
  2145  00C3C8  0E00               	movlw	0
  2146  00C3CA  6E89               	movwf	3977,c	;volatile
  2147                           
  2148                           ;main.c: 25: LATB = 0x00;
  2149  00C3CC  0E00               	movlw	0
  2150  00C3CE  6E8A               	movwf	3978,c	;volatile
  2151                           
  2152                           ;main.c: 26: LATC = 0x00;
  2153  00C3D0  0E00               	movlw	0
  2154  00C3D2  6E8B               	movwf	3979,c	;volatile
  2155                           
  2156                           ;main.c: 27: LATD = 0x00;
  2157  00C3D4  0E00               	movlw	0
  2158  00C3D6  6E8C               	movwf	3980,c	;volatile
  2159                           
  2160                           ;main.c: 28: LATE = 0x00;
  2161  00C3D8  0E00               	movlw	0
  2162  00C3DA  6E8D               	movwf	3981,c	;volatile
  2163                           
  2164                           ;main.c: 32: TRISA = 0xFF;
  2165  00C3DC  6892               	setf	3986,c	;volatile
  2166                           
  2167                           ;main.c: 33: TRISB = 0xFF;
  2168  00C3DE  6893               	setf	3987,c	;volatile
  2169                           
  2170                           ;main.c: 34: TRISC = 0x00;
  2171  00C3E0  0E00               	movlw	0
  2172  00C3E2  6E94               	movwf	3988,c	;volatile
  2173                           
  2174                           ;main.c: 35: TRISD = 0x00;
  2175  00C3E4  0E00               	movlw	0
  2176  00C3E6  6E95               	movwf	3989,c	;volatile
  2177                           
  2178                           ;main.c: 36: TRISE = 0x00;
  2179  00C3E8  0E00               	movlw	0
  2180  00C3EA  6E96               	movwf	3990,c	;volatile
  2181                           
  2182                           ;main.c: 39: ADCON0 = 0x00;
  2183  00C3EC  0E00               	movlw	0
  2184  00C3EE  6EC2               	movwf	4034,c	;volatile
  2185                           
  2186                           ;main.c: 40: ADCON1 = 0b00001111;
  2187  00C3F0  0E0F               	movlw	15
  2188  00C3F2  6EC1               	movwf	4033,c	;volatile
  2189                           
  2190                           ;main.c: 43: initLCD();
  2191  00C3F4  EC1B  F05F         	call	_initLCD	;wreg free
  2192                           
  2193                           ;main.c: 44: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2194  00C3F8  0E01               	movlw	1
  2195  00C3FA  EC61  F05E         	call	_lcdInst
  2196  00C3FE  0EC3               	movlw	195
  2197  00C400  6E62               	movwf	??_main& (0+255),c
  2198  00C402  0ECD               	movlw	205
  2199  00C404                     u9477:
  2200  00C404  2EE8               	decfsz	wreg,f,c
  2201  00C406  D7FE               	bra	u9477
  2202  00C408  2E62               	decfsz	??_main& (0+255),f,c
  2203  00C40A  D7FC               	bra	u9477
  2204  00C40C  F000               	nop	
  2205                           
  2206                           ;main.c: 45: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2207  00C40E  0E0C               	movlw	12
  2208  00C410  EC61  F05E         	call	_lcdInst
  2209                           
  2210                           ;main.c: 46: printf("Standby");
  2211  00C414  0E9C               	movlw	low STR_1
  2212  00C416  6E0D               	movwf	printf@f,c
  2213  00C418  0EFF               	movlw	high STR_1
  2214  00C41A  6E0E               	movwf	printf@f+1,c
  2215  00C41C  EC43  F06B         	call	_printf	;wreg free
  2216                           
  2217                           ;main.c: 50: unsigned int operationMode = 0;
  2218  00C420  0E00               	movlw	0
  2219  00C422  6E65               	movwf	main@operationMode+1,c
  2220  00C424  0E00               	movlw	0
  2221  00C426  6E64               	movwf	main@operationMode,c
  2222                           
  2223                           ;main.c: 62: unsigned int checkEEPROM = 0;
  2224  00C428  0E00               	movlw	0
  2225  00C42A  6E67               	movwf	main@checkEEPROM+1,c
  2226  00C42C  0E00               	movlw	0
  2227  00C42E  6E66               	movwf	main@checkEEPROM,c
  2228                           
  2229                           ;main.c: 64: checkEEPROM = readEEPROM(251);
  2230  00C430  0EFB               	movlw	251
  2231  00C432  EC6B  F05E         	call	_readEEPROM
  2232  00C436  6E62               	movwf	??_main& (0+255),c
  2233  00C438  5062               	movf	??_main,w,c
  2234  00C43A  6E66               	movwf	main@checkEEPROM,c
  2235  00C43C  6A67               	clrf	main@checkEEPROM+1,c
  2236                           
  2237                           ;main.c: 66: if (checkEEPROM == 255){
  2238  00C43E  2866               	incf	main@checkEEPROM,w,c
  2239  00C440  1067               	iorwf	main@checkEEPROM+1,w,c
  2240  00C442  A4D8               	btfss	status,2,c
  2241  00C444  D01F               	goto	l59
  2242                           
  2243                           ;main.c: 67: initEEPROM();
  2244  00C446  ECBF  F05E         	call	_initEEPROM	;wreg free
  2245                           
  2246                           ;main.c: 68: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2247  00C44A  0E01               	movlw	1
  2248  00C44C  EC61  F05E         	call	_lcdInst
  2249  00C450  0EC3               	movlw	195
  2250  00C452  6E62               	movwf	??_main& (0+255),c
  2251  00C454  0ECD               	movlw	205
  2252  00C456                     u9487:
  2253  00C456  2EE8               	decfsz	wreg,f,c
  2254  00C458  D7FE               	bra	u9487
  2255  00C45A  2E62               	decfsz	??_main& (0+255),f,c
  2256  00C45C  D7FC               	bra	u9487
  2257  00C45E  F000               	nop	
  2258                           
  2259                           ;main.c: 69: printf("Clearing EEPROM");
  2260  00C460  0E15               	movlw	low STR_2
  2261  00C462  6E0D               	movwf	printf@f,c
  2262  00C464  0EFE               	movlw	high STR_2
  2263  00C466  6E0E               	movwf	printf@f+1,c
  2264  00C468  EC43  F06B         	call	_printf	;wreg free
  2265                           
  2266                           ;main.c: 70: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2267  00C46C  0E66               	movlw	102
  2268  00C46E  6E63               	movwf	(??_main+1)& (0+255),c
  2269  00C470  0E76               	movlw	118
  2270  00C472  6E62               	movwf	??_main& (0+255),c
  2271  00C474  0EC1               	movlw	193
  2272  00C476                     u9497:
  2273  00C476  2EE8               	decfsz	wreg,f,c
  2274  00C478  D7FE               	bra	u9497
  2275  00C47A  2E62               	decfsz	??_main& (0+255),f,c
  2276  00C47C  D7FC               	bra	u9497
  2277  00C47E  2E63               	decfsz	(??_main+1)& (0+255),f,c
  2278  00C480  D7FA               	bra	u9497
  2279  00C482  F000               	nop	
  2280  00C484                     l59:
  2281                           
  2282                           ;main.c: 71: }
  2283                           ;main.c: 74: operationMode = standbyMode();
  2284  00C484  ECEB  F077         	call	_standbyMode	;wreg free
  2285  00C488  C05E  F064         	movff	?_standbyMode,main@operationMode
  2286  00C48C  C05F  F065         	movff	?_standbyMode+1,main@operationMode+1
  2287                           
  2288                           ;main.c: 76: if (operationMode == 1){
  2289  00C490  0464               	decf	main@operationMode,w,c
  2290  00C492  1065               	iorwf	main@operationMode+1,w,c
  2291  00C494  B4D8               	btfsc	status,2,c
  2292                           
  2293                           ;main.c: 77: mainOperation();
  2294  00C496  ECEC  F065         	call	_mainOperation	;wreg free
  2295                           
  2296                           ;main.c: 78: }
  2297                           ;main.c: 80: firstIteration += 1;
  2298  00C49A  4A70               	infsnz	_firstIteration,f,c
  2299  00C49C  2A71               	incf	_firstIteration+1,f,c
  2300                           
  2301                           ;main.c: 81: return;
  2302  00C49E  EF00  F000         	goto	start
  2303  00C4A2                     __end_of_main:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _standbyMode *****************
  2316 ;; Defined at:
  2317 ;;		line 1607 in file "standbyMode.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2322 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2323 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2324 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2325 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2326 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2327 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2328 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2329 ;;  time            7   96[BANK1 ] unsigned char [7]
  2330 ;;  i               2  136[BANK1 ] unsigned int 
  2331 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2332 ;;  food            2  132[BANK1 ] unsigned int 
  2333 ;;  drawer          2  130[BANK1 ] unsigned int 
  2334 ;;  diet            2  128[BANK1 ] unsigned int 
  2335 ;;  x               2  125[BANK1 ] unsigned int 
  2336 ;;  n               2  123[BANK1 ] unsigned int 
  2337 ;;  zero            2  121[BANK1 ] unsigned int 
  2338 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2339 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2340 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2341 ;;  lng             2  112[BANK1 ] unsigned int 
  2342 ;;  flat            2  110[BANK1 ] unsigned int 
  2343 ;;  round           2  108[BANK1 ] unsigned int 
  2344 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2345 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2346 ;;  keypress        1  107[BANK1 ] unsigned char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  2   93[COMRAM] unsigned int 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Totals:         4       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;Total ram usage:      142 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    5
  2363 ;; This function calls:
  2364 ;;		_I2C_Master_Init
  2365 ;;		_I2C_Master_Read
  2366 ;;		_I2C_Master_Start
  2367 ;;		_I2C_Master_Stop
  2368 ;;		_I2C_Master_Write
  2369 ;;		___wmul
  2370 ;;		_decode_diet
  2371 ;;		_diet_press
  2372 ;;		_food_press
  2373 ;;		_getFlat
  2374 ;;		_getLong
  2375 ;;		_getRound
  2376 ;;		_lcdInst
  2377 ;;		_printFoodInput
  2378 ;;		_printf
  2379 ;;		_readEEPROM
  2380 ;;		_shiftEEPROM
  2381 ;;		_viewLogs
  2382 ;;		_which_drawer
  2383 ;;		_writeEEPROM
  2384 ;; This function is called by:
  2385 ;;		_main
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           	psect	text1
  2390  00EFD6                     __ptext1:
  2391                           	opt stack 0
  2392  00EFD6                     _standbyMode:
  2393                           	opt stack 25
  2394                           
  2395                           ;standbyMode.c: 1608: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2396                           
  2397                           ;incstack = 0
  2398  00EFD6  EE21  F0DA         	lfsr	2,standbyMode@F3152
  2399  00EFDA  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2400  00EFDE  0E0F               	movlw	15
  2401  00EFE0                     u8671:
  2402  00EFE0  CFDB FFE3          	movff	plusw2,plusw1
  2403  00EFE4  06E8               	decf	wreg,f,c
  2404  00EFE6  E2FC               	bc	u8671
  2405                           
  2406                           ;standbyMode.c: 1609: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2407  00EFE8  EE21  F0CA         	lfsr	2,standbyMode@F3154
  2408  00EFEC  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2409  00EFF0  0E0F               	movlw	15
  2410  00EFF2                     u8681:
  2411  00EFF2  CFDB FFE3          	movff	plusw2,plusw1
  2412  00EFF6  06E8               	decf	wreg,f,c
  2413  00EFF8  E2FC               	bc	u8681
  2414                           
  2415                           ;standbyMode.c: 1610: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2416  00EFFA  EE21  F0BA         	lfsr	2,standbyMode@F3156
  2417  00EFFE  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2418  00F002  0E0F               	movlw	15
  2419  00F004                     u8691:
  2420  00F004  CFDB FFE3          	movff	plusw2,plusw1
  2421  00F008  06E8               	decf	wreg,f,c
  2422  00F00A  E2FC               	bc	u8691
  2423                           
  2424                           ;standbyMode.c: 1611: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2425  00F00C  EE21  F0AA         	lfsr	2,standbyMode@F3158
  2426  00F010  EE11  F020         	lfsr	1,standbyMode@longPieces
  2427  00F014  0E0F               	movlw	15
  2428  00F016                     u8701:
  2429  00F016  CFDB FFE3          	movff	plusw2,plusw1
  2430  00F01A  06E8               	decf	wreg,f,c
  2431  00F01C  E2FC               	bc	u8701
  2432                           
  2433                           ;standbyMode.c: 1612: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2434  00F01E  EE21  F09A         	lfsr	2,standbyMode@F3160
  2435  00F022  EE11  F030         	lfsr	1,standbyMode@dietType
  2436  00F026  0E0F               	movlw	15
  2437  00F028                     u8711:
  2438  00F028  CFDB FFE3          	movff	plusw2,plusw1
  2439  00F02C  06E8               	decf	wreg,f,c
  2440  00F02E  E2FC               	bc	u8711
  2441                           
  2442                           ;standbyMode.c: 1613: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  2443  00F030  EE21  F08A         	lfsr	2,standbyMode@F3162
  2444  00F034  EE11  F040         	lfsr	1,standbyMode@foodType
  2445  00F038  0E0F               	movlw	15
  2446  00F03A                     u8721:
  2447  00F03A  CFDB FFE3          	movff	plusw2,plusw1
  2448  00F03E  06E8               	decf	wreg,f,c
  2449  00F040  E2FC               	bc	u8721
  2450                           
  2451                           ;standbyMode.c: 1614: unsigned int drawerCount = 0;
  2452  00F042  0E00               	movlw	0
  2453  00F044  0101               	movlb	1	; () banked
  2454  00F046  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2455  00F048  0E00               	movlw	0
  2456  00F04A  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  2457                           
  2458                           ; BSR set to: 1
  2459                           ;standbyMode.c: 1615: unsigned int i = 0;
  2460  00F04C  0E00               	movlw	0
  2461  00F04E  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  2462  00F050  0E00               	movlw	0
  2463  00F052  6F88               	movwf	standbyMode@i& (0+255),b
  2464                           
  2465                           ; BSR set to: 1
  2466                           ;standbyMode.c: 1616: unsigned int validDrawer = 0;
  2467  00F054  0E00               	movlw	0
  2468  00F056  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2469  00F058  0E00               	movlw	0
  2470  00F05A  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;standbyMode.c: 1617: unsigned int zero = 0;
  2474  00F05C  0E00               	movlw	0
  2475  00F05E  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  2476  00F060  0E00               	movlw	0
  2477  00F062  6F79               	movwf	standbyMode@zero& (0+255),b
  2478                           
  2479                           ; BSR set to: 1
  2480                           ;standbyMode.c: 1618: unsigned int firstIteration = 0;
  2481  00F064  0E00               	movlw	0
  2482  00F066  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2483  00F068  0E00               	movlw	0
  2484  00F06A  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;standbyMode.c: 1619: unsigned int drawer = 0;
  2488  00F06C  0E00               	movlw	0
  2489  00F06E  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  2490  00F070  0E00               	movlw	0
  2491  00F072  6F82               	movwf	standbyMode@drawer& (0+255),b
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;standbyMode.c: 1620: unsigned int diet = 0;
  2495  00F074  0E00               	movlw	0
  2496  00F076  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  2497  00F078  0E00               	movlw	0
  2498  00F07A  6F80               	movwf	standbyMode@diet& (0+255),b
  2499                           
  2500                           ; BSR set to: 1
  2501                           ;standbyMode.c: 1621: unsigned int food = 0;
  2502  00F07C  0E00               	movlw	0
  2503  00F07E  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  2504  00F080  0E00               	movlw	0
  2505  00F082  6F84               	movwf	standbyMode@food& (0+255),b
  2506                           
  2507                           ; BSR set to: 1
  2508                           ;standbyMode.c: 1622: unsigned char logNumber = 0;
  2509  00F084  0E00               	movlw	0
  2510  00F086  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  2511                           
  2512                           ; BSR set to: 1
  2513                           ;standbyMode.c: 1623: unsigned int n = 0;
  2514  00F088  0E00               	movlw	0
  2515  00F08A  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  2516  00F08C  0E00               	movlw	0
  2517  00F08E  6F7B               	movwf	standbyMode@n& (0+255),b
  2518                           
  2519                           ; BSR set to: 1
  2520                           ;standbyMode.c: 1624: unsigned int round = 0;
  2521  00F090  0E00               	movlw	0
  2522  00F092  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  2523  00F094  0E00               	movlw	0
  2524  00F096  6F6C               	movwf	standbyMode@round& (0+255),b
  2525                           
  2526                           ; BSR set to: 1
  2527                           ;standbyMode.c: 1625: unsigned int flat = 0;
  2528  00F098  0E00               	movlw	0
  2529  00F09A  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  2530  00F09C  0E00               	movlw	0
  2531  00F09E  6F6E               	movwf	standbyMode@flat& (0+255),b
  2532                           
  2533                           ; BSR set to: 1
  2534                           ;standbyMode.c: 1626: unsigned int lng = 0;
  2535  00F0A0  0E00               	movlw	0
  2536  00F0A2  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  2537  00F0A4  0E00               	movlw	0
  2538  00F0A6  6F70               	movwf	standbyMode@lng& (0+255),b
  2539                           
  2540                           ; BSR set to: 1
  2541                           ;standbyMode.c: 1627: unsigned int decodedDiet = 0;
  2542  00F0A8  0E00               	movlw	0
  2543  00F0AA  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2544  00F0AC  0E00               	movlw	0
  2545  00F0AE  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  2546                           
  2547                           ; BSR set to: 1
  2548                           ;standbyMode.c: 1628: unsigned int storedFoodType = 0;
  2549  00F0B0  0E00               	movlw	0
  2550  00F0B2  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  2551  00F0B4  0E00               	movlw	0
  2552  00F0B6  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  2553                           
  2554                           ; BSR set to: 1
  2555                           ;standbyMode.c: 1630: unsigned char time[7];
  2556                           ;standbyMode.c: 1631: unsigned int x = 0;
  2557  00F0B8  0E00               	movlw	0
  2558  00F0BA  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2559  00F0BC  0E00               	movlw	0
  2560  00F0BE  6F7D               	movwf	standbyMode@x& (0+255),b
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;standbyMode.c: 1634: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2564  00F0C0  0E01               	movlw	1
  2565  00F0C2  EC61  F05E         	call	_lcdInst
  2566  00F0C6  0EC3               	movlw	195
  2567  00F0C8  6E60               	movwf	??_standbyMode& (0+255),c
  2568  00F0CA  0ECD               	movlw	205
  2569  00F0CC                     u9507:
  2570  00F0CC  2EE8               	decfsz	wreg,f,c
  2571  00F0CE  D7FE               	bra	u9507
  2572  00F0D0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2573  00F0D2  D7FC               	bra	u9507
  2574  00F0D4  F000               	nop	
  2575                           
  2576                           ;standbyMode.c: 1635: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2577  00F0D6  0E0C               	movlw	12
  2578  00F0D8  EC61  F05E         	call	_lcdInst
  2579                           
  2580                           ;standbyMode.c: 1636: printf("Standby");
  2581  00F0DC  0E9C               	movlw	low STR_1
  2582  00F0DE  6E0D               	movwf	printf@f,c
  2583  00F0E0  0EFF               	movlw	high STR_1
  2584  00F0E2  6E0E               	movwf	printf@f+1,c
  2585  00F0E4  EC43  F06B         	call	_printf	;wreg free
  2586                           
  2587                           ;standbyMode.c: 1637: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2588  00F0E8  0E66               	movlw	102
  2589  00F0EA  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2590  00F0EC  0E76               	movlw	118
  2591  00F0EE  6E60               	movwf	??_standbyMode& (0+255),c
  2592  00F0F0  0EC1               	movlw	193
  2593  00F0F2                     u9517:
  2594  00F0F2  2EE8               	decfsz	wreg,f,c
  2595  00F0F4  D7FE               	bra	u9517
  2596  00F0F6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2597  00F0F8  D7FC               	bra	u9517
  2598  00F0FA  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2599  00F0FC  D7FA               	bra	u9517
  2600  00F0FE  F000               	nop	
  2601                           
  2602                           ;standbyMode.c: 1638: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2603  00F100  0E01               	movlw	1
  2604  00F102  EC61  F05E         	call	_lcdInst
  2605  00F106  0EC3               	movlw	195
  2606  00F108  6E60               	movwf	??_standbyMode& (0+255),c
  2607  00F10A  0ECD               	movlw	205
  2608  00F10C                     u9527:
  2609  00F10C  2EE8               	decfsz	wreg,f,c
  2610  00F10E  D7FE               	bra	u9527
  2611  00F110  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2612  00F112  D7FC               	bra	u9527
  2613  00F114  F000               	nop	
  2614                           
  2615                           ;standbyMode.c: 1639: printf("Press any key to");
  2616  00F116  0E63               	movlw	low STR_42
  2617  00F118  6E0D               	movwf	printf@f,c
  2618  00F11A  0EFD               	movlw	high STR_42
  2619  00F11C  6E0E               	movwf	printf@f+1,c
  2620  00F11E  EC43  F06B         	call	_printf	;wreg free
  2621                           
  2622                           ;standbyMode.c: 1640: lcdInst(0xC0);;
  2623  00F122  0EC0               	movlw	192
  2624  00F124  EC61  F05E         	call	_lcdInst
  2625                           
  2626                           ;standbyMode.c: 1641: printf("begin operation.");
  2627  00F128  0E30               	movlw	low STR_79
  2628  00F12A  6E0D               	movwf	printf@f,c
  2629  00F12C  0EFD               	movlw	high STR_79
  2630  00F12E  6E0E               	movwf	printf@f+1,c
  2631  00F130  EC43  F06B         	call	_printf	;wreg free
  2632  00F134                     
  2633                           ;standbyMode.c: 1644: continue;
  2634  00F134  A281               	btfss	3969,1,c	;volatile
  2635  00F136  D7FE               	goto	l787
  2636                           
  2637                           ;standbyMode.c: 1645: }
  2638                           ;standbyMode.c: 1648: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2639  00F138  0E01               	movlw	1
  2640  00F13A  EC61  F05E         	call	_lcdInst
  2641  00F13E  0EC3               	movlw	195
  2642  00F140  6E60               	movwf	??_standbyMode& (0+255),c
  2643  00F142  0ECD               	movlw	205
  2644  00F144                     u9537:
  2645  00F144  2EE8               	decfsz	wreg,f,c
  2646  00F146  D7FE               	bra	u9537
  2647  00F148  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2648  00F14A  D7FC               	bra	u9537
  2649  00F14C  F000               	nop	
  2650                           
  2651                           ;standbyMode.c: 1649: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2652  00F14E  0E0C               	movlw	12
  2653  00F150  EC61  F05E         	call	_lcdInst
  2654                           
  2655                           ;standbyMode.c: 1650: printf("Welcome to your");
  2656  00F154  0EF5               	movlw	low STR_80
  2657  00F156  6E0D               	movwf	printf@f,c
  2658  00F158  0EFD               	movlw	high STR_80
  2659  00F15A  6E0E               	movwf	printf@f+1,c
  2660  00F15C  EC43  F06B         	call	_printf	;wreg free
  2661                           
  2662                           ;standbyMode.c: 1651: lcdInst(0xC0);;
  2663  00F160  0EC0               	movlw	192
  2664  00F162  EC61  F05E         	call	_lcdInst
  2665                           
  2666                           ;standbyMode.c: 1652: printf("cabinet sorter!");
  2667  00F166  0E85               	movlw	low STR_81
  2668  00F168  6E0D               	movwf	printf@f,c
  2669  00F16A  0EFD               	movlw	high STR_81
  2670  00F16C  6E0E               	movwf	printf@f+1,c
  2671  00F16E  EC43  F06B         	call	_printf	;wreg free
  2672                           
  2673                           ;standbyMode.c: 1653: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2674  00F172  0E33               	movlw	51
  2675  00F174  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2676  00F176  0EBB               	movlw	187
  2677  00F178  6E60               	movwf	??_standbyMode& (0+255),c
  2678  00F17A  0EE0               	movlw	224
  2679  00F17C                     u9547:
  2680  00F17C  2EE8               	decfsz	wreg,f,c
  2681  00F17E  D7FE               	bra	u9547
  2682  00F180  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2683  00F182  D7FC               	bra	u9547
  2684  00F184  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2685  00F186  D7FA               	bra	u9547
  2686                           
  2687                           ;standbyMode.c: 1656: writeEEPROM(250, 3);
  2688  00F188  0E03               	movlw	3
  2689  00F18A  6E01               	movwf	writeEEPROM@data,c
  2690  00F18C  0EFA               	movlw	250
  2691  00F18E  ECE5  F05E         	call	_writeEEPROM
  2692                           
  2693                           ;standbyMode.c: 1657: writeEEPROM(0, 18);
  2694  00F192  0E12               	movlw	18
  2695  00F194  6E01               	movwf	writeEEPROM@data,c
  2696  00F196  0E00               	movlw	0
  2697  00F198  ECE5  F05E         	call	_writeEEPROM
  2698                           
  2699                           ;standbyMode.c: 1658: writeEEPROM(1, 2);
  2700  00F19C  0E02               	movlw	2
  2701  00F19E  6E01               	movwf	writeEEPROM@data,c
  2702  00F1A0  0E01               	movlw	1
  2703  00F1A2  ECE5  F05E         	call	_writeEEPROM
  2704                           
  2705                           ;standbyMode.c: 1659: writeEEPROM(2, 28);
  2706  00F1A6  0E1C               	movlw	28
  2707  00F1A8  6E01               	movwf	writeEEPROM@data,c
  2708  00F1AA  0E02               	movlw	2
  2709  00F1AC  ECE5  F05E         	call	_writeEEPROM
  2710                           
  2711                           ;standbyMode.c: 1660: writeEEPROM(3, 91);
  2712  00F1B0  0E5B               	movlw	91
  2713  00F1B2  6E01               	movwf	writeEEPROM@data,c
  2714  00F1B4  0E03               	movlw	3
  2715  00F1B6  ECE5  F05E         	call	_writeEEPROM
  2716                           
  2717                           ;standbyMode.c: 1661: writeEEPROM(4, 3);
  2718  00F1BA  0E03               	movlw	3
  2719  00F1BC  6E01               	movwf	writeEEPROM@data,c
  2720  00F1BE  0E04               	movlw	4
  2721  00F1C0  ECE5  F05E         	call	_writeEEPROM
  2722                           
  2723                           ;standbyMode.c: 1662: writeEEPROM(5, 15);
  2724  00F1C4  0E0F               	movlw	15
  2725  00F1C6  6E01               	movwf	writeEEPROM@data,c
  2726  00F1C8  0E05               	movlw	5
  2727  00F1CA  ECE5  F05E         	call	_writeEEPROM
  2728                           
  2729                           ;standbyMode.c: 1663: writeEEPROM(6, 8);
  2730  00F1CE  0E08               	movlw	8
  2731  00F1D0  6E01               	movwf	writeEEPROM@data,c
  2732  00F1D2  0E06               	movlw	6
  2733  00F1D4  ECE5  F05E         	call	_writeEEPROM
  2734                           
  2735                           ;standbyMode.c: 1664: writeEEPROM(7, 12);
  2736  00F1D8  0E0C               	movlw	12
  2737  00F1DA  6E01               	movwf	writeEEPROM@data,c
  2738  00F1DC  0E07               	movlw	7
  2739  00F1DE  ECE5  F05E         	call	_writeEEPROM
  2740                           
  2741                           ;standbyMode.c: 1665: writeEEPROM(8, 1);
  2742  00F1E2  0E01               	movlw	1
  2743  00F1E4  6E01               	movwf	writeEEPROM@data,c
  2744  00F1E6  0E08               	movlw	8
  2745  00F1E8  ECE5  F05E         	call	_writeEEPROM
  2746                           
  2747                           ;standbyMode.c: 1666: writeEEPROM(9, 13);
  2748  00F1EC  0E0D               	movlw	13
  2749  00F1EE  6E01               	movwf	writeEEPROM@data,c
  2750  00F1F0  0E09               	movlw	9
  2751  00F1F2  ECE5  F05E         	call	_writeEEPROM
  2752                           
  2753                           ;standbyMode.c: 1667: writeEEPROM(10, 0);
  2754  00F1F6  0E00               	movlw	0
  2755  00F1F8  6E01               	movwf	writeEEPROM@data,c
  2756  00F1FA  0E0A               	movlw	10
  2757  00F1FC  ECE5  F05E         	call	_writeEEPROM
  2758                           
  2759                           ;standbyMode.c: 1677: I2C_Master_Init(100000);
  2760  00F200  0EA0               	movlw	160
  2761  00F202  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2762  00F204  0E86               	movlw	134
  2763  00F206  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2764  00F208  0E01               	movlw	1
  2765  00F20A  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2766  00F20C  0E00               	movlw	0
  2767  00F20E  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2768  00F210  EC93  F05F         	call	_I2C_Master_Init	;wreg free
  2769                           
  2770                           ;standbyMode.c: 1678: I2C_Master_Start();
  2771  00F214  EC4B  F05E         	call	_I2C_Master_Start	;wreg free
  2772                           
  2773                           ;standbyMode.c: 1679: I2C_Master_Write(0b11010001);
  2774  00F218  0E00               	movlw	0
  2775  00F21A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2776  00F21C  0ED1               	movlw	209
  2777  00F21E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2778  00F220  EC53  F05E         	call	_I2C_Master_Write	;wreg free
  2779                           
  2780                           ;standbyMode.c: 1680: for(x = 0; x < 6; x++){
  2781  00F224  0E00               	movlw	0
  2782  00F226  0101               	movlb	1	; () banked
  2783  00F228  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2784  00F22A  0E00               	movlw	0
  2785  00F22C  6F7D               	movwf	standbyMode@x& (0+255),b
  2786  00F22E                     l7348:
  2787                           
  2788                           ; BSR set to: 1
  2789  00F22E  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  2790  00F230  E112               	bnz	l7358
  2791  00F232  0E06               	movlw	6
  2792  00F234  5D7D               	subwf	standbyMode@x& (0+255),w,b
  2793  00F236  B0D8               	btfsc	status,0,c
  2794  00F238  D00E               	goto	u8750
  2795                           
  2796                           ; BSR set to: 1
  2797                           ;standbyMode.c: 1681: time[x] = I2C_Master_Read(0);
  2798                           
  2799                           ; BSR set to: 1
  2800                           
  2801                           ; BSR set to: 1
  2802  00F23A  0E60               	movlw	low standbyMode@time
  2803  00F23C  257D               	addwf	standbyMode@x& (0+255),w,b
  2804  00F23E  6ED9               	movwf	fsr2l,c
  2805  00F240  0E01               	movlw	high standbyMode@time
  2806  00F242  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  2807  00F244  6EDA               	movwf	fsr2h,c
  2808  00F246  0E00               	movlw	0
  2809  00F248  EC9B  F05E         	call	_I2C_Master_Read
  2810  00F24C  6EDF               	movwf	indf2,c
  2811  00F24E  0101               	movlb	1	; () banked
  2812  00F250  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  2813  00F252  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  2814  00F254  D7EC               	goto	l7348
  2815  00F256                     u8750:
  2816  00F256                     l7358:
  2817                           
  2818                           ; BSR set to: 1
  2819                           ;standbyMode.c: 1682: }
  2820                           ;standbyMode.c: 1683: time[6] = I2C_Master_Read(1);
  2821  00F256  0E01               	movlw	1
  2822  00F258  EC9B  F05E         	call	_I2C_Master_Read
  2823  00F25C  0101               	movlb	1	; () banked
  2824  00F25E  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  2825                           
  2826                           ;standbyMode.c: 1684: I2C_Master_Stop();
  2827  00F260  EC4F  F05E         	call	_I2C_Master_Stop	;wreg free
  2828                           
  2829                           ;standbyMode.c: 1686: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2830  00F264  0E01               	movlw	1
  2831  00F266  EC61  F05E         	call	_lcdInst
  2832  00F26A  0EC3               	movlw	195
  2833  00F26C  6E60               	movwf	??_standbyMode& (0+255),c
  2834  00F26E  0ECD               	movlw	205
  2835  00F270                     u9557:
  2836  00F270  2EE8               	decfsz	wreg,f,c
  2837  00F272  D7FE               	bra	u9557
  2838  00F274  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2839  00F276  D7FC               	bra	u9557
  2840  00F278  F000               	nop	
  2841                           
  2842                           ;standbyMode.c: 1687: printf("Current date");
  2843  00F27A  0EFC               	movlw	low STR_82
  2844  00F27C  6E0D               	movwf	printf@f,c
  2845  00F27E  0EFE               	movlw	high STR_82
  2846  00F280  6E0E               	movwf	printf@f+1,c
  2847  00F282  EC43  F06B         	call	_printf	;wreg free
  2848                           
  2849                           ;standbyMode.c: 1688: lcdInst(0xC0);;
  2850  00F286  0EC0               	movlw	192
  2851  00F288  EC61  F05E         	call	_lcdInst
  2852                           
  2853                           ;standbyMode.c: 1689: printf("and time:");
  2854  00F28C  0E4B               	movlw	low STR_83
  2855  00F28E  6E0D               	movwf	printf@f,c
  2856  00F290  0EFF               	movlw	high STR_83
  2857  00F292  6E0E               	movwf	printf@f+1,c
  2858  00F294  EC43  F06B         	call	_printf	;wreg free
  2859                           
  2860                           ;standbyMode.c: 1690: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2861  00F298  0E66               	movlw	102
  2862  00F29A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2863  00F29C  0E76               	movlw	118
  2864  00F29E  6E60               	movwf	??_standbyMode& (0+255),c
  2865  00F2A0  0EC1               	movlw	193
  2866  00F2A2                     u9567:
  2867  00F2A2  2EE8               	decfsz	wreg,f,c
  2868  00F2A4  D7FE               	bra	u9567
  2869  00F2A6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2870  00F2A8  D7FC               	bra	u9567
  2871  00F2AA  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2872  00F2AC  D7FA               	bra	u9567
  2873  00F2AE  F000               	nop	
  2874                           
  2875                           ;standbyMode.c: 1692: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2876  00F2B0  0E01               	movlw	1
  2877  00F2B2  EC61  F05E         	call	_lcdInst
  2878  00F2B6  0EC3               	movlw	195
  2879  00F2B8  6E60               	movwf	??_standbyMode& (0+255),c
  2880  00F2BA  0ECD               	movlw	205
  2881  00F2BC                     u9577:
  2882  00F2BC  2EE8               	decfsz	wreg,f,c
  2883  00F2BE  D7FE               	bra	u9577
  2884  00F2C0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2885  00F2C2  D7FC               	bra	u9577
  2886  00F2C4  F000               	nop	
  2887                           
  2888                           ;standbyMode.c: 1693: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2889  00F2C6  0E70               	movlw	low STR_84
  2890  00F2C8  6E0D               	movwf	printf@f,c
  2891  00F2CA  0EFE               	movlw	high STR_84
  2892  00F2CC  6E0E               	movwf	printf@f+1,c
  2893  00F2CE  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  2894  00F2D2  6A10               	clrf	?_printf+3,c
  2895  00F2D4  C165  F011         	movff	standbyMode@time+5,?_printf+4
  2896  00F2D8  6A12               	clrf	?_printf+5,c
  2897  00F2DA  C164  F013         	movff	standbyMode@time+4,?_printf+6
  2898  00F2DE  6A14               	clrf	?_printf+7,c
  2899  00F2E0  EC43  F06B         	call	_printf	;wreg free
  2900                           
  2901                           ;standbyMode.c: 1694: lcdInst(0xC0);;
  2902  00F2E4  0EC0               	movlw	192
  2903  00F2E6  EC61  F05E         	call	_lcdInst
  2904                           
  2905                           ;standbyMode.c: 1695: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2906  00F2EA  0E7F               	movlw	low STR_85
  2907  00F2EC  6E0D               	movwf	printf@f,c
  2908  00F2EE  0EFE               	movlw	high STR_85
  2909  00F2F0  6E0E               	movwf	printf@f+1,c
  2910  00F2F2  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  2911  00F2F6  6A10               	clrf	?_printf+3,c
  2912  00F2F8  C161  F011         	movff	standbyMode@time+1,?_printf+4
  2913  00F2FC  6A12               	clrf	?_printf+5,c
  2914  00F2FE  C160  F013         	movff	standbyMode@time,?_printf+6
  2915  00F302  6A14               	clrf	?_printf+7,c
  2916  00F304  EC43  F06B         	call	_printf	;wreg free
  2917                           
  2918                           ;standbyMode.c: 1696: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2919  00F308  0E66               	movlw	102
  2920  00F30A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2921  00F30C  0E76               	movlw	118
  2922  00F30E  6E60               	movwf	??_standbyMode& (0+255),c
  2923  00F310  0EC1               	movlw	193
  2924  00F312                     u9587:
  2925  00F312  2EE8               	decfsz	wreg,f,c
  2926  00F314  D7FE               	bra	u9587
  2927  00F316  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2928  00F318  D7FC               	bra	u9587
  2929  00F31A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2930  00F31C  D7FA               	bra	u9587
  2931  00F31E  F000               	nop	
  2932                           
  2933                           ;standbyMode.c: 1699: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2934  00F320  0E01               	movlw	1
  2935  00F322  EC61  F05E         	call	_lcdInst
  2936  00F326  0EC3               	movlw	195
  2937  00F328  6E60               	movwf	??_standbyMode& (0+255),c
  2938  00F32A  0ECD               	movlw	205
  2939  00F32C                     u9597:
  2940  00F32C  2EE8               	decfsz	wreg,f,c
  2941  00F32E  D7FE               	bra	u9597
  2942  00F330  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2943  00F332  D7FC               	bra	u9597
  2944  00F334  F000               	nop	
  2945                           
  2946                           ;standbyMode.c: 1700: printf("Press # to");
  2947  00F336  0E40               	movlw	low STR_86
  2948  00F338  6E0D               	movwf	printf@f,c
  2949  00F33A  0EFF               	movlw	high STR_86
  2950  00F33C  6E0E               	movwf	printf@f+1,c
  2951  00F33E  EC43  F06B         	call	_printf	;wreg free
  2952                           
  2953                           ;standbyMode.c: 1701: lcdInst(0xC0);;
  2954  00F342  0EC0               	movlw	192
  2955  00F344  EC61  F05E         	call	_lcdInst
  2956                           
  2957                           ;standbyMode.c: 1702: printf("view logs,");
  2958  00F348  0E09               	movlw	low STR_87
  2959  00F34A  6E0D               	movwf	printf@f,c
  2960  00F34C  0EFF               	movlw	high STR_87
  2961  00F34E  6E0E               	movwf	printf@f+1,c
  2962  00F350  EC43  F06B         	call	_printf	;wreg free
  2963                           
  2964                           ;standbyMode.c: 1703: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2965  00F354  0E66               	movlw	102
  2966  00F356  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2967  00F358  0E76               	movlw	118
  2968  00F35A  6E60               	movwf	??_standbyMode& (0+255),c
  2969  00F35C  0EC1               	movlw	193
  2970  00F35E                     u9607:
  2971  00F35E  2EE8               	decfsz	wreg,f,c
  2972  00F360  D7FE               	bra	u9607
  2973  00F362  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2974  00F364  D7FC               	bra	u9607
  2975  00F366  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2976  00F368  D7FA               	bra	u9607
  2977  00F36A  F000               	nop	
  2978                           
  2979                           ;standbyMode.c: 1704: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2980  00F36C  0E01               	movlw	1
  2981  00F36E  EC61  F05E         	call	_lcdInst
  2982  00F372  0EC3               	movlw	195
  2983  00F374  6E60               	movwf	??_standbyMode& (0+255),c
  2984  00F376  0ECD               	movlw	205
  2985  00F378                     u9617:
  2986  00F378  2EE8               	decfsz	wreg,f,c
  2987  00F37A  D7FE               	bra	u9617
  2988  00F37C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2989  00F37E  D7FC               	bra	u9617
  2990  00F380  F000               	nop	
  2991                           
  2992                           ;standbyMode.c: 1705: printf("or press D to");
  2993  00F382  0EC7               	movlw	low STR_88
  2994  00F384  6E0D               	movwf	printf@f,c
  2995  00F386  0EFE               	movlw	high STR_88
  2996  00F388  6E0E               	movwf	printf@f+1,c
  2997  00F38A  EC43  F06B         	call	_printf	;wreg free
  2998                           
  2999                           ;standbyMode.c: 1706: lcdInst(0xC0);;
  3000  00F38E  0EC0               	movlw	192
  3001  00F390  EC61  F05E         	call	_lcdInst
  3002                           
  3003                           ;standbyMode.c: 1707: printf("begin operation.");
  3004  00F394  0E30               	movlw	low STR_79
  3005  00F396  6E0D               	movwf	printf@f,c
  3006  00F398  0EFD               	movlw	high STR_79
  3007  00F39A  6E0E               	movwf	printf@f+1,c
  3008  00F39C  EC43  F06B         	call	_printf	;wreg free
  3009  00F3A0  A281               	btfss	3969,1,c	;volatile
  3010  00F3A2  D7FE               	goto	l792
  3011                           
  3012                           ;standbyMode.c: 1710: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3013  00F3A4  3881               	swapf	3969,w,c	;volatile
  3014  00F3A6  0B0F               	andlw	15
  3015  00F3A8  0B0F               	andlw	15
  3016  00F3AA  0101               	movlb	1	; () banked
  3017  00F3AC  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3018  00F3AE                     
  3019                           ; BSR set to: 1
  3020  00F3AE  B281               	btfsc	3969,1,c	;volatile
  3021  00F3B0  D7FE               	goto	l795
  3022                           
  3023                           ;standbyMode.c: 1713: if (keypress == 15){
  3024  00F3B2  0E0F               	movlw	15
  3025  00F3B4  0101               	movlb	1	; () banked
  3026  00F3B6  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3027  00F3B8  A4D8               	btfss	status,2,c
  3028  00F3BA  D3EE               	goto	l797
  3029  00F3BC                     u8780:
  3030                           
  3031                           ; BSR set to: 1
  3032                           ;standbyMode.c: 1757: if (firstIteration == 1){
  3033                           
  3034                           ; BSR set to: 1
  3035                           
  3036                           ;standbyMode.c: 1756: while (1){
  3037  00F3BC  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3038  00F3BE  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3039  00F3C0  A4D8               	btfss	status,2,c
  3040  00F3C2  D1D9               	goto	l799
  3041  00F3C4                     u8790:
  3042                           
  3043                           ; BSR set to: 1
  3044                           ;standbyMode.c: 1760: if(drawerCount >= 8){
  3045                           
  3046                           ; BSR set to: 1
  3047                           
  3048                           ;standbyMode.c: 1758: while (1){
  3049  00F3C4  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3050  00F3C6  E104               	bnz	u8800
  3051  00F3C8  0E08               	movlw	8
  3052  00F3CA  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3053  00F3CC  A0D8               	btfss	status,0,c
  3054  00F3CE  D02A               	goto	l801
  3055  00F3D0                     u8800:
  3056                           
  3057                           ; BSR set to: 1
  3058                           ;standbyMode.c: 1761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3059  00F3D0  0E01               	movlw	1
  3060  00F3D2  EC61  F05E         	call	_lcdInst
  3061  00F3D6  0EC3               	movlw	195
  3062  00F3D8  6E60               	movwf	??_standbyMode& (0+255),c
  3063  00F3DA  0ECD               	movlw	205
  3064  00F3DC                     u9627:
  3065  00F3DC  2EE8               	decfsz	wreg,f,c
  3066  00F3DE  D7FE               	bra	u9627
  3067  00F3E0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3068  00F3E2  D7FC               	bra	u9627
  3069  00F3E4  F000               	nop	
  3070                           
  3071                           ;standbyMode.c: 1762: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3072  00F3E6  0E0C               	movlw	12
  3073  00F3E8  EC61  F05E         	call	_lcdInst
  3074                           
  3075                           ;standbyMode.c: 1763: printf("Maximum of 8");
  3076  00F3EC  0EE2               	movlw	low STR_90
  3077  00F3EE  6E0D               	movwf	printf@f,c
  3078  00F3F0  0EFE               	movlw	high STR_90
  3079  00F3F2  6E0E               	movwf	printf@f+1,c
  3080  00F3F4  EC43  F06B         	call	_printf	;wreg free
  3081                           
  3082                           ;standbyMode.c: 1764: lcdInst(0xC0);;
  3083  00F3F8  0EC0               	movlw	192
  3084  00F3FA  EC61  F05E         	call	_lcdInst
  3085                           
  3086                           ;standbyMode.c: 1765: printf("drawers reached!");
  3087  00F3FE  0E1F               	movlw	low STR_91
  3088  00F400  6E0D               	movwf	printf@f,c
  3089  00F402  0EFD               	movlw	high STR_91
  3090  00F404  6E0E               	movwf	printf@f+1,c
  3091  00F406  EC43  F06B         	call	_printf	;wreg free
  3092                           
  3093                           ;standbyMode.c: 1766: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3094  00F40A  0E66               	movlw	102
  3095  00F40C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3096  00F40E  0E76               	movlw	118
  3097  00F410  6E60               	movwf	??_standbyMode& (0+255),c
  3098  00F412  0EC1               	movlw	193
  3099  00F414                     u9637:
  3100  00F414  2EE8               	decfsz	wreg,f,c
  3101  00F416  D7FE               	bra	u9637
  3102  00F418  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3103  00F41A  D7FC               	bra	u9637
  3104  00F41C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3105  00F41E  D7FA               	bra	u9637
  3106  00F420  F000               	nop	
  3107                           
  3108                           ;standbyMode.c: 1767: break;
  3109  00F422  D328               	goto	l827
  3110  00F424                     l801:
  3111                           
  3112                           ;standbyMode.c: 1768: }
  3113                           ;standbyMode.c: 1770: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3114  00F424  0E01               	movlw	1
  3115  00F426  EC61  F05E         	call	_lcdInst
  3116  00F42A  0EC3               	movlw	195
  3117  00F42C  6E60               	movwf	??_standbyMode& (0+255),c
  3118  00F42E  0ECD               	movlw	205
  3119  00F430                     u9647:
  3120  00F430  2EE8               	decfsz	wreg,f,c
  3121  00F432  D7FE               	bra	u9647
  3122  00F434  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3123  00F436  D7FC               	bra	u9647
  3124  00F438  F000               	nop	
  3125                           
  3126                           ;standbyMode.c: 1771: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3127  00F43A  0E0C               	movlw	12
  3128  00F43C  EC61  F05E         	call	_lcdInst
  3129                           
  3130                           ;standbyMode.c: 1772: printf("Another drawer?");
  3131  00F440  0EE5               	movlw	low STR_92
  3132  00F442  6E0D               	movwf	printf@f,c
  3133  00F444  0EFD               	movlw	high STR_92
  3134  00F446  6E0E               	movwf	printf@f+1,c
  3135  00F448  EC43  F06B         	call	_printf	;wreg free
  3136                           
  3137                           ;standbyMode.c: 1773: lcdInst(0xC0);;
  3138  00F44C  0EC0               	movlw	192
  3139  00F44E  EC61  F05E         	call	_lcdInst
  3140                           
  3141                           ;standbyMode.c: 1774: printf("# = No, D = Yes");
  3142  00F452  0E05               	movlw	low STR_66
  3143  00F454  6E0D               	movwf	printf@f,c
  3144  00F456  0EFE               	movlw	high STR_66
  3145  00F458  6E0E               	movwf	printf@f+1,c
  3146  00F45A  EC43  F06B         	call	_printf	;wreg free
  3147  00F45E  A281               	btfss	3969,1,c	;volatile
  3148  00F460  D7FE               	goto	l805
  3149                           
  3150                           ;standbyMode.c: 1777: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3151  00F462  3881               	swapf	3969,w,c	;volatile
  3152  00F464  0B0F               	andlw	15
  3153  00F466  0B0F               	andlw	15
  3154  00F468  0101               	movlb	1	; () banked
  3155  00F46A  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3156  00F46C                     
  3157                           ; BSR set to: 1
  3158  00F46C  B281               	btfsc	3969,1,c	;volatile
  3159  00F46E  D7FE               	goto	l808
  3160                           
  3161                           ;standbyMode.c: 1780: if (keypress1 == 15){
  3162  00F470  0E0F               	movlw	15
  3163  00F472  0101               	movlb	1	; () banked
  3164  00F474  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3165  00F476  A4D8               	btfss	status,2,c
  3166  00F478  D177               	goto	l810
  3167  00F47A                     u8830:
  3168                           
  3169                           ; BSR set to: 1
  3170                           
  3171                           ; BSR set to: 1
  3172                           
  3173                           ;standbyMode.c: 1781: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3174  00F47A  0E01               	movlw	1
  3175  00F47C  EC61  F05E         	call	_lcdInst
  3176  00F480  0EC3               	movlw	195
  3177  00F482  6E60               	movwf	??_standbyMode& (0+255),c
  3178  00F484  0ECD               	movlw	205
  3179  00F486                     u9657:
  3180  00F486  2EE8               	decfsz	wreg,f,c
  3181  00F488  D7FE               	bra	u9657
  3182  00F48A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3183  00F48C  D7FC               	bra	u9657
  3184  00F48E  F000               	nop	
  3185                           
  3186                           ;standbyMode.c: 1782: drawer = which_drawer();
  3187  00F490  EC97  F067         	call	_which_drawer	;wreg free
  3188  00F494  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3189  00F498  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3190                           
  3191                           ;standbyMode.c: 1784: if (drawer == 100){
  3192  00F49C  0E64               	movlw	100
  3193  00F49E  0101               	movlb	1	; () banked
  3194  00F4A0  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3195  00F4A2  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3196  00F4A4  A4D8               	btfss	status,2,c
  3197  00F4A6  D005               	goto	l812
  3198                           
  3199                           ; BSR set to: 1
  3200                           ;standbyMode.c: 1785: drawer = 0;
  3201  00F4A8  0E00               	movlw	0
  3202  00F4AA  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3203  00F4AC  0E00               	movlw	0
  3204  00F4AE  6F82               	movwf	standbyMode@drawer& (0+255),b
  3205                           
  3206                           ;standbyMode.c: 1786: goto DRAWER_BACK;
  3207  00F4B0  D7B9               	goto	l801
  3208  00F4B2                     l812:
  3209                           
  3210                           ; BSR set to: 1
  3211                           ;standbyMode.c: 1787: }
  3212                           ;standbyMode.c: 1789: for (i=0; i<8; i++){
  3213                           
  3214                           ; BSR set to: 1
  3215  00F4B2  0E00               	movlw	0
  3216  00F4B4  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3217  00F4B6  0E00               	movlw	0
  3218  00F4B8  6F88               	movwf	standbyMode@i& (0+255),b
  3219  00F4BA                     l7446:
  3220                           
  3221                           ; BSR set to: 1
  3222  00F4BA  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3223  00F4BC  E12C               	bnz	l7462
  3224  00F4BE  0E08               	movlw	8
  3225  00F4C0  5D88               	subwf	standbyMode@i& (0+255),w,b
  3226  00F4C2  B0D8               	btfsc	status,0,c
  3227  00F4C4  D028               	goto	u8880
  3228                           
  3229                           ; BSR set to: 1
  3230                           ;standbyMode.c: 1790: if (drawerInformation[i] == drawer){
  3231                           
  3232                           ; BSR set to: 1
  3233                           
  3234                           ; BSR set to: 1
  3235  00F4C6  90D8               	bcf	status,0,c
  3236  00F4C8  3588               	rlcf	standbyMode@i& (0+255),w,b
  3237  00F4CA  6ED9               	movwf	fsr2l,c
  3238  00F4CC  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3239  00F4CE  6EDA               	movwf	fsr2h,c
  3240  00F4D0  0E50               	movlw	low standbyMode@drawerInformation
  3241  00F4D2  26D9               	addwf	fsr2l,f,c
  3242  00F4D4  0E01               	movlw	high standbyMode@drawerInformation
  3243  00F4D6  22DA               	addwfc	fsr2h,f,c
  3244  00F4D8  5182               	movf	standbyMode@drawer& (0+255),w,b
  3245  00F4DA  18DE               	xorwf	postinc2,w,c
  3246  00F4DC  E119               	bnz	l7458
  3247  00F4DE  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3248  00F4E0  18DE               	xorwf	postinc2,w,c
  3249  00F4E2  A4D8               	btfss	status,2,c
  3250  00F4E4  D015               	goto	l816
  3251                           
  3252                           ; BSR set to: 1
  3253                           ;standbyMode.c: 1791: validDrawer = 1;
  3254  00F4E6  0E00               	movlw	0
  3255  00F4E8  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3256  00F4EA  0E01               	movlw	1
  3257  00F4EC  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3258                           
  3259                           ; BSR set to: 1
  3260                           ;standbyMode.c: 1792: if (drawerInformation[i] == 0){
  3261  00F4EE  90D8               	bcf	status,0,c
  3262  00F4F0  3588               	rlcf	standbyMode@i& (0+255),w,b
  3263  00F4F2  6ED9               	movwf	fsr2l,c
  3264  00F4F4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3265  00F4F6  6EDA               	movwf	fsr2h,c
  3266  00F4F8  0E50               	movlw	low standbyMode@drawerInformation
  3267  00F4FA  26D9               	addwf	fsr2l,f,c
  3268  00F4FC  0E01               	movlw	high standbyMode@drawerInformation
  3269  00F4FE  22DA               	addwfc	fsr2h,f,c
  3270  00F500  50DE               	movf	postinc2,w,c
  3271  00F502  10DE               	iorwf	postinc2,w,c
  3272  00F504  A4D8               	btfss	status,2,c
  3273  00F506  D004               	goto	l816
  3274                           
  3275                           ; BSR set to: 1
  3276                           ;standbyMode.c: 1793: zero = 1;
  3277  00F508  0E00               	movlw	0
  3278  00F50A  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3279  00F50C  0E01               	movlw	1
  3280  00F50E  6F79               	movwf	standbyMode@zero& (0+255),b
  3281  00F510                     l816:
  3282  00F510                     l7458:
  3283                           
  3284                           ; BSR set to: 1
  3285  00F510  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3286  00F512  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3287  00F514  D7D2               	goto	l7446
  3288  00F516                     u8880:
  3289  00F516                     l7462:
  3290                           
  3291                           ; BSR set to: 1
  3292                           ;standbyMode.c: 1794: }
  3293                           ;standbyMode.c: 1795: }
  3294                           ;standbyMode.c: 1796: }
  3295                           ;standbyMode.c: 1797: if (validDrawer == 1){
  3296  00F516  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3297  00F518  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3298  00F51A  A4D8               	btfss	status,2,c
  3299  00F51C  D062               	goto	l817
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;standbyMode.c: 1798: if (zero == 1){
  3303  00F51E  0579               	decf	standbyMode@zero& (0+255),w,b
  3304  00F520  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3305  00F522  A4D8               	btfss	status,2,c
  3306  00F524  D02F               	goto	l818
  3307                           
  3308                           ; BSR set to: 1
  3309                           ;standbyMode.c: 1799: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3310  00F526  0E01               	movlw	1
  3311  00F528  EC61  F05E         	call	_lcdInst
  3312  00F52C  0EC3               	movlw	195
  3313  00F52E  6E60               	movwf	??_standbyMode& (0+255),c
  3314  00F530  0ECD               	movlw	205
  3315  00F532                     u9667:
  3316  00F532  2EE8               	decfsz	wreg,f,c
  3317  00F534  D7FE               	bra	u9667
  3318  00F536  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3319  00F538  D7FC               	bra	u9667
  3320  00F53A  F000               	nop	
  3321                           
  3322                           ;standbyMode.c: 1800: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3323  00F53C  0E0C               	movlw	12
  3324  00F53E  EC61  F05E         	call	_lcdInst
  3325                           
  3326                           ;standbyMode.c: 1801: printf("No drawer");
  3327  00F542  0E55               	movlw	low STR_94
  3328  00F544  6E0D               	movwf	printf@f,c
  3329  00F546  0EFF               	movlw	high STR_94
  3330  00F548  6E0E               	movwf	printf@f+1,c
  3331  00F54A  EC43  F06B         	call	_printf	;wreg free
  3332                           
  3333                           ;standbyMode.c: 1802: lcdInst(0xC0);;
  3334  00F54E  0EC0               	movlw	192
  3335  00F550  EC61  F05E         	call	_lcdInst
  3336                           
  3337                           ;standbyMode.c: 1803: printf("number pressed.");
  3338  00F554  0E95               	movlw	low STR_95
  3339  00F556  6E0D               	movwf	printf@f,c
  3340  00F558  0EFD               	movlw	high STR_95
  3341  00F55A  6E0E               	movwf	printf@f+1,c
  3342  00F55C  EC43  F06B         	call	_printf	;wreg free
  3343                           
  3344                           ;standbyMode.c: 1804: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3345  00F560  0E66               	movlw	102
  3346  00F562  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3347  00F564  0E76               	movlw	118
  3348  00F566  6E60               	movwf	??_standbyMode& (0+255),c
  3349  00F568  0EC1               	movlw	193
  3350  00F56A                     u9677:
  3351  00F56A  2EE8               	decfsz	wreg,f,c
  3352  00F56C  D7FE               	bra	u9677
  3353  00F56E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3354  00F570  D7FC               	bra	u9677
  3355  00F572  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3356  00F574  D7FA               	bra	u9677
  3357  00F576  F000               	nop	
  3358                           
  3359                           ;standbyMode.c: 1805: zero = 0;
  3360  00F578  0E00               	movlw	0
  3361  00F57A  0101               	movlb	1	; () banked
  3362  00F57C  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3363  00F57E  0E00               	movlw	0
  3364  00F580  6F79               	movwf	standbyMode@zero& (0+255),b
  3365                           
  3366                           ;standbyMode.c: 1806: }
  3367  00F582  D029               	goto	l819
  3368  00F584                     l818:
  3369                           
  3370                           ; BSR set to: 1
  3371                           ;standbyMode.c: 1807: else{
  3372                           ;standbyMode.c: 1808: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3373                           
  3374                           ; BSR set to: 1
  3375  00F584  0E01               	movlw	1
  3376  00F586  EC61  F05E         	call	_lcdInst
  3377  00F58A  0EC3               	movlw	195
  3378  00F58C  6E60               	movwf	??_standbyMode& (0+255),c
  3379  00F58E  0ECD               	movlw	205
  3380  00F590                     u9687:
  3381  00F590  2EE8               	decfsz	wreg,f,c
  3382  00F592  D7FE               	bra	u9687
  3383  00F594  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3384  00F596  D7FC               	bra	u9687
  3385  00F598  F000               	nop	
  3386                           
  3387                           ;standbyMode.c: 1809: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3388  00F59A  0E0C               	movlw	12
  3389  00F59C  EC61  F05E         	call	_lcdInst
  3390                           
  3391                           ;standbyMode.c: 1810: printf("Drawer already");
  3392  00F5A0  0E8E               	movlw	low STR_96
  3393  00F5A2  6E0D               	movwf	printf@f,c
  3394  00F5A4  0EFE               	movlw	high STR_96
  3395  00F5A6  6E0E               	movwf	printf@f+1,c
  3396  00F5A8  EC43  F06B         	call	_printf	;wreg free
  3397                           
  3398                           ;standbyMode.c: 1811: lcdInst(0xC0);;
  3399  00F5AC  0EC0               	movlw	192
  3400  00F5AE  EC61  F05E         	call	_lcdInst
  3401                           
  3402                           ;standbyMode.c: 1812: printf("in use!");
  3403  00F5B2  0E7C               	movlw	low STR_97
  3404  00F5B4  6E0D               	movwf	printf@f,c
  3405  00F5B6  0EFF               	movlw	high STR_97
  3406  00F5B8  6E0E               	movwf	printf@f+1,c
  3407  00F5BA  EC43  F06B         	call	_printf	;wreg free
  3408                           
  3409                           ;standbyMode.c: 1813: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3410  00F5BE  0E66               	movlw	102
  3411  00F5C0  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3412  00F5C2  0E76               	movlw	118
  3413  00F5C4  6E60               	movwf	??_standbyMode& (0+255),c
  3414  00F5C6  0EC1               	movlw	193
  3415  00F5C8                     u9697:
  3416  00F5C8  2EE8               	decfsz	wreg,f,c
  3417  00F5CA  D7FE               	bra	u9697
  3418  00F5CC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3419  00F5CE  D7FC               	bra	u9697
  3420  00F5D0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3421  00F5D2  D7FA               	bra	u9697
  3422  00F5D4  F000               	nop	
  3423  00F5D6                     l819:
  3424                           
  3425                           ;standbyMode.c: 1814: }
  3426                           ;standbyMode.c: 1815: validDrawer = 0;
  3427  00F5D6  0E00               	movlw	0
  3428  00F5D8  0101               	movlb	1	; () banked
  3429  00F5DA  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3430  00F5DC  0E00               	movlw	0
  3431  00F5DE  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3432                           
  3433                           ;standbyMode.c: 1816: continue;
  3434  00F5E0  D6F1               	goto	u8790
  3435  00F5E2                     l817:
  3436                           
  3437                           ; BSR set to: 1
  3438                           
  3439                           ; BSR set to: 1
  3440                           
  3441                           ;standbyMode.c: 1818: else{
  3442                           ;standbyMode.c: 1819: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3443                           
  3444                           ; BSR set to: 1
  3445  00F5E2  0E01               	movlw	1
  3446  00F5E4  EC61  F05E         	call	_lcdInst
  3447  00F5E8  0EC3               	movlw	195
  3448  00F5EA  6E60               	movwf	??_standbyMode& (0+255),c
  3449  00F5EC  0ECD               	movlw	205
  3450  00F5EE                     u9707:
  3451  00F5EE  2EE8               	decfsz	wreg,f,c
  3452  00F5F0  D7FE               	bra	u9707
  3453  00F5F2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3454  00F5F4  D7FC               	bra	u9707
  3455  00F5F6  F000               	nop	
  3456                           
  3457                           ;standbyMode.c: 1820: diet = diet_press(drawer);
  3458  00F5F8  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3459  00F5FC  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3460  00F600  EC3C  F06D         	call	_diet_press	;wreg free
  3461  00F604  C029  F180         	movff	?_diet_press,standbyMode@diet
  3462  00F608  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3463                           
  3464                           ;standbyMode.c: 1821: if (diet == 100){
  3465  00F60C  0E64               	movlw	100
  3466  00F60E  0101               	movlb	1	; () banked
  3467  00F610  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3468  00F612  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3469  00F614  A4D8               	btfss	status,2,c
  3470  00F616  D005               	goto	l823
  3471                           
  3472                           ; BSR set to: 1
  3473                           ;standbyMode.c: 1822: diet = 0;
  3474  00F618  0E00               	movlw	0
  3475  00F61A  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3476  00F61C  0E00               	movlw	0
  3477  00F61E  6F80               	movwf	standbyMode@diet& (0+255),b
  3478                           
  3479                           ;standbyMode.c: 1823: goto DIET_BACK1;
  3480  00F620  D72C               	goto	u8830
  3481  00F622                     l823:
  3482                           
  3483                           ; BSR set to: 1
  3484                           ;standbyMode.c: 1824: }
  3485                           ;standbyMode.c: 1826: food = food_press(diet, drawer);
  3486                           
  3487                           ; BSR set to: 1
  3488  00F622  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3489  00F626  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3490  00F62A  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3491  00F62E  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3492  00F632  EC9A  F066         	call	_food_press	;wreg free
  3493  00F636  C029  F184         	movff	?_food_press,standbyMode@food
  3494  00F63A  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3495                           
  3496                           ;standbyMode.c: 1827: if (food == 100){
  3497  00F63E  0E64               	movlw	100
  3498  00F640  0101               	movlb	1	; () banked
  3499  00F642  1984               	xorwf	standbyMode@food& (0+255),w,b
  3500  00F644  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3501  00F646  A4D8               	btfss	status,2,c
  3502  00F648  D009               	goto	l824
  3503                           
  3504                           ; BSR set to: 1
  3505                           ;standbyMode.c: 1828: diet = 0;
  3506  00F64A  0E00               	movlw	0
  3507  00F64C  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3508  00F64E  0E00               	movlw	0
  3509  00F650  6F80               	movwf	standbyMode@diet& (0+255),b
  3510                           
  3511                           ;standbyMode.c: 1829: food = 0;
  3512  00F652  0E00               	movlw	0
  3513  00F654  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3514  00F656  0E00               	movlw	0
  3515  00F658  6F84               	movwf	standbyMode@food& (0+255),b
  3516                           
  3517                           ;standbyMode.c: 1830: goto FOOD_BACK1;
  3518  00F65A  D7C3               	goto	l817
  3519  00F65C                     l824:
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;standbyMode.c: 1831: }
  3523                           ;standbyMode.c: 1833: drawerInformation[drawerCount] = drawer;
  3524                           
  3525                           ; BSR set to: 1
  3526  00F65C  90D8               	bcf	status,0,c
  3527  00F65E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3528  00F660  6ED9               	movwf	fsr2l,c
  3529  00F662  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3530  00F664  6EDA               	movwf	fsr2h,c
  3531  00F666  0E50               	movlw	low standbyMode@drawerInformation
  3532  00F668  26D9               	addwf	fsr2l,f,c
  3533  00F66A  0E01               	movlw	high standbyMode@drawerInformation
  3534  00F66C  22DA               	addwfc	fsr2h,f,c
  3535  00F66E  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3536  00F672  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3537                           
  3538                           ; BSR set to: 1
  3539                           ;standbyMode.c: 1834: decodedDiet = decode_diet(diet);
  3540  00F676  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3541  00F67A  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3542  00F67E  EC5A  F065         	call	_decode_diet	;wreg free
  3543  00F682  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3544  00F686  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3545                           
  3546                           ;standbyMode.c: 1835: dietType[drawerCount] = decodedDiet;
  3547  00F68A  90D8               	bcf	status,0,c
  3548  00F68C  0101               	movlb	1	; () banked
  3549  00F68E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3550  00F690  6ED9               	movwf	fsr2l,c
  3551  00F692  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3552  00F694  6EDA               	movwf	fsr2h,c
  3553  00F696  0E30               	movlw	low standbyMode@dietType
  3554  00F698  26D9               	addwf	fsr2l,f,c
  3555  00F69A  0E01               	movlw	high standbyMode@dietType
  3556  00F69C  22DA               	addwfc	fsr2h,f,c
  3557  00F69E  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3558  00F6A2  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3559                           
  3560                           ;standbyMode.c: 1836: storedFoodType = printFoodInput(food);
  3561  00F6A6  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3562  00F6AA  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3563  00F6AE  ECA2  F068         	call	_printFoodInput	;wreg free
  3564  00F6B2  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3565  00F6B6  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3566                           
  3567                           ;standbyMode.c: 1837: foodType[drawerCount] = storedFoodType;
  3568  00F6BA  90D8               	bcf	status,0,c
  3569  00F6BC  0101               	movlb	1	; () banked
  3570  00F6BE  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3571  00F6C0  6ED9               	movwf	fsr2l,c
  3572  00F6C2  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3573  00F6C4  6EDA               	movwf	fsr2h,c
  3574  00F6C6  0E40               	movlw	low standbyMode@foodType
  3575  00F6C8  26D9               	addwf	fsr2l,f,c
  3576  00F6CA  0E01               	movlw	high standbyMode@foodType
  3577  00F6CC  22DA               	addwfc	fsr2h,f,c
  3578  00F6CE  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  3579  00F6D2  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  3580                           
  3581                           ; BSR set to: 1
  3582                           ;standbyMode.c: 1840: round = getRound(food);
  3583  00F6D6  C184  F001         	movff	standbyMode@food,getRound@code
  3584  00F6DA  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  3585  00F6DE  EC3A  F063         	call	_getRound	;wreg free
  3586  00F6E2  C001  F16C         	movff	?_getRound,standbyMode@round
  3587  00F6E6  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  3588                           
  3589                           ;standbyMode.c: 1841: flat = getFlat(food);
  3590  00F6EA  C184  F001         	movff	standbyMode@food,getFlat@code
  3591  00F6EE  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  3592  00F6F2  ECC2  F062         	call	_getFlat	;wreg free
  3593  00F6F6  C001  F16E         	movff	?_getFlat,standbyMode@flat
  3594  00F6FA  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  3595                           
  3596                           ;standbyMode.c: 1842: lng = getLong(food);
  3597  00F6FE  C184  F001         	movff	standbyMode@food,getLong@code
  3598  00F702  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  3599  00F706  EC3D  F064         	call	_getLong	;wreg free
  3600  00F70A  C001  F170         	movff	?_getLong,standbyMode@lng
  3601  00F70E  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  3602                           
  3603                           ;standbyMode.c: 1843: roundPieces[drawerCount] = round;
  3604  00F712  90D8               	bcf	status,0,c
  3605  00F714  0101               	movlb	1	; () banked
  3606  00F716  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3607  00F718  6ED9               	movwf	fsr2l,c
  3608  00F71A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3609  00F71C  6EDA               	movwf	fsr2h,c
  3610  00F71E  0E00               	movlw	low standbyMode@roundPieces
  3611  00F720  26D9               	addwf	fsr2l,f,c
  3612  00F722  0E01               	movlw	high standbyMode@roundPieces
  3613  00F724  22DA               	addwfc	fsr2h,f,c
  3614  00F726  C16C  FFDE         	movff	standbyMode@round,postinc2
  3615  00F72A  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  3616                           
  3617                           ;standbyMode.c: 1844: flatPieces[drawerCount] = flat;
  3618  00F72E  90D8               	bcf	status,0,c
  3619  00F730  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3620  00F732  6ED9               	movwf	fsr2l,c
  3621  00F734  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3622  00F736  6EDA               	movwf	fsr2h,c
  3623  00F738  0E10               	movlw	low standbyMode@flatPieces
  3624  00F73A  26D9               	addwf	fsr2l,f,c
  3625  00F73C  0E01               	movlw	high standbyMode@flatPieces
  3626  00F73E  22DA               	addwfc	fsr2h,f,c
  3627  00F740  C16E  FFDE         	movff	standbyMode@flat,postinc2
  3628  00F744  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  3629                           
  3630                           ;standbyMode.c: 1845: longPieces[drawerCount] = lng;
  3631  00F748  90D8               	bcf	status,0,c
  3632  00F74A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3633  00F74C  6ED9               	movwf	fsr2l,c
  3634  00F74E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3635  00F750  6EDA               	movwf	fsr2h,c
  3636  00F752  0E20               	movlw	low standbyMode@longPieces
  3637  00F754  26D9               	addwf	fsr2l,f,c
  3638  00F756  0E01               	movlw	high standbyMode@longPieces
  3639  00F758  22DA               	addwfc	fsr2h,f,c
  3640  00F75A  C170  FFDE         	movff	standbyMode@lng,postinc2
  3641  00F75E  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  3642                           
  3643                           ; BSR set to: 1
  3644                           ;standbyMode.c: 1846: drawerCount += 1;
  3645  00F762  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3646  00F764  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;standbyMode.c: 1847: }
  3650                           ;standbyMode.c: 1848: }
  3651  00F766  D004               	goto	l826
  3652  00F768                     l810:
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;standbyMode.c: 1849: else if (keypress1 == 14){
  3656                           
  3657                           ; BSR set to: 1
  3658  00F768  0E0E               	movlw	14
  3659  00F76A  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3660  00F76C  B4D8               	btfsc	status,2,c
  3661  00F76E  D182               	goto	l827
  3662  00F770                     l826:
  3663                           
  3664                           ; BSR set to: 1
  3665                           ;standbyMode.c: 1851: }
  3666                           ;standbyMode.c: 1852: keypress1 = 0;
  3667                           
  3668                           ; BSR set to: 1
  3669                           
  3670                           ; BSR set to: 1
  3671  00F770  0E00               	movlw	0
  3672  00F772  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3673                           
  3674                           ; BSR set to: 1
  3675  00F774  D627               	goto	u8790
  3676  00F776                     l799:
  3677                           
  3678                           ; BSR set to: 1
  3679                           
  3680                           ; BSR set to: 1
  3681                           
  3682                           ;standbyMode.c: 1856: else{
  3683                           ;standbyMode.c: 1857: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3684                           
  3685                           ; BSR set to: 1
  3686  00F776  0E01               	movlw	1
  3687  00F778  EC61  F05E         	call	_lcdInst
  3688  00F77C  0EC3               	movlw	195
  3689  00F77E  6E60               	movwf	??_standbyMode& (0+255),c
  3690  00F780  0ECD               	movlw	205
  3691  00F782                     u9717:
  3692  00F782  2EE8               	decfsz	wreg,f,c
  3693  00F784  D7FE               	bra	u9717
  3694  00F786  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3695  00F788  D7FC               	bra	u9717
  3696  00F78A  F000               	nop	
  3697                           
  3698                           ;standbyMode.c: 1858: drawer = which_drawer();
  3699  00F78C  EC97  F067         	call	_which_drawer	;wreg free
  3700  00F790  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3701  00F794  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3702                           
  3703                           ;standbyMode.c: 1860: if (drawer == 100){
  3704  00F798  0E64               	movlw	100
  3705  00F79A  0101               	movlb	1	; () banked
  3706  00F79C  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3707  00F79E  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3708  00F7A0  A4D8               	btfss	status,2,c
  3709  00F7A2  D009               	goto	l830
  3710                           
  3711                           ; BSR set to: 1
  3712                           ;standbyMode.c: 1861: drawer = 0;
  3713  00F7A4  0E00               	movlw	0
  3714  00F7A6  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3715  00F7A8  0E00               	movlw	0
  3716  00F7AA  6F82               	movwf	standbyMode@drawer& (0+255),b
  3717                           
  3718                           ;standbyMode.c: 1862: firstIteration = 1;
  3719  00F7AC  0E00               	movlw	0
  3720  00F7AE  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3721  00F7B0  0E01               	movlw	1
  3722  00F7B2  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3723                           
  3724                           ;standbyMode.c: 1863: goto DRAWER_BACK;
  3725  00F7B4  D637               	goto	l801
  3726  00F7B6                     l830:
  3727                           
  3728                           ; BSR set to: 1
  3729                           ;standbyMode.c: 1864: }
  3730                           ;standbyMode.c: 1866: firstIteration = 1;
  3731                           
  3732                           ; BSR set to: 1
  3733  00F7B6  0E00               	movlw	0
  3734  00F7B8  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3735  00F7BA  0E01               	movlw	1
  3736  00F7BC  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3737                           
  3738                           ;standbyMode.c: 1867: for (i=0; i<8; i++){
  3739  00F7BE  0E00               	movlw	0
  3740  00F7C0  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3741  00F7C2  0E00               	movlw	0
  3742  00F7C4  6F88               	movwf	standbyMode@i& (0+255),b
  3743  00F7C6                     l7552:
  3744                           
  3745                           ; BSR set to: 1
  3746  00F7C6  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3747  00F7C8  E12C               	bnz	l7568
  3748  00F7CA  0E08               	movlw	8
  3749  00F7CC  5D88               	subwf	standbyMode@i& (0+255),w,b
  3750  00F7CE  B0D8               	btfsc	status,0,c
  3751  00F7D0  D028               	goto	u8980
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;standbyMode.c: 1868: if (drawerInformation[i] == drawer){
  3755                           
  3756                           ; BSR set to: 1
  3757                           
  3758                           ; BSR set to: 1
  3759  00F7D2  90D8               	bcf	status,0,c
  3760  00F7D4  3588               	rlcf	standbyMode@i& (0+255),w,b
  3761  00F7D6  6ED9               	movwf	fsr2l,c
  3762  00F7D8  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3763  00F7DA  6EDA               	movwf	fsr2h,c
  3764  00F7DC  0E50               	movlw	low standbyMode@drawerInformation
  3765  00F7DE  26D9               	addwf	fsr2l,f,c
  3766  00F7E0  0E01               	movlw	high standbyMode@drawerInformation
  3767  00F7E2  22DA               	addwfc	fsr2h,f,c
  3768  00F7E4  5182               	movf	standbyMode@drawer& (0+255),w,b
  3769  00F7E6  18DE               	xorwf	postinc2,w,c
  3770  00F7E8  E119               	bnz	l7564
  3771  00F7EA  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3772  00F7EC  18DE               	xorwf	postinc2,w,c
  3773  00F7EE  A4D8               	btfss	status,2,c
  3774  00F7F0  D015               	goto	l834
  3775                           
  3776                           ; BSR set to: 1
  3777                           ;standbyMode.c: 1869: validDrawer = 1;
  3778  00F7F2  0E00               	movlw	0
  3779  00F7F4  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3780  00F7F6  0E01               	movlw	1
  3781  00F7F8  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3782                           
  3783                           ; BSR set to: 1
  3784                           ;standbyMode.c: 1870: if (drawerInformation[i] == 0){
  3785  00F7FA  90D8               	bcf	status,0,c
  3786  00F7FC  3588               	rlcf	standbyMode@i& (0+255),w,b
  3787  00F7FE  6ED9               	movwf	fsr2l,c
  3788  00F800  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3789  00F802  6EDA               	movwf	fsr2h,c
  3790  00F804  0E50               	movlw	low standbyMode@drawerInformation
  3791  00F806  26D9               	addwf	fsr2l,f,c
  3792  00F808  0E01               	movlw	high standbyMode@drawerInformation
  3793  00F80A  22DA               	addwfc	fsr2h,f,c
  3794  00F80C  50DE               	movf	postinc2,w,c
  3795  00F80E  10DE               	iorwf	postinc2,w,c
  3796  00F810  A4D8               	btfss	status,2,c
  3797  00F812  D004               	goto	l834
  3798                           
  3799                           ; BSR set to: 1
  3800                           ;standbyMode.c: 1871: zero = 1;
  3801  00F814  0E00               	movlw	0
  3802  00F816  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3803  00F818  0E01               	movlw	1
  3804  00F81A  6F79               	movwf	standbyMode@zero& (0+255),b
  3805  00F81C                     l834:
  3806  00F81C                     l7564:
  3807                           
  3808                           ; BSR set to: 1
  3809  00F81C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3810  00F81E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3811  00F820  D7D2               	goto	l7552
  3812  00F822                     u8980:
  3813  00F822                     l7568:
  3814                           
  3815                           ; BSR set to: 1
  3816                           ;standbyMode.c: 1872: }
  3817                           ;standbyMode.c: 1873: }
  3818                           ;standbyMode.c: 1874: }
  3819                           ;standbyMode.c: 1875: if (validDrawer == 1){
  3820  00F822  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3821  00F824  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3822  00F826  A4D8               	btfss	status,2,c
  3823  00F828  D062               	goto	l835
  3824                           
  3825                           ; BSR set to: 1
  3826                           ;standbyMode.c: 1876: if (zero == 1){
  3827  00F82A  0579               	decf	standbyMode@zero& (0+255),w,b
  3828  00F82C  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3829  00F82E  A4D8               	btfss	status,2,c
  3830  00F830  D02F               	goto	l836
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;standbyMode.c: 1877: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3834  00F832  0E01               	movlw	1
  3835  00F834  EC61  F05E         	call	_lcdInst
  3836  00F838  0EC3               	movlw	195
  3837  00F83A  6E60               	movwf	??_standbyMode& (0+255),c
  3838  00F83C  0ECD               	movlw	205
  3839  00F83E                     u9727:
  3840  00F83E  2EE8               	decfsz	wreg,f,c
  3841  00F840  D7FE               	bra	u9727
  3842  00F842  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3843  00F844  D7FC               	bra	u9727
  3844  00F846  F000               	nop	
  3845                           
  3846                           ;standbyMode.c: 1878: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3847  00F848  0E0C               	movlw	12
  3848  00F84A  EC61  F05E         	call	_lcdInst
  3849                           
  3850                           ;standbyMode.c: 1879: printf("No drawer");
  3851  00F84E  0E55               	movlw	low STR_94
  3852  00F850  6E0D               	movwf	printf@f,c
  3853  00F852  0EFF               	movlw	high STR_94
  3854  00F854  6E0E               	movwf	printf@f+1,c
  3855  00F856  EC43  F06B         	call	_printf	;wreg free
  3856                           
  3857                           ;standbyMode.c: 1880: lcdInst(0xC0);;
  3858  00F85A  0EC0               	movlw	192
  3859  00F85C  EC61  F05E         	call	_lcdInst
  3860                           
  3861                           ;standbyMode.c: 1881: printf("number pressed.");
  3862  00F860  0E95               	movlw	low STR_95
  3863  00F862  6E0D               	movwf	printf@f,c
  3864  00F864  0EFD               	movlw	high STR_95
  3865  00F866  6E0E               	movwf	printf@f+1,c
  3866  00F868  EC43  F06B         	call	_printf	;wreg free
  3867                           
  3868                           ;standbyMode.c: 1882: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3869  00F86C  0E66               	movlw	102
  3870  00F86E  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3871  00F870  0E76               	movlw	118
  3872  00F872  6E60               	movwf	??_standbyMode& (0+255),c
  3873  00F874  0EC1               	movlw	193
  3874  00F876                     u9737:
  3875  00F876  2EE8               	decfsz	wreg,f,c
  3876  00F878  D7FE               	bra	u9737
  3877  00F87A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3878  00F87C  D7FC               	bra	u9737
  3879  00F87E  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3880  00F880  D7FA               	bra	u9737
  3881  00F882  F000               	nop	
  3882                           
  3883                           ;standbyMode.c: 1883: zero = 0;
  3884  00F884  0E00               	movlw	0
  3885  00F886  0101               	movlb	1	; () banked
  3886  00F888  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3887  00F88A  0E00               	movlw	0
  3888  00F88C  6F79               	movwf	standbyMode@zero& (0+255),b
  3889                           
  3890                           ;standbyMode.c: 1884: }
  3891  00F88E  D029               	goto	l837
  3892  00F890                     l836:
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;standbyMode.c: 1885: else{
  3896                           ;standbyMode.c: 1886: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3897                           
  3898                           ; BSR set to: 1
  3899  00F890  0E01               	movlw	1
  3900  00F892  EC61  F05E         	call	_lcdInst
  3901  00F896  0EC3               	movlw	195
  3902  00F898  6E60               	movwf	??_standbyMode& (0+255),c
  3903  00F89A  0ECD               	movlw	205
  3904  00F89C                     u9747:
  3905  00F89C  2EE8               	decfsz	wreg,f,c
  3906  00F89E  D7FE               	bra	u9747
  3907  00F8A0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3908  00F8A2  D7FC               	bra	u9747
  3909  00F8A4  F000               	nop	
  3910                           
  3911                           ;standbyMode.c: 1887: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3912  00F8A6  0E0C               	movlw	12
  3913  00F8A8  EC61  F05E         	call	_lcdInst
  3914                           
  3915                           ;standbyMode.c: 1888: printf("Drawer already");
  3916  00F8AC  0E8E               	movlw	low STR_96
  3917  00F8AE  6E0D               	movwf	printf@f,c
  3918  00F8B0  0EFE               	movlw	high STR_96
  3919  00F8B2  6E0E               	movwf	printf@f+1,c
  3920  00F8B4  EC43  F06B         	call	_printf	;wreg free
  3921                           
  3922                           ;standbyMode.c: 1889: lcdInst(0xC0);;
  3923  00F8B8  0EC0               	movlw	192
  3924  00F8BA  EC61  F05E         	call	_lcdInst
  3925                           
  3926                           ;standbyMode.c: 1890: printf("in use!");
  3927  00F8BE  0E7C               	movlw	low STR_97
  3928  00F8C0  6E0D               	movwf	printf@f,c
  3929  00F8C2  0EFF               	movlw	high STR_97
  3930  00F8C4  6E0E               	movwf	printf@f+1,c
  3931  00F8C6  EC43  F06B         	call	_printf	;wreg free
  3932                           
  3933                           ;standbyMode.c: 1891: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3934  00F8CA  0E66               	movlw	102
  3935  00F8CC  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3936  00F8CE  0E76               	movlw	118
  3937  00F8D0  6E60               	movwf	??_standbyMode& (0+255),c
  3938  00F8D2  0EC1               	movlw	193
  3939  00F8D4                     u9757:
  3940  00F8D4  2EE8               	decfsz	wreg,f,c
  3941  00F8D6  D7FE               	bra	u9757
  3942  00F8D8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3943  00F8DA  D7FC               	bra	u9757
  3944  00F8DC  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3945  00F8DE  D7FA               	bra	u9757
  3946  00F8E0  F000               	nop	
  3947  00F8E2                     l837:
  3948                           
  3949                           ;standbyMode.c: 1892: }
  3950                           ;standbyMode.c: 1893: validDrawer = 0;
  3951  00F8E2  0E00               	movlw	0
  3952  00F8E4  0101               	movlb	1	; () banked
  3953  00F8E6  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3954  00F8E8  0E00               	movlw	0
  3955  00F8EA  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3956                           
  3957                           ; BSR set to: 1
  3958                           ;standbyMode.c: 1895: }
  3959                           
  3960                           ;standbyMode.c: 1894: continue;
  3961  00F8EC  D567               	goto	u8780
  3962  00F8EE                     l835:
  3963                           
  3964                           ; BSR set to: 1
  3965                           
  3966                           ; BSR set to: 1
  3967                           
  3968                           ;standbyMode.c: 1896: else{
  3969                           ;standbyMode.c: 1897: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3970                           
  3971                           ; BSR set to: 1
  3972  00F8EE  0E01               	movlw	1
  3973  00F8F0  EC61  F05E         	call	_lcdInst
  3974  00F8F4  0EC3               	movlw	195
  3975  00F8F6  6E60               	movwf	??_standbyMode& (0+255),c
  3976  00F8F8  0ECD               	movlw	205
  3977  00F8FA                     u9767:
  3978  00F8FA  2EE8               	decfsz	wreg,f,c
  3979  00F8FC  D7FE               	bra	u9767
  3980  00F8FE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3981  00F900  D7FC               	bra	u9767
  3982  00F902  F000               	nop	
  3983                           
  3984                           ;standbyMode.c: 1898: diet = diet_press(drawer);
  3985  00F904  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3986  00F908  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3987  00F90C  EC3C  F06D         	call	_diet_press	;wreg free
  3988  00F910  C029  F180         	movff	?_diet_press,standbyMode@diet
  3989  00F914  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3990                           
  3991                           ;standbyMode.c: 1899: if (diet == 100){
  3992  00F918  0E64               	movlw	100
  3993  00F91A  0101               	movlb	1	; () banked
  3994  00F91C  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3995  00F91E  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3996  00F920  A4D8               	btfss	status,2,c
  3997  00F922  D005               	goto	l841
  3998                           
  3999                           ; BSR set to: 1
  4000                           ;standbyMode.c: 1900: diet = 0;
  4001  00F924  0E00               	movlw	0
  4002  00F926  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4003  00F928  0E00               	movlw	0
  4004  00F92A  6F80               	movwf	standbyMode@diet& (0+255),b
  4005                           
  4006                           ;standbyMode.c: 1901: goto DIET_BACK2;
  4007  00F92C  D724               	goto	l799
  4008  00F92E                     l841:
  4009                           
  4010                           ; BSR set to: 1
  4011                           ;standbyMode.c: 1902: }
  4012                           ;standbyMode.c: 1904: food = food_press(diet, drawer);
  4013                           
  4014                           ; BSR set to: 1
  4015  00F92E  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4016  00F932  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4017  00F936  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4018  00F93A  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4019  00F93E  EC9A  F066         	call	_food_press	;wreg free
  4020  00F942  C029  F184         	movff	?_food_press,standbyMode@food
  4021  00F946  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4022                           
  4023                           ;standbyMode.c: 1905: if (food == 100){
  4024  00F94A  0E64               	movlw	100
  4025  00F94C  0101               	movlb	1	; () banked
  4026  00F94E  1984               	xorwf	standbyMode@food& (0+255),w,b
  4027  00F950  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4028  00F952  A4D8               	btfss	status,2,c
  4029  00F954  D009               	goto	l842
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;standbyMode.c: 1906: diet = 0;
  4033  00F956  0E00               	movlw	0
  4034  00F958  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4035  00F95A  0E00               	movlw	0
  4036  00F95C  6F80               	movwf	standbyMode@diet& (0+255),b
  4037                           
  4038                           ;standbyMode.c: 1907: food = 0;
  4039  00F95E  0E00               	movlw	0
  4040  00F960  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4041  00F962  0E00               	movlw	0
  4042  00F964  6F84               	movwf	standbyMode@food& (0+255),b
  4043                           
  4044                           ;standbyMode.c: 1908: goto FOOD_BACK2;
  4045  00F966  D7C3               	goto	l835
  4046  00F968                     l842:
  4047                           
  4048                           ; BSR set to: 1
  4049                           ;standbyMode.c: 1909: }
  4050                           ;standbyMode.c: 1911: drawerInformation[drawerCount] = drawer;
  4051                           
  4052                           ; BSR set to: 1
  4053  00F968  90D8               	bcf	status,0,c
  4054  00F96A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4055  00F96C  6ED9               	movwf	fsr2l,c
  4056  00F96E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4057  00F970  6EDA               	movwf	fsr2h,c
  4058  00F972  0E50               	movlw	low standbyMode@drawerInformation
  4059  00F974  26D9               	addwf	fsr2l,f,c
  4060  00F976  0E01               	movlw	high standbyMode@drawerInformation
  4061  00F978  22DA               	addwfc	fsr2h,f,c
  4062  00F97A  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4063  00F97E  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;standbyMode.c: 1912: decodedDiet = decode_diet(diet);
  4067  00F982  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4068  00F986  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4069  00F98A  EC5A  F065         	call	_decode_diet	;wreg free
  4070  00F98E  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4071  00F992  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4072                           
  4073                           ;standbyMode.c: 1913: dietType[drawerCount] = decodedDiet;
  4074  00F996  90D8               	bcf	status,0,c
  4075  00F998  0101               	movlb	1	; () banked
  4076  00F99A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4077  00F99C  6ED9               	movwf	fsr2l,c
  4078  00F99E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4079  00F9A0  6EDA               	movwf	fsr2h,c
  4080  00F9A2  0E30               	movlw	low standbyMode@dietType
  4081  00F9A4  26D9               	addwf	fsr2l,f,c
  4082  00F9A6  0E01               	movlw	high standbyMode@dietType
  4083  00F9A8  22DA               	addwfc	fsr2h,f,c
  4084  00F9AA  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4085  00F9AE  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4086                           
  4087                           ;standbyMode.c: 1914: storedFoodType = printFoodInput(food);
  4088  00F9B2  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4089  00F9B6  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4090  00F9BA  ECA2  F068         	call	_printFoodInput	;wreg free
  4091  00F9BE  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4092  00F9C2  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4093                           
  4094                           ;standbyMode.c: 1915: foodType[drawerCount] = storedFoodType;
  4095  00F9C6  90D8               	bcf	status,0,c
  4096  00F9C8  0101               	movlb	1	; () banked
  4097  00F9CA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4098  00F9CC  6ED9               	movwf	fsr2l,c
  4099  00F9CE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4100  00F9D0  6EDA               	movwf	fsr2h,c
  4101  00F9D2  0E40               	movlw	low standbyMode@foodType
  4102  00F9D4  26D9               	addwf	fsr2l,f,c
  4103  00F9D6  0E01               	movlw	high standbyMode@foodType
  4104  00F9D8  22DA               	addwfc	fsr2h,f,c
  4105  00F9DA  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4106  00F9DE  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4107                           
  4108                           ; BSR set to: 1
  4109                           ;standbyMode.c: 1918: round = getRound(food);
  4110  00F9E2  C184  F001         	movff	standbyMode@food,getRound@code
  4111  00F9E6  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4112  00F9EA  EC3A  F063         	call	_getRound	;wreg free
  4113  00F9EE  C001  F16C         	movff	?_getRound,standbyMode@round
  4114  00F9F2  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4115                           
  4116                           ;standbyMode.c: 1919: flat = getFlat(food);
  4117  00F9F6  C184  F001         	movff	standbyMode@food,getFlat@code
  4118  00F9FA  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4119  00F9FE  ECC2  F062         	call	_getFlat	;wreg free
  4120  00FA02  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4121  00FA06  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4122                           
  4123                           ;standbyMode.c: 1920: lng = getLong(food);
  4124  00FA0A  C184  F001         	movff	standbyMode@food,getLong@code
  4125  00FA0E  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4126  00FA12  EC3D  F064         	call	_getLong	;wreg free
  4127  00FA16  C001  F170         	movff	?_getLong,standbyMode@lng
  4128  00FA1A  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4129                           
  4130                           ;standbyMode.c: 1921: roundPieces[drawerCount] = round;
  4131  00FA1E  90D8               	bcf	status,0,c
  4132  00FA20  0101               	movlb	1	; () banked
  4133  00FA22  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4134  00FA24  6ED9               	movwf	fsr2l,c
  4135  00FA26  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4136  00FA28  6EDA               	movwf	fsr2h,c
  4137  00FA2A  0E00               	movlw	low standbyMode@roundPieces
  4138  00FA2C  26D9               	addwf	fsr2l,f,c
  4139  00FA2E  0E01               	movlw	high standbyMode@roundPieces
  4140  00FA30  22DA               	addwfc	fsr2h,f,c
  4141  00FA32  C16C  FFDE         	movff	standbyMode@round,postinc2
  4142  00FA36  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4143                           
  4144                           ;standbyMode.c: 1922: flatPieces[drawerCount] = flat;
  4145  00FA3A  90D8               	bcf	status,0,c
  4146  00FA3C  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4147  00FA3E  6ED9               	movwf	fsr2l,c
  4148  00FA40  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4149  00FA42  6EDA               	movwf	fsr2h,c
  4150  00FA44  0E10               	movlw	low standbyMode@flatPieces
  4151  00FA46  26D9               	addwf	fsr2l,f,c
  4152  00FA48  0E01               	movlw	high standbyMode@flatPieces
  4153  00FA4A  22DA               	addwfc	fsr2h,f,c
  4154  00FA4C  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4155  00FA50  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4156                           
  4157                           ;standbyMode.c: 1923: longPieces[drawerCount] = lng;
  4158  00FA54  90D8               	bcf	status,0,c
  4159  00FA56  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4160  00FA58  6ED9               	movwf	fsr2l,c
  4161  00FA5A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4162  00FA5C  6EDA               	movwf	fsr2h,c
  4163  00FA5E  0E20               	movlw	low standbyMode@longPieces
  4164  00FA60  26D9               	addwf	fsr2l,f,c
  4165  00FA62  0E01               	movlw	high standbyMode@longPieces
  4166  00FA64  22DA               	addwfc	fsr2h,f,c
  4167  00FA66  C170  FFDE         	movff	standbyMode@lng,postinc2
  4168  00FA6A  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4169                           
  4170                           ; BSR set to: 1
  4171                           ;standbyMode.c: 1924: drawerCount += 1;
  4172  00FA6E  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4173  00FA70  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4174                           
  4175                           ; BSR set to: 1
  4176                           
  4177                           ; BSR set to: 1
  4178                           
  4179                           ; BSR set to: 1
  4180  00FA72  D4A4               	goto	u8780
  4181  00FA74                     l827:
  4182                           
  4183                           ;standbyMode.c: 1925: }
  4184                           ;standbyMode.c: 1926: }
  4185                           ;standbyMode.c: 1927: }
  4186                           ;standbyMode.c: 1929: if (drawerCount == 0){
  4187                           
  4188                           ; BSR set to: 1
  4189  00FA74  0101               	movlb	1	; () banked
  4190  00FA76  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4191  00FA78  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4192  00FA7A  A4D8               	btfss	status,2,c
  4193  00FA7C  D005               	goto	l843
  4194                           
  4195                           ; BSR set to: 1
  4196                           ;standbyMode.c: 1930: return 0;
  4197  00FA7E  0E00               	movlw	0
  4198  00FA80  6E5F               	movwf	?_standbyMode+1,c
  4199  00FA82  0E00               	movlw	0
  4200  00FA84  6E5E               	movwf	?_standbyMode,c
  4201                           
  4202                           ; BSR set to: 1
  4203                           ;standbyMode.c: 1931: }
  4204                           
  4205                           ; BSR set to: 1
  4206  00FA86  0012               	return	
  4207  00FA88                     l843:
  4208                           
  4209                           ; BSR set to: 1
  4210                           ;standbyMode.c: 1932: else{
  4211                           ;standbyMode.c: 1933: logNumber = readEEPROM(250);
  4212                           
  4213                           ; BSR set to: 1
  4214  00FA88  0EFA               	movlw	250
  4215  00FA8A  EC6B  F05E         	call	_readEEPROM
  4216  00FA8E  0101               	movlb	1	; () banked
  4217  00FA90  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;standbyMode.c: 1934: if (logNumber == 4){
  4221  00FA92  0E04               	movlw	4
  4222  00FA94  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4223  00FA96  B4D8               	btfsc	status,2,c
  4224                           
  4225                           ; BSR set to: 1
  4226                           ;standbyMode.c: 1935: shiftEEPROM();
  4227  00FA98  ECC8  F060         	call	_shiftEEPROM	;wreg free
  4228                           
  4229                           ;standbyMode.c: 1936: }
  4230                           ;standbyMode.c: 1937: for (i=0; i<8; i++){
  4231  00FA9C  0E00               	movlw	0
  4232  00FA9E  0101               	movlb	1	; () banked
  4233  00FAA0  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4234  00FAA2  0E00               	movlw	0
  4235  00FAA4  6F88               	movwf	standbyMode@i& (0+255),b
  4236                           
  4237                           ; BSR set to: 1
  4238  00FAA6  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4239  00FAA8  E172               	bnz	l848
  4240  00FAAA  0E08               	movlw	8
  4241  00FAAC  5D88               	subwf	standbyMode@i& (0+255),w,b
  4242  00FAAE  B0D8               	btfsc	status,0,c
  4243  00FAB0  D06E               	goto	u9080
  4244                           
  4245                           ; BSR set to: 1
  4246                           ;standbyMode.c: 1938: if (logNumber == 0 || logNumber == 4){
  4247                           
  4248                           ; BSR set to: 1
  4249                           
  4250                           ; BSR set to: 1
  4251  00FAB2  517F               	movf	standbyMode@logNumber& (0+255),w,b
  4252  00FAB4  B4D8               	btfsc	status,2,c
  4253  00FAB6  D004               	goto	u9070
  4254                           
  4255                           ; BSR set to: 1
  4256  00FAB8  0E04               	movlw	4
  4257  00FABA  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4258  00FABC  A4D8               	btfss	status,2,c
  4259  00FABE  D00F               	goto	l849
  4260  00FAC0                     u9070:
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;standbyMode.c: 1939: n = 3*i;
  4264                           
  4265                           ; BSR set to: 1
  4266  00FAC0  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4267  00FAC4  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4268  00FAC8  0E00               	movlw	0
  4269  00FACA  6E04               	movwf	___wmul@multiplicand+1,c
  4270  00FACC  0E03               	movlw	3
  4271  00FACE  6E03               	movwf	___wmul@multiplicand,c
  4272  00FAD0  ECD2  F05E         	call	___wmul	;wreg free
  4273  00FAD4  C001  F17B         	movff	?___wmul,standbyMode@n
  4274  00FAD8  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  4275                           
  4276                           ;standbyMode.c: 1940: }
  4277  00FADC  D022               	goto	l852
  4278  00FADE                     l849:
  4279                           
  4280                           ;standbyMode.c: 1941: else{
  4281                           ;standbyMode.c: 1942: n = (logNumber-1)*35 + 3*i;
  4282  00FADE  0EFF               	movlw	255
  4283  00FAE0  0101               	movlb	1	; () banked
  4284  00FAE2  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  4285  00FAE4  6E01               	movwf	___wmul@multiplier,c
  4286  00FAE6  6A02               	clrf	___wmul@multiplier+1,c
  4287  00FAE8  0EFF               	movlw	255
  4288  00FAEA  2202               	addwfc	___wmul@multiplier+1,f,c
  4289  00FAEC  0E00               	movlw	0
  4290  00FAEE  6E04               	movwf	___wmul@multiplicand+1,c
  4291  00FAF0  0E23               	movlw	35
  4292  00FAF2  6E03               	movwf	___wmul@multiplicand,c
  4293  00FAF4  ECD2  F05E         	call	___wmul	;wreg free
  4294  00FAF8  C001  F060         	movff	?___wmul,??_standbyMode
  4295  00FAFC  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  4296  00FB00  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4297  00FB04  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4298  00FB08  0E00               	movlw	0
  4299  00FB0A  6E04               	movwf	___wmul@multiplicand+1,c
  4300  00FB0C  0E03               	movlw	3
  4301  00FB0E  6E03               	movwf	___wmul@multiplicand,c
  4302  00FB10  ECD2  F05E         	call	___wmul	;wreg free
  4303  00FB14  5001               	movf	?___wmul,w,c
  4304  00FB16  2460               	addwf	??_standbyMode,w,c
  4305  00FB18  0101               	movlb	1	; () banked
  4306  00FB1A  6F7B               	movwf	standbyMode@n& (0+255),b
  4307  00FB1C  5002               	movf	?___wmul+1,w,c
  4308  00FB1E  2061               	addwfc	??_standbyMode+1,w,c
  4309  00FB20  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  4310  00FB22                     l852:
  4311                           
  4312                           ;standbyMode.c: 1943: }
  4313                           ;standbyMode.c: 1944: writeEEPROM(11+n, drawerInformation[i]);
  4314                           
  4315                           ; BSR set to: 1
  4316  00FB22  90D8               	bcf	status,0,c
  4317  00FB24  0101               	movlb	1	; () banked
  4318  00FB26  3588               	rlcf	standbyMode@i& (0+255),w,b
  4319  00FB28  6ED9               	movwf	fsr2l,c
  4320  00FB2A  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4321  00FB2C  6EDA               	movwf	fsr2h,c
  4322  00FB2E  0E50               	movlw	low standbyMode@drawerInformation
  4323  00FB30  26D9               	addwf	fsr2l,f,c
  4324  00FB32  0E01               	movlw	high standbyMode@drawerInformation
  4325  00FB34  22DA               	addwfc	fsr2h,f,c
  4326  00FB36  50DF               	movf	indf2,w,c
  4327  00FB38  6E01               	movwf	writeEEPROM@data,c
  4328  00FB3A  517B               	movf	standbyMode@n& (0+255),w,b
  4329  00FB3C  0F0B               	addlw	11
  4330  00FB3E  ECE5  F05E         	call	_writeEEPROM
  4331                           
  4332                           ;standbyMode.c: 1945: writeEEPROM(12+n, dietType[i]);
  4333  00FB42  90D8               	bcf	status,0,c
  4334  00FB44  0101               	movlb	1	; () banked
  4335  00FB46  3588               	rlcf	standbyMode@i& (0+255),w,b
  4336  00FB48  6ED9               	movwf	fsr2l,c
  4337  00FB4A  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4338  00FB4C  6EDA               	movwf	fsr2h,c
  4339  00FB4E  0E30               	movlw	low standbyMode@dietType
  4340  00FB50  26D9               	addwf	fsr2l,f,c
  4341  00FB52  0E01               	movlw	high standbyMode@dietType
  4342  00FB54  22DA               	addwfc	fsr2h,f,c
  4343  00FB56  50DF               	movf	indf2,w,c
  4344  00FB58  6E01               	movwf	writeEEPROM@data,c
  4345  00FB5A  517B               	movf	standbyMode@n& (0+255),w,b
  4346  00FB5C  0F0C               	addlw	12
  4347  00FB5E  ECE5  F05E         	call	_writeEEPROM
  4348                           
  4349                           ;standbyMode.c: 1946: writeEEPROM(13+n, foodType[i]);
  4350  00FB62  90D8               	bcf	status,0,c
  4351  00FB64  0101               	movlb	1	; () banked
  4352  00FB66  3588               	rlcf	standbyMode@i& (0+255),w,b
  4353  00FB68  6ED9               	movwf	fsr2l,c
  4354  00FB6A  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4355  00FB6C  6EDA               	movwf	fsr2h,c
  4356  00FB6E  0E40               	movlw	low standbyMode@foodType
  4357  00FB70  26D9               	addwf	fsr2l,f,c
  4358  00FB72  0E01               	movlw	high standbyMode@foodType
  4359  00FB74  22DA               	addwfc	fsr2h,f,c
  4360  00FB76  50DF               	movf	indf2,w,c
  4361  00FB78  6E01               	movwf	writeEEPROM@data,c
  4362  00FB7A  517B               	movf	standbyMode@n& (0+255),w,b
  4363  00FB7C  0F0D               	addlw	13
  4364  00FB7E  ECE5  F05E         	call	_writeEEPROM
  4365  00FB82  0101               	movlb	1	; () banked
  4366  00FB84  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4367  00FB86  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4368                           
  4369                           ; BSR set to: 1
  4370  00FB88  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4371  00FB8A  E101               	bnz	l7676
  4372  00FB8C  D78E               	goto	L1
  4373  00FB8E                     u9080:
  4374  00FB8E                     l848:
  4375  00FB8E                     l7676:
  4376                           
  4377                           ; BSR set to: 1
  4378                           ;standbyMode.c: 1947: }
  4379                           ;standbyMode.c: 1948: return 1;
  4380  00FB8E  0E00               	movlw	0
  4381  00FB90  6E5F               	movwf	?_standbyMode+1,c
  4382  00FB92  0E01               	movlw	1
  4383  00FB94  6E5E               	movwf	?_standbyMode,c
  4384                           
  4385                           ; BSR set to: 1
  4386                           ;standbyMode.c: 1949: }
  4387                           ;standbyMode.c: 1950: }
  4388                           
  4389                           ; BSR set to: 1
  4390  00FB96  0012               	return	
  4391  00FB98                     l797:
  4392                           
  4393                           ; BSR set to: 1
  4394                           ;standbyMode.c: 1951: else if (keypress == 14){
  4395                           
  4396                           ; BSR set to: 1
  4397  00FB98  0E0E               	movlw	14
  4398  00FB9A  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  4399  00FB9C  A4D8               	btfss	status,2,c
  4400  00FB9E  D05F               	goto	l854
  4401  00FBA0                     u9090:
  4402                           
  4403                           ;standbyMode.c: 1953: unsigned int whichKey = viewLogs();
  4404                           
  4405                           ; BSR set to: 1
  4406                           
  4407                           ;standbyMode.c: 1952: while (1){
  4408  00FBA0  ECCD  F069         	call	_viewLogs	;wreg free
  4409  00FBA4  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  4410  00FBA8  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4411                           
  4412                           ;standbyMode.c: 1954: if (whichKey == 15){
  4413  00FBAC  0E0F               	movlw	15
  4414  00FBAE  0101               	movlb	1	; () banked
  4415  00FBB0  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4416  00FBB2  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4417  00FBB4  B4D8               	btfsc	status,2,c
  4418  00FBB6  D7F4               	goto	u9090
  4419                           
  4420                           ; BSR set to: 1
  4421                           ;standbyMode.c: 1957: else if (whichKey == 14){
  4422                           
  4423                           ; BSR set to: 1
  4424                           
  4425                           ; BSR set to: 1
  4426                           ;standbyMode.c: 1956: }
  4427                           
  4428                           ; BSR set to: 1
  4429                           ;standbyMode.c: 1955: continue;
  4430  00FBB8  0E0E               	movlw	14
  4431  00FBBA  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4432  00FBBC  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4433  00FBBE  A4D8               	btfss	status,2,c
  4434  00FBC0  D020               	goto	l859
  4435                           
  4436                           ; BSR set to: 1
  4437                           ;standbyMode.c: 1958: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4438  00FBC2  0E01               	movlw	1
  4439  00FBC4  EC61  F05E         	call	_lcdInst
  4440  00FBC8  0EC3               	movlw	195
  4441  00FBCA  6E60               	movwf	??_standbyMode& (0+255),c
  4442  00FBCC  0ECD               	movlw	205
  4443  00FBCE                     u9777:
  4444  00FBCE  2EE8               	decfsz	wreg,f,c
  4445  00FBD0  D7FE               	bra	u9777
  4446  00FBD2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4447  00FBD4  D7FC               	bra	u9777
  4448  00FBD6  F000               	nop	
  4449                           
  4450                           ;standbyMode.c: 1959: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4451  00FBD8  0E0C               	movlw	12
  4452  00FBDA  EC61  F05E         	call	_lcdInst
  4453                           
  4454                           ;standbyMode.c: 1960: printf("Rebooting.");
  4455  00FBDE  0E1F               	movlw	low STR_102
  4456  00FBE0  6E0D               	movwf	printf@f,c
  4457  00FBE2  0EFF               	movlw	high STR_102
  4458  00FBE4  6E0E               	movwf	printf@f+1,c
  4459  00FBE6  EC43  F06B         	call	_printf	;wreg free
  4460                           
  4461                           ;standbyMode.c: 1961: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4462  00FBEA  0E66               	movlw	102
  4463  00FBEC  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4464  00FBEE  0E76               	movlw	118
  4465  00FBF0  6E60               	movwf	??_standbyMode& (0+255),c
  4466  00FBF2  0EC1               	movlw	193
  4467  00FBF4                     u9787:
  4468  00FBF4  2EE8               	decfsz	wreg,f,c
  4469  00FBF6  D7FE               	bra	u9787
  4470  00FBF8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4471  00FBFA  D7FC               	bra	u9787
  4472  00FBFC  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4473  00FBFE  D7FA               	bra	u9787
  4474  00FC00  D028               	goto	L2
  4475  00FC02                     l859:
  4476                           
  4477                           ;standbyMode.c: 1964: else{
  4478                           ;standbyMode.c: 1965: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4479  00FC02  0E01               	movlw	1
  4480  00FC04  EC61  F05E         	call	_lcdInst
  4481  00FC08  0EC3               	movlw	195
  4482  00FC0A  6E60               	movwf	??_standbyMode& (0+255),c
  4483  00FC0C  0ECD               	movlw	205
  4484  00FC0E                     u9797:
  4485  00FC0E  2EE8               	decfsz	wreg,f,c
  4486  00FC10  D7FE               	bra	u9797
  4487  00FC12  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4488  00FC14  D7FC               	bra	u9797
  4489  00FC16  F000               	nop	
  4490                           
  4491                           ;standbyMode.c: 1966: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4492  00FC18  0E0C               	movlw	12
  4493  00FC1A  EC61  F05E         	call	_lcdInst
  4494                           
  4495                           ;standbyMode.c: 1967: printf("Invalid key!");
  4496  00FC1E  0ED5               	movlw	low STR_103
  4497  00FC20  6E0D               	movwf	printf@f,c
  4498  00FC22  0EFE               	movlw	high STR_103
  4499  00FC24  6E0E               	movwf	printf@f+1,c
  4500  00FC26  EC43  F06B         	call	_printf	;wreg free
  4501                           
  4502                           ;standbyMode.c: 1968: lcdInst(0xC0);;
  4503  00FC2A  0EC0               	movlw	192
  4504  00FC2C  EC61  F05E         	call	_lcdInst
  4505                           
  4506                           ;standbyMode.c: 1969: printf("Rebooting.");
  4507  00FC30  0E1F               	movlw	low STR_102
  4508  00FC32  6E0D               	movwf	printf@f,c
  4509  00FC34  0EFF               	movlw	high STR_102
  4510  00FC36  6E0E               	movwf	printf@f+1,c
  4511  00FC38  EC43  F06B         	call	_printf	;wreg free
  4512                           
  4513                           ;standbyMode.c: 1970: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4514  00FC3C  0E66               	movlw	102
  4515  00FC3E  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4516  00FC40  0E76               	movlw	118
  4517  00FC42  6E60               	movwf	??_standbyMode& (0+255),c
  4518  00FC44  0EC1               	movlw	193
  4519  00FC46                     u9807:
  4520  00FC46  2EE8               	decfsz	wreg,f,c
  4521  00FC48  D7FE               	bra	u9807
  4522  00FC4A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4523  00FC4C  D7FC               	bra	u9807
  4524  00FC4E  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4525  00FC50  D7FA               	bra	u9807
  4526  00FC52                     L2:
  4527  00FC52  F000               	nop	
  4528                           
  4529                           ;standbyMode.c: 1972: }
  4530                           ;standbyMode.c: 1973: }
  4531                           ;standbyMode.c: 1974: return 0;
  4532                           
  4533                           ;standbyMode.c: 1971: break;
  4534  00FC54  0E00               	movlw	0
  4535  00FC56  6E5F               	movwf	?_standbyMode+1,c
  4536  00FC58  0E00               	movlw	0
  4537  00FC5A  6E5E               	movwf	?_standbyMode,c
  4538                           
  4539                           ;standbyMode.c: 1975: }
  4540  00FC5C  0012               	return	
  4541  00FC5E                     l854:
  4542                           
  4543                           ;standbyMode.c: 1977: else {
  4544                           ;standbyMode.c: 1978: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4545  00FC5E  0E01               	movlw	1
  4546  00FC60  EC61  F05E         	call	_lcdInst
  4547  00FC64  0EC3               	movlw	195
  4548  00FC66  6E60               	movwf	??_standbyMode& (0+255),c
  4549  00FC68  0ECD               	movlw	205
  4550  00FC6A                     u9817:
  4551  00FC6A  2EE8               	decfsz	wreg,f,c
  4552  00FC6C  D7FE               	bra	u9817
  4553  00FC6E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4554  00FC70  D7FC               	bra	u9817
  4555  00FC72  F000               	nop	
  4556                           
  4557                           ;standbyMode.c: 1979: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4558  00FC74  0E0C               	movlw	12
  4559  00FC76  EC61  F05E         	call	_lcdInst
  4560                           
  4561                           ;standbyMode.c: 1980: printf("Invalid key!");
  4562  00FC7A  0ED5               	movlw	low STR_103
  4563  00FC7C  6E0D               	movwf	printf@f,c
  4564  00FC7E  0EFE               	movlw	high STR_103
  4565  00FC80  6E0E               	movwf	printf@f+1,c
  4566  00FC82  EC43  F06B         	call	_printf	;wreg free
  4567                           
  4568                           ;standbyMode.c: 1981: lcdInst(0xC0);;
  4569  00FC86  0EC0               	movlw	192
  4570  00FC88  EC61  F05E         	call	_lcdInst
  4571                           
  4572                           ;standbyMode.c: 1982: printf("Rebooting.");
  4573  00FC8C  0E1F               	movlw	low STR_102
  4574  00FC8E  6E0D               	movwf	printf@f,c
  4575  00FC90  0EFF               	movlw	high STR_102
  4576  00FC92  6E0E               	movwf	printf@f+1,c
  4577  00FC94  EC43  F06B         	call	_printf	;wreg free
  4578                           
  4579                           ;standbyMode.c: 1983: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4580  00FC98  0E66               	movlw	102
  4581  00FC9A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4582  00FC9C  0E76               	movlw	118
  4583  00FC9E  6E60               	movwf	??_standbyMode& (0+255),c
  4584  00FCA0  0EC1               	movlw	193
  4585  00FCA2                     u9827:
  4586  00FCA2  2EE8               	decfsz	wreg,f,c
  4587  00FCA4  D7FE               	bra	u9827
  4588  00FCA6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4589  00FCA8  D7FC               	bra	u9827
  4590  00FCAA  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4591  00FCAC  D7FA               	bra	u9827
  4592  00FCAE  F000               	nop	
  4593                           
  4594                           ;standbyMode.c: 1984: return 0;
  4595  00FCB0  0E00               	movlw	0
  4596  00FCB2  6E5F               	movwf	?_standbyMode+1,c
  4597  00FCB4  0E00               	movlw	0
  4598  00FCB6  6E5E               	movwf	?_standbyMode,c
  4599  00FCB8  0012               	return	
  4600  00FCBA                     __end_of_standbyMode:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec1	equ	0xFE5
  4609                           plusw1	equ	0xFE3
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _which_drawer *****************
  4620 ;; Defined at:
  4621 ;;		line 1541 in file "standbyMode.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  rand            2   43[COMRAM] unsigned int 
  4626 ;;  keypress        1   51[COMRAM] unsigned char 
  4627 ;;  count           2   49[COMRAM] unsigned int 
  4628 ;;  backCheck       2   47[COMRAM] unsigned int 
  4629 ;;  sum             2   45[COMRAM] unsigned int 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  2   40[COMRAM] unsigned int 
  4632 ;; Registers used:
  4633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4639 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;Total ram usage:       12 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    3
  4646 ;; This function calls:
  4647 ;;		_decode_drawer
  4648 ;;		_lcdInst
  4649 ;;		_printf
  4650 ;;		_putch
  4651 ;; This function is called by:
  4652 ;;		_standbyMode
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text2
  4657  00CF2E                     __ptext2:
  4658                           	opt stack 0
  4659  00CF2E                     _which_drawer:
  4660                           	opt stack 26
  4661                           
  4662                           ;standbyMode.c: 1542: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4663                           
  4664                           ;incstack = 0
  4665  00CF2E  0E0C               	movlw	12
  4666  00CF30  EC61  F05E         	call	_lcdInst
  4667                           
  4668                           ;standbyMode.c: 1543: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4669  00CF34  0E01               	movlw	1
  4670  00CF36  EC61  F05E         	call	_lcdInst
  4671  00CF3A  0EC3               	movlw	195
  4672  00CF3C  6E2B               	movwf	??_which_drawer& (0+255),c
  4673  00CF3E  0ECD               	movlw	205
  4674  00CF40                     u9837:
  4675  00CF40  2EE8               	decfsz	wreg,f,c
  4676  00CF42  D7FE               	bra	u9837
  4677  00CF44  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4678  00CF46  D7FC               	bra	u9837
  4679  00CF48  F000               	nop	
  4680                           
  4681                           ;standbyMode.c: 1544: printf("Drawer number:");
  4682  00CF4A  0E25               	movlw	low STR_75
  4683  00CF4C  6E0D               	movwf	printf@f,c
  4684  00CF4E  0EFE               	movlw	high STR_75
  4685  00CF50  6E0E               	movwf	printf@f+1,c
  4686  00CF52  EC43  F06B         	call	_printf	;wreg free
  4687                           
  4688                           ;standbyMode.c: 1545: lcdInst(0xC0);;
  4689  00CF56  0EC0               	movlw	192
  4690  00CF58  EC61  F05E         	call	_lcdInst
  4691                           
  4692                           ;standbyMode.c: 1547: unsigned int count = 0;
  4693  00CF5C  0E00               	movlw	0
  4694  00CF5E  6E33               	movwf	which_drawer@count+1,c
  4695  00CF60  0E00               	movlw	0
  4696  00CF62  6E32               	movwf	which_drawer@count,c
  4697                           
  4698                           ;standbyMode.c: 1548: unsigned int sum = 0;
  4699  00CF64  0E00               	movlw	0
  4700  00CF66  6E2F               	movwf	which_drawer@sum+1,c
  4701  00CF68  0E00               	movlw	0
  4702  00CF6A  6E2E               	movwf	which_drawer@sum,c
  4703                           
  4704                           ;standbyMode.c: 1549: unsigned int backCheck = 0;
  4705  00CF6C  0E00               	movlw	0
  4706  00CF6E  6E31               	movwf	which_drawer@backCheck+1,c
  4707  00CF70  0E00               	movlw	0
  4708  00CF72  6E30               	movwf	which_drawer@backCheck,c
  4709  00CF74                     
  4710                           ;standbyMode.c: 1552: while(PORTBbits.RB1 == 0){ continue; }
  4711  00CF74  A281               	btfss	3969,1,c	;volatile
  4712  00CF76  D7FE               	goto	l738
  4713                           
  4714                           ;standbyMode.c: 1553: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4715  00CF78  3881               	swapf	3969,w,c	;volatile
  4716  00CF7A  0B0F               	andlw	15
  4717  00CF7C  0B0F               	andlw	15
  4718  00CF7E  6E34               	movwf	which_drawer@keypress,c
  4719  00CF80  B281               	btfsc	3969,1,c	;volatile
  4720  00CF82  D7FE               	goto	l743
  4721                           
  4722                           ;standbyMode.c: 1556: if(keypress == 15){
  4723  00CF84  0E0F               	movlw	15
  4724  00CF86  1834               	xorwf	which_drawer@keypress,w,c
  4725  00CF88  B4D8               	btfsc	status,2,c
  4726  00CF8A  D0C3               	goto	l746
  4727                           
  4728                           ;standbyMode.c: 1559: else if (keypress == 14){
  4729                           
  4730                           ;standbyMode.c: 1558: }
  4731                           
  4732                           ;standbyMode.c: 1557: break;
  4733  00CF8C  0E0E               	movlw	14
  4734  00CF8E  1834               	xorwf	which_drawer@keypress,w,c
  4735  00CF90  A4D8               	btfss	status,2,c
  4736  00CF92  D005               	goto	l748
  4737                           
  4738                           ;standbyMode.c: 1560: backCheck = 100;
  4739  00CF94  0E00               	movlw	0
  4740  00CF96  6E31               	movwf	which_drawer@backCheck+1,c
  4741  00CF98  0E64               	movlw	100
  4742  00CF9A  6E30               	movwf	which_drawer@backCheck,c
  4743                           
  4744                           ;standbyMode.c: 1561: break;
  4745  00CF9C  D0BA               	goto	l746
  4746  00CF9E                     l748:
  4747                           
  4748                           ;standbyMode.c: 1563: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  4749  00CF9E  5034               	movf	which_drawer@keypress,w,c
  4750  00CFA0  B4D8               	btfsc	status,2,c
  4751  00CFA2  D023               	goto	u8400
  4752  00CFA4  0434               	decf	which_drawer@keypress,w,c
  4753  00CFA6  B4D8               	btfsc	status,2,c
  4754  00CFA8  D020               	goto	u8400
  4755  00CFAA  0E02               	movlw	2
  4756  00CFAC  1834               	xorwf	which_drawer@keypress,w,c
  4757  00CFAE  B4D8               	btfsc	status,2,c
  4758  00CFB0  D01C               	goto	u8400
  4759  00CFB2  0E04               	movlw	4
  4760  00CFB4  1834               	xorwf	which_drawer@keypress,w,c
  4761  00CFB6  B4D8               	btfsc	status,2,c
  4762  00CFB8  D018               	goto	u8400
  4763  00CFBA  0E05               	movlw	5
  4764  00CFBC  1834               	xorwf	which_drawer@keypress,w,c
  4765  00CFBE  B4D8               	btfsc	status,2,c
  4766  00CFC0  D014               	goto	u8400
  4767  00CFC2  0E06               	movlw	6
  4768  00CFC4  1834               	xorwf	which_drawer@keypress,w,c
  4769  00CFC6  B4D8               	btfsc	status,2,c
  4770  00CFC8  D010               	goto	u8400
  4771  00CFCA  0E08               	movlw	8
  4772  00CFCC  1834               	xorwf	which_drawer@keypress,w,c
  4773  00CFCE  B4D8               	btfsc	status,2,c
  4774  00CFD0  D00C               	goto	u8400
  4775  00CFD2  0E09               	movlw	9
  4776  00CFD4  1834               	xorwf	which_drawer@keypress,w,c
  4777  00CFD6  B4D8               	btfsc	status,2,c
  4778  00CFD8  D008               	goto	u8400
  4779  00CFDA  0E0A               	movlw	10
  4780  00CFDC  1834               	xorwf	which_drawer@keypress,w,c
  4781  00CFDE  B4D8               	btfsc	status,2,c
  4782  00CFE0  D004               	goto	u8400
  4783  00CFE2  0E0D               	movlw	13
  4784  00CFE4  1834               	xorwf	which_drawer@keypress,w,c
  4785  00CFE6  A4D8               	btfss	status,2,c
  4786  00CFE8  D073               	goto	l750
  4787  00CFEA                     u8400:
  4788                           
  4789                           ;standbyMode.c: 1564: if (count == 0){
  4790  00CFEA  5032               	movf	which_drawer@count,w,c
  4791  00CFEC  1033               	iorwf	which_drawer@count+1,w,c
  4792  00CFEE  A4D8               	btfss	status,2,c
  4793  00CFF0  D04C               	goto	l753
  4794                           
  4795                           ;standbyMode.c: 1565: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  4796  00CFF2  0434               	decf	which_drawer@keypress,w,c
  4797  00CFF4  B4D8               	btfsc	status,2,c
  4798  00CFF6  D01C               	goto	u8490
  4799  00CFF8  0E02               	movlw	2
  4800  00CFFA  1834               	xorwf	which_drawer@keypress,w,c
  4801  00CFFC  B4D8               	btfsc	status,2,c
  4802  00CFFE  D018               	goto	u8490
  4803  00D000  0E04               	movlw	4
  4804  00D002  1834               	xorwf	which_drawer@keypress,w,c
  4805  00D004  B4D8               	btfsc	status,2,c
  4806  00D006  D014               	goto	u8490
  4807  00D008  0E05               	movlw	5
  4808  00D00A  1834               	xorwf	which_drawer@keypress,w,c
  4809  00D00C  B4D8               	btfsc	status,2,c
  4810  00D00E  D010               	goto	u8490
  4811  00D010  0E06               	movlw	6
  4812  00D012  1834               	xorwf	which_drawer@keypress,w,c
  4813  00D014  B4D8               	btfsc	status,2,c
  4814  00D016  D00C               	goto	u8490
  4815  00D018  0E08               	movlw	8
  4816  00D01A  1834               	xorwf	which_drawer@keypress,w,c
  4817  00D01C  B4D8               	btfsc	status,2,c
  4818  00D01E  D008               	goto	u8490
  4819  00D020  0E09               	movlw	9
  4820  00D022  1834               	xorwf	which_drawer@keypress,w,c
  4821  00D024  B4D8               	btfsc	status,2,c
  4822  00D026  D004               	goto	u8490
  4823  00D028  0E0A               	movlw	10
  4824  00D02A  1834               	xorwf	which_drawer@keypress,w,c
  4825  00D02C  A4D8               	btfss	status,2,c
  4826  00D02E  D014               	goto	l754
  4827  00D030                     u8490:
  4828                           
  4829                           ;standbyMode.c: 1566: count += 2;
  4830  00D030  0E02               	movlw	2
  4831  00D032  2632               	addwf	which_drawer@count,f,c
  4832  00D034  0E00               	movlw	0
  4833  00D036  2233               	addwfc	which_drawer@count+1,f,c
  4834                           
  4835                           ;standbyMode.c: 1567: putch(input[keypress]);
  4836  00D038  5034               	movf	which_drawer@keypress,w,c
  4837  00D03A  0D01               	mullw	1
  4838  00D03C  0ECC               	movlw	low _input
  4839  00D03E  24F3               	addwf	prodl,w,c
  4840  00D040  6EF6               	movwf	tblptrl,c
  4841  00D042  0EFC               	movlw	high _input
  4842  00D044  20F4               	addwfc	prodh,w,c
  4843  00D046  6EF7               	movwf	tblptrh,c
  4844  00D048                     	if	1	;There are 3 active tblptr bytes
  4845  00D048  6AF8               	clrf	tblptru,c
  4846  00D04A  0E00               	movlw	low (__mediumconst shr (0+16))
  4847  00D04C  22F8               	addwfc	tblptru,f,c
  4848  00D04E                     	endif
  4849  00D04E  0008               	tblrd		*
  4850  00D050  50F5               	movf	tablat,w,c
  4851  00D052  EC75  F05E         	call	_putch
  4852  00D056  D03A               	goto	l764
  4853  00D058                     l754:
  4854                           
  4855                           ;standbyMode.c: 1570: else if (keypress == 0){
  4856  00D058  5034               	movf	which_drawer@keypress,w,c
  4857  00D05A  A4D8               	btfss	status,2,c
  4858  00D05C  D78B               	goto	l738
  4859                           
  4860                           ;standbyMode.c: 1571: putch(input[keypress]);
  4861  00D05E  5034               	movf	which_drawer@keypress,w,c
  4862  00D060  0D01               	mullw	1
  4863  00D062  0ECC               	movlw	low _input
  4864  00D064  24F3               	addwf	prodl,w,c
  4865  00D066  6EF6               	movwf	tblptrl,c
  4866  00D068  0EFC               	movlw	high _input
  4867  00D06A  20F4               	addwfc	prodh,w,c
  4868  00D06C  6EF7               	movwf	tblptrh,c
  4869  00D06E                     	if	1	;There are 3 active tblptr bytes
  4870  00D06E  6AF8               	clrf	tblptru,c
  4871  00D070  0E00               	movlw	low (__mediumconst shr (0+16))
  4872  00D072  22F8               	addwfc	tblptru,f,c
  4873  00D074                     	endif
  4874  00D074  0008               	tblrd		*
  4875  00D076  50F5               	movf	tablat,w,c
  4876  00D078  EC75  F05E         	call	_putch
  4877                           
  4878                           ;standbyMode.c: 1572: count += 1;
  4879  00D07C  4A32               	infsnz	which_drawer@count,f,c
  4880  00D07E  2A33               	incf	which_drawer@count+1,f,c
  4881  00D080  D023               	goto	u8540
  4882  00D082                     L3:
  4883  00D082  262E               	addwf	which_drawer@sum,f,c
  4884  00D084  0E00               	movlw	0
  4885  00D086  222F               	addwfc	which_drawer@sum+1,f,c
  4886                           
  4887                           ;standbyMode.c: 1574: }
  4888                           ;standbyMode.c: 1575: }
  4889  00D088  D775               	goto	l738
  4890  00D08A                     l753:
  4891                           
  4892                           ;standbyMode.c: 1576: else if (count == 1){
  4893  00D08A  0432               	decf	which_drawer@count,w,c
  4894  00D08C  1033               	iorwf	which_drawer@count+1,w,c
  4895  00D08E  A4D8               	btfss	status,2,c
  4896  00D090  D771               	goto	l738
  4897                           
  4898                           ;standbyMode.c: 1577: if (keypress < 8 || keypress == 13){
  4899  00D092  0E07               	movlw	7
  4900  00D094  6434               	cpfsgt	which_drawer@keypress,c
  4901  00D096  D004               	goto	u8530
  4902  00D098  0E0D               	movlw	13
  4903  00D09A  1834               	xorwf	which_drawer@keypress,w,c
  4904  00D09C  A4D8               	btfss	status,2,c
  4905  00D09E  D76A               	goto	l738
  4906  00D0A0                     u8530:
  4907                           
  4908                           ;standbyMode.c: 1578: putch(input[keypress]);
  4909  00D0A0  5034               	movf	which_drawer@keypress,w,c
  4910  00D0A2  0D01               	mullw	1
  4911  00D0A4  0ECC               	movlw	low _input
  4912  00D0A6  24F3               	addwf	prodl,w,c
  4913  00D0A8  6EF6               	movwf	tblptrl,c
  4914  00D0AA  0EFC               	movlw	high _input
  4915  00D0AC  20F4               	addwfc	prodh,w,c
  4916  00D0AE  6EF7               	movwf	tblptrh,c
  4917  00D0B0                     	if	1	;There are 3 active tblptr bytes
  4918  00D0B0  6AF8               	clrf	tblptru,c
  4919  00D0B2  0E00               	movlw	low (__mediumconst shr (0+16))
  4920  00D0B4  22F8               	addwfc	tblptru,f,c
  4921  00D0B6                     	endif
  4922  00D0B6  0008               	tblrd		*
  4923  00D0B8  50F5               	movf	tablat,w,c
  4924  00D0BA  EC75  F05E         	call	_putch
  4925                           
  4926                           ;standbyMode.c: 1579: count += 1;
  4927  00D0BE  4A32               	infsnz	which_drawer@count,f,c
  4928  00D0C0  2A33               	incf	which_drawer@count+1,f,c
  4929                           
  4930                           ;standbyMode.c: 1580: if(keypress == 0){
  4931  00D0C2  5034               	movf	which_drawer@keypress,w,c
  4932  00D0C4  A4D8               	btfss	status,2,c
  4933  00D0C6  D002               	goto	l764
  4934  00D0C8                     u8540:
  4935                           
  4936                           ;standbyMode.c: 1581: sum += 20;
  4937  00D0C8  0E14               	movlw	20
  4938  00D0CA  D7DB               	goto	L3
  4939  00D0CC                     l764:
  4940                           
  4941                           ;standbyMode.c: 1583: else {
  4942                           ;standbyMode.c: 1584: sum += keypress;
  4943  00D0CC  5034               	movf	which_drawer@keypress,w,c
  4944  00D0CE  D7D9               	goto	L3
  4945  00D0D0                     l750:
  4946                           
  4947                           ;standbyMode.c: 1589: else if (keypress == 12){
  4948  00D0D0  0E0C               	movlw	12
  4949  00D0D2  1834               	xorwf	which_drawer@keypress,w,c
  4950  00D0D4  A4D8               	btfss	status,2,c
  4951  00D0D6  D74E               	goto	l738
  4952                           
  4953                           ;standbyMode.c: 1590: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4954  00D0D8  0E01               	movlw	1
  4955  00D0DA  EC61  F05E         	call	_lcdInst
  4956  00D0DE  0EC3               	movlw	195
  4957  00D0E0  6E2B               	movwf	??_which_drawer& (0+255),c
  4958  00D0E2  0ECD               	movlw	205
  4959  00D0E4                     u9847:
  4960  00D0E4  2EE8               	decfsz	wreg,f,c
  4961  00D0E6  D7FE               	bra	u9847
  4962  00D0E8  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4963  00D0EA  D7FC               	bra	u9847
  4964  00D0EC  F000               	nop	
  4965                           
  4966                           ;standbyMode.c: 1591: printf("Drawer number:");
  4967  00D0EE  0E25               	movlw	low STR_75
  4968  00D0F0  6E0D               	movwf	printf@f,c
  4969  00D0F2  0EFE               	movlw	high STR_75
  4970  00D0F4  6E0E               	movwf	printf@f+1,c
  4971  00D0F6  EC43  F06B         	call	_printf	;wreg free
  4972                           
  4973                           ;standbyMode.c: 1592: lcdInst(0xC0);;
  4974  00D0FA  0EC0               	movlw	192
  4975  00D0FC  EC61  F05E         	call	_lcdInst
  4976                           
  4977                           ;standbyMode.c: 1593: count = 0;
  4978  00D100  0E00               	movlw	0
  4979  00D102  6E33               	movwf	which_drawer@count+1,c
  4980  00D104  0E00               	movlw	0
  4981  00D106  6E32               	movwf	which_drawer@count,c
  4982                           
  4983                           ;standbyMode.c: 1594: sum = 0;
  4984  00D108  0E00               	movlw	0
  4985  00D10A  6E2F               	movwf	which_drawer@sum+1,c
  4986  00D10C  0E00               	movlw	0
  4987  00D10E  6E2E               	movwf	which_drawer@sum,c
  4988  00D110  D731               	goto	l738
  4989  00D112                     l746:
  4990                           
  4991                           ;standbyMode.c: 1595: }
  4992                           ;standbyMode.c: 1596: }
  4993                           ;standbyMode.c: 1598: if (backCheck == 100){
  4994  00D112  0E64               	movlw	100
  4995  00D114  1830               	xorwf	which_drawer@backCheck,w,c
  4996  00D116  1031               	iorwf	which_drawer@backCheck+1,w,c
  4997  00D118  A4D8               	btfss	status,2,c
  4998  00D11A  D005               	goto	l769
  4999                           
  5000                           ;standbyMode.c: 1599: return backCheck;
  5001  00D11C  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5002  00D120  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5003                           
  5004                           ;standbyMode.c: 1600: }
  5005  00D124  0012               	return	
  5006  00D126                     l769:
  5007                           
  5008                           ;standbyMode.c: 1601: else{
  5009                           ;standbyMode.c: 1602: unsigned int rand = decode_drawer(sum);
  5010  00D126  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5011  00D12A  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5012  00D12E  EC51  F062         	call	_decode_drawer	;wreg free
  5013  00D132  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5014  00D136  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5015                           
  5016                           ;standbyMode.c: 1603: return rand;
  5017  00D13A  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5018  00D13E  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5019  00D142  0012               	return	
  5020  00D144                     __end_of_which_drawer:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           postdec1	equ	0xFE5
  5031                           plusw1	equ	0xFE3
  5032                           fsr1l	equ	0xFE1
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           plusw2	equ	0xFDB
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _decode_drawer *****************
  5042 ;; Defined at:
  5043 ;;		line 1463 in file "standbyMode.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  drawer          2    0[COMRAM] unsigned int 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  returnValue     2    4[COMRAM] unsigned int 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  2    0[COMRAM] unsigned int 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:        6 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_which_drawer
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	text3
  5071  00C4A2                     __ptext3:
  5072                           	opt stack 0
  5073  00C4A2                     _decode_drawer:
  5074                           	opt stack 28
  5075                           
  5076                           ;standbyMode.c: 1464: unsigned int returnValue;
  5077                           ;standbyMode.c: 1466: switch(drawer){
  5078                           
  5079                           ;incstack = 0
  5080  00C4A2  D03A               	goto	l719
  5081  00C4A4                     
  5082                           ;standbyMode.c: 1469: returnValue = 1;
  5083  00C4A4  0E00               	movlw	0
  5084  00C4A6  6E06               	movwf	decode_drawer@returnValue+1,c
  5085  00C4A8  0E01               	movlw	1
  5086  00C4AA  D02F               	goto	L15
  5087  00C4AC                     
  5088                           ;standbyMode.c: 1474: returnValue = 2;
  5089  00C4AC  0E00               	movlw	0
  5090  00C4AE  6E06               	movwf	decode_drawer@returnValue+1,c
  5091  00C4B0  0E02               	movlw	2
  5092  00C4B2  D02B               	goto	L15
  5093  00C4B4                     
  5094                           ;standbyMode.c: 1479: returnValue = 3;
  5095  00C4B4  0E00               	movlw	0
  5096  00C4B6  6E06               	movwf	decode_drawer@returnValue+1,c
  5097  00C4B8  0E03               	movlw	3
  5098  00C4BA  D027               	goto	L15
  5099  00C4BC                     
  5100                           ;standbyMode.c: 1484: returnValue = 7;
  5101  00C4BC  0E00               	movlw	0
  5102  00C4BE  6E06               	movwf	decode_drawer@returnValue+1,c
  5103  00C4C0  0E07               	movlw	7
  5104  00C4C2  D023               	goto	L15
  5105  00C4C4                     
  5106                           ;standbyMode.c: 1489: returnValue = 8;
  5107  00C4C4  0E00               	movlw	0
  5108  00C4C6  6E06               	movwf	decode_drawer@returnValue+1,c
  5109  00C4C8  0E08               	movlw	8
  5110  00C4CA  D01F               	goto	L15
  5111  00C4CC                     
  5112                           ;standbyMode.c: 1494: returnValue = 9;
  5113  00C4CC  0E00               	movlw	0
  5114  00C4CE  6E06               	movwf	decode_drawer@returnValue+1,c
  5115  00C4D0  0E09               	movlw	9
  5116  00C4D2  D01B               	goto	L15
  5117  00C4D4                     
  5118                           ;standbyMode.c: 1499: returnValue = 10;
  5119  00C4D4  0E00               	movlw	0
  5120  00C4D6  6E06               	movwf	decode_drawer@returnValue+1,c
  5121  00C4D8  0E0A               	movlw	10
  5122  00C4DA  D017               	goto	L15
  5123  00C4DC                     
  5124                           ;standbyMode.c: 1504: returnValue = 11;
  5125  00C4DC  0E00               	movlw	0
  5126  00C4DE  6E06               	movwf	decode_drawer@returnValue+1,c
  5127  00C4E0  0E0B               	movlw	11
  5128  00C4E2  D013               	goto	L15
  5129  00C4E4                     
  5130                           ;standbyMode.c: 1509: returnValue = 12;
  5131  00C4E4  0E00               	movlw	0
  5132  00C4E6  6E06               	movwf	decode_drawer@returnValue+1,c
  5133  00C4E8  0E0C               	movlw	12
  5134  00C4EA  D00F               	goto	L15
  5135  00C4EC                     
  5136                           ;standbyMode.c: 1514: returnValue = 13;
  5137  00C4EC  0E00               	movlw	0
  5138  00C4EE  6E06               	movwf	decode_drawer@returnValue+1,c
  5139  00C4F0  0E0D               	movlw	13
  5140  00C4F2  D00B               	goto	L15
  5141  00C4F4                     
  5142                           ;standbyMode.c: 1519: returnValue = 14;
  5143  00C4F4  0E00               	movlw	0
  5144  00C4F6  6E06               	movwf	decode_drawer@returnValue+1,c
  5145  00C4F8  0E0E               	movlw	14
  5146  00C4FA  D007               	goto	L15
  5147  00C4FC                     
  5148                           ;standbyMode.c: 1524: returnValue = 15;
  5149  00C4FC  0E00               	movlw	0
  5150  00C4FE  6E06               	movwf	decode_drawer@returnValue+1,c
  5151  00C500  0E0F               	movlw	15
  5152  00C502  D003               	goto	L15
  5153  00C504                     
  5154                           ;standbyMode.c: 1529: returnValue = 16;
  5155  00C504  0E00               	movlw	0
  5156  00C506  6E06               	movwf	decode_drawer@returnValue+1,c
  5157  00C508  0E10               	movlw	16
  5158  00C50A                     L15:
  5159  00C50A  6E05               	movwf	decode_drawer@returnValue,c
  5160                           
  5161                           ;standbyMode.c: 1530: break;
  5162  00C50C  D036               	goto	l721
  5163  00C50E                     l734:
  5164                           
  5165                           ;standbyMode.c: 1533: returnValue = drawer;
  5166  00C50E  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  5167  00C512  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  5168                           
  5169                           ;standbyMode.c: 1535: }
  5170                           
  5171                           ;standbyMode.c: 1534: break;
  5172  00C516  D031               	goto	l721
  5173  00C518                     l719:
  5174  00C518  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  5175  00C51C  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  5176                           
  5177                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5178                           ; Switch size 1, requested type "space"
  5179                           ; Number of cases is 1, Range of values is 0 to 0
  5180                           ; switch strategies available:
  5181                           ; Name         Instructions Cycles
  5182                           ; simple_byte            4     3 (average)
  5183                           ;	Chosen strategy is simple_byte
  5184  00C520  5004               	movf	??_decode_drawer+1,w,c
  5185  00C522  0A00               	xorlw	0	; case 0
  5186  00C524  A4D8               	btfss	status,2,c
  5187  00C526  D7F3               	goto	l734
  5188                           
  5189                           ; Switch size 1, requested type "space"
  5190                           ; Number of cases is 13, Range of values is 1 to 40
  5191                           ; switch strategies available:
  5192                           ; Name         Instructions Cycles
  5193                           ; simple_byte           40    21 (average)
  5194                           ;	Chosen strategy is simple_byte
  5195  00C528  5003               	movf	??_decode_drawer,w,c
  5196  00C52A  0A01               	xorlw	1	; case 1
  5197  00C52C  B4D8               	btfsc	status,2,c
  5198  00C52E  D7BE               	goto	l722
  5199  00C530  0A03               	xorlw	3	; case 2
  5200  00C532  B4D8               	btfsc	status,2,c
  5201  00C534  D7BF               	goto	l723
  5202  00C536  0A0A               	xorlw	10	; case 8
  5203  00C538  B4D8               	btfsc	status,2,c
  5204  00C53A  D7C0               	goto	l724
  5205  00C53C  0A01               	xorlw	1	; case 9
  5206  00C53E  B4D8               	btfsc	status,2,c
  5207  00C540  D7C1               	goto	l725
  5208  00C542  0A03               	xorlw	3	; case 10
  5209  00C544  B4D8               	btfsc	status,2,c
  5210  00C546  D7C2               	goto	l726
  5211  00C548  0A1E               	xorlw	30	; case 20
  5212  00C54A  B4D8               	btfsc	status,2,c
  5213  00C54C  D7AB               	goto	l720
  5214  00C54E  0A01               	xorlw	1	; case 21
  5215  00C550  B4D8               	btfsc	status,2,c
  5216  00C552  D7C8               	goto	l729
  5217  00C554  0A03               	xorlw	3	; case 22
  5218  00C556  B4D8               	btfsc	status,2,c
  5219  00C558  D7C9               	goto	l730
  5220  00C55A  0A0E               	xorlw	14	; case 24
  5221  00C55C  B4D8               	btfsc	status,2,c
  5222  00C55E  D7CA               	goto	l731
  5223  00C560  0A01               	xorlw	1	; case 25
  5224  00C562  B4D8               	btfsc	status,2,c
  5225  00C564  D7CB               	goto	l732
  5226  00C566  0A03               	xorlw	3	; case 26
  5227  00C568  B4D8               	btfsc	status,2,c
  5228  00C56A  D7CC               	goto	l733
  5229  00C56C  0A3B               	xorlw	59	; case 33
  5230  00C56E  B4D8               	btfsc	status,2,c
  5231  00C570  D7B1               	goto	l727
  5232  00C572  0A09               	xorlw	9	; case 40
  5233  00C574  B4D8               	btfsc	status,2,c
  5234  00C576  D7B2               	goto	l728
  5235  00C578  D7CA               	goto	l734
  5236  00C57A                     l721:
  5237                           
  5238                           ;standbyMode.c: 1536: return returnValue;
  5239  00C57A  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  5240  00C57E  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  5241  00C582  0012               	return		;funcret
  5242  00C584                     __end_of_decode_drawer:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           postdec1	equ	0xFE5
  5253                           plusw1	equ	0xFE3
  5254                           fsr1l	equ	0xFE1
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           plusw2	equ	0xFDB
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _viewLogs *****************
  5264 ;; Defined at:
  5265 ;;		line 755 in file "standbyMode.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  keypress2       1   92[COMRAM] unsigned char 
  5270 ;;  logView         2   89[COMRAM] unsigned int 
  5271 ;;  returnVal       2   87[COMRAM] unsigned int 
  5272 ;;  checkLog        2   85[COMRAM] unsigned int 
  5273 ;;  logNumber       1   91[COMRAM] unsigned char 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  2   81[COMRAM] unsigned int 
  5276 ;; Registers used:
  5277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;Total ram usage:       12 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    4
  5290 ;; This function calls:
  5291 ;;		_displayLogs
  5292 ;;		_lcdInst
  5293 ;;		_printf
  5294 ;;		_putch
  5295 ;;		_readEEPROM
  5296 ;;		_verifyKeypress
  5297 ;; This function is called by:
  5298 ;;		_standbyMode
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text4
  5303  00D39A                     __ptext4:
  5304                           	opt stack 0
  5305  00D39A                     _viewLogs:
  5306                           	opt stack 25
  5307                           
  5308                           ;standbyMode.c: 757: unsigned char logNumber = readEEPROM(250);
  5309                           
  5310                           ;incstack = 0
  5311  00D39A  0EFA               	movlw	250
  5312  00D39C  EC6B  F05E         	call	_readEEPROM
  5313  00D3A0  6E5C               	movwf	viewLogs@logNumber,c
  5314                           
  5315                           ;standbyMode.c: 758: unsigned int logView = 0;
  5316  00D3A2  0E00               	movlw	0
  5317  00D3A4  6E5B               	movwf	viewLogs@logView+1,c
  5318  00D3A6  0E00               	movlw	0
  5319  00D3A8  6E5A               	movwf	viewLogs@logView,c
  5320                           
  5321                           ;standbyMode.c: 759: unsigned int checkLog = 0;
  5322  00D3AA  0E00               	movlw	0
  5323  00D3AC  6E57               	movwf	viewLogs@checkLog+1,c
  5324  00D3AE  0E00               	movlw	0
  5325  00D3B0  6E56               	movwf	viewLogs@checkLog,c
  5326                           
  5327                           ;standbyMode.c: 760: unsigned int returnVal = 0;
  5328  00D3B2  0E00               	movlw	0
  5329  00D3B4  6E59               	movwf	viewLogs@returnVal+1,c
  5330  00D3B6  0E00               	movlw	0
  5331  00D3B8  6E58               	movwf	viewLogs@returnVal,c
  5332                           
  5333                           ;standbyMode.c: 762: if (logNumber == 0){
  5334  00D3BA  505C               	movf	viewLogs@logNumber,w,c
  5335  00D3BC  A4D8               	btfss	status,2,c
  5336  00D3BE  D02B               	goto	l460
  5337                           
  5338                           ;standbyMode.c: 763: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5339  00D3C0  0E01               	movlw	1
  5340  00D3C2  EC61  F05E         	call	_lcdInst
  5341  00D3C6  0EC3               	movlw	195
  5342  00D3C8  6E54               	movwf	??_viewLogs& (0+255),c
  5343  00D3CA  0ECD               	movlw	205
  5344  00D3CC                     u9857:
  5345  00D3CC  2EE8               	decfsz	wreg,f,c
  5346  00D3CE  D7FE               	bra	u9857
  5347  00D3D0  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5348  00D3D2  D7FC               	bra	u9857
  5349  00D3D4  F000               	nop	
  5350                           
  5351                           ;standbyMode.c: 764: printf("No logs");
  5352  00D3D6  0E8C               	movlw	low STR_38
  5353  00D3D8  6E0D               	movwf	printf@f,c
  5354  00D3DA  0EFF               	movlw	high STR_38
  5355  00D3DC  6E0E               	movwf	printf@f+1,c
  5356  00D3DE  EC43  F06B         	call	_printf	;wreg free
  5357                           
  5358                           ;standbyMode.c: 765: lcdInst(0xC0);;
  5359  00D3E2  0EC0               	movlw	192
  5360  00D3E4  EC61  F05E         	call	_lcdInst
  5361                           
  5362                           ;standbyMode.c: 766: printf("available.");
  5363  00D3E8  0E14               	movlw	low STR_39
  5364  00D3EA  6E0D               	movwf	printf@f,c
  5365  00D3EC  0EFF               	movlw	high STR_39
  5366  00D3EE  6E0E               	movwf	printf@f+1,c
  5367  00D3F0  EC43  F06B         	call	_printf	;wreg free
  5368                           
  5369                           ;standbyMode.c: 767: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5370  00D3F4  0E66               	movlw	102
  5371  00D3F6  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5372  00D3F8  0E76               	movlw	118
  5373  00D3FA  6E54               	movwf	??_viewLogs& (0+255),c
  5374  00D3FC  0EC1               	movlw	193
  5375  00D3FE                     u9867:
  5376  00D3FE  2EE8               	decfsz	wreg,f,c
  5377  00D400  D7FE               	bra	u9867
  5378  00D402  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5379  00D404  D7FC               	bra	u9867
  5380  00D406  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5381  00D408  D7FA               	bra	u9867
  5382  00D40A  F000               	nop	
  5383                           
  5384                           ;standbyMode.c: 768: return 14;
  5385  00D40C  0E00               	movlw	0
  5386  00D40E  6E53               	movwf	?_viewLogs+1,c
  5387  00D410  0E0E               	movlw	14
  5388  00D412  6E52               	movwf	?_viewLogs,c
  5389                           
  5390                           ;standbyMode.c: 769: }
  5391  00D414  0012               	return	
  5392  00D416                     l460:
  5393                           
  5394                           ;standbyMode.c: 770: else {
  5395                           ;standbyMode.c: 771: if (logNumber == 1){
  5396  00D416  045C               	decf	viewLogs@logNumber,w,c
  5397  00D418  A4D8               	btfss	status,2,c
  5398  00D41A  D053               	goto	l463
  5399                           
  5400                           ;standbyMode.c: 772: logView = 1;
  5401  00D41C  0E00               	movlw	0
  5402  00D41E  6E5B               	movwf	viewLogs@logView+1,c
  5403  00D420  0E01               	movlw	1
  5404  00D422  6E5A               	movwf	viewLogs@logView,c
  5405                           
  5406                           ;standbyMode.c: 774: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5407  00D424  0E01               	movlw	1
  5408  00D426  EC61  F05E         	call	_lcdInst
  5409  00D42A  0EC3               	movlw	195
  5410  00D42C  6E54               	movwf	??_viewLogs& (0+255),c
  5411  00D42E  0ECD               	movlw	205
  5412  00D430                     u9877:
  5413  00D430  2EE8               	decfsz	wreg,f,c
  5414  00D432  D7FE               	bra	u9877
  5415  00D434  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5416  00D436  D7FC               	bra	u9877
  5417  00D438  F000               	nop	
  5418                           
  5419                           ;standbyMode.c: 775: printf("1 previous log");
  5420  00D43A  0E43               	movlw	low STR_40
  5421  00D43C  6E0D               	movwf	printf@f,c
  5422  00D43E  0EFE               	movlw	high STR_40
  5423  00D440  6E0E               	movwf	printf@f+1,c
  5424  00D442  EC43  F06B         	call	_printf	;wreg free
  5425                           
  5426                           ;standbyMode.c: 776: lcdInst(0xC0);;
  5427  00D446  0EC0               	movlw	192
  5428  00D448  EC61  F05E         	call	_lcdInst
  5429                           
  5430                           ;standbyMode.c: 777: printf("available.");
  5431  00D44C  0E14               	movlw	low STR_39
  5432  00D44E  6E0D               	movwf	printf@f,c
  5433  00D450  0EFF               	movlw	high STR_39
  5434  00D452  6E0E               	movwf	printf@f+1,c
  5435  00D454  EC43  F06B         	call	_printf	;wreg free
  5436                           
  5437                           ;standbyMode.c: 778: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5438  00D458  0E66               	movlw	102
  5439  00D45A  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5440  00D45C  0E76               	movlw	118
  5441  00D45E  6E54               	movwf	??_viewLogs& (0+255),c
  5442  00D460  0EC1               	movlw	193
  5443  00D462                     u9887:
  5444  00D462  2EE8               	decfsz	wreg,f,c
  5445  00D464  D7FE               	bra	u9887
  5446  00D466  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5447  00D468  D7FC               	bra	u9887
  5448  00D46A  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5449  00D46C  D7FA               	bra	u9887
  5450  00D46E  F000               	nop	
  5451                           
  5452                           ;standbyMode.c: 780: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5453  00D470  0E01               	movlw	1
  5454  00D472  EC61  F05E         	call	_lcdInst
  5455  00D476  0EC3               	movlw	195
  5456  00D478  6E54               	movwf	??_viewLogs& (0+255),c
  5457  00D47A  0ECD               	movlw	205
  5458  00D47C                     u9897:
  5459  00D47C  2EE8               	decfsz	wreg,f,c
  5460  00D47E  D7FE               	bra	u9897
  5461  00D480  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5462  00D482  D7FC               	bra	u9897
  5463  00D484  F000               	nop	
  5464                           
  5465                           ;standbyMode.c: 781: printf("Press any key to");
  5466  00D486  0E63               	movlw	low STR_42
  5467  00D488  6E0D               	movwf	printf@f,c
  5468  00D48A  0EFD               	movlw	high STR_42
  5469  00D48C  6E0E               	movwf	printf@f+1,c
  5470  00D48E  EC43  F06B         	call	_printf	;wreg free
  5471                           
  5472                           ;standbyMode.c: 782: lcdInst(0xC0);;
  5473  00D492  0EC0               	movlw	192
  5474  00D494  EC61  F05E         	call	_lcdInst
  5475                           
  5476                           ;standbyMode.c: 783: printf("move forward.");
  5477  00D498  0EB9               	movlw	low STR_43
  5478  00D49A  6E0D               	movwf	printf@f,c
  5479  00D49C  0EFE               	movlw	high STR_43
  5480  00D49E  6E0E               	movwf	printf@f+1,c
  5481  00D4A0  EC43  F06B         	call	_printf	;wreg free
  5482                           
  5483                           ;standbyMode.c: 784: _delay((unsigned long)((500)*(40000000/4000.0)));
  5484  00D4A4  0E1A               	movlw	26
  5485  00D4A6  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5486  00D4A8  0E5E               	movlw	94
  5487  00D4AA  6E54               	movwf	??_viewLogs& (0+255),c
  5488  00D4AC  0E6E               	movlw	110
  5489  00D4AE                     u9907:
  5490  00D4AE  2EE8               	decfsz	wreg,f,c
  5491  00D4B0  D7FE               	bra	u9907
  5492  00D4B2  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5493  00D4B4  D7FC               	bra	u9907
  5494  00D4B6  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5495  00D4B8  D7FA               	bra	u9907
  5496  00D4BA  D000               	nop2	
  5497  00D4BC                     
  5498                           ;standbyMode.c: 787: continue;
  5499  00D4BC  B281               	btfsc	3969,1,c	;volatile
  5500  00D4BE  D0D4               	goto	u6850
  5501  00D4C0  D7FD               	goto	l465
  5502  00D4C2                     l463:
  5503                           
  5504                           ;standbyMode.c: 790: else {
  5505                           ;standbyMode.c: 791: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5506  00D4C2  0E01               	movlw	1
  5507  00D4C4  EC61  F05E         	call	_lcdInst
  5508  00D4C8  0EC3               	movlw	195
  5509  00D4CA  6E54               	movwf	??_viewLogs& (0+255),c
  5510  00D4CC  0ECD               	movlw	205
  5511  00D4CE                     u9917:
  5512  00D4CE  2EE8               	decfsz	wreg,f,c
  5513  00D4D0  D7FE               	bra	u9917
  5514  00D4D2  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5515  00D4D4  D7FC               	bra	u9917
  5516  00D4D6  F000               	nop	
  5517                           
  5518                           ;standbyMode.c: 792: printf("%i previous logs", logNumber);
  5519  00D4D8  0E74               	movlw	low STR_44
  5520  00D4DA  6E0D               	movwf	printf@f,c
  5521  00D4DC  0EFD               	movlw	high STR_44
  5522  00D4DE  6E0E               	movwf	printf@f+1,c
  5523  00D4E0  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  5524  00D4E4  6A10               	clrf	?_printf+3,c
  5525  00D4E6  EC43  F06B         	call	_printf	;wreg free
  5526                           
  5527                           ;standbyMode.c: 793: lcdInst(0xC0);;
  5528  00D4EA  0EC0               	movlw	192
  5529  00D4EC  EC61  F05E         	call	_lcdInst
  5530                           
  5531                           ;standbyMode.c: 794: printf("available.");
  5532  00D4F0  0E14               	movlw	low STR_39
  5533  00D4F2  6E0D               	movwf	printf@f,c
  5534  00D4F4  0EFF               	movlw	high STR_39
  5535  00D4F6  6E0E               	movwf	printf@f+1,c
  5536  00D4F8  EC43  F06B         	call	_printf	;wreg free
  5537                           
  5538                           ;standbyMode.c: 795: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5539  00D4FC  0E66               	movlw	102
  5540  00D4FE  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5541  00D500  0E76               	movlw	118
  5542  00D502  6E54               	movwf	??_viewLogs& (0+255),c
  5543  00D504  0EC1               	movlw	193
  5544  00D506                     u9927:
  5545  00D506  2EE8               	decfsz	wreg,f,c
  5546  00D508  D7FE               	bra	u9927
  5547  00D50A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5548  00D50C  D7FC               	bra	u9927
  5549  00D50E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5550  00D510  D7FA               	bra	u9927
  5551  00D512  F000               	nop	
  5552                           
  5553                           ;standbyMode.c: 796: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5554  00D514  0E01               	movlw	1
  5555  00D516  EC61  F05E         	call	_lcdInst
  5556  00D51A  0EC3               	movlw	195
  5557  00D51C  6E54               	movwf	??_viewLogs& (0+255),c
  5558  00D51E  0ECD               	movlw	205
  5559  00D520                     u9937:
  5560  00D520  2EE8               	decfsz	wreg,f,c
  5561  00D522  D7FE               	bra	u9937
  5562  00D524  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5563  00D526  D7FC               	bra	u9937
  5564  00D528  F000               	nop	
  5565                           
  5566                           ;standbyMode.c: 797: printf("Please input log");
  5567  00D52A  0E41               	movlw	low STR_46
  5568  00D52C  6E0D               	movwf	printf@f,c
  5569  00D52E  0EFD               	movlw	high STR_46
  5570  00D530  6E0E               	movwf	printf@f+1,c
  5571  00D532  EC43  F06B         	call	_printf	;wreg free
  5572                           
  5573                           ;standbyMode.c: 798: lcdInst(0xC0);;
  5574  00D536  0EC0               	movlw	192
  5575  00D538  EC61  F05E         	call	_lcdInst
  5576                           
  5577                           ;standbyMode.c: 799: printf("number: ");
  5578  00D53C  0E73               	movlw	low STR_47
  5579  00D53E  6E0D               	movwf	printf@f,c
  5580  00D540  0EFF               	movlw	high STR_47
  5581  00D542  6E0E               	movwf	printf@f+1,c
  5582  00D544  EC43  F06B         	call	_printf	;wreg free
  5583  00D548                     
  5584                           ;standbyMode.c: 802: while(PORTBbits.RB1 == 0){ continue; }
  5585  00D548  A281               	btfss	3969,1,c	;volatile
  5586  00D54A  D7FE               	goto	l468
  5587                           
  5588                           ;standbyMode.c: 803: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  5589  00D54C  3881               	swapf	3969,w,c	;volatile
  5590  00D54E  0B0F               	andlw	15
  5591  00D550  0B0F               	andlw	15
  5592  00D552  6E5D               	movwf	viewLogs@keypress2,c
  5593  00D554  B281               	btfsc	3969,1,c	;volatile
  5594  00D556  D7FE               	goto	l473
  5595                           
  5596                           ;standbyMode.c: 806: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  5597  00D558  505D               	movf	viewLogs@keypress2,w,c
  5598  00D55A  B4D8               	btfsc	status,2,c
  5599  00D55C  D00B               	goto	u6820
  5600  00D55E  045D               	decf	viewLogs@keypress2,w,c
  5601  00D560  B4D8               	btfsc	status,2,c
  5602  00D562  D008               	goto	u6820
  5603  00D564  0E02               	movlw	2
  5604  00D566  185D               	xorwf	viewLogs@keypress2,w,c
  5605  00D568  B4D8               	btfsc	status,2,c
  5606  00D56A  D004               	goto	u6820
  5607  00D56C  0E04               	movlw	4
  5608  00D56E  185D               	xorwf	viewLogs@keypress2,w,c
  5609  00D570  A4D8               	btfss	status,2,c
  5610  00D572  D7EA               	goto	l468
  5611  00D574                     u6820:
  5612                           
  5613                           ;standbyMode.c: 807: checkLog = verifyKeypress(logNumber, keypress2);
  5614  00D574  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  5615  00D578  6A02               	clrf	verifyKeypress@keypress+1,c
  5616  00D57A  505C               	movf	viewLogs@logNumber,w,c
  5617  00D57C  EC6A  F05F         	call	_verifyKeypress
  5618  00D580  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  5619  00D584  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  5620                           
  5621                           ;standbyMode.c: 808: if (checkLog == 1){
  5622  00D588  0456               	decf	viewLogs@checkLog,w,c
  5623  00D58A  1057               	iorwf	viewLogs@checkLog+1,w,c
  5624  00D58C  A4D8               	btfss	status,2,c
  5625  00D58E  D7DC               	goto	l468
  5626                           
  5627                           ;standbyMode.c: 809: putch(keys[keypress2]);
  5628  00D590  505D               	movf	viewLogs@keypress2,w,c
  5629  00D592  0D01               	mullw	1
  5630  00D594  0EBB               	movlw	low _keys
  5631  00D596  24F3               	addwf	prodl,w,c
  5632  00D598  6EF6               	movwf	tblptrl,c
  5633  00D59A  0EFC               	movlw	high _keys
  5634  00D59C  20F4               	addwfc	prodh,w,c
  5635  00D59E  6EF7               	movwf	tblptrh,c
  5636  00D5A0                     	if	1	;There are 3 active tblptr bytes
  5637  00D5A0  6AF8               	clrf	tblptru,c
  5638  00D5A2  0E00               	movlw	low (__mediumconst shr (0+16))
  5639  00D5A4  22F8               	addwfc	tblptru,f,c
  5640  00D5A6                     	endif
  5641  00D5A6  0008               	tblrd		*
  5642  00D5A8  50F5               	movf	tablat,w,c
  5643  00D5AA  EC75  F05E         	call	_putch
  5644                           
  5645                           ;standbyMode.c: 810: if (keypress2 == 4){
  5646  00D5AE  0E04               	movlw	4
  5647  00D5B0  185D               	xorwf	viewLogs@keypress2,w,c
  5648  00D5B2  A4D8               	btfss	status,2,c
  5649  00D5B4  D004               	goto	l479
  5650                           
  5651                           ;standbyMode.c: 811: logView = keypress2;
  5652  00D5B6  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  5653  00D5BA  6A5B               	clrf	viewLogs@logView+1,c
  5654                           
  5655                           ;standbyMode.c: 812: }
  5656  00D5BC  D006               	goto	l480
  5657  00D5BE                     l479:
  5658                           
  5659                           ;standbyMode.c: 813: else{
  5660                           ;standbyMode.c: 814: logView = keypress2 + 1;
  5661  00D5BE  0E01               	movlw	1
  5662  00D5C0  245D               	addwf	viewLogs@keypress2,w,c
  5663  00D5C2  6E5A               	movwf	viewLogs@logView,c
  5664  00D5C4  6A5B               	clrf	viewLogs@logView+1,c
  5665  00D5C6  0E00               	movlw	0
  5666  00D5C8  225B               	addwfc	viewLogs@logView+1,f,c
  5667  00D5CA                     l480:
  5668                           
  5669                           ;standbyMode.c: 815: }
  5670                           ;standbyMode.c: 816: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5671  00D5CA  0E33               	movlw	51
  5672  00D5CC  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5673  00D5CE  0EBB               	movlw	187
  5674  00D5D0  6E54               	movwf	??_viewLogs& (0+255),c
  5675  00D5D2  0EE0               	movlw	224
  5676  00D5D4                     u9947:
  5677  00D5D4  2EE8               	decfsz	wreg,f,c
  5678  00D5D6  D7FE               	bra	u9947
  5679  00D5D8  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5680  00D5DA  D7FC               	bra	u9947
  5681  00D5DC  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5682  00D5DE  D7FA               	bra	u9947
  5683                           
  5684                           ;standbyMode.c: 818: }
  5685                           ;standbyMode.c: 819: }
  5686                           ;standbyMode.c: 820: }
  5687                           ;standbyMode.c: 822: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5688                           
  5689                           ;standbyMode.c: 817: break;
  5690  00D5E0  0E01               	movlw	1
  5691  00D5E2  EC61  F05E         	call	_lcdInst
  5692  00D5E6  0EC3               	movlw	195
  5693  00D5E8  6E54               	movwf	??_viewLogs& (0+255),c
  5694  00D5EA  0ECD               	movlw	205
  5695  00D5EC                     u9957:
  5696  00D5EC  2EE8               	decfsz	wreg,f,c
  5697  00D5EE  D7FE               	bra	u9957
  5698  00D5F0  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5699  00D5F2  D7FC               	bra	u9957
  5700  00D5F4  F000               	nop	
  5701                           
  5702                           ;standbyMode.c: 823: printf("Great!");
  5703  00D5F6  0EAB               	movlw	low STR_48
  5704  00D5F8  6E0D               	movwf	printf@f,c
  5705  00D5FA  0EFF               	movlw	high STR_48
  5706  00D5FC  6E0E               	movwf	printf@f+1,c
  5707  00D5FE  EC43  F06B         	call	_printf	;wreg free
  5708                           
  5709                           ;standbyMode.c: 824: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5710  00D602  0E33               	movlw	51
  5711  00D604  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5712  00D606  0EBB               	movlw	187
  5713  00D608  6E54               	movwf	??_viewLogs& (0+255),c
  5714  00D60A  0EE0               	movlw	224
  5715  00D60C                     u9967:
  5716  00D60C  2EE8               	decfsz	wreg,f,c
  5717  00D60E  D7FE               	bra	u9967
  5718  00D610  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5719  00D612  D7FC               	bra	u9967
  5720  00D614  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5721  00D616  D7FA               	bra	u9967
  5722                           
  5723                           ;standbyMode.c: 825: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5724  00D618  0E01               	movlw	1
  5725  00D61A  EC61  F05E         	call	_lcdInst
  5726  00D61E  0EC3               	movlw	195
  5727  00D620  6E54               	movwf	??_viewLogs& (0+255),c
  5728  00D622  0ECD               	movlw	205
  5729  00D624                     u9977:
  5730  00D624  2EE8               	decfsz	wreg,f,c
  5731  00D626  D7FE               	bra	u9977
  5732  00D628  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5733  00D62A  D7FC               	bra	u9977
  5734  00D62C  F000               	nop	
  5735                           
  5736                           ;standbyMode.c: 826: printf("Press any key to");
  5737  00D62E  0E63               	movlw	low STR_42
  5738  00D630  6E0D               	movwf	printf@f,c
  5739  00D632  0EFD               	movlw	high STR_42
  5740  00D634  6E0E               	movwf	printf@f+1,c
  5741  00D636  EC43  F06B         	call	_printf	;wreg free
  5742                           
  5743                           ;standbyMode.c: 827: lcdInst(0xC0);;
  5744  00D63A  0EC0               	movlw	192
  5745  00D63C  EC61  F05E         	call	_lcdInst
  5746                           
  5747                           ;standbyMode.c: 828: printf("move forward.");
  5748  00D640  0EB9               	movlw	low STR_43
  5749  00D642  6E0D               	movwf	printf@f,c
  5750  00D644  0EFE               	movlw	high STR_43
  5751  00D646  6E0E               	movwf	printf@f+1,c
  5752  00D648  EC43  F06B         	call	_printf	;wreg free
  5753                           
  5754                           ;standbyMode.c: 829: _delay((unsigned long)((500)*(40000000/4000.0)));
  5755  00D64C  0E1A               	movlw	26
  5756  00D64E  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5757  00D650  0E5E               	movlw	94
  5758  00D652  6E54               	movwf	??_viewLogs& (0+255),c
  5759  00D654  0E6E               	movlw	110
  5760  00D656                     u9987:
  5761  00D656  2EE8               	decfsz	wreg,f,c
  5762  00D658  D7FE               	bra	u9987
  5763  00D65A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5764  00D65C  D7FC               	bra	u9987
  5765  00D65E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5766  00D660  D7FA               	bra	u9987
  5767  00D662  D000               	nop2	
  5768  00D664                     
  5769                           ;standbyMode.c: 832: continue;
  5770  00D664  A281               	btfss	3969,1,c	;volatile
  5771  00D666  D7FE               	goto	l484
  5772  00D668                     u6850:
  5773                           
  5774                           ;standbyMode.c: 833: }
  5775                           ;standbyMode.c: 834: }
  5776                           ;standbyMode.c: 835: returnVal = displayLogs(logView);
  5777  00D668  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  5778  00D66C  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  5779  00D670  ECD5  F06F         	call	_displayLogs	;wreg free
  5780  00D674  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  5781  00D678  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  5782                           
  5783                           ;standbyMode.c: 836: return returnVal;
  5784  00D67C  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  5785  00D680  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  5786  00D684  0012               	return	
  5787  00D686                     __end_of_viewLogs:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           postdec1	equ	0xFE5
  5798                           plusw1	equ	0xFE3
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           plusw2	equ	0xFDB
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _verifyKeypress *****************
  5809 ;; Defined at:
  5810 ;;		line 741 in file "standbyMode.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  logNumber       1    wreg     unsigned char 
  5813 ;;  keypress        2    0[COMRAM] unsigned int 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  logNumber       1    4[COMRAM] unsigned char 
  5816 ;;  i               2    7[COMRAM] unsigned int 
  5817 ;;  returnVal       2    5[COMRAM] unsigned int 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  2    0[COMRAM] unsigned int 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;Total ram usage:        9 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; This function calls:
  5834 ;;		Nothing
  5835 ;; This function is called by:
  5836 ;;		_viewLogs
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text5
  5841  00BED4                     __ptext5:
  5842                           	opt stack 0
  5843  00BED4                     _verifyKeypress:
  5844                           	opt stack 28
  5845                           
  5846                           ;incstack = 0
  5847                           ;verifyKeypress@logNumber stored from wreg
  5848  00BED4  6E05               	movwf	verifyKeypress@logNumber,c
  5849                           
  5850                           ;standbyMode.c: 742: unsigned int i = 0;
  5851  00BED6  0E00               	movlw	0
  5852  00BED8  6E09               	movwf	verifyKeypress@i+1,c
  5853  00BEDA  0E00               	movlw	0
  5854  00BEDC  6E08               	movwf	verifyKeypress@i,c
  5855                           
  5856                           ;standbyMode.c: 743: unsigned int returnVal = 0;
  5857  00BEDE  0E00               	movlw	0
  5858  00BEE0  6E07               	movwf	verifyKeypress@returnVal+1,c
  5859  00BEE2  0E00               	movlw	0
  5860  00BEE4  6E06               	movwf	verifyKeypress@returnVal,c
  5861                           
  5862                           ;standbyMode.c: 745: for (i=0; i<logNumber; i++){
  5863  00BEE6  0E00               	movlw	0
  5864  00BEE8  6E09               	movwf	verifyKeypress@i+1,c
  5865  00BEEA  0E00               	movlw	0
  5866  00BEEC  6E08               	movwf	verifyKeypress@i,c
  5867  00BEEE  D00D               	goto	l453
  5868  00BEF0                     
  5869                           ;standbyMode.c: 746: if (keypress == i){
  5870  00BEF0  5008               	movf	verifyKeypress@i,w,c
  5871  00BEF2  1801               	xorwf	verifyKeypress@keypress,w,c
  5872  00BEF4  E108               	bnz	l5684
  5873  00BEF6  5009               	movf	verifyKeypress@i+1,w,c
  5874  00BEF8  1802               	xorwf	verifyKeypress@keypress+1,w,c
  5875  00BEFA  A4D8               	btfss	status,2,c
  5876  00BEFC  D004               	goto	l455
  5877                           
  5878                           ;standbyMode.c: 747: returnVal = 1;
  5879  00BEFE  0E00               	movlw	0
  5880  00BF00  6E07               	movwf	verifyKeypress@returnVal+1,c
  5881  00BF02  0E01               	movlw	1
  5882  00BF04  6E06               	movwf	verifyKeypress@returnVal,c
  5883  00BF06                     l455:
  5884  00BF06                     l5684:
  5885  00BF06  4A08               	infsnz	verifyKeypress@i,f,c
  5886  00BF08  2A09               	incf	verifyKeypress@i+1,f,c
  5887  00BF0A                     l453:
  5888  00BF0A  5005               	movf	verifyKeypress@logNumber,w,c
  5889  00BF0C  6E03               	movwf	??_verifyKeypress& (0+255),c
  5890  00BF0E  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  5891  00BF10  5003               	movf	??_verifyKeypress,w,c
  5892  00BF12  5C08               	subwf	verifyKeypress@i,w,c
  5893  00BF14  5004               	movf	??_verifyKeypress+1,w,c
  5894  00BF16  5809               	subwfb	verifyKeypress@i+1,w,c
  5895  00BF18  A0D8               	btfss	status,0,c
  5896  00BF1A  D7EA               	goto	l454
  5897                           
  5898                           ;standbyMode.c: 748: }
  5899                           ;standbyMode.c: 749: }
  5900                           ;standbyMode.c: 750: return returnVal;
  5901  00BF1C  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  5902  00BF20  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  5903  00BF24  0012               	return		;funcret
  5904  00BF26                     __end_of_verifyKeypress:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           postinc0	equ	0xFEE
  5913                           wreg	equ	0xFE8
  5914                           postdec1	equ	0xFE5
  5915                           plusw1	equ	0xFE3
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           plusw2	equ	0xFDB
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _displayLogs *****************
  5926 ;; Defined at:
  5927 ;;		line 916 in file "standbyMode.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  logNumber       2   40[COMRAM] unsigned int 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  n               2   79[COMRAM] unsigned int 
  5932 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  5933 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  5934 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  5935 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  5936 ;;  i               2   69[COMRAM] unsigned int 
  5937 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  5938 ;;  operationTim    2   65[COMRAM] unsigned int 
  5939 ;;  foodType        2   62[COMRAM] unsigned int 
  5940 ;;  dietType        2   60[COMRAM] unsigned int 
  5941 ;;  seconds         2   58[COMRAM] unsigned int 
  5942 ;;  minutes         2   56[COMRAM] unsigned int 
  5943 ;;  longPieces      2   54[COMRAM] unsigned int 
  5944 ;;  flatPieces      2   52[COMRAM] unsigned int 
  5945 ;;  roundPieces     2   50[COMRAM] unsigned int 
  5946 ;;  day             2   48[COMRAM] unsigned int 
  5947 ;;  month           2   46[COMRAM] unsigned int 
  5948 ;;  year            2   44[COMRAM] unsigned int 
  5949 ;;  keypress3       1   64[COMRAM] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  2   40[COMRAM] unsigned int 
  5952 ;; Registers used:
  5953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;Total ram usage:       41 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    3
  5966 ;; This function calls:
  5967 ;;		___lwdiv
  5968 ;;		___lwmod
  5969 ;;		___wmul
  5970 ;;		_lcdInst
  5971 ;;		_printf
  5972 ;;		_readEEPROM
  5973 ;; This function is called by:
  5974 ;;		_viewLogs
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text6
  5979  00DFAA                     __ptext6:
  5980                           	opt stack 0
  5981  00DFAA                     _displayLogs:
  5982                           	opt stack 25
  5983                           
  5984                           ;standbyMode.c: 917: unsigned int n = (logNumber-1)*35;
  5985                           
  5986                           ;incstack = 0
  5987  00DFAA  0EFF               	movlw	255
  5988  00DFAC  2429               	addwf	displayLogs@logNumber,w,c
  5989  00DFAE  6E01               	movwf	___wmul@multiplier,c
  5990  00DFB0  0EFF               	movlw	255
  5991  00DFB2  202A               	addwfc	displayLogs@logNumber+1,w,c
  5992  00DFB4  6E02               	movwf	___wmul@multiplier+1,c
  5993  00DFB6  0E00               	movlw	0
  5994  00DFB8  6E04               	movwf	___wmul@multiplicand+1,c
  5995  00DFBA  0E23               	movlw	35
  5996  00DFBC  6E03               	movwf	___wmul@multiplicand,c
  5997  00DFBE  ECD2  F05E         	call	___wmul	;wreg free
  5998  00DFC2  C001  F050         	movff	?___wmul,displayLogs@n
  5999  00DFC6  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6000                           
  6001                           ;standbyMode.c: 918: unsigned int year = readEEPROM(n);
  6002  00DFCA  5050               	movf	displayLogs@n,w,c
  6003  00DFCC  EC6B  F05E         	call	_readEEPROM
  6004  00DFD0  6E2B               	movwf	??_displayLogs& (0+255),c
  6005  00DFD2  502B               	movf	??_displayLogs,w,c
  6006  00DFD4  6E2D               	movwf	displayLogs@year,c
  6007  00DFD6  6A2E               	clrf	displayLogs@year+1,c
  6008                           
  6009                           ;standbyMode.c: 919: unsigned int month = readEEPROM(1+n);
  6010  00DFD8  2850               	incf	displayLogs@n,w,c
  6011  00DFDA  EC6B  F05E         	call	_readEEPROM
  6012  00DFDE  6E2B               	movwf	??_displayLogs& (0+255),c
  6013  00DFE0  502B               	movf	??_displayLogs,w,c
  6014  00DFE2  6E2F               	movwf	displayLogs@month,c
  6015  00DFE4  6A30               	clrf	displayLogs@month+1,c
  6016                           
  6017                           ;standbyMode.c: 920: unsigned int day = readEEPROM(2+n);
  6018  00DFE6  5050               	movf	displayLogs@n,w,c
  6019  00DFE8  0F02               	addlw	2
  6020  00DFEA  EC6B  F05E         	call	_readEEPROM
  6021  00DFEE  6E2B               	movwf	??_displayLogs& (0+255),c
  6022  00DFF0  502B               	movf	??_displayLogs,w,c
  6023  00DFF2  6E31               	movwf	displayLogs@day,c
  6024  00DFF4  6A32               	clrf	displayLogs@day+1,c
  6025                           
  6026                           ;standbyMode.c: 921: unsigned int operationTime = readEEPROM(3+n);
  6027  00DFF6  5050               	movf	displayLogs@n,w,c
  6028  00DFF8  0F03               	addlw	3
  6029  00DFFA  EC6B  F05E         	call	_readEEPROM
  6030  00DFFE  6E2B               	movwf	??_displayLogs& (0+255),c
  6031  00E000  502B               	movf	??_displayLogs,w,c
  6032  00E002  6E42               	movwf	displayLogs@operationTime,c
  6033  00E004  6A43               	clrf	displayLogs@operationTime+1,c
  6034                           
  6035                           ;standbyMode.c: 922: unsigned int roundPieces = readEEPROM(4+n);
  6036  00E006  5050               	movf	displayLogs@n,w,c
  6037  00E008  0F04               	addlw	4
  6038  00E00A  EC6B  F05E         	call	_readEEPROM
  6039  00E00E  6E2B               	movwf	??_displayLogs& (0+255),c
  6040  00E010  502B               	movf	??_displayLogs,w,c
  6041  00E012  6E33               	movwf	displayLogs@roundPieces,c
  6042  00E014  6A34               	clrf	displayLogs@roundPieces+1,c
  6043                           
  6044                           ;standbyMode.c: 923: unsigned int flatPieces = readEEPROM(5+n);
  6045  00E016  5050               	movf	displayLogs@n,w,c
  6046  00E018  0F05               	addlw	5
  6047  00E01A  EC6B  F05E         	call	_readEEPROM
  6048  00E01E  6E2B               	movwf	??_displayLogs& (0+255),c
  6049  00E020  502B               	movf	??_displayLogs,w,c
  6050  00E022  6E35               	movwf	displayLogs@flatPieces,c
  6051  00E024  6A36               	clrf	displayLogs@flatPieces+1,c
  6052                           
  6053                           ;standbyMode.c: 924: unsigned int longPieces = readEEPROM(6+n);
  6054  00E026  5050               	movf	displayLogs@n,w,c
  6055  00E028  0F06               	addlw	6
  6056  00E02A  EC6B  F05E         	call	_readEEPROM
  6057  00E02E  6E2B               	movwf	??_displayLogs& (0+255),c
  6058  00E030  502B               	movf	??_displayLogs,w,c
  6059  00E032  6E37               	movwf	displayLogs@longPieces,c
  6060  00E034  6A38               	clrf	displayLogs@longPieces+1,c
  6061                           
  6062                           ;standbyMode.c: 925: unsigned int markedDrawer1 = readEEPROM(7+n);
  6063  00E036  5050               	movf	displayLogs@n,w,c
  6064  00E038  0F07               	addlw	7
  6065  00E03A  EC6B  F05E         	call	_readEEPROM
  6066  00E03E  6E2B               	movwf	??_displayLogs& (0+255),c
  6067  00E040  502B               	movf	??_displayLogs,w,c
  6068  00E042  6E48               	movwf	displayLogs@markedDrawer1,c
  6069  00E044  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6070                           
  6071                           ;standbyMode.c: 926: unsigned int markedDrawer2 = readEEPROM(8+n);
  6072  00E046  5050               	movf	displayLogs@n,w,c
  6073  00E048  0F08               	addlw	8
  6074  00E04A  EC6B  F05E         	call	_readEEPROM
  6075  00E04E  6E2B               	movwf	??_displayLogs& (0+255),c
  6076  00E050  502B               	movf	??_displayLogs,w,c
  6077  00E052  6E4A               	movwf	displayLogs@markedDrawer2,c
  6078  00E054  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6079                           
  6080                           ;standbyMode.c: 927: unsigned int markedDrawer3 = readEEPROM(9+n);
  6081  00E056  5050               	movf	displayLogs@n,w,c
  6082  00E058  0F09               	addlw	9
  6083  00E05A  EC6B  F05E         	call	_readEEPROM
  6084  00E05E  6E2B               	movwf	??_displayLogs& (0+255),c
  6085  00E060  502B               	movf	??_displayLogs,w,c
  6086  00E062  6E4C               	movwf	displayLogs@markedDrawer3,c
  6087  00E064  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6088                           
  6089                           ;standbyMode.c: 928: unsigned int markedDrawer4 = readEEPROM(10+n);
  6090  00E066  5050               	movf	displayLogs@n,w,c
  6091  00E068  0F0A               	addlw	10
  6092  00E06A  EC6B  F05E         	call	_readEEPROM
  6093  00E06E  6E2B               	movwf	??_displayLogs& (0+255),c
  6094  00E070  502B               	movf	??_displayLogs,w,c
  6095  00E072  6E4E               	movwf	displayLogs@markedDrawer4,c
  6096  00E074  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6097                           
  6098                           ;standbyMode.c: 929: unsigned int drawerNumber = readEEPROM(11+n);
  6099  00E076  5050               	movf	displayLogs@n,w,c
  6100  00E078  0F0B               	addlw	11
  6101  00E07A  EC6B  F05E         	call	_readEEPROM
  6102  00E07E  6E2B               	movwf	??_displayLogs& (0+255),c
  6103  00E080  502B               	movf	??_displayLogs,w,c
  6104  00E082  6E44               	movwf	displayLogs@drawerNumber,c
  6105  00E084  6A45               	clrf	displayLogs@drawerNumber+1,c
  6106                           
  6107                           ;standbyMode.c: 930: unsigned int dietType = readEEPROM(12+n);
  6108  00E086  5050               	movf	displayLogs@n,w,c
  6109  00E088  0F0C               	addlw	12
  6110  00E08A  EC6B  F05E         	call	_readEEPROM
  6111  00E08E  6E2B               	movwf	??_displayLogs& (0+255),c
  6112  00E090  502B               	movf	??_displayLogs,w,c
  6113  00E092  6E3D               	movwf	displayLogs@dietType,c
  6114  00E094  6A3E               	clrf	displayLogs@dietType+1,c
  6115                           
  6116                           ;standbyMode.c: 931: unsigned int foodType = readEEPROM(13+n);
  6117  00E096  5050               	movf	displayLogs@n,w,c
  6118  00E098  0F0D               	addlw	13
  6119  00E09A  EC6B  F05E         	call	_readEEPROM
  6120  00E09E  6E2B               	movwf	??_displayLogs& (0+255),c
  6121  00E0A0  502B               	movf	??_displayLogs,w,c
  6122  00E0A2  6E3F               	movwf	displayLogs@foodType,c
  6123  00E0A4  6A40               	clrf	displayLogs@foodType+1,c
  6124                           
  6125                           ;standbyMode.c: 932: unsigned int i = 0;
  6126  00E0A6  0E00               	movlw	0
  6127  00E0A8  6E47               	movwf	displayLogs@i+1,c
  6128  00E0AA  0E00               	movlw	0
  6129  00E0AC  6E46               	movwf	displayLogs@i,c
  6130                           
  6131                           ;standbyMode.c: 934: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6132  00E0AE  0E01               	movlw	1
  6133  00E0B0  EC61  F05E         	call	_lcdInst
  6134  00E0B4  0EC3               	movlw	195
  6135  00E0B6  6E2B               	movwf	??_displayLogs& (0+255),c
  6136  00E0B8  0ECD               	movlw	205
  6137  00E0BA                     u9997:
  6138  00E0BA  2EE8               	decfsz	wreg,f,c
  6139  00E0BC  D7FE               	bra	u9997
  6140  00E0BE  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6141  00E0C0  D7FC               	bra	u9997
  6142  00E0C2  F000               	nop	
  6143                           
  6144                           ;standbyMode.c: 935: printf("Date:");
  6145  00E0C4  0EB2               	movlw	low STR_51
  6146  00E0C6  6E0D               	movwf	printf@f,c
  6147  00E0C8  0EFF               	movlw	high STR_51
  6148  00E0CA  6E0E               	movwf	printf@f+1,c
  6149  00E0CC  EC43  F06B         	call	_printf	;wreg free
  6150                           
  6151                           ;standbyMode.c: 936: lcdInst(0xC0);;
  6152  00E0D0  0EC0               	movlw	192
  6153  00E0D2  EC61  F05E         	call	_lcdInst
  6154                           
  6155                           ;standbyMode.c: 937: printf("%02i/%02i/%02i", year, month, day);
  6156  00E0D6  0E61               	movlw	low STR_52
  6157  00E0D8  6E0D               	movwf	printf@f,c
  6158  00E0DA  0EFE               	movlw	high STR_52
  6159  00E0DC  6E0E               	movwf	printf@f+1,c
  6160  00E0DE  C02D  F00F         	movff	displayLogs@year,?_printf+2
  6161  00E0E2  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  6162  00E0E6  C02F  F011         	movff	displayLogs@month,?_printf+4
  6163  00E0EA  C030  F012         	movff	displayLogs@month+1,?_printf+5
  6164  00E0EE  C031  F013         	movff	displayLogs@day,?_printf+6
  6165  00E0F2  C032  F014         	movff	displayLogs@day+1,?_printf+7
  6166  00E0F6  EC43  F06B         	call	_printf	;wreg free
  6167                           
  6168                           ;standbyMode.c: 938: _delay((unsigned long)((700)*(40000000/4000.0)));
  6169  00E0FA  0E24               	movlw	36
  6170  00E0FC  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6171  00E0FE  0E83               	movlw	131
  6172  00E100  6E2B               	movwf	??_displayLogs& (0+255),c
  6173  00E102  0ECF               	movlw	207
  6174  00E104                     u10007:
  6175  00E104  2EE8               	decfsz	wreg,f,c
  6176  00E106  D7FE               	bra	u10007
  6177  00E108  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6178  00E10A  D7FC               	bra	u10007
  6179  00E10C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6180  00E10E  D7FA               	bra	u10007
  6181  00E110  F000               	nop	
  6182  00E112                     
  6183                           ;standbyMode.c: 940: continue;
  6184  00E112  A281               	btfss	3969,1,c	;volatile
  6185  00E114  D7FE               	goto	l542
  6186                           
  6187                           ;standbyMode.c: 941: }
  6188                           ;standbyMode.c: 943: unsigned int minutes = operationTime/60;
  6189  00E116  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  6190  00E11A  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  6191  00E11E  0E00               	movlw	0
  6192  00E120  6E04               	movwf	___lwdiv@divisor+1,c
  6193  00E122  0E3C               	movlw	60
  6194  00E124  6E03               	movwf	___lwdiv@divisor,c
  6195  00E126  EC41  F05F         	call	___lwdiv	;wreg free
  6196  00E12A  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  6197  00E12E  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  6198                           
  6199                           ;standbyMode.c: 944: unsigned int seconds = operationTime%60;
  6200  00E132  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  6201  00E136  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  6202  00E13A  0E00               	movlw	0
  6203  00E13C  6E0B               	movwf	___lwmod@divisor+1,c
  6204  00E13E  0E3C               	movlw	60
  6205  00E140  6E0A               	movwf	___lwmod@divisor,c
  6206  00E142  ECFA  F05E         	call	___lwmod	;wreg free
  6207  00E146  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  6208  00E14A  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  6209                           
  6210                           ;standbyMode.c: 945: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6211  00E14E  0E01               	movlw	1
  6212  00E150  EC61  F05E         	call	_lcdInst
  6213  00E154  0EC3               	movlw	195
  6214  00E156  6E2B               	movwf	??_displayLogs& (0+255),c
  6215  00E158  0ECD               	movlw	205
  6216  00E15A                     u10017:
  6217  00E15A  2EE8               	decfsz	wreg,f,c
  6218  00E15C  D7FE               	bra	u10017
  6219  00E15E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6220  00E160  D7FC               	bra	u10017
  6221  00E162  F000               	nop	
  6222                           
  6223                           ;standbyMode.c: 946: printf("Operation time:");
  6224  00E164  0EB5               	movlw	low STR_53
  6225  00E166  6E0D               	movwf	printf@f,c
  6226  00E168  0EFD               	movlw	high STR_53
  6227  00E16A  6E0E               	movwf	printf@f+1,c
  6228  00E16C  EC43  F06B         	call	_printf	;wreg free
  6229                           
  6230                           ;standbyMode.c: 947: lcdInst(0xC0);;
  6231  00E170  0EC0               	movlw	192
  6232  00E172  EC61  F05E         	call	_lcdInst
  6233                           
  6234                           ;standbyMode.c: 948: printf("%i:%02i", minutes, seconds);
  6235  00E176  0E84               	movlw	low STR_54
  6236  00E178  6E0D               	movwf	printf@f,c
  6237  00E17A  0EFF               	movlw	high STR_54
  6238  00E17C  6E0E               	movwf	printf@f+1,c
  6239  00E17E  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  6240  00E182  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  6241  00E186  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  6242  00E18A  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  6243  00E18E  EC43  F06B         	call	_printf	;wreg free
  6244                           
  6245                           ;standbyMode.c: 949: _delay((unsigned long)((700)*(40000000/4000.0)));
  6246  00E192  0E24               	movlw	36
  6247  00E194  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6248  00E196  0E83               	movlw	131
  6249  00E198  6E2B               	movwf	??_displayLogs& (0+255),c
  6250  00E19A  0ECF               	movlw	207
  6251  00E19C                     u10027:
  6252  00E19C  2EE8               	decfsz	wreg,f,c
  6253  00E19E  D7FE               	bra	u10027
  6254  00E1A0  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6255  00E1A2  D7FC               	bra	u10027
  6256  00E1A4  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6257  00E1A6  D7FA               	bra	u10027
  6258  00E1A8  F000               	nop	
  6259  00E1AA                     
  6260                           ;standbyMode.c: 952: continue;
  6261  00E1AA  A281               	btfss	3969,1,c	;volatile
  6262  00E1AC  D7FE               	goto	l545
  6263                           
  6264                           ;standbyMode.c: 953: }
  6265                           ;standbyMode.c: 955: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6266  00E1AE  0E01               	movlw	1
  6267  00E1B0  EC61  F05E         	call	_lcdInst
  6268  00E1B4  0EC3               	movlw	195
  6269  00E1B6  6E2B               	movwf	??_displayLogs& (0+255),c
  6270  00E1B8  0ECD               	movlw	205
  6271  00E1BA                     u10037:
  6272  00E1BA  2EE8               	decfsz	wreg,f,c
  6273  00E1BC  D7FE               	bra	u10037
  6274  00E1BE  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6275  00E1C0  D7FC               	bra	u10037
  6276  00E1C2  F000               	nop	
  6277                           
  6278                           ;standbyMode.c: 956: printf("Marked drawers:");
  6279  00E1C4  0EC5               	movlw	low STR_55
  6280  00E1C6  6E0D               	movwf	printf@f,c
  6281  00E1C8  0EFD               	movlw	high STR_55
  6282  00E1CA  6E0E               	movwf	printf@f+1,c
  6283  00E1CC  EC43  F06B         	call	_printf	;wreg free
  6284                           
  6285                           ;standbyMode.c: 957: lcdInst(0xC0);;
  6286  00E1D0  0EC0               	movlw	192
  6287  00E1D2  EC61  F05E         	call	_lcdInst
  6288                           
  6289                           ;standbyMode.c: 959: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  6290  00E1D6  504E               	movf	displayLogs@markedDrawer4,w,c
  6291  00E1D8  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6292  00E1DA  A4D8               	btfss	status,2,c
  6293  00E1DC  D01E               	goto	l547
  6294  00E1DE  504C               	movf	displayLogs@markedDrawer3,w,c
  6295  00E1E0  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6296  00E1E2  A4D8               	btfss	status,2,c
  6297  00E1E4  D01A               	goto	l547
  6298  00E1E6  504A               	movf	displayLogs@markedDrawer2,w,c
  6299  00E1E8  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  6300  00E1EA  A4D8               	btfss	status,2,c
  6301  00E1EC  D016               	goto	l547
  6302                           
  6303                           ;standbyMode.c: 960: printf("%i", markedDrawer1);
  6304  00E1EE  0E5E               	movlw	low (STR_59+12)
  6305  00E1F0  6E0D               	movwf	printf@f,c
  6306  00E1F2  0EFE               	movlw	high (STR_59+12)
  6307  00E1F4  6E0E               	movwf	printf@f+1,c
  6308  00E1F6  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6309  00E1FA  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6310  00E1FE  EC43  F06B         	call	_printf	;wreg free
  6311                           
  6312                           ;standbyMode.c: 961: _delay((unsigned long)((700)*(40000000/4000.0)));
  6313  00E202  0E24               	movlw	36
  6314  00E204  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6315  00E206  0E83               	movlw	131
  6316  00E208  6E2B               	movwf	??_displayLogs& (0+255),c
  6317  00E20A  0ECF               	movlw	207
  6318  00E20C                     u10047:
  6319  00E20C  2EE8               	decfsz	wreg,f,c
  6320  00E20E  D7FE               	bra	u10047
  6321  00E210  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6322  00E212  D7FC               	bra	u10047
  6323  00E214  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6324  00E216  D7FA               	bra	u10047
  6325  00E218  D065               	goto	L18
  6326  00E21A                     l547:
  6327                           
  6328                           ;standbyMode.c: 964: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6329  00E21A  504E               	movf	displayLogs@markedDrawer4,w,c
  6330  00E21C  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6331  00E21E  A4D8               	btfss	status,2,c
  6332  00E220  D01E               	goto	l549
  6333  00E222  504C               	movf	displayLogs@markedDrawer3,w,c
  6334  00E224  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6335  00E226  A4D8               	btfss	status,2,c
  6336  00E228  D01A               	goto	l549
  6337                           
  6338                           ;standbyMode.c: 965: printf("%i, %i", markedDrawer1, markedDrawer2);
  6339  00E22A  0E5A               	movlw	low (STR_59+8)
  6340  00E22C  6E0D               	movwf	printf@f,c
  6341  00E22E  0EFE               	movlw	high (STR_59+8)
  6342  00E230  6E0E               	movwf	printf@f+1,c
  6343  00E232  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6344  00E236  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6345  00E23A  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6346  00E23E  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6347  00E242  EC43  F06B         	call	_printf	;wreg free
  6348                           
  6349                           ;standbyMode.c: 966: _delay((unsigned long)((700)*(40000000/4000.0)));
  6350  00E246  0E24               	movlw	36
  6351  00E248  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6352  00E24A  0E83               	movlw	131
  6353  00E24C  6E2B               	movwf	??_displayLogs& (0+255),c
  6354  00E24E  0ECF               	movlw	207
  6355  00E250                     u10057:
  6356  00E250  2EE8               	decfsz	wreg,f,c
  6357  00E252  D7FE               	bra	u10057
  6358  00E254  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6359  00E256  D7FC               	bra	u10057
  6360  00E258  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6361  00E25A  D7FA               	bra	u10057
  6362  00E25C  D043               	goto	L18
  6363  00E25E                     l549:
  6364                           
  6365                           ;standbyMode.c: 969: else if (markedDrawer4 == 0){
  6366  00E25E  504E               	movf	displayLogs@markedDrawer4,w,c
  6367  00E260  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6368  00E262  A4D8               	btfss	status,2,c
  6369  00E264  D01E               	goto	l551
  6370                           
  6371                           ;standbyMode.c: 970: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6372  00E266  0E56               	movlw	low (STR_59+4)
  6373  00E268  6E0D               	movwf	printf@f,c
  6374  00E26A  0EFE               	movlw	high (STR_59+4)
  6375  00E26C  6E0E               	movwf	printf@f+1,c
  6376  00E26E  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6377  00E272  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6378  00E276  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6379  00E27A  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6380  00E27E  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6381  00E282  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6382  00E286  EC43  F06B         	call	_printf	;wreg free
  6383                           
  6384                           ;standbyMode.c: 971: _delay((unsigned long)((700)*(40000000/4000.0)));
  6385  00E28A  0E24               	movlw	36
  6386  00E28C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6387  00E28E  0E83               	movlw	131
  6388  00E290  6E2B               	movwf	??_displayLogs& (0+255),c
  6389  00E292  0ECF               	movlw	207
  6390  00E294                     u10067:
  6391  00E294  2EE8               	decfsz	wreg,f,c
  6392  00E296  D7FE               	bra	u10067
  6393  00E298  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6394  00E29A  D7FC               	bra	u10067
  6395  00E29C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6396  00E29E  D7FA               	bra	u10067
  6397  00E2A0  D021               	goto	L18
  6398  00E2A2                     l551:
  6399                           
  6400                           ;standbyMode.c: 974: else {
  6401                           ;standbyMode.c: 975: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  6402  00E2A2  0E52               	movlw	low STR_59
  6403  00E2A4  6E0D               	movwf	printf@f,c
  6404  00E2A6  0EFE               	movlw	high STR_59
  6405  00E2A8  6E0E               	movwf	printf@f+1,c
  6406  00E2AA  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6407  00E2AE  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6408  00E2B2  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6409  00E2B6  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6410  00E2BA  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6411  00E2BE  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6412  00E2C2  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6413  00E2C6  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6414  00E2CA  EC43  F06B         	call	_printf	;wreg free
  6415                           
  6416                           ;standbyMode.c: 976: _delay((unsigned long)((700)*(40000000/4000.0)));
  6417  00E2CE  0E24               	movlw	36
  6418  00E2D0  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6419  00E2D2  0E83               	movlw	131
  6420  00E2D4  6E2B               	movwf	??_displayLogs& (0+255),c
  6421  00E2D6  0ECF               	movlw	207
  6422  00E2D8                     u10077:
  6423  00E2D8  2EE8               	decfsz	wreg,f,c
  6424  00E2DA  D7FE               	bra	u10077
  6425  00E2DC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6426  00E2DE  D7FC               	bra	u10077
  6427  00E2E0  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6428  00E2E2  D7FA               	bra	u10077
  6429  00E2E4                     L18:
  6430  00E2E4  F000               	nop	
  6431  00E2E6                     
  6432                           ;standbyMode.c: 980: continue;
  6433                           
  6434                           ;standbyMode.c: 977: }
  6435                           ;standbyMode.c: 979: while(PORTBbits.RB1 == 0){
  6436  00E2E6  A281               	btfss	3969,1,c	;volatile
  6437  00E2E8  D7FE               	goto	l552
  6438                           
  6439                           ;standbyMode.c: 981: }
  6440                           ;standbyMode.c: 983: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6441  00E2EA  0E01               	movlw	1
  6442  00E2EC  EC61  F05E         	call	_lcdInst
  6443  00E2F0  0EC3               	movlw	195
  6444  00E2F2  6E2B               	movwf	??_displayLogs& (0+255),c
  6445  00E2F4  0ECD               	movlw	205
  6446  00E2F6                     u10087:
  6447  00E2F6  2EE8               	decfsz	wreg,f,c
  6448  00E2F8  D7FE               	bra	u10087
  6449  00E2FA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6450  00E2FC  D7FC               	bra	u10087
  6451  00E2FE  F000               	nop	
  6452                           
  6453                           ;standbyMode.c: 984: printf("Remaining pieces:");
  6454  00E300  0EFC               	movlw	low STR_60
  6455  00E302  6E0D               	movwf	printf@f,c
  6456  00E304  0EFC               	movlw	high STR_60
  6457  00E306  6E0E               	movwf	printf@f+1,c
  6458  00E308  EC43  F06B         	call	_printf	;wreg free
  6459                           
  6460                           ;standbyMode.c: 985: lcdInst(0xC0);;
  6461  00E30C  0EC0               	movlw	192
  6462  00E30E  EC61  F05E         	call	_lcdInst
  6463                           
  6464                           ;standbyMode.c: 986: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  6465  00E312  0E52               	movlw	low STR_61
  6466  00E314  6E0D               	movwf	printf@f,c
  6467  00E316  0EFD               	movlw	high STR_61
  6468  00E318  6E0E               	movwf	printf@f+1,c
  6469  00E31A  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  6470  00E31E  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  6471  00E322  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  6472  00E326  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  6473  00E32A  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  6474  00E32E  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  6475  00E332  EC43  F06B         	call	_printf	;wreg free
  6476                           
  6477                           ;standbyMode.c: 987: _delay((unsigned long)((700)*(40000000/4000.0)));
  6478  00E336  0E24               	movlw	36
  6479  00E338  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6480  00E33A  0E83               	movlw	131
  6481  00E33C  6E2B               	movwf	??_displayLogs& (0+255),c
  6482  00E33E  0ECF               	movlw	207
  6483  00E340                     u10097:
  6484  00E340  2EE8               	decfsz	wreg,f,c
  6485  00E342  D7FE               	bra	u10097
  6486  00E344  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6487  00E346  D7FC               	bra	u10097
  6488  00E348  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6489  00E34A  D7FA               	bra	u10097
  6490  00E34C  F000               	nop	
  6491  00E34E                     
  6492                           ;standbyMode.c: 990: continue;
  6493  00E34E  A281               	btfss	3969,1,c	;volatile
  6494  00E350  D7FE               	goto	l557
  6495                           
  6496                           ;standbyMode.c: 991: }
  6497                           ;standbyMode.c: 993: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6498  00E352  0E01               	movlw	1
  6499  00E354  EC61  F05E         	call	_lcdInst
  6500  00E358  0EC3               	movlw	195
  6501  00E35A  6E2B               	movwf	??_displayLogs& (0+255),c
  6502  00E35C  0ECD               	movlw	205
  6503  00E35E                     u10107:
  6504  00E35E  2EE8               	decfsz	wreg,f,c
  6505  00E360  D7FE               	bra	u10107
  6506  00E362  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6507  00E364  D7FC               	bra	u10107
  6508  00E366  F000               	nop	
  6509                           
  6510                           ;standbyMode.c: 994: printf("Input Summary:");
  6511  00E368  0E34               	movlw	low STR_62
  6512  00E36A  6E0D               	movwf	printf@f,c
  6513  00E36C  0EFE               	movlw	high STR_62
  6514  00E36E  6E0E               	movwf	printf@f+1,c
  6515  00E370  EC43  F06B         	call	_printf	;wreg free
  6516                           
  6517                           ;standbyMode.c: 995: _delay((unsigned long)((700)*(40000000/4000.0)));
  6518  00E374  0E24               	movlw	36
  6519  00E376  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6520  00E378  0E83               	movlw	131
  6521  00E37A  6E2B               	movwf	??_displayLogs& (0+255),c
  6522  00E37C  0ECF               	movlw	207
  6523  00E37E                     u10117:
  6524  00E37E  2EE8               	decfsz	wreg,f,c
  6525  00E380  D7FE               	bra	u10117
  6526  00E382  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6527  00E384  D7FC               	bra	u10117
  6528  00E386  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6529  00E388  D7FA               	bra	u10117
  6530  00E38A  F000               	nop	
  6531  00E38C                     
  6532                           ;standbyMode.c: 998: continue;
  6533  00E38C  A281               	btfss	3969,1,c	;volatile
  6534  00E38E  D7FE               	goto	l560
  6535                           
  6536                           ;standbyMode.c: 999: }
  6537                           ;standbyMode.c: 1001: for (i=0; i<8; i++){
  6538  00E390  0E00               	movlw	0
  6539  00E392  6E47               	movwf	displayLogs@i+1,c
  6540  00E394  0E00               	movlw	0
  6541  00E396  6E46               	movwf	displayLogs@i,c
  6542  00E398  5047               	movf	displayLogs@i+1,w,c
  6543  00E39A  E105               	bnz	u6430
  6544  00E39C  0E08               	movlw	8
  6545  00E39E  5C46               	subwf	displayLogs@i,w,c
  6546  00E3A0  B0D8               	btfsc	status,0,c
  6547  00E3A2  D089               	goto	u6460
  6548  00E3A4  D001               	goto	l562
  6549  00E3A6                     u6430:
  6550  00E3A6  D087               	goto	u6460
  6551  00E3A8                     l562:
  6552                           
  6553                           ;standbyMode.c: 1002: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6554  00E3A8  0E01               	movlw	1
  6555  00E3AA  EC61  F05E         	call	_lcdInst
  6556  00E3AE  0EC3               	movlw	195
  6557  00E3B0  6E2B               	movwf	??_displayLogs& (0+255),c
  6558  00E3B2  0ECD               	movlw	205
  6559  00E3B4                     u10127:
  6560  00E3B4  2EE8               	decfsz	wreg,f,c
  6561  00E3B6  D7FE               	bra	u10127
  6562  00E3B8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6563  00E3BA  D7FC               	bra	u10127
  6564  00E3BC  F000               	nop	
  6565                           
  6566                           ;standbyMode.c: 1003: n = (logNumber-1)*35 + 3*i;
  6567  00E3BE  0EFF               	movlw	255
  6568  00E3C0  2429               	addwf	displayLogs@logNumber,w,c
  6569  00E3C2  6E01               	movwf	___wmul@multiplier,c
  6570  00E3C4  0EFF               	movlw	255
  6571  00E3C6  202A               	addwfc	displayLogs@logNumber+1,w,c
  6572  00E3C8  6E02               	movwf	___wmul@multiplier+1,c
  6573  00E3CA  0E00               	movlw	0
  6574  00E3CC  6E04               	movwf	___wmul@multiplicand+1,c
  6575  00E3CE  0E23               	movlw	35
  6576  00E3D0  6E03               	movwf	___wmul@multiplicand,c
  6577  00E3D2  ECD2  F05E         	call	___wmul	;wreg free
  6578  00E3D6  C001  F02B         	movff	?___wmul,??_displayLogs
  6579  00E3DA  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  6580  00E3DE  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  6581  00E3E2  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  6582  00E3E6  0E00               	movlw	0
  6583  00E3E8  6E04               	movwf	___wmul@multiplicand+1,c
  6584  00E3EA  0E03               	movlw	3
  6585  00E3EC  6E03               	movwf	___wmul@multiplicand,c
  6586  00E3EE  ECD2  F05E         	call	___wmul	;wreg free
  6587  00E3F2  5001               	movf	?___wmul,w,c
  6588  00E3F4  242B               	addwf	??_displayLogs,w,c
  6589  00E3F6  6E50               	movwf	displayLogs@n,c
  6590  00E3F8  5002               	movf	?___wmul+1,w,c
  6591  00E3FA  202C               	addwfc	??_displayLogs+1,w,c
  6592  00E3FC  6E51               	movwf	displayLogs@n+1,c
  6593                           
  6594                           ;standbyMode.c: 1004: drawerNumber = readEEPROM(11+n);
  6595  00E3FE  5050               	movf	displayLogs@n,w,c
  6596  00E400  0F0B               	addlw	11
  6597  00E402  EC6B  F05E         	call	_readEEPROM
  6598  00E406  6E2B               	movwf	??_displayLogs& (0+255),c
  6599  00E408  502B               	movf	??_displayLogs,w,c
  6600  00E40A  6E44               	movwf	displayLogs@drawerNumber,c
  6601  00E40C  6A45               	clrf	displayLogs@drawerNumber+1,c
  6602                           
  6603                           ;standbyMode.c: 1005: dietType = readEEPROM(12+n);
  6604  00E40E  5050               	movf	displayLogs@n,w,c
  6605  00E410  0F0C               	addlw	12
  6606  00E412  EC6B  F05E         	call	_readEEPROM
  6607  00E416  6E2B               	movwf	??_displayLogs& (0+255),c
  6608  00E418  502B               	movf	??_displayLogs,w,c
  6609  00E41A  6E3D               	movwf	displayLogs@dietType,c
  6610  00E41C  6A3E               	clrf	displayLogs@dietType+1,c
  6611                           
  6612                           ;standbyMode.c: 1006: foodType = readEEPROM(13+n);
  6613  00E41E  5050               	movf	displayLogs@n,w,c
  6614  00E420  0F0D               	addlw	13
  6615  00E422  EC6B  F05E         	call	_readEEPROM
  6616  00E426  6E2B               	movwf	??_displayLogs& (0+255),c
  6617  00E428  502B               	movf	??_displayLogs,w,c
  6618  00E42A  6E3F               	movwf	displayLogs@foodType,c
  6619  00E42C  6A40               	clrf	displayLogs@foodType+1,c
  6620                           
  6621                           ;standbyMode.c: 1007: if (drawerNumber != 0){
  6622  00E42E  5044               	movf	displayLogs@drawerNumber,w,c
  6623  00E430  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  6624  00E432  B4D8               	btfsc	status,2,c
  6625  00E434  D03B               	goto	u6450
  6626                           
  6627                           ;standbyMode.c: 1008: printf("Drawer %i:", drawerNumber);
  6628  00E436  0E35               	movlw	low STR_63
  6629  00E438  6E0D               	movwf	printf@f,c
  6630  00E43A  0EFF               	movlw	high STR_63
  6631  00E43C  6E0E               	movwf	printf@f+1,c
  6632  00E43E  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  6633  00E442  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  6634  00E446  EC43  F06B         	call	_printf	;wreg free
  6635                           
  6636                           ;standbyMode.c: 1009: lcdInst(0xC0);;
  6637  00E44A  0EC0               	movlw	192
  6638  00E44C  EC61  F05E         	call	_lcdInst
  6639                           
  6640                           ;standbyMode.c: 1010: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  6641  00E450  0ED6               	movlw	low STR_64
  6642  00E452  6E0D               	movwf	printf@f,c
  6643  00E454  0EFF               	movlw	high STR_64
  6644  00E456  6E0E               	movwf	printf@f+1,c
  6645  00E458  90D8               	bcf	status,0,c
  6646  00E45A  343D               	rlcf	displayLogs@dietType,w,c
  6647  00E45C  6ED9               	movwf	fsr2l,c
  6648  00E45E  343E               	rlcf	displayLogs@dietType+1,w,c
  6649  00E460  6EDA               	movwf	fsr2h,c
  6650  00E462  0E00               	movlw	low _inputs
  6651  00E464  26D9               	addwf	fsr2l,f,c
  6652  00E466  0E02               	movlw	high _inputs
  6653  00E468  22DA               	addwfc	fsr2h,f,c
  6654  00E46A  CFDE F00F          	movff	postinc2,?_printf+2
  6655  00E46E  CFDD F010          	movff	postdec2,?_printf+3
  6656  00E472  90D8               	bcf	status,0,c
  6657  00E474  343F               	rlcf	displayLogs@foodType,w,c
  6658  00E476  6ED9               	movwf	fsr2l,c
  6659  00E478  3440               	rlcf	displayLogs@foodType+1,w,c
  6660  00E47A  6EDA               	movwf	fsr2h,c
  6661  00E47C  0EE4               	movlw	low _foodInputs
  6662  00E47E  26D9               	addwf	fsr2l,f,c
  6663  00E480  0E00               	movlw	high _foodInputs
  6664  00E482  22DA               	addwfc	fsr2h,f,c
  6665  00E484  CFDE F011          	movff	postinc2,?_printf+4
  6666  00E488  CFDD F012          	movff	postdec2,?_printf+5
  6667  00E48C  EC43  F06B         	call	_printf	;wreg free
  6668                           
  6669                           ;standbyMode.c: 1011: _delay((unsigned long)((700)*(40000000/4000.0)));
  6670  00E490  0E24               	movlw	36
  6671  00E492  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6672  00E494  0E83               	movlw	131
  6673  00E496  6E2B               	movwf	??_displayLogs& (0+255),c
  6674  00E498  0ECF               	movlw	207
  6675  00E49A                     u10137:
  6676  00E49A  2EE8               	decfsz	wreg,f,c
  6677  00E49C  D7FE               	bra	u10137
  6678  00E49E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6679  00E4A0  D7FC               	bra	u10137
  6680  00E4A2  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6681  00E4A4  D7FA               	bra	u10137
  6682  00E4A6  F000               	nop	
  6683  00E4A8                     
  6684                           ;standbyMode.c: 1013: continue;
  6685  00E4A8  A281               	btfss	3969,1,c	;volatile
  6686  00E4AA  D7FE               	goto	l566
  6687  00E4AC                     u6450:
  6688  00E4AC  4A46               	infsnz	displayLogs@i,f,c
  6689  00E4AE  2A47               	incf	displayLogs@i+1,f,c
  6690  00E4B0  5047               	movf	displayLogs@i+1,w,c
  6691  00E4B2  E101               	bnz	l5828
  6692  00E4B4  D773               	goto	L19
  6693  00E4B6                     u6460:
  6694  00E4B6                     l5828:
  6695                           
  6696                           ;standbyMode.c: 1014: }
  6697                           ;standbyMode.c: 1015: }
  6698                           ;standbyMode.c: 1016: }
  6699                           ;standbyMode.c: 1018: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6700  00E4B6  0E01               	movlw	1
  6701  00E4B8  EC61  F05E         	call	_lcdInst
  6702  00E4BC  0EC3               	movlw	195
  6703  00E4BE  6E2B               	movwf	??_displayLogs& (0+255),c
  6704  00E4C0  0ECD               	movlw	205
  6705  00E4C2                     u10147:
  6706  00E4C2  2EE8               	decfsz	wreg,f,c
  6707  00E4C4  D7FE               	bra	u10147
  6708  00E4C6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6709  00E4C8  D7FC               	bra	u10147
  6710  00E4CA  F000               	nop	
  6711                           
  6712                           ;standbyMode.c: 1019: printf("Another log?");
  6713  00E4CC  0EEF               	movlw	low STR_65
  6714  00E4CE  6E0D               	movwf	printf@f,c
  6715  00E4D0  0EFE               	movlw	high STR_65
  6716  00E4D2  6E0E               	movwf	printf@f+1,c
  6717  00E4D4  EC43  F06B         	call	_printf	;wreg free
  6718                           
  6719                           ;standbyMode.c: 1020: lcdInst(0xC0);;
  6720  00E4D8  0EC0               	movlw	192
  6721  00E4DA  EC61  F05E         	call	_lcdInst
  6722                           
  6723                           ;standbyMode.c: 1021: printf("# = No, D = Yes");
  6724  00E4DE  0E05               	movlw	low STR_66
  6725  00E4E0  6E0D               	movwf	printf@f,c
  6726  00E4E2  0EFE               	movlw	high STR_66
  6727  00E4E4  6E0E               	movwf	printf@f+1,c
  6728  00E4E6  EC43  F06B         	call	_printf	;wreg free
  6729                           
  6730                           ;standbyMode.c: 1022: _delay((unsigned long)((700)*(40000000/4000.0)));
  6731  00E4EA  0E24               	movlw	36
  6732  00E4EC  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6733  00E4EE  0E83               	movlw	131
  6734  00E4F0  6E2B               	movwf	??_displayLogs& (0+255),c
  6735  00E4F2  0ECF               	movlw	207
  6736  00E4F4                     u10157:
  6737  00E4F4  2EE8               	decfsz	wreg,f,c
  6738  00E4F6  D7FE               	bra	u10157
  6739  00E4F8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6740  00E4FA  D7FC               	bra	u10157
  6741  00E4FC  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6742  00E4FE  D7FA               	bra	u10157
  6743  00E500  F000               	nop	
  6744  00E502  A281               	btfss	3969,1,c	;volatile
  6745  00E504  D7FE               	goto	l569
  6746                           
  6747                           ;standbyMode.c: 1025: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  6748  00E506  3881               	swapf	3969,w,c	;volatile
  6749  00E508  0B0F               	andlw	15
  6750  00E50A  0B0F               	andlw	15
  6751  00E50C  6E41               	movwf	displayLogs@keypress3,c
  6752  00E50E  B281               	btfsc	3969,1,c	;volatile
  6753  00E510  D7FE               	goto	l572
  6754                           
  6755                           ;standbyMode.c: 1027: return keypress3;
  6756  00E512  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  6757  00E516  6A2A               	clrf	?_displayLogs+1,c
  6758  00E518  0012               	return		;funcret
  6759  00E51A                     __end_of_displayLogs:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           postinc0	equ	0xFEE
  6768                           wreg	equ	0xFE8
  6769                           postdec1	equ	0xFE5
  6770                           plusw1	equ	0xFE3
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           plusw2	equ	0xFDB
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _shiftEEPROM *****************
  6781 ;; Defined at:
  6782 ;;		line 68 in file "EEPROMstorage.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  i               2    5[COMRAM] unsigned int 
  6787 ;;  temp            2    3[COMRAM] unsigned int 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;Total ram usage:        5 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    1
  6804 ;; This function calls:
  6805 ;;		_readEEPROM
  6806 ;;		_writeEEPROM
  6807 ;; This function is called by:
  6808 ;;		_standbyMode
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text7
  6813  00C190                     __ptext7:
  6814                           	opt stack 0
  6815  00C190                     _shiftEEPROM:
  6816                           	opt stack 28
  6817                           
  6818                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  6819                           
  6820                           ;incstack = 0
  6821  00C190  0E00               	movlw	0
  6822  00C192  6E07               	movwf	shiftEEPROM@i+1,c
  6823  00C194  0E00               	movlw	0
  6824  00C196  6E06               	movwf	shiftEEPROM@i,c
  6825                           
  6826                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  6827  00C198  0E00               	movlw	0
  6828  00C19A  6E05               	movwf	shiftEEPROM@temp+1,c
  6829  00C19C  0E00               	movlw	0
  6830  00C19E  6E04               	movwf	shiftEEPROM@temp,c
  6831                           
  6832                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  6833  00C1A0  0E00               	movlw	0
  6834  00C1A2  6E07               	movwf	shiftEEPROM@i+1,c
  6835  00C1A4  0E46               	movlw	70
  6836  00C1A6  6E06               	movwf	shiftEEPROM@i,c
  6837  00C1A8                     l7192:
  6838  00C1A8  5007               	movf	shiftEEPROM@i+1,w,c
  6839  00C1AA  E114               	bnz	l7202
  6840  00C1AC  0E69               	movlw	105
  6841  00C1AE  5C06               	subwf	shiftEEPROM@i,w,c
  6842  00C1B0  B0D8               	btfsc	status,0,c
  6843  00C1B2  D010               	goto	u8600
  6844                           
  6845                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  6846  00C1B4  5006               	movf	shiftEEPROM@i,w,c
  6847  00C1B6  EC6B  F05E         	call	_readEEPROM
  6848  00C1BA  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6849  00C1BC  5003               	movf	??_shiftEEPROM,w,c
  6850  00C1BE  6E04               	movwf	shiftEEPROM@temp,c
  6851  00C1C0  6A05               	clrf	shiftEEPROM@temp+1,c
  6852                           
  6853                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  6854  00C1C2  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6855  00C1C6  5006               	movf	shiftEEPROM@i,w,c
  6856  00C1C8  0F23               	addlw	35
  6857  00C1CA  ECE5  F05E         	call	_writeEEPROM
  6858  00C1CE  4A06               	infsnz	shiftEEPROM@i,f,c
  6859  00C1D0  2A07               	incf	shiftEEPROM@i+1,f,c
  6860  00C1D2  D7EA               	goto	l7192
  6861  00C1D4                     u8600:
  6862  00C1D4                     l7202:
  6863                           
  6864                           ;EEPROMstorage.c: 74: }
  6865                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  6866  00C1D4  0E00               	movlw	0
  6867  00C1D6  6E07               	movwf	shiftEEPROM@i+1,c
  6868  00C1D8  0E23               	movlw	35
  6869  00C1DA  6E06               	movwf	shiftEEPROM@i,c
  6870  00C1DC                     l7204:
  6871  00C1DC  5007               	movf	shiftEEPROM@i+1,w,c
  6872  00C1DE  E114               	bnz	l7214
  6873  00C1E0  0E46               	movlw	70
  6874  00C1E2  5C06               	subwf	shiftEEPROM@i,w,c
  6875  00C1E4  B0D8               	btfsc	status,0,c
  6876  00C1E6  D010               	goto	u8620
  6877                           
  6878                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  6879  00C1E8  5006               	movf	shiftEEPROM@i,w,c
  6880  00C1EA  EC6B  F05E         	call	_readEEPROM
  6881  00C1EE  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6882  00C1F0  5003               	movf	??_shiftEEPROM,w,c
  6883  00C1F2  6E04               	movwf	shiftEEPROM@temp,c
  6884  00C1F4  6A05               	clrf	shiftEEPROM@temp+1,c
  6885                           
  6886                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  6887  00C1F6  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6888  00C1FA  5006               	movf	shiftEEPROM@i,w,c
  6889  00C1FC  0F23               	addlw	35
  6890  00C1FE  ECE5  F05E         	call	_writeEEPROM
  6891  00C202  4A06               	infsnz	shiftEEPROM@i,f,c
  6892  00C204  2A07               	incf	shiftEEPROM@i+1,f,c
  6893  00C206  D7EA               	goto	l7204
  6894  00C208                     u8620:
  6895  00C208                     l7214:
  6896                           
  6897                           ;EEPROMstorage.c: 79: }
  6898                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  6899  00C208  0E00               	movlw	0
  6900  00C20A  6E07               	movwf	shiftEEPROM@i+1,c
  6901  00C20C  0E00               	movlw	0
  6902  00C20E  6E06               	movwf	shiftEEPROM@i,c
  6903  00C210                     l7216:
  6904  00C210  5007               	movf	shiftEEPROM@i+1,w,c
  6905  00C212  E114               	bnz	l901
  6906  00C214  0E23               	movlw	35
  6907  00C216  5C06               	subwf	shiftEEPROM@i,w,c
  6908  00C218  B0D8               	btfsc	status,0,c
  6909  00C21A  0012               	return	
  6910                           
  6911                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  6912  00C21C  5006               	movf	shiftEEPROM@i,w,c
  6913  00C21E  EC6B  F05E         	call	_readEEPROM
  6914  00C222  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6915  00C224  5003               	movf	??_shiftEEPROM,w,c
  6916  00C226  6E04               	movwf	shiftEEPROM@temp,c
  6917  00C228  6A05               	clrf	shiftEEPROM@temp+1,c
  6918                           
  6919                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  6920  00C22A  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6921  00C22E  5006               	movf	shiftEEPROM@i,w,c
  6922  00C230  0F23               	addlw	35
  6923  00C232  ECE5  F05E         	call	_writeEEPROM
  6924  00C236  4A06               	infsnz	shiftEEPROM@i,f,c
  6925  00C238  2A07               	incf	shiftEEPROM@i+1,f,c
  6926  00C23A  D7EA               	goto	l7216
  6927  00C23C                     l901:
  6928  00C23C  0012               	return		;funcret
  6929  00C23E                     __end_of_shiftEEPROM:
  6930                           	opt stack 0
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           postdec1	equ	0xFE5
  6940                           plusw1	equ	0xFE3
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           plusw2	equ	0xFDB
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function _printFoodInput *****************
  6951 ;; Defined at:
  6952 ;;		line 841 in file "standbyMode.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  food            2    0[COMRAM] unsigned int 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;		None
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  2    0[COMRAM] unsigned int 
  6959 ;; Registers used:
  6960 ;;		wreg, status,2, status,0
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;Total ram usage:        2 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_standbyMode
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text8
  6980  00D144                     __ptext8:
  6981                           	opt stack 0
  6982  00D144                     _printFoodInput:
  6983                           	opt stack 29
  6984                           
  6985                           ;standbyMode.c: 844: if (food == 1 || food == 3 || food == 5){
  6986                           
  6987                           ;incstack = 0
  6988  00D144  0401               	decf	printFoodInput@food,w,c
  6989  00D146  1002               	iorwf	printFoodInput@food+1,w,c
  6990  00D148  B4D8               	btfsc	status,2,c
  6991  00D14A  D00A               	goto	u6880
  6992  00D14C  0E03               	movlw	3
  6993  00D14E  1801               	xorwf	printFoodInput@food,w,c
  6994  00D150  1002               	iorwf	printFoodInput@food+1,w,c
  6995  00D152  B4D8               	btfsc	status,2,c
  6996  00D154  D005               	goto	u6880
  6997  00D156  0E05               	movlw	5
  6998  00D158  1801               	xorwf	printFoodInput@food,w,c
  6999  00D15A  1002               	iorwf	printFoodInput@food+1,w,c
  7000  00D15C  A4D8               	btfss	status,2,c
  7001  00D15E  D005               	goto	l488
  7002  00D160                     u6880:
  7003                           
  7004                           ;standbyMode.c: 845: return 0;
  7005  00D160  0E00               	movlw	0
  7006  00D162  6E02               	movwf	?_printFoodInput+1,c
  7007  00D164  0E00               	movlw	0
  7008  00D166  6E01               	movwf	?_printFoodInput,c
  7009                           
  7010                           ;standbyMode.c: 846: }
  7011  00D168  0012               	return	
  7012  00D16A                     l488:
  7013                           
  7014                           ;standbyMode.c: 849: else if (food == 2 || food == 4 || food == 6){
  7015  00D16A  0E02               	movlw	2
  7016  00D16C  1801               	xorwf	printFoodInput@food,w,c
  7017  00D16E  1002               	iorwf	printFoodInput@food+1,w,c
  7018  00D170  B4D8               	btfsc	status,2,c
  7019  00D172  D00A               	goto	u6910
  7020  00D174  0E04               	movlw	4
  7021  00D176  1801               	xorwf	printFoodInput@food,w,c
  7022  00D178  1002               	iorwf	printFoodInput@food+1,w,c
  7023  00D17A  B4D8               	btfsc	status,2,c
  7024  00D17C  D005               	goto	u6910
  7025  00D17E  0E06               	movlw	6
  7026  00D180  1801               	xorwf	printFoodInput@food,w,c
  7027  00D182  1002               	iorwf	printFoodInput@food+1,w,c
  7028  00D184  A4D8               	btfss	status,2,c
  7029  00D186  D005               	goto	l493
  7030  00D188                     u6910:
  7031                           
  7032                           ;standbyMode.c: 850: return 1;
  7033  00D188  0E00               	movlw	0
  7034  00D18A  6E02               	movwf	?_printFoodInput+1,c
  7035  00D18C  0E01               	movlw	1
  7036  00D18E  6E01               	movwf	?_printFoodInput,c
  7037                           
  7038                           ;standbyMode.c: 851: }
  7039  00D190  0012               	return	
  7040  00D192                     l493:
  7041                           
  7042                           ;standbyMode.c: 854: else if (food == 7){
  7043  00D192  0E07               	movlw	7
  7044  00D194  1801               	xorwf	printFoodInput@food,w,c
  7045  00D196  1002               	iorwf	printFoodInput@food+1,w,c
  7046  00D198  A4D8               	btfss	status,2,c
  7047  00D19A  D005               	goto	l497
  7048                           
  7049                           ;standbyMode.c: 855: return 2;
  7050  00D19C  0E00               	movlw	0
  7051  00D19E  6E02               	movwf	?_printFoodInput+1,c
  7052  00D1A0  0E02               	movlw	2
  7053  00D1A2  6E01               	movwf	?_printFoodInput,c
  7054                           
  7055                           ;standbyMode.c: 856: }
  7056  00D1A4  0012               	return	
  7057  00D1A6                     l497:
  7058                           
  7059                           ;standbyMode.c: 859: else if (food == 8 || food == 12 || food == 17){
  7060  00D1A6  0E08               	movlw	8
  7061  00D1A8  1801               	xorwf	printFoodInput@food,w,c
  7062  00D1AA  1002               	iorwf	printFoodInput@food+1,w,c
  7063  00D1AC  B4D8               	btfsc	status,2,c
  7064  00D1AE  D00A               	goto	u6950
  7065  00D1B0  0E0C               	movlw	12
  7066  00D1B2  1801               	xorwf	printFoodInput@food,w,c
  7067  00D1B4  1002               	iorwf	printFoodInput@food+1,w,c
  7068  00D1B6  B4D8               	btfsc	status,2,c
  7069  00D1B8  D005               	goto	u6950
  7070  00D1BA  0E11               	movlw	17
  7071  00D1BC  1801               	xorwf	printFoodInput@food,w,c
  7072  00D1BE  1002               	iorwf	printFoodInput@food+1,w,c
  7073  00D1C0  A4D8               	btfss	status,2,c
  7074  00D1C2  D005               	goto	l499
  7075  00D1C4                     u6950:
  7076                           
  7077                           ;standbyMode.c: 860: return 3;
  7078  00D1C4  0E00               	movlw	0
  7079  00D1C6  6E02               	movwf	?_printFoodInput+1,c
  7080  00D1C8  0E03               	movlw	3
  7081  00D1CA  6E01               	movwf	?_printFoodInput,c
  7082                           
  7083                           ;standbyMode.c: 861: }
  7084  00D1CC  0012               	return	
  7085  00D1CE                     l499:
  7086                           
  7087                           ;standbyMode.c: 864: else if (food == 9 || food == 13 || food == 18){
  7088  00D1CE  0E09               	movlw	9
  7089  00D1D0  1801               	xorwf	printFoodInput@food,w,c
  7090  00D1D2  1002               	iorwf	printFoodInput@food+1,w,c
  7091  00D1D4  B4D8               	btfsc	status,2,c
  7092  00D1D6  D00A               	goto	u6980
  7093  00D1D8  0E0D               	movlw	13
  7094  00D1DA  1801               	xorwf	printFoodInput@food,w,c
  7095  00D1DC  1002               	iorwf	printFoodInput@food+1,w,c
  7096  00D1DE  B4D8               	btfsc	status,2,c
  7097  00D1E0  D005               	goto	u6980
  7098  00D1E2  0E12               	movlw	18
  7099  00D1E4  1801               	xorwf	printFoodInput@food,w,c
  7100  00D1E6  1002               	iorwf	printFoodInput@food+1,w,c
  7101  00D1E8  A4D8               	btfss	status,2,c
  7102  00D1EA  D005               	goto	l503
  7103  00D1EC                     u6980:
  7104                           
  7105                           ;standbyMode.c: 865: return 4;
  7106  00D1EC  0E00               	movlw	0
  7107  00D1EE  6E02               	movwf	?_printFoodInput+1,c
  7108  00D1F0  0E04               	movlw	4
  7109  00D1F2  6E01               	movwf	?_printFoodInput,c
  7110                           
  7111                           ;standbyMode.c: 866: }
  7112  00D1F4  0012               	return	
  7113  00D1F6                     l503:
  7114                           
  7115                           ;standbyMode.c: 869: else if (food == 14 || food == 19){
  7116  00D1F6  0E0E               	movlw	14
  7117  00D1F8  1801               	xorwf	printFoodInput@food,w,c
  7118  00D1FA  1002               	iorwf	printFoodInput@food+1,w,c
  7119  00D1FC  B4D8               	btfsc	status,2,c
  7120  00D1FE  D005               	goto	u7000
  7121  00D200  0E13               	movlw	19
  7122  00D202  1801               	xorwf	printFoodInput@food,w,c
  7123  00D204  1002               	iorwf	printFoodInput@food+1,w,c
  7124  00D206  A4D8               	btfss	status,2,c
  7125  00D208  D005               	goto	l507
  7126  00D20A                     u7000:
  7127                           
  7128                           ;standbyMode.c: 870: return 5;
  7129  00D20A  0E00               	movlw	0
  7130  00D20C  6E02               	movwf	?_printFoodInput+1,c
  7131  00D20E  0E05               	movlw	5
  7132  00D210  6E01               	movwf	?_printFoodInput,c
  7133                           
  7134                           ;standbyMode.c: 871: }
  7135  00D212  0012               	return	
  7136  00D214                     l507:
  7137                           
  7138                           ;standbyMode.c: 874: else if (food == 10 || food == 15 || food == 20){
  7139  00D214  0E0A               	movlw	10
  7140  00D216  1801               	xorwf	printFoodInput@food,w,c
  7141  00D218  1002               	iorwf	printFoodInput@food+1,w,c
  7142  00D21A  B4D8               	btfsc	status,2,c
  7143  00D21C  D00A               	goto	u7030
  7144  00D21E  0E0F               	movlw	15
  7145  00D220  1801               	xorwf	printFoodInput@food,w,c
  7146  00D222  1002               	iorwf	printFoodInput@food+1,w,c
  7147  00D224  B4D8               	btfsc	status,2,c
  7148  00D226  D005               	goto	u7030
  7149  00D228  0E14               	movlw	20
  7150  00D22A  1801               	xorwf	printFoodInput@food,w,c
  7151  00D22C  1002               	iorwf	printFoodInput@food+1,w,c
  7152  00D22E  A4D8               	btfss	status,2,c
  7153  00D230  D005               	goto	l511
  7154  00D232                     u7030:
  7155                           
  7156                           ;standbyMode.c: 875: return 6;
  7157  00D232  0E00               	movlw	0
  7158  00D234  6E02               	movwf	?_printFoodInput+1,c
  7159  00D236  0E06               	movlw	6
  7160  00D238  6E01               	movwf	?_printFoodInput,c
  7161                           
  7162                           ;standbyMode.c: 876: }
  7163  00D23A  0012               	return	
  7164  00D23C                     l511:
  7165                           
  7166                           ;standbyMode.c: 879: else if (food == 11 || food == 16 || food == 21){
  7167  00D23C  0E0B               	movlw	11
  7168  00D23E  1801               	xorwf	printFoodInput@food,w,c
  7169  00D240  1002               	iorwf	printFoodInput@food+1,w,c
  7170  00D242  B4D8               	btfsc	status,2,c
  7171  00D244  D00A               	goto	u7060
  7172  00D246  0E10               	movlw	16
  7173  00D248  1801               	xorwf	printFoodInput@food,w,c
  7174  00D24A  1002               	iorwf	printFoodInput@food+1,w,c
  7175  00D24C  B4D8               	btfsc	status,2,c
  7176  00D24E  D005               	goto	u7060
  7177  00D250  0E15               	movlw	21
  7178  00D252  1801               	xorwf	printFoodInput@food,w,c
  7179  00D254  1002               	iorwf	printFoodInput@food+1,w,c
  7180  00D256  A4D8               	btfss	status,2,c
  7181  00D258  D005               	goto	l515
  7182  00D25A                     u7060:
  7183                           
  7184                           ;standbyMode.c: 880: return 7;
  7185  00D25A  0E00               	movlw	0
  7186  00D25C  6E02               	movwf	?_printFoodInput+1,c
  7187  00D25E  0E07               	movlw	7
  7188  00D260  6E01               	movwf	?_printFoodInput,c
  7189                           
  7190                           ;standbyMode.c: 881: }
  7191  00D262  0012               	return	
  7192  00D264                     l515:
  7193                           
  7194                           ;standbyMode.c: 884: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  7195  00D264  0E16               	movlw	22
  7196  00D266  1801               	xorwf	printFoodInput@food,w,c
  7197  00D268  1002               	iorwf	printFoodInput@food+1,w,c
  7198  00D26A  B4D8               	btfsc	status,2,c
  7199  00D26C  D01E               	goto	u7130
  7200  00D26E  0E18               	movlw	24
  7201  00D270  1801               	xorwf	printFoodInput@food,w,c
  7202  00D272  1002               	iorwf	printFoodInput@food+1,w,c
  7203  00D274  B4D8               	btfsc	status,2,c
  7204  00D276  D019               	goto	u7130
  7205  00D278  0E1A               	movlw	26
  7206  00D27A  1801               	xorwf	printFoodInput@food,w,c
  7207  00D27C  1002               	iorwf	printFoodInput@food+1,w,c
  7208  00D27E  B4D8               	btfsc	status,2,c
  7209  00D280  D014               	goto	u7130
  7210  00D282  0E1C               	movlw	28
  7211  00D284  1801               	xorwf	printFoodInput@food,w,c
  7212  00D286  1002               	iorwf	printFoodInput@food+1,w,c
  7213  00D288  B4D8               	btfsc	status,2,c
  7214  00D28A  D00F               	goto	u7130
  7215  00D28C  0E20               	movlw	32
  7216  00D28E  1801               	xorwf	printFoodInput@food,w,c
  7217  00D290  1002               	iorwf	printFoodInput@food+1,w,c
  7218  00D292  B4D8               	btfsc	status,2,c
  7219  00D294  D00A               	goto	u7130
  7220  00D296  0E24               	movlw	36
  7221  00D298  1801               	xorwf	printFoodInput@food,w,c
  7222  00D29A  1002               	iorwf	printFoodInput@food+1,w,c
  7223  00D29C  B4D8               	btfsc	status,2,c
  7224  00D29E  D005               	goto	u7130
  7225  00D2A0  0E26               	movlw	38
  7226  00D2A2  1801               	xorwf	printFoodInput@food,w,c
  7227  00D2A4  1002               	iorwf	printFoodInput@food+1,w,c
  7228  00D2A6  A4D8               	btfss	status,2,c
  7229  00D2A8  D005               	goto	l519
  7230  00D2AA                     u7130:
  7231                           
  7232                           ;standbyMode.c: 885: return 8;
  7233  00D2AA  0E00               	movlw	0
  7234  00D2AC  6E02               	movwf	?_printFoodInput+1,c
  7235  00D2AE  0E08               	movlw	8
  7236  00D2B0  6E01               	movwf	?_printFoodInput,c
  7237                           
  7238                           ;standbyMode.c: 886: }
  7239  00D2B2  0012               	return	
  7240  00D2B4                     l519:
  7241                           
  7242                           ;standbyMode.c: 889: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  7243  00D2B4  0E17               	movlw	23
  7244  00D2B6  1801               	xorwf	printFoodInput@food,w,c
  7245  00D2B8  1002               	iorwf	printFoodInput@food+1,w,c
  7246  00D2BA  B4D8               	btfsc	status,2,c
  7247  00D2BC  D019               	goto	u7190
  7248  00D2BE  0E19               	movlw	25
  7249  00D2C0  1801               	xorwf	printFoodInput@food,w,c
  7250  00D2C2  1002               	iorwf	printFoodInput@food+1,w,c
  7251  00D2C4  B4D8               	btfsc	status,2,c
  7252  00D2C6  D014               	goto	u7190
  7253  00D2C8  0E1D               	movlw	29
  7254  00D2CA  1801               	xorwf	printFoodInput@food,w,c
  7255  00D2CC  1002               	iorwf	printFoodInput@food+1,w,c
  7256  00D2CE  B4D8               	btfsc	status,2,c
  7257  00D2D0  D00F               	goto	u7190
  7258  00D2D2  0E21               	movlw	33
  7259  00D2D4  1801               	xorwf	printFoodInput@food,w,c
  7260  00D2D6  1002               	iorwf	printFoodInput@food+1,w,c
  7261  00D2D8  B4D8               	btfsc	status,2,c
  7262  00D2DA  D00A               	goto	u7190
  7263  00D2DC  0E25               	movlw	37
  7264  00D2DE  1801               	xorwf	printFoodInput@food,w,c
  7265  00D2E0  1002               	iorwf	printFoodInput@food+1,w,c
  7266  00D2E2  B4D8               	btfsc	status,2,c
  7267  00D2E4  D005               	goto	u7190
  7268  00D2E6  0E27               	movlw	39
  7269  00D2E8  1801               	xorwf	printFoodInput@food,w,c
  7270  00D2EA  1002               	iorwf	printFoodInput@food+1,w,c
  7271  00D2EC  A4D8               	btfss	status,2,c
  7272  00D2EE  D005               	goto	l523
  7273  00D2F0                     u7190:
  7274                           
  7275                           ;standbyMode.c: 890: return 9;
  7276  00D2F0  0E00               	movlw	0
  7277  00D2F2  6E02               	movwf	?_printFoodInput+1,c
  7278  00D2F4  0E09               	movlw	9
  7279  00D2F6  6E01               	movwf	?_printFoodInput,c
  7280                           
  7281                           ;standbyMode.c: 891: }
  7282  00D2F8  0012               	return	
  7283  00D2FA                     l523:
  7284                           
  7285                           ;standbyMode.c: 894: else if (food == 30 || food == 34 || food == 40){
  7286  00D2FA  0E1E               	movlw	30
  7287  00D2FC  1801               	xorwf	printFoodInput@food,w,c
  7288  00D2FE  1002               	iorwf	printFoodInput@food+1,w,c
  7289  00D300  B4D8               	btfsc	status,2,c
  7290  00D302  D00A               	goto	u7220
  7291  00D304  0E22               	movlw	34
  7292  00D306  1801               	xorwf	printFoodInput@food,w,c
  7293  00D308  1002               	iorwf	printFoodInput@food+1,w,c
  7294  00D30A  B4D8               	btfsc	status,2,c
  7295  00D30C  D005               	goto	u7220
  7296  00D30E  0E28               	movlw	40
  7297  00D310  1801               	xorwf	printFoodInput@food,w,c
  7298  00D312  1002               	iorwf	printFoodInput@food+1,w,c
  7299  00D314  A4D8               	btfss	status,2,c
  7300  00D316  D005               	goto	l527
  7301  00D318                     u7220:
  7302                           
  7303                           ;standbyMode.c: 895: return 10;
  7304  00D318  0E00               	movlw	0
  7305  00D31A  6E02               	movwf	?_printFoodInput+1,c
  7306  00D31C  0E0A               	movlw	10
  7307  00D31E  6E01               	movwf	?_printFoodInput,c
  7308                           
  7309                           ;standbyMode.c: 896: }
  7310  00D320  0012               	return	
  7311  00D322                     l527:
  7312                           
  7313                           ;standbyMode.c: 899: else if (food == 27 || food == 31 || food == 35 || food == 41){
  7314  00D322  0E1B               	movlw	27
  7315  00D324  1801               	xorwf	printFoodInput@food,w,c
  7316  00D326  1002               	iorwf	printFoodInput@food+1,w,c
  7317  00D328  B4D8               	btfsc	status,2,c
  7318  00D32A  D00F               	goto	u7260
  7319  00D32C  0E1F               	movlw	31
  7320  00D32E  1801               	xorwf	printFoodInput@food,w,c
  7321  00D330  1002               	iorwf	printFoodInput@food+1,w,c
  7322  00D332  B4D8               	btfsc	status,2,c
  7323  00D334  D00A               	goto	u7260
  7324  00D336  0E23               	movlw	35
  7325  00D338  1801               	xorwf	printFoodInput@food,w,c
  7326  00D33A  1002               	iorwf	printFoodInput@food+1,w,c
  7327  00D33C  B4D8               	btfsc	status,2,c
  7328  00D33E  D005               	goto	u7260
  7329  00D340  0E29               	movlw	41
  7330  00D342  1801               	xorwf	printFoodInput@food,w,c
  7331  00D344  1002               	iorwf	printFoodInput@food+1,w,c
  7332  00D346  A4D8               	btfss	status,2,c
  7333  00D348  D005               	goto	l531
  7334  00D34A                     u7260:
  7335                           
  7336                           ;standbyMode.c: 900: return 11;
  7337  00D34A  0E00               	movlw	0
  7338  00D34C  6E02               	movwf	?_printFoodInput+1,c
  7339  00D34E  0E0B               	movlw	11
  7340  00D350  6E01               	movwf	?_printFoodInput,c
  7341                           
  7342                           ;standbyMode.c: 901: }
  7343  00D352  0012               	return	
  7344  00D354                     l531:
  7345                           
  7346                           ;standbyMode.c: 905: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  7347  00D354  0E2A               	movlw	42
  7348  00D356  1801               	xorwf	printFoodInput@food,w,c
  7349  00D358  1002               	iorwf	printFoodInput@food+1,w,c
  7350  00D35A  B4D8               	btfsc	status,2,c
  7351  00D35C  D014               	goto	u7310
  7352  00D35E  0E2B               	movlw	43
  7353  00D360  1801               	xorwf	printFoodInput@food,w,c
  7354  00D362  1002               	iorwf	printFoodInput@food+1,w,c
  7355  00D364  B4D8               	btfsc	status,2,c
  7356  00D366  D00F               	goto	u7310
  7357  00D368  0E2C               	movlw	44
  7358  00D36A  1801               	xorwf	printFoodInput@food,w,c
  7359  00D36C  1002               	iorwf	printFoodInput@food+1,w,c
  7360  00D36E  B4D8               	btfsc	status,2,c
  7361  00D370  D00A               	goto	u7310
  7362  00D372  0E2D               	movlw	45
  7363  00D374  1801               	xorwf	printFoodInput@food,w,c
  7364  00D376  1002               	iorwf	printFoodInput@food+1,w,c
  7365  00D378  B4D8               	btfsc	status,2,c
  7366  00D37A  D005               	goto	u7310
  7367  00D37C  0E2E               	movlw	46
  7368  00D37E  1801               	xorwf	printFoodInput@food,w,c
  7369  00D380  1002               	iorwf	printFoodInput@food+1,w,c
  7370  00D382  A4D8               	btfss	status,2,c
  7371  00D384  D005               	goto	l535
  7372  00D386                     u7310:
  7373                           
  7374                           ;standbyMode.c: 906: return 12;
  7375  00D386  0E00               	movlw	0
  7376  00D388  6E02               	movwf	?_printFoodInput+1,c
  7377  00D38A  0E0C               	movlw	12
  7378  00D38C  6E01               	movwf	?_printFoodInput,c
  7379                           
  7380                           ;standbyMode.c: 907: }
  7381  00D38E  0012               	return	
  7382  00D390                     l535:
  7383                           
  7384                           ;standbyMode.c: 909: else{
  7385                           ;standbyMode.c: 910: return 0;
  7386  00D390  0E00               	movlw	0
  7387  00D392  6E02               	movwf	?_printFoodInput+1,c
  7388  00D394  0E00               	movlw	0
  7389  00D396  6E01               	movwf	?_printFoodInput,c
  7390  00D398  0012               	return	
  7391  00D39A                     __end_of_printFoodInput:
  7392                           	opt stack 0
  7393                           tblptru	equ	0xFF8
  7394                           tblptrh	equ	0xFF7
  7395                           tblptrl	equ	0xFF6
  7396                           tablat	equ	0xFF5
  7397                           prodh	equ	0xFF4
  7398                           prodl	equ	0xFF3
  7399                           postinc0	equ	0xFEE
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           plusw1	equ	0xFE3
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           plusw2	equ	0xFDB
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8
  7411                           
  7412 ;; *************** function _getRound *****************
  7413 ;; Defined at:
  7414 ;;		line 245 in file "standbyMode.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  code            2    0[COMRAM] unsigned int 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  returnValue     2    4[COMRAM] unsigned int 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  2    0[COMRAM] unsigned int 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;Total ram usage:        6 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; This function calls:
  7435 ;;		Nothing
  7436 ;; This function is called by:
  7437 ;;		_standbyMode
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           	psect	text9
  7442  00C674                     __ptext9:
  7443                           	opt stack 0
  7444  00C674                     _getRound:
  7445                           	opt stack 29
  7446                           
  7447                           ;standbyMode.c: 246: unsigned int returnValue = 0;
  7448                           
  7449                           ;incstack = 0
  7450  00C674  0E00               	movlw	0
  7451  00C676  6E06               	movwf	getRound@returnValue+1,c
  7452  00C678  0E00               	movlw	0
  7453  00C67A  6E05               	movwf	getRound@returnValue,c
  7454                           
  7455                           ;standbyMode.c: 247: switch(code){
  7456  00C67C  D00D               	goto	l343
  7457  00C67E                     
  7458                           ;standbyMode.c: 255: returnValue = 2;
  7459  00C67E  0E00               	movlw	0
  7460  00C680  6E06               	movwf	getRound@returnValue+1,c
  7461  00C682  0E02               	movlw	2
  7462  00C684                     L21:
  7463  00C684  6E05               	movwf	getRound@returnValue,c
  7464                           
  7465                           ;standbyMode.c: 261: break;
  7466  00C686  D069               	goto	l345
  7467  00C688                     
  7468                           ;standbyMode.c: 390: returnValue = 1;
  7469                           
  7470                           ;standbyMode.c: 389: case 45:
  7471                           
  7472                           ;standbyMode.c: 386: break;
  7473                           
  7474                           ;standbyMode.c: 385: returnValue = 1;
  7475                           
  7476                           ;standbyMode.c: 384: case 44:
  7477                           
  7478                           ;standbyMode.c: 381: break;
  7479                           
  7480                           ;standbyMode.c: 380: returnValue = 1;
  7481  00C688  0E00               	movlw	0
  7482  00C68A  6E06               	movwf	getRound@returnValue+1,c
  7483  00C68C  0E01               	movlw	1
  7484  00C68E  D7FA               	goto	L21
  7485  00C690                     
  7486                           ;standbyMode.c: 394: returnValue = 0;
  7487  00C690  0E00               	movlw	0
  7488  00C692  6E06               	movwf	getRound@returnValue+1,c
  7489  00C694  0E00               	movlw	0
  7490  00C696  D7F6               	goto	L21
  7491  00C698                     l343:
  7492  00C698  C001  F003         	movff	getRound@code,??_getRound
  7493  00C69C  C002  F004         	movff	getRound@code+1,??_getRound+1
  7494                           
  7495                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7496                           ; Switch size 1, requested type "space"
  7497                           ; Number of cases is 1, Range of values is 0 to 0
  7498                           ; switch strategies available:
  7499                           ; Name         Instructions Cycles
  7500                           ; simple_byte            4     3 (average)
  7501                           ;	Chosen strategy is simple_byte
  7502  00C6A0  5004               	movf	??_getRound+1,w,c
  7503  00C6A2  0A00               	xorlw	0	; case 0
  7504  00C6A4  A4D8               	btfss	status,2,c
  7505  00C6A6  D7F4               	goto	l374
  7506                           
  7507                           ; Switch size 1, requested type "space"
  7508                           ; Number of cases is 29, Range of values is 1 to 45
  7509                           ; switch strategies available:
  7510                           ; Name         Instructions Cycles
  7511                           ; simple_byte           88    45 (average)
  7512                           ;	Chosen strategy is simple_byte
  7513  00C6A8  5003               	movf	??_getRound,w,c
  7514  00C6AA  0A01               	xorlw	1	; case 1
  7515  00C6AC  B4D8               	btfsc	status,2,c
  7516  00C6AE  D7EC               	goto	l371
  7517  00C6B0  0A03               	xorlw	3	; case 2
  7518  00C6B2  B4D8               	btfsc	status,2,c
  7519  00C6B4  D7E4               	goto	l346
  7520  00C6B6  0A0A               	xorlw	10	; case 8
  7521  00C6B8  B4D8               	btfsc	status,2,c
  7522  00C6BA  D7E6               	goto	l371
  7523  00C6BC  0A01               	xorlw	1	; case 9
  7524  00C6BE  B4D8               	btfsc	status,2,c
  7525  00C6C0  D7E3               	goto	l371
  7526  00C6C2  0A03               	xorlw	3	; case 10
  7527  00C6C4  B4D8               	btfsc	status,2,c
  7528  00C6C6  D7DB               	goto	l346
  7529  00C6C8  0A01               	xorlw	1	; case 11
  7530  00C6CA  B4D8               	btfsc	status,2,c
  7531  00C6CC  D7D8               	goto	l346
  7532  00C6CE  0A07               	xorlw	7	; case 12
  7533  00C6D0  B4D8               	btfsc	status,2,c
  7534  00C6D2  D7DA               	goto	l371
  7535  00C6D4  0A01               	xorlw	1	; case 13
  7536  00C6D6  B4D8               	btfsc	status,2,c
  7537  00C6D8  D7D7               	goto	l371
  7538  00C6DA  0A03               	xorlw	3	; case 14
  7539  00C6DC  B4D8               	btfsc	status,2,c
  7540  00C6DE  D7D4               	goto	l371
  7541  00C6E0  0A01               	xorlw	1	; case 15
  7542  00C6E2  B4D8               	btfsc	status,2,c
  7543  00C6E4  D7CC               	goto	l346
  7544  00C6E6  0A1F               	xorlw	31	; case 16
  7545  00C6E8  B4D8               	btfsc	status,2,c
  7546  00C6EA  D7C9               	goto	l346
  7547  00C6EC  0A06               	xorlw	6	; case 22
  7548  00C6EE  B4D8               	btfsc	status,2,c
  7549  00C6F0  D7C6               	goto	l346
  7550  00C6F2  0A01               	xorlw	1	; case 23
  7551  00C6F4  B4D8               	btfsc	status,2,c
  7552  00C6F6  D7C3               	goto	l346
  7553  00C6F8  0A0F               	xorlw	15	; case 24
  7554  00C6FA  B4D8               	btfsc	status,2,c
  7555  00C6FC  D7C0               	goto	l346
  7556  00C6FE  0A01               	xorlw	1	; case 25
  7557  00C700  B4D8               	btfsc	status,2,c
  7558  00C702  D7BD               	goto	l346
  7559  00C704  0A03               	xorlw	3	; case 26
  7560  00C706  B4D8               	btfsc	status,2,c
  7561  00C708  D7BF               	goto	l371
  7562  00C70A  0A01               	xorlw	1	; case 27
  7563  00C70C  B4D8               	btfsc	status,2,c
  7564  00C70E  D7B7               	goto	l346
  7565  00C710  0A07               	xorlw	7	; case 28
  7566  00C712  B4D8               	btfsc	status,2,c
  7567  00C714  D7B9               	goto	l371
  7568  00C716  0A01               	xorlw	1	; case 29
  7569  00C718  B4D8               	btfsc	status,2,c
  7570  00C71A  D7B6               	goto	l371
  7571  00C71C  0A03               	xorlw	3	; case 30
  7572  00C71E  B4D8               	btfsc	status,2,c
  7573  00C720  D7B3               	goto	l371
  7574  00C722  0A01               	xorlw	1	; case 31
  7575  00C724  B4D8               	btfsc	status,2,c
  7576  00C726  D7AB               	goto	l346
  7577  00C728  0A3F               	xorlw	63	; case 32
  7578  00C72A  B4D8               	btfsc	status,2,c
  7579  00C72C  D7AD               	goto	l371
  7580  00C72E  0A01               	xorlw	1	; case 33
  7581  00C730  B4D8               	btfsc	status,2,c
  7582  00C732  D7AA               	goto	l371
  7583  00C734  0A03               	xorlw	3	; case 34
  7584  00C736  B4D8               	btfsc	status,2,c
  7585  00C738  D7A7               	goto	l371
  7586  00C73A  0A01               	xorlw	1	; case 35
  7587  00C73C  B4D8               	btfsc	status,2,c
  7588  00C73E  D79F               	goto	l346
  7589  00C740  0A09               	xorlw	9	; case 42
  7590  00C742  B4D8               	btfsc	status,2,c
  7591  00C744  D79C               	goto	l346
  7592  00C746  0A01               	xorlw	1	; case 43
  7593  00C748  B4D8               	btfsc	status,2,c
  7594  00C74A  D79E               	goto	l371
  7595  00C74C  0A07               	xorlw	7	; case 44
  7596  00C74E  B4D8               	btfsc	status,2,c
  7597  00C750  D79B               	goto	l371
  7598  00C752  0A01               	xorlw	1	; case 45
  7599  00C754  B4D8               	btfsc	status,2,c
  7600  00C756  D798               	goto	l371
  7601  00C758  D79B               	goto	l374
  7602  00C75A                     l345:
  7603                           
  7604                           ;standbyMode.c: 397: return returnValue;
  7605  00C75A  C005  F001         	movff	getRound@returnValue,?_getRound
  7606  00C75E  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  7607  00C762  0012               	return		;funcret
  7608  00C764                     __end_of_getRound:
  7609                           	opt stack 0
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           postinc0	equ	0xFEE
  7617                           wreg	equ	0xFE8
  7618                           postdec1	equ	0xFE5
  7619                           plusw1	equ	0xFE3
  7620                           fsr1l	equ	0xFE1
  7621                           indf2	equ	0xFDF
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           plusw2	equ	0xFDB
  7625                           fsr2h	equ	0xFDA
  7626                           fsr2l	equ	0xFD9
  7627                           status	equ	0xFD8
  7628                           
  7629 ;; *************** function _getLong *****************
  7630 ;; Defined at:
  7631 ;;		line 558 in file "standbyMode.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;  code            2    0[COMRAM] unsigned int 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  returnValue     2    4[COMRAM] unsigned int 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  2    0[COMRAM] unsigned int 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;Total ram usage:        6 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_standbyMode
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text10
  7659  00C87A                     __ptext10:
  7660                           	opt stack 0
  7661  00C87A                     _getLong:
  7662                           	opt stack 29
  7663                           
  7664                           ;standbyMode.c: 559: unsigned int returnValue = 0;
  7665                           
  7666                           ;incstack = 0
  7667  00C87A  0E00               	movlw	0
  7668  00C87C  6E06               	movwf	getLong@returnValue+1,c
  7669  00C87E  0E00               	movlw	0
  7670  00C880  6E05               	movwf	getLong@returnValue,c
  7671                           
  7672                           ;standbyMode.c: 561: switch(code){
  7673  00C882  D011               	goto	l413
  7674  00C884                     
  7675                           ;standbyMode.c: 579: returnValue = 1;
  7676  00C884  0E00               	movlw	0
  7677  00C886  6E06               	movwf	getLong@returnValue+1,c
  7678  00C888  0E01               	movlw	1
  7679  00C88A  D007               	goto	L35
  7680  00C88C                     l422:
  7681                           
  7682                           ;standbyMode.c: 609: returnValue = 2;
  7683                           
  7684                           ;standbyMode.c: 608: case 18:
  7685                           
  7686                           ;standbyMode.c: 605: break;
  7687                           
  7688                           ;standbyMode.c: 604: returnValue = 1;
  7689                           
  7690                           ;standbyMode.c: 603: case 17:
  7691                           
  7692                           ;standbyMode.c: 600: break;
  7693                           
  7694                           ;standbyMode.c: 599: returnValue = 2;
  7695  00C88C  0E00               	movlw	0
  7696  00C88E  6E06               	movwf	getLong@returnValue+1,c
  7697  00C890  0E02               	movlw	2
  7698  00C892  D003               	goto	L35
  7699  00C894                     l425:
  7700                           
  7701                           ;standbyMode.c: 614: returnValue = 3;
  7702  00C894  0E00               	movlw	0
  7703  00C896  6E06               	movwf	getLong@returnValue+1,c
  7704  00C898  0E03               	movlw	3
  7705  00C89A                     L35:
  7706  00C89A  6E05               	movwf	getLong@returnValue,c
  7707                           
  7708                           ;standbyMode.c: 635: break;
  7709  00C89C  D074               	goto	l415
  7710  00C89E                     
  7711                           ;standbyMode.c: 733: returnValue = 0;
  7712  00C89E  0E00               	movlw	0
  7713  00C8A0  6E06               	movwf	getLong@returnValue+1,c
  7714  00C8A2  0E00               	movlw	0
  7715  00C8A4  D7FA               	goto	L35
  7716  00C8A6                     l413:
  7717  00C8A6  C001  F003         	movff	getLong@code,??_getLong
  7718  00C8AA  C002  F004         	movff	getLong@code+1,??_getLong+1
  7719                           
  7720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7721                           ; Switch size 1, requested type "space"
  7722                           ; Number of cases is 1, Range of values is 0 to 0
  7723                           ; switch strategies available:
  7724                           ; Name         Instructions Cycles
  7725                           ; simple_byte            4     3 (average)
  7726                           ;	Chosen strategy is simple_byte
  7727  00C8AE  5004               	movf	??_getLong+1,w,c
  7728  00C8B0  0A00               	xorlw	0	; case 0
  7729  00C8B2  A4D8               	btfss	status,2,c
  7730  00C8B4  D7F4               	goto	l449
  7731                           
  7732                           ; Switch size 1, requested type "space"
  7733                           ; Number of cases is 34, Range of values is 5 to 46
  7734                           ; switch strategies available:
  7735                           ; Name         Instructions Cycles
  7736                           ; simple_byte          103    52 (average)
  7737                           ;	Chosen strategy is simple_byte
  7738  00C8B6  5003               	movf	??_getLong,w,c
  7739  00C8B8  0A05               	xorlw	5	; case 5
  7740  00C8BA  B4D8               	btfsc	status,2,c
  7741  00C8BC  D7E3               	goto	l418
  7742  00C8BE  0A03               	xorlw	3	; case 6
  7743  00C8C0  B4D8               	btfsc	status,2,c
  7744  00C8C2  D7E4               	goto	l422
  7745  00C8C4  0A01               	xorlw	1	; case 7
  7746  00C8C6  B4D8               	btfsc	status,2,c
  7747  00C8C8  D7E5               	goto	l425
  7748  00C8CA  0A0B               	xorlw	11	; case 12
  7749  00C8CC  B4D8               	btfsc	status,2,c
  7750  00C8CE  D7DA               	goto	l418
  7751  00C8D0  0A01               	xorlw	1	; case 13
  7752  00C8D2  B4D8               	btfsc	status,2,c
  7753  00C8D4  D7DB               	goto	l422
  7754  00C8D6  0A03               	xorlw	3	; case 14
  7755  00C8D8  B4D8               	btfsc	status,2,c
  7756  00C8DA  D7DC               	goto	l425
  7757  00C8DC  0A01               	xorlw	1	; case 15
  7758  00C8DE  B4D8               	btfsc	status,2,c
  7759  00C8E0  D7D1               	goto	l418
  7760  00C8E2  0A1F               	xorlw	31	; case 16
  7761  00C8E4  B4D8               	btfsc	status,2,c
  7762  00C8E6  D7D2               	goto	l422
  7763  00C8E8  0A01               	xorlw	1	; case 17
  7764  00C8EA  B4D8               	btfsc	status,2,c
  7765  00C8EC  D7CB               	goto	l418
  7766  00C8EE  0A03               	xorlw	3	; case 18
  7767  00C8F0  B4D8               	btfsc	status,2,c
  7768  00C8F2  D7CC               	goto	l422
  7769  00C8F4  0A01               	xorlw	1	; case 19
  7770  00C8F6  B4D8               	btfsc	status,2,c
  7771  00C8F8  D7CD               	goto	l425
  7772  00C8FA  0A07               	xorlw	7	; case 20
  7773  00C8FC  B4D8               	btfsc	status,2,c
  7774  00C8FE  D7C2               	goto	l418
  7775  00C900  0A01               	xorlw	1	; case 21
  7776  00C902  B4D8               	btfsc	status,2,c
  7777  00C904  D7C3               	goto	l422
  7778  00C906  0A0D               	xorlw	13	; case 24
  7779  00C908  B4D8               	btfsc	status,2,c
  7780  00C90A  D7BC               	goto	l418
  7781  00C90C  0A01               	xorlw	1	; case 25
  7782  00C90E  B4D8               	btfsc	status,2,c
  7783  00C910  D7BD               	goto	l422
  7784  00C912  0A05               	xorlw	5	; case 28
  7785  00C914  B4D8               	btfsc	status,2,c
  7786  00C916  D7BA               	goto	l422
  7787  00C918  0A01               	xorlw	1	; case 29
  7788  00C91A  B4D8               	btfsc	status,2,c
  7789  00C91C  D7BB               	goto	l425
  7790  00C91E  0A03               	xorlw	3	; case 30
  7791  00C920  B4D8               	btfsc	status,2,c
  7792  00C922  D7B8               	goto	l425
  7793  00C924  0A01               	xorlw	1	; case 31
  7794  00C926  B4D8               	btfsc	status,2,c
  7795  00C928  D7B1               	goto	l422
  7796  00C92A  0A3F               	xorlw	63	; case 32
  7797  00C92C  B4D8               	btfsc	status,2,c
  7798  00C92E  D7AA               	goto	l418
  7799  00C930  0A01               	xorlw	1	; case 33
  7800  00C932  B4D8               	btfsc	status,2,c
  7801  00C934  D7AB               	goto	l422
  7802  00C936  0A03               	xorlw	3	; case 34
  7803  00C938  B4D8               	btfsc	status,2,c
  7804  00C93A  D7A4               	goto	l418
  7805  00C93C  0A01               	xorlw	1	; case 35
  7806  00C93E  B4D8               	btfsc	status,2,c
  7807  00C940  D7A1               	goto	l418
  7808  00C942  0A07               	xorlw	7	; case 36
  7809  00C944  B4D8               	btfsc	status,2,c
  7810  00C946  D79E               	goto	l418
  7811  00C948  0A01               	xorlw	1	; case 37
  7812  00C94A  B4D8               	btfsc	status,2,c
  7813  00C94C  D79F               	goto	l422
  7814  00C94E  0A03               	xorlw	3	; case 38
  7815  00C950  B4D8               	btfsc	status,2,c
  7816  00C952  D79C               	goto	l422
  7817  00C954  0A01               	xorlw	1	; case 39
  7818  00C956  B4D8               	btfsc	status,2,c
  7819  00C958  D79D               	goto	l425
  7820  00C95A  0A0F               	xorlw	15	; case 40
  7821  00C95C  B4D8               	btfsc	status,2,c
  7822  00C95E  D79A               	goto	l425
  7823  00C960  0A01               	xorlw	1	; case 41
  7824  00C962  B4D8               	btfsc	status,2,c
  7825  00C964  D793               	goto	l422
  7826  00C966  0A03               	xorlw	3	; case 42
  7827  00C968  B4D8               	btfsc	status,2,c
  7828  00C96A  D78C               	goto	l418
  7829  00C96C  0A01               	xorlw	1	; case 43
  7830  00C96E  B4D8               	btfsc	status,2,c
  7831  00C970  D789               	goto	l418
  7832  00C972  0A07               	xorlw	7	; case 44
  7833  00C974  B4D8               	btfsc	status,2,c
  7834  00C976  D78A               	goto	l422
  7835  00C978  0A01               	xorlw	1	; case 45
  7836  00C97A  B4D8               	btfsc	status,2,c
  7837  00C97C  D78B               	goto	l425
  7838  00C97E  0A03               	xorlw	3	; case 46
  7839  00C980  B4D8               	btfsc	status,2,c
  7840  00C982  D788               	goto	l425
  7841  00C984  D78C               	goto	l449
  7842  00C986                     l415:
  7843                           
  7844                           ;standbyMode.c: 736: return returnValue;
  7845  00C986  C005  F001         	movff	getLong@returnValue,?_getLong
  7846  00C98A  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  7847  00C98E  0012               	return		;funcret
  7848  00C990                     __end_of_getLong:
  7849                           	opt stack 0
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           postinc0	equ	0xFEE
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           plusw1	equ	0xFE3
  7860                           fsr1l	equ	0xFE1
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           plusw2	equ	0xFDB
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _getFlat *****************
  7870 ;; Defined at:
  7871 ;;		line 401 in file "standbyMode.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  code            2    0[COMRAM] unsigned int 
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;  returnValue     2    4[COMRAM] unsigned int 
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  2    0[COMRAM] unsigned int 
  7878 ;; Registers used:
  7879 ;;		wreg, status,2, status,0
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;Total ram usage:        6 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_standbyMode
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text11
  7899  00C584                     __ptext11:
  7900                           	opt stack 0
  7901  00C584                     _getFlat:
  7902                           	opt stack 29
  7903                           
  7904                           ;standbyMode.c: 402: unsigned int returnValue = 0;
  7905                           
  7906                           ;incstack = 0
  7907  00C584  0E00               	movlw	0
  7908  00C586  6E06               	movwf	getFlat@returnValue+1,c
  7909  00C588  0E00               	movlw	0
  7910  00C58A  6E05               	movwf	getFlat@returnValue,c
  7911                           
  7912                           ;standbyMode.c: 404: switch(code){
  7913  00C58C  D00D               	goto	l378
  7914  00C58E                     
  7915                           ;standbyMode.c: 407: returnValue = 1;
  7916  00C58E  0E00               	movlw	0
  7917  00C590  6E06               	movwf	getFlat@returnValue+1,c
  7918  00C592  0E01               	movlw	1
  7919  00C594  D003               	goto	L41
  7920  00C596                     
  7921                           ;standbyMode.c: 432: returnValue = 2;
  7922                           
  7923                           ;standbyMode.c: 431: case 11:
  7924                           
  7925                           ;standbyMode.c: 428: break;
  7926                           
  7927                           ;standbyMode.c: 427: returnValue = 1;
  7928                           
  7929                           ;standbyMode.c: 426: case 10:
  7930                           
  7931                           ;standbyMode.c: 423: break;
  7932                           
  7933                           ;standbyMode.c: 422: returnValue = 2;
  7934                           
  7935                           ;standbyMode.c: 421: case 9:
  7936                           
  7937                           ;standbyMode.c: 418: break;
  7938                           
  7939                           ;standbyMode.c: 417: returnValue = 1;
  7940                           
  7941                           ;standbyMode.c: 416: case 8:
  7942                           
  7943                           ;standbyMode.c: 413: break;
  7944                           
  7945                           ;standbyMode.c: 412: returnValue = 2;
  7946  00C596  0E00               	movlw	0
  7947  00C598  6E06               	movwf	getFlat@returnValue+1,c
  7948  00C59A  0E02               	movlw	2
  7949  00C59C                     L41:
  7950  00C59C  6E05               	movwf	getFlat@returnValue,c
  7951                           
  7952                           ;standbyMode.c: 438: break;
  7953  00C59E  D065               	goto	l380
  7954  00C5A0                     
  7955                           ;standbyMode.c: 551: returnValue = 0;
  7956  00C5A0  0E00               	movlw	0
  7957  00C5A2  6E06               	movwf	getFlat@returnValue+1,c
  7958  00C5A4  0E00               	movlw	0
  7959  00C5A6  D7FA               	goto	L41
  7960  00C5A8                     l378:
  7961  00C5A8  C001  F003         	movff	getFlat@code,??_getFlat
  7962  00C5AC  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  7963                           
  7964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7965                           ; Switch size 1, requested type "space"
  7966                           ; Number of cases is 1, Range of values is 0 to 0
  7967                           ; switch strategies available:
  7968                           ; Name         Instructions Cycles
  7969                           ; simple_byte            4     3 (average)
  7970                           ;	Chosen strategy is simple_byte
  7971  00C5B0  5004               	movf	??_getFlat+1,w,c
  7972  00C5B2  0A00               	xorlw	0	; case 0
  7973  00C5B4  A4D8               	btfss	status,2,c
  7974  00C5B6  D7F4               	goto	l409
  7975                           
  7976                           ; Switch size 1, requested type "space"
  7977                           ; Number of cases is 29, Range of values is 3 to 46
  7978                           ; switch strategies available:
  7979                           ; Name         Instructions Cycles
  7980                           ; simple_byte           88    45 (average)
  7981                           ;	Chosen strategy is simple_byte
  7982  00C5B8  5003               	movf	??_getFlat,w,c
  7983  00C5BA  0A03               	xorlw	3	; case 3
  7984  00C5BC  B4D8               	btfsc	status,2,c
  7985  00C5BE  D7E7               	goto	l379
  7986  00C5C0  0A07               	xorlw	7	; case 4
  7987  00C5C2  B4D8               	btfsc	status,2,c
  7988  00C5C4  D7E8               	goto	l381
  7989  00C5C6  0A0C               	xorlw	12	; case 8
  7990  00C5C8  B4D8               	btfsc	status,2,c
  7991  00C5CA  D7E1               	goto	l379
  7992  00C5CC  0A01               	xorlw	1	; case 9
  7993  00C5CE  B4D8               	btfsc	status,2,c
  7994  00C5D0  D7E2               	goto	l381
  7995  00C5D2  0A03               	xorlw	3	; case 10
  7996  00C5D4  B4D8               	btfsc	status,2,c
  7997  00C5D6  D7DB               	goto	l379
  7998  00C5D8  0A01               	xorlw	1	; case 11
  7999  00C5DA  B4D8               	btfsc	status,2,c
  8000  00C5DC  D7DC               	goto	l381
  8001  00C5DE  0A1A               	xorlw	26	; case 17
  8002  00C5E0  B4D8               	btfsc	status,2,c
  8003  00C5E2  D7D5               	goto	l379
  8004  00C5E4  0A03               	xorlw	3	; case 18
  8005  00C5E6  B4D8               	btfsc	status,2,c
  8006  00C5E8  D7D2               	goto	l379
  8007  00C5EA  0A01               	xorlw	1	; case 19
  8008  00C5EC  B4D8               	btfsc	status,2,c
  8009  00C5EE  D7CF               	goto	l379
  8010  00C5F0  0A07               	xorlw	7	; case 20
  8011  00C5F2  B4D8               	btfsc	status,2,c
  8012  00C5F4  D7D0               	goto	l381
  8013  00C5F6  0A01               	xorlw	1	; case 21
  8014  00C5F8  B4D8               	btfsc	status,2,c
  8015  00C5FA  D7CD               	goto	l381
  8016  00C5FC  0A03               	xorlw	3	; case 22
  8017  00C5FE  B4D8               	btfsc	status,2,c
  8018  00C600  D7C6               	goto	l379
  8019  00C602  0A01               	xorlw	1	; case 23
  8020  00C604  B4D8               	btfsc	status,2,c
  8021  00C606  D7C7               	goto	l381
  8022  00C608  0A0D               	xorlw	13	; case 26
  8023  00C60A  B4D8               	btfsc	status,2,c
  8024  00C60C  D7C4               	goto	l381
  8025  00C60E  0A01               	xorlw	1	; case 27
  8026  00C610  B4D8               	btfsc	status,2,c
  8027  00C612  D7C1               	goto	l381
  8028  00C614  0A3B               	xorlw	59	; case 32
  8029  00C616  B4D8               	btfsc	status,2,c
  8030  00C618  D7BA               	goto	l379
  8031  00C61A  0A01               	xorlw	1	; case 33
  8032  00C61C  B4D8               	btfsc	status,2,c
  8033  00C61E  D7B7               	goto	l379
  8034  00C620  0A03               	xorlw	3	; case 34
  8035  00C622  B4D8               	btfsc	status,2,c
  8036  00C624  D7B8               	goto	l381
  8037  00C626  0A01               	xorlw	1	; case 35
  8038  00C628  B4D8               	btfsc	status,2,c
  8039  00C62A  D7B1               	goto	l379
  8040  00C62C  0A07               	xorlw	7	; case 36
  8041  00C62E  B4D8               	btfsc	status,2,c
  8042  00C630  D7B2               	goto	l381
  8043  00C632  0A01               	xorlw	1	; case 37
  8044  00C634  B4D8               	btfsc	status,2,c
  8045  00C636  D7AF               	goto	l381
  8046  00C638  0A03               	xorlw	3	; case 38
  8047  00C63A  B4D8               	btfsc	status,2,c
  8048  00C63C  D7A8               	goto	l379
  8049  00C63E  0A01               	xorlw	1	; case 39
  8050  00C640  B4D8               	btfsc	status,2,c
  8051  00C642  D7A5               	goto	l379
  8052  00C644  0A0F               	xorlw	15	; case 40
  8053  00C646  B4D8               	btfsc	status,2,c
  8054  00C648  D7A2               	goto	l379
  8055  00C64A  0A01               	xorlw	1	; case 41
  8056  00C64C  B4D8               	btfsc	status,2,c
  8057  00C64E  D7A3               	goto	l381
  8058  00C650  0A03               	xorlw	3	; case 42
  8059  00C652  B4D8               	btfsc	status,2,c
  8060  00C654  D79C               	goto	l379
  8061  00C656  0A01               	xorlw	1	; case 43
  8062  00C658  B4D8               	btfsc	status,2,c
  8063  00C65A  D79D               	goto	l381
  8064  00C65C  0A07               	xorlw	7	; case 44
  8065  00C65E  B4D8               	btfsc	status,2,c
  8066  00C660  D796               	goto	l379
  8067  00C662  0A02               	xorlw	2	; case 46
  8068  00C664  B4D8               	btfsc	status,2,c
  8069  00C666  D793               	goto	l379
  8070  00C668  D79B               	goto	l409
  8071  00C66A                     l380:
  8072                           
  8073                           ;standbyMode.c: 554: return returnValue;
  8074  00C66A  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8075  00C66E  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8076  00C672  0012               	return		;funcret
  8077  00C674                     __end_of_getFlat:
  8078                           	opt stack 0
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           postinc0	equ	0xFEE
  8086                           wreg	equ	0xFE8
  8087                           postdec1	equ	0xFE5
  8088                           plusw1	equ	0xFE3
  8089                           fsr1l	equ	0xFE1
  8090                           indf2	equ	0xFDF
  8091                           postinc2	equ	0xFDE
  8092                           postdec2	equ	0xFDD
  8093                           plusw2	equ	0xFDB
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function _food_press *****************
  8099 ;; Defined at:
  8100 ;;		line 1137 in file "standbyMode.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  dietSum         2   40[COMRAM] unsigned int 
  8103 ;;  drawer          2   42[COMRAM] unsigned int 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  keypress        1   54[COMRAM] unsigned char 
  8106 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8107 ;;  count           2   52[COMRAM] unsigned int 
  8108 ;;  isValid         2   50[COMRAM] unsigned int 
  8109 ;;  backCheck       2   48[COMRAM] unsigned int 
  8110 ;;  tally           2   46[COMRAM] unsigned int 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  2   40[COMRAM] unsigned int 
  8113 ;; Registers used:
  8114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;Total ram usage:       23 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    3
  8127 ;; This function calls:
  8128 ;;		_check_food
  8129 ;;		_get_digits
  8130 ;;		_lcdInst
  8131 ;;		_printf
  8132 ;;		_putch
  8133 ;; This function is called by:
  8134 ;;		_standbyMode
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text12
  8139  00CD34                     __ptext12:
  8140                           	opt stack 0
  8141  00CD34                     _food_press:
  8142                           	opt stack 26
  8143                           
  8144                           ;incstack = 0
  8145                           ;standbyMode.c: 1139: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8146  00CD34  0E01               	movlw	1
  8147  00CD36  EC61  F05E         	call	_lcdInst
  8148  00CD3A  0EC3               	movlw	195
  8149  00CD3C  6E2D               	movwf	??_food_press& (0+255),c
  8150  00CD3E  0ECD               	movlw	205
  8151  00CD40                     u10167:
  8152  00CD40  2EE8               	decfsz	wreg,f,c
  8153  00CD42  D7FE               	bra	u10167
  8154  00CD44  2E2D               	decfsz	??_food_press& (0+255),f,c
  8155  00CD46  D7FC               	bra	u10167
  8156  00CD48  F000               	nop	
  8157                           
  8158                           ;standbyMode.c: 1140: printf("Drawer %i food:", drawer);
  8159  00CD4A  0EA5               	movlw	low STR_67
  8160  00CD4C  6E0D               	movwf	printf@f,c
  8161  00CD4E  0EFD               	movlw	high STR_67
  8162  00CD50  6E0E               	movwf	printf@f+1,c
  8163  00CD52  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8164  00CD56  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8165  00CD5A  EC43  F06B         	call	_printf	;wreg free
  8166                           
  8167                           ;standbyMode.c: 1141: lcdInst(0xC0);;
  8168  00CD5E  0EC0               	movlw	192
  8169  00CD60  EC61  F05E         	call	_lcdInst
  8170                           
  8171                           ;standbyMode.c: 1143: unsigned int tally = 0;
  8172  00CD64  0E00               	movlw	0
  8173  00CD66  6E30               	movwf	food_press@tally+1,c
  8174  00CD68  0E00               	movlw	0
  8175  00CD6A  6E2F               	movwf	food_press@tally,c
  8176                           
  8177                           ;standbyMode.c: 1144: unsigned int count = 0;
  8178  00CD6C  0E00               	movlw	0
  8179  00CD6E  6E36               	movwf	food_press@count+1,c
  8180  00CD70  0E00               	movlw	0
  8181  00CD72  6E35               	movwf	food_press@count,c
  8182                           
  8183                           ;standbyMode.c: 1145: unsigned int foodTable[4] = {0, 0, 0, 0};
  8184  00CD74  EE20  F068         	lfsr	2,food_press@F3117
  8185  00CD78  EE10  F038         	lfsr	1,food_press@foodTable
  8186  00CD7C  0E07               	movlw	7
  8187  00CD7E                     u7321:
  8188  00CD7E  CFDB FFE3          	movff	plusw2,plusw1
  8189  00CD82  06E8               	decf	wreg,f,c
  8190  00CD84  E2FC               	bc	u7321
  8191                           
  8192                           ;standbyMode.c: 1146: unsigned int isValid = 0;
  8193  00CD86  0E00               	movlw	0
  8194  00CD88  6E34               	movwf	food_press@isValid+1,c
  8195  00CD8A  0E00               	movlw	0
  8196  00CD8C  6E33               	movwf	food_press@isValid,c
  8197                           
  8198                           ;standbyMode.c: 1147: unsigned int backCheck = 0;
  8199  00CD8E  0E00               	movlw	0
  8200  00CD90  6E32               	movwf	food_press@backCheck+1,c
  8201  00CD92  0E00               	movlw	0
  8202  00CD94  6E31               	movwf	food_press@backCheck,c
  8203                           
  8204                           ;standbyMode.c: 1148: tally = get_digits(dietSum);
  8205  00CD96  C029  F001         	movff	food_press@dietSum,get_digits@sum
  8206  00CD9A  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  8207  00CD9E  EC1F  F061         	call	_get_digits	;wreg free
  8208  00CDA2  C001  F02F         	movff	?_get_digits,food_press@tally
  8209  00CDA6  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  8210  00CDAA                     
  8211                           ;standbyMode.c: 1151: while(PORTBbits.RB1 == 0){ continue; }
  8212  00CDAA  A281               	btfss	3969,1,c	;volatile
  8213  00CDAC  D7FE               	goto	l604
  8214                           
  8215                           ;standbyMode.c: 1152: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8216  00CDAE  3881               	swapf	3969,w,c	;volatile
  8217  00CDB0  0B0F               	andlw	15
  8218  00CDB2  0B0F               	andlw	15
  8219  00CDB4  6E37               	movwf	food_press@keypress,c
  8220  00CDB6  B281               	btfsc	3969,1,c	;volatile
  8221  00CDB8  D7FE               	goto	l609
  8222                           
  8223                           ;standbyMode.c: 1155: if(keypress == 15){
  8224  00CDBA  0E0F               	movlw	15
  8225  00CDBC  1837               	xorwf	food_press@keypress,w,c
  8226  00CDBE  B4D8               	btfsc	status,2,c
  8227  00CDC0  D070               	goto	l612
  8228                           
  8229                           ;standbyMode.c: 1158: else if (keypress == 14){
  8230                           
  8231                           ;standbyMode.c: 1157: }
  8232                           
  8233                           ;standbyMode.c: 1156: break;
  8234  00CDC2  0E0E               	movlw	14
  8235  00CDC4  1837               	xorwf	food_press@keypress,w,c
  8236  00CDC6  A4D8               	btfss	status,2,c
  8237  00CDC8  D005               	goto	l614
  8238                           
  8239                           ;standbyMode.c: 1159: backCheck = 1;
  8240  00CDCA  0E00               	movlw	0
  8241  00CDCC  6E32               	movwf	food_press@backCheck+1,c
  8242  00CDCE  0E01               	movlw	1
  8243  00CDD0  6E31               	movwf	food_press@backCheck,c
  8244                           
  8245                           ;standbyMode.c: 1160: break;
  8246  00CDD2  D067               	goto	l612
  8247  00CDD4                     l614:
  8248                           
  8249                           ;standbyMode.c: 1162: else if (keypress == 0 || keypress == 1 || keypress == 2){
  8250  00CDD4  5037               	movf	food_press@keypress,w,c
  8251  00CDD6  B4D8               	btfsc	status,2,c
  8252  00CDD8  D007               	goto	u7390
  8253  00CDDA  0437               	decf	food_press@keypress,w,c
  8254  00CDDC  B4D8               	btfsc	status,2,c
  8255  00CDDE  D004               	goto	u7390
  8256  00CDE0  0E02               	movlw	2
  8257  00CDE2  1837               	xorwf	food_press@keypress,w,c
  8258  00CDE4  A4D8               	btfss	status,2,c
  8259  00CDE6  D02C               	goto	l616
  8260  00CDE8                     u7390:
  8261                           
  8262                           ;standbyMode.c: 1163: if (count < tally){
  8263  00CDE8  502F               	movf	food_press@tally,w,c
  8264  00CDEA  5C35               	subwf	food_press@count,w,c
  8265  00CDEC  5030               	movf	food_press@tally+1,w,c
  8266  00CDEE  5836               	subwfb	food_press@count+1,w,c
  8267  00CDF0  B0D8               	btfsc	status,0,c
  8268  00CDF2  D7DB               	goto	l604
  8269                           
  8270                           ;standbyMode.c: 1164: putch(input[keypress]);
  8271  00CDF4  5037               	movf	food_press@keypress,w,c
  8272  00CDF6  0D01               	mullw	1
  8273  00CDF8  0ECC               	movlw	low _input
  8274  00CDFA  24F3               	addwf	prodl,w,c
  8275  00CDFC  6EF6               	movwf	tblptrl,c
  8276  00CDFE  0EFC               	movlw	high _input
  8277  00CE00  20F4               	addwfc	prodh,w,c
  8278  00CE02  6EF7               	movwf	tblptrh,c
  8279  00CE04                     	if	1	;There are 3 active tblptr bytes
  8280  00CE04  6AF8               	clrf	tblptru,c
  8281  00CE06  0E00               	movlw	low (__mediumconst shr (0+16))
  8282  00CE08  22F8               	addwfc	tblptru,f,c
  8283  00CE0A                     	endif
  8284  00CE0A  0008               	tblrd		*
  8285  00CE0C  50F5               	movf	tablat,w,c
  8286  00CE0E  EC75  F05E         	call	_putch
  8287                           
  8288                           ;standbyMode.c: 1165: foodTable[count] = keypress + 1;
  8289  00CE12  5037               	movf	food_press@keypress,w,c
  8290  00CE14  6E2D               	movwf	??_food_press& (0+255),c
  8291  00CE16  6A2E               	clrf	(??_food_press+1)& (0+255),c
  8292  00CE18  0E01               	movlw	1
  8293  00CE1A  262D               	addwf	??_food_press,f,c
  8294  00CE1C  0E00               	movlw	0
  8295  00CE1E  222E               	addwfc	??_food_press+1,f,c
  8296  00CE20  90D8               	bcf	status,0,c
  8297  00CE22  3435               	rlcf	food_press@count,w,c
  8298  00CE24  6ED9               	movwf	fsr2l,c
  8299  00CE26  3436               	rlcf	food_press@count+1,w,c
  8300  00CE28  6EDA               	movwf	fsr2h,c
  8301  00CE2A  0E38               	movlw	low food_press@foodTable
  8302  00CE2C  26D9               	addwf	fsr2l,f,c
  8303  00CE2E  0E00               	movlw	high food_press@foodTable
  8304  00CE30  22DA               	addwfc	fsr2h,f,c
  8305  00CE32  C02D  FFDE         	movff	??_food_press,postinc2
  8306  00CE36  C02E  FFDD         	movff	??_food_press+1,postdec2
  8307                           
  8308                           ;standbyMode.c: 1166: count += 1;
  8309  00CE3A  4A35               	infsnz	food_press@count,f,c
  8310  00CE3C  2A36               	incf	food_press@count+1,f,c
  8311                           
  8312                           ;standbyMode.c: 1167: }
  8313                           ;standbyMode.c: 1168: }
  8314  00CE3E  D7B5               	goto	l604
  8315  00CE40                     l616:
  8316                           
  8317                           ;standbyMode.c: 1169: else if (keypress == 12){
  8318  00CE40  0E0C               	movlw	12
  8319  00CE42  1837               	xorwf	food_press@keypress,w,c
  8320  00CE44  A4D8               	btfss	status,2,c
  8321  00CE46  D7B1               	goto	l604
  8322                           
  8323                           ;standbyMode.c: 1170: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8324  00CE48  0E01               	movlw	1
  8325  00CE4A  EC61  F05E         	call	_lcdInst
  8326  00CE4E  0EC3               	movlw	195
  8327  00CE50  6E2D               	movwf	??_food_press& (0+255),c
  8328  00CE52  0ECD               	movlw	205
  8329  00CE54                     u10177:
  8330  00CE54  2EE8               	decfsz	wreg,f,c
  8331  00CE56  D7FE               	bra	u10177
  8332  00CE58  2E2D               	decfsz	??_food_press& (0+255),f,c
  8333  00CE5A  D7FC               	bra	u10177
  8334  00CE5C  F000               	nop	
  8335                           
  8336                           ;standbyMode.c: 1171: printf("Drawer %i food:", drawer);
  8337  00CE5E  0EA5               	movlw	low STR_67
  8338  00CE60  6E0D               	movwf	printf@f,c
  8339  00CE62  0EFD               	movlw	high STR_67
  8340  00CE64  6E0E               	movwf	printf@f+1,c
  8341  00CE66  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8342  00CE6A  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8343  00CE6E  EC43  F06B         	call	_printf	;wreg free
  8344                           
  8345                           ;standbyMode.c: 1172: lcdInst(0xC0);;
  8346  00CE72  0EC0               	movlw	192
  8347  00CE74  EC61  F05E         	call	_lcdInst
  8348                           
  8349                           ;standbyMode.c: 1173: count = 0;
  8350  00CE78  0E00               	movlw	0
  8351  00CE7A  6E36               	movwf	food_press@count+1,c
  8352  00CE7C  0E00               	movlw	0
  8353  00CE7E  6E35               	movwf	food_press@count,c
  8354                           
  8355                           ;standbyMode.c: 1174: foodTable[0] = 0;
  8356  00CE80  0E00               	movlw	0
  8357  00CE82  6E39               	movwf	food_press@foodTable+1,c
  8358  00CE84  0E00               	movlw	0
  8359  00CE86  6E38               	movwf	food_press@foodTable,c
  8360                           
  8361                           ;standbyMode.c: 1175: foodTable[1] = 0;
  8362  00CE88  0E00               	movlw	0
  8363  00CE8A  6E3B               	movwf	food_press@foodTable+3,c
  8364  00CE8C  0E00               	movlw	0
  8365  00CE8E  6E3A               	movwf	food_press@foodTable+2,c
  8366                           
  8367                           ;standbyMode.c: 1176: foodTable[2] = 0;
  8368  00CE90  0E00               	movlw	0
  8369  00CE92  6E3D               	movwf	food_press@foodTable+5,c
  8370  00CE94  0E00               	movlw	0
  8371  00CE96  6E3C               	movwf	food_press@foodTable+4,c
  8372                           
  8373                           ;standbyMode.c: 1177: foodTable[3] = 0;
  8374  00CE98  0E00               	movlw	0
  8375  00CE9A  6E3F               	movwf	food_press@foodTable+7,c
  8376  00CE9C  0E00               	movlw	0
  8377  00CE9E  6E3E               	movwf	food_press@foodTable+6,c
  8378  00CEA0  D784               	goto	l604
  8379  00CEA2                     l612:
  8380                           
  8381                           ;standbyMode.c: 1178: }
  8382                           ;standbyMode.c: 1179: }
  8383                           ;standbyMode.c: 1181: if (backCheck == 1){
  8384  00CEA2  0431               	decf	food_press@backCheck,w,c
  8385  00CEA4  1032               	iorwf	food_press@backCheck+1,w,c
  8386  00CEA6  A4D8               	btfss	status,2,c
  8387  00CEA8  D005               	goto	l623
  8388                           
  8389                           ;standbyMode.c: 1182: return 100;
  8390  00CEAA  0E00               	movlw	0
  8391  00CEAC  6E2A               	movwf	?_food_press+1,c
  8392  00CEAE  0E64               	movlw	100
  8393  00CEB0  6E29               	movwf	?_food_press,c
  8394                           
  8395                           ;standbyMode.c: 1183: }
  8396  00CEB2  0012               	return	
  8397  00CEB4                     l623:
  8398                           
  8399                           ;standbyMode.c: 1184: else {
  8400                           ;standbyMode.c: 1185: isValid = check_food(dietSum, foodTable);
  8401  00CEB4  C029  F001         	movff	food_press@dietSum,check_food@sum
  8402  00CEB8  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  8403  00CEBC  0E38               	movlw	low food_press@foodTable
  8404  00CEBE  6E03               	movwf	check_food@foodInput,c
  8405  00CEC0  0E00               	movlw	high food_press@foodTable
  8406  00CEC2  6E04               	movwf	check_food@foodInput+1,c
  8407  00CEC4  EC8D  F072         	call	_check_food	;wreg free
  8408  00CEC8  C001  F033         	movff	?_check_food,food_press@isValid
  8409  00CECC  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  8410                           
  8411                           ;standbyMode.c: 1187: if (isValid == 0){
  8412  00CED0  5033               	movf	food_press@isValid,w,c
  8413  00CED2  1034               	iorwf	food_press@isValid+1,w,c
  8414  00CED4  A4D8               	btfss	status,2,c
  8415  00CED6  D026               	goto	l626
  8416                           
  8417                           ;standbyMode.c: 1188: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8418  00CED8  0E01               	movlw	1
  8419  00CEDA  EC61  F05E         	call	_lcdInst
  8420  00CEDE  0EC3               	movlw	195
  8421  00CEE0  6E2D               	movwf	??_food_press& (0+255),c
  8422  00CEE2  0ECD               	movlw	205
  8423  00CEE4                     u10187:
  8424  00CEE4  2EE8               	decfsz	wreg,f,c
  8425  00CEE6  D7FE               	bra	u10187
  8426  00CEE8  2E2D               	decfsz	??_food_press& (0+255),f,c
  8427  00CEEA  D7FC               	bra	u10187
  8428  00CEEC  F000               	nop	
  8429                           
  8430                           ;standbyMode.c: 1189: printf("Invalid food!");
  8431  00CEEE  0E9D               	movlw	low STR_69
  8432  00CEF0  6E0D               	movwf	printf@f,c
  8433  00CEF2  0EFE               	movlw	high STR_69
  8434  00CEF4  6E0E               	movwf	printf@f+1,c
  8435  00CEF6  EC43  F06B         	call	_printf	;wreg free
  8436                           
  8437                           ;standbyMode.c: 1190: lcdInst(0xC0);;
  8438  00CEFA  0EC0               	movlw	192
  8439  00CEFC  EC61  F05E         	call	_lcdInst
  8440                           
  8441                           ;standbyMode.c: 1191: printf("Try again.");
  8442  00CF00  0E2A               	movlw	low STR_70
  8443  00CF02  6E0D               	movwf	printf@f,c
  8444  00CF04  0EFF               	movlw	high STR_70
  8445  00CF06  6E0E               	movwf	printf@f+1,c
  8446  00CF08  EC43  F06B         	call	_printf	;wreg free
  8447                           
  8448                           ;standbyMode.c: 1192: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8449  00CF0C  0E33               	movlw	51
  8450  00CF0E  6E2E               	movwf	(??_food_press+1)& (0+255),c
  8451  00CF10  0EBB               	movlw	187
  8452  00CF12  6E2D               	movwf	??_food_press& (0+255),c
  8453  00CF14  0EE0               	movlw	224
  8454  00CF16                     u10197:
  8455  00CF16  2EE8               	decfsz	wreg,f,c
  8456  00CF18  D7FE               	bra	u10197
  8457  00CF1A  2E2D               	decfsz	??_food_press& (0+255),f,c
  8458  00CF1C  D7FC               	bra	u10197
  8459  00CF1E  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  8460  00CF20  D7FA               	bra	u10197
  8461                           
  8462                           ;standbyMode.c: 1193: goto START;
  8463  00CF22  D708               	goto	_food_press
  8464  00CF24                     l626:
  8465                           
  8466                           ;standbyMode.c: 1195: else {
  8467                           ;standbyMode.c: 1196: return isValid;
  8468  00CF24  C033  F029         	movff	food_press@isValid,?_food_press
  8469  00CF28  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  8470  00CF2C  0012               	return	
  8471  00CF2E                     __end_of_food_press:
  8472                           	opt stack 0
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           postinc0	equ	0xFEE
  8480                           wreg	equ	0xFE8
  8481                           postdec1	equ	0xFE5
  8482                           plusw1	equ	0xFE3
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           plusw2	equ	0xFDB
  8488                           fsr2h	equ	0xFDA
  8489                           fsr2l	equ	0xFD9
  8490                           status	equ	0xFD8
  8491                           
  8492 ;; *************** function _get_digits *****************
  8493 ;; Defined at:
  8494 ;;		line 1032 in file "standbyMode.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  sum             2    0[COMRAM] unsigned int 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  count           2    4[COMRAM] unsigned int 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  2    0[COMRAM] unsigned int 
  8501 ;; Registers used:
  8502 ;;		wreg, status,2, status,0
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;Total ram usage:        6 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_food_press
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text13
  8522  00C23E                     __ptext13:
  8523                           	opt stack 0
  8524  00C23E                     _get_digits:
  8525                           	opt stack 28
  8526                           
  8527                           ;standbyMode.c: 1034: unsigned int count = 0;
  8528                           
  8529                           ;incstack = 0
  8530  00C23E  0E00               	movlw	0
  8531  00C240  6E06               	movwf	get_digits@count+1,c
  8532  00C242  0E00               	movlw	0
  8533  00C244  6E05               	movwf	get_digits@count,c
  8534                           
  8535                           ;standbyMode.c: 1036: switch(sum){
  8536  00C246  D015               	goto	l577
  8537  00C248                     
  8538                           ;standbyMode.c: 1049: count = 1;
  8539                           
  8540                           ;standbyMode.c: 1048: case 12:
  8541                           
  8542                           ;standbyMode.c: 1045: break;
  8543                           
  8544                           ;standbyMode.c: 1044: count = 1;
  8545                           
  8546                           ;standbyMode.c: 1043: case 7:
  8547                           
  8548                           ;standbyMode.c: 1040: break;
  8549                           
  8550                           ;standbyMode.c: 1039: count = 1;
  8551  00C248  0E00               	movlw	0
  8552  00C24A  6E06               	movwf	get_digits@count+1,c
  8553  00C24C  0E01               	movlw	1
  8554  00C24E                     L42:
  8555  00C24E  6E05               	movwf	get_digits@count,c
  8556                           
  8557                           ;standbyMode.c: 1055: break;
  8558  00C250  D050               	goto	l579
  8559  00C252                     
  8560                           ;standbyMode.c: 1064: count = 2;
  8561                           
  8562                           ;standbyMode.c: 1063: case 19:
  8563                           
  8564                           ;standbyMode.c: 1060: break;
  8565                           
  8566                           ;standbyMode.c: 1059: count = 2;
  8567  00C252  0E00               	movlw	0
  8568  00C254  6E06               	movwf	get_digits@count+1,c
  8569  00C256  0E02               	movlw	2
  8570  00C258  D7FA               	goto	L42
  8571  00C25A                     
  8572                           ;standbyMode.c: 1099: count = 3;
  8573                           
  8574                           ;standbyMode.c: 1098: case 31:
  8575                           
  8576                           ;standbyMode.c: 1095: break;
  8577                           
  8578                           ;standbyMode.c: 1094: count = 3;
  8579                           
  8580                           ;standbyMode.c: 1093: case 26:
  8581                           
  8582                           ;standbyMode.c: 1090: break;
  8583                           
  8584                           ;standbyMode.c: 1089: count = 3;
  8585                           
  8586                           ;standbyMode.c: 1088: case 22:
  8587                           
  8588                           ;standbyMode.c: 1085: break;
  8589                           
  8590                           ;standbyMode.c: 1084: count = 3;
  8591                           
  8592                           ;standbyMode.c: 1083: case 27:
  8593                           
  8594                           ;standbyMode.c: 1080: break;
  8595                           
  8596                           ;standbyMode.c: 1079: count = 3;
  8597                           
  8598                           ;standbyMode.c: 1078: case 17:
  8599                           
  8600                           ;standbyMode.c: 1075: break;
  8601                           
  8602                           ;standbyMode.c: 1074: count = 3;
  8603                           
  8604                           ;standbyMode.c: 1073: case 18:
  8605                           
  8606                           ;standbyMode.c: 1070: break;
  8607                           
  8608                           ;standbyMode.c: 1069: count = 3;
  8609  00C25A  0E00               	movlw	0
  8610  00C25C  6E06               	movwf	get_digits@count+1,c
  8611  00C25E  0E03               	movlw	3
  8612  00C260  D7F6               	goto	L42
  8613  00C262                     
  8614                           ;standbyMode.c: 1124: count = 4;
  8615                           
  8616                           ;standbyMode.c: 1123: case 43:
  8617                           
  8618                           ;standbyMode.c: 1120: break;
  8619                           
  8620                           ;standbyMode.c: 1119: count = 4;
  8621                           
  8622                           ;standbyMode.c: 1118: case 39:
  8623                           
  8624                           ;standbyMode.c: 1115: break;
  8625                           
  8626                           ;standbyMode.c: 1114: count = 4;
  8627                           
  8628                           ;standbyMode.c: 1113: case 34:
  8629                           
  8630                           ;standbyMode.c: 1110: break;
  8631                           
  8632                           ;standbyMode.c: 1109: count = 4;
  8633                           
  8634                           ;standbyMode.c: 1108: case 29:
  8635                           
  8636                           ;standbyMode.c: 1105: break;
  8637                           
  8638                           ;standbyMode.c: 1104: count = 4;
  8639  00C262  0E00               	movlw	0
  8640  00C264  6E06               	movwf	get_digits@count+1,c
  8641  00C266  0E04               	movlw	4
  8642  00C268  D7F2               	goto	L42
  8643  00C26A                     
  8644                           ;standbyMode.c: 1129: count = 0;
  8645  00C26A  0E00               	movlw	0
  8646  00C26C  6E06               	movwf	get_digits@count+1,c
  8647  00C26E  0E00               	movlw	0
  8648  00C270  D7EE               	goto	L42
  8649  00C272                     l577:
  8650  00C272  C001  F003         	movff	get_digits@sum,??_get_digits
  8651  00C276  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  8652                           
  8653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8654                           ; Switch size 1, requested type "space"
  8655                           ; Number of cases is 1, Range of values is 0 to 0
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte            4     3 (average)
  8659                           ;	Chosen strategy is simple_byte
  8660  00C27A  5004               	movf	??_get_digits+1,w,c
  8661  00C27C  0A00               	xorlw	0	; case 0
  8662  00C27E  A4D8               	btfss	status,2,c
  8663  00C280  D7F4               	goto	l597
  8664                           
  8665                           ; Switch size 1, requested type "space"
  8666                           ; Number of cases is 18, Range of values is 3 to 43
  8667                           ; switch strategies available:
  8668                           ; Name         Instructions Cycles
  8669                           ; simple_byte           55    28 (average)
  8670                           ;	Chosen strategy is simple_byte
  8671  00C282  5003               	movf	??_get_digits,w,c
  8672  00C284  0A03               	xorlw	3	; case 3
  8673  00C286  B4D8               	btfsc	status,2,c
  8674  00C288  D7DF               	goto	l578
  8675  00C28A  0A04               	xorlw	4	; case 7
  8676  00C28C  B4D8               	btfsc	status,2,c
  8677  00C28E  D7DC               	goto	l578
  8678  00C290  0A0D               	xorlw	13	; case 10
  8679  00C292  B4D8               	btfsc	status,2,c
  8680  00C294  D7DE               	goto	l583
  8681  00C296  0A06               	xorlw	6	; case 12
  8682  00C298  B4D8               	btfsc	status,2,c
  8683  00C29A  D7D6               	goto	l578
  8684  00C29C  0A01               	xorlw	1	; case 13
  8685  00C29E  B4D8               	btfsc	status,2,c
  8686  00C2A0  D7DC               	goto	l585
  8687  00C2A2  0A02               	xorlw	2	; case 15
  8688  00C2A4  B4D8               	btfsc	status,2,c
  8689  00C2A6  D7D5               	goto	l583
  8690  00C2A8  0A1E               	xorlw	30	; case 17
  8691  00C2AA  B4D8               	btfsc	status,2,c
  8692  00C2AC  D7D6               	goto	l585
  8693  00C2AE  0A03               	xorlw	3	; case 18
  8694  00C2B0  B4D8               	btfsc	status,2,c
  8695  00C2B2  D7D3               	goto	l585
  8696  00C2B4  0A01               	xorlw	1	; case 19
  8697  00C2B6  B4D8               	btfsc	status,2,c
  8698  00C2B8  D7CC               	goto	l583
  8699  00C2BA  0A05               	xorlw	5	; case 22
  8700  00C2BC  B4D8               	btfsc	status,2,c
  8701  00C2BE  D7CD               	goto	l585
  8702  00C2C0  0A0F               	xorlw	15	; case 25
  8703  00C2C2  B4D8               	btfsc	status,2,c
  8704  00C2C4  D7CE               	goto	l592
  8705  00C2C6  0A03               	xorlw	3	; case 26
  8706  00C2C8  B4D8               	btfsc	status,2,c
  8707  00C2CA  D7C7               	goto	l585
  8708  00C2CC  0A01               	xorlw	1	; case 27
  8709  00C2CE  B4D8               	btfsc	status,2,c
  8710  00C2D0  D7C4               	goto	l585
  8711  00C2D2  0A06               	xorlw	6	; case 29
  8712  00C2D4  B4D8               	btfsc	status,2,c
  8713  00C2D6  D7C5               	goto	l592
  8714  00C2D8  0A02               	xorlw	2	; case 31
  8715  00C2DA  B4D8               	btfsc	status,2,c
  8716  00C2DC  D7BE               	goto	l585
  8717  00C2DE  0A3D               	xorlw	61	; case 34
  8718  00C2E0  B4D8               	btfsc	status,2,c
  8719  00C2E2  D7BF               	goto	l592
  8720  00C2E4  0A05               	xorlw	5	; case 39
  8721  00C2E6  B4D8               	btfsc	status,2,c
  8722  00C2E8  D7BC               	goto	l592
  8723  00C2EA  0A0C               	xorlw	12	; case 43
  8724  00C2EC  B4D8               	btfsc	status,2,c
  8725  00C2EE  D7B9               	goto	l592
  8726  00C2F0  D7BC               	goto	l597
  8727  00C2F2                     l579:
  8728                           
  8729                           ;standbyMode.c: 1132: return count;
  8730  00C2F2  C005  F001         	movff	get_digits@count,?_get_digits
  8731  00C2F6  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  8732  00C2FA  0012               	return		;funcret
  8733  00C2FC                     __end_of_get_digits:
  8734                           	opt stack 0
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           postinc0	equ	0xFEE
  8742                           wreg	equ	0xFE8
  8743                           postdec1	equ	0xFE5
  8744                           plusw1	equ	0xFE3
  8745                           fsr1l	equ	0xFE1
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           plusw2	equ	0xFDB
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function _check_food *****************
  8755 ;; Defined at:
  8756 ;;		line 23 in file "standbyMode.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;  sum             2    0[COMRAM] unsigned int 
  8759 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  8760 ;;		 -> food_press@foodTable(8), 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  returnValue     2    6[COMRAM] unsigned int 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  2    0[COMRAM] unsigned int 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;Total ram usage:        8 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; This function calls:
  8779 ;;		Nothing
  8780 ;; This function is called by:
  8781 ;;		_food_press
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text14
  8786  00E51A                     __ptext14:
  8787                           	opt stack 0
  8788  00E51A                     _check_food:
  8789                           	opt stack 28
  8790                           
  8791                           ;standbyMode.c: 24: unsigned int returnValue = 0;
  8792                           
  8793                           ;incstack = 0
  8794  00E51A  0E00               	movlw	0
  8795  00E51C  6E08               	movwf	check_food@returnValue+1,c
  8796  00E51E  0E00               	movlw	0
  8797  00E520  6E07               	movwf	check_food@returnValue,c
  8798                           
  8799                           ;standbyMode.c: 26: switch(sum){
  8800  00E522  EFA2  F077         	goto	l245
  8801  00E526                     
  8802                           ;standbyMode.c: 29: if (foodInput[0] == 1){
  8803  00E526  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8804  00E52A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8805  00E52E  04DE               	decf	postinc2,w,c
  8806  00E530  10DE               	iorwf	postinc2,w,c
  8807  00E532  A4D8               	btfss	status,2,c
  8808  00E534  D005               	goto	l247
  8809                           
  8810                           ;standbyMode.c: 30: returnValue = 1;
  8811  00E536  0E00               	movlw	0
  8812  00E538  6E08               	movwf	check_food@returnValue+1,c
  8813  00E53A  0E01               	movlw	1
  8814  00E53C  EFA0  F077         	goto	L87
  8815  00E540                     l247:
  8816                           
  8817                           ;standbyMode.c: 32: else if (foodInput[0] == 2){
  8818  00E540  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8819  00E544  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8820  00E548  0E02               	movlw	2
  8821  00E54A  18DE               	xorwf	postinc2,w,c
  8822  00E54C  10DE               	iorwf	postinc2,w,c
  8823  00E54E  A4D8               	btfss	status,2,c
  8824  00E550  EFE6  F077         	goto	l250
  8825                           
  8826                           ;standbyMode.c: 33: returnValue = 2;
  8827  00E554  0E00               	movlw	0
  8828  00E556  6E08               	movwf	check_food@returnValue+1,c
  8829  00E558  0E02               	movlw	2
  8830  00E55A  EFA0  F077         	goto	L87
  8831  00E55E                     
  8832                           ;standbyMode.c: 39: if (foodInput[0] == 1){
  8833  00E55E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8834  00E562  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8835  00E566  04DE               	decf	postinc2,w,c
  8836  00E568  10DE               	iorwf	postinc2,w,c
  8837  00E56A  A4D8               	btfss	status,2,c
  8838  00E56C  D005               	goto	l252
  8839                           
  8840                           ;standbyMode.c: 40: returnValue = 3;
  8841  00E56E  0E00               	movlw	0
  8842  00E570  6E08               	movwf	check_food@returnValue+1,c
  8843  00E572  0E03               	movlw	3
  8844  00E574  EFA0  F077         	goto	L87
  8845  00E578                     l252:
  8846                           
  8847                           ;standbyMode.c: 42: else if (foodInput[0] == 2){
  8848  00E578  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8849  00E57C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8850  00E580  0E02               	movlw	2
  8851  00E582  18DE               	xorwf	postinc2,w,c
  8852  00E584  10DE               	iorwf	postinc2,w,c
  8853  00E586  A4D8               	btfss	status,2,c
  8854  00E588  EFE6  F077         	goto	l250
  8855                           
  8856                           ;standbyMode.c: 43: returnValue = 4;
  8857  00E58C  0E00               	movlw	0
  8858  00E58E  6E08               	movwf	check_food@returnValue+1,c
  8859  00E590  0E04               	movlw	4
  8860  00E592  EFA0  F077         	goto	L87
  8861  00E596                     
  8862                           ;standbyMode.c: 49: if (foodInput[0] == 1){
  8863  00E596  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8864  00E59A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8865  00E59E  04DE               	decf	postinc2,w,c
  8866  00E5A0  10DE               	iorwf	postinc2,w,c
  8867  00E5A2  A4D8               	btfss	status,2,c
  8868  00E5A4  D005               	goto	l256
  8869                           
  8870                           ;standbyMode.c: 50: returnValue = 5;
  8871  00E5A6  0E00               	movlw	0
  8872  00E5A8  6E08               	movwf	check_food@returnValue+1,c
  8873  00E5AA  0E05               	movlw	5
  8874  00E5AC  EFA0  F077         	goto	L87
  8875  00E5B0                     l256:
  8876                           
  8877                           ;standbyMode.c: 52: else if (foodInput[0] == 2){
  8878  00E5B0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8879  00E5B4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8880  00E5B8  0E02               	movlw	2
  8881  00E5BA  18DE               	xorwf	postinc2,w,c
  8882  00E5BC  10DE               	iorwf	postinc2,w,c
  8883  00E5BE  A4D8               	btfss	status,2,c
  8884  00E5C0  D005               	goto	l258
  8885                           
  8886                           ;standbyMode.c: 53: returnValue = 6;
  8887  00E5C2  0E00               	movlw	0
  8888  00E5C4  6E08               	movwf	check_food@returnValue+1,c
  8889  00E5C6  0E06               	movlw	6
  8890  00E5C8  EFA0  F077         	goto	L87
  8891  00E5CC                     l258:
  8892                           
  8893                           ;standbyMode.c: 55: else if (foodInput[0] == 3){
  8894  00E5CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8895  00E5D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8896  00E5D4  0E03               	movlw	3
  8897  00E5D6  18DE               	xorwf	postinc2,w,c
  8898  00E5D8  10DE               	iorwf	postinc2,w,c
  8899  00E5DA  A4D8               	btfss	status,2,c
  8900  00E5DC  EFE6  F077         	goto	l250
  8901                           
  8902                           ;standbyMode.c: 56: returnValue = 7;
  8903  00E5E0  0E00               	movlw	0
  8904  00E5E2  6E08               	movwf	check_food@returnValue+1,c
  8905  00E5E4  0E07               	movlw	7
  8906  00E5E6  EFA0  F077         	goto	L87
  8907  00E5EA                     
  8908                           ;standbyMode.c: 62: if (foodInput[0] == 1 && foodInput[1] == 1){
  8909  00E5EA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8910  00E5EE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8911  00E5F2  04DE               	decf	postinc2,w,c
  8912  00E5F4  10DE               	iorwf	postinc2,w,c
  8913  00E5F6  A4D8               	btfss	status,2,c
  8914  00E5F8  D00F               	goto	l262
  8915  00E5FA  EE20 F002          	lfsr	2,2
  8916  00E5FE  5003               	movf	check_food@foodInput,w,c
  8917  00E600  26D9               	addwf	fsr2l,f,c
  8918  00E602  5004               	movf	check_food@foodInput+1,w,c
  8919  00E604  22DA               	addwfc	fsr2h,f,c
  8920  00E606  04DE               	decf	postinc2,w,c
  8921  00E608  10DE               	iorwf	postinc2,w,c
  8922  00E60A  A4D8               	btfss	status,2,c
  8923  00E60C  D005               	goto	l262
  8924                           
  8925                           ;standbyMode.c: 63: returnValue = 8;
  8926  00E60E  0E00               	movlw	0
  8927  00E610  6E08               	movwf	check_food@returnValue+1,c
  8928  00E612  0E08               	movlw	8
  8929  00E614  EFA0  F077         	goto	L87
  8930  00E618                     l262:
  8931                           
  8932                           ;standbyMode.c: 65: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8933  00E618  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8934  00E61C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8935  00E620  04DE               	decf	postinc2,w,c
  8936  00E622  10DE               	iorwf	postinc2,w,c
  8937  00E624  A4D8               	btfss	status,2,c
  8938  00E626  D010               	goto	l264
  8939  00E628  EE20 F002          	lfsr	2,2
  8940  00E62C  5003               	movf	check_food@foodInput,w,c
  8941  00E62E  26D9               	addwf	fsr2l,f,c
  8942  00E630  5004               	movf	check_food@foodInput+1,w,c
  8943  00E632  22DA               	addwfc	fsr2h,f,c
  8944  00E634  0E02               	movlw	2
  8945  00E636  18DE               	xorwf	postinc2,w,c
  8946  00E638  10DE               	iorwf	postinc2,w,c
  8947  00E63A  A4D8               	btfss	status,2,c
  8948  00E63C  D005               	goto	l264
  8949                           
  8950                           ;standbyMode.c: 66: returnValue = 9;
  8951  00E63E  0E00               	movlw	0
  8952  00E640  6E08               	movwf	check_food@returnValue+1,c
  8953  00E642  0E09               	movlw	9
  8954  00E644  EFA0  F077         	goto	L87
  8955  00E648                     l264:
  8956                           
  8957                           ;standbyMode.c: 68: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8958  00E648  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8959  00E64C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8960  00E650  0E02               	movlw	2
  8961  00E652  18DE               	xorwf	postinc2,w,c
  8962  00E654  10DE               	iorwf	postinc2,w,c
  8963  00E656  A4D8               	btfss	status,2,c
  8964  00E658  D00F               	goto	l266
  8965  00E65A  EE20 F002          	lfsr	2,2
  8966  00E65E  5003               	movf	check_food@foodInput,w,c
  8967  00E660  26D9               	addwf	fsr2l,f,c
  8968  00E662  5004               	movf	check_food@foodInput+1,w,c
  8969  00E664  22DA               	addwfc	fsr2h,f,c
  8970  00E666  04DE               	decf	postinc2,w,c
  8971  00E668  10DE               	iorwf	postinc2,w,c
  8972  00E66A  A4D8               	btfss	status,2,c
  8973  00E66C  D005               	goto	l266
  8974                           
  8975                           ;standbyMode.c: 69: returnValue = 10;
  8976  00E66E  0E00               	movlw	0
  8977  00E670  6E08               	movwf	check_food@returnValue+1,c
  8978  00E672  0E0A               	movlw	10
  8979  00E674  EFA0  F077         	goto	L87
  8980  00E678                     l266:
  8981                           
  8982                           ;standbyMode.c: 71: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8983  00E678  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8984  00E67C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8985  00E680  0E02               	movlw	2
  8986  00E682  18DE               	xorwf	postinc2,w,c
  8987  00E684  10DE               	iorwf	postinc2,w,c
  8988  00E686  A4D8               	btfss	status,2,c
  8989  00E688  EFE6  F077         	goto	l250
  8990  00E68C  EE20 F002          	lfsr	2,2
  8991  00E690  5003               	movf	check_food@foodInput,w,c
  8992  00E692  26D9               	addwf	fsr2l,f,c
  8993  00E694  5004               	movf	check_food@foodInput+1,w,c
  8994  00E696  22DA               	addwfc	fsr2h,f,c
  8995  00E698  0E02               	movlw	2
  8996  00E69A  18DE               	xorwf	postinc2,w,c
  8997  00E69C  10DE               	iorwf	postinc2,w,c
  8998  00E69E  A4D8               	btfss	status,2,c
  8999  00E6A0  EFE6  F077         	goto	l250
  9000                           
  9001                           ;standbyMode.c: 72: returnValue = 11;
  9002  00E6A4  0E00               	movlw	0
  9003  00E6A6  6E08               	movwf	check_food@returnValue+1,c
  9004  00E6A8  0E0B               	movlw	11
  9005  00E6AA  EFA0  F077         	goto	L87
  9006  00E6AE                     
  9007                           ;standbyMode.c: 78: if (foodInput[0] == 1 && foodInput[1] == 1){
  9008  00E6AE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9009  00E6B2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9010  00E6B6  04DE               	decf	postinc2,w,c
  9011  00E6B8  10DE               	iorwf	postinc2,w,c
  9012  00E6BA  A4D8               	btfss	status,2,c
  9013  00E6BC  D00F               	goto	l270
  9014  00E6BE  EE20 F002          	lfsr	2,2
  9015  00E6C2  5003               	movf	check_food@foodInput,w,c
  9016  00E6C4  26D9               	addwf	fsr2l,f,c
  9017  00E6C6  5004               	movf	check_food@foodInput+1,w,c
  9018  00E6C8  22DA               	addwfc	fsr2h,f,c
  9019  00E6CA  04DE               	decf	postinc2,w,c
  9020  00E6CC  10DE               	iorwf	postinc2,w,c
  9021  00E6CE  A4D8               	btfss	status,2,c
  9022  00E6D0  D005               	goto	l270
  9023                           
  9024                           ;standbyMode.c: 79: returnValue = 12;
  9025  00E6D2  0E00               	movlw	0
  9026  00E6D4  6E08               	movwf	check_food@returnValue+1,c
  9027  00E6D6  0E0C               	movlw	12
  9028  00E6D8  EFA0  F077         	goto	L87
  9029  00E6DC                     l270:
  9030                           
  9031                           ;standbyMode.c: 81: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9032  00E6DC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9033  00E6E0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9034  00E6E4  04DE               	decf	postinc2,w,c
  9035  00E6E6  10DE               	iorwf	postinc2,w,c
  9036  00E6E8  A4D8               	btfss	status,2,c
  9037  00E6EA  D010               	goto	l272
  9038  00E6EC  EE20 F002          	lfsr	2,2
  9039  00E6F0  5003               	movf	check_food@foodInput,w,c
  9040  00E6F2  26D9               	addwf	fsr2l,f,c
  9041  00E6F4  5004               	movf	check_food@foodInput+1,w,c
  9042  00E6F6  22DA               	addwfc	fsr2h,f,c
  9043  00E6F8  0E02               	movlw	2
  9044  00E6FA  18DE               	xorwf	postinc2,w,c
  9045  00E6FC  10DE               	iorwf	postinc2,w,c
  9046  00E6FE  A4D8               	btfss	status,2,c
  9047  00E700  D005               	goto	l272
  9048                           
  9049                           ;standbyMode.c: 82: returnValue = 13;
  9050  00E702  0E00               	movlw	0
  9051  00E704  6E08               	movwf	check_food@returnValue+1,c
  9052  00E706  0E0D               	movlw	13
  9053  00E708  EFA0  F077         	goto	L87
  9054  00E70C                     l272:
  9055                           
  9056                           ;standbyMode.c: 84: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9057  00E70C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9058  00E710  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9059  00E714  04DE               	decf	postinc2,w,c
  9060  00E716  10DE               	iorwf	postinc2,w,c
  9061  00E718  A4D8               	btfss	status,2,c
  9062  00E71A  D010               	goto	l274
  9063  00E71C  EE20 F002          	lfsr	2,2
  9064  00E720  5003               	movf	check_food@foodInput,w,c
  9065  00E722  26D9               	addwf	fsr2l,f,c
  9066  00E724  5004               	movf	check_food@foodInput+1,w,c
  9067  00E726  22DA               	addwfc	fsr2h,f,c
  9068  00E728  0E03               	movlw	3
  9069  00E72A  18DE               	xorwf	postinc2,w,c
  9070  00E72C  10DE               	iorwf	postinc2,w,c
  9071  00E72E  A4D8               	btfss	status,2,c
  9072  00E730  D005               	goto	l274
  9073                           
  9074                           ;standbyMode.c: 85: returnValue = 14;
  9075  00E732  0E00               	movlw	0
  9076  00E734  6E08               	movwf	check_food@returnValue+1,c
  9077  00E736  0E0E               	movlw	14
  9078  00E738  EFA0  F077         	goto	L87
  9079  00E73C                     l274:
  9080                           
  9081                           ;standbyMode.c: 87: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9082  00E73C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9083  00E740  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9084  00E744  0E02               	movlw	2
  9085  00E746  18DE               	xorwf	postinc2,w,c
  9086  00E748  10DE               	iorwf	postinc2,w,c
  9087  00E74A  A4D8               	btfss	status,2,c
  9088  00E74C  D00E               	goto	l276
  9089  00E74E  EE20 F002          	lfsr	2,2
  9090  00E752  5003               	movf	check_food@foodInput,w,c
  9091  00E754  26D9               	addwf	fsr2l,f,c
  9092  00E756  5004               	movf	check_food@foodInput+1,w,c
  9093  00E758  22DA               	addwfc	fsr2h,f,c
  9094  00E75A  04DE               	decf	postinc2,w,c
  9095  00E75C  10DE               	iorwf	postinc2,w,c
  9096  00E75E  A4D8               	btfss	status,2,c
  9097  00E760  D004               	goto	l276
  9098                           
  9099                           ;standbyMode.c: 88: returnValue = 15;
  9100  00E762  0E00               	movlw	0
  9101  00E764  6E08               	movwf	check_food@returnValue+1,c
  9102  00E766  0E0F               	movlw	15
  9103  00E768  D3EB               	goto	L87
  9104  00E76A                     l276:
  9105                           
  9106                           ;standbyMode.c: 90: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9107  00E76A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9108  00E76E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9109  00E772  0E02               	movlw	2
  9110  00E774  18DE               	xorwf	postinc2,w,c
  9111  00E776  10DE               	iorwf	postinc2,w,c
  9112  00E778  A4D8               	btfss	status,2,c
  9113  00E77A  EFE6  F077         	goto	l250
  9114  00E77E  EE20 F002          	lfsr	2,2
  9115  00E782  5003               	movf	check_food@foodInput,w,c
  9116  00E784  26D9               	addwf	fsr2l,f,c
  9117  00E786  5004               	movf	check_food@foodInput+1,w,c
  9118  00E788  22DA               	addwfc	fsr2h,f,c
  9119  00E78A  0E02               	movlw	2
  9120  00E78C  18DE               	xorwf	postinc2,w,c
  9121  00E78E  10DE               	iorwf	postinc2,w,c
  9122  00E790  A4D8               	btfss	status,2,c
  9123  00E792  EFE6  F077         	goto	l250
  9124                           
  9125                           ;standbyMode.c: 91: returnValue = 16;
  9126  00E796  0E00               	movlw	0
  9127  00E798  6E08               	movwf	check_food@returnValue+1,c
  9128  00E79A  0E10               	movlw	16
  9129  00E79C  D3D1               	goto	L87
  9130  00E79E                     
  9131                           ;standbyMode.c: 97: if (foodInput[0] == 1 && foodInput[1] == 1){
  9132  00E79E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9133  00E7A2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9134  00E7A6  04DE               	decf	postinc2,w,c
  9135  00E7A8  10DE               	iorwf	postinc2,w,c
  9136  00E7AA  A4D8               	btfss	status,2,c
  9137  00E7AC  D00E               	goto	l280
  9138  00E7AE  EE20 F002          	lfsr	2,2
  9139  00E7B2  5003               	movf	check_food@foodInput,w,c
  9140  00E7B4  26D9               	addwf	fsr2l,f,c
  9141  00E7B6  5004               	movf	check_food@foodInput+1,w,c
  9142  00E7B8  22DA               	addwfc	fsr2h,f,c
  9143  00E7BA  04DE               	decf	postinc2,w,c
  9144  00E7BC  10DE               	iorwf	postinc2,w,c
  9145  00E7BE  A4D8               	btfss	status,2,c
  9146  00E7C0  D004               	goto	l280
  9147                           
  9148                           ;standbyMode.c: 98: returnValue = 17;
  9149  00E7C2  0E00               	movlw	0
  9150  00E7C4  6E08               	movwf	check_food@returnValue+1,c
  9151  00E7C6  0E11               	movlw	17
  9152  00E7C8  D3BB               	goto	L87
  9153  00E7CA                     l280:
  9154                           
  9155                           ;standbyMode.c: 100: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9156  00E7CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9157  00E7CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9158  00E7D2  04DE               	decf	postinc2,w,c
  9159  00E7D4  10DE               	iorwf	postinc2,w,c
  9160  00E7D6  A4D8               	btfss	status,2,c
  9161  00E7D8  D00F               	goto	l282
  9162  00E7DA  EE20 F002          	lfsr	2,2
  9163  00E7DE  5003               	movf	check_food@foodInput,w,c
  9164  00E7E0  26D9               	addwf	fsr2l,f,c
  9165  00E7E2  5004               	movf	check_food@foodInput+1,w,c
  9166  00E7E4  22DA               	addwfc	fsr2h,f,c
  9167  00E7E6  0E02               	movlw	2
  9168  00E7E8  18DE               	xorwf	postinc2,w,c
  9169  00E7EA  10DE               	iorwf	postinc2,w,c
  9170  00E7EC  A4D8               	btfss	status,2,c
  9171  00E7EE  D004               	goto	l282
  9172                           
  9173                           ;standbyMode.c: 101: returnValue = 18;
  9174  00E7F0  0E00               	movlw	0
  9175  00E7F2  6E08               	movwf	check_food@returnValue+1,c
  9176  00E7F4  0E12               	movlw	18
  9177  00E7F6  D3A4               	goto	L87
  9178  00E7F8                     l282:
  9179                           
  9180                           ;standbyMode.c: 103: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9181  00E7F8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9182  00E7FC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9183  00E800  04DE               	decf	postinc2,w,c
  9184  00E802  10DE               	iorwf	postinc2,w,c
  9185  00E804  A4D8               	btfss	status,2,c
  9186  00E806  D00F               	goto	l284
  9187  00E808  EE20 F002          	lfsr	2,2
  9188  00E80C  5003               	movf	check_food@foodInput,w,c
  9189  00E80E  26D9               	addwf	fsr2l,f,c
  9190  00E810  5004               	movf	check_food@foodInput+1,w,c
  9191  00E812  22DA               	addwfc	fsr2h,f,c
  9192  00E814  0E03               	movlw	3
  9193  00E816  18DE               	xorwf	postinc2,w,c
  9194  00E818  10DE               	iorwf	postinc2,w,c
  9195  00E81A  A4D8               	btfss	status,2,c
  9196  00E81C  D004               	goto	l284
  9197                           
  9198                           ;standbyMode.c: 104: returnValue = 19;
  9199  00E81E  0E00               	movlw	0
  9200  00E820  6E08               	movwf	check_food@returnValue+1,c
  9201  00E822  0E13               	movlw	19
  9202  00E824  D38D               	goto	L87
  9203  00E826                     l284:
  9204                           
  9205                           ;standbyMode.c: 106: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9206  00E826  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9207  00E82A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9208  00E82E  0E02               	movlw	2
  9209  00E830  18DE               	xorwf	postinc2,w,c
  9210  00E832  10DE               	iorwf	postinc2,w,c
  9211  00E834  A4D8               	btfss	status,2,c
  9212  00E836  D00E               	goto	l286
  9213  00E838  EE20 F002          	lfsr	2,2
  9214  00E83C  5003               	movf	check_food@foodInput,w,c
  9215  00E83E  26D9               	addwf	fsr2l,f,c
  9216  00E840  5004               	movf	check_food@foodInput+1,w,c
  9217  00E842  22DA               	addwfc	fsr2h,f,c
  9218  00E844  04DE               	decf	postinc2,w,c
  9219  00E846  10DE               	iorwf	postinc2,w,c
  9220  00E848  A4D8               	btfss	status,2,c
  9221  00E84A  D004               	goto	l286
  9222                           
  9223                           ;standbyMode.c: 107: returnValue = 20;
  9224  00E84C  0E00               	movlw	0
  9225  00E84E  6E08               	movwf	check_food@returnValue+1,c
  9226  00E850  0E14               	movlw	20
  9227  00E852  D376               	goto	L87
  9228  00E854                     l286:
  9229                           
  9230                           ;standbyMode.c: 109: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9231  00E854  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9232  00E858  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9233  00E85C  0E02               	movlw	2
  9234  00E85E  18DE               	xorwf	postinc2,w,c
  9235  00E860  10DE               	iorwf	postinc2,w,c
  9236  00E862  A4D8               	btfss	status,2,c
  9237  00E864  D3B3               	goto	l250
  9238  00E866  EE20 F002          	lfsr	2,2
  9239  00E86A  5003               	movf	check_food@foodInput,w,c
  9240  00E86C  26D9               	addwf	fsr2l,f,c
  9241  00E86E  5004               	movf	check_food@foodInput+1,w,c
  9242  00E870  22DA               	addwfc	fsr2h,f,c
  9243  00E872  0E02               	movlw	2
  9244  00E874  18DE               	xorwf	postinc2,w,c
  9245  00E876  10DE               	iorwf	postinc2,w,c
  9246  00E878  A4D8               	btfss	status,2,c
  9247  00E87A  D3A8               	goto	l250
  9248                           
  9249                           ;standbyMode.c: 110: returnValue = 21;
  9250  00E87C  0E00               	movlw	0
  9251  00E87E  6E08               	movwf	check_food@returnValue+1,c
  9252  00E880  0E15               	movlw	21
  9253  00E882  D35E               	goto	L87
  9254  00E884                     
  9255                           ;standbyMode.c: 116: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9256  00E884  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9257  00E888  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9258  00E88C  04DE               	decf	postinc2,w,c
  9259  00E88E  10DE               	iorwf	postinc2,w,c
  9260  00E890  A4D8               	btfss	status,2,c
  9261  00E892  D018               	goto	l290
  9262  00E894  EE20 F002          	lfsr	2,2
  9263  00E898  5003               	movf	check_food@foodInput,w,c
  9264  00E89A  26D9               	addwf	fsr2l,f,c
  9265  00E89C  5004               	movf	check_food@foodInput+1,w,c
  9266  00E89E  22DA               	addwfc	fsr2h,f,c
  9267  00E8A0  04DE               	decf	postinc2,w,c
  9268  00E8A2  10DE               	iorwf	postinc2,w,c
  9269  00E8A4  A4D8               	btfss	status,2,c
  9270  00E8A6  D00E               	goto	l290
  9271  00E8A8  EE20 F004          	lfsr	2,4
  9272  00E8AC  5003               	movf	check_food@foodInput,w,c
  9273  00E8AE  26D9               	addwf	fsr2l,f,c
  9274  00E8B0  5004               	movf	check_food@foodInput+1,w,c
  9275  00E8B2  22DA               	addwfc	fsr2h,f,c
  9276  00E8B4  04DE               	decf	postinc2,w,c
  9277  00E8B6  10DE               	iorwf	postinc2,w,c
  9278  00E8B8  A4D8               	btfss	status,2,c
  9279  00E8BA  D004               	goto	l290
  9280                           
  9281                           ;standbyMode.c: 117: returnValue = 22;
  9282  00E8BC  0E00               	movlw	0
  9283  00E8BE  6E08               	movwf	check_food@returnValue+1,c
  9284  00E8C0  0E16               	movlw	22
  9285  00E8C2  D33E               	goto	L87
  9286  00E8C4                     l290:
  9287                           
  9288                           ;standbyMode.c: 119: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9289  00E8C4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9290  00E8C8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9291  00E8CC  04DE               	decf	postinc2,w,c
  9292  00E8CE  10DE               	iorwf	postinc2,w,c
  9293  00E8D0  A4D8               	btfss	status,2,c
  9294  00E8D2  D37C               	goto	l250
  9295  00E8D4  EE20 F002          	lfsr	2,2
  9296  00E8D8  5003               	movf	check_food@foodInput,w,c
  9297  00E8DA  26D9               	addwf	fsr2l,f,c
  9298  00E8DC  5004               	movf	check_food@foodInput+1,w,c
  9299  00E8DE  22DA               	addwfc	fsr2h,f,c
  9300  00E8E0  04DE               	decf	postinc2,w,c
  9301  00E8E2  10DE               	iorwf	postinc2,w,c
  9302  00E8E4  A4D8               	btfss	status,2,c
  9303  00E8E6  D372               	goto	l250
  9304  00E8E8  EE20 F004          	lfsr	2,4
  9305  00E8EC  5003               	movf	check_food@foodInput,w,c
  9306  00E8EE  26D9               	addwf	fsr2l,f,c
  9307  00E8F0  5004               	movf	check_food@foodInput+1,w,c
  9308  00E8F2  22DA               	addwfc	fsr2h,f,c
  9309  00E8F4  0E02               	movlw	2
  9310  00E8F6  18DE               	xorwf	postinc2,w,c
  9311  00E8F8  10DE               	iorwf	postinc2,w,c
  9312  00E8FA  A4D8               	btfss	status,2,c
  9313  00E8FC  D367               	goto	l250
  9314                           
  9315                           ;standbyMode.c: 120: returnValue = 23;
  9316  00E8FE  0E00               	movlw	0
  9317  00E900  6E08               	movwf	check_food@returnValue+1,c
  9318  00E902  0E17               	movlw	23
  9319  00E904  D31D               	goto	L87
  9320  00E906                     
  9321                           ;standbyMode.c: 126: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9322  00E906  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9323  00E90A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9324  00E90E  04DE               	decf	postinc2,w,c
  9325  00E910  10DE               	iorwf	postinc2,w,c
  9326  00E912  A4D8               	btfss	status,2,c
  9327  00E914  D018               	goto	l294
  9328  00E916  EE20 F002          	lfsr	2,2
  9329  00E91A  5003               	movf	check_food@foodInput,w,c
  9330  00E91C  26D9               	addwf	fsr2l,f,c
  9331  00E91E  5004               	movf	check_food@foodInput+1,w,c
  9332  00E920  22DA               	addwfc	fsr2h,f,c
  9333  00E922  04DE               	decf	postinc2,w,c
  9334  00E924  10DE               	iorwf	postinc2,w,c
  9335  00E926  A4D8               	btfss	status,2,c
  9336  00E928  D00E               	goto	l294
  9337  00E92A  EE20 F004          	lfsr	2,4
  9338  00E92E  5003               	movf	check_food@foodInput,w,c
  9339  00E930  26D9               	addwf	fsr2l,f,c
  9340  00E932  5004               	movf	check_food@foodInput+1,w,c
  9341  00E934  22DA               	addwfc	fsr2h,f,c
  9342  00E936  04DE               	decf	postinc2,w,c
  9343  00E938  10DE               	iorwf	postinc2,w,c
  9344  00E93A  A4D8               	btfss	status,2,c
  9345  00E93C  D004               	goto	l294
  9346                           
  9347                           ;standbyMode.c: 127: returnValue = 24;
  9348  00E93E  0E00               	movlw	0
  9349  00E940  6E08               	movwf	check_food@returnValue+1,c
  9350  00E942  0E18               	movlw	24
  9351  00E944  D2FD               	goto	L87
  9352  00E946                     l294:
  9353                           
  9354                           ;standbyMode.c: 129: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9355  00E946  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9356  00E94A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9357  00E94E  04DE               	decf	postinc2,w,c
  9358  00E950  10DE               	iorwf	postinc2,w,c
  9359  00E952  A4D8               	btfss	status,2,c
  9360  00E954  D33B               	goto	l250
  9361  00E956  EE20 F002          	lfsr	2,2
  9362  00E95A  5003               	movf	check_food@foodInput,w,c
  9363  00E95C  26D9               	addwf	fsr2l,f,c
  9364  00E95E  5004               	movf	check_food@foodInput+1,w,c
  9365  00E960  22DA               	addwfc	fsr2h,f,c
  9366  00E962  04DE               	decf	postinc2,w,c
  9367  00E964  10DE               	iorwf	postinc2,w,c
  9368  00E966  A4D8               	btfss	status,2,c
  9369  00E968  D331               	goto	l250
  9370  00E96A  EE20 F004          	lfsr	2,4
  9371  00E96E  5003               	movf	check_food@foodInput,w,c
  9372  00E970  26D9               	addwf	fsr2l,f,c
  9373  00E972  5004               	movf	check_food@foodInput+1,w,c
  9374  00E974  22DA               	addwfc	fsr2h,f,c
  9375  00E976  0E02               	movlw	2
  9376  00E978  18DE               	xorwf	postinc2,w,c
  9377  00E97A  10DE               	iorwf	postinc2,w,c
  9378  00E97C  A4D8               	btfss	status,2,c
  9379  00E97E  D326               	goto	l250
  9380                           
  9381                           ;standbyMode.c: 130: returnValue = 25;
  9382  00E980  0E00               	movlw	0
  9383  00E982  6E08               	movwf	check_food@returnValue+1,c
  9384  00E984  0E19               	movlw	25
  9385  00E986  D2DC               	goto	L87
  9386  00E988                     
  9387                           ;standbyMode.c: 136: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9388  00E988  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9389  00E98C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9390  00E990  04DE               	decf	postinc2,w,c
  9391  00E992  10DE               	iorwf	postinc2,w,c
  9392  00E994  A4D8               	btfss	status,2,c
  9393  00E996  D018               	goto	l298
  9394  00E998  EE20 F002          	lfsr	2,2
  9395  00E99C  5003               	movf	check_food@foodInput,w,c
  9396  00E99E  26D9               	addwf	fsr2l,f,c
  9397  00E9A0  5004               	movf	check_food@foodInput+1,w,c
  9398  00E9A2  22DA               	addwfc	fsr2h,f,c
  9399  00E9A4  04DE               	decf	postinc2,w,c
  9400  00E9A6  10DE               	iorwf	postinc2,w,c
  9401  00E9A8  A4D8               	btfss	status,2,c
  9402  00E9AA  D00E               	goto	l298
  9403  00E9AC  EE20 F004          	lfsr	2,4
  9404  00E9B0  5003               	movf	check_food@foodInput,w,c
  9405  00E9B2  26D9               	addwf	fsr2l,f,c
  9406  00E9B4  5004               	movf	check_food@foodInput+1,w,c
  9407  00E9B6  22DA               	addwfc	fsr2h,f,c
  9408  00E9B8  04DE               	decf	postinc2,w,c
  9409  00E9BA  10DE               	iorwf	postinc2,w,c
  9410  00E9BC  A4D8               	btfss	status,2,c
  9411  00E9BE  D004               	goto	l298
  9412                           
  9413                           ;standbyMode.c: 137: returnValue = 26;
  9414  00E9C0  0E00               	movlw	0
  9415  00E9C2  6E08               	movwf	check_food@returnValue+1,c
  9416  00E9C4  0E1A               	movlw	26
  9417  00E9C6  D2BC               	goto	L87
  9418  00E9C8                     l298:
  9419                           
  9420                           ;standbyMode.c: 139: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9421  00E9C8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9422  00E9CC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9423  00E9D0  0E02               	movlw	2
  9424  00E9D2  18DE               	xorwf	postinc2,w,c
  9425  00E9D4  10DE               	iorwf	postinc2,w,c
  9426  00E9D6  A4D8               	btfss	status,2,c
  9427  00E9D8  D2F9               	goto	l250
  9428  00E9DA  EE20 F002          	lfsr	2,2
  9429  00E9DE  5003               	movf	check_food@foodInput,w,c
  9430  00E9E0  26D9               	addwf	fsr2l,f,c
  9431  00E9E2  5004               	movf	check_food@foodInput+1,w,c
  9432  00E9E4  22DA               	addwfc	fsr2h,f,c
  9433  00E9E6  04DE               	decf	postinc2,w,c
  9434  00E9E8  10DE               	iorwf	postinc2,w,c
  9435  00E9EA  A4D8               	btfss	status,2,c
  9436  00E9EC  D2EF               	goto	l250
  9437  00E9EE  EE20 F004          	lfsr	2,4
  9438  00E9F2  5003               	movf	check_food@foodInput,w,c
  9439  00E9F4  26D9               	addwf	fsr2l,f,c
  9440  00E9F6  5004               	movf	check_food@foodInput+1,w,c
  9441  00E9F8  22DA               	addwfc	fsr2h,f,c
  9442  00E9FA  04DE               	decf	postinc2,w,c
  9443  00E9FC  10DE               	iorwf	postinc2,w,c
  9444  00E9FE  A4D8               	btfss	status,2,c
  9445  00EA00  D2E5               	goto	l250
  9446                           
  9447                           ;standbyMode.c: 140: returnValue = 27;
  9448  00EA02  0E00               	movlw	0
  9449  00EA04  6E08               	movwf	check_food@returnValue+1,c
  9450  00EA06  0E1B               	movlw	27
  9451  00EA08  D29B               	goto	L87
  9452  00EA0A                     
  9453                           ;standbyMode.c: 146: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9454  00EA0A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9455  00EA0E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9456  00EA12  04DE               	decf	postinc2,w,c
  9457  00EA14  10DE               	iorwf	postinc2,w,c
  9458  00EA16  A4D8               	btfss	status,2,c
  9459  00EA18  D018               	goto	l302
  9460  00EA1A  EE20 F002          	lfsr	2,2
  9461  00EA1E  5003               	movf	check_food@foodInput,w,c
  9462  00EA20  26D9               	addwf	fsr2l,f,c
  9463  00EA22  5004               	movf	check_food@foodInput+1,w,c
  9464  00EA24  22DA               	addwfc	fsr2h,f,c
  9465  00EA26  04DE               	decf	postinc2,w,c
  9466  00EA28  10DE               	iorwf	postinc2,w,c
  9467  00EA2A  A4D8               	btfss	status,2,c
  9468  00EA2C  D00E               	goto	l302
  9469  00EA2E  EE20 F004          	lfsr	2,4
  9470  00EA32  5003               	movf	check_food@foodInput,w,c
  9471  00EA34  26D9               	addwf	fsr2l,f,c
  9472  00EA36  5004               	movf	check_food@foodInput+1,w,c
  9473  00EA38  22DA               	addwfc	fsr2h,f,c
  9474  00EA3A  04DE               	decf	postinc2,w,c
  9475  00EA3C  10DE               	iorwf	postinc2,w,c
  9476  00EA3E  A4D8               	btfss	status,2,c
  9477  00EA40  D004               	goto	l302
  9478                           
  9479                           ;standbyMode.c: 147: returnValue = 28;
  9480  00EA42  0E00               	movlw	0
  9481  00EA44  6E08               	movwf	check_food@returnValue+1,c
  9482  00EA46  0E1C               	movlw	28
  9483  00EA48  D27B               	goto	L87
  9484  00EA4A                     l302:
  9485                           
  9486                           ;standbyMode.c: 149: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9487  00EA4A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9488  00EA4E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9489  00EA52  04DE               	decf	postinc2,w,c
  9490  00EA54  10DE               	iorwf	postinc2,w,c
  9491  00EA56  A4D8               	btfss	status,2,c
  9492  00EA58  D019               	goto	l304
  9493  00EA5A  EE20 F002          	lfsr	2,2
  9494  00EA5E  5003               	movf	check_food@foodInput,w,c
  9495  00EA60  26D9               	addwf	fsr2l,f,c
  9496  00EA62  5004               	movf	check_food@foodInput+1,w,c
  9497  00EA64  22DA               	addwfc	fsr2h,f,c
  9498  00EA66  04DE               	decf	postinc2,w,c
  9499  00EA68  10DE               	iorwf	postinc2,w,c
  9500  00EA6A  A4D8               	btfss	status,2,c
  9501  00EA6C  D00F               	goto	l304
  9502  00EA6E  EE20 F004          	lfsr	2,4
  9503  00EA72  5003               	movf	check_food@foodInput,w,c
  9504  00EA74  26D9               	addwf	fsr2l,f,c
  9505  00EA76  5004               	movf	check_food@foodInput+1,w,c
  9506  00EA78  22DA               	addwfc	fsr2h,f,c
  9507  00EA7A  0E02               	movlw	2
  9508  00EA7C  18DE               	xorwf	postinc2,w,c
  9509  00EA7E  10DE               	iorwf	postinc2,w,c
  9510  00EA80  A4D8               	btfss	status,2,c
  9511  00EA82  D004               	goto	l304
  9512                           
  9513                           ;standbyMode.c: 150: returnValue = 29;
  9514  00EA84  0E00               	movlw	0
  9515  00EA86  6E08               	movwf	check_food@returnValue+1,c
  9516  00EA88  0E1D               	movlw	29
  9517  00EA8A  D25A               	goto	L87
  9518  00EA8C                     l304:
  9519                           
  9520                           ;standbyMode.c: 152: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9521  00EA8C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9522  00EA90  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9523  00EA94  04DE               	decf	postinc2,w,c
  9524  00EA96  10DE               	iorwf	postinc2,w,c
  9525  00EA98  A4D8               	btfss	status,2,c
  9526  00EA9A  D019               	goto	l306
  9527  00EA9C  EE20 F002          	lfsr	2,2
  9528  00EAA0  5003               	movf	check_food@foodInput,w,c
  9529  00EAA2  26D9               	addwf	fsr2l,f,c
  9530  00EAA4  5004               	movf	check_food@foodInput+1,w,c
  9531  00EAA6  22DA               	addwfc	fsr2h,f,c
  9532  00EAA8  0E02               	movlw	2
  9533  00EAAA  18DE               	xorwf	postinc2,w,c
  9534  00EAAC  10DE               	iorwf	postinc2,w,c
  9535  00EAAE  A4D8               	btfss	status,2,c
  9536  00EAB0  D00E               	goto	l306
  9537  00EAB2  EE20 F004          	lfsr	2,4
  9538  00EAB6  5003               	movf	check_food@foodInput,w,c
  9539  00EAB8  26D9               	addwf	fsr2l,f,c
  9540  00EABA  5004               	movf	check_food@foodInput+1,w,c
  9541  00EABC  22DA               	addwfc	fsr2h,f,c
  9542  00EABE  04DE               	decf	postinc2,w,c
  9543  00EAC0  10DE               	iorwf	postinc2,w,c
  9544  00EAC2  A4D8               	btfss	status,2,c
  9545  00EAC4  D004               	goto	l306
  9546                           
  9547                           ;standbyMode.c: 153: returnValue = 30;
  9548  00EAC6  0E00               	movlw	0
  9549  00EAC8  6E08               	movwf	check_food@returnValue+1,c
  9550  00EACA  0E1E               	movlw	30
  9551  00EACC  D239               	goto	L87
  9552  00EACE                     l306:
  9553                           
  9554                           ;standbyMode.c: 155: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9555  00EACE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9556  00EAD2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9557  00EAD6  0E02               	movlw	2
  9558  00EAD8  18DE               	xorwf	postinc2,w,c
  9559  00EADA  10DE               	iorwf	postinc2,w,c
  9560  00EADC  A4D8               	btfss	status,2,c
  9561  00EADE  D276               	goto	l250
  9562  00EAE0  EE20 F002          	lfsr	2,2
  9563  00EAE4  5003               	movf	check_food@foodInput,w,c
  9564  00EAE6  26D9               	addwf	fsr2l,f,c
  9565  00EAE8  5004               	movf	check_food@foodInput+1,w,c
  9566  00EAEA  22DA               	addwfc	fsr2h,f,c
  9567  00EAEC  04DE               	decf	postinc2,w,c
  9568  00EAEE  10DE               	iorwf	postinc2,w,c
  9569  00EAF0  A4D8               	btfss	status,2,c
  9570  00EAF2  D26C               	goto	l250
  9571  00EAF4  EE20 F004          	lfsr	2,4
  9572  00EAF8  5003               	movf	check_food@foodInput,w,c
  9573  00EAFA  26D9               	addwf	fsr2l,f,c
  9574  00EAFC  5004               	movf	check_food@foodInput+1,w,c
  9575  00EAFE  22DA               	addwfc	fsr2h,f,c
  9576  00EB00  04DE               	decf	postinc2,w,c
  9577  00EB02  10DE               	iorwf	postinc2,w,c
  9578  00EB04  A4D8               	btfss	status,2,c
  9579  00EB06  D262               	goto	l250
  9580                           
  9581                           ;standbyMode.c: 156: returnValue = 31;
  9582  00EB08  0E00               	movlw	0
  9583  00EB0A  6E08               	movwf	check_food@returnValue+1,c
  9584  00EB0C  0E1F               	movlw	31
  9585  00EB0E  D218               	goto	L87
  9586  00EB10                     
  9587                           ;standbyMode.c: 162: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9588  00EB10  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9589  00EB14  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9590  00EB18  04DE               	decf	postinc2,w,c
  9591  00EB1A  10DE               	iorwf	postinc2,w,c
  9592  00EB1C  A4D8               	btfss	status,2,c
  9593  00EB1E  D018               	goto	l310
  9594  00EB20  EE20 F002          	lfsr	2,2
  9595  00EB24  5003               	movf	check_food@foodInput,w,c
  9596  00EB26  26D9               	addwf	fsr2l,f,c
  9597  00EB28  5004               	movf	check_food@foodInput+1,w,c
  9598  00EB2A  22DA               	addwfc	fsr2h,f,c
  9599  00EB2C  04DE               	decf	postinc2,w,c
  9600  00EB2E  10DE               	iorwf	postinc2,w,c
  9601  00EB30  A4D8               	btfss	status,2,c
  9602  00EB32  D00E               	goto	l310
  9603  00EB34  EE20 F004          	lfsr	2,4
  9604  00EB38  5003               	movf	check_food@foodInput,w,c
  9605  00EB3A  26D9               	addwf	fsr2l,f,c
  9606  00EB3C  5004               	movf	check_food@foodInput+1,w,c
  9607  00EB3E  22DA               	addwfc	fsr2h,f,c
  9608  00EB40  04DE               	decf	postinc2,w,c
  9609  00EB42  10DE               	iorwf	postinc2,w,c
  9610  00EB44  A4D8               	btfss	status,2,c
  9611  00EB46  D004               	goto	l310
  9612                           
  9613                           ;standbyMode.c: 163: returnValue = 32;
  9614  00EB48  0E00               	movlw	0
  9615  00EB4A  6E08               	movwf	check_food@returnValue+1,c
  9616  00EB4C  0E20               	movlw	32
  9617  00EB4E  D1F8               	goto	L87
  9618  00EB50                     l310:
  9619                           
  9620                           ;standbyMode.c: 165: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9621  00EB50  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9622  00EB54  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9623  00EB58  04DE               	decf	postinc2,w,c
  9624  00EB5A  10DE               	iorwf	postinc2,w,c
  9625  00EB5C  A4D8               	btfss	status,2,c
  9626  00EB5E  D019               	goto	l312
  9627  00EB60  EE20 F002          	lfsr	2,2
  9628  00EB64  5003               	movf	check_food@foodInput,w,c
  9629  00EB66  26D9               	addwf	fsr2l,f,c
  9630  00EB68  5004               	movf	check_food@foodInput+1,w,c
  9631  00EB6A  22DA               	addwfc	fsr2h,f,c
  9632  00EB6C  04DE               	decf	postinc2,w,c
  9633  00EB6E  10DE               	iorwf	postinc2,w,c
  9634  00EB70  A4D8               	btfss	status,2,c
  9635  00EB72  D00F               	goto	l312
  9636  00EB74  EE20 F004          	lfsr	2,4
  9637  00EB78  5003               	movf	check_food@foodInput,w,c
  9638  00EB7A  26D9               	addwf	fsr2l,f,c
  9639  00EB7C  5004               	movf	check_food@foodInput+1,w,c
  9640  00EB7E  22DA               	addwfc	fsr2h,f,c
  9641  00EB80  0E02               	movlw	2
  9642  00EB82  18DE               	xorwf	postinc2,w,c
  9643  00EB84  10DE               	iorwf	postinc2,w,c
  9644  00EB86  A4D8               	btfss	status,2,c
  9645  00EB88  D004               	goto	l312
  9646                           
  9647                           ;standbyMode.c: 166: returnValue = 33;
  9648  00EB8A  0E00               	movlw	0
  9649  00EB8C  6E08               	movwf	check_food@returnValue+1,c
  9650  00EB8E  0E21               	movlw	33
  9651  00EB90  D1D7               	goto	L87
  9652  00EB92                     l312:
  9653                           
  9654                           ;standbyMode.c: 168: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9655  00EB92  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9656  00EB96  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9657  00EB9A  04DE               	decf	postinc2,w,c
  9658  00EB9C  10DE               	iorwf	postinc2,w,c
  9659  00EB9E  A4D8               	btfss	status,2,c
  9660  00EBA0  D019               	goto	l314
  9661  00EBA2  EE20 F002          	lfsr	2,2
  9662  00EBA6  5003               	movf	check_food@foodInput,w,c
  9663  00EBA8  26D9               	addwf	fsr2l,f,c
  9664  00EBAA  5004               	movf	check_food@foodInput+1,w,c
  9665  00EBAC  22DA               	addwfc	fsr2h,f,c
  9666  00EBAE  0E02               	movlw	2
  9667  00EBB0  18DE               	xorwf	postinc2,w,c
  9668  00EBB2  10DE               	iorwf	postinc2,w,c
  9669  00EBB4  A4D8               	btfss	status,2,c
  9670  00EBB6  D00E               	goto	l314
  9671  00EBB8  EE20 F004          	lfsr	2,4
  9672  00EBBC  5003               	movf	check_food@foodInput,w,c
  9673  00EBBE  26D9               	addwf	fsr2l,f,c
  9674  00EBC0  5004               	movf	check_food@foodInput+1,w,c
  9675  00EBC2  22DA               	addwfc	fsr2h,f,c
  9676  00EBC4  04DE               	decf	postinc2,w,c
  9677  00EBC6  10DE               	iorwf	postinc2,w,c
  9678  00EBC8  A4D8               	btfss	status,2,c
  9679  00EBCA  D004               	goto	l314
  9680                           
  9681                           ;standbyMode.c: 169: returnValue = 34;
  9682  00EBCC  0E00               	movlw	0
  9683  00EBCE  6E08               	movwf	check_food@returnValue+1,c
  9684  00EBD0  0E22               	movlw	34
  9685  00EBD2  D1B6               	goto	L87
  9686  00EBD4                     l314:
  9687                           
  9688                           ;standbyMode.c: 171: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9689  00EBD4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9690  00EBD8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9691  00EBDC  0E02               	movlw	2
  9692  00EBDE  18DE               	xorwf	postinc2,w,c
  9693  00EBE0  10DE               	iorwf	postinc2,w,c
  9694  00EBE2  A4D8               	btfss	status,2,c
  9695  00EBE4  D1F3               	goto	l250
  9696  00EBE6  EE20 F002          	lfsr	2,2
  9697  00EBEA  5003               	movf	check_food@foodInput,w,c
  9698  00EBEC  26D9               	addwf	fsr2l,f,c
  9699  00EBEE  5004               	movf	check_food@foodInput+1,w,c
  9700  00EBF0  22DA               	addwfc	fsr2h,f,c
  9701  00EBF2  04DE               	decf	postinc2,w,c
  9702  00EBF4  10DE               	iorwf	postinc2,w,c
  9703  00EBF6  A4D8               	btfss	status,2,c
  9704  00EBF8  D1E9               	goto	l250
  9705  00EBFA  EE20 F004          	lfsr	2,4
  9706  00EBFE  5003               	movf	check_food@foodInput,w,c
  9707  00EC00  26D9               	addwf	fsr2l,f,c
  9708  00EC02  5004               	movf	check_food@foodInput+1,w,c
  9709  00EC04  22DA               	addwfc	fsr2h,f,c
  9710  00EC06  04DE               	decf	postinc2,w,c
  9711  00EC08  10DE               	iorwf	postinc2,w,c
  9712  00EC0A  A4D8               	btfss	status,2,c
  9713  00EC0C  D1DF               	goto	l250
  9714                           
  9715                           ;standbyMode.c: 172: returnValue = 35;
  9716  00EC0E  0E00               	movlw	0
  9717  00EC10  6E08               	movwf	check_food@returnValue+1,c
  9718  00EC12  0E23               	movlw	35
  9719  00EC14  D195               	goto	L87
  9720  00EC16                     
  9721                           ;standbyMode.c: 178: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9722  00EC16  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9723  00EC1A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9724  00EC1E  04DE               	decf	postinc2,w,c
  9725  00EC20  10DE               	iorwf	postinc2,w,c
  9726  00EC22  A4D8               	btfss	status,2,c
  9727  00EC24  D018               	goto	l318
  9728  00EC26  EE20 F002          	lfsr	2,2
  9729  00EC2A  5003               	movf	check_food@foodInput,w,c
  9730  00EC2C  26D9               	addwf	fsr2l,f,c
  9731  00EC2E  5004               	movf	check_food@foodInput+1,w,c
  9732  00EC30  22DA               	addwfc	fsr2h,f,c
  9733  00EC32  04DE               	decf	postinc2,w,c
  9734  00EC34  10DE               	iorwf	postinc2,w,c
  9735  00EC36  A4D8               	btfss	status,2,c
  9736  00EC38  D00E               	goto	l318
  9737  00EC3A  EE20 F004          	lfsr	2,4
  9738  00EC3E  5003               	movf	check_food@foodInput,w,c
  9739  00EC40  26D9               	addwf	fsr2l,f,c
  9740  00EC42  5004               	movf	check_food@foodInput+1,w,c
  9741  00EC44  22DA               	addwfc	fsr2h,f,c
  9742  00EC46  04DE               	decf	postinc2,w,c
  9743  00EC48  10DE               	iorwf	postinc2,w,c
  9744  00EC4A  A4D8               	btfss	status,2,c
  9745  00EC4C  D004               	goto	l318
  9746                           
  9747                           ;standbyMode.c: 179: returnValue = 36;
  9748  00EC4E  0E00               	movlw	0
  9749  00EC50  6E08               	movwf	check_food@returnValue+1,c
  9750  00EC52  0E24               	movlw	36
  9751  00EC54  D175               	goto	L87
  9752  00EC56                     l318:
  9753                           
  9754                           ;standbyMode.c: 181: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9755  00EC56  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9756  00EC5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9757  00EC5E  04DE               	decf	postinc2,w,c
  9758  00EC60  10DE               	iorwf	postinc2,w,c
  9759  00EC62  A4D8               	btfss	status,2,c
  9760  00EC64  D1B3               	goto	l250
  9761  00EC66  EE20 F002          	lfsr	2,2
  9762  00EC6A  5003               	movf	check_food@foodInput,w,c
  9763  00EC6C  26D9               	addwf	fsr2l,f,c
  9764  00EC6E  5004               	movf	check_food@foodInput+1,w,c
  9765  00EC70  22DA               	addwfc	fsr2h,f,c
  9766  00EC72  04DE               	decf	postinc2,w,c
  9767  00EC74  10DE               	iorwf	postinc2,w,c
  9768  00EC76  A4D8               	btfss	status,2,c
  9769  00EC78  D1A9               	goto	l250
  9770  00EC7A  EE20 F004          	lfsr	2,4
  9771  00EC7E  5003               	movf	check_food@foodInput,w,c
  9772  00EC80  26D9               	addwf	fsr2l,f,c
  9773  00EC82  5004               	movf	check_food@foodInput+1,w,c
  9774  00EC84  22DA               	addwfc	fsr2h,f,c
  9775  00EC86  0E02               	movlw	2
  9776  00EC88  18DE               	xorwf	postinc2,w,c
  9777  00EC8A  10DE               	iorwf	postinc2,w,c
  9778  00EC8C  A4D8               	btfss	status,2,c
  9779  00EC8E  D19E               	goto	l250
  9780                           
  9781                           ;standbyMode.c: 182: returnValue = 37;
  9782  00EC90  0E00               	movlw	0
  9783  00EC92  6E08               	movwf	check_food@returnValue+1,c
  9784  00EC94  0E25               	movlw	37
  9785  00EC96  D154               	goto	L87
  9786  00EC98                     
  9787                           ;standbyMode.c: 188: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9788  00EC98  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9789  00EC9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9790  00ECA0  04DE               	decf	postinc2,w,c
  9791  00ECA2  10DE               	iorwf	postinc2,w,c
  9792  00ECA4  A4D8               	btfss	status,2,c
  9793  00ECA6  D018               	goto	l322
  9794  00ECA8  EE20 F002          	lfsr	2,2
  9795  00ECAC  5003               	movf	check_food@foodInput,w,c
  9796  00ECAE  26D9               	addwf	fsr2l,f,c
  9797  00ECB0  5004               	movf	check_food@foodInput+1,w,c
  9798  00ECB2  22DA               	addwfc	fsr2h,f,c
  9799  00ECB4  04DE               	decf	postinc2,w,c
  9800  00ECB6  10DE               	iorwf	postinc2,w,c
  9801  00ECB8  A4D8               	btfss	status,2,c
  9802  00ECBA  D00E               	goto	l322
  9803  00ECBC  EE20 F004          	lfsr	2,4
  9804  00ECC0  5003               	movf	check_food@foodInput,w,c
  9805  00ECC2  26D9               	addwf	fsr2l,f,c
  9806  00ECC4  5004               	movf	check_food@foodInput+1,w,c
  9807  00ECC6  22DA               	addwfc	fsr2h,f,c
  9808  00ECC8  04DE               	decf	postinc2,w,c
  9809  00ECCA  10DE               	iorwf	postinc2,w,c
  9810  00ECCC  A4D8               	btfss	status,2,c
  9811  00ECCE  D004               	goto	l322
  9812                           
  9813                           ;standbyMode.c: 189: returnValue = 38;
  9814  00ECD0  0E00               	movlw	0
  9815  00ECD2  6E08               	movwf	check_food@returnValue+1,c
  9816  00ECD4  0E26               	movlw	38
  9817  00ECD6  D134               	goto	L87
  9818  00ECD8                     l322:
  9819                           
  9820                           ;standbyMode.c: 191: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9821  00ECD8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9822  00ECDC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9823  00ECE0  04DE               	decf	postinc2,w,c
  9824  00ECE2  10DE               	iorwf	postinc2,w,c
  9825  00ECE4  A4D8               	btfss	status,2,c
  9826  00ECE6  D019               	goto	l324
  9827  00ECE8  EE20 F002          	lfsr	2,2
  9828  00ECEC  5003               	movf	check_food@foodInput,w,c
  9829  00ECEE  26D9               	addwf	fsr2l,f,c
  9830  00ECF0  5004               	movf	check_food@foodInput+1,w,c
  9831  00ECF2  22DA               	addwfc	fsr2h,f,c
  9832  00ECF4  04DE               	decf	postinc2,w,c
  9833  00ECF6  10DE               	iorwf	postinc2,w,c
  9834  00ECF8  A4D8               	btfss	status,2,c
  9835  00ECFA  D00F               	goto	l324
  9836  00ECFC  EE20 F004          	lfsr	2,4
  9837  00ED00  5003               	movf	check_food@foodInput,w,c
  9838  00ED02  26D9               	addwf	fsr2l,f,c
  9839  00ED04  5004               	movf	check_food@foodInput+1,w,c
  9840  00ED06  22DA               	addwfc	fsr2h,f,c
  9841  00ED08  0E02               	movlw	2
  9842  00ED0A  18DE               	xorwf	postinc2,w,c
  9843  00ED0C  10DE               	iorwf	postinc2,w,c
  9844  00ED0E  A4D8               	btfss	status,2,c
  9845  00ED10  D004               	goto	l324
  9846                           
  9847                           ;standbyMode.c: 192: returnValue = 39;
  9848  00ED12  0E00               	movlw	0
  9849  00ED14  6E08               	movwf	check_food@returnValue+1,c
  9850  00ED16  0E27               	movlw	39
  9851  00ED18  D113               	goto	L87
  9852  00ED1A                     l324:
  9853                           
  9854                           ;standbyMode.c: 194: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9855  00ED1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9856  00ED1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9857  00ED22  04DE               	decf	postinc2,w,c
  9858  00ED24  10DE               	iorwf	postinc2,w,c
  9859  00ED26  A4D8               	btfss	status,2,c
  9860  00ED28  D019               	goto	l326
  9861  00ED2A  EE20 F002          	lfsr	2,2
  9862  00ED2E  5003               	movf	check_food@foodInput,w,c
  9863  00ED30  26D9               	addwf	fsr2l,f,c
  9864  00ED32  5004               	movf	check_food@foodInput+1,w,c
  9865  00ED34  22DA               	addwfc	fsr2h,f,c
  9866  00ED36  0E02               	movlw	2
  9867  00ED38  18DE               	xorwf	postinc2,w,c
  9868  00ED3A  10DE               	iorwf	postinc2,w,c
  9869  00ED3C  A4D8               	btfss	status,2,c
  9870  00ED3E  D00E               	goto	l326
  9871  00ED40  EE20 F004          	lfsr	2,4
  9872  00ED44  5003               	movf	check_food@foodInput,w,c
  9873  00ED46  26D9               	addwf	fsr2l,f,c
  9874  00ED48  5004               	movf	check_food@foodInput+1,w,c
  9875  00ED4A  22DA               	addwfc	fsr2h,f,c
  9876  00ED4C  04DE               	decf	postinc2,w,c
  9877  00ED4E  10DE               	iorwf	postinc2,w,c
  9878  00ED50  A4D8               	btfss	status,2,c
  9879  00ED52  D004               	goto	l326
  9880                           
  9881                           ;standbyMode.c: 195: returnValue = 40;
  9882  00ED54  0E00               	movlw	0
  9883  00ED56  6E08               	movwf	check_food@returnValue+1,c
  9884  00ED58  0E28               	movlw	40
  9885  00ED5A  D0F2               	goto	L87
  9886  00ED5C                     l326:
  9887                           
  9888                           ;standbyMode.c: 197: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9889  00ED5C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9890  00ED60  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9891  00ED64  0E02               	movlw	2
  9892  00ED66  18DE               	xorwf	postinc2,w,c
  9893  00ED68  10DE               	iorwf	postinc2,w,c
  9894  00ED6A  A4D8               	btfss	status,2,c
  9895  00ED6C  D12F               	goto	l250
  9896  00ED6E  EE20 F002          	lfsr	2,2
  9897  00ED72  5003               	movf	check_food@foodInput,w,c
  9898  00ED74  26D9               	addwf	fsr2l,f,c
  9899  00ED76  5004               	movf	check_food@foodInput+1,w,c
  9900  00ED78  22DA               	addwfc	fsr2h,f,c
  9901  00ED7A  04DE               	decf	postinc2,w,c
  9902  00ED7C  10DE               	iorwf	postinc2,w,c
  9903  00ED7E  A4D8               	btfss	status,2,c
  9904  00ED80  D125               	goto	l250
  9905  00ED82  EE20 F004          	lfsr	2,4
  9906  00ED86  5003               	movf	check_food@foodInput,w,c
  9907  00ED88  26D9               	addwf	fsr2l,f,c
  9908  00ED8A  5004               	movf	check_food@foodInput+1,w,c
  9909  00ED8C  22DA               	addwfc	fsr2h,f,c
  9910  00ED8E  04DE               	decf	postinc2,w,c
  9911  00ED90  10DE               	iorwf	postinc2,w,c
  9912  00ED92  A4D8               	btfss	status,2,c
  9913  00ED94  D11B               	goto	l250
  9914                           
  9915                           ;standbyMode.c: 198: returnValue = 41;
  9916  00ED96  0E00               	movlw	0
  9917  00ED98  6E08               	movwf	check_food@returnValue+1,c
  9918  00ED9A  0E29               	movlw	41
  9919  00ED9C  D0D1               	goto	L87
  9920  00ED9E                     
  9921                           ;standbyMode.c: 204: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9922  00ED9E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9923  00EDA2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9924  00EDA6  04DE               	decf	postinc2,w,c
  9925  00EDA8  10DE               	iorwf	postinc2,w,c
  9926  00EDAA  A4D8               	btfss	status,2,c
  9927  00EDAC  D10F               	goto	l250
  9928  00EDAE  EE20 F002          	lfsr	2,2
  9929  00EDB2  5003               	movf	check_food@foodInput,w,c
  9930  00EDB4  26D9               	addwf	fsr2l,f,c
  9931  00EDB6  5004               	movf	check_food@foodInput+1,w,c
  9932  00EDB8  22DA               	addwfc	fsr2h,f,c
  9933  00EDBA  04DE               	decf	postinc2,w,c
  9934  00EDBC  10DE               	iorwf	postinc2,w,c
  9935  00EDBE  A4D8               	btfss	status,2,c
  9936  00EDC0  D105               	goto	l250
  9937  00EDC2  EE20 F004          	lfsr	2,4
  9938  00EDC6  5003               	movf	check_food@foodInput,w,c
  9939  00EDC8  26D9               	addwf	fsr2l,f,c
  9940  00EDCA  5004               	movf	check_food@foodInput+1,w,c
  9941  00EDCC  22DA               	addwfc	fsr2h,f,c
  9942  00EDCE  04DE               	decf	postinc2,w,c
  9943  00EDD0  10DE               	iorwf	postinc2,w,c
  9944  00EDD2  A4D8               	btfss	status,2,c
  9945  00EDD4  D0FB               	goto	l250
  9946  00EDD6  EE20 F006          	lfsr	2,6
  9947  00EDDA  5003               	movf	check_food@foodInput,w,c
  9948  00EDDC  26D9               	addwf	fsr2l,f,c
  9949  00EDDE  5004               	movf	check_food@foodInput+1,w,c
  9950  00EDE0  22DA               	addwfc	fsr2h,f,c
  9951  00EDE2  04DE               	decf	postinc2,w,c
  9952  00EDE4  10DE               	iorwf	postinc2,w,c
  9953  00EDE6  A4D8               	btfss	status,2,c
  9954  00EDE8  D0F1               	goto	l250
  9955                           
  9956                           ;standbyMode.c: 205: returnValue = 42;
  9957  00EDEA  0E00               	movlw	0
  9958  00EDEC  6E08               	movwf	check_food@returnValue+1,c
  9959  00EDEE  0E2A               	movlw	42
  9960  00EDF0  D0A7               	goto	L87
  9961  00EDF2                     
  9962                           ;standbyMode.c: 211: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9963  00EDF2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9964  00EDF6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9965  00EDFA  04DE               	decf	postinc2,w,c
  9966  00EDFC  10DE               	iorwf	postinc2,w,c
  9967  00EDFE  A4D8               	btfss	status,2,c
  9968  00EE00  D0E5               	goto	l250
  9969  00EE02  EE20 F002          	lfsr	2,2
  9970  00EE06  5003               	movf	check_food@foodInput,w,c
  9971  00EE08  26D9               	addwf	fsr2l,f,c
  9972  00EE0A  5004               	movf	check_food@foodInput+1,w,c
  9973  00EE0C  22DA               	addwfc	fsr2h,f,c
  9974  00EE0E  04DE               	decf	postinc2,w,c
  9975  00EE10  10DE               	iorwf	postinc2,w,c
  9976  00EE12  A4D8               	btfss	status,2,c
  9977  00EE14  D0DB               	goto	l250
  9978  00EE16  EE20 F004          	lfsr	2,4
  9979  00EE1A  5003               	movf	check_food@foodInput,w,c
  9980  00EE1C  26D9               	addwf	fsr2l,f,c
  9981  00EE1E  5004               	movf	check_food@foodInput+1,w,c
  9982  00EE20  22DA               	addwfc	fsr2h,f,c
  9983  00EE22  04DE               	decf	postinc2,w,c
  9984  00EE24  10DE               	iorwf	postinc2,w,c
  9985  00EE26  A4D8               	btfss	status,2,c
  9986  00EE28  D0D1               	goto	l250
  9987  00EE2A  EE20 F006          	lfsr	2,6
  9988  00EE2E  5003               	movf	check_food@foodInput,w,c
  9989  00EE30  26D9               	addwf	fsr2l,f,c
  9990  00EE32  5004               	movf	check_food@foodInput+1,w,c
  9991  00EE34  22DA               	addwfc	fsr2h,f,c
  9992  00EE36  04DE               	decf	postinc2,w,c
  9993  00EE38  10DE               	iorwf	postinc2,w,c
  9994  00EE3A  A4D8               	btfss	status,2,c
  9995  00EE3C  D0C7               	goto	l250
  9996                           
  9997                           ;standbyMode.c: 212: returnValue = 43;
  9998  00EE3E  0E00               	movlw	0
  9999  00EE40  6E08               	movwf	check_food@returnValue+1,c
 10000  00EE42  0E2B               	movlw	43
 10001  00EE44  D07D               	goto	L87
 10002  00EE46                     
 10003                           ;standbyMode.c: 218: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10004  00EE46  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10005  00EE4A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10006  00EE4E  04DE               	decf	postinc2,w,c
 10007  00EE50  10DE               	iorwf	postinc2,w,c
 10008  00EE52  A4D8               	btfss	status,2,c
 10009  00EE54  D0BB               	goto	l250
 10010  00EE56  EE20 F002          	lfsr	2,2
 10011  00EE5A  5003               	movf	check_food@foodInput,w,c
 10012  00EE5C  26D9               	addwf	fsr2l,f,c
 10013  00EE5E  5004               	movf	check_food@foodInput+1,w,c
 10014  00EE60  22DA               	addwfc	fsr2h,f,c
 10015  00EE62  04DE               	decf	postinc2,w,c
 10016  00EE64  10DE               	iorwf	postinc2,w,c
 10017  00EE66  A4D8               	btfss	status,2,c
 10018  00EE68  D0B1               	goto	l250
 10019  00EE6A  EE20 F004          	lfsr	2,4
 10020  00EE6E  5003               	movf	check_food@foodInput,w,c
 10021  00EE70  26D9               	addwf	fsr2l,f,c
 10022  00EE72  5004               	movf	check_food@foodInput+1,w,c
 10023  00EE74  22DA               	addwfc	fsr2h,f,c
 10024  00EE76  04DE               	decf	postinc2,w,c
 10025  00EE78  10DE               	iorwf	postinc2,w,c
 10026  00EE7A  A4D8               	btfss	status,2,c
 10027  00EE7C  D0A7               	goto	l250
 10028  00EE7E  EE20 F006          	lfsr	2,6
 10029  00EE82  5003               	movf	check_food@foodInput,w,c
 10030  00EE84  26D9               	addwf	fsr2l,f,c
 10031  00EE86  5004               	movf	check_food@foodInput+1,w,c
 10032  00EE88  22DA               	addwfc	fsr2h,f,c
 10033  00EE8A  04DE               	decf	postinc2,w,c
 10034  00EE8C  10DE               	iorwf	postinc2,w,c
 10035  00EE8E  A4D8               	btfss	status,2,c
 10036  00EE90  D09D               	goto	l250
 10037                           
 10038                           ;standbyMode.c: 219: returnValue = 44;
 10039  00EE92  0E00               	movlw	0
 10040  00EE94  6E08               	movwf	check_food@returnValue+1,c
 10041  00EE96  0E2C               	movlw	44
 10042  00EE98  D053               	goto	L87
 10043  00EE9A                     
 10044                           ;standbyMode.c: 225: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10045  00EE9A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10046  00EE9E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10047  00EEA2  04DE               	decf	postinc2,w,c
 10048  00EEA4  10DE               	iorwf	postinc2,w,c
 10049  00EEA6  A4D8               	btfss	status,2,c
 10050  00EEA8  D091               	goto	l250
 10051  00EEAA  EE20 F002          	lfsr	2,2
 10052  00EEAE  5003               	movf	check_food@foodInput,w,c
 10053  00EEB0  26D9               	addwf	fsr2l,f,c
 10054  00EEB2  5004               	movf	check_food@foodInput+1,w,c
 10055  00EEB4  22DA               	addwfc	fsr2h,f,c
 10056  00EEB6  04DE               	decf	postinc2,w,c
 10057  00EEB8  10DE               	iorwf	postinc2,w,c
 10058  00EEBA  A4D8               	btfss	status,2,c
 10059  00EEBC  D087               	goto	l250
 10060  00EEBE  EE20 F004          	lfsr	2,4
 10061  00EEC2  5003               	movf	check_food@foodInput,w,c
 10062  00EEC4  26D9               	addwf	fsr2l,f,c
 10063  00EEC6  5004               	movf	check_food@foodInput+1,w,c
 10064  00EEC8  22DA               	addwfc	fsr2h,f,c
 10065  00EECA  04DE               	decf	postinc2,w,c
 10066  00EECC  10DE               	iorwf	postinc2,w,c
 10067  00EECE  A4D8               	btfss	status,2,c
 10068  00EED0  D07D               	goto	l250
 10069  00EED2  EE20 F006          	lfsr	2,6
 10070  00EED6  5003               	movf	check_food@foodInput,w,c
 10071  00EED8  26D9               	addwf	fsr2l,f,c
 10072  00EEDA  5004               	movf	check_food@foodInput+1,w,c
 10073  00EEDC  22DA               	addwfc	fsr2h,f,c
 10074  00EEDE  04DE               	decf	postinc2,w,c
 10075  00EEE0  10DE               	iorwf	postinc2,w,c
 10076  00EEE2  A4D8               	btfss	status,2,c
 10077  00EEE4  D073               	goto	l250
 10078                           
 10079                           ;standbyMode.c: 226: returnValue = 45;
 10080  00EEE6  0E00               	movlw	0
 10081  00EEE8  6E08               	movwf	check_food@returnValue+1,c
 10082  00EEEA  0E2D               	movlw	45
 10083  00EEEC  D029               	goto	L87
 10084  00EEEE                     
 10085                           ;standbyMode.c: 232: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10086  00EEEE  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10087  00EEF2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10088  00EEF6  04DE               	decf	postinc2,w,c
 10089  00EEF8  10DE               	iorwf	postinc2,w,c
 10090  00EEFA  A4D8               	btfss	status,2,c
 10091  00EEFC  D067               	goto	l250
 10092  00EEFE  EE20 F002          	lfsr	2,2
 10093  00EF02  5003               	movf	check_food@foodInput,w,c
 10094  00EF04  26D9               	addwf	fsr2l,f,c
 10095  00EF06  5004               	movf	check_food@foodInput+1,w,c
 10096  00EF08  22DA               	addwfc	fsr2h,f,c
 10097  00EF0A  04DE               	decf	postinc2,w,c
 10098  00EF0C  10DE               	iorwf	postinc2,w,c
 10099  00EF0E  A4D8               	btfss	status,2,c
 10100  00EF10  D05D               	goto	l250
 10101  00EF12  EE20 F004          	lfsr	2,4
 10102  00EF16  5003               	movf	check_food@foodInput,w,c
 10103  00EF18  26D9               	addwf	fsr2l,f,c
 10104  00EF1A  5004               	movf	check_food@foodInput+1,w,c
 10105  00EF1C  22DA               	addwfc	fsr2h,f,c
 10106  00EF1E  04DE               	decf	postinc2,w,c
 10107  00EF20  10DE               	iorwf	postinc2,w,c
 10108  00EF22  A4D8               	btfss	status,2,c
 10109  00EF24  D053               	goto	l250
 10110  00EF26  EE20 F006          	lfsr	2,6
 10111  00EF2A  5003               	movf	check_food@foodInput,w,c
 10112  00EF2C  26D9               	addwf	fsr2l,f,c
 10113  00EF2E  5004               	movf	check_food@foodInput+1,w,c
 10114  00EF30  22DA               	addwfc	fsr2h,f,c
 10115  00EF32  04DE               	decf	postinc2,w,c
 10116  00EF34  10DE               	iorwf	postinc2,w,c
 10117  00EF36  A4D8               	btfss	status,2,c
 10118  00EF38  D049               	goto	l250
 10119                           
 10120                           ;standbyMode.c: 233: returnValue = 46;
 10121  00EF3A  0E00               	movlw	0
 10122  00EF3C  6E08               	movwf	check_food@returnValue+1,c
 10123  00EF3E  0E2E               	movlw	46
 10124  00EF40                     L87:
 10125  00EF40  6E07               	movwf	check_food@returnValue,c
 10126                           
 10127                           ;standbyMode.c: 240: }
 10128                           
 10129                           ;standbyMode.c: 239: break;
 10130                           
 10131                           ;standbyMode.c: 238: default:
 10132                           
 10133                           ;standbyMode.c: 234: }
 10134                           ;standbyMode.c: 235: break;
 10135  00EF42  D044               	goto	l250
 10136  00EF44                     l245:
 10137  00EF44  C001  F005         	movff	check_food@sum,??_check_food
 10138  00EF48  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10139                           
 10140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10141                           ; Switch size 1, requested type "space"
 10142                           ; Number of cases is 1, Range of values is 0 to 0
 10143                           ; switch strategies available:
 10144                           ; Name         Instructions Cycles
 10145                           ; simple_byte            4     3 (average)
 10146                           ;	Chosen strategy is simple_byte
 10147  00EF4C  5006               	movf	??_check_food+1,w,c
 10148  00EF4E  0A00               	xorlw	0	; case 0
 10149  00EF50  A4D8               	btfss	status,2,c
 10150  00EF52  D03C               	goto	l250
 10151                           
 10152                           ; Switch size 1, requested type "space"
 10153                           ; Number of cases is 18, Range of values is 3 to 43
 10154                           ; switch strategies available:
 10155                           ; Name         Instructions Cycles
 10156                           ; simple_byte           55    28 (average)
 10157                           ;	Chosen strategy is simple_byte
 10158  00EF54  5005               	movf	??_check_food,w,c
 10159  00EF56  0A03               	xorlw	3	; case 3
 10160  00EF58  B4D8               	btfsc	status,2,c
 10161  00EF5A  EF93  F072         	goto	l246
 10162  00EF5E  0A04               	xorlw	4	; case 7
 10163  00EF60  B4D8               	btfsc	status,2,c
 10164  00EF62  EFAF  F072         	goto	l251
 10165  00EF66  0A0D               	xorlw	13	; case 10
 10166  00EF68  B4D8               	btfsc	status,2,c
 10167  00EF6A  EFF5  F072         	goto	l261
 10168  00EF6E  0A06               	xorlw	6	; case 12
 10169  00EF70  B4D8               	btfsc	status,2,c
 10170  00EF72  EFCB  F072         	goto	l255
 10171  00EF76  0A01               	xorlw	1	; case 13
 10172  00EF78  B4D8               	btfsc	status,2,c
 10173  00EF7A  D484               	goto	l289
 10174  00EF7C  0A02               	xorlw	2	; case 15
 10175  00EF7E  B4D8               	btfsc	status,2,c
 10176  00EF80  EF57  F073         	goto	l269
 10177  00EF84  0A1E               	xorlw	30	; case 17
 10178  00EF86  B4D8               	btfsc	status,2,c
 10179  00EF88  D4FF               	goto	l297
 10180  00EF8A  0A03               	xorlw	3	; case 18
 10181  00EF8C  B4D8               	btfsc	status,2,c
 10182  00EF8E  D4BB               	goto	l293
 10183  00EF90  0A01               	xorlw	1	; case 19
 10184  00EF92  B4D8               	btfsc	status,2,c
 10185  00EF94  D404               	goto	l279
 10186  00EF96  0A05               	xorlw	5	; case 22
 10187  00EF98  B4D8               	btfsc	status,2,c
 10188  00EF9A  D5BA               	goto	l309
 10189  00EF9C  0A0F               	xorlw	15	; case 25
 10190  00EF9E  B4D8               	btfsc	status,2,c
 10191  00EFA0  D6FE               	goto	l329
 10192  00EFA2  0A03               	xorlw	3	; case 26
 10193  00EFA4  B4D8               	btfsc	status,2,c
 10194  00EFA6  D637               	goto	l317
 10195  00EFA8  0A01               	xorlw	1	; case 27
 10196  00EFAA  B4D8               	btfsc	status,2,c
 10197  00EFAC  D52E               	goto	l301
 10198  00EFAE  0A06               	xorlw	6	; case 29
 10199  00EFB0  B4D8               	btfsc	status,2,c
 10200  00EFB2  D71F               	goto	l331
 10201  00EFB4  0A02               	xorlw	2	; case 31
 10202  00EFB6  B4D8               	btfsc	status,2,c
 10203  00EFB8  D66F               	goto	l321
 10204  00EFBA  0A3D               	xorlw	61	; case 34
 10205  00EFBC  B4D8               	btfsc	status,2,c
 10206  00EFBE  D743               	goto	l333
 10207  00EFC0  0A05               	xorlw	5	; case 39
 10208  00EFC2  B4D8               	btfsc	status,2,c
 10209  00EFC4  D76A               	goto	l335
 10210  00EFC6  0A0C               	xorlw	12	; case 43
 10211  00EFC8  B4D8               	btfsc	status,2,c
 10212  00EFCA  D791               	goto	l337
 10213  00EFCC                     l250:
 10214                           
 10215                           ;standbyMode.c: 241: return returnValue;
 10216  00EFCC  C007  F001         	movff	check_food@returnValue,?_check_food
 10217  00EFD0  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 10218  00EFD4  0012               	return		;funcret
 10219  00EFD6                     __end_of_check_food:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           postinc0	equ	0xFEE
 10228                           wreg	equ	0xFE8
 10229                           postdec1	equ	0xFE5
 10230                           plusw1	equ	0xFE3
 10231                           fsr1l	equ	0xFE1
 10232                           indf2	equ	0xFDF
 10233                           postinc2	equ	0xFDE
 10234                           postdec2	equ	0xFDD
 10235                           plusw2	equ	0xFDB
 10236                           fsr2h	equ	0xFDA
 10237                           fsr2l	equ	0xFD9
 10238                           status	equ	0xFD8
 10239                           
 10240 ;; *************** function _diet_press *****************
 10241 ;; Defined at:
 10242 ;;		line 1203 in file "standbyMode.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;  drawer          2   40[COMRAM] unsigned int 
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;  keypress        1   54[COMRAM] unsigned char 
 10247 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 10248 ;;  sum             2   52[COMRAM] unsigned int 
 10249 ;;  count           2   50[COMRAM] unsigned int 
 10250 ;;  backCheck       2   48[COMRAM] unsigned int 
 10251 ;;  i               2   46[COMRAM] unsigned int 
 10252 ;;  previous        2   44[COMRAM] unsigned int 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  2   40[COMRAM] unsigned int 
 10255 ;; Registers used:
 10256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;Total ram usage:       23 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:    3
 10269 ;; This function calls:
 10270 ;;		_lcdInst
 10271 ;;		_printf
 10272 ;;		_putch
 10273 ;; This function is called by:
 10274 ;;		_standbyMode
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text15
 10279  00DA78                     __ptext15:
 10280                           	opt stack 0
 10281  00DA78                     _diet_press:
 10282                           	opt stack 26
 10283                           
 10284                           ;incstack = 0
 10285                           ;standbyMode.c: 1206: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 10286  00DA78  0E01               	movlw	1
 10287  00DA7A  EC61  F05E         	call	_lcdInst
 10288  00DA7E  0EC3               	movlw	195
 10289  00DA80  6E2B               	movwf	??_diet_press& (0+255),c
 10290  00DA82  0ECD               	movlw	205
 10291  00DA84                     u10207:
 10292  00DA84  2EE8               	decfsz	wreg,f,c
 10293  00DA86  D7FE               	bra	u10207
 10294  00DA88  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10295  00DA8A  D7FC               	bra	u10207
 10296  00DA8C  F000               	nop	
 10297                           
 10298                           ;standbyMode.c: 1207: printf("Drawer %i diet:", drawer);
 10299  00DA8E  0ED5               	movlw	low STR_71
 10300  00DA90  6E0D               	movwf	printf@f,c
 10301  00DA92  0EFD               	movlw	high STR_71
 10302  00DA94  6E0E               	movwf	printf@f+1,c
 10303  00DA96  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10304  00DA9A  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10305  00DA9E  EC43  F06B         	call	_printf	;wreg free
 10306                           
 10307                           ;standbyMode.c: 1208: lcdInst(0xC0);;
 10308  00DAA2  0EC0               	movlw	192
 10309  00DAA4  EC61  F05E         	call	_lcdInst
 10310                           
 10311                           ;standbyMode.c: 1210: unsigned int count = 0;
 10312  00DAA8  0E00               	movlw	0
 10313  00DAAA  6E34               	movwf	diet_press@count+1,c
 10314  00DAAC  0E00               	movlw	0
 10315  00DAAE  6E33               	movwf	diet_press@count,c
 10316                           
 10317                           ;standbyMode.c: 1211: unsigned int previous = 0;
 10318  00DAB0  0E00               	movlw	0
 10319  00DAB2  6E2E               	movwf	diet_press@previous+1,c
 10320  00DAB4  0E00               	movlw	0
 10321  00DAB6  6E2D               	movwf	diet_press@previous,c
 10322                           
 10323                           ;standbyMode.c: 1212: unsigned int sum = 0;
 10324  00DAB8  0E00               	movlw	0
 10325  00DABA  6E36               	movwf	diet_press@sum+1,c
 10326  00DABC  0E00               	movlw	0
 10327  00DABE  6E35               	movwf	diet_press@sum,c
 10328                           
 10329                           ;standbyMode.c: 1213: unsigned int i = 0;
 10330  00DAC0  0E00               	movlw	0
 10331  00DAC2  6E30               	movwf	diet_press@i+1,c
 10332  00DAC4  0E00               	movlw	0
 10333  00DAC6  6E2F               	movwf	diet_press@i,c
 10334                           
 10335                           ;standbyMode.c: 1214: unsigned int dietTable[4] = {0, 0, 0, 0};
 10336  00DAC8  EE20  F0C0         	lfsr	2,diet_press@F3132
 10337  00DACC  EE10  F038         	lfsr	1,diet_press@dietTable
 10338  00DAD0  0E07               	movlw	7
 10339  00DAD2                     u7441:
 10340  00DAD2  CFDB FFE3          	movff	plusw2,plusw1
 10341  00DAD6  06E8               	decf	wreg,f,c
 10342  00DAD8  E2FC               	bc	u7441
 10343                           
 10344                           ;standbyMode.c: 1215: unsigned int backCheck = 0;
 10345  00DADA  0E00               	movlw	0
 10346  00DADC  6E32               	movwf	diet_press@backCheck+1,c
 10347  00DADE  0E00               	movlw	0
 10348  00DAE0  6E31               	movwf	diet_press@backCheck,c
 10349  00DAE2                     l634:
 10350  00DAE2  A281               	btfss	3969,1,c	;volatile
 10351  00DAE4  D7FE               	goto	l633
 10352                           
 10353                           ;standbyMode.c: 1219: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10354  00DAE6  3881               	swapf	3969,w,c	;volatile
 10355  00DAE8  0B0F               	andlw	15
 10356  00DAEA  0B0F               	andlw	15
 10357  00DAEC  6E37               	movwf	diet_press@keypress,c
 10358  00DAEE  B281               	btfsc	3969,1,c	;volatile
 10359  00DAF0  D7FE               	goto	l638
 10360                           
 10361                           ;standbyMode.c: 1222: if(keypress == 15){
 10362  00DAF2  0E0F               	movlw	15
 10363  00DAF4  1837               	xorwf	diet_press@keypress,w,c
 10364  00DAF6  B4D8               	btfsc	status,2,c
 10365  00DAF8  D086               	goto	l641
 10366                           
 10367                           ;standbyMode.c: 1225: else if (keypress == 14){
 10368                           
 10369                           ;standbyMode.c: 1224: }
 10370                           
 10371                           ;standbyMode.c: 1223: break;
 10372  00DAFA  0E0E               	movlw	14
 10373  00DAFC  1837               	xorwf	diet_press@keypress,w,c
 10374  00DAFE  A4D8               	btfss	status,2,c
 10375  00DB00  D005               	goto	l643
 10376                           
 10377                           ;standbyMode.c: 1226: backCheck = 1;
 10378  00DB02  0E00               	movlw	0
 10379  00DB04  6E32               	movwf	diet_press@backCheck+1,c
 10380  00DB06  0E01               	movlw	1
 10381  00DB08  6E31               	movwf	diet_press@backCheck,c
 10382                           
 10383                           ;standbyMode.c: 1227: break;
 10384  00DB0A  D07D               	goto	l641
 10385  00DB0C                     l643:
 10386                           
 10387                           ;standbyMode.c: 1229: else if (keypress == 12){
 10388  00DB0C  0E0C               	movlw	12
 10389  00DB0E  1837               	xorwf	diet_press@keypress,w,c
 10390  00DB10  A4D8               	btfss	status,2,c
 10391  00DB12  D02D               	goto	l645
 10392                           
 10393                           ;standbyMode.c: 1230: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10394  00DB14  0E01               	movlw	1
 10395  00DB16  EC61  F05E         	call	_lcdInst
 10396  00DB1A  0EC3               	movlw	195
 10397  00DB1C  6E2B               	movwf	??_diet_press& (0+255),c
 10398  00DB1E  0ECD               	movlw	205
 10399  00DB20                     u10217:
 10400  00DB20  2EE8               	decfsz	wreg,f,c
 10401  00DB22  D7FE               	bra	u10217
 10402  00DB24  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10403  00DB26  D7FC               	bra	u10217
 10404  00DB28  F000               	nop	
 10405                           
 10406                           ;standbyMode.c: 1231: printf("Drawer %i diet:", drawer);
 10407  00DB2A  0ED5               	movlw	low STR_71
 10408  00DB2C  6E0D               	movwf	printf@f,c
 10409  00DB2E  0EFD               	movlw	high STR_71
 10410  00DB30  6E0E               	movwf	printf@f+1,c
 10411  00DB32  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10412  00DB36  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10413  00DB3A  EC43  F06B         	call	_printf	;wreg free
 10414                           
 10415                           ;standbyMode.c: 1232: lcdInst(0xC0);;
 10416  00DB3E  0EC0               	movlw	192
 10417  00DB40  EC61  F05E         	call	_lcdInst
 10418                           
 10419                           ;standbyMode.c: 1233: count = 0;
 10420  00DB44  0E00               	movlw	0
 10421  00DB46  6E34               	movwf	diet_press@count+1,c
 10422  00DB48  0E00               	movlw	0
 10423  00DB4A  6E33               	movwf	diet_press@count,c
 10424                           
 10425                           ;standbyMode.c: 1234: dietTable[0] = 0;
 10426  00DB4C  0E00               	movlw	0
 10427  00DB4E  6E39               	movwf	diet_press@dietTable+1,c
 10428  00DB50  0E00               	movlw	0
 10429  00DB52  6E38               	movwf	diet_press@dietTable,c
 10430                           
 10431                           ;standbyMode.c: 1235: dietTable[1] = 0;
 10432  00DB54  0E00               	movlw	0
 10433  00DB56  6E3B               	movwf	diet_press@dietTable+3,c
 10434  00DB58  0E00               	movlw	0
 10435  00DB5A  6E3A               	movwf	diet_press@dietTable+2,c
 10436                           
 10437                           ;standbyMode.c: 1236: dietTable[2] = 0;
 10438  00DB5C  0E00               	movlw	0
 10439  00DB5E  6E3D               	movwf	diet_press@dietTable+5,c
 10440  00DB60  0E00               	movlw	0
 10441  00DB62  6E3C               	movwf	diet_press@dietTable+4,c
 10442                           
 10443                           ;standbyMode.c: 1237: dietTable[3] = 0;
 10444  00DB64  0E00               	movlw	0
 10445  00DB66  6E3F               	movwf	diet_press@dietTable+7,c
 10446  00DB68  0E00               	movlw	0
 10447  00DB6A  6E3E               	movwf	diet_press@dietTable+6,c
 10448                           
 10449                           ;standbyMode.c: 1238: }
 10450  00DB6C  D7BA               	goto	l633
 10451  00DB6E                     l645:
 10452                           
 10453                           ;standbyMode.c: 1239: else if (count <= 3){
 10454  00DB6E  5034               	movf	diet_press@count+1,w,c
 10455  00DB70  E1B8               	bnz	l634
 10456  00DB72  0E04               	movlw	4
 10457  00DB74  5C33               	subwf	diet_press@count,w,c
 10458  00DB76  B0D8               	btfsc	status,0,c
 10459  00DB78  D7B4               	goto	l633
 10460                           
 10461                           ;standbyMode.c: 1240: if (keypress == 3 || keypress == 7){
 10462  00DB7A  0E03               	movlw	3
 10463  00DB7C  1837               	xorwf	diet_press@keypress,w,c
 10464  00DB7E  B4D8               	btfsc	status,2,c
 10465  00DB80  D004               	goto	u7520
 10466  00DB82  0E07               	movlw	7
 10467  00DB84  1837               	xorwf	diet_press@keypress,w,c
 10468  00DB86  A4D8               	btfss	status,2,c
 10469  00DB88  D016               	goto	l648
 10470  00DB8A                     u7520:
 10471                           
 10472                           ;standbyMode.c: 1241: putch(input[keypress]);
 10473  00DB8A  5037               	movf	diet_press@keypress,w,c
 10474  00DB8C  0D01               	mullw	1
 10475  00DB8E  0ECC               	movlw	low _input
 10476  00DB90  24F3               	addwf	prodl,w,c
 10477  00DB92  6EF6               	movwf	tblptrl,c
 10478  00DB94  0EFC               	movlw	high _input
 10479  00DB96  20F4               	addwfc	prodh,w,c
 10480  00DB98  6EF7               	movwf	tblptrh,c
 10481  00DB9A                     	if	1	;There are 3 active tblptr bytes
 10482  00DB9A  6AF8               	clrf	tblptru,c
 10483  00DB9C  0E00               	movlw	low (__mediumconst shr (0+16))
 10484  00DB9E  22F8               	addwfc	tblptru,f,c
 10485  00DBA0                     	endif
 10486  00DBA0  0008               	tblrd		*
 10487  00DBA2  50F5               	movf	tablat,w,c
 10488  00DBA4  EC75  F05E         	call	_putch
 10489                           
 10490                           ;standbyMode.c: 1242: dietTable[count] = keypress;
 10491  00DBA8  5037               	movf	diet_press@keypress,w,c
 10492  00DBAA  6E2B               	movwf	??_diet_press& (0+255),c
 10493  00DBAC  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10494  00DBAE  D01D               	goto	L106
 10495  00DBB0                     l6784:
 10496                           
 10497                           ;standbyMode.c: 1243: count += 1;
 10498  00DBB0  4A33               	infsnz	diet_press@count,f,c
 10499  00DBB2  2A34               	incf	diet_press@count+1,f,c
 10500                           
 10501                           ;standbyMode.c: 1244: }
 10502  00DBB4  D796               	goto	l633
 10503  00DBB6                     l648:
 10504                           
 10505                           ;standbyMode.c: 1245: else if (keypress == 11){
 10506  00DBB6  0E0B               	movlw	11
 10507  00DBB8  1837               	xorwf	diet_press@keypress,w,c
 10508  00DBBA  A4D8               	btfss	status,2,c
 10509  00DBBC  D792               	goto	l633
 10510                           
 10511                           ;standbyMode.c: 1246: putch(input[keypress]);
 10512  00DBBE  5037               	movf	diet_press@keypress,w,c
 10513  00DBC0  0D01               	mullw	1
 10514  00DBC2  0ECC               	movlw	low _input
 10515  00DBC4  24F3               	addwf	prodl,w,c
 10516  00DBC6  6EF6               	movwf	tblptrl,c
 10517  00DBC8  0EFC               	movlw	high _input
 10518  00DBCA  20F4               	addwfc	prodh,w,c
 10519  00DBCC  6EF7               	movwf	tblptrh,c
 10520  00DBCE                     	if	1	;There are 3 active tblptr bytes
 10521  00DBCE  6AF8               	clrf	tblptru,c
 10522  00DBD0  0E00               	movlw	low (__mediumconst shr (0+16))
 10523  00DBD2  22F8               	addwfc	tblptru,f,c
 10524  00DBD4                     	endif
 10525  00DBD4  0008               	tblrd		*
 10526  00DBD6  50F5               	movf	tablat,w,c
 10527  00DBD8  EC75  F05E         	call	_putch
 10528                           
 10529                           ;standbyMode.c: 1247: dietTable[count] = keypress + 1;
 10530  00DBDC  5037               	movf	diet_press@keypress,w,c
 10531  00DBDE  6E2B               	movwf	??_diet_press& (0+255),c
 10532  00DBE0  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10533  00DBE2  0E01               	movlw	1
 10534  00DBE4  262B               	addwf	??_diet_press,f,c
 10535  00DBE6  0E00               	movlw	0
 10536  00DBE8  222C               	addwfc	??_diet_press+1,f,c
 10537  00DBEA                     L106:
 10538  00DBEA  90D8               	bcf	status,0,c
 10539  00DBEC  3433               	rlcf	diet_press@count,w,c
 10540  00DBEE  6ED9               	movwf	fsr2l,c
 10541  00DBF0  3434               	rlcf	diet_press@count+1,w,c
 10542  00DBF2  6EDA               	movwf	fsr2h,c
 10543  00DBF4  0E38               	movlw	low diet_press@dietTable
 10544  00DBF6  26D9               	addwf	fsr2l,f,c
 10545  00DBF8  0E00               	movlw	high diet_press@dietTable
 10546  00DBFA  22DA               	addwfc	fsr2h,f,c
 10547  00DBFC  C02B  FFDE         	movff	??_diet_press,postinc2
 10548  00DC00  C02C  FFDD         	movff	??_diet_press+1,postdec2
 10549  00DC04  D7D5               	goto	l6784
 10550  00DC06                     l641:
 10551                           
 10552                           ;standbyMode.c: 1249: }
 10553                           ;standbyMode.c: 1250: }
 10554                           ;standbyMode.c: 1251: }
 10555                           ;standbyMode.c: 1253: if (backCheck == 1){
 10556  00DC06  0431               	decf	diet_press@backCheck,w,c
 10557  00DC08  1032               	iorwf	diet_press@backCheck+1,w,c
 10558  00DC0A  A4D8               	btfss	status,2,c
 10559  00DC0C  D004               	goto	l654
 10560                           
 10561                           ;standbyMode.c: 1254: sum = 100;
 10562  00DC0E  0E00               	movlw	0
 10563  00DC10  6E36               	movwf	diet_press@sum+1,c
 10564  00DC12  0E64               	movlw	100
 10565  00DC14  D199               	goto	L105
 10566  00DC16                     l654:
 10567                           
 10568                           ;standbyMode.c: 1258: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10569  00DC16  0E0C               	movlw	12
 10570  00DC18  1838               	xorwf	diet_press@dietTable,w,c
 10571  00DC1A  1039               	iorwf	diet_press@dietTable+1,w,c
 10572  00DC1C  A4D8               	btfss	status,2,c
 10573  00DC1E  D010               	goto	l656
 10574  00DC20  503A               	movf	diet_press@dietTable+2,w,c
 10575  00DC22  103B               	iorwf	diet_press@dietTable+3,w,c
 10576  00DC24  A4D8               	btfss	status,2,c
 10577  00DC26  D00C               	goto	l656
 10578  00DC28  503C               	movf	diet_press@dietTable+4,w,c
 10579  00DC2A  103D               	iorwf	diet_press@dietTable+5,w,c
 10580  00DC2C  A4D8               	btfss	status,2,c
 10581  00DC2E  D008               	goto	l656
 10582  00DC30  503E               	movf	diet_press@dietTable+6,w,c
 10583  00DC32  103F               	iorwf	diet_press@dietTable+7,w,c
 10584  00DC34  A4D8               	btfss	status,2,c
 10585  00DC36  D004               	goto	l656
 10586                           
 10587                           ;standbyMode.c: 1259: sum = 12;
 10588  00DC38  0E00               	movlw	0
 10589  00DC3A  6E36               	movwf	diet_press@sum+1,c
 10590  00DC3C  0E0C               	movlw	12
 10591  00DC3E  D184               	goto	L105
 10592  00DC40                     l656:
 10593                           
 10594                           ;standbyMode.c: 1263: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10595  00DC40  0E03               	movlw	3
 10596  00DC42  1838               	xorwf	diet_press@dietTable,w,c
 10597  00DC44  1039               	iorwf	diet_press@dietTable+1,w,c
 10598  00DC46  A4D8               	btfss	status,2,c
 10599  00DC48  D010               	goto	l658
 10600  00DC4A  503A               	movf	diet_press@dietTable+2,w,c
 10601  00DC4C  103B               	iorwf	diet_press@dietTable+3,w,c
 10602  00DC4E  A4D8               	btfss	status,2,c
 10603  00DC50  D00C               	goto	l658
 10604  00DC52  503C               	movf	diet_press@dietTable+4,w,c
 10605  00DC54  103D               	iorwf	diet_press@dietTable+5,w,c
 10606  00DC56  A4D8               	btfss	status,2,c
 10607  00DC58  D008               	goto	l658
 10608  00DC5A  503E               	movf	diet_press@dietTable+6,w,c
 10609  00DC5C  103F               	iorwf	diet_press@dietTable+7,w,c
 10610  00DC5E  A4D8               	btfss	status,2,c
 10611  00DC60  D004               	goto	l658
 10612                           
 10613                           ;standbyMode.c: 1264: sum = 3;
 10614  00DC62  0E00               	movlw	0
 10615  00DC64  6E36               	movwf	diet_press@sum+1,c
 10616  00DC66  0E03               	movlw	3
 10617  00DC68  D16F               	goto	L105
 10618  00DC6A                     l658:
 10619                           
 10620                           ;standbyMode.c: 1268: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10621  00DC6A  0E07               	movlw	7
 10622  00DC6C  1838               	xorwf	diet_press@dietTable,w,c
 10623  00DC6E  1039               	iorwf	diet_press@dietTable+1,w,c
 10624  00DC70  A4D8               	btfss	status,2,c
 10625  00DC72  D010               	goto	l660
 10626  00DC74  503A               	movf	diet_press@dietTable+2,w,c
 10627  00DC76  103B               	iorwf	diet_press@dietTable+3,w,c
 10628  00DC78  A4D8               	btfss	status,2,c
 10629  00DC7A  D00C               	goto	l660
 10630  00DC7C  503C               	movf	diet_press@dietTable+4,w,c
 10631  00DC7E  103D               	iorwf	diet_press@dietTable+5,w,c
 10632  00DC80  A4D8               	btfss	status,2,c
 10633  00DC82  D008               	goto	l660
 10634  00DC84  503E               	movf	diet_press@dietTable+6,w,c
 10635  00DC86  103F               	iorwf	diet_press@dietTable+7,w,c
 10636  00DC88  A4D8               	btfss	status,2,c
 10637  00DC8A  D004               	goto	l660
 10638                           
 10639                           ;standbyMode.c: 1269: sum = 7;
 10640  00DC8C  0E00               	movlw	0
 10641  00DC8E  6E36               	movwf	diet_press@sum+1,c
 10642  00DC90  0E07               	movlw	7
 10643  00DC92  D15A               	goto	L105
 10644  00DC94                     l660:
 10645                           
 10646                           ;standbyMode.c: 1273: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10647  00DC94  0E03               	movlw	3
 10648  00DC96  1838               	xorwf	diet_press@dietTable,w,c
 10649  00DC98  1039               	iorwf	diet_press@dietTable+1,w,c
 10650  00DC9A  A4D8               	btfss	status,2,c
 10651  00DC9C  D011               	goto	l662
 10652  00DC9E  0E07               	movlw	7
 10653  00DCA0  183A               	xorwf	diet_press@dietTable+2,w,c
 10654  00DCA2  103B               	iorwf	diet_press@dietTable+3,w,c
 10655  00DCA4  A4D8               	btfss	status,2,c
 10656  00DCA6  D00C               	goto	l662
 10657  00DCA8  503C               	movf	diet_press@dietTable+4,w,c
 10658  00DCAA  103D               	iorwf	diet_press@dietTable+5,w,c
 10659  00DCAC  A4D8               	btfss	status,2,c
 10660  00DCAE  D008               	goto	l662
 10661  00DCB0  503E               	movf	diet_press@dietTable+6,w,c
 10662  00DCB2  103F               	iorwf	diet_press@dietTable+7,w,c
 10663  00DCB4  A4D8               	btfss	status,2,c
 10664  00DCB6  D004               	goto	l662
 10665                           
 10666                           ;standbyMode.c: 1274: sum = 10;
 10667  00DCB8  0E00               	movlw	0
 10668  00DCBA  6E36               	movwf	diet_press@sum+1,c
 10669  00DCBC  0E0A               	movlw	10
 10670  00DCBE  D144               	goto	L105
 10671  00DCC0                     l662:
 10672                           
 10673                           ;standbyMode.c: 1278: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10674  00DCC0  0E03               	movlw	3
 10675  00DCC2  1838               	xorwf	diet_press@dietTable,w,c
 10676  00DCC4  1039               	iorwf	diet_press@dietTable+1,w,c
 10677  00DCC6  A4D8               	btfss	status,2,c
 10678  00DCC8  D011               	goto	l664
 10679  00DCCA  0E0C               	movlw	12
 10680  00DCCC  183A               	xorwf	diet_press@dietTable+2,w,c
 10681  00DCCE  103B               	iorwf	diet_press@dietTable+3,w,c
 10682  00DCD0  A4D8               	btfss	status,2,c
 10683  00DCD2  D00C               	goto	l664
 10684  00DCD4  503C               	movf	diet_press@dietTable+4,w,c
 10685  00DCD6  103D               	iorwf	diet_press@dietTable+5,w,c
 10686  00DCD8  A4D8               	btfss	status,2,c
 10687  00DCDA  D008               	goto	l664
 10688  00DCDC  503E               	movf	diet_press@dietTable+6,w,c
 10689  00DCDE  103F               	iorwf	diet_press@dietTable+7,w,c
 10690  00DCE0  A4D8               	btfss	status,2,c
 10691  00DCE2  D004               	goto	l664
 10692                           
 10693                           ;standbyMode.c: 1279: sum = 15;
 10694  00DCE4  0E00               	movlw	0
 10695  00DCE6  6E36               	movwf	diet_press@sum+1,c
 10696  00DCE8  0E0F               	movlw	15
 10697  00DCEA  D12E               	goto	L105
 10698  00DCEC                     l664:
 10699                           
 10700                           ;standbyMode.c: 1283: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10701  00DCEC  0E07               	movlw	7
 10702  00DCEE  1838               	xorwf	diet_press@dietTable,w,c
 10703  00DCF0  1039               	iorwf	diet_press@dietTable+1,w,c
 10704  00DCF2  A4D8               	btfss	status,2,c
 10705  00DCF4  D011               	goto	l666
 10706  00DCF6  0E0C               	movlw	12
 10707  00DCF8  183A               	xorwf	diet_press@dietTable+2,w,c
 10708  00DCFA  103B               	iorwf	diet_press@dietTable+3,w,c
 10709  00DCFC  A4D8               	btfss	status,2,c
 10710  00DCFE  D00C               	goto	l666
 10711  00DD00  503C               	movf	diet_press@dietTable+4,w,c
 10712  00DD02  103D               	iorwf	diet_press@dietTable+5,w,c
 10713  00DD04  A4D8               	btfss	status,2,c
 10714  00DD06  D008               	goto	l666
 10715  00DD08  503E               	movf	diet_press@dietTable+6,w,c
 10716  00DD0A  103F               	iorwf	diet_press@dietTable+7,w,c
 10717  00DD0C  A4D8               	btfss	status,2,c
 10718  00DD0E  D004               	goto	l666
 10719                           
 10720                           ;standbyMode.c: 1284: sum = 19;
 10721  00DD10  0E00               	movlw	0
 10722  00DD12  6E36               	movwf	diet_press@sum+1,c
 10723  00DD14  0E13               	movlw	19
 10724  00DD16  D118               	goto	L105
 10725  00DD18                     l666:
 10726                           
 10727                           ;standbyMode.c: 1288: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10728  00DD18  0E03               	movlw	3
 10729  00DD1A  1838               	xorwf	diet_press@dietTable,w,c
 10730  00DD1C  1039               	iorwf	diet_press@dietTable+1,w,c
 10731  00DD1E  A4D8               	btfss	status,2,c
 10732  00DD20  D012               	goto	l668
 10733  00DD22  0E03               	movlw	3
 10734  00DD24  183A               	xorwf	diet_press@dietTable+2,w,c
 10735  00DD26  103B               	iorwf	diet_press@dietTable+3,w,c
 10736  00DD28  A4D8               	btfss	status,2,c
 10737  00DD2A  D00D               	goto	l668
 10738  00DD2C  0E07               	movlw	7
 10739  00DD2E  183C               	xorwf	diet_press@dietTable+4,w,c
 10740  00DD30  103D               	iorwf	diet_press@dietTable+5,w,c
 10741  00DD32  A4D8               	btfss	status,2,c
 10742  00DD34  D008               	goto	l668
 10743  00DD36  503E               	movf	diet_press@dietTable+6,w,c
 10744  00DD38  103F               	iorwf	diet_press@dietTable+7,w,c
 10745  00DD3A  A4D8               	btfss	status,2,c
 10746  00DD3C  D004               	goto	l668
 10747                           
 10748                           ;standbyMode.c: 1289: sum = 13;
 10749  00DD3E  0E00               	movlw	0
 10750  00DD40  6E36               	movwf	diet_press@sum+1,c
 10751  00DD42  0E0D               	movlw	13
 10752  00DD44  D101               	goto	L105
 10753  00DD46                     l668:
 10754                           
 10755                           ;standbyMode.c: 1293: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10756  00DD46  0E03               	movlw	3
 10757  00DD48  1838               	xorwf	diet_press@dietTable,w,c
 10758  00DD4A  1039               	iorwf	diet_press@dietTable+1,w,c
 10759  00DD4C  A4D8               	btfss	status,2,c
 10760  00DD4E  D012               	goto	l670
 10761  00DD50  0E03               	movlw	3
 10762  00DD52  183A               	xorwf	diet_press@dietTable+2,w,c
 10763  00DD54  103B               	iorwf	diet_press@dietTable+3,w,c
 10764  00DD56  A4D8               	btfss	status,2,c
 10765  00DD58  D00D               	goto	l670
 10766  00DD5A  0E0C               	movlw	12
 10767  00DD5C  183C               	xorwf	diet_press@dietTable+4,w,c
 10768  00DD5E  103D               	iorwf	diet_press@dietTable+5,w,c
 10769  00DD60  A4D8               	btfss	status,2,c
 10770  00DD62  D008               	goto	l670
 10771  00DD64  503E               	movf	diet_press@dietTable+6,w,c
 10772  00DD66  103F               	iorwf	diet_press@dietTable+7,w,c
 10773  00DD68  A4D8               	btfss	status,2,c
 10774  00DD6A  D004               	goto	l670
 10775                           
 10776                           ;standbyMode.c: 1294: sum = 18;
 10777  00DD6C  0E00               	movlw	0
 10778  00DD6E  6E36               	movwf	diet_press@sum+1,c
 10779  00DD70  0E12               	movlw	18
 10780  00DD72  D0EA               	goto	L105
 10781  00DD74                     l670:
 10782                           
 10783                           ;standbyMode.c: 1298: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10784  00DD74  0E03               	movlw	3
 10785  00DD76  1838               	xorwf	diet_press@dietTable,w,c
 10786  00DD78  1039               	iorwf	diet_press@dietTable+1,w,c
 10787  00DD7A  A4D8               	btfss	status,2,c
 10788  00DD7C  D012               	goto	l672
 10789  00DD7E  0E07               	movlw	7
 10790  00DD80  183A               	xorwf	diet_press@dietTable+2,w,c
 10791  00DD82  103B               	iorwf	diet_press@dietTable+3,w,c
 10792  00DD84  A4D8               	btfss	status,2,c
 10793  00DD86  D00D               	goto	l672
 10794  00DD88  0E07               	movlw	7
 10795  00DD8A  183C               	xorwf	diet_press@dietTable+4,w,c
 10796  00DD8C  103D               	iorwf	diet_press@dietTable+5,w,c
 10797  00DD8E  A4D8               	btfss	status,2,c
 10798  00DD90  D008               	goto	l672
 10799  00DD92  503E               	movf	diet_press@dietTable+6,w,c
 10800  00DD94  103F               	iorwf	diet_press@dietTable+7,w,c
 10801  00DD96  A4D8               	btfss	status,2,c
 10802  00DD98  D004               	goto	l672
 10803                           
 10804                           ;standbyMode.c: 1299: sum = 17;
 10805  00DD9A  0E00               	movlw	0
 10806  00DD9C  6E36               	movwf	diet_press@sum+1,c
 10807  00DD9E  0E11               	movlw	17
 10808  00DDA0  D0D3               	goto	L105
 10809  00DDA2                     l672:
 10810                           
 10811                           ;standbyMode.c: 1303: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10812  00DDA2  0E03               	movlw	3
 10813  00DDA4  1838               	xorwf	diet_press@dietTable,w,c
 10814  00DDA6  1039               	iorwf	diet_press@dietTable+1,w,c
 10815  00DDA8  A4D8               	btfss	status,2,c
 10816  00DDAA  D012               	goto	l674
 10817  00DDAC  0E0C               	movlw	12
 10818  00DDAE  183A               	xorwf	diet_press@dietTable+2,w,c
 10819  00DDB0  103B               	iorwf	diet_press@dietTable+3,w,c
 10820  00DDB2  A4D8               	btfss	status,2,c
 10821  00DDB4  D00D               	goto	l674
 10822  00DDB6  0E0C               	movlw	12
 10823  00DDB8  183C               	xorwf	diet_press@dietTable+4,w,c
 10824  00DDBA  103D               	iorwf	diet_press@dietTable+5,w,c
 10825  00DDBC  A4D8               	btfss	status,2,c
 10826  00DDBE  D008               	goto	l674
 10827  00DDC0  503E               	movf	diet_press@dietTable+6,w,c
 10828  00DDC2  103F               	iorwf	diet_press@dietTable+7,w,c
 10829  00DDC4  A4D8               	btfss	status,2,c
 10830  00DDC6  D004               	goto	l674
 10831                           
 10832                           ;standbyMode.c: 1304: sum = 27;
 10833  00DDC8  0E00               	movlw	0
 10834  00DDCA  6E36               	movwf	diet_press@sum+1,c
 10835  00DDCC  0E1B               	movlw	27
 10836  00DDCE  D0BC               	goto	L105
 10837  00DDD0                     l674:
 10838                           
 10839                           ;standbyMode.c: 1308: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10840  00DDD0  0E03               	movlw	3
 10841  00DDD2  1838               	xorwf	diet_press@dietTable,w,c
 10842  00DDD4  1039               	iorwf	diet_press@dietTable+1,w,c
 10843  00DDD6  A4D8               	btfss	status,2,c
 10844  00DDD8  D012               	goto	l676
 10845  00DDDA  0E07               	movlw	7
 10846  00DDDC  183A               	xorwf	diet_press@dietTable+2,w,c
 10847  00DDDE  103B               	iorwf	diet_press@dietTable+3,w,c
 10848  00DDE0  A4D8               	btfss	status,2,c
 10849  00DDE2  D00D               	goto	l676
 10850  00DDE4  0E0C               	movlw	12
 10851  00DDE6  183C               	xorwf	diet_press@dietTable+4,w,c
 10852  00DDE8  103D               	iorwf	diet_press@dietTable+5,w,c
 10853  00DDEA  A4D8               	btfss	status,2,c
 10854  00DDEC  D008               	goto	l676
 10855  00DDEE  503E               	movf	diet_press@dietTable+6,w,c
 10856  00DDF0  103F               	iorwf	diet_press@dietTable+7,w,c
 10857  00DDF2  A4D8               	btfss	status,2,c
 10858  00DDF4  D004               	goto	l676
 10859                           
 10860                           ;standbyMode.c: 1309: sum = 22;
 10861  00DDF6  0E00               	movlw	0
 10862  00DDF8  6E36               	movwf	diet_press@sum+1,c
 10863  00DDFA  0E16               	movlw	22
 10864  00DDFC  D0A5               	goto	L105
 10865  00DDFE                     l676:
 10866                           
 10867                           ;standbyMode.c: 1313: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10868  00DDFE  0E07               	movlw	7
 10869  00DE00  1838               	xorwf	diet_press@dietTable,w,c
 10870  00DE02  1039               	iorwf	diet_press@dietTable+1,w,c
 10871  00DE04  A4D8               	btfss	status,2,c
 10872  00DE06  D012               	goto	l678
 10873  00DE08  0E07               	movlw	7
 10874  00DE0A  183A               	xorwf	diet_press@dietTable+2,w,c
 10875  00DE0C  103B               	iorwf	diet_press@dietTable+3,w,c
 10876  00DE0E  A4D8               	btfss	status,2,c
 10877  00DE10  D00D               	goto	l678
 10878  00DE12  0E0C               	movlw	12
 10879  00DE14  183C               	xorwf	diet_press@dietTable+4,w,c
 10880  00DE16  103D               	iorwf	diet_press@dietTable+5,w,c
 10881  00DE18  A4D8               	btfss	status,2,c
 10882  00DE1A  D008               	goto	l678
 10883  00DE1C  503E               	movf	diet_press@dietTable+6,w,c
 10884  00DE1E  103F               	iorwf	diet_press@dietTable+7,w,c
 10885  00DE20  A4D8               	btfss	status,2,c
 10886  00DE22  D004               	goto	l678
 10887                           
 10888                           ;standbyMode.c: 1314: sum = 26;
 10889  00DE24  0E00               	movlw	0
 10890  00DE26  6E36               	movwf	diet_press@sum+1,c
 10891  00DE28  0E1A               	movlw	26
 10892  00DE2A  D08E               	goto	L105
 10893  00DE2C                     l678:
 10894                           
 10895                           ;standbyMode.c: 1318: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10896  00DE2C  0E07               	movlw	7
 10897  00DE2E  1838               	xorwf	diet_press@dietTable,w,c
 10898  00DE30  1039               	iorwf	diet_press@dietTable+1,w,c
 10899  00DE32  A4D8               	btfss	status,2,c
 10900  00DE34  D012               	goto	l680
 10901  00DE36  0E0C               	movlw	12
 10902  00DE38  183A               	xorwf	diet_press@dietTable+2,w,c
 10903  00DE3A  103B               	iorwf	diet_press@dietTable+3,w,c
 10904  00DE3C  A4D8               	btfss	status,2,c
 10905  00DE3E  D00D               	goto	l680
 10906  00DE40  0E0C               	movlw	12
 10907  00DE42  183C               	xorwf	diet_press@dietTable+4,w,c
 10908  00DE44  103D               	iorwf	diet_press@dietTable+5,w,c
 10909  00DE46  A4D8               	btfss	status,2,c
 10910  00DE48  D008               	goto	l680
 10911  00DE4A  503E               	movf	diet_press@dietTable+6,w,c
 10912  00DE4C  103F               	iorwf	diet_press@dietTable+7,w,c
 10913  00DE4E  A4D8               	btfss	status,2,c
 10914  00DE50  D004               	goto	l680
 10915                           
 10916                           ;standbyMode.c: 1319: sum = 31;
 10917  00DE52  0E00               	movlw	0
 10918  00DE54  6E36               	movwf	diet_press@sum+1,c
 10919  00DE56  0E1F               	movlw	31
 10920  00DE58  D077               	goto	L105
 10921  00DE5A                     l680:
 10922                           
 10923                           ;standbyMode.c: 1323: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10924  00DE5A  0E03               	movlw	3
 10925  00DE5C  1838               	xorwf	diet_press@dietTable,w,c
 10926  00DE5E  1039               	iorwf	diet_press@dietTable+1,w,c
 10927  00DE60  A4D8               	btfss	status,2,c
 10928  00DE62  D013               	goto	l682
 10929  00DE64  0E03               	movlw	3
 10930  00DE66  183A               	xorwf	diet_press@dietTable+2,w,c
 10931  00DE68  103B               	iorwf	diet_press@dietTable+3,w,c
 10932  00DE6A  A4D8               	btfss	status,2,c
 10933  00DE6C  D00E               	goto	l682
 10934  00DE6E  0E07               	movlw	7
 10935  00DE70  183C               	xorwf	diet_press@dietTable+4,w,c
 10936  00DE72  103D               	iorwf	diet_press@dietTable+5,w,c
 10937  00DE74  A4D8               	btfss	status,2,c
 10938  00DE76  D009               	goto	l682
 10939  00DE78  0E0C               	movlw	12
 10940  00DE7A  183E               	xorwf	diet_press@dietTable+6,w,c
 10941  00DE7C  103F               	iorwf	diet_press@dietTable+7,w,c
 10942  00DE7E  A4D8               	btfss	status,2,c
 10943  00DE80  D004               	goto	l682
 10944                           
 10945                           ;standbyMode.c: 1324: sum = 25;
 10946  00DE82  0E00               	movlw	0
 10947  00DE84  6E36               	movwf	diet_press@sum+1,c
 10948  00DE86  0E19               	movlw	25
 10949  00DE88  D05F               	goto	L105
 10950  00DE8A                     l682:
 10951                           
 10952                           ;standbyMode.c: 1328: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10953  00DE8A  0E03               	movlw	3
 10954  00DE8C  1838               	xorwf	diet_press@dietTable,w,c
 10955  00DE8E  1039               	iorwf	diet_press@dietTable+1,w,c
 10956  00DE90  A4D8               	btfss	status,2,c
 10957  00DE92  D013               	goto	l684
 10958  00DE94  0E07               	movlw	7
 10959  00DE96  183A               	xorwf	diet_press@dietTable+2,w,c
 10960  00DE98  103B               	iorwf	diet_press@dietTable+3,w,c
 10961  00DE9A  A4D8               	btfss	status,2,c
 10962  00DE9C  D00E               	goto	l684
 10963  00DE9E  0E07               	movlw	7
 10964  00DEA0  183C               	xorwf	diet_press@dietTable+4,w,c
 10965  00DEA2  103D               	iorwf	diet_press@dietTable+5,w,c
 10966  00DEA4  A4D8               	btfss	status,2,c
 10967  00DEA6  D009               	goto	l684
 10968  00DEA8  0E0C               	movlw	12
 10969  00DEAA  183E               	xorwf	diet_press@dietTable+6,w,c
 10970  00DEAC  103F               	iorwf	diet_press@dietTable+7,w,c
 10971  00DEAE  A4D8               	btfss	status,2,c
 10972  00DEB0  D004               	goto	l684
 10973                           
 10974                           ;standbyMode.c: 1329: sum = 29;
 10975  00DEB2  0E00               	movlw	0
 10976  00DEB4  6E36               	movwf	diet_press@sum+1,c
 10977  00DEB6  0E1D               	movlw	29
 10978  00DEB8  D047               	goto	L105
 10979  00DEBA                     l684:
 10980                           
 10981                           ;standbyMode.c: 1333: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 10982  00DEBA  0E03               	movlw	3
 10983  00DEBC  1838               	xorwf	diet_press@dietTable,w,c
 10984  00DEBE  1039               	iorwf	diet_press@dietTable+1,w,c
 10985  00DEC0  A4D8               	btfss	status,2,c
 10986  00DEC2  D013               	goto	l686
 10987  00DEC4  0E07               	movlw	7
 10988  00DEC6  183A               	xorwf	diet_press@dietTable+2,w,c
 10989  00DEC8  103B               	iorwf	diet_press@dietTable+3,w,c
 10990  00DECA  A4D8               	btfss	status,2,c
 10991  00DECC  D00E               	goto	l686
 10992  00DECE  0E0C               	movlw	12
 10993  00DED0  183C               	xorwf	diet_press@dietTable+4,w,c
 10994  00DED2  103D               	iorwf	diet_press@dietTable+5,w,c
 10995  00DED4  A4D8               	btfss	status,2,c
 10996  00DED6  D009               	goto	l686
 10997  00DED8  0E0C               	movlw	12
 10998  00DEDA  183E               	xorwf	diet_press@dietTable+6,w,c
 10999  00DEDC  103F               	iorwf	diet_press@dietTable+7,w,c
 11000  00DEDE  A4D8               	btfss	status,2,c
 11001  00DEE0  D004               	goto	l686
 11002                           
 11003                           ;standbyMode.c: 1334: sum = 34;
 11004  00DEE2  0E00               	movlw	0
 11005  00DEE4  6E36               	movwf	diet_press@sum+1,c
 11006  00DEE6  0E22               	movlw	34
 11007  00DEE8  D02F               	goto	L105
 11008  00DEEA                     l686:
 11009                           
 11010                           ;standbyMode.c: 1338: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11011  00DEEA  0E03               	movlw	3
 11012  00DEEC  1838               	xorwf	diet_press@dietTable,w,c
 11013  00DEEE  1039               	iorwf	diet_press@dietTable+1,w,c
 11014  00DEF0  A4D8               	btfss	status,2,c
 11015  00DEF2  D013               	goto	l688
 11016  00DEF4  0E0C               	movlw	12
 11017  00DEF6  183A               	xorwf	diet_press@dietTable+2,w,c
 11018  00DEF8  103B               	iorwf	diet_press@dietTable+3,w,c
 11019  00DEFA  A4D8               	btfss	status,2,c
 11020  00DEFC  D00E               	goto	l688
 11021  00DEFE  0E0C               	movlw	12
 11022  00DF00  183C               	xorwf	diet_press@dietTable+4,w,c
 11023  00DF02  103D               	iorwf	diet_press@dietTable+5,w,c
 11024  00DF04  A4D8               	btfss	status,2,c
 11025  00DF06  D009               	goto	l688
 11026  00DF08  0E0C               	movlw	12
 11027  00DF0A  183E               	xorwf	diet_press@dietTable+6,w,c
 11028  00DF0C  103F               	iorwf	diet_press@dietTable+7,w,c
 11029  00DF0E  A4D8               	btfss	status,2,c
 11030  00DF10  D004               	goto	l688
 11031                           
 11032                           ;standbyMode.c: 1339: sum = 39;
 11033  00DF12  0E00               	movlw	0
 11034  00DF14  6E36               	movwf	diet_press@sum+1,c
 11035  00DF16  0E27               	movlw	39
 11036  00DF18  D017               	goto	L105
 11037  00DF1A                     l688:
 11038                           
 11039                           ;standbyMode.c: 1343: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11040  00DF1A  0E07               	movlw	7
 11041  00DF1C  1838               	xorwf	diet_press@dietTable,w,c
 11042  00DF1E  1039               	iorwf	diet_press@dietTable+1,w,c
 11043  00DF20  A4D8               	btfss	status,2,c
 11044  00DF22  D014               	goto	l690
 11045  00DF24  0E0C               	movlw	12
 11046  00DF26  183A               	xorwf	diet_press@dietTable+2,w,c
 11047  00DF28  103B               	iorwf	diet_press@dietTable+3,w,c
 11048  00DF2A  A4D8               	btfss	status,2,c
 11049  00DF2C  D00F               	goto	l690
 11050  00DF2E  0E0C               	movlw	12
 11051  00DF30  183C               	xorwf	diet_press@dietTable+4,w,c
 11052  00DF32  103D               	iorwf	diet_press@dietTable+5,w,c
 11053  00DF34  A4D8               	btfss	status,2,c
 11054  00DF36  D00A               	goto	l690
 11055  00DF38  0E0C               	movlw	12
 11056  00DF3A  183E               	xorwf	diet_press@dietTable+6,w,c
 11057  00DF3C  103F               	iorwf	diet_press@dietTable+7,w,c
 11058  00DF3E  A4D8               	btfss	status,2,c
 11059  00DF40  D005               	goto	l690
 11060                           
 11061                           ;standbyMode.c: 1344: sum = 43;
 11062  00DF42  0E00               	movlw	0
 11063  00DF44  6E36               	movwf	diet_press@sum+1,c
 11064  00DF46  0E2B               	movlw	43
 11065  00DF48                     L105:
 11066  00DF48  6E35               	movwf	diet_press@sum,c
 11067                           
 11068                           ;standbyMode.c: 1345: }
 11069  00DF4A  D02A               	goto	l691
 11070  00DF4C                     l690:
 11071                           
 11072                           ;standbyMode.c: 1348: else{
 11073                           ;standbyMode.c: 1349: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11074  00DF4C  0E01               	movlw	1
 11075  00DF4E  EC61  F05E         	call	_lcdInst
 11076  00DF52  0EC3               	movlw	195
 11077  00DF54  6E2B               	movwf	??_diet_press& (0+255),c
 11078  00DF56  0ECD               	movlw	205
 11079  00DF58                     u10227:
 11080  00DF58  2EE8               	decfsz	wreg,f,c
 11081  00DF5A  D7FE               	bra	u10227
 11082  00DF5C  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11083  00DF5E  D7FC               	bra	u10227
 11084  00DF60  F000               	nop	
 11085                           
 11086                           ;standbyMode.c: 1350: printf("Invalid diet!");
 11087  00DF62  0EAB               	movlw	low STR_73
 11088  00DF64  6E0D               	movwf	printf@f,c
 11089  00DF66  0EFE               	movlw	high STR_73
 11090  00DF68  6E0E               	movwf	printf@f+1,c
 11091  00DF6A  EC43  F06B         	call	_printf	;wreg free
 11092                           
 11093                           ;standbyMode.c: 1351: lcdInst(0xC0);;
 11094  00DF6E  0EC0               	movlw	192
 11095  00DF70  EC61  F05E         	call	_lcdInst
 11096                           
 11097                           ;standbyMode.c: 1352: printf("Try again.");
 11098  00DF74  0E2A               	movlw	low STR_70
 11099  00DF76  6E0D               	movwf	printf@f,c
 11100  00DF78  0EFF               	movlw	high STR_70
 11101  00DF7A  6E0E               	movwf	printf@f+1,c
 11102  00DF7C  EC43  F06B         	call	_printf	;wreg free
 11103                           
 11104                           ;standbyMode.c: 1353: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11105  00DF80  0E33               	movlw	51
 11106  00DF82  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11107  00DF84  0EBB               	movlw	187
 11108  00DF86  6E2B               	movwf	??_diet_press& (0+255),c
 11109  00DF88  0EE0               	movlw	224
 11110  00DF8A                     u10237:
 11111  00DF8A  2EE8               	decfsz	wreg,f,c
 11112  00DF8C  D7FE               	bra	u10237
 11113  00DF8E  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11114  00DF90  D7FC               	bra	u10237
 11115  00DF92  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11116  00DF94  D7FA               	bra	u10237
 11117                           
 11118                           ;standbyMode.c: 1354: sum = 0;
 11119  00DF96  0E00               	movlw	0
 11120  00DF98  6E36               	movwf	diet_press@sum+1,c
 11121  00DF9A  0E00               	movlw	0
 11122  00DF9C  6E35               	movwf	diet_press@sum,c
 11123                           
 11124                           ;standbyMode.c: 1355: goto START;
 11125  00DF9E  D56C               	goto	_diet_press
 11126  00DFA0                     l691:
 11127                           
 11128                           ;standbyMode.c: 1356: }
 11129                           ;standbyMode.c: 1357: return sum;
 11130  00DFA0  C035  F029         	movff	diet_press@sum,?_diet_press
 11131  00DFA4  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11132  00DFA8  0012               	return		;funcret
 11133  00DFAA                     __end_of_diet_press:
 11134                           	opt stack 0
 11135                           tblptru	equ	0xFF8
 11136                           tblptrh	equ	0xFF7
 11137                           tblptrl	equ	0xFF6
 11138                           tablat	equ	0xFF5
 11139                           prodh	equ	0xFF4
 11140                           prodl	equ	0xFF3
 11141                           postinc0	equ	0xFEE
 11142                           wreg	equ	0xFE8
 11143                           postdec1	equ	0xFE5
 11144                           plusw1	equ	0xFE3
 11145                           fsr1l	equ	0xFE1
 11146                           indf2	equ	0xFDF
 11147                           postinc2	equ	0xFDE
 11148                           postdec2	equ	0xFDD
 11149                           plusw2	equ	0xFDB
 11150                           fsr2h	equ	0xFDA
 11151                           fsr2l	equ	0xFD9
 11152                           status	equ	0xFD8
 11153                           
 11154 ;; *************** function _decode_diet *****************
 11155 ;; Defined at:
 11156 ;;		line 1361 in file "standbyMode.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;  dietType        2    0[COMRAM] unsigned int 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;  returnValue     2    4[COMRAM] unsigned int 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  2    0[COMRAM] unsigned int 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        6 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_standbyMode
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           	psect	text16
 11184  00CAB4                     __ptext16:
 11185                           	opt stack 0
 11186  00CAB4                     _decode_diet:
 11187                           	opt stack 29
 11188                           
 11189                           ;standbyMode.c: 1362: unsigned int returnValue = 100;
 11190                           
 11191                           ;incstack = 0
 11192  00CAB4  0E00               	movlw	0
 11193  00CAB6  6E06               	movwf	decode_diet@returnValue+1,c
 11194  00CAB8  0E64               	movlw	100
 11195  00CABA  6E05               	movwf	decode_diet@returnValue,c
 11196                           
 11197                           ;standbyMode.c: 1364: switch(dietType){
 11198  00CABC  D049               	goto	l695
 11199  00CABE                     
 11200                           ;standbyMode.c: 1367: returnValue = 2;
 11201  00CABE  0E00               	movlw	0
 11202  00CAC0  6E06               	movwf	decode_diet@returnValue+1,c
 11203  00CAC2  0E02               	movlw	2
 11204  00CAC4  D043               	goto	L123
 11205  00CAC6                     
 11206                           ;standbyMode.c: 1372: returnValue = 0;
 11207  00CAC6  0E00               	movlw	0
 11208  00CAC8  6E06               	movwf	decode_diet@returnValue+1,c
 11209  00CACA  0E00               	movlw	0
 11210  00CACC  D03F               	goto	L123
 11211  00CACE                     
 11212                           ;standbyMode.c: 1377: returnValue = 1;
 11213  00CACE  0E00               	movlw	0
 11214  00CAD0  6E06               	movwf	decode_diet@returnValue+1,c
 11215  00CAD2  0E01               	movlw	1
 11216  00CAD4  D03B               	goto	L123
 11217  00CAD6                     
 11218                           ;standbyMode.c: 1382: returnValue = 3;
 11219  00CAD6  0E00               	movlw	0
 11220  00CAD8  6E06               	movwf	decode_diet@returnValue+1,c
 11221  00CADA  0E03               	movlw	3
 11222  00CADC  D037               	goto	L123
 11223  00CADE                     
 11224                           ;standbyMode.c: 1387: returnValue = 4;
 11225  00CADE  0E00               	movlw	0
 11226  00CAE0  6E06               	movwf	decode_diet@returnValue+1,c
 11227  00CAE2  0E04               	movlw	4
 11228  00CAE4  D033               	goto	L123
 11229  00CAE6                     
 11230                           ;standbyMode.c: 1392: returnValue = 5;
 11231  00CAE6  0E00               	movlw	0
 11232  00CAE8  6E06               	movwf	decode_diet@returnValue+1,c
 11233  00CAEA  0E05               	movlw	5
 11234  00CAEC  D02F               	goto	L123
 11235  00CAEE                     
 11236                           ;standbyMode.c: 1397: returnValue = 6;
 11237  00CAEE  0E00               	movlw	0
 11238  00CAF0  6E06               	movwf	decode_diet@returnValue+1,c
 11239  00CAF2  0E06               	movlw	6
 11240  00CAF4  D02B               	goto	L123
 11241  00CAF6                     
 11242                           ;standbyMode.c: 1402: returnValue = 7;
 11243  00CAF6  0E00               	movlw	0
 11244  00CAF8  6E06               	movwf	decode_diet@returnValue+1,c
 11245  00CAFA  0E07               	movlw	7
 11246  00CAFC  D027               	goto	L123
 11247  00CAFE                     
 11248                           ;standbyMode.c: 1407: returnValue = 8;
 11249  00CAFE  0E00               	movlw	0
 11250  00CB00  6E06               	movwf	decode_diet@returnValue+1,c
 11251  00CB02  0E08               	movlw	8
 11252  00CB04  D023               	goto	L123
 11253  00CB06                     
 11254                           ;standbyMode.c: 1412: returnValue = 9;
 11255  00CB06  0E00               	movlw	0
 11256  00CB08  6E06               	movwf	decode_diet@returnValue+1,c
 11257  00CB0A  0E09               	movlw	9
 11258  00CB0C  D01F               	goto	L123
 11259  00CB0E                     
 11260                           ;standbyMode.c: 1417: returnValue = 10;
 11261  00CB0E  0E00               	movlw	0
 11262  00CB10  6E06               	movwf	decode_diet@returnValue+1,c
 11263  00CB12  0E0A               	movlw	10
 11264  00CB14  D01B               	goto	L123
 11265  00CB16                     
 11266                           ;standbyMode.c: 1422: returnValue = 11;
 11267  00CB16  0E00               	movlw	0
 11268  00CB18  6E06               	movwf	decode_diet@returnValue+1,c
 11269  00CB1A  0E0B               	movlw	11
 11270  00CB1C  D017               	goto	L123
 11271  00CB1E                     
 11272                           ;standbyMode.c: 1427: returnValue = 12;
 11273  00CB1E  0E00               	movlw	0
 11274  00CB20  6E06               	movwf	decode_diet@returnValue+1,c
 11275  00CB22  0E0C               	movlw	12
 11276  00CB24  D013               	goto	L123
 11277  00CB26                     
 11278                           ;standbyMode.c: 1432: returnValue = 13;
 11279  00CB26  0E00               	movlw	0
 11280  00CB28  6E06               	movwf	decode_diet@returnValue+1,c
 11281  00CB2A  0E0D               	movlw	13
 11282  00CB2C  D00F               	goto	L123
 11283  00CB2E                     
 11284                           ;standbyMode.c: 1437: returnValue = 14;
 11285  00CB2E  0E00               	movlw	0
 11286  00CB30  6E06               	movwf	decode_diet@returnValue+1,c
 11287  00CB32  0E0E               	movlw	14
 11288  00CB34  D00B               	goto	L123
 11289  00CB36                     
 11290                           ;standbyMode.c: 1442: returnValue = 15;
 11291  00CB36  0E00               	movlw	0
 11292  00CB38  6E06               	movwf	decode_diet@returnValue+1,c
 11293  00CB3A  0E0F               	movlw	15
 11294  00CB3C  D007               	goto	L123
 11295  00CB3E                     
 11296                           ;standbyMode.c: 1447: returnValue = 16;
 11297  00CB3E  0E00               	movlw	0
 11298  00CB40  6E06               	movwf	decode_diet@returnValue+1,c
 11299  00CB42  0E10               	movlw	16
 11300  00CB44  D003               	goto	L123
 11301  00CB46                     
 11302                           ;standbyMode.c: 1452: returnValue = 17;
 11303  00CB46  0E00               	movlw	0
 11304  00CB48  6E06               	movwf	decode_diet@returnValue+1,c
 11305  00CB4A  0E11               	movlw	17
 11306  00CB4C                     L123:
 11307  00CB4C  6E05               	movwf	decode_diet@returnValue,c
 11308                           
 11309                           ;standbyMode.c: 1457: }
 11310                           
 11311                           ;standbyMode.c: 1456: break;
 11312                           
 11313                           ;standbyMode.c: 1455: default:
 11314                           
 11315                           ;standbyMode.c: 1453: break;
 11316  00CB4E  D03F               	goto	l697
 11317  00CB50                     l695:
 11318  00CB50  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 11319  00CB54  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 11320                           
 11321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11322                           ; Switch size 1, requested type "space"
 11323                           ; Number of cases is 1, Range of values is 0 to 0
 11324                           ; switch strategies available:
 11325                           ; Name         Instructions Cycles
 11326                           ; simple_byte            4     3 (average)
 11327                           ;	Chosen strategy is simple_byte
 11328  00CB58  5004               	movf	??_decode_diet+1,w,c
 11329  00CB5A  0A00               	xorlw	0	; case 0
 11330  00CB5C  A4D8               	btfss	status,2,c
 11331  00CB5E  D037               	goto	l697
 11332                           
 11333                           ; Switch size 1, requested type "space"
 11334                           ; Number of cases is 18, Range of values is 3 to 43
 11335                           ; switch strategies available:
 11336                           ; Name         Instructions Cycles
 11337                           ; simple_byte           55    28 (average)
 11338                           ;	Chosen strategy is simple_byte
 11339  00CB60  5003               	movf	??_decode_diet,w,c
 11340  00CB62  0A03               	xorlw	3	; case 3
 11341  00CB64  B4D8               	btfsc	status,2,c
 11342  00CB66  D7AF               	goto	l698
 11343  00CB68  0A04               	xorlw	4	; case 7
 11344  00CB6A  B4D8               	btfsc	status,2,c
 11345  00CB6C  D7B0               	goto	l699
 11346  00CB6E  0A0D               	xorlw	13	; case 10
 11347  00CB70  B4D8               	btfsc	status,2,c
 11348  00CB72  D7B1               	goto	l700
 11349  00CB74  0A06               	xorlw	6	; case 12
 11350  00CB76  B4D8               	btfsc	status,2,c
 11351  00CB78  D7A2               	goto	l696
 11352  00CB7A  0A01               	xorlw	1	; case 13
 11353  00CB7C  B4D8               	btfsc	status,2,c
 11354  00CB7E  D7B7               	goto	l703
 11355  00CB80  0A02               	xorlw	2	; case 15
 11356  00CB82  B4D8               	btfsc	status,2,c
 11357  00CB84  D7AC               	goto	l701
 11358  00CB86  0A1E               	xorlw	30	; case 17
 11359  00CB88  B4D8               	btfsc	status,2,c
 11360  00CB8A  D7B9               	goto	l705
 11361  00CB8C  0A03               	xorlw	3	; case 18
 11362  00CB8E  B4D8               	btfsc	status,2,c
 11363  00CB90  D7B2               	goto	l704
 11364  00CB92  0A01               	xorlw	1	; case 19
 11365  00CB94  B4D8               	btfsc	status,2,c
 11366  00CB96  D7A7               	goto	l702
 11367  00CB98  0A05               	xorlw	5	; case 22
 11368  00CB9A  B4D8               	btfsc	status,2,c
 11369  00CB9C  D7B8               	goto	l707
 11370  00CB9E  0A0F               	xorlw	15	; case 25
 11371  00CBA0  B4D8               	btfsc	status,2,c
 11372  00CBA2  D7C1               	goto	l710
 11373  00CBA4  0A03               	xorlw	3	; case 26
 11374  00CBA6  B4D8               	btfsc	status,2,c
 11375  00CBA8  D7B6               	goto	l708
 11376  00CBAA  0A01               	xorlw	1	; case 27
 11377  00CBAC  B4D8               	btfsc	status,2,c
 11378  00CBAE  D7AB               	goto	l706
 11379  00CBB0  0A06               	xorlw	6	; case 29
 11380  00CBB2  B4D8               	btfsc	status,2,c
 11381  00CBB4  D7BC               	goto	l711
 11382  00CBB6  0A02               	xorlw	2	; case 31
 11383  00CBB8  B4D8               	btfsc	status,2,c
 11384  00CBBA  D7B1               	goto	l709
 11385  00CBBC  0A3D               	xorlw	61	; case 34
 11386  00CBBE  B4D8               	btfsc	status,2,c
 11387  00CBC0  D7BA               	goto	l712
 11388  00CBC2  0A05               	xorlw	5	; case 39
 11389  00CBC4  B4D8               	btfsc	status,2,c
 11390  00CBC6  D7BB               	goto	l713
 11391  00CBC8  0A0C               	xorlw	12	; case 43
 11392  00CBCA  B4D8               	btfsc	status,2,c
 11393  00CBCC  D7BC               	goto	l714
 11394  00CBCE                     l697:
 11395                           
 11396                           ;standbyMode.c: 1458: return returnValue;
 11397  00CBCE  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 11398  00CBD2  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 11399  00CBD6  0012               	return		;funcret
 11400  00CBD8                     __end_of_decode_diet:
 11401                           	opt stack 0
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           prodh	equ	0xFF4
 11407                           prodl	equ	0xFF3
 11408                           postinc0	equ	0xFEE
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           plusw1	equ	0xFE3
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           postdec2	equ	0xFDD
 11416                           plusw2	equ	0xFDB
 11417                           fsr2h	equ	0xFDA
 11418                           fsr2l	equ	0xFD9
 11419                           status	equ	0xFD8
 11420                           
 11421 ;; *************** function _I2C_Master_Write *****************
 11422 ;; Defined at:
 11423 ;;		line 108 in file "I2C.c"
 11424 ;; Parameters:    Size  Location     Type
 11425 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;		None
 11428 ;; Return value:  Size  Location     Type
 11429 ;;                  1    wreg      void 
 11430 ;; Registers used:
 11431 ;;		wreg, status,2, status,0, cstack
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;Total ram usage:        2 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    1
 11444 ;; This function calls:
 11445 ;;		_I2C_Master_Wait
 11446 ;; This function is called by:
 11447 ;;		_standbyMode
 11448 ;;		_RTC_setTime
 11449 ;;		_tick
 11450 ;;		_tock
 11451 ;;		_sendByteToArduino
 11452 ;; This function uses a non-reentrant model
 11453 ;;
 11454                           
 11455                           	psect	text17
 11456  00BCA6                     __ptext17:
 11457                           	opt stack 0
 11458  00BCA6                     _I2C_Master_Write:
 11459                           	opt stack 28
 11460                           
 11461                           ;I2C.c: 116: I2C_Master_Wait();
 11462                           
 11463                           ;incstack = 0
 11464  00BCA6  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11465                           
 11466                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11467  00BCAA  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11468  00BCAE  0012               	return		;funcret
 11469  00BCB0                     __end_of_I2C_Master_Write:
 11470                           	opt stack 0
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           postinc0	equ	0xFEE
 11478                           wreg	equ	0xFE8
 11479                           postdec1	equ	0xFE5
 11480                           plusw1	equ	0xFE3
 11481                           fsr1l	equ	0xFE1
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           plusw2	equ	0xFDB
 11486                           fsr2h	equ	0xFDA
 11487                           fsr2l	equ	0xFD9
 11488                           status	equ	0xFD8
 11489                           
 11490 ;; *************** function _I2C_Master_Stop *****************
 11491 ;; Defined at:
 11492 ;;		line 95 in file "I2C.c"
 11493 ;; Parameters:    Size  Location     Type
 11494 ;;		None
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;		None
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  1    wreg      void 
 11499 ;; Registers used:
 11500 ;;		wreg, status,2, status,0, cstack
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;Total ram usage:        0 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    1
 11513 ;; This function calls:
 11514 ;;		_I2C_Master_Wait
 11515 ;; This function is called by:
 11516 ;;		_standbyMode
 11517 ;;		_RTC_setTime
 11518 ;;		_tick
 11519 ;;		_tock
 11520 ;;		_sendByteToArduino
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text18
 11525  00BC9E                     __ptext18:
 11526                           	opt stack 0
 11527  00BC9E                     _I2C_Master_Stop:
 11528                           	opt stack 28
 11529                           
 11530                           ;I2C.c: 104: I2C_Master_Wait();
 11531                           
 11532                           ;incstack = 0
 11533  00BC9E  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11534                           
 11535                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11536  00BCA2  84C5               	bsf	4037,2,c	;volatile
 11537  00BCA4  0012               	return		;funcret
 11538  00BCA6                     __end_of_I2C_Master_Stop:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           postinc0	equ	0xFEE
 11547                           wreg	equ	0xFE8
 11548                           postdec1	equ	0xFE5
 11549                           plusw1	equ	0xFE3
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           postdec2	equ	0xFDD
 11554                           plusw2	equ	0xFDB
 11555                           fsr2h	equ	0xFDA
 11556                           fsr2l	equ	0xFD9
 11557                           status	equ	0xFD8
 11558                           
 11559 ;; *************** function _I2C_Master_Start *****************
 11560 ;; Defined at:
 11561 ;;		line 69 in file "I2C.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;		None
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;		None
 11566 ;; Return value:  Size  Location     Type
 11567 ;;                  1    wreg      void 
 11568 ;; Registers used:
 11569 ;;		wreg, status,2, status,0, cstack
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;Total ram usage:        0 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; Hardware stack levels required when called:    1
 11582 ;; This function calls:
 11583 ;;		_I2C_Master_Wait
 11584 ;; This function is called by:
 11585 ;;		_standbyMode
 11586 ;;		_RTC_setTime
 11587 ;;		_tick
 11588 ;;		_tock
 11589 ;;		_sendByteToArduino
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           	psect	text19
 11594  00BC96                     __ptext19:
 11595                           	opt stack 0
 11596  00BC96                     _I2C_Master_Start:
 11597                           	opt stack 28
 11598                           
 11599                           ;I2C.c: 78: I2C_Master_Wait();
 11600                           
 11601                           ;incstack = 0
 11602  00BC96  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11603                           
 11604                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11605  00BC9A  80C5               	bsf	4037,0,c	;volatile
 11606  00BC9C  0012               	return		;funcret
 11607  00BC9E                     __end_of_I2C_Master_Start:
 11608                           	opt stack 0
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           postinc0	equ	0xFEE
 11616                           wreg	equ	0xFE8
 11617                           postdec1	equ	0xFE5
 11618                           plusw1	equ	0xFE3
 11619                           fsr1l	equ	0xFE1
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           plusw2	equ	0xFDB
 11624                           fsr2h	equ	0xFDA
 11625                           fsr2l	equ	0xFD9
 11626                           status	equ	0xFD8
 11627                           
 11628 ;; *************** function _I2C_Master_Read *****************
 11629 ;; Defined at:
 11630 ;;		line 120 in file "I2C.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;  ackBit          1    wreg     unsigned char 
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;  ackBit          1    1[COMRAM] unsigned char 
 11635 ;;  receivedByte    1    2[COMRAM] unsigned char 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  1    wreg      unsigned char 
 11638 ;; Registers used:
 11639 ;;		wreg, status,2, status,0, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;Total ram usage:        2 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    1
 11652 ;; This function calls:
 11653 ;;		_I2C_Master_Wait
 11654 ;; This function is called by:
 11655 ;;		_standbyMode
 11656 ;;		_tick
 11657 ;;		_tock
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text20
 11662  00BD36                     __ptext20:
 11663                           	opt stack 0
 11664  00BD36                     _I2C_Master_Read:
 11665                           	opt stack 28
 11666                           
 11667                           ;incstack = 0
 11668                           ;I2C_Master_Read@ackBit stored from wreg
 11669  00BD36  6E02               	movwf	I2C_Master_Read@ackBit,c
 11670                           
 11671                           ;I2C.c: 130: unsigned char receivedByte;
 11672                           ;I2C.c: 132: I2C_Master_Wait();
 11673  00BD38  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11674                           
 11675                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 11676  00BD3C  86C5               	bsf	4037,3,c	;volatile
 11677                           
 11678                           ;I2C.c: 135: I2C_Master_Wait();
 11679  00BD3E  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11680                           
 11681                           ;I2C.c: 136: receivedByte = SSPBUF;
 11682  00BD42  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 11683                           
 11684                           ;I2C.c: 138: I2C_Master_Wait();
 11685  00BD46  EC58  F05E         	call	_I2C_Master_Wait	;wreg free
 11686                           
 11687                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 11688  00BD4A  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 11689  00BD4C  D002               	bra	u8585
 11690  00BD4E  9AC5               	bcf	4037,5,c	;volatile
 11691  00BD50  D001               	bra	u8586
 11692  00BD52                     u8585:
 11693  00BD52  8AC5               	bsf	4037,5,c	;volatile
 11694  00BD54                     u8586:
 11695                           
 11696                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 11697  00BD54  88C5               	bsf	4037,4,c	;volatile
 11698                           
 11699                           ;I2C.c: 142: return receivedByte;
 11700  00BD56  5003               	movf	I2C_Master_Read@receivedByte,w,c
 11701  00BD58  0012               	return	
 11702  00BD5A                     __end_of_I2C_Master_Read:
 11703                           	opt stack 0
 11704                           tblptru	equ	0xFF8
 11705                           tblptrh	equ	0xFF7
 11706                           tblptrl	equ	0xFF6
 11707                           tablat	equ	0xFF5
 11708                           prodh	equ	0xFF4
 11709                           prodl	equ	0xFF3
 11710                           postinc0	equ	0xFEE
 11711                           wreg	equ	0xFE8
 11712                           postdec1	equ	0xFE5
 11713                           plusw1	equ	0xFE3
 11714                           fsr1l	equ	0xFE1
 11715                           indf2	equ	0xFDF
 11716                           postinc2	equ	0xFDE
 11717                           postdec2	equ	0xFDD
 11718                           plusw2	equ	0xFDB
 11719                           fsr2h	equ	0xFDA
 11720                           fsr2l	equ	0xFD9
 11721                           status	equ	0xFD8
 11722                           
 11723 ;; *************** function _I2C_Master_Wait *****************
 11724 ;; Defined at:
 11725 ;;		line 51 in file "I2C.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;		None
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;		None
 11730 ;; Return value:  Size  Location     Type
 11731 ;;                  1    wreg      void 
 11732 ;; Registers used:
 11733 ;;		wreg, status,2, status,0
 11734 ;; Tracked objects:
 11735 ;;		On entry : 0/0
 11736 ;;		On exit  : 0/0
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11741 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11743 ;;Total ram usage:        1 bytes
 11744 ;; Hardware stack levels used:    1
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_I2C_Master_Start
 11749 ;;		_I2C_Master_Stop
 11750 ;;		_I2C_Master_Write
 11751 ;;		_I2C_Master_Read
 11752 ;;		_I2C_Master_RepeatedStart
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           	psect	text21
 11757  00BCB0                     __ptext21:
 11758                           	opt stack 0
 11759  00BCB0                     _I2C_Master_Wait:
 11760                           	opt stack 28
 11761                           
 11762                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 11763                           
 11764                           ;incstack = 0
 11765  00BCB0  B4C7               	btfsc	4039,2,c	;volatile
 11766  00BCB2  D7FE               	goto	_I2C_Master_Wait
 11767  00BCB4  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 11768  00BCB8  0E1F               	movlw	31
 11769  00BCBA  1601               	andwf	??_I2C_Master_Wait,f,c
 11770  00BCBC  B4D8               	btfsc	status,2,c
 11771  00BCBE  0012               	return	
 11772  00BCC0  D7F7               	goto	_I2C_Master_Wait
 11773  00BCC2                     __end_of_I2C_Master_Wait:
 11774                           	opt stack 0
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           postinc0	equ	0xFEE
 11782                           wreg	equ	0xFE8
 11783                           postdec1	equ	0xFE5
 11784                           plusw1	equ	0xFE3
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           plusw2	equ	0xFDB
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function _I2C_Master_Init *****************
 11795 ;; Defined at:
 11796 ;;		line 14 in file "I2C.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;		None
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  1    wreg      void 
 11803 ;; Registers used:
 11804 ;;		wreg, status,2, status,0, cstack
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : 0/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;Total ram usage:        8 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    1
 11817 ;; This function calls:
 11818 ;;		___lldiv
 11819 ;; This function is called by:
 11820 ;;		_standbyMode
 11821 ;;		_tick
 11822 ;;		_tock
 11823 ;; This function uses a non-reentrant model
 11824 ;;
 11825                           
 11826                           	psect	text22
 11827  00BF26                     __ptext22:
 11828                           	opt stack 0
 11829  00BF26                     _I2C_Master_Init:
 11830                           	opt stack 28
 11831                           
 11832                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 11833                           
 11834                           ;incstack = 0
 11835  00BF26  9AC6               	bcf	4038,5,c	;volatile
 11836                           
 11837                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 11838  00BF28  8694               	bsf	3988,3,c	;volatile
 11839                           
 11840                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 11841  00BF2A  8894               	bsf	3988,4,c	;volatile
 11842                           
 11843                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 11844  00BF2C  0E80               	movlw	128
 11845  00BF2E  6EC7               	movwf	4039,c	;volatile
 11846                           
 11847                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 11848  00BF30  0E28               	movlw	40
 11849  00BF32  6EC6               	movwf	4038,c	;volatile
 11850                           
 11851                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 11852  00BF34  0E00               	movlw	0
 11853  00BF36  6EC5               	movwf	4037,c	;volatile
 11854                           
 11855                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 11856  00BF38  0E00               	movlw	0
 11857  00BF3A  6E01               	movwf	___lldiv@dividend,c
 11858  00BF3C  0E5A               	movlw	90
 11859  00BF3E  6E02               	movwf	___lldiv@dividend+1,c
 11860  00BF40  0E62               	movlw	98
 11861  00BF42  6E03               	movwf	___lldiv@dividend+2,c
 11862  00BF44  0E02               	movlw	2
 11863  00BF46  6E04               	movwf	___lldiv@dividend+3,c
 11864  00BF48  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 11865  00BF4C  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 11866  00BF50  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 11867  00BF54  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 11868  00BF58  0E02               	movlw	2
 11869  00BF5A                     u8575:
 11870  00BF5A  90D8               	bcf	status,0,c
 11871  00BF5C  3612               	rlcf	??_I2C_Master_Init,f,c
 11872  00BF5E  3613               	rlcf	??_I2C_Master_Init+1,f,c
 11873  00BF60  3614               	rlcf	??_I2C_Master_Init+2,f,c
 11874  00BF62  3615               	rlcf	??_I2C_Master_Init+3,f,c
 11875  00BF64  2EE8               	decfsz	wreg,f,c
 11876  00BF66  D7F9               	goto	u8575
 11877  00BF68  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 11878  00BF6C  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11879  00BF70  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11880  00BF74  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11881  00BF78  EC00  F060         	call	___lldiv	;wreg free
 11882  00BF7C  0401               	decf	?___lldiv,w,c
 11883  00BF7E  6EC8               	movwf	4040,c	;volatile
 11884  00BF80  0012               	return		;funcret
 11885  00BF82                     __end_of_I2C_Master_Init:
 11886                           	opt stack 0
 11887                           tblptru	equ	0xFF8
 11888                           tblptrh	equ	0xFF7
 11889                           tblptrl	equ	0xFF6
 11890                           tablat	equ	0xFF5
 11891                           prodh	equ	0xFF4
 11892                           prodl	equ	0xFF3
 11893                           postinc0	equ	0xFEE
 11894                           wreg	equ	0xFE8
 11895                           postdec1	equ	0xFE5
 11896                           plusw1	equ	0xFE3
 11897                           fsr1l	equ	0xFE1
 11898                           indf2	equ	0xFDF
 11899                           postinc2	equ	0xFDE
 11900                           postdec2	equ	0xFDD
 11901                           plusw2	equ	0xFDB
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8
 11905                           
 11906 ;; *************** function ___lldiv *****************
 11907 ;; Defined at:
 11908 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;  dividend        4    0[COMRAM] unsigned long 
 11911 ;;  divisor         4    4[COMRAM] unsigned long 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  quotient        4    8[COMRAM] unsigned long 
 11914 ;;  counter         1   12[COMRAM] unsigned char 
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  4    0[COMRAM] unsigned long 
 11917 ;; Registers used:
 11918 ;;		wreg, status,2, status,0
 11919 ;; Tracked objects:
 11920 ;;		On entry : 0/0
 11921 ;;		On exit  : 0/0
 11922 ;;		Unchanged: 0/0
 11923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11924 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11928 ;;Total ram usage:       13 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; This function calls:
 11931 ;;		Nothing
 11932 ;; This function is called by:
 11933 ;;		_I2C_Master_Init
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text23
 11938  00C000                     __ptext23:
 11939                           	opt stack 0
 11940  00C000                     ___lldiv:
 11941                           	opt stack 28
 11942                           
 11943                           ;incstack = 0
 11944  00C000  0E00               	movlw	0
 11945  00C002  6E09               	movwf	___lldiv@quotient,c
 11946  00C004  0E00               	movlw	0
 11947  00C006  6E0A               	movwf	___lldiv@quotient+1,c
 11948  00C008  0E00               	movlw	0
 11949  00C00A  6E0B               	movwf	___lldiv@quotient+2,c
 11950  00C00C  0E00               	movlw	0
 11951  00C00E  6E0C               	movwf	___lldiv@quotient+3,c
 11952  00C010  5005               	movf	___lldiv@divisor,w,c
 11953  00C012  1006               	iorwf	___lldiv@divisor+1,w,c
 11954  00C014  1007               	iorwf	___lldiv@divisor+2,w,c
 11955  00C016  1008               	iorwf	___lldiv@divisor+3,w,c
 11956  00C018  B4D8               	btfsc	status,2,c
 11957  00C01A  D02A               	goto	l1552
 11958  00C01C  0E01               	movlw	1
 11959  00C01E  6E0D               	movwf	___lldiv@counter,c
 11960  00C020  D006               	goto	l1547
 11961  00C022  90D8               	bcf	status,0,c
 11962  00C024  3605               	rlcf	___lldiv@divisor,f,c
 11963  00C026  3606               	rlcf	___lldiv@divisor+1,f,c
 11964  00C028  3607               	rlcf	___lldiv@divisor+2,f,c
 11965  00C02A  3608               	rlcf	___lldiv@divisor+3,f,c
 11966  00C02C  2A0D               	incf	___lldiv@counter,f,c
 11967  00C02E                     l1547:
 11968  00C02E  AE08               	btfss	___lldiv@divisor+3,7,c
 11969  00C030  D7F8               	goto	l1548
 11970  00C032                     u6600:
 11971  00C032  90D8               	bcf	status,0,c
 11972  00C034  3609               	rlcf	___lldiv@quotient,f,c
 11973  00C036  360A               	rlcf	___lldiv@quotient+1,f,c
 11974  00C038  360B               	rlcf	___lldiv@quotient+2,f,c
 11975  00C03A  360C               	rlcf	___lldiv@quotient+3,f,c
 11976  00C03C  5005               	movf	___lldiv@divisor,w,c
 11977  00C03E  5C01               	subwf	___lldiv@dividend,w,c
 11978  00C040  5006               	movf	___lldiv@divisor+1,w,c
 11979  00C042  5802               	subwfb	___lldiv@dividend+1,w,c
 11980  00C044  5007               	movf	___lldiv@divisor+2,w,c
 11981  00C046  5803               	subwfb	___lldiv@dividend+2,w,c
 11982  00C048  5008               	movf	___lldiv@divisor+3,w,c
 11983  00C04A  5804               	subwfb	___lldiv@dividend+3,w,c
 11984  00C04C  A0D8               	btfss	status,0,c
 11985  00C04E  D009               	goto	l1551
 11986  00C050  5005               	movf	___lldiv@divisor,w,c
 11987  00C052  5E01               	subwf	___lldiv@dividend,f,c
 11988  00C054  5006               	movf	___lldiv@divisor+1,w,c
 11989  00C056  5A02               	subwfb	___lldiv@dividend+1,f,c
 11990  00C058  5007               	movf	___lldiv@divisor+2,w,c
 11991  00C05A  5A03               	subwfb	___lldiv@dividend+2,f,c
 11992  00C05C  5008               	movf	___lldiv@divisor+3,w,c
 11993  00C05E  5A04               	subwfb	___lldiv@dividend+3,f,c
 11994  00C060  8009               	bsf	___lldiv@quotient,0,c
 11995  00C062                     l1551:
 11996  00C062  90D8               	bcf	status,0,c
 11997  00C064  3208               	rrcf	___lldiv@divisor+3,f,c
 11998  00C066  3207               	rrcf	___lldiv@divisor+2,f,c
 11999  00C068  3206               	rrcf	___lldiv@divisor+1,f,c
 12000  00C06A  3205               	rrcf	___lldiv@divisor,f,c
 12001  00C06C  2E0D               	decfsz	___lldiv@counter,f,c
 12002  00C06E  D7E1               	goto	u6600
 12003  00C070                     l1552:
 12004  00C070  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12005  00C074  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12006  00C078  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12007  00C07C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12008  00C080  0012               	return		;funcret
 12009  00C082                     __end_of___lldiv:
 12010                           	opt stack 0
 12011                           tblptru	equ	0xFF8
 12012                           tblptrh	equ	0xFF7
 12013                           tblptrl	equ	0xFF6
 12014                           tablat	equ	0xFF5
 12015                           prodh	equ	0xFF4
 12016                           prodl	equ	0xFF3
 12017                           postinc0	equ	0xFEE
 12018                           wreg	equ	0xFE8
 12019                           postdec1	equ	0xFE5
 12020                           plusw1	equ	0xFE3
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           plusw2	equ	0xFDB
 12026                           fsr2h	equ	0xFDA
 12027                           fsr2l	equ	0xFD9
 12028                           status	equ	0xFD8
 12029                           
 12030 ;; *************** function _mainOperation *****************
 12031 ;; Defined at:
 12032 ;;		line 266 in file "operationMode.c"
 12033 ;; Parameters:    Size  Location     Type
 12034 ;;		None
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  i               2   46[COMRAM] unsigned int 
 12037 ;;  currentDrawe    2   44[COMRAM] unsigned int 
 12038 ;;  nextDrawer      2   42[COMRAM] unsigned int 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  1    wreg      void 
 12041 ;; Registers used:
 12042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12050 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12051 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12052 ;;Total ram usage:        8 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    3
 12055 ;; This function calls:
 12056 ;;		_UART_Init
 12057 ;;		_getUserInputs
 12058 ;;		_lcdInst
 12059 ;;		_printf
 12060 ;;		_sortDrawerList
 12061 ;; This function is called by:
 12062 ;;		_main
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           	psect	text24
 12067  00CBD8                     __ptext24:
 12068                           	opt stack 0
 12069  00CBD8                     _mainOperation:
 12070                           	opt stack 27
 12071                           
 12072                           ;operationMode.c: 267: unsigned int i = 0;
 12073                           
 12074                           ;incstack = 0
 12075  00CBD8  0E00               	movlw	0
 12076  00CBDA  6E30               	movwf	mainOperation@i+1,c
 12077  00CBDC  0E00               	movlw	0
 12078  00CBDE  6E2F               	movwf	mainOperation@i,c
 12079                           
 12080                           ;operationMode.c: 268: unsigned int currentDrawer = 1;
 12081  00CBE0  0E00               	movlw	0
 12082  00CBE2  6E2E               	movwf	mainOperation@currentDrawer+1,c
 12083  00CBE4  0E01               	movlw	1
 12084  00CBE6  6E2D               	movwf	mainOperation@currentDrawer,c
 12085                           
 12086                           ;operationMode.c: 269: unsigned int nextDrawer = 0;
 12087  00CBE8  0E00               	movlw	0
 12088  00CBEA  6E2C               	movwf	mainOperation@nextDrawer+1,c
 12089  00CBEC  0E00               	movlw	0
 12090  00CBEE  6E2B               	movwf	mainOperation@nextDrawer,c
 12091                           
 12092                           ;operationMode.c: 272: UART_Init(9600);
 12093  00CBF0  0E80               	movlw	128
 12094  00CBF2  6E0F               	movwf	UART_Init@baud,c
 12095  00CBF4  0E25               	movlw	37
 12096  00CBF6  6E10               	movwf	UART_Init@baud+1,c
 12097  00CBF8  0E00               	movlw	0
 12098  00CBFA  6E11               	movwf	UART_Init@baud+2,c
 12099  00CBFC  0E00               	movlw	0
 12100  00CBFE  6E12               	movwf	UART_Init@baud+3,c
 12101  00CC00  EC41  F060         	call	_UART_Init	;wreg free
 12102                           
 12103                           ;operationMode.c: 274: getUserInputs();
 12104  00CC04  ECB2  F063         	call	_getUserInputs	;wreg free
 12105                           
 12106                           ;operationMode.c: 275: sortDrawerList();
 12107  00CC08  ECC8  F064         	call	_sortDrawerList	;wreg free
 12108                           
 12109                           ;operationMode.c: 277: for (i=0; i<7; i++){
 12110  00CC0C  0E00               	movlw	0
 12111  00CC0E  6E30               	movwf	mainOperation@i+1,c
 12112  00CC10  0E00               	movlw	0
 12113  00CC12  6E2F               	movwf	mainOperation@i,c
 12114  00CC14  5030               	movf	mainOperation@i+1,w,c
 12115  00CC16  E105               	bnz	u9120
 12116  00CC18  0E07               	movlw	7
 12117  00CC1A  5C2F               	subwf	mainOperation@i,w,c
 12118  00CC1C  B0D8               	btfsc	status,0,c
 12119  00CC1E  0012               	return	
 12120  00CC20  D001               	goto	l187
 12121  00CC22                     u9120:
 12122  00CC22  0012               	return	
 12123  00CC24                     l187:
 12124                           
 12125                           ;operationMode.c: 278: if (sortedDrawerTable[i] != 0){
 12126  00CC24  90D8               	bcf	status,0,c
 12127  00CC26  342F               	rlcf	mainOperation@i,w,c
 12128  00CC28  6ED9               	movwf	fsr2l,c
 12129  00CC2A  3430               	rlcf	mainOperation@i+1,w,c
 12130  00CC2C  6EDA               	movwf	fsr2h,c
 12131  00CC2E  0EA0               	movlw	low _sortedDrawerTable
 12132  00CC30  26D9               	addwf	fsr2l,f,c
 12133  00CC32  0E00               	movlw	high _sortedDrawerTable
 12134  00CC34  22DA               	addwfc	fsr2h,f,c
 12135  00CC36  50DE               	movf	postinc2,w,c
 12136  00CC38  10DE               	iorwf	postinc2,w,c
 12137  00CC3A  B4D8               	btfsc	status,2,c
 12138  00CC3C  D075               	goto	l191
 12139                           
 12140                           ;operationMode.c: 279: if (currentDrawer != sortedDrawerTable[i]){
 12141  00CC3E  90D8               	bcf	status,0,c
 12142  00CC40  342F               	rlcf	mainOperation@i,w,c
 12143  00CC42  6ED9               	movwf	fsr2l,c
 12144  00CC44  3430               	rlcf	mainOperation@i+1,w,c
 12145  00CC46  6EDA               	movwf	fsr2h,c
 12146  00CC48  0EA0               	movlw	low _sortedDrawerTable
 12147  00CC4A  26D9               	addwf	fsr2l,f,c
 12148  00CC4C  0E00               	movlw	high _sortedDrawerTable
 12149  00CC4E  22DA               	addwfc	fsr2h,f,c
 12150  00CC50  502D               	movf	mainOperation@currentDrawer,w,c
 12151  00CC52  18DE               	xorwf	postinc2,w,c
 12152  00CC54  E104               	bnz	u9140
 12153  00CC56  502E               	movf	mainOperation@currentDrawer+1,w,c
 12154  00CC58  18DE               	xorwf	postinc2,w,c
 12155  00CC5A  B4D8               	btfsc	status,2,c
 12156  00CC5C  D033               	goto	l190
 12157  00CC5E                     u9140:
 12158                           
 12159                           ;operationMode.c: 280: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12160  00CC5E  0E01               	movlw	1
 12161  00CC60  EC61  F05E         	call	_lcdInst
 12162  00CC64  0EC3               	movlw	195
 12163  00CC66  6E29               	movwf	??_mainOperation& (0+255),c
 12164  00CC68  0ECD               	movlw	205
 12165  00CC6A                     u10247:
 12166  00CC6A  2EE8               	decfsz	wreg,f,c
 12167  00CC6C  D7FE               	bra	u10247
 12168  00CC6E  2E29               	decfsz	??_mainOperation& (0+255),f,c
 12169  00CC70  D7FC               	bra	u10247
 12170  00CC72  F000               	nop	
 12171                           
 12172                           ;operationMode.c: 281: printf("Filling");
 12173  00CC74  0E94               	movlw	low STR_3
 12174  00CC76  6E0D               	movwf	printf@f,c
 12175  00CC78  0EFF               	movlw	high STR_3
 12176  00CC7A  6E0E               	movwf	printf@f+1,c
 12177  00CC7C  EC43  F06B         	call	_printf	;wreg free
 12178                           
 12179                           ;operationMode.c: 282: lcdInst(0xC0);;
 12180  00CC80  0EC0               	movlw	192
 12181  00CC82  EC61  F05E         	call	_lcdInst
 12182                           
 12183                           ;operationMode.c: 283: printf("drawer %i", sortedDrawerTable[i]);
 12184  00CC86  0E5F               	movlw	low STR_4
 12185  00CC88  6E0D               	movwf	printf@f,c
 12186  00CC8A  0EFF               	movlw	high STR_4
 12187  00CC8C  6E0E               	movwf	printf@f+1,c
 12188  00CC8E  90D8               	bcf	status,0,c
 12189  00CC90  342F               	rlcf	mainOperation@i,w,c
 12190  00CC92  6ED9               	movwf	fsr2l,c
 12191  00CC94  3430               	rlcf	mainOperation@i+1,w,c
 12192  00CC96  6EDA               	movwf	fsr2h,c
 12193  00CC98  0EA0               	movlw	low _sortedDrawerTable
 12194  00CC9A  26D9               	addwf	fsr2l,f,c
 12195  00CC9C  0E00               	movlw	high _sortedDrawerTable
 12196  00CC9E  22DA               	addwfc	fsr2h,f,c
 12197  00CCA0  CFDE F00F          	movff	postinc2,?_printf+2
 12198  00CCA4  CFDD F010          	movff	postdec2,?_printf+3
 12199  00CCA8  EC43  F06B         	call	_printf	;wreg free
 12200                           
 12201                           ;operationMode.c: 284: _delay((unsigned long)((1000)*(40000000/4000.0)));
 12202  00CCAC  0E33               	movlw	51
 12203  00CCAE  6E2A               	movwf	(??_mainOperation+1)& (0+255),c
 12204  00CCB0  0EBB               	movlw	187
 12205  00CCB2  6E29               	movwf	??_mainOperation& (0+255),c
 12206  00CCB4  0EE0               	movlw	224
 12207  00CCB6                     u10257:
 12208  00CCB6  2EE8               	decfsz	wreg,f,c
 12209  00CCB8  D7FE               	bra	u10257
 12210  00CCBA  2E29               	decfsz	??_mainOperation& (0+255),f,c
 12211  00CCBC  D7FC               	bra	u10257
 12212  00CCBE  2E2A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 12213  00CCC0  D7FA               	bra	u10257
 12214                           
 12215                           ;operationMode.c: 285: }
 12216  00CCC2  D032               	goto	l191
 12217  00CCC4                     l190:
 12218                           
 12219                           ;operationMode.c: 286: else{
 12220                           ;operationMode.c: 287: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12221  00CCC4  0E01               	movlw	1
 12222  00CCC6  EC61  F05E         	call	_lcdInst
 12223  00CCCA  0EC3               	movlw	195
 12224  00CCCC  6E29               	movwf	??_mainOperation& (0+255),c
 12225  00CCCE  0ECD               	movlw	205
 12226  00CCD0                     u10267:
 12227  00CCD0  2EE8               	decfsz	wreg,f,c
 12228  00CCD2  D7FE               	bra	u10267
 12229  00CCD4  2E29               	decfsz	??_mainOperation& (0+255),f,c
 12230  00CCD6  D7FC               	bra	u10267
 12231  00CCD8  F000               	nop	
 12232                           
 12233                           ;operationMode.c: 288: printf("Moving to");
 12234  00CCDA  0E69               	movlw	low STR_5
 12235  00CCDC  6E0D               	movwf	printf@f,c
 12236  00CCDE  0EFF               	movlw	high STR_5
 12237  00CCE0  6E0E               	movwf	printf@f+1,c
 12238  00CCE2  EC43  F06B         	call	_printf	;wreg free
 12239                           
 12240                           ;operationMode.c: 289: lcdInst(0xC0);;
 12241  00CCE6  0EC0               	movlw	192
 12242  00CCE8  EC61  F05E         	call	_lcdInst
 12243                           
 12244                           ;operationMode.c: 290: printf("drawer %i", sortedDrawerTable[i]);
 12245  00CCEC  0E5F               	movlw	low STR_4
 12246  00CCEE  6E0D               	movwf	printf@f,c
 12247  00CCF0  0EFF               	movlw	high STR_4
 12248  00CCF2  6E0E               	movwf	printf@f+1,c
 12249  00CCF4  90D8               	bcf	status,0,c
 12250  00CCF6  342F               	rlcf	mainOperation@i,w,c
 12251  00CCF8  6ED9               	movwf	fsr2l,c
 12252  00CCFA  3430               	rlcf	mainOperation@i+1,w,c
 12253  00CCFC  6EDA               	movwf	fsr2h,c
 12254  00CCFE  0EA0               	movlw	low _sortedDrawerTable
 12255  00CD00  26D9               	addwf	fsr2l,f,c
 12256  00CD02  0E00               	movlw	high _sortedDrawerTable
 12257  00CD04  22DA               	addwfc	fsr2h,f,c
 12258  00CD06  CFDE F00F          	movff	postinc2,?_printf+2
 12259  00CD0A  CFDD F010          	movff	postdec2,?_printf+3
 12260  00CD0E  EC43  F06B         	call	_printf	;wreg free
 12261                           
 12262                           ;operationMode.c: 291: _delay((unsigned long)((1000)*(40000000/4000.0)));
 12263  00CD12  0E33               	movlw	51
 12264  00CD14  6E2A               	movwf	(??_mainOperation+1)& (0+255),c
 12265  00CD16  0EBB               	movlw	187
 12266  00CD18  6E29               	movwf	??_mainOperation& (0+255),c
 12267  00CD1A  0EE0               	movlw	224
 12268  00CD1C                     u10277:
 12269  00CD1C  2EE8               	decfsz	wreg,f,c
 12270  00CD1E  D7FE               	bra	u10277
 12271  00CD20  2E29               	decfsz	??_mainOperation& (0+255),f,c
 12272  00CD22  D7FC               	bra	u10277
 12273  00CD24  2E2A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 12274  00CD26  D7FA               	bra	u10277
 12275  00CD28                     l191:
 12276  00CD28  4A2F               	infsnz	mainOperation@i,f,c
 12277  00CD2A  2A30               	incf	mainOperation@i+1,f,c
 12278  00CD2C  5030               	movf	mainOperation@i+1,w,c
 12279  00CD2E  E101               	bnz	l192
 12280  00CD30  D773               	goto	L124
 12281  00CD32                     l192:
 12282  00CD32  0012               	return		;funcret
 12283  00CD34                     __end_of_mainOperation:
 12284                           	opt stack 0
 12285                           tblptru	equ	0xFF8
 12286                           tblptrh	equ	0xFF7
 12287                           tblptrl	equ	0xFF6
 12288                           tablat	equ	0xFF5
 12289                           prodh	equ	0xFF4
 12290                           prodl	equ	0xFF3
 12291                           postinc0	equ	0xFEE
 12292                           wreg	equ	0xFE8
 12293                           postdec1	equ	0xFE5
 12294                           plusw1	equ	0xFE3
 12295                           fsr1l	equ	0xFE1
 12296                           indf2	equ	0xFDF
 12297                           postinc2	equ	0xFDE
 12298                           postdec2	equ	0xFDD
 12299                           plusw2	equ	0xFDB
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function _sortDrawerList *****************
 12305 ;; Defined at:
 12306 ;;		line 57 in file "operationMode.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;		None
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;  i               2    8[COMRAM] unsigned int 
 12311 ;;  j               2    6[COMRAM] unsigned int 
 12312 ;;  temp            2    4[COMRAM] unsigned int 
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  1    wreg      void 
 12315 ;; Registers used:
 12316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12326 ;;Total ram usage:       10 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_mainOperation
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text25
 12336  00C990                     __ptext25:
 12337                           	opt stack 0
 12338  00C990                     _sortDrawerList:
 12339                           	opt stack 29
 12340                           
 12341                           ;operationMode.c: 58: unsigned int i = 0;
 12342                           
 12343                           ;incstack = 0
 12344  00C990  0E00               	movlw	0
 12345  00C992  6E0A               	movwf	sortDrawerList@i+1,c
 12346  00C994  0E00               	movlw	0
 12347  00C996  6E09               	movwf	sortDrawerList@i,c
 12348                           
 12349                           ;operationMode.c: 59: unsigned int j = 0;
 12350  00C998  0E00               	movlw	0
 12351  00C99A  6E08               	movwf	sortDrawerList@j+1,c
 12352  00C99C  0E00               	movlw	0
 12353  00C99E  6E07               	movwf	sortDrawerList@j,c
 12354                           
 12355                           ;operationMode.c: 60: unsigned int temp = 0;
 12356  00C9A0  0E00               	movlw	0
 12357  00C9A2  6E06               	movwf	sortDrawerList@temp+1,c
 12358  00C9A4  0E00               	movlw	0
 12359  00C9A6  6E05               	movwf	sortDrawerList@temp,c
 12360                           
 12361                           ;operationMode.c: 62: for (i=0; i<8; i++){
 12362  00C9A8  0E00               	movlw	0
 12363  00C9AA  6E0A               	movwf	sortDrawerList@i+1,c
 12364  00C9AC  0E00               	movlw	0
 12365  00C9AE  6E09               	movwf	sortDrawerList@i,c
 12366  00C9B0                     l6050:
 12367  00C9B0  500A               	movf	sortDrawerList@i+1,w,c
 12368  00C9B2  E11D               	bnz	l6060
 12369  00C9B4  0E08               	movlw	8
 12370  00C9B6  5C09               	subwf	sortDrawerList@i,w,c
 12371  00C9B8  B0D8               	btfsc	status,0,c
 12372  00C9BA  D019               	goto	u6670
 12373                           
 12374                           ;operationMode.c: 63: sortedDrawerTable[i] = drawerTable[i];
 12375  00C9BC  90D8               	bcf	status,0,c
 12376  00C9BE  3409               	rlcf	sortDrawerList@i,w,c
 12377  00C9C0  6ED9               	movwf	fsr2l,c
 12378  00C9C2  340A               	rlcf	sortDrawerList@i+1,w,c
 12379  00C9C4  6EDA               	movwf	fsr2h,c
 12380  00C9C6  0EB0               	movlw	low _drawerTable
 12381  00C9C8  26D9               	addwf	fsr2l,f,c
 12382  00C9CA  0E00               	movlw	high _drawerTable
 12383  00C9CC  22DA               	addwfc	fsr2h,f,c
 12384  00C9CE  90D8               	bcf	status,0,c
 12385  00C9D0  3409               	rlcf	sortDrawerList@i,w,c
 12386  00C9D2  6EE1               	movwf	fsr1l,c
 12387  00C9D4  340A               	rlcf	sortDrawerList@i+1,w,c
 12388  00C9D6  6EE2               	movwf	fsr1h,c
 12389  00C9D8  0EA0               	movlw	low _sortedDrawerTable
 12390  00C9DA  26E1               	addwf	fsr1l,f,c
 12391  00C9DC  0E00               	movlw	high _sortedDrawerTable
 12392  00C9DE  22E2               	addwfc	fsr1h,f,c
 12393  00C9E0  CFDE FFE6          	movff	postinc2,postinc1
 12394  00C9E4  CFDD FFE5          	movff	postdec2,postdec1
 12395  00C9E8  4A09               	infsnz	sortDrawerList@i,f,c
 12396  00C9EA  2A0A               	incf	sortDrawerList@i+1,f,c
 12397  00C9EC  D7E1               	goto	l6050
 12398  00C9EE                     u6670:
 12399  00C9EE                     l6060:
 12400                           
 12401                           ;operationMode.c: 64: }
 12402                           ;operationMode.c: 66: for (i=0; i<8; i++){
 12403  00C9EE  0E00               	movlw	0
 12404  00C9F0  6E0A               	movwf	sortDrawerList@i+1,c
 12405  00C9F2  0E00               	movlw	0
 12406  00C9F4  6E09               	movwf	sortDrawerList@i,c
 12407  00C9F6                     l6062:
 12408  00C9F6  500A               	movf	sortDrawerList@i+1,w,c
 12409  00C9F8  E15C               	bnz	l130
 12410  00C9FA  0E08               	movlw	8
 12411  00C9FC  5C09               	subwf	sortDrawerList@i,w,c
 12412  00C9FE  B0D8               	btfsc	status,0,c
 12413  00CA00  0012               	return	
 12414                           
 12415                           ;operationMode.c: 67: for (j=0; j<8; j++){
 12416  00CA02  0E00               	movlw	0
 12417  00CA04  6E08               	movwf	sortDrawerList@j+1,c
 12418  00CA06  0E00               	movlw	0
 12419  00CA08  6E07               	movwf	sortDrawerList@j,c
 12420  00CA0A                     l6068:
 12421  00CA0A  5008               	movf	sortDrawerList@j+1,w,c
 12422  00CA0C  E14F               	bnz	l6084
 12423  00CA0E  0E08               	movlw	8
 12424  00CA10  5C07               	subwf	sortDrawerList@j,w,c
 12425  00CA12  B0D8               	btfsc	status,0,c
 12426  00CA14  D04B               	goto	u6710
 12427                           
 12428                           ;operationMode.c: 68: if (sortedDrawerTable[j] > sortedDrawerTable[i]){
 12429  00CA16  90D8               	bcf	status,0,c
 12430  00CA18  3407               	rlcf	sortDrawerList@j,w,c
 12431  00CA1A  6ED9               	movwf	fsr2l,c
 12432  00CA1C  3408               	rlcf	sortDrawerList@j+1,w,c
 12433  00CA1E  6EDA               	movwf	fsr2h,c
 12434  00CA20  0EA0               	movlw	low _sortedDrawerTable
 12435  00CA22  26D9               	addwf	fsr2l,f,c
 12436  00CA24  0E00               	movlw	high _sortedDrawerTable
 12437  00CA26  22DA               	addwfc	fsr2h,f,c
 12438  00CA28  90D8               	bcf	status,0,c
 12439  00CA2A  3409               	rlcf	sortDrawerList@i,w,c
 12440  00CA2C  6EE1               	movwf	fsr1l,c
 12441  00CA2E  340A               	rlcf	sortDrawerList@i+1,w,c
 12442  00CA30  6EE2               	movwf	fsr1h,c
 12443  00CA32  0EA0               	movlw	low _sortedDrawerTable
 12444  00CA34  26E1               	addwf	fsr1l,f,c
 12445  00CA36  0E00               	movlw	high _sortedDrawerTable
 12446  00CA38  22E2               	addwfc	fsr1h,f,c
 12447  00CA3A  50DE               	movf	postinc2,w,c
 12448  00CA3C  5CE6               	subwf	postinc1,w,c
 12449  00CA3E  50DE               	movf	postinc2,w,c
 12450  00CA40  58E6               	subwfb	postinc1,w,c
 12451  00CA42  B0D8               	btfsc	status,0,c
 12452  00CA44  D030               	goto	l129
 12453                           
 12454                           ;operationMode.c: 69: temp = sortedDrawerTable[i];
 12455  00CA46  90D8               	bcf	status,0,c
 12456  00CA48  3409               	rlcf	sortDrawerList@i,w,c
 12457  00CA4A  6ED9               	movwf	fsr2l,c
 12458  00CA4C  340A               	rlcf	sortDrawerList@i+1,w,c
 12459  00CA4E  6EDA               	movwf	fsr2h,c
 12460  00CA50  0EA0               	movlw	low _sortedDrawerTable
 12461  00CA52  26D9               	addwf	fsr2l,f,c
 12462  00CA54  0E00               	movlw	high _sortedDrawerTable
 12463  00CA56  22DA               	addwfc	fsr2h,f,c
 12464  00CA58  CFDE F005          	movff	postinc2,sortDrawerList@temp
 12465  00CA5C  CFDD F006          	movff	postdec2,sortDrawerList@temp+1
 12466                           
 12467                           ;operationMode.c: 70: sortedDrawerTable[i] = sortedDrawerTable[j];
 12468  00CA60  90D8               	bcf	status,0,c
 12469  00CA62  3407               	rlcf	sortDrawerList@j,w,c
 12470  00CA64  6ED9               	movwf	fsr2l,c
 12471  00CA66  3408               	rlcf	sortDrawerList@j+1,w,c
 12472  00CA68  6EDA               	movwf	fsr2h,c
 12473  00CA6A  0EA0               	movlw	low _sortedDrawerTable
 12474  00CA6C  26D9               	addwf	fsr2l,f,c
 12475  00CA6E  0E00               	movlw	high _sortedDrawerTable
 12476  00CA70  22DA               	addwfc	fsr2h,f,c
 12477  00CA72  90D8               	bcf	status,0,c
 12478  00CA74  3409               	rlcf	sortDrawerList@i,w,c
 12479  00CA76  6EE1               	movwf	fsr1l,c
 12480  00CA78  340A               	rlcf	sortDrawerList@i+1,w,c
 12481  00CA7A  6EE2               	movwf	fsr1h,c
 12482  00CA7C  0EA0               	movlw	low _sortedDrawerTable
 12483  00CA7E  26E1               	addwf	fsr1l,f,c
 12484  00CA80  0E00               	movlw	high _sortedDrawerTable
 12485  00CA82  22E2               	addwfc	fsr1h,f,c
 12486  00CA84  CFDE FFE6          	movff	postinc2,postinc1
 12487  00CA88  CFDD FFE5          	movff	postdec2,postdec1
 12488                           
 12489                           ;operationMode.c: 71: sortedDrawerTable[j] = temp;
 12490  00CA8C  90D8               	bcf	status,0,c
 12491  00CA8E  3407               	rlcf	sortDrawerList@j,w,c
 12492  00CA90  6ED9               	movwf	fsr2l,c
 12493  00CA92  3408               	rlcf	sortDrawerList@j+1,w,c
 12494  00CA94  6EDA               	movwf	fsr2h,c
 12495  00CA96  0EA0               	movlw	low _sortedDrawerTable
 12496  00CA98  26D9               	addwf	fsr2l,f,c
 12497  00CA9A  0E00               	movlw	high _sortedDrawerTable
 12498  00CA9C  22DA               	addwfc	fsr2h,f,c
 12499  00CA9E  C005  FFDE         	movff	sortDrawerList@temp,postinc2
 12500  00CAA2  C006  FFDD         	movff	sortDrawerList@temp+1,postdec2
 12501  00CAA6                     l129:
 12502  00CAA6  4A07               	infsnz	sortDrawerList@j,f,c
 12503  00CAA8  2A08               	incf	sortDrawerList@j+1,f,c
 12504  00CAAA  D7AF               	goto	l6068
 12505  00CAAC                     u6710:
 12506  00CAAC                     l6084:
 12507  00CAAC  4A09               	infsnz	sortDrawerList@i,f,c
 12508  00CAAE  2A0A               	incf	sortDrawerList@i+1,f,c
 12509  00CAB0  D7A2               	goto	l6062
 12510  00CAB2                     l130:
 12511  00CAB2  0012               	return		;funcret
 12512  00CAB4                     __end_of_sortDrawerList:
 12513                           	opt stack 0
 12514                           tblptru	equ	0xFF8
 12515                           tblptrh	equ	0xFF7
 12516                           tblptrl	equ	0xFF6
 12517                           tablat	equ	0xFF5
 12518                           prodh	equ	0xFF4
 12519                           prodl	equ	0xFF3
 12520                           postinc0	equ	0xFEE
 12521                           wreg	equ	0xFE8
 12522                           postinc1	equ	0xFE6
 12523                           postdec1	equ	0xFE5
 12524                           plusw1	equ	0xFE3
 12525                           fsr1h	equ	0xFE2
 12526                           fsr1l	equ	0xFE1
 12527                           indf2	equ	0xFDF
 12528                           postinc2	equ	0xFDE
 12529                           postdec2	equ	0xFDD
 12530                           plusw2	equ	0xFDB
 12531                           fsr2h	equ	0xFDA
 12532                           fsr2l	equ	0xFD9
 12533                           status	equ	0xFD8
 12534                           
 12535 ;; *************** function _printf *****************
 12536 ;; Defined at:
 12537 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 12538 ;; Parameters:    Size  Location     Type
 12539 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12540 ;;		 -> STR_106(11), STR_105(13), STR_104(11), STR_103(13), 
 12541 ;;		 -> STR_102(11), STR_101(8), STR_100(15), STR_99(16), 
 12542 ;;		 -> STR_98(10), STR_97(8), STR_96(15), STR_95(16), 
 12543 ;;		 -> STR_94(10), STR_93(16), STR_92(16), STR_91(17), 
 12544 ;;		 -> STR_90(13), STR_89(17), STR_88(14), STR_87(11), 
 12545 ;;		 -> STR_86(11), STR_85(15), STR_84(15), STR_83(10), 
 12546 ;;		 -> STR_82(13), STR_81(16), STR_80(16), STR_79(17), 
 12547 ;;		 -> STR_78(17), STR_77(8), STR_76(15), STR_75(15), 
 12548 ;;		 -> STR_74(11), STR_73(14), STR_72(16), STR_71(16), 
 12549 ;;		 -> STR_70(11), STR_69(14), STR_68(16), STR_67(16), 
 12550 ;;		 -> STR_66(16), STR_65(13), STR_64(5), STR_63(11), 
 12551 ;;		 -> STR_62(15), STR_61(17), STR_60(18), STR_59(15), 
 12552 ;;		 -> STR_58(11), STR_57(7), STR_56(3), STR_55(16), 
 12553 ;;		 -> STR_54(8), STR_53(16), STR_52(15), STR_51(6), 
 12554 ;;		 -> STR_50(14), STR_49(17), STR_48(7), STR_47(9), 
 12555 ;;		 -> STR_46(17), STR_45(11), STR_44(17), STR_43(14), 
 12556 ;;		 -> STR_42(17), STR_41(11), STR_40(15), STR_39(11), 
 12557 ;;		 -> STR_38(8), STR_6(10), STR_5(10), STR_4(10), 
 12558 ;;		 -> STR_3(8), STR_2(16), STR_1(8), 
 12559 ;; Auto vars:     Size  Location     Type
 12560 ;;  idx             1   26[COMRAM] unsigned char 
 12561 ;;  tmpval          4    0        struct .
 12562 ;;  width           2   37[COMRAM] int 
 12563 ;;  val             2   34[COMRAM] unsigned int 
 12564 ;;  len             2   32[COMRAM] unsigned int 
 12565 ;;  ap              2   30[COMRAM] PTR void [1]
 12566 ;;		 -> ?_printf(2), 
 12567 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 12568 ;;		 -> STR_107(7), STR_37(5), STR_36(4), STR_35(4), 
 12569 ;;		 -> STR_34(4), STR_33(4), STR_32(3), STR_31(3), 
 12570 ;;		 -> STR_30(3), STR_29(3), STR_28(3), STR_27(2), 
 12571 ;;		 -> STR_26(2), STR_25(2), STR_24(5), STR_23(5), 
 12572 ;;		 -> STR_22(5), STR_21(5), STR_20(5), STR_19(4), 
 12573 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(4), 
 12574 ;;		 -> STR_14(4), STR_13(4), STR_12(3), STR_11(3), 
 12575 ;;		 -> STR_10(3), STR_9(2), STR_8(2), STR_7(2), 
 12576 ;;  c               1   39[COMRAM] char 
 12577 ;;  flag            1   36[COMRAM] unsigned char 
 12578 ;;  prec            1   27[COMRAM] char 
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  2   12[COMRAM] int 
 12581 ;; Registers used:
 12582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12588 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;Total ram usage:       28 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    2
 12595 ;; This function calls:
 12596 ;;		___lwdiv
 12597 ;;		___lwmod
 12598 ;;		___wmul
 12599 ;;		_isdigit
 12600 ;;		_putch
 12601 ;; This function is called by:
 12602 ;;		_main
 12603 ;;		_mainOperation
 12604 ;;		_viewLogs
 12605 ;;		_displayLogs
 12606 ;;		_food_press
 12607 ;;		_diet_press
 12608 ;;		_which_drawer
 12609 ;;		_standbyMode
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           	psect	text26
 12614  00D686                     __ptext26:
 12615                           	opt stack 0
 12616  00D686                     _printf:
 12617                           	opt stack 26
 12618                           
 12619                           ;doprnt.c: 466: va_list ap;
 12620                           ;doprnt.c: 499: signed char c;
 12621                           ;doprnt.c: 501: int width;
 12622                           ;doprnt.c: 506: signed char prec;
 12623                           ;doprnt.c: 508: unsigned char flag;
 12624                           ;doprnt.c: 523: union {
 12625                           ;doprnt.c: 524: unsigned long vd;
 12626                           ;doprnt.c: 525: double integ;
 12627                           ;doprnt.c: 526: } tmpval;
 12628                           ;doprnt.c: 528: unsigned int val;
 12629                           ;doprnt.c: 529: unsigned len;
 12630                           ;doprnt.c: 530: const char * cp;
 12631                           ;doprnt.c: 533: *ap = __va_start();
 12632                           
 12633                           ;incstack = 0
 12634  00D686  0E0F               	movlw	low (?_printf+2)
 12635  00D688  6E1F               	movwf	printf@ap,c
 12636  00D68A  0E00               	movlw	high (?_printf+2)
 12637  00D68C  6E20               	movwf	printf@ap+1,c
 12638                           
 12639                           ;doprnt.c: 536: while(c = *f++) {
 12640  00D68E  D1E6               	goto	u5120
 12641  00D690                     
 12642                           ;doprnt.c: 538: if(c != '%')
 12643  00D690  0E25               	movlw	37
 12644  00D692  1828               	xorwf	printf@c,w,c
 12645  00D694  B4D8               	btfsc	status,2,c
 12646  00D696  D004               	goto	l1126
 12647                           
 12648                           ;doprnt.c: 540: {
 12649                           ;doprnt.c: 541: (putch(c) );
 12650  00D698  5028               	movf	printf@c,w,c
 12651  00D69A  EC75  F05E         	call	_putch
 12652                           
 12653                           ;doprnt.c: 542: continue;
 12654  00D69E  D1DE               	goto	u5120
 12655  00D6A0                     l1126:
 12656                           
 12657                           ;doprnt.c: 543: }
 12658                           ;doprnt.c: 546: width = 0;
 12659  00D6A0  0E00               	movlw	0
 12660  00D6A2  6E27               	movwf	printf@width+1,c
 12661  00D6A4  0E00               	movlw	0
 12662  00D6A6  6E26               	movwf	printf@width,c
 12663                           
 12664                           ;doprnt.c: 548: flag = 0;
 12665  00D6A8  0E00               	movlw	0
 12666  00D6AA  6E25               	movwf	printf@flag,c
 12667                           
 12668                           ;doprnt.c: 551: switch(*f) {
 12669                           
 12670                           ;doprnt.c: 550: for(;;) {
 12671  00D6AC  D003               	goto	l1128
 12672  00D6AE                     
 12673                           ;doprnt.c: 580: flag |= 0x04;
 12674  00D6AE  8425               	bsf	printf@flag,2,c
 12675                           
 12676                           ;doprnt.c: 581: f++;
 12677  00D6B0  4A0D               	infsnz	printf@f,f,c
 12678  00D6B2  2A0E               	incf	printf@f+1,f,c
 12679  00D6B4                     l1128:
 12680  00D6B4  C00D  FFF6         	movff	printf@f,tblptrl
 12681  00D6B8  C00E  FFF7         	movff	printf@f+1,tblptrh
 12682  00D6BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12683  00D6BC  6AF8               	clrf	tblptru,c
 12684  00D6BE                     	endif
 12685  00D6BE                     	if	0	;tblptru may be non-zero
 12686  00D6BE                     	endif
 12687  00D6BE  0008               	tblrd		*
 12688  00D6C0  50F5               	movf	tablat,w,c
 12689                           
 12690                           ; Switch size 1, requested type "space"
 12691                           ; Number of cases is 1, Range of values is 48 to 48
 12692                           ; switch strategies available:
 12693                           ; Name         Instructions Cycles
 12694                           ; simple_byte            4     3 (average)
 12695                           ;	Chosen strategy is simple_byte
 12696  00D6C2  0A30               	xorlw	48	; case 48
 12697  00D6C4  B4D8               	btfsc	status,2,c
 12698  00D6C6  D7F3               	goto	l1129
 12699                           
 12700                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12701                           
 12702                           ;doprnt.c: 586: }
 12703                           
 12704                           ;doprnt.c: 585: break;
 12705  00D6C8  C00D  FFF6         	movff	printf@f,tblptrl
 12706  00D6CC  C00E  FFF7         	movff	printf@f+1,tblptrh
 12707  00D6D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12708  00D6D0  6AF8               	clrf	tblptru,c
 12709  00D6D2                     	endif
 12710  00D6D2                     	if	0	;tblptru may be non-zero
 12711  00D6D2                     	endif
 12712  00D6D2  0008               	tblrd		*
 12713  00D6D4  50F5               	movf	tablat,w,c
 12714  00D6D6  EC8C  F05E         	call	_isdigit
 12715  00D6DA  A0D8               	btfss	status,0,c
 12716  00D6DC  D092               	goto	l1136
 12717                           
 12718                           ;doprnt.c: 598: width = 0;
 12719  00D6DE  0E00               	movlw	0
 12720  00D6E0  6E27               	movwf	printf@width+1,c
 12721  00D6E2  0E00               	movlw	0
 12722  00D6E4  6E26               	movwf	printf@width,c
 12723  00D6E6                     
 12724                           ;doprnt.c: 600: width *= 10;
 12725  00D6E6  C026  F001         	movff	printf@width,___wmul@multiplier
 12726  00D6EA  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 12727  00D6EE  0E00               	movlw	0
 12728  00D6F0  6E04               	movwf	___wmul@multiplicand+1,c
 12729  00D6F2  0E0A               	movlw	10
 12730  00D6F4  6E03               	movwf	___wmul@multiplicand,c
 12731  00D6F6  ECD2  F05E         	call	___wmul	;wreg free
 12732  00D6FA  C001  F026         	movff	?___wmul,printf@width
 12733  00D6FE  C002  F027         	movff	?___wmul+1,printf@width+1
 12734                           
 12735                           ;doprnt.c: 601: width += *f++ - '0';
 12736  00D702  0ED0               	movlw	208
 12737  00D704  6E17               	movwf	??_printf& (0+255),c
 12738  00D706  0EFF               	movlw	255
 12739  00D708  6E18               	movwf	(??_printf+1)& (0+255),c
 12740  00D70A  C00D  FFF6         	movff	printf@f,tblptrl
 12741  00D70E  C00E  FFF7         	movff	printf@f+1,tblptrh
 12742  00D712                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12743  00D712  6AF8               	clrf	tblptru,c
 12744  00D714                     	endif
 12745  00D714                     	if	0	;tblptru may be non-zero
 12746  00D714                     	endif
 12747  00D714  0008               	tblrd		*
 12748  00D716  50F5               	movf	tablat,w,c
 12749  00D718  6E19               	movwf	(??_printf+2)& (0+255),c
 12750  00D71A  6A1A               	clrf	(??_printf+3)& (0+255),c
 12751  00D71C  5017               	movf	??_printf,w,c
 12752  00D71E  2619               	addwf	??_printf+2,f,c
 12753  00D720  5018               	movf	??_printf+1,w,c
 12754  00D722  221A               	addwfc	??_printf+3,f,c
 12755  00D724  5019               	movf	??_printf+2,w,c
 12756  00D726  2626               	addwf	printf@width,f,c
 12757  00D728  501A               	movf	??_printf+3,w,c
 12758  00D72A  2227               	addwfc	printf@width+1,f,c
 12759  00D72C  4A0D               	infsnz	printf@f,f,c
 12760  00D72E  2A0E               	incf	printf@f+1,f,c
 12761                           
 12762                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12763  00D730  C00D  FFF6         	movff	printf@f,tblptrl
 12764  00D734  C00E  FFF7         	movff	printf@f+1,tblptrh
 12765  00D738                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12766  00D738  6AF8               	clrf	tblptru,c
 12767  00D73A                     	endif
 12768  00D73A                     	if	0	;tblptru may be non-zero
 12769  00D73A                     	endif
 12770  00D73A  0008               	tblrd		*
 12771  00D73C  50F5               	movf	tablat,w,c
 12772  00D73E  EC8C  F05E         	call	_isdigit
 12773  00D742  A0D8               	btfss	status,0,c
 12774  00D744  D05E               	goto	l1136
 12775  00D746  D7CF               	goto	l1134
 12776  00D748                     
 12777                           ;doprnt.c: 721: flag |= 0x80;
 12778  00D748  8E25               	bsf	printf@flag,7,c
 12779                           
 12780                           ;doprnt.c: 723: break;
 12781  00D74A  D076               	goto	l1141
 12782  00D74C                     
 12783                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12784  00D74C  C01F  FFD9         	movff	printf@ap,fsr2l
 12785  00D750  C020  FFDA         	movff	printf@ap+1,fsr2h
 12786  00D754  CFDE F01D          	movff	postinc2,printf@cp
 12787  00D758  CFDD F01E          	movff	postdec2,printf@cp+1
 12788  00D75C  0E02               	movlw	2
 12789  00D75E  261F               	addwf	printf@ap,f,c
 12790  00D760  0E00               	movlw	0
 12791  00D762  2220               	addwfc	printf@ap+1,f,c
 12792                           
 12793                           ;doprnt.c: 740: if(!cp)
 12794  00D764  501D               	movf	printf@cp,w,c
 12795  00D766  101E               	iorwf	printf@cp+1,w,c
 12796  00D768  A4D8               	btfss	status,2,c
 12797  00D76A  D004               	goto	l1144
 12798                           
 12799                           ;doprnt.c: 741: cp = "(null)";
 12800  00D76C  0EA4               	movlw	low STR_107
 12801  00D76E  6E1D               	movwf	printf@cp,c
 12802  00D770  0EFF               	movlw	high STR_107
 12803  00D772  6E1E               	movwf	printf@cp+1,c
 12804  00D774                     l1144:
 12805                           
 12806                           ;doprnt.c: 745: len = 0;
 12807  00D774  0E00               	movlw	0
 12808  00D776  6E22               	movwf	printf@len+1,c
 12809  00D778  0E00               	movlw	0
 12810  00D77A  6E21               	movwf	printf@len,c
 12811                           
 12812                           ;doprnt.c: 746: while(cp[len])
 12813  00D77C  D002               	goto	l1145
 12814  00D77E                     
 12815                           ;doprnt.c: 747: len++;
 12816  00D77E  4A21               	infsnz	printf@len,f,c
 12817  00D780  2A22               	incf	printf@len+1,f,c
 12818  00D782                     l1145:
 12819  00D782  5021               	movf	printf@len,w,c
 12820  00D784  241D               	addwf	printf@cp,w,c
 12821  00D786  6E17               	movwf	??_printf& (0+255),c
 12822  00D788  5022               	movf	printf@len+1,w,c
 12823  00D78A  201E               	addwfc	printf@cp+1,w,c
 12824  00D78C  6E18               	movwf	(??_printf+1)& (0+255),c
 12825  00D78E  C017  FFF6         	movff	??_printf,tblptrl
 12826  00D792  C018  FFF7         	movff	??_printf+1,tblptrh
 12827  00D796                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12828  00D796  6AF8               	clrf	tblptru,c
 12829  00D798                     	endif
 12830  00D798                     	if	0	;tblptru may be non-zero
 12831  00D798                     	endif
 12832  00D798  0008               	tblrd		*
 12833  00D79A  50F5               	movf	tablat,w,c
 12834  00D79C  0900               	iorlw	0
 12835  00D79E  A4D8               	btfss	status,2,c
 12836  00D7A0  D7EE               	goto	l1146
 12837                           
 12838                           ;doprnt.c: 757: if(width > len)
 12839  00D7A2  5026               	movf	printf@width,w,c
 12840  00D7A4  5C21               	subwf	printf@len,w,c
 12841  00D7A6  5027               	movf	printf@width+1,w,c
 12842  00D7A8  5822               	subwfb	printf@len+1,w,c
 12843  00D7AA  B0D8               	btfsc	status,0,c
 12844  00D7AC  D005               	goto	l1148
 12845                           
 12846                           ;doprnt.c: 758: width -= len;
 12847  00D7AE  5021               	movf	printf@len,w,c
 12848  00D7B0  5E26               	subwf	printf@width,f,c
 12849  00D7B2  5022               	movf	printf@len+1,w,c
 12850  00D7B4  5A27               	subwfb	printf@width+1,f,c
 12851  00D7B6  D008               	goto	l1150
 12852  00D7B8                     l1148:
 12853                           
 12854                           ;doprnt.c: 759: else
 12855                           ;doprnt.c: 760: width = 0;
 12856  00D7B8  0E00               	movlw	0
 12857  00D7BA  6E27               	movwf	printf@width+1,c
 12858  00D7BC  0E00               	movlw	0
 12859  00D7BE  6E26               	movwf	printf@width,c
 12860                           
 12861                           ;doprnt.c: 764: while(width--)
 12862  00D7C0  D003               	goto	l1150
 12863  00D7C2                     l5220:
 12864                           
 12865                           ;doprnt.c: 765: (putch(' ') );
 12866  00D7C2  0E20               	movlw	32
 12867  00D7C4  EC75  F05E         	call	_putch
 12868  00D7C8                     l1150:
 12869  00D7C8  0626               	decf	printf@width,f,c
 12870  00D7CA  A0D8               	btfss	status,0,c
 12871  00D7CC  0627               	decf	printf@width+1,f,c
 12872  00D7CE  2826               	incf	printf@width,w,c
 12873  00D7D0  E1F8               	bnz	l5220
 12874  00D7D2  2827               	incf	printf@width+1,w,c
 12875  00D7D4  B4D8               	btfsc	status,2,c
 12876  00D7D6  D00C               	goto	l1153
 12877  00D7D8  D7F4               	goto	l1151
 12878  00D7DA                     l5224:
 12879                           
 12880                           ;doprnt.c: 768: (putch(*cp++) );
 12881  00D7DA  C01D  FFF6         	movff	printf@cp,tblptrl
 12882  00D7DE  C01E  FFF7         	movff	printf@cp+1,tblptrh
 12883  00D7E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12884  00D7E2  6AF8               	clrf	tblptru,c
 12885  00D7E4                     	endif
 12886  00D7E4                     	if	0	;tblptru may be non-zero
 12887  00D7E4                     	endif
 12888  00D7E4  0008               	tblrd		*
 12889  00D7E6  50F5               	movf	tablat,w,c
 12890  00D7E8  EC75  F05E         	call	_putch
 12891  00D7EC  4A1D               	infsnz	printf@cp,f,c
 12892  00D7EE  2A1E               	incf	printf@cp+1,f,c
 12893  00D7F0                     l1153:
 12894  00D7F0  0621               	decf	printf@len,f,c
 12895  00D7F2  A0D8               	btfss	status,0,c
 12896  00D7F4  0622               	decf	printf@len+1,f,c
 12897  00D7F6  2821               	incf	printf@len,w,c
 12898  00D7F8  E1F0               	bnz	l5224
 12899  00D7FA  2822               	incf	printf@len+1,w,c
 12900  00D7FC  B4D8               	btfsc	status,2,c
 12901  00D7FE  D12E               	goto	u5120
 12902  00D800  D7EC               	goto	l1154
 12903  00D802                     l1136:
 12904  00D802  C00D  FFF6         	movff	printf@f,tblptrl
 12905  00D806  C00E  FFF7         	movff	printf@f+1,tblptrh
 12906  00D80A  4A0D               	infsnz	printf@f,f,c
 12907  00D80C  2A0E               	incf	printf@f+1,f,c
 12908  00D80E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12909  00D80E  6AF8               	clrf	tblptru,c
 12910  00D810                     	endif
 12911  00D810                     	if	0	;tblptru may be non-zero
 12912  00D810                     	endif
 12913  00D810  0008               	tblrd		*
 12914  00D812  CFF5 F028          	movff	tablat,printf@c
 12915  00D816  5028               	movf	printf@c,w,c
 12916                           
 12917                           ; Switch size 1, requested type "space"
 12918                           ; Number of cases is 5, Range of values is 0 to 120
 12919                           ; switch strategies available:
 12920                           ; Name         Instructions Cycles
 12921                           ; simple_byte           16     9 (average)
 12922                           ;	Chosen strategy is simple_byte
 12923  00D818  0A00               	xorlw	0	; case 0
 12924  00D81A  B4D8               	btfsc	status,2,c
 12925  00D81C  0012               	return	
 12926  00D81E  0A64               	xorlw	100	; case 100
 12927  00D820  B4D8               	btfsc	status,2,c
 12928  00D822  D00A               	goto	l1141
 12929  00D824  0A0D               	xorlw	13	; case 105
 12930  00D826  B4D8               	btfsc	status,2,c
 12931  00D828  D007               	goto	l1141
 12932  00D82A  0A1A               	xorlw	26	; case 115
 12933  00D82C  B4D8               	btfsc	status,2,c
 12934  00D82E  D78E               	goto	l1143
 12935  00D830  0A0B               	xorlw	11	; case 120
 12936  00D832  B4D8               	btfsc	status,2,c
 12937  00D834  D789               	goto	l1142
 12938  00D836  D112               	goto	u5120
 12939  00D838                     l1141:
 12940                           
 12941                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12942  00D838  BE25               	btfsc	printf@flag,7,c
 12943  00D83A  D015               	goto	l1157
 12944                           
 12945                           ;doprnt.c: 1253: {
 12946                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12947  00D83C  C01F  FFD9         	movff	printf@ap,fsr2l
 12948  00D840  C020  FFDA         	movff	printf@ap+1,fsr2h
 12949  00D844  CFDE F023          	movff	postinc2,printf@val
 12950  00D848  CFDD F024          	movff	postdec2,printf@val+1
 12951  00D84C  0E02               	movlw	2
 12952  00D84E  261F               	addwf	printf@ap,f,c
 12953  00D850  0E00               	movlw	0
 12954  00D852  2220               	addwfc	printf@ap+1,f,c
 12955                           
 12956                           ;doprnt.c: 1261: if((int)val < 0) {
 12957  00D854  AE24               	btfss	printf@val+1,7,c
 12958  00D856  D04A               	goto	l1160
 12959                           
 12960                           ;doprnt.c: 1262: flag |= 0x03;
 12961  00D858  0E03               	movlw	3
 12962  00D85A  1225               	iorwf	printf@flag,f,c
 12963                           
 12964                           ;doprnt.c: 1263: val = -val;
 12965  00D85C  6C23               	negf	printf@val,c
 12966  00D85E  1E24               	comf	printf@val+1,f,c
 12967  00D860  B0D8               	btfsc	status,0,c
 12968  00D862  2A24               	incf	printf@val+1,f,c
 12969                           
 12970                           ;doprnt.c: 1264: }
 12971                           ;doprnt.c: 1266: }
 12972  00D864  D043               	goto	l1160
 12973  00D866                     l1157:
 12974                           
 12975                           ;doprnt.c: 1268: else
 12976                           ;doprnt.c: 1273: {
 12977                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12978  00D866  C01F  FFD9         	movff	printf@ap,fsr2l
 12979  00D86A  C020  FFDA         	movff	printf@ap+1,fsr2h
 12980  00D86E  CFDE F023          	movff	postinc2,printf@val
 12981  00D872  CFDD F024          	movff	postdec2,printf@val+1
 12982  00D876  0E02               	movlw	2
 12983  00D878  261F               	addwf	printf@ap,f,c
 12984  00D87A  0E00               	movlw	0
 12985  00D87C  2220               	addwfc	printf@ap+1,f,c
 12986                           
 12987                           ;doprnt.c: 1287: }
 12988                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12989  00D87E  D036               	goto	l1160
 12990  00D880                     
 12991                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12992  00D880  0E01               	movlw	1
 12993  00D882  6E28               	movwf	printf@c,c
 12994  00D884                     l5250:
 12995  00D884  0E05               	movlw	5
 12996  00D886  1828               	xorwf	printf@c,w,c
 12997  00D888  B4D8               	btfsc	status,2,c
 12998  00D88A  D038               	goto	l1165
 12999                           
 13000                           ;doprnt.c: 1306: if(val < dpowers[c])
 13001  00D88C  5028               	movf	printf@c,w,c
 13002  00D88E  0D02               	mullw	2
 13003  00D890  0EDD               	movlw	low _dpowers
 13004  00D892  24F3               	addwf	prodl,w,c
 13005  00D894  6EF6               	movwf	tblptrl,c
 13006  00D896  0EFC               	movlw	high _dpowers
 13007  00D898  20F4               	addwfc	prodh,w,c
 13008  00D89A  6EF7               	movwf	tblptrh,c
 13009  00D89C                     	if	1	;There are 3 active tblptr bytes
 13010  00D89C  6AF8               	clrf	tblptru,c
 13011  00D89E  0E00               	movlw	low (__mediumconst shr (0+16))
 13012  00D8A0  22F8               	addwfc	tblptru,f,c
 13013  00D8A2                     	endif
 13014  00D8A2  0009               	tblrd		*+
 13015  00D8A4  50F5               	movf	tablat,w,c
 13016  00D8A6  5C23               	subwf	printf@val,w,c
 13017  00D8A8  0009               	tblrd		*+
 13018  00D8AA  50F5               	movf	tablat,w,c
 13019  00D8AC  5824               	subwfb	printf@val+1,w,c
 13020  00D8AE  A0D8               	btfss	status,0,c
 13021  00D8B0  D025               	goto	l1165
 13022                           
 13023                           ;doprnt.c: 1307: break;
 13024  00D8B2  2A28               	incf	printf@c,f,c
 13025  00D8B4  D7E7               	goto	l5250
 13026  00D8B6                     
 13027                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13028  00D8B6  0E01               	movlw	1
 13029  00D8B8  6E28               	movwf	printf@c,c
 13030  00D8BA                     l5264:
 13031  00D8BA  0E04               	movlw	4
 13032  00D8BC  1828               	xorwf	printf@c,w,c
 13033  00D8BE  B4D8               	btfsc	status,2,c
 13034  00D8C0  D01D               	goto	l1165
 13035                           
 13036                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13037  00D8C2  5028               	movf	printf@c,w,c
 13038  00D8C4  0D02               	mullw	2
 13039  00D8C6  0EE7               	movlw	low _hexpowers
 13040  00D8C8  24F3               	addwf	prodl,w,c
 13041  00D8CA  6EF6               	movwf	tblptrl,c
 13042  00D8CC  0EFC               	movlw	high _hexpowers
 13043  00D8CE  20F4               	addwfc	prodh,w,c
 13044  00D8D0  6EF7               	movwf	tblptrh,c
 13045  00D8D2                     	if	1	;There are 3 active tblptr bytes
 13046  00D8D2  6AF8               	clrf	tblptru,c
 13047  00D8D4  0E00               	movlw	low (__mediumconst shr (0+16))
 13048  00D8D6  22F8               	addwfc	tblptru,f,c
 13049  00D8D8                     	endif
 13050  00D8D8  0009               	tblrd		*+
 13051  00D8DA  50F5               	movf	tablat,w,c
 13052  00D8DC  5C23               	subwf	printf@val,w,c
 13053  00D8DE  0009               	tblrd		*+
 13054  00D8E0  50F5               	movf	tablat,w,c
 13055  00D8E2  5824               	subwfb	printf@val+1,w,c
 13056  00D8E4  A0D8               	btfss	status,0,c
 13057  00D8E6  D00A               	goto	l1165
 13058                           
 13059                           ;doprnt.c: 1318: break;
 13060  00D8E8  2A28               	incf	printf@c,f,c
 13061  00D8EA  D7E7               	goto	l5264
 13062  00D8EC                     l1160:
 13063  00D8EC  5025               	movf	printf@flag,w,c
 13064  00D8EE  0B80               	andlw	128
 13065                           
 13066                           ; Switch size 1, requested type "space"
 13067                           ; Number of cases is 2, Range of values is 0 to 128
 13068                           ; switch strategies available:
 13069                           ; Name         Instructions Cycles
 13070                           ; simple_byte            7     4 (average)
 13071                           ;	Chosen strategy is simple_byte
 13072  00D8F0  0A00               	xorlw	0	; case 0
 13073  00D8F2  B4D8               	btfsc	status,2,c
 13074  00D8F4  D7C5               	goto	l1161
 13075  00D8F6  0A80               	xorlw	128	; case 128
 13076  00D8F8  B4D8               	btfsc	status,2,c
 13077  00D8FA  D7DD               	goto	l1166
 13078  00D8FC                     l1165:
 13079                           
 13080                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13081  00D8FC  5026               	movf	printf@width,w,c
 13082  00D8FE  1027               	iorwf	printf@width+1,w,c
 13083  00D900  B4D8               	btfsc	status,2,c
 13084  00D902  D009               	goto	l1170
 13085  00D904  C025  F017         	movff	printf@flag,??_printf
 13086  00D908  0E03               	movlw	3
 13087  00D90A  1617               	andwf	??_printf,f,c
 13088  00D90C  B4D8               	btfsc	status,2,c
 13089  00D90E  D003               	goto	l1170
 13090                           
 13091                           ;doprnt.c: 1346: width--;
 13092  00D910  0626               	decf	printf@width,f,c
 13093  00D912  A0D8               	btfss	status,0,c
 13094  00D914  0627               	decf	printf@width+1,f,c
 13095  00D916                     l1170:
 13096                           
 13097                           ;doprnt.c: 1381: if(width > c)
 13098  00D916  0E80               	movlw	128
 13099  00D918  BE28               	btfsc	printf@c,7,c
 13100  00D91A  0E7F               	movlw	127
 13101  00D91C  6E17               	movwf	??_printf& (0+255),c
 13102  00D91E  5026               	movf	printf@width,w,c
 13103  00D920  5C28               	subwf	printf@c,w,c
 13104  00D922  5027               	movf	printf@width+1,w,c
 13105  00D924  0A80               	xorlw	128
 13106  00D926  5817               	subwfb	??_printf& (0+255),w,c
 13107  00D928  B0D8               	btfsc	status,0,c
 13108  00D92A  D007               	goto	l1171
 13109                           
 13110                           ;doprnt.c: 1382: width -= c;
 13111  00D92C  5028               	movf	printf@c,w,c
 13112  00D92E  5E26               	subwf	printf@width,f,c
 13113  00D930  0E00               	movlw	0
 13114  00D932  BE28               	btfsc	printf@c,7,c
 13115  00D934  0EFF               	movlw	255
 13116  00D936  5A27               	subwfb	printf@width+1,f,c
 13117  00D938  D004               	goto	l1172
 13118  00D93A                     l1171:
 13119                           
 13120                           ;doprnt.c: 1383: else
 13121                           ;doprnt.c: 1384: width = 0;
 13122  00D93A  0E00               	movlw	0
 13123  00D93C  6E27               	movwf	printf@width+1,c
 13124  00D93E  0E00               	movlw	0
 13125  00D940  6E26               	movwf	printf@width,c
 13126  00D942                     l1172:
 13127                           
 13128                           ;doprnt.c: 1387: if(flag & 0x04) {
 13129  00D942  A425               	btfss	printf@flag,2,c
 13130  00D944  D014               	goto	l1173
 13131                           
 13132                           ;doprnt.c: 1392: if(flag & 0x03)
 13133  00D946  C025  F017         	movff	printf@flag,??_printf
 13134  00D94A  0E03               	movlw	3
 13135  00D94C  1617               	andwf	??_printf,f,c
 13136  00D94E  B4D8               	btfsc	status,2,c
 13137  00D950  D003               	goto	l1174
 13138                           
 13139                           ;doprnt.c: 1393: (putch('-') );
 13140  00D952  0E2D               	movlw	45
 13141  00D954  EC75  F05E         	call	_putch
 13142  00D958                     l1174:
 13143                           
 13144                           ;doprnt.c: 1415: if(width)
 13145  00D958  5026               	movf	printf@width,w,c
 13146  00D95A  1027               	iorwf	printf@width+1,w,c
 13147  00D95C  B4D8               	btfsc	status,2,c
 13148  00D95E  D01E               	goto	l1182
 13149                           
 13150                           ;doprnt.c: 1417: (putch('0') );
 13151                           
 13152                           ;doprnt.c: 1416: do
 13153  00D960  0E30               	movlw	48
 13154  00D962  EC75  F05E         	call	_putch
 13155                           
 13156                           ;doprnt.c: 1418: while(--width);
 13157  00D966  0626               	decf	printf@width,f,c
 13158  00D968  A0D8               	btfss	status,0,c
 13159  00D96A  0627               	decf	printf@width+1,f,c
 13160  00D96C  D7F5               	goto	l1174
 13161  00D96E                     l1173:
 13162                           
 13163                           ;doprnt.c: 1422: {
 13164                           ;doprnt.c: 1424: if(width
 13165                           ;doprnt.c: 1428: )
 13166  00D96E  5026               	movf	printf@width,w,c
 13167  00D970  1027               	iorwf	printf@width+1,w,c
 13168  00D972  B4D8               	btfsc	status,2,c
 13169  00D974  D00A               	goto	u5100
 13170  00D976                     u5090:
 13171                           
 13172                           ;doprnt.c: 1430: (putch(' ') );
 13173                           
 13174                           ;doprnt.c: 1429: do
 13175  00D976  0E20               	movlw	32
 13176  00D978  EC75  F05E         	call	_putch
 13177                           
 13178                           ;doprnt.c: 1431: while(--width);
 13179  00D97C  0626               	decf	printf@width,f,c
 13180  00D97E  A0D8               	btfss	status,0,c
 13181  00D980  0627               	decf	printf@width+1,f,c
 13182  00D982  5026               	movf	printf@width,w,c
 13183  00D984  1027               	iorwf	printf@width+1,w,c
 13184  00D986  A4D8               	btfss	status,2,c
 13185  00D988  D7F6               	goto	u5090
 13186  00D98A                     u5100:
 13187                           
 13188                           ;doprnt.c: 1438: if(flag & 0x03)
 13189  00D98A  C025  F017         	movff	printf@flag,??_printf
 13190  00D98E  0E03               	movlw	3
 13191  00D990  1617               	andwf	??_printf,f,c
 13192  00D992  B4D8               	btfsc	status,2,c
 13193  00D994  D003               	goto	l1182
 13194                           
 13195                           ;doprnt.c: 1439: (putch('-') );
 13196  00D996  0E2D               	movlw	45
 13197  00D998  EC75  F05E         	call	_putch
 13198  00D99C                     l1182:
 13199                           
 13200                           ;doprnt.c: 1469: }
 13201                           ;doprnt.c: 1472: prec = c;
 13202  00D99C  C028  F01C         	movff	printf@c,printf@prec
 13203                           
 13204                           ;doprnt.c: 1474: while(prec--) {
 13205  00D9A0  D059               	goto	l1183
 13206  00D9A2                     
 13207                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13208  00D9A2  501C               	movf	printf@prec,w,c
 13209  00D9A4  0D02               	mullw	2
 13210  00D9A6  0EDD               	movlw	low _dpowers
 13211  00D9A8  24F3               	addwf	prodl,w,c
 13212  00D9AA  6EF6               	movwf	tblptrl,c
 13213  00D9AC  0EFC               	movlw	high _dpowers
 13214  00D9AE  20F4               	addwfc	prodh,w,c
 13215  00D9B0  6EF7               	movwf	tblptrh,c
 13216  00D9B2                     	if	1	;There are 3 active tblptr bytes
 13217  00D9B2  6AF8               	clrf	tblptru,c
 13218  00D9B4  0E00               	movlw	low (__mediumconst shr (0+16))
 13219  00D9B6  22F8               	addwfc	tblptru,f,c
 13220  00D9B8                     	endif
 13221  00D9B8  0009               	tblrd		*+
 13222  00D9BA  CFF5 F003          	movff	tablat,___lwdiv@divisor
 13223  00D9BE  000A               	tblrd		*-
 13224  00D9C0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 13225  00D9C4  C023  F001         	movff	printf@val,___lwdiv@dividend
 13226  00D9C8  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 13227  00D9CC  EC41  F05F         	call	___lwdiv	;wreg free
 13228  00D9D0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 13229  00D9D4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 13230  00D9D8  0E00               	movlw	0
 13231  00D9DA  6E0B               	movwf	___lwmod@divisor+1,c
 13232  00D9DC  0E0A               	movlw	10
 13233  00D9DE  6E0A               	movwf	___lwmod@divisor,c
 13234  00D9E0  ECFA  F05E         	call	___lwmod	;wreg free
 13235  00D9E4  5008               	movf	?___lwmod,w,c
 13236  00D9E6  0F30               	addlw	48
 13237  00D9E8  6E28               	movwf	printf@c,c
 13238                           
 13239                           ;doprnt.c: 1491: break;
 13240  00D9EA  D031               	goto	l1187
 13241  00D9EC                     
 13242                           ;doprnt.c: 1499: {
 13243                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13244  00D9EC  C023  F001         	movff	printf@val,___lwdiv@dividend
 13245  00D9F0  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 13246  00D9F4  501C               	movf	printf@prec,w,c
 13247  00D9F6  0D02               	mullw	2
 13248  00D9F8  0EE7               	movlw	low _hexpowers
 13249  00D9FA  24F3               	addwf	prodl,w,c
 13250  00D9FC  6EF6               	movwf	tblptrl,c
 13251  00D9FE  0EFC               	movlw	high _hexpowers
 13252  00DA00  20F4               	addwfc	prodh,w,c
 13253  00DA02  6EF7               	movwf	tblptrh,c
 13254  00DA04                     	if	1	;There are 3 active tblptr bytes
 13255  00DA04  6AF8               	clrf	tblptru,c
 13256  00DA06  0E00               	movlw	low (__mediumconst shr (0+16))
 13257  00DA08  22F8               	addwfc	tblptru,f,c
 13258  00DA0A                     	endif
 13259  00DA0A  0009               	tblrd		*+
 13260  00DA0C  CFF5 F003          	movff	tablat,___lwdiv@divisor
 13261  00DA10  000A               	tblrd		*-
 13262  00DA12  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 13263  00DA16  EC41  F05F         	call	___lwdiv	;wreg free
 13264  00DA1A  5001               	movf	?___lwdiv,w,c
 13265  00DA1C  0B0F               	andlw	15
 13266  00DA1E  6E1B               	movwf	printf@idx,c
 13267                           
 13268                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13269  00DA20  501B               	movf	printf@idx,w,c
 13270  00DA22  0D01               	mullw	1
 13271  00DA24  0E0E               	movlw	low STR_108
 13272  00DA26  24F3               	addwf	prodl,w,c
 13273  00DA28  6EF6               	movwf	tblptrl,c
 13274  00DA2A  0EFD               	movlw	high STR_108
 13275  00DA2C  20F4               	addwfc	prodh,w,c
 13276  00DA2E  6EF7               	movwf	tblptrh,c
 13277  00DA30                     	if	1	;There are 3 active tblptr bytes
 13278  00DA30  6AF8               	clrf	tblptru,c
 13279  00DA32  0E00               	movlw	low (__mediumconst shr (0+16))
 13280  00DA34  22F8               	addwfc	tblptru,f,c
 13281  00DA36                     	endif
 13282  00DA36  0008               	tblrd		*
 13283  00DA38  CFF5 F028          	movff	tablat,printf@c
 13284                           
 13285                           ;doprnt.c: 1523: }
 13286                           
 13287                           ;doprnt.c: 1508: }
 13288                           ;doprnt.c: 1510: break;
 13289  00DA3C  D008               	goto	l1187
 13290  00DA3E  5025               	movf	printf@flag,w,c
 13291  00DA40  0B80               	andlw	128
 13292                           
 13293                           ; Switch size 1, requested type "space"
 13294                           ; Number of cases is 2, Range of values is 0 to 128
 13295                           ; switch strategies available:
 13296                           ; Name         Instructions Cycles
 13297                           ; simple_byte            7     4 (average)
 13298                           ;	Chosen strategy is simple_byte
 13299  00DA42  0A00               	xorlw	0	; case 0
 13300  00DA44  B4D8               	btfsc	status,2,c
 13301  00DA46  D7AD               	goto	l1186
 13302  00DA48  0A80               	xorlw	128	; case 128
 13303  00DA4A  B4D8               	btfsc	status,2,c
 13304  00DA4C  D7CF               	goto	l1188
 13305  00DA4E                     l1187:
 13306                           
 13307                           ;doprnt.c: 1524: (putch(c) );
 13308  00DA4E  5028               	movf	printf@c,w,c
 13309  00DA50  EC75  F05E         	call	_putch
 13310  00DA54                     l1183:
 13311  00DA54  061C               	decf	printf@prec,f,c
 13312  00DA56  281C               	incf	printf@prec,w,c
 13313  00DA58  A4D8               	btfss	status,2,c
 13314  00DA5A  D7F1               	goto	l1185
 13315  00DA5C                     u5120:
 13316  00DA5C  C00D  FFF6         	movff	printf@f,tblptrl
 13317  00DA60  C00E  FFF7         	movff	printf@f+1,tblptrh
 13318  00DA64  4A0D               	infsnz	printf@f,f,c
 13319  00DA66  2A0E               	incf	printf@f+1,f,c
 13320  00DA68                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13321  00DA68  6AF8               	clrf	tblptru,c
 13322  00DA6A                     	endif
 13323  00DA6A                     	if	0	;tblptru may be non-zero
 13324  00DA6A                     	endif
 13325  00DA6A  0008               	tblrd		*
 13326  00DA6C  CFF5 F028          	movff	tablat,printf@c
 13327  00DA70  5028               	movf	printf@c,w,c
 13328  00DA72  B4D8               	btfsc	status,2,c
 13329  00DA74  0012               	return	
 13330  00DA76  D60C               	goto	l1125
 13331  00DA78                     __end_of_printf:
 13332                           	opt stack 0
 13333                           tblptru	equ	0xFF8
 13334                           tblptrh	equ	0xFF7
 13335                           tblptrl	equ	0xFF6
 13336                           tablat	equ	0xFF5
 13337                           prodh	equ	0xFF4
 13338                           prodl	equ	0xFF3
 13339                           postinc0	equ	0xFEE
 13340                           wreg	equ	0xFE8
 13341                           postinc1	equ	0xFE6
 13342                           postdec1	equ	0xFE5
 13343                           plusw1	equ	0xFE3
 13344                           fsr1h	equ	0xFE2
 13345                           fsr1l	equ	0xFE1
 13346                           indf2	equ	0xFDF
 13347                           postinc2	equ	0xFDE
 13348                           postdec2	equ	0xFDD
 13349                           plusw2	equ	0xFDB
 13350                           fsr2h	equ	0xFDA
 13351                           fsr2l	equ	0xFD9
 13352                           status	equ	0xFD8
 13353                           
 13354 ;; *************** function _putch *****************
 13355 ;; Defined at:
 13356 ;;		line 72 in file "LCD.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;  data            1    wreg     unsigned char 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  data            1    2[COMRAM] unsigned char 
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  1    wreg      void 
 13363 ;; Registers used:
 13364 ;;		wreg, status,2, status,0, cstack
 13365 ;; Tracked objects:
 13366 ;;		On entry : 0/0
 13367 ;;		On exit  : 0/0
 13368 ;;		Unchanged: 0/0
 13369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13374 ;;Total ram usage:        1 bytes
 13375 ;; Hardware stack levels used:    1
 13376 ;; Hardware stack levels required when called:    1
 13377 ;; This function calls:
 13378 ;;		_lcdNibble
 13379 ;; This function is called by:
 13380 ;;		_viewLogs
 13381 ;;		_food_press
 13382 ;;		_diet_press
 13383 ;;		_which_drawer
 13384 ;;		_printf
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           	psect	text27
 13389  00BCEA                     __ptext27:
 13390                           	opt stack 0
 13391  00BCEA                     _putch:
 13392                           	opt stack 27
 13393                           
 13394                           ;incstack = 0
 13395                           ;putch@data stored from wreg
 13396  00BCEA  6E03               	movwf	putch@data,c
 13397                           
 13398                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 13399  00BCEC  848C               	bsf	3980,2,c	;volatile
 13400                           
 13401                           ;LCD.c: 81: lcdNibble(data);
 13402  00BCEE  5003               	movf	putch@data,w,c
 13403  00BCF0  ECC1  F05F         	call	_lcdNibble
 13404                           
 13405                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 13406  00BCF4  0EC8               	movlw	200
 13407  00BCF6                     u10287:
 13408  00BCF6  D000               	nop2	
 13409  00BCF8  2EE8               	decfsz	wreg,f,c
 13410  00BCFA  D7FD               	bra	u10287
 13411  00BCFC  0012               	return		;funcret
 13412  00BCFE                     __end_of_putch:
 13413                           	opt stack 0
 13414                           tblptru	equ	0xFF8
 13415                           tblptrh	equ	0xFF7
 13416                           tblptrl	equ	0xFF6
 13417                           tablat	equ	0xFF5
 13418                           prodh	equ	0xFF4
 13419                           prodl	equ	0xFF3
 13420                           postinc0	equ	0xFEE
 13421                           wreg	equ	0xFE8
 13422                           postinc1	equ	0xFE6
 13423                           postdec1	equ	0xFE5
 13424                           plusw1	equ	0xFE3
 13425                           fsr1h	equ	0xFE2
 13426                           fsr1l	equ	0xFE1
 13427                           indf2	equ	0xFDF
 13428                           postinc2	equ	0xFDE
 13429                           postdec2	equ	0xFDD
 13430                           plusw2	equ	0xFDB
 13431                           fsr2h	equ	0xFDA
 13432                           fsr2l	equ	0xFD9
 13433                           status	equ	0xFD8
 13434                           
 13435 ;; *************** function _isdigit *****************
 13436 ;; Defined at:
 13437 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 13438 ;; Parameters:    Size  Location     Type
 13439 ;;  c               1    wreg     unsigned char 
 13440 ;; Auto vars:     Size  Location     Type
 13441 ;;  c               1    2[COMRAM] unsigned char 
 13442 ;; Return value:  Size  Location     Type
 13443 ;;		None               void
 13444 ;; Registers used:
 13445 ;;		wreg, status,2, status,0
 13446 ;; Tracked objects:
 13447 ;;		On entry : 0/0
 13448 ;;		On exit  : 0/0
 13449 ;;		Unchanged: 0/0
 13450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13454 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13455 ;;Total ram usage:        3 bytes
 13456 ;; Hardware stack levels used:    1
 13457 ;; This function calls:
 13458 ;;		Nothing
 13459 ;; This function is called by:
 13460 ;;		_printf
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           	psect	text28
 13465  00BD18                     __ptext28:
 13466                           	opt stack 0
 13467  00BD18                     _isdigit:
 13468                           	opt stack 27
 13469                           
 13470                           ;incstack = 0
 13471                           ;isdigit@c stored from wreg
 13472  00BD18  6E03               	movwf	isdigit@c,c
 13473  00BD1A  0E00               	movlw	0
 13474  00BD1C  6E02               	movwf	_isdigit$1519,c
 13475  00BD1E  0E3A               	movlw	58
 13476  00BD20  6003               	cpfslt	isdigit@c,c
 13477  00BD22  D005               	goto	l1521
 13478  00BD24  0E2F               	movlw	47
 13479  00BD26  6403               	cpfsgt	isdigit@c,c
 13480  00BD28  D002               	goto	l1521
 13481  00BD2A  0E01               	movlw	1
 13482  00BD2C  6E02               	movwf	_isdigit$1519,c
 13483  00BD2E                     l1521:
 13484  00BD2E  C002  F001         	movff	_isdigit$1519,??_isdigit
 13485  00BD32  3001               	rrcf	??_isdigit,w,c
 13486  00BD34  0012               	return	
 13487  00BD36                     __end_of_isdigit:
 13488                           	opt stack 0
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           postinc0	equ	0xFEE
 13496                           wreg	equ	0xFE8
 13497                           postinc1	equ	0xFE6
 13498                           postdec1	equ	0xFE5
 13499                           plusw1	equ	0xFE3
 13500                           fsr1h	equ	0xFE2
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           plusw2	equ	0xFDB
 13506                           fsr2h	equ	0xFDA
 13507                           fsr2l	equ	0xFD9
 13508                           status	equ	0xFD8
 13509                           
 13510 ;; *************** function ___lwmod *****************
 13511 ;; Defined at:
 13512 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;  dividend        2    7[COMRAM] unsigned int 
 13515 ;;  divisor         2    9[COMRAM] unsigned int 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  counter         1   11[COMRAM] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  2    7[COMRAM] unsigned int 
 13520 ;; Registers used:
 13521 ;;		wreg, status,2, status,0
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;Total ram usage:        5 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; This function calls:
 13534 ;;		Nothing
 13535 ;; This function is called by:
 13536 ;;		_displayLogs
 13537 ;;		_printf
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text29
 13542  00BDF4                     __ptext29:
 13543                           	opt stack 0
 13544  00BDF4                     ___lwmod:
 13545                           	opt stack 27
 13546                           
 13547                           ;incstack = 0
 13548  00BDF4  500A               	movf	___lwmod@divisor,w,c
 13549  00BDF6  100B               	iorwf	___lwmod@divisor+1,w,c
 13550  00BDF8  B4D8               	btfsc	status,2,c
 13551  00BDFA  D018               	goto	l1615
 13552  00BDFC  0E01               	movlw	1
 13553  00BDFE  6E0C               	movwf	___lwmod@counter,c
 13554  00BE00  D004               	goto	l1610
 13555  00BE02  90D8               	bcf	status,0,c
 13556  00BE04  360A               	rlcf	___lwmod@divisor,f,c
 13557  00BE06  360B               	rlcf	___lwmod@divisor+1,f,c
 13558  00BE08  2A0C               	incf	___lwmod@counter,f,c
 13559  00BE0A                     l1610:
 13560  00BE0A  AE0B               	btfss	___lwmod@divisor+1,7,c
 13561  00BE0C  D7FA               	goto	l1611
 13562  00BE0E                     u4840:
 13563  00BE0E  500A               	movf	___lwmod@divisor,w,c
 13564  00BE10  5C08               	subwf	___lwmod@dividend,w,c
 13565  00BE12  500B               	movf	___lwmod@divisor+1,w,c
 13566  00BE14  5809               	subwfb	___lwmod@dividend+1,w,c
 13567  00BE16  A0D8               	btfss	status,0,c
 13568  00BE18  D004               	goto	l1614
 13569  00BE1A  500A               	movf	___lwmod@divisor,w,c
 13570  00BE1C  5E08               	subwf	___lwmod@dividend,f,c
 13571  00BE1E  500B               	movf	___lwmod@divisor+1,w,c
 13572  00BE20  5A09               	subwfb	___lwmod@dividend+1,f,c
 13573  00BE22                     l1614:
 13574  00BE22  90D8               	bcf	status,0,c
 13575  00BE24  320B               	rrcf	___lwmod@divisor+1,f,c
 13576  00BE26  320A               	rrcf	___lwmod@divisor,f,c
 13577  00BE28  2E0C               	decfsz	___lwmod@counter,f,c
 13578  00BE2A  D7F1               	goto	u4840
 13579  00BE2C                     l1615:
 13580  00BE2C  C008  F008         	movff	___lwmod@dividend,?___lwmod
 13581  00BE30  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 13582  00BE34  0012               	return		;funcret
 13583  00BE36                     __end_of___lwmod:
 13584                           	opt stack 0
 13585                           tblptru	equ	0xFF8
 13586                           tblptrh	equ	0xFF7
 13587                           tblptrl	equ	0xFF6
 13588                           tablat	equ	0xFF5
 13589                           prodh	equ	0xFF4
 13590                           prodl	equ	0xFF3
 13591                           postinc0	equ	0xFEE
 13592                           wreg	equ	0xFE8
 13593                           postinc1	equ	0xFE6
 13594                           postdec1	equ	0xFE5
 13595                           plusw1	equ	0xFE3
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           plusw2	equ	0xFDB
 13602                           fsr2h	equ	0xFDA
 13603                           fsr2l	equ	0xFD9
 13604                           status	equ	0xFD8
 13605                           
 13606 ;; *************** function ___lwdiv *****************
 13607 ;; Defined at:
 13608 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;  dividend        2    0[COMRAM] unsigned int 
 13611 ;;  divisor         2    2[COMRAM] unsigned int 
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;  quotient        2    4[COMRAM] unsigned int 
 13614 ;;  counter         1    6[COMRAM] unsigned char 
 13615 ;; Return value:  Size  Location     Type
 13616 ;;                  2    0[COMRAM] unsigned int 
 13617 ;; Registers used:
 13618 ;;		wreg, status,2, status,0
 13619 ;; Tracked objects:
 13620 ;;		On entry : 0/0
 13621 ;;		On exit  : 0/0
 13622 ;;		Unchanged: 0/0
 13623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13627 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13628 ;;Total ram usage:        7 bytes
 13629 ;; Hardware stack levels used:    1
 13630 ;; This function calls:
 13631 ;;		Nothing
 13632 ;; This function is called by:
 13633 ;;		_displayLogs
 13634 ;;		_printf
 13635 ;; This function uses a non-reentrant model
 13636 ;;
 13637                           
 13638                           	psect	text30
 13639  00BE82                     __ptext30:
 13640                           	opt stack 0
 13641  00BE82                     ___lwdiv:
 13642                           	opt stack 27
 13643                           
 13644                           ;incstack = 0
 13645  00BE82  0E00               	movlw	0
 13646  00BE84  6E06               	movwf	___lwdiv@quotient+1,c
 13647  00BE86  0E00               	movlw	0
 13648  00BE88  6E05               	movwf	___lwdiv@quotient,c
 13649  00BE8A  5003               	movf	___lwdiv@divisor,w,c
 13650  00BE8C  1004               	iorwf	___lwdiv@divisor+1,w,c
 13651  00BE8E  B4D8               	btfsc	status,2,c
 13652  00BE90  D01C               	goto	l1605
 13653  00BE92  0E01               	movlw	1
 13654  00BE94  6E07               	movwf	___lwdiv@counter,c
 13655  00BE96  D004               	goto	l1600
 13656  00BE98  90D8               	bcf	status,0,c
 13657  00BE9A  3603               	rlcf	___lwdiv@divisor,f,c
 13658  00BE9C  3604               	rlcf	___lwdiv@divisor+1,f,c
 13659  00BE9E  2A07               	incf	___lwdiv@counter,f,c
 13660  00BEA0                     l1600:
 13661  00BEA0  AE04               	btfss	___lwdiv@divisor+1,7,c
 13662  00BEA2  D7FA               	goto	l1601
 13663  00BEA4                     u4810:
 13664  00BEA4  90D8               	bcf	status,0,c
 13665  00BEA6  3605               	rlcf	___lwdiv@quotient,f,c
 13666  00BEA8  3606               	rlcf	___lwdiv@quotient+1,f,c
 13667  00BEAA  5003               	movf	___lwdiv@divisor,w,c
 13668  00BEAC  5C01               	subwf	___lwdiv@dividend,w,c
 13669  00BEAE  5004               	movf	___lwdiv@divisor+1,w,c
 13670  00BEB0  5802               	subwfb	___lwdiv@dividend+1,w,c
 13671  00BEB2  A0D8               	btfss	status,0,c
 13672  00BEB4  D005               	goto	l1604
 13673  00BEB6  5003               	movf	___lwdiv@divisor,w,c
 13674  00BEB8  5E01               	subwf	___lwdiv@dividend,f,c
 13675  00BEBA  5004               	movf	___lwdiv@divisor+1,w,c
 13676  00BEBC  5A02               	subwfb	___lwdiv@dividend+1,f,c
 13677  00BEBE  8005               	bsf	___lwdiv@quotient,0,c
 13678  00BEC0                     l1604:
 13679  00BEC0  90D8               	bcf	status,0,c
 13680  00BEC2  3204               	rrcf	___lwdiv@divisor+1,f,c
 13681  00BEC4  3203               	rrcf	___lwdiv@divisor,f,c
 13682  00BEC6  2E07               	decfsz	___lwdiv@counter,f,c
 13683  00BEC8  D7ED               	goto	u4810
 13684  00BECA                     l1605:
 13685  00BECA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 13686  00BECE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13687  00BED2  0012               	return		;funcret
 13688  00BED4                     __end_of___lwdiv:
 13689                           	opt stack 0
 13690                           tblptru	equ	0xFF8
 13691                           tblptrh	equ	0xFF7
 13692                           tblptrl	equ	0xFF6
 13693                           tablat	equ	0xFF5
 13694                           prodh	equ	0xFF4
 13695                           prodl	equ	0xFF3
 13696                           postinc0	equ	0xFEE
 13697                           wreg	equ	0xFE8
 13698                           postinc1	equ	0xFE6
 13699                           postdec1	equ	0xFE5
 13700                           plusw1	equ	0xFE3
 13701                           fsr1h	equ	0xFE2
 13702                           fsr1l	equ	0xFE1
 13703                           indf2	equ	0xFDF
 13704                           postinc2	equ	0xFDE
 13705                           postdec2	equ	0xFDD
 13706                           plusw2	equ	0xFDB
 13707                           fsr2h	equ	0xFDA
 13708                           fsr2l	equ	0xFD9
 13709                           status	equ	0xFD8
 13710                           
 13711 ;; *************** function _getUserInputs *****************
 13712 ;; Defined at:
 13713 ;;		line 28 in file "operationMode.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;		None
 13716 ;; Auto vars:     Size  Location     Type
 13717 ;;  i               2   16[COMRAM] unsigned int 
 13718 ;;  data            2   14[COMRAM] unsigned int 
 13719 ;;  n               2   12[COMRAM] unsigned int 
 13720 ;;  count           2   10[COMRAM] unsigned int 
 13721 ;;  logNumber       2    8[COMRAM] unsigned int 
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13732 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13734 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;Total ram usage:       12 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    1
 13738 ;; This function calls:
 13739 ;;		___wmul
 13740 ;;		_readEEPROM
 13741 ;; This function is called by:
 13742 ;;		_mainOperation
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           	psect	text31
 13747  00C764                     __ptext31:
 13748                           	opt stack 0
 13749  00C764                     _getUserInputs:
 13750                           	opt stack 28
 13751                           
 13752                           ;operationMode.c: 29: unsigned int data = 0;
 13753                           
 13754                           ;incstack = 0
 13755  00C764  0E00               	movlw	0
 13756  00C766  6E10               	movwf	getUserInputs@data+1,c
 13757  00C768  0E00               	movlw	0
 13758  00C76A  6E0F               	movwf	getUserInputs@data,c
 13759                           
 13760                           ;operationMode.c: 30: unsigned int i = 0;
 13761  00C76C  0E00               	movlw	0
 13762  00C76E  6E12               	movwf	getUserInputs@i+1,c
 13763  00C770  0E00               	movlw	0
 13764  00C772  6E11               	movwf	getUserInputs@i,c
 13765                           
 13766                           ;operationMode.c: 31: unsigned int logNumber = 0;
 13767  00C774  0E00               	movlw	0
 13768  00C776  6E0A               	movwf	getUserInputs@logNumber+1,c
 13769  00C778  0E00               	movlw	0
 13770  00C77A  6E09               	movwf	getUserInputs@logNumber,c
 13771                           
 13772                           ;operationMode.c: 32: unsigned int n = 0;
 13773  00C77C  0E00               	movlw	0
 13774  00C77E  6E0E               	movwf	getUserInputs@n+1,c
 13775  00C780  0E00               	movlw	0
 13776  00C782  6E0D               	movwf	getUserInputs@n,c
 13777                           
 13778                           ;operationMode.c: 33: unsigned int count = 0;
 13779  00C784  0E00               	movlw	0
 13780  00C786  6E0C               	movwf	getUserInputs@count+1,c
 13781  00C788  0E00               	movlw	0
 13782  00C78A  6E0B               	movwf	getUserInputs@count,c
 13783                           
 13784                           ;operationMode.c: 35: logNumber = readEEPROM(250);
 13785  00C78C  0EFA               	movlw	250
 13786  00C78E  EC6B  F05E         	call	_readEEPROM
 13787  00C792  6E07               	movwf	??_getUserInputs& (0+255),c
 13788  00C794  5007               	movf	??_getUserInputs,w,c
 13789  00C796  6E09               	movwf	getUserInputs@logNumber,c
 13790  00C798  6A0A               	clrf	getUserInputs@logNumber+1,c
 13791                           
 13792                           ;operationMode.c: 37: if (logNumber == 0 || logNumber == 4){
 13793  00C79A  5009               	movf	getUserInputs@logNumber,w,c
 13794  00C79C  100A               	iorwf	getUserInputs@logNumber+1,w,c
 13795  00C79E  B4D8               	btfsc	status,2,c
 13796  00C7A0  D005               	goto	u6630
 13797  00C7A2  0E04               	movlw	4
 13798  00C7A4  1809               	xorwf	getUserInputs@logNumber,w,c
 13799  00C7A6  100A               	iorwf	getUserInputs@logNumber+1,w,c
 13800  00C7A8  A4D8               	btfss	status,2,c
 13801  00C7AA  D005               	goto	l114
 13802  00C7AC                     u6630:
 13803                           
 13804                           ;operationMode.c: 38: n = 0;
 13805  00C7AC  0E00               	movlw	0
 13806  00C7AE  6E0E               	movwf	getUserInputs@n+1,c
 13807  00C7B0  0E00               	movlw	0
 13808  00C7B2  6E0D               	movwf	getUserInputs@n,c
 13809                           
 13810                           ;operationMode.c: 39: }
 13811  00C7B4  D00E               	goto	l117
 13812  00C7B6                     l114:
 13813                           
 13814                           ;operationMode.c: 40: else{
 13815                           ;operationMode.c: 41: n = (logNumber)*35;
 13816  00C7B6  C009  F001         	movff	getUserInputs@logNumber,___wmul@multiplier
 13817  00C7BA  C00A  F002         	movff	getUserInputs@logNumber+1,___wmul@multiplier+1
 13818  00C7BE  0E00               	movlw	0
 13819  00C7C0  6E04               	movwf	___wmul@multiplicand+1,c
 13820  00C7C2  0E23               	movlw	35
 13821  00C7C4  6E03               	movwf	___wmul@multiplicand,c
 13822  00C7C6  ECD2  F05E         	call	___wmul	;wreg free
 13823  00C7CA  C001  F00D         	movff	?___wmul,getUserInputs@n
 13824  00C7CE  C002  F00E         	movff	?___wmul+1,getUserInputs@n+1
 13825  00C7D2                     l117:
 13826                           
 13827                           ;operationMode.c: 42: }
 13828                           ;operationMode.c: 44: for (i=11; i<35; i+=3){
 13829  00C7D2  0E00               	movlw	0
 13830  00C7D4  6E12               	movwf	getUserInputs@i+1,c
 13831  00C7D6  0E0B               	movlw	11
 13832  00C7D8  6E11               	movwf	getUserInputs@i,c
 13833  00C7DA                     l6028:
 13834  00C7DA  5012               	movf	getUserInputs@i+1,w,c
 13835  00C7DC  E14D               	bnz	l120
 13836  00C7DE  0E23               	movlw	35
 13837  00C7E0  5C11               	subwf	getUserInputs@i,w,c
 13838  00C7E2  B0D8               	btfsc	status,0,c
 13839  00C7E4  0012               	return	
 13840                           
 13841                           ;operationMode.c: 45: data = readEEPROM(i+n);
 13842  00C7E6  5011               	movf	getUserInputs@i,w,c
 13843  00C7E8  240D               	addwf	getUserInputs@n,w,c
 13844  00C7EA  EC6B  F05E         	call	_readEEPROM
 13845  00C7EE  6E07               	movwf	??_getUserInputs& (0+255),c
 13846  00C7F0  5007               	movf	??_getUserInputs,w,c
 13847  00C7F2  6E0F               	movwf	getUserInputs@data,c
 13848  00C7F4  6A10               	clrf	getUserInputs@data+1,c
 13849                           
 13850                           ;operationMode.c: 46: drawerTable[count] = data;
 13851  00C7F6  90D8               	bcf	status,0,c
 13852  00C7F8  340B               	rlcf	getUserInputs@count,w,c
 13853  00C7FA  6ED9               	movwf	fsr2l,c
 13854  00C7FC  340C               	rlcf	getUserInputs@count+1,w,c
 13855  00C7FE  6EDA               	movwf	fsr2h,c
 13856  00C800  0EB0               	movlw	low _drawerTable
 13857  00C802  26D9               	addwf	fsr2l,f,c
 13858  00C804  0E00               	movlw	high _drawerTable
 13859  00C806  22DA               	addwfc	fsr2h,f,c
 13860  00C808  C00F  FFDE         	movff	getUserInputs@data,postinc2
 13861  00C80C  C010  FFDD         	movff	getUserInputs@data+1,postdec2
 13862                           
 13863                           ;operationMode.c: 47: data = readEEPROM(i+1+n);
 13864  00C810  5011               	movf	getUserInputs@i,w,c
 13865  00C812  240D               	addwf	getUserInputs@n,w,c
 13866  00C814  6E07               	movwf	??_getUserInputs& (0+255),c
 13867  00C816  2807               	incf	??_getUserInputs,w,c
 13868  00C818  EC6B  F05E         	call	_readEEPROM
 13869  00C81C  6E08               	movwf	(??_getUserInputs+1)& (0+255),c
 13870  00C81E  5008               	movf	??_getUserInputs+1,w,c
 13871  00C820  6E0F               	movwf	getUserInputs@data,c
 13872  00C822  6A10               	clrf	getUserInputs@data+1,c
 13873                           
 13874                           ;operationMode.c: 48: dietTable[count] = data;
 13875  00C824  90D8               	bcf	status,0,c
 13876  00C826  340B               	rlcf	getUserInputs@count,w,c
 13877  00C828  6ED9               	movwf	fsr2l,c
 13878  00C82A  340C               	rlcf	getUserInputs@count+1,w,c
 13879  00C82C  6EDA               	movwf	fsr2h,c
 13880  00C82E  0E90               	movlw	low _dietTable
 13881  00C830  26D9               	addwf	fsr2l,f,c
 13882  00C832  0E00               	movlw	high _dietTable
 13883  00C834  22DA               	addwfc	fsr2h,f,c
 13884  00C836  C00F  FFDE         	movff	getUserInputs@data,postinc2
 13885  00C83A  C010  FFDD         	movff	getUserInputs@data+1,postdec2
 13886                           
 13887                           ;operationMode.c: 49: data = readEEPROM(i+2+n);
 13888  00C83E  5011               	movf	getUserInputs@i,w,c
 13889  00C840  240D               	addwf	getUserInputs@n,w,c
 13890  00C842  0F02               	addlw	2
 13891  00C844  EC6B  F05E         	call	_readEEPROM
 13892  00C848  6E07               	movwf	??_getUserInputs& (0+255),c
 13893  00C84A  5007               	movf	??_getUserInputs,w,c
 13894  00C84C  6E0F               	movwf	getUserInputs@data,c
 13895  00C84E  6A10               	clrf	getUserInputs@data+1,c
 13896                           
 13897                           ;operationMode.c: 50: foodTable[count] = data;
 13898  00C850  90D8               	bcf	status,0,c
 13899  00C852  340B               	rlcf	getUserInputs@count,w,c
 13900  00C854  6ED9               	movwf	fsr2l,c
 13901  00C856  340C               	rlcf	getUserInputs@count+1,w,c
 13902  00C858  6EDA               	movwf	fsr2h,c
 13903  00C85A  0E80               	movlw	low _foodTable
 13904  00C85C  26D9               	addwf	fsr2l,f,c
 13905  00C85E  0E00               	movlw	high _foodTable
 13906  00C860  22DA               	addwfc	fsr2h,f,c
 13907  00C862  C00F  FFDE         	movff	getUserInputs@data,postinc2
 13908  00C866  C010  FFDD         	movff	getUserInputs@data+1,postdec2
 13909                           
 13910                           ;operationMode.c: 51: count += 1;
 13911  00C86A  4A0B               	infsnz	getUserInputs@count,f,c
 13912  00C86C  2A0C               	incf	getUserInputs@count+1,f,c
 13913  00C86E  0E03               	movlw	3
 13914  00C870  2611               	addwf	getUserInputs@i,f,c
 13915  00C872  0E00               	movlw	0
 13916  00C874  2212               	addwfc	getUserInputs@i+1,f,c
 13917  00C876  D7B1               	goto	l6028
 13918  00C878                     l120:
 13919  00C878  0012               	return		;funcret
 13920  00C87A                     __end_of_getUserInputs:
 13921                           	opt stack 0
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           postinc0	equ	0xFEE
 13929                           wreg	equ	0xFE8
 13930                           postinc1	equ	0xFE6
 13931                           postdec1	equ	0xFE5
 13932                           plusw1	equ	0xFE3
 13933                           fsr1h	equ	0xFE2
 13934                           fsr1l	equ	0xFE1
 13935                           indf2	equ	0xFDF
 13936                           postinc2	equ	0xFDE
 13937                           postdec2	equ	0xFDD
 13938                           plusw2	equ	0xFDB
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function _readEEPROM *****************
 13944 ;; Defined at:
 13945 ;;		line 29 in file "EEPROMstorage.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  address         1    wreg     unsigned char 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  address         1    0[COMRAM] unsigned char 
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  1    wreg      unsigned char 
 13952 ;; Registers used:
 13953 ;;		wreg, status,2
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;Total ram usage:        1 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; This function calls:
 13966 ;;		Nothing
 13967 ;; This function is called by:
 13968 ;;		_main
 13969 ;;		_getUserInputs
 13970 ;;		_viewLogs
 13971 ;;		_displayLogs
 13972 ;;		_standbyMode
 13973 ;;		_shiftEEPROM
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           	psect	text32
 13978  00BCD6                     __ptext32:
 13979                           	opt stack 0
 13980  00BCD6                     _readEEPROM:
 13981                           	opt stack 28
 13982                           
 13983                           ;incstack = 0
 13984                           ;readEEPROM@address stored from wreg
 13985  00BCD6  6E01               	movwf	readEEPROM@address,c
 13986  00BCD8                     
 13987                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 13988  00BCD8  B2A6               	btfsc	4006,1,c	;volsfr
 13989  00BCDA  D7FE               	goto	l5332
 13990                           
 13991                           ;EEPROMstorage.c: 32: EEADR = address;
 13992  00BCDC  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 13993                           
 13994                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 13995  00BCE0  9EA6               	bcf	4006,7,c	;volsfr
 13996                           
 13997                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 13998  00BCE2  9CA6               	bcf	4006,6,c	;volsfr
 13999                           
 14000                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 14001  00BCE4  80A6               	bsf	4006,0,c	;volsfr
 14002                           
 14003                           ;EEPROMstorage.c: 36: return( EEDATA );
 14004  00BCE6  50A8               	movf	4008,w,c	;volatile
 14005  00BCE8  0012               	return	
 14006  00BCEA                     __end_of_readEEPROM:
 14007                           	opt stack 0
 14008                           tblptru	equ	0xFF8
 14009                           tblptrh	equ	0xFF7
 14010                           tblptrl	equ	0xFF6
 14011                           tablat	equ	0xFF5
 14012                           prodh	equ	0xFF4
 14013                           prodl	equ	0xFF3
 14014                           postinc0	equ	0xFEE
 14015                           wreg	equ	0xFE8
 14016                           postinc1	equ	0xFE6
 14017                           postdec1	equ	0xFE5
 14018                           plusw1	equ	0xFE3
 14019                           fsr1h	equ	0xFE2
 14020                           fsr1l	equ	0xFE1
 14021                           indf2	equ	0xFDF
 14022                           postinc2	equ	0xFDE
 14023                           postdec2	equ	0xFDD
 14024                           plusw2	equ	0xFDB
 14025                           fsr2h	equ	0xFDA
 14026                           fsr2l	equ	0xFD9
 14027                           status	equ	0xFD8
 14028                           
 14029 ;; *************** function ___wmul *****************
 14030 ;; Defined at:
 14031 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;  multiplier      2    0[COMRAM] unsigned int 
 14034 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;  product         2    4[COMRAM] unsigned int 
 14037 ;; Return value:  Size  Location     Type
 14038 ;;                  2    0[COMRAM] unsigned int 
 14039 ;; Registers used:
 14040 ;;		wreg, status,2, status,0, prodl, prodh
 14041 ;; Tracked objects:
 14042 ;;		On entry : 0/0
 14043 ;;		On exit  : 0/0
 14044 ;;		Unchanged: 0/0
 14045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14046 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14050 ;;Total ram usage:        6 bytes
 14051 ;; Hardware stack levels used:    1
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_getUserInputs
 14056 ;;		_displayLogs
 14057 ;;		_standbyMode
 14058 ;;		_printf
 14059 ;;		_tock
 14060 ;; This function uses a non-reentrant model
 14061 ;;
 14062                           
 14063                           	psect	text33
 14064  00BDA4                     __ptext33:
 14065                           	opt stack 0
 14066  00BDA4                     ___wmul:
 14067                           	opt stack 27
 14068                           
 14069                           ;incstack = 0
 14070  00BDA4  5001               	movf	___wmul@multiplier,w,c
 14071  00BDA6  0203               	mulwf	___wmul@multiplicand,c
 14072  00BDA8  CFF3 F005          	movff	prodl,___wmul@product
 14073  00BDAC  CFF4 F006          	movff	prodh,___wmul@product+1
 14074  00BDB0  5001               	movf	___wmul@multiplier,w,c
 14075  00BDB2  0204               	mulwf	___wmul@multiplicand+1,c
 14076  00BDB4  50F3               	movf	prodl,w,c
 14077  00BDB6  2606               	addwf	___wmul@product+1,f,c
 14078  00BDB8  5002               	movf	___wmul@multiplier+1,w,c
 14079  00BDBA  0203               	mulwf	___wmul@multiplicand,c
 14080  00BDBC  50F3               	movf	prodl,w,c
 14081  00BDBE  2606               	addwf	___wmul@product+1,f,c
 14082  00BDC0  C005  F001         	movff	___wmul@product,?___wmul
 14083  00BDC4  C006  F002         	movff	___wmul@product+1,?___wmul+1
 14084  00BDC8  0012               	return	
 14085  00BDCA                     __end_of___wmul:
 14086                           	opt stack 0
 14087                           tblptru	equ	0xFF8
 14088                           tblptrh	equ	0xFF7
 14089                           tblptrl	equ	0xFF6
 14090                           tablat	equ	0xFF5
 14091                           prodh	equ	0xFF4
 14092                           prodl	equ	0xFF3
 14093                           postinc0	equ	0xFEE
 14094                           wreg	equ	0xFE8
 14095                           postinc1	equ	0xFE6
 14096                           postdec1	equ	0xFE5
 14097                           plusw1	equ	0xFE3
 14098                           fsr1h	equ	0xFE2
 14099                           fsr1l	equ	0xFE1
 14100                           indf2	equ	0xFDF
 14101                           postinc2	equ	0xFDE
 14102                           postdec2	equ	0xFDD
 14103                           plusw2	equ	0xFDB
 14104                           fsr2h	equ	0xFDA
 14105                           fsr2l	equ	0xFD9
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function _UART_Init *****************
 14109 ;; Defined at:
 14110 ;;		line 197 in file "UART_PIC.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;  baud            4   14[COMRAM] long 
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  1    wreg      void 
 14117 ;; Registers used:
 14118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14126 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14128 ;;Total ram usage:        8 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; Hardware stack levels required when called:    1
 14131 ;; This function calls:
 14132 ;;		___aldiv
 14133 ;; This function is called by:
 14134 ;;		_mainOperation
 14135 ;; This function uses a non-reentrant model
 14136 ;;
 14137                           
 14138                           	psect	text34
 14139  00C082                     __ptext34:
 14140                           	opt stack 0
 14141  00C082                     _UART_Init:
 14142                           	opt stack 28
 14143                           
 14144                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 14145                           
 14146                           ;incstack = 0
 14147  00C082  0E00               	movlw	0
 14148  00C084  6E01               	movwf	___aldiv@dividend,c
 14149  00C086  0E5A               	movlw	90
 14150  00C088  6E02               	movwf	___aldiv@dividend+1,c
 14151  00C08A  0E62               	movlw	98
 14152  00C08C  6E03               	movwf	___aldiv@dividend+2,c
 14153  00C08E  0E02               	movlw	2
 14154  00C090  6E04               	movwf	___aldiv@dividend+3,c
 14155  00C092  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 14156  00C096  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 14157  00C09A  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 14158  00C09E  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 14159  00C0A2  0E06               	movlw	6
 14160  00C0A4                     u6735:
 14161  00C0A4  90D8               	bcf	status,0,c
 14162  00C0A6  3613               	rlcf	??_UART_Init,f,c
 14163  00C0A8  3614               	rlcf	??_UART_Init+1,f,c
 14164  00C0AA  3615               	rlcf	??_UART_Init+2,f,c
 14165  00C0AC  3616               	rlcf	??_UART_Init+3,f,c
 14166  00C0AE  2EE8               	decfsz	wreg,f,c
 14167  00C0B0  D7F9               	goto	u6735
 14168  00C0B2  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 14169  00C0B6  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 14170  00C0BA  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 14171  00C0BE  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 14172  00C0C2  EC7E  F061         	call	___aldiv	;wreg free
 14173  00C0C6  0401               	decf	?___aldiv,w,c
 14174  00C0C8  6EAF               	movwf	4015,c	;volatile
 14175                           
 14176                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 14177  00C0CA  9CAC               	bcf	4012,6,c	;volatile
 14178                           
 14179                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 14180  00C0CC  98AC               	bcf	4012,4,c	;volatile
 14181                           
 14182                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 14183  00C0CE  8AAC               	bsf	4012,5,c	;volatile
 14184                           
 14185                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 14186  00C0D0  9CAB               	bcf	4011,6,c	;volatile
 14187                           
 14188                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 14189  00C0D2  88AB               	bsf	4011,4,c	;volatile
 14190                           
 14191                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 14192  00C0D4  EE20 F008          	lfsr	2,8
 14193  00C0D8  5074               	movf	_UART,w,c
 14194  00C0DA  26D9               	addwf	fsr2l,f,c
 14195  00C0DC  5075               	movf	_UART+1,w,c
 14196  00C0DE  22DA               	addwfc	fsr2h,f,c
 14197  00C0E0  0E01               	movlw	1
 14198  00C0E2  6EDF               	movwf	indf2,c
 14199                           
 14200                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 14201  00C0E4  EE20 F009          	lfsr	2,9
 14202  00C0E8  5074               	movf	_UART,w,c
 14203  00C0EA  26D9               	addwf	fsr2l,f,c
 14204  00C0EC  5075               	movf	_UART+1,w,c
 14205  00C0EE  22DA               	addwfc	fsr2h,f,c
 14206  00C0F0  0E01               	movlw	1
 14207  00C0F2  6EDF               	movwf	indf2,c
 14208                           
 14209                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 14210  00C0F4  0EC8               	movlw	low _arr_dataRX
 14211  00C0F6  0100               	movlb	0	; () banked
 14212  00C0F8  6FDC               	movwf	(_uart+4)& (0+255),b	;volatile
 14213  00C0FA  0E00               	movlw	high _arr_dataRX
 14214  00C0FC  6FDD               	movwf	(_uart+5)& (0+255),b	;volatile
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;UART_PIC.c: 229: TRISC6 = 0;
 14218  00C0FE  9C94               	bcf	3988,6,c	;volatile
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;UART_PIC.c: 230: TRISC7 = 1;
 14222  00C100  8E94               	bsf	3988,7,c	;volatile
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 14226  00C102  8EAB               	bsf	4011,7,c	;volatile
 14227                           
 14228                           ; BSR set to: 0
 14229  00C104  0012               	return		;funcret
 14230  00C106                     __end_of_UART_Init:
 14231                           	opt stack 0
 14232                           tblptru	equ	0xFF8
 14233                           tblptrh	equ	0xFF7
 14234                           tblptrl	equ	0xFF6
 14235                           tablat	equ	0xFF5
 14236                           prodh	equ	0xFF4
 14237                           prodl	equ	0xFF3
 14238                           postinc0	equ	0xFEE
 14239                           wreg	equ	0xFE8
 14240                           postinc1	equ	0xFE6
 14241                           postdec1	equ	0xFE5
 14242                           plusw1	equ	0xFE3
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           plusw2	equ	0xFDB
 14249                           fsr2h	equ	0xFDA
 14250                           fsr2l	equ	0xFD9
 14251                           status	equ	0xFD8
 14252                           
 14253 ;; *************** function ___aldiv *****************
 14254 ;; Defined at:
 14255 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;  dividend        4    0[COMRAM] long 
 14258 ;;  divisor         4    4[COMRAM] long 
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  quotient        4   10[COMRAM] long 
 14261 ;;  sign            1    9[COMRAM] unsigned char 
 14262 ;;  counter         1    8[COMRAM] unsigned char 
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  4    0[COMRAM] long 
 14265 ;; Registers used:
 14266 ;;		wreg, status,2, status,0
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14272 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14273 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14275 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;Total ram usage:       14 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; This function calls:
 14279 ;;		Nothing
 14280 ;; This function is called by:
 14281 ;;		_UART_Init
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           	psect	text35
 14286  00C2FC                     __ptext35:
 14287                           	opt stack 0
 14288  00C2FC                     ___aldiv:
 14289                           	opt stack 28
 14290                           
 14291                           ; BSR set to: 0
 14292                           ;incstack = 0
 14293  00C2FC  0E00               	movlw	0
 14294  00C2FE  6E0A               	movwf	___aldiv@sign,c
 14295  00C300  AE08               	btfss	___aldiv@divisor+3,7,c
 14296  00C302  D00A               	goto	l1247
 14297  00C304  1E08               	comf	___aldiv@divisor+3,f,c
 14298  00C306  1E07               	comf	___aldiv@divisor+2,f,c
 14299  00C308  1E06               	comf	___aldiv@divisor+1,f,c
 14300  00C30A  6C05               	negf	___aldiv@divisor,c
 14301  00C30C  0E00               	movlw	0
 14302  00C30E  2206               	addwfc	___aldiv@divisor+1,f,c
 14303  00C310  2207               	addwfc	___aldiv@divisor+2,f,c
 14304  00C312  2208               	addwfc	___aldiv@divisor+3,f,c
 14305  00C314  0E01               	movlw	1
 14306  00C316  6E0A               	movwf	___aldiv@sign,c
 14307  00C318                     l1247:
 14308  00C318  AE04               	btfss	___aldiv@dividend+3,7,c
 14309  00C31A  D00A               	goto	l1248
 14310  00C31C  1E04               	comf	___aldiv@dividend+3,f,c
 14311  00C31E  1E03               	comf	___aldiv@dividend+2,f,c
 14312  00C320  1E02               	comf	___aldiv@dividend+1,f,c
 14313  00C322  6C01               	negf	___aldiv@dividend,c
 14314  00C324  0E00               	movlw	0
 14315  00C326  2202               	addwfc	___aldiv@dividend+1,f,c
 14316  00C328  2203               	addwfc	___aldiv@dividend+2,f,c
 14317  00C32A  2204               	addwfc	___aldiv@dividend+3,f,c
 14318  00C32C  0E01               	movlw	1
 14319  00C32E  1A0A               	xorwf	___aldiv@sign,f,c
 14320  00C330                     l1248:
 14321  00C330  0E00               	movlw	0
 14322  00C332  6E0B               	movwf	___aldiv@quotient,c
 14323  00C334  0E00               	movlw	0
 14324  00C336  6E0C               	movwf	___aldiv@quotient+1,c
 14325  00C338  0E00               	movlw	0
 14326  00C33A  6E0D               	movwf	___aldiv@quotient+2,c
 14327  00C33C  0E00               	movlw	0
 14328  00C33E  6E0E               	movwf	___aldiv@quotient+3,c
 14329  00C340  5005               	movf	___aldiv@divisor,w,c
 14330  00C342  1006               	iorwf	___aldiv@divisor+1,w,c
 14331  00C344  1007               	iorwf	___aldiv@divisor+2,w,c
 14332  00C346  1008               	iorwf	___aldiv@divisor+3,w,c
 14333  00C348  B4D8               	btfsc	status,2,c
 14334  00C34A  D02A               	goto	l1255
 14335  00C34C  0E01               	movlw	1
 14336  00C34E  6E09               	movwf	___aldiv@counter,c
 14337  00C350  D006               	goto	l1250
 14338  00C352  90D8               	bcf	status,0,c
 14339  00C354  3605               	rlcf	___aldiv@divisor,f,c
 14340  00C356  3606               	rlcf	___aldiv@divisor+1,f,c
 14341  00C358  3607               	rlcf	___aldiv@divisor+2,f,c
 14342  00C35A  3608               	rlcf	___aldiv@divisor+3,f,c
 14343  00C35C  2A09               	incf	___aldiv@counter,f,c
 14344  00C35E                     l1250:
 14345  00C35E  AE08               	btfss	___aldiv@divisor+3,7,c
 14346  00C360  D7F8               	goto	l1251
 14347  00C362                     u6560:
 14348  00C362  90D8               	bcf	status,0,c
 14349  00C364  360B               	rlcf	___aldiv@quotient,f,c
 14350  00C366  360C               	rlcf	___aldiv@quotient+1,f,c
 14351  00C368  360D               	rlcf	___aldiv@quotient+2,f,c
 14352  00C36A  360E               	rlcf	___aldiv@quotient+3,f,c
 14353  00C36C  5005               	movf	___aldiv@divisor,w,c
 14354  00C36E  5C01               	subwf	___aldiv@dividend,w,c
 14355  00C370  5006               	movf	___aldiv@divisor+1,w,c
 14356  00C372  5802               	subwfb	___aldiv@dividend+1,w,c
 14357  00C374  5007               	movf	___aldiv@divisor+2,w,c
 14358  00C376  5803               	subwfb	___aldiv@dividend+2,w,c
 14359  00C378  5008               	movf	___aldiv@divisor+3,w,c
 14360  00C37A  5804               	subwfb	___aldiv@dividend+3,w,c
 14361  00C37C  A0D8               	btfss	status,0,c
 14362  00C37E  D009               	goto	l1254
 14363  00C380  5005               	movf	___aldiv@divisor,w,c
 14364  00C382  5E01               	subwf	___aldiv@dividend,f,c
 14365  00C384  5006               	movf	___aldiv@divisor+1,w,c
 14366  00C386  5A02               	subwfb	___aldiv@dividend+1,f,c
 14367  00C388  5007               	movf	___aldiv@divisor+2,w,c
 14368  00C38A  5A03               	subwfb	___aldiv@dividend+2,f,c
 14369  00C38C  5008               	movf	___aldiv@divisor+3,w,c
 14370  00C38E  5A04               	subwfb	___aldiv@dividend+3,f,c
 14371  00C390  800B               	bsf	___aldiv@quotient,0,c
 14372  00C392                     l1254:
 14373  00C392  90D8               	bcf	status,0,c
 14374  00C394  3208               	rrcf	___aldiv@divisor+3,f,c
 14375  00C396  3207               	rrcf	___aldiv@divisor+2,f,c
 14376  00C398  3206               	rrcf	___aldiv@divisor+1,f,c
 14377  00C39A  3205               	rrcf	___aldiv@divisor,f,c
 14378  00C39C  2E09               	decfsz	___aldiv@counter,f,c
 14379  00C39E  D7E1               	goto	u6560
 14380  00C3A0                     l1255:
 14381  00C3A0  500A               	movf	___aldiv@sign,w,c
 14382  00C3A2  B4D8               	btfsc	status,2,c
 14383  00C3A4  D008               	goto	l1256
 14384  00C3A6  1E0E               	comf	___aldiv@quotient+3,f,c
 14385  00C3A8  1E0D               	comf	___aldiv@quotient+2,f,c
 14386  00C3AA  1E0C               	comf	___aldiv@quotient+1,f,c
 14387  00C3AC  6C0B               	negf	___aldiv@quotient,c
 14388  00C3AE  0E00               	movlw	0
 14389  00C3B0  220C               	addwfc	___aldiv@quotient+1,f,c
 14390  00C3B2  220D               	addwfc	___aldiv@quotient+2,f,c
 14391  00C3B4  220E               	addwfc	___aldiv@quotient+3,f,c
 14392  00C3B6                     l1256:
 14393  00C3B6  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 14394  00C3BA  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 14395  00C3BE  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 14396  00C3C2  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 14397  00C3C6  0012               	return	
 14398  00C3C8                     __end_of___aldiv:
 14399                           	opt stack 0
 14400                           tblptru	equ	0xFF8
 14401                           tblptrh	equ	0xFF7
 14402                           tblptrl	equ	0xFF6
 14403                           tablat	equ	0xFF5
 14404                           prodh	equ	0xFF4
 14405                           prodl	equ	0xFF3
 14406                           postinc0	equ	0xFEE
 14407                           wreg	equ	0xFE8
 14408                           postinc1	equ	0xFE6
 14409                           postdec1	equ	0xFE5
 14410                           plusw1	equ	0xFE3
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           plusw2	equ	0xFDB
 14417                           fsr2h	equ	0xFDA
 14418                           fsr2l	equ	0xFD9
 14419                           status	equ	0xFD8
 14420                           
 14421 ;; *************** function _initLCD *****************
 14422 ;; Defined at:
 14423 ;;		line 27 in file "LCD.c"
 14424 ;; Parameters:    Size  Location     Type
 14425 ;;		None
 14426 ;; Auto vars:     Size  Location     Type
 14427 ;;		None
 14428 ;; Return value:  Size  Location     Type
 14429 ;;                  1    wreg      void 
 14430 ;; Registers used:
 14431 ;;		wreg, status,2, status,0, cstack
 14432 ;; Tracked objects:
 14433 ;;		On entry : 0/0
 14434 ;;		On exit  : 0/0
 14435 ;;		Unchanged: 0/0
 14436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14441 ;;Total ram usage:        1 bytes
 14442 ;; Hardware stack levels used:    1
 14443 ;; Hardware stack levels required when called:    2
 14444 ;; This function calls:
 14445 ;;		_lcdInst
 14446 ;; This function is called by:
 14447 ;;		_main
 14448 ;; This function uses a non-reentrant model
 14449 ;;
 14450                           
 14451                           	psect	text36
 14452  00BE36                     __ptext36:
 14453                           	opt stack 0
 14454  00BE36                     _initLCD:
 14455                           	opt stack 28
 14456                           
 14457                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 14458                           
 14459                           ;incstack = 0
 14460  00BE36  0EC3               	movlw	195
 14461  00BE38  6E04               	movwf	??_initLCD& (0+255),c
 14462  00BE3A  0ECD               	movlw	205
 14463  00BE3C                     u10297:
 14464  00BE3C  2EE8               	decfsz	wreg,f,c
 14465  00BE3E  D7FE               	bra	u10297
 14466  00BE40  2E04               	decfsz	??_initLCD& (0+255),f,c
 14467  00BE42  D7FC               	bra	u10297
 14468  00BE44  F000               	nop	
 14469                           
 14470                           ;LCD.c: 36: lcdInst(0b00110011);
 14471  00BE46  0E33               	movlw	51
 14472  00BE48  EC61  F05E         	call	_lcdInst
 14473                           
 14474                           ;LCD.c: 37: lcdInst(0b00110010);
 14475  00BE4C  0E32               	movlw	50
 14476  00BE4E  EC61  F05E         	call	_lcdInst
 14477                           
 14478                           ;LCD.c: 38: lcdInst(0b00101000);
 14479  00BE52  0E28               	movlw	40
 14480  00BE54  EC61  F05E         	call	_lcdInst
 14481                           
 14482                           ;LCD.c: 39: lcdInst(0b00001111);
 14483  00BE58  0E0F               	movlw	15
 14484  00BE5A  EC61  F05E         	call	_lcdInst
 14485                           
 14486                           ;LCD.c: 40: lcdInst(0b00000110);
 14487  00BE5E  0E06               	movlw	6
 14488  00BE60  EC61  F05E         	call	_lcdInst
 14489                           
 14490                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 14491  00BE64  0E01               	movlw	1
 14492  00BE66  EC61  F05E         	call	_lcdInst
 14493  00BE6A  0EC3               	movlw	195
 14494  00BE6C  6E04               	movwf	??_initLCD& (0+255),c
 14495  00BE6E  0ECD               	movlw	205
 14496  00BE70                     u10307:
 14497  00BE70  2EE8               	decfsz	wreg,f,c
 14498  00BE72  D7FE               	bra	u10307
 14499  00BE74  2E04               	decfsz	??_initLCD& (0+255),f,c
 14500  00BE76  D7FC               	bra	u10307
 14501  00BE78  F000               	nop	
 14502                           
 14503                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 14504  00BE7A  0E0F               	movlw	15
 14505  00BE7C  EC61  F05E         	call	_lcdInst
 14506  00BE80  0012               	return		;funcret
 14507  00BE82                     __end_of_initLCD:
 14508                           	opt stack 0
 14509                           tblptru	equ	0xFF8
 14510                           tblptrh	equ	0xFF7
 14511                           tblptrl	equ	0xFF6
 14512                           tablat	equ	0xFF5
 14513                           prodh	equ	0xFF4
 14514                           prodl	equ	0xFF3
 14515                           postinc0	equ	0xFEE
 14516                           wreg	equ	0xFE8
 14517                           postinc1	equ	0xFE6
 14518                           postdec1	equ	0xFE5
 14519                           plusw1	equ	0xFE3
 14520                           fsr1h	equ	0xFE2
 14521                           fsr1l	equ	0xFE1
 14522                           indf2	equ	0xFDF
 14523                           postinc2	equ	0xFDE
 14524                           postdec2	equ	0xFDD
 14525                           plusw2	equ	0xFDB
 14526                           fsr2h	equ	0xFDA
 14527                           fsr2l	equ	0xFD9
 14528                           status	equ	0xFD8
 14529                           
 14530 ;; *************** function _lcdInst *****************
 14531 ;; Defined at:
 14532 ;;		line 13 in file "LCD.c"
 14533 ;; Parameters:    Size  Location     Type
 14534 ;;  data            1    wreg     unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  data            1    2[COMRAM] unsigned char 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;                  1    wreg      void 
 14539 ;; Registers used:
 14540 ;;		wreg, status,2, status,0, cstack
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;Total ram usage:        1 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    1
 14553 ;; This function calls:
 14554 ;;		_lcdNibble
 14555 ;; This function is called by:
 14556 ;;		_main
 14557 ;;		_mainOperation
 14558 ;;		_viewLogs
 14559 ;;		_displayLogs
 14560 ;;		_food_press
 14561 ;;		_diet_press
 14562 ;;		_which_drawer
 14563 ;;		_standbyMode
 14564 ;;		_initLCD
 14565 ;; This function uses a non-reentrant model
 14566 ;;
 14567                           
 14568                           	psect	text37
 14569  00BCC2                     __ptext37:
 14570                           	opt stack 0
 14571  00BCC2                     _lcdInst:
 14572                           	opt stack 27
 14573                           
 14574                           ;incstack = 0
 14575                           ;lcdInst@data stored from wreg
 14576  00BCC2  6E03               	movwf	lcdInst@data,c
 14577                           
 14578                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 14579  00BCC4  948C               	bcf	3980,2,c	;volatile
 14580                           
 14581                           ;LCD.c: 22: lcdNibble(data);
 14582  00BCC6  5003               	movf	lcdInst@data,w,c
 14583  00BCC8  ECC1  F05F         	call	_lcdNibble
 14584                           
 14585                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 14586  00BCCC  0EC8               	movlw	200
 14587  00BCCE                     u10317:
 14588  00BCCE  D000               	nop2	
 14589  00BCD0  2EE8               	decfsz	wreg,f,c
 14590  00BCD2  D7FD               	bra	u10317
 14591  00BCD4  0012               	return		;funcret
 14592  00BCD6                     __end_of_lcdInst:
 14593                           	opt stack 0
 14594                           tblptru	equ	0xFF8
 14595                           tblptrh	equ	0xFF7
 14596                           tblptrl	equ	0xFF6
 14597                           tablat	equ	0xFF5
 14598                           prodh	equ	0xFF4
 14599                           prodl	equ	0xFF3
 14600                           postinc0	equ	0xFEE
 14601                           wreg	equ	0xFE8
 14602                           postinc1	equ	0xFE6
 14603                           postdec1	equ	0xFE5
 14604                           plusw1	equ	0xFE3
 14605                           fsr1h	equ	0xFE2
 14606                           fsr1l	equ	0xFE1
 14607                           indf2	equ	0xFDF
 14608                           postinc2	equ	0xFDE
 14609                           postdec2	equ	0xFDD
 14610                           plusw2	equ	0xFDB
 14611                           fsr2h	equ	0xFDA
 14612                           fsr2l	equ	0xFD9
 14613                           status	equ	0xFD8
 14614                           
 14615 ;; *************** function _lcdNibble *****************
 14616 ;; Defined at:
 14617 ;;		line 48 in file "LCD.c"
 14618 ;; Parameters:    Size  Location     Type
 14619 ;;  data            1    wreg     unsigned char 
 14620 ;; Auto vars:     Size  Location     Type
 14621 ;;  data            1    1[COMRAM] unsigned char 
 14622 ;;  temp            1    0[COMRAM] unsigned char 
 14623 ;; Return value:  Size  Location     Type
 14624 ;;                  1    wreg      void 
 14625 ;; Registers used:
 14626 ;;		wreg, status,2, status,0
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14636 ;;Total ram usage:        2 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; This function calls:
 14639 ;;		Nothing
 14640 ;; This function is called by:
 14641 ;;		_lcdInst
 14642 ;;		_putch
 14643 ;; This function uses a non-reentrant model
 14644 ;;
 14645                           
 14646                           	psect	text38
 14647  00BF82                     __ptext38:
 14648                           	opt stack 0
 14649  00BF82                     _lcdNibble:
 14650                           	opt stack 27
 14651                           
 14652                           ;incstack = 0
 14653                           ;lcdNibble@data stored from wreg
 14654  00BF82  6E02               	movwf	lcdNibble@data,c
 14655                           
 14656                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 14657  00BF84  5002               	movf	lcdNibble@data,w,c
 14658  00BF86  0BF0               	andlw	240
 14659  00BF88  6E01               	movwf	lcdNibble@temp,c
 14660                           
 14661                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 14662  00BF8A  508C               	movf	3980,w,c	;volatile
 14663  00BF8C  0B0F               	andlw	15
 14664  00BF8E  6E8C               	movwf	3980,c	;volatile
 14665                           
 14666                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 14667  00BF90  5001               	movf	lcdNibble@temp,w,c
 14668  00BF92  108C               	iorwf	3980,w,c	;volatile
 14669  00BF94  6E8C               	movwf	3980,c	;volatile
 14670                           
 14671                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 14672  00BF96  0E00               	movlw	0
 14673  00BF98  BEF2               	btfsc	intcon,7,c	;volatile
 14674  00BF9A  0E01               	movlw	1
 14675  00BF9C  6E72               	movwf	_LCDinterruptState,c
 14676  00BF9E  9EF2               	bcf	intcon,7,c	;volatile
 14677  00BFA0  868C               	bsf	3980,3,c	;volatile
 14678  00BFA2  0E53               	movlw	83
 14679  00BFA4                     u10327:
 14680  00BFA4  2EE8               	decfsz	wreg,f,c
 14681  00BFA6  D7FE               	bra	u10327
 14682  00BFA8  F000               	nop	
 14683  00BFAA  968C               	bcf	3980,3,c	;volatile
 14684  00BFAC  0EC8               	movlw	200
 14685  00BFAE                     u10337:
 14686  00BFAE  D000               	nop2	
 14687  00BFB0  2EE8               	decfsz	wreg,f,c
 14688  00BFB2  D7FD               	bra	u10337
 14689  00BFB4  B072               	btfsc	_LCDinterruptState,0,c
 14690  00BFB6  D002               	bra	u4765
 14691  00BFB8  9EF2               	bcf	intcon,7,c	;volatile
 14692  00BFBA  D001               	bra	u4766
 14693  00BFBC                     u4765:
 14694  00BFBC  8EF2               	bsf	intcon,7,c	;volatile
 14695  00BFBE                     u4766:
 14696                           
 14697                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 14698  00BFBE  3802               	swapf	lcdNibble@data,w,c
 14699  00BFC0  0BF0               	andlw	240
 14700  00BFC2  6E02               	movwf	lcdNibble@data,c
 14701                           
 14702                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 14703  00BFC4  5002               	movf	lcdNibble@data,w,c
 14704  00BFC6  0BF0               	andlw	240
 14705  00BFC8  6E01               	movwf	lcdNibble@temp,c
 14706                           
 14707                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 14708  00BFCA  508C               	movf	3980,w,c	;volatile
 14709  00BFCC  0B0F               	andlw	15
 14710  00BFCE  6E8C               	movwf	3980,c	;volatile
 14711                           
 14712                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 14713  00BFD0  5001               	movf	lcdNibble@temp,w,c
 14714  00BFD2  108C               	iorwf	3980,w,c	;volatile
 14715  00BFD4  6E8C               	movwf	3980,c	;volatile
 14716                           
 14717                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 14718  00BFD6  0E00               	movlw	0
 14719  00BFD8  BEF2               	btfsc	intcon,7,c	;volatile
 14720  00BFDA  0E01               	movlw	1
 14721  00BFDC  6E72               	movwf	_LCDinterruptState,c
 14722  00BFDE  9EF2               	bcf	intcon,7,c	;volatile
 14723  00BFE0  868C               	bsf	3980,3,c	;volatile
 14724  00BFE2  0E53               	movlw	83
 14725  00BFE4                     u10347:
 14726  00BFE4  2EE8               	decfsz	wreg,f,c
 14727  00BFE6  D7FE               	bra	u10347
 14728  00BFE8  F000               	nop	
 14729  00BFEA  968C               	bcf	3980,3,c	;volatile
 14730  00BFEC  0EC8               	movlw	200
 14731  00BFEE                     u10357:
 14732  00BFEE  D000               	nop2	
 14733  00BFF0  2EE8               	decfsz	wreg,f,c
 14734  00BFF2  D7FD               	bra	u10357
 14735  00BFF4  B072               	btfsc	_LCDinterruptState,0,c
 14736  00BFF6  D002               	bra	u4775
 14737  00BFF8  9EF2               	bcf	intcon,7,c	;volatile
 14738  00BFFA  D001               	bra	u4776
 14739  00BFFC                     u4775:
 14740  00BFFC  8EF2               	bsf	intcon,7,c	;volatile
 14741  00BFFE                     u4776:
 14742  00BFFE  0012               	return		;funcret
 14743  00C000                     __end_of_lcdNibble:
 14744                           	opt stack 0
 14745                           tblptru	equ	0xFF8
 14746                           tblptrh	equ	0xFF7
 14747                           tblptrl	equ	0xFF6
 14748                           tablat	equ	0xFF5
 14749                           prodh	equ	0xFF4
 14750                           prodl	equ	0xFF3
 14751                           intcon	equ	0xFF2
 14752                           postinc0	equ	0xFEE
 14753                           wreg	equ	0xFE8
 14754                           postinc1	equ	0xFE6
 14755                           postdec1	equ	0xFE5
 14756                           plusw1	equ	0xFE3
 14757                           fsr1h	equ	0xFE2
 14758                           fsr1l	equ	0xFE1
 14759                           indf2	equ	0xFDF
 14760                           postinc2	equ	0xFDE
 14761                           postdec2	equ	0xFDD
 14762                           plusw2	equ	0xFDB
 14763                           fsr2h	equ	0xFDA
 14764                           fsr2l	equ	0xFD9
 14765                           status	equ	0xFD8
 14766                           
 14767 ;; *************** function _initEEPROM *****************
 14768 ;; Defined at:
 14769 ;;		line 40 in file "EEPROMstorage.c"
 14770 ;; Parameters:    Size  Location     Type
 14771 ;;		None
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;  i               2    2[COMRAM] unsigned int 
 14774 ;; Return value:  Size  Location     Type
 14775 ;;                  1    wreg      void 
 14776 ;; Registers used:
 14777 ;;		wreg, status,2, status,0, cstack
 14778 ;; Tracked objects:
 14779 ;;		On entry : 0/0
 14780 ;;		On exit  : 0/0
 14781 ;;		Unchanged: 0/0
 14782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14787 ;;Total ram usage:        2 bytes
 14788 ;; Hardware stack levels used:    1
 14789 ;; Hardware stack levels required when called:    1
 14790 ;; This function calls:
 14791 ;;		_writeEEPROM
 14792 ;; This function is called by:
 14793 ;;		_main
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           	psect	text39
 14798  00BD7E                     __ptext39:
 14799                           	opt stack 0
 14800  00BD7E                     _initEEPROM:
 14801                           	opt stack 29
 14802                           
 14803                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 14804                           
 14805                           ;incstack = 0
 14806  00BD7E  0E00               	movlw	0
 14807  00BD80  6E04               	movwf	initEEPROM@i+1,c
 14808  00BD82  0E00               	movlw	0
 14809  00BD84  6E03               	movwf	initEEPROM@i,c
 14810                           
 14811                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 14812  00BD86  0E00               	movlw	0
 14813  00BD88  6E04               	movwf	initEEPROM@i+1,c
 14814  00BD8A  0E00               	movlw	0
 14815  00BD8C  6E03               	movwf	initEEPROM@i,c
 14816  00BD8E                     l7244:
 14817  00BD8E  0404               	decf	initEEPROM@i+1,w,c
 14818  00BD90  B0D8               	btfsc	status,0,c
 14819  00BD92  0012               	return	
 14820                           
 14821                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 14822  00BD94  0E00               	movlw	0
 14823  00BD96  6E01               	movwf	writeEEPROM@data,c
 14824  00BD98  5003               	movf	initEEPROM@i,w,c
 14825  00BD9A  ECE5  F05E         	call	_writeEEPROM
 14826  00BD9E  4A03               	infsnz	initEEPROM@i,f,c
 14827  00BDA0  2A04               	incf	initEEPROM@i+1,f,c
 14828  00BDA2  D7F5               	goto	l7244
 14829  00BDA4                     __end_of_initEEPROM:
 14830                           	opt stack 0
 14831                           tblptru	equ	0xFF8
 14832                           tblptrh	equ	0xFF7
 14833                           tblptrl	equ	0xFF6
 14834                           tablat	equ	0xFF5
 14835                           prodh	equ	0xFF4
 14836                           prodl	equ	0xFF3
 14837                           intcon	equ	0xFF2
 14838                           postinc0	equ	0xFEE
 14839                           wreg	equ	0xFE8
 14840                           postinc1	equ	0xFE6
 14841                           postdec1	equ	0xFE5
 14842                           plusw1	equ	0xFE3
 14843                           fsr1h	equ	0xFE2
 14844                           fsr1l	equ	0xFE1
 14845                           indf2	equ	0xFDF
 14846                           postinc2	equ	0xFDE
 14847                           postdec2	equ	0xFDD
 14848                           plusw2	equ	0xFDB
 14849                           fsr2h	equ	0xFDA
 14850                           fsr2l	equ	0xFD9
 14851                           status	equ	0xFD8
 14852                           
 14853 ;; *************** function _writeEEPROM *****************
 14854 ;; Defined at:
 14855 ;;		line 10 in file "EEPROMstorage.c"
 14856 ;; Parameters:    Size  Location     Type
 14857 ;;  address         1    wreg     unsigned char 
 14858 ;;  data            1    0[COMRAM] unsigned char 
 14859 ;; Auto vars:     Size  Location     Type
 14860 ;;  address         1    1[COMRAM] unsigned char 
 14861 ;; Return value:  Size  Location     Type
 14862 ;;                  1    wreg      void 
 14863 ;; Registers used:
 14864 ;;		wreg, status,2
 14865 ;; Tracked objects:
 14866 ;;		On entry : 0/0
 14867 ;;		On exit  : 0/0
 14868 ;;		Unchanged: 0/0
 14869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14870 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14874 ;;Total ram usage:        2 bytes
 14875 ;; Hardware stack levels used:    1
 14876 ;; This function calls:
 14877 ;;		Nothing
 14878 ;; This function is called by:
 14879 ;;		_standbyMode
 14880 ;;		_initEEPROM
 14881 ;;		_shiftEEPROM
 14882 ;; This function uses a non-reentrant model
 14883 ;;
 14884                           
 14885                           	psect	text40
 14886  00BDCA                     __ptext40:
 14887                           	opt stack 0
 14888  00BDCA                     _writeEEPROM:
 14889                           	opt stack 29
 14890                           
 14891                           ;incstack = 0
 14892                           ;writeEEPROM@address stored from wreg
 14893  00BDCA  6E02               	movwf	writeEEPROM@address,c
 14894  00BDCC                     
 14895                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 14896  00BDCC  B2A6               	btfsc	4006,1,c	;volsfr
 14897  00BDCE  D7FE               	goto	l5924
 14898                           
 14899                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 14900  00BDD0  84A6               	bsf	4006,2,c	;volsfr
 14901                           
 14902                           ;EEPROMstorage.c: 14: EEADR=address;
 14903  00BDD2  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 14904                           
 14905                           ;EEPROMstorage.c: 15: EEDATA=data;
 14906  00BDD6  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 14907                           
 14908                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 14909  00BDDA  9EA6               	bcf	4006,7,c	;volsfr
 14910                           
 14911                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 14912  00BDDC  9CA6               	bcf	4006,6,c	;volsfr
 14913                           
 14914                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 14915  00BDDE  9EF2               	bcf	intcon,7,c	;volatile
 14916                           
 14917                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 14918  00BDE0  0E55               	movlw	85
 14919  00BDE2  6EA7               	movwf	4007,c	;volsfr
 14920                           
 14921                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 14922  00BDE4  0EAA               	movlw	170
 14923  00BDE6  6EA7               	movwf	4007,c	;volsfr
 14924                           
 14925                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 14926  00BDE8  82A6               	bsf	4006,1,c	;volsfr
 14927                           
 14928                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 14929  00BDEA  8EF2               	bsf	intcon,7,c	;volatile
 14930  00BDEC  B2A6               	btfsc	4006,1,c	;volsfr
 14931  00BDEE  D7FE               	goto	l879
 14932                           
 14933                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 14934  00BDF0  94A6               	bcf	4006,2,c	;volsfr
 14935  00BDF2  0012               	return		;funcret
 14936  00BDF4                     __end_of_writeEEPROM:
 14937                           	opt stack 0
 14938                           tblptru	equ	0xFF8
 14939                           tblptrh	equ	0xFF7
 14940                           tblptrl	equ	0xFF6
 14941                           tablat	equ	0xFF5
 14942                           prodh	equ	0xFF4
 14943                           prodl	equ	0xFF3
 14944                           intcon	equ	0xFF2
 14945                           postinc0	equ	0xFEE
 14946                           wreg	equ	0xFE8
 14947                           postinc1	equ	0xFE6
 14948                           postdec1	equ	0xFE5
 14949                           plusw1	equ	0xFE3
 14950                           fsr1h	equ	0xFE2
 14951                           fsr1l	equ	0xFE1
 14952                           indf2	equ	0xFDF
 14953                           postinc2	equ	0xFDE
 14954                           postdec2	equ	0xFDD
 14955                           plusw2	equ	0xFDB
 14956                           fsr2h	equ	0xFDA
 14957                           fsr2l	equ	0xFD9
 14958                           status	equ	0xFD8
 14959                           tblptru	equ	0xFF8
 14960                           tblptrh	equ	0xFF7
 14961                           tblptrl	equ	0xFF6
 14962                           tablat	equ	0xFF5
 14963                           prodh	equ	0xFF4
 14964                           prodl	equ	0xFF3
 14965                           intcon	equ	0xFF2
 14966                           postinc0	equ	0xFEE
 14967                           wreg	equ	0xFE8
 14968                           postinc1	equ	0xFE6
 14969                           postdec1	equ	0xFE5
 14970                           plusw1	equ	0xFE3
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           plusw2	equ	0xFDB
 14977                           fsr2h	equ	0xFDA
 14978                           fsr2l	equ	0xFD9
 14979                           status	equ	0xFD8
 14980                           
 14981                           	psect	rparam
 14982  0000                     tblptru	equ	0xFF8
 14983                           tblptrh	equ	0xFF7
 14984                           tblptrl	equ	0xFF6
 14985                           tablat	equ	0xFF5
 14986                           prodh	equ	0xFF4
 14987                           prodl	equ	0xFF3
 14988                           intcon	equ	0xFF2
 14989                           postinc0	equ	0xFEE
 14990                           wreg	equ	0xFE8
 14991                           postinc1	equ	0xFE6
 14992                           postdec1	equ	0xFE5
 14993                           plusw1	equ	0xFE3
 14994                           fsr1h	equ	0xFE2
 14995                           fsr1l	equ	0xFE1
 14996                           indf2	equ	0xFDF
 14997                           postinc2	equ	0xFDE
 14998                           postdec2	equ	0xFDD
 14999                           plusw2	equ	0xFDB
 15000                           fsr2h	equ	0xFDA
 15001                           fsr2l	equ	0xFD9
 15002                           status	equ	0xFD8


Data Sizes:
    Strings     771
    Constant    65
    Data        68
    BSS         208
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    103     121
    BANK0           128      0     126
    BANK1           256    138     234
    BANK2           256      0      36
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    displayLogs$1929	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_37(CODE[5]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[2]), STR_26(CODE[2]), 
		 -> STR_25(CODE[2]), 

    displayLogs$1928	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[5]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_107(CODE[7]), STR_37(CODE[5]), STR_36(CODE[4]), STR_35(CODE[4]), 
		 -> STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[3]), STR_31(CODE[3]), 
		 -> STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[5]), STR_23(CODE[5]), 
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_106(CODE[11]), STR_105(CODE[13]), STR_104(CODE[11]), STR_103(CODE[13]), 
		 -> STR_102(CODE[11]), STR_101(CODE[8]), STR_100(CODE[15]), STR_99(CODE[16]), 
		 -> STR_98(CODE[10]), STR_97(CODE[8]), STR_96(CODE[15]), STR_95(CODE[16]), 
		 -> STR_94(CODE[10]), STR_93(CODE[16]), STR_92(CODE[16]), STR_91(CODE[17]), 
		 -> STR_90(CODE[13]), STR_89(CODE[17]), STR_88(CODE[14]), STR_87(CODE[11]), 
		 -> STR_86(CODE[11]), STR_85(CODE[15]), STR_84(CODE[15]), STR_83(CODE[10]), 
		 -> STR_82(CODE[13]), STR_81(CODE[16]), STR_80(CODE[16]), STR_79(CODE[17]), 
		 -> STR_78(CODE[17]), STR_77(CODE[8]), STR_76(CODE[15]), STR_75(CODE[15]), 
		 -> STR_74(CODE[11]), STR_73(CODE[14]), STR_72(CODE[16]), STR_71(CODE[16]), 
		 -> STR_70(CODE[11]), STR_69(CODE[14]), STR_68(CODE[16]), STR_67(CODE[16]), 
		 -> STR_66(CODE[16]), STR_65(CODE[13]), STR_64(CODE[5]), STR_63(CODE[11]), 
		 -> STR_62(CODE[15]), STR_61(CODE[17]), STR_60(CODE[18]), STR_59(CODE[15]), 
		 -> STR_58(CODE[11]), STR_57(CODE[7]), STR_56(CODE[3]), STR_55(CODE[16]), 
		 -> STR_54(CODE[8]), STR_53(CODE[16]), STR_52(CODE[15]), STR_51(CODE[6]), 
		 -> STR_50(CODE[14]), STR_49(CODE[17]), STR_48(CODE[7]), STR_47(CODE[9]), 
		 -> STR_46(CODE[17]), STR_45(CODE[11]), STR_44(CODE[17]), STR_43(CODE[14]), 
		 -> STR_42(CODE[17]), STR_41(CODE[11]), STR_40(CODE[15]), STR_39(CODE[11]), 
		 -> STR_38(CODE[8]), STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[8]), STR_2(CODE[16]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK0[12]), 

    S86$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    S86$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_37(CODE[5]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[2]), STR_26(CODE[2]), 
		 -> STR_25(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[5]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getUserInputs->___wmul
    _UART_Init->___aldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  120864
                                             97 COMRAM     6     6      0
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        142   140      2   92582
                                             93 COMRAM     4     2      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   12233
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   28141
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   16296
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   15128
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   13586
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                        8     8      0   15385
                                             40 COMRAM     8     8      0
                          _UART_Init
                      _getUserInputs
                            _lcdInst
                             _printf
                     _sortDrawerList
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      10    10      0     340
                                              0 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   11000
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       12    12      0    3201
                                              6 COMRAM    12    12      0
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2791
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _UART_Init
       ___aldiv
     _getUserInputs
       ___wmul
       _readEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      24       9       14.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     8A      EA       7       91.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     67      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     205      34        0.0%
DATA                 0      0     205       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar  6 21:26:55 2018

                 _standbyMode EFD6        __end_of_verifyKeypress BF26                  ?_displayLogs 0029  
                          l59 C484                   __CFG_CPD$ON 000000           ___wmul@multiplicand 0003  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l120 C878  
                         l114 C7B6                           l130 CAB2                           l117 C7D2  
                         l301 EA0A                           l310 EB50                           l302 EA4A  
                         l312 EB92                           l304 EA8C                           l129 CAA6  
                         l321 EC98                           l322 ECD8                           l314 EBD4  
                         l306 EACE                           l250 EFCC                           l331 EDF2  
                         l251 E55E                           l324 ED1A                           l252 E578  
                         l245 EF44                           l333 EE46                           l317 EC16  
                         l309 EB10                           l261 E5EA                           l413 C8A6  
                         l190 CCC4                           l326 ED5C                           l318 EC56  
                         l270 E6DC                           l262 E618                           l246 E526  
                         l422 C88C                           l191 CD28                           l335 EE9A  
                         l255 E596                           l247 E540                           l415 C986  
                         l343 C698                           l511 D23C                           l503 D1F6  
                         l192 CD32                           l280 E7CA                           l272 E70C  
                         l264 E648                           l256 E5B0                           l337 EEEE  
                         l329 ED9E                           l409 C5A0                           l425 C894  
                         l345 C75A                           l290 E8C4                           l282 E7F8  
                         l274 E73C                           l266 E678                           l258 E5CC  
                         l418 C884                           l346 C67E                           l187 CC24  
                         l371 C688                           l531 D354                           l523 D2FA  
                         l515 D264                           l507 D214                           l700 CAD6  
                         l284 E826                           l276 E76A                           l612 CEA2  
                         l604 CDAA                           l380 C66A                           l460 D416  
                         l701 CADE                           l293 E906                           l269 E6AE  
                         l381 C596                           l453 BF0A                           l710 CB26  
                         l702 CAE6                           l294 E946                           l286 E854  
                         l614 CDD4                           l374 C690                           l542 E112  
                         l454 BEF0                           l711 CB2E                           l703 CAEE  
                         l279 E79E                           l623 CEB4                           l535 D390  
                         l527 D322                           l519 D2B4                           l551 E2A2  
                         l455 BF06                           l463 D4C2                           l712 CB36  
                         l704 CAF6                           l616 CE40                           l560 E38C  
                         l552 E2E6                           l480 D5CA                           l720 C4A4  
                         l713 CB3E                           l705 CAFE                           l641 DC06  
                         l633 DAE2                           l297 E988                           l289 E884  
                         l609 CDB6                           l449 C89E                           l545 E1AA  
                         l473 D554                           l465 D4BC                           l721 C57A  
                         l801 F424                           l714 CB46                           l706 CB06  
                         l634 DAE2                           l298 E9C8                           l626 CF24  
                         l378 C5A8                           l562 E3A8                           l730 C4EC  
                         l722 C4AC                           l810 F768                           l707 CB0E  
                         l643 DB0C                           l379 C58E                           l547 E21A  
                         l731 C4F4                           l723 C4B4                           l708 CB16  
                         l660 DC94                           l572 E50E                           l484 D664  
                         l468 D548                           l732 C4FC                           l724 C4BC  
                         l812 F4B2                           l709 CB1E                           l645 DB6E  
                         l493 D192                           l901 C23C                           l557 E34E  
                         l549 E25E                           l733 C504                           l725 C4C4  
                         l805 F45E                           l670 DD74                           l662 DCC0  
                         l654 DC16                           l638 DAEE                           l566 E4A8  
                         l734 C50E                           l726 C4CC                           l750 D0D0  
                         l830 F7B6                           l583 C252                           l479 D5BE  
                         l719 C518                           l727 C4D4                           l743 CF80  
                         l823 F622                           l680 DE5A                           l672 DDA2  
                         l664 DCEC                           l656 DC40                           l648 DBB6  
                         l592 C262                           l488 D16A                           l728 C4DC  
                         l824 F65C                           l816 F510                           l808 F46C  
                         l577 C272                           l585 C25A                           l497 D1A6  
                         l569 E502                           l729 C4E4                           l753 D08A  
                         l841 F92E                           l817 F5E2                           l690 DF4C  
                         l682 DE8A                           l674 DDD0                           l666 DD18  
                         l658 DC6A                           l578 C248                           l746 D112  
                         l754 D058                           l738 CF74                           l842 F968  
                         l834 F81C                           l826 F770                           l818 F584  
                         l691 DFA0                           l579 C2F2                           l499 D1CE  
                         l843 FA88                           l827 FA74                           l835 F8EE  
                         l819 F5D6                           l684 DEBA                           l676 DDFE  
                         l668 DD46                           l764 D0CC                           l748 CF9E  
                         l852 FB22                           l836 F890                           l597 C26A  
                         l837 F8E2                           l686 DEEA                           l678 DE2C  
                         l854 FC5E                           l695 CB50                           l696 CABE  
                         l688 DF1A                           l848 FB8E                           l792 F3A0  
                         l697 CBCE                           l769 D126                           l849 FADE  
                         l698 CAC6                           l699 CACE                           l859 FC02  
                         l795 F3AE                           l787 F134                           l797 FB98  
                         l879 BDEC                           l799 F776                  __CFG_CPB$OFF 000000  
                         wreg 000FE8                 _mainOperation CBD8                  __CFG_LVP$OFF 000000  
         standbyMode@dietType 0130                  __CFG_WDT$OFF 000000                          l1141 D838  
                        l1125 D690                          l1150 D7C8                          l1142 D748  
                        l1134 D6E6                          l1126 D6A0                          l1151 D7C2  
                        l1143 D74C                          l1160 D8EC                          l1136 D802  
                        l1144 D774                          l1128 D6B4                          l1161 D880  
                        l1153 D7F0                          l1145 D782                          l1129 D6AE  
                        l1250 C35E                          l1170 D916                          l1154 D7DA  
                        l1146 D77E                          l1251 C352                          l1171 D93A  
                        l1172 D942                          l1148 D7B8                          l1173 D96E  
                        l1165 D8FC                          l1157 D866                          l1254 C392  
                        l1182 D99C                          l1174 D958                          l1166 D8B6  
                        l1255 C3A0                          l1247 C318                          l1183 DA54  
                        l1256 C3B6                          l1248 C330                          l1600 BEA0  
                        l1601 BE98                          l1521 BD2E                          l1185 DA3E  
                        l1610 BE0A                          l1186 D9A2                          l1611 BE02  
                        l1187 DA4E                          l1604 BEC0                          l1188 D9EC  
                        l1605 BECA                          l1614 BE22                          l1615 BE2C  
                        l1551 C062                          l1552 C070                          l1547 C02E  
                        l1548 C022                          l5220 D7C2                          l5224 D7DA  
                        l5250 D884                          l6050 C9B0                          l5332 BCD8  
                        l6028 C7DA                          l6060 C9EE                          l6062 C9F6  
                        l5264 D8BA                          l7202 C1D4                          l6084 CAAC  
                        l6068 CA0A                          l7204 C1DC                          l7214 C208  
                        l7216 C210                          l7244 BD8E                          l7192 C1A8  
                        l5924 BDCC                          l5828 E4B6                          l5684 BF06  
                        l7348 F22E                          l7462 F516                          l7446 F4BA  
                        l7358 F256                          l7552 F7C6                          l7458 F510  
                        l7564 F81C                          l6784 DBB0                          l7568 F822  
                        l7676 FB8E                          _ADON 007E10                          STR_1 FF9C  
                        STR_2 FE15                          STR_3 FF94                          STR_4 FF5F  
                        STR_5 FF69                          STR_6 FF5F                          STR_7 FFFD  
                        STR_8 FFE9                          STR_9 FFC0                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u5100 D98A                          u5120 DA5C  
                        u7000 D20A                          u5090 D976                          u7030 D232  
                        u4810 BEA4                          u7130 D2AA                          _RCIE 007CED  
                        u7220 D318                          u7060 D25A                          _RCIF 007CF5  
                        u7310 D386                          u6430 E3A6                          u4840 BE0E  
                        u6600 C032                          u7321 CD7E                          u6450 E4AC  
                        u7260 D34A                          u6460 E4B6                          u4765 BFBC  
                        u4766 BFBE                          u6630 C7AC                          u6710 CAAC  
                        u7190 D2F0                          u4775 BFFC                          u4776 BFFE  
                        u6560 C362                          u9120 CC22                          u7520 DB8A  
                        u8400 CFEA                          u7441 DAD2                          u9140 CC5E  
                        u6820 D574                          u6670 C9EE                          u7390 CDE8  
                        u6910 D188                          u9070 FAC0                          u6735 C0A4  
                        u8600 C1D4                          u9080 FB8E                          u6850 D668  
                        u8530 D0A0                          u9090 FBA0                          u8620 C208  
                        u8540 D0C8                          u8701 F016                          u6950 D1C4  
                        u8711 F028                          u6880 D160                          u8800 F3D0  
                        u8721 F03A                          u8490 D030                          u9507 F0CC  
                        u6980 D1EC                          u9517 F0F2                          u8830 F47A  
                        u8750 F256                          u8575 BF5A                          u9607 F35E  
                        u9527 F10C                          u8671 EFE0                          u8585 BD52  
                        u9617 F378                          u9537 F144                          u8681 EFF2  
                        u8586 BD54                          u9707 F5EE                          u9627 F3DC  
                        u9547 F17C                          u8691 F004                          u8780 F3BC  
                        u9717 F782                          u9637 F414                          u9557 F270  
                        u9477 C404                          u8790 F3C4                          u9807 FC46  
                        u9727 F83E                          u9647 F430                          u9567 F2A2  
                        u9487 C456                          u8880 F516                          u9817 FC6A  
                        u9737 F876                          u9657 F486                          u9577 F2BC  
                        u9497 C476                          u9907 D4AE                          u9827 FCA2  
                        u9747 F89C                          u9667 F532                          u9587 F312  
                        u8980 F822                          _UART 0074                          u9917 D4CE  
                        u9837 CF40                          u9757 F8D4                          u9677 F56A  
                        u9597 F32C                          u9927 D506                          u9847 D0E4  
                        u9767 F8FA                          u9687 F590                          u9937 D520  
                        u9857 D3CC                          u9777 FBCE                          u9697 F5C8  
                        u9947 D5D4                          u9867 D3FE                          u9787 FBF4  
                        u9957 D5EC                          u9877 D430                          u9797 FC0E  
                        u9967 D60C                          u9887 D462                          u9977 D624  
                        u9897 D47C                          u9987 D656                          u9997 E0BA  
                        _TRMT 007D61                          _TXIE 007CEC                          _TXIF 007CF4  
       __end_of_decode_drawer C584               ??_getUserInputs 0007           standbyMode@foodType 0140  
           viewLogs@logNumber 005C                          _main C3C8                          _keys FCBB  
             food_press@F3117 0068                          _uart 00D8                          fsr1h 000FE2  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 005D           standbyMode@keypress 016B                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM BDCA               diet_press@F3132 00C0  
             ?_verifyKeypress 0001              __end_of_LCD_LEFT FCF7           standbyMode@whichKey 0169  
             food_press@count 0035               food_press@tally 002F         I2C_Master_Read@ackBit 0002  
            ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001               __end_of___aldiv C3C8            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FFEC  
                       STR_11 FFF4                         STR_20 FFC2                         STR_12 FFBF  
                       STR_21 FFBD                         STR_13 FFEB                         STR_22 FFC7  
                       STR_14 FFF3                         STR_30 FFFA                         STR_23 FFD1  
                       STR_15 FFE7                         STR_31 FFE0                         STR_40 FE43  
                       STR_24 FFCC                         STR_16 FFEF                         STR_32 FFF7  
                       STR_41 FF14                         STR_17 FFC3                         STR_33 FFB9  
                       STR_25 FFBB                         STR_50 FEB9                         STR_42 FD63  
                       STR_18 FFBE                         STR_34 FFE3                         STR_26 FFE5  
                       STR_51 FFB2                         STR_43 FEB9                         STR_19 FFC8  
                       STR_35 FFDF                         STR_27 FFFB                         STR_52 FE61  
                       STR_44 FD74                         STR_60 FCFC                         STR_36 FFDB  
                       STR_28 FFBA                         STR_45 FF14                         STR_53 FDB5  
                       STR_61 FD52                         STR_37 FFB8                         STR_29 FFE4  
                       STR_38 FF8C                         STR_54 FF84                         STR_70 FF2A  
                       STR_62 FE34                         STR_46 FD41                         STR_47 FF73  
                       STR_63 FF35                         STR_39 FF14                         STR_71 FDD5  
                       STR_55 FDC5                         STR_72 FDD5                         STR_56 FE5E  
                       STR_64 FFD6                         STR_48 FFAB                         STR_80 FDF5  
                       STR_57 FE5A                         STR_49 FD63                         STR_65 FEEF  
                       STR_73 FEAB                         STR_81 FD85                         STR_74 FF2A  
                       STR_58 FE56                         STR_82 FEFC                         STR_90 FEE2  
                       STR_66 FE05                         STR_83 FF4B                         STR_59 FE52  
                       STR_75 FE25                         STR_67 FDA5                         STR_91 FD1F  
                       STR_68 FDA5                         STR_76 FE25                         STR_84 FE70  
                       STR_92 FDE5                         STR_93 FE05                         STR_77 FF9C  
                       STR_69 FE9D                         STR_85 FE7F                         STR_78 FD63  
                       STR_94 FF55                         STR_86 FF40                         STR_87 FF09  
                       STR_95 FD95                         STR_79 FD30                         STR_88 FEC7  
                       STR_96 FE8E                         STR_89 FD30                         STR_97 FF7C  
                       STR_98 FF55                         STR_99 FD95               __end_of___lldiv C082  
                       u10007 E104                         u10017 E15A             viewLogs@returnVal 0058  
                       u10107 E35E                         u10027 E19C                         u10117 E37E  
                       u10037 E1BA                         u10207 DA84                         u10127 E3B4  
                       u10047 E20C                         u10217 DB20                         u10137 E49A  
                       u10057 E250                         u10307 BE70                         u10227 DF58  
                       u10147 E4C2                         u10067 E294                         u10317 BCCE  
                       u10237 DF8A                         u10157 E4F4                         u10077 E2D8  
                       u10327 BFA4                         u10247 CC6A                         u10167 CD40  
                       u10087 E2F6                         u10337 BFAE                         u10257 CCB6  
                       u10177 CE54                         u10097 E340                         u10347 BFE4  
                       u10267 CCD0                         u10187 CEE4                         u10357 BFEE  
                       u10277 CD1C                         u10197 CF16                         u10287 BCF6  
                       u10297 BE3C               __end_of___lwdiv BED4               __end_of___lwmod BE36  
                       _RCREG 000FAE                         _SPBRG 000FAF                         _PORTB 000F81  
          sortDrawerList@temp 0005                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
              ?_mainOperation 0001                         _TXREG 000FAD                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
             __end_of_getFlat C674                 __CFG_WRT3$OFF 000000               diet_press@count 0033  
             __end_of_lcdInst BCD6               __end_of_getLong C990                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000            __size_of_UART_Init 0084                   initEEPROM@i 0003  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD BE82                __CFG_EBTRB$OFF 000000          __size_of_decode_diet 0124  
             __end_of_dpowers FCE7            printFoodInput@food 0001                  displayLogs@i 0046  
                displayLogs@n 0050               __end_of_isdigit BD36                         _input FCCC  
                       _rowUp 0079                         _putch BCEA                         tablat 000FF5  
        standbyMode@logNumber 017F             _LCDinterruptState 0072                         plusw1 000FE3  
                       plusw2 000FDB                         status 000FD8   I2C_Master_Read@receivedByte 0003  
        standbyMode@keypress1 0176                __CFG_PBADEN$ON 000000               standbyMode@diet 0180  
             standbyMode@flat 016E               standbyMode@food 0184               standbyMode@time 0160  
             standbyMode@zero 0179               __initialization C106                  __end_of_main C4A2  
                __end_of_keys FCCC                _sortDrawerList C990                  standbyMode@i 0188  
                standbyMode@n 017B                  standbyMode@x 017D              ??_printFoodInput 0003  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FCF8              food_press@drawer 002B  
                      ??_main 0062                 __activetblptr 000003           food_press@backCheck 0031  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0002                  ?_shiftEEPROM 0001  
          ??_I2C_Master_Start 0002                        _ADCON0 000FC2                        _ADCON1 000FC1  
          ??_I2C_Master_Write 0004         standbyMode@flatPieces 0110                        STR_100 FE8E  
                      STR_101 FF7C                        STR_102 FF1F                        STR_103 FED5  
                      STR_104 FF1F                        STR_105 FED5                        STR_106 FF1F  
                      _ADRESH 000FC4                        STR_107 FFA4                        STR_108 FD0E  
                      _ADRESL 000FC3                        _EEDATA 000FA8                        _EECON2 000FA7  
                      ?_putch 0001       mainOperation@nextDrawer 002B                        _SSPADD 000FC8  
                      _TRISC6 007CA6                        _TRISC7 007CA7                        _SSPBUF 000FC9  
            diet_press@drawer 0029     standbyMode@storedFoodType 0174        __end_of_sortDrawerList CAB4  
              __CFG_XINST$OFF 000000              __end_of_getRound C764             __end_of_UART_Init C106  
                   ??___aldiv 0009                        ___wmul BDA4                __CFG_STVREN$ON 000000  
                   ??___lldiv 0009                     ??___lwdiv 0005                     ??___lwmod 000C  
      decode_diet@returnValue 0005                        clear_0 C16C                        clear_1 C178  
                      clear_2 C184                        _inputs 0200                _firstIteration 0070  
                   ??_getFlat 0003                     ??_lcdInst 0003                        _printf D686  
                   ??_getLong 0003          __size_of_displayLogs 0570               ??_mainOperation 0029  
         food_press@foodTable 0038                     ??_initLCD 0004               get_digits@count 0005  
                __pdataCOMRAM 0074                     ??_isdigit 0001                  __mediumconst FCBA  
            __end_of_viewLogs D686                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              standbyMode@F3152 01DA              standbyMode@F3160 019A  
            standbyMode@F3154 01CA              standbyMode@F3162 018A              standbyMode@F3156 01BA  
            standbyMode@F3158 01AA           decode_diet@dietType 0001         standbyMode@longPieces 0120  
                  __accesstop 0080       __end_of__initialization C18A          which_drawer@keypress 0034  
               ___rparam_used 000001              standbyMode@round 016C               writeEEPROM@data 0001  
             viewLogs@logView 005A        standbyMode@decodedDiet 0172               ?_sortDrawerList 0001  
                ?_standbyMode 005E          __end_of_happynewyear FCF6                __pcstackCOMRAM 0001  
                __pidataBANK0 BCFE                  __pidataBANK2 BD5A                 __end_of_input FCDD  
               __end_of_putch BCFE            __size_of_lcdNibble 007E                 check_food@sum 0001  
           food_press@dietSum 0029             food_press@isValid 0033                       ??_putch 0003  
                  __pbssBANK0 0080                    __pbssBANK1 018A                    _check_food E51A  
            ??_verifyKeypress 0003                  ?_writeEEPROM 0001                       ?___wmul 0001  
                  _diet_press DA78       displayLogs@drawerNumber 0044                       ?_printf 000D  
           _sortedDrawerTable 00A0                    _arr_dataRX 00C8                    _get_digits C23E  
                   ?_getRound 0001                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7          __size_of_shiftEEPROM 00AE                    _columnLeft 0077  
                  _foodInputs 00E4                    _initEEPROM BD7E                    _readEEPROM BCD6  
      standbyMode@drawerCount 0186         __end_of_getUserInputs C87A                    _food_press CD34  
           __end_of_lcdNibble C000                       __Hparam 0000                       __Lparam 0000  
                   ?_viewLogs 0052                       ___aldiv C2FC      displayLogs@operationTime 0042  
                     ___lldiv C000               __size_of___wmul 0026                       ___lwdiv BE82  
                     ___lwmod BDF4                       __pcinit C106                       __ramtop 1000  
                     _getFlat C584                       _lcdInst BCC2                       _getLong C87A  
                     __ptext0 C3C8                       __ptext1 EFD6                       __ptext2 CF2E  
                     __ptext3 C4A2                       __ptext4 D39A                       __ptext5 BED4  
                     __ptext6 DFAA                       __ptext7 C190                       __ptext8 D144  
                     __ptext9 C674        __size_of_decode_drawer 00E2               __size_of_printf 03F2  
                     _initLCD BE36             __end_of_hexpowers FCEF                       _dpowers FCDD  
               ??_decode_diet 0003         which_drawer@backCheck 0030                       _isdigit BD18  
              displayLogs@day 0031              ___aldiv@dividend 0001                     _LCD_RIGHT FCF7  
    __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024      __size_of_I2C_Master_Wait 0012  
        displayLogs@logNumber 0029      __size_of_I2C_Master_Stop 0008                       _rowDown 0078  
                  ??_getRound 0003          end_of_initialization C18A          displayLogs@keypress3 0041  
             which_drawer@sum 002E         __end_of_LCD_SIZE_HORZ FCFA                   ?_check_food 0001  
       __end_of_LCD_SIZE_VERT FCF9             main@operationMode 0064     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                   _RCSTAbits 000FAB                       printf@c 0028                       printf@f 000D  
            ___aldiv@quotient 000B                       postdec1 000FE5                       postdec2 000FDD  
                  ??_viewLogs 0054                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE          __size_of_standbyMode 0CE4                   ?_diet_press 0029  
                   _UART_Init C082                     _PORTBbits 000F81                 ?_which_drawer 0029  
         diet_press@backCheck 0031                   ?_get_digits 0001                     _TRISCbits 000F94  
            viewLogs@checkLog 0056                  _happynewyear FCEF             readEEPROM@address 0001  
         __end_of_decode_diet CBD8             standbyMode@drawer 0182                   ?_initEEPROM 0001  
            ??_sortDrawerList 0001                 _decode_drawer C4A2                   ?_readEEPROM 0001  
                 printf@width 0026                     _TXSTAbits 000FAC                   ?_food_press 0029  
         diet_press@dietTable 0038               main@checkEEPROM 0066                 ??_displayLogs 002B  
        __size_of_writeEEPROM 002A                __end_of___wmul BDCA                    ?_UART_Init 000F  
               __pidataCOMRAM BC90        standbyMode@validDrawer 0177           __size_of_check_food 0ABC  
              ??_which_drawer 002B                __end_of_printf DA78         __end_of_mainOperation CD34  
         start_initialization C106                standbyMode@lng 0170       __size_of_printFoodInput 0256  
              ?_decode_drawer 0001           __size_of_diet_press 0532             ??_I2C_Master_Init 0012  
           ??_I2C_Master_Read 0002             ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002  
standbyMode@drawerInformation 0150           __size_of_get_digits 00BE                      ??___wmul 0005  
    I2C_Master_Init@clockFreq 000E                   __pdataBANK0 00E4                   __pdataBANK2 0200  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0017           __size_of_initEEPROM 0026  
          food_press@keypress 0037           __size_of_readEEPROM 0014           __end_of_displayLogs E51A  
         __size_of_food_press 01FA                   __pbssCOMRAM 0068                   _decode_diet CAB4  
               __pcstackBANK1 0100               sortDrawerList@i 0009               sortDrawerList@j 0007  
                _isdigit$1519 0002           decode_drawer@drawer 0001             __size_of_getRound 00F0  
      standbyMode@roundPieces 0100              _I2C_Master_Start BC96              _I2C_Master_Write BCA6  
              mainOperation@i 002F              ___lwdiv@dividend 0001                     _dietTable 0090  
           __CFG_CCP2MX$PORTC 000000            _UARTinterruptState 0073                 __pmediumconst FCBA  
               UART_Init@baud 000F                     _lcdNibble BF82                      ?___aldiv 0001  
                    ?___lldiv 0001            getUserInputs@count 000B                      ?___lwdiv 0001  
                    ?___lwmod 0008                   ??_UART_Init 0013             __size_of_viewLogs 02EC  
                    ?_getFlat 0001                      ?_lcdInst 0001                      ?_getLong 0001  
                   _foodTable 0080                      ?_initLCD 0001                      ?_isdigit 0001  
         check_food@foodInput 0003                 ??_shiftEEPROM 0003           displayLogs@dietType 003D  
                   _hexpowers FCE7              ___lwdiv@quotient 0005               ??_decode_drawer 0003  
              __size_of_putch 0014           displayLogs@foodType 003F                  ??_check_food 0005  
                    _LCD_LEFT FCF6              displayLogs@month 002F               ___aldiv@divisor 0005  
             ___aldiv@counter 0009                ___wmul@product 0005                      _LATCbits 000F8B  
                    _LATDbits 000F8C          __end_of_which_drawer D144              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001                  ??_diet_press 002B                  shiftEEPROM@i 0006  
                 _displayLogs DFAA       __size_of_verifyKeypress 0052                   _drawerTable 00B0  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0001            __end_of_check_food EFD6  
               lcdNibble@data 0002                    printf@flag 0025                   _columnRight 0076  
               lcdNibble@temp 0001                    printf@prec 001C                  ??_get_digits 0003  
      __size_of_getUserInputs 0116                _printFoodInput D144                _LCD_HORZ_LIMIT FCFB  
               diet_press@sum 0035                     copy_data0 C11A                     copy_data1 C13A  
                   copy_data2 C15A             which_drawer@count 0032                  ??_initEEPROM 0003  
         __end_of_shiftEEPROM C23E            __end_of_diet_press DFAA                  ??_readEEPROM 0001  
                ??_food_press 002D            diet_press@keypress 0037                    _EECON1bits 000FA6  
                    __Hrparam 0000                 ??_standbyMode 0060                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits C2FC            diet_press@previous 002D  
            __size_of___aldiv 00CC              __size_of___lldiv 0082         displayLogs@flatPieces 0035  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_getFlat 00F0  
            __size_of_lcdInst 0014              __size_of_getLong 0116        __end_of_printFoodInput D39A  
      getUserInputs@logNumber 0009            __end_of_initEEPROM BDA4               _I2C_Master_Init BF26  
             _I2C_Master_Read BD36              __size_of_initLCD 004C               _I2C_Master_Wait BCB0  
          __end_of_readEEPROM BCEA               _I2C_Master_Stop BC9E        __end_of_LCD_HORZ_LIMIT FCFC  
            __size_of_isdigit 001E            __end_of_food_press CF2E               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007             getUserInputs@data 000F                      __ptext10 C87A  
                    __ptext11 C584                      __ptext20 BD36                      __ptext12 CD34  
                    __ptext21 BCB0                      __ptext13 C23E                      __ptext30 BE82  
                    __ptext22 BF26                      __ptext14 E51A                      __ptext31 C764  
                    __ptext23 C000                      __ptext15 DA78                      __ptext40 BDCA  
                    __ptext32 BCD6                      __ptext24 CBD8                      __ptext16 CAB4  
                    __ptext33 BDA4                      __ptext25 C990                      __ptext17 BCA6  
                    __ptext34 C082                      __ptext26 D686                      __ptext18 BC9E  
                    __ptext35 C2FC                      __ptext27 BCEA                      __ptext19 BC96  
                    __ptext36 BE36                      __ptext28 BD18                      __ptext37 BCC2  
                    __ptext29 BDF4                      __ptext38 BF82                      __ptext39 BD7E  
                    _getRound C674                _LCD_VERT_LIMIT FCFA                 __size_of_main 00DA  
             displayLogs@year 002D                 _getUserInputs C764            displayLogs@minutes 0039  
          displayLogs@seconds 003B                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 0048  
    displayLogs@markedDrawer2 004A      displayLogs@markedDrawer3 004C      displayLogs@markedDrawer4 004E  
                 ??_lcdNibble 0001                      _viewLogs D39A               verifyKeypress@i 0008  
          getLong@returnValue 0005                     printf@idx 001B                     printf@len 0021  
                   printf@val 0023           __end_of_standbyMode FCBA   I2C_Master_Write@byteToWrite 0002  
    decode_drawer@returnValue 0005         displayLogs@longPieces 0037               ?_printFoodInput 0001  
            which_drawer@rand 002C                     putch@data 0003      __end_of_I2C_Master_Start BC9E  
    __end_of_I2C_Master_Write BCB0                    _INTCONbits 000FF2                  ?_decode_diet 0001  
      __end_of_LCD_VERT_LIMIT FCFB                   _shiftEEPROM C190                      isdigit@c 0003  
       __size_of_which_drawer 0216                   getFlat@code 0001     standbyMode@firstIteration 0167  
               _LCD_SIZE_HORZ FCF9              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FCF8  
            ___lldiv@dividend 0001       verifyKeypress@logNumber 0005                ?_getUserInputs 0001  
      __size_of_mainOperation 015C            getFlat@returnValue 0005        displayLogs@roundPieces 0033  
                    printf@ap 001F                      printf@cp 001D       __size_of_sortDrawerList 0124  
                 diet_press@i 002F       __end_of_I2C_Master_Init BF82       __end_of_I2C_Master_Read BD5A  
     __end_of_I2C_Master_Wait BCC2       __end_of_I2C_Master_Stop BCA6                   lcdInst@data 0003  
             shiftEEPROM@temp 0004                _verifyKeypress BED4           getRound@returnValue 0005  
                 getLong@code 0001           __end_of_writeEEPROM BDF4       verifyKeypress@returnVal 0006  
            ___lldiv@quotient 0009                  _which_drawer CF2E               ___lwmod@divisor 000A  
             ___lwmod@counter 000C                  ___aldiv@sign 000A        verifyKeypress@keypress 0001  
                 _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5                getUserInputs@i 0011  
              getUserInputs@n 000D                  getRound@code 0001         check_food@returnValue 0007  
  mainOperation@currentDrawer 002D  
