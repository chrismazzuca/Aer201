

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 18 22:50:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	mediumconst
    64  00FDA6                     __pmediumconst:
    65                           	opt stack 0
    66  00FDA6  00                 	db	0
    67  00FDA7                     _keys:
    68                           	opt stack 0
    69  00FDA7  31                 	db	49
    70  00FDA8  32                 	db	50
    71  00FDA9  33                 	db	51
    72  00FDAA  41                 	db	65
    73  00FDAB  34                 	db	52
    74  00FDAC  35                 	db	53
    75  00FDAD  36                 	db	54
    76  00FDAE  42                 	db	66
    77  00FDAF  37                 	db	55
    78  00FDB0  38                 	db	56
    79  00FDB1  39                 	db	57
    80  00FDB2  43                 	db	67
    81  00FDB3  2A                 	db	42
    82  00FDB4  30                 	db	48
    83  00FDB5  23                 	db	35
    84  00FDB6  44                 	db	68
    85  00FDB7  00                 	db	0
    86  00FDB8                     __end_of_keys:
    87                           	opt stack 0
    88  00FDB8                     _input:
    89                           	opt stack 0
    90  00FDB8  31                 	db	49
    91  00FDB9  32                 	db	50
    92  00FDBA  33                 	db	51
    93  00FDBB  52                 	db	82
    94  00FDBC  34                 	db	52
    95  00FDBD  35                 	db	53
    96  00FDBE  36                 	db	54
    97  00FDBF  46                 	db	70
    98  00FDC0  37                 	db	55
    99  00FDC1  38                 	db	56
   100  00FDC2  39                 	db	57
   101  00FDC3  4C                 	db	76
   102  00FDC4  2A                 	db	42
   103  00FDC5  30                 	db	48
   104  00FDC6  23                 	db	35
   105  00FDC7  44                 	db	68
   106  00FDC8  00                 	db	0
   107  00FDC9                     __end_of_input:
   108                           	opt stack 0
   109  00FDC9                     _dpowers:
   110                           	opt stack 0
   111  00FDC9  0001               	dw	1
   112  00FDCB  000A               	dw	10
   113  00FDCD  0064               	dw	100
   114  00FDCF  03E8               	dw	1000
   115  00FDD1  2710               	dw	10000
   116  00FDD3                     __end_of_dpowers:
   117                           	opt stack 0
   118  00FDD3                     _LCD_LEFT:
   119                           	opt stack 0
   120  00FDD3  00                 	db	0
   121  00FDD4                     __end_of_LCD_LEFT:
   122                           	opt stack 0
   123  00FDD4                     _LCD_RIGHT:
   124                           	opt stack 0
   125  00FDD4  01                 	db	1
   126  00FDD5                     __end_of_LCD_RIGHT:
   127                           	opt stack 0
   128  00FDD5                     _LCD_SIZE_VERT:
   129                           	opt stack 0
   130  00FDD5  02                 	db	2
   131  00FDD6                     __end_of_LCD_SIZE_VERT:
   132                           	opt stack 0
   133  00FDD6                     _LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  00FDD6  10                 	db	16
   136  00FDD7                     __end_of_LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  00FDD7                     _LCD_VERT_LIMIT:
   139                           	opt stack 0
   140  00FDD7  02                 	db	2
   141  00FDD8                     __end_of_LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  00FDD8                     _LCD_HORZ_LIMIT:
   144                           	opt stack 0
   145  00FDD8  28                 	db	40
   146  00FDD9                     __end_of_LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  0000                     _PORTB	set	3969
   149  0000                     _PORTBbits	set	3969
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATDbits	set	3980
   152  0000                     _ADCON1	set	4033
   153  0000                     _ADCON0	set	4034
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISA	set	3986
   159  0000                     _LATE	set	3981
   160  0000                     _LATD	set	3980
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  00FDD9                     STR_12:
   165  00FDD9  52                 	db	82	;'R'
   166  00FDDA  65                 	db	101	;'e'
   167  00FDDB  6D                 	db	109	;'m'
   168  00FDDC  61                 	db	97	;'a'
   169  00FDDD  69                 	db	105	;'i'
   170  00FDDE  6E                 	db	110	;'n'
   171  00FDDF  69                 	db	105	;'i'
   172  00FDE0  6E                 	db	110	;'n'
   173  00FDE1  67                 	db	103	;'g'
   174  00FDE2  20                 	db	32
   175  00FDE3  70                 	db	112	;'p'
   176  00FDE4  69                 	db	105	;'i'
   177  00FDE5  65                 	db	101	;'e'
   178  00FDE6  63                 	db	99	;'c'
   179  00FDE7  65                 	db	101	;'e'
   180  00FDE8  73                 	db	115	;'s'
   181  00FDE9  3A                 	db	58	;':'
   182  00FDEA  00                 	db	0
   183  00FDEB                     STR_39:
   184  00FDEB  64                 	db	100	;'d'
   185  00FDEC  72                 	db	114	;'r'
   186  00FDED  61                 	db	97	;'a'
   187  00FDEE  77                 	db	119	;'w'
   188  00FDEF  65                 	db	101	;'e'
   189  00FDF0  72                 	db	114	;'r'
   190  00FDF1  73                 	db	115	;'s'
   191  00FDF2  20                 	db	32
   192  00FDF3  72                 	db	114	;'r'
   193  00FDF4  65                 	db	101	;'e'
   194  00FDF5  61                 	db	97	;'a'
   195  00FDF6  63                 	db	99	;'c'
   196  00FDF7  68                 	db	104	;'h'
   197  00FDF8  65                 	db	101	;'e'
   198  00FDF9  64                 	db	100	;'d'
   199  00FDFA  21                 	db	33
   200  00FDFB  00                 	db	0
   201  00FDFC                     STR_31:
   202  00FDFC  62                 	db	98	;'b'
   203  00FDFD  65                 	db	101	;'e'
   204  00FDFE  67                 	db	103	;'g'
   205  00FDFF  69                 	db	105	;'i'
   206  00FE00  6E                 	db	110	;'n'
   207  00FE01  20                 	db	32
   208  00FE02  6F                 	db	111	;'o'
   209  00FE03  70                 	db	112	;'p'
   210  00FE04  65                 	db	101	;'e'
   211  00FE05  72                 	db	114	;'r'
   212  00FE06  61                 	db	97	;'a'
   213  00FE07  74                 	db	116	;'t'
   214  00FE08  69                 	db	105	;'i'
   215  00FE09  6F                 	db	111	;'o'
   216  00FE0A  6E                 	db	110	;'n'
   217  00FE0B  2E                 	db	46
   218  00FE0C  00                 	db	0
   219  00FE0D                     STR_3:
   220  00FE0D  50                 	db	80	;'P'
   221  00FE0E  6C                 	db	108	;'l'
   222  00FE0F  65                 	db	101	;'e'
   223  00FE10  61                 	db	97	;'a'
   224  00FE11  73                 	db	115	;'s'
   225  00FE12  65                 	db	101	;'e'
   226  00FE13  20                 	db	32
   227  00FE14  69                 	db	105	;'i'
   228  00FE15  6E                 	db	110	;'n'
   229  00FE16  70                 	db	112	;'p'
   230  00FE17  75                 	db	117	;'u'
   231  00FE18  74                 	db	116	;'t'
   232  00FE19  20                 	db	32
   233  00FE1A  6C                 	db	108	;'l'
   234  00FE1B  6F                 	db	111	;'o'
   235  00FE1C  67                 	db	103	;'g'
   236  00FE1D  00                 	db	0
   237  00FE1E                     STR_6:
   238  00FE1E  50                 	db	80	;'P'
   239  00FE1F  72                 	db	114	;'r'
   240  00FE20  65                 	db	101	;'e'
   241  00FE21  73                 	db	115	;'s'
   242  00FE22  73                 	db	115	;'s'
   243  00FE23  20                 	db	32
   244  00FE24  61                 	db	97	;'a'
   245  00FE25  6E                 	db	110	;'n'
   246  00FE26  79                 	db	121	;'y'
   247  00FE27  20                 	db	32
   248  00FE28  6B                 	db	107	;'k'
   249  00FE29  65                 	db	101	;'e'
   250  00FE2A  79                 	db	121	;'y'
   251  00FE2B  20                 	db	32
   252  00FE2C  74                 	db	116	;'t'
   253  00FE2D  6F                 	db	111	;'o'
   254  00FE2E  00                 	db	0
   255  00FE2F                     STR_33:
   256  00FE2F  63                 	db	99	;'c'
   257  00FE30  61                 	db	97	;'a'
   258  00FE31  62                 	db	98	;'b'
   259  00FE32  69                 	db	105	;'i'
   260  00FE33  6E                 	db	110	;'n'
   261  00FE34  65                 	db	101	;'e'
   262  00FE35  74                 	db	116	;'t'
   263  00FE36  20                 	db	32
   264  00FE37  73                 	db	115	;'s'
   265  00FE38  6F                 	db	111	;'o'
   266  00FE39  72                 	db	114	;'r'
   267  00FE3A  74                 	db	116	;'t'
   268  00FE3B  65                 	db	101	;'e'
   269  00FE3C  72                 	db	114	;'r'
   270  00FE3D  21                 	db	33
   271  00FE3E  00                 	db	0
   272  00FE3F                     STR_43:
   273  00FE3F  6E                 	db	110	;'n'
   274  00FE40  75                 	db	117	;'u'
   275  00FE41  6D                 	db	109	;'m'
   276  00FE42  62                 	db	98	;'b'
   277  00FE43  65                 	db	101	;'e'
   278  00FE44  72                 	db	114	;'r'
   279  00FE45  20                 	db	32
   280  00FE46  70                 	db	112	;'p'
   281  00FE47  72                 	db	114	;'r'
   282  00FE48  65                 	db	101	;'e'
   283  00FE49  73                 	db	115	;'s'
   284  00FE4A  73                 	db	115	;'s'
   285  00FE4B  65                 	db	101	;'e'
   286  00FE4C  64                 	db	100	;'d'
   287  00FE4D  2E                 	db	46
   288  00FE4E  00                 	db	0
   289  00FE4F                     STR_13:
   290  00FE4F  52                 	db	82	;'R'
   291  00FE50  3A                 	db	58	;':'
   292  00FE51  33                 	db	51	;'3'
   293  00FE52  20                 	db	32
   294  00FE53  20                 	db	32
   295  00FE54  46                 	db	70	;'F'
   296  00FE55  3A                 	db	58	;':'
   297  00FE56  31                 	db	49	;'1'
   298  00FE57  32                 	db	50	;'2'
   299  00FE58  20                 	db	32
   300  00FE59  20                 	db	32
   301  00FE5A  4C                 	db	76	;'L'
   302  00FE5B  3A                 	db	58	;':'
   303  00FE5C  31                 	db	49	;'1'
   304  00FE5D  30                 	db	48	;'0'
   305  00FE5E  00                 	db	0
   306  00FE5F                     STR_19:
   307  00FE5F  44                 	db	68	;'D'
   308  00FE60  72                 	db	114	;'r'
   309  00FE61  61                 	db	97	;'a'
   310  00FE62  77                 	db	119	;'w'
   311  00FE63  65                 	db	101	;'e'
   312  00FE64  72                 	db	114	;'r'
   313  00FE65  20                 	db	32
   314  00FE66  25                 	db	37
   315  00FE67  69                 	db	105	;'i'
   316  00FE68  20                 	db	32
   317  00FE69  66                 	db	102	;'f'
   318  00FE6A  6F                 	db	111	;'o'
   319  00FE6B  6F                 	db	111	;'o'
   320  00FE6C  64                 	db	100	;'d'
   321  00FE6D  3A                 	db	58	;':'
   322  00FE6E  00                 	db	0
   323  00FE6F                     STR_8:
   324  00FE6F  4F                 	db	79	;'O'
   325  00FE70  70                 	db	112	;'p'
   326  00FE71  65                 	db	101	;'e'
   327  00FE72  72                 	db	114	;'r'
   328  00FE73  61                 	db	97	;'a'
   329  00FE74  74                 	db	116	;'t'
   330  00FE75  69                 	db	105	;'i'
   331  00FE76  6F                 	db	111	;'o'
   332  00FE77  6E                 	db	110	;'n'
   333  00FE78  20                 	db	32
   334  00FE79  74                 	db	116	;'t'
   335  00FE7A  69                 	db	105	;'i'
   336  00FE7B  6D                 	db	109	;'m'
   337  00FE7C  65                 	db	101	;'e'
   338  00FE7D  3A                 	db	58	;':'
   339  00FE7E  00                 	db	0
   340  00FE7F                     STR_10:
   341  00FE7F  4D                 	db	77	;'M'
   342  00FE80  61                 	db	97	;'a'
   343  00FE81  72                 	db	114	;'r'
   344  00FE82  6B                 	db	107	;'k'
   345  00FE83  65                 	db	101	;'e'
   346  00FE84  64                 	db	100	;'d'
   347  00FE85  20                 	db	32
   348  00FE86  64                 	db	100	;'d'
   349  00FE87  72                 	db	114	;'r'
   350  00FE88  61                 	db	97	;'a'
   351  00FE89  77                 	db	119	;'w'
   352  00FE8A  65                 	db	101	;'e'
   353  00FE8B  72                 	db	114	;'r'
   354  00FE8C  73                 	db	115	;'s'
   355  00FE8D  3A                 	db	58	;':'
   356  00FE8E  00                 	db	0
   357  00FE8F                     STR_23:
   358  00FE8F  44                 	db	68	;'D'
   359  00FE90  72                 	db	114	;'r'
   360  00FE91  61                 	db	97	;'a'
   361  00FE92  77                 	db	119	;'w'
   362  00FE93  65                 	db	101	;'e'
   363  00FE94  72                 	db	114	;'r'
   364  00FE95  20                 	db	32
   365  00FE96  25                 	db	37
   366  00FE97  69                 	db	105	;'i'
   367  00FE98  20                 	db	32
   368  00FE99  64                 	db	100	;'d'
   369  00FE9A  69                 	db	105	;'i'
   370  00FE9B  65                 	db	101	;'e'
   371  00FE9C  74                 	db	116	;'t'
   372  00FE9D  3A                 	db	58	;':'
   373  00FE9E  00                 	db	0
   374  00FE9F                     STR_14:
   375  00FE9F  44                 	db	68	;'D'
   376  00FEA0  72                 	db	114	;'r'
   377  00FEA1  61                 	db	97	;'a'
   378  00FEA2  77                 	db	119	;'w'
   379  00FEA3  65                 	db	101	;'e'
   380  00FEA4  72                 	db	114	;'r'
   381  00FEA5  20                 	db	32
   382  00FEA6  53                 	db	83	;'S'
   383  00FEA7  75                 	db	117	;'u'
   384  00FEA8  6D                 	db	109	;'m'
   385  00FEA9  6D                 	db	109	;'m'
   386  00FEAA  61                 	db	97	;'a'
   387  00FEAB  72                 	db	114	;'r'
   388  00FEAC  79                 	db	121	;'y'
   389  00FEAD  3A                 	db	58	;':'
   390  00FEAE  00                 	db	0
   391  00FEAF                     STR_40:
   392  00FEAF  41                 	db	65	;'A'
   393  00FEB0  6E                 	db	110	;'n'
   394  00FEB1  6F                 	db	111	;'o'
   395  00FEB2  74                 	db	116	;'t'
   396  00FEB3  68                 	db	104	;'h'
   397  00FEB4  65                 	db	101	;'e'
   398  00FEB5  72                 	db	114	;'r'
   399  00FEB6  20                 	db	32
   400  00FEB7  64                 	db	100	;'d'
   401  00FEB8  72                 	db	114	;'r'
   402  00FEB9  61                 	db	97	;'a'
   403  00FEBA  77                 	db	119	;'w'
   404  00FEBB  65                 	db	101	;'e'
   405  00FEBC  72                 	db	114	;'r'
   406  00FEBD  3F                 	db	63	;'?'
   407  00FEBE  00                 	db	0
   408  00FEBF                     STR_18:
   409  00FEBF  23                 	db	35
   410  00FEC0  20                 	db	32
   411  00FEC1  3D                 	db	61	;'='
   412  00FEC2  20                 	db	32
   413  00FEC3  59                 	db	89	;'Y'
   414  00FEC4  65                 	db	101	;'e'
   415  00FEC5  73                 	db	115	;'s'
   416  00FEC6  2C                 	db	44
   417  00FEC7  20                 	db	32
   418  00FEC8  44                 	db	68	;'D'
   419  00FEC9  20                 	db	32
   420  00FECA  3D                 	db	61	;'='
   421  00FECB  20                 	db	32
   422  00FECC  4E                 	db	78	;'N'
   423  00FECD  6F                 	db	111	;'o'
   424  00FECE  00                 	db	0
   425  00FECF                     STR_32:
   426  00FECF  57                 	db	87	;'W'
   427  00FED0  65                 	db	101	;'e'
   428  00FED1  6C                 	db	108	;'l'
   429  00FED2  63                 	db	99	;'c'
   430  00FED3  6F                 	db	111	;'o'
   431  00FED4  6D                 	db	109	;'m'
   432  00FED5  65                 	db	101	;'e'
   433  00FED6  20                 	db	32
   434  00FED7  74                 	db	116	;'t'
   435  00FED8  6F                 	db	111	;'o'
   436  00FED9  20                 	db	32
   437  00FEDA  79                 	db	121	;'y'
   438  00FEDB  6F                 	db	111	;'o'
   439  00FEDC  75                 	db	117	;'u'
   440  00FEDD  72                 	db	114	;'r'
   441  00FEDE  00                 	db	0
   442  00FEDF                     STR_41:
   443  00FEDF  23                 	db	35
   444  00FEE0  20                 	db	32
   445  00FEE1  3D                 	db	61	;'='
   446  00FEE2  20                 	db	32
   447  00FEE3  4E                 	db	78	;'N'
   448  00FEE4  6F                 	db	111	;'o'
   449  00FEE5  2C                 	db	44
   450  00FEE6  20                 	db	32
   451  00FEE7  44                 	db	68	;'D'
   452  00FEE8  20                 	db	32
   453  00FEE9  3D                 	db	61	;'='
   454  00FEEA  20                 	db	32
   455  00FEEB  59                 	db	89	;'Y'
   456  00FEEC  65                 	db	101	;'e'
   457  00FEED  73                 	db	115	;'s'
   458  00FEEE  00                 	db	0
   459  00FEEF                     STR_1:
   460  00FEEF  35                 	db	53	;'5'
   461  00FEF0  20                 	db	32
   462  00FEF1  70                 	db	112	;'p'
   463  00FEF2  72                 	db	114	;'r'
   464  00FEF3  65                 	db	101	;'e'
   465  00FEF4  76                 	db	118	;'v'
   466  00FEF5  69                 	db	105	;'i'
   467  00FEF6  6F                 	db	111	;'o'
   468  00FEF7  75                 	db	117	;'u'
   469  00FEF8  73                 	db	115	;'s'
   470  00FEF9  20                 	db	32
   471  00FEFA  6C                 	db	108	;'l'
   472  00FEFB  6F                 	db	111	;'o'
   473  00FEFC  67                 	db	103	;'g'
   474  00FEFD  73                 	db	115	;'s'
   475  00FEFE  00                 	db	0
   476  00FEFF                     STR_15:
   477  00FEFF  44                 	db	68	;'D'
   478  00FF00  72                 	db	114	;'r'
   479  00FF01  61                 	db	97	;'a'
   480  00FF02  77                 	db	119	;'w'
   481  00FF03  65                 	db	101	;'e'
   482  00FF04  72                 	db	114	;'r'
   483  00FF05  20                 	db	32
   484  00FF06  31                 	db	49	;'1'
   485  00FF07  3A                 	db	58	;':'
   486  00FF08  20                 	db	32
   487  00FF09  52                 	db	82	;'R'
   488  00FF0A  46                 	db	70	;'F'
   489  00FF0B  31                 	db	49	;'1'
   490  00FF0C  32                 	db	50	;'2'
   491  00FF0D  00                 	db	0
   492  00FF0E                     STR_27:
   493  00FF0E  44                 	db	68	;'D'
   494  00FF0F  72                 	db	114	;'r'
   495  00FF10  61                 	db	97	;'a'
   496  00FF11  77                 	db	119	;'w'
   497  00FF12  65                 	db	101	;'e'
   498  00FF13  72                 	db	114	;'r'
   499  00FF14  20                 	db	32
   500  00FF15  6E                 	db	110	;'n'
   501  00FF16  75                 	db	117	;'u'
   502  00FF17  6D                 	db	109	;'m'
   503  00FF18  62                 	db	98	;'b'
   504  00FF19  65                 	db	101	;'e'
   505  00FF1A  72                 	db	114	;'r'
   506  00FF1B  3A                 	db	58	;':'
   507  00FF1C  00                 	db	0
   508  00FF1D                     STR_44:
   509  00FF1D  44                 	db	68	;'D'
   510  00FF1E  72                 	db	114	;'r'
   511  00FF1F  61                 	db	97	;'a'
   512  00FF20  77                 	db	119	;'w'
   513  00FF21  65                 	db	101	;'e'
   514  00FF22  72                 	db	114	;'r'
   515  00FF23  20                 	db	32
   516  00FF24  61                 	db	97	;'a'
   517  00FF25  6C                 	db	108	;'l'
   518  00FF26  72                 	db	114	;'r'
   519  00FF27  65                 	db	101	;'e'
   520  00FF28  61                 	db	97	;'a'
   521  00FF29  64                 	db	100	;'d'
   522  00FF2A  79                 	db	121	;'y'
   523  00FF2B  00                 	db	0
   524  00FF2C                     STR_21:
   525  00FF2C  49                 	db	73	;'I'
   526  00FF2D  6E                 	db	110	;'n'
   527  00FF2E  76                 	db	118	;'v'
   528  00FF2F  61                 	db	97	;'a'
   529  00FF30  6C                 	db	108	;'l'
   530  00FF31  69                 	db	105	;'i'
   531  00FF32  64                 	db	100	;'d'
   532  00FF33  20                 	db	32
   533  00FF34  66                 	db	102	;'f'
   534  00FF35  6F                 	db	111	;'o'
   535  00FF36  6F                 	db	111	;'o'
   536  00FF37  64                 	db	100	;'d'
   537  00FF38  21                 	db	33
   538  00FF39  00                 	db	0
   539  00FF3A                     STR_25:
   540  00FF3A  49                 	db	73	;'I'
   541  00FF3B  6E                 	db	110	;'n'
   542  00FF3C  76                 	db	118	;'v'
   543  00FF3D  61                 	db	97	;'a'
   544  00FF3E  6C                 	db	108	;'l'
   545  00FF3F  69                 	db	105	;'i'
   546  00FF40  64                 	db	100	;'d'
   547  00FF41  20                 	db	32
   548  00FF42  64                 	db	100	;'d'
   549  00FF43  69                 	db	105	;'i'
   550  00FF44  65                 	db	101	;'e'
   551  00FF45  74                 	db	116	;'t'
   552  00FF46  21                 	db	33
   553  00FF47  00                 	db	0
   554  00FF48                     STR_36:
   555  00FF48  6F                 	db	111	;'o'
   556  00FF49  72                 	db	114	;'r'
   557  00FF4A  20                 	db	32
   558  00FF4B  70                 	db	112	;'p'
   559  00FF4C  72                 	db	114	;'r'
   560  00FF4D  65                 	db	101	;'e'
   561  00FF4E  73                 	db	115	;'s'
   562  00FF4F  73                 	db	115	;'s'
   563  00FF50  20                 	db	32
   564  00FF51  44                 	db	68	;'D'
   565  00FF52  20                 	db	32
   566  00FF53  74                 	db	116	;'t'
   567  00FF54  6F                 	db	111	;'o'
   568  00FF55  00                 	db	0
   569  00FF56                     STR_51:
   570  00FF56  49                 	db	73	;'I'
   571  00FF57  6E                 	db	110	;'n'
   572  00FF58  76                 	db	118	;'v'
   573  00FF59  61                 	db	97	;'a'
   574  00FF5A  6C                 	db	108	;'l'
   575  00FF5B  69                 	db	105	;'i'
   576  00FF5C  64                 	db	100	;'d'
   577  00FF5D  20                 	db	32
   578  00FF5E  6B                 	db	107	;'k'
   579  00FF5F  65                 	db	101	;'e'
   580  00FF60  79                 	db	121	;'y'
   581  00FF61  21                 	db	33
   582  00FF62  00                 	db	0
   583  00FF63                     STR_16:
   584  00FF63  44                 	db	68	;'D'
   585  00FF64  72                 	db	114	;'r'
   586  00FF65  61                 	db	97	;'a'
   587  00FF66  77                 	db	119	;'w'
   588  00FF67  65                 	db	101	;'e'
   589  00FF68  72                 	db	114	;'r'
   590  00FF69  20                 	db	32
   591  00FF6A  32                 	db	50	;'2'
   592  00FF6B  3A                 	db	58	;':'
   593  00FF6C  20                 	db	32
   594  00FF6D  4C                 	db	76	;'L'
   595  00FF6E  31                 	db	49	;'1'
   596  00FF6F  00                 	db	0
   597  00FF70                     STR_38:
   598  00FF70  4D                 	db	77	;'M'
   599  00FF71  61                 	db	97	;'a'
   600  00FF72  78                 	db	120	;'x'
   601  00FF73  69                 	db	105	;'i'
   602  00FF74  6D                 	db	109	;'m'
   603  00FF75  75                 	db	117	;'u'
   604  00FF76  6D                 	db	109	;'m'
   605  00FF77  20                 	db	32
   606  00FF78  6F                 	db	111	;'o'
   607  00FF79  66                 	db	102	;'f'
   608  00FF7A  20                 	db	32
   609  00FF7B  38                 	db	56	;'8'
   610  00FF7C  00                 	db	0
   611  00FF7D                     STR_17:
   612  00FF7D  41                 	db	65	;'A'
   613  00FF7E  6E                 	db	110	;'n'
   614  00FF7F  6F                 	db	111	;'o'
   615  00FF80  74                 	db	116	;'t'
   616  00FF81  68                 	db	104	;'h'
   617  00FF82  65                 	db	101	;'e'
   618  00FF83  72                 	db	114	;'r'
   619  00FF84  20                 	db	32
   620  00FF85  6C                 	db	108	;'l'
   621  00FF86  6F                 	db	111	;'o'
   622  00FF87  67                 	db	103	;'g'
   623  00FF88  3F                 	db	63	;'?'
   624  00FF89  00                 	db	0
   625  00FF8A                     STR_35:
   626  00FF8A  76                 	db	118	;'v'
   627  00FF8B  69                 	db	105	;'i'
   628  00FF8C  65                 	db	101	;'e'
   629  00FF8D  77                 	db	119	;'w'
   630  00FF8E  20                 	db	32
   631  00FF8F  6C                 	db	108	;'l'
   632  00FF90  6F                 	db	111	;'o'
   633  00FF91  67                 	db	103	;'g'
   634  00FF92  73                 	db	115	;'s'
   635  00FF93  2C                 	db	44
   636  00FF94  00                 	db	0
   637  00FF95                     STR_2:
   638  00FF95  61                 	db	97	;'a'
   639  00FF96  76                 	db	118	;'v'
   640  00FF97  61                 	db	97	;'a'
   641  00FF98  69                 	db	105	;'i'
   642  00FF99  6C                 	db	108	;'l'
   643  00FF9A  61                 	db	97	;'a'
   644  00FF9B  62                 	db	98	;'b'
   645  00FF9C  6C                 	db	108	;'l'
   646  00FF9D  65                 	db	101	;'e'
   647  00FF9E  2E                 	db	46
   648  00FF9F  00                 	db	0
   649  00FFA0                     STR_50:
   650  00FFA0  52                 	db	82	;'R'
   651  00FFA1  65                 	db	101	;'e'
   652  00FFA2  62                 	db	98	;'b'
   653  00FFA3  6F                 	db	111	;'o'
   654  00FFA4  6F                 	db	111	;'o'
   655  00FFA5  74                 	db	116	;'t'
   656  00FFA6  69                 	db	105	;'i'
   657  00FFA7  6E                 	db	110	;'n'
   658  00FFA8  67                 	db	103	;'g'
   659  00FFA9  2E                 	db	46
   660  00FFAA  00                 	db	0
   661  00FFAB                     STR_22:
   662  00FFAB  54                 	db	84	;'T'
   663  00FFAC  72                 	db	114	;'r'
   664  00FFAD  79                 	db	121	;'y'
   665  00FFAE  20                 	db	32
   666  00FFAF  61                 	db	97	;'a'
   667  00FFB0  67                 	db	103	;'g'
   668  00FFB1  61                 	db	97	;'a'
   669  00FFB2  69                 	db	105	;'i'
   670  00FFB3  6E                 	db	110	;'n'
   671  00FFB4  2E                 	db	46
   672  00FFB5  00                 	db	0
   673  00FFB6                     STR_34:
   674  00FFB6  50                 	db	80	;'P'
   675  00FFB7  72                 	db	114	;'r'
   676  00FFB8  65                 	db	101	;'e'
   677  00FFB9  73                 	db	115	;'s'
   678  00FFBA  73                 	db	115	;'s'
   679  00FFBB  20                 	db	32
   680  00FFBC  23                 	db	35
   681  00FFBD  20                 	db	32
   682  00FFBE  74                 	db	116	;'t'
   683  00FFBF  6F                 	db	111	;'o'
   684  00FFC0  00                 	db	0
   685  00FFC1                     STR_42:
   686  00FFC1  4E                 	db	78	;'N'
   687  00FFC2  6F                 	db	111	;'o'
   688  00FFC3  20                 	db	32
   689  00FFC4  64                 	db	100	;'d'
   690  00FFC5  72                 	db	114	;'r'
   691  00FFC6  61                 	db	97	;'a'
   692  00FFC7  77                 	db	119	;'w'
   693  00FFC8  65                 	db	101	;'e'
   694  00FFC9  72                 	db	114	;'r'
   695  00FFCA  00                 	db	0
   696  00FFCB                     STR_4:
   697  00FFCB  6E                 	db	110	;'n'
   698  00FFCC  75                 	db	117	;'u'
   699  00FFCD  6D                 	db	109	;'m'
   700  00FFCE  62                 	db	98	;'b'
   701  00FFCF  65                 	db	101	;'e'
   702  00FFD0  72                 	db	114	;'r'
   703  00FFD1  3A                 	db	58	;':'
   704  00FFD2  20                 	db	32
   705  00FFD3  00                 	db	0
   706  00FFD4                     STR_7:
   707  00FFD4  6D                 	db	109	;'m'
   708  00FFD5  6F                 	db	111	;'o'
   709  00FFD6  76                 	db	118	;'v'
   710  00FFD7  65                 	db	101	;'e'
   711  00FFD8  20                 	db	32
   712  00FFD9  6F                 	db	111	;'o'
   713  00FFDA  6E                 	db	110	;'n'
   714  00FFDB  2E                 	db	46
   715  00FFDC  00                 	db	0
   716  00FFDD                     STR_45:
   717  00FFDD  69                 	db	105	;'i'
   718  00FFDE  6E                 	db	110	;'n'
   719  00FFDF  20                 	db	32
   720  00FFE0  75                 	db	117	;'u'
   721  00FFE1  73                 	db	115	;'s'
   722  00FFE2  65                 	db	101	;'e'
   723  00FFE3  21                 	db	33
   724  00FFE4  00                 	db	0
   725  00FFE5                     STR_29:
   726  00FFE5  53                 	db	83	;'S'
   727  00FFE6  74                 	db	116	;'t'
   728  00FFE7  61                 	db	97	;'a'
   729  00FFE8  6E                 	db	110	;'n'
   730  00FFE9  64                 	db	100	;'d'
   731  00FFEA  62                 	db	98	;'b'
   732  00FFEB  79                 	db	121	;'y'
   733  00FFEC  00                 	db	0
   734  00FFED                     STR_5:
   735  00FFED  47                 	db	71	;'G'
   736  00FFEE  72                 	db	114	;'r'
   737  00FFEF  65                 	db	101	;'e'
   738  00FFF0  61                 	db	97	;'a'
   739  00FFF1  74                 	db	116	;'t'
   740  00FFF2  21                 	db	33
   741  00FFF3  00                 	db	0
   742  00FFF4                     STR_11:
   743  00FFF4  31                 	db	49	;'1'
   744  00FFF5  2C                 	db	44
   745  00FFF6  20                 	db	32
   746  00FFF7  31                 	db	49	;'1'
   747  00FFF8  33                 	db	51	;'3'
   748  00FFF9  00                 	db	0
   749  00FFFA                     STR_9:
   750  00FFFA  32                 	db	50	;'2'
   751  00FFFB  3A                 	db	58	;':'
   752  00FFFC  33                 	db	51	;'3'
   753  00FFFD  39                 	db	57	;'9'
   754  00FFFE  00                 	db	0
   755  0000                     
   756                           ; #config settings
   757  00FFFF  00                 	db	0	; dummy byte at the end
   758  0000                     
   759                           	psect	cinit
   760  00DD86                     __pcinit:
   761                           	opt stack 0
   762  00DD86                     start_initialization:
   763                           	opt stack 0
   764  00DD86                     __initialization:
   765                           	opt stack 0
   766                           
   767                           ; Clear objects allocated to COMRAM (34 bytes)
   768  00DD86  EE00  F046         	lfsr	0,__pbssCOMRAM
   769  00DD8A  0E22               	movlw	34
   770  00DD8C                     clear_0:
   771  00DD8C  6AEE               	clrf	postinc0,c
   772  00DD8E  06E8               	decf	wreg,f,c
   773  00DD90  E1FD               	bnz	clear_0
   774  00DD92                     end_of_initialization:
   775                           	opt stack 0
   776  00DD92                     __end_of__initialization:
   777                           	opt stack 0
   778  00DD92  0E00               	movlw	low (__Lmediumconst shr (0+16))
   779  00DD94  6EF8               	movwf	tblptru,c
   780  00DD96  0100               	movlb	0
   781  00DD98  EFCE  F06E         	goto	_main	;jump to C main() function
   782                           tblptru	equ	0xFF8
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           
   786                           	psect	bssCOMRAM
   787  000046                     __pbssCOMRAM:
   788                           	opt stack 0
   789  000046                     _drawerInformation:
   790                           	opt stack 0
   791  000046                     	ds	16
   792  000056                     diet_press@F3055:
   793                           	opt stack 0
   794  000056                     	ds	8
   795  00005E                     food_press@F3040:
   796                           	opt stack 0
   797  00005E                     	ds	8
   798  000066                     standbyMode@LCDinterruptState:
   799                           	opt stack 0
   800  000066                     	ds	1
   801  000067                     	ds	1
   802                           tblptru	equ	0xFF8
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           
   806                           	psect	cstackCOMRAM
   807  000001                     __pcstackCOMRAM:
   808                           	opt stack 0
   809  000001                     ?_check_food:
   810                           	opt stack 0
   811  000001                     ?_get_digits:
   812                           	opt stack 0
   813  000001                     ?_decode_drawer:
   814                           	opt stack 0
   815  000001                     ?___lwdiv:
   816                           	opt stack 0
   817  000001                     lcdNibble@temp:
   818                           	opt stack 0
   819  000001                     check_food@sum:
   820                           	opt stack 0
   821  000001                     get_digits@sum:
   822                           	opt stack 0
   823  000001                     decode_drawer@drawer:
   824                           	opt stack 0
   825  000001                     ___lwdiv@dividend:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x0
   829  000001                     	ds	1
   830  000002                     lcdNibble@data:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x1
   834  000002                     	ds	1
   835  000003                     ??_get_digits:
   836  000003                     ??_decode_drawer:
   837  000003                     lcdInst@data:
   838                           	opt stack 0
   839  000003                     putch@data:
   840                           	opt stack 0
   841  000003                     check_food@foodInput:
   842                           	opt stack 0
   843  000003                     ___lwdiv@divisor:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x2
   847  000003                     	ds	1
   848  000004                     ??_initLCD:
   849                           
   850                           ; 1 bytes @ 0x3
   851  000004                     	ds	1
   852  000005                     ??_check_food:
   853  000005                     get_digits@count:
   854                           	opt stack 0
   855  000005                     decode_drawer@returnValue:
   856                           	opt stack 0
   857  000005                     ___lwdiv@quotient:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x4
   861  000005                     	ds	2
   862  000007                     ___lwdiv@counter:
   863                           	opt stack 0
   864  000007                     check_food@returnValue:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x6
   868  000007                     	ds	1
   869  000008                     ?___lwmod:
   870                           	opt stack 0
   871  000008                     ___lwmod@dividend:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x7
   875  000008                     	ds	2
   876  00000A                     ___lwmod@divisor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x9
   880  00000A                     	ds	2
   881  00000C                     ___lwmod@counter:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0xB
   885  00000C                     	ds	1
   886  00000D                     ?_printf:
   887                           	opt stack 0
   888  00000D                     printf@f:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0xC
   892  00000D                     	ds	4
   893  000011                     ??_printf:
   894                           
   895                           ; 1 bytes @ 0x10
   896  000011                     	ds	1
   897  000012                     printf@ap:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x11
   901  000012                     	ds	2
   902  000014                     printf@flag:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x13
   906  000014                     	ds	1
   907  000015                     printf@prec:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x14
   911  000015                     	ds	1
   912  000016                     printf@val:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x15
   916  000016                     	ds	2
   917  000018                     printf@c:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x17
   921  000018                     	ds	1
   922  000019                     ?_viewLogs:
   923                           	opt stack 0
   924  000019                     ?_food_press:
   925                           	opt stack 0
   926  000019                     ?_diet_press:
   927                           	opt stack 0
   928  000019                     ?_which_drawer:
   929                           	opt stack 0
   930  000019                     food_press@dietSum:
   931                           	opt stack 0
   932  000019                     diet_press@drawer:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x18
   936  000019                     	ds	2
   937  00001B                     ??_viewLogs:
   938  00001B                     ??_diet_press:
   939  00001B                     ??_which_drawer:
   940  00001B                     food_press@drawer:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x1A
   944  00001B                     	ds	1
   945  00001C                     which_drawer@rand:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x1B
   949  00001C                     	ds	1
   950  00001D                     ??_food_press:
   951  00001D                     viewLogs@keypress3:
   952                           	opt stack 0
   953  00001D                     diet_press@previous:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1C
   957  00001D                     	ds	1
   958  00001E                     viewLogs@keypress2:
   959                           	opt stack 0
   960  00001E                     which_drawer@sum:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x1D
   964  00001E                     	ds	1
   965  00001F                     food_press@tally:
   966                           	opt stack 0
   967  00001F                     diet_press@i:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x1E
   971  00001F                     	ds	1
   972  000020                     which_drawer@backCheck:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x1F
   976  000020                     	ds	1
   977  000021                     food_press@backCheck:
   978                           	opt stack 0
   979  000021                     diet_press@backCheck:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x20
   983  000021                     	ds	1
   984  000022                     which_drawer@count:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x21
   988  000022                     	ds	1
   989  000023                     food_press@isValid:
   990                           	opt stack 0
   991  000023                     diet_press@count:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x22
   995  000023                     	ds	1
   996  000024                     which_drawer@keypress:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x23
  1000  000024                     	ds	1
  1001  000025                     food_press@count:
  1002                           	opt stack 0
  1003  000025                     diet_press@sum:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x24
  1007  000025                     	ds	2
  1008  000027                     diet_press@keypress:
  1009                           	opt stack 0
  1010  000027                     food_press@foodTable:
  1011                           	opt stack 0
  1012                           
  1013                           ; 8 bytes @ 0x26
  1014  000027                     	ds	1
  1015  000028                     diet_press@dietTable:
  1016                           	opt stack 0
  1017                           
  1018                           ; 8 bytes @ 0x27
  1019  000028                     	ds	7
  1020  00002F                     food_press@keypress:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x2E
  1024  00002F                     	ds	1
  1025  000030                     ??_standbyMode:
  1026                           
  1027                           ; 1 bytes @ 0x2F
  1028  000030                     	ds	2
  1029  000032                     standbyMode@firstIteration:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x31
  1033  000032                     	ds	2
  1034  000034                     standbyMode@whichKey:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x33
  1038  000034                     	ds	2
  1039  000036                     standbyMode@keypress:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x35
  1043  000036                     	ds	1
  1044  000037                     standbyMode@keypress1:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x36
  1048  000037                     	ds	1
  1049  000038                     standbyMode@validDrawer:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x37
  1053  000038                     	ds	2
  1054  00003A                     standbyMode@zero:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x39
  1058  00003A                     	ds	2
  1059  00003C                     standbyMode@food:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x3B
  1063  00003C                     	ds	2
  1064  00003E                     standbyMode@drawerCount:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x3D
  1068  00003E                     	ds	2
  1069  000040                     standbyMode@diet:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x3F
  1073  000040                     	ds	2
  1074  000042                     standbyMode@i:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x41
  1078  000042                     	ds	2
  1079  000044                     standbyMode@drawer:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x43
  1083  000044                     	ds	2
  1084  000046                     tblptru	equ	0xFF8
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           
  1088                           ; 1 bytes @ 0x45
  1089 ;;
  1090 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1091 ;;
  1092 ;; *************** function _main *****************
  1093 ;; Defined at:
  1094 ;;		line 13 in file "main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels required when called:    5
  1114 ;; This function calls:
  1115 ;;		_initLCD
  1116 ;;		_standbyMode
  1117 ;; This function is called by:
  1118 ;;		Startup code after reset
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text0
  1123  00DD9C                     __ptext0:
  1124                           	opt stack 0
  1125  00DD9C                     _main:
  1126                           	opt stack 26
  1127                           
  1128                           ;main.c: 19: LATA = 0x00;
  1129                           
  1130                           ;incstack = 0
  1131  00DD9C  0E00               	movlw	0
  1132  00DD9E  6E89               	movwf	3977,c	;volatile
  1133                           
  1134                           ;main.c: 20: LATB = 0x00;
  1135  00DDA0  0E00               	movlw	0
  1136  00DDA2  6E8A               	movwf	3978,c	;volatile
  1137                           
  1138                           ;main.c: 21: LATC = 0x00;
  1139  00DDA4  0E00               	movlw	0
  1140  00DDA6  6E8B               	movwf	3979,c	;volatile
  1141                           
  1142                           ;main.c: 22: LATD = 0x00;
  1143  00DDA8  0E00               	movlw	0
  1144  00DDAA  6E8C               	movwf	3980,c	;volatile
  1145                           
  1146                           ;main.c: 23: LATE = 0x00;
  1147  00DDAC  0E00               	movlw	0
  1148  00DDAE  6E8D               	movwf	3981,c	;volatile
  1149                           
  1150                           ;main.c: 27: TRISA = 0xFF;
  1151  00DDB0  6892               	setf	3986,c	;volatile
  1152                           
  1153                           ;main.c: 28: TRISB = 0xFF;
  1154  00DDB2  6893               	setf	3987,c	;volatile
  1155                           
  1156                           ;main.c: 29: TRISC = 0x00;
  1157  00DDB4  0E00               	movlw	0
  1158  00DDB6  6E94               	movwf	3988,c	;volatile
  1159                           
  1160                           ;main.c: 30: TRISD = 0x00;
  1161  00DDB8  0E00               	movlw	0
  1162  00DDBA  6E95               	movwf	3989,c	;volatile
  1163                           
  1164                           ;main.c: 31: TRISE = 0x00;
  1165  00DDBC  0E00               	movlw	0
  1166  00DDBE  6E96               	movwf	3990,c	;volatile
  1167                           
  1168                           ;main.c: 34: ADCON0 = 0x00;
  1169  00DDC0  0E00               	movlw	0
  1170  00DDC2  6EC2               	movwf	4034,c	;volatile
  1171                           
  1172                           ;main.c: 35: ADCON1 = 0b00001111;
  1173  00DDC4  0E0F               	movlw	15
  1174  00DDC6  6EC1               	movwf	4033,c	;volatile
  1175                           
  1176                           ;main.c: 38: initLCD();
  1177  00DDC8  EC0B  F06F         	call	_initLCD	;wreg free
  1178                           
  1179                           ;main.c: 56: standbyMode();
  1180  00DDCC  EC1F  F077         	call	_standbyMode	;wreg free
  1181                           
  1182                           ;main.c: 57: return;
  1183  00DDD0  EF00  F000         	goto	start
  1184  00DDD4                     __end_of_main:
  1185                           	opt stack 0
  1186                           tblptru	equ	0xFF8
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           
  1190 ;; *************** function _standbyMode *****************
  1191 ;; Defined at:
  1192 ;;		line 838 in file "standbyMode.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  keypress1       1   54[COMRAM] unsigned char 
  1197 ;;  whichKey        2   51[COMRAM] unsigned int 
  1198 ;;  drawer          2   67[COMRAM] unsigned int 
  1199 ;;  i               2   65[COMRAM] unsigned int 
  1200 ;;  diet            2   63[COMRAM] unsigned int 
  1201 ;;  drawerCount     2   61[COMRAM] unsigned int 
  1202 ;;  food            2   59[COMRAM] unsigned int 
  1203 ;;  zero            2   57[COMRAM] unsigned int 
  1204 ;;  validDrawer     2   55[COMRAM] unsigned int 
  1205 ;;  firstIterati    2   49[COMRAM] unsigned int 
  1206 ;;  keypress        1   53[COMRAM] unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;Total ram usage:       22 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    4
  1223 ;; This function calls:
  1224 ;;		_diet_press
  1225 ;;		_food_press
  1226 ;;		_lcdInst
  1227 ;;		_printf
  1228 ;;		_viewLogs
  1229 ;;		_which_drawer
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text1
  1236  00EE3E                     __ptext1:
  1237                           	opt stack 0
  1238  00EE3E                     _standbyMode:
  1239                           	opt stack 26
  1240                           
  1241                           ;standbyMode.c: 839: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1242                           
  1243                           ;incstack = 0
  1244  00EE3E  0E01               	movlw	1
  1245  00EE40  ECAF  F06E         	call	_lcdInst
  1246  00EE44  0EC3               	movlw	195
  1247  00EE46  6E30               	movwf	??_standbyMode& (0+255),c
  1248  00EE48  0ECD               	movlw	205
  1249  00EE4A                     u5537:
  1250  00EE4A  2EE8               	decfsz	wreg,f,c
  1251  00EE4C  D7FE               	bra	u5537
  1252  00EE4E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1253  00EE50  D7FC               	bra	u5537
  1254  00EE52  F000               	nop	
  1255                           
  1256                           ;standbyMode.c: 840: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1257  00EE54  0E0C               	movlw	12
  1258  00EE56  ECAF  F06E         	call	_lcdInst
  1259                           
  1260                           ;standbyMode.c: 841: printf("Standby");
  1261  00EE5A  0EE5               	movlw	low STR_29
  1262  00EE5C  6E0D               	movwf	printf@f,c
  1263  00EE5E  0EFF               	movlw	high STR_29
  1264  00EE60  6E0E               	movwf	printf@f+1,c
  1265  00EE62  EC69  F070         	call	_printf	;wreg free
  1266                           
  1267                           ;standbyMode.c: 842: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1268  00EE66  0E66               	movlw	102
  1269  00EE68  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1270  00EE6A  0E76               	movlw	118
  1271  00EE6C  6E30               	movwf	??_standbyMode& (0+255),c
  1272  00EE6E  0EC1               	movlw	193
  1273  00EE70                     u5547:
  1274  00EE70  2EE8               	decfsz	wreg,f,c
  1275  00EE72  D7FE               	bra	u5547
  1276  00EE74  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1277  00EE76  D7FC               	bra	u5547
  1278  00EE78  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1279  00EE7A  D7FA               	bra	u5547
  1280  00EE7C  F000               	nop	
  1281                           
  1282                           ;standbyMode.c: 843: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1283  00EE7E  0E01               	movlw	1
  1284  00EE80  ECAF  F06E         	call	_lcdInst
  1285  00EE84  0EC3               	movlw	195
  1286  00EE86  6E30               	movwf	??_standbyMode& (0+255),c
  1287  00EE88  0ECD               	movlw	205
  1288  00EE8A                     u5557:
  1289  00EE8A  2EE8               	decfsz	wreg,f,c
  1290  00EE8C  D7FE               	bra	u5557
  1291  00EE8E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1292  00EE90  D7FC               	bra	u5557
  1293  00EE92  F000               	nop	
  1294                           
  1295                           ;standbyMode.c: 844: printf("Press any key to");
  1296  00EE94  0E1E               	movlw	low STR_6
  1297  00EE96  6E0D               	movwf	printf@f,c
  1298  00EE98  0EFE               	movlw	high STR_6
  1299  00EE9A  6E0E               	movwf	printf@f+1,c
  1300  00EE9C  EC69  F070         	call	_printf	;wreg free
  1301                           
  1302                           ;standbyMode.c: 845: lcdInst(0xC0);;
  1303  00EEA0  0EC0               	movlw	192
  1304  00EEA2  ECAF  F06E         	call	_lcdInst
  1305                           
  1306                           ;standbyMode.c: 846: printf("begin operation.");
  1307  00EEA6  0EFC               	movlw	low STR_31
  1308  00EEA8  6E0D               	movwf	printf@f,c
  1309  00EEAA  0EFD               	movlw	high STR_31
  1310  00EEAC  6E0E               	movwf	printf@f+1,c
  1311  00EEAE  EC69  F070         	call	_printf	;wreg free
  1312  00EEB2                     
  1313                           ;standbyMode.c: 849: continue;
  1314  00EEB2  A281               	btfss	3969,1,c	;volatile
  1315  00EEB4  D7FE               	goto	l425
  1316                           
  1317                           ;standbyMode.c: 850: }
  1318                           ;standbyMode.c: 853: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1319  00EEB6  0E01               	movlw	1
  1320  00EEB8  ECAF  F06E         	call	_lcdInst
  1321  00EEBC  0EC3               	movlw	195
  1322  00EEBE  6E30               	movwf	??_standbyMode& (0+255),c
  1323  00EEC0  0ECD               	movlw	205
  1324  00EEC2                     u5567:
  1325  00EEC2  2EE8               	decfsz	wreg,f,c
  1326  00EEC4  D7FE               	bra	u5567
  1327  00EEC6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1328  00EEC8  D7FC               	bra	u5567
  1329  00EECA  F000               	nop	
  1330                           
  1331                           ;standbyMode.c: 854: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1332  00EECC  0E0C               	movlw	12
  1333  00EECE  ECAF  F06E         	call	_lcdInst
  1334                           
  1335                           ;standbyMode.c: 855: printf("Welcome to your");
  1336  00EED2  0ECF               	movlw	low STR_32
  1337  00EED4  6E0D               	movwf	printf@f,c
  1338  00EED6  0EFE               	movlw	high STR_32
  1339  00EED8  6E0E               	movwf	printf@f+1,c
  1340  00EEDA  EC69  F070         	call	_printf	;wreg free
  1341                           
  1342                           ;standbyMode.c: 856: lcdInst(0xC0);;
  1343  00EEDE  0EC0               	movlw	192
  1344  00EEE0  ECAF  F06E         	call	_lcdInst
  1345                           
  1346                           ;standbyMode.c: 857: printf("cabinet sorter!");
  1347  00EEE4  0E2F               	movlw	low STR_33
  1348  00EEE6  6E0D               	movwf	printf@f,c
  1349  00EEE8  0EFE               	movlw	high STR_33
  1350  00EEEA  6E0E               	movwf	printf@f+1,c
  1351  00EEEC  EC69  F070         	call	_printf	;wreg free
  1352                           
  1353                           ;standbyMode.c: 858: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1354  00EEF0  0E66               	movlw	102
  1355  00EEF2  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1356  00EEF4  0E76               	movlw	118
  1357  00EEF6  6E30               	movwf	??_standbyMode& (0+255),c
  1358  00EEF8  0EC1               	movlw	193
  1359  00EEFA                     u5577:
  1360  00EEFA  2EE8               	decfsz	wreg,f,c
  1361  00EEFC  D7FE               	bra	u5577
  1362  00EEFE  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1363  00EF00  D7FC               	bra	u5577
  1364  00EF02  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1365  00EF04  D7FA               	bra	u5577
  1366  00EF06  F000               	nop	
  1367                           
  1368                           ;standbyMode.c: 861: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1369  00EF08  0E01               	movlw	1
  1370  00EF0A  ECAF  F06E         	call	_lcdInst
  1371  00EF0E  0EC3               	movlw	195
  1372  00EF10  6E30               	movwf	??_standbyMode& (0+255),c
  1373  00EF12  0ECD               	movlw	205
  1374  00EF14                     u5587:
  1375  00EF14  2EE8               	decfsz	wreg,f,c
  1376  00EF16  D7FE               	bra	u5587
  1377  00EF18  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1378  00EF1A  D7FC               	bra	u5587
  1379  00EF1C  F000               	nop	
  1380                           
  1381                           ;standbyMode.c: 862: printf("Press # to");
  1382  00EF1E  0EB6               	movlw	low STR_34
  1383  00EF20  6E0D               	movwf	printf@f,c
  1384  00EF22  0EFF               	movlw	high STR_34
  1385  00EF24  6E0E               	movwf	printf@f+1,c
  1386  00EF26  EC69  F070         	call	_printf	;wreg free
  1387                           
  1388                           ;standbyMode.c: 863: lcdInst(0xC0);;
  1389  00EF2A  0EC0               	movlw	192
  1390  00EF2C  ECAF  F06E         	call	_lcdInst
  1391                           
  1392                           ;standbyMode.c: 864: printf("view logs,");
  1393  00EF30  0E8A               	movlw	low STR_35
  1394  00EF32  6E0D               	movwf	printf@f,c
  1395  00EF34  0EFF               	movlw	high STR_35
  1396  00EF36  6E0E               	movwf	printf@f+1,c
  1397  00EF38  EC69  F070         	call	_printf	;wreg free
  1398                           
  1399                           ;standbyMode.c: 865: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1400  00EF3C  0E66               	movlw	102
  1401  00EF3E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1402  00EF40  0E76               	movlw	118
  1403  00EF42  6E30               	movwf	??_standbyMode& (0+255),c
  1404  00EF44  0EC1               	movlw	193
  1405  00EF46                     u5597:
  1406  00EF46  2EE8               	decfsz	wreg,f,c
  1407  00EF48  D7FE               	bra	u5597
  1408  00EF4A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1409  00EF4C  D7FC               	bra	u5597
  1410  00EF4E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1411  00EF50  D7FA               	bra	u5597
  1412  00EF52  F000               	nop	
  1413                           
  1414                           ;standbyMode.c: 866: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1415  00EF54  0E01               	movlw	1
  1416  00EF56  ECAF  F06E         	call	_lcdInst
  1417  00EF5A  0EC3               	movlw	195
  1418  00EF5C  6E30               	movwf	??_standbyMode& (0+255),c
  1419  00EF5E  0ECD               	movlw	205
  1420  00EF60                     u5607:
  1421  00EF60  2EE8               	decfsz	wreg,f,c
  1422  00EF62  D7FE               	bra	u5607
  1423  00EF64  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1424  00EF66  D7FC               	bra	u5607
  1425  00EF68  F000               	nop	
  1426                           
  1427                           ;standbyMode.c: 867: printf("or press D to");
  1428  00EF6A  0E48               	movlw	low STR_36
  1429  00EF6C  6E0D               	movwf	printf@f,c
  1430  00EF6E  0EFF               	movlw	high STR_36
  1431  00EF70  6E0E               	movwf	printf@f+1,c
  1432  00EF72  EC69  F070         	call	_printf	;wreg free
  1433                           
  1434                           ;standbyMode.c: 868: lcdInst(0xC0);;
  1435  00EF76  0EC0               	movlw	192
  1436  00EF78  ECAF  F06E         	call	_lcdInst
  1437                           
  1438                           ;standbyMode.c: 869: printf("begin operation.");
  1439  00EF7C  0EFC               	movlw	low STR_31
  1440  00EF7E  6E0D               	movwf	printf@f,c
  1441  00EF80  0EFD               	movlw	high STR_31
  1442  00EF82  6E0E               	movwf	printf@f+1,c
  1443  00EF84  EC69  F070         	call	_printf	;wreg free
  1444  00EF88  A281               	btfss	3969,1,c	;volatile
  1445  00EF8A  D7FE               	goto	l428
  1446                           
  1447                           ;standbyMode.c: 872: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1448  00EF8C  3881               	swapf	3969,w,c	;volatile
  1449  00EF8E  0B0F               	andlw	15
  1450  00EF90  0B0F               	andlw	15
  1451  00EF92  6E36               	movwf	standbyMode@keypress,c
  1452  00EF94  B281               	btfsc	3969,1,c	;volatile
  1453  00EF96  D7FE               	goto	l431
  1454                           
  1455                           ;standbyMode.c: 875: if (keypress == 15){
  1456  00EF98  0E0F               	movlw	15
  1457  00EF9A  1836               	xorwf	standbyMode@keypress,w,c
  1458  00EF9C  A4D8               	btfss	status,2,c
  1459  00EF9E  D284               	goto	l433
  1460                           
  1461                           ;standbyMode.c: 917: unsigned int drawerCount = 0;
  1462  00EFA0  0E00               	movlw	0
  1463  00EFA2  6E3F               	movwf	standbyMode@drawerCount+1,c
  1464  00EFA4  0E00               	movlw	0
  1465  00EFA6  6E3E               	movwf	standbyMode@drawerCount,c
  1466                           
  1467                           ;standbyMode.c: 918: unsigned int i = 0;
  1468  00EFA8  0E00               	movlw	0
  1469  00EFAA  6E43               	movwf	standbyMode@i+1,c
  1470  00EFAC  0E00               	movlw	0
  1471  00EFAE  6E42               	movwf	standbyMode@i,c
  1472                           
  1473                           ;standbyMode.c: 919: unsigned int validDrawer = 0;
  1474  00EFB0  0E00               	movlw	0
  1475  00EFB2  6E39               	movwf	standbyMode@validDrawer+1,c
  1476  00EFB4  0E00               	movlw	0
  1477  00EFB6  6E38               	movwf	standbyMode@validDrawer,c
  1478                           
  1479                           ;standbyMode.c: 920: unsigned int zero = 0;
  1480  00EFB8  0E00               	movlw	0
  1481  00EFBA  6E3B               	movwf	standbyMode@zero+1,c
  1482  00EFBC  0E00               	movlw	0
  1483  00EFBE  6E3A               	movwf	standbyMode@zero,c
  1484                           
  1485                           ;standbyMode.c: 921: unsigned int firstIteration = 0;
  1486  00EFC0  0E00               	movlw	0
  1487  00EFC2  6E33               	movwf	standbyMode@firstIteration+1,c
  1488  00EFC4  0E00               	movlw	0
  1489  00EFC6  6E32               	movwf	standbyMode@firstIteration,c
  1490                           
  1491                           ;standbyMode.c: 922: unsigned int drawer = 0;
  1492  00EFC8  0E00               	movlw	0
  1493  00EFCA  6E45               	movwf	standbyMode@drawer+1,c
  1494  00EFCC  0E00               	movlw	0
  1495  00EFCE  6E44               	movwf	standbyMode@drawer,c
  1496                           
  1497                           ;standbyMode.c: 923: unsigned int diet = 0;
  1498  00EFD0  0E00               	movlw	0
  1499  00EFD2  6E41               	movwf	standbyMode@diet+1,c
  1500  00EFD4  0E00               	movlw	0
  1501  00EFD6  6E40               	movwf	standbyMode@diet,c
  1502                           
  1503                           ;standbyMode.c: 924: unsigned int food = 0;
  1504  00EFD8  0E00               	movlw	0
  1505  00EFDA  6E3D               	movwf	standbyMode@food+1,c
  1506  00EFDC  0E00               	movlw	0
  1507  00EFDE  6E3C               	movwf	standbyMode@food,c
  1508  00EFE0                     
  1509                           ;standbyMode.c: 927: if (firstIteration == 1){
  1510  00EFE0  0432               	decf	standbyMode@firstIteration,w,c
  1511  00EFE2  1033               	iorwf	standbyMode@firstIteration+1,w,c
  1512  00EFE4  A4D8               	btfss	status,2,c
  1513  00EFE6  D15C               	goto	l435
  1514  00EFE8                     u5260:
  1515                           
  1516                           ;standbyMode.c: 930: if(drawerCount >= 8){
  1517                           
  1518                           ;standbyMode.c: 928: while (1){
  1519  00EFE8  503F               	movf	standbyMode@drawerCount+1,w,c
  1520  00EFEA  E104               	bnz	u5270
  1521  00EFEC  0E08               	movlw	8
  1522  00EFEE  5C3E               	subwf	standbyMode@drawerCount,w,c
  1523  00EFF0  A0D8               	btfss	status,0,c
  1524  00EFF2  D02A               	goto	l437
  1525  00EFF4                     u5270:
  1526                           
  1527                           ;standbyMode.c: 931: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1528  00EFF4  0E01               	movlw	1
  1529  00EFF6  ECAF  F06E         	call	_lcdInst
  1530  00EFFA  0EC3               	movlw	195
  1531  00EFFC  6E30               	movwf	??_standbyMode& (0+255),c
  1532  00EFFE  0ECD               	movlw	205
  1533  00F000                     u5617:
  1534  00F000  2EE8               	decfsz	wreg,f,c
  1535  00F002  D7FE               	bra	u5617
  1536  00F004  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1537  00F006  D7FC               	bra	u5617
  1538  00F008  F000               	nop	
  1539                           
  1540                           ;standbyMode.c: 932: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1541  00F00A  0E0C               	movlw	12
  1542  00F00C  ECAF  F06E         	call	_lcdInst
  1543                           
  1544                           ;standbyMode.c: 933: printf("Maximum of 8");
  1545  00F010  0E70               	movlw	low STR_38
  1546  00F012  6E0D               	movwf	printf@f,c
  1547  00F014  0EFF               	movlw	high STR_38
  1548  00F016  6E0E               	movwf	printf@f+1,c
  1549  00F018  EC69  F070         	call	_printf	;wreg free
  1550                           
  1551                           ;standbyMode.c: 934: lcdInst(0xC0);;
  1552  00F01C  0EC0               	movlw	192
  1553  00F01E  ECAF  F06E         	call	_lcdInst
  1554                           
  1555                           ;standbyMode.c: 935: printf("drawers reached!");
  1556  00F022  0EEB               	movlw	low STR_39
  1557  00F024  6E0D               	movwf	printf@f,c
  1558  00F026  0EFD               	movlw	high STR_39
  1559  00F028  6E0E               	movwf	printf@f+1,c
  1560  00F02A  EC69  F070         	call	_printf	;wreg free
  1561                           
  1562                           ;standbyMode.c: 936: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1563  00F02E  0E66               	movlw	102
  1564  00F030  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1565  00F032  0E76               	movlw	118
  1566  00F034  6E30               	movwf	??_standbyMode& (0+255),c
  1567  00F036  0EC1               	movlw	193
  1568  00F038                     u5627:
  1569  00F038  2EE8               	decfsz	wreg,f,c
  1570  00F03A  D7FE               	bra	u5627
  1571  00F03C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1572  00F03E  D7FC               	bra	u5627
  1573  00F040  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1574  00F042  D7FA               	bra	u5627
  1575  00F044  F000               	nop	
  1576                           
  1577                           ;standbyMode.c: 937: break;
  1578  00F046  0012               	return	
  1579  00F048                     l437:
  1580                           
  1581                           ;standbyMode.c: 938: }
  1582                           ;standbyMode.c: 940: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1583  00F048  0E01               	movlw	1
  1584  00F04A  ECAF  F06E         	call	_lcdInst
  1585  00F04E  0EC3               	movlw	195
  1586  00F050  6E30               	movwf	??_standbyMode& (0+255),c
  1587  00F052  0ECD               	movlw	205
  1588  00F054                     u5637:
  1589  00F054  2EE8               	decfsz	wreg,f,c
  1590  00F056  D7FE               	bra	u5637
  1591  00F058  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1592  00F05A  D7FC               	bra	u5637
  1593  00F05C  F000               	nop	
  1594                           
  1595                           ;standbyMode.c: 941: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1596  00F05E  0E0C               	movlw	12
  1597  00F060  ECAF  F06E         	call	_lcdInst
  1598                           
  1599                           ;standbyMode.c: 942: printf("Another drawer?");
  1600  00F064  0EAF               	movlw	low STR_40
  1601  00F066  6E0D               	movwf	printf@f,c
  1602  00F068  0EFE               	movlw	high STR_40
  1603  00F06A  6E0E               	movwf	printf@f+1,c
  1604  00F06C  EC69  F070         	call	_printf	;wreg free
  1605                           
  1606                           ;standbyMode.c: 943: lcdInst(0xC0);;
  1607  00F070  0EC0               	movlw	192
  1608  00F072  ECAF  F06E         	call	_lcdInst
  1609                           
  1610                           ;standbyMode.c: 944: printf("# = No, D = Yes");
  1611  00F076  0EDF               	movlw	low STR_41
  1612  00F078  6E0D               	movwf	printf@f,c
  1613  00F07A  0EFE               	movlw	high STR_41
  1614  00F07C  6E0E               	movwf	printf@f+1,c
  1615  00F07E  EC69  F070         	call	_printf	;wreg free
  1616  00F082  A281               	btfss	3969,1,c	;volatile
  1617  00F084  D7FE               	goto	l441
  1618                           
  1619                           ;standbyMode.c: 947: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  1620  00F086  3881               	swapf	3969,w,c	;volatile
  1621  00F088  0B0F               	andlw	15
  1622  00F08A  0B0F               	andlw	15
  1623  00F08C  6E37               	movwf	standbyMode@keypress1,c
  1624  00F08E  B281               	btfsc	3969,1,c	;volatile
  1625  00F090  D7FE               	goto	l444
  1626                           
  1627                           ;standbyMode.c: 950: if (keypress1 == 15){
  1628  00F092  0E0F               	movlw	15
  1629  00F094  1837               	xorwf	standbyMode@keypress1,w,c
  1630  00F096  A4D8               	btfss	status,2,c
  1631  00F098  D0FC               	goto	l446
  1632  00F09A                     u5300:
  1633                           
  1634                           ;standbyMode.c: 951: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/400
      +                          0.0)));;
  1635  00F09A  0E01               	movlw	1
  1636  00F09C  ECAF  F06E         	call	_lcdInst
  1637  00F0A0  0EC3               	movlw	195
  1638  00F0A2  6E30               	movwf	??_standbyMode& (0+255),c
  1639  00F0A4  0ECD               	movlw	205
  1640  00F0A6                     u5647:
  1641  00F0A6  2EE8               	decfsz	wreg,f,c
  1642  00F0A8  D7FE               	bra	u5647
  1643  00F0AA  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1644  00F0AC  D7FC               	bra	u5647
  1645  00F0AE  F000               	nop	
  1646                           
  1647                           ;standbyMode.c: 952: drawer = which_drawer();
  1648  00F0B0  ECF2  F071         	call	_which_drawer	;wreg free
  1649  00F0B4  C019  F044         	movff	?_which_drawer,standbyMode@drawer
  1650  00F0B8  C01A  F045         	movff	?_which_drawer+1,standbyMode@drawer+1
  1651                           
  1652                           ;standbyMode.c: 954: if (drawer == 100){
  1653  00F0BC  0E64               	movlw	100
  1654  00F0BE  1844               	xorwf	standbyMode@drawer,w,c
  1655  00F0C0  1045               	iorwf	standbyMode@drawer+1,w,c
  1656  00F0C2  A4D8               	btfss	status,2,c
  1657  00F0C4  D005               	goto	l448
  1658                           
  1659                           ;standbyMode.c: 955: drawer = 0;
  1660  00F0C6  0E00               	movlw	0
  1661  00F0C8  6E45               	movwf	standbyMode@drawer+1,c
  1662  00F0CA  0E00               	movlw	0
  1663  00F0CC  6E44               	movwf	standbyMode@drawer,c
  1664                           
  1665                           ;standbyMode.c: 956: goto DRAWER_BACK;
  1666  00F0CE  D7BC               	goto	l437
  1667  00F0D0                     l448:
  1668                           
  1669                           ;standbyMode.c: 957: }
  1670                           ;standbyMode.c: 959: for (i=0; i<8; i++){
  1671  00F0D0  0E00               	movlw	0
  1672  00F0D2  6E43               	movwf	standbyMode@i+1,c
  1673  00F0D4  0E00               	movlw	0
  1674  00F0D6  6E42               	movwf	standbyMode@i,c
  1675  00F0D8                     l3705:
  1676  00F0D8  5043               	movf	standbyMode@i+1,w,c
  1677  00F0DA  E12C               	bnz	l3721
  1678  00F0DC  0E08               	movlw	8
  1679  00F0DE  5C42               	subwf	standbyMode@i,w,c
  1680  00F0E0  B0D8               	btfsc	status,0,c
  1681  00F0E2  D028               	goto	u5350
  1682                           
  1683                           ;standbyMode.c: 960: if (drawerInformation[i] == drawer){
  1684  00F0E4  90D8               	bcf	status,0,c
  1685  00F0E6  3442               	rlcf	standbyMode@i,w,c
  1686  00F0E8  6ED9               	movwf	fsr2l,c
  1687  00F0EA  3443               	rlcf	standbyMode@i+1,w,c
  1688  00F0EC  6EDA               	movwf	fsr2h,c
  1689  00F0EE  0E46               	movlw	low _drawerInformation
  1690  00F0F0  26D9               	addwf	fsr2l,f,c
  1691  00F0F2  0E00               	movlw	high _drawerInformation
  1692  00F0F4  22DA               	addwfc	fsr2h,f,c
  1693  00F0F6  5044               	movf	standbyMode@drawer,w,c
  1694  00F0F8  18DE               	xorwf	postinc2,w,c
  1695  00F0FA  E119               	bnz	l3717
  1696  00F0FC  5045               	movf	standbyMode@drawer+1,w,c
  1697  00F0FE  18DE               	xorwf	postinc2,w,c
  1698  00F100  A4D8               	btfss	status,2,c
  1699  00F102  D015               	goto	l452
  1700                           
  1701                           ;standbyMode.c: 961: validDrawer = 1;
  1702  00F104  0E00               	movlw	0
  1703  00F106  6E39               	movwf	standbyMode@validDrawer+1,c
  1704  00F108  0E01               	movlw	1
  1705  00F10A  6E38               	movwf	standbyMode@validDrawer,c
  1706                           
  1707                           ;standbyMode.c: 962: if (drawerInformation[i] == 0){
  1708  00F10C  90D8               	bcf	status,0,c
  1709  00F10E  3442               	rlcf	standbyMode@i,w,c
  1710  00F110  6ED9               	movwf	fsr2l,c
  1711  00F112  3443               	rlcf	standbyMode@i+1,w,c
  1712  00F114  6EDA               	movwf	fsr2h,c
  1713  00F116  0E46               	movlw	low _drawerInformation
  1714  00F118  26D9               	addwf	fsr2l,f,c
  1715  00F11A  0E00               	movlw	high _drawerInformation
  1716  00F11C  22DA               	addwfc	fsr2h,f,c
  1717  00F11E  50DE               	movf	postinc2,w,c
  1718  00F120  10DE               	iorwf	postinc2,w,c
  1719  00F122  A4D8               	btfss	status,2,c
  1720  00F124  D004               	goto	l452
  1721                           
  1722                           ;standbyMode.c: 963: zero = 1;
  1723  00F126  0E00               	movlw	0
  1724  00F128  6E3B               	movwf	standbyMode@zero+1,c
  1725  00F12A  0E01               	movlw	1
  1726  00F12C  6E3A               	movwf	standbyMode@zero,c
  1727  00F12E                     l452:
  1728  00F12E                     l3717:
  1729  00F12E  4A42               	infsnz	standbyMode@i,f,c
  1730  00F130  2A43               	incf	standbyMode@i+1,f,c
  1731  00F132  D7D2               	goto	l3705
  1732  00F134                     u5350:
  1733  00F134                     l3721:
  1734                           
  1735                           ;standbyMode.c: 964: }
  1736                           ;standbyMode.c: 965: }
  1737                           ;standbyMode.c: 966: }
  1738                           ;standbyMode.c: 967: if (validDrawer == 1){
  1739  00F134  0438               	decf	standbyMode@validDrawer,w,c
  1740  00F136  1039               	iorwf	standbyMode@validDrawer+1,w,c
  1741  00F138  A4D8               	btfss	status,2,c
  1742  00F13A  D060               	goto	l453
  1743                           
  1744                           ;standbyMode.c: 968: if (zero == 1){
  1745  00F13C  043A               	decf	standbyMode@zero,w,c
  1746  00F13E  103B               	iorwf	standbyMode@zero+1,w,c
  1747  00F140  A4D8               	btfss	status,2,c
  1748  00F142  D02E               	goto	l454
  1749                           
  1750                           ;standbyMode.c: 969: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1751  00F144  0E01               	movlw	1
  1752  00F146  ECAF  F06E         	call	_lcdInst
  1753  00F14A  0EC3               	movlw	195
  1754  00F14C  6E30               	movwf	??_standbyMode& (0+255),c
  1755  00F14E  0ECD               	movlw	205
  1756  00F150                     u5657:
  1757  00F150  2EE8               	decfsz	wreg,f,c
  1758  00F152  D7FE               	bra	u5657
  1759  00F154  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1760  00F156  D7FC               	bra	u5657
  1761  00F158  F000               	nop	
  1762                           
  1763                           ;standbyMode.c: 970: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1764  00F15A  0E0C               	movlw	12
  1765  00F15C  ECAF  F06E         	call	_lcdInst
  1766                           
  1767                           ;standbyMode.c: 971: printf("No drawer");
  1768  00F160  0EC1               	movlw	low STR_42
  1769  00F162  6E0D               	movwf	printf@f,c
  1770  00F164  0EFF               	movlw	high STR_42
  1771  00F166  6E0E               	movwf	printf@f+1,c
  1772  00F168  EC69  F070         	call	_printf	;wreg free
  1773                           
  1774                           ;standbyMode.c: 972: lcdInst(0xC0);;
  1775  00F16C  0EC0               	movlw	192
  1776  00F16E  ECAF  F06E         	call	_lcdInst
  1777                           
  1778                           ;standbyMode.c: 973: printf("number pressed.");
  1779  00F172  0E3F               	movlw	low STR_43
  1780  00F174  6E0D               	movwf	printf@f,c
  1781  00F176  0EFE               	movlw	high STR_43
  1782  00F178  6E0E               	movwf	printf@f+1,c
  1783  00F17A  EC69  F070         	call	_printf	;wreg free
  1784                           
  1785                           ;standbyMode.c: 974: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1786  00F17E  0E66               	movlw	102
  1787  00F180  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1788  00F182  0E76               	movlw	118
  1789  00F184  6E30               	movwf	??_standbyMode& (0+255),c
  1790  00F186  0EC1               	movlw	193
  1791  00F188                     u5667:
  1792  00F188  2EE8               	decfsz	wreg,f,c
  1793  00F18A  D7FE               	bra	u5667
  1794  00F18C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1795  00F18E  D7FC               	bra	u5667
  1796  00F190  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1797  00F192  D7FA               	bra	u5667
  1798  00F194  F000               	nop	
  1799                           
  1800                           ;standbyMode.c: 975: zero = 0;
  1801  00F196  0E00               	movlw	0
  1802  00F198  6E3B               	movwf	standbyMode@zero+1,c
  1803  00F19A  0E00               	movlw	0
  1804  00F19C  6E3A               	movwf	standbyMode@zero,c
  1805                           
  1806                           ;standbyMode.c: 976: }
  1807  00F19E  D029               	goto	l455
  1808  00F1A0                     l454:
  1809                           
  1810                           ;standbyMode.c: 977: else{
  1811                           ;standbyMode.c: 978: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1812  00F1A0  0E01               	movlw	1
  1813  00F1A2  ECAF  F06E         	call	_lcdInst
  1814  00F1A6  0EC3               	movlw	195
  1815  00F1A8  6E30               	movwf	??_standbyMode& (0+255),c
  1816  00F1AA  0ECD               	movlw	205
  1817  00F1AC                     u5677:
  1818  00F1AC  2EE8               	decfsz	wreg,f,c
  1819  00F1AE  D7FE               	bra	u5677
  1820  00F1B0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1821  00F1B2  D7FC               	bra	u5677
  1822  00F1B4  F000               	nop	
  1823                           
  1824                           ;standbyMode.c: 979: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1825  00F1B6  0E0C               	movlw	12
  1826  00F1B8  ECAF  F06E         	call	_lcdInst
  1827                           
  1828                           ;standbyMode.c: 980: printf("Drawer already");
  1829  00F1BC  0E1D               	movlw	low STR_44
  1830  00F1BE  6E0D               	movwf	printf@f,c
  1831  00F1C0  0EFF               	movlw	high STR_44
  1832  00F1C2  6E0E               	movwf	printf@f+1,c
  1833  00F1C4  EC69  F070         	call	_printf	;wreg free
  1834                           
  1835                           ;standbyMode.c: 981: lcdInst(0xC0);;
  1836  00F1C8  0EC0               	movlw	192
  1837  00F1CA  ECAF  F06E         	call	_lcdInst
  1838                           
  1839                           ;standbyMode.c: 982: printf("in use!");
  1840  00F1CE  0EDD               	movlw	low STR_45
  1841  00F1D0  6E0D               	movwf	printf@f,c
  1842  00F1D2  0EFF               	movlw	high STR_45
  1843  00F1D4  6E0E               	movwf	printf@f+1,c
  1844  00F1D6  EC69  F070         	call	_printf	;wreg free
  1845                           
  1846                           ;standbyMode.c: 983: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1847  00F1DA  0E66               	movlw	102
  1848  00F1DC  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1849  00F1DE  0E76               	movlw	118
  1850  00F1E0  6E30               	movwf	??_standbyMode& (0+255),c
  1851  00F1E2  0EC1               	movlw	193
  1852  00F1E4                     u5687:
  1853  00F1E4  2EE8               	decfsz	wreg,f,c
  1854  00F1E6  D7FE               	bra	u5687
  1855  00F1E8  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1856  00F1EA  D7FC               	bra	u5687
  1857  00F1EC  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1858  00F1EE  D7FA               	bra	u5687
  1859  00F1F0  F000               	nop	
  1860  00F1F2                     l455:
  1861                           
  1862                           ;standbyMode.c: 984: }
  1863                           ;standbyMode.c: 985: validDrawer = 0;
  1864  00F1F2  0E00               	movlw	0
  1865  00F1F4  6E39               	movwf	standbyMode@validDrawer+1,c
  1866  00F1F6  0E00               	movlw	0
  1867  00F1F8  6E38               	movwf	standbyMode@validDrawer,c
  1868                           
  1869                           ;standbyMode.c: 986: continue;
  1870  00F1FA  D6F6               	goto	u5260
  1871  00F1FC                     l453:
  1872                           
  1873                           ;standbyMode.c: 988: else{
  1874                           ;standbyMode.c: 989: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/400
      +                          0.0)));;
  1875  00F1FC  0E01               	movlw	1
  1876  00F1FE  ECAF  F06E         	call	_lcdInst
  1877  00F202  0EC3               	movlw	195
  1878  00F204  6E30               	movwf	??_standbyMode& (0+255),c
  1879  00F206  0ECD               	movlw	205
  1880  00F208                     u5697:
  1881  00F208  2EE8               	decfsz	wreg,f,c
  1882  00F20A  D7FE               	bra	u5697
  1883  00F20C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1884  00F20E  D7FC               	bra	u5697
  1885  00F210  F000               	nop	
  1886                           
  1887                           ;standbyMode.c: 990: diet = diet_press(drawer);
  1888  00F212  C044  F019         	movff	standbyMode@drawer,diet_press@drawer
  1889  00F216  C045  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  1890  00F21A  EC8C  F074         	call	_diet_press	;wreg free
  1891  00F21E  C019  F040         	movff	?_diet_press,standbyMode@diet
  1892  00F222  C01A  F041         	movff	?_diet_press+1,standbyMode@diet+1
  1893                           
  1894                           ;standbyMode.c: 991: if (diet == 100){
  1895  00F226  0E64               	movlw	100
  1896  00F228  1840               	xorwf	standbyMode@diet,w,c
  1897  00F22A  1041               	iorwf	standbyMode@diet+1,w,c
  1898  00F22C  A4D8               	btfss	status,2,c
  1899  00F22E  D005               	goto	l459
  1900                           
  1901                           ;standbyMode.c: 992: diet = 0;
  1902  00F230  0E00               	movlw	0
  1903  00F232  6E41               	movwf	standbyMode@diet+1,c
  1904  00F234  0E00               	movlw	0
  1905  00F236  6E40               	movwf	standbyMode@diet,c
  1906                           
  1907                           ;standbyMode.c: 993: goto DIET_BACK1;
  1908  00F238  D730               	goto	u5300
  1909  00F23A                     l459:
  1910                           
  1911                           ;standbyMode.c: 994: }
  1912                           ;standbyMode.c: 996: food = food_press(diet, drawer);
  1913  00F23A  C040  F019         	movff	standbyMode@diet,food_press@dietSum
  1914  00F23E  C041  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  1915  00F242  C044  F01B         	movff	standbyMode@drawer,food_press@drawer
  1916  00F246  C045  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  1917  00F24A  ECF8  F070         	call	_food_press	;wreg free
  1918  00F24E  C019  F03C         	movff	?_food_press,standbyMode@food
  1919  00F252  C01A  F03D         	movff	?_food_press+1,standbyMode@food+1
  1920                           
  1921                           ;standbyMode.c: 997: if (food == 100){
  1922  00F256  0E64               	movlw	100
  1923  00F258  183C               	xorwf	standbyMode@food,w,c
  1924  00F25A  103D               	iorwf	standbyMode@food+1,w,c
  1925  00F25C  A4D8               	btfss	status,2,c
  1926  00F25E  D009               	goto	l460
  1927                           
  1928                           ;standbyMode.c: 998: diet = 0;
  1929  00F260  0E00               	movlw	0
  1930  00F262  6E41               	movwf	standbyMode@diet+1,c
  1931  00F264  0E00               	movlw	0
  1932  00F266  6E40               	movwf	standbyMode@diet,c
  1933                           
  1934                           ;standbyMode.c: 999: food = 0;
  1935  00F268  0E00               	movlw	0
  1936  00F26A  6E3D               	movwf	standbyMode@food+1,c
  1937  00F26C  0E00               	movlw	0
  1938  00F26E  6E3C               	movwf	standbyMode@food,c
  1939                           
  1940                           ;standbyMode.c: 1000: goto FOOD_BACK1;
  1941  00F270  D7C5               	goto	l453
  1942  00F272                     l460:
  1943                           
  1944                           ;standbyMode.c: 1001: }
  1945                           ;standbyMode.c: 1002: drawerInformation[drawerCount] = drawer;
  1946  00F272  90D8               	bcf	status,0,c
  1947  00F274  343E               	rlcf	standbyMode@drawerCount,w,c
  1948  00F276  6ED9               	movwf	fsr2l,c
  1949  00F278  343F               	rlcf	standbyMode@drawerCount+1,w,c
  1950  00F27A  6EDA               	movwf	fsr2h,c
  1951  00F27C  0E46               	movlw	low _drawerInformation
  1952  00F27E  26D9               	addwf	fsr2l,f,c
  1953  00F280  0E00               	movlw	high _drawerInformation
  1954  00F282  22DA               	addwfc	fsr2h,f,c
  1955  00F284  C044  FFDE         	movff	standbyMode@drawer,postinc2
  1956  00F288  C045  FFDD         	movff	standbyMode@drawer+1,postdec2
  1957                           
  1958                           ;standbyMode.c: 1003: drawerCount += 1;
  1959  00F28C  4A3E               	infsnz	standbyMode@drawerCount,f,c
  1960  00F28E  2A3F               	incf	standbyMode@drawerCount+1,f,c
  1961                           
  1962                           ;standbyMode.c: 1004: }
  1963                           ;standbyMode.c: 1005: }
  1964  00F290  D004               	goto	l462
  1965  00F292                     l446:
  1966                           
  1967                           ;standbyMode.c: 1006: else if (keypress1 == 14){
  1968  00F292  0E0E               	movlw	14
  1969  00F294  1837               	xorwf	standbyMode@keypress1,w,c
  1970  00F296  B4D8               	btfsc	status,2,c
  1971  00F298  0012               	return	
  1972  00F29A                     l462:
  1973                           
  1974                           ;standbyMode.c: 1008: }
  1975                           ;standbyMode.c: 1009: keypress1 = 0;
  1976  00F29A  0E00               	movlw	0
  1977  00F29C  6E37               	movwf	standbyMode@keypress1,c
  1978  00F29E  D6A4               	goto	u5260
  1979  00F2A0                     l435:
  1980                           
  1981                           ;standbyMode.c: 1013: else{
  1982                           ;standbyMode.c: 1014: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1983  00F2A0  0E01               	movlw	1
  1984  00F2A2  ECAF  F06E         	call	_lcdInst
  1985  00F2A6  0EC3               	movlw	195
  1986  00F2A8  6E30               	movwf	??_standbyMode& (0+255),c
  1987  00F2AA  0ECD               	movlw	205
  1988  00F2AC                     u5707:
  1989  00F2AC  2EE8               	decfsz	wreg,f,c
  1990  00F2AE  D7FE               	bra	u5707
  1991  00F2B0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1992  00F2B2  D7FC               	bra	u5707
  1993  00F2B4  F000               	nop	
  1994                           
  1995                           ;standbyMode.c: 1015: drawer = which_drawer();
  1996  00F2B6  ECF2  F071         	call	_which_drawer	;wreg free
  1997  00F2BA  C019  F044         	movff	?_which_drawer,standbyMode@drawer
  1998  00F2BE  C01A  F045         	movff	?_which_drawer+1,standbyMode@drawer+1
  1999                           
  2000                           ;standbyMode.c: 1017: if (drawer == 100){
  2001  00F2C2  0E64               	movlw	100
  2002  00F2C4  1844               	xorwf	standbyMode@drawer,w,c
  2003  00F2C6  1045               	iorwf	standbyMode@drawer+1,w,c
  2004  00F2C8  A4D8               	btfss	status,2,c
  2005  00F2CA  D009               	goto	l466
  2006                           
  2007                           ;standbyMode.c: 1018: drawer = 0;
  2008  00F2CC  0E00               	movlw	0
  2009  00F2CE  6E45               	movwf	standbyMode@drawer+1,c
  2010  00F2D0  0E00               	movlw	0
  2011  00F2D2  6E44               	movwf	standbyMode@drawer,c
  2012                           
  2013                           ;standbyMode.c: 1019: firstIteration = 1;
  2014  00F2D4  0E00               	movlw	0
  2015  00F2D6  6E33               	movwf	standbyMode@firstIteration+1,c
  2016  00F2D8  0E01               	movlw	1
  2017  00F2DA  6E32               	movwf	standbyMode@firstIteration,c
  2018                           
  2019                           ;standbyMode.c: 1020: goto DRAWER_BACK;
  2020  00F2DC  D6B5               	goto	l437
  2021  00F2DE                     l466:
  2022                           
  2023                           ;standbyMode.c: 1021: }
  2024                           ;standbyMode.c: 1023: firstIteration = 1;
  2025  00F2DE  0E00               	movlw	0
  2026  00F2E0  6E33               	movwf	standbyMode@firstIteration+1,c
  2027  00F2E2  0E01               	movlw	1
  2028  00F2E4  6E32               	movwf	standbyMode@firstIteration,c
  2029                           
  2030                           ;standbyMode.c: 1024: for (i=0; i<8; i++){
  2031  00F2E6  0E00               	movlw	0
  2032  00F2E8  6E43               	movwf	standbyMode@i+1,c
  2033  00F2EA  0E00               	movlw	0
  2034  00F2EC  6E42               	movwf	standbyMode@i,c
  2035  00F2EE                     l3799:
  2036  00F2EE  5043               	movf	standbyMode@i+1,w,c
  2037  00F2F0  E12C               	bnz	l3815
  2038  00F2F2  0E08               	movlw	8
  2039  00F2F4  5C42               	subwf	standbyMode@i,w,c
  2040  00F2F6  B0D8               	btfsc	status,0,c
  2041  00F2F8  D028               	goto	u5450
  2042                           
  2043                           ;standbyMode.c: 1025: if (drawerInformation[i] == drawer){
  2044  00F2FA  90D8               	bcf	status,0,c
  2045  00F2FC  3442               	rlcf	standbyMode@i,w,c
  2046  00F2FE  6ED9               	movwf	fsr2l,c
  2047  00F300  3443               	rlcf	standbyMode@i+1,w,c
  2048  00F302  6EDA               	movwf	fsr2h,c
  2049  00F304  0E46               	movlw	low _drawerInformation
  2050  00F306  26D9               	addwf	fsr2l,f,c
  2051  00F308  0E00               	movlw	high _drawerInformation
  2052  00F30A  22DA               	addwfc	fsr2h,f,c
  2053  00F30C  5044               	movf	standbyMode@drawer,w,c
  2054  00F30E  18DE               	xorwf	postinc2,w,c
  2055  00F310  E119               	bnz	l3811
  2056  00F312  5045               	movf	standbyMode@drawer+1,w,c
  2057  00F314  18DE               	xorwf	postinc2,w,c
  2058  00F316  A4D8               	btfss	status,2,c
  2059  00F318  D015               	goto	l470
  2060                           
  2061                           ;standbyMode.c: 1026: validDrawer = 1;
  2062  00F31A  0E00               	movlw	0
  2063  00F31C  6E39               	movwf	standbyMode@validDrawer+1,c
  2064  00F31E  0E01               	movlw	1
  2065  00F320  6E38               	movwf	standbyMode@validDrawer,c
  2066                           
  2067                           ;standbyMode.c: 1027: if (drawerInformation[i] == 0){
  2068  00F322  90D8               	bcf	status,0,c
  2069  00F324  3442               	rlcf	standbyMode@i,w,c
  2070  00F326  6ED9               	movwf	fsr2l,c
  2071  00F328  3443               	rlcf	standbyMode@i+1,w,c
  2072  00F32A  6EDA               	movwf	fsr2h,c
  2073  00F32C  0E46               	movlw	low _drawerInformation
  2074  00F32E  26D9               	addwf	fsr2l,f,c
  2075  00F330  0E00               	movlw	high _drawerInformation
  2076  00F332  22DA               	addwfc	fsr2h,f,c
  2077  00F334  50DE               	movf	postinc2,w,c
  2078  00F336  10DE               	iorwf	postinc2,w,c
  2079  00F338  A4D8               	btfss	status,2,c
  2080  00F33A  D004               	goto	l470
  2081                           
  2082                           ;standbyMode.c: 1028: zero = 1;
  2083  00F33C  0E00               	movlw	0
  2084  00F33E  6E3B               	movwf	standbyMode@zero+1,c
  2085  00F340  0E01               	movlw	1
  2086  00F342  6E3A               	movwf	standbyMode@zero,c
  2087  00F344                     l470:
  2088  00F344                     l3811:
  2089  00F344  4A42               	infsnz	standbyMode@i,f,c
  2090  00F346  2A43               	incf	standbyMode@i+1,f,c
  2091  00F348  D7D2               	goto	l3799
  2092  00F34A                     u5450:
  2093  00F34A                     l3815:
  2094                           
  2095                           ;standbyMode.c: 1029: }
  2096                           ;standbyMode.c: 1030: }
  2097                           ;standbyMode.c: 1031: }
  2098                           ;standbyMode.c: 1032: if (validDrawer == 1){
  2099  00F34A  0438               	decf	standbyMode@validDrawer,w,c
  2100  00F34C  1039               	iorwf	standbyMode@validDrawer+1,w,c
  2101  00F34E  A4D8               	btfss	status,2,c
  2102  00F350  D060               	goto	l471
  2103                           
  2104                           ;standbyMode.c: 1033: if (zero == 1){
  2105  00F352  043A               	decf	standbyMode@zero,w,c
  2106  00F354  103B               	iorwf	standbyMode@zero+1,w,c
  2107  00F356  A4D8               	btfss	status,2,c
  2108  00F358  D02E               	goto	l472
  2109                           
  2110                           ;standbyMode.c: 1034: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2111  00F35A  0E01               	movlw	1
  2112  00F35C  ECAF  F06E         	call	_lcdInst
  2113  00F360  0EC3               	movlw	195
  2114  00F362  6E30               	movwf	??_standbyMode& (0+255),c
  2115  00F364  0ECD               	movlw	205
  2116  00F366                     u5717:
  2117  00F366  2EE8               	decfsz	wreg,f,c
  2118  00F368  D7FE               	bra	u5717
  2119  00F36A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2120  00F36C  D7FC               	bra	u5717
  2121  00F36E  F000               	nop	
  2122                           
  2123                           ;standbyMode.c: 1035: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2124  00F370  0E0C               	movlw	12
  2125  00F372  ECAF  F06E         	call	_lcdInst
  2126                           
  2127                           ;standbyMode.c: 1036: printf("No drawer");
  2128  00F376  0EC1               	movlw	low STR_42
  2129  00F378  6E0D               	movwf	printf@f,c
  2130  00F37A  0EFF               	movlw	high STR_42
  2131  00F37C  6E0E               	movwf	printf@f+1,c
  2132  00F37E  EC69  F070         	call	_printf	;wreg free
  2133                           
  2134                           ;standbyMode.c: 1037: lcdInst(0xC0);;
  2135  00F382  0EC0               	movlw	192
  2136  00F384  ECAF  F06E         	call	_lcdInst
  2137                           
  2138                           ;standbyMode.c: 1038: printf("number pressed.");
  2139  00F388  0E3F               	movlw	low STR_43
  2140  00F38A  6E0D               	movwf	printf@f,c
  2141  00F38C  0EFE               	movlw	high STR_43
  2142  00F38E  6E0E               	movwf	printf@f+1,c
  2143  00F390  EC69  F070         	call	_printf	;wreg free
  2144                           
  2145                           ;standbyMode.c: 1039: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2146  00F394  0E66               	movlw	102
  2147  00F396  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2148  00F398  0E76               	movlw	118
  2149  00F39A  6E30               	movwf	??_standbyMode& (0+255),c
  2150  00F39C  0EC1               	movlw	193
  2151  00F39E                     u5727:
  2152  00F39E  2EE8               	decfsz	wreg,f,c
  2153  00F3A0  D7FE               	bra	u5727
  2154  00F3A2  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2155  00F3A4  D7FC               	bra	u5727
  2156  00F3A6  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2157  00F3A8  D7FA               	bra	u5727
  2158  00F3AA  F000               	nop	
  2159                           
  2160                           ;standbyMode.c: 1040: zero = 0;
  2161  00F3AC  0E00               	movlw	0
  2162  00F3AE  6E3B               	movwf	standbyMode@zero+1,c
  2163  00F3B0  0E00               	movlw	0
  2164  00F3B2  6E3A               	movwf	standbyMode@zero,c
  2165                           
  2166                           ;standbyMode.c: 1041: }
  2167  00F3B4  D029               	goto	l473
  2168  00F3B6                     l472:
  2169                           
  2170                           ;standbyMode.c: 1042: else{
  2171                           ;standbyMode.c: 1043: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2172  00F3B6  0E01               	movlw	1
  2173  00F3B8  ECAF  F06E         	call	_lcdInst
  2174  00F3BC  0EC3               	movlw	195
  2175  00F3BE  6E30               	movwf	??_standbyMode& (0+255),c
  2176  00F3C0  0ECD               	movlw	205
  2177  00F3C2                     u5737:
  2178  00F3C2  2EE8               	decfsz	wreg,f,c
  2179  00F3C4  D7FE               	bra	u5737
  2180  00F3C6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2181  00F3C8  D7FC               	bra	u5737
  2182  00F3CA  F000               	nop	
  2183                           
  2184                           ;standbyMode.c: 1044: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2185  00F3CC  0E0C               	movlw	12
  2186  00F3CE  ECAF  F06E         	call	_lcdInst
  2187                           
  2188                           ;standbyMode.c: 1045: printf("Drawer already");
  2189  00F3D2  0E1D               	movlw	low STR_44
  2190  00F3D4  6E0D               	movwf	printf@f,c
  2191  00F3D6  0EFF               	movlw	high STR_44
  2192  00F3D8  6E0E               	movwf	printf@f+1,c
  2193  00F3DA  EC69  F070         	call	_printf	;wreg free
  2194                           
  2195                           ;standbyMode.c: 1046: lcdInst(0xC0);;
  2196  00F3DE  0EC0               	movlw	192
  2197  00F3E0  ECAF  F06E         	call	_lcdInst
  2198                           
  2199                           ;standbyMode.c: 1047: printf("in use!");
  2200  00F3E4  0EDD               	movlw	low STR_45
  2201  00F3E6  6E0D               	movwf	printf@f,c
  2202  00F3E8  0EFF               	movlw	high STR_45
  2203  00F3EA  6E0E               	movwf	printf@f+1,c
  2204  00F3EC  EC69  F070         	call	_printf	;wreg free
  2205                           
  2206                           ;standbyMode.c: 1048: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2207  00F3F0  0E66               	movlw	102
  2208  00F3F2  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2209  00F3F4  0E76               	movlw	118
  2210  00F3F6  6E30               	movwf	??_standbyMode& (0+255),c
  2211  00F3F8  0EC1               	movlw	193
  2212  00F3FA                     u5747:
  2213  00F3FA  2EE8               	decfsz	wreg,f,c
  2214  00F3FC  D7FE               	bra	u5747
  2215  00F3FE  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2216  00F400  D7FC               	bra	u5747
  2217  00F402  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2218  00F404  D7FA               	bra	u5747
  2219  00F406  F000               	nop	
  2220  00F408                     l473:
  2221                           
  2222                           ;standbyMode.c: 1049: }
  2223                           ;standbyMode.c: 1050: validDrawer = 0;
  2224  00F408  0E00               	movlw	0
  2225  00F40A  6E39               	movwf	standbyMode@validDrawer+1,c
  2226  00F40C  0E00               	movlw	0
  2227  00F40E  6E38               	movwf	standbyMode@validDrawer,c
  2228                           
  2229                           ;standbyMode.c: 1052: }
  2230                           
  2231                           ;standbyMode.c: 1051: continue;
  2232  00F410  D5E7               	goto	l434
  2233  00F412                     l471:
  2234                           
  2235                           ;standbyMode.c: 1053: else{
  2236                           ;standbyMode.c: 1054: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2237  00F412  0E01               	movlw	1
  2238  00F414  ECAF  F06E         	call	_lcdInst
  2239  00F418  0EC3               	movlw	195
  2240  00F41A  6E30               	movwf	??_standbyMode& (0+255),c
  2241  00F41C  0ECD               	movlw	205
  2242  00F41E                     u5757:
  2243  00F41E  2EE8               	decfsz	wreg,f,c
  2244  00F420  D7FE               	bra	u5757
  2245  00F422  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2246  00F424  D7FC               	bra	u5757
  2247  00F426  F000               	nop	
  2248                           
  2249                           ;standbyMode.c: 1055: diet = diet_press(drawer);
  2250  00F428  C044  F019         	movff	standbyMode@drawer,diet_press@drawer
  2251  00F42C  C045  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2252  00F430  EC8C  F074         	call	_diet_press	;wreg free
  2253  00F434  C019  F040         	movff	?_diet_press,standbyMode@diet
  2254  00F438  C01A  F041         	movff	?_diet_press+1,standbyMode@diet+1
  2255                           
  2256                           ;standbyMode.c: 1056: if (diet == 100){
  2257  00F43C  0E64               	movlw	100
  2258  00F43E  1840               	xorwf	standbyMode@diet,w,c
  2259  00F440  1041               	iorwf	standbyMode@diet+1,w,c
  2260  00F442  A4D8               	btfss	status,2,c
  2261  00F444  D005               	goto	l477
  2262                           
  2263                           ;standbyMode.c: 1057: diet = 0;
  2264  00F446  0E00               	movlw	0
  2265  00F448  6E41               	movwf	standbyMode@diet+1,c
  2266  00F44A  0E00               	movlw	0
  2267  00F44C  6E40               	movwf	standbyMode@diet,c
  2268                           
  2269                           ;standbyMode.c: 1058: goto DIET_BACK2;
  2270  00F44E  D728               	goto	l435
  2271  00F450                     l477:
  2272                           
  2273                           ;standbyMode.c: 1059: }
  2274                           ;standbyMode.c: 1061: food = food_press(diet, drawer);
  2275  00F450  C040  F019         	movff	standbyMode@diet,food_press@dietSum
  2276  00F454  C041  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  2277  00F458  C044  F01B         	movff	standbyMode@drawer,food_press@drawer
  2278  00F45C  C045  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  2279  00F460  ECF8  F070         	call	_food_press	;wreg free
  2280  00F464  C019  F03C         	movff	?_food_press,standbyMode@food
  2281  00F468  C01A  F03D         	movff	?_food_press+1,standbyMode@food+1
  2282                           
  2283                           ;standbyMode.c: 1062: if (food == 100){
  2284  00F46C  0E64               	movlw	100
  2285  00F46E  183C               	xorwf	standbyMode@food,w,c
  2286  00F470  103D               	iorwf	standbyMode@food+1,w,c
  2287  00F472  A4D8               	btfss	status,2,c
  2288  00F474  D009               	goto	l478
  2289                           
  2290                           ;standbyMode.c: 1063: diet = 0;
  2291  00F476  0E00               	movlw	0
  2292  00F478  6E41               	movwf	standbyMode@diet+1,c
  2293  00F47A  0E00               	movlw	0
  2294  00F47C  6E40               	movwf	standbyMode@diet,c
  2295                           
  2296                           ;standbyMode.c: 1064: food = 0;
  2297  00F47E  0E00               	movlw	0
  2298  00F480  6E3D               	movwf	standbyMode@food+1,c
  2299  00F482  0E00               	movlw	0
  2300  00F484  6E3C               	movwf	standbyMode@food,c
  2301                           
  2302                           ;standbyMode.c: 1065: goto FOOD_BACK2;
  2303  00F486  D7C5               	goto	l471
  2304  00F488                     l478:
  2305                           
  2306                           ;standbyMode.c: 1066: }
  2307                           ;standbyMode.c: 1067: drawerInformation[drawerCount] = drawer;
  2308  00F488  90D8               	bcf	status,0,c
  2309  00F48A  343E               	rlcf	standbyMode@drawerCount,w,c
  2310  00F48C  6ED9               	movwf	fsr2l,c
  2311  00F48E  343F               	rlcf	standbyMode@drawerCount+1,w,c
  2312  00F490  6EDA               	movwf	fsr2h,c
  2313  00F492  0E46               	movlw	low _drawerInformation
  2314  00F494  26D9               	addwf	fsr2l,f,c
  2315  00F496  0E00               	movlw	high _drawerInformation
  2316  00F498  22DA               	addwfc	fsr2h,f,c
  2317  00F49A  C044  FFDE         	movff	standbyMode@drawer,postinc2
  2318  00F49E  C045  FFDD         	movff	standbyMode@drawer+1,postdec2
  2319                           
  2320                           ;standbyMode.c: 1068: drawerCount += 1;
  2321  00F4A2  4A3E               	infsnz	standbyMode@drawerCount,f,c
  2322  00F4A4  2A3F               	incf	standbyMode@drawerCount+1,f,c
  2323  00F4A6  D59C               	goto	l434
  2324  00F4A8                     l433:
  2325                           
  2326                           ;standbyMode.c: 1073: else if (keypress == 14){
  2327  00F4A8  0E0E               	movlw	14
  2328  00F4AA  1836               	xorwf	standbyMode@keypress,w,c
  2329  00F4AC  A4D8               	btfss	status,2,c
  2330  00F4AE  D05A               	goto	l480
  2331  00F4B0                     u5500:
  2332                           
  2333                           ;standbyMode.c: 1075: unsigned int whichKey = viewLogs();
  2334                           
  2335                           ;standbyMode.c: 1074: while (1){
  2336  00F4B0  ECF4  F072         	call	_viewLogs	;wreg free
  2337  00F4B4  C019  F034         	movff	?_viewLogs,standbyMode@whichKey
  2338  00F4B8  C01A  F035         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2339                           
  2340                           ;standbyMode.c: 1076: if (whichKey == 14){
  2341  00F4BC  0E0E               	movlw	14
  2342  00F4BE  1834               	xorwf	standbyMode@whichKey,w,c
  2343  00F4C0  1035               	iorwf	standbyMode@whichKey+1,w,c
  2344  00F4C2  B4D8               	btfsc	status,2,c
  2345  00F4C4  D7F5               	goto	u5500
  2346                           
  2347                           ;standbyMode.c: 1079: else if (whichKey == 15){
  2348                           
  2349                           ;standbyMode.c: 1078: }
  2350                           
  2351                           ;standbyMode.c: 1077: continue;
  2352  00F4C6  0E0F               	movlw	15
  2353  00F4C8  1834               	xorwf	standbyMode@whichKey,w,c
  2354  00F4CA  1035               	iorwf	standbyMode@whichKey+1,w,c
  2355  00F4CC  A4D8               	btfss	status,2,c
  2356  00F4CE  D020               	goto	l485
  2357                           
  2358                           ;standbyMode.c: 1080: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2359  00F4D0  0E01               	movlw	1
  2360  00F4D2  ECAF  F06E         	call	_lcdInst
  2361  00F4D6  0EC3               	movlw	195
  2362  00F4D8  6E30               	movwf	??_standbyMode& (0+255),c
  2363  00F4DA  0ECD               	movlw	205
  2364  00F4DC                     u5767:
  2365  00F4DC  2EE8               	decfsz	wreg,f,c
  2366  00F4DE  D7FE               	bra	u5767
  2367  00F4E0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2368  00F4E2  D7FC               	bra	u5767
  2369  00F4E4  F000               	nop	
  2370                           
  2371                           ;standbyMode.c: 1081: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2372  00F4E6  0E0C               	movlw	12
  2373  00F4E8  ECAF  F06E         	call	_lcdInst
  2374                           
  2375                           ;standbyMode.c: 1082: printf("Rebooting.");
  2376  00F4EC  0EA0               	movlw	low STR_50
  2377  00F4EE  6E0D               	movwf	printf@f,c
  2378  00F4F0  0EFF               	movlw	high STR_50
  2379  00F4F2  6E0E               	movwf	printf@f+1,c
  2380  00F4F4  EC69  F070         	call	_printf	;wreg free
  2381                           
  2382                           ;standbyMode.c: 1083: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2383  00F4F8  0E66               	movlw	102
  2384  00F4FA  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2385  00F4FC  0E76               	movlw	118
  2386  00F4FE  6E30               	movwf	??_standbyMode& (0+255),c
  2387  00F500  0EC1               	movlw	193
  2388  00F502                     u5777:
  2389  00F502  2EE8               	decfsz	wreg,f,c
  2390  00F504  D7FE               	bra	u5777
  2391  00F506  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2392  00F508  D7FC               	bra	u5777
  2393  00F50A  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2394  00F50C  D7FA               	bra	u5777
  2395  00F50E  D028               	goto	L1
  2396  00F510                     l485:
  2397                           
  2398                           ;standbyMode.c: 1086: else{
  2399                           ;standbyMode.c: 1087: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2400  00F510  0E01               	movlw	1
  2401  00F512  ECAF  F06E         	call	_lcdInst
  2402  00F516  0EC3               	movlw	195
  2403  00F518  6E30               	movwf	??_standbyMode& (0+255),c
  2404  00F51A  0ECD               	movlw	205
  2405  00F51C                     u5787:
  2406  00F51C  2EE8               	decfsz	wreg,f,c
  2407  00F51E  D7FE               	bra	u5787
  2408  00F520  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2409  00F522  D7FC               	bra	u5787
  2410  00F524  F000               	nop	
  2411                           
  2412                           ;standbyMode.c: 1088: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2413  00F526  0E0C               	movlw	12
  2414  00F528  ECAF  F06E         	call	_lcdInst
  2415                           
  2416                           ;standbyMode.c: 1089: printf("Invalid key!");
  2417  00F52C  0E56               	movlw	low STR_51
  2418  00F52E  6E0D               	movwf	printf@f,c
  2419  00F530  0EFF               	movlw	high STR_51
  2420  00F532  6E0E               	movwf	printf@f+1,c
  2421  00F534  EC69  F070         	call	_printf	;wreg free
  2422                           
  2423                           ;standbyMode.c: 1090: lcdInst(0xC0);;
  2424  00F538  0EC0               	movlw	192
  2425  00F53A  ECAF  F06E         	call	_lcdInst
  2426                           
  2427                           ;standbyMode.c: 1091: printf("Rebooting.");
  2428  00F53E  0EA0               	movlw	low STR_50
  2429  00F540  6E0D               	movwf	printf@f,c
  2430  00F542  0EFF               	movlw	high STR_50
  2431  00F544  6E0E               	movwf	printf@f+1,c
  2432  00F546  EC69  F070         	call	_printf	;wreg free
  2433                           
  2434                           ;standbyMode.c: 1092: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2435  00F54A  0E66               	movlw	102
  2436  00F54C  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2437  00F54E  0E76               	movlw	118
  2438  00F550  6E30               	movwf	??_standbyMode& (0+255),c
  2439  00F552  0EC1               	movlw	193
  2440  00F554                     u5797:
  2441  00F554  2EE8               	decfsz	wreg,f,c
  2442  00F556  D7FE               	bra	u5797
  2443  00F558  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2444  00F55A  D7FC               	bra	u5797
  2445  00F55C  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2446  00F55E  D7FA               	bra	u5797
  2447  00F560                     L1:
  2448  00F560  F000               	nop	
  2449                           
  2450                           ;standbyMode.c: 1093: break;
  2451  00F562  0012               	return	
  2452  00F564                     l480:
  2453                           
  2454                           ;standbyMode.c: 1099: else {
  2455                           ;standbyMode.c: 1100: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2456  00F564  0E01               	movlw	1
  2457  00F566  ECAF  F06E         	call	_lcdInst
  2458  00F56A  0EC3               	movlw	195
  2459  00F56C  6E30               	movwf	??_standbyMode& (0+255),c
  2460  00F56E  0ECD               	movlw	205
  2461  00F570                     u5807:
  2462  00F570  2EE8               	decfsz	wreg,f,c
  2463  00F572  D7FE               	bra	u5807
  2464  00F574  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2465  00F576  D7FC               	bra	u5807
  2466  00F578  F000               	nop	
  2467                           
  2468                           ;standbyMode.c: 1101: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2469  00F57A  0E0C               	movlw	12
  2470  00F57C  ECAF  F06E         	call	_lcdInst
  2471                           
  2472                           ;standbyMode.c: 1102: printf("Invalid key!");
  2473  00F580  0E56               	movlw	low STR_51
  2474  00F582  6E0D               	movwf	printf@f,c
  2475  00F584  0EFF               	movlw	high STR_51
  2476  00F586  6E0E               	movwf	printf@f+1,c
  2477  00F588  EC69  F070         	call	_printf	;wreg free
  2478                           
  2479                           ;standbyMode.c: 1103: lcdInst(0xC0);;
  2480  00F58C  0EC0               	movlw	192
  2481  00F58E  ECAF  F06E         	call	_lcdInst
  2482                           
  2483                           ;standbyMode.c: 1104: printf("Rebooting.");
  2484  00F592  0EA0               	movlw	low STR_50
  2485  00F594  6E0D               	movwf	printf@f,c
  2486  00F596  0EFF               	movlw	high STR_50
  2487  00F598  6E0E               	movwf	printf@f+1,c
  2488  00F59A  EC69  F070         	call	_printf	;wreg free
  2489                           
  2490                           ;standbyMode.c: 1105: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2491  00F59E  0E66               	movlw	102
  2492  00F5A0  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2493  00F5A2  0E76               	movlw	118
  2494  00F5A4  6E30               	movwf	??_standbyMode& (0+255),c
  2495  00F5A6  0EC1               	movlw	193
  2496  00F5A8                     u5817:
  2497  00F5A8  2EE8               	decfsz	wreg,f,c
  2498  00F5AA  D7FE               	bra	u5817
  2499  00F5AC  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2500  00F5AE  D7FC               	bra	u5817
  2501  00F5B0  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2502  00F5B2  D7FA               	bra	u5817
  2503  00F5B4  F000               	nop	
  2504  00F5B6  0012               	return	
  2505  00F5B8                     __end_of_standbyMode:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _which_drawer *****************
  2517 ;; Defined at:
  2518 ;;		line 772 in file "standbyMode.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  rand            2   27[COMRAM] unsigned int 
  2523 ;;  keypress        1   35[COMRAM] unsigned char 
  2524 ;;  count           2   33[COMRAM] unsigned int 
  2525 ;;  backCheck       2   31[COMRAM] unsigned int 
  2526 ;;  sum             2   29[COMRAM] unsigned int 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  2   24[COMRAM] unsigned int 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;Total ram usage:       12 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    3
  2543 ;; This function calls:
  2544 ;;		_decode_drawer
  2545 ;;		_lcdInst
  2546 ;;		_printf
  2547 ;;		_putch
  2548 ;; This function is called by:
  2549 ;;		_standbyMode
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text2
  2554  00E3E4                     __ptext2:
  2555                           	opt stack 0
  2556  00E3E4                     _which_drawer:
  2557                           	opt stack 26
  2558                           
  2559                           ;standbyMode.c: 773: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2560                           
  2561                           ;incstack = 0
  2562  00E3E4  0E0C               	movlw	12
  2563  00E3E6  ECAF  F06E         	call	_lcdInst
  2564                           
  2565                           ;standbyMode.c: 774: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2566  00E3EA  0E01               	movlw	1
  2567  00E3EC  ECAF  F06E         	call	_lcdInst
  2568  00E3F0  0EC3               	movlw	195
  2569  00E3F2  6E1B               	movwf	??_which_drawer& (0+255),c
  2570  00E3F4  0ECD               	movlw	205
  2571  00E3F6                     u5827:
  2572  00E3F6  2EE8               	decfsz	wreg,f,c
  2573  00E3F8  D7FE               	bra	u5827
  2574  00E3FA  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2575  00E3FC  D7FC               	bra	u5827
  2576  00E3FE  F000               	nop	
  2577                           
  2578                           ;standbyMode.c: 775: printf("Drawer number:");
  2579  00E400  0E0E               	movlw	low STR_27
  2580  00E402  6E0D               	movwf	printf@f,c
  2581  00E404  0EFF               	movlw	high STR_27
  2582  00E406  6E0E               	movwf	printf@f+1,c
  2583  00E408  EC69  F070         	call	_printf	;wreg free
  2584                           
  2585                           ;standbyMode.c: 776: lcdInst(0xC0);;
  2586  00E40C  0EC0               	movlw	192
  2587  00E40E  ECAF  F06E         	call	_lcdInst
  2588                           
  2589                           ;standbyMode.c: 778: unsigned int count = 0;
  2590  00E412  0E00               	movlw	0
  2591  00E414  6E23               	movwf	which_drawer@count+1,c
  2592  00E416  0E00               	movlw	0
  2593  00E418  6E22               	movwf	which_drawer@count,c
  2594                           
  2595                           ;standbyMode.c: 779: unsigned int sum = 0;
  2596  00E41A  0E00               	movlw	0
  2597  00E41C  6E1F               	movwf	which_drawer@sum+1,c
  2598  00E41E  0E00               	movlw	0
  2599  00E420  6E1E               	movwf	which_drawer@sum,c
  2600                           
  2601                           ;standbyMode.c: 780: unsigned int backCheck = 0;
  2602  00E422  0E00               	movlw	0
  2603  00E424  6E21               	movwf	which_drawer@backCheck+1,c
  2604  00E426  0E00               	movlw	0
  2605  00E428  6E20               	movwf	which_drawer@backCheck,c
  2606  00E42A                     
  2607                           ;standbyMode.c: 783: while(PORTBbits.RB1 == 0){ continue; }
  2608  00E42A  A281               	btfss	3969,1,c	;volatile
  2609  00E42C  D7FE               	goto	l388
  2610                           
  2611                           ;standbyMode.c: 784: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2612  00E42E  3881               	swapf	3969,w,c	;volatile
  2613  00E430  0B0F               	andlw	15
  2614  00E432  0B0F               	andlw	15
  2615  00E434  6E24               	movwf	which_drawer@keypress,c
  2616  00E436  B281               	btfsc	3969,1,c	;volatile
  2617  00E438  D7FE               	goto	l393
  2618                           
  2619                           ;standbyMode.c: 787: if(keypress == 15){
  2620  00E43A  0E0F               	movlw	15
  2621  00E43C  1824               	xorwf	which_drawer@keypress,w,c
  2622  00E43E  B4D8               	btfsc	status,2,c
  2623  00E440  D0BA               	goto	l396
  2624                           
  2625                           ;standbyMode.c: 790: else if (keypress == 14){
  2626                           
  2627                           ;standbyMode.c: 789: }
  2628                           
  2629                           ;standbyMode.c: 788: break;
  2630  00E442  0E0E               	movlw	14
  2631  00E444  1824               	xorwf	which_drawer@keypress,w,c
  2632  00E446  A4D8               	btfss	status,2,c
  2633  00E448  D005               	goto	l398
  2634                           
  2635                           ;standbyMode.c: 791: backCheck = 100;
  2636  00E44A  0E00               	movlw	0
  2637  00E44C  6E21               	movwf	which_drawer@backCheck+1,c
  2638  00E44E  0E64               	movlw	100
  2639  00E450  6E20               	movwf	which_drawer@backCheck,c
  2640                           
  2641                           ;standbyMode.c: 792: break;
  2642  00E452  D0B1               	goto	l396
  2643  00E454                     l398:
  2644                           
  2645                           ;standbyMode.c: 794: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  2646  00E454  5024               	movf	which_drawer@keypress,w,c
  2647  00E456  B4D8               	btfsc	status,2,c
  2648  00E458  D023               	goto	u5050
  2649  00E45A  0424               	decf	which_drawer@keypress,w,c
  2650  00E45C  B4D8               	btfsc	status,2,c
  2651  00E45E  D020               	goto	u5050
  2652  00E460  0E02               	movlw	2
  2653  00E462  1824               	xorwf	which_drawer@keypress,w,c
  2654  00E464  B4D8               	btfsc	status,2,c
  2655  00E466  D01C               	goto	u5050
  2656  00E468  0E04               	movlw	4
  2657  00E46A  1824               	xorwf	which_drawer@keypress,w,c
  2658  00E46C  B4D8               	btfsc	status,2,c
  2659  00E46E  D018               	goto	u5050
  2660  00E470  0E05               	movlw	5
  2661  00E472  1824               	xorwf	which_drawer@keypress,w,c
  2662  00E474  B4D8               	btfsc	status,2,c
  2663  00E476  D014               	goto	u5050
  2664  00E478  0E06               	movlw	6
  2665  00E47A  1824               	xorwf	which_drawer@keypress,w,c
  2666  00E47C  B4D8               	btfsc	status,2,c
  2667  00E47E  D010               	goto	u5050
  2668  00E480  0E08               	movlw	8
  2669  00E482  1824               	xorwf	which_drawer@keypress,w,c
  2670  00E484  B4D8               	btfsc	status,2,c
  2671  00E486  D00C               	goto	u5050
  2672  00E488  0E09               	movlw	9
  2673  00E48A  1824               	xorwf	which_drawer@keypress,w,c
  2674  00E48C  B4D8               	btfsc	status,2,c
  2675  00E48E  D008               	goto	u5050
  2676  00E490  0E0A               	movlw	10
  2677  00E492  1824               	xorwf	which_drawer@keypress,w,c
  2678  00E494  B4D8               	btfsc	status,2,c
  2679  00E496  D004               	goto	u5050
  2680  00E498  0E0D               	movlw	13
  2681  00E49A  1824               	xorwf	which_drawer@keypress,w,c
  2682  00E49C  A4D8               	btfss	status,2,c
  2683  00E49E  D06A               	goto	l400
  2684  00E4A0                     u5050:
  2685                           
  2686                           ;standbyMode.c: 795: if (count == 0){
  2687  00E4A0  5022               	movf	which_drawer@count,w,c
  2688  00E4A2  1023               	iorwf	which_drawer@count+1,w,c
  2689  00E4A4  A4D8               	btfss	status,2,c
  2690  00E4A6  D046               	goto	l403
  2691                           
  2692                           ;standbyMode.c: 796: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  2693  00E4A8  0424               	decf	which_drawer@keypress,w,c
  2694  00E4AA  B4D8               	btfsc	status,2,c
  2695  00E4AC  D01C               	goto	u5140
  2696  00E4AE  0E02               	movlw	2
  2697  00E4B0  1824               	xorwf	which_drawer@keypress,w,c
  2698  00E4B2  B4D8               	btfsc	status,2,c
  2699  00E4B4  D018               	goto	u5140
  2700  00E4B6  0E04               	movlw	4
  2701  00E4B8  1824               	xorwf	which_drawer@keypress,w,c
  2702  00E4BA  B4D8               	btfsc	status,2,c
  2703  00E4BC  D014               	goto	u5140
  2704  00E4BE  0E05               	movlw	5
  2705  00E4C0  1824               	xorwf	which_drawer@keypress,w,c
  2706  00E4C2  B4D8               	btfsc	status,2,c
  2707  00E4C4  D010               	goto	u5140
  2708  00E4C6  0E06               	movlw	6
  2709  00E4C8  1824               	xorwf	which_drawer@keypress,w,c
  2710  00E4CA  B4D8               	btfsc	status,2,c
  2711  00E4CC  D00C               	goto	u5140
  2712  00E4CE  0E08               	movlw	8
  2713  00E4D0  1824               	xorwf	which_drawer@keypress,w,c
  2714  00E4D2  B4D8               	btfsc	status,2,c
  2715  00E4D4  D008               	goto	u5140
  2716  00E4D6  0E09               	movlw	9
  2717  00E4D8  1824               	xorwf	which_drawer@keypress,w,c
  2718  00E4DA  B4D8               	btfsc	status,2,c
  2719  00E4DC  D004               	goto	u5140
  2720  00E4DE  0E0A               	movlw	10
  2721  00E4E0  1824               	xorwf	which_drawer@keypress,w,c
  2722  00E4E2  A4D8               	btfss	status,2,c
  2723  00E4E4  D011               	goto	l404
  2724  00E4E6                     u5140:
  2725                           
  2726                           ;standbyMode.c: 797: count += 2;
  2727  00E4E6  0E02               	movlw	2
  2728  00E4E8  2622               	addwf	which_drawer@count,f,c
  2729  00E4EA  0E00               	movlw	0
  2730  00E4EC  2223               	addwfc	which_drawer@count+1,f,c
  2731                           
  2732                           ;standbyMode.c: 798: putch(input[keypress]);
  2733  00E4EE  5024               	movf	which_drawer@keypress,w,c
  2734  00E4F0  0D01               	mullw	1
  2735  00E4F2  0EB8               	movlw	low _input
  2736  00E4F4  24F3               	addwf	prodl,w,c
  2737  00E4F6  6EF6               	movwf	tblptrl,c
  2738  00E4F8  0EFD               	movlw	high _input
  2739  00E4FA  20F4               	addwfc	prodh,w,c
  2740  00E4FC  6EF7               	movwf	tblptrh,c
  2741  00E4FE                     	if	0	;There are less than 3 active tblptr bytes
  2742  00E4FE                     	endif
  2743  00E4FE  0008               	tblrd		*
  2744  00E500  50F5               	movf	tablat,w,c
  2745  00E502  ECB9  F06E         	call	_putch
  2746  00E506  D034               	goto	l414
  2747  00E508                     l404:
  2748                           
  2749                           ;standbyMode.c: 801: else if (keypress == 0){
  2750  00E508  5024               	movf	which_drawer@keypress,w,c
  2751  00E50A  A4D8               	btfss	status,2,c
  2752  00E50C  D78E               	goto	l388
  2753                           
  2754                           ;standbyMode.c: 802: putch(input[keypress]);
  2755  00E50E  5024               	movf	which_drawer@keypress,w,c
  2756  00E510  0D01               	mullw	1
  2757  00E512  0EB8               	movlw	low _input
  2758  00E514  24F3               	addwf	prodl,w,c
  2759  00E516  6EF6               	movwf	tblptrl,c
  2760  00E518  0EFD               	movlw	high _input
  2761  00E51A  20F4               	addwfc	prodh,w,c
  2762  00E51C  6EF7               	movwf	tblptrh,c
  2763  00E51E                     	if	0	;There are less than 3 active tblptr bytes
  2764  00E51E                     	endif
  2765  00E51E  0008               	tblrd		*
  2766  00E520  50F5               	movf	tablat,w,c
  2767  00E522  ECB9  F06E         	call	_putch
  2768                           
  2769                           ;standbyMode.c: 803: count += 1;
  2770  00E526  4A22               	infsnz	which_drawer@count,f,c
  2771  00E528  2A23               	incf	which_drawer@count+1,f,c
  2772  00E52A  D020               	goto	u5190
  2773  00E52C                     L2:
  2774  00E52C  261E               	addwf	which_drawer@sum,f,c
  2775  00E52E  0E00               	movlw	0
  2776  00E530  221F               	addwfc	which_drawer@sum+1,f,c
  2777                           
  2778                           ;standbyMode.c: 805: }
  2779                           ;standbyMode.c: 806: }
  2780  00E532  D77B               	goto	l388
  2781  00E534                     l403:
  2782                           
  2783                           ;standbyMode.c: 807: else if (count == 1){
  2784  00E534  0422               	decf	which_drawer@count,w,c
  2785  00E536  1023               	iorwf	which_drawer@count+1,w,c
  2786  00E538  A4D8               	btfss	status,2,c
  2787  00E53A  D777               	goto	l388
  2788                           
  2789                           ;standbyMode.c: 808: if (keypress < 8 || keypress == 13){
  2790  00E53C  0E07               	movlw	7
  2791  00E53E  6424               	cpfsgt	which_drawer@keypress,c
  2792  00E540  D004               	goto	u5180
  2793  00E542  0E0D               	movlw	13
  2794  00E544  1824               	xorwf	which_drawer@keypress,w,c
  2795  00E546  A4D8               	btfss	status,2,c
  2796  00E548  D770               	goto	l388
  2797  00E54A                     u5180:
  2798                           
  2799                           ;standbyMode.c: 809: putch(input[keypress]);
  2800  00E54A  5024               	movf	which_drawer@keypress,w,c
  2801  00E54C  0D01               	mullw	1
  2802  00E54E  0EB8               	movlw	low _input
  2803  00E550  24F3               	addwf	prodl,w,c
  2804  00E552  6EF6               	movwf	tblptrl,c
  2805  00E554  0EFD               	movlw	high _input
  2806  00E556  20F4               	addwfc	prodh,w,c
  2807  00E558  6EF7               	movwf	tblptrh,c
  2808  00E55A                     	if	0	;There are less than 3 active tblptr bytes
  2809  00E55A                     	endif
  2810  00E55A  0008               	tblrd		*
  2811  00E55C  50F5               	movf	tablat,w,c
  2812  00E55E  ECB9  F06E         	call	_putch
  2813                           
  2814                           ;standbyMode.c: 810: count += 1;
  2815  00E562  4A22               	infsnz	which_drawer@count,f,c
  2816  00E564  2A23               	incf	which_drawer@count+1,f,c
  2817                           
  2818                           ;standbyMode.c: 811: if(keypress == 0){
  2819  00E566  5024               	movf	which_drawer@keypress,w,c
  2820  00E568  A4D8               	btfss	status,2,c
  2821  00E56A  D002               	goto	l414
  2822  00E56C                     u5190:
  2823                           
  2824                           ;standbyMode.c: 812: sum += 20;
  2825  00E56C  0E14               	movlw	20
  2826  00E56E  D7DE               	goto	L2
  2827  00E570                     l414:
  2828                           
  2829                           ;standbyMode.c: 814: else {
  2830                           ;standbyMode.c: 815: sum += keypress;
  2831  00E570  5024               	movf	which_drawer@keypress,w,c
  2832  00E572  D7DC               	goto	L2
  2833  00E574                     l400:
  2834                           
  2835                           ;standbyMode.c: 820: else if (keypress == 12){
  2836  00E574  0E0C               	movlw	12
  2837  00E576  1824               	xorwf	which_drawer@keypress,w,c
  2838  00E578  A4D8               	btfss	status,2,c
  2839  00E57A  D757               	goto	l388
  2840                           
  2841                           ;standbyMode.c: 821: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2842  00E57C  0E01               	movlw	1
  2843  00E57E  ECAF  F06E         	call	_lcdInst
  2844  00E582  0EC3               	movlw	195
  2845  00E584  6E1B               	movwf	??_which_drawer& (0+255),c
  2846  00E586  0ECD               	movlw	205
  2847  00E588                     u5837:
  2848  00E588  2EE8               	decfsz	wreg,f,c
  2849  00E58A  D7FE               	bra	u5837
  2850  00E58C  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2851  00E58E  D7FC               	bra	u5837
  2852  00E590  F000               	nop	
  2853                           
  2854                           ;standbyMode.c: 822: printf("Drawer number:");
  2855  00E592  0E0E               	movlw	low STR_27
  2856  00E594  6E0D               	movwf	printf@f,c
  2857  00E596  0EFF               	movlw	high STR_27
  2858  00E598  6E0E               	movwf	printf@f+1,c
  2859  00E59A  EC69  F070         	call	_printf	;wreg free
  2860                           
  2861                           ;standbyMode.c: 823: lcdInst(0xC0);;
  2862  00E59E  0EC0               	movlw	192
  2863  00E5A0  ECAF  F06E         	call	_lcdInst
  2864                           
  2865                           ;standbyMode.c: 824: count = 0;
  2866  00E5A4  0E00               	movlw	0
  2867  00E5A6  6E23               	movwf	which_drawer@count+1,c
  2868  00E5A8  0E00               	movlw	0
  2869  00E5AA  6E22               	movwf	which_drawer@count,c
  2870                           
  2871                           ;standbyMode.c: 825: sum = 0;
  2872  00E5AC  0E00               	movlw	0
  2873  00E5AE  6E1F               	movwf	which_drawer@sum+1,c
  2874  00E5B0  0E00               	movlw	0
  2875  00E5B2  6E1E               	movwf	which_drawer@sum,c
  2876  00E5B4  D73A               	goto	l388
  2877  00E5B6                     l396:
  2878                           
  2879                           ;standbyMode.c: 826: }
  2880                           ;standbyMode.c: 827: }
  2881                           ;standbyMode.c: 829: if (backCheck == 100){
  2882  00E5B6  0E64               	movlw	100
  2883  00E5B8  1820               	xorwf	which_drawer@backCheck,w,c
  2884  00E5BA  1021               	iorwf	which_drawer@backCheck+1,w,c
  2885  00E5BC  A4D8               	btfss	status,2,c
  2886  00E5BE  D005               	goto	l419
  2887                           
  2888                           ;standbyMode.c: 830: return backCheck;
  2889  00E5C0  C020  F019         	movff	which_drawer@backCheck,?_which_drawer
  2890  00E5C4  C021  F01A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  2891                           
  2892                           ;standbyMode.c: 831: }
  2893  00E5C8  0012               	return	
  2894  00E5CA                     l419:
  2895                           
  2896                           ;standbyMode.c: 832: else{
  2897                           ;standbyMode.c: 833: unsigned int rand = decode_drawer(sum);
  2898  00E5CA  C01E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  2899  00E5CE  C01F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  2900  00E5D2  ECF8  F06F         	call	_decode_drawer	;wreg free
  2901  00E5D6  C001  F01C         	movff	?_decode_drawer,which_drawer@rand
  2902  00E5DA  C002  F01D         	movff	?_decode_drawer+1,which_drawer@rand+1
  2903                           
  2904                           ;standbyMode.c: 834: return rand;
  2905  00E5DE  C01C  F019         	movff	which_drawer@rand,?_which_drawer
  2906  00E5E2  C01D  F01A         	movff	which_drawer@rand+1,?_which_drawer+1
  2907  00E5E6  0012               	return	
  2908  00E5E8                     __end_of_which_drawer:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _decode_drawer *****************
  2925 ;; Defined at:
  2926 ;;		line 694 in file "standbyMode.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  drawer          2    0[COMRAM] unsigned int 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  returnValue     2    4[COMRAM] unsigned int 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  2    0[COMRAM] unsigned int 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;Total ram usage:        6 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_which_drawer
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text3
  2954  00DFF0                     __ptext3:
  2955                           	opt stack 0
  2956  00DFF0                     _decode_drawer:
  2957                           	opt stack 28
  2958                           
  2959                           ;standbyMode.c: 695: unsigned int returnValue;
  2960                           ;standbyMode.c: 697: switch(drawer){
  2961                           
  2962                           ;incstack = 0
  2963  00DFF0  D03A               	goto	l369
  2964  00DFF2                     
  2965                           ;standbyMode.c: 700: returnValue = 1;
  2966  00DFF2  0E00               	movlw	0
  2967  00DFF4  6E06               	movwf	decode_drawer@returnValue+1,c
  2968  00DFF6  0E01               	movlw	1
  2969  00DFF8  D02F               	goto	L14
  2970  00DFFA                     
  2971                           ;standbyMode.c: 705: returnValue = 2;
  2972  00DFFA  0E00               	movlw	0
  2973  00DFFC  6E06               	movwf	decode_drawer@returnValue+1,c
  2974  00DFFE  0E02               	movlw	2
  2975  00E000  D02B               	goto	L14
  2976  00E002                     
  2977                           ;standbyMode.c: 710: returnValue = 3;
  2978  00E002  0E00               	movlw	0
  2979  00E004  6E06               	movwf	decode_drawer@returnValue+1,c
  2980  00E006  0E03               	movlw	3
  2981  00E008  D027               	goto	L14
  2982  00E00A                     
  2983                           ;standbyMode.c: 715: returnValue = 7;
  2984  00E00A  0E00               	movlw	0
  2985  00E00C  6E06               	movwf	decode_drawer@returnValue+1,c
  2986  00E00E  0E07               	movlw	7
  2987  00E010  D023               	goto	L14
  2988  00E012                     
  2989                           ;standbyMode.c: 720: returnValue = 8;
  2990  00E012  0E00               	movlw	0
  2991  00E014  6E06               	movwf	decode_drawer@returnValue+1,c
  2992  00E016  0E08               	movlw	8
  2993  00E018  D01F               	goto	L14
  2994  00E01A                     
  2995                           ;standbyMode.c: 725: returnValue = 9;
  2996  00E01A  0E00               	movlw	0
  2997  00E01C  6E06               	movwf	decode_drawer@returnValue+1,c
  2998  00E01E  0E09               	movlw	9
  2999  00E020  D01B               	goto	L14
  3000  00E022                     
  3001                           ;standbyMode.c: 730: returnValue = 10;
  3002  00E022  0E00               	movlw	0
  3003  00E024  6E06               	movwf	decode_drawer@returnValue+1,c
  3004  00E026  0E0A               	movlw	10
  3005  00E028  D017               	goto	L14
  3006  00E02A                     
  3007                           ;standbyMode.c: 735: returnValue = 11;
  3008  00E02A  0E00               	movlw	0
  3009  00E02C  6E06               	movwf	decode_drawer@returnValue+1,c
  3010  00E02E  0E0B               	movlw	11
  3011  00E030  D013               	goto	L14
  3012  00E032                     
  3013                           ;standbyMode.c: 740: returnValue = 12;
  3014  00E032  0E00               	movlw	0
  3015  00E034  6E06               	movwf	decode_drawer@returnValue+1,c
  3016  00E036  0E0C               	movlw	12
  3017  00E038  D00F               	goto	L14
  3018  00E03A                     
  3019                           ;standbyMode.c: 745: returnValue = 13;
  3020  00E03A  0E00               	movlw	0
  3021  00E03C  6E06               	movwf	decode_drawer@returnValue+1,c
  3022  00E03E  0E0D               	movlw	13
  3023  00E040  D00B               	goto	L14
  3024  00E042                     
  3025                           ;standbyMode.c: 750: returnValue = 14;
  3026  00E042  0E00               	movlw	0
  3027  00E044  6E06               	movwf	decode_drawer@returnValue+1,c
  3028  00E046  0E0E               	movlw	14
  3029  00E048  D007               	goto	L14
  3030  00E04A                     
  3031                           ;standbyMode.c: 755: returnValue = 15;
  3032  00E04A  0E00               	movlw	0
  3033  00E04C  6E06               	movwf	decode_drawer@returnValue+1,c
  3034  00E04E  0E0F               	movlw	15
  3035  00E050  D003               	goto	L14
  3036  00E052                     
  3037                           ;standbyMode.c: 760: returnValue = 16;
  3038  00E052  0E00               	movlw	0
  3039  00E054  6E06               	movwf	decode_drawer@returnValue+1,c
  3040  00E056  0E10               	movlw	16
  3041  00E058                     L14:
  3042  00E058  6E05               	movwf	decode_drawer@returnValue,c
  3043                           
  3044                           ;standbyMode.c: 761: break;
  3045  00E05A  D036               	goto	l371
  3046  00E05C                     l384:
  3047                           
  3048                           ;standbyMode.c: 764: returnValue = drawer;
  3049  00E05C  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3050  00E060  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3051                           
  3052                           ;standbyMode.c: 766: }
  3053                           
  3054                           ;standbyMode.c: 765: break;
  3055  00E064  D031               	goto	l371
  3056  00E066                     l369:
  3057  00E066  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3058  00E06A  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3059                           
  3060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3061                           ; Switch size 1, requested type "space"
  3062                           ; Number of cases is 1, Range of values is 0 to 0
  3063                           ; switch strategies available:
  3064                           ; Name         Instructions Cycles
  3065                           ; simple_byte            4     3 (average)
  3066                           ;	Chosen strategy is simple_byte
  3067  00E06E  5004               	movf	??_decode_drawer+1,w,c
  3068  00E070  0A00               	xorlw	0	; case 0
  3069  00E072  A4D8               	btfss	status,2,c
  3070  00E074  D7F3               	goto	l384
  3071                           
  3072                           ; Switch size 1, requested type "space"
  3073                           ; Number of cases is 13, Range of values is 1 to 40
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte           40    21 (average)
  3077                           ;	Chosen strategy is simple_byte
  3078  00E076  5003               	movf	??_decode_drawer,w,c
  3079  00E078  0A01               	xorlw	1	; case 1
  3080  00E07A  B4D8               	btfsc	status,2,c
  3081  00E07C  D7BE               	goto	l372
  3082  00E07E  0A03               	xorlw	3	; case 2
  3083  00E080  B4D8               	btfsc	status,2,c
  3084  00E082  D7BF               	goto	l373
  3085  00E084  0A0A               	xorlw	10	; case 8
  3086  00E086  B4D8               	btfsc	status,2,c
  3087  00E088  D7C0               	goto	l374
  3088  00E08A  0A01               	xorlw	1	; case 9
  3089  00E08C  B4D8               	btfsc	status,2,c
  3090  00E08E  D7C1               	goto	l375
  3091  00E090  0A03               	xorlw	3	; case 10
  3092  00E092  B4D8               	btfsc	status,2,c
  3093  00E094  D7C2               	goto	l376
  3094  00E096  0A1E               	xorlw	30	; case 20
  3095  00E098  B4D8               	btfsc	status,2,c
  3096  00E09A  D7AB               	goto	l370
  3097  00E09C  0A01               	xorlw	1	; case 21
  3098  00E09E  B4D8               	btfsc	status,2,c
  3099  00E0A0  D7C8               	goto	l379
  3100  00E0A2  0A03               	xorlw	3	; case 22
  3101  00E0A4  B4D8               	btfsc	status,2,c
  3102  00E0A6  D7C9               	goto	l380
  3103  00E0A8  0A0E               	xorlw	14	; case 24
  3104  00E0AA  B4D8               	btfsc	status,2,c
  3105  00E0AC  D7CA               	goto	l381
  3106  00E0AE  0A01               	xorlw	1	; case 25
  3107  00E0B0  B4D8               	btfsc	status,2,c
  3108  00E0B2  D7CB               	goto	l382
  3109  00E0B4  0A03               	xorlw	3	; case 26
  3110  00E0B6  B4D8               	btfsc	status,2,c
  3111  00E0B8  D7CC               	goto	l383
  3112  00E0BA  0A3B               	xorlw	59	; case 33
  3113  00E0BC  B4D8               	btfsc	status,2,c
  3114  00E0BE  D7B1               	goto	l377
  3115  00E0C0  0A09               	xorlw	9	; case 40
  3116  00E0C2  B4D8               	btfsc	status,2,c
  3117  00E0C4  D7B2               	goto	l378
  3118  00E0C6  D7CA               	goto	l384
  3119  00E0C8                     l371:
  3120                           
  3121                           ;standbyMode.c: 767: return returnValue;
  3122  00E0C8  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3123  00E0CC  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3124  00E0D0  0012               	return		;funcret
  3125  00E0D2                     __end_of_decode_drawer:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _viewLogs *****************
  3142 ;; Defined at:
  3143 ;;		line 271 in file "standbyMode.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  keypress2       1   29[COMRAM] unsigned char 
  3148 ;;  keypress3       1   28[COMRAM] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   24[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:        6 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		_lcdInst
  3167 ;;		_printf
  3168 ;;		_putch
  3169 ;; This function is called by:
  3170 ;;		_standbyMode
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text4
  3175  00E5E8                     __ptext4:
  3176                           	opt stack 0
  3177  00E5E8                     _viewLogs:
  3178                           	opt stack 26
  3179                           
  3180                           ;standbyMode.c: 272: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3181                           
  3182                           ;incstack = 0
  3183  00E5E8  0E01               	movlw	1
  3184  00E5EA  ECAF  F06E         	call	_lcdInst
  3185  00E5EE  0EC3               	movlw	195
  3186  00E5F0  6E1B               	movwf	??_viewLogs& (0+255),c
  3187  00E5F2  0ECD               	movlw	205
  3188  00E5F4                     u5847:
  3189  00E5F4  2EE8               	decfsz	wreg,f,c
  3190  00E5F6  D7FE               	bra	u5847
  3191  00E5F8  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3192  00E5FA  D7FC               	bra	u5847
  3193  00E5FC  F000               	nop	
  3194                           
  3195                           ;standbyMode.c: 273: printf("5 previous logs");
  3196  00E5FE  0EEF               	movlw	low STR_1
  3197  00E600  6E0D               	movwf	printf@f,c
  3198  00E602  0EFE               	movlw	high STR_1
  3199  00E604  6E0E               	movwf	printf@f+1,c
  3200  00E606  EC69  F070         	call	_printf	;wreg free
  3201                           
  3202                           ;standbyMode.c: 274: lcdInst(0xC0);;
  3203  00E60A  0EC0               	movlw	192
  3204  00E60C  ECAF  F06E         	call	_lcdInst
  3205                           
  3206                           ;standbyMode.c: 275: printf("available.");
  3207  00E610  0E95               	movlw	low STR_2
  3208  00E612  6E0D               	movwf	printf@f,c
  3209  00E614  0EFF               	movlw	high STR_2
  3210  00E616  6E0E               	movwf	printf@f+1,c
  3211  00E618  EC69  F070         	call	_printf	;wreg free
  3212                           
  3213                           ;standbyMode.c: 276: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3214  00E61C  0E66               	movlw	102
  3215  00E61E  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3216  00E620  0E76               	movlw	118
  3217  00E622  6E1B               	movwf	??_viewLogs& (0+255),c
  3218  00E624  0EC1               	movlw	193
  3219  00E626                     u5857:
  3220  00E626  2EE8               	decfsz	wreg,f,c
  3221  00E628  D7FE               	bra	u5857
  3222  00E62A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3223  00E62C  D7FC               	bra	u5857
  3224  00E62E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3225  00E630  D7FA               	bra	u5857
  3226  00E632  F000               	nop	
  3227                           
  3228                           ;standbyMode.c: 277: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3229  00E634  0E01               	movlw	1
  3230  00E636  ECAF  F06E         	call	_lcdInst
  3231  00E63A  0EC3               	movlw	195
  3232  00E63C  6E1B               	movwf	??_viewLogs& (0+255),c
  3233  00E63E  0ECD               	movlw	205
  3234  00E640                     u5867:
  3235  00E640  2EE8               	decfsz	wreg,f,c
  3236  00E642  D7FE               	bra	u5867
  3237  00E644  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3238  00E646  D7FC               	bra	u5867
  3239  00E648  F000               	nop	
  3240                           
  3241                           ;standbyMode.c: 278: printf("Please input log");
  3242  00E64A  0E0D               	movlw	low STR_3
  3243  00E64C  6E0D               	movwf	printf@f,c
  3244  00E64E  0EFE               	movlw	high STR_3
  3245  00E650  6E0E               	movwf	printf@f+1,c
  3246  00E652  EC69  F070         	call	_printf	;wreg free
  3247                           
  3248                           ;standbyMode.c: 279: lcdInst(0xC0);;
  3249  00E656  0EC0               	movlw	192
  3250  00E658  ECAF  F06E         	call	_lcdInst
  3251                           
  3252                           ;standbyMode.c: 280: printf("number: ");
  3253  00E65C  0ECB               	movlw	low STR_4
  3254  00E65E  6E0D               	movwf	printf@f,c
  3255  00E660  0EFF               	movlw	high STR_4
  3256  00E662  6E0E               	movwf	printf@f+1,c
  3257  00E664  EC69  F070         	call	_printf	;wreg free
  3258  00E668                     
  3259                           ;standbyMode.c: 283: while(PORTBbits.RB1 == 0){ continue; }
  3260  00E668  A281               	btfss	3969,1,c	;volatile
  3261  00E66A  D7FE               	goto	l215
  3262                           
  3263                           ;standbyMode.c: 284: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3264  00E66C  3881               	swapf	3969,w,c	;volatile
  3265  00E66E  0B0F               	andlw	15
  3266  00E670  0B0F               	andlw	15
  3267  00E672  6E1E               	movwf	viewLogs@keypress2,c
  3268  00E674  B281               	btfsc	3969,1,c	;volatile
  3269  00E676  D7FE               	goto	l220
  3270                           
  3271                           ;standbyMode.c: 287: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4 || keypress2 == 5){
  3272  00E678  501E               	movf	viewLogs@keypress2,w,c
  3273  00E67A  B4D8               	btfsc	status,2,c
  3274  00E67C  D00F               	goto	u3890
  3275  00E67E  041E               	decf	viewLogs@keypress2,w,c
  3276  00E680  B4D8               	btfsc	status,2,c
  3277  00E682  D00C               	goto	u3890
  3278  00E684  0E02               	movlw	2
  3279  00E686  181E               	xorwf	viewLogs@keypress2,w,c
  3280  00E688  B4D8               	btfsc	status,2,c
  3281  00E68A  D008               	goto	u3890
  3282  00E68C  0E04               	movlw	4
  3283  00E68E  181E               	xorwf	viewLogs@keypress2,w,c
  3284  00E690  B4D8               	btfsc	status,2,c
  3285  00E692  D004               	goto	u3890
  3286  00E694  0E05               	movlw	5
  3287  00E696  181E               	xorwf	viewLogs@keypress2,w,c
  3288  00E698  A4D8               	btfss	status,2,c
  3289  00E69A  D7E6               	goto	l215
  3290  00E69C                     u3890:
  3291                           
  3292                           ;standbyMode.c: 288: putch(keys[keypress2]);
  3293  00E69C  501E               	movf	viewLogs@keypress2,w,c
  3294  00E69E  0D01               	mullw	1
  3295  00E6A0  0EA7               	movlw	low _keys
  3296  00E6A2  24F3               	addwf	prodl,w,c
  3297  00E6A4  6EF6               	movwf	tblptrl,c
  3298  00E6A6  0EFD               	movlw	high _keys
  3299  00E6A8  20F4               	addwfc	prodh,w,c
  3300  00E6AA  6EF7               	movwf	tblptrh,c
  3301  00E6AC                     	if	0	;There are less than 3 active tblptr bytes
  3302  00E6AC                     	endif
  3303  00E6AC  0008               	tblrd		*
  3304  00E6AE  50F5               	movf	tablat,w,c
  3305  00E6B0  ECB9  F06E         	call	_putch
  3306                           
  3307                           ;standbyMode.c: 289: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3308  00E6B4  0E33               	movlw	51
  3309  00E6B6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3310  00E6B8  0EBB               	movlw	187
  3311  00E6BA  6E1B               	movwf	??_viewLogs& (0+255),c
  3312  00E6BC  0EE0               	movlw	224
  3313  00E6BE                     u5877:
  3314  00E6BE  2EE8               	decfsz	wreg,f,c
  3315  00E6C0  D7FE               	bra	u5877
  3316  00E6C2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3317  00E6C4  D7FC               	bra	u5877
  3318  00E6C6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3319  00E6C8  D7FA               	bra	u5877
  3320                           
  3321                           ;standbyMode.c: 291: }
  3322                           ;standbyMode.c: 292: }
  3323                           ;standbyMode.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3324                           
  3325                           ;standbyMode.c: 290: break;
  3326  00E6CA  0E01               	movlw	1
  3327  00E6CC  ECAF  F06E         	call	_lcdInst
  3328  00E6D0  0EC3               	movlw	195
  3329  00E6D2  6E1B               	movwf	??_viewLogs& (0+255),c
  3330  00E6D4  0ECD               	movlw	205
  3331  00E6D6                     u5887:
  3332  00E6D6  2EE8               	decfsz	wreg,f,c
  3333  00E6D8  D7FE               	bra	u5887
  3334  00E6DA  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3335  00E6DC  D7FC               	bra	u5887
  3336  00E6DE  F000               	nop	
  3337                           
  3338                           ;standbyMode.c: 295: printf("Great!");
  3339  00E6E0  0EED               	movlw	low STR_5
  3340  00E6E2  6E0D               	movwf	printf@f,c
  3341  00E6E4  0EFF               	movlw	high STR_5
  3342  00E6E6  6E0E               	movwf	printf@f+1,c
  3343  00E6E8  EC69  F070         	call	_printf	;wreg free
  3344                           
  3345                           ;standbyMode.c: 296: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3346  00E6EC  0E33               	movlw	51
  3347  00E6EE  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3348  00E6F0  0EBB               	movlw	187
  3349  00E6F2  6E1B               	movwf	??_viewLogs& (0+255),c
  3350  00E6F4  0EE0               	movlw	224
  3351  00E6F6                     u5897:
  3352  00E6F6  2EE8               	decfsz	wreg,f,c
  3353  00E6F8  D7FE               	bra	u5897
  3354  00E6FA  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3355  00E6FC  D7FC               	bra	u5897
  3356  00E6FE  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3357  00E700  D7FA               	bra	u5897
  3358                           
  3359                           ;standbyMode.c: 297: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3360  00E702  0E01               	movlw	1
  3361  00E704  ECAF  F06E         	call	_lcdInst
  3362  00E708  0EC3               	movlw	195
  3363  00E70A  6E1B               	movwf	??_viewLogs& (0+255),c
  3364  00E70C  0ECD               	movlw	205
  3365  00E70E                     u5907:
  3366  00E70E  2EE8               	decfsz	wreg,f,c
  3367  00E710  D7FE               	bra	u5907
  3368  00E712  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3369  00E714  D7FC               	bra	u5907
  3370  00E716  F000               	nop	
  3371                           
  3372                           ;standbyMode.c: 298: printf("Press any key to");
  3373  00E718  0E1E               	movlw	low STR_6
  3374  00E71A  6E0D               	movwf	printf@f,c
  3375  00E71C  0EFE               	movlw	high STR_6
  3376  00E71E  6E0E               	movwf	printf@f+1,c
  3377  00E720  EC69  F070         	call	_printf	;wreg free
  3378                           
  3379                           ;standbyMode.c: 299: lcdInst(0xC0);;
  3380  00E724  0EC0               	movlw	192
  3381  00E726  ECAF  F06E         	call	_lcdInst
  3382                           
  3383                           ;standbyMode.c: 300: printf("move on.");
  3384  00E72A  0ED4               	movlw	low STR_7
  3385  00E72C  6E0D               	movwf	printf@f,c
  3386  00E72E  0EFF               	movlw	high STR_7
  3387  00E730  6E0E               	movwf	printf@f+1,c
  3388  00E732  EC69  F070         	call	_printf	;wreg free
  3389                           
  3390                           ;standbyMode.c: 301: _delay((unsigned long)((500)*(40000000/4000.0)));
  3391  00E736  0E1A               	movlw	26
  3392  00E738  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3393  00E73A  0E5E               	movlw	94
  3394  00E73C  6E1B               	movwf	??_viewLogs& (0+255),c
  3395  00E73E  0E6E               	movlw	110
  3396  00E740                     u5917:
  3397  00E740  2EE8               	decfsz	wreg,f,c
  3398  00E742  D7FE               	bra	u5917
  3399  00E744  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3400  00E746  D7FC               	bra	u5917
  3401  00E748  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3402  00E74A  D7FA               	bra	u5917
  3403  00E74C  D000               	nop2	
  3404  00E74E                     
  3405                           ;standbyMode.c: 304: continue;
  3406  00E74E  A281               	btfss	3969,1,c	;volatile
  3407  00E750  D7FE               	goto	l228
  3408                           
  3409                           ;standbyMode.c: 305: }
  3410                           ;standbyMode.c: 307: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3411  00E752  0E01               	movlw	1
  3412  00E754  ECAF  F06E         	call	_lcdInst
  3413  00E758  0EC3               	movlw	195
  3414  00E75A  6E1B               	movwf	??_viewLogs& (0+255),c
  3415  00E75C  0ECD               	movlw	205
  3416  00E75E                     u5927:
  3417  00E75E  2EE8               	decfsz	wreg,f,c
  3418  00E760  D7FE               	bra	u5927
  3419  00E762  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3420  00E764  D7FC               	bra	u5927
  3421  00E766  F000               	nop	
  3422                           
  3423                           ;standbyMode.c: 308: printf("Operation time:");
  3424  00E768  0E6F               	movlw	low STR_8
  3425  00E76A  6E0D               	movwf	printf@f,c
  3426  00E76C  0EFE               	movlw	high STR_8
  3427  00E76E  6E0E               	movwf	printf@f+1,c
  3428  00E770  EC69  F070         	call	_printf	;wreg free
  3429                           
  3430                           ;standbyMode.c: 309: lcdInst(0xC0);;
  3431  00E774  0EC0               	movlw	192
  3432  00E776  ECAF  F06E         	call	_lcdInst
  3433                           
  3434                           ;standbyMode.c: 310: printf("2:39");
  3435  00E77A  0EFA               	movlw	low STR_9
  3436  00E77C  6E0D               	movwf	printf@f,c
  3437  00E77E  0EFF               	movlw	high STR_9
  3438  00E780  6E0E               	movwf	printf@f+1,c
  3439  00E782  EC69  F070         	call	_printf	;wreg free
  3440                           
  3441                           ;standbyMode.c: 311: _delay((unsigned long)((500)*(40000000/4000.0)));
  3442  00E786  0E1A               	movlw	26
  3443  00E788  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3444  00E78A  0E5E               	movlw	94
  3445  00E78C  6E1B               	movwf	??_viewLogs& (0+255),c
  3446  00E78E  0E6E               	movlw	110
  3447  00E790                     u5937:
  3448  00E790  2EE8               	decfsz	wreg,f,c
  3449  00E792  D7FE               	bra	u5937
  3450  00E794  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3451  00E796  D7FC               	bra	u5937
  3452  00E798  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3453  00E79A  D7FA               	bra	u5937
  3454  00E79C  D000               	nop2	
  3455  00E79E                     
  3456                           ;standbyMode.c: 314: continue;
  3457  00E79E  A281               	btfss	3969,1,c	;volatile
  3458  00E7A0  D7FE               	goto	l231
  3459                           
  3460                           ;standbyMode.c: 315: }
  3461                           ;standbyMode.c: 317: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3462  00E7A2  0E01               	movlw	1
  3463  00E7A4  ECAF  F06E         	call	_lcdInst
  3464  00E7A8  0EC3               	movlw	195
  3465  00E7AA  6E1B               	movwf	??_viewLogs& (0+255),c
  3466  00E7AC  0ECD               	movlw	205
  3467  00E7AE                     u5947:
  3468  00E7AE  2EE8               	decfsz	wreg,f,c
  3469  00E7B0  D7FE               	bra	u5947
  3470  00E7B2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3471  00E7B4  D7FC               	bra	u5947
  3472  00E7B6  F000               	nop	
  3473                           
  3474                           ;standbyMode.c: 318: printf("Marked drawers:");
  3475  00E7B8  0E7F               	movlw	low STR_10
  3476  00E7BA  6E0D               	movwf	printf@f,c
  3477  00E7BC  0EFE               	movlw	high STR_10
  3478  00E7BE  6E0E               	movwf	printf@f+1,c
  3479  00E7C0  EC69  F070         	call	_printf	;wreg free
  3480                           
  3481                           ;standbyMode.c: 319: lcdInst(0xC0);;
  3482  00E7C4  0EC0               	movlw	192
  3483  00E7C6  ECAF  F06E         	call	_lcdInst
  3484                           
  3485                           ;standbyMode.c: 320: printf("1, 13");
  3486  00E7CA  0EF4               	movlw	low STR_11
  3487  00E7CC  6E0D               	movwf	printf@f,c
  3488  00E7CE  0EFF               	movlw	high STR_11
  3489  00E7D0  6E0E               	movwf	printf@f+1,c
  3490  00E7D2  EC69  F070         	call	_printf	;wreg free
  3491                           
  3492                           ;standbyMode.c: 321: _delay((unsigned long)((500)*(40000000/4000.0)));
  3493  00E7D6  0E1A               	movlw	26
  3494  00E7D8  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3495  00E7DA  0E5E               	movlw	94
  3496  00E7DC  6E1B               	movwf	??_viewLogs& (0+255),c
  3497  00E7DE  0E6E               	movlw	110
  3498  00E7E0                     u5957:
  3499  00E7E0  2EE8               	decfsz	wreg,f,c
  3500  00E7E2  D7FE               	bra	u5957
  3501  00E7E4  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3502  00E7E6  D7FC               	bra	u5957
  3503  00E7E8  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3504  00E7EA  D7FA               	bra	u5957
  3505  00E7EC  D000               	nop2	
  3506  00E7EE                     
  3507                           ;standbyMode.c: 324: continue;
  3508  00E7EE  A281               	btfss	3969,1,c	;volatile
  3509  00E7F0  D7FE               	goto	l234
  3510                           
  3511                           ;standbyMode.c: 325: }
  3512                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3513  00E7F2  0E01               	movlw	1
  3514  00E7F4  ECAF  F06E         	call	_lcdInst
  3515  00E7F8  0EC3               	movlw	195
  3516  00E7FA  6E1B               	movwf	??_viewLogs& (0+255),c
  3517  00E7FC  0ECD               	movlw	205
  3518  00E7FE                     u5967:
  3519  00E7FE  2EE8               	decfsz	wreg,f,c
  3520  00E800  D7FE               	bra	u5967
  3521  00E802  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3522  00E804  D7FC               	bra	u5967
  3523  00E806  F000               	nop	
  3524                           
  3525                           ;standbyMode.c: 328: printf("Remaining pieces:");
  3526  00E808  0ED9               	movlw	low STR_12
  3527  00E80A  6E0D               	movwf	printf@f,c
  3528  00E80C  0EFD               	movlw	high STR_12
  3529  00E80E  6E0E               	movwf	printf@f+1,c
  3530  00E810  EC69  F070         	call	_printf	;wreg free
  3531                           
  3532                           ;standbyMode.c: 329: lcdInst(0xC0);;
  3533  00E814  0EC0               	movlw	192
  3534  00E816  ECAF  F06E         	call	_lcdInst
  3535                           
  3536                           ;standbyMode.c: 330: printf("R:3  F:12  L:10");
  3537  00E81A  0E4F               	movlw	low STR_13
  3538  00E81C  6E0D               	movwf	printf@f,c
  3539  00E81E  0EFE               	movlw	high STR_13
  3540  00E820  6E0E               	movwf	printf@f+1,c
  3541  00E822  EC69  F070         	call	_printf	;wreg free
  3542                           
  3543                           ;standbyMode.c: 331: _delay((unsigned long)((500)*(40000000/4000.0)));
  3544  00E826  0E1A               	movlw	26
  3545  00E828  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3546  00E82A  0E5E               	movlw	94
  3547  00E82C  6E1B               	movwf	??_viewLogs& (0+255),c
  3548  00E82E  0E6E               	movlw	110
  3549  00E830                     u5977:
  3550  00E830  2EE8               	decfsz	wreg,f,c
  3551  00E832  D7FE               	bra	u5977
  3552  00E834  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3553  00E836  D7FC               	bra	u5977
  3554  00E838  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3555  00E83A  D7FA               	bra	u5977
  3556  00E83C  D000               	nop2	
  3557  00E83E                     
  3558                           ;standbyMode.c: 334: continue;
  3559  00E83E  A281               	btfss	3969,1,c	;volatile
  3560  00E840  D7FE               	goto	l237
  3561                           
  3562                           ;standbyMode.c: 335: }
  3563                           ;standbyMode.c: 337: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3564  00E842  0E01               	movlw	1
  3565  00E844  ECAF  F06E         	call	_lcdInst
  3566  00E848  0EC3               	movlw	195
  3567  00E84A  6E1B               	movwf	??_viewLogs& (0+255),c
  3568  00E84C  0ECD               	movlw	205
  3569  00E84E                     u5987:
  3570  00E84E  2EE8               	decfsz	wreg,f,c
  3571  00E850  D7FE               	bra	u5987
  3572  00E852  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3573  00E854  D7FC               	bra	u5987
  3574  00E856  F000               	nop	
  3575                           
  3576                           ;standbyMode.c: 338: printf("Drawer Summary:");
  3577  00E858  0E9F               	movlw	low STR_14
  3578  00E85A  6E0D               	movwf	printf@f,c
  3579  00E85C  0EFE               	movlw	high STR_14
  3580  00E85E  6E0E               	movwf	printf@f+1,c
  3581  00E860  EC69  F070         	call	_printf	;wreg free
  3582                           
  3583                           ;standbyMode.c: 339: _delay((unsigned long)((500)*(40000000/4000.0)));
  3584  00E864  0E1A               	movlw	26
  3585  00E866  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3586  00E868  0E5E               	movlw	94
  3587  00E86A  6E1B               	movwf	??_viewLogs& (0+255),c
  3588  00E86C  0E6E               	movlw	110
  3589  00E86E                     u5997:
  3590  00E86E  2EE8               	decfsz	wreg,f,c
  3591  00E870  D7FE               	bra	u5997
  3592  00E872  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3593  00E874  D7FC               	bra	u5997
  3594  00E876  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3595  00E878  D7FA               	bra	u5997
  3596  00E87A  D000               	nop2	
  3597  00E87C                     
  3598                           ;standbyMode.c: 342: continue;
  3599  00E87C  A281               	btfss	3969,1,c	;volatile
  3600  00E87E  D7FE               	goto	l240
  3601                           
  3602                           ;standbyMode.c: 343: }
  3603                           ;standbyMode.c: 345: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3604  00E880  0E01               	movlw	1
  3605  00E882  ECAF  F06E         	call	_lcdInst
  3606  00E886  0EC3               	movlw	195
  3607  00E888  6E1B               	movwf	??_viewLogs& (0+255),c
  3608  00E88A  0ECD               	movlw	205
  3609  00E88C                     u6007:
  3610  00E88C  2EE8               	decfsz	wreg,f,c
  3611  00E88E  D7FE               	bra	u6007
  3612  00E890  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3613  00E892  D7FC               	bra	u6007
  3614  00E894  F000               	nop	
  3615                           
  3616                           ;standbyMode.c: 346: printf("Drawer 1: RF12");
  3617  00E896  0EFF               	movlw	low STR_15
  3618  00E898  6E0D               	movwf	printf@f,c
  3619  00E89A  0EFE               	movlw	high STR_15
  3620  00E89C  6E0E               	movwf	printf@f+1,c
  3621  00E89E  EC69  F070         	call	_printf	;wreg free
  3622                           
  3623                           ;standbyMode.c: 347: lcdInst(0xC0);;
  3624  00E8A2  0EC0               	movlw	192
  3625  00E8A4  ECAF  F06E         	call	_lcdInst
  3626                           
  3627                           ;standbyMode.c: 348: printf("Drawer 2: L1");
  3628  00E8A8  0E63               	movlw	low STR_16
  3629  00E8AA  6E0D               	movwf	printf@f,c
  3630  00E8AC  0EFF               	movlw	high STR_16
  3631  00E8AE  6E0E               	movwf	printf@f+1,c
  3632  00E8B0  EC69  F070         	call	_printf	;wreg free
  3633                           
  3634                           ;standbyMode.c: 349: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3635  00E8B4  0E66               	movlw	102
  3636  00E8B6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3637  00E8B8  0E76               	movlw	118
  3638  00E8BA  6E1B               	movwf	??_viewLogs& (0+255),c
  3639  00E8BC  0EC1               	movlw	193
  3640  00E8BE                     u6017:
  3641  00E8BE  2EE8               	decfsz	wreg,f,c
  3642  00E8C0  D7FE               	bra	u6017
  3643  00E8C2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3644  00E8C4  D7FC               	bra	u6017
  3645  00E8C6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3646  00E8C8  D7FA               	bra	u6017
  3647  00E8CA  F000               	nop	
  3648                           
  3649                           ;standbyMode.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3650  00E8CC  0E01               	movlw	1
  3651  00E8CE  ECAF  F06E         	call	_lcdInst
  3652  00E8D2  0EC3               	movlw	195
  3653  00E8D4  6E1B               	movwf	??_viewLogs& (0+255),c
  3654  00E8D6  0ECD               	movlw	205
  3655  00E8D8                     u6027:
  3656  00E8D8  2EE8               	decfsz	wreg,f,c
  3657  00E8DA  D7FE               	bra	u6027
  3658  00E8DC  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3659  00E8DE  D7FC               	bra	u6027
  3660  00E8E0  F000               	nop	
  3661                           
  3662                           ;standbyMode.c: 352: printf("Another log?");
  3663  00E8E2  0E7D               	movlw	low STR_17
  3664  00E8E4  6E0D               	movwf	printf@f,c
  3665  00E8E6  0EFF               	movlw	high STR_17
  3666  00E8E8  6E0E               	movwf	printf@f+1,c
  3667  00E8EA  EC69  F070         	call	_printf	;wreg free
  3668                           
  3669                           ;standbyMode.c: 353: lcdInst(0xC0);;
  3670  00E8EE  0EC0               	movlw	192
  3671  00E8F0  ECAF  F06E         	call	_lcdInst
  3672                           
  3673                           ;standbyMode.c: 354: printf("# = Yes, D = No");
  3674  00E8F4  0EBF               	movlw	low STR_18
  3675  00E8F6  6E0D               	movwf	printf@f,c
  3676  00E8F8  0EFE               	movlw	high STR_18
  3677  00E8FA  6E0E               	movwf	printf@f+1,c
  3678  00E8FC  EC69  F070         	call	_printf	;wreg free
  3679  00E900  A281               	btfss	3969,1,c	;volatile
  3680  00E902  D7FE               	goto	l243
  3681                           
  3682                           ;standbyMode.c: 357: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  3683  00E904  3881               	swapf	3969,w,c	;volatile
  3684  00E906  0B0F               	andlw	15
  3685  00E908  0B0F               	andlw	15
  3686  00E90A  6E1D               	movwf	viewLogs@keypress3,c
  3687  00E90C  B281               	btfsc	3969,1,c	;volatile
  3688  00E90E  D7FE               	goto	l246
  3689                           
  3690                           ;standbyMode.c: 359: return keypress3;
  3691  00E910  C01D  F019         	movff	viewLogs@keypress3,?_viewLogs
  3692  00E914  6A1A               	clrf	?_viewLogs+1,c
  3693  00E916  0012               	return		;funcret
  3694  00E918                     __end_of_viewLogs:
  3695                           	opt stack 0
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _food_press *****************
  3711 ;; Defined at:
  3712 ;;		line 469 in file "standbyMode.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  dietSum         2   24[COMRAM] unsigned int 
  3715 ;;  drawer          2   26[COMRAM] unsigned int 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;  keypress        1   46[COMRAM] unsigned char 
  3718 ;;  foodTable       8   38[COMRAM] unsigned int [4]
  3719 ;;  count           2   36[COMRAM] unsigned int 
  3720 ;;  isValid         2   34[COMRAM] unsigned int 
  3721 ;;  backCheck       2   32[COMRAM] unsigned int 
  3722 ;;  tally           2   30[COMRAM] unsigned int 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  2   24[COMRAM] unsigned int 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3732 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;Total ram usage:       23 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		_check_food
  3741 ;;		_get_digits
  3742 ;;		_lcdInst
  3743 ;;		_printf
  3744 ;;		_putch
  3745 ;; This function is called by:
  3746 ;;		_standbyMode
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text5
  3751  00E1F0                     __ptext5:
  3752                           	opt stack 0
  3753  00E1F0                     _food_press:
  3754                           	opt stack 26
  3755                           
  3756                           ;incstack = 0
  3757                           ;standbyMode.c: 471: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  3758  00E1F0  0E01               	movlw	1
  3759  00E1F2  ECAF  F06E         	call	_lcdInst
  3760  00E1F6  0EC3               	movlw	195
  3761  00E1F8  6E1D               	movwf	??_food_press& (0+255),c
  3762  00E1FA  0ECD               	movlw	205
  3763  00E1FC                     u6037:
  3764  00E1FC  2EE8               	decfsz	wreg,f,c
  3765  00E1FE  D7FE               	bra	u6037
  3766  00E200  2E1D               	decfsz	??_food_press& (0+255),f,c
  3767  00E202  D7FC               	bra	u6037
  3768  00E204  F000               	nop	
  3769                           
  3770                           ;standbyMode.c: 472: printf("Drawer %i food:", drawer);
  3771  00E206  0E5F               	movlw	low STR_19
  3772  00E208  6E0D               	movwf	printf@f,c
  3773  00E20A  0EFE               	movlw	high STR_19
  3774  00E20C  6E0E               	movwf	printf@f+1,c
  3775  00E20E  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3776  00E212  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3777  00E216  EC69  F070         	call	_printf	;wreg free
  3778                           
  3779                           ;standbyMode.c: 473: lcdInst(0xC0);;
  3780  00E21A  0EC0               	movlw	192
  3781  00E21C  ECAF  F06E         	call	_lcdInst
  3782                           
  3783                           ;standbyMode.c: 475: unsigned int tally = 0;
  3784  00E220  0E00               	movlw	0
  3785  00E222  6E20               	movwf	food_press@tally+1,c
  3786  00E224  0E00               	movlw	0
  3787  00E226  6E1F               	movwf	food_press@tally,c
  3788                           
  3789                           ;standbyMode.c: 476: unsigned int count = 0;
  3790  00E228  0E00               	movlw	0
  3791  00E22A  6E26               	movwf	food_press@count+1,c
  3792  00E22C  0E00               	movlw	0
  3793  00E22E  6E25               	movwf	food_press@count,c
  3794                           
  3795                           ;standbyMode.c: 477: unsigned int foodTable[4] = {0, 0, 0, 0};
  3796  00E230  EE20  F05E         	lfsr	2,food_press@F3040
  3797  00E234  EE10  F027         	lfsr	1,food_press@foodTable
  3798  00E238  0E07               	movlw	7
  3799  00E23A                     u3971:
  3800  00E23A  CFDB FFE3          	movff	plusw2,plusw1
  3801  00E23E  06E8               	decf	wreg,f,c
  3802  00E240  E2FC               	bc	u3971
  3803                           
  3804                           ;standbyMode.c: 478: unsigned int isValid = 0;
  3805  00E242  0E00               	movlw	0
  3806  00E244  6E24               	movwf	food_press@isValid+1,c
  3807  00E246  0E00               	movlw	0
  3808  00E248  6E23               	movwf	food_press@isValid,c
  3809                           
  3810                           ;standbyMode.c: 479: unsigned int backCheck = 0;
  3811  00E24A  0E00               	movlw	0
  3812  00E24C  6E22               	movwf	food_press@backCheck+1,c
  3813  00E24E  0E00               	movlw	0
  3814  00E250  6E21               	movwf	food_press@backCheck,c
  3815                           
  3816                           ;standbyMode.c: 480: tally = get_digits(dietSum);
  3817  00E252  C019  F001         	movff	food_press@dietSum,get_digits@sum
  3818  00E256  C01A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  3819  00E25A  EC99  F06F         	call	_get_digits	;wreg free
  3820  00E25E  C001  F01F         	movff	?_get_digits,food_press@tally
  3821  00E262  C002  F020         	movff	?_get_digits+1,food_press@tally+1
  3822  00E266                     
  3823                           ;standbyMode.c: 483: while(PORTBbits.RB1 == 0){ continue; }
  3824  00E266  A281               	btfss	3969,1,c	;volatile
  3825  00E268  D7FE               	goto	l278
  3826                           
  3827                           ;standbyMode.c: 484: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3828  00E26A  3881               	swapf	3969,w,c	;volatile
  3829  00E26C  0B0F               	andlw	15
  3830  00E26E  0B0F               	andlw	15
  3831  00E270  6E2F               	movwf	food_press@keypress,c
  3832  00E272  B281               	btfsc	3969,1,c	;volatile
  3833  00E274  D7FE               	goto	l283
  3834                           
  3835                           ;standbyMode.c: 487: if(keypress == 15){
  3836  00E276  0E0F               	movlw	15
  3837  00E278  182F               	xorwf	food_press@keypress,w,c
  3838  00E27A  B4D8               	btfsc	status,2,c
  3839  00E27C  D06D               	goto	l286
  3840                           
  3841                           ;standbyMode.c: 490: else if (keypress == 14){
  3842                           
  3843                           ;standbyMode.c: 489: }
  3844                           
  3845                           ;standbyMode.c: 488: break;
  3846  00E27E  0E0E               	movlw	14
  3847  00E280  182F               	xorwf	food_press@keypress,w,c
  3848  00E282  A4D8               	btfss	status,2,c
  3849  00E284  D005               	goto	l288
  3850                           
  3851                           ;standbyMode.c: 491: backCheck = 1;
  3852  00E286  0E00               	movlw	0
  3853  00E288  6E22               	movwf	food_press@backCheck+1,c
  3854  00E28A  0E01               	movlw	1
  3855  00E28C  6E21               	movwf	food_press@backCheck,c
  3856                           
  3857                           ;standbyMode.c: 492: break;
  3858  00E28E  D064               	goto	l286
  3859  00E290                     l288:
  3860                           
  3861                           ;standbyMode.c: 494: else if (keypress == 0 || keypress == 1 || keypress == 2){
  3862  00E290  502F               	movf	food_press@keypress,w,c
  3863  00E292  B4D8               	btfsc	status,2,c
  3864  00E294  D007               	goto	u4040
  3865  00E296  042F               	decf	food_press@keypress,w,c
  3866  00E298  B4D8               	btfsc	status,2,c
  3867  00E29A  D004               	goto	u4040
  3868  00E29C  0E02               	movlw	2
  3869  00E29E  182F               	xorwf	food_press@keypress,w,c
  3870  00E2A0  A4D8               	btfss	status,2,c
  3871  00E2A2  D029               	goto	l290
  3872  00E2A4                     u4040:
  3873                           
  3874                           ;standbyMode.c: 495: if (count < tally){
  3875  00E2A4  501F               	movf	food_press@tally,w,c
  3876  00E2A6  5C25               	subwf	food_press@count,w,c
  3877  00E2A8  5020               	movf	food_press@tally+1,w,c
  3878  00E2AA  5826               	subwfb	food_press@count+1,w,c
  3879  00E2AC  B0D8               	btfsc	status,0,c
  3880  00E2AE  D7DB               	goto	l278
  3881                           
  3882                           ;standbyMode.c: 496: putch(input[keypress]);
  3883  00E2B0  502F               	movf	food_press@keypress,w,c
  3884  00E2B2  0D01               	mullw	1
  3885  00E2B4  0EB8               	movlw	low _input
  3886  00E2B6  24F3               	addwf	prodl,w,c
  3887  00E2B8  6EF6               	movwf	tblptrl,c
  3888  00E2BA  0EFD               	movlw	high _input
  3889  00E2BC  20F4               	addwfc	prodh,w,c
  3890  00E2BE  6EF7               	movwf	tblptrh,c
  3891  00E2C0                     	if	0	;There are less than 3 active tblptr bytes
  3892  00E2C0                     	endif
  3893  00E2C0  0008               	tblrd		*
  3894  00E2C2  50F5               	movf	tablat,w,c
  3895  00E2C4  ECB9  F06E         	call	_putch
  3896                           
  3897                           ;standbyMode.c: 497: foodTable[count] = keypress + 1;
  3898  00E2C8  502F               	movf	food_press@keypress,w,c
  3899  00E2CA  6E1D               	movwf	??_food_press& (0+255),c
  3900  00E2CC  6A1E               	clrf	(??_food_press+1)& (0+255),c
  3901  00E2CE  0E01               	movlw	1
  3902  00E2D0  261D               	addwf	??_food_press,f,c
  3903  00E2D2  0E00               	movlw	0
  3904  00E2D4  221E               	addwfc	??_food_press+1,f,c
  3905  00E2D6  90D8               	bcf	status,0,c
  3906  00E2D8  3425               	rlcf	food_press@count,w,c
  3907  00E2DA  6ED9               	movwf	fsr2l,c
  3908  00E2DC  3426               	rlcf	food_press@count+1,w,c
  3909  00E2DE  6EDA               	movwf	fsr2h,c
  3910  00E2E0  0E27               	movlw	low food_press@foodTable
  3911  00E2E2  26D9               	addwf	fsr2l,f,c
  3912  00E2E4  0E00               	movlw	high food_press@foodTable
  3913  00E2E6  22DA               	addwfc	fsr2h,f,c
  3914  00E2E8  C01D  FFDE         	movff	??_food_press,postinc2
  3915  00E2EC  C01E  FFDD         	movff	??_food_press+1,postdec2
  3916                           
  3917                           ;standbyMode.c: 498: count += 1;
  3918  00E2F0  4A25               	infsnz	food_press@count,f,c
  3919  00E2F2  2A26               	incf	food_press@count+1,f,c
  3920                           
  3921                           ;standbyMode.c: 499: }
  3922                           ;standbyMode.c: 500: }
  3923  00E2F4  D7B8               	goto	l278
  3924  00E2F6                     l290:
  3925                           
  3926                           ;standbyMode.c: 501: else if (keypress == 12){
  3927  00E2F6  0E0C               	movlw	12
  3928  00E2F8  182F               	xorwf	food_press@keypress,w,c
  3929  00E2FA  A4D8               	btfss	status,2,c
  3930  00E2FC  D7B4               	goto	l278
  3931                           
  3932                           ;standbyMode.c: 502: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3933  00E2FE  0E01               	movlw	1
  3934  00E300  ECAF  F06E         	call	_lcdInst
  3935  00E304  0EC3               	movlw	195
  3936  00E306  6E1D               	movwf	??_food_press& (0+255),c
  3937  00E308  0ECD               	movlw	205
  3938  00E30A                     u6047:
  3939  00E30A  2EE8               	decfsz	wreg,f,c
  3940  00E30C  D7FE               	bra	u6047
  3941  00E30E  2E1D               	decfsz	??_food_press& (0+255),f,c
  3942  00E310  D7FC               	bra	u6047
  3943  00E312  F000               	nop	
  3944                           
  3945                           ;standbyMode.c: 503: printf("Drawer %i food:", drawer);
  3946  00E314  0E5F               	movlw	low STR_19
  3947  00E316  6E0D               	movwf	printf@f,c
  3948  00E318  0EFE               	movlw	high STR_19
  3949  00E31A  6E0E               	movwf	printf@f+1,c
  3950  00E31C  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3951  00E320  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3952  00E324  EC69  F070         	call	_printf	;wreg free
  3953                           
  3954                           ;standbyMode.c: 504: lcdInst(0xC0);;
  3955  00E328  0EC0               	movlw	192
  3956  00E32A  ECAF  F06E         	call	_lcdInst
  3957                           
  3958                           ;standbyMode.c: 505: count = 0;
  3959  00E32E  0E00               	movlw	0
  3960  00E330  6E26               	movwf	food_press@count+1,c
  3961  00E332  0E00               	movlw	0
  3962  00E334  6E25               	movwf	food_press@count,c
  3963                           
  3964                           ;standbyMode.c: 506: foodTable[0] = 0;
  3965  00E336  0E00               	movlw	0
  3966  00E338  6E28               	movwf	food_press@foodTable+1,c
  3967  00E33A  0E00               	movlw	0
  3968  00E33C  6E27               	movwf	food_press@foodTable,c
  3969                           
  3970                           ;standbyMode.c: 507: foodTable[1] = 0;
  3971  00E33E  0E00               	movlw	0
  3972  00E340  6E2A               	movwf	food_press@foodTable+3,c
  3973  00E342  0E00               	movlw	0
  3974  00E344  6E29               	movwf	food_press@foodTable+2,c
  3975                           
  3976                           ;standbyMode.c: 508: foodTable[2] = 0;
  3977  00E346  0E00               	movlw	0
  3978  00E348  6E2C               	movwf	food_press@foodTable+5,c
  3979  00E34A  0E00               	movlw	0
  3980  00E34C  6E2B               	movwf	food_press@foodTable+4,c
  3981                           
  3982                           ;standbyMode.c: 509: foodTable[3] = 0;
  3983  00E34E  0E00               	movlw	0
  3984  00E350  6E2E               	movwf	food_press@foodTable+7,c
  3985  00E352  0E00               	movlw	0
  3986  00E354  6E2D               	movwf	food_press@foodTable+6,c
  3987  00E356  D787               	goto	l278
  3988  00E358                     l286:
  3989                           
  3990                           ;standbyMode.c: 510: }
  3991                           ;standbyMode.c: 511: }
  3992                           ;standbyMode.c: 513: if (backCheck == 1){
  3993  00E358  0421               	decf	food_press@backCheck,w,c
  3994  00E35A  1022               	iorwf	food_press@backCheck+1,w,c
  3995  00E35C  A4D8               	btfss	status,2,c
  3996  00E35E  D005               	goto	l297
  3997                           
  3998                           ;standbyMode.c: 514: return 100;
  3999  00E360  0E00               	movlw	0
  4000  00E362  6E1A               	movwf	?_food_press+1,c
  4001  00E364  0E64               	movlw	100
  4002  00E366  6E19               	movwf	?_food_press,c
  4003                           
  4004                           ;standbyMode.c: 515: }
  4005  00E368  0012               	return	
  4006  00E36A                     l297:
  4007                           
  4008                           ;standbyMode.c: 516: else {
  4009                           ;standbyMode.c: 517: isValid = check_food(dietSum, foodTable);
  4010  00E36A  C019  F001         	movff	food_press@dietSum,check_food@sum
  4011  00E36E  C01A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  4012  00E372  0E27               	movlw	low food_press@foodTable
  4013  00E374  6E03               	movwf	check_food@foodInput,c
  4014  00E376  0E00               	movlw	high food_press@foodTable
  4015  00E378  6E04               	movwf	check_food@foodInput+1,c
  4016  00E37A  ECDC  F07A         	call	_check_food	;wreg free
  4017  00E37E  C001  F023         	movff	?_check_food,food_press@isValid
  4018  00E382  C002  F024         	movff	?_check_food+1,food_press@isValid+1
  4019                           
  4020                           ;standbyMode.c: 519: if (isValid == 0){
  4021  00E386  5023               	movf	food_press@isValid,w,c
  4022  00E388  1024               	iorwf	food_press@isValid+1,w,c
  4023  00E38A  A4D8               	btfss	status,2,c
  4024  00E38C  D026               	goto	l300
  4025                           
  4026                           ;standbyMode.c: 520: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4027  00E38E  0E01               	movlw	1
  4028  00E390  ECAF  F06E         	call	_lcdInst
  4029  00E394  0EC3               	movlw	195
  4030  00E396  6E1D               	movwf	??_food_press& (0+255),c
  4031  00E398  0ECD               	movlw	205
  4032  00E39A                     u6057:
  4033  00E39A  2EE8               	decfsz	wreg,f,c
  4034  00E39C  D7FE               	bra	u6057
  4035  00E39E  2E1D               	decfsz	??_food_press& (0+255),f,c
  4036  00E3A0  D7FC               	bra	u6057
  4037  00E3A2  F000               	nop	
  4038                           
  4039                           ;standbyMode.c: 521: printf("Invalid food!");
  4040  00E3A4  0E2C               	movlw	low STR_21
  4041  00E3A6  6E0D               	movwf	printf@f,c
  4042  00E3A8  0EFF               	movlw	high STR_21
  4043  00E3AA  6E0E               	movwf	printf@f+1,c
  4044  00E3AC  EC69  F070         	call	_printf	;wreg free
  4045                           
  4046                           ;standbyMode.c: 522: lcdInst(0xC0);;
  4047  00E3B0  0EC0               	movlw	192
  4048  00E3B2  ECAF  F06E         	call	_lcdInst
  4049                           
  4050                           ;standbyMode.c: 523: printf("Try again.");
  4051  00E3B6  0EAB               	movlw	low STR_22
  4052  00E3B8  6E0D               	movwf	printf@f,c
  4053  00E3BA  0EFF               	movlw	high STR_22
  4054  00E3BC  6E0E               	movwf	printf@f+1,c
  4055  00E3BE  EC69  F070         	call	_printf	;wreg free
  4056                           
  4057                           ;standbyMode.c: 524: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4058  00E3C2  0E33               	movlw	51
  4059  00E3C4  6E1E               	movwf	(??_food_press+1)& (0+255),c
  4060  00E3C6  0EBB               	movlw	187
  4061  00E3C8  6E1D               	movwf	??_food_press& (0+255),c
  4062  00E3CA  0EE0               	movlw	224
  4063  00E3CC                     u6067:
  4064  00E3CC  2EE8               	decfsz	wreg,f,c
  4065  00E3CE  D7FE               	bra	u6067
  4066  00E3D0  2E1D               	decfsz	??_food_press& (0+255),f,c
  4067  00E3D2  D7FC               	bra	u6067
  4068  00E3D4  2E1E               	decfsz	(??_food_press+1)& (0+255),f,c
  4069  00E3D6  D7FA               	bra	u6067
  4070                           
  4071                           ;standbyMode.c: 525: goto START;
  4072  00E3D8  D70B               	goto	_food_press
  4073  00E3DA                     l300:
  4074                           
  4075                           ;standbyMode.c: 527: else {
  4076                           ;standbyMode.c: 528: return isValid;
  4077  00E3DA  C023  F019         	movff	food_press@isValid,?_food_press
  4078  00E3DE  C024  F01A         	movff	food_press@isValid+1,?_food_press+1
  4079  00E3E2  0012               	return	
  4080  00E3E4                     __end_of_food_press:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           plusw1	equ	0xFE3
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           plusw2	equ	0xFDB
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _get_digits *****************
  4099 ;; Defined at:
  4100 ;;		line 364 in file "standbyMode.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  sum             2    0[COMRAM] unsigned int 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  count           2    4[COMRAM] unsigned int 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  2    0[COMRAM] unsigned int 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4114 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;Total ram usage:        6 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_food_press
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text6
  4128  00DF32                     __ptext6:
  4129                           	opt stack 0
  4130  00DF32                     _get_digits:
  4131                           	opt stack 28
  4132                           
  4133                           ;standbyMode.c: 366: unsigned int count = 0;
  4134                           
  4135                           ;incstack = 0
  4136  00DF32  0E00               	movlw	0
  4137  00DF34  6E06               	movwf	get_digits@count+1,c
  4138  00DF36  0E00               	movlw	0
  4139  00DF38  6E05               	movwf	get_digits@count,c
  4140                           
  4141                           ;standbyMode.c: 368: switch(sum){
  4142  00DF3A  D015               	goto	l251
  4143  00DF3C                     
  4144                           ;standbyMode.c: 381: count = 1;
  4145                           
  4146                           ;standbyMode.c: 380: case 12:
  4147                           
  4148                           ;standbyMode.c: 377: break;
  4149                           
  4150                           ;standbyMode.c: 376: count = 1;
  4151                           
  4152                           ;standbyMode.c: 375: case 7:
  4153                           
  4154                           ;standbyMode.c: 372: break;
  4155                           
  4156                           ;standbyMode.c: 371: count = 1;
  4157  00DF3C  0E00               	movlw	0
  4158  00DF3E  6E06               	movwf	get_digits@count+1,c
  4159  00DF40  0E01               	movlw	1
  4160  00DF42                     L15:
  4161  00DF42  6E05               	movwf	get_digits@count,c
  4162                           
  4163                           ;standbyMode.c: 387: break;
  4164  00DF44  D050               	goto	l253
  4165  00DF46                     
  4166                           ;standbyMode.c: 396: count = 2;
  4167                           
  4168                           ;standbyMode.c: 395: case 19:
  4169                           
  4170                           ;standbyMode.c: 392: break;
  4171                           
  4172                           ;standbyMode.c: 391: count = 2;
  4173  00DF46  0E00               	movlw	0
  4174  00DF48  6E06               	movwf	get_digits@count+1,c
  4175  00DF4A  0E02               	movlw	2
  4176  00DF4C  D7FA               	goto	L15
  4177  00DF4E                     
  4178                           ;standbyMode.c: 431: count = 3;
  4179                           
  4180                           ;standbyMode.c: 430: case 31:
  4181                           
  4182                           ;standbyMode.c: 427: break;
  4183                           
  4184                           ;standbyMode.c: 426: count = 3;
  4185                           
  4186                           ;standbyMode.c: 425: case 26:
  4187                           
  4188                           ;standbyMode.c: 422: break;
  4189                           
  4190                           ;standbyMode.c: 421: count = 3;
  4191                           
  4192                           ;standbyMode.c: 420: case 22:
  4193                           
  4194                           ;standbyMode.c: 417: break;
  4195                           
  4196                           ;standbyMode.c: 416: count = 3;
  4197                           
  4198                           ;standbyMode.c: 415: case 27:
  4199                           
  4200                           ;standbyMode.c: 412: break;
  4201                           
  4202                           ;standbyMode.c: 411: count = 3;
  4203                           
  4204                           ;standbyMode.c: 410: case 17:
  4205                           
  4206                           ;standbyMode.c: 407: break;
  4207                           
  4208                           ;standbyMode.c: 406: count = 3;
  4209                           
  4210                           ;standbyMode.c: 405: case 18:
  4211                           
  4212                           ;standbyMode.c: 402: break;
  4213                           
  4214                           ;standbyMode.c: 401: count = 3;
  4215  00DF4E  0E00               	movlw	0
  4216  00DF50  6E06               	movwf	get_digits@count+1,c
  4217  00DF52  0E03               	movlw	3
  4218  00DF54  D7F6               	goto	L15
  4219  00DF56                     
  4220                           ;standbyMode.c: 456: count = 4;
  4221                           
  4222                           ;standbyMode.c: 455: case 43:
  4223                           
  4224                           ;standbyMode.c: 452: break;
  4225                           
  4226                           ;standbyMode.c: 451: count = 4;
  4227                           
  4228                           ;standbyMode.c: 450: case 39:
  4229                           
  4230                           ;standbyMode.c: 447: break;
  4231                           
  4232                           ;standbyMode.c: 446: count = 4;
  4233                           
  4234                           ;standbyMode.c: 445: case 34:
  4235                           
  4236                           ;standbyMode.c: 442: break;
  4237                           
  4238                           ;standbyMode.c: 441: count = 4;
  4239                           
  4240                           ;standbyMode.c: 440: case 29:
  4241                           
  4242                           ;standbyMode.c: 437: break;
  4243                           
  4244                           ;standbyMode.c: 436: count = 4;
  4245  00DF56  0E00               	movlw	0
  4246  00DF58  6E06               	movwf	get_digits@count+1,c
  4247  00DF5A  0E04               	movlw	4
  4248  00DF5C  D7F2               	goto	L15
  4249  00DF5E                     
  4250                           ;standbyMode.c: 461: count = 0;
  4251  00DF5E  0E00               	movlw	0
  4252  00DF60  6E06               	movwf	get_digits@count+1,c
  4253  00DF62  0E00               	movlw	0
  4254  00DF64  D7EE               	goto	L15
  4255  00DF66                     l251:
  4256  00DF66  C001  F003         	movff	get_digits@sum,??_get_digits
  4257  00DF6A  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  4258                           
  4259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4260                           ; Switch size 1, requested type "space"
  4261                           ; Number of cases is 1, Range of values is 0 to 0
  4262                           ; switch strategies available:
  4263                           ; Name         Instructions Cycles
  4264                           ; simple_byte            4     3 (average)
  4265                           ;	Chosen strategy is simple_byte
  4266  00DF6E  5004               	movf	??_get_digits+1,w,c
  4267  00DF70  0A00               	xorlw	0	; case 0
  4268  00DF72  A4D8               	btfss	status,2,c
  4269  00DF74  D7F4               	goto	l271
  4270                           
  4271                           ; Switch size 1, requested type "space"
  4272                           ; Number of cases is 18, Range of values is 3 to 43
  4273                           ; switch strategies available:
  4274                           ; Name         Instructions Cycles
  4275                           ; simple_byte           55    28 (average)
  4276                           ;	Chosen strategy is simple_byte
  4277  00DF76  5003               	movf	??_get_digits,w,c
  4278  00DF78  0A03               	xorlw	3	; case 3
  4279  00DF7A  B4D8               	btfsc	status,2,c
  4280  00DF7C  D7DF               	goto	l252
  4281  00DF7E  0A04               	xorlw	4	; case 7
  4282  00DF80  B4D8               	btfsc	status,2,c
  4283  00DF82  D7DC               	goto	l252
  4284  00DF84  0A0D               	xorlw	13	; case 10
  4285  00DF86  B4D8               	btfsc	status,2,c
  4286  00DF88  D7DE               	goto	l257
  4287  00DF8A  0A06               	xorlw	6	; case 12
  4288  00DF8C  B4D8               	btfsc	status,2,c
  4289  00DF8E  D7D6               	goto	l252
  4290  00DF90  0A01               	xorlw	1	; case 13
  4291  00DF92  B4D8               	btfsc	status,2,c
  4292  00DF94  D7DC               	goto	l259
  4293  00DF96  0A02               	xorlw	2	; case 15
  4294  00DF98  B4D8               	btfsc	status,2,c
  4295  00DF9A  D7D5               	goto	l257
  4296  00DF9C  0A1E               	xorlw	30	; case 17
  4297  00DF9E  B4D8               	btfsc	status,2,c
  4298  00DFA0  D7D6               	goto	l259
  4299  00DFA2  0A03               	xorlw	3	; case 18
  4300  00DFA4  B4D8               	btfsc	status,2,c
  4301  00DFA6  D7D3               	goto	l259
  4302  00DFA8  0A01               	xorlw	1	; case 19
  4303  00DFAA  B4D8               	btfsc	status,2,c
  4304  00DFAC  D7CC               	goto	l257
  4305  00DFAE  0A05               	xorlw	5	; case 22
  4306  00DFB0  B4D8               	btfsc	status,2,c
  4307  00DFB2  D7CD               	goto	l259
  4308  00DFB4  0A0F               	xorlw	15	; case 25
  4309  00DFB6  B4D8               	btfsc	status,2,c
  4310  00DFB8  D7CE               	goto	l266
  4311  00DFBA  0A03               	xorlw	3	; case 26
  4312  00DFBC  B4D8               	btfsc	status,2,c
  4313  00DFBE  D7C7               	goto	l259
  4314  00DFC0  0A01               	xorlw	1	; case 27
  4315  00DFC2  B4D8               	btfsc	status,2,c
  4316  00DFC4  D7C4               	goto	l259
  4317  00DFC6  0A06               	xorlw	6	; case 29
  4318  00DFC8  B4D8               	btfsc	status,2,c
  4319  00DFCA  D7C5               	goto	l266
  4320  00DFCC  0A02               	xorlw	2	; case 31
  4321  00DFCE  B4D8               	btfsc	status,2,c
  4322  00DFD0  D7BE               	goto	l259
  4323  00DFD2  0A3D               	xorlw	61	; case 34
  4324  00DFD4  B4D8               	btfsc	status,2,c
  4325  00DFD6  D7BF               	goto	l266
  4326  00DFD8  0A05               	xorlw	5	; case 39
  4327  00DFDA  B4D8               	btfsc	status,2,c
  4328  00DFDC  D7BC               	goto	l266
  4329  00DFDE  0A0C               	xorlw	12	; case 43
  4330  00DFE0  B4D8               	btfsc	status,2,c
  4331  00DFE2  D7B9               	goto	l266
  4332  00DFE4  D7BC               	goto	l271
  4333  00DFE6                     l253:
  4334                           
  4335                           ;standbyMode.c: 464: return count;
  4336  00DFE6  C005  F001         	movff	get_digits@count,?_get_digits
  4337  00DFEA  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  4338  00DFEE  0012               	return		;funcret
  4339  00DFF0                     __end_of_get_digits:
  4340                           	opt stack 0
  4341                           tblptru	equ	0xFF8
  4342                           tblptrh	equ	0xFF7
  4343                           tblptrl	equ	0xFF6
  4344                           tablat	equ	0xFF5
  4345                           prodh	equ	0xFF4
  4346                           prodl	equ	0xFF3
  4347                           postinc0	equ	0xFEE
  4348                           wreg	equ	0xFE8
  4349                           plusw1	equ	0xFE3
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           plusw2	equ	0xFDB
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function _check_food *****************
  4358 ;; Defined at:
  4359 ;;		line 87 in file "standbyMode.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  sum             2    0[COMRAM] unsigned int 
  4362 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  4363 ;;		 -> food_press@foodTable(8), 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  returnValue     2    6[COMRAM] unsigned int 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  2    0[COMRAM] unsigned int 
  4368 ;; Registers used:
  4369 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;Total ram usage:        8 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_food_press
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text7
  4389  00F5B8                     __ptext7:
  4390                           	opt stack 0
  4391  00F5B8                     _check_food:
  4392                           	opt stack 28
  4393                           
  4394                           ;standbyMode.c: 89: unsigned int returnValue = 0;
  4395                           
  4396                           ;incstack = 0
  4397  00F5B8  0E00               	movlw	0
  4398  00F5BA  6E08               	movwf	check_food@returnValue+1,c
  4399  00F5BC  0E00               	movlw	0
  4400  00F5BE  6E07               	movwf	check_food@returnValue,c
  4401                           
  4402                           ;standbyMode.c: 91: switch(sum){
  4403  00F5C0  D3AE               	goto	l131
  4404  00F5C2                     
  4405                           ;standbyMode.c: 94: if (foodInput[0] == 1 || foodInput[0] == 2){
  4406  00F5C2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4407  00F5C6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4408  00F5CA  04DE               	decf	postinc2,w,c
  4409  00F5CC  10DE               	iorwf	postinc2,w,c
  4410  00F5CE  B4D8               	btfsc	status,2,c
  4411  00F5D0  D009               	goto	u2850
  4412  00F5D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4413  00F5D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4414  00F5DA  0E02               	movlw	2
  4415  00F5DC  18DE               	xorwf	postinc2,w,c
  4416  00F5DE  10DE               	iorwf	postinc2,w,c
  4417  00F5E0  A4D8               	btfss	status,2,c
  4418  00F5E2  D3DC               	goto	l136
  4419  00F5E4                     u2850:
  4420                           
  4421                           ;standbyMode.c: 95: returnValue = 1;
  4422  00F5E4  0E00               	movlw	0
  4423  00F5E6  6E08               	movwf	check_food@returnValue+1,c
  4424  00F5E8  0E01               	movlw	1
  4425  00F5EA  D151               	goto	L24
  4426  00F5EC                     
  4427                           ;standbyMode.c: 101: if (foodInput[0] == 1 || foodInput[0] == 2){
  4428  00F5EC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4429  00F5F0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4430  00F5F4  04DE               	decf	postinc2,w,c
  4431  00F5F6  10DE               	iorwf	postinc2,w,c
  4432  00F5F8  B4D8               	btfsc	status,2,c
  4433  00F5FA  D009               	goto	u2870
  4434  00F5FC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4435  00F600  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4436  00F604  0E02               	movlw	2
  4437  00F606  18DE               	xorwf	postinc2,w,c
  4438  00F608  10DE               	iorwf	postinc2,w,c
  4439  00F60A  A4D8               	btfss	status,2,c
  4440  00F60C  D3C7               	goto	l136
  4441  00F60E                     u2870:
  4442                           
  4443                           ;standbyMode.c: 102: returnValue = 2;
  4444  00F60E  0E00               	movlw	0
  4445  00F610  6E08               	movwf	check_food@returnValue+1,c
  4446  00F612  0E02               	movlw	2
  4447  00F614  D13C               	goto	L24
  4448  00F616                     
  4449                           ;standbyMode.c: 108: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  4450  00F616  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4451  00F61A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4452  00F61E  04DE               	decf	postinc2,w,c
  4453  00F620  10DE               	iorwf	postinc2,w,c
  4454  00F622  B4D8               	btfsc	status,2,c
  4455  00F624  D012               	goto	u2900
  4456  00F626  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4457  00F62A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4458  00F62E  0E02               	movlw	2
  4459  00F630  18DE               	xorwf	postinc2,w,c
  4460  00F632  10DE               	iorwf	postinc2,w,c
  4461  00F634  B4D8               	btfsc	status,2,c
  4462  00F636  D009               	goto	u2900
  4463  00F638  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4464  00F63C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4465  00F640  0E03               	movlw	3
  4466  00F642  18DE               	xorwf	postinc2,w,c
  4467  00F644  10DE               	iorwf	postinc2,w,c
  4468  00F646  A4D8               	btfss	status,2,c
  4469  00F648  D3A9               	goto	l136
  4470  00F64A                     u2900:
  4471                           
  4472                           ;standbyMode.c: 109: returnValue = 3;
  4473  00F64A  0E00               	movlw	0
  4474  00F64C  6E08               	movwf	check_food@returnValue+1,c
  4475  00F64E  0E03               	movlw	3
  4476  00F650  D11E               	goto	L24
  4477  00F652                     
  4478                           ;standbyMode.c: 115: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  4479  00F652  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4480  00F656  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4481  00F65A  0E03               	movlw	3
  4482  00F65C  18DE               	xorwf	postinc2,w,c
  4483  00F65E  10DE               	iorwf	postinc2,w,c
  4484  00F660  B4D8               	btfsc	status,2,c
  4485  00F662  D39C               	goto	l136
  4486  00F664  EE20 F002          	lfsr	2,2
  4487  00F668  5003               	movf	check_food@foodInput,w,c
  4488  00F66A  26D9               	addwf	fsr2l,f,c
  4489  00F66C  5004               	movf	check_food@foodInput+1,w,c
  4490  00F66E  22DA               	addwfc	fsr2h,f,c
  4491  00F670  0E03               	movlw	3
  4492  00F672  18DE               	xorwf	postinc2,w,c
  4493  00F674  10DE               	iorwf	postinc2,w,c
  4494  00F676  B4D8               	btfsc	status,2,c
  4495  00F678  D391               	goto	l136
  4496  00F67A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4497  00F67E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4498  00F682  50DE               	movf	postinc2,w,c
  4499  00F684  10DE               	iorwf	postinc2,w,c
  4500  00F686  B4D8               	btfsc	status,2,c
  4501  00F688  D389               	goto	l136
  4502  00F68A  EE20 F002          	lfsr	2,2
  4503  00F68E  5003               	movf	check_food@foodInput,w,c
  4504  00F690  26D9               	addwf	fsr2l,f,c
  4505  00F692  5004               	movf	check_food@foodInput+1,w,c
  4506  00F694  22DA               	addwfc	fsr2h,f,c
  4507  00F696  50DE               	movf	postinc2,w,c
  4508  00F698  10DE               	iorwf	postinc2,w,c
  4509  00F69A  B4D8               	btfsc	status,2,c
  4510  00F69C  D37F               	goto	l136
  4511                           
  4512                           ;standbyMode.c: 116: returnValue = 4;
  4513  00F69E  0E00               	movlw	0
  4514  00F6A0  6E08               	movwf	check_food@returnValue+1,c
  4515  00F6A2  0E04               	movlw	4
  4516  00F6A4  D0F4               	goto	L24
  4517  00F6A6                     
  4518                           ;standbyMode.c: 122: if (foodInput[1] == 3){
  4519  00F6A6  EE20 F002          	lfsr	2,2
  4520  00F6AA  5003               	movf	check_food@foodInput,w,c
  4521  00F6AC  26D9               	addwf	fsr2l,f,c
  4522  00F6AE  5004               	movf	check_food@foodInput+1,w,c
  4523  00F6B0  22DA               	addwfc	fsr2h,f,c
  4524  00F6B2  0E03               	movlw	3
  4525  00F6B4  18DE               	xorwf	postinc2,w,c
  4526  00F6B6  10DE               	iorwf	postinc2,w,c
  4527  00F6B8  A4D8               	btfss	status,2,c
  4528  00F6BA  D00C               	goto	l148
  4529                           
  4530                           ;standbyMode.c: 123: if (foodInput[0] == 1){
  4531  00F6BC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4532  00F6C0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4533  00F6C4  04DE               	decf	postinc2,w,c
  4534  00F6C6  10DE               	iorwf	postinc2,w,c
  4535  00F6C8  A4D8               	btfss	status,2,c
  4536  00F6CA  D368               	goto	l136
  4537                           
  4538                           ;standbyMode.c: 124: returnValue = 5;
  4539  00F6CC  0E00               	movlw	0
  4540  00F6CE  6E08               	movwf	check_food@returnValue+1,c
  4541  00F6D0  0E05               	movlw	5
  4542  00F6D2  D0DD               	goto	L24
  4543  00F6D4                     l148:
  4544                           
  4545                           ;standbyMode.c: 127: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4546  00F6D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4547  00F6D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4548  00F6DC  0E03               	movlw	3
  4549  00F6DE  18DE               	xorwf	postinc2,w,c
  4550  00F6E0  10DE               	iorwf	postinc2,w,c
  4551  00F6E2  B4D8               	btfsc	status,2,c
  4552  00F6E4  D35B               	goto	l136
  4553  00F6E6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4554  00F6EA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4555  00F6EE  50DE               	movf	postinc2,w,c
  4556  00F6F0  10DE               	iorwf	postinc2,w,c
  4557  00F6F2  B4D8               	btfsc	status,2,c
  4558  00F6F4  D353               	goto	l136
  4559                           
  4560                           ;standbyMode.c: 128: returnValue = 5;
  4561  00F6F6  0E00               	movlw	0
  4562  00F6F8  6E08               	movwf	check_food@returnValue+1,c
  4563  00F6FA  0E05               	movlw	5
  4564  00F6FC  D0C8               	goto	L24
  4565  00F6FE                     
  4566                           ;standbyMode.c: 134: if (foodInput[1] == 3){
  4567  00F6FE  EE20 F002          	lfsr	2,2
  4568  00F702  5003               	movf	check_food@foodInput,w,c
  4569  00F704  26D9               	addwf	fsr2l,f,c
  4570  00F706  5004               	movf	check_food@foodInput+1,w,c
  4571  00F708  22DA               	addwfc	fsr2h,f,c
  4572  00F70A  0E03               	movlw	3
  4573  00F70C  18DE               	xorwf	postinc2,w,c
  4574  00F70E  10DE               	iorwf	postinc2,w,c
  4575  00F710  A4D8               	btfss	status,2,c
  4576  00F712  D00C               	goto	l153
  4577                           
  4578                           ;standbyMode.c: 135: if (foodInput[0] == 1){
  4579  00F714  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4580  00F718  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4581  00F71C  04DE               	decf	postinc2,w,c
  4582  00F71E  10DE               	iorwf	postinc2,w,c
  4583  00F720  A4D8               	btfss	status,2,c
  4584  00F722  D33C               	goto	l136
  4585                           
  4586                           ;standbyMode.c: 136: returnValue = 6;
  4587  00F724  0E00               	movlw	0
  4588  00F726  6E08               	movwf	check_food@returnValue+1,c
  4589  00F728  0E06               	movlw	6
  4590  00F72A  D0B1               	goto	L24
  4591  00F72C                     l153:
  4592                           
  4593                           ;standbyMode.c: 139: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4594  00F72C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4595  00F730  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4596  00F734  0E03               	movlw	3
  4597  00F736  18DE               	xorwf	postinc2,w,c
  4598  00F738  10DE               	iorwf	postinc2,w,c
  4599  00F73A  B4D8               	btfsc	status,2,c
  4600  00F73C  D32F               	goto	l136
  4601  00F73E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4602  00F742  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4603  00F746  50DE               	movf	postinc2,w,c
  4604  00F748  10DE               	iorwf	postinc2,w,c
  4605  00F74A  B4D8               	btfsc	status,2,c
  4606  00F74C  D327               	goto	l136
  4607                           
  4608                           ;standbyMode.c: 140: returnValue = 6;
  4609  00F74E  0E00               	movlw	0
  4610  00F750  6E08               	movwf	check_food@returnValue+1,c
  4611  00F752  0E06               	movlw	6
  4612  00F754  D09C               	goto	L24
  4613  00F756                     
  4614                           ;standbyMode.c: 146: if (foodInput[0] == 1 && foodInput[1] == 1){
  4615  00F756  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4616  00F75A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4617  00F75E  04DE               	decf	postinc2,w,c
  4618  00F760  10DE               	iorwf	postinc2,w,c
  4619  00F762  A4D8               	btfss	status,2,c
  4620  00F764  D31B               	goto	l136
  4621  00F766  EE20 F002          	lfsr	2,2
  4622  00F76A  5003               	movf	check_food@foodInput,w,c
  4623  00F76C  26D9               	addwf	fsr2l,f,c
  4624  00F76E  5004               	movf	check_food@foodInput+1,w,c
  4625  00F770  22DA               	addwfc	fsr2h,f,c
  4626  00F772  04DE               	decf	postinc2,w,c
  4627  00F774  10DE               	iorwf	postinc2,w,c
  4628  00F776  A4D8               	btfss	status,2,c
  4629  00F778  D311               	goto	l136
  4630                           
  4631                           ;standbyMode.c: 147: if (foodInput[2] == 1 || foodInput[2] == 2){
  4632  00F77A  EE20 F004          	lfsr	2,4
  4633  00F77E  5003               	movf	check_food@foodInput,w,c
  4634  00F780  26D9               	addwf	fsr2l,f,c
  4635  00F782  5004               	movf	check_food@foodInput+1,w,c
  4636  00F784  22DA               	addwfc	fsr2h,f,c
  4637  00F786  04DE               	decf	postinc2,w,c
  4638  00F788  10DE               	iorwf	postinc2,w,c
  4639  00F78A  B4D8               	btfsc	status,2,c
  4640  00F78C  D00B               	goto	u3060
  4641  00F78E  EE20 F004          	lfsr	2,4
  4642  00F792  5003               	movf	check_food@foodInput,w,c
  4643  00F794  26D9               	addwf	fsr2l,f,c
  4644  00F796  5004               	movf	check_food@foodInput+1,w,c
  4645  00F798  22DA               	addwfc	fsr2h,f,c
  4646  00F79A  0E02               	movlw	2
  4647  00F79C  18DE               	xorwf	postinc2,w,c
  4648  00F79E  10DE               	iorwf	postinc2,w,c
  4649  00F7A0  A4D8               	btfss	status,2,c
  4650  00F7A2  D2FC               	goto	l136
  4651  00F7A4                     u3060:
  4652                           
  4653                           ;standbyMode.c: 148: returnValue = 7;
  4654  00F7A4  0E00               	movlw	0
  4655  00F7A6  6E08               	movwf	check_food@returnValue+1,c
  4656  00F7A8  0E07               	movlw	7
  4657  00F7AA  D071               	goto	L24
  4658  00F7AC                     
  4659                           ;standbyMode.c: 155: if (foodInput[0] == 1 && foodInput[1] == 1){
  4660  00F7AC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4661  00F7B0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4662  00F7B4  04DE               	decf	postinc2,w,c
  4663  00F7B6  10DE               	iorwf	postinc2,w,c
  4664  00F7B8  A4D8               	btfss	status,2,c
  4665  00F7BA  D2F0               	goto	l136
  4666  00F7BC  EE20 F002          	lfsr	2,2
  4667  00F7C0  5003               	movf	check_food@foodInput,w,c
  4668  00F7C2  26D9               	addwf	fsr2l,f,c
  4669  00F7C4  5004               	movf	check_food@foodInput+1,w,c
  4670  00F7C6  22DA               	addwfc	fsr2h,f,c
  4671  00F7C8  04DE               	decf	postinc2,w,c
  4672  00F7CA  10DE               	iorwf	postinc2,w,c
  4673  00F7CC  A4D8               	btfss	status,2,c
  4674  00F7CE  D2E6               	goto	l136
  4675                           
  4676                           ;standbyMode.c: 156: if (foodInput[2] == 1 || foodInput[2] == 2){
  4677  00F7D0  EE20 F004          	lfsr	2,4
  4678  00F7D4  5003               	movf	check_food@foodInput,w,c
  4679  00F7D6  26D9               	addwf	fsr2l,f,c
  4680  00F7D8  5004               	movf	check_food@foodInput+1,w,c
  4681  00F7DA  22DA               	addwfc	fsr2h,f,c
  4682  00F7DC  04DE               	decf	postinc2,w,c
  4683  00F7DE  10DE               	iorwf	postinc2,w,c
  4684  00F7E0  B4D8               	btfsc	status,2,c
  4685  00F7E2  D00B               	goto	u3100
  4686  00F7E4  EE20 F004          	lfsr	2,4
  4687  00F7E8  5003               	movf	check_food@foodInput,w,c
  4688  00F7EA  26D9               	addwf	fsr2l,f,c
  4689  00F7EC  5004               	movf	check_food@foodInput+1,w,c
  4690  00F7EE  22DA               	addwfc	fsr2h,f,c
  4691  00F7F0  0E02               	movlw	2
  4692  00F7F2  18DE               	xorwf	postinc2,w,c
  4693  00F7F4  10DE               	iorwf	postinc2,w,c
  4694  00F7F6  A4D8               	btfss	status,2,c
  4695  00F7F8  D2D1               	goto	l136
  4696  00F7FA                     u3100:
  4697                           
  4698                           ;standbyMode.c: 157: returnValue = 8;
  4699  00F7FA  0E00               	movlw	0
  4700  00F7FC  6E08               	movwf	check_food@returnValue+1,c
  4701  00F7FE  0E08               	movlw	8
  4702  00F800  D046               	goto	L24
  4703  00F802                     
  4704                           ;standbyMode.c: 164: if (foodInput[1] == 1 && foodInput[2] == 1){
  4705  00F802  EE20 F002          	lfsr	2,2
  4706  00F806  5003               	movf	check_food@foodInput,w,c
  4707  00F808  26D9               	addwf	fsr2l,f,c
  4708  00F80A  5004               	movf	check_food@foodInput+1,w,c
  4709  00F80C  22DA               	addwfc	fsr2h,f,c
  4710  00F80E  04DE               	decf	postinc2,w,c
  4711  00F810  10DE               	iorwf	postinc2,w,c
  4712  00F812  A4D8               	btfss	status,2,c
  4713  00F814  D2C3               	goto	l136
  4714  00F816  EE20 F004          	lfsr	2,4
  4715  00F81A  5003               	movf	check_food@foodInput,w,c
  4716  00F81C  26D9               	addwf	fsr2l,f,c
  4717  00F81E  5004               	movf	check_food@foodInput+1,w,c
  4718  00F820  22DA               	addwfc	fsr2h,f,c
  4719  00F822  04DE               	decf	postinc2,w,c
  4720  00F824  10DE               	iorwf	postinc2,w,c
  4721  00F826  A4D8               	btfss	status,2,c
  4722  00F828  D2B9               	goto	l136
  4723                           
  4724                           ;standbyMode.c: 165: if (foodInput[0] == 1 || foodInput[0] == 2){
  4725  00F82A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4726  00F82E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4727  00F832  04DE               	decf	postinc2,w,c
  4728  00F834  10DE               	iorwf	postinc2,w,c
  4729  00F836  B4D8               	btfsc	status,2,c
  4730  00F838  D009               	goto	u3140
  4731  00F83A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4732  00F83E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4733  00F842  0E02               	movlw	2
  4734  00F844  18DE               	xorwf	postinc2,w,c
  4735  00F846  10DE               	iorwf	postinc2,w,c
  4736  00F848  A4D8               	btfss	status,2,c
  4737  00F84A  D2A8               	goto	l136
  4738  00F84C                     u3140:
  4739                           
  4740                           ;standbyMode.c: 166: returnValue = 9;
  4741  00F84C  0E00               	movlw	0
  4742  00F84E  6E08               	movwf	check_food@returnValue+1,c
  4743  00F850  0E09               	movlw	9
  4744  00F852  D01D               	goto	L24
  4745  00F854                     
  4746                           ;standbyMode.c: 173: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4747  00F854  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4748  00F858  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4749  00F85C  04DE               	decf	postinc2,w,c
  4750  00F85E  10DE               	iorwf	postinc2,w,c
  4751  00F860  A4D8               	btfss	status,2,c
  4752  00F862  D017               	goto	l173
  4753  00F864  EE20 F002          	lfsr	2,2
  4754  00F868  5003               	movf	check_food@foodInput,w,c
  4755  00F86A  26D9               	addwf	fsr2l,f,c
  4756  00F86C  5004               	movf	check_food@foodInput+1,w,c
  4757  00F86E  22DA               	addwfc	fsr2h,f,c
  4758  00F870  04DE               	decf	postinc2,w,c
  4759  00F872  10DE               	iorwf	postinc2,w,c
  4760  00F874  A4D8               	btfss	status,2,c
  4761  00F876  D00D               	goto	l173
  4762  00F878  EE20 F004          	lfsr	2,4
  4763  00F87C  5003               	movf	check_food@foodInput,w,c
  4764  00F87E  26D9               	addwf	fsr2l,f,c
  4765  00F880  5004               	movf	check_food@foodInput+1,w,c
  4766  00F882  22DA               	addwfc	fsr2h,f,c
  4767  00F884  04DE               	decf	postinc2,w,c
  4768  00F886  10DE               	iorwf	postinc2,w,c
  4769  00F888  A4D8               	btfss	status,2,c
  4770  00F88A  D003               	goto	l173
  4771  00F88C  D059               	goto	u3260
  4772  00F88E                     L24:
  4773  00F88E  6E07               	movwf	check_food@returnValue,c
  4774                           
  4775                           ;standbyMode.c: 175: }
  4776  00F890  D285               	goto	l136
  4777  00F892                     l173:
  4778                           
  4779                           ;standbyMode.c: 176: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4780  00F892  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4781  00F896  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4782  00F89A  0E02               	movlw	2
  4783  00F89C  18DE               	xorwf	postinc2,w,c
  4784  00F89E  10DE               	iorwf	postinc2,w,c
  4785  00F8A0  A4D8               	btfss	status,2,c
  4786  00F8A2  D014               	goto	l175
  4787  00F8A4  EE20 F002          	lfsr	2,2
  4788  00F8A8  5003               	movf	check_food@foodInput,w,c
  4789  00F8AA  26D9               	addwf	fsr2l,f,c
  4790  00F8AC  5004               	movf	check_food@foodInput+1,w,c
  4791  00F8AE  22DA               	addwfc	fsr2h,f,c
  4792  00F8B0  04DE               	decf	postinc2,w,c
  4793  00F8B2  10DE               	iorwf	postinc2,w,c
  4794  00F8B4  A4D8               	btfss	status,2,c
  4795  00F8B6  D00A               	goto	l175
  4796  00F8B8  EE20 F004          	lfsr	2,4
  4797  00F8BC  5003               	movf	check_food@foodInput,w,c
  4798  00F8BE  26D9               	addwf	fsr2l,f,c
  4799  00F8C0  5004               	movf	check_food@foodInput+1,w,c
  4800  00F8C2  22DA               	addwfc	fsr2h,f,c
  4801  00F8C4  04DE               	decf	postinc2,w,c
  4802  00F8C6  10DE               	iorwf	postinc2,w,c
  4803  00F8C8  B4D8               	btfsc	status,2,c
  4804  00F8CA  D03A               	goto	u3260
  4805  00F8CC                     l175:
  4806                           
  4807                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4808  00F8CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4809  00F8D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4810  00F8D4  04DE               	decf	postinc2,w,c
  4811  00F8D6  10DE               	iorwf	postinc2,w,c
  4812  00F8D8  A4D8               	btfss	status,2,c
  4813  00F8DA  D015               	goto	l177
  4814  00F8DC  EE20 F002          	lfsr	2,2
  4815  00F8E0  5003               	movf	check_food@foodInput,w,c
  4816  00F8E2  26D9               	addwf	fsr2l,f,c
  4817  00F8E4  5004               	movf	check_food@foodInput+1,w,c
  4818  00F8E6  22DA               	addwfc	fsr2h,f,c
  4819  00F8E8  0E02               	movlw	2
  4820  00F8EA  18DE               	xorwf	postinc2,w,c
  4821  00F8EC  10DE               	iorwf	postinc2,w,c
  4822  00F8EE  A4D8               	btfss	status,2,c
  4823  00F8F0  D00A               	goto	l177
  4824  00F8F2  EE20 F004          	lfsr	2,4
  4825  00F8F6  5003               	movf	check_food@foodInput,w,c
  4826  00F8F8  26D9               	addwf	fsr2l,f,c
  4827  00F8FA  5004               	movf	check_food@foodInput+1,w,c
  4828  00F8FC  22DA               	addwfc	fsr2h,f,c
  4829  00F8FE  04DE               	decf	postinc2,w,c
  4830  00F900  10DE               	iorwf	postinc2,w,c
  4831  00F902  B4D8               	btfsc	status,2,c
  4832  00F904  D01D               	goto	u3260
  4833  00F906                     l177:
  4834                           
  4835                           ;standbyMode.c: 182: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4836  00F906  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4837  00F90A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4838  00F90E  04DE               	decf	postinc2,w,c
  4839  00F910  10DE               	iorwf	postinc2,w,c
  4840  00F912  A4D8               	btfss	status,2,c
  4841  00F914  D243               	goto	l136
  4842  00F916  EE20 F002          	lfsr	2,2
  4843  00F91A  5003               	movf	check_food@foodInput,w,c
  4844  00F91C  26D9               	addwf	fsr2l,f,c
  4845  00F91E  5004               	movf	check_food@foodInput+1,w,c
  4846  00F920  22DA               	addwfc	fsr2h,f,c
  4847  00F922  04DE               	decf	postinc2,w,c
  4848  00F924  10DE               	iorwf	postinc2,w,c
  4849  00F926  A4D8               	btfss	status,2,c
  4850  00F928  D239               	goto	l136
  4851  00F92A  EE20 F004          	lfsr	2,4
  4852  00F92E  5003               	movf	check_food@foodInput,w,c
  4853  00F930  26D9               	addwf	fsr2l,f,c
  4854  00F932  5004               	movf	check_food@foodInput+1,w,c
  4855  00F934  22DA               	addwfc	fsr2h,f,c
  4856  00F936  0E02               	movlw	2
  4857  00F938  18DE               	xorwf	postinc2,w,c
  4858  00F93A  10DE               	iorwf	postinc2,w,c
  4859  00F93C  A4D8               	btfss	status,2,c
  4860  00F93E  D22E               	goto	l136
  4861  00F940                     u3260:
  4862                           
  4863                           ;standbyMode.c: 183: returnValue = 10;
  4864  00F940  0E00               	movlw	0
  4865  00F942  6E08               	movwf	check_food@returnValue+1,c
  4866  00F944  0E0A               	movlw	10
  4867  00F946  D7A3               	goto	L24
  4868  00F948                     
  4869                           ;standbyMode.c: 189: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4870  00F948  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4871  00F94C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4872  00F950  04DE               	decf	postinc2,w,c
  4873  00F952  10DE               	iorwf	postinc2,w,c
  4874  00F954  A4D8               	btfss	status,2,c
  4875  00F956  D014               	goto	l181
  4876  00F958  EE20 F002          	lfsr	2,2
  4877  00F95C  5003               	movf	check_food@foodInput,w,c
  4878  00F95E  26D9               	addwf	fsr2l,f,c
  4879  00F960  5004               	movf	check_food@foodInput+1,w,c
  4880  00F962  22DA               	addwfc	fsr2h,f,c
  4881  00F964  04DE               	decf	postinc2,w,c
  4882  00F966  10DE               	iorwf	postinc2,w,c
  4883  00F968  A4D8               	btfss	status,2,c
  4884  00F96A  D00A               	goto	l181
  4885  00F96C  EE20 F004          	lfsr	2,4
  4886  00F970  5003               	movf	check_food@foodInput,w,c
  4887  00F972  26D9               	addwf	fsr2l,f,c
  4888  00F974  5004               	movf	check_food@foodInput+1,w,c
  4889  00F976  22DA               	addwfc	fsr2h,f,c
  4890  00F978  04DE               	decf	postinc2,w,c
  4891  00F97A  10DE               	iorwf	postinc2,w,c
  4892  00F97C  B4D8               	btfsc	status,2,c
  4893  00F97E  D057               	goto	u3380
  4894  00F980                     l181:
  4895                           
  4896                           ;standbyMode.c: 192: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4897  00F980  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4898  00F984  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4899  00F988  0E02               	movlw	2
  4900  00F98A  18DE               	xorwf	postinc2,w,c
  4901  00F98C  10DE               	iorwf	postinc2,w,c
  4902  00F98E  A4D8               	btfss	status,2,c
  4903  00F990  D014               	goto	l183
  4904  00F992  EE20 F002          	lfsr	2,2
  4905  00F996  5003               	movf	check_food@foodInput,w,c
  4906  00F998  26D9               	addwf	fsr2l,f,c
  4907  00F99A  5004               	movf	check_food@foodInput+1,w,c
  4908  00F99C  22DA               	addwfc	fsr2h,f,c
  4909  00F99E  04DE               	decf	postinc2,w,c
  4910  00F9A0  10DE               	iorwf	postinc2,w,c
  4911  00F9A2  A4D8               	btfss	status,2,c
  4912  00F9A4  D00A               	goto	l183
  4913  00F9A6  EE20 F004          	lfsr	2,4
  4914  00F9AA  5003               	movf	check_food@foodInput,w,c
  4915  00F9AC  26D9               	addwf	fsr2l,f,c
  4916  00F9AE  5004               	movf	check_food@foodInput+1,w,c
  4917  00F9B0  22DA               	addwfc	fsr2h,f,c
  4918  00F9B2  04DE               	decf	postinc2,w,c
  4919  00F9B4  10DE               	iorwf	postinc2,w,c
  4920  00F9B6  B4D8               	btfsc	status,2,c
  4921  00F9B8  D03A               	goto	u3380
  4922  00F9BA                     l183:
  4923                           
  4924                           ;standbyMode.c: 195: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4925  00F9BA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4926  00F9BE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4927  00F9C2  04DE               	decf	postinc2,w,c
  4928  00F9C4  10DE               	iorwf	postinc2,w,c
  4929  00F9C6  A4D8               	btfss	status,2,c
  4930  00F9C8  D015               	goto	l185
  4931  00F9CA  EE20 F002          	lfsr	2,2
  4932  00F9CE  5003               	movf	check_food@foodInput,w,c
  4933  00F9D0  26D9               	addwf	fsr2l,f,c
  4934  00F9D2  5004               	movf	check_food@foodInput+1,w,c
  4935  00F9D4  22DA               	addwfc	fsr2h,f,c
  4936  00F9D6  0E02               	movlw	2
  4937  00F9D8  18DE               	xorwf	postinc2,w,c
  4938  00F9DA  10DE               	iorwf	postinc2,w,c
  4939  00F9DC  A4D8               	btfss	status,2,c
  4940  00F9DE  D00A               	goto	l185
  4941  00F9E0  EE20 F004          	lfsr	2,4
  4942  00F9E4  5003               	movf	check_food@foodInput,w,c
  4943  00F9E6  26D9               	addwf	fsr2l,f,c
  4944  00F9E8  5004               	movf	check_food@foodInput+1,w,c
  4945  00F9EA  22DA               	addwfc	fsr2h,f,c
  4946  00F9EC  04DE               	decf	postinc2,w,c
  4947  00F9EE  10DE               	iorwf	postinc2,w,c
  4948  00F9F0  B4D8               	btfsc	status,2,c
  4949  00F9F2  D01D               	goto	u3380
  4950  00F9F4                     l185:
  4951                           
  4952                           ;standbyMode.c: 198: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4953  00F9F4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4954  00F9F8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4955  00F9FC  04DE               	decf	postinc2,w,c
  4956  00F9FE  10DE               	iorwf	postinc2,w,c
  4957  00FA00  A4D8               	btfss	status,2,c
  4958  00FA02  D1CC               	goto	l136
  4959  00FA04  EE20 F002          	lfsr	2,2
  4960  00FA08  5003               	movf	check_food@foodInput,w,c
  4961  00FA0A  26D9               	addwf	fsr2l,f,c
  4962  00FA0C  5004               	movf	check_food@foodInput+1,w,c
  4963  00FA0E  22DA               	addwfc	fsr2h,f,c
  4964  00FA10  04DE               	decf	postinc2,w,c
  4965  00FA12  10DE               	iorwf	postinc2,w,c
  4966  00FA14  A4D8               	btfss	status,2,c
  4967  00FA16  D1C2               	goto	l136
  4968  00FA18  EE20 F004          	lfsr	2,4
  4969  00FA1C  5003               	movf	check_food@foodInput,w,c
  4970  00FA1E  26D9               	addwf	fsr2l,f,c
  4971  00FA20  5004               	movf	check_food@foodInput+1,w,c
  4972  00FA22  22DA               	addwfc	fsr2h,f,c
  4973  00FA24  0E02               	movlw	2
  4974  00FA26  18DE               	xorwf	postinc2,w,c
  4975  00FA28  10DE               	iorwf	postinc2,w,c
  4976  00FA2A  A4D8               	btfss	status,2,c
  4977  00FA2C  D1B7               	goto	l136
  4978  00FA2E                     u3380:
  4979                           
  4980                           ;standbyMode.c: 199: returnValue = 11;
  4981  00FA2E  0E00               	movlw	0
  4982  00FA30  6E08               	movwf	check_food@returnValue+1,c
  4983  00FA32  0E0B               	movlw	11
  4984  00FA34  D72C               	goto	L24
  4985  00FA36                     
  4986                           ;standbyMode.c: 205: if (foodInput[0] == 1 && foodInput[1] == 1){
  4987  00FA36  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4988  00FA3A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4989  00FA3E  04DE               	decf	postinc2,w,c
  4990  00FA40  10DE               	iorwf	postinc2,w,c
  4991  00FA42  A4D8               	btfss	status,2,c
  4992  00FA44  D1AB               	goto	l136
  4993  00FA46  EE20 F002          	lfsr	2,2
  4994  00FA4A  5003               	movf	check_food@foodInput,w,c
  4995  00FA4C  26D9               	addwf	fsr2l,f,c
  4996  00FA4E  5004               	movf	check_food@foodInput+1,w,c
  4997  00FA50  22DA               	addwfc	fsr2h,f,c
  4998  00FA52  04DE               	decf	postinc2,w,c
  4999  00FA54  10DE               	iorwf	postinc2,w,c
  5000  00FA56  A4D8               	btfss	status,2,c
  5001  00FA58  D1A1               	goto	l136
  5002                           
  5003                           ;standbyMode.c: 206: if (foodInput[2] == 1 || foodInput[2] == 2){
  5004  00FA5A  EE20 F004          	lfsr	2,4
  5005  00FA5E  5003               	movf	check_food@foodInput,w,c
  5006  00FA60  26D9               	addwf	fsr2l,f,c
  5007  00FA62  5004               	movf	check_food@foodInput+1,w,c
  5008  00FA64  22DA               	addwfc	fsr2h,f,c
  5009  00FA66  04DE               	decf	postinc2,w,c
  5010  00FA68  10DE               	iorwf	postinc2,w,c
  5011  00FA6A  B4D8               	btfsc	status,2,c
  5012  00FA6C  D00B               	goto	u3420
  5013  00FA6E  EE20 F004          	lfsr	2,4
  5014  00FA72  5003               	movf	check_food@foodInput,w,c
  5015  00FA74  26D9               	addwf	fsr2l,f,c
  5016  00FA76  5004               	movf	check_food@foodInput+1,w,c
  5017  00FA78  22DA               	addwfc	fsr2h,f,c
  5018  00FA7A  0E02               	movlw	2
  5019  00FA7C  18DE               	xorwf	postinc2,w,c
  5020  00FA7E  10DE               	iorwf	postinc2,w,c
  5021  00FA80  A4D8               	btfss	status,2,c
  5022  00FA82  D18C               	goto	l136
  5023  00FA84                     u3420:
  5024                           
  5025                           ;standbyMode.c: 207: returnValue = 12;
  5026  00FA84  0E00               	movlw	0
  5027  00FA86  6E08               	movwf	check_food@returnValue+1,c
  5028  00FA88  0E0C               	movlw	12
  5029  00FA8A  D701               	goto	L24
  5030  00FA8C                     
  5031                           ;standbyMode.c: 214: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  5032  00FA8C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5033  00FA90  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5034  00FA94  04DE               	decf	postinc2,w,c
  5035  00FA96  10DE               	iorwf	postinc2,w,c
  5036  00FA98  A4D8               	btfss	status,2,c
  5037  00FA9A  D014               	goto	l194
  5038  00FA9C  EE20 F002          	lfsr	2,2
  5039  00FAA0  5003               	movf	check_food@foodInput,w,c
  5040  00FAA2  26D9               	addwf	fsr2l,f,c
  5041  00FAA4  5004               	movf	check_food@foodInput+1,w,c
  5042  00FAA6  22DA               	addwfc	fsr2h,f,c
  5043  00FAA8  04DE               	decf	postinc2,w,c
  5044  00FAAA  10DE               	iorwf	postinc2,w,c
  5045  00FAAC  A4D8               	btfss	status,2,c
  5046  00FAAE  D00A               	goto	l194
  5047  00FAB0  EE20 F004          	lfsr	2,4
  5048  00FAB4  5003               	movf	check_food@foodInput,w,c
  5049  00FAB6  26D9               	addwf	fsr2l,f,c
  5050  00FAB8  5004               	movf	check_food@foodInput+1,w,c
  5051  00FABA  22DA               	addwfc	fsr2h,f,c
  5052  00FABC  04DE               	decf	postinc2,w,c
  5053  00FABE  10DE               	iorwf	postinc2,w,c
  5054  00FAC0  B4D8               	btfsc	status,2,c
  5055  00FAC2  D057               	goto	u3540
  5056  00FAC4                     l194:
  5057                           
  5058                           ;standbyMode.c: 217: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  5059  00FAC4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5060  00FAC8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5061  00FACC  0E02               	movlw	2
  5062  00FACE  18DE               	xorwf	postinc2,w,c
  5063  00FAD0  10DE               	iorwf	postinc2,w,c
  5064  00FAD2  A4D8               	btfss	status,2,c
  5065  00FAD4  D014               	goto	l196
  5066  00FAD6  EE20 F002          	lfsr	2,2
  5067  00FADA  5003               	movf	check_food@foodInput,w,c
  5068  00FADC  26D9               	addwf	fsr2l,f,c
  5069  00FADE  5004               	movf	check_food@foodInput+1,w,c
  5070  00FAE0  22DA               	addwfc	fsr2h,f,c
  5071  00FAE2  04DE               	decf	postinc2,w,c
  5072  00FAE4  10DE               	iorwf	postinc2,w,c
  5073  00FAE6  A4D8               	btfss	status,2,c
  5074  00FAE8  D00A               	goto	l196
  5075  00FAEA  EE20 F004          	lfsr	2,4
  5076  00FAEE  5003               	movf	check_food@foodInput,w,c
  5077  00FAF0  26D9               	addwf	fsr2l,f,c
  5078  00FAF2  5004               	movf	check_food@foodInput+1,w,c
  5079  00FAF4  22DA               	addwfc	fsr2h,f,c
  5080  00FAF6  04DE               	decf	postinc2,w,c
  5081  00FAF8  10DE               	iorwf	postinc2,w,c
  5082  00FAFA  B4D8               	btfsc	status,2,c
  5083  00FAFC  D03A               	goto	u3540
  5084  00FAFE                     l196:
  5085                           
  5086                           ;standbyMode.c: 220: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  5087  00FAFE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5088  00FB02  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5089  00FB06  04DE               	decf	postinc2,w,c
  5090  00FB08  10DE               	iorwf	postinc2,w,c
  5091  00FB0A  A4D8               	btfss	status,2,c
  5092  00FB0C  D015               	goto	l198
  5093  00FB0E  EE20 F002          	lfsr	2,2
  5094  00FB12  5003               	movf	check_food@foodInput,w,c
  5095  00FB14  26D9               	addwf	fsr2l,f,c
  5096  00FB16  5004               	movf	check_food@foodInput+1,w,c
  5097  00FB18  22DA               	addwfc	fsr2h,f,c
  5098  00FB1A  0E02               	movlw	2
  5099  00FB1C  18DE               	xorwf	postinc2,w,c
  5100  00FB1E  10DE               	iorwf	postinc2,w,c
  5101  00FB20  A4D8               	btfss	status,2,c
  5102  00FB22  D00A               	goto	l198
  5103  00FB24  EE20 F004          	lfsr	2,4
  5104  00FB28  5003               	movf	check_food@foodInput,w,c
  5105  00FB2A  26D9               	addwf	fsr2l,f,c
  5106  00FB2C  5004               	movf	check_food@foodInput+1,w,c
  5107  00FB2E  22DA               	addwfc	fsr2h,f,c
  5108  00FB30  04DE               	decf	postinc2,w,c
  5109  00FB32  10DE               	iorwf	postinc2,w,c
  5110  00FB34  B4D8               	btfsc	status,2,c
  5111  00FB36  D01D               	goto	u3540
  5112  00FB38                     l198:
  5113                           
  5114                           ;standbyMode.c: 223: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  5115  00FB38  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5116  00FB3C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5117  00FB40  04DE               	decf	postinc2,w,c
  5118  00FB42  10DE               	iorwf	postinc2,w,c
  5119  00FB44  A4D8               	btfss	status,2,c
  5120  00FB46  D12A               	goto	l136
  5121  00FB48  EE20 F002          	lfsr	2,2
  5122  00FB4C  5003               	movf	check_food@foodInput,w,c
  5123  00FB4E  26D9               	addwf	fsr2l,f,c
  5124  00FB50  5004               	movf	check_food@foodInput+1,w,c
  5125  00FB52  22DA               	addwfc	fsr2h,f,c
  5126  00FB54  04DE               	decf	postinc2,w,c
  5127  00FB56  10DE               	iorwf	postinc2,w,c
  5128  00FB58  A4D8               	btfss	status,2,c
  5129  00FB5A  D120               	goto	l136
  5130  00FB5C  EE20 F004          	lfsr	2,4
  5131  00FB60  5003               	movf	check_food@foodInput,w,c
  5132  00FB62  26D9               	addwf	fsr2l,f,c
  5133  00FB64  5004               	movf	check_food@foodInput+1,w,c
  5134  00FB66  22DA               	addwfc	fsr2h,f,c
  5135  00FB68  0E02               	movlw	2
  5136  00FB6A  18DE               	xorwf	postinc2,w,c
  5137  00FB6C  10DE               	iorwf	postinc2,w,c
  5138  00FB6E  A4D8               	btfss	status,2,c
  5139  00FB70  D115               	goto	l136
  5140  00FB72                     u3540:
  5141                           
  5142                           ;standbyMode.c: 224: returnValue = 13;
  5143  00FB72  0E00               	movlw	0
  5144  00FB74  6E08               	movwf	check_food@returnValue+1,c
  5145  00FB76  0E0D               	movlw	13
  5146  00FB78  D68A               	goto	L24
  5147  00FB7A                     
  5148                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5149  00FB7A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5150  00FB7E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5151  00FB82  04DE               	decf	postinc2,w,c
  5152  00FB84  10DE               	iorwf	postinc2,w,c
  5153  00FB86  A4D8               	btfss	status,2,c
  5154  00FB88  D109               	goto	l136
  5155  00FB8A  EE20 F002          	lfsr	2,2
  5156  00FB8E  5003               	movf	check_food@foodInput,w,c
  5157  00FB90  26D9               	addwf	fsr2l,f,c
  5158  00FB92  5004               	movf	check_food@foodInput+1,w,c
  5159  00FB94  22DA               	addwfc	fsr2h,f,c
  5160  00FB96  04DE               	decf	postinc2,w,c
  5161  00FB98  10DE               	iorwf	postinc2,w,c
  5162  00FB9A  A4D8               	btfss	status,2,c
  5163  00FB9C  D0FF               	goto	l136
  5164  00FB9E  EE20 F004          	lfsr	2,4
  5165  00FBA2  5003               	movf	check_food@foodInput,w,c
  5166  00FBA4  26D9               	addwf	fsr2l,f,c
  5167  00FBA6  5004               	movf	check_food@foodInput+1,w,c
  5168  00FBA8  22DA               	addwfc	fsr2h,f,c
  5169  00FBAA  04DE               	decf	postinc2,w,c
  5170  00FBAC  10DE               	iorwf	postinc2,w,c
  5171  00FBAE  A4D8               	btfss	status,2,c
  5172  00FBB0  D0F5               	goto	l136
  5173  00FBB2  EE20 F006          	lfsr	2,6
  5174  00FBB6  5003               	movf	check_food@foodInput,w,c
  5175  00FBB8  26D9               	addwf	fsr2l,f,c
  5176  00FBBA  5004               	movf	check_food@foodInput+1,w,c
  5177  00FBBC  22DA               	addwfc	fsr2h,f,c
  5178  00FBBE  04DE               	decf	postinc2,w,c
  5179  00FBC0  10DE               	iorwf	postinc2,w,c
  5180  00FBC2  A4D8               	btfss	status,2,c
  5181  00FBC4  D0EB               	goto	l136
  5182                           
  5183                           ;standbyMode.c: 231: returnValue = 14;
  5184  00FBC6  0E00               	movlw	0
  5185  00FBC8  6E08               	movwf	check_food@returnValue+1,c
  5186  00FBCA  0E0E               	movlw	14
  5187  00FBCC  D660               	goto	L24
  5188  00FBCE                     
  5189                           ;standbyMode.c: 237: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5190  00FBCE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5191  00FBD2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5192  00FBD6  04DE               	decf	postinc2,w,c
  5193  00FBD8  10DE               	iorwf	postinc2,w,c
  5194  00FBDA  A4D8               	btfss	status,2,c
  5195  00FBDC  D0DF               	goto	l136
  5196  00FBDE  EE20 F002          	lfsr	2,2
  5197  00FBE2  5003               	movf	check_food@foodInput,w,c
  5198  00FBE4  26D9               	addwf	fsr2l,f,c
  5199  00FBE6  5004               	movf	check_food@foodInput+1,w,c
  5200  00FBE8  22DA               	addwfc	fsr2h,f,c
  5201  00FBEA  04DE               	decf	postinc2,w,c
  5202  00FBEC  10DE               	iorwf	postinc2,w,c
  5203  00FBEE  A4D8               	btfss	status,2,c
  5204  00FBF0  D0D5               	goto	l136
  5205  00FBF2  EE20 F004          	lfsr	2,4
  5206  00FBF6  5003               	movf	check_food@foodInput,w,c
  5207  00FBF8  26D9               	addwf	fsr2l,f,c
  5208  00FBFA  5004               	movf	check_food@foodInput+1,w,c
  5209  00FBFC  22DA               	addwfc	fsr2h,f,c
  5210  00FBFE  04DE               	decf	postinc2,w,c
  5211  00FC00  10DE               	iorwf	postinc2,w,c
  5212  00FC02  A4D8               	btfss	status,2,c
  5213  00FC04  D0CB               	goto	l136
  5214  00FC06  EE20 F006          	lfsr	2,6
  5215  00FC0A  5003               	movf	check_food@foodInput,w,c
  5216  00FC0C  26D9               	addwf	fsr2l,f,c
  5217  00FC0E  5004               	movf	check_food@foodInput+1,w,c
  5218  00FC10  22DA               	addwfc	fsr2h,f,c
  5219  00FC12  04DE               	decf	postinc2,w,c
  5220  00FC14  10DE               	iorwf	postinc2,w,c
  5221  00FC16  A4D8               	btfss	status,2,c
  5222  00FC18  D0C1               	goto	l136
  5223                           
  5224                           ;standbyMode.c: 238: returnValue = 15;
  5225  00FC1A  0E00               	movlw	0
  5226  00FC1C  6E08               	movwf	check_food@returnValue+1,c
  5227  00FC1E  0E0F               	movlw	15
  5228  00FC20  D636               	goto	L24
  5229  00FC22                     
  5230                           ;standbyMode.c: 244: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5231  00FC22  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5232  00FC26  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5233  00FC2A  04DE               	decf	postinc2,w,c
  5234  00FC2C  10DE               	iorwf	postinc2,w,c
  5235  00FC2E  A4D8               	btfss	status,2,c
  5236  00FC30  D0B5               	goto	l136
  5237  00FC32  EE20 F002          	lfsr	2,2
  5238  00FC36  5003               	movf	check_food@foodInput,w,c
  5239  00FC38  26D9               	addwf	fsr2l,f,c
  5240  00FC3A  5004               	movf	check_food@foodInput+1,w,c
  5241  00FC3C  22DA               	addwfc	fsr2h,f,c
  5242  00FC3E  04DE               	decf	postinc2,w,c
  5243  00FC40  10DE               	iorwf	postinc2,w,c
  5244  00FC42  A4D8               	btfss	status,2,c
  5245  00FC44  D0AB               	goto	l136
  5246  00FC46  EE20 F004          	lfsr	2,4
  5247  00FC4A  5003               	movf	check_food@foodInput,w,c
  5248  00FC4C  26D9               	addwf	fsr2l,f,c
  5249  00FC4E  5004               	movf	check_food@foodInput+1,w,c
  5250  00FC50  22DA               	addwfc	fsr2h,f,c
  5251  00FC52  04DE               	decf	postinc2,w,c
  5252  00FC54  10DE               	iorwf	postinc2,w,c
  5253  00FC56  A4D8               	btfss	status,2,c
  5254  00FC58  D0A1               	goto	l136
  5255  00FC5A  EE20 F006          	lfsr	2,6
  5256  00FC5E  5003               	movf	check_food@foodInput,w,c
  5257  00FC60  26D9               	addwf	fsr2l,f,c
  5258  00FC62  5004               	movf	check_food@foodInput+1,w,c
  5259  00FC64  22DA               	addwfc	fsr2h,f,c
  5260  00FC66  04DE               	decf	postinc2,w,c
  5261  00FC68  10DE               	iorwf	postinc2,w,c
  5262  00FC6A  A4D8               	btfss	status,2,c
  5263  00FC6C  D097               	goto	l136
  5264                           
  5265                           ;standbyMode.c: 245: returnValue = 16;
  5266  00FC6E  0E00               	movlw	0
  5267  00FC70  6E08               	movwf	check_food@returnValue+1,c
  5268  00FC72  0E10               	movlw	16
  5269  00FC74  D60C               	goto	L24
  5270  00FC76                     
  5271                           ;standbyMode.c: 251: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5272  00FC76  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5273  00FC7A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5274  00FC7E  04DE               	decf	postinc2,w,c
  5275  00FC80  10DE               	iorwf	postinc2,w,c
  5276  00FC82  A4D8               	btfss	status,2,c
  5277  00FC84  D08B               	goto	l136
  5278  00FC86  EE20 F002          	lfsr	2,2
  5279  00FC8A  5003               	movf	check_food@foodInput,w,c
  5280  00FC8C  26D9               	addwf	fsr2l,f,c
  5281  00FC8E  5004               	movf	check_food@foodInput+1,w,c
  5282  00FC90  22DA               	addwfc	fsr2h,f,c
  5283  00FC92  04DE               	decf	postinc2,w,c
  5284  00FC94  10DE               	iorwf	postinc2,w,c
  5285  00FC96  A4D8               	btfss	status,2,c
  5286  00FC98  D081               	goto	l136
  5287  00FC9A  EE20 F004          	lfsr	2,4
  5288  00FC9E  5003               	movf	check_food@foodInput,w,c
  5289  00FCA0  26D9               	addwf	fsr2l,f,c
  5290  00FCA2  5004               	movf	check_food@foodInput+1,w,c
  5291  00FCA4  22DA               	addwfc	fsr2h,f,c
  5292  00FCA6  04DE               	decf	postinc2,w,c
  5293  00FCA8  10DE               	iorwf	postinc2,w,c
  5294  00FCAA  A4D8               	btfss	status,2,c
  5295  00FCAC  D077               	goto	l136
  5296  00FCAE  EE20 F006          	lfsr	2,6
  5297  00FCB2  5003               	movf	check_food@foodInput,w,c
  5298  00FCB4  26D9               	addwf	fsr2l,f,c
  5299  00FCB6  5004               	movf	check_food@foodInput+1,w,c
  5300  00FCB8  22DA               	addwfc	fsr2h,f,c
  5301  00FCBA  04DE               	decf	postinc2,w,c
  5302  00FCBC  10DE               	iorwf	postinc2,w,c
  5303  00FCBE  A4D8               	btfss	status,2,c
  5304  00FCC0  D06D               	goto	l136
  5305                           
  5306                           ;standbyMode.c: 252: returnValue = 17;
  5307  00FCC2  0E00               	movlw	0
  5308  00FCC4  6E08               	movwf	check_food@returnValue+1,c
  5309  00FCC6  0E11               	movlw	17
  5310  00FCC8  D5E2               	goto	L24
  5311  00FCCA                     
  5312                           ;standbyMode.c: 258: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5313  00FCCA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5314  00FCCE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5315  00FCD2  04DE               	decf	postinc2,w,c
  5316  00FCD4  10DE               	iorwf	postinc2,w,c
  5317  00FCD6  A4D8               	btfss	status,2,c
  5318  00FCD8  D061               	goto	l136
  5319  00FCDA  EE20 F002          	lfsr	2,2
  5320  00FCDE  5003               	movf	check_food@foodInput,w,c
  5321  00FCE0  26D9               	addwf	fsr2l,f,c
  5322  00FCE2  5004               	movf	check_food@foodInput+1,w,c
  5323  00FCE4  22DA               	addwfc	fsr2h,f,c
  5324  00FCE6  04DE               	decf	postinc2,w,c
  5325  00FCE8  10DE               	iorwf	postinc2,w,c
  5326  00FCEA  A4D8               	btfss	status,2,c
  5327  00FCEC  D057               	goto	l136
  5328  00FCEE  EE20 F004          	lfsr	2,4
  5329  00FCF2  5003               	movf	check_food@foodInput,w,c
  5330  00FCF4  26D9               	addwf	fsr2l,f,c
  5331  00FCF6  5004               	movf	check_food@foodInput+1,w,c
  5332  00FCF8  22DA               	addwfc	fsr2h,f,c
  5333  00FCFA  04DE               	decf	postinc2,w,c
  5334  00FCFC  10DE               	iorwf	postinc2,w,c
  5335  00FCFE  A4D8               	btfss	status,2,c
  5336  00FD00  D04D               	goto	l136
  5337  00FD02  EE20 F006          	lfsr	2,6
  5338  00FD06  5003               	movf	check_food@foodInput,w,c
  5339  00FD08  26D9               	addwf	fsr2l,f,c
  5340  00FD0A  5004               	movf	check_food@foodInput+1,w,c
  5341  00FD0C  22DA               	addwfc	fsr2h,f,c
  5342  00FD0E  04DE               	decf	postinc2,w,c
  5343  00FD10  10DE               	iorwf	postinc2,w,c
  5344  00FD12  A4D8               	btfss	status,2,c
  5345  00FD14  D043               	goto	l136
  5346                           
  5347                           ;standbyMode.c: 259: returnValue = 18;
  5348  00FD16  0E00               	movlw	0
  5349  00FD18  6E08               	movwf	check_food@returnValue+1,c
  5350  00FD1A  0E12               	movlw	18
  5351  00FD1C  D5B8               	goto	L24
  5352  00FD1E                     l131:
  5353  00FD1E  C001  F005         	movff	check_food@sum,??_check_food
  5354  00FD22  C002  F006         	movff	check_food@sum+1,??_check_food+1
  5355                           
  5356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5357                           ; Switch size 1, requested type "space"
  5358                           ; Number of cases is 1, Range of values is 0 to 0
  5359                           ; switch strategies available:
  5360                           ; Name         Instructions Cycles
  5361                           ; simple_byte            4     3 (average)
  5362                           ;	Chosen strategy is simple_byte
  5363  00FD26  5006               	movf	??_check_food+1,w,c
  5364  00FD28  0A00               	xorlw	0	; case 0
  5365  00FD2A  A4D8               	btfss	status,2,c
  5366  00FD2C  D037               	goto	l136
  5367                           
  5368                           ; Switch size 1, requested type "space"
  5369                           ; Number of cases is 18, Range of values is 3 to 43
  5370                           ; switch strategies available:
  5371                           ; Name         Instructions Cycles
  5372                           ; simple_byte           55    28 (average)
  5373                           ;	Chosen strategy is simple_byte
  5374  00FD2E  5005               	movf	??_check_food,w,c
  5375  00FD30  0A03               	xorlw	3	; case 3
  5376  00FD32  B4D8               	btfsc	status,2,c
  5377  00FD34  D446               	goto	l132
  5378  00FD36  0A04               	xorlw	4	; case 7
  5379  00FD38  B4D8               	btfsc	status,2,c
  5380  00FD3A  D458               	goto	l137
  5381  00FD3C  0A0D               	xorlw	13	; case 10
  5382  00FD3E  B4D8               	btfsc	status,2,c
  5383  00FD40  D488               	goto	l145
  5384  00FD42  0A06               	xorlw	6	; case 12
  5385  00FD44  B4D8               	btfsc	status,2,c
  5386  00FD46  D467               	goto	l141
  5387  00FD48  0A01               	xorlw	1	; case 13
  5388  00FD4A  B4D8               	btfsc	status,2,c
  5389  00FD4C  D504               	goto	l157
  5390  00FD4E  0A02               	xorlw	2	; case 15
  5391  00FD50  B4D8               	btfsc	status,2,c
  5392  00FD52  D4A9               	goto	l147
  5393  00FD54  0A1E               	xorlw	30	; case 17
  5394  00FD56  B4D8               	btfsc	status,2,c
  5395  00FD58  D554               	goto	l167
  5396  00FD5A  0A03               	xorlw	3	; case 18
  5397  00FD5C  B4D8               	btfsc	status,2,c
  5398  00FD5E  D526               	goto	l162
  5399  00FD60  0A01               	xorlw	1	; case 19
  5400  00FD62  B4D8               	btfsc	status,2,c
  5401  00FD64  D4CC               	goto	l152
  5402  00FD66  0A05               	xorlw	5	; case 22
  5403  00FD68  B4D8               	btfsc	status,2,c
  5404  00FD6A  D5EE               	goto	l180
  5405  00FD6C  0A0F               	xorlw	15	; case 25
  5406  00FD6E  B4D8               	btfsc	status,2,c
  5407  00FD70  D704               	goto	l201
  5408  00FD72  0A03               	xorlw	3	; case 26
  5409  00FD74  B4D8               	btfsc	status,2,c
  5410  00FD76  D65F               	goto	l188
  5411  00FD78  0A01               	xorlw	1	; case 27
  5412  00FD7A  B4D8               	btfsc	status,2,c
  5413  00FD7C  D56B               	goto	l172
  5414  00FD7E  0A06               	xorlw	6	; case 29
  5415  00FD80  B4D8               	btfsc	status,2,c
  5416  00FD82  D725               	goto	l203
  5417  00FD84  0A02               	xorlw	2	; case 31
  5418  00FD86  B4D8               	btfsc	status,2,c
  5419  00FD88  D681               	goto	l193
  5420  00FD8A  0A3D               	xorlw	61	; case 34
  5421  00FD8C  B4D8               	btfsc	status,2,c
  5422  00FD8E  D749               	goto	l205
  5423  00FD90  0A05               	xorlw	5	; case 39
  5424  00FD92  B4D8               	btfsc	status,2,c
  5425  00FD94  D770               	goto	l207
  5426  00FD96  0A0C               	xorlw	12	; case 43
  5427  00FD98  B4D8               	btfsc	status,2,c
  5428  00FD9A  D797               	goto	l209
  5429  00FD9C                     l136:
  5430                           
  5431                           ;standbyMode.c: 267: return returnValue;
  5432  00FD9C  C007  F001         	movff	check_food@returnValue,?_check_food
  5433  00FDA0  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  5434  00FDA4  0012               	return		;funcret
  5435  00FDA6                     __end_of_check_food:
  5436                           	opt stack 0
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           postinc0	equ	0xFEE
  5444                           wreg	equ	0xFE8
  5445                           plusw1	equ	0xFE3
  5446                           postinc2	equ	0xFDE
  5447                           postdec2	equ	0xFDD
  5448                           plusw2	equ	0xFDB
  5449                           fsr2h	equ	0xFDA
  5450                           fsr2l	equ	0xFD9
  5451                           status	equ	0xFD8
  5452                           
  5453 ;; *************** function _diet_press *****************
  5454 ;; Defined at:
  5455 ;;		line 535 in file "standbyMode.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  drawer          2   24[COMRAM] unsigned int 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  keypress        1   38[COMRAM] unsigned char 
  5460 ;;  dietTable       8   39[COMRAM] unsigned int [4]
  5461 ;;  sum             2   36[COMRAM] unsigned int 
  5462 ;;  count           2   34[COMRAM] unsigned int 
  5463 ;;  backCheck       2   32[COMRAM] unsigned int 
  5464 ;;  i               2   30[COMRAM] unsigned int 
  5465 ;;  previous        2   28[COMRAM] unsigned int 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  2   24[COMRAM] unsigned int 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;Total ram usage:       23 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    3
  5482 ;; This function calls:
  5483 ;;		_lcdInst
  5484 ;;		_printf
  5485 ;;		_putch
  5486 ;; This function is called by:
  5487 ;;		_standbyMode
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text8
  5492  00E918                     __ptext8:
  5493                           	opt stack 0
  5494  00E918                     _diet_press:
  5495                           	opt stack 26
  5496                           
  5497                           ;incstack = 0
  5498                           ;standbyMode.c: 538: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5499  00E918  0E01               	movlw	1
  5500  00E91A  ECAF  F06E         	call	_lcdInst
  5501  00E91E  0EC3               	movlw	195
  5502  00E920  6E1B               	movwf	??_diet_press& (0+255),c
  5503  00E922  0ECD               	movlw	205
  5504  00E924                     u6077:
  5505  00E924  2EE8               	decfsz	wreg,f,c
  5506  00E926  D7FE               	bra	u6077
  5507  00E928  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5508  00E92A  D7FC               	bra	u6077
  5509  00E92C  F000               	nop	
  5510                           
  5511                           ;standbyMode.c: 539: printf("Drawer %i diet:", drawer);
  5512  00E92E  0E8F               	movlw	low STR_23
  5513  00E930  6E0D               	movwf	printf@f,c
  5514  00E932  0EFE               	movlw	high STR_23
  5515  00E934  6E0E               	movwf	printf@f+1,c
  5516  00E936  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5517  00E93A  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5518  00E93E  EC69  F070         	call	_printf	;wreg free
  5519                           
  5520                           ;standbyMode.c: 540: lcdInst(0xC0);;
  5521  00E942  0EC0               	movlw	192
  5522  00E944  ECAF  F06E         	call	_lcdInst
  5523                           
  5524                           ;standbyMode.c: 542: unsigned int count = 0;
  5525  00E948  0E00               	movlw	0
  5526  00E94A  6E24               	movwf	diet_press@count+1,c
  5527  00E94C  0E00               	movlw	0
  5528  00E94E  6E23               	movwf	diet_press@count,c
  5529                           
  5530                           ;standbyMode.c: 543: unsigned int previous = 0;
  5531  00E950  0E00               	movlw	0
  5532  00E952  6E1E               	movwf	diet_press@previous+1,c
  5533  00E954  0E00               	movlw	0
  5534  00E956  6E1D               	movwf	diet_press@previous,c
  5535                           
  5536                           ;standbyMode.c: 544: unsigned int sum = 0;
  5537  00E958  0E00               	movlw	0
  5538  00E95A  6E26               	movwf	diet_press@sum+1,c
  5539  00E95C  0E00               	movlw	0
  5540  00E95E  6E25               	movwf	diet_press@sum,c
  5541                           
  5542                           ;standbyMode.c: 545: unsigned int i = 0;
  5543  00E960  0E00               	movlw	0
  5544  00E962  6E20               	movwf	diet_press@i+1,c
  5545  00E964  0E00               	movlw	0
  5546  00E966  6E1F               	movwf	diet_press@i,c
  5547                           
  5548                           ;standbyMode.c: 546: unsigned int dietTable[4] = {0, 0, 0, 0};
  5549  00E968  EE20  F056         	lfsr	2,diet_press@F3055
  5550  00E96C  EE10  F028         	lfsr	1,diet_press@dietTable
  5551  00E970  0E07               	movlw	7
  5552  00E972                     u4091:
  5553  00E972  CFDB FFE3          	movff	plusw2,plusw1
  5554  00E976  06E8               	decf	wreg,f,c
  5555  00E978  E2FC               	bc	u4091
  5556                           
  5557                           ;standbyMode.c: 547: unsigned int backCheck = 0;
  5558  00E97A  0E00               	movlw	0
  5559  00E97C  6E22               	movwf	diet_press@backCheck+1,c
  5560  00E97E  0E00               	movlw	0
  5561  00E980  6E21               	movwf	diet_press@backCheck,c
  5562  00E982                     l308:
  5563  00E982  A281               	btfss	3969,1,c	;volatile
  5564  00E984  D7FE               	goto	l307
  5565                           
  5566                           ;standbyMode.c: 551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5567  00E986  3881               	swapf	3969,w,c	;volatile
  5568  00E988  0B0F               	andlw	15
  5569  00E98A  0B0F               	andlw	15
  5570  00E98C  6E27               	movwf	diet_press@keypress,c
  5571  00E98E  B281               	btfsc	3969,1,c	;volatile
  5572  00E990  D7FE               	goto	l312
  5573                           
  5574                           ;standbyMode.c: 554: if(keypress == 15){
  5575  00E992  0E0F               	movlw	15
  5576  00E994  1827               	xorwf	diet_press@keypress,w,c
  5577  00E996  B4D8               	btfsc	status,2,c
  5578  00E998  D080               	goto	l315
  5579                           
  5580                           ;standbyMode.c: 557: else if (keypress == 14){
  5581                           
  5582                           ;standbyMode.c: 556: }
  5583                           
  5584                           ;standbyMode.c: 555: break;
  5585  00E99A  0E0E               	movlw	14
  5586  00E99C  1827               	xorwf	diet_press@keypress,w,c
  5587  00E99E  A4D8               	btfss	status,2,c
  5588  00E9A0  D005               	goto	l317
  5589                           
  5590                           ;standbyMode.c: 558: backCheck = 1;
  5591  00E9A2  0E00               	movlw	0
  5592  00E9A4  6E22               	movwf	diet_press@backCheck+1,c
  5593  00E9A6  0E01               	movlw	1
  5594  00E9A8  6E21               	movwf	diet_press@backCheck,c
  5595                           
  5596                           ;standbyMode.c: 559: break;
  5597  00E9AA  D077               	goto	l315
  5598  00E9AC                     l317:
  5599                           
  5600                           ;standbyMode.c: 561: else if (keypress == 12){
  5601  00E9AC  0E0C               	movlw	12
  5602  00E9AE  1827               	xorwf	diet_press@keypress,w,c
  5603  00E9B0  A4D8               	btfss	status,2,c
  5604  00E9B2  D02D               	goto	l319
  5605                           
  5606                           ;standbyMode.c: 562: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5607  00E9B4  0E01               	movlw	1
  5608  00E9B6  ECAF  F06E         	call	_lcdInst
  5609  00E9BA  0EC3               	movlw	195
  5610  00E9BC  6E1B               	movwf	??_diet_press& (0+255),c
  5611  00E9BE  0ECD               	movlw	205
  5612  00E9C0                     u6087:
  5613  00E9C0  2EE8               	decfsz	wreg,f,c
  5614  00E9C2  D7FE               	bra	u6087
  5615  00E9C4  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5616  00E9C6  D7FC               	bra	u6087
  5617  00E9C8  F000               	nop	
  5618                           
  5619                           ;standbyMode.c: 563: printf("Drawer %i diet:", drawer);
  5620  00E9CA  0E8F               	movlw	low STR_23
  5621  00E9CC  6E0D               	movwf	printf@f,c
  5622  00E9CE  0EFE               	movlw	high STR_23
  5623  00E9D0  6E0E               	movwf	printf@f+1,c
  5624  00E9D2  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5625  00E9D6  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5626  00E9DA  EC69  F070         	call	_printf	;wreg free
  5627                           
  5628                           ;standbyMode.c: 564: lcdInst(0xC0);;
  5629  00E9DE  0EC0               	movlw	192
  5630  00E9E0  ECAF  F06E         	call	_lcdInst
  5631                           
  5632                           ;standbyMode.c: 565: count = 0;
  5633  00E9E4  0E00               	movlw	0
  5634  00E9E6  6E24               	movwf	diet_press@count+1,c
  5635  00E9E8  0E00               	movlw	0
  5636  00E9EA  6E23               	movwf	diet_press@count,c
  5637                           
  5638                           ;standbyMode.c: 566: dietTable[0] = 0;
  5639  00E9EC  0E00               	movlw	0
  5640  00E9EE  6E29               	movwf	diet_press@dietTable+1,c
  5641  00E9F0  0E00               	movlw	0
  5642  00E9F2  6E28               	movwf	diet_press@dietTable,c
  5643                           
  5644                           ;standbyMode.c: 567: dietTable[1] = 0;
  5645  00E9F4  0E00               	movlw	0
  5646  00E9F6  6E2B               	movwf	diet_press@dietTable+3,c
  5647  00E9F8  0E00               	movlw	0
  5648  00E9FA  6E2A               	movwf	diet_press@dietTable+2,c
  5649                           
  5650                           ;standbyMode.c: 568: dietTable[2] = 0;
  5651  00E9FC  0E00               	movlw	0
  5652  00E9FE  6E2D               	movwf	diet_press@dietTable+5,c
  5653  00EA00  0E00               	movlw	0
  5654  00EA02  6E2C               	movwf	diet_press@dietTable+4,c
  5655                           
  5656                           ;standbyMode.c: 569: dietTable[3] = 0;
  5657  00EA04  0E00               	movlw	0
  5658  00EA06  6E2F               	movwf	diet_press@dietTable+7,c
  5659  00EA08  0E00               	movlw	0
  5660  00EA0A  6E2E               	movwf	diet_press@dietTable+6,c
  5661                           
  5662                           ;standbyMode.c: 570: }
  5663  00EA0C  D7BA               	goto	l307
  5664  00EA0E                     l319:
  5665                           
  5666                           ;standbyMode.c: 571: else if (count <= 3){
  5667  00EA0E  5024               	movf	diet_press@count+1,w,c
  5668  00EA10  E1B8               	bnz	l308
  5669  00EA12  0E04               	movlw	4
  5670  00EA14  5C23               	subwf	diet_press@count,w,c
  5671  00EA16  B0D8               	btfsc	status,0,c
  5672  00EA18  D7B4               	goto	l307
  5673                           
  5674                           ;standbyMode.c: 572: if (keypress == 3 || keypress == 7){
  5675  00EA1A  0E03               	movlw	3
  5676  00EA1C  1827               	xorwf	diet_press@keypress,w,c
  5677  00EA1E  B4D8               	btfsc	status,2,c
  5678  00EA20  D004               	goto	u4170
  5679  00EA22  0E07               	movlw	7
  5680  00EA24  1827               	xorwf	diet_press@keypress,w,c
  5681  00EA26  A4D8               	btfss	status,2,c
  5682  00EA28  D013               	goto	l322
  5683  00EA2A                     u4170:
  5684                           
  5685                           ;standbyMode.c: 573: putch(input[keypress]);
  5686  00EA2A  5027               	movf	diet_press@keypress,w,c
  5687  00EA2C  0D01               	mullw	1
  5688  00EA2E  0EB8               	movlw	low _input
  5689  00EA30  24F3               	addwf	prodl,w,c
  5690  00EA32  6EF6               	movwf	tblptrl,c
  5691  00EA34  0EFD               	movlw	high _input
  5692  00EA36  20F4               	addwfc	prodh,w,c
  5693  00EA38  6EF7               	movwf	tblptrh,c
  5694  00EA3A                     	if	0	;There are less than 3 active tblptr bytes
  5695  00EA3A                     	endif
  5696  00EA3A  0008               	tblrd		*
  5697  00EA3C  50F5               	movf	tablat,w,c
  5698  00EA3E  ECB9  F06E         	call	_putch
  5699                           
  5700                           ;standbyMode.c: 574: dietTable[count] = keypress;
  5701  00EA42  5027               	movf	diet_press@keypress,w,c
  5702  00EA44  6E1B               	movwf	??_diet_press& (0+255),c
  5703  00EA46  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5704  00EA48  D01A               	goto	L43
  5705  00EA4A                     l3275:
  5706                           
  5707                           ;standbyMode.c: 575: count += 1;
  5708  00EA4A  4A23               	infsnz	diet_press@count,f,c
  5709  00EA4C  2A24               	incf	diet_press@count+1,f,c
  5710                           
  5711                           ;standbyMode.c: 576: }
  5712  00EA4E  D799               	goto	l307
  5713  00EA50                     l322:
  5714                           
  5715                           ;standbyMode.c: 577: else if (keypress == 11){
  5716  00EA50  0E0B               	movlw	11
  5717  00EA52  1827               	xorwf	diet_press@keypress,w,c
  5718  00EA54  A4D8               	btfss	status,2,c
  5719  00EA56  D795               	goto	l307
  5720                           
  5721                           ;standbyMode.c: 578: putch(input[keypress]);
  5722  00EA58  5027               	movf	diet_press@keypress,w,c
  5723  00EA5A  0D01               	mullw	1
  5724  00EA5C  0EB8               	movlw	low _input
  5725  00EA5E  24F3               	addwf	prodl,w,c
  5726  00EA60  6EF6               	movwf	tblptrl,c
  5727  00EA62  0EFD               	movlw	high _input
  5728  00EA64  20F4               	addwfc	prodh,w,c
  5729  00EA66  6EF7               	movwf	tblptrh,c
  5730  00EA68                     	if	0	;There are less than 3 active tblptr bytes
  5731  00EA68                     	endif
  5732  00EA68  0008               	tblrd		*
  5733  00EA6A  50F5               	movf	tablat,w,c
  5734  00EA6C  ECB9  F06E         	call	_putch
  5735                           
  5736                           ;standbyMode.c: 579: dietTable[count] = keypress + 1;
  5737  00EA70  5027               	movf	diet_press@keypress,w,c
  5738  00EA72  6E1B               	movwf	??_diet_press& (0+255),c
  5739  00EA74  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5740  00EA76  0E01               	movlw	1
  5741  00EA78  261B               	addwf	??_diet_press,f,c
  5742  00EA7A  0E00               	movlw	0
  5743  00EA7C  221C               	addwfc	??_diet_press+1,f,c
  5744  00EA7E                     L43:
  5745  00EA7E  90D8               	bcf	status,0,c
  5746  00EA80  3423               	rlcf	diet_press@count,w,c
  5747  00EA82  6ED9               	movwf	fsr2l,c
  5748  00EA84  3424               	rlcf	diet_press@count+1,w,c
  5749  00EA86  6EDA               	movwf	fsr2h,c
  5750  00EA88  0E28               	movlw	low diet_press@dietTable
  5751  00EA8A  26D9               	addwf	fsr2l,f,c
  5752  00EA8C  0E00               	movlw	high diet_press@dietTable
  5753  00EA8E  22DA               	addwfc	fsr2h,f,c
  5754  00EA90  C01B  FFDE         	movff	??_diet_press,postinc2
  5755  00EA94  C01C  FFDD         	movff	??_diet_press+1,postdec2
  5756  00EA98  D7D8               	goto	l3275
  5757  00EA9A                     l315:
  5758                           
  5759                           ;standbyMode.c: 581: }
  5760                           ;standbyMode.c: 582: }
  5761                           ;standbyMode.c: 583: }
  5762                           ;standbyMode.c: 585: if (backCheck == 1){
  5763  00EA9A  0421               	decf	diet_press@backCheck,w,c
  5764  00EA9C  1022               	iorwf	diet_press@backCheck+1,w,c
  5765  00EA9E  A4D8               	btfss	status,2,c
  5766  00EAA0  D004               	goto	l328
  5767                           
  5768                           ;standbyMode.c: 586: sum = 100;
  5769  00EAA2  0E00               	movlw	0
  5770  00EAA4  6E26               	movwf	diet_press@sum+1,c
  5771  00EAA6  0E64               	movlw	100
  5772  00EAA8  D199               	goto	L42
  5773  00EAAA                     l328:
  5774                           
  5775                           ;standbyMode.c: 590: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5776  00EAAA  0E0C               	movlw	12
  5777  00EAAC  1828               	xorwf	diet_press@dietTable,w,c
  5778  00EAAE  1029               	iorwf	diet_press@dietTable+1,w,c
  5779  00EAB0  A4D8               	btfss	status,2,c
  5780  00EAB2  D010               	goto	l330
  5781  00EAB4  502A               	movf	diet_press@dietTable+2,w,c
  5782  00EAB6  102B               	iorwf	diet_press@dietTable+3,w,c
  5783  00EAB8  A4D8               	btfss	status,2,c
  5784  00EABA  D00C               	goto	l330
  5785  00EABC  502C               	movf	diet_press@dietTable+4,w,c
  5786  00EABE  102D               	iorwf	diet_press@dietTable+5,w,c
  5787  00EAC0  A4D8               	btfss	status,2,c
  5788  00EAC2  D008               	goto	l330
  5789  00EAC4  502E               	movf	diet_press@dietTable+6,w,c
  5790  00EAC6  102F               	iorwf	diet_press@dietTable+7,w,c
  5791  00EAC8  A4D8               	btfss	status,2,c
  5792  00EACA  D004               	goto	l330
  5793                           
  5794                           ;standbyMode.c: 591: sum = 12;
  5795  00EACC  0E00               	movlw	0
  5796  00EACE  6E26               	movwf	diet_press@sum+1,c
  5797  00EAD0  0E0C               	movlw	12
  5798  00EAD2  D184               	goto	L42
  5799  00EAD4                     l330:
  5800                           
  5801                           ;standbyMode.c: 595: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5802  00EAD4  0E03               	movlw	3
  5803  00EAD6  1828               	xorwf	diet_press@dietTable,w,c
  5804  00EAD8  1029               	iorwf	diet_press@dietTable+1,w,c
  5805  00EADA  A4D8               	btfss	status,2,c
  5806  00EADC  D010               	goto	l332
  5807  00EADE  502A               	movf	diet_press@dietTable+2,w,c
  5808  00EAE0  102B               	iorwf	diet_press@dietTable+3,w,c
  5809  00EAE2  A4D8               	btfss	status,2,c
  5810  00EAE4  D00C               	goto	l332
  5811  00EAE6  502C               	movf	diet_press@dietTable+4,w,c
  5812  00EAE8  102D               	iorwf	diet_press@dietTable+5,w,c
  5813  00EAEA  A4D8               	btfss	status,2,c
  5814  00EAEC  D008               	goto	l332
  5815  00EAEE  502E               	movf	diet_press@dietTable+6,w,c
  5816  00EAF0  102F               	iorwf	diet_press@dietTable+7,w,c
  5817  00EAF2  A4D8               	btfss	status,2,c
  5818  00EAF4  D004               	goto	l332
  5819                           
  5820                           ;standbyMode.c: 596: sum = 3;
  5821  00EAF6  0E00               	movlw	0
  5822  00EAF8  6E26               	movwf	diet_press@sum+1,c
  5823  00EAFA  0E03               	movlw	3
  5824  00EAFC  D16F               	goto	L42
  5825  00EAFE                     l332:
  5826                           
  5827                           ;standbyMode.c: 600: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5828  00EAFE  0E07               	movlw	7
  5829  00EB00  1828               	xorwf	diet_press@dietTable,w,c
  5830  00EB02  1029               	iorwf	diet_press@dietTable+1,w,c
  5831  00EB04  A4D8               	btfss	status,2,c
  5832  00EB06  D010               	goto	l334
  5833  00EB08  502A               	movf	diet_press@dietTable+2,w,c
  5834  00EB0A  102B               	iorwf	diet_press@dietTable+3,w,c
  5835  00EB0C  A4D8               	btfss	status,2,c
  5836  00EB0E  D00C               	goto	l334
  5837  00EB10  502C               	movf	diet_press@dietTable+4,w,c
  5838  00EB12  102D               	iorwf	diet_press@dietTable+5,w,c
  5839  00EB14  A4D8               	btfss	status,2,c
  5840  00EB16  D008               	goto	l334
  5841  00EB18  502E               	movf	diet_press@dietTable+6,w,c
  5842  00EB1A  102F               	iorwf	diet_press@dietTable+7,w,c
  5843  00EB1C  A4D8               	btfss	status,2,c
  5844  00EB1E  D004               	goto	l334
  5845                           
  5846                           ;standbyMode.c: 601: sum = 7;
  5847  00EB20  0E00               	movlw	0
  5848  00EB22  6E26               	movwf	diet_press@sum+1,c
  5849  00EB24  0E07               	movlw	7
  5850  00EB26  D15A               	goto	L42
  5851  00EB28                     l334:
  5852                           
  5853                           ;standbyMode.c: 605: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5854  00EB28  0E03               	movlw	3
  5855  00EB2A  1828               	xorwf	diet_press@dietTable,w,c
  5856  00EB2C  1029               	iorwf	diet_press@dietTable+1,w,c
  5857  00EB2E  A4D8               	btfss	status,2,c
  5858  00EB30  D011               	goto	l336
  5859  00EB32  0E07               	movlw	7
  5860  00EB34  182A               	xorwf	diet_press@dietTable+2,w,c
  5861  00EB36  102B               	iorwf	diet_press@dietTable+3,w,c
  5862  00EB38  A4D8               	btfss	status,2,c
  5863  00EB3A  D00C               	goto	l336
  5864  00EB3C  502C               	movf	diet_press@dietTable+4,w,c
  5865  00EB3E  102D               	iorwf	diet_press@dietTable+5,w,c
  5866  00EB40  A4D8               	btfss	status,2,c
  5867  00EB42  D008               	goto	l336
  5868  00EB44  502E               	movf	diet_press@dietTable+6,w,c
  5869  00EB46  102F               	iorwf	diet_press@dietTable+7,w,c
  5870  00EB48  A4D8               	btfss	status,2,c
  5871  00EB4A  D004               	goto	l336
  5872                           
  5873                           ;standbyMode.c: 606: sum = 10;
  5874  00EB4C  0E00               	movlw	0
  5875  00EB4E  6E26               	movwf	diet_press@sum+1,c
  5876  00EB50  0E0A               	movlw	10
  5877  00EB52  D144               	goto	L42
  5878  00EB54                     l336:
  5879                           
  5880                           ;standbyMode.c: 610: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5881  00EB54  0E03               	movlw	3
  5882  00EB56  1828               	xorwf	diet_press@dietTable,w,c
  5883  00EB58  1029               	iorwf	diet_press@dietTable+1,w,c
  5884  00EB5A  A4D8               	btfss	status,2,c
  5885  00EB5C  D011               	goto	l338
  5886  00EB5E  0E0C               	movlw	12
  5887  00EB60  182A               	xorwf	diet_press@dietTable+2,w,c
  5888  00EB62  102B               	iorwf	diet_press@dietTable+3,w,c
  5889  00EB64  A4D8               	btfss	status,2,c
  5890  00EB66  D00C               	goto	l338
  5891  00EB68  502C               	movf	diet_press@dietTable+4,w,c
  5892  00EB6A  102D               	iorwf	diet_press@dietTable+5,w,c
  5893  00EB6C  A4D8               	btfss	status,2,c
  5894  00EB6E  D008               	goto	l338
  5895  00EB70  502E               	movf	diet_press@dietTable+6,w,c
  5896  00EB72  102F               	iorwf	diet_press@dietTable+7,w,c
  5897  00EB74  A4D8               	btfss	status,2,c
  5898  00EB76  D004               	goto	l338
  5899                           
  5900                           ;standbyMode.c: 611: sum = 15;
  5901  00EB78  0E00               	movlw	0
  5902  00EB7A  6E26               	movwf	diet_press@sum+1,c
  5903  00EB7C  0E0F               	movlw	15
  5904  00EB7E  D12E               	goto	L42
  5905  00EB80                     l338:
  5906                           
  5907                           ;standbyMode.c: 615: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5908  00EB80  0E07               	movlw	7
  5909  00EB82  1828               	xorwf	diet_press@dietTable,w,c
  5910  00EB84  1029               	iorwf	diet_press@dietTable+1,w,c
  5911  00EB86  A4D8               	btfss	status,2,c
  5912  00EB88  D011               	goto	l340
  5913  00EB8A  0E0C               	movlw	12
  5914  00EB8C  182A               	xorwf	diet_press@dietTable+2,w,c
  5915  00EB8E  102B               	iorwf	diet_press@dietTable+3,w,c
  5916  00EB90  A4D8               	btfss	status,2,c
  5917  00EB92  D00C               	goto	l340
  5918  00EB94  502C               	movf	diet_press@dietTable+4,w,c
  5919  00EB96  102D               	iorwf	diet_press@dietTable+5,w,c
  5920  00EB98  A4D8               	btfss	status,2,c
  5921  00EB9A  D008               	goto	l340
  5922  00EB9C  502E               	movf	diet_press@dietTable+6,w,c
  5923  00EB9E  102F               	iorwf	diet_press@dietTable+7,w,c
  5924  00EBA0  A4D8               	btfss	status,2,c
  5925  00EBA2  D004               	goto	l340
  5926                           
  5927                           ;standbyMode.c: 616: sum = 19;
  5928  00EBA4  0E00               	movlw	0
  5929  00EBA6  6E26               	movwf	diet_press@sum+1,c
  5930  00EBA8  0E13               	movlw	19
  5931  00EBAA  D118               	goto	L42
  5932  00EBAC                     l340:
  5933                           
  5934                           ;standbyMode.c: 620: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5935  00EBAC  0E03               	movlw	3
  5936  00EBAE  1828               	xorwf	diet_press@dietTable,w,c
  5937  00EBB0  1029               	iorwf	diet_press@dietTable+1,w,c
  5938  00EBB2  A4D8               	btfss	status,2,c
  5939  00EBB4  D012               	goto	l342
  5940  00EBB6  0E03               	movlw	3
  5941  00EBB8  182A               	xorwf	diet_press@dietTable+2,w,c
  5942  00EBBA  102B               	iorwf	diet_press@dietTable+3,w,c
  5943  00EBBC  A4D8               	btfss	status,2,c
  5944  00EBBE  D00D               	goto	l342
  5945  00EBC0  0E07               	movlw	7
  5946  00EBC2  182C               	xorwf	diet_press@dietTable+4,w,c
  5947  00EBC4  102D               	iorwf	diet_press@dietTable+5,w,c
  5948  00EBC6  A4D8               	btfss	status,2,c
  5949  00EBC8  D008               	goto	l342
  5950  00EBCA  502E               	movf	diet_press@dietTable+6,w,c
  5951  00EBCC  102F               	iorwf	diet_press@dietTable+7,w,c
  5952  00EBCE  A4D8               	btfss	status,2,c
  5953  00EBD0  D004               	goto	l342
  5954                           
  5955                           ;standbyMode.c: 621: sum = 13;
  5956  00EBD2  0E00               	movlw	0
  5957  00EBD4  6E26               	movwf	diet_press@sum+1,c
  5958  00EBD6  0E0D               	movlw	13
  5959  00EBD8  D101               	goto	L42
  5960  00EBDA                     l342:
  5961                           
  5962                           ;standbyMode.c: 625: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5963  00EBDA  0E03               	movlw	3
  5964  00EBDC  1828               	xorwf	diet_press@dietTable,w,c
  5965  00EBDE  1029               	iorwf	diet_press@dietTable+1,w,c
  5966  00EBE0  A4D8               	btfss	status,2,c
  5967  00EBE2  D012               	goto	l344
  5968  00EBE4  0E03               	movlw	3
  5969  00EBE6  182A               	xorwf	diet_press@dietTable+2,w,c
  5970  00EBE8  102B               	iorwf	diet_press@dietTable+3,w,c
  5971  00EBEA  A4D8               	btfss	status,2,c
  5972  00EBEC  D00D               	goto	l344
  5973  00EBEE  0E0C               	movlw	12
  5974  00EBF0  182C               	xorwf	diet_press@dietTable+4,w,c
  5975  00EBF2  102D               	iorwf	diet_press@dietTable+5,w,c
  5976  00EBF4  A4D8               	btfss	status,2,c
  5977  00EBF6  D008               	goto	l344
  5978  00EBF8  502E               	movf	diet_press@dietTable+6,w,c
  5979  00EBFA  102F               	iorwf	diet_press@dietTable+7,w,c
  5980  00EBFC  A4D8               	btfss	status,2,c
  5981  00EBFE  D004               	goto	l344
  5982                           
  5983                           ;standbyMode.c: 626: sum = 18;
  5984  00EC00  0E00               	movlw	0
  5985  00EC02  6E26               	movwf	diet_press@sum+1,c
  5986  00EC04  0E12               	movlw	18
  5987  00EC06  D0EA               	goto	L42
  5988  00EC08                     l344:
  5989                           
  5990                           ;standbyMode.c: 630: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5991  00EC08  0E03               	movlw	3
  5992  00EC0A  1828               	xorwf	diet_press@dietTable,w,c
  5993  00EC0C  1029               	iorwf	diet_press@dietTable+1,w,c
  5994  00EC0E  A4D8               	btfss	status,2,c
  5995  00EC10  D012               	goto	l346
  5996  00EC12  0E07               	movlw	7
  5997  00EC14  182A               	xorwf	diet_press@dietTable+2,w,c
  5998  00EC16  102B               	iorwf	diet_press@dietTable+3,w,c
  5999  00EC18  A4D8               	btfss	status,2,c
  6000  00EC1A  D00D               	goto	l346
  6001  00EC1C  0E07               	movlw	7
  6002  00EC1E  182C               	xorwf	diet_press@dietTable+4,w,c
  6003  00EC20  102D               	iorwf	diet_press@dietTable+5,w,c
  6004  00EC22  A4D8               	btfss	status,2,c
  6005  00EC24  D008               	goto	l346
  6006  00EC26  502E               	movf	diet_press@dietTable+6,w,c
  6007  00EC28  102F               	iorwf	diet_press@dietTable+7,w,c
  6008  00EC2A  A4D8               	btfss	status,2,c
  6009  00EC2C  D004               	goto	l346
  6010                           
  6011                           ;standbyMode.c: 631: sum = 17;
  6012  00EC2E  0E00               	movlw	0
  6013  00EC30  6E26               	movwf	diet_press@sum+1,c
  6014  00EC32  0E11               	movlw	17
  6015  00EC34  D0D3               	goto	L42
  6016  00EC36                     l346:
  6017                           
  6018                           ;standbyMode.c: 635: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6019  00EC36  0E03               	movlw	3
  6020  00EC38  1828               	xorwf	diet_press@dietTable,w,c
  6021  00EC3A  1029               	iorwf	diet_press@dietTable+1,w,c
  6022  00EC3C  A4D8               	btfss	status,2,c
  6023  00EC3E  D012               	goto	l348
  6024  00EC40  0E0C               	movlw	12
  6025  00EC42  182A               	xorwf	diet_press@dietTable+2,w,c
  6026  00EC44  102B               	iorwf	diet_press@dietTable+3,w,c
  6027  00EC46  A4D8               	btfss	status,2,c
  6028  00EC48  D00D               	goto	l348
  6029  00EC4A  0E0C               	movlw	12
  6030  00EC4C  182C               	xorwf	diet_press@dietTable+4,w,c
  6031  00EC4E  102D               	iorwf	diet_press@dietTable+5,w,c
  6032  00EC50  A4D8               	btfss	status,2,c
  6033  00EC52  D008               	goto	l348
  6034  00EC54  502E               	movf	diet_press@dietTable+6,w,c
  6035  00EC56  102F               	iorwf	diet_press@dietTable+7,w,c
  6036  00EC58  A4D8               	btfss	status,2,c
  6037  00EC5A  D004               	goto	l348
  6038                           
  6039                           ;standbyMode.c: 636: sum = 27;
  6040  00EC5C  0E00               	movlw	0
  6041  00EC5E  6E26               	movwf	diet_press@sum+1,c
  6042  00EC60  0E1B               	movlw	27
  6043  00EC62  D0BC               	goto	L42
  6044  00EC64                     l348:
  6045                           
  6046                           ;standbyMode.c: 640: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6047  00EC64  0E03               	movlw	3
  6048  00EC66  1828               	xorwf	diet_press@dietTable,w,c
  6049  00EC68  1029               	iorwf	diet_press@dietTable+1,w,c
  6050  00EC6A  A4D8               	btfss	status,2,c
  6051  00EC6C  D012               	goto	l350
  6052  00EC6E  0E07               	movlw	7
  6053  00EC70  182A               	xorwf	diet_press@dietTable+2,w,c
  6054  00EC72  102B               	iorwf	diet_press@dietTable+3,w,c
  6055  00EC74  A4D8               	btfss	status,2,c
  6056  00EC76  D00D               	goto	l350
  6057  00EC78  0E0C               	movlw	12
  6058  00EC7A  182C               	xorwf	diet_press@dietTable+4,w,c
  6059  00EC7C  102D               	iorwf	diet_press@dietTable+5,w,c
  6060  00EC7E  A4D8               	btfss	status,2,c
  6061  00EC80  D008               	goto	l350
  6062  00EC82  502E               	movf	diet_press@dietTable+6,w,c
  6063  00EC84  102F               	iorwf	diet_press@dietTable+7,w,c
  6064  00EC86  A4D8               	btfss	status,2,c
  6065  00EC88  D004               	goto	l350
  6066                           
  6067                           ;standbyMode.c: 641: sum = 22;
  6068  00EC8A  0E00               	movlw	0
  6069  00EC8C  6E26               	movwf	diet_press@sum+1,c
  6070  00EC8E  0E16               	movlw	22
  6071  00EC90  D0A5               	goto	L42
  6072  00EC92                     l350:
  6073                           
  6074                           ;standbyMode.c: 645: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6075  00EC92  0E07               	movlw	7
  6076  00EC94  1828               	xorwf	diet_press@dietTable,w,c
  6077  00EC96  1029               	iorwf	diet_press@dietTable+1,w,c
  6078  00EC98  A4D8               	btfss	status,2,c
  6079  00EC9A  D012               	goto	l352
  6080  00EC9C  0E07               	movlw	7
  6081  00EC9E  182A               	xorwf	diet_press@dietTable+2,w,c
  6082  00ECA0  102B               	iorwf	diet_press@dietTable+3,w,c
  6083  00ECA2  A4D8               	btfss	status,2,c
  6084  00ECA4  D00D               	goto	l352
  6085  00ECA6  0E0C               	movlw	12
  6086  00ECA8  182C               	xorwf	diet_press@dietTable+4,w,c
  6087  00ECAA  102D               	iorwf	diet_press@dietTable+5,w,c
  6088  00ECAC  A4D8               	btfss	status,2,c
  6089  00ECAE  D008               	goto	l352
  6090  00ECB0  502E               	movf	diet_press@dietTable+6,w,c
  6091  00ECB2  102F               	iorwf	diet_press@dietTable+7,w,c
  6092  00ECB4  A4D8               	btfss	status,2,c
  6093  00ECB6  D004               	goto	l352
  6094                           
  6095                           ;standbyMode.c: 646: sum = 26;
  6096  00ECB8  0E00               	movlw	0
  6097  00ECBA  6E26               	movwf	diet_press@sum+1,c
  6098  00ECBC  0E1A               	movlw	26
  6099  00ECBE  D08E               	goto	L42
  6100  00ECC0                     l352:
  6101                           
  6102                           ;standbyMode.c: 650: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6103  00ECC0  0E07               	movlw	7
  6104  00ECC2  1828               	xorwf	diet_press@dietTable,w,c
  6105  00ECC4  1029               	iorwf	diet_press@dietTable+1,w,c
  6106  00ECC6  A4D8               	btfss	status,2,c
  6107  00ECC8  D012               	goto	l354
  6108  00ECCA  0E0C               	movlw	12
  6109  00ECCC  182A               	xorwf	diet_press@dietTable+2,w,c
  6110  00ECCE  102B               	iorwf	diet_press@dietTable+3,w,c
  6111  00ECD0  A4D8               	btfss	status,2,c
  6112  00ECD2  D00D               	goto	l354
  6113  00ECD4  0E0C               	movlw	12
  6114  00ECD6  182C               	xorwf	diet_press@dietTable+4,w,c
  6115  00ECD8  102D               	iorwf	diet_press@dietTable+5,w,c
  6116  00ECDA  A4D8               	btfss	status,2,c
  6117  00ECDC  D008               	goto	l354
  6118  00ECDE  502E               	movf	diet_press@dietTable+6,w,c
  6119  00ECE0  102F               	iorwf	diet_press@dietTable+7,w,c
  6120  00ECE2  A4D8               	btfss	status,2,c
  6121  00ECE4  D004               	goto	l354
  6122                           
  6123                           ;standbyMode.c: 651: sum = 31;
  6124  00ECE6  0E00               	movlw	0
  6125  00ECE8  6E26               	movwf	diet_press@sum+1,c
  6126  00ECEA  0E1F               	movlw	31
  6127  00ECEC  D077               	goto	L42
  6128  00ECEE                     l354:
  6129                           
  6130                           ;standbyMode.c: 655: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6131  00ECEE  0E03               	movlw	3
  6132  00ECF0  1828               	xorwf	diet_press@dietTable,w,c
  6133  00ECF2  1029               	iorwf	diet_press@dietTable+1,w,c
  6134  00ECF4  A4D8               	btfss	status,2,c
  6135  00ECF6  D013               	goto	l356
  6136  00ECF8  0E03               	movlw	3
  6137  00ECFA  182A               	xorwf	diet_press@dietTable+2,w,c
  6138  00ECFC  102B               	iorwf	diet_press@dietTable+3,w,c
  6139  00ECFE  A4D8               	btfss	status,2,c
  6140  00ED00  D00E               	goto	l356
  6141  00ED02  0E07               	movlw	7
  6142  00ED04  182C               	xorwf	diet_press@dietTable+4,w,c
  6143  00ED06  102D               	iorwf	diet_press@dietTable+5,w,c
  6144  00ED08  A4D8               	btfss	status,2,c
  6145  00ED0A  D009               	goto	l356
  6146  00ED0C  0E0C               	movlw	12
  6147  00ED0E  182E               	xorwf	diet_press@dietTable+6,w,c
  6148  00ED10  102F               	iorwf	diet_press@dietTable+7,w,c
  6149  00ED12  A4D8               	btfss	status,2,c
  6150  00ED14  D004               	goto	l356
  6151                           
  6152                           ;standbyMode.c: 656: sum = 25;
  6153  00ED16  0E00               	movlw	0
  6154  00ED18  6E26               	movwf	diet_press@sum+1,c
  6155  00ED1A  0E19               	movlw	25
  6156  00ED1C  D05F               	goto	L42
  6157  00ED1E                     l356:
  6158                           
  6159                           ;standbyMode.c: 660: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6160  00ED1E  0E03               	movlw	3
  6161  00ED20  1828               	xorwf	diet_press@dietTable,w,c
  6162  00ED22  1029               	iorwf	diet_press@dietTable+1,w,c
  6163  00ED24  A4D8               	btfss	status,2,c
  6164  00ED26  D013               	goto	l358
  6165  00ED28  0E07               	movlw	7
  6166  00ED2A  182A               	xorwf	diet_press@dietTable+2,w,c
  6167  00ED2C  102B               	iorwf	diet_press@dietTable+3,w,c
  6168  00ED2E  A4D8               	btfss	status,2,c
  6169  00ED30  D00E               	goto	l358
  6170  00ED32  0E07               	movlw	7
  6171  00ED34  182C               	xorwf	diet_press@dietTable+4,w,c
  6172  00ED36  102D               	iorwf	diet_press@dietTable+5,w,c
  6173  00ED38  A4D8               	btfss	status,2,c
  6174  00ED3A  D009               	goto	l358
  6175  00ED3C  0E0C               	movlw	12
  6176  00ED3E  182E               	xorwf	diet_press@dietTable+6,w,c
  6177  00ED40  102F               	iorwf	diet_press@dietTable+7,w,c
  6178  00ED42  A4D8               	btfss	status,2,c
  6179  00ED44  D004               	goto	l358
  6180                           
  6181                           ;standbyMode.c: 661: sum = 29;
  6182  00ED46  0E00               	movlw	0
  6183  00ED48  6E26               	movwf	diet_press@sum+1,c
  6184  00ED4A  0E1D               	movlw	29
  6185  00ED4C  D047               	goto	L42
  6186  00ED4E                     l358:
  6187                           
  6188                           ;standbyMode.c: 665: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  6189  00ED4E  0E03               	movlw	3
  6190  00ED50  1828               	xorwf	diet_press@dietTable,w,c
  6191  00ED52  1029               	iorwf	diet_press@dietTable+1,w,c
  6192  00ED54  A4D8               	btfss	status,2,c
  6193  00ED56  D013               	goto	l360
  6194  00ED58  0E07               	movlw	7
  6195  00ED5A  182A               	xorwf	diet_press@dietTable+2,w,c
  6196  00ED5C  102B               	iorwf	diet_press@dietTable+3,w,c
  6197  00ED5E  A4D8               	btfss	status,2,c
  6198  00ED60  D00E               	goto	l360
  6199  00ED62  0E0C               	movlw	12
  6200  00ED64  182C               	xorwf	diet_press@dietTable+4,w,c
  6201  00ED66  102D               	iorwf	diet_press@dietTable+5,w,c
  6202  00ED68  A4D8               	btfss	status,2,c
  6203  00ED6A  D009               	goto	l360
  6204  00ED6C  0E0C               	movlw	12
  6205  00ED6E  182E               	xorwf	diet_press@dietTable+6,w,c
  6206  00ED70  102F               	iorwf	diet_press@dietTable+7,w,c
  6207  00ED72  A4D8               	btfss	status,2,c
  6208  00ED74  D004               	goto	l360
  6209                           
  6210                           ;standbyMode.c: 666: sum = 34;
  6211  00ED76  0E00               	movlw	0
  6212  00ED78  6E26               	movwf	diet_press@sum+1,c
  6213  00ED7A  0E22               	movlw	34
  6214  00ED7C  D02F               	goto	L42
  6215  00ED7E                     l360:
  6216                           
  6217                           ;standbyMode.c: 670: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6218  00ED7E  0E03               	movlw	3
  6219  00ED80  1828               	xorwf	diet_press@dietTable,w,c
  6220  00ED82  1029               	iorwf	diet_press@dietTable+1,w,c
  6221  00ED84  A4D8               	btfss	status,2,c
  6222  00ED86  D013               	goto	l362
  6223  00ED88  0E0C               	movlw	12
  6224  00ED8A  182A               	xorwf	diet_press@dietTable+2,w,c
  6225  00ED8C  102B               	iorwf	diet_press@dietTable+3,w,c
  6226  00ED8E  A4D8               	btfss	status,2,c
  6227  00ED90  D00E               	goto	l362
  6228  00ED92  0E0C               	movlw	12
  6229  00ED94  182C               	xorwf	diet_press@dietTable+4,w,c
  6230  00ED96  102D               	iorwf	diet_press@dietTable+5,w,c
  6231  00ED98  A4D8               	btfss	status,2,c
  6232  00ED9A  D009               	goto	l362
  6233  00ED9C  0E0C               	movlw	12
  6234  00ED9E  182E               	xorwf	diet_press@dietTable+6,w,c
  6235  00EDA0  102F               	iorwf	diet_press@dietTable+7,w,c
  6236  00EDA2  A4D8               	btfss	status,2,c
  6237  00EDA4  D004               	goto	l362
  6238                           
  6239                           ;standbyMode.c: 671: sum = 39;
  6240  00EDA6  0E00               	movlw	0
  6241  00EDA8  6E26               	movwf	diet_press@sum+1,c
  6242  00EDAA  0E27               	movlw	39
  6243  00EDAC  D017               	goto	L42
  6244  00EDAE                     l362:
  6245                           
  6246                           ;standbyMode.c: 675: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6247  00EDAE  0E07               	movlw	7
  6248  00EDB0  1828               	xorwf	diet_press@dietTable,w,c
  6249  00EDB2  1029               	iorwf	diet_press@dietTable+1,w,c
  6250  00EDB4  A4D8               	btfss	status,2,c
  6251  00EDB6  D014               	goto	l364
  6252  00EDB8  0E0C               	movlw	12
  6253  00EDBA  182A               	xorwf	diet_press@dietTable+2,w,c
  6254  00EDBC  102B               	iorwf	diet_press@dietTable+3,w,c
  6255  00EDBE  A4D8               	btfss	status,2,c
  6256  00EDC0  D00F               	goto	l364
  6257  00EDC2  0E0C               	movlw	12
  6258  00EDC4  182C               	xorwf	diet_press@dietTable+4,w,c
  6259  00EDC6  102D               	iorwf	diet_press@dietTable+5,w,c
  6260  00EDC8  A4D8               	btfss	status,2,c
  6261  00EDCA  D00A               	goto	l364
  6262  00EDCC  0E0C               	movlw	12
  6263  00EDCE  182E               	xorwf	diet_press@dietTable+6,w,c
  6264  00EDD0  102F               	iorwf	diet_press@dietTable+7,w,c
  6265  00EDD2  A4D8               	btfss	status,2,c
  6266  00EDD4  D005               	goto	l364
  6267                           
  6268                           ;standbyMode.c: 676: sum = 43;
  6269  00EDD6  0E00               	movlw	0
  6270  00EDD8  6E26               	movwf	diet_press@sum+1,c
  6271  00EDDA  0E2B               	movlw	43
  6272  00EDDC                     L42:
  6273  00EDDC  6E25               	movwf	diet_press@sum,c
  6274                           
  6275                           ;standbyMode.c: 677: }
  6276  00EDDE  D02A               	goto	l365
  6277  00EDE0                     l364:
  6278                           
  6279                           ;standbyMode.c: 680: else{
  6280                           ;standbyMode.c: 681: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6281  00EDE0  0E01               	movlw	1
  6282  00EDE2  ECAF  F06E         	call	_lcdInst
  6283  00EDE6  0EC3               	movlw	195
  6284  00EDE8  6E1B               	movwf	??_diet_press& (0+255),c
  6285  00EDEA  0ECD               	movlw	205
  6286  00EDEC                     u6097:
  6287  00EDEC  2EE8               	decfsz	wreg,f,c
  6288  00EDEE  D7FE               	bra	u6097
  6289  00EDF0  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6290  00EDF2  D7FC               	bra	u6097
  6291  00EDF4  F000               	nop	
  6292                           
  6293                           ;standbyMode.c: 682: printf("Invalid diet!");
  6294  00EDF6  0E3A               	movlw	low STR_25
  6295  00EDF8  6E0D               	movwf	printf@f,c
  6296  00EDFA  0EFF               	movlw	high STR_25
  6297  00EDFC  6E0E               	movwf	printf@f+1,c
  6298  00EDFE  EC69  F070         	call	_printf	;wreg free
  6299                           
  6300                           ;standbyMode.c: 683: lcdInst(0xC0);;
  6301  00EE02  0EC0               	movlw	192
  6302  00EE04  ECAF  F06E         	call	_lcdInst
  6303                           
  6304                           ;standbyMode.c: 684: printf("Try again.");
  6305  00EE08  0EAB               	movlw	low STR_22
  6306  00EE0A  6E0D               	movwf	printf@f,c
  6307  00EE0C  0EFF               	movlw	high STR_22
  6308  00EE0E  6E0E               	movwf	printf@f+1,c
  6309  00EE10  EC69  F070         	call	_printf	;wreg free
  6310                           
  6311                           ;standbyMode.c: 685: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6312  00EE14  0E33               	movlw	51
  6313  00EE16  6E1C               	movwf	(??_diet_press+1)& (0+255),c
  6314  00EE18  0EBB               	movlw	187
  6315  00EE1A  6E1B               	movwf	??_diet_press& (0+255),c
  6316  00EE1C  0EE0               	movlw	224
  6317  00EE1E                     u6107:
  6318  00EE1E  2EE8               	decfsz	wreg,f,c
  6319  00EE20  D7FE               	bra	u6107
  6320  00EE22  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6321  00EE24  D7FC               	bra	u6107
  6322  00EE26  2E1C               	decfsz	(??_diet_press+1)& (0+255),f,c
  6323  00EE28  D7FA               	bra	u6107
  6324                           
  6325                           ;standbyMode.c: 686: sum = 0;
  6326  00EE2A  0E00               	movlw	0
  6327  00EE2C  6E26               	movwf	diet_press@sum+1,c
  6328  00EE2E  0E00               	movlw	0
  6329  00EE30  6E25               	movwf	diet_press@sum,c
  6330                           
  6331                           ;standbyMode.c: 687: goto START;
  6332  00EE32  D572               	goto	_diet_press
  6333  00EE34                     l365:
  6334                           
  6335                           ;standbyMode.c: 688: }
  6336                           ;standbyMode.c: 689: return sum;
  6337  00EE34  C025  F019         	movff	diet_press@sum,?_diet_press
  6338  00EE38  C026  F01A         	movff	diet_press@sum+1,?_diet_press+1
  6339  00EE3C  0012               	return		;funcret
  6340  00EE3E                     __end_of_diet_press:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           plusw1	equ	0xFE3
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           plusw2	equ	0xFDB
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _printf *****************
  6359 ;; Defined at:
  6360 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6363 ;;		 -> STR_54(11), STR_53(13), STR_52(11), STR_51(13), 
  6364 ;;		 -> STR_50(11), STR_49(8), STR_48(15), STR_47(16), 
  6365 ;;		 -> STR_46(10), STR_45(8), STR_44(15), STR_43(16), 
  6366 ;;		 -> STR_42(10), STR_41(16), STR_40(16), STR_39(17), 
  6367 ;;		 -> STR_38(13), STR_37(17), STR_36(14), STR_35(11), 
  6368 ;;		 -> STR_34(11), STR_33(16), STR_32(16), STR_31(17), 
  6369 ;;		 -> STR_30(17), STR_29(8), STR_28(15), STR_27(15), 
  6370 ;;		 -> STR_26(11), STR_25(14), STR_24(16), STR_23(16), 
  6371 ;;		 -> STR_22(11), STR_21(14), STR_20(16), STR_19(16), 
  6372 ;;		 -> STR_18(16), STR_17(13), STR_16(13), STR_15(15), 
  6373 ;;		 -> STR_14(16), STR_13(16), STR_12(18), STR_11(6), 
  6374 ;;		 -> STR_10(16), STR_9(5), STR_8(16), STR_7(9), 
  6375 ;;		 -> STR_6(17), STR_5(7), STR_4(9), STR_3(17), 
  6376 ;;		 -> STR_2(11), STR_1(16), 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  tmpval          4    0        struct .
  6379 ;;  cp              3    0        PTR const unsigned char 
  6380 ;;  val             2   21[COMRAM] unsigned int 
  6381 ;;  ap              2   17[COMRAM] PTR void [1]
  6382 ;;		 -> ?_printf(2), 
  6383 ;;  len             2    0        unsigned int 
  6384 ;;  c               1   23[COMRAM] char 
  6385 ;;  prec            1   20[COMRAM] char 
  6386 ;;  flag            1   19[COMRAM] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  2   12[COMRAM] int 
  6389 ;; Registers used:
  6390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;Total ram usage:       12 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    2
  6403 ;; This function calls:
  6404 ;;		___lwdiv
  6405 ;;		___lwmod
  6406 ;;		_putch
  6407 ;; This function is called by:
  6408 ;;		_viewLogs
  6409 ;;		_food_press
  6410 ;;		_diet_press
  6411 ;;		_which_drawer
  6412 ;;		_standbyMode
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text9
  6417  00E0D2                     __ptext9:
  6418                           	opt stack 0
  6419  00E0D2                     _printf:
  6420                           	opt stack 26
  6421                           
  6422                           ;doprnt.c: 466: va_list ap;
  6423                           ;doprnt.c: 499: signed char c;
  6424                           ;doprnt.c: 506: signed char prec;
  6425                           ;doprnt.c: 508: unsigned char flag;
  6426                           ;doprnt.c: 523: union {
  6427                           ;doprnt.c: 524: unsigned long vd;
  6428                           ;doprnt.c: 525: double integ;
  6429                           ;doprnt.c: 526: } tmpval;
  6430                           ;doprnt.c: 528: unsigned int val;
  6431                           ;doprnt.c: 529: unsigned len;
  6432                           ;doprnt.c: 530: const char * cp;
  6433                           ;doprnt.c: 533: *ap = __va_start();
  6434                           
  6435                           ;incstack = 0
  6436  00E0D2  0E0F               	movlw	low (?_printf+2)
  6437  00E0D4  6E12               	movwf	printf@ap,c
  6438  00E0D6  0E00               	movlw	high (?_printf+2)
  6439  00E0D8  6E13               	movwf	printf@ap+1,c
  6440                           
  6441                           ;doprnt.c: 536: while(c = *f++) {
  6442  00E0DA  D07D               	goto	u3810
  6443  00E0DC                     
  6444                           ;doprnt.c: 538: if(c != '%')
  6445  00E0DC  0E25               	movlw	37
  6446  00E0DE  1818               	xorwf	printf@c,w,c
  6447  00E0E0  B4D8               	btfsc	status,2,c
  6448  00E0E2  D004               	goto	l502
  6449                           
  6450                           ;doprnt.c: 540: {
  6451                           ;doprnt.c: 541: (putch(c) );
  6452  00E0E4  5018               	movf	printf@c,w,c
  6453  00E0E6  ECB9  F06E         	call	_putch
  6454                           
  6455                           ;doprnt.c: 542: continue;
  6456  00E0EA  D075               	goto	u3810
  6457  00E0EC                     l502:
  6458                           
  6459                           ;doprnt.c: 543: }
  6460                           ;doprnt.c: 548: flag = 0;
  6461  00E0EC  0E00               	movlw	0
  6462  00E0EE  6E14               	movwf	printf@flag,c
  6463                           
  6464                           ;doprnt.c: 822: }
  6465                           
  6466                           ;doprnt.c: 813: continue;
  6467                           
  6468                           ;doprnt.c: 802: default:
  6469                           
  6470                           ;doprnt.c: 698: case 'i':
  6471                           ;doprnt.c: 699: break;
  6472                           
  6473                           ;doprnt.c: 697: case 'd':
  6474                           
  6475                           ;doprnt.c: 638: goto alldone;
  6476                           
  6477                           ;doprnt.c: 637: case 0:
  6478                           
  6479                           ;doprnt.c: 635: switch(c = *f++) {
  6480  00E0F0  C00D  FFF6         	movff	printf@f,tblptrl
  6481  00E0F4  C00E  FFF7         	movff	printf@f+1,tblptrh
  6482  00E0F8  4A0D               	infsnz	printf@f,f,c
  6483  00E0FA  2A0E               	incf	printf@f+1,f,c
  6484  00E0FC                     	if	0	;tblptru may be non-zero
  6485  00E0FC                     	endif
  6486  00E0FC                     	if	0	;tblptru may be non-zero
  6487  00E0FC                     	endif
  6488  00E0FC  0008               	tblrd		*
  6489  00E0FE  CFF5 F018          	movff	tablat,printf@c
  6490  00E102  5018               	movf	printf@c,w,c
  6491                           
  6492                           ; Switch size 1, requested type "space"
  6493                           ; Number of cases is 3, Range of values is 0 to 105
  6494                           ; switch strategies available:
  6495                           ; Name         Instructions Cycles
  6496                           ; simple_byte           10     6 (average)
  6497                           ;	Chosen strategy is simple_byte
  6498  00E104  0A00               	xorlw	0	; case 0
  6499  00E106  B4D8               	btfsc	status,2,c
  6500  00E108  0012               	return	
  6501  00E10A  0A64               	xorlw	100	; case 100
  6502  00E10C  B4D8               	btfsc	status,2,c
  6503  00E10E  D003               	goto	l508
  6504  00E110  0A0D               	xorlw	13	; case 105
  6505  00E112  A4D8               	btfss	status,2,c
  6506  00E114  D060               	goto	u3810
  6507  00E116                     l508:
  6508                           
  6509                           ;doprnt.c: 1253: {
  6510                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6511  00E116  C012  FFD9         	movff	printf@ap,fsr2l
  6512  00E11A  C013  FFDA         	movff	printf@ap+1,fsr2h
  6513  00E11E  CFDE F016          	movff	postinc2,printf@val
  6514  00E122  CFDD F017          	movff	postdec2,printf@val+1
  6515  00E126  0E02               	movlw	2
  6516  00E128  2612               	addwf	printf@ap,f,c
  6517  00E12A  0E00               	movlw	0
  6518  00E12C  2213               	addwfc	printf@ap+1,f,c
  6519                           
  6520                           ;doprnt.c: 1261: if((int)val < 0) {
  6521  00E12E  AE17               	btfss	printf@val+1,7,c
  6522  00E130  D006               	goto	l510
  6523                           
  6524                           ;doprnt.c: 1262: flag |= 0x03;
  6525  00E132  0E03               	movlw	3
  6526  00E134  1214               	iorwf	printf@flag,f,c
  6527                           
  6528                           ;doprnt.c: 1263: val = -val;
  6529  00E136  6C16               	negf	printf@val,c
  6530  00E138  1E17               	comf	printf@val+1,f,c
  6531  00E13A  B0D8               	btfsc	status,0,c
  6532  00E13C  2A17               	incf	printf@val+1,f,c
  6533  00E13E                     l510:
  6534                           
  6535                           ;doprnt.c: 1264: }
  6536                           ;doprnt.c: 1266: }
  6537                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6538  00E13E  0E01               	movlw	1
  6539  00E140  6E18               	movwf	printf@c,c
  6540  00E142                     l2897:
  6541  00E142  0E05               	movlw	5
  6542  00E144  1818               	xorwf	printf@c,w,c
  6543  00E146  B4D8               	btfsc	status,2,c
  6544  00E148  D012               	goto	u3790
  6545                           
  6546                           ;doprnt.c: 1306: if(val < dpowers[c])
  6547  00E14A  5018               	movf	printf@c,w,c
  6548  00E14C  0D02               	mullw	2
  6549  00E14E  0EC9               	movlw	low _dpowers
  6550  00E150  24F3               	addwf	prodl,w,c
  6551  00E152  6EF6               	movwf	tblptrl,c
  6552  00E154  0EFD               	movlw	high _dpowers
  6553  00E156  20F4               	addwfc	prodh,w,c
  6554  00E158  6EF7               	movwf	tblptrh,c
  6555  00E15A                     	if	0	;There are less than 3 active tblptr bytes
  6556  00E15A                     	endif
  6557  00E15A  0009               	tblrd		*+
  6558  00E15C  50F5               	movf	tablat,w,c
  6559  00E15E  5C16               	subwf	printf@val,w,c
  6560  00E160  0009               	tblrd		*+
  6561  00E162  50F5               	movf	tablat,w,c
  6562  00E164  5817               	subwfb	printf@val+1,w,c
  6563  00E166  A0D8               	btfss	status,0,c
  6564  00E168  D002               	goto	u3790
  6565                           
  6566                           ;doprnt.c: 1307: break;
  6567  00E16A  2A18               	incf	printf@c,f,c
  6568  00E16C  D7EA               	goto	l2897
  6569  00E16E                     u3790:
  6570                           
  6571                           ;doprnt.c: 1422: {
  6572                           ;doprnt.c: 1438: if(flag & 0x03)
  6573  00E16E  C014  F011         	movff	printf@flag,??_printf
  6574  00E172  0E03               	movlw	3
  6575  00E174  1611               	andwf	??_printf,f,c
  6576  00E176  B4D8               	btfsc	status,2,c
  6577  00E178  D003               	goto	l514
  6578                           
  6579                           ;doprnt.c: 1439: (putch('-') );
  6580  00E17A  0E2D               	movlw	45
  6581  00E17C  ECB9  F06E         	call	_putch
  6582  00E180                     l514:
  6583                           
  6584                           ;doprnt.c: 1469: }
  6585                           ;doprnt.c: 1472: prec = c;
  6586  00E180  C018  F015         	movff	printf@c,printf@prec
  6587                           
  6588                           ;doprnt.c: 1474: while(prec--) {
  6589  00E184  D024               	goto	l515
  6590  00E186                     
  6591                           ;doprnt.c: 1478: {
  6592                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6593  00E186  5015               	movf	printf@prec,w,c
  6594  00E188  0D02               	mullw	2
  6595  00E18A  0EC9               	movlw	low _dpowers
  6596  00E18C  24F3               	addwf	prodl,w,c
  6597  00E18E  6EF6               	movwf	tblptrl,c
  6598  00E190  0EFD               	movlw	high _dpowers
  6599  00E192  20F4               	addwfc	prodh,w,c
  6600  00E194  6EF7               	movwf	tblptrh,c
  6601  00E196                     	if	0	;There are less than 3 active tblptr bytes
  6602  00E196                     	endif
  6603  00E196  0009               	tblrd		*+
  6604  00E198  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6605  00E19C  000A               	tblrd		*-
  6606  00E19E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6607  00E1A2  C016  F001         	movff	printf@val,___lwdiv@dividend
  6608  00E1A6  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  6609  00E1AA  EC31  F06F         	call	___lwdiv	;wreg free
  6610  00E1AE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6611  00E1B2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6612  00E1B6  0E00               	movlw	0
  6613  00E1B8  6E0B               	movwf	___lwmod@divisor+1,c
  6614  00E1BA  0E0A               	movlw	10
  6615  00E1BC  6E0A               	movwf	___lwmod@divisor,c
  6616  00E1BE  ECEA  F06E         	call	___lwmod	;wreg free
  6617  00E1C2  5008               	movf	?___lwmod,w,c
  6618  00E1C4  0F30               	addlw	48
  6619  00E1C6  6E18               	movwf	printf@c,c
  6620                           
  6621                           ;doprnt.c: 1523: }
  6622                           ;doprnt.c: 1524: (putch(c) );
  6623  00E1C8  5018               	movf	printf@c,w,c
  6624  00E1CA  ECB9  F06E         	call	_putch
  6625  00E1CE                     l515:
  6626  00E1CE  0615               	decf	printf@prec,f,c
  6627  00E1D0  2815               	incf	printf@prec,w,c
  6628  00E1D2  A4D8               	btfss	status,2,c
  6629  00E1D4  D7D8               	goto	l516
  6630  00E1D6                     u3810:
  6631  00E1D6  C00D  FFF6         	movff	printf@f,tblptrl
  6632  00E1DA  C00E  FFF7         	movff	printf@f+1,tblptrh
  6633  00E1DE  4A0D               	infsnz	printf@f,f,c
  6634  00E1E0  2A0E               	incf	printf@f+1,f,c
  6635  00E1E2                     	if	0	;tblptru may be non-zero
  6636  00E1E2                     	endif
  6637  00E1E2                     	if	0	;tblptru may be non-zero
  6638  00E1E2                     	endif
  6639  00E1E2  0008               	tblrd		*
  6640  00E1E4  CFF5 F018          	movff	tablat,printf@c
  6641  00E1E8  5018               	movf	printf@c,w,c
  6642  00E1EA  B4D8               	btfsc	status,2,c
  6643  00E1EC  0012               	return	
  6644  00E1EE  D776               	goto	l501
  6645  00E1F0                     __end_of_printf:
  6646                           	opt stack 0
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           postinc0	equ	0xFEE
  6654                           wreg	equ	0xFE8
  6655                           plusw1	equ	0xFE3
  6656                           postinc2	equ	0xFDE
  6657                           postdec2	equ	0xFDD
  6658                           plusw2	equ	0xFDB
  6659                           fsr2h	equ	0xFDA
  6660                           fsr2l	equ	0xFD9
  6661                           status	equ	0xFD8
  6662                           
  6663 ;; *************** function _putch *****************
  6664 ;; Defined at:
  6665 ;;		line 73 in file "standbyMode.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;  data            1    wreg     unsigned char 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  data            1    2[COMRAM] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      void 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;Total ram usage:        1 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    1
  6686 ;; This function calls:
  6687 ;;		_lcdNibble
  6688 ;; This function is called by:
  6689 ;;		_viewLogs
  6690 ;;		_food_press
  6691 ;;		_diet_press
  6692 ;;		_which_drawer
  6693 ;;		_printf
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text10
  6698  00DD72                     __ptext10:
  6699                           	opt stack 0
  6700  00DD72                     _putch:
  6701                           	opt stack 27
  6702                           
  6703                           ;incstack = 0
  6704                           ;putch@data stored from wreg
  6705  00DD72  6E03               	movwf	putch@data,c
  6706                           
  6707                           ;standbyMode.c: 81: LATDbits.LATD2 = 1;
  6708  00DD74  848C               	bsf	3980,2,c	;volatile
  6709                           
  6710                           ;standbyMode.c: 82: lcdNibble(data);
  6711  00DD76  5003               	movf	putch@data,w,c
  6712  00DD78  EC5A  F06F         	call	_lcdNibble
  6713                           
  6714                           ;standbyMode.c: 83: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6715  00DD7C  0EC8               	movlw	200
  6716  00DD7E                     u6117:
  6717  00DD7E  D000               	nop2	
  6718  00DD80  2EE8               	decfsz	wreg,f,c
  6719  00DD82  D7FD               	bra	u6117
  6720  00DD84  0012               	return		;funcret
  6721  00DD86                     __end_of_putch:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           plusw1	equ	0xFE3
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           plusw2	equ	0xFDB
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739 ;; *************** function ___lwmod *****************
  6740 ;; Defined at:
  6741 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  dividend        2    7[COMRAM] unsigned int 
  6744 ;;  divisor         2    9[COMRAM] unsigned int 
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;  counter         1   11[COMRAM] unsigned char 
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  2    7[COMRAM] unsigned int 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2, status,0
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;Total ram usage:        5 bytes
  6761 ;; Hardware stack levels used:    1
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_printf
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text11
  6770  00DDD4                     __ptext11:
  6771                           	opt stack 0
  6772  00DDD4                     ___lwmod:
  6773                           	opt stack 27
  6774                           
  6775                           ;incstack = 0
  6776  00DDD4  500A               	movf	___lwmod@divisor,w,c
  6777  00DDD6  100B               	iorwf	___lwmod@divisor+1,w,c
  6778  00DDD8  B4D8               	btfsc	status,2,c
  6779  00DDDA  D018               	goto	l938
  6780  00DDDC  0E01               	movlw	1
  6781  00DDDE  6E0C               	movwf	___lwmod@counter,c
  6782  00DDE0  D004               	goto	l933
  6783  00DDE2  90D8               	bcf	status,0,c
  6784  00DDE4  360A               	rlcf	___lwmod@divisor,f,c
  6785  00DDE6  360B               	rlcf	___lwmod@divisor+1,f,c
  6786  00DDE8  2A0C               	incf	___lwmod@counter,f,c
  6787  00DDEA                     l933:
  6788  00DDEA  AE0B               	btfss	___lwmod@divisor+1,7,c
  6789  00DDEC  D7FA               	goto	l934
  6790  00DDEE                     u2820:
  6791  00DDEE  500A               	movf	___lwmod@divisor,w,c
  6792  00DDF0  5C08               	subwf	___lwmod@dividend,w,c
  6793  00DDF2  500B               	movf	___lwmod@divisor+1,w,c
  6794  00DDF4  5809               	subwfb	___lwmod@dividend+1,w,c
  6795  00DDF6  A0D8               	btfss	status,0,c
  6796  00DDF8  D004               	goto	l937
  6797  00DDFA  500A               	movf	___lwmod@divisor,w,c
  6798  00DDFC  5E08               	subwf	___lwmod@dividend,f,c
  6799  00DDFE  500B               	movf	___lwmod@divisor+1,w,c
  6800  00DE00  5A09               	subwfb	___lwmod@dividend+1,f,c
  6801  00DE02                     l937:
  6802  00DE02  90D8               	bcf	status,0,c
  6803  00DE04  320B               	rrcf	___lwmod@divisor+1,f,c
  6804  00DE06  320A               	rrcf	___lwmod@divisor,f,c
  6805  00DE08  2E0C               	decfsz	___lwmod@counter,f,c
  6806  00DE0A  D7F1               	goto	u2820
  6807  00DE0C                     l938:
  6808  00DE0C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6809  00DE10  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6810  00DE14  0012               	return		;funcret
  6811  00DE16                     __end_of___lwmod:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           postinc0	equ	0xFEE
  6820                           wreg	equ	0xFE8
  6821                           plusw1	equ	0xFE3
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           plusw2	equ	0xFDB
  6825                           fsr2h	equ	0xFDA
  6826                           fsr2l	equ	0xFD9
  6827                           status	equ	0xFD8
  6828                           
  6829 ;; *************** function ___lwdiv *****************
  6830 ;; Defined at:
  6831 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  dividend        2    0[COMRAM] unsigned int 
  6834 ;;  divisor         2    2[COMRAM] unsigned int 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  quotient        2    4[COMRAM] unsigned int 
  6837 ;;  counter         1    6[COMRAM] unsigned char 
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  2    0[COMRAM] unsigned int 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2, status,0
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;Total ram usage:        7 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_printf
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text12
  6861  00DE62                     __ptext12:
  6862                           	opt stack 0
  6863  00DE62                     ___lwdiv:
  6864                           	opt stack 27
  6865                           
  6866                           ;incstack = 0
  6867  00DE62  0E00               	movlw	0
  6868  00DE64  6E06               	movwf	___lwdiv@quotient+1,c
  6869  00DE66  0E00               	movlw	0
  6870  00DE68  6E05               	movwf	___lwdiv@quotient,c
  6871  00DE6A  5003               	movf	___lwdiv@divisor,w,c
  6872  00DE6C  1004               	iorwf	___lwdiv@divisor+1,w,c
  6873  00DE6E  B4D8               	btfsc	status,2,c
  6874  00DE70  D01C               	goto	l928
  6875  00DE72  0E01               	movlw	1
  6876  00DE74  6E07               	movwf	___lwdiv@counter,c
  6877  00DE76  D004               	goto	l923
  6878  00DE78  90D8               	bcf	status,0,c
  6879  00DE7A  3603               	rlcf	___lwdiv@divisor,f,c
  6880  00DE7C  3604               	rlcf	___lwdiv@divisor+1,f,c
  6881  00DE7E  2A07               	incf	___lwdiv@counter,f,c
  6882  00DE80                     l923:
  6883  00DE80  AE04               	btfss	___lwdiv@divisor+1,7,c
  6884  00DE82  D7FA               	goto	l924
  6885  00DE84                     u2790:
  6886  00DE84  90D8               	bcf	status,0,c
  6887  00DE86  3605               	rlcf	___lwdiv@quotient,f,c
  6888  00DE88  3606               	rlcf	___lwdiv@quotient+1,f,c
  6889  00DE8A  5003               	movf	___lwdiv@divisor,w,c
  6890  00DE8C  5C01               	subwf	___lwdiv@dividend,w,c
  6891  00DE8E  5004               	movf	___lwdiv@divisor+1,w,c
  6892  00DE90  5802               	subwfb	___lwdiv@dividend+1,w,c
  6893  00DE92  A0D8               	btfss	status,0,c
  6894  00DE94  D005               	goto	l927
  6895  00DE96  5003               	movf	___lwdiv@divisor,w,c
  6896  00DE98  5E01               	subwf	___lwdiv@dividend,f,c
  6897  00DE9A  5004               	movf	___lwdiv@divisor+1,w,c
  6898  00DE9C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6899  00DE9E  8005               	bsf	___lwdiv@quotient,0,c
  6900  00DEA0                     l927:
  6901  00DEA0  90D8               	bcf	status,0,c
  6902  00DEA2  3204               	rrcf	___lwdiv@divisor+1,f,c
  6903  00DEA4  3203               	rrcf	___lwdiv@divisor,f,c
  6904  00DEA6  2E07               	decfsz	___lwdiv@counter,f,c
  6905  00DEA8  D7ED               	goto	u2790
  6906  00DEAA                     l928:
  6907  00DEAA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6908  00DEAE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6909  00DEB2  0012               	return		;funcret
  6910  00DEB4                     __end_of___lwdiv:
  6911                           	opt stack 0
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           postinc0	equ	0xFEE
  6919                           wreg	equ	0xFE8
  6920                           plusw1	equ	0xFE3
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           plusw2	equ	0xFDB
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _initLCD *****************
  6929 ;; Defined at:
  6930 ;;		line 28 in file "standbyMode.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      void 
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        1 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    2
  6951 ;; This function calls:
  6952 ;;		_lcdInst
  6953 ;; This function is called by:
  6954 ;;		_main
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text13
  6959  00DE16                     __ptext13:
  6960                           	opt stack 0
  6961  00DE16                     _initLCD:
  6962                           	opt stack 28
  6963                           
  6964                           ;standbyMode.c: 36: _delay((unsigned long)((15)*(40000000/4000.0)));
  6965                           
  6966                           ;incstack = 0
  6967  00DE16  0EC3               	movlw	195
  6968  00DE18  6E04               	movwf	??_initLCD& (0+255),c
  6969  00DE1A  0ECD               	movlw	205
  6970  00DE1C                     u6127:
  6971  00DE1C  2EE8               	decfsz	wreg,f,c
  6972  00DE1E  D7FE               	bra	u6127
  6973  00DE20  2E04               	decfsz	??_initLCD& (0+255),f,c
  6974  00DE22  D7FC               	bra	u6127
  6975  00DE24  F000               	nop	
  6976                           
  6977                           ;standbyMode.c: 37: lcdInst(0b00110011);
  6978  00DE26  0E33               	movlw	51
  6979  00DE28  ECAF  F06E         	call	_lcdInst
  6980                           
  6981                           ;standbyMode.c: 38: lcdInst(0b00110010);
  6982  00DE2C  0E32               	movlw	50
  6983  00DE2E  ECAF  F06E         	call	_lcdInst
  6984                           
  6985                           ;standbyMode.c: 39: lcdInst(0b00101000);
  6986  00DE32  0E28               	movlw	40
  6987  00DE34  ECAF  F06E         	call	_lcdInst
  6988                           
  6989                           ;standbyMode.c: 40: lcdInst(0b00001111);
  6990  00DE38  0E0F               	movlw	15
  6991  00DE3A  ECAF  F06E         	call	_lcdInst
  6992                           
  6993                           ;standbyMode.c: 41: lcdInst(0b00000110);
  6994  00DE3E  0E06               	movlw	6
  6995  00DE40  ECAF  F06E         	call	_lcdInst
  6996                           
  6997                           ;standbyMode.c: 42: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6998  00DE44  0E01               	movlw	1
  6999  00DE46  ECAF  F06E         	call	_lcdInst
  7000  00DE4A  0EC3               	movlw	195
  7001  00DE4C  6E04               	movwf	??_initLCD& (0+255),c
  7002  00DE4E  0ECD               	movlw	205
  7003  00DE50                     u6137:
  7004  00DE50  2EE8               	decfsz	wreg,f,c
  7005  00DE52  D7FE               	bra	u6137
  7006  00DE54  2E04               	decfsz	??_initLCD& (0+255),f,c
  7007  00DE56  D7FC               	bra	u6137
  7008  00DE58  F000               	nop	
  7009                           
  7010                           ;standbyMode.c: 45: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  7011  00DE5A  0E0F               	movlw	15
  7012  00DE5C  ECAF  F06E         	call	_lcdInst
  7013  00DE60  0012               	return		;funcret
  7014  00DE62                     __end_of_initLCD:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           postinc0	equ	0xFEE
  7023                           wreg	equ	0xFE8
  7024                           plusw1	equ	0xFE3
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           plusw2	equ	0xFDB
  7028                           fsr2h	equ	0xFDA
  7029                           fsr2l	equ	0xFD9
  7030                           status	equ	0xFD8
  7031                           
  7032 ;; *************** function _lcdInst *****************
  7033 ;; Defined at:
  7034 ;;		line 14 in file "standbyMode.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;  data            1    wreg     unsigned char 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;  data            1    2[COMRAM] unsigned char 
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;Total ram usage:        1 bytes
  7053 ;; Hardware stack levels used:    1
  7054 ;; Hardware stack levels required when called:    1
  7055 ;; This function calls:
  7056 ;;		_lcdNibble
  7057 ;; This function is called by:
  7058 ;;		_initLCD
  7059 ;;		_viewLogs
  7060 ;;		_food_press
  7061 ;;		_diet_press
  7062 ;;		_which_drawer
  7063 ;;		_standbyMode
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text14
  7068  00DD5E                     __ptext14:
  7069                           	opt stack 0
  7070  00DD5E                     _lcdInst:
  7071                           	opt stack 27
  7072                           
  7073                           ;incstack = 0
  7074                           ;lcdInst@data stored from wreg
  7075  00DD5E  6E03               	movwf	lcdInst@data,c
  7076                           
  7077                           ;standbyMode.c: 22: LATDbits.LATD2 = 0;
  7078  00DD60  948C               	bcf	3980,2,c	;volatile
  7079                           
  7080                           ;standbyMode.c: 23: lcdNibble(data);
  7081  00DD62  5003               	movf	lcdInst@data,w,c
  7082  00DD64  EC5A  F06F         	call	_lcdNibble
  7083                           
  7084                           ;standbyMode.c: 24: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7085  00DD68  0EC8               	movlw	200
  7086  00DD6A                     u6147:
  7087  00DD6A  D000               	nop2	
  7088  00DD6C  2EE8               	decfsz	wreg,f,c
  7089  00DD6E  D7FD               	bra	u6147
  7090  00DD70  0012               	return		;funcret
  7091  00DD72                     __end_of_lcdInst:
  7092                           	opt stack 0
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           plusw1	equ	0xFE3
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _lcdNibble *****************
  7110 ;; Defined at:
  7111 ;;		line 49 in file "standbyMode.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  data            1    wreg     unsigned char 
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;  data            1    1[COMRAM] unsigned char 
  7116 ;;  temp            1    0[COMRAM] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      void 
  7119 ;; Registers used:
  7120 ;;		wreg, status,2, status,0
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_lcdInst
  7136 ;;		_putch
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text15
  7141  00DEB4                     __ptext15:
  7142                           	opt stack 0
  7143  00DEB4                     _lcdNibble:
  7144                           	opt stack 27
  7145                           
  7146                           ;incstack = 0
  7147                           ;lcdNibble@data stored from wreg
  7148  00DEB4  6E02               	movwf	lcdNibble@data,c
  7149                           
  7150                           ;standbyMode.c: 57: char temp = (unsigned char) (data & 0xF0);
  7151  00DEB6  5002               	movf	lcdNibble@data,w,c
  7152  00DEB8  0BF0               	andlw	240
  7153  00DEBA  6E01               	movwf	lcdNibble@temp,c
  7154                           
  7155                           ;standbyMode.c: 58: LATD = (unsigned char) (LATD & 0x0F);
  7156  00DEBC  508C               	movf	3980,w,c	;volatile
  7157  00DEBE  0B0F               	andlw	15
  7158  00DEC0  6E8C               	movwf	3980,c	;volatile
  7159                           
  7160                           ;standbyMode.c: 59: LATD = (unsigned char) (temp | LATD);
  7161  00DEC2  5001               	movf	lcdNibble@temp,w,c
  7162  00DEC4  108C               	iorwf	3980,w,c	;volatile
  7163  00DEC6  6E8C               	movwf	3980,c	;volatile
  7164                           
  7165                           ;standbyMode.c: 61: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7166  00DEC8  0E00               	movlw	0
  7167  00DECA  BEF2               	btfsc	intcon,7,c	;volatile
  7168  00DECC  0E01               	movlw	1
  7169  00DECE  6E66               	movwf	standbyMode@LCDinterruptState,c
  7170  00DED0  9EF2               	bcf	intcon,7,c	;volatile
  7171  00DED2  868C               	bsf	3980,3,c	;volatile
  7172  00DED4  0E53               	movlw	83
  7173  00DED6                     u6157:
  7174  00DED6  2EE8               	decfsz	wreg,f,c
  7175  00DED8  D7FE               	bra	u6157
  7176  00DEDA  F000               	nop	
  7177  00DEDC  968C               	bcf	3980,3,c	;volatile
  7178  00DEDE  0EC8               	movlw	200
  7179  00DEE0                     u6167:
  7180  00DEE0  D000               	nop2	
  7181  00DEE2  2EE8               	decfsz	wreg,f,c
  7182  00DEE4  D7FD               	bra	u6167
  7183  00DEE6  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  7184  00DEE8  D002               	bra	u15
  7185  00DEEA  9EF2               	bcf	intcon,7,c	;volatile
  7186  00DEEC  D001               	bra	u16
  7187  00DEEE                     u15:
  7188  00DEEE  8EF2               	bsf	intcon,7,c	;volatile
  7189  00DEF0                     u16:
  7190                           
  7191                           ;standbyMode.c: 64: data = (unsigned char) (data << 4);
  7192  00DEF0  3802               	swapf	lcdNibble@data,w,c
  7193  00DEF2  0BF0               	andlw	240
  7194  00DEF4  6E02               	movwf	lcdNibble@data,c
  7195                           
  7196                           ;standbyMode.c: 65: temp = (unsigned char) (data & 0xF0);
  7197  00DEF6  5002               	movf	lcdNibble@data,w,c
  7198  00DEF8  0BF0               	andlw	240
  7199  00DEFA  6E01               	movwf	lcdNibble@temp,c
  7200                           
  7201                           ;standbyMode.c: 66: LATD = (unsigned char) (LATD & 0x0F);
  7202  00DEFC  508C               	movf	3980,w,c	;volatile
  7203  00DEFE  0B0F               	andlw	15
  7204  00DF00  6E8C               	movwf	3980,c	;volatile
  7205                           
  7206                           ;standbyMode.c: 67: LATD = (unsigned char) (temp | LATD);
  7207  00DF02  5001               	movf	lcdNibble@temp,w,c
  7208  00DF04  108C               	iorwf	3980,w,c	;volatile
  7209  00DF06  6E8C               	movwf	3980,c	;volatile
  7210                           
  7211                           ;standbyMode.c: 69: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7212  00DF08  0E00               	movlw	0
  7213  00DF0A  BEF2               	btfsc	intcon,7,c	;volatile
  7214  00DF0C  0E01               	movlw	1
  7215  00DF0E  6E66               	movwf	standbyMode@LCDinterruptState,c
  7216  00DF10  9EF2               	bcf	intcon,7,c	;volatile
  7217  00DF12  868C               	bsf	3980,3,c	;volatile
  7218  00DF14  0E53               	movlw	83
  7219  00DF16                     u6177:
  7220  00DF16  2EE8               	decfsz	wreg,f,c
  7221  00DF18  D7FE               	bra	u6177
  7222  00DF1A  F000               	nop	
  7223  00DF1C  968C               	bcf	3980,3,c	;volatile
  7224  00DF1E  0EC8               	movlw	200
  7225  00DF20                     u6187:
  7226  00DF20  D000               	nop2	
  7227  00DF22  2EE8               	decfsz	wreg,f,c
  7228  00DF24  D7FD               	bra	u6187
  7229  00DF26  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  7230  00DF28  D002               	bra	u25
  7231  00DF2A  9EF2               	bcf	intcon,7,c	;volatile
  7232  00DF2C  D001               	bra	u26
  7233  00DF2E                     u25:
  7234  00DF2E  8EF2               	bsf	intcon,7,c	;volatile
  7235  00DF30                     u26:
  7236  00DF30  0012               	return		;funcret
  7237  00DF32                     __end_of_lcdNibble:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           postinc0	equ	0xFEE
  7247                           wreg	equ	0xFE8
  7248                           plusw1	equ	0xFE3
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           plusw2	equ	0xFDB
  7252                           fsr2h	equ	0xFDA
  7253                           fsr2l	equ	0xFD9
  7254                           status	equ	0xFD8
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           postinc0	equ	0xFEE
  7263                           wreg	equ	0xFE8
  7264                           plusw1	equ	0xFE3
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           plusw2	equ	0xFDB
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8
  7271                           
  7272                           	psect	rparam
  7273  0000                     tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           intcon	equ	0xFF2
  7280                           postinc0	equ	0xFEE
  7281                           wreg	equ	0xFE8
  7282                           plusw1	equ	0xFE3
  7283                           postinc2	equ	0xFDE
  7284                           postdec2	equ	0xFDD
  7285                           plusw2	equ	0xFDB
  7286                           fsr2h	equ	0xFDA
  7287                           fsr2l	equ	0xFD9
  7288                           status	equ	0xFD8


Data Sizes:
    Strings     550
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[11]), STR_53(CODE[13]), STR_52(CODE[11]), STR_51(CODE[13]), 
		 -> STR_50(CODE[11]), STR_49(CODE[8]), STR_48(CODE[15]), STR_47(CODE[16]), 
		 -> STR_46(CODE[10]), STR_45(CODE[8]), STR_44(CODE[15]), STR_43(CODE[16]), 
		 -> STR_42(CODE[10]), STR_41(CODE[16]), STR_40(CODE[16]), STR_39(CODE[17]), 
		 -> STR_38(CODE[13]), STR_37(CODE[17]), STR_36(CODE[14]), STR_35(CODE[11]), 
		 -> STR_34(CODE[11]), STR_33(CODE[16]), STR_32(CODE[16]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[8]), STR_28(CODE[15]), STR_27(CODE[15]), 
		 -> STR_26(CODE[11]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[16]), 
		 -> STR_22(CODE[11]), STR_21(CODE[14]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[13]), STR_16(CODE[13]), STR_15(CODE[15]), 
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[6]), 
		 -> STR_10(CODE[16]), STR_9(CODE[5]), STR_8(CODE[16]), STR_7(CODE[9]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[9]), STR_3(CODE[17]), 
		 -> STR_2(CODE[11]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_diet_press
    _standbyMode->_food_press
    _which_drawer->_printf
    _viewLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   34527
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         22    22      0   34437
                                             47 COMRAM    22    22      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                           _viewLogs
                       _which_drawer
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    6348
                                             24 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             6     4      2    5541
                                             24 COMRAM     6     4      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4    8674
                                             24 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2    7701
                                             24 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    5205
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _viewLogs
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      67       1       81.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      34        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 18 22:50:15 2018

                 _standbyMode EE3E                            u15 DEEE                            u16 DEF0  
                          u25 DF2E                            u26 DF30                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 FB7A  
                         l131 FD1E                           l203 FBCE                           l132 F5C2  
                         l300 E3DA                           l220 E674                           l205 FC22  
                         l141 F616                           l207 FC76                           l231 E79E  
                         l215 E668                           l312 E98E                           l152 F6FE  
                         l136 FD9C                           l240 E87C                           l400 E574  
                         l209 FCCA                           l153 F72C                           l145 F652  
                         l137 F5EC                           l330 EAD4                           l322 EA50  
                         l162 F7AC                           l234 E7EE                           l315 EA9A  
                         l307 E982                           l147 F6A6                           l251 DF66  
                         l243 E900                           l403 E534                           l340 EBAC  
                         l332 EAFE                           l308 E982                           l180 F948  
                         l172 F854                           l148 F6D4                           l252 DF3C  
                         l228 E74E                           l404 E508                           l501 E0DC  
                         l317 E9AC                           l181 F980                           l173 F892  
                         l157 F756                           l253 DFE6                           l237 E83E  
                         l510 E13E                           l502 E0EC                           l350 EC92  
                         l342 EBDA                           l334 EB28                           l246 E90C  
                         l414 E570                           l319 EA0E                           l183 F9BA  
                         l175 F8CC                           l167 F802                           l271 DF5E  
                         l431 EF94                           l360 ED7E                           l352 ECC0  
                         l344 EC08                           l336 EB54                           l328 EAAA  
                         l193 FA8C                           l185 F9F4                           l177 F906  
                         l257 DF46                           l433 F4A8                           l441 F082  
                         l425 EEB2                           l514 E180                           l362 EDAE  
                         l354 ECEE                           l346 EC36                           l338 EB80  
                         l194 FAC4                           l266 DF56                           l290 E2F6  
                         l370 DFF2                           l434 EFE0                           l515 E1CE  
                         l259 DF4E                           l283 E272                           l371 E0C8  
                         l419 E5CA                           l435 F2A0                           l516 E186  
                         l508 E116                           l364 EDE0                           l356 ED1E  
                         l348 EC64                           l196 FAFE                           l188 FA36  
                         l380 E03A                           l372 DFFA                           l460 F272  
                         l452 F12E                           l444 F08E                           l428 EF88  
                         l365 EE34                           l381 E042                           l373 E002  
                         l453 F1FC                           l437 F048                           l358 ED4E  
                         l198 FB38                           l286 E358                           l278 E266  
                         l382 E04A                           l374 E00A                           l470 F344  
                         l462 F29A                           l446 F292                           l454 F1A0  
                         l383 E052                           l375 E012                           l471 F412  
                         l455 F1F2                           l288 E290                           l384 E05C  
                         l376 E01A                           l480 F564                           l472 F3B6  
                         l448 F0D0                           l297 E36A                           l369 E066  
                         l377 E022                           l393 E436                           l473 F408  
                         l378 E02A                           l466 F2DE                           l379 E032  
                         l459 F23A                           l396 E5B6                           l388 E42A  
                         l485 F510                           l477 F450                           l398 E454  
                         l478 F488                           l923 DE80                           l924 DE78  
                         l933 DDEA                           l934 DDE2                           l927 DEA0  
                         l928 DEAA                           l937 DE02                           l938 DE0C  
                __CFG_CPB$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l3275 EA4A                          l3721 F134  
                        l3705 F0D8                          l3811 F344                          l3717 F12E  
                        l3815 F34A                          l2897 E142                          l3799 F2EE  
                        STR_1 FEEF                          STR_2 FF95                          STR_3 FE0D  
                        STR_4 FFCB                          STR_5 FFED                          STR_6 FE1E  
                        STR_7 FFD4                          STR_8 FE6F                          STR_9 FFFA  
                        u3100 F7FA                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u3140 F84C                          u3060 F7A4                          u4040 E2A4  
                        u3420 FA84                          u3260 F940                          u4170 EA2A  
                        u5050 E4A0                          u4091 E972                          u2820 DDEE  
                        u3540 FB72                          u3380 FA2E                          u2900 F64A  
                        u5140 E4E6                          u5300 F09A                          u6007 E88C  
                        u6017 E8BE                          u3810 E1D6                          u2850 F5E4  
                        u6107 EE1E                          u6027 E8D8                          u5180 E54A  
                        u5500 F4B0                          u5260 EFE8                          u6117 DD7E  
                        u6037 E1FC                          u2790 DE84                          u2870 F60E  
                        u5190 E56C                          u5350 F134                          u5270 EFF4  
                        u6127 DE1C                          u6047 E30A                          u6137 DE50  
                        u6057 E39A                          u5450 F34A                          u6147 DD6A  
                        u6067 E3CC                          u6157 DED6                          u6077 E924  
                        u3790 E16E                          u6167 DEE0                          u6087 E9C0  
                        u5607 EF60                          u6177 DF16                          u6097 EDEC  
                        u5617 F000                          u5537 EE4A                          u3890 E69C  
                        u6187 DF20                          u3971 E23A                          u5707 F2AC  
                        u5627 F038                          u5547 EE70                          u5717 F366  
                        u5637 F054                          u5557 EE8A                          u5807 F570  
                        u5727 F39E                          u5647 F0A6                          u5567 EEC2  
                        u5817 F5A8                          u5737 F3C2                          u5657 F150  
                        u5577 EEFA                          u5907 E70E                          u5827 E3F6  
                        u5747 F3FA                          u5667 F188                          u5587 EF14  
                        u5917 E740                          u5837 E588                          u5757 F41E  
                        u5677 F1AC                          u5597 EF46                          u5927 E75E  
                        u5847 E5F4                          u5767 F4DC                          u5687 F1E4  
                        u5937 E790                          u5857 E626                          u5777 F502  
                        u5697 F208                          u5947 E7AE                          u5867 E640  
                        u5787 F51C                          u5957 E7E0                          u5877 E6BE  
                        u5797 F554                          u5967 E7FE                          u5887 E6D6  
                        u5977 E830                          u5897 E6F6                          u5987 E84E  
                        u5997 E86E         __end_of_decode_drawer E0D2                          _main DD9C  
                        _keys FDA7               food_press@F3040 005E                          fsr2h 000FDA  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 001E             viewLogs@keypress3 001D           standbyMode@keypress 0036  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               diet_press@F3055 0056  
            __end_of_LCD_LEFT FDD4           standbyMode@whichKey 0034               food_press@count 0025  
             food_press@tally 001F             _drawerInformation 0046                         ?_main 0001  
                       STR_10 FE7F                         STR_11 FFF4                         STR_20 FE5F  
                       STR_12 FDD9                         STR_21 FF2C                         STR_13 FE4F  
                       STR_30 FE1E                         STR_22 FFAB                         STR_14 FE9F  
                       STR_15 FEFF                         STR_23 FE8F                         STR_31 FDFC  
                       STR_24 FE8F                         STR_16 FF63                         STR_32 FECF  
                       STR_40 FEAF                         STR_17 FF7D                         STR_25 FF3A  
                       STR_41 FEDF                         STR_33 FE2F                         STR_26 FFAB  
                       STR_42 FFC1                         STR_34 FFB6                         STR_50 FFA0  
                       STR_18 FEBF                         STR_35 FF8A                         STR_51 FF56  
                       STR_27 FF0E                         STR_19 FE5F                         STR_43 FE3F  
                       STR_52 FFA0                         STR_28 FF0E                         STR_36 FF48  
                       STR_44 FF1D                         STR_53 FF56                         STR_37 FDFC  
                       STR_29 FFE5                         STR_45 FFDD                         STR_54 FFA0  
                       STR_46 FFC1                         STR_38 FF70                         STR_47 FE3F  
                       STR_39 FDEB                         STR_48 FF1D                         STR_49 FFDD  
             __end_of___lwdiv DEB4               __end_of___lwmod DE16                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000               diet_press@count 0023               __end_of_lcdInst DD72  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD DE62  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers FDD3                         _input FDB8  
                       _putch DD72                         tablat 000FF5             _LCDinterruptState 0067  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
        standbyMode@keypress1 0037                __CFG_PBADEN$ON 000000               standbyMode@diet 0040  
             standbyMode@food 003C               standbyMode@zero 003A               __initialization DD86  
                __end_of_main DDD4                  __end_of_keys FDB8                  standbyMode@i 0042  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FDD5              food_press@drawer 001B  
                      ??_main 0046                 __activetblptr 000002           food_press@backCheck 0021  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        ?_putch 0001  
            diet_press@drawer 0019                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 DD8C  
                   ??_lcdInst 0003                        _printf E0D2           food_press@foodTable 0027  
                   ??_initLCD 0004               get_digits@count 0005                  __mediumconst FDA6  
            __end_of_viewLogs E918                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization DD92  
        which_drawer@keypress 0024                 ___rparam_used 000001                  ?_standbyMode 0001  
              __pcstackCOMRAM 0001                 __end_of_input FDC9                 __end_of_putch DD86  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0019  
           food_press@isValid 0023                       ??_putch 0003                    _check_food F5B8  
                  _diet_press E918                       ?_printf 000D                    _get_digits DF32  
      standbyMode@drawerCount 003E                    _food_press E1F0             __end_of_lcdNibble DF32  
                     __Hparam 0000                       __Lparam 0000                     ?_viewLogs 0019  
                     ___lwdiv DE62                       ___lwmod DDD4                       __pcinit DD86  
                     __ramtop 1000                       _lcdInst DD5E                       __ptext0 DD9C  
                     __ptext1 EE3E                       __ptext2 E3E4                       __ptext3 DFF0  
                     __ptext4 E5E8                       __ptext5 E1F0                       __ptext6 DF32  
                     __ptext7 F5B8                       __ptext8 E918                       __ptext9 E0D2  
      __size_of_decode_drawer 00E2               __size_of_printf 011E                       _initLCD DE16  
                     _dpowers FDC9         which_drawer@backCheck 0020                     _LCD_RIGHT FDD4  
        end_of_initialization DD92               which_drawer@sum 001E         __end_of_LCD_SIZE_HORZ FDD7  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FDD6                 __Lmediumconst FDA6  
                     printf@c 0018                       printf@f 000D                       postdec2 000FDD  
                  ??_viewLogs 001B                       postinc0 000FEE                       postinc2 000FDE  
        __size_of_standbyMode 077A                   ?_diet_press 0019                     _PORTBbits 000F81  
               ?_which_drawer 0019           diet_press@backCheck 0021                   ?_get_digits 0001  
           standbyMode@drawer 0044                 _decode_drawer DFF0                   ?_food_press 0019  
         diet_press@dietTable 0028        standbyMode@validDrawer 0038           __size_of_check_food 07EE  
              ??_which_drawer 001B                __end_of_printf E1F0           start_initialization DD86  
              ?_decode_drawer 0001           __size_of_diet_press 0526           __size_of_get_digits 00BE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0011            food_press@keypress 002F  
         __size_of_food_press 01F4  standbyMode@LCDinterruptState 0066                   __pbssCOMRAM 0046  
         decode_drawer@drawer 0001              ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000  
               __pmediumconst FDA6                     _lcdNibble DEB4                      ?___lwdiv 0001  
                    ?___lwmod 0008             __size_of_viewLogs 0330                      ?_lcdInst 0001  
                    ?_initLCD 0001           check_food@foodInput 0003              ___lwdiv@quotient 0005  
             ??_decode_drawer 0003                __size_of_putch 0014                  ??_check_food 0005  
                    _LCD_LEFT FDD3                      _LATDbits 000F8C          __end_of_which_drawer E5E8  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 001B  
          __end_of_check_food FDA6                 lcdNibble@data 0002                    printf@flag 0014  
               lcdNibble@temp 0001                    printf@prec 0015                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FDD8                 diet_press@sum 0025             which_drawer@count 0022  
          __end_of_diet_press EE3E                  ??_food_press 001D            diet_press@keypress 0027  
                    __Hrparam 0000                 ??_standbyMode 0030                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits DFF0            diet_press@previous 001D  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_lcdInst 0014  
            __size_of_initLCD 004C        __end_of_LCD_HORZ_LIMIT FDD9            __end_of_food_press E3E4  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 DD72  
                    __ptext11 DDD4                      __ptext12 DE62                      __ptext13 DE16  
                    __ptext14 DD5E                      __ptext15 DEB4                _LCD_VERT_LIMIT FDD7  
               __size_of_main 0038                   ??_lcdNibble 0001                      _viewLogs E5E8  
                   printf@val 0016           __end_of_standbyMode F5B8      decode_drawer@returnValue 0005  
            which_drawer@rand 001C                     putch@data 0003                    _INTCONbits 000FF2  
      __end_of_LCD_VERT_LIMIT FDD8         __size_of_which_drawer 0204     standbyMode@firstIteration 0032  
               _LCD_SIZE_HORZ FDD6              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FDD5  
                    printf@ap 0012                   diet_press@i 001F                   lcdInst@data 0003  
                _which_drawer E3E4               ___lwmod@divisor 000A               ___lwmod@counter 000C  
       check_food@returnValue 0007  
