

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 18 15:24:41 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	mediumconst
    64  00FDB2                     __pmediumconst:
    65                           	opt stack 0
    66  00FDB2  00                 	db	0
    67  00FDB3                     _keys:
    68                           	opt stack 0
    69  00FDB3  31                 	db	49
    70  00FDB4  32                 	db	50
    71  00FDB5  33                 	db	51
    72  00FDB6  41                 	db	65
    73  00FDB7  34                 	db	52
    74  00FDB8  35                 	db	53
    75  00FDB9  36                 	db	54
    76  00FDBA  42                 	db	66
    77  00FDBB  37                 	db	55
    78  00FDBC  38                 	db	56
    79  00FDBD  39                 	db	57
    80  00FDBE  43                 	db	67
    81  00FDBF  2A                 	db	42
    82  00FDC0  30                 	db	48
    83  00FDC1  23                 	db	35
    84  00FDC2  44                 	db	68
    85  00FDC3  00                 	db	0
    86  00FDC4                     __end_of_keys:
    87                           	opt stack 0
    88  00FDC4                     _input:
    89                           	opt stack 0
    90  00FDC4  31                 	db	49
    91  00FDC5  32                 	db	50
    92  00FDC6  33                 	db	51
    93  00FDC7  52                 	db	82
    94  00FDC8  34                 	db	52
    95  00FDC9  35                 	db	53
    96  00FDCA  36                 	db	54
    97  00FDCB  46                 	db	70
    98  00FDCC  37                 	db	55
    99  00FDCD  38                 	db	56
   100  00FDCE  39                 	db	57
   101  00FDCF  4C                 	db	76
   102  00FDD0  2A                 	db	42
   103  00FDD1  30                 	db	48
   104  00FDD2  23                 	db	35
   105  00FDD3  44                 	db	68
   106  00FDD4  00                 	db	0
   107  00FDD5                     __end_of_input:
   108                           	opt stack 0
   109  00FDD5                     _dpowers:
   110                           	opt stack 0
   111  00FDD5  0001               	dw	1
   112  00FDD7  000A               	dw	10
   113  00FDD9  0064               	dw	100
   114  00FDDB  03E8               	dw	1000
   115  00FDDD  2710               	dw	10000
   116  00FDDF                     __end_of_dpowers:
   117                           	opt stack 0
   118  00FDDF                     _LCD_LEFT:
   119                           	opt stack 0
   120  00FDDF  00                 	db	0
   121  00FDE0                     __end_of_LCD_LEFT:
   122                           	opt stack 0
   123  00FDE0                     _LCD_RIGHT:
   124                           	opt stack 0
   125  00FDE0  01                 	db	1
   126  00FDE1                     __end_of_LCD_RIGHT:
   127                           	opt stack 0
   128  00FDE1                     _LCD_SIZE_VERT:
   129                           	opt stack 0
   130  00FDE1  02                 	db	2
   131  00FDE2                     __end_of_LCD_SIZE_VERT:
   132                           	opt stack 0
   133  00FDE2                     _LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  00FDE2  10                 	db	16
   136  00FDE3                     __end_of_LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  00FDE3                     _LCD_VERT_LIMIT:
   139                           	opt stack 0
   140  00FDE3  02                 	db	2
   141  00FDE4                     __end_of_LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  00FDE4                     _LCD_HORZ_LIMIT:
   144                           	opt stack 0
   145  00FDE4  28                 	db	40
   146  00FDE5                     __end_of_LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  0000                     _PORTB	set	3969
   149  0000                     _PORTBbits	set	3969
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATDbits	set	3980
   152  0000                     _ADCON1	set	4033
   153  0000                     _ADCON0	set	4034
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISA	set	3986
   159  0000                     _LATE	set	3981
   160  0000                     _LATD	set	3980
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  00FDE5                     STR_12:
   165  00FDE5  52                 	db	82	;'R'
   166  00FDE6  65                 	db	101	;'e'
   167  00FDE7  6D                 	db	109	;'m'
   168  00FDE8  61                 	db	97	;'a'
   169  00FDE9  69                 	db	105	;'i'
   170  00FDEA  6E                 	db	110	;'n'
   171  00FDEB  69                 	db	105	;'i'
   172  00FDEC  6E                 	db	110	;'n'
   173  00FDED  67                 	db	103	;'g'
   174  00FDEE  20                 	db	32
   175  00FDEF  70                 	db	112	;'p'
   176  00FDF0  69                 	db	105	;'i'
   177  00FDF1  65                 	db	101	;'e'
   178  00FDF2  63                 	db	99	;'c'
   179  00FDF3  65                 	db	101	;'e'
   180  00FDF4  73                 	db	115	;'s'
   181  00FDF5  3A                 	db	58	;':'
   182  00FDF6  00                 	db	0
   183  00FDF7                     STR_39:
   184  00FDF7  64                 	db	100	;'d'
   185  00FDF8  72                 	db	114	;'r'
   186  00FDF9  61                 	db	97	;'a'
   187  00FDFA  77                 	db	119	;'w'
   188  00FDFB  65                 	db	101	;'e'
   189  00FDFC  72                 	db	114	;'r'
   190  00FDFD  73                 	db	115	;'s'
   191  00FDFE  20                 	db	32
   192  00FDFF  72                 	db	114	;'r'
   193  00FE00  65                 	db	101	;'e'
   194  00FE01  61                 	db	97	;'a'
   195  00FE02  63                 	db	99	;'c'
   196  00FE03  68                 	db	104	;'h'
   197  00FE04  65                 	db	101	;'e'
   198  00FE05  64                 	db	100	;'d'
   199  00FE06  21                 	db	33
   200  00FE07  00                 	db	0
   201  00FE08                     STR_31:
   202  00FE08  62                 	db	98	;'b'
   203  00FE09  65                 	db	101	;'e'
   204  00FE0A  67                 	db	103	;'g'
   205  00FE0B  69                 	db	105	;'i'
   206  00FE0C  6E                 	db	110	;'n'
   207  00FE0D  20                 	db	32
   208  00FE0E  6F                 	db	111	;'o'
   209  00FE0F  70                 	db	112	;'p'
   210  00FE10  65                 	db	101	;'e'
   211  00FE11  72                 	db	114	;'r'
   212  00FE12  61                 	db	97	;'a'
   213  00FE13  74                 	db	116	;'t'
   214  00FE14  69                 	db	105	;'i'
   215  00FE15  6F                 	db	111	;'o'
   216  00FE16  6E                 	db	110	;'n'
   217  00FE17  2E                 	db	46
   218  00FE18  00                 	db	0
   219  00FE19                     STR_3:
   220  00FE19  50                 	db	80	;'P'
   221  00FE1A  6C                 	db	108	;'l'
   222  00FE1B  65                 	db	101	;'e'
   223  00FE1C  61                 	db	97	;'a'
   224  00FE1D  73                 	db	115	;'s'
   225  00FE1E  65                 	db	101	;'e'
   226  00FE1F  20                 	db	32
   227  00FE20  69                 	db	105	;'i'
   228  00FE21  6E                 	db	110	;'n'
   229  00FE22  70                 	db	112	;'p'
   230  00FE23  75                 	db	117	;'u'
   231  00FE24  74                 	db	116	;'t'
   232  00FE25  20                 	db	32
   233  00FE26  6C                 	db	108	;'l'
   234  00FE27  6F                 	db	111	;'o'
   235  00FE28  67                 	db	103	;'g'
   236  00FE29  00                 	db	0
   237  00FE2A                     STR_6:
   238  00FE2A  50                 	db	80	;'P'
   239  00FE2B  72                 	db	114	;'r'
   240  00FE2C  65                 	db	101	;'e'
   241  00FE2D  73                 	db	115	;'s'
   242  00FE2E  73                 	db	115	;'s'
   243  00FE2F  20                 	db	32
   244  00FE30  61                 	db	97	;'a'
   245  00FE31  6E                 	db	110	;'n'
   246  00FE32  79                 	db	121	;'y'
   247  00FE33  20                 	db	32
   248  00FE34  6B                 	db	107	;'k'
   249  00FE35  65                 	db	101	;'e'
   250  00FE36  79                 	db	121	;'y'
   251  00FE37  20                 	db	32
   252  00FE38  74                 	db	116	;'t'
   253  00FE39  6F                 	db	111	;'o'
   254  00FE3A  00                 	db	0
   255  00FE3B                     STR_33:
   256  00FE3B  63                 	db	99	;'c'
   257  00FE3C  61                 	db	97	;'a'
   258  00FE3D  62                 	db	98	;'b'
   259  00FE3E  69                 	db	105	;'i'
   260  00FE3F  6E                 	db	110	;'n'
   261  00FE40  65                 	db	101	;'e'
   262  00FE41  74                 	db	116	;'t'
   263  00FE42  20                 	db	32
   264  00FE43  73                 	db	115	;'s'
   265  00FE44  6F                 	db	111	;'o'
   266  00FE45  72                 	db	114	;'r'
   267  00FE46  74                 	db	116	;'t'
   268  00FE47  65                 	db	101	;'e'
   269  00FE48  72                 	db	114	;'r'
   270  00FE49  21                 	db	33
   271  00FE4A  00                 	db	0
   272  00FE4B                     STR_43:
   273  00FE4B  6E                 	db	110	;'n'
   274  00FE4C  75                 	db	117	;'u'
   275  00FE4D  6D                 	db	109	;'m'
   276  00FE4E  62                 	db	98	;'b'
   277  00FE4F  65                 	db	101	;'e'
   278  00FE50  72                 	db	114	;'r'
   279  00FE51  20                 	db	32
   280  00FE52  70                 	db	112	;'p'
   281  00FE53  72                 	db	114	;'r'
   282  00FE54  65                 	db	101	;'e'
   283  00FE55  73                 	db	115	;'s'
   284  00FE56  73                 	db	115	;'s'
   285  00FE57  65                 	db	101	;'e'
   286  00FE58  64                 	db	100	;'d'
   287  00FE59  2E                 	db	46
   288  00FE5A  00                 	db	0
   289  00FE5B                     STR_13:
   290  00FE5B  52                 	db	82	;'R'
   291  00FE5C  3A                 	db	58	;':'
   292  00FE5D  33                 	db	51	;'3'
   293  00FE5E  20                 	db	32
   294  00FE5F  20                 	db	32
   295  00FE60  46                 	db	70	;'F'
   296  00FE61  3A                 	db	58	;':'
   297  00FE62  31                 	db	49	;'1'
   298  00FE63  32                 	db	50	;'2'
   299  00FE64  20                 	db	32
   300  00FE65  20                 	db	32
   301  00FE66  4C                 	db	76	;'L'
   302  00FE67  3A                 	db	58	;':'
   303  00FE68  31                 	db	49	;'1'
   304  00FE69  30                 	db	48	;'0'
   305  00FE6A  00                 	db	0
   306  00FE6B                     STR_19:
   307  00FE6B  44                 	db	68	;'D'
   308  00FE6C  72                 	db	114	;'r'
   309  00FE6D  61                 	db	97	;'a'
   310  00FE6E  77                 	db	119	;'w'
   311  00FE6F  65                 	db	101	;'e'
   312  00FE70  72                 	db	114	;'r'
   313  00FE71  20                 	db	32
   314  00FE72  25                 	db	37
   315  00FE73  69                 	db	105	;'i'
   316  00FE74  20                 	db	32
   317  00FE75  66                 	db	102	;'f'
   318  00FE76  6F                 	db	111	;'o'
   319  00FE77  6F                 	db	111	;'o'
   320  00FE78  64                 	db	100	;'d'
   321  00FE79  3A                 	db	58	;':'
   322  00FE7A  00                 	db	0
   323  00FE7B                     STR_8:
   324  00FE7B  4F                 	db	79	;'O'
   325  00FE7C  70                 	db	112	;'p'
   326  00FE7D  65                 	db	101	;'e'
   327  00FE7E  72                 	db	114	;'r'
   328  00FE7F  61                 	db	97	;'a'
   329  00FE80  74                 	db	116	;'t'
   330  00FE81  69                 	db	105	;'i'
   331  00FE82  6F                 	db	111	;'o'
   332  00FE83  6E                 	db	110	;'n'
   333  00FE84  20                 	db	32
   334  00FE85  74                 	db	116	;'t'
   335  00FE86  69                 	db	105	;'i'
   336  00FE87  6D                 	db	109	;'m'
   337  00FE88  65                 	db	101	;'e'
   338  00FE89  3A                 	db	58	;':'
   339  00FE8A  00                 	db	0
   340  00FE8B                     STR_10:
   341  00FE8B  4D                 	db	77	;'M'
   342  00FE8C  61                 	db	97	;'a'
   343  00FE8D  72                 	db	114	;'r'
   344  00FE8E  6B                 	db	107	;'k'
   345  00FE8F  65                 	db	101	;'e'
   346  00FE90  64                 	db	100	;'d'
   347  00FE91  20                 	db	32
   348  00FE92  64                 	db	100	;'d'
   349  00FE93  72                 	db	114	;'r'
   350  00FE94  61                 	db	97	;'a'
   351  00FE95  77                 	db	119	;'w'
   352  00FE96  65                 	db	101	;'e'
   353  00FE97  72                 	db	114	;'r'
   354  00FE98  73                 	db	115	;'s'
   355  00FE99  3A                 	db	58	;':'
   356  00FE9A  00                 	db	0
   357  00FE9B                     STR_23:
   358  00FE9B  44                 	db	68	;'D'
   359  00FE9C  72                 	db	114	;'r'
   360  00FE9D  61                 	db	97	;'a'
   361  00FE9E  77                 	db	119	;'w'
   362  00FE9F  65                 	db	101	;'e'
   363  00FEA0  72                 	db	114	;'r'
   364  00FEA1  20                 	db	32
   365  00FEA2  25                 	db	37
   366  00FEA3  69                 	db	105	;'i'
   367  00FEA4  20                 	db	32
   368  00FEA5  64                 	db	100	;'d'
   369  00FEA6  69                 	db	105	;'i'
   370  00FEA7  65                 	db	101	;'e'
   371  00FEA8  74                 	db	116	;'t'
   372  00FEA9  3A                 	db	58	;':'
   373  00FEAA  00                 	db	0
   374  00FEAB                     STR_14:
   375  00FEAB  44                 	db	68	;'D'
   376  00FEAC  72                 	db	114	;'r'
   377  00FEAD  61                 	db	97	;'a'
   378  00FEAE  77                 	db	119	;'w'
   379  00FEAF  65                 	db	101	;'e'
   380  00FEB0  72                 	db	114	;'r'
   381  00FEB1  20                 	db	32
   382  00FEB2  53                 	db	83	;'S'
   383  00FEB3  75                 	db	117	;'u'
   384  00FEB4  6D                 	db	109	;'m'
   385  00FEB5  6D                 	db	109	;'m'
   386  00FEB6  61                 	db	97	;'a'
   387  00FEB7  72                 	db	114	;'r'
   388  00FEB8  79                 	db	121	;'y'
   389  00FEB9  3A                 	db	58	;':'
   390  00FEBA  00                 	db	0
   391  00FEBB                     STR_40:
   392  00FEBB  41                 	db	65	;'A'
   393  00FEBC  6E                 	db	110	;'n'
   394  00FEBD  6F                 	db	111	;'o'
   395  00FEBE  74                 	db	116	;'t'
   396  00FEBF  68                 	db	104	;'h'
   397  00FEC0  65                 	db	101	;'e'
   398  00FEC1  72                 	db	114	;'r'
   399  00FEC2  20                 	db	32
   400  00FEC3  64                 	db	100	;'d'
   401  00FEC4  72                 	db	114	;'r'
   402  00FEC5  61                 	db	97	;'a'
   403  00FEC6  77                 	db	119	;'w'
   404  00FEC7  65                 	db	101	;'e'
   405  00FEC8  72                 	db	114	;'r'
   406  00FEC9  3F                 	db	63	;'?'
   407  00FECA  00                 	db	0
   408  00FECB                     STR_18:
   409  00FECB  23                 	db	35
   410  00FECC  20                 	db	32
   411  00FECD  3D                 	db	61	;'='
   412  00FECE  20                 	db	32
   413  00FECF  59                 	db	89	;'Y'
   414  00FED0  65                 	db	101	;'e'
   415  00FED1  73                 	db	115	;'s'
   416  00FED2  2C                 	db	44
   417  00FED3  20                 	db	32
   418  00FED4  44                 	db	68	;'D'
   419  00FED5  20                 	db	32
   420  00FED6  3D                 	db	61	;'='
   421  00FED7  20                 	db	32
   422  00FED8  4E                 	db	78	;'N'
   423  00FED9  6F                 	db	111	;'o'
   424  00FEDA  00                 	db	0
   425  00FEDB                     STR_32:
   426  00FEDB  57                 	db	87	;'W'
   427  00FEDC  65                 	db	101	;'e'
   428  00FEDD  6C                 	db	108	;'l'
   429  00FEDE  63                 	db	99	;'c'
   430  00FEDF  6F                 	db	111	;'o'
   431  00FEE0  6D                 	db	109	;'m'
   432  00FEE1  65                 	db	101	;'e'
   433  00FEE2  20                 	db	32
   434  00FEE3  74                 	db	116	;'t'
   435  00FEE4  6F                 	db	111	;'o'
   436  00FEE5  20                 	db	32
   437  00FEE6  79                 	db	121	;'y'
   438  00FEE7  6F                 	db	111	;'o'
   439  00FEE8  75                 	db	117	;'u'
   440  00FEE9  72                 	db	114	;'r'
   441  00FEEA  00                 	db	0
   442  00FEEB                     STR_1:
   443  00FEEB  35                 	db	53	;'5'
   444  00FEEC  20                 	db	32
   445  00FEED  70                 	db	112	;'p'
   446  00FEEE  72                 	db	114	;'r'
   447  00FEEF  65                 	db	101	;'e'
   448  00FEF0  76                 	db	118	;'v'
   449  00FEF1  69                 	db	105	;'i'
   450  00FEF2  6F                 	db	111	;'o'
   451  00FEF3  75                 	db	117	;'u'
   452  00FEF4  73                 	db	115	;'s'
   453  00FEF5  20                 	db	32
   454  00FEF6  6C                 	db	108	;'l'
   455  00FEF7  6F                 	db	111	;'o'
   456  00FEF8  67                 	db	103	;'g'
   457  00FEF9  73                 	db	115	;'s'
   458  00FEFA  00                 	db	0
   459  00FEFB                     STR_15:
   460  00FEFB  44                 	db	68	;'D'
   461  00FEFC  72                 	db	114	;'r'
   462  00FEFD  61                 	db	97	;'a'
   463  00FEFE  77                 	db	119	;'w'
   464  00FEFF  65                 	db	101	;'e'
   465  00FF00  72                 	db	114	;'r'
   466  00FF01  20                 	db	32
   467  00FF02  31                 	db	49	;'1'
   468  00FF03  3A                 	db	58	;':'
   469  00FF04  20                 	db	32
   470  00FF05  52                 	db	82	;'R'
   471  00FF06  46                 	db	70	;'F'
   472  00FF07  31                 	db	49	;'1'
   473  00FF08  32                 	db	50	;'2'
   474  00FF09  00                 	db	0
   475  00FF0A                     STR_27:
   476  00FF0A  44                 	db	68	;'D'
   477  00FF0B  72                 	db	114	;'r'
   478  00FF0C  61                 	db	97	;'a'
   479  00FF0D  77                 	db	119	;'w'
   480  00FF0E  65                 	db	101	;'e'
   481  00FF0F  72                 	db	114	;'r'
   482  00FF10  20                 	db	32
   483  00FF11  6E                 	db	110	;'n'
   484  00FF12  75                 	db	117	;'u'
   485  00FF13  6D                 	db	109	;'m'
   486  00FF14  62                 	db	98	;'b'
   487  00FF15  65                 	db	101	;'e'
   488  00FF16  72                 	db	114	;'r'
   489  00FF17  3A                 	db	58	;':'
   490  00FF18  00                 	db	0
   491  00FF19                     STR_44:
   492  00FF19  44                 	db	68	;'D'
   493  00FF1A  72                 	db	114	;'r'
   494  00FF1B  61                 	db	97	;'a'
   495  00FF1C  77                 	db	119	;'w'
   496  00FF1D  65                 	db	101	;'e'
   497  00FF1E  72                 	db	114	;'r'
   498  00FF1F  20                 	db	32
   499  00FF20  61                 	db	97	;'a'
   500  00FF21  6C                 	db	108	;'l'
   501  00FF22  72                 	db	114	;'r'
   502  00FF23  65                 	db	101	;'e'
   503  00FF24  61                 	db	97	;'a'
   504  00FF25  64                 	db	100	;'d'
   505  00FF26  79                 	db	121	;'y'
   506  00FF27  00                 	db	0
   507  00FF28                     STR_21:
   508  00FF28  49                 	db	73	;'I'
   509  00FF29  6E                 	db	110	;'n'
   510  00FF2A  76                 	db	118	;'v'
   511  00FF2B  61                 	db	97	;'a'
   512  00FF2C  6C                 	db	108	;'l'
   513  00FF2D  69                 	db	105	;'i'
   514  00FF2E  64                 	db	100	;'d'
   515  00FF2F  20                 	db	32
   516  00FF30  66                 	db	102	;'f'
   517  00FF31  6F                 	db	111	;'o'
   518  00FF32  6F                 	db	111	;'o'
   519  00FF33  64                 	db	100	;'d'
   520  00FF34  21                 	db	33
   521  00FF35  00                 	db	0
   522  00FF36                     STR_25:
   523  00FF36  49                 	db	73	;'I'
   524  00FF37  6E                 	db	110	;'n'
   525  00FF38  76                 	db	118	;'v'
   526  00FF39  61                 	db	97	;'a'
   527  00FF3A  6C                 	db	108	;'l'
   528  00FF3B  69                 	db	105	;'i'
   529  00FF3C  64                 	db	100	;'d'
   530  00FF3D  20                 	db	32
   531  00FF3E  64                 	db	100	;'d'
   532  00FF3F  69                 	db	105	;'i'
   533  00FF40  65                 	db	101	;'e'
   534  00FF41  74                 	db	116	;'t'
   535  00FF42  21                 	db	33
   536  00FF43  00                 	db	0
   537  00FF44                     STR_36:
   538  00FF44  6F                 	db	111	;'o'
   539  00FF45  72                 	db	114	;'r'
   540  00FF46  20                 	db	32
   541  00FF47  70                 	db	112	;'p'
   542  00FF48  72                 	db	114	;'r'
   543  00FF49  65                 	db	101	;'e'
   544  00FF4A  73                 	db	115	;'s'
   545  00FF4B  73                 	db	115	;'s'
   546  00FF4C  20                 	db	32
   547  00FF4D  23                 	db	35
   548  00FF4E  20                 	db	32
   549  00FF4F  74                 	db	116	;'t'
   550  00FF50  6F                 	db	111	;'o'
   551  00FF51  00                 	db	0
   552  00FF52                     STR_53:
   553  00FF52  49                 	db	73	;'I'
   554  00FF53  6E                 	db	110	;'n'
   555  00FF54  76                 	db	118	;'v'
   556  00FF55  61                 	db	97	;'a'
   557  00FF56  6C                 	db	108	;'l'
   558  00FF57  69                 	db	105	;'i'
   559  00FF58  64                 	db	100	;'d'
   560  00FF59  20                 	db	32
   561  00FF5A  6B                 	db	107	;'k'
   562  00FF5B  65                 	db	101	;'e'
   563  00FF5C  79                 	db	121	;'y'
   564  00FF5D  21                 	db	33
   565  00FF5E  00                 	db	0
   566  00FF5F                     STR_16:
   567  00FF5F  44                 	db	68	;'D'
   568  00FF60  72                 	db	114	;'r'
   569  00FF61  61                 	db	97	;'a'
   570  00FF62  77                 	db	119	;'w'
   571  00FF63  65                 	db	101	;'e'
   572  00FF64  72                 	db	114	;'r'
   573  00FF65  20                 	db	32
   574  00FF66  32                 	db	50	;'2'
   575  00FF67  3A                 	db	58	;':'
   576  00FF68  20                 	db	32
   577  00FF69  4C                 	db	76	;'L'
   578  00FF6A  31                 	db	49	;'1'
   579  00FF6B  00                 	db	0
   580  00FF6C                     STR_38:
   581  00FF6C  4D                 	db	77	;'M'
   582  00FF6D  61                 	db	97	;'a'
   583  00FF6E  78                 	db	120	;'x'
   584  00FF6F  69                 	db	105	;'i'
   585  00FF70  6D                 	db	109	;'m'
   586  00FF71  75                 	db	117	;'u'
   587  00FF72  6D                 	db	109	;'m'
   588  00FF73  20                 	db	32
   589  00FF74  6F                 	db	111	;'o'
   590  00FF75  66                 	db	102	;'f'
   591  00FF76  20                 	db	32
   592  00FF77  38                 	db	56	;'8'
   593  00FF78  00                 	db	0
   594  00FF79                     STR_17:
   595  00FF79  41                 	db	65	;'A'
   596  00FF7A  6E                 	db	110	;'n'
   597  00FF7B  6F                 	db	111	;'o'
   598  00FF7C  74                 	db	116	;'t'
   599  00FF7D  68                 	db	104	;'h'
   600  00FF7E  65                 	db	101	;'e'
   601  00FF7F  72                 	db	114	;'r'
   602  00FF80  20                 	db	32
   603  00FF81  6C                 	db	108	;'l'
   604  00FF82  6F                 	db	111	;'o'
   605  00FF83  67                 	db	103	;'g'
   606  00FF84  3F                 	db	63	;'?'
   607  00FF85  00                 	db	0
   608  00FF86                     STR_35:
   609  00FF86  76                 	db	118	;'v'
   610  00FF87  69                 	db	105	;'i'
   611  00FF88  65                 	db	101	;'e'
   612  00FF89  77                 	db	119	;'w'
   613  00FF8A  20                 	db	32
   614  00FF8B  6C                 	db	108	;'l'
   615  00FF8C  6F                 	db	111	;'o'
   616  00FF8D  67                 	db	103	;'g'
   617  00FF8E  73                 	db	115	;'s'
   618  00FF8F  2C                 	db	44
   619  00FF90  00                 	db	0
   620  00FF91                     STR_2:
   621  00FF91  61                 	db	97	;'a'
   622  00FF92  76                 	db	118	;'v'
   623  00FF93  61                 	db	97	;'a'
   624  00FF94  69                 	db	105	;'i'
   625  00FF95  6C                 	db	108	;'l'
   626  00FF96  61                 	db	97	;'a'
   627  00FF97  62                 	db	98	;'b'
   628  00FF98  6C                 	db	108	;'l'
   629  00FF99  65                 	db	101	;'e'
   630  00FF9A  2E                 	db	46
   631  00FF9B  00                 	db	0
   632  00FF9C                     STR_52:
   633  00FF9C  52                 	db	82	;'R'
   634  00FF9D  65                 	db	101	;'e'
   635  00FF9E  62                 	db	98	;'b'
   636  00FF9F  6F                 	db	111	;'o'
   637  00FFA0  6F                 	db	111	;'o'
   638  00FFA1  74                 	db	116	;'t'
   639  00FFA2  69                 	db	105	;'i'
   640  00FFA3  6E                 	db	110	;'n'
   641  00FFA4  67                 	db	103	;'g'
   642  00FFA5  2E                 	db	46
   643  00FFA6  00                 	db	0
   644  00FFA7                     STR_22:
   645  00FFA7  54                 	db	84	;'T'
   646  00FFA8  72                 	db	114	;'r'
   647  00FFA9  79                 	db	121	;'y'
   648  00FFAA  20                 	db	32
   649  00FFAB  61                 	db	97	;'a'
   650  00FFAC  67                 	db	103	;'g'
   651  00FFAD  61                 	db	97	;'a'
   652  00FFAE  69                 	db	105	;'i'
   653  00FFAF  6E                 	db	110	;'n'
   654  00FFB0  2E                 	db	46
   655  00FFB1  00                 	db	0
   656  00FFB2                     STR_34:
   657  00FFB2  50                 	db	80	;'P'
   658  00FFB3  72                 	db	114	;'r'
   659  00FFB4  65                 	db	101	;'e'
   660  00FFB5  73                 	db	115	;'s'
   661  00FFB6  73                 	db	115	;'s'
   662  00FFB7  20                 	db	32
   663  00FFB8  44                 	db	68	;'D'
   664  00FFB9  20                 	db	32
   665  00FFBA  74                 	db	116	;'t'
   666  00FFBB  6F                 	db	111	;'o'
   667  00FFBC  00                 	db	0
   668  00FFBD                     STR_42:
   669  00FFBD  4E                 	db	78	;'N'
   670  00FFBE  6F                 	db	111	;'o'
   671  00FFBF  20                 	db	32
   672  00FFC0  64                 	db	100	;'d'
   673  00FFC1  72                 	db	114	;'r'
   674  00FFC2  61                 	db	97	;'a'
   675  00FFC3  77                 	db	119	;'w'
   676  00FFC4  65                 	db	101	;'e'
   677  00FFC5  72                 	db	114	;'r'
   678  00FFC6  00                 	db	0
   679  00FFC7                     STR_4:
   680  00FFC7  6E                 	db	110	;'n'
   681  00FFC8  75                 	db	117	;'u'
   682  00FFC9  6D                 	db	109	;'m'
   683  00FFCA  62                 	db	98	;'b'
   684  00FFCB  65                 	db	101	;'e'
   685  00FFCC  72                 	db	114	;'r'
   686  00FFCD  3A                 	db	58	;':'
   687  00FFCE  20                 	db	32
   688  00FFCF  00                 	db	0
   689  00FFD0                     STR_7:
   690  00FFD0  6D                 	db	109	;'m'
   691  00FFD1  6F                 	db	111	;'o'
   692  00FFD2  76                 	db	118	;'v'
   693  00FFD3  65                 	db	101	;'e'
   694  00FFD4  20                 	db	32
   695  00FFD5  6F                 	db	111	;'o'
   696  00FFD6  6E                 	db	110	;'n'
   697  00FFD7  2E                 	db	46
   698  00FFD8  00                 	db	0
   699  00FFD9                     STR_45:
   700  00FFD9  69                 	db	105	;'i'
   701  00FFDA  6E                 	db	110	;'n'
   702  00FFDB  20                 	db	32
   703  00FFDC  75                 	db	117	;'u'
   704  00FFDD  73                 	db	115	;'s'
   705  00FFDE  65                 	db	101	;'e'
   706  00FFDF  21                 	db	33
   707  00FFE0  00                 	db	0
   708  00FFE1                     STR_29:
   709  00FFE1  53                 	db	83	;'S'
   710  00FFE2  74                 	db	116	;'t'
   711  00FFE3  61                 	db	97	;'a'
   712  00FFE4  6E                 	db	110	;'n'
   713  00FFE5  64                 	db	100	;'d'
   714  00FFE6  62                 	db	98	;'b'
   715  00FFE7  79                 	db	121	;'y'
   716  00FFE8  00                 	db	0
   717  00FFE9                     STR_5:
   718  00FFE9  47                 	db	71	;'G'
   719  00FFEA  72                 	db	114	;'r'
   720  00FFEB  65                 	db	101	;'e'
   721  00FFEC  61                 	db	97	;'a'
   722  00FFED  74                 	db	116	;'t'
   723  00FFEE  21                 	db	33
   724  00FFEF  00                 	db	0
   725  00FFF0                     STR_11:
   726  00FFF0  31                 	db	49	;'1'
   727  00FFF1  2C                 	db	44
   728  00FFF2  20                 	db	32
   729  00FFF3  31                 	db	49	;'1'
   730  00FFF4  33                 	db	51	;'3'
   731  00FFF5  00                 	db	0
   732  00FFF6                     STR_9:
   733  00FFF6  32                 	db	50	;'2'
   734  00FFF7  3A                 	db	58	;':'
   735  00FFF8  33                 	db	51	;'3'
   736  00FFF9  39                 	db	57	;'9'
   737  00FFFA  00                 	db	0
   738  00FFFB                     STR_46:
   739  00FFFB  25                 	db	37
   740  00FFFC  69                 	db	105	;'i'
   741  00FFFD  00                 	db	0
   742  0000                     
   743                           ; #config settings
   744  00FFFE  00                 	db	0	; dummy byte at the end
   745  0000                     
   746                           	psect	cinit
   747  00E396                     __pcinit:
   748                           	opt stack 0
   749  00E396                     start_initialization:
   750                           	opt stack 0
   751  00E396                     __initialization:
   752                           	opt stack 0
   753                           
   754                           ; Clear objects allocated to COMRAM (34 bytes)
   755  00E396  EE00  F046         	lfsr	0,__pbssCOMRAM
   756  00E39A  0E22               	movlw	34
   757  00E39C                     clear_0:
   758  00E39C  6AEE               	clrf	postinc0,c
   759  00E39E  06E8               	decf	wreg,f,c
   760  00E3A0  E1FD               	bnz	clear_0
   761  00E3A2                     end_of_initialization:
   762                           	opt stack 0
   763  00E3A2                     __end_of__initialization:
   764                           	opt stack 0
   765  00E3A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   766  00E3A4  6EF8               	movwf	tblptru,c
   767  00E3A6  0100               	movlb	0
   768  00E3A8  EFD6  F071         	goto	_main	;jump to C main() function
   769                           tblptru	equ	0xFF8
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           
   773                           	psect	bssCOMRAM
   774  000046                     __pbssCOMRAM:
   775                           	opt stack 0
   776  000046                     _drawerInformation:
   777                           	opt stack 0
   778  000046                     	ds	16
   779  000056                     diet_press@F3054:
   780                           	opt stack 0
   781  000056                     	ds	8
   782  00005E                     food_press@F3040:
   783                           	opt stack 0
   784  00005E                     	ds	8
   785  000066                     standbyMode@LCDinterruptState:
   786                           	opt stack 0
   787  000066                     	ds	1
   788  000067                     	ds	1
   789                           tblptru	equ	0xFF8
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           
   793                           	psect	cstackCOMRAM
   794  000001                     __pcstackCOMRAM:
   795                           	opt stack 0
   796  000001                     ?_check_food:
   797                           	opt stack 0
   798  000001                     ?_get_digits:
   799                           	opt stack 0
   800  000001                     ?_decode_drawer:
   801                           	opt stack 0
   802  000001                     ?___lwdiv:
   803                           	opt stack 0
   804  000001                     lcdNibble@temp:
   805                           	opt stack 0
   806  000001                     check_food@sum:
   807                           	opt stack 0
   808  000001                     get_digits@sum:
   809                           	opt stack 0
   810  000001                     decode_drawer@drawer:
   811                           	opt stack 0
   812  000001                     ___lwdiv@dividend:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x0
   816  000001                     	ds	1
   817  000002                     lcdNibble@data:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x1
   821  000002                     	ds	1
   822  000003                     ??_get_digits:
   823  000003                     ??_decode_drawer:
   824  000003                     lcdInst@data:
   825                           	opt stack 0
   826  000003                     putch@data:
   827                           	opt stack 0
   828  000003                     check_food@foodInput:
   829                           	opt stack 0
   830  000003                     ___lwdiv@divisor:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x2
   834  000003                     	ds	1
   835  000004                     ??_initLCD:
   836                           
   837                           ; 1 bytes @ 0x3
   838  000004                     	ds	1
   839  000005                     ??_check_food:
   840  000005                     get_digits@count:
   841                           	opt stack 0
   842  000005                     decode_drawer@returnValue:
   843                           	opt stack 0
   844  000005                     ___lwdiv@quotient:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x4
   848  000005                     	ds	2
   849  000007                     ___lwdiv@counter:
   850                           	opt stack 0
   851  000007                     check_food@returnValue:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x6
   855  000007                     	ds	1
   856  000008                     ?___lwmod:
   857                           	opt stack 0
   858  000008                     ___lwmod@dividend:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x7
   862  000008                     	ds	2
   863  00000A                     ___lwmod@divisor:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x9
   867  00000A                     	ds	2
   868  00000C                     ___lwmod@counter:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0xB
   872  00000C                     	ds	1
   873  00000D                     ?_printf:
   874                           	opt stack 0
   875  00000D                     printf@f:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0xC
   879  00000D                     	ds	4
   880  000011                     ??_printf:
   881                           
   882                           ; 1 bytes @ 0x10
   883  000011                     	ds	1
   884  000012                     printf@ap:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x11
   888  000012                     	ds	2
   889  000014                     printf@flag:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x13
   893  000014                     	ds	1
   894  000015                     printf@prec:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x14
   898  000015                     	ds	1
   899  000016                     printf@val:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x15
   903  000016                     	ds	2
   904  000018                     printf@c:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x17
   908  000018                     	ds	1
   909  000019                     ?_viewLogs:
   910                           	opt stack 0
   911  000019                     ?_diet_press:
   912                           	opt stack 0
   913  000019                     ?_which_drawer:
   914                           	opt stack 0
   915  000019                     food_press@dietSum:
   916                           	opt stack 0
   917  000019                     diet_press@drawer:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x18
   921  000019                     	ds	2
   922  00001B                     ??_viewLogs:
   923  00001B                     ??_diet_press:
   924  00001B                     ??_which_drawer:
   925  00001B                     food_press@drawer:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x1A
   929  00001B                     	ds	1
   930  00001C                     which_drawer@rand:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x1B
   934  00001C                     	ds	1
   935  00001D                     ??_food_press:
   936  00001D                     viewLogs@keypress3:
   937                           	opt stack 0
   938  00001D                     diet_press@previous:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x1C
   942  00001D                     	ds	1
   943  00001E                     viewLogs@keypress2:
   944                           	opt stack 0
   945  00001E                     which_drawer@sum:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x1D
   949  00001E                     	ds	1
   950  00001F                     food_press@tally:
   951                           	opt stack 0
   952  00001F                     diet_press@i:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x1E
   956  00001F                     	ds	1
   957  000020                     which_drawer@count:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x1F
   961  000020                     	ds	1
   962  000021                     food_press@isValid:
   963                           	opt stack 0
   964  000021                     diet_press@count:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x20
   968  000021                     	ds	1
   969  000022                     which_drawer@keypress:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x21
   973  000022                     	ds	1
   974  000023                     food_press@count:
   975                           	opt stack 0
   976  000023                     diet_press@sum:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x22
   980  000023                     	ds	2
   981  000025                     diet_press@keypress:
   982                           	opt stack 0
   983  000025                     food_press@foodTable:
   984                           	opt stack 0
   985                           
   986                           ; 8 bytes @ 0x24
   987  000025                     	ds	1
   988  000026                     diet_press@dietTable:
   989                           	opt stack 0
   990                           
   991                           ; 8 bytes @ 0x25
   992  000026                     	ds	7
   993  00002D                     food_press@keypress:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x2C
   997  00002D                     	ds	1
   998  00002E                     ??_standbyMode:
   999                           
  1000                           ; 1 bytes @ 0x2D
  1001  00002E                     	ds	2
  1002  000030                     standbyMode@diet:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x2F
  1006  000030                     	ds	2
  1007  000032                     standbyMode@diet_396:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x31
  1011  000032                     	ds	2
  1012  000034                     standbyMode@firstIteration:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x33
  1016  000034                     	ds	2
  1017  000036                     standbyMode@whichKey:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x35
  1021  000036                     	ds	2
  1022  000038                     standbyMode@keypress:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x37
  1026  000038                     	ds	1
  1027  000039                     standbyMode@zero:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x38
  1031  000039                     	ds	2
  1032  00003B                     standbyMode@keypress1:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x3A
  1036  00003B                     	ds	1
  1037  00003C                     standbyMode@validDrawer:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x3B
  1041  00003C                     	ds	2
  1042  00003E                     standbyMode@drawer:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x3D
  1046  00003E                     	ds	2
  1047  000040                     standbyMode@drawer_391:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x3F
  1051  000040                     	ds	2
  1052  000042                     standbyMode@drawerCount:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x41
  1056  000042                     	ds	2
  1057  000044                     standbyMode@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x43
  1061  000044                     	ds	2
  1062  000046                     tblptru	equ	0xFF8
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           
  1066                           ; 1 bytes @ 0x45
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 13 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels required when called:    5
  1092 ;; This function calls:
  1093 ;;		_initLCD
  1094 ;;		_standbyMode
  1095 ;; This function is called by:
  1096 ;;		Startup code after reset
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text0
  1101  00E3AC                     __ptext0:
  1102                           	opt stack 0
  1103  00E3AC                     _main:
  1104                           	opt stack 26
  1105                           
  1106                           ;main.c: 19: LATA = 0x00;
  1107                           
  1108                           ;incstack = 0
  1109  00E3AC  0E00               	movlw	0
  1110  00E3AE  6E89               	movwf	3977,c	;volatile
  1111                           
  1112                           ;main.c: 20: LATB = 0x00;
  1113  00E3B0  0E00               	movlw	0
  1114  00E3B2  6E8A               	movwf	3978,c	;volatile
  1115                           
  1116                           ;main.c: 21: LATC = 0x00;
  1117  00E3B4  0E00               	movlw	0
  1118  00E3B6  6E8B               	movwf	3979,c	;volatile
  1119                           
  1120                           ;main.c: 22: LATD = 0x00;
  1121  00E3B8  0E00               	movlw	0
  1122  00E3BA  6E8C               	movwf	3980,c	;volatile
  1123                           
  1124                           ;main.c: 23: LATE = 0x00;
  1125  00E3BC  0E00               	movlw	0
  1126  00E3BE  6E8D               	movwf	3981,c	;volatile
  1127                           
  1128                           ;main.c: 27: TRISA = 0xFF;
  1129  00E3C0  6892               	setf	3986,c	;volatile
  1130                           
  1131                           ;main.c: 28: TRISB = 0xFF;
  1132  00E3C2  6893               	setf	3987,c	;volatile
  1133                           
  1134                           ;main.c: 29: TRISC = 0x00;
  1135  00E3C4  0E00               	movlw	0
  1136  00E3C6  6E94               	movwf	3988,c	;volatile
  1137                           
  1138                           ;main.c: 30: TRISD = 0x00;
  1139  00E3C8  0E00               	movlw	0
  1140  00E3CA  6E95               	movwf	3989,c	;volatile
  1141                           
  1142                           ;main.c: 31: TRISE = 0x00;
  1143  00E3CC  0E00               	movlw	0
  1144  00E3CE  6E96               	movwf	3990,c	;volatile
  1145                           
  1146                           ;main.c: 34: ADCON0 = 0x00;
  1147  00E3D0  0E00               	movlw	0
  1148  00E3D2  6EC2               	movwf	4034,c	;volatile
  1149                           
  1150                           ;main.c: 35: ADCON1 = 0b00001111;
  1151  00E3D4  0E0F               	movlw	15
  1152  00E3D6  6EC1               	movwf	4033,c	;volatile
  1153                           
  1154                           ;main.c: 38: initLCD();
  1155  00E3D8  EC13  F072         	call	_initLCD	;wreg free
  1156                           
  1157                           ;main.c: 56: standbyMode();
  1158  00E3DC  EC6E  F07B         	call	_standbyMode	;wreg free
  1159                           
  1160                           ;main.c: 57: return;
  1161  00E3E0  EF00  F000         	goto	start
  1162  00E3E4                     __end_of_main:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           
  1168 ;; *************** function _standbyMode *****************
  1169 ;; Defined at:
  1170 ;;		line 804 in file "standbyMode.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  diet            2   47[COMRAM] unsigned int 
  1175 ;;  drawer          2   61[COMRAM] unsigned int 
  1176 ;;  diet            2   49[COMRAM] unsigned int 
  1177 ;;  keypress1       1   58[COMRAM] unsigned char 
  1178 ;;  drawer          2   63[COMRAM] unsigned int 
  1179 ;;  whichKey        2   53[COMRAM] unsigned int 
  1180 ;;  i               2   67[COMRAM] unsigned int 
  1181 ;;  drawerCount     2   65[COMRAM] unsigned int 
  1182 ;;  validDrawer     2   59[COMRAM] unsigned int 
  1183 ;;  zero            2   56[COMRAM] unsigned int 
  1184 ;;  firstIterati    2   51[COMRAM] unsigned int 
  1185 ;;  keypress        1   55[COMRAM] unsigned char 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;Total ram usage:       24 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    4
  1202 ;; This function calls:
  1203 ;;		_diet_press
  1204 ;;		_food_press
  1205 ;;		_lcdInst
  1206 ;;		_printf
  1207 ;;		_viewLogs
  1208 ;;		_which_drawer
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text1
  1215  00F6DC                     __ptext1:
  1216                           	opt stack 0
  1217  00F6DC                     _standbyMode:
  1218                           	opt stack 26
  1219                           
  1220                           ;standbyMode.c: 805: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1221                           
  1222                           ;incstack = 0
  1223  00F6DC  0E01               	movlw	1
  1224  00F6DE  ECB7  F071         	call	_lcdInst
  1225  00F6E2  0EC3               	movlw	195
  1226  00F6E4  6E2E               	movwf	??_standbyMode& (0+255),c
  1227  00F6E6  0ECD               	movlw	205
  1228  00F6E8                     u5297:
  1229  00F6E8  2EE8               	decfsz	wreg,f,c
  1230  00F6EA  D7FE               	bra	u5297
  1231  00F6EC  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1232  00F6EE  D7FC               	bra	u5297
  1233  00F6F0  F000               	nop	
  1234                           
  1235                           ;standbyMode.c: 806: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1236  00F6F2  0E0C               	movlw	12
  1237  00F6F4  ECB7  F071         	call	_lcdInst
  1238                           
  1239                           ;standbyMode.c: 807: printf("Standby");
  1240  00F6F8  0EE1               	movlw	low STR_29
  1241  00F6FA  6E0D               	movwf	printf@f,c
  1242  00F6FC  0EFF               	movlw	high STR_29
  1243  00F6FE  6E0E               	movwf	printf@f+1,c
  1244  00F700  EC71  F073         	call	_printf	;wreg free
  1245                           
  1246                           ;standbyMode.c: 808: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1247  00F704  0E66               	movlw	102
  1248  00F706  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1249  00F708  0E76               	movlw	118
  1250  00F70A  6E2E               	movwf	??_standbyMode& (0+255),c
  1251  00F70C  0EC1               	movlw	193
  1252  00F70E                     u5307:
  1253  00F70E  2EE8               	decfsz	wreg,f,c
  1254  00F710  D7FE               	bra	u5307
  1255  00F712  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1256  00F714  D7FC               	bra	u5307
  1257  00F716  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1258  00F718  D7FA               	bra	u5307
  1259  00F71A  F000               	nop	
  1260                           
  1261                           ;standbyMode.c: 809: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1262  00F71C  0E01               	movlw	1
  1263  00F71E  ECB7  F071         	call	_lcdInst
  1264  00F722  0EC3               	movlw	195
  1265  00F724  6E2E               	movwf	??_standbyMode& (0+255),c
  1266  00F726  0ECD               	movlw	205
  1267  00F728                     u5317:
  1268  00F728  2EE8               	decfsz	wreg,f,c
  1269  00F72A  D7FE               	bra	u5317
  1270  00F72C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1271  00F72E  D7FC               	bra	u5317
  1272  00F730  F000               	nop	
  1273                           
  1274                           ;standbyMode.c: 810: printf("Press any key to");
  1275  00F732  0E2A               	movlw	low STR_6
  1276  00F734  6E0D               	movwf	printf@f,c
  1277  00F736  0EFE               	movlw	high STR_6
  1278  00F738  6E0E               	movwf	printf@f+1,c
  1279  00F73A  EC71  F073         	call	_printf	;wreg free
  1280                           
  1281                           ;standbyMode.c: 811: lcdInst(0xC0);;
  1282  00F73E  0EC0               	movlw	192
  1283  00F740  ECB7  F071         	call	_lcdInst
  1284                           
  1285                           ;standbyMode.c: 812: printf("begin operation.");
  1286  00F744  0E08               	movlw	low STR_31
  1287  00F746  6E0D               	movwf	printf@f,c
  1288  00F748  0EFE               	movlw	high STR_31
  1289  00F74A  6E0E               	movwf	printf@f+1,c
  1290  00F74C  EC71  F073         	call	_printf	;wreg free
  1291  00F750                     
  1292                           ;standbyMode.c: 815: continue;
  1293  00F750  A281               	btfss	3969,1,c	;volatile
  1294  00F752  D7FE               	goto	l412
  1295                           
  1296                           ;standbyMode.c: 816: }
  1297                           ;standbyMode.c: 819: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1298  00F754  0E01               	movlw	1
  1299  00F756  ECB7  F071         	call	_lcdInst
  1300  00F75A  0EC3               	movlw	195
  1301  00F75C  6E2E               	movwf	??_standbyMode& (0+255),c
  1302  00F75E  0ECD               	movlw	205
  1303  00F760                     u5327:
  1304  00F760  2EE8               	decfsz	wreg,f,c
  1305  00F762  D7FE               	bra	u5327
  1306  00F764  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1307  00F766  D7FC               	bra	u5327
  1308  00F768  F000               	nop	
  1309                           
  1310                           ;standbyMode.c: 820: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1311  00F76A  0E0C               	movlw	12
  1312  00F76C  ECB7  F071         	call	_lcdInst
  1313                           
  1314                           ;standbyMode.c: 821: printf("Welcome to your");
  1315  00F770  0EDB               	movlw	low STR_32
  1316  00F772  6E0D               	movwf	printf@f,c
  1317  00F774  0EFE               	movlw	high STR_32
  1318  00F776  6E0E               	movwf	printf@f+1,c
  1319  00F778  EC71  F073         	call	_printf	;wreg free
  1320                           
  1321                           ;standbyMode.c: 822: lcdInst(0xC0);;
  1322  00F77C  0EC0               	movlw	192
  1323  00F77E  ECB7  F071         	call	_lcdInst
  1324                           
  1325                           ;standbyMode.c: 823: printf("cabinet sorter!");
  1326  00F782  0E3B               	movlw	low STR_33
  1327  00F784  6E0D               	movwf	printf@f,c
  1328  00F786  0EFE               	movlw	high STR_33
  1329  00F788  6E0E               	movwf	printf@f+1,c
  1330  00F78A  EC71  F073         	call	_printf	;wreg free
  1331                           
  1332                           ;standbyMode.c: 824: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1333  00F78E  0E66               	movlw	102
  1334  00F790  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1335  00F792  0E76               	movlw	118
  1336  00F794  6E2E               	movwf	??_standbyMode& (0+255),c
  1337  00F796  0EC1               	movlw	193
  1338  00F798                     u5337:
  1339  00F798  2EE8               	decfsz	wreg,f,c
  1340  00F79A  D7FE               	bra	u5337
  1341  00F79C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1342  00F79E  D7FC               	bra	u5337
  1343  00F7A0  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1344  00F7A2  D7FA               	bra	u5337
  1345  00F7A4  F000               	nop	
  1346                           
  1347                           ;standbyMode.c: 827: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1348  00F7A6  0E01               	movlw	1
  1349  00F7A8  ECB7  F071         	call	_lcdInst
  1350  00F7AC  0EC3               	movlw	195
  1351  00F7AE  6E2E               	movwf	??_standbyMode& (0+255),c
  1352  00F7B0  0ECD               	movlw	205
  1353  00F7B2                     u5347:
  1354  00F7B2  2EE8               	decfsz	wreg,f,c
  1355  00F7B4  D7FE               	bra	u5347
  1356  00F7B6  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1357  00F7B8  D7FC               	bra	u5347
  1358  00F7BA  F000               	nop	
  1359                           
  1360                           ;standbyMode.c: 828: printf("Press D to");
  1361  00F7BC  0EB2               	movlw	low STR_34
  1362  00F7BE  6E0D               	movwf	printf@f,c
  1363  00F7C0  0EFF               	movlw	high STR_34
  1364  00F7C2  6E0E               	movwf	printf@f+1,c
  1365  00F7C4  EC71  F073         	call	_printf	;wreg free
  1366                           
  1367                           ;standbyMode.c: 829: lcdInst(0xC0);;
  1368  00F7C8  0EC0               	movlw	192
  1369  00F7CA  ECB7  F071         	call	_lcdInst
  1370                           
  1371                           ;standbyMode.c: 830: printf("view logs,");
  1372  00F7CE  0E86               	movlw	low STR_35
  1373  00F7D0  6E0D               	movwf	printf@f,c
  1374  00F7D2  0EFF               	movlw	high STR_35
  1375  00F7D4  6E0E               	movwf	printf@f+1,c
  1376  00F7D6  EC71  F073         	call	_printf	;wreg free
  1377                           
  1378                           ;standbyMode.c: 831: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1379  00F7DA  0E66               	movlw	102
  1380  00F7DC  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1381  00F7DE  0E76               	movlw	118
  1382  00F7E0  6E2E               	movwf	??_standbyMode& (0+255),c
  1383  00F7E2  0EC1               	movlw	193
  1384  00F7E4                     u5357:
  1385  00F7E4  2EE8               	decfsz	wreg,f,c
  1386  00F7E6  D7FE               	bra	u5357
  1387  00F7E8  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1388  00F7EA  D7FC               	bra	u5357
  1389  00F7EC  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1390  00F7EE  D7FA               	bra	u5357
  1391  00F7F0  F000               	nop	
  1392                           
  1393                           ;standbyMode.c: 832: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1394  00F7F2  0E01               	movlw	1
  1395  00F7F4  ECB7  F071         	call	_lcdInst
  1396  00F7F8  0EC3               	movlw	195
  1397  00F7FA  6E2E               	movwf	??_standbyMode& (0+255),c
  1398  00F7FC  0ECD               	movlw	205
  1399  00F7FE                     u5367:
  1400  00F7FE  2EE8               	decfsz	wreg,f,c
  1401  00F800  D7FE               	bra	u5367
  1402  00F802  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1403  00F804  D7FC               	bra	u5367
  1404  00F806  F000               	nop	
  1405                           
  1406                           ;standbyMode.c: 833: printf("or press # to");
  1407  00F808  0E44               	movlw	low STR_36
  1408  00F80A  6E0D               	movwf	printf@f,c
  1409  00F80C  0EFF               	movlw	high STR_36
  1410  00F80E  6E0E               	movwf	printf@f+1,c
  1411  00F810  EC71  F073         	call	_printf	;wreg free
  1412                           
  1413                           ;standbyMode.c: 834: lcdInst(0xC0);;
  1414  00F814  0EC0               	movlw	192
  1415  00F816  ECB7  F071         	call	_lcdInst
  1416                           
  1417                           ;standbyMode.c: 835: printf("begin operation.");
  1418  00F81A  0E08               	movlw	low STR_31
  1419  00F81C  6E0D               	movwf	printf@f,c
  1420  00F81E  0EFE               	movlw	high STR_31
  1421  00F820  6E0E               	movwf	printf@f+1,c
  1422  00F822  EC71  F073         	call	_printf	;wreg free
  1423  00F826  A281               	btfss	3969,1,c	;volatile
  1424  00F828  D7FE               	goto	l415
  1425                           
  1426                           ;standbyMode.c: 838: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1427  00F82A  3881               	swapf	3969,w,c	;volatile
  1428  00F82C  0B0F               	andlw	15
  1429  00F82E  0B0F               	andlw	15
  1430  00F830  6E38               	movwf	standbyMode@keypress,c
  1431  00F832  B281               	btfsc	3969,1,c	;volatile
  1432  00F834  D7FE               	goto	l418
  1433                           
  1434                           ;standbyMode.c: 841: if (keypress == 14){
  1435  00F836  0E0E               	movlw	14
  1436  00F838  1838               	xorwf	standbyMode@keypress,w,c
  1437  00F83A  A4D8               	btfss	status,2,c
  1438  00F83C  D232               	goto	l420
  1439                           
  1440                           ;standbyMode.c: 878: unsigned int drawerCount = 0;
  1441  00F83E  0E00               	movlw	0
  1442  00F840  6E43               	movwf	standbyMode@drawerCount+1,c
  1443  00F842  0E00               	movlw	0
  1444  00F844  6E42               	movwf	standbyMode@drawerCount,c
  1445                           
  1446                           ;standbyMode.c: 879: unsigned int i = 0;
  1447  00F846  0E00               	movlw	0
  1448  00F848  6E45               	movwf	standbyMode@i+1,c
  1449  00F84A  0E00               	movlw	0
  1450  00F84C  6E44               	movwf	standbyMode@i,c
  1451                           
  1452                           ;standbyMode.c: 880: unsigned int validDrawer = 0;
  1453  00F84E  0E00               	movlw	0
  1454  00F850  6E3D               	movwf	standbyMode@validDrawer+1,c
  1455  00F852  0E00               	movlw	0
  1456  00F854  6E3C               	movwf	standbyMode@validDrawer,c
  1457                           
  1458                           ;standbyMode.c: 881: unsigned int zero = 0;
  1459  00F856  0E00               	movlw	0
  1460  00F858  6E3A               	movwf	standbyMode@zero+1,c
  1461  00F85A  0E00               	movlw	0
  1462  00F85C  6E39               	movwf	standbyMode@zero,c
  1463                           
  1464                           ;standbyMode.c: 882: unsigned int firstIteration = 0;
  1465  00F85E  0E00               	movlw	0
  1466  00F860  6E35               	movwf	standbyMode@firstIteration+1,c
  1467  00F862  0E00               	movlw	0
  1468  00F864  6E34               	movwf	standbyMode@firstIteration,c
  1469  00F866                     
  1470                           ;standbyMode.c: 885: if (firstIteration == 1){
  1471  00F866  0434               	decf	standbyMode@firstIteration,w,c
  1472  00F868  1035               	iorwf	standbyMode@firstIteration+1,w,c
  1473  00F86A  A4D8               	btfss	status,2,c
  1474  00F86C  D13B               	goto	l422
  1475  00F86E                     u5080:
  1476                           
  1477                           ;standbyMode.c: 888: if(drawerCount >= 8){
  1478                           
  1479                           ;standbyMode.c: 886: while (1){
  1480  00F86E  5043               	movf	standbyMode@drawerCount+1,w,c
  1481  00F870  E104               	bnz	u5090
  1482  00F872  0E08               	movlw	8
  1483  00F874  5C42               	subwf	standbyMode@drawerCount,w,c
  1484  00F876  A0D8               	btfss	status,0,c
  1485  00F878  D02A               	goto	l424
  1486  00F87A                     u5090:
  1487                           
  1488                           ;standbyMode.c: 889: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1489  00F87A  0E01               	movlw	1
  1490  00F87C  ECB7  F071         	call	_lcdInst
  1491  00F880  0EC3               	movlw	195
  1492  00F882  6E2E               	movwf	??_standbyMode& (0+255),c
  1493  00F884  0ECD               	movlw	205
  1494  00F886                     u5377:
  1495  00F886  2EE8               	decfsz	wreg,f,c
  1496  00F888  D7FE               	bra	u5377
  1497  00F88A  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1498  00F88C  D7FC               	bra	u5377
  1499  00F88E  F000               	nop	
  1500                           
  1501                           ;standbyMode.c: 890: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1502  00F890  0E0C               	movlw	12
  1503  00F892  ECB7  F071         	call	_lcdInst
  1504                           
  1505                           ;standbyMode.c: 891: printf("Maximum of 8");
  1506  00F896  0E6C               	movlw	low STR_38
  1507  00F898  6E0D               	movwf	printf@f,c
  1508  00F89A  0EFF               	movlw	high STR_38
  1509  00F89C  6E0E               	movwf	printf@f+1,c
  1510  00F89E  EC71  F073         	call	_printf	;wreg free
  1511                           
  1512                           ;standbyMode.c: 892: lcdInst(0xC0);;
  1513  00F8A2  0EC0               	movlw	192
  1514  00F8A4  ECB7  F071         	call	_lcdInst
  1515                           
  1516                           ;standbyMode.c: 893: printf("drawers reached!");
  1517  00F8A8  0EF7               	movlw	low STR_39
  1518  00F8AA  6E0D               	movwf	printf@f,c
  1519  00F8AC  0EFD               	movlw	high STR_39
  1520  00F8AE  6E0E               	movwf	printf@f+1,c
  1521  00F8B0  EC71  F073         	call	_printf	;wreg free
  1522                           
  1523                           ;standbyMode.c: 894: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1524  00F8B4  0E66               	movlw	102
  1525  00F8B6  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1526  00F8B8  0E76               	movlw	118
  1527  00F8BA  6E2E               	movwf	??_standbyMode& (0+255),c
  1528  00F8BC  0EC1               	movlw	193
  1529  00F8BE                     u5387:
  1530  00F8BE  2EE8               	decfsz	wreg,f,c
  1531  00F8C0  D7FE               	bra	u5387
  1532  00F8C2  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1533  00F8C4  D7FC               	bra	u5387
  1534  00F8C6  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1535  00F8C8  D7FA               	bra	u5387
  1536  00F8CA  F000               	nop	
  1537                           
  1538                           ;standbyMode.c: 895: break;
  1539  00F8CC  0012               	return	
  1540  00F8CE                     l424:
  1541                           
  1542                           ;standbyMode.c: 896: }
  1543                           ;standbyMode.c: 898: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1544  00F8CE  0E01               	movlw	1
  1545  00F8D0  ECB7  F071         	call	_lcdInst
  1546  00F8D4  0EC3               	movlw	195
  1547  00F8D6  6E2E               	movwf	??_standbyMode& (0+255),c
  1548  00F8D8  0ECD               	movlw	205
  1549  00F8DA                     u5397:
  1550  00F8DA  2EE8               	decfsz	wreg,f,c
  1551  00F8DC  D7FE               	bra	u5397
  1552  00F8DE  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1553  00F8E0  D7FC               	bra	u5397
  1554  00F8E2  F000               	nop	
  1555                           
  1556                           ;standbyMode.c: 899: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1557  00F8E4  0E0C               	movlw	12
  1558  00F8E6  ECB7  F071         	call	_lcdInst
  1559                           
  1560                           ;standbyMode.c: 900: printf("Another drawer?");
  1561  00F8EA  0EBB               	movlw	low STR_40
  1562  00F8EC  6E0D               	movwf	printf@f,c
  1563  00F8EE  0EFE               	movlw	high STR_40
  1564  00F8F0  6E0E               	movwf	printf@f+1,c
  1565  00F8F2  EC71  F073         	call	_printf	;wreg free
  1566                           
  1567                           ;standbyMode.c: 901: lcdInst(0xC0);;
  1568  00F8F6  0EC0               	movlw	192
  1569  00F8F8  ECB7  F071         	call	_lcdInst
  1570                           
  1571                           ;standbyMode.c: 902: printf("# = Yes, D = No");
  1572  00F8FC  0ECB               	movlw	low STR_18
  1573  00F8FE  6E0D               	movwf	printf@f,c
  1574  00F900  0EFE               	movlw	high STR_18
  1575  00F902  6E0E               	movwf	printf@f+1,c
  1576  00F904  EC71  F073         	call	_printf	;wreg free
  1577  00F908  A281               	btfss	3969,1,c	;volatile
  1578  00F90A  D7FE               	goto	l427
  1579                           
  1580                           ;standbyMode.c: 905: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  1581  00F90C  3881               	swapf	3969,w,c	;volatile
  1582  00F90E  0B0F               	andlw	15
  1583  00F910  0B0F               	andlw	15
  1584  00F912  6E3B               	movwf	standbyMode@keypress1,c
  1585  00F914  B281               	btfsc	3969,1,c	;volatile
  1586  00F916  D7FE               	goto	l430
  1587                           
  1588                           ;standbyMode.c: 908: if (keypress1 == 14){
  1589  00F918  0E0E               	movlw	14
  1590  00F91A  183B               	xorwf	standbyMode@keypress1,w,c
  1591  00F91C  A4D8               	btfss	status,2,c
  1592  00F91E  D0DB               	goto	l432
  1593                           
  1594                           ;standbyMode.c: 909: unsigned int drawer = which_drawer();
  1595  00F920  ECDF  F074         	call	_which_drawer	;wreg free
  1596  00F924  C019  F03E         	movff	?_which_drawer,standbyMode@drawer
  1597  00F928  C01A  F03F         	movff	?_which_drawer+1,standbyMode@drawer+1
  1598                           
  1599                           ;standbyMode.c: 910: for (i=0; i<8; i++){
  1600  00F92C  0E00               	movlw	0
  1601  00F92E  6E45               	movwf	standbyMode@i+1,c
  1602  00F930  0E00               	movlw	0
  1603  00F932  6E44               	movwf	standbyMode@i,c
  1604  00F934                     l3555:
  1605  00F934  5045               	movf	standbyMode@i+1,w,c
  1606  00F936  E12C               	bnz	l3571
  1607  00F938  0E08               	movlw	8
  1608  00F93A  5C44               	subwf	standbyMode@i,w,c
  1609  00F93C  B0D8               	btfsc	status,0,c
  1610  00F93E  D028               	goto	u5160
  1611                           
  1612                           ;standbyMode.c: 911: if (drawerInformation[i] == drawer){
  1613  00F940  90D8               	bcf	status,0,c
  1614  00F942  3444               	rlcf	standbyMode@i,w,c
  1615  00F944  6ED9               	movwf	fsr2l,c
  1616  00F946  3445               	rlcf	standbyMode@i+1,w,c
  1617  00F948  6EDA               	movwf	fsr2h,c
  1618  00F94A  0E46               	movlw	low _drawerInformation
  1619  00F94C  26D9               	addwf	fsr2l,f,c
  1620  00F94E  0E00               	movlw	high _drawerInformation
  1621  00F950  22DA               	addwfc	fsr2h,f,c
  1622  00F952  503E               	movf	standbyMode@drawer,w,c
  1623  00F954  18DE               	xorwf	postinc2,w,c
  1624  00F956  E119               	bnz	l3567
  1625  00F958  503F               	movf	standbyMode@drawer+1,w,c
  1626  00F95A  18DE               	xorwf	postinc2,w,c
  1627  00F95C  A4D8               	btfss	status,2,c
  1628  00F95E  D015               	goto	l436
  1629                           
  1630                           ;standbyMode.c: 912: validDrawer = 1;
  1631  00F960  0E00               	movlw	0
  1632  00F962  6E3D               	movwf	standbyMode@validDrawer+1,c
  1633  00F964  0E01               	movlw	1
  1634  00F966  6E3C               	movwf	standbyMode@validDrawer,c
  1635                           
  1636                           ;standbyMode.c: 913: if (drawerInformation[i] == 0){
  1637  00F968  90D8               	bcf	status,0,c
  1638  00F96A  3444               	rlcf	standbyMode@i,w,c
  1639  00F96C  6ED9               	movwf	fsr2l,c
  1640  00F96E  3445               	rlcf	standbyMode@i+1,w,c
  1641  00F970  6EDA               	movwf	fsr2h,c
  1642  00F972  0E46               	movlw	low _drawerInformation
  1643  00F974  26D9               	addwf	fsr2l,f,c
  1644  00F976  0E00               	movlw	high _drawerInformation
  1645  00F978  22DA               	addwfc	fsr2h,f,c
  1646  00F97A  50DE               	movf	postinc2,w,c
  1647  00F97C  10DE               	iorwf	postinc2,w,c
  1648  00F97E  A4D8               	btfss	status,2,c
  1649  00F980  D004               	goto	l436
  1650                           
  1651                           ;standbyMode.c: 914: zero = 1;
  1652  00F982  0E00               	movlw	0
  1653  00F984  6E3A               	movwf	standbyMode@zero+1,c
  1654  00F986  0E01               	movlw	1
  1655  00F988  6E39               	movwf	standbyMode@zero,c
  1656  00F98A                     l436:
  1657  00F98A                     l3567:
  1658  00F98A  4A44               	infsnz	standbyMode@i,f,c
  1659  00F98C  2A45               	incf	standbyMode@i+1,f,c
  1660  00F98E  D7D2               	goto	l3555
  1661  00F990                     u5160:
  1662  00F990                     l3571:
  1663                           
  1664                           ;standbyMode.c: 915: }
  1665                           ;standbyMode.c: 916: }
  1666                           ;standbyMode.c: 917: }
  1667                           ;standbyMode.c: 918: if (validDrawer == 1){
  1668  00F990  043C               	decf	standbyMode@validDrawer,w,c
  1669  00F992  103D               	iorwf	standbyMode@validDrawer+1,w,c
  1670  00F994  A4D8               	btfss	status,2,c
  1671  00F996  D05B               	goto	l437
  1672                           
  1673                           ;standbyMode.c: 919: if (zero == 1){
  1674  00F998  0439               	decf	standbyMode@zero,w,c
  1675  00F99A  103A               	iorwf	standbyMode@zero+1,w,c
  1676  00F99C  A4D8               	btfss	status,2,c
  1677  00F99E  D029               	goto	l438
  1678                           
  1679                           ;standbyMode.c: 920: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1680  00F9A0  0E01               	movlw	1
  1681  00F9A2  ECB7  F071         	call	_lcdInst
  1682  00F9A6  0EC3               	movlw	195
  1683  00F9A8  6E2E               	movwf	??_standbyMode& (0+255),c
  1684  00F9AA  0ECD               	movlw	205
  1685  00F9AC                     u5407:
  1686  00F9AC  2EE8               	decfsz	wreg,f,c
  1687  00F9AE  D7FE               	bra	u5407
  1688  00F9B0  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1689  00F9B2  D7FC               	bra	u5407
  1690  00F9B4  F000               	nop	
  1691                           
  1692                           ;standbyMode.c: 921: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1693  00F9B6  0E0C               	movlw	12
  1694  00F9B8  ECB7  F071         	call	_lcdInst
  1695                           
  1696                           ;standbyMode.c: 922: printf("No drawer");
  1697  00F9BC  0EBD               	movlw	low STR_42
  1698  00F9BE  6E0D               	movwf	printf@f,c
  1699  00F9C0  0EFF               	movlw	high STR_42
  1700  00F9C2  6E0E               	movwf	printf@f+1,c
  1701  00F9C4  EC71  F073         	call	_printf	;wreg free
  1702                           
  1703                           ;standbyMode.c: 923: lcdInst(0xC0);;
  1704  00F9C8  0EC0               	movlw	192
  1705  00F9CA  ECB7  F071         	call	_lcdInst
  1706                           
  1707                           ;standbyMode.c: 924: printf("number pressed.");
  1708  00F9CE  0E4B               	movlw	low STR_43
  1709  00F9D0  6E0D               	movwf	printf@f,c
  1710  00F9D2  0EFE               	movlw	high STR_43
  1711  00F9D4  6E0E               	movwf	printf@f+1,c
  1712  00F9D6  EC71  F073         	call	_printf	;wreg free
  1713                           
  1714                           ;standbyMode.c: 925: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1715  00F9DA  0E66               	movlw	102
  1716  00F9DC  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1717  00F9DE  0E76               	movlw	118
  1718  00F9E0  6E2E               	movwf	??_standbyMode& (0+255),c
  1719  00F9E2  0EC1               	movlw	193
  1720  00F9E4                     u5417:
  1721  00F9E4  2EE8               	decfsz	wreg,f,c
  1722  00F9E6  D7FE               	bra	u5417
  1723  00F9E8  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1724  00F9EA  D7FC               	bra	u5417
  1725  00F9EC  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1726  00F9EE  D7FA               	bra	u5417
  1727  00F9F0  D028               	goto	L1
  1728  00F9F2                     l438:
  1729                           
  1730                           ;standbyMode.c: 927: else{
  1731                           ;standbyMode.c: 928: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1732  00F9F2  0E01               	movlw	1
  1733  00F9F4  ECB7  F071         	call	_lcdInst
  1734  00F9F8  0EC3               	movlw	195
  1735  00F9FA  6E2E               	movwf	??_standbyMode& (0+255),c
  1736  00F9FC  0ECD               	movlw	205
  1737  00F9FE                     u5427:
  1738  00F9FE  2EE8               	decfsz	wreg,f,c
  1739  00FA00  D7FE               	bra	u5427
  1740  00FA02  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1741  00FA04  D7FC               	bra	u5427
  1742  00FA06  F000               	nop	
  1743                           
  1744                           ;standbyMode.c: 929: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1745  00FA08  0E0C               	movlw	12
  1746  00FA0A  ECB7  F071         	call	_lcdInst
  1747                           
  1748                           ;standbyMode.c: 930: printf("Drawer already");
  1749  00FA0E  0E19               	movlw	low STR_44
  1750  00FA10  6E0D               	movwf	printf@f,c
  1751  00FA12  0EFF               	movlw	high STR_44
  1752  00FA14  6E0E               	movwf	printf@f+1,c
  1753  00FA16  EC71  F073         	call	_printf	;wreg free
  1754                           
  1755                           ;standbyMode.c: 931: lcdInst(0xC0);;
  1756  00FA1A  0EC0               	movlw	192
  1757  00FA1C  ECB7  F071         	call	_lcdInst
  1758                           
  1759                           ;standbyMode.c: 932: printf("in use!");
  1760  00FA20  0ED9               	movlw	low STR_45
  1761  00FA22  6E0D               	movwf	printf@f,c
  1762  00FA24  0EFF               	movlw	high STR_45
  1763  00FA26  6E0E               	movwf	printf@f+1,c
  1764  00FA28  EC71  F073         	call	_printf	;wreg free
  1765                           
  1766                           ;standbyMode.c: 933: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1767  00FA2C  0E66               	movlw	102
  1768  00FA2E  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1769  00FA30  0E76               	movlw	118
  1770  00FA32  6E2E               	movwf	??_standbyMode& (0+255),c
  1771  00FA34  0EC1               	movlw	193
  1772  00FA36                     u5437:
  1773  00FA36  2EE8               	decfsz	wreg,f,c
  1774  00FA38  D7FE               	bra	u5437
  1775  00FA3A  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1776  00FA3C  D7FC               	bra	u5437
  1777  00FA3E  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1778  00FA40  D7FA               	bra	u5437
  1779  00FA42                     L1:
  1780  00FA42  F000               	nop	
  1781                           
  1782                           ;standbyMode.c: 934: }
  1783                           ;standbyMode.c: 935: validDrawer = 0;
  1784  00FA44  0E00               	movlw	0
  1785  00FA46  6E3D               	movwf	standbyMode@validDrawer+1,c
  1786  00FA48  0E00               	movlw	0
  1787  00FA4A  6E3C               	movwf	standbyMode@validDrawer,c
  1788                           
  1789                           ;standbyMode.c: 936: continue;
  1790  00FA4C  D710               	goto	u5080
  1791  00FA4E                     l437:
  1792                           
  1793                           ;standbyMode.c: 938: else{
  1794                           ;standbyMode.c: 939: unsigned int diet = diet_press(drawer);
  1795  00FA4E  C03E  F019         	movff	standbyMode@drawer,diet_press@drawer
  1796  00FA52  C03F  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  1797  00FA56  ECF0  F078         	call	_diet_press	;wreg free
  1798  00FA5A  C019  F030         	movff	?_diet_press,standbyMode@diet
  1799  00FA5E  C01A  F031         	movff	?_diet_press+1,standbyMode@diet+1
  1800                           
  1801                           ;standbyMode.c: 940: food_press(diet, drawer);
  1802  00FA62  C030  F019         	movff	standbyMode@diet,food_press@dietSum
  1803  00FA66  C031  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  1804  00FA6A  C03E  F01B         	movff	standbyMode@drawer,food_press@drawer
  1805  00FA6E  C03F  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  1806  00FA72  EC00  F074         	call	_food_press	;wreg free
  1807                           
  1808                           ;standbyMode.c: 941: drawerInformation[drawerCount] = drawer;
  1809  00FA76  90D8               	bcf	status,0,c
  1810  00FA78  3442               	rlcf	standbyMode@drawerCount,w,c
  1811  00FA7A  6ED9               	movwf	fsr2l,c
  1812  00FA7C  3443               	rlcf	standbyMode@drawerCount+1,w,c
  1813  00FA7E  6EDA               	movwf	fsr2h,c
  1814  00FA80  0E46               	movlw	low _drawerInformation
  1815  00FA82  26D9               	addwf	fsr2l,f,c
  1816  00FA84  0E00               	movlw	high _drawerInformation
  1817  00FA86  22DA               	addwfc	fsr2h,f,c
  1818  00FA88  C03E  FFDE         	movff	standbyMode@drawer,postinc2
  1819  00FA8C  C03F  FFDD         	movff	standbyMode@drawer+1,postdec2
  1820                           
  1821                           ;standbyMode.c: 942: drawerCount += 1;
  1822  00FA90  4A42               	infsnz	standbyMode@drawerCount,f,c
  1823  00FA92  2A43               	incf	standbyMode@drawerCount+1,f,c
  1824                           
  1825                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1826  00FA94  0E01               	movlw	1
  1827  00FA96  ECB7  F071         	call	_lcdInst
  1828  00FA9A  0EC3               	movlw	195
  1829  00FA9C  6E2E               	movwf	??_standbyMode& (0+255),c
  1830  00FA9E  0ECD               	movlw	205
  1831  00FAA0                     u5447:
  1832  00FAA0  2EE8               	decfsz	wreg,f,c
  1833  00FAA2  D7FE               	bra	u5447
  1834  00FAA4  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1835  00FAA6  D7FC               	bra	u5447
  1836  00FAA8  F000               	nop	
  1837                           
  1838                           ;standbyMode.c: 944: printf("%i", drawerCount);
  1839  00FAAA  0EFB               	movlw	low STR_46
  1840  00FAAC  6E0D               	movwf	printf@f,c
  1841  00FAAE  0EFF               	movlw	high STR_46
  1842  00FAB0  6E0E               	movwf	printf@f+1,c
  1843  00FAB2  C042  F00F         	movff	standbyMode@drawerCount,?_printf+2
  1844  00FAB6  C043  F010         	movff	standbyMode@drawerCount+1,?_printf+3
  1845  00FABA  EC71  F073         	call	_printf	;wreg free
  1846                           
  1847                           ;standbyMode.c: 945: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1848  00FABE  0E33               	movlw	51
  1849  00FAC0  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1850  00FAC2  0EBB               	movlw	187
  1851  00FAC4  6E2E               	movwf	??_standbyMode& (0+255),c
  1852  00FAC6  0EE0               	movlw	224
  1853  00FAC8                     u5457:
  1854  00FAC8  2EE8               	decfsz	wreg,f,c
  1855  00FACA  D7FE               	bra	u5457
  1856  00FACC  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1857  00FACE  D7FC               	bra	u5457
  1858  00FAD0  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1859  00FAD2  D7FA               	bra	u5457
  1860                           
  1861                           ;standbyMode.c: 946: }
  1862                           ;standbyMode.c: 947: }
  1863  00FAD4  D004               	goto	l443
  1864  00FAD6                     l432:
  1865                           
  1866                           ;standbyMode.c: 948: else if (keypress1 == 15){
  1867  00FAD6  0E0F               	movlw	15
  1868  00FAD8  183B               	xorwf	standbyMode@keypress1,w,c
  1869  00FADA  B4D8               	btfsc	status,2,c
  1870  00FADC  0012               	return	
  1871  00FADE                     l443:
  1872                           
  1873                           ;standbyMode.c: 950: }
  1874                           ;standbyMode.c: 951: keypress1 = 0;
  1875  00FADE  0E00               	movlw	0
  1876  00FAE0  6E3B               	movwf	standbyMode@keypress1,c
  1877  00FAE2  D6C5               	goto	u5080
  1878  00FAE4                     l422:
  1879                           
  1880                           ;standbyMode.c: 955: else{
  1881                           ;standbyMode.c: 956: unsigned int drawer = which_drawer();
  1882  00FAE4  ECDF  F074         	call	_which_drawer	;wreg free
  1883  00FAE8  C019  F040         	movff	?_which_drawer,standbyMode@drawer_391
  1884  00FAEC  C01A  F041         	movff	?_which_drawer+1,standbyMode@drawer_391+1
  1885                           
  1886                           ;standbyMode.c: 957: firstIteration = 1;
  1887  00FAF0  0E00               	movlw	0
  1888  00FAF2  6E35               	movwf	standbyMode@firstIteration+1,c
  1889  00FAF4  0E01               	movlw	1
  1890  00FAF6  6E34               	movwf	standbyMode@firstIteration,c
  1891                           
  1892                           ;standbyMode.c: 958: for (i=0; i<8; i++){
  1893  00FAF8  0E00               	movlw	0
  1894  00FAFA  6E45               	movwf	standbyMode@i+1,c
  1895  00FAFC  0E00               	movlw	0
  1896  00FAFE  6E44               	movwf	standbyMode@i,c
  1897  00FB00                     l3635:
  1898  00FB00  5045               	movf	standbyMode@i+1,w,c
  1899  00FB02  E12C               	bnz	l3651
  1900  00FB04  0E08               	movlw	8
  1901  00FB06  5C44               	subwf	standbyMode@i,w,c
  1902  00FB08  B0D8               	btfsc	status,0,c
  1903  00FB0A  D028               	goto	u5230
  1904                           
  1905                           ;standbyMode.c: 959: if (drawerInformation[i] == drawer){
  1906  00FB0C  90D8               	bcf	status,0,c
  1907  00FB0E  3444               	rlcf	standbyMode@i,w,c
  1908  00FB10  6ED9               	movwf	fsr2l,c
  1909  00FB12  3445               	rlcf	standbyMode@i+1,w,c
  1910  00FB14  6EDA               	movwf	fsr2h,c
  1911  00FB16  0E46               	movlw	low _drawerInformation
  1912  00FB18  26D9               	addwf	fsr2l,f,c
  1913  00FB1A  0E00               	movlw	high _drawerInformation
  1914  00FB1C  22DA               	addwfc	fsr2h,f,c
  1915  00FB1E  5040               	movf	standbyMode@drawer_391,w,c
  1916  00FB20  18DE               	xorwf	postinc2,w,c
  1917  00FB22  E119               	bnz	l3647
  1918  00FB24  5041               	movf	standbyMode@drawer_391+1,w,c
  1919  00FB26  18DE               	xorwf	postinc2,w,c
  1920  00FB28  A4D8               	btfss	status,2,c
  1921  00FB2A  D015               	goto	l449
  1922                           
  1923                           ;standbyMode.c: 960: validDrawer = 1;
  1924  00FB2C  0E00               	movlw	0
  1925  00FB2E  6E3D               	movwf	standbyMode@validDrawer+1,c
  1926  00FB30  0E01               	movlw	1
  1927  00FB32  6E3C               	movwf	standbyMode@validDrawer,c
  1928                           
  1929                           ;standbyMode.c: 961: if (drawerInformation[i] == 0){
  1930  00FB34  90D8               	bcf	status,0,c
  1931  00FB36  3444               	rlcf	standbyMode@i,w,c
  1932  00FB38  6ED9               	movwf	fsr2l,c
  1933  00FB3A  3445               	rlcf	standbyMode@i+1,w,c
  1934  00FB3C  6EDA               	movwf	fsr2h,c
  1935  00FB3E  0E46               	movlw	low _drawerInformation
  1936  00FB40  26D9               	addwf	fsr2l,f,c
  1937  00FB42  0E00               	movlw	high _drawerInformation
  1938  00FB44  22DA               	addwfc	fsr2h,f,c
  1939  00FB46  50DE               	movf	postinc2,w,c
  1940  00FB48  10DE               	iorwf	postinc2,w,c
  1941  00FB4A  A4D8               	btfss	status,2,c
  1942  00FB4C  D004               	goto	l449
  1943                           
  1944                           ;standbyMode.c: 962: zero = 1;
  1945  00FB4E  0E00               	movlw	0
  1946  00FB50  6E3A               	movwf	standbyMode@zero+1,c
  1947  00FB52  0E01               	movlw	1
  1948  00FB54  6E39               	movwf	standbyMode@zero,c
  1949  00FB56                     l449:
  1950  00FB56                     l3647:
  1951  00FB56  4A44               	infsnz	standbyMode@i,f,c
  1952  00FB58  2A45               	incf	standbyMode@i+1,f,c
  1953  00FB5A  D7D2               	goto	l3635
  1954  00FB5C                     u5230:
  1955  00FB5C                     l3651:
  1956                           
  1957                           ;standbyMode.c: 963: }
  1958                           ;standbyMode.c: 964: }
  1959                           ;standbyMode.c: 965: }
  1960                           ;standbyMode.c: 966: if (validDrawer == 1){
  1961  00FB5C  043C               	decf	standbyMode@validDrawer,w,c
  1962  00FB5E  103D               	iorwf	standbyMode@validDrawer+1,w,c
  1963  00FB60  A4D8               	btfss	status,2,c
  1964  00FB62  D05B               	goto	l450
  1965                           
  1966                           ;standbyMode.c: 967: if (zero == 1){
  1967  00FB64  0439               	decf	standbyMode@zero,w,c
  1968  00FB66  103A               	iorwf	standbyMode@zero+1,w,c
  1969  00FB68  A4D8               	btfss	status,2,c
  1970  00FB6A  D029               	goto	l451
  1971                           
  1972                           ;standbyMode.c: 968: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1973  00FB6C  0E01               	movlw	1
  1974  00FB6E  ECB7  F071         	call	_lcdInst
  1975  00FB72  0EC3               	movlw	195
  1976  00FB74  6E2E               	movwf	??_standbyMode& (0+255),c
  1977  00FB76  0ECD               	movlw	205
  1978  00FB78                     u5467:
  1979  00FB78  2EE8               	decfsz	wreg,f,c
  1980  00FB7A  D7FE               	bra	u5467
  1981  00FB7C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1982  00FB7E  D7FC               	bra	u5467
  1983  00FB80  F000               	nop	
  1984                           
  1985                           ;standbyMode.c: 969: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1986  00FB82  0E0C               	movlw	12
  1987  00FB84  ECB7  F071         	call	_lcdInst
  1988                           
  1989                           ;standbyMode.c: 970: printf("No drawer");
  1990  00FB88  0EBD               	movlw	low STR_42
  1991  00FB8A  6E0D               	movwf	printf@f,c
  1992  00FB8C  0EFF               	movlw	high STR_42
  1993  00FB8E  6E0E               	movwf	printf@f+1,c
  1994  00FB90  EC71  F073         	call	_printf	;wreg free
  1995                           
  1996                           ;standbyMode.c: 971: lcdInst(0xC0);;
  1997  00FB94  0EC0               	movlw	192
  1998  00FB96  ECB7  F071         	call	_lcdInst
  1999                           
  2000                           ;standbyMode.c: 972: printf("number pressed.");
  2001  00FB9A  0E4B               	movlw	low STR_43
  2002  00FB9C  6E0D               	movwf	printf@f,c
  2003  00FB9E  0EFE               	movlw	high STR_43
  2004  00FBA0  6E0E               	movwf	printf@f+1,c
  2005  00FBA2  EC71  F073         	call	_printf	;wreg free
  2006                           
  2007                           ;standbyMode.c: 973: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2008  00FBA6  0E66               	movlw	102
  2009  00FBA8  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2010  00FBAA  0E76               	movlw	118
  2011  00FBAC  6E2E               	movwf	??_standbyMode& (0+255),c
  2012  00FBAE  0EC1               	movlw	193
  2013  00FBB0                     u5477:
  2014  00FBB0  2EE8               	decfsz	wreg,f,c
  2015  00FBB2  D7FE               	bra	u5477
  2016  00FBB4  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2017  00FBB6  D7FC               	bra	u5477
  2018  00FBB8  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2019  00FBBA  D7FA               	bra	u5477
  2020  00FBBC  D028               	goto	L2
  2021  00FBBE                     l451:
  2022                           
  2023                           ;standbyMode.c: 975: else{
  2024                           ;standbyMode.c: 976: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2025  00FBBE  0E01               	movlw	1
  2026  00FBC0  ECB7  F071         	call	_lcdInst
  2027  00FBC4  0EC3               	movlw	195
  2028  00FBC6  6E2E               	movwf	??_standbyMode& (0+255),c
  2029  00FBC8  0ECD               	movlw	205
  2030  00FBCA                     u5487:
  2031  00FBCA  2EE8               	decfsz	wreg,f,c
  2032  00FBCC  D7FE               	bra	u5487
  2033  00FBCE  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2034  00FBD0  D7FC               	bra	u5487
  2035  00FBD2  F000               	nop	
  2036                           
  2037                           ;standbyMode.c: 977: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2038  00FBD4  0E0C               	movlw	12
  2039  00FBD6  ECB7  F071         	call	_lcdInst
  2040                           
  2041                           ;standbyMode.c: 978: printf("Drawer already");
  2042  00FBDA  0E19               	movlw	low STR_44
  2043  00FBDC  6E0D               	movwf	printf@f,c
  2044  00FBDE  0EFF               	movlw	high STR_44
  2045  00FBE0  6E0E               	movwf	printf@f+1,c
  2046  00FBE2  EC71  F073         	call	_printf	;wreg free
  2047                           
  2048                           ;standbyMode.c: 979: lcdInst(0xC0);;
  2049  00FBE6  0EC0               	movlw	192
  2050  00FBE8  ECB7  F071         	call	_lcdInst
  2051                           
  2052                           ;standbyMode.c: 980: printf("in use!");
  2053  00FBEC  0ED9               	movlw	low STR_45
  2054  00FBEE  6E0D               	movwf	printf@f,c
  2055  00FBF0  0EFF               	movlw	high STR_45
  2056  00FBF2  6E0E               	movwf	printf@f+1,c
  2057  00FBF4  EC71  F073         	call	_printf	;wreg free
  2058                           
  2059                           ;standbyMode.c: 981: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2060  00FBF8  0E66               	movlw	102
  2061  00FBFA  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2062  00FBFC  0E76               	movlw	118
  2063  00FBFE  6E2E               	movwf	??_standbyMode& (0+255),c
  2064  00FC00  0EC1               	movlw	193
  2065  00FC02                     u5497:
  2066  00FC02  2EE8               	decfsz	wreg,f,c
  2067  00FC04  D7FE               	bra	u5497
  2068  00FC06  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2069  00FC08  D7FC               	bra	u5497
  2070  00FC0A  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2071  00FC0C  D7FA               	bra	u5497
  2072  00FC0E                     L2:
  2073  00FC0E  F000               	nop	
  2074                           
  2075                           ;standbyMode.c: 982: }
  2076                           ;standbyMode.c: 983: validDrawer = 0;
  2077  00FC10  0E00               	movlw	0
  2078  00FC12  6E3D               	movwf	standbyMode@validDrawer+1,c
  2079  00FC14  0E00               	movlw	0
  2080  00FC16  6E3C               	movwf	standbyMode@validDrawer,c
  2081                           
  2082                           ;standbyMode.c: 985: }
  2083                           
  2084                           ;standbyMode.c: 984: continue;
  2085  00FC18  D626               	goto	l421
  2086  00FC1A                     l450:
  2087                           
  2088                           ;standbyMode.c: 986: else{
  2089                           ;standbyMode.c: 987: unsigned int diet = diet_press(drawer);
  2090  00FC1A  C040  F019         	movff	standbyMode@drawer_391,diet_press@drawer
  2091  00FC1E  C041  F01A         	movff	standbyMode@drawer_391+1,diet_press@drawer+1
  2092  00FC22  ECF0  F078         	call	_diet_press	;wreg free
  2093  00FC26  C019  F032         	movff	?_diet_press,standbyMode@diet_396
  2094  00FC2A  C01A  F033         	movff	?_diet_press+1,standbyMode@diet_396+1
  2095                           
  2096                           ;standbyMode.c: 988: food_press(diet, drawer);
  2097  00FC2E  C032  F019         	movff	standbyMode@diet_396,food_press@dietSum
  2098  00FC32  C033  F01A         	movff	standbyMode@diet_396+1,food_press@dietSum+1
  2099  00FC36  C040  F01B         	movff	standbyMode@drawer_391,food_press@drawer
  2100  00FC3A  C041  F01C         	movff	standbyMode@drawer_391+1,food_press@drawer+1
  2101  00FC3E  EC00  F074         	call	_food_press	;wreg free
  2102                           
  2103                           ;standbyMode.c: 989: drawerInformation[drawerCount] = drawer;
  2104  00FC42  90D8               	bcf	status,0,c
  2105  00FC44  3442               	rlcf	standbyMode@drawerCount,w,c
  2106  00FC46  6ED9               	movwf	fsr2l,c
  2107  00FC48  3443               	rlcf	standbyMode@drawerCount+1,w,c
  2108  00FC4A  6EDA               	movwf	fsr2h,c
  2109  00FC4C  0E46               	movlw	low _drawerInformation
  2110  00FC4E  26D9               	addwf	fsr2l,f,c
  2111  00FC50  0E00               	movlw	high _drawerInformation
  2112  00FC52  22DA               	addwfc	fsr2h,f,c
  2113  00FC54  C040  FFDE         	movff	standbyMode@drawer_391,postinc2
  2114  00FC58  C041  FFDD         	movff	standbyMode@drawer_391+1,postdec2
  2115                           
  2116                           ;standbyMode.c: 990: drawerCount += 1;
  2117  00FC5C  4A42               	infsnz	standbyMode@drawerCount,f,c
  2118  00FC5E  2A43               	incf	standbyMode@drawerCount+1,f,c
  2119                           
  2120                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2121  00FC60  0E01               	movlw	1
  2122  00FC62  ECB7  F071         	call	_lcdInst
  2123  00FC66  0EC3               	movlw	195
  2124  00FC68  6E2E               	movwf	??_standbyMode& (0+255),c
  2125  00FC6A  0ECD               	movlw	205
  2126  00FC6C                     u5507:
  2127  00FC6C  2EE8               	decfsz	wreg,f,c
  2128  00FC6E  D7FE               	bra	u5507
  2129  00FC70  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2130  00FC72  D7FC               	bra	u5507
  2131  00FC74  F000               	nop	
  2132                           
  2133                           ;standbyMode.c: 992: printf("%i", drawerCount);
  2134  00FC76  0EFB               	movlw	low STR_46
  2135  00FC78  6E0D               	movwf	printf@f,c
  2136  00FC7A  0EFF               	movlw	high STR_46
  2137  00FC7C  6E0E               	movwf	printf@f+1,c
  2138  00FC7E  C042  F00F         	movff	standbyMode@drawerCount,?_printf+2
  2139  00FC82  C043  F010         	movff	standbyMode@drawerCount+1,?_printf+3
  2140  00FC86  EC71  F073         	call	_printf	;wreg free
  2141                           
  2142                           ;standbyMode.c: 993: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2143  00FC8A  0E33               	movlw	51
  2144  00FC8C  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2145  00FC8E  0EBB               	movlw	187
  2146  00FC90  6E2E               	movwf	??_standbyMode& (0+255),c
  2147  00FC92  0EE0               	movlw	224
  2148  00FC94                     u5517:
  2149  00FC94  2EE8               	decfsz	wreg,f,c
  2150  00FC96  D7FE               	bra	u5517
  2151  00FC98  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2152  00FC9A  D7FC               	bra	u5517
  2153  00FC9C  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2154  00FC9E  D7FA               	bra	u5517
  2155  00FCA0  D5E2               	goto	l421
  2156  00FCA2                     l420:
  2157                           
  2158                           ;standbyMode.c: 998: else if (keypress == 15){
  2159  00FCA2  0E0F               	movlw	15
  2160  00FCA4  1838               	xorwf	standbyMode@keypress,w,c
  2161  00FCA6  A4D8               	btfss	status,2,c
  2162  00FCA8  D05A               	goto	l456
  2163  00FCAA                     u5260:
  2164                           
  2165                           ;standbyMode.c: 1000: unsigned int whichKey = viewLogs();
  2166                           
  2167                           ;standbyMode.c: 999: while (1){
  2168  00FCAA  EC58  F077         	call	_viewLogs	;wreg free
  2169  00FCAE  C019  F036         	movff	?_viewLogs,standbyMode@whichKey
  2170  00FCB2  C01A  F037         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2171                           
  2172                           ;standbyMode.c: 1001: if (whichKey == 14){
  2173  00FCB6  0E0E               	movlw	14
  2174  00FCB8  1836               	xorwf	standbyMode@whichKey,w,c
  2175  00FCBA  1037               	iorwf	standbyMode@whichKey+1,w,c
  2176  00FCBC  B4D8               	btfsc	status,2,c
  2177  00FCBE  D7F5               	goto	u5260
  2178                           
  2179                           ;standbyMode.c: 1004: else if (whichKey == 15){
  2180                           
  2181                           ;standbyMode.c: 1003: }
  2182                           
  2183                           ;standbyMode.c: 1002: continue;
  2184  00FCC0  0E0F               	movlw	15
  2185  00FCC2  1836               	xorwf	standbyMode@whichKey,w,c
  2186  00FCC4  1037               	iorwf	standbyMode@whichKey+1,w,c
  2187  00FCC6  A4D8               	btfss	status,2,c
  2188  00FCC8  D020               	goto	l461
  2189                           
  2190                           ;standbyMode.c: 1005: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2191  00FCCA  0E01               	movlw	1
  2192  00FCCC  ECB7  F071         	call	_lcdInst
  2193  00FCD0  0EC3               	movlw	195
  2194  00FCD2  6E2E               	movwf	??_standbyMode& (0+255),c
  2195  00FCD4  0ECD               	movlw	205
  2196  00FCD6                     u5527:
  2197  00FCD6  2EE8               	decfsz	wreg,f,c
  2198  00FCD8  D7FE               	bra	u5527
  2199  00FCDA  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2200  00FCDC  D7FC               	bra	u5527
  2201  00FCDE  F000               	nop	
  2202                           
  2203                           ;standbyMode.c: 1006: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2204  00FCE0  0E0C               	movlw	12
  2205  00FCE2  ECB7  F071         	call	_lcdInst
  2206                           
  2207                           ;standbyMode.c: 1007: printf("Rebooting.");
  2208  00FCE6  0E9C               	movlw	low STR_52
  2209  00FCE8  6E0D               	movwf	printf@f,c
  2210  00FCEA  0EFF               	movlw	high STR_52
  2211  00FCEC  6E0E               	movwf	printf@f+1,c
  2212  00FCEE  EC71  F073         	call	_printf	;wreg free
  2213                           
  2214                           ;standbyMode.c: 1008: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2215  00FCF2  0E66               	movlw	102
  2216  00FCF4  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2217  00FCF6  0E76               	movlw	118
  2218  00FCF8  6E2E               	movwf	??_standbyMode& (0+255),c
  2219  00FCFA  0EC1               	movlw	193
  2220  00FCFC                     u5537:
  2221  00FCFC  2EE8               	decfsz	wreg,f,c
  2222  00FCFE  D7FE               	bra	u5537
  2223  00FD00  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2224  00FD02  D7FC               	bra	u5537
  2225  00FD04  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2226  00FD06  D7FA               	bra	u5537
  2227  00FD08  D028               	goto	L3
  2228  00FD0A                     l461:
  2229                           
  2230                           ;standbyMode.c: 1011: else{
  2231                           ;standbyMode.c: 1012: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2232  00FD0A  0E01               	movlw	1
  2233  00FD0C  ECB7  F071         	call	_lcdInst
  2234  00FD10  0EC3               	movlw	195
  2235  00FD12  6E2E               	movwf	??_standbyMode& (0+255),c
  2236  00FD14  0ECD               	movlw	205
  2237  00FD16                     u5547:
  2238  00FD16  2EE8               	decfsz	wreg,f,c
  2239  00FD18  D7FE               	bra	u5547
  2240  00FD1A  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2241  00FD1C  D7FC               	bra	u5547
  2242  00FD1E  F000               	nop	
  2243                           
  2244                           ;standbyMode.c: 1013: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2245  00FD20  0E0C               	movlw	12
  2246  00FD22  ECB7  F071         	call	_lcdInst
  2247                           
  2248                           ;standbyMode.c: 1014: printf("Invalid key!");
  2249  00FD26  0E52               	movlw	low STR_53
  2250  00FD28  6E0D               	movwf	printf@f,c
  2251  00FD2A  0EFF               	movlw	high STR_53
  2252  00FD2C  6E0E               	movwf	printf@f+1,c
  2253  00FD2E  EC71  F073         	call	_printf	;wreg free
  2254                           
  2255                           ;standbyMode.c: 1015: lcdInst(0xC0);;
  2256  00FD32  0EC0               	movlw	192
  2257  00FD34  ECB7  F071         	call	_lcdInst
  2258                           
  2259                           ;standbyMode.c: 1016: printf("Rebooting.");
  2260  00FD38  0E9C               	movlw	low STR_52
  2261  00FD3A  6E0D               	movwf	printf@f,c
  2262  00FD3C  0EFF               	movlw	high STR_52
  2263  00FD3E  6E0E               	movwf	printf@f+1,c
  2264  00FD40  EC71  F073         	call	_printf	;wreg free
  2265                           
  2266                           ;standbyMode.c: 1017: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2267  00FD44  0E66               	movlw	102
  2268  00FD46  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2269  00FD48  0E76               	movlw	118
  2270  00FD4A  6E2E               	movwf	??_standbyMode& (0+255),c
  2271  00FD4C  0EC1               	movlw	193
  2272  00FD4E                     u5557:
  2273  00FD4E  2EE8               	decfsz	wreg,f,c
  2274  00FD50  D7FE               	bra	u5557
  2275  00FD52  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2276  00FD54  D7FC               	bra	u5557
  2277  00FD56  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2278  00FD58  D7FA               	bra	u5557
  2279  00FD5A                     L3:
  2280  00FD5A  F000               	nop	
  2281                           
  2282                           ;standbyMode.c: 1018: break;
  2283  00FD5C  0012               	return	
  2284  00FD5E                     l456:
  2285                           
  2286                           ;standbyMode.c: 1024: else {
  2287                           ;standbyMode.c: 1025: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2288  00FD5E  0E01               	movlw	1
  2289  00FD60  ECB7  F071         	call	_lcdInst
  2290  00FD64  0EC3               	movlw	195
  2291  00FD66  6E2E               	movwf	??_standbyMode& (0+255),c
  2292  00FD68  0ECD               	movlw	205
  2293  00FD6A                     u5567:
  2294  00FD6A  2EE8               	decfsz	wreg,f,c
  2295  00FD6C  D7FE               	bra	u5567
  2296  00FD6E  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2297  00FD70  D7FC               	bra	u5567
  2298  00FD72  F000               	nop	
  2299                           
  2300                           ;standbyMode.c: 1026: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2301  00FD74  0E0C               	movlw	12
  2302  00FD76  ECB7  F071         	call	_lcdInst
  2303                           
  2304                           ;standbyMode.c: 1027: printf("Invalid key!");
  2305  00FD7A  0E52               	movlw	low STR_53
  2306  00FD7C  6E0D               	movwf	printf@f,c
  2307  00FD7E  0EFF               	movlw	high STR_53
  2308  00FD80  6E0E               	movwf	printf@f+1,c
  2309  00FD82  EC71  F073         	call	_printf	;wreg free
  2310                           
  2311                           ;standbyMode.c: 1028: lcdInst(0xC0);;
  2312  00FD86  0EC0               	movlw	192
  2313  00FD88  ECB7  F071         	call	_lcdInst
  2314                           
  2315                           ;standbyMode.c: 1029: printf("Rebooting.");
  2316  00FD8C  0E9C               	movlw	low STR_52
  2317  00FD8E  6E0D               	movwf	printf@f,c
  2318  00FD90  0EFF               	movlw	high STR_52
  2319  00FD92  6E0E               	movwf	printf@f+1,c
  2320  00FD94  EC71  F073         	call	_printf	;wreg free
  2321                           
  2322                           ;standbyMode.c: 1030: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2323  00FD98  0E66               	movlw	102
  2324  00FD9A  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2325  00FD9C  0E76               	movlw	118
  2326  00FD9E  6E2E               	movwf	??_standbyMode& (0+255),c
  2327  00FDA0  0EC1               	movlw	193
  2328  00FDA2                     u5577:
  2329  00FDA2  2EE8               	decfsz	wreg,f,c
  2330  00FDA4  D7FE               	bra	u5577
  2331  00FDA6  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2332  00FDA8  D7FC               	bra	u5577
  2333  00FDAA  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2334  00FDAC  D7FA               	bra	u5577
  2335  00FDAE  F000               	nop	
  2336  00FDB0  0012               	return	
  2337  00FDB2                     __end_of_standbyMode:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _which_drawer *****************
  2349 ;; Defined at:
  2350 ;;		line 749 in file "standbyMode.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  keypress        1   33[COMRAM] unsigned char 
  2355 ;;  count           2   31[COMRAM] unsigned int 
  2356 ;;  sum             2   29[COMRAM] unsigned int 
  2357 ;;  rand            2   27[COMRAM] unsigned int 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  2   24[COMRAM] unsigned int 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;Total ram usage:       10 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    3
  2374 ;; This function calls:
  2375 ;;		_decode_drawer
  2376 ;;		_lcdInst
  2377 ;;		_printf
  2378 ;;		_putch
  2379 ;; This function is called by:
  2380 ;;		_standbyMode
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text2
  2385  00E9BE                     __ptext2:
  2386                           	opt stack 0
  2387  00E9BE                     _which_drawer:
  2388                           	opt stack 26
  2389                           
  2390                           ;standbyMode.c: 750: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2391                           
  2392                           ;incstack = 0
  2393  00E9BE  0E0C               	movlw	12
  2394  00E9C0  ECB7  F071         	call	_lcdInst
  2395                           
  2396                           ;standbyMode.c: 751: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2397  00E9C4  0E01               	movlw	1
  2398  00E9C6  ECB7  F071         	call	_lcdInst
  2399  00E9CA  0EC3               	movlw	195
  2400  00E9CC  6E1B               	movwf	??_which_drawer& (0+255),c
  2401  00E9CE  0ECD               	movlw	205
  2402  00E9D0                     u5587:
  2403  00E9D0  2EE8               	decfsz	wreg,f,c
  2404  00E9D2  D7FE               	bra	u5587
  2405  00E9D4  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2406  00E9D6  D7FC               	bra	u5587
  2407  00E9D8  F000               	nop	
  2408                           
  2409                           ;standbyMode.c: 752: printf("Drawer number:");
  2410  00E9DA  0E0A               	movlw	low STR_27
  2411  00E9DC  6E0D               	movwf	printf@f,c
  2412  00E9DE  0EFF               	movlw	high STR_27
  2413  00E9E0  6E0E               	movwf	printf@f+1,c
  2414  00E9E2  EC71  F073         	call	_printf	;wreg free
  2415                           
  2416                           ;standbyMode.c: 753: lcdInst(0xC0);;
  2417  00E9E6  0EC0               	movlw	192
  2418  00E9E8  ECB7  F071         	call	_lcdInst
  2419  00E9EC                     
  2420                           ;standbyMode.c: 755: unsigned int count = 0;
  2421  00E9EC  0E00               	movlw	0
  2422  00E9EE  6E21               	movwf	which_drawer@count+1,c
  2423  00E9F0  0E00               	movlw	0
  2424  00E9F2  6E20               	movwf	which_drawer@count,c
  2425                           
  2426                           ;standbyMode.c: 756: unsigned int sum = 0;
  2427  00E9F4  0E00               	movlw	0
  2428  00E9F6  6E1F               	movwf	which_drawer@sum+1,c
  2429  00E9F8  0E00               	movlw	0
  2430  00E9FA  6E1E               	movwf	which_drawer@sum,c
  2431  00E9FC                     
  2432                           ;standbyMode.c: 759: while(PORTBbits.RB1 == 0){ continue; }
  2433  00E9FC  A281               	btfss	3969,1,c	;volatile
  2434  00E9FE  D7FE               	goto	l379
  2435                           
  2436                           ;standbyMode.c: 760: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2437  00EA00  3881               	swapf	3969,w,c	;volatile
  2438  00EA02  0B0F               	andlw	15
  2439  00EA04  0B0F               	andlw	15
  2440  00EA06  6E22               	movwf	which_drawer@keypress,c
  2441  00EA08  B281               	btfsc	3969,1,c	;volatile
  2442  00EA0A  D7FE               	goto	l384
  2443                           
  2444                           ;standbyMode.c: 763: if(keypress == 14){
  2445  00EA0C  0E0E               	movlw	14
  2446  00EA0E  1822               	xorwf	which_drawer@keypress,w,c
  2447  00EA10  B4D8               	btfsc	status,2,c
  2448  00EA12  D0A9               	goto	l387
  2449                           
  2450                           ;standbyMode.c: 766: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  2451                           
  2452                           ;standbyMode.c: 765: }
  2453                           
  2454                           ;standbyMode.c: 764: break;
  2455  00EA14  5022               	movf	which_drawer@keypress,w,c
  2456  00EA16  B4D8               	btfsc	status,2,c
  2457  00EA18  D023               	goto	u4880
  2458  00EA1A  0422               	decf	which_drawer@keypress,w,c
  2459  00EA1C  B4D8               	btfsc	status,2,c
  2460  00EA1E  D020               	goto	u4880
  2461  00EA20  0E02               	movlw	2
  2462  00EA22  1822               	xorwf	which_drawer@keypress,w,c
  2463  00EA24  B4D8               	btfsc	status,2,c
  2464  00EA26  D01C               	goto	u4880
  2465  00EA28  0E04               	movlw	4
  2466  00EA2A  1822               	xorwf	which_drawer@keypress,w,c
  2467  00EA2C  B4D8               	btfsc	status,2,c
  2468  00EA2E  D018               	goto	u4880
  2469  00EA30  0E05               	movlw	5
  2470  00EA32  1822               	xorwf	which_drawer@keypress,w,c
  2471  00EA34  B4D8               	btfsc	status,2,c
  2472  00EA36  D014               	goto	u4880
  2473  00EA38  0E06               	movlw	6
  2474  00EA3A  1822               	xorwf	which_drawer@keypress,w,c
  2475  00EA3C  B4D8               	btfsc	status,2,c
  2476  00EA3E  D010               	goto	u4880
  2477  00EA40  0E08               	movlw	8
  2478  00EA42  1822               	xorwf	which_drawer@keypress,w,c
  2479  00EA44  B4D8               	btfsc	status,2,c
  2480  00EA46  D00C               	goto	u4880
  2481  00EA48  0E09               	movlw	9
  2482  00EA4A  1822               	xorwf	which_drawer@keypress,w,c
  2483  00EA4C  B4D8               	btfsc	status,2,c
  2484  00EA4E  D008               	goto	u4880
  2485  00EA50  0E0A               	movlw	10
  2486  00EA52  1822               	xorwf	which_drawer@keypress,w,c
  2487  00EA54  B4D8               	btfsc	status,2,c
  2488  00EA56  D004               	goto	u4880
  2489  00EA58  0E0D               	movlw	13
  2490  00EA5A  1822               	xorwf	which_drawer@keypress,w,c
  2491  00EA5C  A4D8               	btfss	status,2,c
  2492  00EA5E  D06A               	goto	l389
  2493  00EA60                     u4880:
  2494                           
  2495                           ;standbyMode.c: 767: if (count == 0){
  2496  00EA60  5020               	movf	which_drawer@count,w,c
  2497  00EA62  1021               	iorwf	which_drawer@count+1,w,c
  2498  00EA64  A4D8               	btfss	status,2,c
  2499  00EA66  D046               	goto	l392
  2500                           
  2501                           ;standbyMode.c: 768: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  2502  00EA68  0422               	decf	which_drawer@keypress,w,c
  2503  00EA6A  B4D8               	btfsc	status,2,c
  2504  00EA6C  D01C               	goto	u4970
  2505  00EA6E  0E02               	movlw	2
  2506  00EA70  1822               	xorwf	which_drawer@keypress,w,c
  2507  00EA72  B4D8               	btfsc	status,2,c
  2508  00EA74  D018               	goto	u4970
  2509  00EA76  0E04               	movlw	4
  2510  00EA78  1822               	xorwf	which_drawer@keypress,w,c
  2511  00EA7A  B4D8               	btfsc	status,2,c
  2512  00EA7C  D014               	goto	u4970
  2513  00EA7E  0E05               	movlw	5
  2514  00EA80  1822               	xorwf	which_drawer@keypress,w,c
  2515  00EA82  B4D8               	btfsc	status,2,c
  2516  00EA84  D010               	goto	u4970
  2517  00EA86  0E06               	movlw	6
  2518  00EA88  1822               	xorwf	which_drawer@keypress,w,c
  2519  00EA8A  B4D8               	btfsc	status,2,c
  2520  00EA8C  D00C               	goto	u4970
  2521  00EA8E  0E08               	movlw	8
  2522  00EA90  1822               	xorwf	which_drawer@keypress,w,c
  2523  00EA92  B4D8               	btfsc	status,2,c
  2524  00EA94  D008               	goto	u4970
  2525  00EA96  0E09               	movlw	9
  2526  00EA98  1822               	xorwf	which_drawer@keypress,w,c
  2527  00EA9A  B4D8               	btfsc	status,2,c
  2528  00EA9C  D004               	goto	u4970
  2529  00EA9E  0E0A               	movlw	10
  2530  00EAA0  1822               	xorwf	which_drawer@keypress,w,c
  2531  00EAA2  A4D8               	btfss	status,2,c
  2532  00EAA4  D011               	goto	l393
  2533  00EAA6                     u4970:
  2534                           
  2535                           ;standbyMode.c: 769: count += 2;
  2536  00EAA6  0E02               	movlw	2
  2537  00EAA8  2620               	addwf	which_drawer@count,f,c
  2538  00EAAA  0E00               	movlw	0
  2539  00EAAC  2221               	addwfc	which_drawer@count+1,f,c
  2540                           
  2541                           ;standbyMode.c: 770: putch(input[keypress]);
  2542  00EAAE  5022               	movf	which_drawer@keypress,w,c
  2543  00EAB0  0D01               	mullw	1
  2544  00EAB2  0EC4               	movlw	low _input
  2545  00EAB4  24F3               	addwf	prodl,w,c
  2546  00EAB6  6EF6               	movwf	tblptrl,c
  2547  00EAB8  0EFD               	movlw	high _input
  2548  00EABA  20F4               	addwfc	prodh,w,c
  2549  00EABC  6EF7               	movwf	tblptrh,c
  2550  00EABE                     	if	0	;There are less than 3 active tblptr bytes
  2551  00EABE                     	endif
  2552  00EABE  0008               	tblrd		*
  2553  00EAC0  50F5               	movf	tablat,w,c
  2554  00EAC2  ECC1  F071         	call	_putch
  2555  00EAC6  D034               	goto	l403
  2556  00EAC8                     l393:
  2557                           
  2558                           ;standbyMode.c: 773: else if (keypress == 0){
  2559  00EAC8  5022               	movf	which_drawer@keypress,w,c
  2560  00EACA  A4D8               	btfss	status,2,c
  2561  00EACC  D797               	goto	l379
  2562                           
  2563                           ;standbyMode.c: 774: putch(input[keypress]);
  2564  00EACE  5022               	movf	which_drawer@keypress,w,c
  2565  00EAD0  0D01               	mullw	1
  2566  00EAD2  0EC4               	movlw	low _input
  2567  00EAD4  24F3               	addwf	prodl,w,c
  2568  00EAD6  6EF6               	movwf	tblptrl,c
  2569  00EAD8  0EFD               	movlw	high _input
  2570  00EADA  20F4               	addwfc	prodh,w,c
  2571  00EADC  6EF7               	movwf	tblptrh,c
  2572  00EADE                     	if	0	;There are less than 3 active tblptr bytes
  2573  00EADE                     	endif
  2574  00EADE  0008               	tblrd		*
  2575  00EAE0  50F5               	movf	tablat,w,c
  2576  00EAE2  ECC1  F071         	call	_putch
  2577                           
  2578                           ;standbyMode.c: 775: count += 1;
  2579  00EAE6  4A20               	infsnz	which_drawer@count,f,c
  2580  00EAE8  2A21               	incf	which_drawer@count+1,f,c
  2581  00EAEA  D020               	goto	u5020
  2582  00EAEC                     L4:
  2583  00EAEC  261E               	addwf	which_drawer@sum,f,c
  2584  00EAEE  0E00               	movlw	0
  2585  00EAF0  221F               	addwfc	which_drawer@sum+1,f,c
  2586                           
  2587                           ;standbyMode.c: 777: }
  2588                           ;standbyMode.c: 778: }
  2589  00EAF2  D784               	goto	l379
  2590  00EAF4                     l392:
  2591                           
  2592                           ;standbyMode.c: 779: else if (count == 1){
  2593  00EAF4  0420               	decf	which_drawer@count,w,c
  2594  00EAF6  1021               	iorwf	which_drawer@count+1,w,c
  2595  00EAF8  A4D8               	btfss	status,2,c
  2596  00EAFA  D780               	goto	l379
  2597                           
  2598                           ;standbyMode.c: 780: if (keypress < 8 || keypress == 13){
  2599  00EAFC  0E07               	movlw	7
  2600  00EAFE  6422               	cpfsgt	which_drawer@keypress,c
  2601  00EB00  D004               	goto	u5010
  2602  00EB02  0E0D               	movlw	13
  2603  00EB04  1822               	xorwf	which_drawer@keypress,w,c
  2604  00EB06  A4D8               	btfss	status,2,c
  2605  00EB08  D779               	goto	l379
  2606  00EB0A                     u5010:
  2607                           
  2608                           ;standbyMode.c: 781: putch(input[keypress]);
  2609  00EB0A  5022               	movf	which_drawer@keypress,w,c
  2610  00EB0C  0D01               	mullw	1
  2611  00EB0E  0EC4               	movlw	low _input
  2612  00EB10  24F3               	addwf	prodl,w,c
  2613  00EB12  6EF6               	movwf	tblptrl,c
  2614  00EB14  0EFD               	movlw	high _input
  2615  00EB16  20F4               	addwfc	prodh,w,c
  2616  00EB18  6EF7               	movwf	tblptrh,c
  2617  00EB1A                     	if	0	;There are less than 3 active tblptr bytes
  2618  00EB1A                     	endif
  2619  00EB1A  0008               	tblrd		*
  2620  00EB1C  50F5               	movf	tablat,w,c
  2621  00EB1E  ECC1  F071         	call	_putch
  2622                           
  2623                           ;standbyMode.c: 782: count += 1;
  2624  00EB22  4A20               	infsnz	which_drawer@count,f,c
  2625  00EB24  2A21               	incf	which_drawer@count+1,f,c
  2626                           
  2627                           ;standbyMode.c: 783: if(keypress == 0){
  2628  00EB26  5022               	movf	which_drawer@keypress,w,c
  2629  00EB28  A4D8               	btfss	status,2,c
  2630  00EB2A  D002               	goto	l403
  2631  00EB2C                     u5020:
  2632                           
  2633                           ;standbyMode.c: 784: sum += 20;
  2634  00EB2C  0E14               	movlw	20
  2635  00EB2E  D7DE               	goto	L4
  2636  00EB30                     l403:
  2637                           
  2638                           ;standbyMode.c: 786: else {
  2639                           ;standbyMode.c: 787: sum += keypress;
  2640  00EB30  5022               	movf	which_drawer@keypress,w,c
  2641  00EB32  D7DC               	goto	L4
  2642  00EB34                     l389:
  2643                           
  2644                           ;standbyMode.c: 792: else if (keypress == 12){
  2645  00EB34  0E0C               	movlw	12
  2646  00EB36  1822               	xorwf	which_drawer@keypress,w,c
  2647  00EB38  A4D8               	btfss	status,2,c
  2648  00EB3A  D760               	goto	l379
  2649                           
  2650                           ;standbyMode.c: 793: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2651  00EB3C  0E01               	movlw	1
  2652  00EB3E  ECB7  F071         	call	_lcdInst
  2653  00EB42  0EC3               	movlw	195
  2654  00EB44  6E1B               	movwf	??_which_drawer& (0+255),c
  2655  00EB46  0ECD               	movlw	205
  2656  00EB48                     u5597:
  2657  00EB48  2EE8               	decfsz	wreg,f,c
  2658  00EB4A  D7FE               	bra	u5597
  2659  00EB4C  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2660  00EB4E  D7FC               	bra	u5597
  2661  00EB50  F000               	nop	
  2662                           
  2663                           ;standbyMode.c: 794: printf("Drawer number:");
  2664  00EB52  0E0A               	movlw	low STR_27
  2665  00EB54  6E0D               	movwf	printf@f,c
  2666  00EB56  0EFF               	movlw	high STR_27
  2667  00EB58  6E0E               	movwf	printf@f+1,c
  2668  00EB5A  EC71  F073         	call	_printf	;wreg free
  2669                           
  2670                           ;standbyMode.c: 795: lcdInst(0xC0);;
  2671  00EB5E  0EC0               	movlw	192
  2672  00EB60  ECB7  F071         	call	_lcdInst
  2673  00EB64  D743               	goto	L44
  2674  00EB66                     l387:
  2675                           
  2676                           ;standbyMode.c: 798: }
  2677                           ;standbyMode.c: 799: }
  2678                           ;standbyMode.c: 800: unsigned int rand = decode_drawer(sum);
  2679  00EB66  C01E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  2680  00EB6A  C01F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  2681  00EB6E  EC00  F073         	call	_decode_drawer	;wreg free
  2682  00EB72  C001  F01C         	movff	?_decode_drawer,which_drawer@rand
  2683  00EB76  C002  F01D         	movff	?_decode_drawer+1,which_drawer@rand+1
  2684                           
  2685                           ;standbyMode.c: 801: return rand;
  2686  00EB7A  C01C  F019         	movff	which_drawer@rand,?_which_drawer
  2687  00EB7E  C01D  F01A         	movff	which_drawer@rand+1,?_which_drawer+1
  2688  00EB82  0012               	return	
  2689  00EB84                     __end_of_which_drawer:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _decode_drawer *****************
  2706 ;; Defined at:
  2707 ;;		line 671 in file "standbyMode.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  drawer          2    0[COMRAM] unsigned int 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  returnValue     2    4[COMRAM] unsigned int 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  2    0[COMRAM] unsigned int 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;Total ram usage:        6 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_which_drawer
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text3
  2735  00E600                     __ptext3:
  2736                           	opt stack 0
  2737  00E600                     _decode_drawer:
  2738                           	opt stack 28
  2739                           
  2740                           ;standbyMode.c: 672: unsigned int returnValue;
  2741                           ;standbyMode.c: 674: switch(drawer){
  2742                           
  2743                           ;incstack = 0
  2744  00E600  D03A               	goto	l360
  2745  00E602                     
  2746                           ;standbyMode.c: 677: returnValue = 1;
  2747  00E602  0E00               	movlw	0
  2748  00E604  6E06               	movwf	decode_drawer@returnValue+1,c
  2749  00E606  0E01               	movlw	1
  2750  00E608  D02F               	goto	L16
  2751  00E60A                     
  2752                           ;standbyMode.c: 682: returnValue = 2;
  2753  00E60A  0E00               	movlw	0
  2754  00E60C  6E06               	movwf	decode_drawer@returnValue+1,c
  2755  00E60E  0E02               	movlw	2
  2756  00E610  D02B               	goto	L16
  2757  00E612                     
  2758                           ;standbyMode.c: 687: returnValue = 3;
  2759  00E612  0E00               	movlw	0
  2760  00E614  6E06               	movwf	decode_drawer@returnValue+1,c
  2761  00E616  0E03               	movlw	3
  2762  00E618  D027               	goto	L16
  2763  00E61A                     
  2764                           ;standbyMode.c: 692: returnValue = 7;
  2765  00E61A  0E00               	movlw	0
  2766  00E61C  6E06               	movwf	decode_drawer@returnValue+1,c
  2767  00E61E  0E07               	movlw	7
  2768  00E620  D023               	goto	L16
  2769  00E622                     
  2770                           ;standbyMode.c: 697: returnValue = 8;
  2771  00E622  0E00               	movlw	0
  2772  00E624  6E06               	movwf	decode_drawer@returnValue+1,c
  2773  00E626  0E08               	movlw	8
  2774  00E628  D01F               	goto	L16
  2775  00E62A                     
  2776                           ;standbyMode.c: 702: returnValue = 9;
  2777  00E62A  0E00               	movlw	0
  2778  00E62C  6E06               	movwf	decode_drawer@returnValue+1,c
  2779  00E62E  0E09               	movlw	9
  2780  00E630  D01B               	goto	L16
  2781  00E632                     
  2782                           ;standbyMode.c: 707: returnValue = 10;
  2783  00E632  0E00               	movlw	0
  2784  00E634  6E06               	movwf	decode_drawer@returnValue+1,c
  2785  00E636  0E0A               	movlw	10
  2786  00E638  D017               	goto	L16
  2787  00E63A                     
  2788                           ;standbyMode.c: 712: returnValue = 11;
  2789  00E63A  0E00               	movlw	0
  2790  00E63C  6E06               	movwf	decode_drawer@returnValue+1,c
  2791  00E63E  0E0B               	movlw	11
  2792  00E640  D013               	goto	L16
  2793  00E642                     
  2794                           ;standbyMode.c: 717: returnValue = 12;
  2795  00E642  0E00               	movlw	0
  2796  00E644  6E06               	movwf	decode_drawer@returnValue+1,c
  2797  00E646  0E0C               	movlw	12
  2798  00E648  D00F               	goto	L16
  2799  00E64A                     
  2800                           ;standbyMode.c: 722: returnValue = 13;
  2801  00E64A  0E00               	movlw	0
  2802  00E64C  6E06               	movwf	decode_drawer@returnValue+1,c
  2803  00E64E  0E0D               	movlw	13
  2804  00E650  D00B               	goto	L16
  2805  00E652                     
  2806                           ;standbyMode.c: 727: returnValue = 14;
  2807  00E652  0E00               	movlw	0
  2808  00E654  6E06               	movwf	decode_drawer@returnValue+1,c
  2809  00E656  0E0E               	movlw	14
  2810  00E658  D007               	goto	L16
  2811  00E65A                     
  2812                           ;standbyMode.c: 732: returnValue = 15;
  2813  00E65A  0E00               	movlw	0
  2814  00E65C  6E06               	movwf	decode_drawer@returnValue+1,c
  2815  00E65E  0E0F               	movlw	15
  2816  00E660  D003               	goto	L16
  2817  00E662                     
  2818                           ;standbyMode.c: 737: returnValue = 16;
  2819  00E662  0E00               	movlw	0
  2820  00E664  6E06               	movwf	decode_drawer@returnValue+1,c
  2821  00E666  0E10               	movlw	16
  2822  00E668                     L16:
  2823  00E668  6E05               	movwf	decode_drawer@returnValue,c
  2824                           
  2825                           ;standbyMode.c: 738: break;
  2826  00E66A  D036               	goto	l362
  2827  00E66C                     l375:
  2828                           
  2829                           ;standbyMode.c: 741: returnValue = drawer;
  2830  00E66C  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  2831  00E670  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  2832                           
  2833                           ;standbyMode.c: 743: }
  2834                           
  2835                           ;standbyMode.c: 742: break;
  2836  00E674  D031               	goto	l362
  2837  00E676                     l360:
  2838  00E676  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  2839  00E67A  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  2840                           
  2841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2842                           ; Switch size 1, requested type "space"
  2843                           ; Number of cases is 1, Range of values is 0 to 0
  2844                           ; switch strategies available:
  2845                           ; Name         Instructions Cycles
  2846                           ; simple_byte            4     3 (average)
  2847                           ;	Chosen strategy is simple_byte
  2848  00E67E  5004               	movf	??_decode_drawer+1,w,c
  2849  00E680  0A00               	xorlw	0	; case 0
  2850  00E682  A4D8               	btfss	status,2,c
  2851  00E684  D7F3               	goto	l375
  2852                           
  2853                           ; Switch size 1, requested type "space"
  2854                           ; Number of cases is 13, Range of values is 1 to 40
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte           40    21 (average)
  2858                           ;	Chosen strategy is simple_byte
  2859  00E686  5003               	movf	??_decode_drawer,w,c
  2860  00E688  0A01               	xorlw	1	; case 1
  2861  00E68A  B4D8               	btfsc	status,2,c
  2862  00E68C  D7BE               	goto	l363
  2863  00E68E  0A03               	xorlw	3	; case 2
  2864  00E690  B4D8               	btfsc	status,2,c
  2865  00E692  D7BF               	goto	l364
  2866  00E694  0A0A               	xorlw	10	; case 8
  2867  00E696  B4D8               	btfsc	status,2,c
  2868  00E698  D7C0               	goto	l365
  2869  00E69A  0A01               	xorlw	1	; case 9
  2870  00E69C  B4D8               	btfsc	status,2,c
  2871  00E69E  D7C1               	goto	l366
  2872  00E6A0  0A03               	xorlw	3	; case 10
  2873  00E6A2  B4D8               	btfsc	status,2,c
  2874  00E6A4  D7C2               	goto	l367
  2875  00E6A6  0A1E               	xorlw	30	; case 20
  2876  00E6A8  B4D8               	btfsc	status,2,c
  2877  00E6AA  D7AB               	goto	l361
  2878  00E6AC  0A01               	xorlw	1	; case 21
  2879  00E6AE  B4D8               	btfsc	status,2,c
  2880  00E6B0  D7C8               	goto	l370
  2881  00E6B2  0A03               	xorlw	3	; case 22
  2882  00E6B4  B4D8               	btfsc	status,2,c
  2883  00E6B6  D7C9               	goto	l371
  2884  00E6B8  0A0E               	xorlw	14	; case 24
  2885  00E6BA  B4D8               	btfsc	status,2,c
  2886  00E6BC  D7CA               	goto	l372
  2887  00E6BE  0A01               	xorlw	1	; case 25
  2888  00E6C0  B4D8               	btfsc	status,2,c
  2889  00E6C2  D7CB               	goto	l373
  2890  00E6C4  0A03               	xorlw	3	; case 26
  2891  00E6C6  B4D8               	btfsc	status,2,c
  2892  00E6C8  D7CC               	goto	l374
  2893  00E6CA  0A3B               	xorlw	59	; case 33
  2894  00E6CC  B4D8               	btfsc	status,2,c
  2895  00E6CE  D7B1               	goto	l368
  2896  00E6D0  0A09               	xorlw	9	; case 40
  2897  00E6D2  B4D8               	btfsc	status,2,c
  2898  00E6D4  D7B2               	goto	l369
  2899  00E6D6  D7CA               	goto	l375
  2900  00E6D8                     l362:
  2901                           
  2902                           ;standbyMode.c: 744: return returnValue;
  2903  00E6D8  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  2904  00E6DC  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  2905  00E6E0  0012               	return		;funcret
  2906  00E6E2                     __end_of_decode_drawer:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           postinc2	equ	0xFDE
  2917                           postdec2	equ	0xFDD
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function _viewLogs *****************
  2923 ;; Defined at:
  2924 ;;		line 271 in file "standbyMode.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  keypress2       1   29[COMRAM] unsigned char 
  2929 ;;  keypress3       1   28[COMRAM] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  2   24[COMRAM] unsigned int 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        6 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		_lcdInst
  2948 ;;		_printf
  2949 ;;		_putch
  2950 ;; This function is called by:
  2951 ;;		_standbyMode
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text4
  2956  00EEB0                     __ptext4:
  2957                           	opt stack 0
  2958  00EEB0                     _viewLogs:
  2959                           	opt stack 26
  2960                           
  2961                           ;standbyMode.c: 272: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2962                           
  2963                           ;incstack = 0
  2964  00EEB0  0E01               	movlw	1
  2965  00EEB2  ECB7  F071         	call	_lcdInst
  2966  00EEB6  0EC3               	movlw	195
  2967  00EEB8  6E1B               	movwf	??_viewLogs& (0+255),c
  2968  00EEBA  0ECD               	movlw	205
  2969  00EEBC                     u5607:
  2970  00EEBC  2EE8               	decfsz	wreg,f,c
  2971  00EEBE  D7FE               	bra	u5607
  2972  00EEC0  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  2973  00EEC2  D7FC               	bra	u5607
  2974  00EEC4  F000               	nop	
  2975                           
  2976                           ;standbyMode.c: 273: printf("5 previous logs");
  2977  00EEC6  0EEB               	movlw	low STR_1
  2978  00EEC8  6E0D               	movwf	printf@f,c
  2979  00EECA  0EFE               	movlw	high STR_1
  2980  00EECC  6E0E               	movwf	printf@f+1,c
  2981  00EECE  EC71  F073         	call	_printf	;wreg free
  2982                           
  2983                           ;standbyMode.c: 274: lcdInst(0xC0);;
  2984  00EED2  0EC0               	movlw	192
  2985  00EED4  ECB7  F071         	call	_lcdInst
  2986                           
  2987                           ;standbyMode.c: 275: printf("available.");
  2988  00EED8  0E91               	movlw	low STR_2
  2989  00EEDA  6E0D               	movwf	printf@f,c
  2990  00EEDC  0EFF               	movlw	high STR_2
  2991  00EEDE  6E0E               	movwf	printf@f+1,c
  2992  00EEE0  EC71  F073         	call	_printf	;wreg free
  2993                           
  2994                           ;standbyMode.c: 276: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2995  00EEE4  0E66               	movlw	102
  2996  00EEE6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  2997  00EEE8  0E76               	movlw	118
  2998  00EEEA  6E1B               	movwf	??_viewLogs& (0+255),c
  2999  00EEEC  0EC1               	movlw	193
  3000  00EEEE                     u5617:
  3001  00EEEE  2EE8               	decfsz	wreg,f,c
  3002  00EEF0  D7FE               	bra	u5617
  3003  00EEF2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3004  00EEF4  D7FC               	bra	u5617
  3005  00EEF6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3006  00EEF8  D7FA               	bra	u5617
  3007  00EEFA  F000               	nop	
  3008                           
  3009                           ;standbyMode.c: 277: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3010  00EEFC  0E01               	movlw	1
  3011  00EEFE  ECB7  F071         	call	_lcdInst
  3012  00EF02  0EC3               	movlw	195
  3013  00EF04  6E1B               	movwf	??_viewLogs& (0+255),c
  3014  00EF06  0ECD               	movlw	205
  3015  00EF08                     u5627:
  3016  00EF08  2EE8               	decfsz	wreg,f,c
  3017  00EF0A  D7FE               	bra	u5627
  3018  00EF0C  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3019  00EF0E  D7FC               	bra	u5627
  3020  00EF10  F000               	nop	
  3021                           
  3022                           ;standbyMode.c: 278: printf("Please input log");
  3023  00EF12  0E19               	movlw	low STR_3
  3024  00EF14  6E0D               	movwf	printf@f,c
  3025  00EF16  0EFE               	movlw	high STR_3
  3026  00EF18  6E0E               	movwf	printf@f+1,c
  3027  00EF1A  EC71  F073         	call	_printf	;wreg free
  3028                           
  3029                           ;standbyMode.c: 279: lcdInst(0xC0);;
  3030  00EF1E  0EC0               	movlw	192
  3031  00EF20  ECB7  F071         	call	_lcdInst
  3032                           
  3033                           ;standbyMode.c: 280: printf("number: ");
  3034  00EF24  0EC7               	movlw	low STR_4
  3035  00EF26  6E0D               	movwf	printf@f,c
  3036  00EF28  0EFF               	movlw	high STR_4
  3037  00EF2A  6E0E               	movwf	printf@f+1,c
  3038  00EF2C  EC71  F073         	call	_printf	;wreg free
  3039  00EF30                     
  3040                           ;standbyMode.c: 283: while(PORTBbits.RB1 == 0){ continue; }
  3041  00EF30  A281               	btfss	3969,1,c	;volatile
  3042  00EF32  D7FE               	goto	l215
  3043                           
  3044                           ;standbyMode.c: 284: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3045  00EF34  3881               	swapf	3969,w,c	;volatile
  3046  00EF36  0B0F               	andlw	15
  3047  00EF38  0B0F               	andlw	15
  3048  00EF3A  6E1E               	movwf	viewLogs@keypress2,c
  3049  00EF3C  B281               	btfsc	3969,1,c	;volatile
  3050  00EF3E  D7FE               	goto	l220
  3051                           
  3052                           ;standbyMode.c: 287: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4 || keypress2 == 5){
  3053  00EF40  501E               	movf	viewLogs@keypress2,w,c
  3054  00EF42  B4D8               	btfsc	status,2,c
  3055  00EF44  D00F               	goto	u3770
  3056  00EF46  041E               	decf	viewLogs@keypress2,w,c
  3057  00EF48  B4D8               	btfsc	status,2,c
  3058  00EF4A  D00C               	goto	u3770
  3059  00EF4C  0E02               	movlw	2
  3060  00EF4E  181E               	xorwf	viewLogs@keypress2,w,c
  3061  00EF50  B4D8               	btfsc	status,2,c
  3062  00EF52  D008               	goto	u3770
  3063  00EF54  0E04               	movlw	4
  3064  00EF56  181E               	xorwf	viewLogs@keypress2,w,c
  3065  00EF58  B4D8               	btfsc	status,2,c
  3066  00EF5A  D004               	goto	u3770
  3067  00EF5C  0E05               	movlw	5
  3068  00EF5E  181E               	xorwf	viewLogs@keypress2,w,c
  3069  00EF60  A4D8               	btfss	status,2,c
  3070  00EF62  D7E6               	goto	l215
  3071  00EF64                     u3770:
  3072                           
  3073                           ;standbyMode.c: 288: putch(keys[keypress2]);
  3074  00EF64  501E               	movf	viewLogs@keypress2,w,c
  3075  00EF66  0D01               	mullw	1
  3076  00EF68  0EB3               	movlw	low _keys
  3077  00EF6A  24F3               	addwf	prodl,w,c
  3078  00EF6C  6EF6               	movwf	tblptrl,c
  3079  00EF6E  0EFD               	movlw	high _keys
  3080  00EF70  20F4               	addwfc	prodh,w,c
  3081  00EF72  6EF7               	movwf	tblptrh,c
  3082  00EF74                     	if	0	;There are less than 3 active tblptr bytes
  3083  00EF74                     	endif
  3084  00EF74  0008               	tblrd		*
  3085  00EF76  50F5               	movf	tablat,w,c
  3086  00EF78  ECC1  F071         	call	_putch
  3087                           
  3088                           ;standbyMode.c: 289: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3089  00EF7C  0E33               	movlw	51
  3090  00EF7E  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3091  00EF80  0EBB               	movlw	187
  3092  00EF82  6E1B               	movwf	??_viewLogs& (0+255),c
  3093  00EF84  0EE0               	movlw	224
  3094  00EF86                     u5637:
  3095  00EF86  2EE8               	decfsz	wreg,f,c
  3096  00EF88  D7FE               	bra	u5637
  3097  00EF8A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3098  00EF8C  D7FC               	bra	u5637
  3099  00EF8E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3100  00EF90  D7FA               	bra	u5637
  3101                           
  3102                           ;standbyMode.c: 291: }
  3103                           ;standbyMode.c: 292: }
  3104                           ;standbyMode.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3105                           
  3106                           ;standbyMode.c: 290: break;
  3107  00EF92  0E01               	movlw	1
  3108  00EF94  ECB7  F071         	call	_lcdInst
  3109  00EF98  0EC3               	movlw	195
  3110  00EF9A  6E1B               	movwf	??_viewLogs& (0+255),c
  3111  00EF9C  0ECD               	movlw	205
  3112  00EF9E                     u5647:
  3113  00EF9E  2EE8               	decfsz	wreg,f,c
  3114  00EFA0  D7FE               	bra	u5647
  3115  00EFA2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3116  00EFA4  D7FC               	bra	u5647
  3117  00EFA6  F000               	nop	
  3118                           
  3119                           ;standbyMode.c: 295: printf("Great!");
  3120  00EFA8  0EE9               	movlw	low STR_5
  3121  00EFAA  6E0D               	movwf	printf@f,c
  3122  00EFAC  0EFF               	movlw	high STR_5
  3123  00EFAE  6E0E               	movwf	printf@f+1,c
  3124  00EFB0  EC71  F073         	call	_printf	;wreg free
  3125                           
  3126                           ;standbyMode.c: 296: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3127  00EFB4  0E33               	movlw	51
  3128  00EFB6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3129  00EFB8  0EBB               	movlw	187
  3130  00EFBA  6E1B               	movwf	??_viewLogs& (0+255),c
  3131  00EFBC  0EE0               	movlw	224
  3132  00EFBE                     u5657:
  3133  00EFBE  2EE8               	decfsz	wreg,f,c
  3134  00EFC0  D7FE               	bra	u5657
  3135  00EFC2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3136  00EFC4  D7FC               	bra	u5657
  3137  00EFC6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3138  00EFC8  D7FA               	bra	u5657
  3139                           
  3140                           ;standbyMode.c: 297: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3141  00EFCA  0E01               	movlw	1
  3142  00EFCC  ECB7  F071         	call	_lcdInst
  3143  00EFD0  0EC3               	movlw	195
  3144  00EFD2  6E1B               	movwf	??_viewLogs& (0+255),c
  3145  00EFD4  0ECD               	movlw	205
  3146  00EFD6                     u5667:
  3147  00EFD6  2EE8               	decfsz	wreg,f,c
  3148  00EFD8  D7FE               	bra	u5667
  3149  00EFDA  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3150  00EFDC  D7FC               	bra	u5667
  3151  00EFDE  F000               	nop	
  3152                           
  3153                           ;standbyMode.c: 298: printf("Press any key to");
  3154  00EFE0  0E2A               	movlw	low STR_6
  3155  00EFE2  6E0D               	movwf	printf@f,c
  3156  00EFE4  0EFE               	movlw	high STR_6
  3157  00EFE6  6E0E               	movwf	printf@f+1,c
  3158  00EFE8  EC71  F073         	call	_printf	;wreg free
  3159                           
  3160                           ;standbyMode.c: 299: lcdInst(0xC0);;
  3161  00EFEC  0EC0               	movlw	192
  3162  00EFEE  ECB7  F071         	call	_lcdInst
  3163                           
  3164                           ;standbyMode.c: 300: printf("move on.");
  3165  00EFF2  0ED0               	movlw	low STR_7
  3166  00EFF4  6E0D               	movwf	printf@f,c
  3167  00EFF6  0EFF               	movlw	high STR_7
  3168  00EFF8  6E0E               	movwf	printf@f+1,c
  3169  00EFFA  EC71  F073         	call	_printf	;wreg free
  3170                           
  3171                           ;standbyMode.c: 301: _delay((unsigned long)((500)*(40000000/4000.0)));
  3172  00EFFE  0E1A               	movlw	26
  3173  00F000  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3174  00F002  0E5E               	movlw	94
  3175  00F004  6E1B               	movwf	??_viewLogs& (0+255),c
  3176  00F006  0E6E               	movlw	110
  3177  00F008                     u5677:
  3178  00F008  2EE8               	decfsz	wreg,f,c
  3179  00F00A  D7FE               	bra	u5677
  3180  00F00C  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3181  00F00E  D7FC               	bra	u5677
  3182  00F010  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3183  00F012  D7FA               	bra	u5677
  3184  00F014  D000               	nop2	
  3185  00F016                     
  3186                           ;standbyMode.c: 304: continue;
  3187  00F016  A281               	btfss	3969,1,c	;volatile
  3188  00F018  D7FE               	goto	l228
  3189                           
  3190                           ;standbyMode.c: 305: }
  3191                           ;standbyMode.c: 307: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3192  00F01A  0E01               	movlw	1
  3193  00F01C  ECB7  F071         	call	_lcdInst
  3194  00F020  0EC3               	movlw	195
  3195  00F022  6E1B               	movwf	??_viewLogs& (0+255),c
  3196  00F024  0ECD               	movlw	205
  3197  00F026                     u5687:
  3198  00F026  2EE8               	decfsz	wreg,f,c
  3199  00F028  D7FE               	bra	u5687
  3200  00F02A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3201  00F02C  D7FC               	bra	u5687
  3202  00F02E  F000               	nop	
  3203                           
  3204                           ;standbyMode.c: 308: printf("Operation time:");
  3205  00F030  0E7B               	movlw	low STR_8
  3206  00F032  6E0D               	movwf	printf@f,c
  3207  00F034  0EFE               	movlw	high STR_8
  3208  00F036  6E0E               	movwf	printf@f+1,c
  3209  00F038  EC71  F073         	call	_printf	;wreg free
  3210                           
  3211                           ;standbyMode.c: 309: lcdInst(0xC0);;
  3212  00F03C  0EC0               	movlw	192
  3213  00F03E  ECB7  F071         	call	_lcdInst
  3214                           
  3215                           ;standbyMode.c: 310: printf("2:39");
  3216  00F042  0EF6               	movlw	low STR_9
  3217  00F044  6E0D               	movwf	printf@f,c
  3218  00F046  0EFF               	movlw	high STR_9
  3219  00F048  6E0E               	movwf	printf@f+1,c
  3220  00F04A  EC71  F073         	call	_printf	;wreg free
  3221                           
  3222                           ;standbyMode.c: 311: _delay((unsigned long)((500)*(40000000/4000.0)));
  3223  00F04E  0E1A               	movlw	26
  3224  00F050  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3225  00F052  0E5E               	movlw	94
  3226  00F054  6E1B               	movwf	??_viewLogs& (0+255),c
  3227  00F056  0E6E               	movlw	110
  3228  00F058                     u5697:
  3229  00F058  2EE8               	decfsz	wreg,f,c
  3230  00F05A  D7FE               	bra	u5697
  3231  00F05C  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3232  00F05E  D7FC               	bra	u5697
  3233  00F060  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3234  00F062  D7FA               	bra	u5697
  3235  00F064  D000               	nop2	
  3236  00F066                     
  3237                           ;standbyMode.c: 314: continue;
  3238  00F066  A281               	btfss	3969,1,c	;volatile
  3239  00F068  D7FE               	goto	l231
  3240                           
  3241                           ;standbyMode.c: 315: }
  3242                           ;standbyMode.c: 317: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3243  00F06A  0E01               	movlw	1
  3244  00F06C  ECB7  F071         	call	_lcdInst
  3245  00F070  0EC3               	movlw	195
  3246  00F072  6E1B               	movwf	??_viewLogs& (0+255),c
  3247  00F074  0ECD               	movlw	205
  3248  00F076                     u5707:
  3249  00F076  2EE8               	decfsz	wreg,f,c
  3250  00F078  D7FE               	bra	u5707
  3251  00F07A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3252  00F07C  D7FC               	bra	u5707
  3253  00F07E  F000               	nop	
  3254                           
  3255                           ;standbyMode.c: 318: printf("Marked drawers:");
  3256  00F080  0E8B               	movlw	low STR_10
  3257  00F082  6E0D               	movwf	printf@f,c
  3258  00F084  0EFE               	movlw	high STR_10
  3259  00F086  6E0E               	movwf	printf@f+1,c
  3260  00F088  EC71  F073         	call	_printf	;wreg free
  3261                           
  3262                           ;standbyMode.c: 319: lcdInst(0xC0);;
  3263  00F08C  0EC0               	movlw	192
  3264  00F08E  ECB7  F071         	call	_lcdInst
  3265                           
  3266                           ;standbyMode.c: 320: printf("1, 13");
  3267  00F092  0EF0               	movlw	low STR_11
  3268  00F094  6E0D               	movwf	printf@f,c
  3269  00F096  0EFF               	movlw	high STR_11
  3270  00F098  6E0E               	movwf	printf@f+1,c
  3271  00F09A  EC71  F073         	call	_printf	;wreg free
  3272                           
  3273                           ;standbyMode.c: 321: _delay((unsigned long)((500)*(40000000/4000.0)));
  3274  00F09E  0E1A               	movlw	26
  3275  00F0A0  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3276  00F0A2  0E5E               	movlw	94
  3277  00F0A4  6E1B               	movwf	??_viewLogs& (0+255),c
  3278  00F0A6  0E6E               	movlw	110
  3279  00F0A8                     u5717:
  3280  00F0A8  2EE8               	decfsz	wreg,f,c
  3281  00F0AA  D7FE               	bra	u5717
  3282  00F0AC  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3283  00F0AE  D7FC               	bra	u5717
  3284  00F0B0  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3285  00F0B2  D7FA               	bra	u5717
  3286  00F0B4  D000               	nop2	
  3287  00F0B6                     
  3288                           ;standbyMode.c: 324: continue;
  3289  00F0B6  A281               	btfss	3969,1,c	;volatile
  3290  00F0B8  D7FE               	goto	l234
  3291                           
  3292                           ;standbyMode.c: 325: }
  3293                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3294  00F0BA  0E01               	movlw	1
  3295  00F0BC  ECB7  F071         	call	_lcdInst
  3296  00F0C0  0EC3               	movlw	195
  3297  00F0C2  6E1B               	movwf	??_viewLogs& (0+255),c
  3298  00F0C4  0ECD               	movlw	205
  3299  00F0C6                     u5727:
  3300  00F0C6  2EE8               	decfsz	wreg,f,c
  3301  00F0C8  D7FE               	bra	u5727
  3302  00F0CA  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3303  00F0CC  D7FC               	bra	u5727
  3304  00F0CE  F000               	nop	
  3305                           
  3306                           ;standbyMode.c: 328: printf("Remaining pieces:");
  3307  00F0D0  0EE5               	movlw	low STR_12
  3308  00F0D2  6E0D               	movwf	printf@f,c
  3309  00F0D4  0EFD               	movlw	high STR_12
  3310  00F0D6  6E0E               	movwf	printf@f+1,c
  3311  00F0D8  EC71  F073         	call	_printf	;wreg free
  3312                           
  3313                           ;standbyMode.c: 329: lcdInst(0xC0);;
  3314  00F0DC  0EC0               	movlw	192
  3315  00F0DE  ECB7  F071         	call	_lcdInst
  3316                           
  3317                           ;standbyMode.c: 330: printf("R:3  F:12  L:10");
  3318  00F0E2  0E5B               	movlw	low STR_13
  3319  00F0E4  6E0D               	movwf	printf@f,c
  3320  00F0E6  0EFE               	movlw	high STR_13
  3321  00F0E8  6E0E               	movwf	printf@f+1,c
  3322  00F0EA  EC71  F073         	call	_printf	;wreg free
  3323                           
  3324                           ;standbyMode.c: 331: _delay((unsigned long)((500)*(40000000/4000.0)));
  3325  00F0EE  0E1A               	movlw	26
  3326  00F0F0  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3327  00F0F2  0E5E               	movlw	94
  3328  00F0F4  6E1B               	movwf	??_viewLogs& (0+255),c
  3329  00F0F6  0E6E               	movlw	110
  3330  00F0F8                     u5737:
  3331  00F0F8  2EE8               	decfsz	wreg,f,c
  3332  00F0FA  D7FE               	bra	u5737
  3333  00F0FC  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3334  00F0FE  D7FC               	bra	u5737
  3335  00F100  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3336  00F102  D7FA               	bra	u5737
  3337  00F104  D000               	nop2	
  3338  00F106                     
  3339                           ;standbyMode.c: 334: continue;
  3340  00F106  A281               	btfss	3969,1,c	;volatile
  3341  00F108  D7FE               	goto	l237
  3342                           
  3343                           ;standbyMode.c: 335: }
  3344                           ;standbyMode.c: 337: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3345  00F10A  0E01               	movlw	1
  3346  00F10C  ECB7  F071         	call	_lcdInst
  3347  00F110  0EC3               	movlw	195
  3348  00F112  6E1B               	movwf	??_viewLogs& (0+255),c
  3349  00F114  0ECD               	movlw	205
  3350  00F116                     u5747:
  3351  00F116  2EE8               	decfsz	wreg,f,c
  3352  00F118  D7FE               	bra	u5747
  3353  00F11A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3354  00F11C  D7FC               	bra	u5747
  3355  00F11E  F000               	nop	
  3356                           
  3357                           ;standbyMode.c: 338: printf("Drawer Summary:");
  3358  00F120  0EAB               	movlw	low STR_14
  3359  00F122  6E0D               	movwf	printf@f,c
  3360  00F124  0EFE               	movlw	high STR_14
  3361  00F126  6E0E               	movwf	printf@f+1,c
  3362  00F128  EC71  F073         	call	_printf	;wreg free
  3363                           
  3364                           ;standbyMode.c: 339: _delay((unsigned long)((500)*(40000000/4000.0)));
  3365  00F12C  0E1A               	movlw	26
  3366  00F12E  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3367  00F130  0E5E               	movlw	94
  3368  00F132  6E1B               	movwf	??_viewLogs& (0+255),c
  3369  00F134  0E6E               	movlw	110
  3370  00F136                     u5757:
  3371  00F136  2EE8               	decfsz	wreg,f,c
  3372  00F138  D7FE               	bra	u5757
  3373  00F13A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3374  00F13C  D7FC               	bra	u5757
  3375  00F13E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3376  00F140  D7FA               	bra	u5757
  3377  00F142  D000               	nop2	
  3378  00F144                     
  3379                           ;standbyMode.c: 342: continue;
  3380  00F144  A281               	btfss	3969,1,c	;volatile
  3381  00F146  D7FE               	goto	l240
  3382                           
  3383                           ;standbyMode.c: 343: }
  3384                           ;standbyMode.c: 345: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3385  00F148  0E01               	movlw	1
  3386  00F14A  ECB7  F071         	call	_lcdInst
  3387  00F14E  0EC3               	movlw	195
  3388  00F150  6E1B               	movwf	??_viewLogs& (0+255),c
  3389  00F152  0ECD               	movlw	205
  3390  00F154                     u5767:
  3391  00F154  2EE8               	decfsz	wreg,f,c
  3392  00F156  D7FE               	bra	u5767
  3393  00F158  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3394  00F15A  D7FC               	bra	u5767
  3395  00F15C  F000               	nop	
  3396                           
  3397                           ;standbyMode.c: 346: printf("Drawer 1: RF12");
  3398  00F15E  0EFB               	movlw	low STR_15
  3399  00F160  6E0D               	movwf	printf@f,c
  3400  00F162  0EFE               	movlw	high STR_15
  3401  00F164  6E0E               	movwf	printf@f+1,c
  3402  00F166  EC71  F073         	call	_printf	;wreg free
  3403                           
  3404                           ;standbyMode.c: 347: lcdInst(0xC0);;
  3405  00F16A  0EC0               	movlw	192
  3406  00F16C  ECB7  F071         	call	_lcdInst
  3407                           
  3408                           ;standbyMode.c: 348: printf("Drawer 2: L1");
  3409  00F170  0E5F               	movlw	low STR_16
  3410  00F172  6E0D               	movwf	printf@f,c
  3411  00F174  0EFF               	movlw	high STR_16
  3412  00F176  6E0E               	movwf	printf@f+1,c
  3413  00F178  EC71  F073         	call	_printf	;wreg free
  3414                           
  3415                           ;standbyMode.c: 349: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3416  00F17C  0E66               	movlw	102
  3417  00F17E  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3418  00F180  0E76               	movlw	118
  3419  00F182  6E1B               	movwf	??_viewLogs& (0+255),c
  3420  00F184  0EC1               	movlw	193
  3421  00F186                     u5777:
  3422  00F186  2EE8               	decfsz	wreg,f,c
  3423  00F188  D7FE               	bra	u5777
  3424  00F18A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3425  00F18C  D7FC               	bra	u5777
  3426  00F18E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3427  00F190  D7FA               	bra	u5777
  3428  00F192  F000               	nop	
  3429                           
  3430                           ;standbyMode.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3431  00F194  0E01               	movlw	1
  3432  00F196  ECB7  F071         	call	_lcdInst
  3433  00F19A  0EC3               	movlw	195
  3434  00F19C  6E1B               	movwf	??_viewLogs& (0+255),c
  3435  00F19E  0ECD               	movlw	205
  3436  00F1A0                     u5787:
  3437  00F1A0  2EE8               	decfsz	wreg,f,c
  3438  00F1A2  D7FE               	bra	u5787
  3439  00F1A4  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3440  00F1A6  D7FC               	bra	u5787
  3441  00F1A8  F000               	nop	
  3442                           
  3443                           ;standbyMode.c: 352: printf("Another log?");
  3444  00F1AA  0E79               	movlw	low STR_17
  3445  00F1AC  6E0D               	movwf	printf@f,c
  3446  00F1AE  0EFF               	movlw	high STR_17
  3447  00F1B0  6E0E               	movwf	printf@f+1,c
  3448  00F1B2  EC71  F073         	call	_printf	;wreg free
  3449                           
  3450                           ;standbyMode.c: 353: lcdInst(0xC0);;
  3451  00F1B6  0EC0               	movlw	192
  3452  00F1B8  ECB7  F071         	call	_lcdInst
  3453                           
  3454                           ;standbyMode.c: 354: printf("# = Yes, D = No");
  3455  00F1BC  0ECB               	movlw	low STR_18
  3456  00F1BE  6E0D               	movwf	printf@f,c
  3457  00F1C0  0EFE               	movlw	high STR_18
  3458  00F1C2  6E0E               	movwf	printf@f+1,c
  3459  00F1C4  EC71  F073         	call	_printf	;wreg free
  3460  00F1C8  A281               	btfss	3969,1,c	;volatile
  3461  00F1CA  D7FE               	goto	l243
  3462                           
  3463                           ;standbyMode.c: 357: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  3464  00F1CC  3881               	swapf	3969,w,c	;volatile
  3465  00F1CE  0B0F               	andlw	15
  3466  00F1D0  0B0F               	andlw	15
  3467  00F1D2  6E1D               	movwf	viewLogs@keypress3,c
  3468  00F1D4  B281               	btfsc	3969,1,c	;volatile
  3469  00F1D6  D7FE               	goto	l246
  3470                           
  3471                           ;standbyMode.c: 359: return keypress3;
  3472  00F1D8  C01D  F019         	movff	viewLogs@keypress3,?_viewLogs
  3473  00F1DC  6A1A               	clrf	?_viewLogs+1,c
  3474  00F1DE  0012               	return		;funcret
  3475  00F1E0                     __end_of_viewLogs:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           postinc0	equ	0xFEE
  3484                           wreg	equ	0xFE8
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _food_press *****************
  3492 ;; Defined at:
  3493 ;;		line 469 in file "standbyMode.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  dietSum         2   24[COMRAM] unsigned int 
  3496 ;;  drawer          2   26[COMRAM] unsigned int 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  keypress        1   44[COMRAM] unsigned char 
  3499 ;;  foodTable       8   36[COMRAM] unsigned int [4]
  3500 ;;  count           2   34[COMRAM] unsigned int 
  3501 ;;  isValid         2   32[COMRAM] unsigned int 
  3502 ;;  tally           2   30[COMRAM] unsigned int 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3512 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;Total ram usage:       21 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    3
  3519 ;; This function calls:
  3520 ;;		_check_food
  3521 ;;		_get_digits
  3522 ;;		_lcdInst
  3523 ;;		_printf
  3524 ;;		_putch
  3525 ;; This function is called by:
  3526 ;;		_standbyMode
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text5
  3531  00E800                     __ptext5:
  3532                           	opt stack 0
  3533  00E800                     _food_press:
  3534                           	opt stack 26
  3535                           
  3536                           ;incstack = 0
  3537                           ;standbyMode.c: 471: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  3538  00E800  0E01               	movlw	1
  3539  00E802  ECB7  F071         	call	_lcdInst
  3540  00E806  0EC3               	movlw	195
  3541  00E808  6E1D               	movwf	??_food_press& (0+255),c
  3542  00E80A  0ECD               	movlw	205
  3543  00E80C                     u5797:
  3544  00E80C  2EE8               	decfsz	wreg,f,c
  3545  00E80E  D7FE               	bra	u5797
  3546  00E810  2E1D               	decfsz	??_food_press& (0+255),f,c
  3547  00E812  D7FC               	bra	u5797
  3548  00E814  F000               	nop	
  3549                           
  3550                           ;standbyMode.c: 472: printf("Drawer %i food:", drawer);
  3551  00E816  0E6B               	movlw	low STR_19
  3552  00E818  6E0D               	movwf	printf@f,c
  3553  00E81A  0EFE               	movlw	high STR_19
  3554  00E81C  6E0E               	movwf	printf@f+1,c
  3555  00E81E  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3556  00E822  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3557  00E826  EC71  F073         	call	_printf	;wreg free
  3558                           
  3559                           ;standbyMode.c: 473: lcdInst(0xC0);;
  3560  00E82A  0EC0               	movlw	192
  3561  00E82C  ECB7  F071         	call	_lcdInst
  3562                           
  3563                           ;standbyMode.c: 475: unsigned int tally = 0;
  3564  00E830  0E00               	movlw	0
  3565  00E832  6E20               	movwf	food_press@tally+1,c
  3566  00E834  0E00               	movlw	0
  3567  00E836  6E1F               	movwf	food_press@tally,c
  3568                           
  3569                           ;standbyMode.c: 476: unsigned int count = 0;
  3570  00E838  0E00               	movlw	0
  3571  00E83A  6E24               	movwf	food_press@count+1,c
  3572  00E83C  0E00               	movlw	0
  3573  00E83E  6E23               	movwf	food_press@count,c
  3574                           
  3575                           ;standbyMode.c: 477: unsigned int foodTable[4] = {0, 0, 0, 0};
  3576  00E840  EE20  F05E         	lfsr	2,food_press@F3040
  3577  00E844  EE10  F025         	lfsr	1,food_press@foodTable
  3578  00E848  0E07               	movlw	7
  3579  00E84A                     u3851:
  3580  00E84A  CFDB FFE3          	movff	plusw2,plusw1
  3581  00E84E  06E8               	decf	wreg,f,c
  3582  00E850  E2FC               	bc	u3851
  3583                           
  3584                           ;standbyMode.c: 478: unsigned int isValid = 0;
  3585  00E852  0E00               	movlw	0
  3586  00E854  6E22               	movwf	food_press@isValid+1,c
  3587  00E856  0E00               	movlw	0
  3588  00E858  6E21               	movwf	food_press@isValid,c
  3589                           
  3590                           ;standbyMode.c: 479: tally = get_digits(dietSum);
  3591  00E85A  C019  F001         	movff	food_press@dietSum,get_digits@sum
  3592  00E85E  C01A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  3593  00E862  ECA1  F072         	call	_get_digits	;wreg free
  3594  00E866  C001  F01F         	movff	?_get_digits,food_press@tally
  3595  00E86A  C002  F020         	movff	?_get_digits+1,food_press@tally+1
  3596  00E86E                     
  3597                           ;standbyMode.c: 482: while(PORTBbits.RB1 == 0){ continue; }
  3598  00E86E  A281               	btfss	3969,1,c	;volatile
  3599  00E870  D7FE               	goto	l278
  3600                           
  3601                           ;standbyMode.c: 483: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3602  00E872  3881               	swapf	3969,w,c	;volatile
  3603  00E874  0B0F               	andlw	15
  3604  00E876  0B0F               	andlw	15
  3605  00E878  6E2D               	movwf	food_press@keypress,c
  3606  00E87A  B281               	btfsc	3969,1,c	;volatile
  3607  00E87C  D7FE               	goto	l283
  3608                           
  3609                           ;standbyMode.c: 486: if(keypress == 14){
  3610  00E87E  0E0E               	movlw	14
  3611  00E880  182D               	xorwf	food_press@keypress,w,c
  3612  00E882  B4D8               	btfsc	status,2,c
  3613  00E884  D064               	goto	l286
  3614                           
  3615                           ;standbyMode.c: 489: else if (keypress == 0 || keypress == 1 || keypress == 2){
  3616                           
  3617                           ;standbyMode.c: 488: }
  3618                           
  3619                           ;standbyMode.c: 487: break;
  3620  00E886  502D               	movf	food_press@keypress,w,c
  3621  00E888  B4D8               	btfsc	status,2,c
  3622  00E88A  D007               	goto	u3910
  3623  00E88C  042D               	decf	food_press@keypress,w,c
  3624  00E88E  B4D8               	btfsc	status,2,c
  3625  00E890  D004               	goto	u3910
  3626  00E892  0E02               	movlw	2
  3627  00E894  182D               	xorwf	food_press@keypress,w,c
  3628  00E896  A4D8               	btfss	status,2,c
  3629  00E898  D029               	goto	l288
  3630  00E89A                     u3910:
  3631                           
  3632                           ;standbyMode.c: 490: if (count < tally){
  3633  00E89A  501F               	movf	food_press@tally,w,c
  3634  00E89C  5C23               	subwf	food_press@count,w,c
  3635  00E89E  5020               	movf	food_press@tally+1,w,c
  3636  00E8A0  5824               	subwfb	food_press@count+1,w,c
  3637  00E8A2  B0D8               	btfsc	status,0,c
  3638  00E8A4  D7E4               	goto	l278
  3639                           
  3640                           ;standbyMode.c: 491: putch(input[keypress]);
  3641  00E8A6  502D               	movf	food_press@keypress,w,c
  3642  00E8A8  0D01               	mullw	1
  3643  00E8AA  0EC4               	movlw	low _input
  3644  00E8AC  24F3               	addwf	prodl,w,c
  3645  00E8AE  6EF6               	movwf	tblptrl,c
  3646  00E8B0  0EFD               	movlw	high _input
  3647  00E8B2  20F4               	addwfc	prodh,w,c
  3648  00E8B4  6EF7               	movwf	tblptrh,c
  3649  00E8B6                     	if	0	;There are less than 3 active tblptr bytes
  3650  00E8B6                     	endif
  3651  00E8B6  0008               	tblrd		*
  3652  00E8B8  50F5               	movf	tablat,w,c
  3653  00E8BA  ECC1  F071         	call	_putch
  3654                           
  3655                           ;standbyMode.c: 492: foodTable[count] = keypress + 1;
  3656  00E8BE  502D               	movf	food_press@keypress,w,c
  3657  00E8C0  6E1D               	movwf	??_food_press& (0+255),c
  3658  00E8C2  6A1E               	clrf	(??_food_press+1)& (0+255),c
  3659  00E8C4  0E01               	movlw	1
  3660  00E8C6  261D               	addwf	??_food_press,f,c
  3661  00E8C8  0E00               	movlw	0
  3662  00E8CA  221E               	addwfc	??_food_press+1,f,c
  3663  00E8CC  90D8               	bcf	status,0,c
  3664  00E8CE  3423               	rlcf	food_press@count,w,c
  3665  00E8D0  6ED9               	movwf	fsr2l,c
  3666  00E8D2  3424               	rlcf	food_press@count+1,w,c
  3667  00E8D4  6EDA               	movwf	fsr2h,c
  3668  00E8D6  0E25               	movlw	low food_press@foodTable
  3669  00E8D8  26D9               	addwf	fsr2l,f,c
  3670  00E8DA  0E00               	movlw	high food_press@foodTable
  3671  00E8DC  22DA               	addwfc	fsr2h,f,c
  3672  00E8DE  C01D  FFDE         	movff	??_food_press,postinc2
  3673  00E8E2  C01E  FFDD         	movff	??_food_press+1,postdec2
  3674                           
  3675                           ;standbyMode.c: 493: count += 1;
  3676  00E8E6  4A23               	infsnz	food_press@count,f,c
  3677  00E8E8  2A24               	incf	food_press@count+1,f,c
  3678                           
  3679                           ;standbyMode.c: 494: }
  3680                           ;standbyMode.c: 495: }
  3681  00E8EA  D7C1               	goto	l278
  3682  00E8EC                     l288:
  3683                           
  3684                           ;standbyMode.c: 496: else if (keypress == 12){
  3685  00E8EC  0E0C               	movlw	12
  3686  00E8EE  182D               	xorwf	food_press@keypress,w,c
  3687  00E8F0  A4D8               	btfss	status,2,c
  3688  00E8F2  D7BD               	goto	l278
  3689                           
  3690                           ;standbyMode.c: 497: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3691  00E8F4  0E01               	movlw	1
  3692  00E8F6  ECB7  F071         	call	_lcdInst
  3693  00E8FA  0EC3               	movlw	195
  3694  00E8FC  6E1D               	movwf	??_food_press& (0+255),c
  3695  00E8FE  0ECD               	movlw	205
  3696  00E900                     u5807:
  3697  00E900  2EE8               	decfsz	wreg,f,c
  3698  00E902  D7FE               	bra	u5807
  3699  00E904  2E1D               	decfsz	??_food_press& (0+255),f,c
  3700  00E906  D7FC               	bra	u5807
  3701  00E908  F000               	nop	
  3702                           
  3703                           ;standbyMode.c: 498: printf("Drawer %i food:", drawer);
  3704  00E90A  0E6B               	movlw	low STR_19
  3705  00E90C  6E0D               	movwf	printf@f,c
  3706  00E90E  0EFE               	movlw	high STR_19
  3707  00E910  6E0E               	movwf	printf@f+1,c
  3708  00E912  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3709  00E916  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3710  00E91A  EC71  F073         	call	_printf	;wreg free
  3711                           
  3712                           ;standbyMode.c: 499: lcdInst(0xC0);;
  3713  00E91E  0EC0               	movlw	192
  3714  00E920  ECB7  F071         	call	_lcdInst
  3715                           
  3716                           ;standbyMode.c: 500: count = 0;
  3717  00E924  0E00               	movlw	0
  3718  00E926  6E24               	movwf	food_press@count+1,c
  3719  00E928  0E00               	movlw	0
  3720  00E92A  6E23               	movwf	food_press@count,c
  3721                           
  3722                           ;standbyMode.c: 501: foodTable[0] = 0;
  3723  00E92C  0E00               	movlw	0
  3724  00E92E  6E26               	movwf	food_press@foodTable+1,c
  3725  00E930  0E00               	movlw	0
  3726  00E932  6E25               	movwf	food_press@foodTable,c
  3727                           
  3728                           ;standbyMode.c: 502: foodTable[1] = 0;
  3729  00E934  0E00               	movlw	0
  3730  00E936  6E28               	movwf	food_press@foodTable+3,c
  3731  00E938  0E00               	movlw	0
  3732  00E93A  6E27               	movwf	food_press@foodTable+2,c
  3733                           
  3734                           ;standbyMode.c: 503: foodTable[2] = 0;
  3735  00E93C  0E00               	movlw	0
  3736  00E93E  6E2A               	movwf	food_press@foodTable+5,c
  3737  00E940  0E00               	movlw	0
  3738  00E942  6E29               	movwf	food_press@foodTable+4,c
  3739                           
  3740                           ;standbyMode.c: 504: foodTable[3] = 0;
  3741  00E944  0E00               	movlw	0
  3742  00E946  6E2C               	movwf	food_press@foodTable+7,c
  3743  00E948  0E00               	movlw	0
  3744  00E94A  6E2B               	movwf	food_press@foodTable+6,c
  3745  00E94C  D790               	goto	l278
  3746  00E94E                     l286:
  3747                           
  3748                           ;standbyMode.c: 505: }
  3749                           ;standbyMode.c: 506: }
  3750                           ;standbyMode.c: 507: isValid = check_food(dietSum, foodTable);
  3751  00E94E  C019  F001         	movff	food_press@dietSum,check_food@sum
  3752  00E952  C01A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  3753  00E956  0E25               	movlw	low food_press@foodTable
  3754  00E958  6E03               	movwf	check_food@foodInput,c
  3755  00E95A  0E00               	movlw	high food_press@foodTable
  3756  00E95C  6E04               	movwf	check_food@foodInput+1,c
  3757  00E95E  ECC2  F075         	call	_check_food	;wreg free
  3758  00E962  C001  F021         	movff	?_check_food,food_press@isValid
  3759  00E966  C002  F022         	movff	?_check_food+1,food_press@isValid+1
  3760                           
  3761                           ;standbyMode.c: 509: if (isValid == 0){
  3762  00E96A  5021               	movf	food_press@isValid,w,c
  3763  00E96C  1022               	iorwf	food_press@isValid+1,w,c
  3764  00E96E  A4D8               	btfss	status,2,c
  3765  00E970  0012               	return	
  3766                           
  3767                           ;standbyMode.c: 510: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3768  00E972  0E01               	movlw	1
  3769  00E974  ECB7  F071         	call	_lcdInst
  3770  00E978  0EC3               	movlw	195
  3771  00E97A  6E1D               	movwf	??_food_press& (0+255),c
  3772  00E97C  0ECD               	movlw	205
  3773  00E97E                     u5817:
  3774  00E97E  2EE8               	decfsz	wreg,f,c
  3775  00E980  D7FE               	bra	u5817
  3776  00E982  2E1D               	decfsz	??_food_press& (0+255),f,c
  3777  00E984  D7FC               	bra	u5817
  3778  00E986  F000               	nop	
  3779                           
  3780                           ;standbyMode.c: 511: printf("Invalid food!");
  3781  00E988  0E28               	movlw	low STR_21
  3782  00E98A  6E0D               	movwf	printf@f,c
  3783  00E98C  0EFF               	movlw	high STR_21
  3784  00E98E  6E0E               	movwf	printf@f+1,c
  3785  00E990  EC71  F073         	call	_printf	;wreg free
  3786                           
  3787                           ;standbyMode.c: 512: lcdInst(0xC0);;
  3788  00E994  0EC0               	movlw	192
  3789  00E996  ECB7  F071         	call	_lcdInst
  3790                           
  3791                           ;standbyMode.c: 513: printf("Try again.");
  3792  00E99A  0EA7               	movlw	low STR_22
  3793  00E99C  6E0D               	movwf	printf@f,c
  3794  00E99E  0EFF               	movlw	high STR_22
  3795  00E9A0  6E0E               	movwf	printf@f+1,c
  3796  00E9A2  EC71  F073         	call	_printf	;wreg free
  3797                           
  3798                           ;standbyMode.c: 514: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3799  00E9A6  0E33               	movlw	51
  3800  00E9A8  6E1E               	movwf	(??_food_press+1)& (0+255),c
  3801  00E9AA  0EBB               	movlw	187
  3802  00E9AC  6E1D               	movwf	??_food_press& (0+255),c
  3803  00E9AE  0EE0               	movlw	224
  3804  00E9B0                     u5827:
  3805  00E9B0  2EE8               	decfsz	wreg,f,c
  3806  00E9B2  D7FE               	bra	u5827
  3807  00E9B4  2E1D               	decfsz	??_food_press& (0+255),f,c
  3808  00E9B6  D7FC               	bra	u5827
  3809  00E9B8  2E1E               	decfsz	(??_food_press+1)& (0+255),f,c
  3810  00E9BA  D7FA               	bra	u5827
  3811                           
  3812                           ;standbyMode.c: 515: goto START;
  3813  00E9BC  D721               	goto	_food_press
  3814  00E9BE                     __end_of_food_press:
  3815                           	opt stack 0
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           prodh	equ	0xFF4
  3821                           prodl	equ	0xFF3
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           plusw1	equ	0xFE3
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _get_digits *****************
  3833 ;; Defined at:
  3834 ;;		line 364 in file "standbyMode.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  sum             2    0[COMRAM] unsigned int 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  count           2    4[COMRAM] unsigned int 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  2    0[COMRAM] unsigned int 
  3841 ;; Registers used:
  3842 ;;		wreg, status,2, status,0
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        6 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		_food_press
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text6
  3862  00E542                     __ptext6:
  3863                           	opt stack 0
  3864  00E542                     _get_digits:
  3865                           	opt stack 28
  3866                           
  3867                           ;standbyMode.c: 366: unsigned int count = 0;
  3868                           
  3869                           ;incstack = 0
  3870  00E542  0E00               	movlw	0
  3871  00E544  6E06               	movwf	get_digits@count+1,c
  3872  00E546  0E00               	movlw	0
  3873  00E548  6E05               	movwf	get_digits@count,c
  3874                           
  3875                           ;standbyMode.c: 368: switch(sum){
  3876  00E54A  D015               	goto	l251
  3877  00E54C                     
  3878                           ;standbyMode.c: 381: count = 1;
  3879                           
  3880                           ;standbyMode.c: 380: case 12:
  3881                           
  3882                           ;standbyMode.c: 377: break;
  3883                           
  3884                           ;standbyMode.c: 376: count = 1;
  3885                           
  3886                           ;standbyMode.c: 375: case 7:
  3887                           
  3888                           ;standbyMode.c: 372: break;
  3889                           
  3890                           ;standbyMode.c: 371: count = 1;
  3891  00E54C  0E00               	movlw	0
  3892  00E54E  6E06               	movwf	get_digits@count+1,c
  3893  00E550  0E01               	movlw	1
  3894  00E552                     L17:
  3895  00E552  6E05               	movwf	get_digits@count,c
  3896                           
  3897                           ;standbyMode.c: 387: break;
  3898  00E554  D050               	goto	l253
  3899  00E556                     
  3900                           ;standbyMode.c: 396: count = 2;
  3901                           
  3902                           ;standbyMode.c: 395: case 19:
  3903                           
  3904                           ;standbyMode.c: 392: break;
  3905                           
  3906                           ;standbyMode.c: 391: count = 2;
  3907  00E556  0E00               	movlw	0
  3908  00E558  6E06               	movwf	get_digits@count+1,c
  3909  00E55A  0E02               	movlw	2
  3910  00E55C  D7FA               	goto	L17
  3911  00E55E                     
  3912                           ;standbyMode.c: 431: count = 3;
  3913                           
  3914                           ;standbyMode.c: 430: case 31:
  3915                           
  3916                           ;standbyMode.c: 427: break;
  3917                           
  3918                           ;standbyMode.c: 426: count = 3;
  3919                           
  3920                           ;standbyMode.c: 425: case 26:
  3921                           
  3922                           ;standbyMode.c: 422: break;
  3923                           
  3924                           ;standbyMode.c: 421: count = 3;
  3925                           
  3926                           ;standbyMode.c: 420: case 22:
  3927                           
  3928                           ;standbyMode.c: 417: break;
  3929                           
  3930                           ;standbyMode.c: 416: count = 3;
  3931                           
  3932                           ;standbyMode.c: 415: case 27:
  3933                           
  3934                           ;standbyMode.c: 412: break;
  3935                           
  3936                           ;standbyMode.c: 411: count = 3;
  3937                           
  3938                           ;standbyMode.c: 410: case 17:
  3939                           
  3940                           ;standbyMode.c: 407: break;
  3941                           
  3942                           ;standbyMode.c: 406: count = 3;
  3943                           
  3944                           ;standbyMode.c: 405: case 18:
  3945                           
  3946                           ;standbyMode.c: 402: break;
  3947                           
  3948                           ;standbyMode.c: 401: count = 3;
  3949  00E55E  0E00               	movlw	0
  3950  00E560  6E06               	movwf	get_digits@count+1,c
  3951  00E562  0E03               	movlw	3
  3952  00E564  D7F6               	goto	L17
  3953  00E566                     
  3954                           ;standbyMode.c: 456: count = 4;
  3955                           
  3956                           ;standbyMode.c: 455: case 43:
  3957                           
  3958                           ;standbyMode.c: 452: break;
  3959                           
  3960                           ;standbyMode.c: 451: count = 4;
  3961                           
  3962                           ;standbyMode.c: 450: case 39:
  3963                           
  3964                           ;standbyMode.c: 447: break;
  3965                           
  3966                           ;standbyMode.c: 446: count = 4;
  3967                           
  3968                           ;standbyMode.c: 445: case 34:
  3969                           
  3970                           ;standbyMode.c: 442: break;
  3971                           
  3972                           ;standbyMode.c: 441: count = 4;
  3973                           
  3974                           ;standbyMode.c: 440: case 29:
  3975                           
  3976                           ;standbyMode.c: 437: break;
  3977                           
  3978                           ;standbyMode.c: 436: count = 4;
  3979  00E566  0E00               	movlw	0
  3980  00E568  6E06               	movwf	get_digits@count+1,c
  3981  00E56A  0E04               	movlw	4
  3982  00E56C  D7F2               	goto	L17
  3983  00E56E                     
  3984                           ;standbyMode.c: 461: count = 0;
  3985  00E56E  0E00               	movlw	0
  3986  00E570  6E06               	movwf	get_digits@count+1,c
  3987  00E572  0E00               	movlw	0
  3988  00E574  D7EE               	goto	L17
  3989  00E576                     l251:
  3990  00E576  C001  F003         	movff	get_digits@sum,??_get_digits
  3991  00E57A  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  3992                           
  3993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3994                           ; Switch size 1, requested type "space"
  3995                           ; Number of cases is 1, Range of values is 0 to 0
  3996                           ; switch strategies available:
  3997                           ; Name         Instructions Cycles
  3998                           ; simple_byte            4     3 (average)
  3999                           ;	Chosen strategy is simple_byte
  4000  00E57E  5004               	movf	??_get_digits+1,w,c
  4001  00E580  0A00               	xorlw	0	; case 0
  4002  00E582  A4D8               	btfss	status,2,c
  4003  00E584  D7F4               	goto	l271
  4004                           
  4005                           ; Switch size 1, requested type "space"
  4006                           ; Number of cases is 18, Range of values is 3 to 43
  4007                           ; switch strategies available:
  4008                           ; Name         Instructions Cycles
  4009                           ; simple_byte           55    28 (average)
  4010                           ;	Chosen strategy is simple_byte
  4011  00E586  5003               	movf	??_get_digits,w,c
  4012  00E588  0A03               	xorlw	3	; case 3
  4013  00E58A  B4D8               	btfsc	status,2,c
  4014  00E58C  D7DF               	goto	l252
  4015  00E58E  0A04               	xorlw	4	; case 7
  4016  00E590  B4D8               	btfsc	status,2,c
  4017  00E592  D7DC               	goto	l252
  4018  00E594  0A0D               	xorlw	13	; case 10
  4019  00E596  B4D8               	btfsc	status,2,c
  4020  00E598  D7DE               	goto	l257
  4021  00E59A  0A06               	xorlw	6	; case 12
  4022  00E59C  B4D8               	btfsc	status,2,c
  4023  00E59E  D7D6               	goto	l252
  4024  00E5A0  0A01               	xorlw	1	; case 13
  4025  00E5A2  B4D8               	btfsc	status,2,c
  4026  00E5A4  D7DC               	goto	l259
  4027  00E5A6  0A02               	xorlw	2	; case 15
  4028  00E5A8  B4D8               	btfsc	status,2,c
  4029  00E5AA  D7D5               	goto	l257
  4030  00E5AC  0A1E               	xorlw	30	; case 17
  4031  00E5AE  B4D8               	btfsc	status,2,c
  4032  00E5B0  D7D6               	goto	l259
  4033  00E5B2  0A03               	xorlw	3	; case 18
  4034  00E5B4  B4D8               	btfsc	status,2,c
  4035  00E5B6  D7D3               	goto	l259
  4036  00E5B8  0A01               	xorlw	1	; case 19
  4037  00E5BA  B4D8               	btfsc	status,2,c
  4038  00E5BC  D7CC               	goto	l257
  4039  00E5BE  0A05               	xorlw	5	; case 22
  4040  00E5C0  B4D8               	btfsc	status,2,c
  4041  00E5C2  D7CD               	goto	l259
  4042  00E5C4  0A0F               	xorlw	15	; case 25
  4043  00E5C6  B4D8               	btfsc	status,2,c
  4044  00E5C8  D7CE               	goto	l266
  4045  00E5CA  0A03               	xorlw	3	; case 26
  4046  00E5CC  B4D8               	btfsc	status,2,c
  4047  00E5CE  D7C7               	goto	l259
  4048  00E5D0  0A01               	xorlw	1	; case 27
  4049  00E5D2  B4D8               	btfsc	status,2,c
  4050  00E5D4  D7C4               	goto	l259
  4051  00E5D6  0A06               	xorlw	6	; case 29
  4052  00E5D8  B4D8               	btfsc	status,2,c
  4053  00E5DA  D7C5               	goto	l266
  4054  00E5DC  0A02               	xorlw	2	; case 31
  4055  00E5DE  B4D8               	btfsc	status,2,c
  4056  00E5E0  D7BE               	goto	l259
  4057  00E5E2  0A3D               	xorlw	61	; case 34
  4058  00E5E4  B4D8               	btfsc	status,2,c
  4059  00E5E6  D7BF               	goto	l266
  4060  00E5E8  0A05               	xorlw	5	; case 39
  4061  00E5EA  B4D8               	btfsc	status,2,c
  4062  00E5EC  D7BC               	goto	l266
  4063  00E5EE  0A0C               	xorlw	12	; case 43
  4064  00E5F0  B4D8               	btfsc	status,2,c
  4065  00E5F2  D7B9               	goto	l266
  4066  00E5F4  D7BC               	goto	l271
  4067  00E5F6                     l253:
  4068                           
  4069                           ;standbyMode.c: 464: return count;
  4070  00E5F6  C005  F001         	movff	get_digits@count,?_get_digits
  4071  00E5FA  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  4072  00E5FE  0012               	return		;funcret
  4073  00E600                     __end_of_get_digits:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           postinc0	equ	0xFEE
  4082                           wreg	equ	0xFE8
  4083                           plusw1	equ	0xFE3
  4084                           postinc2	equ	0xFDE
  4085                           postdec2	equ	0xFDD
  4086                           plusw2	equ	0xFDB
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function _check_food *****************
  4092 ;; Defined at:
  4093 ;;		line 87 in file "standbyMode.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  sum             2    0[COMRAM] unsigned int 
  4096 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  4097 ;;		 -> food_press@foodTable(8), 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  returnValue     2    6[COMRAM] unsigned int 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  2    0[COMRAM] unsigned int 
  4102 ;; Registers used:
  4103 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;Total ram usage:        8 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; This function calls:
  4116 ;;		Nothing
  4117 ;; This function is called by:
  4118 ;;		_food_press
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text7
  4123  00EB84                     __ptext7:
  4124                           	opt stack 0
  4125  00EB84                     _check_food:
  4126                           	opt stack 28
  4127                           
  4128                           ;standbyMode.c: 89: unsigned int returnValue = 0;
  4129                           
  4130                           ;incstack = 0
  4131  00EB84  0E00               	movlw	0
  4132  00EB86  6E08               	movwf	check_food@returnValue+1,c
  4133  00EB88  0E00               	movlw	0
  4134  00EB8A  6E07               	movwf	check_food@returnValue,c
  4135                           
  4136                           ;standbyMode.c: 91: switch(sum){
  4137  00EB8C  D14D               	goto	l131
  4138  00EB8E                     u2740:
  4139  00EB8E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4140  00EB92  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4141  00EB96  D0A7               	goto	L24
  4142  00EB98                     
  4143                           ;standbyMode.c: 108: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  4144  00EB98  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4145  00EB9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4146  00EBA0  04DE               	decf	postinc2,w,c
  4147  00EBA2  10DE               	iorwf	postinc2,w,c
  4148  00EBA4  B4D8               	btfsc	status,2,c
  4149  00EBA6  D118               	goto	u3420
  4150  00EBA8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4151  00EBAC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4152  00EBB0  0E02               	movlw	2
  4153  00EBB2  18DE               	xorwf	postinc2,w,c
  4154  00EBB4  10DE               	iorwf	postinc2,w,c
  4155  00EBB6  B4D8               	btfsc	status,2,c
  4156  00EBB8  D10F               	goto	u3420
  4157  00EBBA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4158  00EBBE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4159  00EBC2  0E03               	movlw	3
  4160  00EBC4  D091               	goto	L25
  4161  00EBC6                     
  4162                           ;standbyMode.c: 115: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  4163  00EBC6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4164  00EBCA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4165  00EBCE  0E03               	movlw	3
  4166  00EBD0  18DE               	xorwf	postinc2,w,c
  4167  00EBD2  10DE               	iorwf	postinc2,w,c
  4168  00EBD4  B4D8               	btfsc	status,2,c
  4169  00EBD6  D167               	goto	l136
  4170  00EBD8  EE20 F002          	lfsr	2,2
  4171  00EBDC  5003               	movf	check_food@foodInput,w,c
  4172  00EBDE  26D9               	addwf	fsr2l,f,c
  4173  00EBE0  5004               	movf	check_food@foodInput+1,w,c
  4174  00EBE2  22DA               	addwfc	fsr2h,f,c
  4175  00EBE4  0E03               	movlw	3
  4176  00EBE6  18DE               	xorwf	postinc2,w,c
  4177  00EBE8  10DE               	iorwf	postinc2,w,c
  4178  00EBEA  B4D8               	btfsc	status,2,c
  4179  00EBEC  D15C               	goto	l136
  4180  00EBEE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4181  00EBF2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4182  00EBF6  50DE               	movf	postinc2,w,c
  4183  00EBF8  10DE               	iorwf	postinc2,w,c
  4184  00EBFA  B4D8               	btfsc	status,2,c
  4185  00EBFC  D154               	goto	l136
  4186  00EBFE  EE20 F002          	lfsr	2,2
  4187  00EC02  5003               	movf	check_food@foodInput,w,c
  4188  00EC04  26D9               	addwf	fsr2l,f,c
  4189  00EC06  5004               	movf	check_food@foodInput+1,w,c
  4190  00EC08  22DA               	addwfc	fsr2h,f,c
  4191  00EC0A                     L18:
  4192  00EC0A  50DE               	movf	postinc2,w,c
  4193  00EC0C  10DE               	iorwf	postinc2,w,c
  4194  00EC0E  B4D8               	btfsc	status,2,c
  4195  00EC10  D14A               	goto	l136
  4196  00EC12  D0E2               	goto	u3420
  4197  00EC14                     
  4198                           ;standbyMode.c: 122: if (foodInput[1] == 3){
  4199  00EC14  EE20 F002          	lfsr	2,2
  4200  00EC18  5003               	movf	check_food@foodInput,w,c
  4201  00EC1A  26D9               	addwf	fsr2l,f,c
  4202  00EC1C  5004               	movf	check_food@foodInput+1,w,c
  4203  00EC1E  22DA               	addwfc	fsr2h,f,c
  4204  00EC20  0E03               	movlw	3
  4205  00EC22  18DE               	xorwf	postinc2,w,c
  4206  00EC24  10DE               	iorwf	postinc2,w,c
  4207  00EC26  A4D8               	btfss	status,2,c
  4208  00EC28  D011               	goto	l153
  4209  00EC2A                     u2830:
  4210                           
  4211                           ;standbyMode.c: 123: if (foodInput[0] == 1){
  4212  00EC2A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4213  00EC2E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4214  00EC32  04DE               	decf	postinc2,w,c
  4215  00EC34  D0CE               	goto	L19
  4216  00EC36                     
  4217                           ;standbyMode.c: 134: if (foodInput[1] == 3){
  4218  00EC36  EE20 F002          	lfsr	2,2
  4219  00EC3A  5003               	movf	check_food@foodInput,w,c
  4220  00EC3C  26D9               	addwf	fsr2l,f,c
  4221  00EC3E  5004               	movf	check_food@foodInput+1,w,c
  4222  00EC40  22DA               	addwfc	fsr2h,f,c
  4223  00EC42  0E03               	movlw	3
  4224  00EC44  18DE               	xorwf	postinc2,w,c
  4225  00EC46  10DE               	iorwf	postinc2,w,c
  4226  00EC48  B4D8               	btfsc	status,2,c
  4227  00EC4A  D7EF               	goto	u2830
  4228  00EC4C                     l153:
  4229                           
  4230                           ;standbyMode.c: 139: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4231  00EC4C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4232  00EC50  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4233  00EC54  0E03               	movlw	3
  4234  00EC56  18DE               	xorwf	postinc2,w,c
  4235  00EC58  10DE               	iorwf	postinc2,w,c
  4236  00EC5A  B4D8               	btfsc	status,2,c
  4237  00EC5C  D124               	goto	l136
  4238  00EC5E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4239  00EC62  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4240  00EC66  D7D1               	goto	L18
  4241  00EC68                     
  4242                           ;standbyMode.c: 164: if (foodInput[1] == 1 && foodInput[2] == 1){
  4243  00EC68  EE20 F002          	lfsr	2,2
  4244  00EC6C  5003               	movf	check_food@foodInput,w,c
  4245  00EC6E  26D9               	addwf	fsr2l,f,c
  4246  00EC70  5004               	movf	check_food@foodInput+1,w,c
  4247  00EC72  22DA               	addwfc	fsr2h,f,c
  4248  00EC74  04DE               	decf	postinc2,w,c
  4249  00EC76  10DE               	iorwf	postinc2,w,c
  4250  00EC78  A4D8               	btfss	status,2,c
  4251  00EC7A  D115               	goto	l136
  4252  00EC7C  EE20 F004          	lfsr	2,4
  4253  00EC80  5003               	movf	check_food@foodInput,w,c
  4254  00EC82  26D9               	addwf	fsr2l,f,c
  4255  00EC84  5004               	movf	check_food@foodInput+1,w,c
  4256  00EC86  22DA               	addwfc	fsr2h,f,c
  4257  00EC88  04DE               	decf	postinc2,w,c
  4258  00EC8A  10DE               	iorwf	postinc2,w,c
  4259  00EC8C  A4D8               	btfss	status,2,c
  4260  00EC8E  D10B               	goto	l136
  4261  00EC90                     
  4262                           ;standbyMode.c: 165: if (foodInput[0] == 1 || foodInput[0] == 2){
  4263  00EC90  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4264  00EC94  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4265  00EC98  04DE               	decf	postinc2,w,c
  4266  00EC9A  10DE               	iorwf	postinc2,w,c
  4267  00EC9C  B4D8               	btfsc	status,2,c
  4268  00EC9E  D09C               	goto	u3420
  4269  00ECA0  D776               	goto	u2740
  4270  00ECA2                     l188:
  4271                           
  4272                           ;standbyMode.c: 205: if (foodInput[0] == 1 && foodInput[1] == 1){
  4273  00ECA2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4274  00ECA6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4275  00ECAA  04DE               	decf	postinc2,w,c
  4276  00ECAC  10DE               	iorwf	postinc2,w,c
  4277  00ECAE  A4D8               	btfss	status,2,c
  4278  00ECB0  D0FA               	goto	l136
  4279  00ECB2  EE20 F002          	lfsr	2,2
  4280  00ECB6  5003               	movf	check_food@foodInput,w,c
  4281  00ECB8  26D9               	addwf	fsr2l,f,c
  4282  00ECBA  5004               	movf	check_food@foodInput+1,w,c
  4283  00ECBC  22DA               	addwfc	fsr2h,f,c
  4284  00ECBE  04DE               	decf	postinc2,w,c
  4285  00ECC0  10DE               	iorwf	postinc2,w,c
  4286  00ECC2  A4D8               	btfss	status,2,c
  4287  00ECC4  D0F0               	goto	l136
  4288                           
  4289                           ;standbyMode.c: 206: if (foodInput[2] == 1 || foodInput[2] == 2){
  4290  00ECC6  EE20 F004          	lfsr	2,4
  4291  00ECCA  5003               	movf	check_food@foodInput,w,c
  4292  00ECCC  26D9               	addwf	fsr2l,f,c
  4293  00ECCE  5004               	movf	check_food@foodInput+1,w,c
  4294  00ECD0  22DA               	addwfc	fsr2h,f,c
  4295  00ECD2  04DE               	decf	postinc2,w,c
  4296  00ECD4  10DE               	iorwf	postinc2,w,c
  4297  00ECD6  B4D8               	btfsc	status,2,c
  4298  00ECD8  D07F               	goto	u3420
  4299  00ECDA  EE20 F004          	lfsr	2,4
  4300  00ECDE  5003               	movf	check_food@foodInput,w,c
  4301  00ECE0  26D9               	addwf	fsr2l,f,c
  4302  00ECE2  5004               	movf	check_food@foodInput+1,w,c
  4303  00ECE4  22DA               	addwfc	fsr2h,f,c
  4304  00ECE6                     L24:
  4305  00ECE6  0E02               	movlw	2
  4306  00ECE8                     L25:
  4307  00ECE8  18DE               	xorwf	postinc2,w,c
  4308  00ECEA  10DE               	iorwf	postinc2,w,c
  4309  00ECEC  B4D8               	btfsc	status,2,c
  4310  00ECEE  D074               	goto	u3420
  4311  00ECF0  D0DA               	goto	l136
  4312  00ECF2                     l193:
  4313                           
  4314                           ;standbyMode.c: 214: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4315  00ECF2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4316  00ECF6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4317  00ECFA  04DE               	decf	postinc2,w,c
  4318  00ECFC  10DE               	iorwf	postinc2,w,c
  4319  00ECFE  A4D8               	btfss	status,2,c
  4320  00ED00  D014               	goto	l194
  4321  00ED02  EE20 F002          	lfsr	2,2
  4322  00ED06  5003               	movf	check_food@foodInput,w,c
  4323  00ED08  26D9               	addwf	fsr2l,f,c
  4324  00ED0A  5004               	movf	check_food@foodInput+1,w,c
  4325  00ED0C  22DA               	addwfc	fsr2h,f,c
  4326  00ED0E  04DE               	decf	postinc2,w,c
  4327  00ED10  10DE               	iorwf	postinc2,w,c
  4328  00ED12  A4D8               	btfss	status,2,c
  4329  00ED14  D00A               	goto	l194
  4330  00ED16  EE20 F004          	lfsr	2,4
  4331  00ED1A  5003               	movf	check_food@foodInput,w,c
  4332  00ED1C  26D9               	addwf	fsr2l,f,c
  4333  00ED1E  5004               	movf	check_food@foodInput+1,w,c
  4334  00ED20  22DA               	addwfc	fsr2h,f,c
  4335  00ED22  04DE               	decf	postinc2,w,c
  4336  00ED24  10DE               	iorwf	postinc2,w,c
  4337  00ED26  B4D8               	btfsc	status,2,c
  4338  00ED28  D057               	goto	u3420
  4339  00ED2A                     l194:
  4340                           
  4341                           ;standbyMode.c: 217: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4342  00ED2A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4343  00ED2E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4344  00ED32  0E02               	movlw	2
  4345  00ED34  18DE               	xorwf	postinc2,w,c
  4346  00ED36  10DE               	iorwf	postinc2,w,c
  4347  00ED38  A4D8               	btfss	status,2,c
  4348  00ED3A  D014               	goto	l196
  4349  00ED3C  EE20 F002          	lfsr	2,2
  4350  00ED40  5003               	movf	check_food@foodInput,w,c
  4351  00ED42  26D9               	addwf	fsr2l,f,c
  4352  00ED44  5004               	movf	check_food@foodInput+1,w,c
  4353  00ED46  22DA               	addwfc	fsr2h,f,c
  4354  00ED48  04DE               	decf	postinc2,w,c
  4355  00ED4A  10DE               	iorwf	postinc2,w,c
  4356  00ED4C  A4D8               	btfss	status,2,c
  4357  00ED4E  D00A               	goto	l196
  4358  00ED50  EE20 F004          	lfsr	2,4
  4359  00ED54  5003               	movf	check_food@foodInput,w,c
  4360  00ED56  26D9               	addwf	fsr2l,f,c
  4361  00ED58  5004               	movf	check_food@foodInput+1,w,c
  4362  00ED5A  22DA               	addwfc	fsr2h,f,c
  4363  00ED5C  04DE               	decf	postinc2,w,c
  4364  00ED5E  10DE               	iorwf	postinc2,w,c
  4365  00ED60  B4D8               	btfsc	status,2,c
  4366  00ED62  D03A               	goto	u3420
  4367  00ED64                     l196:
  4368                           
  4369                           ;standbyMode.c: 220: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4370  00ED64  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4371  00ED68  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4372  00ED6C  04DE               	decf	postinc2,w,c
  4373  00ED6E  10DE               	iorwf	postinc2,w,c
  4374  00ED70  A4D8               	btfss	status,2,c
  4375  00ED72  D015               	goto	l198
  4376  00ED74  EE20 F002          	lfsr	2,2
  4377  00ED78  5003               	movf	check_food@foodInput,w,c
  4378  00ED7A  26D9               	addwf	fsr2l,f,c
  4379  00ED7C  5004               	movf	check_food@foodInput+1,w,c
  4380  00ED7E  22DA               	addwfc	fsr2h,f,c
  4381  00ED80  0E02               	movlw	2
  4382  00ED82  18DE               	xorwf	postinc2,w,c
  4383  00ED84  10DE               	iorwf	postinc2,w,c
  4384  00ED86  A4D8               	btfss	status,2,c
  4385  00ED88  D00A               	goto	l198
  4386  00ED8A  EE20 F004          	lfsr	2,4
  4387  00ED8E  5003               	movf	check_food@foodInput,w,c
  4388  00ED90  26D9               	addwf	fsr2l,f,c
  4389  00ED92  5004               	movf	check_food@foodInput+1,w,c
  4390  00ED94  22DA               	addwfc	fsr2h,f,c
  4391  00ED96  04DE               	decf	postinc2,w,c
  4392  00ED98  10DE               	iorwf	postinc2,w,c
  4393  00ED9A  B4D8               	btfsc	status,2,c
  4394  00ED9C  D01D               	goto	u3420
  4395  00ED9E                     l198:
  4396                           
  4397                           ;standbyMode.c: 223: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4398  00ED9E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4399  00EDA2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4400  00EDA6  04DE               	decf	postinc2,w,c
  4401  00EDA8  10DE               	iorwf	postinc2,w,c
  4402  00EDAA  A4D8               	btfss	status,2,c
  4403  00EDAC  D07C               	goto	l136
  4404  00EDAE  EE20 F002          	lfsr	2,2
  4405  00EDB2  5003               	movf	check_food@foodInput,w,c
  4406  00EDB4  26D9               	addwf	fsr2l,f,c
  4407  00EDB6  5004               	movf	check_food@foodInput+1,w,c
  4408  00EDB8  22DA               	addwfc	fsr2h,f,c
  4409  00EDBA  04DE               	decf	postinc2,w,c
  4410  00EDBC  10DE               	iorwf	postinc2,w,c
  4411  00EDBE  A4D8               	btfss	status,2,c
  4412  00EDC0  D072               	goto	l136
  4413  00EDC2  EE20 F004          	lfsr	2,4
  4414  00EDC6  5003               	movf	check_food@foodInput,w,c
  4415  00EDC8  26D9               	addwf	fsr2l,f,c
  4416  00EDCA  5004               	movf	check_food@foodInput+1,w,c
  4417  00EDCC  22DA               	addwfc	fsr2h,f,c
  4418  00EDCE  0E02               	movlw	2
  4419  00EDD0  18DE               	xorwf	postinc2,w,c
  4420  00EDD2                     L19:
  4421  00EDD2  10DE               	iorwf	postinc2,w,c
  4422  00EDD4  A4D8               	btfss	status,2,c
  4423  00EDD6  D067               	goto	l136
  4424  00EDD8                     u3420:
  4425                           
  4426                           ;standbyMode.c: 224: returnValue = 1;
  4427  00EDD8  0E00               	movlw	0
  4428  00EDDA  6E08               	movwf	check_food@returnValue+1,c
  4429  00EDDC  0E01               	movlw	1
  4430  00EDDE  6E07               	movwf	check_food@returnValue,c
  4431                           
  4432                           ;standbyMode.c: 225: }
  4433                           ;standbyMode.c: 226: break;
  4434  00EDE0  D062               	goto	l136
  4435  00EDE2                     
  4436                           ;standbyMode.c: 258: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4437                           
  4438                           ;standbyMode.c: 257: case 43:
  4439                           
  4440                           ;standbyMode.c: 253: }
  4441                           ;standbyMode.c: 254: break;
  4442                           
  4443                           ;standbyMode.c: 252: returnValue = 1;
  4444                           
  4445                           ;standbyMode.c: 251: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4446                           
  4447                           ;standbyMode.c: 250: case 39:
  4448                           
  4449                           ;standbyMode.c: 246: }
  4450                           ;standbyMode.c: 247: break;
  4451                           
  4452                           ;standbyMode.c: 245: returnValue = 1;
  4453                           
  4454                           ;standbyMode.c: 244: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4455                           
  4456                           ;standbyMode.c: 243: case 34:
  4457                           
  4458                           ;standbyMode.c: 239: }
  4459                           ;standbyMode.c: 240: break;
  4460                           
  4461                           ;standbyMode.c: 238: returnValue = 1;
  4462                           
  4463                           ;standbyMode.c: 237: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4464                           
  4465                           ;standbyMode.c: 236: case 29:
  4466                           
  4467                           ;standbyMode.c: 232: }
  4468                           ;standbyMode.c: 233: break;
  4469                           
  4470                           ;standbyMode.c: 231: returnValue = 1;
  4471                           
  4472                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4473  00EDE2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4474  00EDE6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4475  00EDEA  04DE               	decf	postinc2,w,c
  4476  00EDEC  10DE               	iorwf	postinc2,w,c
  4477  00EDEE  A4D8               	btfss	status,2,c
  4478  00EDF0  D05A               	goto	l136
  4479  00EDF2  EE20 F002          	lfsr	2,2
  4480  00EDF6  5003               	movf	check_food@foodInput,w,c
  4481  00EDF8  26D9               	addwf	fsr2l,f,c
  4482  00EDFA  5004               	movf	check_food@foodInput+1,w,c
  4483  00EDFC  22DA               	addwfc	fsr2h,f,c
  4484  00EDFE  04DE               	decf	postinc2,w,c
  4485  00EE00  10DE               	iorwf	postinc2,w,c
  4486  00EE02  A4D8               	btfss	status,2,c
  4487  00EE04  D050               	goto	l136
  4488  00EE06  EE20 F004          	lfsr	2,4
  4489  00EE0A  5003               	movf	check_food@foodInput,w,c
  4490  00EE0C  26D9               	addwf	fsr2l,f,c
  4491  00EE0E  5004               	movf	check_food@foodInput+1,w,c
  4492  00EE10  22DA               	addwfc	fsr2h,f,c
  4493  00EE12  04DE               	decf	postinc2,w,c
  4494  00EE14  10DE               	iorwf	postinc2,w,c
  4495  00EE16  A4D8               	btfss	status,2,c
  4496  00EE18  D046               	goto	l136
  4497  00EE1A  EE20 F006          	lfsr	2,6
  4498  00EE1E  5003               	movf	check_food@foodInput,w,c
  4499  00EE20  26D9               	addwf	fsr2l,f,c
  4500  00EE22  5004               	movf	check_food@foodInput+1,w,c
  4501  00EE24  22DA               	addwfc	fsr2h,f,c
  4502  00EE26  D705               	goto	L46
  4503  00EE28                     l131:
  4504  00EE28  C001  F005         	movff	check_food@sum,??_check_food
  4505  00EE2C  C002  F006         	movff	check_food@sum+1,??_check_food+1
  4506                           
  4507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4508                           ; Switch size 1, requested type "space"
  4509                           ; Number of cases is 1, Range of values is 0 to 0
  4510                           ; switch strategies available:
  4511                           ; Name         Instructions Cycles
  4512                           ; simple_byte            4     3 (average)
  4513                           ;	Chosen strategy is simple_byte
  4514  00EE30  5006               	movf	??_check_food+1,w,c
  4515  00EE32  0A00               	xorlw	0	; case 0
  4516  00EE34  A4D8               	btfss	status,2,c
  4517  00EE36  D037               	goto	l136
  4518                           
  4519                           ; Switch size 1, requested type "space"
  4520                           ; Number of cases is 18, Range of values is 3 to 43
  4521                           ; switch strategies available:
  4522                           ; Name         Instructions Cycles
  4523                           ; simple_byte           55    28 (average)
  4524                           ;	Chosen strategy is simple_byte
  4525  00EE38  5005               	movf	??_check_food,w,c
  4526  00EE3A  0A03               	xorlw	3	; case 3
  4527  00EE3C  B4D8               	btfsc	status,2,c
  4528  00EE3E  D728               	goto	L45
  4529  00EE40  0A04               	xorlw	4	; case 7
  4530  00EE42  B4D8               	btfsc	status,2,c
  4531  00EE44  D725               	goto	L45
  4532  00EE46  0A0D               	xorlw	13	; case 10
  4533  00EE48  B4D8               	btfsc	status,2,c
  4534  00EE4A  D6BD               	goto	l145
  4535  00EE4C  0A06               	xorlw	6	; case 12
  4536  00EE4E  B4D8               	btfsc	status,2,c
  4537  00EE50  D6A3               	goto	l141
  4538  00EE52  0A01               	xorlw	1	; case 13
  4539  00EE54  B4D8               	btfsc	status,2,c
  4540  00EE56  D725               	goto	l188
  4541  00EE58  0A02               	xorlw	2	; case 15
  4542  00EE5A  B4D8               	btfsc	status,2,c
  4543  00EE5C  D6DB               	goto	l147
  4544  00EE5E  0A1E               	xorlw	30	; case 17
  4545  00EE60  B4D8               	btfsc	status,2,c
  4546  00EE62  D702               	goto	l167
  4547  00EE64  0A03               	xorlw	3	; case 18
  4548  00EE66  B4D8               	btfsc	status,2,c
  4549  00EE68  D71C               	goto	l188
  4550  00EE6A  0A01               	xorlw	1	; case 19
  4551  00EE6C  B4D8               	btfsc	status,2,c
  4552  00EE6E  D6E3               	goto	l152
  4553  00EE70  0A05               	xorlw	5	; case 22
  4554  00EE72  B4D8               	btfsc	status,2,c
  4555  00EE74  D73E               	goto	l193
  4556  00EE76  0A0F               	xorlw	15	; case 25
  4557  00EE78  B4D8               	btfsc	status,2,c
  4558  00EE7A  D7B3               	goto	l201
  4559  00EE7C  0A03               	xorlw	3	; case 26
  4560  00EE7E  B4D8               	btfsc	status,2,c
  4561  00EE80  D710               	goto	l188
  4562  00EE82  0A01               	xorlw	1	; case 27
  4563  00EE84  B4D8               	btfsc	status,2,c
  4564  00EE86  D735               	goto	l193
  4565  00EE88  0A06               	xorlw	6	; case 29
  4566  00EE8A  B4D8               	btfsc	status,2,c
  4567  00EE8C  D7AA               	goto	l201
  4568  00EE8E  0A02               	xorlw	2	; case 31
  4569  00EE90  B4D8               	btfsc	status,2,c
  4570  00EE92  D72F               	goto	l193
  4571  00EE94  0A3D               	xorlw	61	; case 34
  4572  00EE96  B4D8               	btfsc	status,2,c
  4573  00EE98  D7A4               	goto	l201
  4574  00EE9A  0A05               	xorlw	5	; case 39
  4575  00EE9C  B4D8               	btfsc	status,2,c
  4576  00EE9E  D7A1               	goto	l201
  4577  00EEA0  0A0C               	xorlw	12	; case 43
  4578  00EEA2  B4D8               	btfsc	status,2,c
  4579  00EEA4  D79E               	goto	l201
  4580  00EEA6                     l136:
  4581                           
  4582                           ;standbyMode.c: 267: return returnValue;
  4583  00EEA6  C007  F001         	movff	check_food@returnValue,?_check_food
  4584  00EEAA  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  4585  00EEAE  0012               	return		;funcret
  4586  00EEB0                     __end_of_check_food:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           postinc0	equ	0xFEE
  4595                           wreg	equ	0xFE8
  4596                           plusw1	equ	0xFE3
  4597                           postinc2	equ	0xFDE
  4598                           postdec2	equ	0xFDD
  4599                           plusw2	equ	0xFDB
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _diet_press *****************
  4605 ;; Defined at:
  4606 ;;		line 521 in file "standbyMode.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  drawer          2   24[COMRAM] unsigned int 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  keypress        1   36[COMRAM] unsigned char 
  4611 ;;  dietTable       8   37[COMRAM] unsigned int [4]
  4612 ;;  sum             2   34[COMRAM] unsigned int 
  4613 ;;  count           2   32[COMRAM] unsigned int 
  4614 ;;  i               2   30[COMRAM] unsigned int 
  4615 ;;  previous        2   28[COMRAM] unsigned int 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  2   24[COMRAM] unsigned int 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;Total ram usage:       21 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    3
  4632 ;; This function calls:
  4633 ;;		_lcdInst
  4634 ;;		_printf
  4635 ;;		_putch
  4636 ;; This function is called by:
  4637 ;;		_standbyMode
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text8
  4642  00F1E0                     __ptext8:
  4643                           	opt stack 0
  4644  00F1E0                     _diet_press:
  4645                           	opt stack 26
  4646                           
  4647                           ;incstack = 0
  4648                           ;standbyMode.c: 524: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  4649  00F1E0  0E01               	movlw	1
  4650  00F1E2  ECB7  F071         	call	_lcdInst
  4651  00F1E6  0EC3               	movlw	195
  4652  00F1E8  6E1B               	movwf	??_diet_press& (0+255),c
  4653  00F1EA  0ECD               	movlw	205
  4654  00F1EC                     u5837:
  4655  00F1EC  2EE8               	decfsz	wreg,f,c
  4656  00F1EE  D7FE               	bra	u5837
  4657  00F1F0  2E1B               	decfsz	??_diet_press& (0+255),f,c
  4658  00F1F2  D7FC               	bra	u5837
  4659  00F1F4  F000               	nop	
  4660                           
  4661                           ;standbyMode.c: 525: printf("Drawer %i diet:", drawer);
  4662  00F1F6  0E9B               	movlw	low STR_23
  4663  00F1F8  6E0D               	movwf	printf@f,c
  4664  00F1FA  0EFE               	movlw	high STR_23
  4665  00F1FC  6E0E               	movwf	printf@f+1,c
  4666  00F1FE  C019  F00F         	movff	diet_press@drawer,?_printf+2
  4667  00F202  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  4668  00F206  EC71  F073         	call	_printf	;wreg free
  4669                           
  4670                           ;standbyMode.c: 526: lcdInst(0xC0);;
  4671  00F20A  0EC0               	movlw	192
  4672  00F20C  ECB7  F071         	call	_lcdInst
  4673                           
  4674                           ;standbyMode.c: 528: unsigned int count = 0;
  4675  00F210  0E00               	movlw	0
  4676  00F212  6E22               	movwf	diet_press@count+1,c
  4677  00F214  0E00               	movlw	0
  4678  00F216  6E21               	movwf	diet_press@count,c
  4679                           
  4680                           ;standbyMode.c: 529: unsigned int previous = 0;
  4681  00F218  0E00               	movlw	0
  4682  00F21A  6E1E               	movwf	diet_press@previous+1,c
  4683  00F21C  0E00               	movlw	0
  4684  00F21E  6E1D               	movwf	diet_press@previous,c
  4685                           
  4686                           ;standbyMode.c: 530: unsigned int sum = 0;
  4687  00F220  0E00               	movlw	0
  4688  00F222  6E24               	movwf	diet_press@sum+1,c
  4689  00F224  0E00               	movlw	0
  4690  00F226  6E23               	movwf	diet_press@sum,c
  4691                           
  4692                           ;standbyMode.c: 531: unsigned int i = 0;
  4693  00F228  0E00               	movlw	0
  4694  00F22A  6E20               	movwf	diet_press@i+1,c
  4695  00F22C  0E00               	movlw	0
  4696  00F22E  6E1F               	movwf	diet_press@i,c
  4697                           
  4698                           ;standbyMode.c: 532: unsigned int dietTable[4] = {0, 0, 0, 0};
  4699  00F230  EE20  F056         	lfsr	2,diet_press@F3054
  4700  00F234  EE10  F026         	lfsr	1,diet_press@dietTable
  4701  00F238  0E07               	movlw	7
  4702  00F23A                     u3951:
  4703  00F23A  CFDB FFE3          	movff	plusw2,plusw1
  4704  00F23E  06E8               	decf	wreg,f,c
  4705  00F240  E2FC               	bc	u3951
  4706  00F242                     l303:
  4707  00F242  A281               	btfss	3969,1,c	;volatile
  4708  00F244  D7FE               	goto	l302
  4709                           
  4710                           ;standbyMode.c: 536: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4711  00F246  3881               	swapf	3969,w,c	;volatile
  4712  00F248  0B0F               	andlw	15
  4713  00F24A  0B0F               	andlw	15
  4714  00F24C  6E25               	movwf	diet_press@keypress,c
  4715  00F24E  B281               	btfsc	3969,1,c	;volatile
  4716  00F250  D7FE               	goto	l307
  4717                           
  4718                           ;standbyMode.c: 539: if(keypress == 14){
  4719  00F252  0E0E               	movlw	14
  4720  00F254  1825               	xorwf	diet_press@keypress,w,c
  4721  00F256  B4D8               	btfsc	status,2,c
  4722  00F258  D077               	goto	l310
  4723                           
  4724                           ;standbyMode.c: 542: else if (keypress == 12){
  4725                           
  4726                           ;standbyMode.c: 541: }
  4727                           
  4728                           ;standbyMode.c: 540: break;
  4729  00F25A  0E0C               	movlw	12
  4730  00F25C  1825               	xorwf	diet_press@keypress,w,c
  4731  00F25E  A4D8               	btfss	status,2,c
  4732  00F260  D02D               	goto	l312
  4733                           
  4734                           ;standbyMode.c: 543: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4735  00F262  0E01               	movlw	1
  4736  00F264  ECB7  F071         	call	_lcdInst
  4737  00F268  0EC3               	movlw	195
  4738  00F26A  6E1B               	movwf	??_diet_press& (0+255),c
  4739  00F26C  0ECD               	movlw	205
  4740  00F26E                     u5847:
  4741  00F26E  2EE8               	decfsz	wreg,f,c
  4742  00F270  D7FE               	bra	u5847
  4743  00F272  2E1B               	decfsz	??_diet_press& (0+255),f,c
  4744  00F274  D7FC               	bra	u5847
  4745  00F276  F000               	nop	
  4746                           
  4747                           ;standbyMode.c: 544: printf("Drawer %i diet:", drawer);
  4748  00F278  0E9B               	movlw	low STR_23
  4749  00F27A  6E0D               	movwf	printf@f,c
  4750  00F27C  0EFE               	movlw	high STR_23
  4751  00F27E  6E0E               	movwf	printf@f+1,c
  4752  00F280  C019  F00F         	movff	diet_press@drawer,?_printf+2
  4753  00F284  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  4754  00F288  EC71  F073         	call	_printf	;wreg free
  4755                           
  4756                           ;standbyMode.c: 545: lcdInst(0xC0);;
  4757  00F28C  0EC0               	movlw	192
  4758  00F28E  ECB7  F071         	call	_lcdInst
  4759                           
  4760                           ;standbyMode.c: 546: count = 0;
  4761  00F292  0E00               	movlw	0
  4762  00F294  6E22               	movwf	diet_press@count+1,c
  4763  00F296  0E00               	movlw	0
  4764  00F298  6E21               	movwf	diet_press@count,c
  4765                           
  4766                           ;standbyMode.c: 547: dietTable[0] = 0;
  4767  00F29A  0E00               	movlw	0
  4768  00F29C  6E27               	movwf	diet_press@dietTable+1,c
  4769  00F29E  0E00               	movlw	0
  4770  00F2A0  6E26               	movwf	diet_press@dietTable,c
  4771                           
  4772                           ;standbyMode.c: 548: dietTable[1] = 0;
  4773  00F2A2  0E00               	movlw	0
  4774  00F2A4  6E29               	movwf	diet_press@dietTable+3,c
  4775  00F2A6  0E00               	movlw	0
  4776  00F2A8  6E28               	movwf	diet_press@dietTable+2,c
  4777                           
  4778                           ;standbyMode.c: 549: dietTable[2] = 0;
  4779  00F2AA  0E00               	movlw	0
  4780  00F2AC  6E2B               	movwf	diet_press@dietTable+5,c
  4781  00F2AE  0E00               	movlw	0
  4782  00F2B0  6E2A               	movwf	diet_press@dietTable+4,c
  4783                           
  4784                           ;standbyMode.c: 550: dietTable[3] = 0;
  4785  00F2B2  0E00               	movlw	0
  4786  00F2B4  6E2D               	movwf	diet_press@dietTable+7,c
  4787  00F2B6  0E00               	movlw	0
  4788  00F2B8  6E2C               	movwf	diet_press@dietTable+6,c
  4789                           
  4790                           ;standbyMode.c: 551: }
  4791  00F2BA  D7C3               	goto	l302
  4792  00F2BC                     l312:
  4793                           
  4794                           ;standbyMode.c: 552: else if (count <= 3){
  4795  00F2BC  5022               	movf	diet_press@count+1,w,c
  4796  00F2BE  E1C1               	bnz	l303
  4797  00F2C0  0E04               	movlw	4
  4798  00F2C2  5C21               	subwf	diet_press@count,w,c
  4799  00F2C4  B0D8               	btfsc	status,0,c
  4800  00F2C6  D7BD               	goto	l302
  4801                           
  4802                           ;standbyMode.c: 553: if (keypress == 3 || keypress == 7){
  4803  00F2C8  0E03               	movlw	3
  4804  00F2CA  1825               	xorwf	diet_press@keypress,w,c
  4805  00F2CC  B4D8               	btfsc	status,2,c
  4806  00F2CE  D004               	goto	u4020
  4807  00F2D0  0E07               	movlw	7
  4808  00F2D2  1825               	xorwf	diet_press@keypress,w,c
  4809  00F2D4  A4D8               	btfss	status,2,c
  4810  00F2D6  D013               	goto	l315
  4811  00F2D8                     u4020:
  4812                           
  4813                           ;standbyMode.c: 554: putch(input[keypress]);
  4814  00F2D8  5025               	movf	diet_press@keypress,w,c
  4815  00F2DA  0D01               	mullw	1
  4816  00F2DC  0EC4               	movlw	low _input
  4817  00F2DE  24F3               	addwf	prodl,w,c
  4818  00F2E0  6EF6               	movwf	tblptrl,c
  4819  00F2E2  0EFD               	movlw	high _input
  4820  00F2E4  20F4               	addwfc	prodh,w,c
  4821  00F2E6  6EF7               	movwf	tblptrh,c
  4822  00F2E8                     	if	0	;There are less than 3 active tblptr bytes
  4823  00F2E8                     	endif
  4824  00F2E8  0008               	tblrd		*
  4825  00F2EA  50F5               	movf	tablat,w,c
  4826  00F2EC  ECC1  F071         	call	_putch
  4827                           
  4828                           ;standbyMode.c: 555: dietTable[count] = keypress;
  4829  00F2F0  5025               	movf	diet_press@keypress,w,c
  4830  00F2F2  6E1B               	movwf	??_diet_press& (0+255),c
  4831  00F2F4  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  4832  00F2F6  D01A               	goto	L43
  4833  00F2F8                     l3151:
  4834                           
  4835                           ;standbyMode.c: 556: count += 1;
  4836  00F2F8  4A21               	infsnz	diet_press@count,f,c
  4837  00F2FA  2A22               	incf	diet_press@count+1,f,c
  4838                           
  4839                           ;standbyMode.c: 557: }
  4840  00F2FC  D7A2               	goto	l302
  4841  00F2FE                     l315:
  4842                           
  4843                           ;standbyMode.c: 558: else if (keypress == 11){
  4844  00F2FE  0E0B               	movlw	11
  4845  00F300  1825               	xorwf	diet_press@keypress,w,c
  4846  00F302  A4D8               	btfss	status,2,c
  4847  00F304  D79E               	goto	l302
  4848                           
  4849                           ;standbyMode.c: 559: putch(input[keypress]);
  4850  00F306  5025               	movf	diet_press@keypress,w,c
  4851  00F308  0D01               	mullw	1
  4852  00F30A  0EC4               	movlw	low _input
  4853  00F30C  24F3               	addwf	prodl,w,c
  4854  00F30E  6EF6               	movwf	tblptrl,c
  4855  00F310  0EFD               	movlw	high _input
  4856  00F312  20F4               	addwfc	prodh,w,c
  4857  00F314  6EF7               	movwf	tblptrh,c
  4858  00F316                     	if	0	;There are less than 3 active tblptr bytes
  4859  00F316                     	endif
  4860  00F316  0008               	tblrd		*
  4861  00F318  50F5               	movf	tablat,w,c
  4862  00F31A  ECC1  F071         	call	_putch
  4863                           
  4864                           ;standbyMode.c: 560: dietTable[count] = keypress + 1;
  4865  00F31E  5025               	movf	diet_press@keypress,w,c
  4866  00F320  6E1B               	movwf	??_diet_press& (0+255),c
  4867  00F322  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  4868  00F324  0E01               	movlw	1
  4869  00F326  261B               	addwf	??_diet_press,f,c
  4870  00F328  0E00               	movlw	0
  4871  00F32A  221C               	addwfc	??_diet_press+1,f,c
  4872  00F32C                     L43:
  4873  00F32C  90D8               	bcf	status,0,c
  4874  00F32E  3421               	rlcf	diet_press@count,w,c
  4875  00F330  6ED9               	movwf	fsr2l,c
  4876  00F332  3422               	rlcf	diet_press@count+1,w,c
  4877  00F334  6EDA               	movwf	fsr2h,c
  4878  00F336  0E26               	movlw	low diet_press@dietTable
  4879  00F338  26D9               	addwf	fsr2l,f,c
  4880  00F33A  0E00               	movlw	high diet_press@dietTable
  4881  00F33C  22DA               	addwfc	fsr2h,f,c
  4882  00F33E  C01B  FFDE         	movff	??_diet_press,postinc2
  4883  00F342  C01C  FFDD         	movff	??_diet_press+1,postdec2
  4884  00F346  D7D8               	goto	l3151
  4885  00F348                     l310:
  4886                           
  4887                           ;standbyMode.c: 562: }
  4888                           ;standbyMode.c: 563: }
  4889                           ;standbyMode.c: 564: }
  4890                           ;standbyMode.c: 567: if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] == 0 &&
      +                           dietTable[3] == 0){
  4891  00F348  0E0C               	movlw	12
  4892  00F34A  1826               	xorwf	diet_press@dietTable,w,c
  4893  00F34C  1027               	iorwf	diet_press@dietTable+1,w,c
  4894  00F34E  A4D8               	btfss	status,2,c
  4895  00F350  D010               	goto	l321
  4896  00F352  5028               	movf	diet_press@dietTable+2,w,c
  4897  00F354  1029               	iorwf	diet_press@dietTable+3,w,c
  4898  00F356  A4D8               	btfss	status,2,c
  4899  00F358  D00C               	goto	l321
  4900  00F35A  502A               	movf	diet_press@dietTable+4,w,c
  4901  00F35C  102B               	iorwf	diet_press@dietTable+5,w,c
  4902  00F35E  A4D8               	btfss	status,2,c
  4903  00F360  D008               	goto	l321
  4904  00F362  502C               	movf	diet_press@dietTable+6,w,c
  4905  00F364  102D               	iorwf	diet_press@dietTable+7,w,c
  4906  00F366  A4D8               	btfss	status,2,c
  4907  00F368  D004               	goto	l321
  4908                           
  4909                           ;standbyMode.c: 568: sum = 12;
  4910  00F36A  0E00               	movlw	0
  4911  00F36C  6E24               	movwf	diet_press@sum+1,c
  4912  00F36E  0E0C               	movlw	12
  4913  00F370  D184               	goto	L42
  4914  00F372                     l321:
  4915                           
  4916                           ;standbyMode.c: 572: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  4917  00F372  0E03               	movlw	3
  4918  00F374  1826               	xorwf	diet_press@dietTable,w,c
  4919  00F376  1027               	iorwf	diet_press@dietTable+1,w,c
  4920  00F378  A4D8               	btfss	status,2,c
  4921  00F37A  D010               	goto	l323
  4922  00F37C  5028               	movf	diet_press@dietTable+2,w,c
  4923  00F37E  1029               	iorwf	diet_press@dietTable+3,w,c
  4924  00F380  A4D8               	btfss	status,2,c
  4925  00F382  D00C               	goto	l323
  4926  00F384  502A               	movf	diet_press@dietTable+4,w,c
  4927  00F386  102B               	iorwf	diet_press@dietTable+5,w,c
  4928  00F388  A4D8               	btfss	status,2,c
  4929  00F38A  D008               	goto	l323
  4930  00F38C  502C               	movf	diet_press@dietTable+6,w,c
  4931  00F38E  102D               	iorwf	diet_press@dietTable+7,w,c
  4932  00F390  A4D8               	btfss	status,2,c
  4933  00F392  D004               	goto	l323
  4934                           
  4935                           ;standbyMode.c: 573: sum = 3;
  4936  00F394  0E00               	movlw	0
  4937  00F396  6E24               	movwf	diet_press@sum+1,c
  4938  00F398  0E03               	movlw	3
  4939  00F39A  D16F               	goto	L42
  4940  00F39C                     l323:
  4941                           
  4942                           ;standbyMode.c: 577: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  4943  00F39C  0E07               	movlw	7
  4944  00F39E  1826               	xorwf	diet_press@dietTable,w,c
  4945  00F3A0  1027               	iorwf	diet_press@dietTable+1,w,c
  4946  00F3A2  A4D8               	btfss	status,2,c
  4947  00F3A4  D010               	goto	l325
  4948  00F3A6  5028               	movf	diet_press@dietTable+2,w,c
  4949  00F3A8  1029               	iorwf	diet_press@dietTable+3,w,c
  4950  00F3AA  A4D8               	btfss	status,2,c
  4951  00F3AC  D00C               	goto	l325
  4952  00F3AE  502A               	movf	diet_press@dietTable+4,w,c
  4953  00F3B0  102B               	iorwf	diet_press@dietTable+5,w,c
  4954  00F3B2  A4D8               	btfss	status,2,c
  4955  00F3B4  D008               	goto	l325
  4956  00F3B6  502C               	movf	diet_press@dietTable+6,w,c
  4957  00F3B8  102D               	iorwf	diet_press@dietTable+7,w,c
  4958  00F3BA  A4D8               	btfss	status,2,c
  4959  00F3BC  D004               	goto	l325
  4960                           
  4961                           ;standbyMode.c: 578: sum = 7;
  4962  00F3BE  0E00               	movlw	0
  4963  00F3C0  6E24               	movwf	diet_press@sum+1,c
  4964  00F3C2  0E07               	movlw	7
  4965  00F3C4  D15A               	goto	L42
  4966  00F3C6                     l325:
  4967                           
  4968                           ;standbyMode.c: 582: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  4969  00F3C6  0E03               	movlw	3
  4970  00F3C8  1826               	xorwf	diet_press@dietTable,w,c
  4971  00F3CA  1027               	iorwf	diet_press@dietTable+1,w,c
  4972  00F3CC  A4D8               	btfss	status,2,c
  4973  00F3CE  D011               	goto	l327
  4974  00F3D0  0E07               	movlw	7
  4975  00F3D2  1828               	xorwf	diet_press@dietTable+2,w,c
  4976  00F3D4  1029               	iorwf	diet_press@dietTable+3,w,c
  4977  00F3D6  A4D8               	btfss	status,2,c
  4978  00F3D8  D00C               	goto	l327
  4979  00F3DA  502A               	movf	diet_press@dietTable+4,w,c
  4980  00F3DC  102B               	iorwf	diet_press@dietTable+5,w,c
  4981  00F3DE  A4D8               	btfss	status,2,c
  4982  00F3E0  D008               	goto	l327
  4983  00F3E2  502C               	movf	diet_press@dietTable+6,w,c
  4984  00F3E4  102D               	iorwf	diet_press@dietTable+7,w,c
  4985  00F3E6  A4D8               	btfss	status,2,c
  4986  00F3E8  D004               	goto	l327
  4987                           
  4988                           ;standbyMode.c: 583: sum = 10;
  4989  00F3EA  0E00               	movlw	0
  4990  00F3EC  6E24               	movwf	diet_press@sum+1,c
  4991  00F3EE  0E0A               	movlw	10
  4992  00F3F0  D144               	goto	L42
  4993  00F3F2                     l327:
  4994                           
  4995                           ;standbyMode.c: 587: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  4996  00F3F2  0E03               	movlw	3
  4997  00F3F4  1826               	xorwf	diet_press@dietTable,w,c
  4998  00F3F6  1027               	iorwf	diet_press@dietTable+1,w,c
  4999  00F3F8  A4D8               	btfss	status,2,c
  5000  00F3FA  D011               	goto	l329
  5001  00F3FC  0E0C               	movlw	12
  5002  00F3FE  1828               	xorwf	diet_press@dietTable+2,w,c
  5003  00F400  1029               	iorwf	diet_press@dietTable+3,w,c
  5004  00F402  A4D8               	btfss	status,2,c
  5005  00F404  D00C               	goto	l329
  5006  00F406  502A               	movf	diet_press@dietTable+4,w,c
  5007  00F408  102B               	iorwf	diet_press@dietTable+5,w,c
  5008  00F40A  A4D8               	btfss	status,2,c
  5009  00F40C  D008               	goto	l329
  5010  00F40E  502C               	movf	diet_press@dietTable+6,w,c
  5011  00F410  102D               	iorwf	diet_press@dietTable+7,w,c
  5012  00F412  A4D8               	btfss	status,2,c
  5013  00F414  D004               	goto	l329
  5014                           
  5015                           ;standbyMode.c: 588: sum = 15;
  5016  00F416  0E00               	movlw	0
  5017  00F418  6E24               	movwf	diet_press@sum+1,c
  5018  00F41A  0E0F               	movlw	15
  5019  00F41C  D12E               	goto	L42
  5020  00F41E                     l329:
  5021                           
  5022                           ;standbyMode.c: 592: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5023  00F41E  0E07               	movlw	7
  5024  00F420  1826               	xorwf	diet_press@dietTable,w,c
  5025  00F422  1027               	iorwf	diet_press@dietTable+1,w,c
  5026  00F424  A4D8               	btfss	status,2,c
  5027  00F426  D011               	goto	l331
  5028  00F428  0E0C               	movlw	12
  5029  00F42A  1828               	xorwf	diet_press@dietTable+2,w,c
  5030  00F42C  1029               	iorwf	diet_press@dietTable+3,w,c
  5031  00F42E  A4D8               	btfss	status,2,c
  5032  00F430  D00C               	goto	l331
  5033  00F432  502A               	movf	diet_press@dietTable+4,w,c
  5034  00F434  102B               	iorwf	diet_press@dietTable+5,w,c
  5035  00F436  A4D8               	btfss	status,2,c
  5036  00F438  D008               	goto	l331
  5037  00F43A  502C               	movf	diet_press@dietTable+6,w,c
  5038  00F43C  102D               	iorwf	diet_press@dietTable+7,w,c
  5039  00F43E  A4D8               	btfss	status,2,c
  5040  00F440  D004               	goto	l331
  5041                           
  5042                           ;standbyMode.c: 593: sum = 19;
  5043  00F442  0E00               	movlw	0
  5044  00F444  6E24               	movwf	diet_press@sum+1,c
  5045  00F446  0E13               	movlw	19
  5046  00F448  D118               	goto	L42
  5047  00F44A                     l331:
  5048                           
  5049                           ;standbyMode.c: 597: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5050  00F44A  0E03               	movlw	3
  5051  00F44C  1826               	xorwf	diet_press@dietTable,w,c
  5052  00F44E  1027               	iorwf	diet_press@dietTable+1,w,c
  5053  00F450  A4D8               	btfss	status,2,c
  5054  00F452  D012               	goto	l333
  5055  00F454  0E03               	movlw	3
  5056  00F456  1828               	xorwf	diet_press@dietTable+2,w,c
  5057  00F458  1029               	iorwf	diet_press@dietTable+3,w,c
  5058  00F45A  A4D8               	btfss	status,2,c
  5059  00F45C  D00D               	goto	l333
  5060  00F45E  0E07               	movlw	7
  5061  00F460  182A               	xorwf	diet_press@dietTable+4,w,c
  5062  00F462  102B               	iorwf	diet_press@dietTable+5,w,c
  5063  00F464  A4D8               	btfss	status,2,c
  5064  00F466  D008               	goto	l333
  5065  00F468  502C               	movf	diet_press@dietTable+6,w,c
  5066  00F46A  102D               	iorwf	diet_press@dietTable+7,w,c
  5067  00F46C  A4D8               	btfss	status,2,c
  5068  00F46E  D004               	goto	l333
  5069                           
  5070                           ;standbyMode.c: 598: sum = 13;
  5071  00F470  0E00               	movlw	0
  5072  00F472  6E24               	movwf	diet_press@sum+1,c
  5073  00F474  0E0D               	movlw	13
  5074  00F476  D101               	goto	L42
  5075  00F478                     l333:
  5076                           
  5077                           ;standbyMode.c: 602: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5078  00F478  0E03               	movlw	3
  5079  00F47A  1826               	xorwf	diet_press@dietTable,w,c
  5080  00F47C  1027               	iorwf	diet_press@dietTable+1,w,c
  5081  00F47E  A4D8               	btfss	status,2,c
  5082  00F480  D012               	goto	l335
  5083  00F482  0E03               	movlw	3
  5084  00F484  1828               	xorwf	diet_press@dietTable+2,w,c
  5085  00F486  1029               	iorwf	diet_press@dietTable+3,w,c
  5086  00F488  A4D8               	btfss	status,2,c
  5087  00F48A  D00D               	goto	l335
  5088  00F48C  0E0C               	movlw	12
  5089  00F48E  182A               	xorwf	diet_press@dietTable+4,w,c
  5090  00F490  102B               	iorwf	diet_press@dietTable+5,w,c
  5091  00F492  A4D8               	btfss	status,2,c
  5092  00F494  D008               	goto	l335
  5093  00F496  502C               	movf	diet_press@dietTable+6,w,c
  5094  00F498  102D               	iorwf	diet_press@dietTable+7,w,c
  5095  00F49A  A4D8               	btfss	status,2,c
  5096  00F49C  D004               	goto	l335
  5097                           
  5098                           ;standbyMode.c: 603: sum = 18;
  5099  00F49E  0E00               	movlw	0
  5100  00F4A0  6E24               	movwf	diet_press@sum+1,c
  5101  00F4A2  0E12               	movlw	18
  5102  00F4A4  D0EA               	goto	L42
  5103  00F4A6                     l335:
  5104                           
  5105                           ;standbyMode.c: 607: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5106  00F4A6  0E03               	movlw	3
  5107  00F4A8  1826               	xorwf	diet_press@dietTable,w,c
  5108  00F4AA  1027               	iorwf	diet_press@dietTable+1,w,c
  5109  00F4AC  A4D8               	btfss	status,2,c
  5110  00F4AE  D012               	goto	l337
  5111  00F4B0  0E07               	movlw	7
  5112  00F4B2  1828               	xorwf	diet_press@dietTable+2,w,c
  5113  00F4B4  1029               	iorwf	diet_press@dietTable+3,w,c
  5114  00F4B6  A4D8               	btfss	status,2,c
  5115  00F4B8  D00D               	goto	l337
  5116  00F4BA  0E07               	movlw	7
  5117  00F4BC  182A               	xorwf	diet_press@dietTable+4,w,c
  5118  00F4BE  102B               	iorwf	diet_press@dietTable+5,w,c
  5119  00F4C0  A4D8               	btfss	status,2,c
  5120  00F4C2  D008               	goto	l337
  5121  00F4C4  502C               	movf	diet_press@dietTable+6,w,c
  5122  00F4C6  102D               	iorwf	diet_press@dietTable+7,w,c
  5123  00F4C8  A4D8               	btfss	status,2,c
  5124  00F4CA  D004               	goto	l337
  5125                           
  5126                           ;standbyMode.c: 608: sum = 17;
  5127  00F4CC  0E00               	movlw	0
  5128  00F4CE  6E24               	movwf	diet_press@sum+1,c
  5129  00F4D0  0E11               	movlw	17
  5130  00F4D2  D0D3               	goto	L42
  5131  00F4D4                     l337:
  5132                           
  5133                           ;standbyMode.c: 612: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  5134  00F4D4  0E03               	movlw	3
  5135  00F4D6  1826               	xorwf	diet_press@dietTable,w,c
  5136  00F4D8  1027               	iorwf	diet_press@dietTable+1,w,c
  5137  00F4DA  A4D8               	btfss	status,2,c
  5138  00F4DC  D012               	goto	l339
  5139  00F4DE  0E0C               	movlw	12
  5140  00F4E0  1828               	xorwf	diet_press@dietTable+2,w,c
  5141  00F4E2  1029               	iorwf	diet_press@dietTable+3,w,c
  5142  00F4E4  A4D8               	btfss	status,2,c
  5143  00F4E6  D00D               	goto	l339
  5144  00F4E8  0E0C               	movlw	12
  5145  00F4EA  182A               	xorwf	diet_press@dietTable+4,w,c
  5146  00F4EC  102B               	iorwf	diet_press@dietTable+5,w,c
  5147  00F4EE  A4D8               	btfss	status,2,c
  5148  00F4F0  D008               	goto	l339
  5149  00F4F2  502C               	movf	diet_press@dietTable+6,w,c
  5150  00F4F4  102D               	iorwf	diet_press@dietTable+7,w,c
  5151  00F4F6  A4D8               	btfss	status,2,c
  5152  00F4F8  D004               	goto	l339
  5153                           
  5154                           ;standbyMode.c: 613: sum = 27;
  5155  00F4FA  0E00               	movlw	0
  5156  00F4FC  6E24               	movwf	diet_press@sum+1,c
  5157  00F4FE  0E1B               	movlw	27
  5158  00F500  D0BC               	goto	L42
  5159  00F502                     l339:
  5160                           
  5161                           ;standbyMode.c: 617: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5162  00F502  0E03               	movlw	3
  5163  00F504  1826               	xorwf	diet_press@dietTable,w,c
  5164  00F506  1027               	iorwf	diet_press@dietTable+1,w,c
  5165  00F508  A4D8               	btfss	status,2,c
  5166  00F50A  D012               	goto	l341
  5167  00F50C  0E07               	movlw	7
  5168  00F50E  1828               	xorwf	diet_press@dietTable+2,w,c
  5169  00F510  1029               	iorwf	diet_press@dietTable+3,w,c
  5170  00F512  A4D8               	btfss	status,2,c
  5171  00F514  D00D               	goto	l341
  5172  00F516  0E0C               	movlw	12
  5173  00F518  182A               	xorwf	diet_press@dietTable+4,w,c
  5174  00F51A  102B               	iorwf	diet_press@dietTable+5,w,c
  5175  00F51C  A4D8               	btfss	status,2,c
  5176  00F51E  D008               	goto	l341
  5177  00F520  502C               	movf	diet_press@dietTable+6,w,c
  5178  00F522  102D               	iorwf	diet_press@dietTable+7,w,c
  5179  00F524  A4D8               	btfss	status,2,c
  5180  00F526  D004               	goto	l341
  5181                           
  5182                           ;standbyMode.c: 618: sum = 22;
  5183  00F528  0E00               	movlw	0
  5184  00F52A  6E24               	movwf	diet_press@sum+1,c
  5185  00F52C  0E16               	movlw	22
  5186  00F52E  D0A5               	goto	L42
  5187  00F530                     l341:
  5188                           
  5189                           ;standbyMode.c: 622: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5190  00F530  0E07               	movlw	7
  5191  00F532  1826               	xorwf	diet_press@dietTable,w,c
  5192  00F534  1027               	iorwf	diet_press@dietTable+1,w,c
  5193  00F536  A4D8               	btfss	status,2,c
  5194  00F538  D012               	goto	l343
  5195  00F53A  0E07               	movlw	7
  5196  00F53C  1828               	xorwf	diet_press@dietTable+2,w,c
  5197  00F53E  1029               	iorwf	diet_press@dietTable+3,w,c
  5198  00F540  A4D8               	btfss	status,2,c
  5199  00F542  D00D               	goto	l343
  5200  00F544  0E0C               	movlw	12
  5201  00F546  182A               	xorwf	diet_press@dietTable+4,w,c
  5202  00F548  102B               	iorwf	diet_press@dietTable+5,w,c
  5203  00F54A  A4D8               	btfss	status,2,c
  5204  00F54C  D008               	goto	l343
  5205  00F54E  502C               	movf	diet_press@dietTable+6,w,c
  5206  00F550  102D               	iorwf	diet_press@dietTable+7,w,c
  5207  00F552  A4D8               	btfss	status,2,c
  5208  00F554  D004               	goto	l343
  5209                           
  5210                           ;standbyMode.c: 623: sum = 26;
  5211  00F556  0E00               	movlw	0
  5212  00F558  6E24               	movwf	diet_press@sum+1,c
  5213  00F55A  0E1A               	movlw	26
  5214  00F55C  D08E               	goto	L42
  5215  00F55E                     l343:
  5216                           
  5217                           ;standbyMode.c: 627: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  5218  00F55E  0E07               	movlw	7
  5219  00F560  1826               	xorwf	diet_press@dietTable,w,c
  5220  00F562  1027               	iorwf	diet_press@dietTable+1,w,c
  5221  00F564  A4D8               	btfss	status,2,c
  5222  00F566  D012               	goto	l345
  5223  00F568  0E0C               	movlw	12
  5224  00F56A  1828               	xorwf	diet_press@dietTable+2,w,c
  5225  00F56C  1029               	iorwf	diet_press@dietTable+3,w,c
  5226  00F56E  A4D8               	btfss	status,2,c
  5227  00F570  D00D               	goto	l345
  5228  00F572  0E0C               	movlw	12
  5229  00F574  182A               	xorwf	diet_press@dietTable+4,w,c
  5230  00F576  102B               	iorwf	diet_press@dietTable+5,w,c
  5231  00F578  A4D8               	btfss	status,2,c
  5232  00F57A  D008               	goto	l345
  5233  00F57C  502C               	movf	diet_press@dietTable+6,w,c
  5234  00F57E  102D               	iorwf	diet_press@dietTable+7,w,c
  5235  00F580  A4D8               	btfss	status,2,c
  5236  00F582  D004               	goto	l345
  5237                           
  5238                           ;standbyMode.c: 628: sum = 31;
  5239  00F584  0E00               	movlw	0
  5240  00F586  6E24               	movwf	diet_press@sum+1,c
  5241  00F588  0E1F               	movlw	31
  5242  00F58A  D077               	goto	L42
  5243  00F58C                     l345:
  5244                           
  5245                           ;standbyMode.c: 632: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  5246  00F58C  0E03               	movlw	3
  5247  00F58E  1826               	xorwf	diet_press@dietTable,w,c
  5248  00F590  1027               	iorwf	diet_press@dietTable+1,w,c
  5249  00F592  A4D8               	btfss	status,2,c
  5250  00F594  D013               	goto	l347
  5251  00F596  0E03               	movlw	3
  5252  00F598  1828               	xorwf	diet_press@dietTable+2,w,c
  5253  00F59A  1029               	iorwf	diet_press@dietTable+3,w,c
  5254  00F59C  A4D8               	btfss	status,2,c
  5255  00F59E  D00E               	goto	l347
  5256  00F5A0  0E07               	movlw	7
  5257  00F5A2  182A               	xorwf	diet_press@dietTable+4,w,c
  5258  00F5A4  102B               	iorwf	diet_press@dietTable+5,w,c
  5259  00F5A6  A4D8               	btfss	status,2,c
  5260  00F5A8  D009               	goto	l347
  5261  00F5AA  0E0C               	movlw	12
  5262  00F5AC  182C               	xorwf	diet_press@dietTable+6,w,c
  5263  00F5AE  102D               	iorwf	diet_press@dietTable+7,w,c
  5264  00F5B0  A4D8               	btfss	status,2,c
  5265  00F5B2  D004               	goto	l347
  5266                           
  5267                           ;standbyMode.c: 633: sum = 25;
  5268  00F5B4  0E00               	movlw	0
  5269  00F5B6  6E24               	movwf	diet_press@sum+1,c
  5270  00F5B8  0E19               	movlw	25
  5271  00F5BA  D05F               	goto	L42
  5272  00F5BC                     l347:
  5273                           
  5274                           ;standbyMode.c: 637: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  5275  00F5BC  0E03               	movlw	3
  5276  00F5BE  1826               	xorwf	diet_press@dietTable,w,c
  5277  00F5C0  1027               	iorwf	diet_press@dietTable+1,w,c
  5278  00F5C2  A4D8               	btfss	status,2,c
  5279  00F5C4  D013               	goto	l349
  5280  00F5C6  0E07               	movlw	7
  5281  00F5C8  1828               	xorwf	diet_press@dietTable+2,w,c
  5282  00F5CA  1029               	iorwf	diet_press@dietTable+3,w,c
  5283  00F5CC  A4D8               	btfss	status,2,c
  5284  00F5CE  D00E               	goto	l349
  5285  00F5D0  0E07               	movlw	7
  5286  00F5D2  182A               	xorwf	diet_press@dietTable+4,w,c
  5287  00F5D4  102B               	iorwf	diet_press@dietTable+5,w,c
  5288  00F5D6  A4D8               	btfss	status,2,c
  5289  00F5D8  D009               	goto	l349
  5290  00F5DA  0E0C               	movlw	12
  5291  00F5DC  182C               	xorwf	diet_press@dietTable+6,w,c
  5292  00F5DE  102D               	iorwf	diet_press@dietTable+7,w,c
  5293  00F5E0  A4D8               	btfss	status,2,c
  5294  00F5E2  D004               	goto	l349
  5295                           
  5296                           ;standbyMode.c: 638: sum = 29;
  5297  00F5E4  0E00               	movlw	0
  5298  00F5E6  6E24               	movwf	diet_press@sum+1,c
  5299  00F5E8  0E1D               	movlw	29
  5300  00F5EA  D047               	goto	L42
  5301  00F5EC                     l349:
  5302                           
  5303                           ;standbyMode.c: 642: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  5304  00F5EC  0E03               	movlw	3
  5305  00F5EE  1826               	xorwf	diet_press@dietTable,w,c
  5306  00F5F0  1027               	iorwf	diet_press@dietTable+1,w,c
  5307  00F5F2  A4D8               	btfss	status,2,c
  5308  00F5F4  D013               	goto	l351
  5309  00F5F6  0E07               	movlw	7
  5310  00F5F8  1828               	xorwf	diet_press@dietTable+2,w,c
  5311  00F5FA  1029               	iorwf	diet_press@dietTable+3,w,c
  5312  00F5FC  A4D8               	btfss	status,2,c
  5313  00F5FE  D00E               	goto	l351
  5314  00F600  0E0C               	movlw	12
  5315  00F602  182A               	xorwf	diet_press@dietTable+4,w,c
  5316  00F604  102B               	iorwf	diet_press@dietTable+5,w,c
  5317  00F606  A4D8               	btfss	status,2,c
  5318  00F608  D009               	goto	l351
  5319  00F60A  0E0C               	movlw	12
  5320  00F60C  182C               	xorwf	diet_press@dietTable+6,w,c
  5321  00F60E  102D               	iorwf	diet_press@dietTable+7,w,c
  5322  00F610  A4D8               	btfss	status,2,c
  5323  00F612  D004               	goto	l351
  5324                           
  5325                           ;standbyMode.c: 643: sum = 34;
  5326  00F614  0E00               	movlw	0
  5327  00F616  6E24               	movwf	diet_press@sum+1,c
  5328  00F618  0E22               	movlw	34
  5329  00F61A  D02F               	goto	L42
  5330  00F61C                     l351:
  5331                           
  5332                           ;standbyMode.c: 647: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  5333  00F61C  0E03               	movlw	3
  5334  00F61E  1826               	xorwf	diet_press@dietTable,w,c
  5335  00F620  1027               	iorwf	diet_press@dietTable+1,w,c
  5336  00F622  A4D8               	btfss	status,2,c
  5337  00F624  D013               	goto	l353
  5338  00F626  0E0C               	movlw	12
  5339  00F628  1828               	xorwf	diet_press@dietTable+2,w,c
  5340  00F62A  1029               	iorwf	diet_press@dietTable+3,w,c
  5341  00F62C  A4D8               	btfss	status,2,c
  5342  00F62E  D00E               	goto	l353
  5343  00F630  0E0C               	movlw	12
  5344  00F632  182A               	xorwf	diet_press@dietTable+4,w,c
  5345  00F634  102B               	iorwf	diet_press@dietTable+5,w,c
  5346  00F636  A4D8               	btfss	status,2,c
  5347  00F638  D009               	goto	l353
  5348  00F63A  0E0C               	movlw	12
  5349  00F63C  182C               	xorwf	diet_press@dietTable+6,w,c
  5350  00F63E  102D               	iorwf	diet_press@dietTable+7,w,c
  5351  00F640  A4D8               	btfss	status,2,c
  5352  00F642  D004               	goto	l353
  5353                           
  5354                           ;standbyMode.c: 648: sum = 39;
  5355  00F644  0E00               	movlw	0
  5356  00F646  6E24               	movwf	diet_press@sum+1,c
  5357  00F648  0E27               	movlw	39
  5358  00F64A  D017               	goto	L42
  5359  00F64C                     l353:
  5360                           
  5361                           ;standbyMode.c: 652: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  5362  00F64C  0E07               	movlw	7
  5363  00F64E  1826               	xorwf	diet_press@dietTable,w,c
  5364  00F650  1027               	iorwf	diet_press@dietTable+1,w,c
  5365  00F652  A4D8               	btfss	status,2,c
  5366  00F654  D014               	goto	l355
  5367  00F656  0E0C               	movlw	12
  5368  00F658  1828               	xorwf	diet_press@dietTable+2,w,c
  5369  00F65A  1029               	iorwf	diet_press@dietTable+3,w,c
  5370  00F65C  A4D8               	btfss	status,2,c
  5371  00F65E  D00F               	goto	l355
  5372  00F660  0E0C               	movlw	12
  5373  00F662  182A               	xorwf	diet_press@dietTable+4,w,c
  5374  00F664  102B               	iorwf	diet_press@dietTable+5,w,c
  5375  00F666  A4D8               	btfss	status,2,c
  5376  00F668  D00A               	goto	l355
  5377  00F66A  0E0C               	movlw	12
  5378  00F66C  182C               	xorwf	diet_press@dietTable+6,w,c
  5379  00F66E  102D               	iorwf	diet_press@dietTable+7,w,c
  5380  00F670  A4D8               	btfss	status,2,c
  5381  00F672  D005               	goto	l355
  5382                           
  5383                           ;standbyMode.c: 653: sum = 43;
  5384  00F674  0E00               	movlw	0
  5385  00F676  6E24               	movwf	diet_press@sum+1,c
  5386  00F678  0E2B               	movlw	43
  5387  00F67A                     L42:
  5388  00F67A  6E23               	movwf	diet_press@sum,c
  5389                           
  5390                           ;standbyMode.c: 654: }
  5391  00F67C  D02A               	goto	l356
  5392  00F67E                     l355:
  5393                           
  5394                           ;standbyMode.c: 657: else{
  5395                           ;standbyMode.c: 658: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5396  00F67E  0E01               	movlw	1
  5397  00F680  ECB7  F071         	call	_lcdInst
  5398  00F684  0EC3               	movlw	195
  5399  00F686  6E1B               	movwf	??_diet_press& (0+255),c
  5400  00F688  0ECD               	movlw	205
  5401  00F68A                     u5857:
  5402  00F68A  2EE8               	decfsz	wreg,f,c
  5403  00F68C  D7FE               	bra	u5857
  5404  00F68E  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5405  00F690  D7FC               	bra	u5857
  5406  00F692  F000               	nop	
  5407                           
  5408                           ;standbyMode.c: 659: printf("Invalid diet!");
  5409  00F694  0E36               	movlw	low STR_25
  5410  00F696  6E0D               	movwf	printf@f,c
  5411  00F698  0EFF               	movlw	high STR_25
  5412  00F69A  6E0E               	movwf	printf@f+1,c
  5413  00F69C  EC71  F073         	call	_printf	;wreg free
  5414                           
  5415                           ;standbyMode.c: 660: lcdInst(0xC0);;
  5416  00F6A0  0EC0               	movlw	192
  5417  00F6A2  ECB7  F071         	call	_lcdInst
  5418                           
  5419                           ;standbyMode.c: 661: printf("Try again.");
  5420  00F6A6  0EA7               	movlw	low STR_22
  5421  00F6A8  6E0D               	movwf	printf@f,c
  5422  00F6AA  0EFF               	movlw	high STR_22
  5423  00F6AC  6E0E               	movwf	printf@f+1,c
  5424  00F6AE  EC71  F073         	call	_printf	;wreg free
  5425                           
  5426                           ;standbyMode.c: 662: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5427  00F6B2  0E33               	movlw	51
  5428  00F6B4  6E1C               	movwf	(??_diet_press+1)& (0+255),c
  5429  00F6B6  0EBB               	movlw	187
  5430  00F6B8  6E1B               	movwf	??_diet_press& (0+255),c
  5431  00F6BA  0EE0               	movlw	224
  5432  00F6BC                     u5867:
  5433  00F6BC  2EE8               	decfsz	wreg,f,c
  5434  00F6BE  D7FE               	bra	u5867
  5435  00F6C0  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5436  00F6C2  D7FC               	bra	u5867
  5437  00F6C4  2E1C               	decfsz	(??_diet_press+1)& (0+255),f,c
  5438  00F6C6  D7FA               	bra	u5867
  5439                           
  5440                           ;standbyMode.c: 663: sum = 0;
  5441  00F6C8  0E00               	movlw	0
  5442  00F6CA  6E24               	movwf	diet_press@sum+1,c
  5443  00F6CC  0E00               	movlw	0
  5444  00F6CE  6E23               	movwf	diet_press@sum,c
  5445                           
  5446                           ;standbyMode.c: 664: goto START;
  5447  00F6D0  D587               	goto	_diet_press
  5448  00F6D2                     l356:
  5449                           
  5450                           ;standbyMode.c: 665: }
  5451                           ;standbyMode.c: 666: return sum;
  5452  00F6D2  C023  F019         	movff	diet_press@sum,?_diet_press
  5453  00F6D6  C024  F01A         	movff	diet_press@sum+1,?_diet_press+1
  5454  00F6DA  0012               	return		;funcret
  5455  00F6DC                     __end_of_diet_press:
  5456                           	opt stack 0
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           plusw1	equ	0xFE3
  5466                           postinc2	equ	0xFDE
  5467                           postdec2	equ	0xFDD
  5468                           plusw2	equ	0xFDB
  5469                           fsr2h	equ	0xFDA
  5470                           fsr2l	equ	0xFD9
  5471                           status	equ	0xFD8
  5472                           
  5473 ;; *************** function _printf *****************
  5474 ;; Defined at:
  5475 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5478 ;;		 -> STR_56(11), STR_55(13), STR_54(11), STR_53(13), 
  5479 ;;		 -> STR_52(11), STR_51(3), STR_50(8), STR_49(15), 
  5480 ;;		 -> STR_48(16), STR_47(10), STR_46(3), STR_45(8), 
  5481 ;;		 -> STR_44(15), STR_43(16), STR_42(10), STR_41(16), 
  5482 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
  5483 ;;		 -> STR_36(14), STR_35(11), STR_34(11), STR_33(16), 
  5484 ;;		 -> STR_32(16), STR_31(17), STR_30(17), STR_29(8), 
  5485 ;;		 -> STR_28(15), STR_27(15), STR_26(11), STR_25(14), 
  5486 ;;		 -> STR_24(16), STR_23(16), STR_22(11), STR_21(14), 
  5487 ;;		 -> STR_20(16), STR_19(16), STR_18(16), STR_17(13), 
  5488 ;;		 -> STR_16(13), STR_15(15), STR_14(16), STR_13(16), 
  5489 ;;		 -> STR_12(18), STR_11(6), STR_10(16), STR_9(5), 
  5490 ;;		 -> STR_8(16), STR_7(9), STR_6(17), STR_5(7), 
  5491 ;;		 -> STR_4(9), STR_3(17), STR_2(11), STR_1(16), 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  tmpval          4    0        struct .
  5494 ;;  cp              3    0        PTR const unsigned char 
  5495 ;;  val             2   21[COMRAM] unsigned int 
  5496 ;;  ap              2   17[COMRAM] PTR void [1]
  5497 ;;		 -> ?_printf(2), 
  5498 ;;  len             2    0        unsigned int 
  5499 ;;  c               1   23[COMRAM] char 
  5500 ;;  prec            1   20[COMRAM] char 
  5501 ;;  flag            1   19[COMRAM] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  2   12[COMRAM] int 
  5504 ;; Registers used:
  5505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5511 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;Total ram usage:       12 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    2
  5518 ;; This function calls:
  5519 ;;		___lwdiv
  5520 ;;		___lwmod
  5521 ;;		_putch
  5522 ;; This function is called by:
  5523 ;;		_viewLogs
  5524 ;;		_food_press
  5525 ;;		_diet_press
  5526 ;;		_which_drawer
  5527 ;;		_standbyMode
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text9
  5532  00E6E2                     __ptext9:
  5533                           	opt stack 0
  5534  00E6E2                     _printf:
  5535                           	opt stack 26
  5536                           
  5537                           ;doprnt.c: 466: va_list ap;
  5538                           ;doprnt.c: 499: signed char c;
  5539                           ;doprnt.c: 506: signed char prec;
  5540                           ;doprnt.c: 508: unsigned char flag;
  5541                           ;doprnt.c: 523: union {
  5542                           ;doprnt.c: 524: unsigned long vd;
  5543                           ;doprnt.c: 525: double integ;
  5544                           ;doprnt.c: 526: } tmpval;
  5545                           ;doprnt.c: 528: unsigned int val;
  5546                           ;doprnt.c: 529: unsigned len;
  5547                           ;doprnt.c: 530: const char * cp;
  5548                           ;doprnt.c: 533: *ap = __va_start();
  5549                           
  5550                           ;incstack = 0
  5551  00E6E2  0E0F               	movlw	low (?_printf+2)
  5552  00E6E4  6E12               	movwf	printf@ap,c
  5553  00E6E6  0E00               	movlw	high (?_printf+2)
  5554  00E6E8  6E13               	movwf	printf@ap+1,c
  5555                           
  5556                           ;doprnt.c: 536: while(c = *f++) {
  5557  00E6EA  D07D               	goto	u3690
  5558  00E6EC                     
  5559                           ;doprnt.c: 538: if(c != '%')
  5560  00E6EC  0E25               	movlw	37
  5561  00E6EE  1818               	xorwf	printf@c,w,c
  5562  00E6F0  B4D8               	btfsc	status,2,c
  5563  00E6F2  D004               	goto	l478
  5564                           
  5565                           ;doprnt.c: 540: {
  5566                           ;doprnt.c: 541: (putch(c) );
  5567  00E6F4  5018               	movf	printf@c,w,c
  5568  00E6F6  ECC1  F071         	call	_putch
  5569                           
  5570                           ;doprnt.c: 542: continue;
  5571  00E6FA  D075               	goto	u3690
  5572  00E6FC                     l478:
  5573                           
  5574                           ;doprnt.c: 543: }
  5575                           ;doprnt.c: 548: flag = 0;
  5576  00E6FC  0E00               	movlw	0
  5577  00E6FE  6E14               	movwf	printf@flag,c
  5578                           
  5579                           ;doprnt.c: 822: }
  5580                           
  5581                           ;doprnt.c: 813: continue;
  5582                           
  5583                           ;doprnt.c: 802: default:
  5584                           
  5585                           ;doprnt.c: 698: case 'i':
  5586                           ;doprnt.c: 699: break;
  5587                           
  5588                           ;doprnt.c: 697: case 'd':
  5589                           
  5590                           ;doprnt.c: 638: goto alldone;
  5591                           
  5592                           ;doprnt.c: 637: case 0:
  5593                           
  5594                           ;doprnt.c: 635: switch(c = *f++) {
  5595  00E700  C00D  FFF6         	movff	printf@f,tblptrl
  5596  00E704  C00E  FFF7         	movff	printf@f+1,tblptrh
  5597  00E708  4A0D               	infsnz	printf@f,f,c
  5598  00E70A  2A0E               	incf	printf@f+1,f,c
  5599  00E70C                     	if	0	;tblptru may be non-zero
  5600  00E70C                     	endif
  5601  00E70C                     	if	0	;tblptru may be non-zero
  5602  00E70C                     	endif
  5603  00E70C  0008               	tblrd		*
  5604  00E70E  CFF5 F018          	movff	tablat,printf@c
  5605  00E712  5018               	movf	printf@c,w,c
  5606                           
  5607                           ; Switch size 1, requested type "space"
  5608                           ; Number of cases is 3, Range of values is 0 to 105
  5609                           ; switch strategies available:
  5610                           ; Name         Instructions Cycles
  5611                           ; simple_byte           10     6 (average)
  5612                           ;	Chosen strategy is simple_byte
  5613  00E714  0A00               	xorlw	0	; case 0
  5614  00E716  B4D8               	btfsc	status,2,c
  5615  00E718  0012               	return	
  5616  00E71A  0A64               	xorlw	100	; case 100
  5617  00E71C  B4D8               	btfsc	status,2,c
  5618  00E71E  D003               	goto	l484
  5619  00E720  0A0D               	xorlw	13	; case 105
  5620  00E722  A4D8               	btfss	status,2,c
  5621  00E724  D060               	goto	u3690
  5622  00E726                     l484:
  5623                           
  5624                           ;doprnt.c: 1253: {
  5625                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5626  00E726  C012  FFD9         	movff	printf@ap,fsr2l
  5627  00E72A  C013  FFDA         	movff	printf@ap+1,fsr2h
  5628  00E72E  CFDE F016          	movff	postinc2,printf@val
  5629  00E732  CFDD F017          	movff	postdec2,printf@val+1
  5630  00E736  0E02               	movlw	2
  5631  00E738  2612               	addwf	printf@ap,f,c
  5632  00E73A  0E00               	movlw	0
  5633  00E73C  2213               	addwfc	printf@ap+1,f,c
  5634                           
  5635                           ;doprnt.c: 1261: if((int)val < 0) {
  5636  00E73E  AE17               	btfss	printf@val+1,7,c
  5637  00E740  D006               	goto	l486
  5638                           
  5639                           ;doprnt.c: 1262: flag |= 0x03;
  5640  00E742  0E03               	movlw	3
  5641  00E744  1214               	iorwf	printf@flag,f,c
  5642                           
  5643                           ;doprnt.c: 1263: val = -val;
  5644  00E746  6C16               	negf	printf@val,c
  5645  00E748  1E17               	comf	printf@val+1,f,c
  5646  00E74A  B0D8               	btfsc	status,0,c
  5647  00E74C  2A17               	incf	printf@val+1,f,c
  5648  00E74E                     l486:
  5649                           
  5650                           ;doprnt.c: 1264: }
  5651                           ;doprnt.c: 1266: }
  5652                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5653  00E74E  0E01               	movlw	1
  5654  00E750  6E18               	movwf	printf@c,c
  5655  00E752                     l2799:
  5656  00E752  0E05               	movlw	5
  5657  00E754  1818               	xorwf	printf@c,w,c
  5658  00E756  B4D8               	btfsc	status,2,c
  5659  00E758  D012               	goto	u3670
  5660                           
  5661                           ;doprnt.c: 1306: if(val < dpowers[c])
  5662  00E75A  5018               	movf	printf@c,w,c
  5663  00E75C  0D02               	mullw	2
  5664  00E75E  0ED5               	movlw	low _dpowers
  5665  00E760  24F3               	addwf	prodl,w,c
  5666  00E762  6EF6               	movwf	tblptrl,c
  5667  00E764  0EFD               	movlw	high _dpowers
  5668  00E766  20F4               	addwfc	prodh,w,c
  5669  00E768  6EF7               	movwf	tblptrh,c
  5670  00E76A                     	if	0	;There are less than 3 active tblptr bytes
  5671  00E76A                     	endif
  5672  00E76A  0009               	tblrd		*+
  5673  00E76C  50F5               	movf	tablat,w,c
  5674  00E76E  5C16               	subwf	printf@val,w,c
  5675  00E770  0009               	tblrd		*+
  5676  00E772  50F5               	movf	tablat,w,c
  5677  00E774  5817               	subwfb	printf@val+1,w,c
  5678  00E776  A0D8               	btfss	status,0,c
  5679  00E778  D002               	goto	u3670
  5680                           
  5681                           ;doprnt.c: 1307: break;
  5682  00E77A  2A18               	incf	printf@c,f,c
  5683  00E77C  D7EA               	goto	l2799
  5684  00E77E                     u3670:
  5685                           
  5686                           ;doprnt.c: 1422: {
  5687                           ;doprnt.c: 1438: if(flag & 0x03)
  5688  00E77E  C014  F011         	movff	printf@flag,??_printf
  5689  00E782  0E03               	movlw	3
  5690  00E784  1611               	andwf	??_printf,f,c
  5691  00E786  B4D8               	btfsc	status,2,c
  5692  00E788  D003               	goto	l490
  5693                           
  5694                           ;doprnt.c: 1439: (putch('-') );
  5695  00E78A  0E2D               	movlw	45
  5696  00E78C  ECC1  F071         	call	_putch
  5697  00E790                     l490:
  5698                           
  5699                           ;doprnt.c: 1469: }
  5700                           ;doprnt.c: 1472: prec = c;
  5701  00E790  C018  F015         	movff	printf@c,printf@prec
  5702                           
  5703                           ;doprnt.c: 1474: while(prec--) {
  5704  00E794  D024               	goto	l491
  5705  00E796                     
  5706                           ;doprnt.c: 1478: {
  5707                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5708  00E796  5015               	movf	printf@prec,w,c
  5709  00E798  0D02               	mullw	2
  5710  00E79A  0ED5               	movlw	low _dpowers
  5711  00E79C  24F3               	addwf	prodl,w,c
  5712  00E79E  6EF6               	movwf	tblptrl,c
  5713  00E7A0  0EFD               	movlw	high _dpowers
  5714  00E7A2  20F4               	addwfc	prodh,w,c
  5715  00E7A4  6EF7               	movwf	tblptrh,c
  5716  00E7A6                     	if	0	;There are less than 3 active tblptr bytes
  5717  00E7A6                     	endif
  5718  00E7A6  0009               	tblrd		*+
  5719  00E7A8  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5720  00E7AC  000A               	tblrd		*-
  5721  00E7AE  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5722  00E7B2  C016  F001         	movff	printf@val,___lwdiv@dividend
  5723  00E7B6  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  5724  00E7BA  EC39  F072         	call	___lwdiv	;wreg free
  5725  00E7BE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5726  00E7C2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5727  00E7C6  0E00               	movlw	0
  5728  00E7C8  6E0B               	movwf	___lwmod@divisor+1,c
  5729  00E7CA  0E0A               	movlw	10
  5730  00E7CC  6E0A               	movwf	___lwmod@divisor,c
  5731  00E7CE  ECF2  F071         	call	___lwmod	;wreg free
  5732  00E7D2  5008               	movf	?___lwmod,w,c
  5733  00E7D4  0F30               	addlw	48
  5734  00E7D6  6E18               	movwf	printf@c,c
  5735                           
  5736                           ;doprnt.c: 1523: }
  5737                           ;doprnt.c: 1524: (putch(c) );
  5738  00E7D8  5018               	movf	printf@c,w,c
  5739  00E7DA  ECC1  F071         	call	_putch
  5740  00E7DE                     l491:
  5741  00E7DE  0615               	decf	printf@prec,f,c
  5742  00E7E0  2815               	incf	printf@prec,w,c
  5743  00E7E2  A4D8               	btfss	status,2,c
  5744  00E7E4  D7D8               	goto	l492
  5745  00E7E6                     u3690:
  5746  00E7E6  C00D  FFF6         	movff	printf@f,tblptrl
  5747  00E7EA  C00E  FFF7         	movff	printf@f+1,tblptrh
  5748  00E7EE  4A0D               	infsnz	printf@f,f,c
  5749  00E7F0  2A0E               	incf	printf@f+1,f,c
  5750  00E7F2                     	if	0	;tblptru may be non-zero
  5751  00E7F2                     	endif
  5752  00E7F2                     	if	0	;tblptru may be non-zero
  5753  00E7F2                     	endif
  5754  00E7F2  0008               	tblrd		*
  5755  00E7F4  CFF5 F018          	movff	tablat,printf@c
  5756  00E7F8  5018               	movf	printf@c,w,c
  5757  00E7FA  B4D8               	btfsc	status,2,c
  5758  00E7FC  0012               	return	
  5759  00E7FE  D776               	goto	l477
  5760  00E800                     __end_of_printf:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           postinc0	equ	0xFEE
  5769                           wreg	equ	0xFE8
  5770                           plusw1	equ	0xFE3
  5771                           postinc2	equ	0xFDE
  5772                           postdec2	equ	0xFDD
  5773                           plusw2	equ	0xFDB
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _putch *****************
  5779 ;; Defined at:
  5780 ;;		line 73 in file "standbyMode.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  data            1    wreg     unsigned char 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  data            1    2[COMRAM] unsigned char 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  1    wreg      void 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0, cstack
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;Total ram usage:        1 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    1
  5801 ;; This function calls:
  5802 ;;		_lcdNibble
  5803 ;; This function is called by:
  5804 ;;		_viewLogs
  5805 ;;		_food_press
  5806 ;;		_diet_press
  5807 ;;		_which_drawer
  5808 ;;		_printf
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text10
  5813  00E382                     __ptext10:
  5814                           	opt stack 0
  5815  00E382                     _putch:
  5816                           	opt stack 27
  5817                           
  5818                           ;incstack = 0
  5819                           ;putch@data stored from wreg
  5820  00E382  6E03               	movwf	putch@data,c
  5821                           
  5822                           ;standbyMode.c: 81: LATDbits.LATD2 = 1;
  5823  00E384  848C               	bsf	3980,2,c	;volatile
  5824                           
  5825                           ;standbyMode.c: 82: lcdNibble(data);
  5826  00E386  5003               	movf	putch@data,w,c
  5827  00E388  EC62  F072         	call	_lcdNibble
  5828                           
  5829                           ;standbyMode.c: 83: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5830  00E38C  0EC8               	movlw	200
  5831  00E38E                     u5877:
  5832  00E38E  D000               	nop2	
  5833  00E390  2EE8               	decfsz	wreg,f,c
  5834  00E392  D7FD               	bra	u5877
  5835  00E394  0012               	return		;funcret
  5836  00E396                     __end_of_putch:
  5837                           	opt stack 0
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           plusw1	equ	0xFE3
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           plusw2	equ	0xFDB
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function ___lwmod *****************
  5855 ;; Defined at:
  5856 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  dividend        2    7[COMRAM] unsigned int 
  5859 ;;  divisor         2    9[COMRAM] unsigned int 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  counter         1   11[COMRAM] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  2    7[COMRAM] unsigned int 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;Total ram usage:        5 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_printf
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text11
  5885  00E3E4                     __ptext11:
  5886                           	opt stack 0
  5887  00E3E4                     ___lwmod:
  5888                           	opt stack 27
  5889                           
  5890                           ;incstack = 0
  5891  00E3E4  500A               	movf	___lwmod@divisor,w,c
  5892  00E3E6  100B               	iorwf	___lwmod@divisor+1,w,c
  5893  00E3E8  B4D8               	btfsc	status,2,c
  5894  00E3EA  D018               	goto	l914
  5895  00E3EC  0E01               	movlw	1
  5896  00E3EE  6E0C               	movwf	___lwmod@counter,c
  5897  00E3F0  D004               	goto	l909
  5898  00E3F2  90D8               	bcf	status,0,c
  5899  00E3F4  360A               	rlcf	___lwmod@divisor,f,c
  5900  00E3F6  360B               	rlcf	___lwmod@divisor+1,f,c
  5901  00E3F8  2A0C               	incf	___lwmod@counter,f,c
  5902  00E3FA                     l909:
  5903  00E3FA  AE0B               	btfss	___lwmod@divisor+1,7,c
  5904  00E3FC  D7FA               	goto	l910
  5905  00E3FE                     u2700:
  5906  00E3FE  500A               	movf	___lwmod@divisor,w,c
  5907  00E400  5C08               	subwf	___lwmod@dividend,w,c
  5908  00E402  500B               	movf	___lwmod@divisor+1,w,c
  5909  00E404  5809               	subwfb	___lwmod@dividend+1,w,c
  5910  00E406  A0D8               	btfss	status,0,c
  5911  00E408  D004               	goto	l913
  5912  00E40A  500A               	movf	___lwmod@divisor,w,c
  5913  00E40C  5E08               	subwf	___lwmod@dividend,f,c
  5914  00E40E  500B               	movf	___lwmod@divisor+1,w,c
  5915  00E410  5A09               	subwfb	___lwmod@dividend+1,f,c
  5916  00E412                     l913:
  5917  00E412  90D8               	bcf	status,0,c
  5918  00E414  320B               	rrcf	___lwmod@divisor+1,f,c
  5919  00E416  320A               	rrcf	___lwmod@divisor,f,c
  5920  00E418  2E0C               	decfsz	___lwmod@counter,f,c
  5921  00E41A  D7F1               	goto	u2700
  5922  00E41C                     l914:
  5923  00E41C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5924  00E420  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5925  00E424  0012               	return		;funcret
  5926  00E426                     __end_of___lwmod:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           plusw1	equ	0xFE3
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           plusw2	equ	0xFDB
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function ___lwdiv *****************
  5945 ;; Defined at:
  5946 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  dividend        2    0[COMRAM] unsigned int 
  5949 ;;  divisor         2    2[COMRAM] unsigned int 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  quotient        2    4[COMRAM] unsigned int 
  5952 ;;  counter         1    6[COMRAM] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  2    0[COMRAM] unsigned int 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:        7 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_printf
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text12
  5976  00E472                     __ptext12:
  5977                           	opt stack 0
  5978  00E472                     ___lwdiv:
  5979                           	opt stack 27
  5980                           
  5981                           ;incstack = 0
  5982  00E472  0E00               	movlw	0
  5983  00E474  6E06               	movwf	___lwdiv@quotient+1,c
  5984  00E476  0E00               	movlw	0
  5985  00E478  6E05               	movwf	___lwdiv@quotient,c
  5986  00E47A  5003               	movf	___lwdiv@divisor,w,c
  5987  00E47C  1004               	iorwf	___lwdiv@divisor+1,w,c
  5988  00E47E  B4D8               	btfsc	status,2,c
  5989  00E480  D01C               	goto	l904
  5990  00E482  0E01               	movlw	1
  5991  00E484  6E07               	movwf	___lwdiv@counter,c
  5992  00E486  D004               	goto	l899
  5993  00E488  90D8               	bcf	status,0,c
  5994  00E48A  3603               	rlcf	___lwdiv@divisor,f,c
  5995  00E48C  3604               	rlcf	___lwdiv@divisor+1,f,c
  5996  00E48E  2A07               	incf	___lwdiv@counter,f,c
  5997  00E490                     l899:
  5998  00E490  AE04               	btfss	___lwdiv@divisor+1,7,c
  5999  00E492  D7FA               	goto	l900
  6000  00E494                     u2670:
  6001  00E494  90D8               	bcf	status,0,c
  6002  00E496  3605               	rlcf	___lwdiv@quotient,f,c
  6003  00E498  3606               	rlcf	___lwdiv@quotient+1,f,c
  6004  00E49A  5003               	movf	___lwdiv@divisor,w,c
  6005  00E49C  5C01               	subwf	___lwdiv@dividend,w,c
  6006  00E49E  5004               	movf	___lwdiv@divisor+1,w,c
  6007  00E4A0  5802               	subwfb	___lwdiv@dividend+1,w,c
  6008  00E4A2  A0D8               	btfss	status,0,c
  6009  00E4A4  D005               	goto	l903
  6010  00E4A6  5003               	movf	___lwdiv@divisor,w,c
  6011  00E4A8  5E01               	subwf	___lwdiv@dividend,f,c
  6012  00E4AA  5004               	movf	___lwdiv@divisor+1,w,c
  6013  00E4AC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6014  00E4AE  8005               	bsf	___lwdiv@quotient,0,c
  6015  00E4B0                     l903:
  6016  00E4B0  90D8               	bcf	status,0,c
  6017  00E4B2  3204               	rrcf	___lwdiv@divisor+1,f,c
  6018  00E4B4  3203               	rrcf	___lwdiv@divisor,f,c
  6019  00E4B6  2E07               	decfsz	___lwdiv@counter,f,c
  6020  00E4B8  D7ED               	goto	u2670
  6021  00E4BA                     l904:
  6022  00E4BA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6023  00E4BE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6024  00E4C2  0012               	return		;funcret
  6025  00E4C4                     __end_of___lwdiv:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           postinc0	equ	0xFEE
  6034                           wreg	equ	0xFE8
  6035                           plusw1	equ	0xFE3
  6036                           postinc2	equ	0xFDE
  6037                           postdec2	equ	0xFDD
  6038                           plusw2	equ	0xFDB
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _initLCD *****************
  6044 ;; Defined at:
  6045 ;;		line 28 in file "standbyMode.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        1 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    2
  6066 ;; This function calls:
  6067 ;;		_lcdInst
  6068 ;; This function is called by:
  6069 ;;		_main
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text13
  6074  00E426                     __ptext13:
  6075                           	opt stack 0
  6076  00E426                     _initLCD:
  6077                           	opt stack 28
  6078                           
  6079                           ;standbyMode.c: 36: _delay((unsigned long)((15)*(40000000/4000.0)));
  6080                           
  6081                           ;incstack = 0
  6082  00E426  0EC3               	movlw	195
  6083  00E428  6E04               	movwf	??_initLCD& (0+255),c
  6084  00E42A  0ECD               	movlw	205
  6085  00E42C                     u5887:
  6086  00E42C  2EE8               	decfsz	wreg,f,c
  6087  00E42E  D7FE               	bra	u5887
  6088  00E430  2E04               	decfsz	??_initLCD& (0+255),f,c
  6089  00E432  D7FC               	bra	u5887
  6090  00E434  F000               	nop	
  6091                           
  6092                           ;standbyMode.c: 37: lcdInst(0b00110011);
  6093  00E436  0E33               	movlw	51
  6094  00E438  ECB7  F071         	call	_lcdInst
  6095                           
  6096                           ;standbyMode.c: 38: lcdInst(0b00110010);
  6097  00E43C  0E32               	movlw	50
  6098  00E43E  ECB7  F071         	call	_lcdInst
  6099                           
  6100                           ;standbyMode.c: 39: lcdInst(0b00101000);
  6101  00E442  0E28               	movlw	40
  6102  00E444  ECB7  F071         	call	_lcdInst
  6103                           
  6104                           ;standbyMode.c: 40: lcdInst(0b00001111);
  6105  00E448  0E0F               	movlw	15
  6106  00E44A  ECB7  F071         	call	_lcdInst
  6107                           
  6108                           ;standbyMode.c: 41: lcdInst(0b00000110);
  6109  00E44E  0E06               	movlw	6
  6110  00E450  ECB7  F071         	call	_lcdInst
  6111                           
  6112                           ;standbyMode.c: 42: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6113  00E454  0E01               	movlw	1
  6114  00E456  ECB7  F071         	call	_lcdInst
  6115  00E45A  0EC3               	movlw	195
  6116  00E45C  6E04               	movwf	??_initLCD& (0+255),c
  6117  00E45E  0ECD               	movlw	205
  6118  00E460                     u5897:
  6119  00E460  2EE8               	decfsz	wreg,f,c
  6120  00E462  D7FE               	bra	u5897
  6121  00E464  2E04               	decfsz	??_initLCD& (0+255),f,c
  6122  00E466  D7FC               	bra	u5897
  6123  00E468  F000               	nop	
  6124                           
  6125                           ;standbyMode.c: 45: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6126  00E46A  0E0F               	movlw	15
  6127  00E46C  ECB7  F071         	call	_lcdInst
  6128  00E470  0012               	return		;funcret
  6129  00E472                     __end_of_initLCD:
  6130                           	opt stack 0
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           plusw1	equ	0xFE3
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           plusw2	equ	0xFDB
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function _lcdInst *****************
  6148 ;; Defined at:
  6149 ;;		line 14 in file "standbyMode.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  data            1    wreg     unsigned char 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  data            1    2[COMRAM] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    1
  6170 ;; This function calls:
  6171 ;;		_lcdNibble
  6172 ;; This function is called by:
  6173 ;;		_initLCD
  6174 ;;		_viewLogs
  6175 ;;		_food_press
  6176 ;;		_diet_press
  6177 ;;		_which_drawer
  6178 ;;		_standbyMode
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text14
  6183  00E36E                     __ptext14:
  6184                           	opt stack 0
  6185  00E36E                     _lcdInst:
  6186                           	opt stack 27
  6187                           
  6188                           ;incstack = 0
  6189                           ;lcdInst@data stored from wreg
  6190  00E36E  6E03               	movwf	lcdInst@data,c
  6191                           
  6192                           ;standbyMode.c: 22: LATDbits.LATD2 = 0;
  6193  00E370  948C               	bcf	3980,2,c	;volatile
  6194                           
  6195                           ;standbyMode.c: 23: lcdNibble(data);
  6196  00E372  5003               	movf	lcdInst@data,w,c
  6197  00E374  EC62  F072         	call	_lcdNibble
  6198                           
  6199                           ;standbyMode.c: 24: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6200  00E378  0EC8               	movlw	200
  6201  00E37A                     u5907:
  6202  00E37A  D000               	nop2	
  6203  00E37C  2EE8               	decfsz	wreg,f,c
  6204  00E37E  D7FD               	bra	u5907
  6205  00E380  0012               	return		;funcret
  6206  00E382                     __end_of_lcdInst:
  6207                           	opt stack 0
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           postinc0	equ	0xFEE
  6215                           wreg	equ	0xFE8
  6216                           plusw1	equ	0xFE3
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           plusw2	equ	0xFDB
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _lcdNibble *****************
  6225 ;; Defined at:
  6226 ;;		line 49 in file "standbyMode.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;  data            1    wreg     unsigned char 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  data            1    1[COMRAM] unsigned char 
  6231 ;;  temp            1    0[COMRAM] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      void 
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;Total ram usage:        2 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_lcdInst
  6251 ;;		_putch
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text15
  6256  00E4C4                     __ptext15:
  6257                           	opt stack 0
  6258  00E4C4                     _lcdNibble:
  6259                           	opt stack 27
  6260                           
  6261                           ;incstack = 0
  6262                           ;lcdNibble@data stored from wreg
  6263  00E4C4  6E02               	movwf	lcdNibble@data,c
  6264                           
  6265                           ;standbyMode.c: 57: char temp = (unsigned char) (data & 0xF0);
  6266  00E4C6  5002               	movf	lcdNibble@data,w,c
  6267  00E4C8  0BF0               	andlw	240
  6268  00E4CA  6E01               	movwf	lcdNibble@temp,c
  6269                           
  6270                           ;standbyMode.c: 58: LATD = (unsigned char) (LATD & 0x0F);
  6271  00E4CC  508C               	movf	3980,w,c	;volatile
  6272  00E4CE  0B0F               	andlw	15
  6273  00E4D0  6E8C               	movwf	3980,c	;volatile
  6274                           
  6275                           ;standbyMode.c: 59: LATD = (unsigned char) (temp | LATD);
  6276  00E4D2  5001               	movf	lcdNibble@temp,w,c
  6277  00E4D4  108C               	iorwf	3980,w,c	;volatile
  6278  00E4D6  6E8C               	movwf	3980,c	;volatile
  6279                           
  6280                           ;standbyMode.c: 61: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6281  00E4D8  0E00               	movlw	0
  6282  00E4DA  BEF2               	btfsc	intcon,7,c	;volatile
  6283  00E4DC  0E01               	movlw	1
  6284  00E4DE  6E66               	movwf	standbyMode@LCDinterruptState,c
  6285  00E4E0  9EF2               	bcf	intcon,7,c	;volatile
  6286  00E4E2  868C               	bsf	3980,3,c	;volatile
  6287  00E4E4  0E53               	movlw	83
  6288  00E4E6                     u5917:
  6289  00E4E6  2EE8               	decfsz	wreg,f,c
  6290  00E4E8  D7FE               	bra	u5917
  6291  00E4EA  F000               	nop	
  6292  00E4EC  968C               	bcf	3980,3,c	;volatile
  6293  00E4EE  0EC8               	movlw	200
  6294  00E4F0                     u5927:
  6295  00E4F0  D000               	nop2	
  6296  00E4F2  2EE8               	decfsz	wreg,f,c
  6297  00E4F4  D7FD               	bra	u5927
  6298  00E4F6  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  6299  00E4F8  D002               	bra	u15
  6300  00E4FA  9EF2               	bcf	intcon,7,c	;volatile
  6301  00E4FC  D001               	bra	u16
  6302  00E4FE                     u15:
  6303  00E4FE  8EF2               	bsf	intcon,7,c	;volatile
  6304  00E500                     u16:
  6305                           
  6306                           ;standbyMode.c: 64: data = (unsigned char) (data << 4);
  6307  00E500  3802               	swapf	lcdNibble@data,w,c
  6308  00E502  0BF0               	andlw	240
  6309  00E504  6E02               	movwf	lcdNibble@data,c
  6310                           
  6311                           ;standbyMode.c: 65: temp = (unsigned char) (data & 0xF0);
  6312  00E506  5002               	movf	lcdNibble@data,w,c
  6313  00E508  0BF0               	andlw	240
  6314  00E50A  6E01               	movwf	lcdNibble@temp,c
  6315                           
  6316                           ;standbyMode.c: 66: LATD = (unsigned char) (LATD & 0x0F);
  6317  00E50C  508C               	movf	3980,w,c	;volatile
  6318  00E50E  0B0F               	andlw	15
  6319  00E510  6E8C               	movwf	3980,c	;volatile
  6320                           
  6321                           ;standbyMode.c: 67: LATD = (unsigned char) (temp | LATD);
  6322  00E512  5001               	movf	lcdNibble@temp,w,c
  6323  00E514  108C               	iorwf	3980,w,c	;volatile
  6324  00E516  6E8C               	movwf	3980,c	;volatile
  6325                           
  6326                           ;standbyMode.c: 69: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6327  00E518  0E00               	movlw	0
  6328  00E51A  BEF2               	btfsc	intcon,7,c	;volatile
  6329  00E51C  0E01               	movlw	1
  6330  00E51E  6E66               	movwf	standbyMode@LCDinterruptState,c
  6331  00E520  9EF2               	bcf	intcon,7,c	;volatile
  6332  00E522  868C               	bsf	3980,3,c	;volatile
  6333  00E524  0E53               	movlw	83
  6334  00E526                     u5937:
  6335  00E526  2EE8               	decfsz	wreg,f,c
  6336  00E528  D7FE               	bra	u5937
  6337  00E52A  F000               	nop	
  6338  00E52C  968C               	bcf	3980,3,c	;volatile
  6339  00E52E  0EC8               	movlw	200
  6340  00E530                     u5947:
  6341  00E530  D000               	nop2	
  6342  00E532  2EE8               	decfsz	wreg,f,c
  6343  00E534  D7FD               	bra	u5947
  6344  00E536  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  6345  00E538  D002               	bra	u25
  6346  00E53A  9EF2               	bcf	intcon,7,c	;volatile
  6347  00E53C  D001               	bra	u26
  6348  00E53E                     u25:
  6349  00E53E  8EF2               	bsf	intcon,7,c	;volatile
  6350  00E540                     u26:
  6351  00E540  0012               	return		;funcret
  6352  00E542                     __end_of_lcdNibble:
  6353                           	opt stack 0
  6354                           tblptru	equ	0xFF8
  6355                           tblptrh	equ	0xFF7
  6356                           tblptrl	equ	0xFF6
  6357                           tablat	equ	0xFF5
  6358                           prodh	equ	0xFF4
  6359                           prodl	equ	0xFF3
  6360                           intcon	equ	0xFF2
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           plusw1	equ	0xFE3
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           plusw2	equ	0xFDB
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           plusw1	equ	0xFE3
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           plusw2	equ	0xFDB
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387                           	psect	rparam
  6388  0000                     tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon	equ	0xFF2
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           plusw1	equ	0xFE3
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           plusw2	equ	0xFDB
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8


Data Sizes:
    Strings     537
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_56(CODE[11]), STR_55(CODE[13]), STR_54(CODE[11]), STR_53(CODE[13]), 
		 -> STR_52(CODE[11]), STR_51(CODE[3]), STR_50(CODE[8]), STR_49(CODE[15]), 
		 -> STR_48(CODE[16]), STR_47(CODE[10]), STR_46(CODE[3]), STR_45(CODE[8]), 
		 -> STR_44(CODE[15]), STR_43(CODE[16]), STR_42(CODE[10]), STR_41(CODE[16]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[14]), STR_35(CODE[11]), STR_34(CODE[11]), STR_33(CODE[16]), 
		 -> STR_32(CODE[16]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[8]), 
		 -> STR_28(CODE[15]), STR_27(CODE[15]), STR_26(CODE[11]), STR_25(CODE[14]), 
		 -> STR_24(CODE[16]), STR_23(CODE[16]), STR_22(CODE[11]), STR_21(CODE[14]), 
		 -> STR_20(CODE[16]), STR_19(CODE[16]), STR_18(CODE[16]), STR_17(CODE[13]), 
		 -> STR_16(CODE[13]), STR_15(CODE[15]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[18]), STR_11(CODE[6]), STR_10(CODE[16]), STR_9(CODE[5]), 
		 -> STR_8(CODE[16]), STR_7(CODE[9]), STR_6(CODE[17]), STR_5(CODE[7]), 
		 -> STR_4(CODE[9]), STR_3(CODE[17]), STR_2(CODE[11]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_diet_press
    _standbyMode->_food_press
    _which_drawer->_printf
    _viewLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35000
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         24    24      0   34910
                                             45 COMRAM    24    24      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                           _viewLogs
                       _which_drawer
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        10     8      2    6432
                                             24 COMRAM    10     8      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             6     4      2    5693
                                             24 COMRAM     6     4      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _food_press                                          21    17      4    8758
                                             24 COMRAM    21    17      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          21    19      2    7806
                                             24 COMRAM    21    19      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    5357
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _viewLogs
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      67       1       81.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      34        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 18 15:24:41 2018

                 _standbyMode F6DC                            u15 E4FE                            u16 E500  
                          u25 E53E                            u26 E540                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 EDE2  
                         l131 EE28                           l220 EF3C                           l141 EB98  
                         l310 F348                           l302 F242                           l303 F242  
                         l231 F066                           l215 EF30                           l312 F2BC  
                         l152 EC36                           l136 EEA6                           l240 F144  
                         l321 F372                           l153 EC4C                           l145 EBC6  
                         l234 F0B6                           l331 F44A                           l323 F39C  
                         l315 F2FE                           l307 F24E                           l147 EC14  
                         l251 E576                           l243 F1C8                           l403 EB30  
                         l252 E54C                           l228 F016                           l420 FCA2  
                         l412 F750                           l341 F530                           l333 F478  
                         l325 F3C6                           l253 E5F6                           l237 F106  
                         l421 F866                           l246 F1D4                           l422 FAE4  
                         l430 F914                           l351 F61C                           l343 F55E  
                         l335 F4A6                           l327 F3F2                           l167 EC68  
                         l271 E56E                           l415 F826                           l360 E676  
                         l432 FAD6                           l424 F8CE                           l353 F64C  
                         l345 F58C                           l337 F4D4                           l329 F41E  
                         l193 ECF2                           l257 E556                           l361 E602  
                         l194 ED2A                           l266 E566                           l370 E642  
                         l362 E6D8                           l450 FC1A                           l418 F832  
                         l355 F67E                           l347 F5BC                           l339 F502  
                         l259 E55E                           l283 E87A                           l371 E64A  
                         l363 E60A                           l451 FBBE                           l443 FADE  
                         l427 F908                           l356 F6D2                           l196 ED64  
                         l188 ECA2                           l372 E652                           l364 E612  
                         l436 F98A                           l349 F5EC                           l373 E65A  
                         l365 E61A                           l461 FD0A                           l437 FA4E  
                         l198 ED9E                           l286 E94E                           l278 E86E  
                         l374 E662                           l366 E622                           l438 F9F2  
                         l375 E66C                           l367 E62A                           l288 E8EC  
                         l368 E632                           l392 EAF4                           l384 EA08  
                         l456 FD5E                           l369 E63A                           l393 EAC8  
                         l449 FB56                           l490 E790                           l491 E7DE  
                         l387 EB66                           l379 E9FC                           l900 E488  
                         l492 E796                           l484 E726                           l477 E6EC  
                         l389 EB34                           l910 E3F2                           l486 E74E  
                         l478 E6FC                           l903 E4B0                           l904 E4BA  
                         l913 E412                           l914 E41C                           l909 E3FA  
                         l899 E490                  __CFG_CPB$OFF 000000                           wreg 000FE8  
         standbyMode@diet_396 0032                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3151 F2F8                          l3651 FB5C                          l3635 FB00  
                        l3571 F990                          l3555 F934                          l3647 FB56  
                        l3567 F98A                          l2799 E752                          STR_1 FEEB  
                        STR_2 FF91                          STR_3 FE19                          STR_4 FFC7  
                        STR_5 FFE9                          STR_6 FE2A                          STR_7 FFD0  
                        STR_8 FE7B                          STR_9 FFF6                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4020 F2D8                          u5010 EB0A  
                        u2700 E3FE                          u3420 EDD8                          u5020 EB2C  
                        u2740 EB8E                          u2670 E494                          u2830 EC2A  
                        u5230 FB5C                          u5160 F990                          u5080 F86E  
                        u5090 F87A                          u5307 F70E                          u5260 FCAA  
                        u5317 F728                          u3670 E77E                          u3910 E89A  
                        u5407 F9AC                          u5327 F760                          u5417 F9E4  
                        u5337 F798                          u3690 E7E6                          u3770 EF64  
                        u3851 E84A                          u5507 FC6C                          u5427 F9FE  
                        u5347 F7B2                          u5517 FC94                          u5437 FA36  
                        u5357 F7E4                          u3951 F23A                          u5607 EEBC  
                        u5527 FCD6                          u5447 FAA0                          u5367 F7FE  
                        u5617 EEEE                          u5537 FCFC                          u5457 FAC8  
                        u5377 F886                          u5297 F6E8                          u5707 F076  
                        u5627 EF08                          u5547 FD16                          u5467 FB78  
                        u5387 F8BE                          u5717 F0A8                          u5637 EF86  
                        u5557 FD4E                          u5477 FBB0                          u5397 F8DA  
                        u5807 E900                          u5727 F0C6                          u5647 EF9E  
                        u5567 FD6A                          u5487 FBCA                          u4880 EA60  
                        u5817 E97E                          u5737 F0F8                          u5657 EFBE  
                        u5577 FDA2                          u5497 FC02                          u4970 EAA6  
                        u5907 E37A                          u5827 E9B0                          u5747 F116  
                        u5667 EFD6                          u5587 E9D0                          u5917 E4E6  
                        u5837 F1EC                          u5757 F136                          u5677 F008  
                        u5597 EB48                          u5927 E4F0                          u5847 F26E  
                        u5767 F154                          u5687 F026                          u5937 E526  
                        u5857 F68A                          u5777 F186                          u5697 F058  
                        u5947 E530                          u5867 F6BC                          u5787 F1A0  
                        u5877 E38E                          u5797 E80C                          u5887 E42C  
                        u5897 E460         __end_of_decode_drawer E6E2                          _main E3AC  
                        _keys FDB3               food_press@F3040 005E                          fsr2h 000FDA  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 001E             viewLogs@keypress3 001D           standbyMode@keypress 0038  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               diet_press@F3054 0056  
            __end_of_LCD_LEFT FDE0           standbyMode@whichKey 0036               food_press@count 0023  
             food_press@tally 001F             _drawerInformation 0046                         ?_main 0001  
                       STR_10 FE8B                         STR_11 FFF0                         STR_20 FE6B  
                       STR_12 FDE5                         STR_21 FF28                         STR_13 FE5B  
                       STR_30 FE2A                         STR_22 FFA7                         STR_14 FEAB  
                       STR_15 FEFB                         STR_23 FE9B                         STR_31 FE08  
                       STR_24 FE9B                         STR_16 FF5F                         STR_32 FEDB  
                       STR_40 FEBB                         STR_41 FECB                         STR_17 FF79  
                       STR_25 FF36                         STR_33 FE3B                         STR_50 FFD9  
                       STR_26 FFA7                         STR_42 FFBD                         STR_34 FFB2  
                       STR_18 FECB                         STR_51 FFFB                         STR_35 FF86  
                       STR_27 FF0A                         STR_19 FE6B                         STR_43 FE4B  
                       STR_28 FF0A                         STR_52 FF9C                         STR_36 FF44  
                       STR_44 FF19                         STR_37 FE08                         STR_29 FFE1  
                       STR_45 FFD9                         STR_53 FF52                         STR_54 FF9C  
                       STR_46 FFFB                         STR_38 FF6C                         STR_55 FF52  
                       STR_47 FFBD                         STR_39 FDF7                         STR_48 FE4B  
                       STR_56 FF9C                         STR_49 FF19               __end_of___lwdiv E4C4  
             __end_of___lwmod E426                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
             diet_press@count 0021               __end_of_lcdInst E382                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD E472                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FDDF                         _input FDC4                         _putch E382  
                       tablat 000FF5             _LCDinterruptState 0067                         plusw1 000FE3  
                       plusw2 000FDB                         status 000FD8          standbyMode@keypress1 003B  
              __CFG_PBADEN$ON 000000               standbyMode@diet 0030               standbyMode@zero 0039  
             __initialization E396                  __end_of_main E3E4                  __end_of_keys FDC4  
                standbyMode@i 0044                __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FDE1  
            food_press@drawer 001B                        ??_main 0046                 __activetblptr 000002  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        ?_putch 0001  
       standbyMode@drawer_391 0040              diet_press@drawer 0019                __CFG_XINST$OFF 000000  
              __CFG_STVREN$ON 000000                     ??___lwdiv 0005                     ??___lwmod 000C  
                      clear_0 E39C                     ??_lcdInst 0003                        _printf E6E2  
         food_press@foodTable 0025                     ??_initLCD 0004               get_digits@count 0005  
                __mediumconst FDB2              __end_of_viewLogs F1E0                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization E3A2          which_drawer@keypress 0022                 ___rparam_used 000001  
                ?_standbyMode 0001                __pcstackCOMRAM 0001                 __end_of_input FDD5  
               __end_of_putch E396            __size_of_lcdNibble 007E                 check_food@sum 0001  
           food_press@dietSum 0019             food_press@isValid 0021                       ??_putch 0003  
                  _check_food EB84                    _diet_press F1E0                       ?_printf 000D  
                  _get_digits E542        standbyMode@drawerCount 0042                    _food_press E800  
           __end_of_lcdNibble E542                       __Hparam 0000                       __Lparam 0000  
                   ?_viewLogs 0019                       ___lwdiv E472                       ___lwmod E3E4  
                     __pcinit E396                       __ramtop 1000                       _lcdInst E36E  
                     __ptext0 E3AC                       __ptext1 F6DC                       __ptext2 E9BE  
                     __ptext3 E600                       __ptext4 EEB0                       __ptext5 E800  
                     __ptext6 E542                       __ptext7 EB84                       __ptext8 F1E0  
                     __ptext9 E6E2        __size_of_decode_drawer 00E2               __size_of_printf 011E  
                     _initLCD E426                       _dpowers FDD5                     _LCD_RIGHT FDE0  
        end_of_initialization E3A2               which_drawer@sum 001E         __end_of_LCD_SIZE_HORZ FDE3  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FDE2                 __Lmediumconst FDB2  
                     printf@c 0018                       printf@f 000D                       postdec2 000FDD  
                  ??_viewLogs 001B                       postinc0 000FEE                       postinc2 000FDE  
        __size_of_standbyMode 06D6                   ?_diet_press 0019                     _PORTBbits 000F81  
               ?_which_drawer 0019                   ?_get_digits 0001             standbyMode@drawer 003E  
               _decode_drawer E600                   ?_food_press 0019           diet_press@dietTable 0026  
      standbyMode@validDrawer 003C           __size_of_check_food 032C                ??_which_drawer 001B  
              __end_of_printf E800           start_initialization E396                ?_decode_drawer 0001  
         __size_of_diet_press 04FC           __size_of_get_digits 00BE              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 0011            food_press@keypress 002D           __size_of_food_press 01BE  
standbyMode@LCDinterruptState 0066                   __pbssCOMRAM 0046           decode_drawer@drawer 0001  
            ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000                 __pmediumconst FDB2  
                   _lcdNibble E4C4                      ?___lwdiv 0001                      ?___lwmod 0008  
           __size_of_viewLogs 0330                      ?_lcdInst 0001                      ?_initLCD 0001  
         check_food@foodInput 0003              ___lwdiv@quotient 0005               ??_decode_drawer 0003  
              __size_of_putch 0014                  ??_check_food 0005                      _LCD_LEFT FDDF  
                    _LATDbits 000F8C          __end_of_which_drawer EB84              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001                  ??_diet_press 001B            __end_of_check_food EEB0  
               lcdNibble@data 0002                    printf@flag 0014                 lcdNibble@temp 0001  
                  printf@prec 0015                  ??_get_digits 0003                _LCD_HORZ_LIMIT FDE4  
               diet_press@sum 0023             which_drawer@count 0020            __end_of_diet_press F6DC  
                ??_food_press 001D            diet_press@keypress 0025                      __Hrparam 0000  
               ??_standbyMode 002E                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
          __end_of_get_digits E600            diet_press@previous 001D              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              __size_of_lcdInst 0014              __size_of_initLCD 004C  
      __end_of_LCD_HORZ_LIMIT FDE5            __end_of_food_press E9BE               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 E382                      __ptext11 E3E4  
                    __ptext12 E472                      __ptext13 E426                      __ptext14 E36E  
                    __ptext15 E4C4                _LCD_VERT_LIMIT FDE3                 __size_of_main 0038  
                 ??_lcdNibble 0001                      _viewLogs EEB0                     printf@val 0016  
         __end_of_standbyMode FDB2      decode_drawer@returnValue 0005              which_drawer@rand 001C  
                   putch@data 0003                    _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FDE4  
       __size_of_which_drawer 01C6     standbyMode@firstIteration 0034                 _LCD_SIZE_HORZ FDE2  
            ___lwmod@dividend 0008                 _LCD_SIZE_VERT FDE1                      printf@ap 0012  
                 diet_press@i 001F                   lcdInst@data 0003                  _which_drawer E9BE  
             ___lwmod@divisor 000A               ___lwmod@counter 000C         check_food@returnValue 0007  
