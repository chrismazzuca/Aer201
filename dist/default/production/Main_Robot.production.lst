

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 24 00:30:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4620 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	mediumconst
    78  00FD24                     __pmediumconst:
    79                           	opt stack 0
    80  00FD24  00                 	db	0
    81  00FD25                     _keys:
    82                           	opt stack 0
    83  00FD25  31                 	db	49
    84  00FD26  32                 	db	50
    85  00FD27  33                 	db	51
    86  00FD28  41                 	db	65
    87  00FD29  34                 	db	52
    88  00FD2A  35                 	db	53
    89  00FD2B  36                 	db	54
    90  00FD2C  42                 	db	66
    91  00FD2D  37                 	db	55
    92  00FD2E  38                 	db	56
    93  00FD2F  39                 	db	57
    94  00FD30  43                 	db	67
    95  00FD31  2A                 	db	42
    96  00FD32  30                 	db	48
    97  00FD33  23                 	db	35
    98  00FD34  44                 	db	68
    99  00FD35  00                 	db	0
   100  00FD36                     __end_of_keys:
   101                           	opt stack 0
   102  00FD36                     _input:
   103                           	opt stack 0
   104  00FD36  31                 	db	49
   105  00FD37  32                 	db	50
   106  00FD38  33                 	db	51
   107  00FD39  52                 	db	82
   108  00FD3A  34                 	db	52
   109  00FD3B  35                 	db	53
   110  00FD3C  36                 	db	54
   111  00FD3D  46                 	db	70
   112  00FD3E  37                 	db	55
   113  00FD3F  38                 	db	56
   114  00FD40  39                 	db	57
   115  00FD41  4C                 	db	76
   116  00FD42  2A                 	db	42
   117  00FD43  30                 	db	48
   118  00FD44  23                 	db	35
   119  00FD45  44                 	db	68
   120  00FD46  00                 	db	0
   121  00FD47                     __end_of_input:
   122                           	opt stack 0
   123  00FD47                     _dpowers:
   124                           	opt stack 0
   125  00FD47  0001               	dw	1
   126  00FD49  000A               	dw	10
   127  00FD4B  0064               	dw	100
   128  00FD4D  03E8               	dw	1000
   129  00FD4F  2710               	dw	10000
   130  00FD51                     __end_of_dpowers:
   131                           	opt stack 0
   132  00FD51                     _hexpowers:
   133                           	opt stack 0
   134  00FD51  0001               	dw	1
   135  00FD53  0010               	dw	16
   136  00FD55  0100               	dw	256
   137  00FD57  1000               	dw	4096
   138  00FD59                     __end_of_hexpowers:
   139                           	opt stack 0
   140  00FD59                     _happynewyear:
   141                           	opt stack 0
   142  00FD59  00                 	db	0
   143  00FD5A  28                 	db	40
   144  00FD5B  00                 	db	0
   145  00FD5C  06                 	db	6
   146  00FD5D  24                 	db	36
   147  00FD5E  02                 	db	2
   148  00FD5F  18                 	db	24
   149  00FD60                     __end_of_happynewyear:
   150                           	opt stack 0
   151  00FD60                     _LCD_LEFT:
   152                           	opt stack 0
   153  00FD60  00                 	db	0
   154  00FD61                     __end_of_LCD_LEFT:
   155                           	opt stack 0
   156  00FD61                     _LCD_RIGHT:
   157                           	opt stack 0
   158  00FD61  01                 	db	1
   159  00FD62                     __end_of_LCD_RIGHT:
   160                           	opt stack 0
   161  00FD62                     _LCD_SIZE_VERT:
   162                           	opt stack 0
   163  00FD62  02                 	db	2
   164  00FD63                     __end_of_LCD_SIZE_VERT:
   165                           	opt stack 0
   166  00FD63                     _LCD_SIZE_HORZ:
   167                           	opt stack 0
   168  00FD63  10                 	db	16
   169  00FD64                     __end_of_LCD_SIZE_HORZ:
   170                           	opt stack 0
   171  00FD64                     _LCD_VERT_LIMIT:
   172                           	opt stack 0
   173  00FD64  02                 	db	2
   174  00FD65                     __end_of_LCD_VERT_LIMIT:
   175                           	opt stack 0
   176  00FD65                     _LCD_HORZ_LIMIT:
   177                           	opt stack 0
   178  00FD65  28                 	db	40
   179  00FD66                     __end_of_LCD_HORZ_LIMIT:
   180                           	opt stack 0
   181  0000                     _SSPBUF	set	4041
   182  0000                     _SSPCON2bits	set	4037
   183  0000                     _SSPADD	set	4040
   184  0000                     _SSPCON2	set	4037
   185  0000                     _SSPCON1	set	4038
   186  0000                     _SSPSTAT	set	4039
   187  0000                     _TRISCbits	set	3988
   188  0000                     _SSPCON1bits	set	4038
   189  0000                     _EECON2	set	4007
   190  0000                     _EEDATA	set	4008
   191  0000                     _EEADR	set	4009
   192  0000                     _EECON1bits	set	4006
   193  0000                     _PORTB	set	3969
   194  0000                     _PORTBbits	set	3969
   195  0000                     _INTCONbits	set	4082
   196  0000                     _LATDbits	set	3980
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON0	set	4034
   199  0000                     _TRISE	set	3990
   200  0000                     _TRISD	set	3989
   201  0000                     _TRISC	set	3988
   202  0000                     _TRISB	set	3987
   203  0000                     _TRISA	set	3986
   204  0000                     _LATE	set	3981
   205  0000                     _LATD	set	3980
   206  0000                     _LATC	set	3979
   207  0000                     _LATB	set	3978
   208  0000                     _LATA	set	3977
   209  00FD66                     STR_22:
   210  00FD66  52                 	db	82	;'R'
   211  00FD67  65                 	db	101	;'e'
   212  00FD68  6D                 	db	109	;'m'
   213  00FD69  61                 	db	97	;'a'
   214  00FD6A  69                 	db	105	;'i'
   215  00FD6B  6E                 	db	110	;'n'
   216  00FD6C  69                 	db	105	;'i'
   217  00FD6D  6E                 	db	110	;'n'
   218  00FD6E  67                 	db	103	;'g'
   219  00FD6F  20                 	db	32
   220  00FD70  70                 	db	112	;'p'
   221  00FD71  69                 	db	105	;'i'
   222  00FD72  65                 	db	101	;'e'
   223  00FD73  63                 	db	99	;'c'
   224  00FD74  65                 	db	101	;'e'
   225  00FD75  73                 	db	115	;'s'
   226  00FD76  3A                 	db	58	;':'
   227  00FD77  00                 	db	0
   228  00FD78                     STR_71:
   229  00FD78  30                 	db	48	;'0'
   230  00FD79  31                 	db	49	;'1'
   231  00FD7A  32                 	db	50	;'2'
   232  00FD7B  33                 	db	51	;'3'
   233  00FD7C  34                 	db	52	;'4'
   234  00FD7D  35                 	db	53	;'5'
   235  00FD7E  36                 	db	54	;'6'
   236  00FD7F  37                 	db	55	;'7'
   237  00FD80  38                 	db	56	;'8'
   238  00FD81  39                 	db	57	;'9'
   239  00FD82  61                 	db	97	;'a'
   240  00FD83  62                 	db	98	;'b'
   241  00FD84  63                 	db	99	;'c'
   242  00FD85  64                 	db	100	;'d'
   243  00FD86  65                 	db	101	;'e'
   244  00FD87  66                 	db	102	;'f'
   245  00FD88  00                 	db	0
   246  00FD89                     STR_55:
   247  00FD89  64                 	db	100	;'d'
   248  00FD8A  72                 	db	114	;'r'
   249  00FD8B  61                 	db	97	;'a'
   250  00FD8C  77                 	db	119	;'w'
   251  00FD8D  65                 	db	101	;'e'
   252  00FD8E  72                 	db	114	;'r'
   253  00FD8F  73                 	db	115	;'s'
   254  00FD90  20                 	db	32
   255  00FD91  72                 	db	114	;'r'
   256  00FD92  65                 	db	101	;'e'
   257  00FD93  61                 	db	97	;'a'
   258  00FD94  63                 	db	99	;'c'
   259  00FD95  68                 	db	104	;'h'
   260  00FD96  65                 	db	101	;'e'
   261  00FD97  64                 	db	100	;'d'
   262  00FD98  21                 	db	33
   263  00FD99  00                 	db	0
   264  00FD9A                     STR_41:
   265  00FD9A  62                 	db	98	;'b'
   266  00FD9B  65                 	db	101	;'e'
   267  00FD9C  67                 	db	103	;'g'
   268  00FD9D  69                 	db	105	;'i'
   269  00FD9E  6E                 	db	110	;'n'
   270  00FD9F  20                 	db	32
   271  00FDA0  6F                 	db	111	;'o'
   272  00FDA1  70                 	db	112	;'p'
   273  00FDA2  65                 	db	101	;'e'
   274  00FDA3  72                 	db	114	;'r'
   275  00FDA4  61                 	db	97	;'a'
   276  00FDA5  74                 	db	116	;'t'
   277  00FDA6  69                 	db	105	;'i'
   278  00FDA7  6F                 	db	111	;'o'
   279  00FDA8  6E                 	db	110	;'n'
   280  00FDA9  2E                 	db	46
   281  00FDAA  00                 	db	0
   282  00FDAB                     STR_9:
   283  00FDAB  50                 	db	80	;'P'
   284  00FDAC  6C                 	db	108	;'l'
   285  00FDAD  65                 	db	101	;'e'
   286  00FDAE  61                 	db	97	;'a'
   287  00FDAF  73                 	db	115	;'s'
   288  00FDB0  65                 	db	101	;'e'
   289  00FDB1  20                 	db	32
   290  00FDB2  69                 	db	105	;'i'
   291  00FDB3  6E                 	db	110	;'n'
   292  00FDB4  70                 	db	112	;'p'
   293  00FDB5  75                 	db	117	;'u'
   294  00FDB6  74                 	db	116	;'t'
   295  00FDB7  20                 	db	32
   296  00FDB8  6C                 	db	108	;'l'
   297  00FDB9  6F                 	db	111	;'o'
   298  00FDBA  67                 	db	103	;'g'
   299  00FDBB  00                 	db	0
   300  00FDBC                     STR_23:
   301  00FDBC  52                 	db	82	;'R'
   302  00FDBD  3A                 	db	58	;':'
   303  00FDBE  25                 	db	37
   304  00FDBF  69                 	db	105	;'i'
   305  00FDC0  20                 	db	32
   306  00FDC1  20                 	db	32
   307  00FDC2  46                 	db	70	;'F'
   308  00FDC3  3A                 	db	58	;':'
   309  00FDC4  25                 	db	37
   310  00FDC5  69                 	db	105	;'i'
   311  00FDC6  20                 	db	32
   312  00FDC7  20                 	db	32
   313  00FDC8  4C                 	db	76	;'L'
   314  00FDC9  3A                 	db	58	;':'
   315  00FDCA  25                 	db	37
   316  00FDCB  69                 	db	105	;'i'
   317  00FDCC  00                 	db	0
   318  00FDCD                     STR_5:
   319  00FDCD  50                 	db	80	;'P'
   320  00FDCE  72                 	db	114	;'r'
   321  00FDCF  65                 	db	101	;'e'
   322  00FDD0  73                 	db	115	;'s'
   323  00FDD1  73                 	db	115	;'s'
   324  00FDD2  20                 	db	32
   325  00FDD3  61                 	db	97	;'a'
   326  00FDD4  6E                 	db	110	;'n'
   327  00FDD5  79                 	db	121	;'y'
   328  00FDD6  20                 	db	32
   329  00FDD7  6B                 	db	107	;'k'
   330  00FDD8  65                 	db	101	;'e'
   331  00FDD9  79                 	db	121	;'y'
   332  00FDDA  20                 	db	32
   333  00FDDB  74                 	db	116	;'t'
   334  00FDDC  6F                 	db	111	;'o'
   335  00FDDD  00                 	db	0
   336  00FDDE                     STR_7:
   337  00FDDE  25                 	db	37
   338  00FDDF  69                 	db	105	;'i'
   339  00FDE0  20                 	db	32
   340  00FDE1  70                 	db	112	;'p'
   341  00FDE2  72                 	db	114	;'r'
   342  00FDE3  65                 	db	101	;'e'
   343  00FDE4  76                 	db	118	;'v'
   344  00FDE5  69                 	db	105	;'i'
   345  00FDE6  6F                 	db	111	;'o'
   346  00FDE7  75                 	db	117	;'u'
   347  00FDE8  73                 	db	115	;'s'
   348  00FDE9  20                 	db	32
   349  00FDEA  6C                 	db	108	;'l'
   350  00FDEB  6F                 	db	111	;'o'
   351  00FDEC  67                 	db	103	;'g'
   352  00FDED  73                 	db	115	;'s'
   353  00FDEE  00                 	db	0
   354  00FDEF                     STR_45:
   355  00FDEF  63                 	db	99	;'c'
   356  00FDF0  61                 	db	97	;'a'
   357  00FDF1  62                 	db	98	;'b'
   358  00FDF2  69                 	db	105	;'i'
   359  00FDF3  6E                 	db	110	;'n'
   360  00FDF4  65                 	db	101	;'e'
   361  00FDF5  74                 	db	116	;'t'
   362  00FDF6  20                 	db	32
   363  00FDF7  73                 	db	115	;'s'
   364  00FDF8  6F                 	db	111	;'o'
   365  00FDF9  72                 	db	114	;'r'
   366  00FDFA  74                 	db	116	;'t'
   367  00FDFB  65                 	db	101	;'e'
   368  00FDFC  72                 	db	114	;'r'
   369  00FDFD  21                 	db	33
   370  00FDFE  00                 	db	0
   371  00FDFF                     STR_59:
   372  00FDFF  6E                 	db	110	;'n'
   373  00FE00  75                 	db	117	;'u'
   374  00FE01  6D                 	db	109	;'m'
   375  00FE02  62                 	db	98	;'b'
   376  00FE03  65                 	db	101	;'e'
   377  00FE04  72                 	db	114	;'r'
   378  00FE05  20                 	db	32
   379  00FE06  70                 	db	112	;'p'
   380  00FE07  72                 	db	114	;'r'
   381  00FE08  65                 	db	101	;'e'
   382  00FE09  73                 	db	115	;'s'
   383  00FE0A  73                 	db	115	;'s'
   384  00FE0B  65                 	db	101	;'e'
   385  00FE0C  64                 	db	100	;'d'
   386  00FE0D  2E                 	db	46
   387  00FE0E  00                 	db	0
   388  00FE0F                     STR_29:
   389  00FE0F  44                 	db	68	;'D'
   390  00FE10  72                 	db	114	;'r'
   391  00FE11  61                 	db	97	;'a'
   392  00FE12  77                 	db	119	;'w'
   393  00FE13  65                 	db	101	;'e'
   394  00FE14  72                 	db	114	;'r'
   395  00FE15  20                 	db	32
   396  00FE16  25                 	db	37
   397  00FE17  69                 	db	105	;'i'
   398  00FE18  20                 	db	32
   399  00FE19  66                 	db	102	;'f'
   400  00FE1A  6F                 	db	111	;'o'
   401  00FE1B  6F                 	db	111	;'o'
   402  00FE1C  64                 	db	100	;'d'
   403  00FE1D  3A                 	db	58	;':'
   404  00FE1E  00                 	db	0
   405  00FE1F                     STR_14:
   406  00FE1F  4F                 	db	79	;'O'
   407  00FE20  70                 	db	112	;'p'
   408  00FE21  65                 	db	101	;'e'
   409  00FE22  72                 	db	114	;'r'
   410  00FE23  61                 	db	97	;'a'
   411  00FE24  74                 	db	116	;'t'
   412  00FE25  69                 	db	105	;'i'
   413  00FE26  6F                 	db	111	;'o'
   414  00FE27  6E                 	db	110	;'n'
   415  00FE28  20                 	db	32
   416  00FE29  74                 	db	116	;'t'
   417  00FE2A  69                 	db	105	;'i'
   418  00FE2B  6D                 	db	109	;'m'
   419  00FE2C  65                 	db	101	;'e'
   420  00FE2D  3A                 	db	58	;':'
   421  00FE2E  00                 	db	0
   422  00FE2F                     STR_17:
   423  00FE2F  4D                 	db	77	;'M'
   424  00FE30  61                 	db	97	;'a'
   425  00FE31  72                 	db	114	;'r'
   426  00FE32  6B                 	db	107	;'k'
   427  00FE33  65                 	db	101	;'e'
   428  00FE34  64                 	db	100	;'d'
   429  00FE35  20                 	db	32
   430  00FE36  64                 	db	100	;'d'
   431  00FE37  72                 	db	114	;'r'
   432  00FE38  61                 	db	97	;'a'
   433  00FE39  77                 	db	119	;'w'
   434  00FE3A  65                 	db	101	;'e'
   435  00FE3B  72                 	db	114	;'r'
   436  00FE3C  73                 	db	115	;'s'
   437  00FE3D  3A                 	db	58	;':'
   438  00FE3E  00                 	db	0
   439  00FE3F                     STR_33:
   440  00FE3F  44                 	db	68	;'D'
   441  00FE40  72                 	db	114	;'r'
   442  00FE41  61                 	db	97	;'a'
   443  00FE42  77                 	db	119	;'w'
   444  00FE43  65                 	db	101	;'e'
   445  00FE44  72                 	db	114	;'r'
   446  00FE45  20                 	db	32
   447  00FE46  25                 	db	37
   448  00FE47  69                 	db	105	;'i'
   449  00FE48  20                 	db	32
   450  00FE49  64                 	db	100	;'d'
   451  00FE4A  69                 	db	105	;'i'
   452  00FE4B  65                 	db	101	;'e'
   453  00FE4C  74                 	db	116	;'t'
   454  00FE4D  3A                 	db	58	;':'
   455  00FE4E  00                 	db	0
   456  00FE4F                     STR_56:
   457  00FE4F  41                 	db	65	;'A'
   458  00FE50  6E                 	db	110	;'n'
   459  00FE51  6F                 	db	111	;'o'
   460  00FE52  74                 	db	116	;'t'
   461  00FE53  68                 	db	104	;'h'
   462  00FE54  65                 	db	101	;'e'
   463  00FE55  72                 	db	114	;'r'
   464  00FE56  20                 	db	32
   465  00FE57  64                 	db	100	;'d'
   466  00FE58  72                 	db	114	;'r'
   467  00FE59  61                 	db	97	;'a'
   468  00FE5A  77                 	db	119	;'w'
   469  00FE5B  65                 	db	101	;'e'
   470  00FE5C  72                 	db	114	;'r'
   471  00FE5D  3F                 	db	63	;'?'
   472  00FE5E  00                 	db	0
   473  00FE5F                     STR_44:
   474  00FE5F  57                 	db	87	;'W'
   475  00FE60  65                 	db	101	;'e'
   476  00FE61  6C                 	db	108	;'l'
   477  00FE62  63                 	db	99	;'c'
   478  00FE63  6F                 	db	111	;'o'
   479  00FE64  6D                 	db	109	;'m'
   480  00FE65  65                 	db	101	;'e'
   481  00FE66  20                 	db	32
   482  00FE67  74                 	db	116	;'t'
   483  00FE68  6F                 	db	111	;'o'
   484  00FE69  20                 	db	32
   485  00FE6A  79                 	db	121	;'y'
   486  00FE6B  6F                 	db	111	;'o'
   487  00FE6C  75                 	db	117	;'u'
   488  00FE6D  72                 	db	114	;'r'
   489  00FE6E  00                 	db	0
   490  00FE6F                     STR_28:
   491  00FE6F  23                 	db	35
   492  00FE70  20                 	db	32
   493  00FE71  3D                 	db	61	;'='
   494  00FE72  20                 	db	32
   495  00FE73  4E                 	db	78	;'N'
   496  00FE74  6F                 	db	111	;'o'
   497  00FE75  2C                 	db	44
   498  00FE76  20                 	db	32
   499  00FE77  44                 	db	68	;'D'
   500  00FE78  20                 	db	32
   501  00FE79  3D                 	db	61	;'='
   502  00FE7A  20                 	db	32
   503  00FE7B  59                 	db	89	;'Y'
   504  00FE7C  65                 	db	101	;'e'
   505  00FE7D  73                 	db	115	;'s'
   506  00FE7E  00                 	db	0
   507  00FE7F                     STR_42:
   508  00FE7F  53                 	db	83	;'S'
   509  00FE80  74                 	db	116	;'t'
   510  00FE81  6F                 	db	111	;'o'
   511  00FE82  72                 	db	114	;'r'
   512  00FE83  65                 	db	101	;'e'
   513  00FE84  64                 	db	100	;'d'
   514  00FE85  20                 	db	32
   515  00FE86  76                 	db	118	;'v'
   516  00FE87  61                 	db	97	;'a'
   517  00FE88  6C                 	db	108	;'l'
   518  00FE89  75                 	db	117	;'u'
   519  00FE8A  65                 	db	101	;'e'
   520  00FE8B  3A                 	db	58	;':'
   521  00FE8C  20                 	db	32
   522  00FE8D  00                 	db	0
   523  00FE8E                     STR_25:
   524  00FE8E  44                 	db	68	;'D'
   525  00FE8F  72                 	db	114	;'r'
   526  00FE90  61                 	db	97	;'a'
   527  00FE91  77                 	db	119	;'w'
   528  00FE92  65                 	db	101	;'e'
   529  00FE93  72                 	db	114	;'r'
   530  00FE94  20                 	db	32
   531  00FE95  31                 	db	49	;'1'
   532  00FE96  3A                 	db	58	;':'
   533  00FE97  20                 	db	32
   534  00FE98  52                 	db	82	;'R'
   535  00FE99  46                 	db	70	;'F'
   536  00FE9A  31                 	db	49	;'1'
   537  00FE9B  32                 	db	50	;'2'
   538  00FE9C  00                 	db	0
   539  00FE9D                     STR_37:
   540  00FE9D  44                 	db	68	;'D'
   541  00FE9E  72                 	db	114	;'r'
   542  00FE9F  61                 	db	97	;'a'
   543  00FEA0  77                 	db	119	;'w'
   544  00FEA1  65                 	db	101	;'e'
   545  00FEA2  72                 	db	114	;'r'
   546  00FEA3  20                 	db	32
   547  00FEA4  6E                 	db	110	;'n'
   548  00FEA5  75                 	db	117	;'u'
   549  00FEA6  6D                 	db	109	;'m'
   550  00FEA7  62                 	db	98	;'b'
   551  00FEA8  65                 	db	101	;'e'
   552  00FEA9  72                 	db	114	;'r'
   553  00FEAA  3A                 	db	58	;':'
   554  00FEAB  00                 	db	0
   555  00FEAC                     STR_24:
   556  00FEAC  49                 	db	73	;'I'
   557  00FEAD  6E                 	db	110	;'n'
   558  00FEAE  70                 	db	112	;'p'
   559  00FEAF  75                 	db	117	;'u'
   560  00FEB0  74                 	db	116	;'t'
   561  00FEB1  20                 	db	32
   562  00FEB2  53                 	db	83	;'S'
   563  00FEB3  75                 	db	117	;'u'
   564  00FEB4  6D                 	db	109	;'m'
   565  00FEB5  6D                 	db	109	;'m'
   566  00FEB6  61                 	db	97	;'a'
   567  00FEB7  72                 	db	114	;'r'
   568  00FEB8  79                 	db	121	;'y'
   569  00FEB9  3A                 	db	58	;':'
   570  00FEBA  00                 	db	0
   571  00FEBB                     STR_3:
   572  00FEBB  31                 	db	49	;'1'
   573  00FEBC  20                 	db	32
   574  00FEBD  70                 	db	112	;'p'
   575  00FEBE  72                 	db	114	;'r'
   576  00FEBF  65                 	db	101	;'e'
   577  00FEC0  76                 	db	118	;'v'
   578  00FEC1  69                 	db	105	;'i'
   579  00FEC2  6F                 	db	111	;'o'
   580  00FEC3  75                 	db	117	;'u'
   581  00FEC4  73                 	db	115	;'s'
   582  00FEC5  20                 	db	32
   583  00FEC6  6C                 	db	108	;'l'
   584  00FEC7  6F                 	db	111	;'o'
   585  00FEC8  67                 	db	103	;'g'
   586  00FEC9  00                 	db	0
   587  00FECA                     STR_21:
   588  00FECA  25                 	db	37
   589  00FECB  69                 	db	105	;'i'
   590  00FECC  2C                 	db	44
   591  00FECD  20                 	db	32
   592  00FECE  25                 	db	37
   593  00FECF  69                 	db	105	;'i'
   594  00FED0  2C                 	db	44
   595  00FED1  20                 	db	32
   596  00FED2  25                 	db	37
   597  00FED3  69                 	db	105	;'i'
   598  00FED4  2C                 	db	44
   599  00FED5  20                 	db	32
   600  00FED6  25                 	db	37
   601  00FED7  69                 	db	105	;'i'
   602  00FED8  00                 	db	0
   603  00FED9                     STR_48:
   604  00FED9  25                 	db	37
   605  00FEDA  30                 	db	48	;'0'
   606  00FEDB  32                 	db	50	;'2'
   607  00FEDC  78                 	db	120	;'x'
   608  00FEDD  2F                 	db	47
   609  00FEDE  25                 	db	37
   610  00FEDF  30                 	db	48	;'0'
   611  00FEE0  32                 	db	50	;'2'
   612  00FEE1  78                 	db	120	;'x'
   613  00FEE2  2F                 	db	47
   614  00FEE3  25                 	db	37
   615  00FEE4  30                 	db	48	;'0'
   616  00FEE5  32                 	db	50	;'2'
   617  00FEE6  78                 	db	120	;'x'
   618  00FEE7  00                 	db	0
   619  00FEE8                     STR_49:
   620  00FEE8  25                 	db	37
   621  00FEE9  30                 	db	48	;'0'
   622  00FEEA  32                 	db	50	;'2'
   623  00FEEB  78                 	db	120	;'x'
   624  00FEEC  3A                 	db	58	;':'
   625  00FEED  25                 	db	37
   626  00FEEE  30                 	db	48	;'0'
   627  00FEEF  32                 	db	50	;'2'
   628  00FEF0  78                 	db	120	;'x'
   629  00FEF1  3A                 	db	58	;':'
   630  00FEF2  25                 	db	37
   631  00FEF3  30                 	db	48	;'0'
   632  00FEF4  32                 	db	50	;'2'
   633  00FEF5  78                 	db	120	;'x'
   634  00FEF6  00                 	db	0
   635  00FEF7                     STR_60:
   636  00FEF7  44                 	db	68	;'D'
   637  00FEF8  72                 	db	114	;'r'
   638  00FEF9  61                 	db	97	;'a'
   639  00FEFA  77                 	db	119	;'w'
   640  00FEFB  65                 	db	101	;'e'
   641  00FEFC  72                 	db	114	;'r'
   642  00FEFD  20                 	db	32
   643  00FEFE  61                 	db	97	;'a'
   644  00FEFF  6C                 	db	108	;'l'
   645  00FF00  72                 	db	114	;'r'
   646  00FF01  65                 	db	101	;'e'
   647  00FF02  61                 	db	97	;'a'
   648  00FF03  64                 	db	100	;'d'
   649  00FF04  79                 	db	121	;'y'
   650  00FF05  00                 	db	0
   651  00FF06                     STR_31:
   652  00FF06  49                 	db	73	;'I'
   653  00FF07  6E                 	db	110	;'n'
   654  00FF08  76                 	db	118	;'v'
   655  00FF09  61                 	db	97	;'a'
   656  00FF0A  6C                 	db	108	;'l'
   657  00FF0B  69                 	db	105	;'i'
   658  00FF0C  64                 	db	100	;'d'
   659  00FF0D  20                 	db	32
   660  00FF0E  66                 	db	102	;'f'
   661  00FF0F  6F                 	db	111	;'o'
   662  00FF10  6F                 	db	111	;'o'
   663  00FF11  64                 	db	100	;'d'
   664  00FF12  21                 	db	33
   665  00FF13  00                 	db	0
   666  00FF14                     STR_35:
   667  00FF14  49                 	db	73	;'I'
   668  00FF15  6E                 	db	110	;'n'
   669  00FF16  76                 	db	118	;'v'
   670  00FF17  61                 	db	97	;'a'
   671  00FF18  6C                 	db	108	;'l'
   672  00FF19  69                 	db	105	;'i'
   673  00FF1A  64                 	db	100	;'d'
   674  00FF1B  20                 	db	32
   675  00FF1C  64                 	db	100	;'d'
   676  00FF1D  69                 	db	105	;'i'
   677  00FF1E  65                 	db	101	;'e'
   678  00FF1F  74                 	db	116	;'t'
   679  00FF20  21                 	db	33
   680  00FF21  00                 	db	0
   681  00FF22                     STR_6:
   682  00FF22  6D                 	db	109	;'m'
   683  00FF23  6F                 	db	111	;'o'
   684  00FF24  76                 	db	118	;'v'
   685  00FF25  65                 	db	101	;'e'
   686  00FF26  20                 	db	32
   687  00FF27  66                 	db	102	;'f'
   688  00FF28  6F                 	db	111	;'o'
   689  00FF29  72                 	db	114	;'r'
   690  00FF2A  77                 	db	119	;'w'
   691  00FF2B  61                 	db	97	;'a'
   692  00FF2C  72                 	db	114	;'r'
   693  00FF2D  64                 	db	100	;'d'
   694  00FF2E  2E                 	db	46
   695  00FF2F  00                 	db	0
   696  00FF30                     STR_52:
   697  00FF30  6F                 	db	111	;'o'
   698  00FF31  72                 	db	114	;'r'
   699  00FF32  20                 	db	32
   700  00FF33  70                 	db	112	;'p'
   701  00FF34  72                 	db	114	;'r'
   702  00FF35  65                 	db	101	;'e'
   703  00FF36  73                 	db	115	;'s'
   704  00FF37  73                 	db	115	;'s'
   705  00FF38  20                 	db	32
   706  00FF39  44                 	db	68	;'D'
   707  00FF3A  20                 	db	32
   708  00FF3B  74                 	db	116	;'t'
   709  00FF3C  6F                 	db	111	;'o'
   710  00FF3D  00                 	db	0
   711  00FF3E                     STR_67:
   712  00FF3E  49                 	db	73	;'I'
   713  00FF3F  6E                 	db	110	;'n'
   714  00FF40  76                 	db	118	;'v'
   715  00FF41  61                 	db	97	;'a'
   716  00FF42  6C                 	db	108	;'l'
   717  00FF43  69                 	db	105	;'i'
   718  00FF44  64                 	db	100	;'d'
   719  00FF45  20                 	db	32
   720  00FF46  6B                 	db	107	;'k'
   721  00FF47  65                 	db	101	;'e'
   722  00FF48  79                 	db	121	;'y'
   723  00FF49  21                 	db	33
   724  00FF4A  00                 	db	0
   725  00FF4B                     STR_26:
   726  00FF4B  44                 	db	68	;'D'
   727  00FF4C  72                 	db	114	;'r'
   728  00FF4D  61                 	db	97	;'a'
   729  00FF4E  77                 	db	119	;'w'
   730  00FF4F  65                 	db	101	;'e'
   731  00FF50  72                 	db	114	;'r'
   732  00FF51  20                 	db	32
   733  00FF52  32                 	db	50	;'2'
   734  00FF53  3A                 	db	58	;':'
   735  00FF54  20                 	db	32
   736  00FF55  4C                 	db	76	;'L'
   737  00FF56  31                 	db	49	;'1'
   738  00FF57  00                 	db	0
   739  00FF58                     STR_54:
   740  00FF58  4D                 	db	77	;'M'
   741  00FF59  61                 	db	97	;'a'
   742  00FF5A  78                 	db	120	;'x'
   743  00FF5B  69                 	db	105	;'i'
   744  00FF5C  6D                 	db	109	;'m'
   745  00FF5D  75                 	db	117	;'u'
   746  00FF5E  6D                 	db	109	;'m'
   747  00FF5F  20                 	db	32
   748  00FF60  6F                 	db	111	;'o'
   749  00FF61  66                 	db	102	;'f'
   750  00FF62  20                 	db	32
   751  00FF63  38                 	db	56	;'8'
   752  00FF64  00                 	db	0
   753  00FF65                     STR_27:
   754  00FF65  41                 	db	65	;'A'
   755  00FF66  6E                 	db	110	;'n'
   756  00FF67  6F                 	db	111	;'o'
   757  00FF68  74                 	db	116	;'t'
   758  00FF69  68                 	db	104	;'h'
   759  00FF6A  65                 	db	101	;'e'
   760  00FF6B  72                 	db	114	;'r'
   761  00FF6C  20                 	db	32
   762  00FF6D  6C                 	db	108	;'l'
   763  00FF6E  6F                 	db	111	;'o'
   764  00FF6F  67                 	db	103	;'g'
   765  00FF70  3F                 	db	63	;'?'
   766  00FF71  00                 	db	0
   767  00FF72                     STR_46:
   768  00FF72  43                 	db	67	;'C'
   769  00FF73  75                 	db	117	;'u'
   770  00FF74  72                 	db	114	;'r'
   771  00FF75  72                 	db	114	;'r'
   772  00FF76  65                 	db	101	;'e'
   773  00FF77  6E                 	db	110	;'n'
   774  00FF78  74                 	db	116	;'t'
   775  00FF79  20                 	db	32
   776  00FF7A  64                 	db	100	;'d'
   777  00FF7B  61                 	db	97	;'a'
   778  00FF7C  74                 	db	116	;'t'
   779  00FF7D  65                 	db	101	;'e'
   780  00FF7E  00                 	db	0
   781  00FF7F                     STR_51:
   782  00FF7F  76                 	db	118	;'v'
   783  00FF80  69                 	db	105	;'i'
   784  00FF81  65                 	db	101	;'e'
   785  00FF82  77                 	db	119	;'w'
   786  00FF83  20                 	db	32
   787  00FF84  6C                 	db	108	;'l'
   788  00FF85  6F                 	db	111	;'o'
   789  00FF86  67                 	db	103	;'g'
   790  00FF87  73                 	db	115	;'s'
   791  00FF88  2C                 	db	44
   792  00FF89  00                 	db	0
   793  00FF8A                     STR_2:
   794  00FF8A  61                 	db	97	;'a'
   795  00FF8B  76                 	db	118	;'v'
   796  00FF8C  61                 	db	97	;'a'
   797  00FF8D  69                 	db	105	;'i'
   798  00FF8E  6C                 	db	108	;'l'
   799  00FF8F  61                 	db	97	;'a'
   800  00FF90  62                 	db	98	;'b'
   801  00FF91  6C                 	db	108	;'l'
   802  00FF92  65                 	db	101	;'e'
   803  00FF93  2E                 	db	46
   804  00FF94  00                 	db	0
   805  00FF95                     STR_66:
   806  00FF95  52                 	db	82	;'R'
   807  00FF96  65                 	db	101	;'e'
   808  00FF97  62                 	db	98	;'b'
   809  00FF98  6F                 	db	111	;'o'
   810  00FF99  6F                 	db	111	;'o'
   811  00FF9A  74                 	db	116	;'t'
   812  00FF9B  69                 	db	105	;'i'
   813  00FF9C  6E                 	db	110	;'n'
   814  00FF9D  67                 	db	103	;'g'
   815  00FF9E  2E                 	db	46
   816  00FF9F  00                 	db	0
   817  00FFA0                     STR_32:
   818  00FFA0  54                 	db	84	;'T'
   819  00FFA1  72                 	db	114	;'r'
   820  00FFA2  79                 	db	121	;'y'
   821  00FFA3  20                 	db	32
   822  00FFA4  61                 	db	97	;'a'
   823  00FFA5  67                 	db	103	;'g'
   824  00FFA6  61                 	db	97	;'a'
   825  00FFA7  69                 	db	105	;'i'
   826  00FFA8  6E                 	db	110	;'n'
   827  00FFA9  2E                 	db	46
   828  00FFAA  00                 	db	0
   829  00FFAB                     STR_50:
   830  00FFAB  50                 	db	80	;'P'
   831  00FFAC  72                 	db	114	;'r'
   832  00FFAD  65                 	db	101	;'e'
   833  00FFAE  73                 	db	115	;'s'
   834  00FFAF  73                 	db	115	;'s'
   835  00FFB0  20                 	db	32
   836  00FFB1  23                 	db	35
   837  00FFB2  20                 	db	32
   838  00FFB3  74                 	db	116	;'t'
   839  00FFB4  6F                 	db	111	;'o'
   840  00FFB5  00                 	db	0
   841  00FFB6                     STR_47:
   842  00FFB6  61                 	db	97	;'a'
   843  00FFB7  6E                 	db	110	;'n'
   844  00FFB8  64                 	db	100	;'d'
   845  00FFB9  20                 	db	32
   846  00FFBA  74                 	db	116	;'t'
   847  00FFBB  69                 	db	105	;'i'
   848  00FFBC  6D                 	db	109	;'m'
   849  00FFBD  65                 	db	101	;'e'
   850  00FFBE  3A                 	db	58	;':'
   851  00FFBF  00                 	db	0
   852  00FFC0                     STR_58:
   853  00FFC0  4E                 	db	78	;'N'
   854  00FFC1  6F                 	db	111	;'o'
   855  00FFC2  20                 	db	32
   856  00FFC3  64                 	db	100	;'d'
   857  00FFC4  72                 	db	114	;'r'
   858  00FFC5  61                 	db	97	;'a'
   859  00FFC6  77                 	db	119	;'w'
   860  00FFC7  65                 	db	101	;'e'
   861  00FFC8  72                 	db	114	;'r'
   862  00FFC9  00                 	db	0
   863  00FFCA                     STR_10:
   864  00FFCA  6E                 	db	110	;'n'
   865  00FFCB  75                 	db	117	;'u'
   866  00FFCC  6D                 	db	109	;'m'
   867  00FFCD  62                 	db	98	;'b'
   868  00FFCE  65                 	db	101	;'e'
   869  00FFCF  72                 	db	114	;'r'
   870  00FFD0  3A                 	db	58	;':'
   871  00FFD1  20                 	db	32
   872  00FFD2  00                 	db	0
   873  00FFD3                     STR_61:
   874  00FFD3  69                 	db	105	;'i'
   875  00FFD4  6E                 	db	110	;'n'
   876  00FFD5  20                 	db	32
   877  00FFD6  75                 	db	117	;'u'
   878  00FFD7  73                 	db	115	;'s'
   879  00FFD8  65                 	db	101	;'e'
   880  00FFD9  21                 	db	33
   881  00FFDA  00                 	db	0
   882  00FFDB                     STR_1:
   883  00FFDB  4E                 	db	78	;'N'
   884  00FFDC  6F                 	db	111	;'o'
   885  00FFDD  20                 	db	32
   886  00FFDE  6C                 	db	108	;'l'
   887  00FFDF  6F                 	db	111	;'o'
   888  00FFE0  67                 	db	103	;'g'
   889  00FFE1  73                 	db	115	;'s'
   890  00FFE2  00                 	db	0
   891  00FFE3                     STR_39:
   892  00FFE3  53                 	db	83	;'S'
   893  00FFE4  74                 	db	116	;'t'
   894  00FFE5  61                 	db	97	;'a'
   895  00FFE6  6E                 	db	110	;'n'
   896  00FFE7  64                 	db	100	;'d'
   897  00FFE8  62                 	db	98	;'b'
   898  00FFE9  79                 	db	121	;'y'
   899  00FFEA  00                 	db	0
   900  00FFEB                     STR_11:
   901  00FFEB  47                 	db	71	;'G'
   902  00FFEC  72                 	db	114	;'r'
   903  00FFED  65                 	db	101	;'e'
   904  00FFEE  61                 	db	97	;'a'
   905  00FFEF  74                 	db	116	;'t'
   906  00FFF0  21                 	db	33
   907  00FFF1  00                 	db	0
   908  00FFF2                     STR_15:
   909  00FFF2  25                 	db	37
   910  00FFF3  69                 	db	105	;'i'
   911  00FFF4  3A                 	db	58	;':'
   912  00FFF5  25                 	db	37
   913  00FFF6  69                 	db	105	;'i'
   914  00FFF7  30                 	db	48	;'0'
   915  00FFF8  00                 	db	0
   916  00FFF9                     STR_16:
   917  00FFF9  25                 	db	37
   918  00FFFA  69                 	db	105	;'i'
   919  00FFFB  3A                 	db	58	;':'
   920  00FFFC  25                 	db	37
   921  00FFFD  69                 	db	105	;'i'
   922  00FFFE  00                 	db	0
   923  0000                     
   924                           ; #config settings
   925  00FFFF  00                 	db	0	; dummy byte at the end
   926  0000                     
   927                           	psect	cinit
   928  00D332                     __pcinit:
   929                           	opt stack 0
   930  00D332                     start_initialization:
   931                           	opt stack 0
   932  00D332                     __initialization:
   933                           	opt stack 0
   934                           
   935                           ; Clear objects allocated to BANK0 (16 bytes)
   936  00D332  EE00  F080         	lfsr	0,__pbssBANK0
   937  00D336  0E10               	movlw	16
   938  00D338                     clear_0:
   939  00D338  6AEE               	clrf	postinc0,c
   940  00D33A  06E8               	decf	wreg,f,c
   941  00D33C  E1FD               	bnz	clear_0
   942                           
   943                           ; Clear objects allocated to COMRAM (18 bytes)
   944  00D33E  EE00  F06C         	lfsr	0,__pbssCOMRAM
   945  00D342  0E12               	movlw	18
   946  00D344                     clear_1:
   947  00D344  6AEE               	clrf	postinc0,c
   948  00D346  06E8               	decf	wreg,f,c
   949  00D348  E1FD               	bnz	clear_1
   950  00D34A                     end_of_initialization:
   951                           	opt stack 0
   952  00D34A                     __end_of__initialization:
   953                           	opt stack 0
   954  00D34A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   955  00D34C  6EF8               	movwf	tblptru,c
   956  00D34E  0100               	movlb	0
   957  00D350  EFE4  F069         	goto	_main	;jump to C main() function
   958                           tblptru	equ	0xFF8
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           
   962                           	psect	bssCOMRAM
   963  00006C                     __pbssCOMRAM:
   964                           	opt stack 0
   965  00006C                     _drawerInformation:
   966                           	opt stack 0
   967  00006C                     	ds	16
   968  00007C                     standbyMode@LCDinterruptState:
   969                           	opt stack 0
   970  00007C                     	ds	1
   971  00007D                     	ds	1
   972                           tblptru	equ	0xFF8
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           
   976                           	psect	bssBANK0
   977  000080                     __pbssBANK0:
   978                           	opt stack 0
   979  000080                     diet_press@F3112:
   980                           	opt stack 0
   981  000080                     	ds	8
   982  000088                     food_press@F3097:
   983                           	opt stack 0
   984  000088                     	ds	8
   985                           tblptru	equ	0xFF8
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           
   989                           	psect	cstackCOMRAM
   990  000001                     __pcstackCOMRAM:
   991                           	opt stack 0
   992  000001                     ??_isdigit:
   993  000001                     ??_I2C_Master_Wait:
   994  000001                     ?_check_food:
   995                           	opt stack 0
   996  000001                     ?_verifyKeypress:
   997                           	opt stack 0
   998  000001                     ?_get_digits:
   999                           	opt stack 0
  1000  000001                     ?_decode_drawer:
  1001                           	opt stack 0
  1002  000001                     ?___wmul:
  1003                           	opt stack 0
  1004  000001                     ?___lwdiv:
  1005                           	opt stack 0
  1006  000001                     ?___lldiv:
  1007                           	opt stack 0
  1008  000001                     lcdNibble@temp:
  1009                           	opt stack 0
  1010  000001                     writeEEPROM@data:
  1011                           	opt stack 0
  1012  000001                     readEEPROM@address:
  1013                           	opt stack 0
  1014  000001                     check_food@sum:
  1015                           	opt stack 0
  1016  000001                     verifyKeypress@keypress:
  1017                           	opt stack 0
  1018  000001                     get_digits@sum:
  1019                           	opt stack 0
  1020  000001                     decode_drawer@drawer:
  1021                           	opt stack 0
  1022  000001                     ___wmul@multiplier:
  1023                           	opt stack 0
  1024  000001                     ___lwdiv@dividend:
  1025                           	opt stack 0
  1026  000001                     ___lldiv@dividend:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x0
  1030  000001                     	ds	1
  1031  000002                     lcdNibble@data:
  1032                           	opt stack 0
  1033  000002                     writeEEPROM@address:
  1034                           	opt stack 0
  1035  000002                     I2C_Master_Read@ackBit:
  1036                           	opt stack 0
  1037  000002                     _isdigit$930:
  1038                           	opt stack 0
  1039  000002                     I2C_Master_Write@byteToWrite:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x1
  1043  000002                     	ds	1
  1044  000003                     ??_verifyKeypress:
  1045  000003                     ??_get_digits:
  1046  000003                     ??_decode_drawer:
  1047  000003                     lcdInst@data:
  1048                           	opt stack 0
  1049  000003                     putch@data:
  1050                           	opt stack 0
  1051  000003                     I2C_Master_Read@receivedByte:
  1052                           	opt stack 0
  1053  000003                     isdigit@c:
  1054                           	opt stack 0
  1055  000003                     check_food@foodInput:
  1056                           	opt stack 0
  1057  000003                     ___wmul@multiplicand:
  1058                           	opt stack 0
  1059  000003                     ___lwdiv@divisor:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x2
  1063  000003                     	ds	1
  1064  000004                     ??_initLCD:
  1065  000004                     
  1066                           ; 1 bytes @ 0x3
  1067  000004                     	ds	1
  1068  000005                     ??_check_food:
  1069  000005                     verifyKeypress@logNumber:
  1070                           	opt stack 0
  1071  000005                     get_digits@count:
  1072                           	opt stack 0
  1073  000005                     decode_drawer@returnValue:
  1074                           	opt stack 0
  1075  000005                     ___wmul@product:
  1076                           	opt stack 0
  1077  000005                     ___lwdiv@quotient:
  1078                           	opt stack 0
  1079  000005                     ___lldiv@divisor:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0x4
  1083  000005                     	ds	1
  1084  000006                     verifyKeypress@returnVal:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x5
  1088  000006                     	ds	1
  1089  000007                     ___lwdiv@counter:
  1090                           	opt stack 0
  1091  000007                     check_food@returnValue:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x6
  1095  000007                     	ds	1
  1096  000008                     ?___lwmod:
  1097                           	opt stack 0
  1098  000008                     verifyKeypress@i:
  1099                           	opt stack 0
  1100  000008                     ___lwmod@dividend:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x7
  1104  000008                     	ds	1
  1105  000009                     ___lldiv@quotient:
  1106                           	opt stack 0
  1107                           
  1108                           ; 4 bytes @ 0x8
  1109  000009                     	ds	1
  1110  00000A                     ___lwmod@divisor:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x9
  1114  00000A                     	ds	2
  1115  00000C                     ___lwmod@counter:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0xB
  1119  00000C                     	ds	1
  1120  00000D                     ?_printf:
  1121                           	opt stack 0
  1122  00000D                     ___lldiv@counter:
  1123                           	opt stack 0
  1124  00000D                     printf@f:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0xC
  1128  00000D                     	ds	1
  1129  00000E                     I2C_Master_Init@clockFreq:
  1130                           	opt stack 0
  1131                           
  1132                           ; 4 bytes @ 0xD
  1133  00000E                     	ds	4
  1134  000012                     ??_I2C_Master_Init:
  1135                           
  1136                           ; 1 bytes @ 0x11
  1137  000012                     	ds	5
  1138  000017                     ??_printf:
  1139                           
  1140                           ; 1 bytes @ 0x16
  1141  000017                     	ds	4
  1142  00001B                     printf@idx:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x1A
  1146  00001B                     	ds	1
  1147  00001C                     printf@ap:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x1B
  1151  00001C                     	ds	2
  1152  00001E                     printf@prec:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x1D
  1156  00001E                     	ds	1
  1157  00001F                     printf@val:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x1E
  1161  00001F                     	ds	2
  1162  000021                     printf@flag:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x20
  1166  000021                     	ds	1
  1167  000022                     printf@width:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x21
  1171  000022                     	ds	2
  1172  000024                     printf@c:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x23
  1176  000024                     	ds	1
  1177  000025                     ?_displayLogs:
  1178                           	opt stack 0
  1179  000025                     ?_food_press:
  1180                           	opt stack 0
  1181  000025                     ?_diet_press:
  1182                           	opt stack 0
  1183  000025                     ?_which_drawer:
  1184                           	opt stack 0
  1185  000025                     displayLogs@logNumber:
  1186                           	opt stack 0
  1187  000025                     food_press@dietSum:
  1188                           	opt stack 0
  1189  000025                     diet_press@drawer:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x24
  1193  000025                     	ds	2
  1194  000027                     ??_displayLogs:
  1195  000027                     ??_diet_press:
  1196  000027                     ??_which_drawer:
  1197  000027                     food_press@drawer:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x26
  1201  000027                     	ds	1
  1202  000028                     which_drawer@rand:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x27
  1206  000028                     	ds	1
  1207  000029                     ??_food_press:
  1208  000029                     displayLogs@roundPieces:
  1209                           	opt stack 0
  1210  000029                     diet_press@previous:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x28
  1214  000029                     	ds	1
  1215  00002A                     which_drawer@sum:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x29
  1219  00002A                     	ds	1
  1220  00002B                     displayLogs@flatPieces:
  1221                           	opt stack 0
  1222  00002B                     food_press@tally:
  1223                           	opt stack 0
  1224  00002B                     diet_press@i:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x2A
  1228  00002B                     	ds	1
  1229  00002C                     which_drawer@backCheck:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x2B
  1233  00002C                     	ds	1
  1234  00002D                     displayLogs@longPieces:
  1235                           	opt stack 0
  1236  00002D                     food_press@backCheck:
  1237                           	opt stack 0
  1238  00002D                     diet_press@backCheck:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x2C
  1242  00002D                     	ds	1
  1243  00002E                     which_drawer@count:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x2D
  1247  00002E                     	ds	1
  1248  00002F                     displayLogs@keypress3:
  1249                           	opt stack 0
  1250  00002F                     food_press@isValid:
  1251                           	opt stack 0
  1252  00002F                     diet_press@count:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x2E
  1256  00002F                     	ds	1
  1257  000030                     which_drawer@keypress:
  1258                           	opt stack 0
  1259  000030                     displayLogs@operationTime:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x2F
  1263  000030                     	ds	1
  1264  000031                     food_press@count:
  1265                           	opt stack 0
  1266  000031                     diet_press@sum:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x30
  1270  000031                     	ds	1
  1271  000032                     displayLogs@minutes:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x31
  1275  000032                     	ds	1
  1276  000033                     diet_press@keypress:
  1277                           	opt stack 0
  1278  000033                     food_press@foodTable:
  1279                           	opt stack 0
  1280                           
  1281                           ; 8 bytes @ 0x32
  1282  000033                     	ds	1
  1283  000034                     displayLogs@seconds:
  1284                           	opt stack 0
  1285  000034                     diet_press@dietTable:
  1286                           	opt stack 0
  1287                           
  1288                           ; 8 bytes @ 0x33
  1289  000034                     	ds	2
  1290  000036                     displayLogs@markedDrawer1:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x35
  1294  000036                     	ds	2
  1295  000038                     displayLogs@markedDrawer2:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x37
  1299  000038                     	ds	2
  1300  00003A                     displayLogs@markedDrawer3:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x39
  1304  00003A                     	ds	1
  1305  00003B                     food_press@keypress:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x3A
  1309  00003B                     	ds	1
  1310  00003C                     displayLogs@markedDrawer4:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x3B
  1314  00003C                     	ds	2
  1315  00003E                     displayLogs@n:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x3D
  1319  00003E                     	ds	2
  1320  000040                     ?_viewLogs:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x3F
  1324  000040                     	ds	2
  1325  000042                     ??_viewLogs:
  1326                           
  1327                           ; 1 bytes @ 0x41
  1328  000042                     	ds	2
  1329  000044                     viewLogs@logView:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x43
  1333  000044                     	ds	2
  1334  000046                     viewLogs@checkLog:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x45
  1338  000046                     	ds	2
  1339  000048                     viewLogs@returnVal:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x47
  1343  000048                     	ds	2
  1344  00004A                     viewLogs@logNumber:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x49
  1348  00004A                     	ds	1
  1349  00004B                     viewLogs@keypress2:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x4A
  1353  00004B                     	ds	1
  1354  00004C                     ??_standbyMode:
  1355                           
  1356                           ; 1 bytes @ 0x4B
  1357  00004C                     	ds	2
  1358  00004E                     standbyMode@time:
  1359                           	opt stack 0
  1360                           
  1361                           ; 7 bytes @ 0x4D
  1362  00004E                     	ds	7
  1363  000055                     standbyMode@firstIteration:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x54
  1367  000055                     	ds	2
  1368  000057                     standbyMode@whichKey:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x56
  1372  000057                     	ds	2
  1373  000059                     standbyMode@keypress:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x58
  1377  000059                     	ds	1
  1378  00005A                     standbyMode@display:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x59
  1382  00005A                     	ds	1
  1383  00005B                     standbyMode@keypress1:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x5A
  1387  00005B                     	ds	1
  1388  00005C                     standbyMode@validDrawer:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x5B
  1392  00005C                     	ds	2
  1393  00005E                     standbyMode@zero:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x5D
  1397  00005E                     	ds	2
  1398  000060                     standbyMode@food:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x5F
  1402  000060                     	ds	2
  1403  000062                     standbyMode@x:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x61
  1407  000062                     	ds	2
  1408  000064                     standbyMode@drawerCount:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x63
  1412  000064                     	ds	2
  1413  000066                     standbyMode@diet:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x65
  1417  000066                     	ds	2
  1418  000068                     standbyMode@i:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x67
  1422  000068                     	ds	2
  1423  00006A                     standbyMode@drawer:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x69
  1427  00006A                     	ds	2
  1428  00006C                     tblptru	equ	0xFF8
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           
  1432                           ; 1 bytes @ 0x6B
  1433 ;;
  1434 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1435 ;;
  1436 ;; *************** function _main *****************
  1437 ;; Defined at:
  1438 ;;		line 13 in file "main.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels required when called:    6
  1458 ;; This function calls:
  1459 ;;		_initLCD
  1460 ;;		_standbyMode
  1461 ;; This function is called by:
  1462 ;;		Startup code after reset
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text0
  1467  00D3C8                     __ptext0:
  1468                           	opt stack 0
  1469  00D3C8                     _main:
  1470                           	opt stack 25
  1471                           
  1472                           ;main.c: 19: LATA = 0x00;
  1473                           
  1474                           ;incstack = 0
  1475  00D3C8  0E00               	movlw	0
  1476  00D3CA  6E89               	movwf	3977,c	;volatile
  1477                           
  1478                           ;main.c: 20: LATB = 0x00;
  1479  00D3CC  0E00               	movlw	0
  1480  00D3CE  6E8A               	movwf	3978,c	;volatile
  1481                           
  1482                           ;main.c: 21: LATC = 0x00;
  1483  00D3D0  0E00               	movlw	0
  1484  00D3D2  6E8B               	movwf	3979,c	;volatile
  1485                           
  1486                           ;main.c: 22: LATD = 0x00;
  1487  00D3D4  0E00               	movlw	0
  1488  00D3D6  6E8C               	movwf	3980,c	;volatile
  1489                           
  1490                           ;main.c: 23: LATE = 0x00;
  1491  00D3D8  0E00               	movlw	0
  1492  00D3DA  6E8D               	movwf	3981,c	;volatile
  1493                           
  1494                           ;main.c: 27: TRISA = 0xFF;
  1495  00D3DC  6892               	setf	3986,c	;volatile
  1496                           
  1497                           ;main.c: 28: TRISB = 0xFF;
  1498  00D3DE  6893               	setf	3987,c	;volatile
  1499                           
  1500                           ;main.c: 29: TRISC = 0x00;
  1501  00D3E0  0E00               	movlw	0
  1502  00D3E2  6E94               	movwf	3988,c	;volatile
  1503                           
  1504                           ;main.c: 30: TRISD = 0x00;
  1505  00D3E4  0E00               	movlw	0
  1506  00D3E6  6E95               	movwf	3989,c	;volatile
  1507                           
  1508                           ;main.c: 31: TRISE = 0x00;
  1509  00D3E8  0E00               	movlw	0
  1510  00D3EA  6E96               	movwf	3990,c	;volatile
  1511                           
  1512                           ;main.c: 34: ADCON0 = 0x00;
  1513  00D3EC  0E00               	movlw	0
  1514  00D3EE  6EC2               	movwf	4034,c	;volatile
  1515                           
  1516                           ;main.c: 35: ADCON1 = 0b00001111;
  1517  00D3F0  0E0F               	movlw	15
  1518  00D3F2  6EC1               	movwf	4033,c	;volatile
  1519                           
  1520                           ;main.c: 38: initLCD();
  1521  00D3F4  EC21  F06A         	call	_initLCD	;wreg free
  1522                           
  1523                           ;main.c: 56: standbyMode();
  1524  00D3F8  ECA3  F079         	call	_standbyMode	;wreg free
  1525                           
  1526                           ;main.c: 57: return;
  1527  00D3FC  EF00  F000         	goto	start
  1528  00D400                     __end_of_main:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           
  1534 ;; *************** function _standbyMode *****************
  1535 ;; Defined at:
  1536 ;;		line 969 in file "standbyMode.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  keypress1       1   90[COMRAM] unsigned char 
  1541 ;;  whichKey        2   86[COMRAM] unsigned int 
  1542 ;;  drawer          2  105[COMRAM] unsigned int 
  1543 ;;  i               2  103[COMRAM] unsigned int 
  1544 ;;  diet            2  101[COMRAM] unsigned int 
  1545 ;;  drawerCount     2   99[COMRAM] unsigned int 
  1546 ;;  food            2   95[COMRAM] unsigned int 
  1547 ;;  zero            2   93[COMRAM] unsigned int 
  1548 ;;  validDrawer     2   91[COMRAM] unsigned int 
  1549 ;;  firstIterati    2   84[COMRAM] unsigned int 
  1550 ;;  time            7   77[COMRAM] unsigned char [7]
  1551 ;;  x               2   97[COMRAM] unsigned int 
  1552 ;;  display         1   89[COMRAM] unsigned char 
  1553 ;;  keypress        1   88[COMRAM] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1566 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;Total ram usage:       32 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    5
  1570 ;; This function calls:
  1571 ;;		_I2C_Master_Init
  1572 ;;		_I2C_Master_Read
  1573 ;;		_I2C_Master_Start
  1574 ;;		_I2C_Master_Stop
  1575 ;;		_I2C_Master_Write
  1576 ;;		_diet_press
  1577 ;;		_food_press
  1578 ;;		_lcdInst
  1579 ;;		_printf
  1580 ;;		_putch
  1581 ;;		_readEEPROM
  1582 ;;		_viewLogs
  1583 ;;		_which_drawer
  1584 ;;		_writeEEPROM
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text1
  1591  00F346                     __ptext1:
  1592                           	opt stack 0
  1593  00F346                     _standbyMode:
  1594                           	opt stack 25
  1595                           
  1596                           ;standbyMode.c: 970: I2C_Master_Init(100000);
  1597                           
  1598                           ;incstack = 0
  1599  00F346  0EA0               	movlw	160
  1600  00F348  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1601  00F34A  0E86               	movlw	134
  1602  00F34C  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1603  00F34E  0E01               	movlw	1
  1604  00F350  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1605  00F352  0E00               	movlw	0
  1606  00F354  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1607  00F356  EC99  F06A         	call	_I2C_Master_Init	;wreg free
  1608                           
  1609                           ;standbyMode.c: 971: unsigned char time[7];
  1610                           ;standbyMode.c: 972: unsigned int x = 0;
  1611  00F35A  0E00               	movlw	0
  1612  00F35C  6E63               	movwf	standbyMode@x+1,c
  1613  00F35E  0E00               	movlw	0
  1614  00F360  6E62               	movwf	standbyMode@x,c
  1615                           
  1616                           ;standbyMode.c: 975: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1617  00F362  0E01               	movlw	1
  1618  00F364  EC6C  F069         	call	_lcdInst
  1619  00F368  0EC3               	movlw	195
  1620  00F36A  6E4C               	movwf	??_standbyMode& (0+255),c
  1621  00F36C  0ECD               	movlw	205
  1622  00F36E                     u6377:
  1623  00F36E  2EE8               	decfsz	wreg,f,c
  1624  00F370  D7FE               	bra	u6377
  1625  00F372  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1626  00F374  D7FC               	bra	u6377
  1627  00F376  F000               	nop	
  1628                           
  1629                           ;standbyMode.c: 976: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1630  00F378  0E0C               	movlw	12
  1631  00F37A  EC6C  F069         	call	_lcdInst
  1632                           
  1633                           ;standbyMode.c: 977: printf("Standby");
  1634  00F37E  0EE3               	movlw	low STR_39
  1635  00F380  6E0D               	movwf	printf@f,c
  1636  00F382  0EFF               	movlw	high STR_39
  1637  00F384  6E0E               	movwf	printf@f+1,c
  1638  00F386  EC7A  F06F         	call	_printf	;wreg free
  1639                           
  1640                           ;standbyMode.c: 978: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1641  00F38A  0E66               	movlw	102
  1642  00F38C  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  1643  00F38E  0E76               	movlw	118
  1644  00F390  6E4C               	movwf	??_standbyMode& (0+255),c
  1645  00F392  0EC1               	movlw	193
  1646  00F394                     u6387:
  1647  00F394  2EE8               	decfsz	wreg,f,c
  1648  00F396  D7FE               	bra	u6387
  1649  00F398  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1650  00F39A  D7FC               	bra	u6387
  1651  00F39C  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1652  00F39E  D7FA               	bra	u6387
  1653  00F3A0  F000               	nop	
  1654                           
  1655                           ;standbyMode.c: 979: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1656  00F3A2  0E01               	movlw	1
  1657  00F3A4  EC6C  F069         	call	_lcdInst
  1658  00F3A8  0EC3               	movlw	195
  1659  00F3AA  6E4C               	movwf	??_standbyMode& (0+255),c
  1660  00F3AC  0ECD               	movlw	205
  1661  00F3AE                     u6397:
  1662  00F3AE  2EE8               	decfsz	wreg,f,c
  1663  00F3B0  D7FE               	bra	u6397
  1664  00F3B2  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1665  00F3B4  D7FC               	bra	u6397
  1666  00F3B6  F000               	nop	
  1667                           
  1668                           ;standbyMode.c: 980: printf("Press any key to");
  1669  00F3B8  0ECD               	movlw	low STR_5
  1670  00F3BA  6E0D               	movwf	printf@f,c
  1671  00F3BC  0EFD               	movlw	high STR_5
  1672  00F3BE  6E0E               	movwf	printf@f+1,c
  1673  00F3C0  EC7A  F06F         	call	_printf	;wreg free
  1674                           
  1675                           ;standbyMode.c: 981: lcdInst(0xC0);;
  1676  00F3C4  0EC0               	movlw	192
  1677  00F3C6  EC6C  F069         	call	_lcdInst
  1678                           
  1679                           ;standbyMode.c: 982: printf("begin operation.");
  1680  00F3CA  0E9A               	movlw	low STR_41
  1681  00F3CC  6E0D               	movwf	printf@f,c
  1682  00F3CE  0EFD               	movlw	high STR_41
  1683  00F3D0  6E0E               	movwf	printf@f+1,c
  1684  00F3D2  EC7A  F06F         	call	_printf	;wreg free
  1685  00F3D6                     
  1686                           ;standbyMode.c: 985: continue;
  1687  00F3D6  A281               	btfss	3969,1,c	;volatile
  1688  00F3D8  D7FE               	goto	l468
  1689                           
  1690                           ;standbyMode.c: 986: }
  1691                           ;standbyMode.c: 988: writeEEPROM(250, 1);
  1692  00F3DA  0E01               	movlw	1
  1693  00F3DC  6E01               	movwf	writeEEPROM@data,c
  1694  00F3DE  0EFA               	movlw	250
  1695  00F3E0  ECCF  F069         	call	_writeEEPROM
  1696                           
  1697                           ;standbyMode.c: 989: writeEEPROM(3, 91);
  1698  00F3E4  0E5B               	movlw	91
  1699  00F3E6  6E01               	movwf	writeEEPROM@data,c
  1700  00F3E8  0E03               	movlw	3
  1701  00F3EA  ECCF  F069         	call	_writeEEPROM
  1702                           
  1703                           ;standbyMode.c: 990: writeEEPROM(4, 3);
  1704  00F3EE  0E03               	movlw	3
  1705  00F3F0  6E01               	movwf	writeEEPROM@data,c
  1706  00F3F2  0E04               	movlw	4
  1707  00F3F4  ECCF  F069         	call	_writeEEPROM
  1708                           
  1709                           ;standbyMode.c: 991: writeEEPROM(5, 15);
  1710  00F3F8  0E0F               	movlw	15
  1711  00F3FA  6E01               	movwf	writeEEPROM@data,c
  1712  00F3FC  0E05               	movlw	5
  1713  00F3FE  ECCF  F069         	call	_writeEEPROM
  1714                           
  1715                           ;standbyMode.c: 992: writeEEPROM(6, 8);
  1716  00F402  0E08               	movlw	8
  1717  00F404  6E01               	movwf	writeEEPROM@data,c
  1718  00F406  0E06               	movlw	6
  1719  00F408  ECCF  F069         	call	_writeEEPROM
  1720                           
  1721                           ;standbyMode.c: 993: writeEEPROM(7, 12);
  1722  00F40C  0E0C               	movlw	12
  1723  00F40E  6E01               	movwf	writeEEPROM@data,c
  1724  00F410  0E07               	movlw	7
  1725  00F412  ECCF  F069         	call	_writeEEPROM
  1726                           
  1727                           ;standbyMode.c: 994: writeEEPROM(8, 1);
  1728  00F416  0E01               	movlw	1
  1729  00F418  6E01               	movwf	writeEEPROM@data,c
  1730  00F41A  0E08               	movlw	8
  1731  00F41C  ECCF  F069         	call	_writeEEPROM
  1732                           
  1733                           ;standbyMode.c: 995: writeEEPROM(9, 13);
  1734  00F420  0E0D               	movlw	13
  1735  00F422  6E01               	movwf	writeEEPROM@data,c
  1736  00F424  0E09               	movlw	9
  1737  00F426  ECCF  F069         	call	_writeEEPROM
  1738                           
  1739                           ;standbyMode.c: 996: writeEEPROM(10, 0);
  1740  00F42A  0E00               	movlw	0
  1741  00F42C  6E01               	movwf	writeEEPROM@data,c
  1742  00F42E  0E0A               	movlw	10
  1743  00F430  ECCF  F069         	call	_writeEEPROM
  1744                           
  1745                           ;standbyMode.c: 997: writeEEPROM(0x0, 0x1);
  1746  00F434  0E01               	movlw	1
  1747  00F436  6E01               	movwf	writeEEPROM@data,c
  1748  00F438  0E00               	movlw	0
  1749  00F43A  ECCF  F069         	call	_writeEEPROM
  1750                           
  1751                           ;standbyMode.c: 998: unsigned char display = readEEPROM(0x0);
  1752  00F43E  0E00               	movlw	0
  1753  00F440  EC80  F069         	call	_readEEPROM
  1754  00F444  6E5A               	movwf	standbyMode@display,c
  1755                           
  1756                           ;standbyMode.c: 999: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1757  00F446  0E01               	movlw	1
  1758  00F448  EC6C  F069         	call	_lcdInst
  1759  00F44C  0EC3               	movlw	195
  1760  00F44E  6E4C               	movwf	??_standbyMode& (0+255),c
  1761  00F450  0ECD               	movlw	205
  1762  00F452                     u6407:
  1763  00F452  2EE8               	decfsz	wreg,f,c
  1764  00F454  D7FE               	bra	u6407
  1765  00F456  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1766  00F458  D7FC               	bra	u6407
  1767  00F45A  F000               	nop	
  1768                           
  1769                           ;standbyMode.c: 1000: printf("Stored value: ");
  1770  00F45C  0E7F               	movlw	low STR_42
  1771  00F45E  6E0D               	movwf	printf@f,c
  1772  00F460  0EFE               	movlw	high STR_42
  1773  00F462  6E0E               	movwf	printf@f+1,c
  1774  00F464  EC7A  F06F         	call	_printf	;wreg free
  1775                           
  1776                           ;standbyMode.c: 1001: putch(input[display]);
  1777  00F468  505A               	movf	standbyMode@display,w,c
  1778  00F46A  0D01               	mullw	1
  1779  00F46C  0E36               	movlw	low _input
  1780  00F46E  24F3               	addwf	prodl,w,c
  1781  00F470  6EF6               	movwf	tblptrl,c
  1782  00F472  0EFD               	movlw	high _input
  1783  00F474  20F4               	addwfc	prodh,w,c
  1784  00F476  6EF7               	movwf	tblptrh,c
  1785  00F478                     	if	0	;There are less than 3 active tblptr bytes
  1786  00F478                     	endif
  1787  00F478  0008               	tblrd		*
  1788  00F47A  50F5               	movf	tablat,w,c
  1789  00F47C  EC76  F069         	call	_putch
  1790                           
  1791                           ;standbyMode.c: 1002: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1792  00F480  0E66               	movlw	102
  1793  00F482  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  1794  00F484  0E76               	movlw	118
  1795  00F486  6E4C               	movwf	??_standbyMode& (0+255),c
  1796  00F488  0EC1               	movlw	193
  1797  00F48A                     u6417:
  1798  00F48A  2EE8               	decfsz	wreg,f,c
  1799  00F48C  D7FE               	bra	u6417
  1800  00F48E  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1801  00F490  D7FC               	bra	u6417
  1802  00F492  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1803  00F494  D7FA               	bra	u6417
  1804  00F496  F000               	nop	
  1805                           
  1806                           ;standbyMode.c: 1004: writeEEPROM(0x0, 0x3);
  1807  00F498  0E03               	movlw	3
  1808  00F49A  6E01               	movwf	writeEEPROM@data,c
  1809  00F49C  0E00               	movlw	0
  1810  00F49E  ECCF  F069         	call	_writeEEPROM
  1811                           
  1812                           ;standbyMode.c: 1005: unsigned char display = readEEPROM(0x0);
  1813  00F4A2  0E00               	movlw	0
  1814  00F4A4  EC80  F069         	call	_readEEPROM
  1815  00F4A8  6E5A               	movwf	standbyMode@display,c
  1816                           
  1817                           ;standbyMode.c: 1006: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1818  00F4AA  0E01               	movlw	1
  1819  00F4AC  EC6C  F069         	call	_lcdInst
  1820  00F4B0  0EC3               	movlw	195
  1821  00F4B2  6E4C               	movwf	??_standbyMode& (0+255),c
  1822  00F4B4  0ECD               	movlw	205
  1823  00F4B6                     u6427:
  1824  00F4B6  2EE8               	decfsz	wreg,f,c
  1825  00F4B8  D7FE               	bra	u6427
  1826  00F4BA  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1827  00F4BC  D7FC               	bra	u6427
  1828  00F4BE  F000               	nop	
  1829                           
  1830                           ;standbyMode.c: 1007: printf("Stored value: ");
  1831  00F4C0  0E7F               	movlw	low STR_42
  1832  00F4C2  6E0D               	movwf	printf@f,c
  1833  00F4C4  0EFE               	movlw	high STR_42
  1834  00F4C6  6E0E               	movwf	printf@f+1,c
  1835  00F4C8  EC7A  F06F         	call	_printf	;wreg free
  1836                           
  1837                           ;standbyMode.c: 1008: putch(input[display]);
  1838  00F4CC  505A               	movf	standbyMode@display,w,c
  1839  00F4CE  0D01               	mullw	1
  1840  00F4D0  0E36               	movlw	low _input
  1841  00F4D2  24F3               	addwf	prodl,w,c
  1842  00F4D4  6EF6               	movwf	tblptrl,c
  1843  00F4D6  0EFD               	movlw	high _input
  1844  00F4D8  20F4               	addwfc	prodh,w,c
  1845  00F4DA  6EF7               	movwf	tblptrh,c
  1846  00F4DC                     	if	0	;There are less than 3 active tblptr bytes
  1847  00F4DC                     	endif
  1848  00F4DC  0008               	tblrd		*
  1849  00F4DE  50F5               	movf	tablat,w,c
  1850  00F4E0  EC76  F069         	call	_putch
  1851                           
  1852                           ;standbyMode.c: 1009: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1853  00F4E4  0E66               	movlw	102
  1854  00F4E6  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  1855  00F4E8  0E76               	movlw	118
  1856  00F4EA  6E4C               	movwf	??_standbyMode& (0+255),c
  1857  00F4EC  0EC1               	movlw	193
  1858  00F4EE                     u6437:
  1859  00F4EE  2EE8               	decfsz	wreg,f,c
  1860  00F4F0  D7FE               	bra	u6437
  1861  00F4F2  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1862  00F4F4  D7FC               	bra	u6437
  1863  00F4F6  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1864  00F4F8  D7FA               	bra	u6437
  1865  00F4FA  F000               	nop	
  1866                           
  1867                           ;standbyMode.c: 1012: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1868  00F4FC  0E01               	movlw	1
  1869  00F4FE  EC6C  F069         	call	_lcdInst
  1870  00F502  0EC3               	movlw	195
  1871  00F504  6E4C               	movwf	??_standbyMode& (0+255),c
  1872  00F506  0ECD               	movlw	205
  1873  00F508                     u6447:
  1874  00F508  2EE8               	decfsz	wreg,f,c
  1875  00F50A  D7FE               	bra	u6447
  1876  00F50C  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1877  00F50E  D7FC               	bra	u6447
  1878  00F510  F000               	nop	
  1879                           
  1880                           ;standbyMode.c: 1013: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1881  00F512  0E0C               	movlw	12
  1882  00F514  EC6C  F069         	call	_lcdInst
  1883                           
  1884                           ;standbyMode.c: 1014: printf("Welcome to your");
  1885  00F518  0E5F               	movlw	low STR_44
  1886  00F51A  6E0D               	movwf	printf@f,c
  1887  00F51C  0EFE               	movlw	high STR_44
  1888  00F51E  6E0E               	movwf	printf@f+1,c
  1889  00F520  EC7A  F06F         	call	_printf	;wreg free
  1890                           
  1891                           ;standbyMode.c: 1015: lcdInst(0xC0);;
  1892  00F524  0EC0               	movlw	192
  1893  00F526  EC6C  F069         	call	_lcdInst
  1894                           
  1895                           ;standbyMode.c: 1016: printf("cabinet sorter!");
  1896  00F52A  0EEF               	movlw	low STR_45
  1897  00F52C  6E0D               	movwf	printf@f,c
  1898  00F52E  0EFD               	movlw	high STR_45
  1899  00F530  6E0E               	movwf	printf@f+1,c
  1900  00F532  EC7A  F06F         	call	_printf	;wreg free
  1901                           
  1902                           ;standbyMode.c: 1017: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1903  00F536  0E66               	movlw	102
  1904  00F538  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  1905  00F53A  0E76               	movlw	118
  1906  00F53C  6E4C               	movwf	??_standbyMode& (0+255),c
  1907  00F53E  0EC1               	movlw	193
  1908  00F540                     u6457:
  1909  00F540  2EE8               	decfsz	wreg,f,c
  1910  00F542  D7FE               	bra	u6457
  1911  00F544  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1912  00F546  D7FC               	bra	u6457
  1913  00F548  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1914  00F54A  D7FA               	bra	u6457
  1915  00F54C  F000               	nop	
  1916                           
  1917                           ;standbyMode.c: 1020: I2C_Master_Start();
  1918  00F54E  EC56  F069         	call	_I2C_Master_Start	;wreg free
  1919                           
  1920                           ;standbyMode.c: 1021: I2C_Master_Write(0b11010000);
  1921  00F552  0E00               	movlw	0
  1922  00F554  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1923  00F556  0ED0               	movlw	208
  1924  00F558  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1925  00F55A  EC5E  F069         	call	_I2C_Master_Write	;wreg free
  1926                           
  1927                           ;standbyMode.c: 1022: I2C_Master_Write(0x00);
  1928  00F55E  0E00               	movlw	0
  1929  00F560  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1930  00F562  0E00               	movlw	0
  1931  00F564  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1932  00F566  EC5E  F069         	call	_I2C_Master_Write	;wreg free
  1933                           
  1934                           ;standbyMode.c: 1023: I2C_Master_Stop();
  1935  00F56A  EC5A  F069         	call	_I2C_Master_Stop	;wreg free
  1936                           
  1937                           ;standbyMode.c: 1026: I2C_Master_Start();
  1938  00F56E  EC56  F069         	call	_I2C_Master_Start	;wreg free
  1939                           
  1940                           ;standbyMode.c: 1027: I2C_Master_Write(0b11010001);
  1941  00F572  0E00               	movlw	0
  1942  00F574  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1943  00F576  0ED1               	movlw	209
  1944  00F578  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1945  00F57A  EC5E  F069         	call	_I2C_Master_Write	;wreg free
  1946                           
  1947                           ;standbyMode.c: 1028: for(x = 0; x < 6; x++){
  1948  00F57E  0E00               	movlw	0
  1949  00F580  6E63               	movwf	standbyMode@x+1,c
  1950  00F582  0E00               	movlw	0
  1951  00F584  6E62               	movwf	standbyMode@x,c
  1952  00F586  5063               	movf	standbyMode@x+1,w,c
  1953  00F588  E111               	bnz	l4601
  1954  00F58A  0E06               	movlw	6
  1955  00F58C  5C62               	subwf	standbyMode@x,w,c
  1956  00F58E  B0D8               	btfsc	status,0,c
  1957  00F590  D00D               	goto	u6040
  1958                           
  1959                           ;standbyMode.c: 1029: time[x] = I2C_Master_Read(0);
  1960  00F592  0E4E               	movlw	low standbyMode@time
  1961  00F594  2462               	addwf	standbyMode@x,w,c
  1962  00F596  6ED9               	movwf	fsr2l,c
  1963  00F598  0E00               	movlw	high standbyMode@time
  1964  00F59A  2063               	addwfc	standbyMode@x+1,w,c
  1965  00F59C  6EDA               	movwf	fsr2h,c
  1966  00F59E  0E00               	movlw	0
  1967  00F5A0  ECAA  F069         	call	_I2C_Master_Read
  1968  00F5A4  6EDF               	movwf	indf2,c
  1969  00F5A6  4A62               	infsnz	standbyMode@x,f,c
  1970  00F5A8  2A63               	incf	standbyMode@x+1,f,c
  1971  00F5AA  D7ED               	goto	L1
  1972  00F5AC                     u6040:
  1973  00F5AC                     l4601:
  1974                           
  1975                           ;standbyMode.c: 1030: }
  1976                           ;standbyMode.c: 1031: time[6] = I2C_Master_Read(1);
  1977  00F5AC  0E01               	movlw	1
  1978  00F5AE  ECAA  F069         	call	_I2C_Master_Read
  1979  00F5B2  6E54               	movwf	standbyMode@time+6,c
  1980                           
  1981                           ;standbyMode.c: 1032: I2C_Master_Stop();
  1982  00F5B4  EC5A  F069         	call	_I2C_Master_Stop	;wreg free
  1983                           
  1984                           ;standbyMode.c: 1034: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1985  00F5B8  0E01               	movlw	1
  1986  00F5BA  EC6C  F069         	call	_lcdInst
  1987  00F5BE  0EC3               	movlw	195
  1988  00F5C0  6E4C               	movwf	??_standbyMode& (0+255),c
  1989  00F5C2  0ECD               	movlw	205
  1990  00F5C4                     u6467:
  1991  00F5C4  2EE8               	decfsz	wreg,f,c
  1992  00F5C6  D7FE               	bra	u6467
  1993  00F5C8  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  1994  00F5CA  D7FC               	bra	u6467
  1995  00F5CC  F000               	nop	
  1996                           
  1997                           ;standbyMode.c: 1035: printf("Current date");
  1998  00F5CE  0E72               	movlw	low STR_46
  1999  00F5D0  6E0D               	movwf	printf@f,c
  2000  00F5D2  0EFF               	movlw	high STR_46
  2001  00F5D4  6E0E               	movwf	printf@f+1,c
  2002  00F5D6  EC7A  F06F         	call	_printf	;wreg free
  2003                           
  2004                           ;standbyMode.c: 1036: lcdInst(0xC0);;
  2005  00F5DA  0EC0               	movlw	192
  2006  00F5DC  EC6C  F069         	call	_lcdInst
  2007                           
  2008                           ;standbyMode.c: 1037: printf("and time:");
  2009  00F5E0  0EB6               	movlw	low STR_47
  2010  00F5E2  6E0D               	movwf	printf@f,c
  2011  00F5E4  0EFF               	movlw	high STR_47
  2012  00F5E6  6E0E               	movwf	printf@f+1,c
  2013  00F5E8  EC7A  F06F         	call	_printf	;wreg free
  2014                           
  2015                           ;standbyMode.c: 1038: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2016  00F5EC  0E66               	movlw	102
  2017  00F5EE  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2018  00F5F0  0E76               	movlw	118
  2019  00F5F2  6E4C               	movwf	??_standbyMode& (0+255),c
  2020  00F5F4  0EC1               	movlw	193
  2021  00F5F6                     u6477:
  2022  00F5F6  2EE8               	decfsz	wreg,f,c
  2023  00F5F8  D7FE               	bra	u6477
  2024  00F5FA  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2025  00F5FC  D7FC               	bra	u6477
  2026  00F5FE  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2027  00F600  D7FA               	bra	u6477
  2028  00F602  F000               	nop	
  2029                           
  2030                           ;standbyMode.c: 1040: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2031  00F604  0E01               	movlw	1
  2032  00F606  EC6C  F069         	call	_lcdInst
  2033  00F60A  0EC3               	movlw	195
  2034  00F60C  6E4C               	movwf	??_standbyMode& (0+255),c
  2035  00F60E  0ECD               	movlw	205
  2036  00F610                     u6487:
  2037  00F610  2EE8               	decfsz	wreg,f,c
  2038  00F612  D7FE               	bra	u6487
  2039  00F614  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2040  00F616  D7FC               	bra	u6487
  2041  00F618  F000               	nop	
  2042                           
  2043                           ;standbyMode.c: 1041: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2044  00F61A  0ED9               	movlw	low STR_48
  2045  00F61C  6E0D               	movwf	printf@f,c
  2046  00F61E  0EFE               	movlw	high STR_48
  2047  00F620  6E0E               	movwf	printf@f+1,c
  2048  00F622  C054  F00F         	movff	standbyMode@time+6,?_printf+2
  2049  00F626  6A10               	clrf	?_printf+3,c
  2050  00F628  C053  F011         	movff	standbyMode@time+5,?_printf+4
  2051  00F62C  6A12               	clrf	?_printf+5,c
  2052  00F62E  C052  F013         	movff	standbyMode@time+4,?_printf+6
  2053  00F632  6A14               	clrf	?_printf+7,c
  2054  00F634  EC7A  F06F         	call	_printf	;wreg free
  2055                           
  2056                           ;standbyMode.c: 1042: lcdInst(0xC0);;
  2057  00F638  0EC0               	movlw	192
  2058  00F63A  EC6C  F069         	call	_lcdInst
  2059                           
  2060                           ;standbyMode.c: 1043: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2061  00F63E  0EE8               	movlw	low STR_49
  2062  00F640  6E0D               	movwf	printf@f,c
  2063  00F642  0EFE               	movlw	high STR_49
  2064  00F644  6E0E               	movwf	printf@f+1,c
  2065  00F646  C050  F00F         	movff	standbyMode@time+2,?_printf+2
  2066  00F64A  6A10               	clrf	?_printf+3,c
  2067  00F64C  C04F  F011         	movff	standbyMode@time+1,?_printf+4
  2068  00F650  6A12               	clrf	?_printf+5,c
  2069  00F652  C04E  F013         	movff	standbyMode@time,?_printf+6
  2070  00F656  6A14               	clrf	?_printf+7,c
  2071  00F658  EC7A  F06F         	call	_printf	;wreg free
  2072                           
  2073                           ;standbyMode.c: 1044: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2074  00F65C  0E66               	movlw	102
  2075  00F65E  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2076  00F660  0E76               	movlw	118
  2077  00F662  6E4C               	movwf	??_standbyMode& (0+255),c
  2078  00F664  0EC1               	movlw	193
  2079  00F666                     u6497:
  2080  00F666  2EE8               	decfsz	wreg,f,c
  2081  00F668  D7FE               	bra	u6497
  2082  00F66A  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2083  00F66C  D7FC               	bra	u6497
  2084  00F66E  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2085  00F670  D7FA               	bra	u6497
  2086  00F672  F000               	nop	
  2087                           
  2088                           ;standbyMode.c: 1047: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2089  00F674  0E01               	movlw	1
  2090  00F676  EC6C  F069         	call	_lcdInst
  2091  00F67A  0EC3               	movlw	195
  2092  00F67C  6E4C               	movwf	??_standbyMode& (0+255),c
  2093  00F67E  0ECD               	movlw	205
  2094  00F680                     u6507:
  2095  00F680  2EE8               	decfsz	wreg,f,c
  2096  00F682  D7FE               	bra	u6507
  2097  00F684  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2098  00F686  D7FC               	bra	u6507
  2099  00F688  F000               	nop	
  2100                           
  2101                           ;standbyMode.c: 1048: printf("Press # to");
  2102  00F68A  0EAB               	movlw	low STR_50
  2103  00F68C  6E0D               	movwf	printf@f,c
  2104  00F68E  0EFF               	movlw	high STR_50
  2105  00F690  6E0E               	movwf	printf@f+1,c
  2106  00F692  EC7A  F06F         	call	_printf	;wreg free
  2107                           
  2108                           ;standbyMode.c: 1049: lcdInst(0xC0);;
  2109  00F696  0EC0               	movlw	192
  2110  00F698  EC6C  F069         	call	_lcdInst
  2111                           
  2112                           ;standbyMode.c: 1050: printf("view logs,");
  2113  00F69C  0E7F               	movlw	low STR_51
  2114  00F69E  6E0D               	movwf	printf@f,c
  2115  00F6A0  0EFF               	movlw	high STR_51
  2116  00F6A2  6E0E               	movwf	printf@f+1,c
  2117  00F6A4  EC7A  F06F         	call	_printf	;wreg free
  2118                           
  2119                           ;standbyMode.c: 1051: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2120  00F6A8  0E66               	movlw	102
  2121  00F6AA  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2122  00F6AC  0E76               	movlw	118
  2123  00F6AE  6E4C               	movwf	??_standbyMode& (0+255),c
  2124  00F6B0  0EC1               	movlw	193
  2125  00F6B2                     u6517:
  2126  00F6B2  2EE8               	decfsz	wreg,f,c
  2127  00F6B4  D7FE               	bra	u6517
  2128  00F6B6  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2129  00F6B8  D7FC               	bra	u6517
  2130  00F6BA  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2131  00F6BC  D7FA               	bra	u6517
  2132  00F6BE  F000               	nop	
  2133                           
  2134                           ;standbyMode.c: 1052: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2135  00F6C0  0E01               	movlw	1
  2136  00F6C2  EC6C  F069         	call	_lcdInst
  2137  00F6C6  0EC3               	movlw	195
  2138  00F6C8  6E4C               	movwf	??_standbyMode& (0+255),c
  2139  00F6CA  0ECD               	movlw	205
  2140  00F6CC                     u6527:
  2141  00F6CC  2EE8               	decfsz	wreg,f,c
  2142  00F6CE  D7FE               	bra	u6527
  2143  00F6D0  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2144  00F6D2  D7FC               	bra	u6527
  2145  00F6D4  F000               	nop	
  2146                           
  2147                           ;standbyMode.c: 1053: printf("or press D to");
  2148  00F6D6  0E30               	movlw	low STR_52
  2149  00F6D8  6E0D               	movwf	printf@f,c
  2150  00F6DA  0EFF               	movlw	high STR_52
  2151  00F6DC  6E0E               	movwf	printf@f+1,c
  2152  00F6DE  EC7A  F06F         	call	_printf	;wreg free
  2153                           
  2154                           ;standbyMode.c: 1054: lcdInst(0xC0);;
  2155  00F6E2  0EC0               	movlw	192
  2156  00F6E4  EC6C  F069         	call	_lcdInst
  2157                           
  2158                           ;standbyMode.c: 1055: printf("begin operation.");
  2159  00F6E8  0E9A               	movlw	low STR_41
  2160  00F6EA  6E0D               	movwf	printf@f,c
  2161  00F6EC  0EFD               	movlw	high STR_41
  2162  00F6EE  6E0E               	movwf	printf@f+1,c
  2163  00F6F0  EC7A  F06F         	call	_printf	;wreg free
  2164  00F6F4  A281               	btfss	3969,1,c	;volatile
  2165  00F6F6  D7FE               	goto	l473
  2166                           
  2167                           ;standbyMode.c: 1058: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2168  00F6F8  3881               	swapf	3969,w,c	;volatile
  2169  00F6FA  0B0F               	andlw	15
  2170  00F6FC  0B0F               	andlw	15
  2171  00F6FE  6E59               	movwf	standbyMode@keypress,c
  2172  00F700  B281               	btfsc	3969,1,c	;volatile
  2173  00F702  D7FE               	goto	l476
  2174                           
  2175                           ;standbyMode.c: 1061: if (keypress == 15){
  2176  00F704  0E0F               	movlw	15
  2177  00F706  1859               	xorwf	standbyMode@keypress,w,c
  2178  00F708  A4D8               	btfss	status,2,c
  2179  00F70A  D284               	goto	l478
  2180                           
  2181                           ;standbyMode.c: 1103: unsigned int drawerCount = 0;
  2182  00F70C  0E00               	movlw	0
  2183  00F70E  6E65               	movwf	standbyMode@drawerCount+1,c
  2184  00F710  0E00               	movlw	0
  2185  00F712  6E64               	movwf	standbyMode@drawerCount,c
  2186                           
  2187                           ;standbyMode.c: 1104: unsigned int i = 0;
  2188  00F714  0E00               	movlw	0
  2189  00F716  6E69               	movwf	standbyMode@i+1,c
  2190  00F718  0E00               	movlw	0
  2191  00F71A  6E68               	movwf	standbyMode@i,c
  2192                           
  2193                           ;standbyMode.c: 1105: unsigned int validDrawer = 0;
  2194  00F71C  0E00               	movlw	0
  2195  00F71E  6E5D               	movwf	standbyMode@validDrawer+1,c
  2196  00F720  0E00               	movlw	0
  2197  00F722  6E5C               	movwf	standbyMode@validDrawer,c
  2198                           
  2199                           ;standbyMode.c: 1106: unsigned int zero = 0;
  2200  00F724  0E00               	movlw	0
  2201  00F726  6E5F               	movwf	standbyMode@zero+1,c
  2202  00F728  0E00               	movlw	0
  2203  00F72A  6E5E               	movwf	standbyMode@zero,c
  2204                           
  2205                           ;standbyMode.c: 1107: unsigned int firstIteration = 0;
  2206  00F72C  0E00               	movlw	0
  2207  00F72E  6E56               	movwf	standbyMode@firstIteration+1,c
  2208  00F730  0E00               	movlw	0
  2209  00F732  6E55               	movwf	standbyMode@firstIteration,c
  2210                           
  2211                           ;standbyMode.c: 1108: unsigned int drawer = 0;
  2212  00F734  0E00               	movlw	0
  2213  00F736  6E6B               	movwf	standbyMode@drawer+1,c
  2214  00F738  0E00               	movlw	0
  2215  00F73A  6E6A               	movwf	standbyMode@drawer,c
  2216                           
  2217                           ;standbyMode.c: 1109: unsigned int diet = 0;
  2218  00F73C  0E00               	movlw	0
  2219  00F73E  6E67               	movwf	standbyMode@diet+1,c
  2220  00F740  0E00               	movlw	0
  2221  00F742  6E66               	movwf	standbyMode@diet,c
  2222                           
  2223                           ;standbyMode.c: 1110: unsigned int food = 0;
  2224  00F744  0E00               	movlw	0
  2225  00F746  6E61               	movwf	standbyMode@food+1,c
  2226  00F748  0E00               	movlw	0
  2227  00F74A  6E60               	movwf	standbyMode@food,c
  2228  00F74C                     
  2229                           ;standbyMode.c: 1113: if (firstIteration == 1){
  2230  00F74C  0455               	decf	standbyMode@firstIteration,w,c
  2231  00F74E  1056               	iorwf	standbyMode@firstIteration+1,w,c
  2232  00F750  A4D8               	btfss	status,2,c
  2233  00F752  D15C               	goto	l480
  2234  00F754                     u6080:
  2235                           
  2236                           ;standbyMode.c: 1116: if(drawerCount >= 8){
  2237                           
  2238                           ;standbyMode.c: 1114: while (1){
  2239  00F754  5065               	movf	standbyMode@drawerCount+1,w,c
  2240  00F756  E104               	bnz	u6090
  2241  00F758  0E08               	movlw	8
  2242  00F75A  5C64               	subwf	standbyMode@drawerCount,w,c
  2243  00F75C  A0D8               	btfss	status,0,c
  2244  00F75E  D02A               	goto	l482
  2245  00F760                     u6090:
  2246                           
  2247                           ;standbyMode.c: 1117: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2248  00F760  0E01               	movlw	1
  2249  00F762  EC6C  F069         	call	_lcdInst
  2250  00F766  0EC3               	movlw	195
  2251  00F768  6E4C               	movwf	??_standbyMode& (0+255),c
  2252  00F76A  0ECD               	movlw	205
  2253  00F76C                     u6537:
  2254  00F76C  2EE8               	decfsz	wreg,f,c
  2255  00F76E  D7FE               	bra	u6537
  2256  00F770  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2257  00F772  D7FC               	bra	u6537
  2258  00F774  F000               	nop	
  2259                           
  2260                           ;standbyMode.c: 1118: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2261  00F776  0E0C               	movlw	12
  2262  00F778  EC6C  F069         	call	_lcdInst
  2263                           
  2264                           ;standbyMode.c: 1119: printf("Maximum of 8");
  2265  00F77C  0E58               	movlw	low STR_54
  2266  00F77E  6E0D               	movwf	printf@f,c
  2267  00F780  0EFF               	movlw	high STR_54
  2268  00F782  6E0E               	movwf	printf@f+1,c
  2269  00F784  EC7A  F06F         	call	_printf	;wreg free
  2270                           
  2271                           ;standbyMode.c: 1120: lcdInst(0xC0);;
  2272  00F788  0EC0               	movlw	192
  2273  00F78A  EC6C  F069         	call	_lcdInst
  2274                           
  2275                           ;standbyMode.c: 1121: printf("drawers reached!");
  2276  00F78E  0E89               	movlw	low STR_55
  2277  00F790  6E0D               	movwf	printf@f,c
  2278  00F792  0EFD               	movlw	high STR_55
  2279  00F794  6E0E               	movwf	printf@f+1,c
  2280  00F796  EC7A  F06F         	call	_printf	;wreg free
  2281                           
  2282                           ;standbyMode.c: 1122: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2283  00F79A  0E66               	movlw	102
  2284  00F79C  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2285  00F79E  0E76               	movlw	118
  2286  00F7A0  6E4C               	movwf	??_standbyMode& (0+255),c
  2287  00F7A2  0EC1               	movlw	193
  2288  00F7A4                     u6547:
  2289  00F7A4  2EE8               	decfsz	wreg,f,c
  2290  00F7A6  D7FE               	bra	u6547
  2291  00F7A8  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2292  00F7AA  D7FC               	bra	u6547
  2293  00F7AC  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2294  00F7AE  D7FA               	bra	u6547
  2295  00F7B0  F000               	nop	
  2296                           
  2297                           ;standbyMode.c: 1123: break;
  2298  00F7B2  0012               	return	
  2299  00F7B4                     l482:
  2300                           
  2301                           ;standbyMode.c: 1124: }
  2302                           ;standbyMode.c: 1126: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  2303  00F7B4  0E01               	movlw	1
  2304  00F7B6  EC6C  F069         	call	_lcdInst
  2305  00F7BA  0EC3               	movlw	195
  2306  00F7BC  6E4C               	movwf	??_standbyMode& (0+255),c
  2307  00F7BE  0ECD               	movlw	205
  2308  00F7C0                     u6557:
  2309  00F7C0  2EE8               	decfsz	wreg,f,c
  2310  00F7C2  D7FE               	bra	u6557
  2311  00F7C4  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2312  00F7C6  D7FC               	bra	u6557
  2313  00F7C8  F000               	nop	
  2314                           
  2315                           ;standbyMode.c: 1127: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2316  00F7CA  0E0C               	movlw	12
  2317  00F7CC  EC6C  F069         	call	_lcdInst
  2318                           
  2319                           ;standbyMode.c: 1128: printf("Another drawer?");
  2320  00F7D0  0E4F               	movlw	low STR_56
  2321  00F7D2  6E0D               	movwf	printf@f,c
  2322  00F7D4  0EFE               	movlw	high STR_56
  2323  00F7D6  6E0E               	movwf	printf@f+1,c
  2324  00F7D8  EC7A  F06F         	call	_printf	;wreg free
  2325                           
  2326                           ;standbyMode.c: 1129: lcdInst(0xC0);;
  2327  00F7DC  0EC0               	movlw	192
  2328  00F7DE  EC6C  F069         	call	_lcdInst
  2329                           
  2330                           ;standbyMode.c: 1130: printf("# = No, D = Yes");
  2331  00F7E2  0E6F               	movlw	low STR_28
  2332  00F7E4  6E0D               	movwf	printf@f,c
  2333  00F7E6  0EFE               	movlw	high STR_28
  2334  00F7E8  6E0E               	movwf	printf@f+1,c
  2335  00F7EA  EC7A  F06F         	call	_printf	;wreg free
  2336  00F7EE  A281               	btfss	3969,1,c	;volatile
  2337  00F7F0  D7FE               	goto	l486
  2338                           
  2339                           ;standbyMode.c: 1133: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2340  00F7F2  3881               	swapf	3969,w,c	;volatile
  2341  00F7F4  0B0F               	andlw	15
  2342  00F7F6  0B0F               	andlw	15
  2343  00F7F8  6E5B               	movwf	standbyMode@keypress1,c
  2344  00F7FA  B281               	btfsc	3969,1,c	;volatile
  2345  00F7FC  D7FE               	goto	l489
  2346                           
  2347                           ;standbyMode.c: 1136: if (keypress1 == 15){
  2348  00F7FE  0E0F               	movlw	15
  2349  00F800  185B               	xorwf	standbyMode@keypress1,w,c
  2350  00F802  A4D8               	btfss	status,2,c
  2351  00F804  D0FC               	goto	l491
  2352  00F806                     u6120:
  2353                           
  2354                           ;standbyMode.c: 1137: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2355  00F806  0E01               	movlw	1
  2356  00F808  EC6C  F069         	call	_lcdInst
  2357  00F80C  0EC3               	movlw	195
  2358  00F80E  6E4C               	movwf	??_standbyMode& (0+255),c
  2359  00F810  0ECD               	movlw	205
  2360  00F812                     u6567:
  2361  00F812  2EE8               	decfsz	wreg,f,c
  2362  00F814  D7FE               	bra	u6567
  2363  00F816  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2364  00F818  D7FC               	bra	u6567
  2365  00F81A  F000               	nop	
  2366                           
  2367                           ;standbyMode.c: 1138: drawer = which_drawer();
  2368  00F81C  EC11  F06D         	call	_which_drawer	;wreg free
  2369  00F820  C025  F06A         	movff	?_which_drawer,standbyMode@drawer
  2370  00F824  C026  F06B         	movff	?_which_drawer+1,standbyMode@drawer+1
  2371                           
  2372                           ;standbyMode.c: 1140: if (drawer == 100){
  2373  00F828  0E64               	movlw	100
  2374  00F82A  186A               	xorwf	standbyMode@drawer,w,c
  2375  00F82C  106B               	iorwf	standbyMode@drawer+1,w,c
  2376  00F82E  A4D8               	btfss	status,2,c
  2377  00F830  D005               	goto	l493
  2378                           
  2379                           ;standbyMode.c: 1141: drawer = 0;
  2380  00F832  0E00               	movlw	0
  2381  00F834  6E6B               	movwf	standbyMode@drawer+1,c
  2382  00F836  0E00               	movlw	0
  2383  00F838  6E6A               	movwf	standbyMode@drawer,c
  2384                           
  2385                           ;standbyMode.c: 1142: goto DRAWER_BACK;
  2386  00F83A  D7BC               	goto	l482
  2387  00F83C                     l493:
  2388                           
  2389                           ;standbyMode.c: 1143: }
  2390                           ;standbyMode.c: 1145: for (i=0; i<8; i++){
  2391  00F83C  0E00               	movlw	0
  2392  00F83E  6E69               	movwf	standbyMode@i+1,c
  2393  00F840  0E00               	movlw	0
  2394  00F842  6E68               	movwf	standbyMode@i,c
  2395  00F844                     l4691:
  2396  00F844  5069               	movf	standbyMode@i+1,w,c
  2397  00F846  E12C               	bnz	l4707
  2398  00F848  0E08               	movlw	8
  2399  00F84A  5C68               	subwf	standbyMode@i,w,c
  2400  00F84C  B0D8               	btfsc	status,0,c
  2401  00F84E  D028               	goto	u6170
  2402                           
  2403                           ;standbyMode.c: 1146: if (drawerInformation[i] == drawer){
  2404  00F850  90D8               	bcf	status,0,c
  2405  00F852  3468               	rlcf	standbyMode@i,w,c
  2406  00F854  6ED9               	movwf	fsr2l,c
  2407  00F856  3469               	rlcf	standbyMode@i+1,w,c
  2408  00F858  6EDA               	movwf	fsr2h,c
  2409  00F85A  0E6C               	movlw	low _drawerInformation
  2410  00F85C  26D9               	addwf	fsr2l,f,c
  2411  00F85E  0E00               	movlw	high _drawerInformation
  2412  00F860  22DA               	addwfc	fsr2h,f,c
  2413  00F862  506A               	movf	standbyMode@drawer,w,c
  2414  00F864  18DE               	xorwf	postinc2,w,c
  2415  00F866  E119               	bnz	l4703
  2416  00F868  506B               	movf	standbyMode@drawer+1,w,c
  2417  00F86A  18DE               	xorwf	postinc2,w,c
  2418  00F86C  A4D8               	btfss	status,2,c
  2419  00F86E  D015               	goto	l497
  2420                           
  2421                           ;standbyMode.c: 1147: validDrawer = 1;
  2422  00F870  0E00               	movlw	0
  2423  00F872  6E5D               	movwf	standbyMode@validDrawer+1,c
  2424  00F874  0E01               	movlw	1
  2425  00F876  6E5C               	movwf	standbyMode@validDrawer,c
  2426                           
  2427                           ;standbyMode.c: 1148: if (drawerInformation[i] == 0){
  2428  00F878  90D8               	bcf	status,0,c
  2429  00F87A  3468               	rlcf	standbyMode@i,w,c
  2430  00F87C  6ED9               	movwf	fsr2l,c
  2431  00F87E  3469               	rlcf	standbyMode@i+1,w,c
  2432  00F880  6EDA               	movwf	fsr2h,c
  2433  00F882  0E6C               	movlw	low _drawerInformation
  2434  00F884  26D9               	addwf	fsr2l,f,c
  2435  00F886  0E00               	movlw	high _drawerInformation
  2436  00F888  22DA               	addwfc	fsr2h,f,c
  2437  00F88A  50DE               	movf	postinc2,w,c
  2438  00F88C  10DE               	iorwf	postinc2,w,c
  2439  00F88E  A4D8               	btfss	status,2,c
  2440  00F890  D004               	goto	l497
  2441                           
  2442                           ;standbyMode.c: 1149: zero = 1;
  2443  00F892  0E00               	movlw	0
  2444  00F894  6E5F               	movwf	standbyMode@zero+1,c
  2445  00F896  0E01               	movlw	1
  2446  00F898  6E5E               	movwf	standbyMode@zero,c
  2447  00F89A                     l497:
  2448  00F89A                     l4703:
  2449  00F89A  4A68               	infsnz	standbyMode@i,f,c
  2450  00F89C  2A69               	incf	standbyMode@i+1,f,c
  2451  00F89E  D7D2               	goto	l4691
  2452  00F8A0                     u6170:
  2453  00F8A0                     l4707:
  2454                           
  2455                           ;standbyMode.c: 1150: }
  2456                           ;standbyMode.c: 1151: }
  2457                           ;standbyMode.c: 1152: }
  2458                           ;standbyMode.c: 1153: if (validDrawer == 1){
  2459  00F8A0  045C               	decf	standbyMode@validDrawer,w,c
  2460  00F8A2  105D               	iorwf	standbyMode@validDrawer+1,w,c
  2461  00F8A4  A4D8               	btfss	status,2,c
  2462  00F8A6  D060               	goto	l498
  2463                           
  2464                           ;standbyMode.c: 1154: if (zero == 1){
  2465  00F8A8  045E               	decf	standbyMode@zero,w,c
  2466  00F8AA  105F               	iorwf	standbyMode@zero+1,w,c
  2467  00F8AC  A4D8               	btfss	status,2,c
  2468  00F8AE  D02E               	goto	l499
  2469                           
  2470                           ;standbyMode.c: 1155: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2471  00F8B0  0E01               	movlw	1
  2472  00F8B2  EC6C  F069         	call	_lcdInst
  2473  00F8B6  0EC3               	movlw	195
  2474  00F8B8  6E4C               	movwf	??_standbyMode& (0+255),c
  2475  00F8BA  0ECD               	movlw	205
  2476  00F8BC                     u6577:
  2477  00F8BC  2EE8               	decfsz	wreg,f,c
  2478  00F8BE  D7FE               	bra	u6577
  2479  00F8C0  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2480  00F8C2  D7FC               	bra	u6577
  2481  00F8C4  F000               	nop	
  2482                           
  2483                           ;standbyMode.c: 1156: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2484  00F8C6  0E0C               	movlw	12
  2485  00F8C8  EC6C  F069         	call	_lcdInst
  2486                           
  2487                           ;standbyMode.c: 1157: printf("No drawer");
  2488  00F8CC  0EC0               	movlw	low STR_58
  2489  00F8CE  6E0D               	movwf	printf@f,c
  2490  00F8D0  0EFF               	movlw	high STR_58
  2491  00F8D2  6E0E               	movwf	printf@f+1,c
  2492  00F8D4  EC7A  F06F         	call	_printf	;wreg free
  2493                           
  2494                           ;standbyMode.c: 1158: lcdInst(0xC0);;
  2495  00F8D8  0EC0               	movlw	192
  2496  00F8DA  EC6C  F069         	call	_lcdInst
  2497                           
  2498                           ;standbyMode.c: 1159: printf("number pressed.");
  2499  00F8DE  0EFF               	movlw	low STR_59
  2500  00F8E0  6E0D               	movwf	printf@f,c
  2501  00F8E2  0EFD               	movlw	high STR_59
  2502  00F8E4  6E0E               	movwf	printf@f+1,c
  2503  00F8E6  EC7A  F06F         	call	_printf	;wreg free
  2504                           
  2505                           ;standbyMode.c: 1160: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2506  00F8EA  0E66               	movlw	102
  2507  00F8EC  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2508  00F8EE  0E76               	movlw	118
  2509  00F8F0  6E4C               	movwf	??_standbyMode& (0+255),c
  2510  00F8F2  0EC1               	movlw	193
  2511  00F8F4                     u6587:
  2512  00F8F4  2EE8               	decfsz	wreg,f,c
  2513  00F8F6  D7FE               	bra	u6587
  2514  00F8F8  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2515  00F8FA  D7FC               	bra	u6587
  2516  00F8FC  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2517  00F8FE  D7FA               	bra	u6587
  2518  00F900  F000               	nop	
  2519                           
  2520                           ;standbyMode.c: 1161: zero = 0;
  2521  00F902  0E00               	movlw	0
  2522  00F904  6E5F               	movwf	standbyMode@zero+1,c
  2523  00F906  0E00               	movlw	0
  2524  00F908  6E5E               	movwf	standbyMode@zero,c
  2525                           
  2526                           ;standbyMode.c: 1162: }
  2527  00F90A  D029               	goto	l500
  2528  00F90C                     l499:
  2529                           
  2530                           ;standbyMode.c: 1163: else{
  2531                           ;standbyMode.c: 1164: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2532  00F90C  0E01               	movlw	1
  2533  00F90E  EC6C  F069         	call	_lcdInst
  2534  00F912  0EC3               	movlw	195
  2535  00F914  6E4C               	movwf	??_standbyMode& (0+255),c
  2536  00F916  0ECD               	movlw	205
  2537  00F918                     u6597:
  2538  00F918  2EE8               	decfsz	wreg,f,c
  2539  00F91A  D7FE               	bra	u6597
  2540  00F91C  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2541  00F91E  D7FC               	bra	u6597
  2542  00F920  F000               	nop	
  2543                           
  2544                           ;standbyMode.c: 1165: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2545  00F922  0E0C               	movlw	12
  2546  00F924  EC6C  F069         	call	_lcdInst
  2547                           
  2548                           ;standbyMode.c: 1166: printf("Drawer already");
  2549  00F928  0EF7               	movlw	low STR_60
  2550  00F92A  6E0D               	movwf	printf@f,c
  2551  00F92C  0EFE               	movlw	high STR_60
  2552  00F92E  6E0E               	movwf	printf@f+1,c
  2553  00F930  EC7A  F06F         	call	_printf	;wreg free
  2554                           
  2555                           ;standbyMode.c: 1167: lcdInst(0xC0);;
  2556  00F934  0EC0               	movlw	192
  2557  00F936  EC6C  F069         	call	_lcdInst
  2558                           
  2559                           ;standbyMode.c: 1168: printf("in use!");
  2560  00F93A  0ED3               	movlw	low STR_61
  2561  00F93C  6E0D               	movwf	printf@f,c
  2562  00F93E  0EFF               	movlw	high STR_61
  2563  00F940  6E0E               	movwf	printf@f+1,c
  2564  00F942  EC7A  F06F         	call	_printf	;wreg free
  2565                           
  2566                           ;standbyMode.c: 1169: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2567  00F946  0E66               	movlw	102
  2568  00F948  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2569  00F94A  0E76               	movlw	118
  2570  00F94C  6E4C               	movwf	??_standbyMode& (0+255),c
  2571  00F94E  0EC1               	movlw	193
  2572  00F950                     u6607:
  2573  00F950  2EE8               	decfsz	wreg,f,c
  2574  00F952  D7FE               	bra	u6607
  2575  00F954  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2576  00F956  D7FC               	bra	u6607
  2577  00F958  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2578  00F95A  D7FA               	bra	u6607
  2579  00F95C  F000               	nop	
  2580  00F95E                     l500:
  2581                           
  2582                           ;standbyMode.c: 1170: }
  2583                           ;standbyMode.c: 1171: validDrawer = 0;
  2584  00F95E  0E00               	movlw	0
  2585  00F960  6E5D               	movwf	standbyMode@validDrawer+1,c
  2586  00F962  0E00               	movlw	0
  2587  00F964  6E5C               	movwf	standbyMode@validDrawer,c
  2588                           
  2589                           ;standbyMode.c: 1172: continue;
  2590  00F966  D6F6               	goto	u6080
  2591  00F968                     l498:
  2592                           
  2593                           ;standbyMode.c: 1174: else{
  2594                           ;standbyMode.c: 1175: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2595  00F968  0E01               	movlw	1
  2596  00F96A  EC6C  F069         	call	_lcdInst
  2597  00F96E  0EC3               	movlw	195
  2598  00F970  6E4C               	movwf	??_standbyMode& (0+255),c
  2599  00F972  0ECD               	movlw	205
  2600  00F974                     u6617:
  2601  00F974  2EE8               	decfsz	wreg,f,c
  2602  00F976  D7FE               	bra	u6617
  2603  00F978  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2604  00F97A  D7FC               	bra	u6617
  2605  00F97C  F000               	nop	
  2606                           
  2607                           ;standbyMode.c: 1176: diet = diet_press(drawer);
  2608  00F97E  C06A  F025         	movff	standbyMode@drawer,diet_press@drawer
  2609  00F982  C06B  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2610  00F986  ECF7  F072         	call	_diet_press	;wreg free
  2611  00F98A  C025  F066         	movff	?_diet_press,standbyMode@diet
  2612  00F98E  C026  F067         	movff	?_diet_press+1,standbyMode@diet+1
  2613                           
  2614                           ;standbyMode.c: 1177: if (diet == 100){
  2615  00F992  0E64               	movlw	100
  2616  00F994  1866               	xorwf	standbyMode@diet,w,c
  2617  00F996  1067               	iorwf	standbyMode@diet+1,w,c
  2618  00F998  A4D8               	btfss	status,2,c
  2619  00F99A  D005               	goto	l504
  2620                           
  2621                           ;standbyMode.c: 1178: diet = 0;
  2622  00F99C  0E00               	movlw	0
  2623  00F99E  6E67               	movwf	standbyMode@diet+1,c
  2624  00F9A0  0E00               	movlw	0
  2625  00F9A2  6E66               	movwf	standbyMode@diet,c
  2626                           
  2627                           ;standbyMode.c: 1179: goto DIET_BACK1;
  2628  00F9A4  D730               	goto	u6120
  2629  00F9A6                     l504:
  2630                           
  2631                           ;standbyMode.c: 1180: }
  2632                           ;standbyMode.c: 1182: food = food_press(diet, drawer);
  2633  00F9A6  C066  F025         	movff	standbyMode@diet,food_press@dietSum
  2634  00F9AA  C067  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2635  00F9AE  C06A  F027         	movff	standbyMode@drawer,food_press@drawer
  2636  00F9B2  C06B  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2637  00F9B6  EC17  F06C         	call	_food_press	;wreg free
  2638  00F9BA  C025  F060         	movff	?_food_press,standbyMode@food
  2639  00F9BE  C026  F061         	movff	?_food_press+1,standbyMode@food+1
  2640                           
  2641                           ;standbyMode.c: 1183: if (food == 100){
  2642  00F9C2  0E64               	movlw	100
  2643  00F9C4  1860               	xorwf	standbyMode@food,w,c
  2644  00F9C6  1061               	iorwf	standbyMode@food+1,w,c
  2645  00F9C8  A4D8               	btfss	status,2,c
  2646  00F9CA  D009               	goto	l505
  2647                           
  2648                           ;standbyMode.c: 1184: diet = 0;
  2649  00F9CC  0E00               	movlw	0
  2650  00F9CE  6E67               	movwf	standbyMode@diet+1,c
  2651  00F9D0  0E00               	movlw	0
  2652  00F9D2  6E66               	movwf	standbyMode@diet,c
  2653                           
  2654                           ;standbyMode.c: 1185: food = 0;
  2655  00F9D4  0E00               	movlw	0
  2656  00F9D6  6E61               	movwf	standbyMode@food+1,c
  2657  00F9D8  0E00               	movlw	0
  2658  00F9DA  6E60               	movwf	standbyMode@food,c
  2659                           
  2660                           ;standbyMode.c: 1186: goto FOOD_BACK1;
  2661  00F9DC  D7C5               	goto	l498
  2662  00F9DE                     l505:
  2663                           
  2664                           ;standbyMode.c: 1187: }
  2665                           ;standbyMode.c: 1188: drawerInformation[drawerCount] = drawer;
  2666  00F9DE  90D8               	bcf	status,0,c
  2667  00F9E0  3464               	rlcf	standbyMode@drawerCount,w,c
  2668  00F9E2  6ED9               	movwf	fsr2l,c
  2669  00F9E4  3465               	rlcf	standbyMode@drawerCount+1,w,c
  2670  00F9E6  6EDA               	movwf	fsr2h,c
  2671  00F9E8  0E6C               	movlw	low _drawerInformation
  2672  00F9EA  26D9               	addwf	fsr2l,f,c
  2673  00F9EC  0E00               	movlw	high _drawerInformation
  2674  00F9EE  22DA               	addwfc	fsr2h,f,c
  2675  00F9F0  C06A  FFDE         	movff	standbyMode@drawer,postinc2
  2676  00F9F4  C06B  FFDD         	movff	standbyMode@drawer+1,postdec2
  2677                           
  2678                           ;standbyMode.c: 1189: drawerCount += 1;
  2679  00F9F8  4A64               	infsnz	standbyMode@drawerCount,f,c
  2680  00F9FA  2A65               	incf	standbyMode@drawerCount+1,f,c
  2681                           
  2682                           ;standbyMode.c: 1190: }
  2683                           ;standbyMode.c: 1191: }
  2684  00F9FC  D004               	goto	l507
  2685  00F9FE                     l491:
  2686                           
  2687                           ;standbyMode.c: 1192: else if (keypress1 == 14){
  2688  00F9FE  0E0E               	movlw	14
  2689  00FA00  185B               	xorwf	standbyMode@keypress1,w,c
  2690  00FA02  B4D8               	btfsc	status,2,c
  2691  00FA04  0012               	return	
  2692  00FA06                     l507:
  2693                           
  2694                           ;standbyMode.c: 1194: }
  2695                           ;standbyMode.c: 1195: keypress1 = 0;
  2696  00FA06  0E00               	movlw	0
  2697  00FA08  6E5B               	movwf	standbyMode@keypress1,c
  2698  00FA0A  D6A4               	goto	u6080
  2699  00FA0C                     l480:
  2700                           
  2701                           ;standbyMode.c: 1199: else{
  2702                           ;standbyMode.c: 1200: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2703  00FA0C  0E01               	movlw	1
  2704  00FA0E  EC6C  F069         	call	_lcdInst
  2705  00FA12  0EC3               	movlw	195
  2706  00FA14  6E4C               	movwf	??_standbyMode& (0+255),c
  2707  00FA16  0ECD               	movlw	205
  2708  00FA18                     u6627:
  2709  00FA18  2EE8               	decfsz	wreg,f,c
  2710  00FA1A  D7FE               	bra	u6627
  2711  00FA1C  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2712  00FA1E  D7FC               	bra	u6627
  2713  00FA20  F000               	nop	
  2714                           
  2715                           ;standbyMode.c: 1201: drawer = which_drawer();
  2716  00FA22  EC11  F06D         	call	_which_drawer	;wreg free
  2717  00FA26  C025  F06A         	movff	?_which_drawer,standbyMode@drawer
  2718  00FA2A  C026  F06B         	movff	?_which_drawer+1,standbyMode@drawer+1
  2719                           
  2720                           ;standbyMode.c: 1203: if (drawer == 100){
  2721  00FA2E  0E64               	movlw	100
  2722  00FA30  186A               	xorwf	standbyMode@drawer,w,c
  2723  00FA32  106B               	iorwf	standbyMode@drawer+1,w,c
  2724  00FA34  A4D8               	btfss	status,2,c
  2725  00FA36  D009               	goto	l511
  2726                           
  2727                           ;standbyMode.c: 1204: drawer = 0;
  2728  00FA38  0E00               	movlw	0
  2729  00FA3A  6E6B               	movwf	standbyMode@drawer+1,c
  2730  00FA3C  0E00               	movlw	0
  2731  00FA3E  6E6A               	movwf	standbyMode@drawer,c
  2732                           
  2733                           ;standbyMode.c: 1205: firstIteration = 1;
  2734  00FA40  0E00               	movlw	0
  2735  00FA42  6E56               	movwf	standbyMode@firstIteration+1,c
  2736  00FA44  0E01               	movlw	1
  2737  00FA46  6E55               	movwf	standbyMode@firstIteration,c
  2738                           
  2739                           ;standbyMode.c: 1206: goto DRAWER_BACK;
  2740  00FA48  D6B5               	goto	l482
  2741  00FA4A                     l511:
  2742                           
  2743                           ;standbyMode.c: 1207: }
  2744                           ;standbyMode.c: 1209: firstIteration = 1;
  2745  00FA4A  0E00               	movlw	0
  2746  00FA4C  6E56               	movwf	standbyMode@firstIteration+1,c
  2747  00FA4E  0E01               	movlw	1
  2748  00FA50  6E55               	movwf	standbyMode@firstIteration,c
  2749                           
  2750                           ;standbyMode.c: 1210: for (i=0; i<8; i++){
  2751  00FA52  0E00               	movlw	0
  2752  00FA54  6E69               	movwf	standbyMode@i+1,c
  2753  00FA56  0E00               	movlw	0
  2754  00FA58  6E68               	movwf	standbyMode@i,c
  2755  00FA5A                     l4785:
  2756  00FA5A  5069               	movf	standbyMode@i+1,w,c
  2757  00FA5C  E12C               	bnz	l4801
  2758  00FA5E  0E08               	movlw	8
  2759  00FA60  5C68               	subwf	standbyMode@i,w,c
  2760  00FA62  B0D8               	btfsc	status,0,c
  2761  00FA64  D028               	goto	u6270
  2762                           
  2763                           ;standbyMode.c: 1211: if (drawerInformation[i] == drawer){
  2764  00FA66  90D8               	bcf	status,0,c
  2765  00FA68  3468               	rlcf	standbyMode@i,w,c
  2766  00FA6A  6ED9               	movwf	fsr2l,c
  2767  00FA6C  3469               	rlcf	standbyMode@i+1,w,c
  2768  00FA6E  6EDA               	movwf	fsr2h,c
  2769  00FA70  0E6C               	movlw	low _drawerInformation
  2770  00FA72  26D9               	addwf	fsr2l,f,c
  2771  00FA74  0E00               	movlw	high _drawerInformation
  2772  00FA76  22DA               	addwfc	fsr2h,f,c
  2773  00FA78  506A               	movf	standbyMode@drawer,w,c
  2774  00FA7A  18DE               	xorwf	postinc2,w,c
  2775  00FA7C  E119               	bnz	l4797
  2776  00FA7E  506B               	movf	standbyMode@drawer+1,w,c
  2777  00FA80  18DE               	xorwf	postinc2,w,c
  2778  00FA82  A4D8               	btfss	status,2,c
  2779  00FA84  D015               	goto	l515
  2780                           
  2781                           ;standbyMode.c: 1212: validDrawer = 1;
  2782  00FA86  0E00               	movlw	0
  2783  00FA88  6E5D               	movwf	standbyMode@validDrawer+1,c
  2784  00FA8A  0E01               	movlw	1
  2785  00FA8C  6E5C               	movwf	standbyMode@validDrawer,c
  2786                           
  2787                           ;standbyMode.c: 1213: if (drawerInformation[i] == 0){
  2788  00FA8E  90D8               	bcf	status,0,c
  2789  00FA90  3468               	rlcf	standbyMode@i,w,c
  2790  00FA92  6ED9               	movwf	fsr2l,c
  2791  00FA94  3469               	rlcf	standbyMode@i+1,w,c
  2792  00FA96  6EDA               	movwf	fsr2h,c
  2793  00FA98  0E6C               	movlw	low _drawerInformation
  2794  00FA9A  26D9               	addwf	fsr2l,f,c
  2795  00FA9C  0E00               	movlw	high _drawerInformation
  2796  00FA9E  22DA               	addwfc	fsr2h,f,c
  2797  00FAA0  50DE               	movf	postinc2,w,c
  2798  00FAA2  10DE               	iorwf	postinc2,w,c
  2799  00FAA4  A4D8               	btfss	status,2,c
  2800  00FAA6  D004               	goto	l515
  2801                           
  2802                           ;standbyMode.c: 1214: zero = 1;
  2803  00FAA8  0E00               	movlw	0
  2804  00FAAA  6E5F               	movwf	standbyMode@zero+1,c
  2805  00FAAC  0E01               	movlw	1
  2806  00FAAE  6E5E               	movwf	standbyMode@zero,c
  2807  00FAB0                     l515:
  2808  00FAB0                     l4797:
  2809  00FAB0  4A68               	infsnz	standbyMode@i,f,c
  2810  00FAB2  2A69               	incf	standbyMode@i+1,f,c
  2811  00FAB4  D7D2               	goto	l4785
  2812  00FAB6                     u6270:
  2813  00FAB6                     l4801:
  2814                           
  2815                           ;standbyMode.c: 1215: }
  2816                           ;standbyMode.c: 1216: }
  2817                           ;standbyMode.c: 1217: }
  2818                           ;standbyMode.c: 1218: if (validDrawer == 1){
  2819  00FAB6  045C               	decf	standbyMode@validDrawer,w,c
  2820  00FAB8  105D               	iorwf	standbyMode@validDrawer+1,w,c
  2821  00FABA  A4D8               	btfss	status,2,c
  2822  00FABC  D060               	goto	l516
  2823                           
  2824                           ;standbyMode.c: 1219: if (zero == 1){
  2825  00FABE  045E               	decf	standbyMode@zero,w,c
  2826  00FAC0  105F               	iorwf	standbyMode@zero+1,w,c
  2827  00FAC2  A4D8               	btfss	status,2,c
  2828  00FAC4  D02E               	goto	l517
  2829                           
  2830                           ;standbyMode.c: 1220: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2831  00FAC6  0E01               	movlw	1
  2832  00FAC8  EC6C  F069         	call	_lcdInst
  2833  00FACC  0EC3               	movlw	195
  2834  00FACE  6E4C               	movwf	??_standbyMode& (0+255),c
  2835  00FAD0  0ECD               	movlw	205
  2836  00FAD2                     u6637:
  2837  00FAD2  2EE8               	decfsz	wreg,f,c
  2838  00FAD4  D7FE               	bra	u6637
  2839  00FAD6  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2840  00FAD8  D7FC               	bra	u6637
  2841  00FADA  F000               	nop	
  2842                           
  2843                           ;standbyMode.c: 1221: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2844  00FADC  0E0C               	movlw	12
  2845  00FADE  EC6C  F069         	call	_lcdInst
  2846                           
  2847                           ;standbyMode.c: 1222: printf("No drawer");
  2848  00FAE2  0EC0               	movlw	low STR_58
  2849  00FAE4  6E0D               	movwf	printf@f,c
  2850  00FAE6  0EFF               	movlw	high STR_58
  2851  00FAE8  6E0E               	movwf	printf@f+1,c
  2852  00FAEA  EC7A  F06F         	call	_printf	;wreg free
  2853                           
  2854                           ;standbyMode.c: 1223: lcdInst(0xC0);;
  2855  00FAEE  0EC0               	movlw	192
  2856  00FAF0  EC6C  F069         	call	_lcdInst
  2857                           
  2858                           ;standbyMode.c: 1224: printf("number pressed.");
  2859  00FAF4  0EFF               	movlw	low STR_59
  2860  00FAF6  6E0D               	movwf	printf@f,c
  2861  00FAF8  0EFD               	movlw	high STR_59
  2862  00FAFA  6E0E               	movwf	printf@f+1,c
  2863  00FAFC  EC7A  F06F         	call	_printf	;wreg free
  2864                           
  2865                           ;standbyMode.c: 1225: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2866  00FB00  0E66               	movlw	102
  2867  00FB02  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2868  00FB04  0E76               	movlw	118
  2869  00FB06  6E4C               	movwf	??_standbyMode& (0+255),c
  2870  00FB08  0EC1               	movlw	193
  2871  00FB0A                     u6647:
  2872  00FB0A  2EE8               	decfsz	wreg,f,c
  2873  00FB0C  D7FE               	bra	u6647
  2874  00FB0E  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2875  00FB10  D7FC               	bra	u6647
  2876  00FB12  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2877  00FB14  D7FA               	bra	u6647
  2878  00FB16  F000               	nop	
  2879                           
  2880                           ;standbyMode.c: 1226: zero = 0;
  2881  00FB18  0E00               	movlw	0
  2882  00FB1A  6E5F               	movwf	standbyMode@zero+1,c
  2883  00FB1C  0E00               	movlw	0
  2884  00FB1E  6E5E               	movwf	standbyMode@zero,c
  2885                           
  2886                           ;standbyMode.c: 1227: }
  2887  00FB20  D029               	goto	l518
  2888  00FB22                     l517:
  2889                           
  2890                           ;standbyMode.c: 1228: else{
  2891                           ;standbyMode.c: 1229: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2892  00FB22  0E01               	movlw	1
  2893  00FB24  EC6C  F069         	call	_lcdInst
  2894  00FB28  0EC3               	movlw	195
  2895  00FB2A  6E4C               	movwf	??_standbyMode& (0+255),c
  2896  00FB2C  0ECD               	movlw	205
  2897  00FB2E                     u6657:
  2898  00FB2E  2EE8               	decfsz	wreg,f,c
  2899  00FB30  D7FE               	bra	u6657
  2900  00FB32  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2901  00FB34  D7FC               	bra	u6657
  2902  00FB36  F000               	nop	
  2903                           
  2904                           ;standbyMode.c: 1230: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2905  00FB38  0E0C               	movlw	12
  2906  00FB3A  EC6C  F069         	call	_lcdInst
  2907                           
  2908                           ;standbyMode.c: 1231: printf("Drawer already");
  2909  00FB3E  0EF7               	movlw	low STR_60
  2910  00FB40  6E0D               	movwf	printf@f,c
  2911  00FB42  0EFE               	movlw	high STR_60
  2912  00FB44  6E0E               	movwf	printf@f+1,c
  2913  00FB46  EC7A  F06F         	call	_printf	;wreg free
  2914                           
  2915                           ;standbyMode.c: 1232: lcdInst(0xC0);;
  2916  00FB4A  0EC0               	movlw	192
  2917  00FB4C  EC6C  F069         	call	_lcdInst
  2918                           
  2919                           ;standbyMode.c: 1233: printf("in use!");
  2920  00FB50  0ED3               	movlw	low STR_61
  2921  00FB52  6E0D               	movwf	printf@f,c
  2922  00FB54  0EFF               	movlw	high STR_61
  2923  00FB56  6E0E               	movwf	printf@f+1,c
  2924  00FB58  EC7A  F06F         	call	_printf	;wreg free
  2925                           
  2926                           ;standbyMode.c: 1234: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2927  00FB5C  0E66               	movlw	102
  2928  00FB5E  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  2929  00FB60  0E76               	movlw	118
  2930  00FB62  6E4C               	movwf	??_standbyMode& (0+255),c
  2931  00FB64  0EC1               	movlw	193
  2932  00FB66                     u6667:
  2933  00FB66  2EE8               	decfsz	wreg,f,c
  2934  00FB68  D7FE               	bra	u6667
  2935  00FB6A  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2936  00FB6C  D7FC               	bra	u6667
  2937  00FB6E  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2938  00FB70  D7FA               	bra	u6667
  2939  00FB72  F000               	nop	
  2940  00FB74                     l518:
  2941                           
  2942                           ;standbyMode.c: 1235: }
  2943                           ;standbyMode.c: 1236: validDrawer = 0;
  2944  00FB74  0E00               	movlw	0
  2945  00FB76  6E5D               	movwf	standbyMode@validDrawer+1,c
  2946  00FB78  0E00               	movlw	0
  2947  00FB7A  6E5C               	movwf	standbyMode@validDrawer,c
  2948                           
  2949                           ;standbyMode.c: 1238: }
  2950                           
  2951                           ;standbyMode.c: 1237: continue;
  2952  00FB7C  D5E7               	goto	l479
  2953  00FB7E                     l516:
  2954                           
  2955                           ;standbyMode.c: 1239: else{
  2956                           ;standbyMode.c: 1240: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2957  00FB7E  0E01               	movlw	1
  2958  00FB80  EC6C  F069         	call	_lcdInst
  2959  00FB84  0EC3               	movlw	195
  2960  00FB86  6E4C               	movwf	??_standbyMode& (0+255),c
  2961  00FB88  0ECD               	movlw	205
  2962  00FB8A                     u6677:
  2963  00FB8A  2EE8               	decfsz	wreg,f,c
  2964  00FB8C  D7FE               	bra	u6677
  2965  00FB8E  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  2966  00FB90  D7FC               	bra	u6677
  2967  00FB92  F000               	nop	
  2968                           
  2969                           ;standbyMode.c: 1241: diet = diet_press(drawer);
  2970  00FB94  C06A  F025         	movff	standbyMode@drawer,diet_press@drawer
  2971  00FB98  C06B  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2972  00FB9C  ECF7  F072         	call	_diet_press	;wreg free
  2973  00FBA0  C025  F066         	movff	?_diet_press,standbyMode@diet
  2974  00FBA4  C026  F067         	movff	?_diet_press+1,standbyMode@diet+1
  2975                           
  2976                           ;standbyMode.c: 1242: if (diet == 100){
  2977  00FBA8  0E64               	movlw	100
  2978  00FBAA  1866               	xorwf	standbyMode@diet,w,c
  2979  00FBAC  1067               	iorwf	standbyMode@diet+1,w,c
  2980  00FBAE  A4D8               	btfss	status,2,c
  2981  00FBB0  D005               	goto	l522
  2982                           
  2983                           ;standbyMode.c: 1243: diet = 0;
  2984  00FBB2  0E00               	movlw	0
  2985  00FBB4  6E67               	movwf	standbyMode@diet+1,c
  2986  00FBB6  0E00               	movlw	0
  2987  00FBB8  6E66               	movwf	standbyMode@diet,c
  2988                           
  2989                           ;standbyMode.c: 1244: goto DIET_BACK2;
  2990  00FBBA  D728               	goto	l480
  2991  00FBBC                     l522:
  2992                           
  2993                           ;standbyMode.c: 1245: }
  2994                           ;standbyMode.c: 1247: food = food_press(diet, drawer);
  2995  00FBBC  C066  F025         	movff	standbyMode@diet,food_press@dietSum
  2996  00FBC0  C067  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2997  00FBC4  C06A  F027         	movff	standbyMode@drawer,food_press@drawer
  2998  00FBC8  C06B  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2999  00FBCC  EC17  F06C         	call	_food_press	;wreg free
  3000  00FBD0  C025  F060         	movff	?_food_press,standbyMode@food
  3001  00FBD4  C026  F061         	movff	?_food_press+1,standbyMode@food+1
  3002                           
  3003                           ;standbyMode.c: 1248: if (food == 100){
  3004  00FBD8  0E64               	movlw	100
  3005  00FBDA  1860               	xorwf	standbyMode@food,w,c
  3006  00FBDC  1061               	iorwf	standbyMode@food+1,w,c
  3007  00FBDE  A4D8               	btfss	status,2,c
  3008  00FBE0  D009               	goto	l523
  3009                           
  3010                           ;standbyMode.c: 1249: diet = 0;
  3011  00FBE2  0E00               	movlw	0
  3012  00FBE4  6E67               	movwf	standbyMode@diet+1,c
  3013  00FBE6  0E00               	movlw	0
  3014  00FBE8  6E66               	movwf	standbyMode@diet,c
  3015                           
  3016                           ;standbyMode.c: 1250: food = 0;
  3017  00FBEA  0E00               	movlw	0
  3018  00FBEC  6E61               	movwf	standbyMode@food+1,c
  3019  00FBEE  0E00               	movlw	0
  3020  00FBF0  6E60               	movwf	standbyMode@food,c
  3021                           
  3022                           ;standbyMode.c: 1251: goto FOOD_BACK2;
  3023  00FBF2  D7C5               	goto	l516
  3024  00FBF4                     l523:
  3025                           
  3026                           ;standbyMode.c: 1252: }
  3027                           ;standbyMode.c: 1253: drawerInformation[drawerCount] = drawer;
  3028  00FBF4  90D8               	bcf	status,0,c
  3029  00FBF6  3464               	rlcf	standbyMode@drawerCount,w,c
  3030  00FBF8  6ED9               	movwf	fsr2l,c
  3031  00FBFA  3465               	rlcf	standbyMode@drawerCount+1,w,c
  3032  00FBFC  6EDA               	movwf	fsr2h,c
  3033  00FBFE  0E6C               	movlw	low _drawerInformation
  3034  00FC00  26D9               	addwf	fsr2l,f,c
  3035  00FC02  0E00               	movlw	high _drawerInformation
  3036  00FC04  22DA               	addwfc	fsr2h,f,c
  3037  00FC06  C06A  FFDE         	movff	standbyMode@drawer,postinc2
  3038  00FC0A  C06B  FFDD         	movff	standbyMode@drawer+1,postdec2
  3039                           
  3040                           ;standbyMode.c: 1254: drawerCount += 1;
  3041  00FC0E  4A64               	infsnz	standbyMode@drawerCount,f,c
  3042  00FC10  2A65               	incf	standbyMode@drawerCount+1,f,c
  3043  00FC12  D59C               	goto	l479
  3044  00FC14                     l478:
  3045                           
  3046                           ;standbyMode.c: 1259: else if (keypress == 14){
  3047  00FC14  0E0E               	movlw	14
  3048  00FC16  1859               	xorwf	standbyMode@keypress,w,c
  3049  00FC18  A4D8               	btfss	status,2,c
  3050  00FC1A  D05A               	goto	l525
  3051  00FC1C                     u6320:
  3052                           
  3053                           ;standbyMode.c: 1261: unsigned int whichKey = viewLogs();
  3054                           
  3055                           ;standbyMode.c: 1260: while (1){
  3056  00FC1C  EC13  F06E         	call	_viewLogs	;wreg free
  3057  00FC20  C040  F057         	movff	?_viewLogs,standbyMode@whichKey
  3058  00FC24  C041  F058         	movff	?_viewLogs+1,standbyMode@whichKey+1
  3059                           
  3060                           ;standbyMode.c: 1262: if (whichKey == 15){
  3061  00FC28  0E0F               	movlw	15
  3062  00FC2A  1857               	xorwf	standbyMode@whichKey,w,c
  3063  00FC2C  1058               	iorwf	standbyMode@whichKey+1,w,c
  3064  00FC2E  B4D8               	btfsc	status,2,c
  3065  00FC30  D7F5               	goto	u6320
  3066                           
  3067                           ;standbyMode.c: 1265: else if (whichKey == 14){
  3068                           
  3069                           ;standbyMode.c: 1264: }
  3070                           
  3071                           ;standbyMode.c: 1263: continue;
  3072  00FC32  0E0E               	movlw	14
  3073  00FC34  1857               	xorwf	standbyMode@whichKey,w,c
  3074  00FC36  1058               	iorwf	standbyMode@whichKey+1,w,c
  3075  00FC38  A4D8               	btfss	status,2,c
  3076  00FC3A  D020               	goto	l530
  3077                           
  3078                           ;standbyMode.c: 1266: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3079  00FC3C  0E01               	movlw	1
  3080  00FC3E  EC6C  F069         	call	_lcdInst
  3081  00FC42  0EC3               	movlw	195
  3082  00FC44  6E4C               	movwf	??_standbyMode& (0+255),c
  3083  00FC46  0ECD               	movlw	205
  3084  00FC48                     u6687:
  3085  00FC48  2EE8               	decfsz	wreg,f,c
  3086  00FC4A  D7FE               	bra	u6687
  3087  00FC4C  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3088  00FC4E  D7FC               	bra	u6687
  3089  00FC50  F000               	nop	
  3090                           
  3091                           ;standbyMode.c: 1267: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3092  00FC52  0E0C               	movlw	12
  3093  00FC54  EC6C  F069         	call	_lcdInst
  3094                           
  3095                           ;standbyMode.c: 1268: printf("Rebooting.");
  3096  00FC58  0E95               	movlw	low STR_66
  3097  00FC5A  6E0D               	movwf	printf@f,c
  3098  00FC5C  0EFF               	movlw	high STR_66
  3099  00FC5E  6E0E               	movwf	printf@f+1,c
  3100  00FC60  EC7A  F06F         	call	_printf	;wreg free
  3101                           
  3102                           ;standbyMode.c: 1269: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3103  00FC64  0E66               	movlw	102
  3104  00FC66  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  3105  00FC68  0E76               	movlw	118
  3106  00FC6A  6E4C               	movwf	??_standbyMode& (0+255),c
  3107  00FC6C  0EC1               	movlw	193
  3108  00FC6E                     u6697:
  3109  00FC6E  2EE8               	decfsz	wreg,f,c
  3110  00FC70  D7FE               	bra	u6697
  3111  00FC72  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3112  00FC74  D7FC               	bra	u6697
  3113  00FC76  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3114  00FC78  D7FA               	bra	u6697
  3115  00FC7A  D028               	goto	L2
  3116  00FC7C                     l530:
  3117                           
  3118                           ;standbyMode.c: 1272: else{
  3119                           ;standbyMode.c: 1273: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3120  00FC7C  0E01               	movlw	1
  3121  00FC7E  EC6C  F069         	call	_lcdInst
  3122  00FC82  0EC3               	movlw	195
  3123  00FC84  6E4C               	movwf	??_standbyMode& (0+255),c
  3124  00FC86  0ECD               	movlw	205
  3125  00FC88                     u6707:
  3126  00FC88  2EE8               	decfsz	wreg,f,c
  3127  00FC8A  D7FE               	bra	u6707
  3128  00FC8C  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3129  00FC8E  D7FC               	bra	u6707
  3130  00FC90  F000               	nop	
  3131                           
  3132                           ;standbyMode.c: 1274: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3133  00FC92  0E0C               	movlw	12
  3134  00FC94  EC6C  F069         	call	_lcdInst
  3135                           
  3136                           ;standbyMode.c: 1275: printf("Invalid key!");
  3137  00FC98  0E3E               	movlw	low STR_67
  3138  00FC9A  6E0D               	movwf	printf@f,c
  3139  00FC9C  0EFF               	movlw	high STR_67
  3140  00FC9E  6E0E               	movwf	printf@f+1,c
  3141  00FCA0  EC7A  F06F         	call	_printf	;wreg free
  3142                           
  3143                           ;standbyMode.c: 1276: lcdInst(0xC0);;
  3144  00FCA4  0EC0               	movlw	192
  3145  00FCA6  EC6C  F069         	call	_lcdInst
  3146                           
  3147                           ;standbyMode.c: 1277: printf("Rebooting.");
  3148  00FCAA  0E95               	movlw	low STR_66
  3149  00FCAC  6E0D               	movwf	printf@f,c
  3150  00FCAE  0EFF               	movlw	high STR_66
  3151  00FCB0  6E0E               	movwf	printf@f+1,c
  3152  00FCB2  EC7A  F06F         	call	_printf	;wreg free
  3153                           
  3154                           ;standbyMode.c: 1278: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3155  00FCB6  0E66               	movlw	102
  3156  00FCB8  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  3157  00FCBA  0E76               	movlw	118
  3158  00FCBC  6E4C               	movwf	??_standbyMode& (0+255),c
  3159  00FCBE  0EC1               	movlw	193
  3160  00FCC0                     u6717:
  3161  00FCC0  2EE8               	decfsz	wreg,f,c
  3162  00FCC2  D7FE               	bra	u6717
  3163  00FCC4  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3164  00FCC6  D7FC               	bra	u6717
  3165  00FCC8  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3166  00FCCA  D7FA               	bra	u6717
  3167  00FCCC                     L2:
  3168  00FCCC  F000               	nop	
  3169                           
  3170                           ;standbyMode.c: 1279: break;
  3171  00FCCE  0012               	return	
  3172  00FCD0                     l525:
  3173                           
  3174                           ;standbyMode.c: 1284: else {
  3175                           ;standbyMode.c: 1285: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3176  00FCD0  0E01               	movlw	1
  3177  00FCD2  EC6C  F069         	call	_lcdInst
  3178  00FCD6  0EC3               	movlw	195
  3179  00FCD8  6E4C               	movwf	??_standbyMode& (0+255),c
  3180  00FCDA  0ECD               	movlw	205
  3181  00FCDC                     u6727:
  3182  00FCDC  2EE8               	decfsz	wreg,f,c
  3183  00FCDE  D7FE               	bra	u6727
  3184  00FCE0  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3185  00FCE2  D7FC               	bra	u6727
  3186  00FCE4  F000               	nop	
  3187                           
  3188                           ;standbyMode.c: 1286: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3189  00FCE6  0E0C               	movlw	12
  3190  00FCE8  EC6C  F069         	call	_lcdInst
  3191                           
  3192                           ;standbyMode.c: 1287: printf("Invalid key!");
  3193  00FCEC  0E3E               	movlw	low STR_67
  3194  00FCEE  6E0D               	movwf	printf@f,c
  3195  00FCF0  0EFF               	movlw	high STR_67
  3196  00FCF2  6E0E               	movwf	printf@f+1,c
  3197  00FCF4  EC7A  F06F         	call	_printf	;wreg free
  3198                           
  3199                           ;standbyMode.c: 1288: lcdInst(0xC0);;
  3200  00FCF8  0EC0               	movlw	192
  3201  00FCFA  EC6C  F069         	call	_lcdInst
  3202                           
  3203                           ;standbyMode.c: 1289: printf("Rebooting.");
  3204  00FCFE  0E95               	movlw	low STR_66
  3205  00FD00  6E0D               	movwf	printf@f,c
  3206  00FD02  0EFF               	movlw	high STR_66
  3207  00FD04  6E0E               	movwf	printf@f+1,c
  3208  00FD06  EC7A  F06F         	call	_printf	;wreg free
  3209                           
  3210                           ;standbyMode.c: 1290: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3211  00FD0A  0E66               	movlw	102
  3212  00FD0C  6E4D               	movwf	(??_standbyMode+1)& (0+255),c
  3213  00FD0E  0E76               	movlw	118
  3214  00FD10  6E4C               	movwf	??_standbyMode& (0+255),c
  3215  00FD12  0EC1               	movlw	193
  3216  00FD14                     u6737:
  3217  00FD14  2EE8               	decfsz	wreg,f,c
  3218  00FD16  D7FE               	bra	u6737
  3219  00FD18  2E4C               	decfsz	??_standbyMode& (0+255),f,c
  3220  00FD1A  D7FC               	bra	u6737
  3221  00FD1C  2E4D               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3222  00FD1E  D7FA               	bra	u6737
  3223  00FD20  F000               	nop	
  3224  00FD22  0012               	return	
  3225  00FD24                     __end_of_standbyMode:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           indf2	equ	0xFDF
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _writeEEPROM *****************
  3243 ;; Defined at:
  3244 ;;		line 10 in file "EEPROMstorage.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  address         1    wreg     unsigned char 
  3247 ;;  data            1    0[COMRAM] unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  address         1    1[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        2 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_standbyMode
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text2
  3273  00D39E                     __ptext2:
  3274                           	opt stack 0
  3275  00D39E                     _writeEEPROM:
  3276                           	opt stack 29
  3277                           
  3278                           ;incstack = 0
  3279                           ;writeEEPROM@address stored from wreg
  3280  00D39E  6E02               	movwf	writeEEPROM@address,c
  3281  00D3A0                     
  3282                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  3283  00D3A0  B2A6               	btfsc	4006,1,c	;volsfr
  3284  00D3A2  D7FE               	goto	l4479
  3285                           
  3286                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  3287  00D3A4  84A6               	bsf	4006,2,c	;volsfr
  3288                           
  3289                           ;EEPROMstorage.c: 14: EEADR=address;
  3290  00D3A6  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  3291                           
  3292                           ;EEPROMstorage.c: 15: EEDATA=data;
  3293  00D3AA  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  3294                           
  3295                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  3296  00D3AE  9EA6               	bcf	4006,7,c	;volsfr
  3297                           
  3298                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  3299  00D3B0  9CA6               	bcf	4006,6,c	;volsfr
  3300                           
  3301                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  3302  00D3B2  9EF2               	bcf	intcon,7,c	;volatile
  3303                           
  3304                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  3305  00D3B4  0E55               	movlw	85
  3306  00D3B6  6EA7               	movwf	4007,c	;volsfr
  3307                           
  3308                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  3309  00D3B8  0EAA               	movlw	170
  3310  00D3BA  6EA7               	movwf	4007,c	;volsfr
  3311                           
  3312                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  3313  00D3BC  82A6               	bsf	4006,1,c	;volsfr
  3314                           
  3315                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  3316  00D3BE  8EF2               	bsf	intcon,7,c	;volatile
  3317  00D3C0  B2A6               	btfsc	4006,1,c	;volsfr
  3318  00D3C2  D7FE               	goto	l551
  3319                           
  3320                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  3321  00D3C4  94A6               	bcf	4006,2,c	;volsfr
  3322  00D3C6  0012               	return		;funcret
  3323  00D3C8                     __end_of_writeEEPROM:
  3324                           	opt stack 0
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           indf2	equ	0xFDF
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           fsr2h	equ	0xFDA
  3338                           fsr2l	equ	0xFD9
  3339                           status	equ	0xFD8
  3340                           
  3341 ;; *************** function _which_drawer *****************
  3342 ;; Defined at:
  3343 ;;		line 903 in file "standbyMode.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  rand            2   39[COMRAM] unsigned int 
  3348 ;;  keypress        1   47[COMRAM] unsigned char 
  3349 ;;  count           2   45[COMRAM] unsigned int 
  3350 ;;  backCheck       2   43[COMRAM] unsigned int 
  3351 ;;  sum             2   41[COMRAM] unsigned int 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  2   36[COMRAM] unsigned int 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:       12 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    3
  3368 ;; This function calls:
  3369 ;;		_decode_drawer
  3370 ;;		_lcdInst
  3371 ;;		_printf
  3372 ;;		_putch
  3373 ;; This function is called by:
  3374 ;;		_standbyMode
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text3
  3379  00DA22                     __ptext3:
  3380                           	opt stack 0
  3381  00DA22                     _which_drawer:
  3382                           	opt stack 26
  3383                           
  3384                           ;standbyMode.c: 904: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3385                           
  3386                           ;incstack = 0
  3387  00DA22  0E0C               	movlw	12
  3388  00DA24  EC6C  F069         	call	_lcdInst
  3389                           
  3390                           ;standbyMode.c: 905: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3391  00DA28  0E01               	movlw	1
  3392  00DA2A  EC6C  F069         	call	_lcdInst
  3393  00DA2E  0EC3               	movlw	195
  3394  00DA30  6E27               	movwf	??_which_drawer& (0+255),c
  3395  00DA32  0ECD               	movlw	205
  3396  00DA34                     u6747:
  3397  00DA34  2EE8               	decfsz	wreg,f,c
  3398  00DA36  D7FE               	bra	u6747
  3399  00DA38  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3400  00DA3A  D7FC               	bra	u6747
  3401  00DA3C  F000               	nop	
  3402                           
  3403                           ;standbyMode.c: 906: printf("Drawer number:");
  3404  00DA3E  0E9D               	movlw	low STR_37
  3405  00DA40  6E0D               	movwf	printf@f,c
  3406  00DA42  0EFE               	movlw	high STR_37
  3407  00DA44  6E0E               	movwf	printf@f+1,c
  3408  00DA46  EC7A  F06F         	call	_printf	;wreg free
  3409                           
  3410                           ;standbyMode.c: 907: lcdInst(0xC0);;
  3411  00DA4A  0EC0               	movlw	192
  3412  00DA4C  EC6C  F069         	call	_lcdInst
  3413                           
  3414                           ;standbyMode.c: 909: unsigned int count = 0;
  3415  00DA50  0E00               	movlw	0
  3416  00DA52  6E2F               	movwf	which_drawer@count+1,c
  3417  00DA54  0E00               	movlw	0
  3418  00DA56  6E2E               	movwf	which_drawer@count,c
  3419                           
  3420                           ;standbyMode.c: 910: unsigned int sum = 0;
  3421  00DA58  0E00               	movlw	0
  3422  00DA5A  6E2B               	movwf	which_drawer@sum+1,c
  3423  00DA5C  0E00               	movlw	0
  3424  00DA5E  6E2A               	movwf	which_drawer@sum,c
  3425                           
  3426                           ;standbyMode.c: 911: unsigned int backCheck = 0;
  3427  00DA60  0E00               	movlw	0
  3428  00DA62  6E2D               	movwf	which_drawer@backCheck+1,c
  3429  00DA64  0E00               	movlw	0
  3430  00DA66  6E2C               	movwf	which_drawer@backCheck,c
  3431  00DA68                     
  3432                           ;standbyMode.c: 914: while(PORTBbits.RB1 == 0){ continue; }
  3433  00DA68  A281               	btfss	3969,1,c	;volatile
  3434  00DA6A  D7FE               	goto	l431
  3435                           
  3436                           ;standbyMode.c: 915: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3437  00DA6C  3881               	swapf	3969,w,c	;volatile
  3438  00DA6E  0B0F               	andlw	15
  3439  00DA70  0B0F               	andlw	15
  3440  00DA72  6E30               	movwf	which_drawer@keypress,c
  3441  00DA74  B281               	btfsc	3969,1,c	;volatile
  3442  00DA76  D7FE               	goto	l436
  3443                           
  3444                           ;standbyMode.c: 918: if(keypress == 15){
  3445  00DA78  0E0F               	movlw	15
  3446  00DA7A  1830               	xorwf	which_drawer@keypress,w,c
  3447  00DA7C  B4D8               	btfsc	status,2,c
  3448  00DA7E  D0BA               	goto	l439
  3449                           
  3450                           ;standbyMode.c: 921: else if (keypress == 14){
  3451                           
  3452                           ;standbyMode.c: 920: }
  3453                           
  3454                           ;standbyMode.c: 919: break;
  3455  00DA80  0E0E               	movlw	14
  3456  00DA82  1830               	xorwf	which_drawer@keypress,w,c
  3457  00DA84  A4D8               	btfss	status,2,c
  3458  00DA86  D005               	goto	l441
  3459                           
  3460                           ;standbyMode.c: 922: backCheck = 100;
  3461  00DA88  0E00               	movlw	0
  3462  00DA8A  6E2D               	movwf	which_drawer@backCheck+1,c
  3463  00DA8C  0E64               	movlw	100
  3464  00DA8E  6E2C               	movwf	which_drawer@backCheck,c
  3465                           
  3466                           ;standbyMode.c: 923: break;
  3467  00DA90  D0B1               	goto	l439
  3468  00DA92                     l441:
  3469                           
  3470                           ;standbyMode.c: 925: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  3471  00DA92  5030               	movf	which_drawer@keypress,w,c
  3472  00DA94  B4D8               	btfsc	status,2,c
  3473  00DA96  D023               	goto	u5820
  3474  00DA98  0430               	decf	which_drawer@keypress,w,c
  3475  00DA9A  B4D8               	btfsc	status,2,c
  3476  00DA9C  D020               	goto	u5820
  3477  00DA9E  0E02               	movlw	2
  3478  00DAA0  1830               	xorwf	which_drawer@keypress,w,c
  3479  00DAA2  B4D8               	btfsc	status,2,c
  3480  00DAA4  D01C               	goto	u5820
  3481  00DAA6  0E04               	movlw	4
  3482  00DAA8  1830               	xorwf	which_drawer@keypress,w,c
  3483  00DAAA  B4D8               	btfsc	status,2,c
  3484  00DAAC  D018               	goto	u5820
  3485  00DAAE  0E05               	movlw	5
  3486  00DAB0  1830               	xorwf	which_drawer@keypress,w,c
  3487  00DAB2  B4D8               	btfsc	status,2,c
  3488  00DAB4  D014               	goto	u5820
  3489  00DAB6  0E06               	movlw	6
  3490  00DAB8  1830               	xorwf	which_drawer@keypress,w,c
  3491  00DABA  B4D8               	btfsc	status,2,c
  3492  00DABC  D010               	goto	u5820
  3493  00DABE  0E08               	movlw	8
  3494  00DAC0  1830               	xorwf	which_drawer@keypress,w,c
  3495  00DAC2  B4D8               	btfsc	status,2,c
  3496  00DAC4  D00C               	goto	u5820
  3497  00DAC6  0E09               	movlw	9
  3498  00DAC8  1830               	xorwf	which_drawer@keypress,w,c
  3499  00DACA  B4D8               	btfsc	status,2,c
  3500  00DACC  D008               	goto	u5820
  3501  00DACE  0E0A               	movlw	10
  3502  00DAD0  1830               	xorwf	which_drawer@keypress,w,c
  3503  00DAD2  B4D8               	btfsc	status,2,c
  3504  00DAD4  D004               	goto	u5820
  3505  00DAD6  0E0D               	movlw	13
  3506  00DAD8  1830               	xorwf	which_drawer@keypress,w,c
  3507  00DADA  A4D8               	btfss	status,2,c
  3508  00DADC  D06A               	goto	l443
  3509  00DADE                     u5820:
  3510                           
  3511                           ;standbyMode.c: 926: if (count == 0){
  3512  00DADE  502E               	movf	which_drawer@count,w,c
  3513  00DAE0  102F               	iorwf	which_drawer@count+1,w,c
  3514  00DAE2  A4D8               	btfss	status,2,c
  3515  00DAE4  D046               	goto	l446
  3516                           
  3517                           ;standbyMode.c: 927: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  3518  00DAE6  0430               	decf	which_drawer@keypress,w,c
  3519  00DAE8  B4D8               	btfsc	status,2,c
  3520  00DAEA  D01C               	goto	u5910
  3521  00DAEC  0E02               	movlw	2
  3522  00DAEE  1830               	xorwf	which_drawer@keypress,w,c
  3523  00DAF0  B4D8               	btfsc	status,2,c
  3524  00DAF2  D018               	goto	u5910
  3525  00DAF4  0E04               	movlw	4
  3526  00DAF6  1830               	xorwf	which_drawer@keypress,w,c
  3527  00DAF8  B4D8               	btfsc	status,2,c
  3528  00DAFA  D014               	goto	u5910
  3529  00DAFC  0E05               	movlw	5
  3530  00DAFE  1830               	xorwf	which_drawer@keypress,w,c
  3531  00DB00  B4D8               	btfsc	status,2,c
  3532  00DB02  D010               	goto	u5910
  3533  00DB04  0E06               	movlw	6
  3534  00DB06  1830               	xorwf	which_drawer@keypress,w,c
  3535  00DB08  B4D8               	btfsc	status,2,c
  3536  00DB0A  D00C               	goto	u5910
  3537  00DB0C  0E08               	movlw	8
  3538  00DB0E  1830               	xorwf	which_drawer@keypress,w,c
  3539  00DB10  B4D8               	btfsc	status,2,c
  3540  00DB12  D008               	goto	u5910
  3541  00DB14  0E09               	movlw	9
  3542  00DB16  1830               	xorwf	which_drawer@keypress,w,c
  3543  00DB18  B4D8               	btfsc	status,2,c
  3544  00DB1A  D004               	goto	u5910
  3545  00DB1C  0E0A               	movlw	10
  3546  00DB1E  1830               	xorwf	which_drawer@keypress,w,c
  3547  00DB20  A4D8               	btfss	status,2,c
  3548  00DB22  D011               	goto	l447
  3549  00DB24                     u5910:
  3550                           
  3551                           ;standbyMode.c: 928: count += 2;
  3552  00DB24  0E02               	movlw	2
  3553  00DB26  262E               	addwf	which_drawer@count,f,c
  3554  00DB28  0E00               	movlw	0
  3555  00DB2A  222F               	addwfc	which_drawer@count+1,f,c
  3556                           
  3557                           ;standbyMode.c: 929: putch(input[keypress]);
  3558  00DB2C  5030               	movf	which_drawer@keypress,w,c
  3559  00DB2E  0D01               	mullw	1
  3560  00DB30  0E36               	movlw	low _input
  3561  00DB32  24F3               	addwf	prodl,w,c
  3562  00DB34  6EF6               	movwf	tblptrl,c
  3563  00DB36  0EFD               	movlw	high _input
  3564  00DB38  20F4               	addwfc	prodh,w,c
  3565  00DB3A  6EF7               	movwf	tblptrh,c
  3566  00DB3C                     	if	0	;There are less than 3 active tblptr bytes
  3567  00DB3C                     	endif
  3568  00DB3C  0008               	tblrd		*
  3569  00DB3E  50F5               	movf	tablat,w,c
  3570  00DB40  EC76  F069         	call	_putch
  3571  00DB44  D034               	goto	l457
  3572  00DB46                     l447:
  3573                           
  3574                           ;standbyMode.c: 932: else if (keypress == 0){
  3575  00DB46  5030               	movf	which_drawer@keypress,w,c
  3576  00DB48  A4D8               	btfss	status,2,c
  3577  00DB4A  D78E               	goto	l431
  3578                           
  3579                           ;standbyMode.c: 933: putch(input[keypress]);
  3580  00DB4C  5030               	movf	which_drawer@keypress,w,c
  3581  00DB4E  0D01               	mullw	1
  3582  00DB50  0E36               	movlw	low _input
  3583  00DB52  24F3               	addwf	prodl,w,c
  3584  00DB54  6EF6               	movwf	tblptrl,c
  3585  00DB56  0EFD               	movlw	high _input
  3586  00DB58  20F4               	addwfc	prodh,w,c
  3587  00DB5A  6EF7               	movwf	tblptrh,c
  3588  00DB5C                     	if	0	;There are less than 3 active tblptr bytes
  3589  00DB5C                     	endif
  3590  00DB5C  0008               	tblrd		*
  3591  00DB5E  50F5               	movf	tablat,w,c
  3592  00DB60  EC76  F069         	call	_putch
  3593                           
  3594                           ;standbyMode.c: 934: count += 1;
  3595  00DB64  4A2E               	infsnz	which_drawer@count,f,c
  3596  00DB66  2A2F               	incf	which_drawer@count+1,f,c
  3597  00DB68  D020               	goto	u5960
  3598  00DB6A                     L3:
  3599  00DB6A  262A               	addwf	which_drawer@sum,f,c
  3600  00DB6C  0E00               	movlw	0
  3601  00DB6E  222B               	addwfc	which_drawer@sum+1,f,c
  3602                           
  3603                           ;standbyMode.c: 936: }
  3604                           ;standbyMode.c: 937: }
  3605  00DB70  D77B               	goto	l431
  3606  00DB72                     l446:
  3607                           
  3608                           ;standbyMode.c: 938: else if (count == 1){
  3609  00DB72  042E               	decf	which_drawer@count,w,c
  3610  00DB74  102F               	iorwf	which_drawer@count+1,w,c
  3611  00DB76  A4D8               	btfss	status,2,c
  3612  00DB78  D777               	goto	l431
  3613                           
  3614                           ;standbyMode.c: 939: if (keypress < 8 || keypress == 13){
  3615  00DB7A  0E07               	movlw	7
  3616  00DB7C  6430               	cpfsgt	which_drawer@keypress,c
  3617  00DB7E  D004               	goto	u5950
  3618  00DB80  0E0D               	movlw	13
  3619  00DB82  1830               	xorwf	which_drawer@keypress,w,c
  3620  00DB84  A4D8               	btfss	status,2,c
  3621  00DB86  D770               	goto	l431
  3622  00DB88                     u5950:
  3623                           
  3624                           ;standbyMode.c: 940: putch(input[keypress]);
  3625  00DB88  5030               	movf	which_drawer@keypress,w,c
  3626  00DB8A  0D01               	mullw	1
  3627  00DB8C  0E36               	movlw	low _input
  3628  00DB8E  24F3               	addwf	prodl,w,c
  3629  00DB90  6EF6               	movwf	tblptrl,c
  3630  00DB92  0EFD               	movlw	high _input
  3631  00DB94  20F4               	addwfc	prodh,w,c
  3632  00DB96  6EF7               	movwf	tblptrh,c
  3633  00DB98                     	if	0	;There are less than 3 active tblptr bytes
  3634  00DB98                     	endif
  3635  00DB98  0008               	tblrd		*
  3636  00DB9A  50F5               	movf	tablat,w,c
  3637  00DB9C  EC76  F069         	call	_putch
  3638                           
  3639                           ;standbyMode.c: 941: count += 1;
  3640  00DBA0  4A2E               	infsnz	which_drawer@count,f,c
  3641  00DBA2  2A2F               	incf	which_drawer@count+1,f,c
  3642                           
  3643                           ;standbyMode.c: 942: if(keypress == 0){
  3644  00DBA4  5030               	movf	which_drawer@keypress,w,c
  3645  00DBA6  A4D8               	btfss	status,2,c
  3646  00DBA8  D002               	goto	l457
  3647  00DBAA                     u5960:
  3648                           
  3649                           ;standbyMode.c: 943: sum += 20;
  3650  00DBAA  0E14               	movlw	20
  3651  00DBAC  D7DE               	goto	L3
  3652  00DBAE                     l457:
  3653                           
  3654                           ;standbyMode.c: 945: else {
  3655                           ;standbyMode.c: 946: sum += keypress;
  3656  00DBAE  5030               	movf	which_drawer@keypress,w,c
  3657  00DBB0  D7DC               	goto	L3
  3658  00DBB2                     l443:
  3659                           
  3660                           ;standbyMode.c: 951: else if (keypress == 12){
  3661  00DBB2  0E0C               	movlw	12
  3662  00DBB4  1830               	xorwf	which_drawer@keypress,w,c
  3663  00DBB6  A4D8               	btfss	status,2,c
  3664  00DBB8  D757               	goto	l431
  3665                           
  3666                           ;standbyMode.c: 952: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3667  00DBBA  0E01               	movlw	1
  3668  00DBBC  EC6C  F069         	call	_lcdInst
  3669  00DBC0  0EC3               	movlw	195
  3670  00DBC2  6E27               	movwf	??_which_drawer& (0+255),c
  3671  00DBC4  0ECD               	movlw	205
  3672  00DBC6                     u6757:
  3673  00DBC6  2EE8               	decfsz	wreg,f,c
  3674  00DBC8  D7FE               	bra	u6757
  3675  00DBCA  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3676  00DBCC  D7FC               	bra	u6757
  3677  00DBCE  F000               	nop	
  3678                           
  3679                           ;standbyMode.c: 953: printf("Drawer number:");
  3680  00DBD0  0E9D               	movlw	low STR_37
  3681  00DBD2  6E0D               	movwf	printf@f,c
  3682  00DBD4  0EFE               	movlw	high STR_37
  3683  00DBD6  6E0E               	movwf	printf@f+1,c
  3684  00DBD8  EC7A  F06F         	call	_printf	;wreg free
  3685                           
  3686                           ;standbyMode.c: 954: lcdInst(0xC0);;
  3687  00DBDC  0EC0               	movlw	192
  3688  00DBDE  EC6C  F069         	call	_lcdInst
  3689                           
  3690                           ;standbyMode.c: 955: count = 0;
  3691  00DBE2  0E00               	movlw	0
  3692  00DBE4  6E2F               	movwf	which_drawer@count+1,c
  3693  00DBE6  0E00               	movlw	0
  3694  00DBE8  6E2E               	movwf	which_drawer@count,c
  3695                           
  3696                           ;standbyMode.c: 956: sum = 0;
  3697  00DBEA  0E00               	movlw	0
  3698  00DBEC  6E2B               	movwf	which_drawer@sum+1,c
  3699  00DBEE  0E00               	movlw	0
  3700  00DBF0  6E2A               	movwf	which_drawer@sum,c
  3701  00DBF2  D73A               	goto	l431
  3702  00DBF4                     l439:
  3703                           
  3704                           ;standbyMode.c: 957: }
  3705                           ;standbyMode.c: 958: }
  3706                           ;standbyMode.c: 960: if (backCheck == 100){
  3707  00DBF4  0E64               	movlw	100
  3708  00DBF6  182C               	xorwf	which_drawer@backCheck,w,c
  3709  00DBF8  102D               	iorwf	which_drawer@backCheck+1,w,c
  3710  00DBFA  A4D8               	btfss	status,2,c
  3711  00DBFC  D005               	goto	l462
  3712                           
  3713                           ;standbyMode.c: 961: return backCheck;
  3714  00DBFE  C02C  F025         	movff	which_drawer@backCheck,?_which_drawer
  3715  00DC02  C02D  F026         	movff	which_drawer@backCheck+1,?_which_drawer+1
  3716                           
  3717                           ;standbyMode.c: 962: }
  3718  00DC06  0012               	return	
  3719  00DC08                     l462:
  3720                           
  3721                           ;standbyMode.c: 963: else{
  3722                           ;standbyMode.c: 964: unsigned int rand = decode_drawer(sum);
  3723  00DC08  C02A  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3724  00DC0C  C02B  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3725  00DC10  ECA6  F06B         	call	_decode_drawer	;wreg free
  3726  00DC14  C001  F028         	movff	?_decode_drawer,which_drawer@rand
  3727  00DC18  C002  F029         	movff	?_decode_drawer+1,which_drawer@rand+1
  3728                           
  3729                           ;standbyMode.c: 965: return rand;
  3730  00DC1C  C028  F025         	movff	which_drawer@rand,?_which_drawer
  3731  00DC20  C029  F026         	movff	which_drawer@rand+1,?_which_drawer+1
  3732  00DC24  0012               	return	
  3733  00DC26                     __end_of_which_drawer:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           indf2	equ	0xFDF
  3745                           postinc2	equ	0xFDE
  3746                           postdec2	equ	0xFDD
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function _decode_drawer *****************
  3752 ;; Defined at:
  3753 ;;		line 825 in file "standbyMode.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  drawer          2    0[COMRAM] unsigned int 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  returnValue     2    4[COMRAM] unsigned int 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  2    0[COMRAM] unsigned int 
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:        6 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_which_drawer
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text4
  3781  00D74C                     __ptext4:
  3782                           	opt stack 0
  3783  00D74C                     _decode_drawer:
  3784                           	opt stack 28
  3785                           
  3786                           ;standbyMode.c: 826: unsigned int returnValue;
  3787                           ;standbyMode.c: 828: switch(drawer){
  3788                           
  3789                           ;incstack = 0
  3790  00D74C  D03A               	goto	l412
  3791  00D74E                     
  3792                           ;standbyMode.c: 831: returnValue = 1;
  3793  00D74E  0E00               	movlw	0
  3794  00D750  6E06               	movwf	decode_drawer@returnValue+1,c
  3795  00D752  0E01               	movlw	1
  3796  00D754  D02F               	goto	L15
  3797  00D756                     
  3798                           ;standbyMode.c: 836: returnValue = 2;
  3799  00D756  0E00               	movlw	0
  3800  00D758  6E06               	movwf	decode_drawer@returnValue+1,c
  3801  00D75A  0E02               	movlw	2
  3802  00D75C  D02B               	goto	L15
  3803  00D75E                     
  3804                           ;standbyMode.c: 841: returnValue = 3;
  3805  00D75E  0E00               	movlw	0
  3806  00D760  6E06               	movwf	decode_drawer@returnValue+1,c
  3807  00D762  0E03               	movlw	3
  3808  00D764  D027               	goto	L15
  3809  00D766                     
  3810                           ;standbyMode.c: 846: returnValue = 7;
  3811  00D766  0E00               	movlw	0
  3812  00D768  6E06               	movwf	decode_drawer@returnValue+1,c
  3813  00D76A  0E07               	movlw	7
  3814  00D76C  D023               	goto	L15
  3815  00D76E                     
  3816                           ;standbyMode.c: 851: returnValue = 8;
  3817  00D76E  0E00               	movlw	0
  3818  00D770  6E06               	movwf	decode_drawer@returnValue+1,c
  3819  00D772  0E08               	movlw	8
  3820  00D774  D01F               	goto	L15
  3821  00D776                     
  3822                           ;standbyMode.c: 856: returnValue = 9;
  3823  00D776  0E00               	movlw	0
  3824  00D778  6E06               	movwf	decode_drawer@returnValue+1,c
  3825  00D77A  0E09               	movlw	9
  3826  00D77C  D01B               	goto	L15
  3827  00D77E                     
  3828                           ;standbyMode.c: 861: returnValue = 10;
  3829  00D77E  0E00               	movlw	0
  3830  00D780  6E06               	movwf	decode_drawer@returnValue+1,c
  3831  00D782  0E0A               	movlw	10
  3832  00D784  D017               	goto	L15
  3833  00D786                     
  3834                           ;standbyMode.c: 866: returnValue = 11;
  3835  00D786  0E00               	movlw	0
  3836  00D788  6E06               	movwf	decode_drawer@returnValue+1,c
  3837  00D78A  0E0B               	movlw	11
  3838  00D78C  D013               	goto	L15
  3839  00D78E                     
  3840                           ;standbyMode.c: 871: returnValue = 12;
  3841  00D78E  0E00               	movlw	0
  3842  00D790  6E06               	movwf	decode_drawer@returnValue+1,c
  3843  00D792  0E0C               	movlw	12
  3844  00D794  D00F               	goto	L15
  3845  00D796                     
  3846                           ;standbyMode.c: 876: returnValue = 13;
  3847  00D796  0E00               	movlw	0
  3848  00D798  6E06               	movwf	decode_drawer@returnValue+1,c
  3849  00D79A  0E0D               	movlw	13
  3850  00D79C  D00B               	goto	L15
  3851  00D79E                     
  3852                           ;standbyMode.c: 881: returnValue = 14;
  3853  00D79E  0E00               	movlw	0
  3854  00D7A0  6E06               	movwf	decode_drawer@returnValue+1,c
  3855  00D7A2  0E0E               	movlw	14
  3856  00D7A4  D007               	goto	L15
  3857  00D7A6                     
  3858                           ;standbyMode.c: 886: returnValue = 15;
  3859  00D7A6  0E00               	movlw	0
  3860  00D7A8  6E06               	movwf	decode_drawer@returnValue+1,c
  3861  00D7AA  0E0F               	movlw	15
  3862  00D7AC  D003               	goto	L15
  3863  00D7AE                     
  3864                           ;standbyMode.c: 891: returnValue = 16;
  3865  00D7AE  0E00               	movlw	0
  3866  00D7B0  6E06               	movwf	decode_drawer@returnValue+1,c
  3867  00D7B2  0E10               	movlw	16
  3868  00D7B4                     L15:
  3869  00D7B4  6E05               	movwf	decode_drawer@returnValue,c
  3870                           
  3871                           ;standbyMode.c: 892: break;
  3872  00D7B6  D036               	goto	l414
  3873  00D7B8                     l427:
  3874                           
  3875                           ;standbyMode.c: 895: returnValue = drawer;
  3876  00D7B8  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3877  00D7BC  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3878                           
  3879                           ;standbyMode.c: 897: }
  3880                           
  3881                           ;standbyMode.c: 896: break;
  3882  00D7C0  D031               	goto	l414
  3883  00D7C2                     l412:
  3884  00D7C2  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3885  00D7C6  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3886                           
  3887                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3888                           ; Switch size 1, requested type "space"
  3889                           ; Number of cases is 1, Range of values is 0 to 0
  3890                           ; switch strategies available:
  3891                           ; Name         Instructions Cycles
  3892                           ; simple_byte            4     3 (average)
  3893                           ;	Chosen strategy is simple_byte
  3894  00D7CA  5004               	movf	??_decode_drawer+1,w,c
  3895  00D7CC  0A00               	xorlw	0	; case 0
  3896  00D7CE  A4D8               	btfss	status,2,c
  3897  00D7D0  D7F3               	goto	l427
  3898                           
  3899                           ; Switch size 1, requested type "space"
  3900                           ; Number of cases is 13, Range of values is 1 to 40
  3901                           ; switch strategies available:
  3902                           ; Name         Instructions Cycles
  3903                           ; simple_byte           40    21 (average)
  3904                           ;	Chosen strategy is simple_byte
  3905  00D7D2  5003               	movf	??_decode_drawer,w,c
  3906  00D7D4  0A01               	xorlw	1	; case 1
  3907  00D7D6  B4D8               	btfsc	status,2,c
  3908  00D7D8  D7BE               	goto	l415
  3909  00D7DA  0A03               	xorlw	3	; case 2
  3910  00D7DC  B4D8               	btfsc	status,2,c
  3911  00D7DE  D7BF               	goto	l416
  3912  00D7E0  0A0A               	xorlw	10	; case 8
  3913  00D7E2  B4D8               	btfsc	status,2,c
  3914  00D7E4  D7C0               	goto	l417
  3915  00D7E6  0A01               	xorlw	1	; case 9
  3916  00D7E8  B4D8               	btfsc	status,2,c
  3917  00D7EA  D7C1               	goto	l418
  3918  00D7EC  0A03               	xorlw	3	; case 10
  3919  00D7EE  B4D8               	btfsc	status,2,c
  3920  00D7F0  D7C2               	goto	l419
  3921  00D7F2  0A1E               	xorlw	30	; case 20
  3922  00D7F4  B4D8               	btfsc	status,2,c
  3923  00D7F6  D7AB               	goto	l413
  3924  00D7F8  0A01               	xorlw	1	; case 21
  3925  00D7FA  B4D8               	btfsc	status,2,c
  3926  00D7FC  D7C8               	goto	l422
  3927  00D7FE  0A03               	xorlw	3	; case 22
  3928  00D800  B4D8               	btfsc	status,2,c
  3929  00D802  D7C9               	goto	l423
  3930  00D804  0A0E               	xorlw	14	; case 24
  3931  00D806  B4D8               	btfsc	status,2,c
  3932  00D808  D7CA               	goto	l424
  3933  00D80A  0A01               	xorlw	1	; case 25
  3934  00D80C  B4D8               	btfsc	status,2,c
  3935  00D80E  D7CB               	goto	l425
  3936  00D810  0A03               	xorlw	3	; case 26
  3937  00D812  B4D8               	btfsc	status,2,c
  3938  00D814  D7CC               	goto	l426
  3939  00D816  0A3B               	xorlw	59	; case 33
  3940  00D818  B4D8               	btfsc	status,2,c
  3941  00D81A  D7B1               	goto	l420
  3942  00D81C  0A09               	xorlw	9	; case 40
  3943  00D81E  B4D8               	btfsc	status,2,c
  3944  00D820  D7B2               	goto	l421
  3945  00D822  D7CA               	goto	l427
  3946  00D824                     l414:
  3947                           
  3948                           ;standbyMode.c: 898: return returnValue;
  3949  00D824  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3950  00D828  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3951  00D82C  0012               	return		;funcret
  3952  00D82E                     __end_of_decode_drawer:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf2	equ	0xFDF
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _viewLogs *****************
  3971 ;; Defined at:
  3972 ;;		line 319 in file "standbyMode.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  keypress2       1   74[COMRAM] unsigned char 
  3977 ;;  returnVal       2   71[COMRAM] unsigned int 
  3978 ;;  checkLog        2   69[COMRAM] unsigned int 
  3979 ;;  logView         2   67[COMRAM] unsigned int 
  3980 ;;  logNumber       1   73[COMRAM] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  2   63[COMRAM] unsigned int 
  3983 ;; Registers used:
  3984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:       12 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    4
  3997 ;; This function calls:
  3998 ;;		_displayLogs
  3999 ;;		_lcdInst
  4000 ;;		_printf
  4001 ;;		_putch
  4002 ;;		_readEEPROM
  4003 ;;		_verifyKeypress
  4004 ;; This function is called by:
  4005 ;;		_standbyMode
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text5
  4010  00DC26                     __ptext5:
  4011                           	opt stack 0
  4012  00DC26                     _viewLogs:
  4013                           	opt stack 25
  4014                           
  4015                           ;standbyMode.c: 321: unsigned char logNumber = readEEPROM(250);
  4016                           
  4017                           ;incstack = 0
  4018  00DC26  0EFA               	movlw	250
  4019  00DC28  EC80  F069         	call	_readEEPROM
  4020  00DC2C  6E4A               	movwf	viewLogs@logNumber,c
  4021                           
  4022                           ;standbyMode.c: 322: unsigned int logView = 0;
  4023  00DC2E  0E00               	movlw	0
  4024  00DC30  6E45               	movwf	viewLogs@logView+1,c
  4025  00DC32  0E00               	movlw	0
  4026  00DC34  6E44               	movwf	viewLogs@logView,c
  4027                           
  4028                           ;standbyMode.c: 323: unsigned int checkLog = 0;
  4029  00DC36  0E00               	movlw	0
  4030  00DC38  6E47               	movwf	viewLogs@checkLog+1,c
  4031  00DC3A  0E00               	movlw	0
  4032  00DC3C  6E46               	movwf	viewLogs@checkLog,c
  4033                           
  4034                           ;standbyMode.c: 324: unsigned int returnVal = 0;
  4035  00DC3E  0E00               	movlw	0
  4036  00DC40  6E49               	movwf	viewLogs@returnVal+1,c
  4037  00DC42  0E00               	movlw	0
  4038  00DC44  6E48               	movwf	viewLogs@returnVal,c
  4039                           
  4040                           ;standbyMode.c: 326: if (logNumber == 0){
  4041  00DC46  504A               	movf	viewLogs@logNumber,w,c
  4042  00DC48  A4D8               	btfss	status,2,c
  4043  00DC4A  D02B               	goto	l239
  4044                           
  4045                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4046  00DC4C  0E01               	movlw	1
  4047  00DC4E  EC6C  F069         	call	_lcdInst
  4048  00DC52  0EC3               	movlw	195
  4049  00DC54  6E42               	movwf	??_viewLogs& (0+255),c
  4050  00DC56  0ECD               	movlw	205
  4051  00DC58                     u6767:
  4052  00DC58  2EE8               	decfsz	wreg,f,c
  4053  00DC5A  D7FE               	bra	u6767
  4054  00DC5C  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4055  00DC5E  D7FC               	bra	u6767
  4056  00DC60  F000               	nop	
  4057                           
  4058                           ;standbyMode.c: 328: printf("No logs");
  4059  00DC62  0EDB               	movlw	low STR_1
  4060  00DC64  6E0D               	movwf	printf@f,c
  4061  00DC66  0EFF               	movlw	high STR_1
  4062  00DC68  6E0E               	movwf	printf@f+1,c
  4063  00DC6A  EC7A  F06F         	call	_printf	;wreg free
  4064                           
  4065                           ;standbyMode.c: 329: lcdInst(0xC0);;
  4066  00DC6E  0EC0               	movlw	192
  4067  00DC70  EC6C  F069         	call	_lcdInst
  4068                           
  4069                           ;standbyMode.c: 330: printf("available.");
  4070  00DC74  0E8A               	movlw	low STR_2
  4071  00DC76  6E0D               	movwf	printf@f,c
  4072  00DC78  0EFF               	movlw	high STR_2
  4073  00DC7A  6E0E               	movwf	printf@f+1,c
  4074  00DC7C  EC7A  F06F         	call	_printf	;wreg free
  4075                           
  4076                           ;standbyMode.c: 331: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4077  00DC80  0E66               	movlw	102
  4078  00DC82  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4079  00DC84  0E76               	movlw	118
  4080  00DC86  6E42               	movwf	??_viewLogs& (0+255),c
  4081  00DC88  0EC1               	movlw	193
  4082  00DC8A                     u6777:
  4083  00DC8A  2EE8               	decfsz	wreg,f,c
  4084  00DC8C  D7FE               	bra	u6777
  4085  00DC8E  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4086  00DC90  D7FC               	bra	u6777
  4087  00DC92  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4088  00DC94  D7FA               	bra	u6777
  4089  00DC96  F000               	nop	
  4090                           
  4091                           ;standbyMode.c: 332: return 14;
  4092  00DC98  0E00               	movlw	0
  4093  00DC9A  6E41               	movwf	?_viewLogs+1,c
  4094  00DC9C  0E0E               	movlw	14
  4095  00DC9E  6E40               	movwf	?_viewLogs,c
  4096                           
  4097                           ;standbyMode.c: 333: }
  4098  00DCA0  0012               	return	
  4099  00DCA2                     l239:
  4100                           
  4101                           ;standbyMode.c: 334: else {
  4102                           ;standbyMode.c: 335: if (logNumber == 1){
  4103  00DCA2  044A               	decf	viewLogs@logNumber,w,c
  4104  00DCA4  A4D8               	btfss	status,2,c
  4105  00DCA6  D053               	goto	l242
  4106                           
  4107                           ;standbyMode.c: 336: logView = 1;
  4108  00DCA8  0E00               	movlw	0
  4109  00DCAA  6E45               	movwf	viewLogs@logView+1,c
  4110  00DCAC  0E01               	movlw	1
  4111  00DCAE  6E44               	movwf	viewLogs@logView,c
  4112                           
  4113                           ;standbyMode.c: 338: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4114  00DCB0  0E01               	movlw	1
  4115  00DCB2  EC6C  F069         	call	_lcdInst
  4116  00DCB6  0EC3               	movlw	195
  4117  00DCB8  6E42               	movwf	??_viewLogs& (0+255),c
  4118  00DCBA  0ECD               	movlw	205
  4119  00DCBC                     u6787:
  4120  00DCBC  2EE8               	decfsz	wreg,f,c
  4121  00DCBE  D7FE               	bra	u6787
  4122  00DCC0  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4123  00DCC2  D7FC               	bra	u6787
  4124  00DCC4  F000               	nop	
  4125                           
  4126                           ;standbyMode.c: 339: printf("1 previous log");
  4127  00DCC6  0EBB               	movlw	low STR_3
  4128  00DCC8  6E0D               	movwf	printf@f,c
  4129  00DCCA  0EFE               	movlw	high STR_3
  4130  00DCCC  6E0E               	movwf	printf@f+1,c
  4131  00DCCE  EC7A  F06F         	call	_printf	;wreg free
  4132                           
  4133                           ;standbyMode.c: 340: lcdInst(0xC0);;
  4134  00DCD2  0EC0               	movlw	192
  4135  00DCD4  EC6C  F069         	call	_lcdInst
  4136                           
  4137                           ;standbyMode.c: 341: printf("available.");
  4138  00DCD8  0E8A               	movlw	low STR_2
  4139  00DCDA  6E0D               	movwf	printf@f,c
  4140  00DCDC  0EFF               	movlw	high STR_2
  4141  00DCDE  6E0E               	movwf	printf@f+1,c
  4142  00DCE0  EC7A  F06F         	call	_printf	;wreg free
  4143                           
  4144                           ;standbyMode.c: 342: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4145  00DCE4  0E66               	movlw	102
  4146  00DCE6  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4147  00DCE8  0E76               	movlw	118
  4148  00DCEA  6E42               	movwf	??_viewLogs& (0+255),c
  4149  00DCEC  0EC1               	movlw	193
  4150  00DCEE                     u6797:
  4151  00DCEE  2EE8               	decfsz	wreg,f,c
  4152  00DCF0  D7FE               	bra	u6797
  4153  00DCF2  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4154  00DCF4  D7FC               	bra	u6797
  4155  00DCF6  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4156  00DCF8  D7FA               	bra	u6797
  4157  00DCFA  F000               	nop	
  4158                           
  4159                           ;standbyMode.c: 344: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4160  00DCFC  0E01               	movlw	1
  4161  00DCFE  EC6C  F069         	call	_lcdInst
  4162  00DD02  0EC3               	movlw	195
  4163  00DD04  6E42               	movwf	??_viewLogs& (0+255),c
  4164  00DD06  0ECD               	movlw	205
  4165  00DD08                     u6807:
  4166  00DD08  2EE8               	decfsz	wreg,f,c
  4167  00DD0A  D7FE               	bra	u6807
  4168  00DD0C  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4169  00DD0E  D7FC               	bra	u6807
  4170  00DD10  F000               	nop	
  4171                           
  4172                           ;standbyMode.c: 345: printf("Press any key to");
  4173  00DD12  0ECD               	movlw	low STR_5
  4174  00DD14  6E0D               	movwf	printf@f,c
  4175  00DD16  0EFD               	movlw	high STR_5
  4176  00DD18  6E0E               	movwf	printf@f+1,c
  4177  00DD1A  EC7A  F06F         	call	_printf	;wreg free
  4178                           
  4179                           ;standbyMode.c: 346: lcdInst(0xC0);;
  4180  00DD1E  0EC0               	movlw	192
  4181  00DD20  EC6C  F069         	call	_lcdInst
  4182                           
  4183                           ;standbyMode.c: 347: printf("move forward.");
  4184  00DD24  0E22               	movlw	low STR_6
  4185  00DD26  6E0D               	movwf	printf@f,c
  4186  00DD28  0EFF               	movlw	high STR_6
  4187  00DD2A  6E0E               	movwf	printf@f+1,c
  4188  00DD2C  EC7A  F06F         	call	_printf	;wreg free
  4189                           
  4190                           ;standbyMode.c: 348: _delay((unsigned long)((500)*(40000000/4000.0)));
  4191  00DD30  0E1A               	movlw	26
  4192  00DD32  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4193  00DD34  0E5E               	movlw	94
  4194  00DD36  6E42               	movwf	??_viewLogs& (0+255),c
  4195  00DD38  0E6E               	movlw	110
  4196  00DD3A                     u6817:
  4197  00DD3A  2EE8               	decfsz	wreg,f,c
  4198  00DD3C  D7FE               	bra	u6817
  4199  00DD3E  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4200  00DD40  D7FC               	bra	u6817
  4201  00DD42  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4202  00DD44  D7FA               	bra	u6817
  4203  00DD46  D000               	nop2	
  4204  00DD48                     
  4205                           ;standbyMode.c: 351: continue;
  4206  00DD48  B281               	btfsc	3969,1,c	;volatile
  4207  00DD4A  D0C6               	goto	u4730
  4208  00DD4C  D7FD               	goto	l244
  4209  00DD4E                     l242:
  4210                           
  4211                           ;standbyMode.c: 354: else {
  4212                           ;standbyMode.c: 355: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4213  00DD4E  0E01               	movlw	1
  4214  00DD50  EC6C  F069         	call	_lcdInst
  4215  00DD54  0EC3               	movlw	195
  4216  00DD56  6E42               	movwf	??_viewLogs& (0+255),c
  4217  00DD58  0ECD               	movlw	205
  4218  00DD5A                     u6827:
  4219  00DD5A  2EE8               	decfsz	wreg,f,c
  4220  00DD5C  D7FE               	bra	u6827
  4221  00DD5E  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4222  00DD60  D7FC               	bra	u6827
  4223  00DD62  F000               	nop	
  4224                           
  4225                           ;standbyMode.c: 356: printf("%i previous logs", logNumber);
  4226  00DD64  0EDE               	movlw	low STR_7
  4227  00DD66  6E0D               	movwf	printf@f,c
  4228  00DD68  0EFD               	movlw	high STR_7
  4229  00DD6A  6E0E               	movwf	printf@f+1,c
  4230  00DD6C  C04A  F00F         	movff	viewLogs@logNumber,?_printf+2
  4231  00DD70  6A10               	clrf	?_printf+3,c
  4232  00DD72  EC7A  F06F         	call	_printf	;wreg free
  4233                           
  4234                           ;standbyMode.c: 357: lcdInst(0xC0);;
  4235  00DD76  0EC0               	movlw	192
  4236  00DD78  EC6C  F069         	call	_lcdInst
  4237                           
  4238                           ;standbyMode.c: 358: printf("available.");
  4239  00DD7C  0E8A               	movlw	low STR_2
  4240  00DD7E  6E0D               	movwf	printf@f,c
  4241  00DD80  0EFF               	movlw	high STR_2
  4242  00DD82  6E0E               	movwf	printf@f+1,c
  4243  00DD84  EC7A  F06F         	call	_printf	;wreg free
  4244                           
  4245                           ;standbyMode.c: 359: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4246  00DD88  0E66               	movlw	102
  4247  00DD8A  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4248  00DD8C  0E76               	movlw	118
  4249  00DD8E  6E42               	movwf	??_viewLogs& (0+255),c
  4250  00DD90  0EC1               	movlw	193
  4251  00DD92                     u6837:
  4252  00DD92  2EE8               	decfsz	wreg,f,c
  4253  00DD94  D7FE               	bra	u6837
  4254  00DD96  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4255  00DD98  D7FC               	bra	u6837
  4256  00DD9A  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4257  00DD9C  D7FA               	bra	u6837
  4258  00DD9E  F000               	nop	
  4259                           
  4260                           ;standbyMode.c: 360: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4261  00DDA0  0E01               	movlw	1
  4262  00DDA2  EC6C  F069         	call	_lcdInst
  4263  00DDA6  0EC3               	movlw	195
  4264  00DDA8  6E42               	movwf	??_viewLogs& (0+255),c
  4265  00DDAA  0ECD               	movlw	205
  4266  00DDAC                     u6847:
  4267  00DDAC  2EE8               	decfsz	wreg,f,c
  4268  00DDAE  D7FE               	bra	u6847
  4269  00DDB0  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4270  00DDB2  D7FC               	bra	u6847
  4271  00DDB4  F000               	nop	
  4272                           
  4273                           ;standbyMode.c: 361: printf("Please input log");
  4274  00DDB6  0EAB               	movlw	low STR_9
  4275  00DDB8  6E0D               	movwf	printf@f,c
  4276  00DDBA  0EFD               	movlw	high STR_9
  4277  00DDBC  6E0E               	movwf	printf@f+1,c
  4278  00DDBE  EC7A  F06F         	call	_printf	;wreg free
  4279                           
  4280                           ;standbyMode.c: 362: lcdInst(0xC0);;
  4281  00DDC2  0EC0               	movlw	192
  4282  00DDC4  EC6C  F069         	call	_lcdInst
  4283                           
  4284                           ;standbyMode.c: 363: printf("number: ");
  4285  00DDC8  0ECA               	movlw	low STR_10
  4286  00DDCA  6E0D               	movwf	printf@f,c
  4287  00DDCC  0EFF               	movlw	high STR_10
  4288  00DDCE  6E0E               	movwf	printf@f+1,c
  4289  00DDD0  EC7A  F06F         	call	_printf	;wreg free
  4290  00DDD4                     
  4291                           ;standbyMode.c: 366: while(PORTBbits.RB1 == 0){ continue; }
  4292  00DDD4  A281               	btfss	3969,1,c	;volatile
  4293  00DDD6  D7FE               	goto	l247
  4294                           
  4295                           ;standbyMode.c: 367: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  4296  00DDD8  3881               	swapf	3969,w,c	;volatile
  4297  00DDDA  0B0F               	andlw	15
  4298  00DDDC  0B0F               	andlw	15
  4299  00DDDE  6E4B               	movwf	viewLogs@keypress2,c
  4300  00DDE0  B281               	btfsc	3969,1,c	;volatile
  4301  00DDE2  D7FE               	goto	l252
  4302                           
  4303                           ;standbyMode.c: 370: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  4304  00DDE4  504B               	movf	viewLogs@keypress2,w,c
  4305  00DDE6  B4D8               	btfsc	status,2,c
  4306  00DDE8  D00B               	goto	u4710
  4307  00DDEA  044B               	decf	viewLogs@keypress2,w,c
  4308  00DDEC  B4D8               	btfsc	status,2,c
  4309  00DDEE  D008               	goto	u4710
  4310  00DDF0  0E02               	movlw	2
  4311  00DDF2  184B               	xorwf	viewLogs@keypress2,w,c
  4312  00DDF4  B4D8               	btfsc	status,2,c
  4313  00DDF6  D004               	goto	u4710
  4314  00DDF8  0E04               	movlw	4
  4315  00DDFA  184B               	xorwf	viewLogs@keypress2,w,c
  4316  00DDFC  A4D8               	btfss	status,2,c
  4317  00DDFE  D7EA               	goto	l247
  4318  00DE00                     u4710:
  4319                           
  4320                           ;standbyMode.c: 371: checkLog = verifyKeypress(logNumber, keypress2);
  4321  00DE00  C04B  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  4322  00DE04  6A02               	clrf	verifyKeypress@keypress+1,c
  4323  00DE06  504A               	movf	viewLogs@logNumber,w,c
  4324  00DE08  EC70  F06A         	call	_verifyKeypress
  4325  00DE0C  C001  F046         	movff	?_verifyKeypress,viewLogs@checkLog
  4326  00DE10  C002  F047         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  4327                           
  4328                           ;standbyMode.c: 372: if (checkLog == 1){
  4329  00DE14  0446               	decf	viewLogs@checkLog,w,c
  4330  00DE16  1047               	iorwf	viewLogs@checkLog+1,w,c
  4331  00DE18  A4D8               	btfss	status,2,c
  4332  00DE1A  D7DC               	goto	l247
  4333                           
  4334                           ;standbyMode.c: 373: putch(keys[keypress2]);
  4335  00DE1C  504B               	movf	viewLogs@keypress2,w,c
  4336  00DE1E  0D01               	mullw	1
  4337  00DE20  0E25               	movlw	low _keys
  4338  00DE22  24F3               	addwf	prodl,w,c
  4339  00DE24  6EF6               	movwf	tblptrl,c
  4340  00DE26  0EFD               	movlw	high _keys
  4341  00DE28  20F4               	addwfc	prodh,w,c
  4342  00DE2A  6EF7               	movwf	tblptrh,c
  4343  00DE2C                     	if	0	;There are less than 3 active tblptr bytes
  4344  00DE2C                     	endif
  4345  00DE2C  0008               	tblrd		*
  4346  00DE2E  50F5               	movf	tablat,w,c
  4347  00DE30  EC76  F069         	call	_putch
  4348                           
  4349                           ;standbyMode.c: 374: logView = keypress2;
  4350  00DE34  C04B  F044         	movff	viewLogs@keypress2,viewLogs@logView
  4351  00DE38  6A45               	clrf	viewLogs@logView+1,c
  4352                           
  4353                           ;standbyMode.c: 375: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4354  00DE3A  0E33               	movlw	51
  4355  00DE3C  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4356  00DE3E  0EBB               	movlw	187
  4357  00DE40  6E42               	movwf	??_viewLogs& (0+255),c
  4358  00DE42  0EE0               	movlw	224
  4359  00DE44                     u6857:
  4360  00DE44  2EE8               	decfsz	wreg,f,c
  4361  00DE46  D7FE               	bra	u6857
  4362  00DE48  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4363  00DE4A  D7FC               	bra	u6857
  4364  00DE4C  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4365  00DE4E  D7FA               	bra	u6857
  4366                           
  4367                           ;standbyMode.c: 377: }
  4368                           ;standbyMode.c: 378: }
  4369                           ;standbyMode.c: 379: }
  4370                           ;standbyMode.c: 381: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4371                           
  4372                           ;standbyMode.c: 376: break;
  4373  00DE50  0E01               	movlw	1
  4374  00DE52  EC6C  F069         	call	_lcdInst
  4375  00DE56  0EC3               	movlw	195
  4376  00DE58  6E42               	movwf	??_viewLogs& (0+255),c
  4377  00DE5A  0ECD               	movlw	205
  4378  00DE5C                     u6867:
  4379  00DE5C  2EE8               	decfsz	wreg,f,c
  4380  00DE5E  D7FE               	bra	u6867
  4381  00DE60  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4382  00DE62  D7FC               	bra	u6867
  4383  00DE64  F000               	nop	
  4384                           
  4385                           ;standbyMode.c: 382: printf("Great!");
  4386  00DE66  0EEB               	movlw	low STR_11
  4387  00DE68  6E0D               	movwf	printf@f,c
  4388  00DE6A  0EFF               	movlw	high STR_11
  4389  00DE6C  6E0E               	movwf	printf@f+1,c
  4390  00DE6E  EC7A  F06F         	call	_printf	;wreg free
  4391                           
  4392                           ;standbyMode.c: 383: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4393  00DE72  0E33               	movlw	51
  4394  00DE74  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4395  00DE76  0EBB               	movlw	187
  4396  00DE78  6E42               	movwf	??_viewLogs& (0+255),c
  4397  00DE7A  0EE0               	movlw	224
  4398  00DE7C                     u6877:
  4399  00DE7C  2EE8               	decfsz	wreg,f,c
  4400  00DE7E  D7FE               	bra	u6877
  4401  00DE80  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4402  00DE82  D7FC               	bra	u6877
  4403  00DE84  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4404  00DE86  D7FA               	bra	u6877
  4405                           
  4406                           ;standbyMode.c: 384: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4407  00DE88  0E01               	movlw	1
  4408  00DE8A  EC6C  F069         	call	_lcdInst
  4409  00DE8E  0EC3               	movlw	195
  4410  00DE90  6E42               	movwf	??_viewLogs& (0+255),c
  4411  00DE92  0ECD               	movlw	205
  4412  00DE94                     u6887:
  4413  00DE94  2EE8               	decfsz	wreg,f,c
  4414  00DE96  D7FE               	bra	u6887
  4415  00DE98  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4416  00DE9A  D7FC               	bra	u6887
  4417  00DE9C  F000               	nop	
  4418                           
  4419                           ;standbyMode.c: 385: printf("Press any key to");
  4420  00DE9E  0ECD               	movlw	low STR_5
  4421  00DEA0  6E0D               	movwf	printf@f,c
  4422  00DEA2  0EFD               	movlw	high STR_5
  4423  00DEA4  6E0E               	movwf	printf@f+1,c
  4424  00DEA6  EC7A  F06F         	call	_printf	;wreg free
  4425                           
  4426                           ;standbyMode.c: 386: lcdInst(0xC0);;
  4427  00DEAA  0EC0               	movlw	192
  4428  00DEAC  EC6C  F069         	call	_lcdInst
  4429                           
  4430                           ;standbyMode.c: 387: printf("move forward.");
  4431  00DEB0  0E22               	movlw	low STR_6
  4432  00DEB2  6E0D               	movwf	printf@f,c
  4433  00DEB4  0EFF               	movlw	high STR_6
  4434  00DEB6  6E0E               	movwf	printf@f+1,c
  4435  00DEB8  EC7A  F06F         	call	_printf	;wreg free
  4436                           
  4437                           ;standbyMode.c: 388: _delay((unsigned long)((500)*(40000000/4000.0)));
  4438  00DEBC  0E1A               	movlw	26
  4439  00DEBE  6E43               	movwf	(??_viewLogs+1)& (0+255),c
  4440  00DEC0  0E5E               	movlw	94
  4441  00DEC2  6E42               	movwf	??_viewLogs& (0+255),c
  4442  00DEC4  0E6E               	movlw	110
  4443  00DEC6                     u6897:
  4444  00DEC6  2EE8               	decfsz	wreg,f,c
  4445  00DEC8  D7FE               	bra	u6897
  4446  00DECA  2E42               	decfsz	??_viewLogs& (0+255),f,c
  4447  00DECC  D7FC               	bra	u6897
  4448  00DECE  2E43               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4449  00DED0  D7FA               	bra	u6897
  4450  00DED2  D000               	nop2	
  4451  00DED4                     
  4452                           ;standbyMode.c: 391: continue;
  4453  00DED4  A281               	btfss	3969,1,c	;volatile
  4454  00DED6  D7FE               	goto	l261
  4455  00DED8                     u4730:
  4456                           
  4457                           ;standbyMode.c: 392: }
  4458                           ;standbyMode.c: 393: }
  4459                           ;standbyMode.c: 394: returnVal = displayLogs(logNumber);
  4460  00DED8  C04A  F025         	movff	viewLogs@logNumber,displayLogs@logNumber
  4461  00DEDC  6A26               	clrf	displayLogs@logNumber+1,c
  4462  00DEDE  EC00  F071         	call	_displayLogs	;wreg free
  4463  00DEE2  C025  F048         	movff	?_displayLogs,viewLogs@returnVal
  4464  00DEE6  C026  F049         	movff	?_displayLogs+1,viewLogs@returnVal+1
  4465                           
  4466                           ;standbyMode.c: 395: return returnVal;
  4467  00DEEA  C048  F040         	movff	viewLogs@returnVal,?_viewLogs
  4468  00DEEE  C049  F041         	movff	viewLogs@returnVal+1,?_viewLogs+1
  4469  00DEF2  0012               	return	
  4470  00DEF4                     __end_of_viewLogs:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           intcon	equ	0xFF2
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _verifyKeypress *****************
  4489 ;; Defined at:
  4490 ;;		line 305 in file "standbyMode.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  logNumber       1    wreg     unsigned char 
  4493 ;;  keypress        2    0[COMRAM] unsigned int 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  logNumber       1    4[COMRAM] unsigned char 
  4496 ;;  i               2    7[COMRAM] unsigned int 
  4497 ;;  returnVal       2    5[COMRAM] unsigned int 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  2    0[COMRAM] unsigned int 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        9 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_viewLogs
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text6
  4521  00D4E0                     __ptext6:
  4522                           	opt stack 0
  4523  00D4E0                     _verifyKeypress:
  4524                           	opt stack 28
  4525                           
  4526                           ;incstack = 0
  4527                           ;verifyKeypress@logNumber stored from wreg
  4528  00D4E0  6E05               	movwf	verifyKeypress@logNumber,c
  4529                           
  4530                           ;standbyMode.c: 306: unsigned int i = 0;
  4531  00D4E2  0E00               	movlw	0
  4532  00D4E4  6E09               	movwf	verifyKeypress@i+1,c
  4533  00D4E6  0E00               	movlw	0
  4534  00D4E8  6E08               	movwf	verifyKeypress@i,c
  4535                           
  4536                           ;standbyMode.c: 307: unsigned int returnVal = 0;
  4537  00D4EA  0E00               	movlw	0
  4538  00D4EC  6E07               	movwf	verifyKeypress@returnVal+1,c
  4539  00D4EE  0E00               	movlw	0
  4540  00D4F0  6E06               	movwf	verifyKeypress@returnVal,c
  4541                           
  4542                           ;standbyMode.c: 309: for (i=0; i<logNumber; i++){
  4543  00D4F2  0E00               	movlw	0
  4544  00D4F4  6E09               	movwf	verifyKeypress@i+1,c
  4545  00D4F6  0E00               	movlw	0
  4546  00D4F8  6E08               	movwf	verifyKeypress@i,c
  4547  00D4FA  D00D               	goto	l232
  4548  00D4FC                     
  4549                           ;standbyMode.c: 310: if (keypress == i){
  4550  00D4FC  5008               	movf	verifyKeypress@i,w,c
  4551  00D4FE  1801               	xorwf	verifyKeypress@keypress,w,c
  4552  00D500  E108               	bnz	l3643
  4553  00D502  5009               	movf	verifyKeypress@i+1,w,c
  4554  00D504  1802               	xorwf	verifyKeypress@keypress+1,w,c
  4555  00D506  A4D8               	btfss	status,2,c
  4556  00D508  D004               	goto	l234
  4557                           
  4558                           ;standbyMode.c: 311: returnVal = 1;
  4559  00D50A  0E00               	movlw	0
  4560  00D50C  6E07               	movwf	verifyKeypress@returnVal+1,c
  4561  00D50E  0E01               	movlw	1
  4562  00D510  6E06               	movwf	verifyKeypress@returnVal,c
  4563  00D512                     l234:
  4564  00D512                     l3643:
  4565  00D512  4A08               	infsnz	verifyKeypress@i,f,c
  4566  00D514  2A09               	incf	verifyKeypress@i+1,f,c
  4567  00D516                     l232:
  4568  00D516  5005               	movf	verifyKeypress@logNumber,w,c
  4569  00D518  6E03               	movwf	??_verifyKeypress& (0+255),c
  4570  00D51A  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  4571  00D51C  5003               	movf	??_verifyKeypress,w,c
  4572  00D51E  5C08               	subwf	verifyKeypress@i,w,c
  4573  00D520  5004               	movf	??_verifyKeypress+1,w,c
  4574  00D522  5809               	subwfb	verifyKeypress@i+1,w,c
  4575  00D524  A0D8               	btfss	status,0,c
  4576  00D526  D7EA               	goto	l233
  4577                           
  4578                           ;standbyMode.c: 312: }
  4579                           ;standbyMode.c: 313: }
  4580                           ;standbyMode.c: 314: return returnVal;
  4581  00D528  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  4582  00D52C  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  4583  00D530  0012               	return		;funcret
  4584  00D532                     __end_of_verifyKeypress:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _displayLogs *****************
  4603 ;; Defined at:
  4604 ;;		line 401 in file "standbyMode.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  logNumber       2   36[COMRAM] unsigned int 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  n               2   61[COMRAM] unsigned int 
  4609 ;;  markedDrawer    2   59[COMRAM] unsigned int 
  4610 ;;  markedDrawer    2   57[COMRAM] unsigned int 
  4611 ;;  markedDrawer    2   55[COMRAM] unsigned int 
  4612 ;;  markedDrawer    2   53[COMRAM] unsigned int 
  4613 ;;  seconds         2   51[COMRAM] unsigned int 
  4614 ;;  minutes         2   49[COMRAM] unsigned int 
  4615 ;;  operationTim    2   47[COMRAM] unsigned int 
  4616 ;;  longPieces      2   44[COMRAM] unsigned int 
  4617 ;;  flatPieces      2   42[COMRAM] unsigned int 
  4618 ;;  roundPieces     2   40[COMRAM] unsigned int 
  4619 ;;  keypress3       1   46[COMRAM] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  2   36[COMRAM] unsigned int 
  4622 ;; Registers used:
  4623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:       27 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    3
  4636 ;; This function calls:
  4637 ;;		___lwdiv
  4638 ;;		___lwmod
  4639 ;;		___wmul
  4640 ;;		_lcdInst
  4641 ;;		_printf
  4642 ;;		_readEEPROM
  4643 ;; This function is called by:
  4644 ;;		_viewLogs
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text7
  4649  00E200                     __ptext7:
  4650                           	opt stack 0
  4651  00E200                     _displayLogs:
  4652                           	opt stack 25
  4653                           
  4654                           ;standbyMode.c: 402: unsigned int n = (logNumber - 1)* 54;
  4655                           
  4656                           ;incstack = 0
  4657  00E200  0EFF               	movlw	255
  4658  00E202  2425               	addwf	displayLogs@logNumber,w,c
  4659  00E204  6E01               	movwf	___wmul@multiplier,c
  4660  00E206  0EFF               	movlw	255
  4661  00E208  2026               	addwfc	displayLogs@logNumber+1,w,c
  4662  00E20A  6E02               	movwf	___wmul@multiplier+1,c
  4663  00E20C  0E00               	movlw	0
  4664  00E20E  6E04               	movwf	___wmul@multiplicand+1,c
  4665  00E210  0E36               	movlw	54
  4666  00E212  6E03               	movwf	___wmul@multiplicand,c
  4667  00E214  ECBC  F069         	call	___wmul	;wreg free
  4668  00E218  C001  F03E         	movff	?___wmul,displayLogs@n
  4669  00E21C  C002  F03F         	movff	?___wmul+1,displayLogs@n+1
  4670                           
  4671                           ;standbyMode.c: 403: unsigned int operationTime = readEEPROM(3+n);
  4672  00E220  503E               	movf	displayLogs@n,w,c
  4673  00E222  0F03               	addlw	3
  4674  00E224  EC80  F069         	call	_readEEPROM
  4675  00E228  6E27               	movwf	??_displayLogs& (0+255),c
  4676  00E22A  5027               	movf	??_displayLogs,w,c
  4677  00E22C  6E30               	movwf	displayLogs@operationTime,c
  4678  00E22E  6A31               	clrf	displayLogs@operationTime+1,c
  4679                           
  4680                           ;standbyMode.c: 404: unsigned int roundPieces = readEEPROM(4+n);
  4681  00E230  503E               	movf	displayLogs@n,w,c
  4682  00E232  0F04               	addlw	4
  4683  00E234  EC80  F069         	call	_readEEPROM
  4684  00E238  6E27               	movwf	??_displayLogs& (0+255),c
  4685  00E23A  5027               	movf	??_displayLogs,w,c
  4686  00E23C  6E29               	movwf	displayLogs@roundPieces,c
  4687  00E23E  6A2A               	clrf	displayLogs@roundPieces+1,c
  4688                           
  4689                           ;standbyMode.c: 405: unsigned int flatPieces = readEEPROM(5+n);
  4690  00E240  503E               	movf	displayLogs@n,w,c
  4691  00E242  0F05               	addlw	5
  4692  00E244  EC80  F069         	call	_readEEPROM
  4693  00E248  6E27               	movwf	??_displayLogs& (0+255),c
  4694  00E24A  5027               	movf	??_displayLogs,w,c
  4695  00E24C  6E2B               	movwf	displayLogs@flatPieces,c
  4696  00E24E  6A2C               	clrf	displayLogs@flatPieces+1,c
  4697                           
  4698                           ;standbyMode.c: 406: unsigned int longPieces = readEEPROM(6+n);
  4699  00E250  503E               	movf	displayLogs@n,w,c
  4700  00E252  0F06               	addlw	6
  4701  00E254  EC80  F069         	call	_readEEPROM
  4702  00E258  6E27               	movwf	??_displayLogs& (0+255),c
  4703  00E25A  5027               	movf	??_displayLogs,w,c
  4704  00E25C  6E2D               	movwf	displayLogs@longPieces,c
  4705  00E25E  6A2E               	clrf	displayLogs@longPieces+1,c
  4706                           
  4707                           ;standbyMode.c: 407: unsigned int markedDrawer1 = readEEPROM(7+n);
  4708  00E260  503E               	movf	displayLogs@n,w,c
  4709  00E262  0F07               	addlw	7
  4710  00E264  EC80  F069         	call	_readEEPROM
  4711  00E268  6E27               	movwf	??_displayLogs& (0+255),c
  4712  00E26A  5027               	movf	??_displayLogs,w,c
  4713  00E26C  6E36               	movwf	displayLogs@markedDrawer1,c
  4714  00E26E  6A37               	clrf	displayLogs@markedDrawer1+1,c
  4715                           
  4716                           ;standbyMode.c: 408: unsigned int markedDrawer2 = readEEPROM(8+n);
  4717  00E270  503E               	movf	displayLogs@n,w,c
  4718  00E272  0F08               	addlw	8
  4719  00E274  EC80  F069         	call	_readEEPROM
  4720  00E278  6E27               	movwf	??_displayLogs& (0+255),c
  4721  00E27A  5027               	movf	??_displayLogs,w,c
  4722  00E27C  6E38               	movwf	displayLogs@markedDrawer2,c
  4723  00E27E  6A39               	clrf	displayLogs@markedDrawer2+1,c
  4724                           
  4725                           ;standbyMode.c: 409: unsigned int markedDrawer3 = readEEPROM(9+n);
  4726  00E280  503E               	movf	displayLogs@n,w,c
  4727  00E282  0F09               	addlw	9
  4728  00E284  EC80  F069         	call	_readEEPROM
  4729  00E288  6E27               	movwf	??_displayLogs& (0+255),c
  4730  00E28A  5027               	movf	??_displayLogs,w,c
  4731  00E28C  6E3A               	movwf	displayLogs@markedDrawer3,c
  4732  00E28E  6A3B               	clrf	displayLogs@markedDrawer3+1,c
  4733                           
  4734                           ;standbyMode.c: 410: unsigned int markedDrawer4 = readEEPROM(10+n);
  4735  00E290  503E               	movf	displayLogs@n,w,c
  4736  00E292  0F0A               	addlw	10
  4737  00E294  EC80  F069         	call	_readEEPROM
  4738  00E298  6E27               	movwf	??_displayLogs& (0+255),c
  4739  00E29A  5027               	movf	??_displayLogs,w,c
  4740  00E29C  6E3C               	movwf	displayLogs@markedDrawer4,c
  4741  00E29E  6A3D               	clrf	displayLogs@markedDrawer4+1,c
  4742                           
  4743                           ;standbyMode.c: 412: unsigned int minutes = operationTime/60;
  4744  00E2A0  C030  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  4745  00E2A4  C031  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  4746  00E2A8  0E00               	movlw	0
  4747  00E2AA  6E04               	movwf	___lwdiv@divisor+1,c
  4748  00E2AC  0E3C               	movlw	60
  4749  00E2AE  6E03               	movwf	___lwdiv@divisor,c
  4750  00E2B0  EC47  F06A         	call	___lwdiv	;wreg free
  4751  00E2B4  C001  F032         	movff	?___lwdiv,displayLogs@minutes
  4752  00E2B8  C002  F033         	movff	?___lwdiv+1,displayLogs@minutes+1
  4753                           
  4754                           ;standbyMode.c: 413: unsigned int seconds = operationTime%60;
  4755  00E2BC  C030  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  4756  00E2C0  C031  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  4757  00E2C4  0E00               	movlw	0
  4758  00E2C6  6E0B               	movwf	___lwmod@divisor+1,c
  4759  00E2C8  0E3C               	movlw	60
  4760  00E2CA  6E0A               	movwf	___lwmod@divisor,c
  4761  00E2CC  EC00  F06A         	call	___lwmod	;wreg free
  4762  00E2D0  C008  F034         	movff	?___lwmod,displayLogs@seconds
  4763  00E2D4  C009  F035         	movff	?___lwmod+1,displayLogs@seconds+1
  4764                           
  4765                           ;standbyMode.c: 414: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4766  00E2D8  0E01               	movlw	1
  4767  00E2DA  EC6C  F069         	call	_lcdInst
  4768  00E2DE  0EC3               	movlw	195
  4769  00E2E0  6E27               	movwf	??_displayLogs& (0+255),c
  4770  00E2E2  0ECD               	movlw	205
  4771  00E2E4                     u6907:
  4772  00E2E4  2EE8               	decfsz	wreg,f,c
  4773  00E2E6  D7FE               	bra	u6907
  4774  00E2E8  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4775  00E2EA  D7FC               	bra	u6907
  4776  00E2EC  F000               	nop	
  4777                           
  4778                           ;standbyMode.c: 415: printf("Operation time:");
  4779  00E2EE  0E1F               	movlw	low STR_14
  4780  00E2F0  6E0D               	movwf	printf@f,c
  4781  00E2F2  0EFE               	movlw	high STR_14
  4782  00E2F4  6E0E               	movwf	printf@f+1,c
  4783  00E2F6  EC7A  F06F         	call	_printf	;wreg free
  4784                           
  4785                           ;standbyMode.c: 416: lcdInst(0xC0);;
  4786  00E2FA  0EC0               	movlw	192
  4787  00E2FC  EC6C  F069         	call	_lcdInst
  4788                           
  4789                           ;standbyMode.c: 417: if (seconds == 0){
  4790  00E300  5034               	movf	displayLogs@seconds,w,c
  4791  00E302  1035               	iorwf	displayLogs@seconds+1,w,c
  4792  00E304  A4D8               	btfss	status,2,c
  4793  00E306  D01A               	goto	l265
  4794                           
  4795                           ;standbyMode.c: 418: printf("%i:%i0", minutes, seconds);
  4796  00E308  0EF2               	movlw	low STR_15
  4797  00E30A  6E0D               	movwf	printf@f,c
  4798  00E30C  0EFF               	movlw	high STR_15
  4799  00E30E  6E0E               	movwf	printf@f+1,c
  4800  00E310  C032  F00F         	movff	displayLogs@minutes,?_printf+2
  4801  00E314  C033  F010         	movff	displayLogs@minutes+1,?_printf+3
  4802  00E318  C034  F011         	movff	displayLogs@seconds,?_printf+4
  4803  00E31C  C035  F012         	movff	displayLogs@seconds+1,?_printf+5
  4804  00E320  EC7A  F06F         	call	_printf	;wreg free
  4805                           
  4806                           ;standbyMode.c: 419: _delay((unsigned long)((500)*(40000000/4000.0)));
  4807  00E324  0E1A               	movlw	26
  4808  00E326  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4809  00E328  0E5E               	movlw	94
  4810  00E32A  6E27               	movwf	??_displayLogs& (0+255),c
  4811  00E32C  0E6E               	movlw	110
  4812  00E32E                     u6917:
  4813  00E32E  2EE8               	decfsz	wreg,f,c
  4814  00E330  D7FE               	bra	u6917
  4815  00E332  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4816  00E334  D7FC               	bra	u6917
  4817  00E336  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4818  00E338  D7FA               	bra	u6917
  4819  00E33A  D019               	goto	L16
  4820  00E33C                     l265:
  4821                           
  4822                           ;standbyMode.c: 421: else{
  4823                           ;standbyMode.c: 422: printf("%i:%i", minutes, seconds);
  4824  00E33C  0EF9               	movlw	low STR_16
  4825  00E33E  6E0D               	movwf	printf@f,c
  4826  00E340  0EFF               	movlw	high STR_16
  4827  00E342  6E0E               	movwf	printf@f+1,c
  4828  00E344  C032  F00F         	movff	displayLogs@minutes,?_printf+2
  4829  00E348  C033  F010         	movff	displayLogs@minutes+1,?_printf+3
  4830  00E34C  C034  F011         	movff	displayLogs@seconds,?_printf+4
  4831  00E350  C035  F012         	movff	displayLogs@seconds+1,?_printf+5
  4832  00E354  EC7A  F06F         	call	_printf	;wreg free
  4833                           
  4834                           ;standbyMode.c: 423: _delay((unsigned long)((500)*(40000000/4000.0)));
  4835  00E358  0E1A               	movlw	26
  4836  00E35A  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4837  00E35C  0E5E               	movlw	94
  4838  00E35E  6E27               	movwf	??_displayLogs& (0+255),c
  4839  00E360  0E6E               	movlw	110
  4840  00E362                     u6927:
  4841  00E362  2EE8               	decfsz	wreg,f,c
  4842  00E364  D7FE               	bra	u6927
  4843  00E366  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4844  00E368  D7FC               	bra	u6927
  4845  00E36A  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4846  00E36C  D7FA               	bra	u6927
  4847  00E36E                     L16:
  4848  00E36E  D000               	nop2	
  4849  00E370                     
  4850                           ;standbyMode.c: 427: continue;
  4851                           
  4852                           ;standbyMode.c: 424: }
  4853                           ;standbyMode.c: 426: while(PORTBbits.RB1 == 0){
  4854  00E370  A281               	btfss	3969,1,c	;volatile
  4855  00E372  D7FE               	goto	l266
  4856                           
  4857                           ;standbyMode.c: 428: }
  4858                           ;standbyMode.c: 430: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4859  00E374  0E01               	movlw	1
  4860  00E376  EC6C  F069         	call	_lcdInst
  4861  00E37A  0EC3               	movlw	195
  4862  00E37C  6E27               	movwf	??_displayLogs& (0+255),c
  4863  00E37E  0ECD               	movlw	205
  4864  00E380                     u6937:
  4865  00E380  2EE8               	decfsz	wreg,f,c
  4866  00E382  D7FE               	bra	u6937
  4867  00E384  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4868  00E386  D7FC               	bra	u6937
  4869  00E388  F000               	nop	
  4870                           
  4871                           ;standbyMode.c: 431: printf("Marked drawers:");
  4872  00E38A  0E2F               	movlw	low STR_17
  4873  00E38C  6E0D               	movwf	printf@f,c
  4874  00E38E  0EFE               	movlw	high STR_17
  4875  00E390  6E0E               	movwf	printf@f+1,c
  4876  00E392  EC7A  F06F         	call	_printf	;wreg free
  4877                           
  4878                           ;standbyMode.c: 432: lcdInst(0xC0);;
  4879  00E396  0EC0               	movlw	192
  4880  00E398  EC6C  F069         	call	_lcdInst
  4881                           
  4882                           ;standbyMode.c: 434: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  4883  00E39C  503C               	movf	displayLogs@markedDrawer4,w,c
  4884  00E39E  103D               	iorwf	displayLogs@markedDrawer4+1,w,c
  4885  00E3A0  A4D8               	btfss	status,2,c
  4886  00E3A2  D01E               	goto	l270
  4887  00E3A4  503A               	movf	displayLogs@markedDrawer3,w,c
  4888  00E3A6  103B               	iorwf	displayLogs@markedDrawer3+1,w,c
  4889  00E3A8  A4D8               	btfss	status,2,c
  4890  00E3AA  D01A               	goto	l270
  4891  00E3AC  5038               	movf	displayLogs@markedDrawer2,w,c
  4892  00E3AE  1039               	iorwf	displayLogs@markedDrawer2+1,w,c
  4893  00E3B0  A4D8               	btfss	status,2,c
  4894  00E3B2  D016               	goto	l270
  4895                           
  4896                           ;standbyMode.c: 435: printf("%i", markedDrawer1);
  4897  00E3B4  0ED6               	movlw	low (STR_21+12)
  4898  00E3B6  6E0D               	movwf	printf@f,c
  4899  00E3B8  0EFE               	movlw	high (STR_21+12)
  4900  00E3BA  6E0E               	movwf	printf@f+1,c
  4901  00E3BC  C036  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4902  00E3C0  C037  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4903  00E3C4  EC7A  F06F         	call	_printf	;wreg free
  4904                           
  4905                           ;standbyMode.c: 436: _delay((unsigned long)((500)*(40000000/4000.0)));
  4906  00E3C8  0E1A               	movlw	26
  4907  00E3CA  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4908  00E3CC  0E5E               	movlw	94
  4909  00E3CE  6E27               	movwf	??_displayLogs& (0+255),c
  4910  00E3D0  0E6E               	movlw	110
  4911  00E3D2                     u6947:
  4912  00E3D2  2EE8               	decfsz	wreg,f,c
  4913  00E3D4  D7FE               	bra	u6947
  4914  00E3D6  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4915  00E3D8  D7FC               	bra	u6947
  4916  00E3DA  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4917  00E3DC  D7FA               	bra	u6947
  4918  00E3DE  D065               	goto	L19
  4919  00E3E0                     l270:
  4920                           
  4921                           ;standbyMode.c: 439: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  4922  00E3E0  503C               	movf	displayLogs@markedDrawer4,w,c
  4923  00E3E2  103D               	iorwf	displayLogs@markedDrawer4+1,w,c
  4924  00E3E4  A4D8               	btfss	status,2,c
  4925  00E3E6  D01E               	goto	l272
  4926  00E3E8  503A               	movf	displayLogs@markedDrawer3,w,c
  4927  00E3EA  103B               	iorwf	displayLogs@markedDrawer3+1,w,c
  4928  00E3EC  A4D8               	btfss	status,2,c
  4929  00E3EE  D01A               	goto	l272
  4930                           
  4931                           ;standbyMode.c: 440: printf("%i, %i", markedDrawer1, markedDrawer2);
  4932  00E3F0  0ED2               	movlw	low (STR_21+8)
  4933  00E3F2  6E0D               	movwf	printf@f,c
  4934  00E3F4  0EFE               	movlw	high (STR_21+8)
  4935  00E3F6  6E0E               	movwf	printf@f+1,c
  4936  00E3F8  C036  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4937  00E3FC  C037  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4938  00E400  C038  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4939  00E404  C039  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4940  00E408  EC7A  F06F         	call	_printf	;wreg free
  4941                           
  4942                           ;standbyMode.c: 441: _delay((unsigned long)((500)*(40000000/4000.0)));
  4943  00E40C  0E1A               	movlw	26
  4944  00E40E  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4945  00E410  0E5E               	movlw	94
  4946  00E412  6E27               	movwf	??_displayLogs& (0+255),c
  4947  00E414  0E6E               	movlw	110
  4948  00E416                     u6957:
  4949  00E416  2EE8               	decfsz	wreg,f,c
  4950  00E418  D7FE               	bra	u6957
  4951  00E41A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4952  00E41C  D7FC               	bra	u6957
  4953  00E41E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4954  00E420  D7FA               	bra	u6957
  4955  00E422  D043               	goto	L19
  4956  00E424                     l272:
  4957                           
  4958                           ;standbyMode.c: 444: else if (markedDrawer4 == 0){
  4959  00E424  503C               	movf	displayLogs@markedDrawer4,w,c
  4960  00E426  103D               	iorwf	displayLogs@markedDrawer4+1,w,c
  4961  00E428  A4D8               	btfss	status,2,c
  4962  00E42A  D01E               	goto	l274
  4963                           
  4964                           ;standbyMode.c: 445: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  4965  00E42C  0ECE               	movlw	low (STR_21+4)
  4966  00E42E  6E0D               	movwf	printf@f,c
  4967  00E430  0EFE               	movlw	high (STR_21+4)
  4968  00E432  6E0E               	movwf	printf@f+1,c
  4969  00E434  C036  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4970  00E438  C037  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4971  00E43C  C038  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4972  00E440  C039  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4973  00E444  C03A  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4974  00E448  C03B  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4975  00E44C  EC7A  F06F         	call	_printf	;wreg free
  4976                           
  4977                           ;standbyMode.c: 446: _delay((unsigned long)((500)*(40000000/4000.0)));
  4978  00E450  0E1A               	movlw	26
  4979  00E452  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4980  00E454  0E5E               	movlw	94
  4981  00E456  6E27               	movwf	??_displayLogs& (0+255),c
  4982  00E458  0E6E               	movlw	110
  4983  00E45A                     u6967:
  4984  00E45A  2EE8               	decfsz	wreg,f,c
  4985  00E45C  D7FE               	bra	u6967
  4986  00E45E  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4987  00E460  D7FC               	bra	u6967
  4988  00E462  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4989  00E464  D7FA               	bra	u6967
  4990  00E466  D021               	goto	L19
  4991  00E468                     l274:
  4992                           
  4993                           ;standbyMode.c: 449: else {
  4994                           ;standbyMode.c: 450: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  4995  00E468  0ECA               	movlw	low STR_21
  4996  00E46A  6E0D               	movwf	printf@f,c
  4997  00E46C  0EFE               	movlw	high STR_21
  4998  00E46E  6E0E               	movwf	printf@f+1,c
  4999  00E470  C036  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  5000  00E474  C037  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  5001  00E478  C038  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  5002  00E47C  C039  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  5003  00E480  C03A  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  5004  00E484  C03B  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  5005  00E488  C03C  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  5006  00E48C  C03D  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  5007  00E490  EC7A  F06F         	call	_printf	;wreg free
  5008                           
  5009                           ;standbyMode.c: 451: _delay((unsigned long)((500)*(40000000/4000.0)));
  5010  00E494  0E1A               	movlw	26
  5011  00E496  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5012  00E498  0E5E               	movlw	94
  5013  00E49A  6E27               	movwf	??_displayLogs& (0+255),c
  5014  00E49C  0E6E               	movlw	110
  5015  00E49E                     u6977:
  5016  00E49E  2EE8               	decfsz	wreg,f,c
  5017  00E4A0  D7FE               	bra	u6977
  5018  00E4A2  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5019  00E4A4  D7FC               	bra	u6977
  5020  00E4A6  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5021  00E4A8  D7FA               	bra	u6977
  5022  00E4AA                     L19:
  5023  00E4AA  D000               	nop2	
  5024  00E4AC                     
  5025                           ;standbyMode.c: 455: continue;
  5026                           
  5027                           ;standbyMode.c: 452: }
  5028                           ;standbyMode.c: 454: while(PORTBbits.RB1 == 0){
  5029  00E4AC  A281               	btfss	3969,1,c	;volatile
  5030  00E4AE  D7FE               	goto	l275
  5031                           
  5032                           ;standbyMode.c: 456: }
  5033                           ;standbyMode.c: 458: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5034  00E4B0  0E01               	movlw	1
  5035  00E4B2  EC6C  F069         	call	_lcdInst
  5036  00E4B6  0EC3               	movlw	195
  5037  00E4B8  6E27               	movwf	??_displayLogs& (0+255),c
  5038  00E4BA  0ECD               	movlw	205
  5039  00E4BC                     u6987:
  5040  00E4BC  2EE8               	decfsz	wreg,f,c
  5041  00E4BE  D7FE               	bra	u6987
  5042  00E4C0  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5043  00E4C2  D7FC               	bra	u6987
  5044  00E4C4  F000               	nop	
  5045                           
  5046                           ;standbyMode.c: 459: printf("Remaining pieces:");
  5047  00E4C6  0E66               	movlw	low STR_22
  5048  00E4C8  6E0D               	movwf	printf@f,c
  5049  00E4CA  0EFD               	movlw	high STR_22
  5050  00E4CC  6E0E               	movwf	printf@f+1,c
  5051  00E4CE  EC7A  F06F         	call	_printf	;wreg free
  5052                           
  5053                           ;standbyMode.c: 460: lcdInst(0xC0);;
  5054  00E4D2  0EC0               	movlw	192
  5055  00E4D4  EC6C  F069         	call	_lcdInst
  5056                           
  5057                           ;standbyMode.c: 461: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  5058  00E4D8  0EBC               	movlw	low STR_23
  5059  00E4DA  6E0D               	movwf	printf@f,c
  5060  00E4DC  0EFD               	movlw	high STR_23
  5061  00E4DE  6E0E               	movwf	printf@f+1,c
  5062  00E4E0  C029  F00F         	movff	displayLogs@roundPieces,?_printf+2
  5063  00E4E4  C02A  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  5064  00E4E8  C02B  F011         	movff	displayLogs@flatPieces,?_printf+4
  5065  00E4EC  C02C  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  5066  00E4F0  C02D  F013         	movff	displayLogs@longPieces,?_printf+6
  5067  00E4F4  C02E  F014         	movff	displayLogs@longPieces+1,?_printf+7
  5068  00E4F8  EC7A  F06F         	call	_printf	;wreg free
  5069                           
  5070                           ;standbyMode.c: 462: _delay((unsigned long)((500)*(40000000/4000.0)));
  5071  00E4FC  0E1A               	movlw	26
  5072  00E4FE  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5073  00E500  0E5E               	movlw	94
  5074  00E502  6E27               	movwf	??_displayLogs& (0+255),c
  5075  00E504  0E6E               	movlw	110
  5076  00E506                     u6997:
  5077  00E506  2EE8               	decfsz	wreg,f,c
  5078  00E508  D7FE               	bra	u6997
  5079  00E50A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5080  00E50C  D7FC               	bra	u6997
  5081  00E50E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5082  00E510  D7FA               	bra	u6997
  5083  00E512  D000               	nop2	
  5084  00E514                     
  5085                           ;standbyMode.c: 465: continue;
  5086  00E514  A281               	btfss	3969,1,c	;volatile
  5087  00E516  D7FE               	goto	l280
  5088                           
  5089                           ;standbyMode.c: 466: }
  5090                           ;standbyMode.c: 468: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5091  00E518  0E01               	movlw	1
  5092  00E51A  EC6C  F069         	call	_lcdInst
  5093  00E51E  0EC3               	movlw	195
  5094  00E520  6E27               	movwf	??_displayLogs& (0+255),c
  5095  00E522  0ECD               	movlw	205
  5096  00E524                     u7007:
  5097  00E524  2EE8               	decfsz	wreg,f,c
  5098  00E526  D7FE               	bra	u7007
  5099  00E528  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5100  00E52A  D7FC               	bra	u7007
  5101  00E52C  F000               	nop	
  5102                           
  5103                           ;standbyMode.c: 469: printf("Input Summary:");
  5104  00E52E  0EAC               	movlw	low STR_24
  5105  00E530  6E0D               	movwf	printf@f,c
  5106  00E532  0EFE               	movlw	high STR_24
  5107  00E534  6E0E               	movwf	printf@f+1,c
  5108  00E536  EC7A  F06F         	call	_printf	;wreg free
  5109                           
  5110                           ;standbyMode.c: 470: _delay((unsigned long)((500)*(40000000/4000.0)));
  5111  00E53A  0E1A               	movlw	26
  5112  00E53C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5113  00E53E  0E5E               	movlw	94
  5114  00E540  6E27               	movwf	??_displayLogs& (0+255),c
  5115  00E542  0E6E               	movlw	110
  5116  00E544                     u7017:
  5117  00E544  2EE8               	decfsz	wreg,f,c
  5118  00E546  D7FE               	bra	u7017
  5119  00E548  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5120  00E54A  D7FC               	bra	u7017
  5121  00E54C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5122  00E54E  D7FA               	bra	u7017
  5123  00E550  D000               	nop2	
  5124  00E552                     
  5125                           ;standbyMode.c: 473: continue;
  5126  00E552  A281               	btfss	3969,1,c	;volatile
  5127  00E554  D7FE               	goto	l283
  5128                           
  5129                           ;standbyMode.c: 474: }
  5130                           ;standbyMode.c: 476: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5131  00E556  0E01               	movlw	1
  5132  00E558  EC6C  F069         	call	_lcdInst
  5133  00E55C  0EC3               	movlw	195
  5134  00E55E  6E27               	movwf	??_displayLogs& (0+255),c
  5135  00E560  0ECD               	movlw	205
  5136  00E562                     u7027:
  5137  00E562  2EE8               	decfsz	wreg,f,c
  5138  00E564  D7FE               	bra	u7027
  5139  00E566  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5140  00E568  D7FC               	bra	u7027
  5141  00E56A  F000               	nop	
  5142                           
  5143                           ;standbyMode.c: 477: printf("Drawer 1: RF12");
  5144  00E56C  0E8E               	movlw	low STR_25
  5145  00E56E  6E0D               	movwf	printf@f,c
  5146  00E570  0EFE               	movlw	high STR_25
  5147  00E572  6E0E               	movwf	printf@f+1,c
  5148  00E574  EC7A  F06F         	call	_printf	;wreg free
  5149                           
  5150                           ;standbyMode.c: 478: lcdInst(0xC0);;
  5151  00E578  0EC0               	movlw	192
  5152  00E57A  EC6C  F069         	call	_lcdInst
  5153                           
  5154                           ;standbyMode.c: 479: printf("Drawer 2: L1");
  5155  00E57E  0E4B               	movlw	low STR_26
  5156  00E580  6E0D               	movwf	printf@f,c
  5157  00E582  0EFF               	movlw	high STR_26
  5158  00E584  6E0E               	movwf	printf@f+1,c
  5159  00E586  EC7A  F06F         	call	_printf	;wreg free
  5160                           
  5161                           ;standbyMode.c: 480: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5162  00E58A  0E66               	movlw	102
  5163  00E58C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5164  00E58E  0E76               	movlw	118
  5165  00E590  6E27               	movwf	??_displayLogs& (0+255),c
  5166  00E592  0EC1               	movlw	193
  5167  00E594                     u7037:
  5168  00E594  2EE8               	decfsz	wreg,f,c
  5169  00E596  D7FE               	bra	u7037
  5170  00E598  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5171  00E59A  D7FC               	bra	u7037
  5172  00E59C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5173  00E59E  D7FA               	bra	u7037
  5174  00E5A0  F000               	nop	
  5175                           
  5176                           ;standbyMode.c: 482: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5177  00E5A2  0E01               	movlw	1
  5178  00E5A4  EC6C  F069         	call	_lcdInst
  5179  00E5A8  0EC3               	movlw	195
  5180  00E5AA  6E27               	movwf	??_displayLogs& (0+255),c
  5181  00E5AC  0ECD               	movlw	205
  5182  00E5AE                     u7047:
  5183  00E5AE  2EE8               	decfsz	wreg,f,c
  5184  00E5B0  D7FE               	bra	u7047
  5185  00E5B2  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5186  00E5B4  D7FC               	bra	u7047
  5187  00E5B6  F000               	nop	
  5188                           
  5189                           ;standbyMode.c: 483: printf("Another log?");
  5190  00E5B8  0E65               	movlw	low STR_27
  5191  00E5BA  6E0D               	movwf	printf@f,c
  5192  00E5BC  0EFF               	movlw	high STR_27
  5193  00E5BE  6E0E               	movwf	printf@f+1,c
  5194  00E5C0  EC7A  F06F         	call	_printf	;wreg free
  5195                           
  5196                           ;standbyMode.c: 484: lcdInst(0xC0);;
  5197  00E5C4  0EC0               	movlw	192
  5198  00E5C6  EC6C  F069         	call	_lcdInst
  5199                           
  5200                           ;standbyMode.c: 485: printf("# = No, D = Yes");
  5201  00E5CA  0E6F               	movlw	low STR_28
  5202  00E5CC  6E0D               	movwf	printf@f,c
  5203  00E5CE  0EFE               	movlw	high STR_28
  5204  00E5D0  6E0E               	movwf	printf@f+1,c
  5205  00E5D2  EC7A  F06F         	call	_printf	;wreg free
  5206  00E5D6  A281               	btfss	3969,1,c	;volatile
  5207  00E5D8  D7FE               	goto	l286
  5208                           
  5209                           ;standbyMode.c: 488: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  5210  00E5DA  3881               	swapf	3969,w,c	;volatile
  5211  00E5DC  0B0F               	andlw	15
  5212  00E5DE  0B0F               	andlw	15
  5213  00E5E0  6E2F               	movwf	displayLogs@keypress3,c
  5214  00E5E2  B281               	btfsc	3969,1,c	;volatile
  5215  00E5E4  D7FE               	goto	l289
  5216                           
  5217                           ;standbyMode.c: 490: return keypress3;
  5218  00E5E6  C02F  F025         	movff	displayLogs@keypress3,?_displayLogs
  5219  00E5EA  6A26               	clrf	?_displayLogs+1,c
  5220  00E5EC  0012               	return		;funcret
  5221  00E5EE                     __end_of_displayLogs:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _readEEPROM *****************
  5240 ;; Defined at:
  5241 ;;		line 29 in file "EEPROMstorage.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  address         1    wreg     unsigned char 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  address         1    0[COMRAM] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      unsigned char 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        1 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; This function calls:
  5262 ;;		Nothing
  5263 ;; This function is called by:
  5264 ;;		_viewLogs
  5265 ;;		_displayLogs
  5266 ;;		_standbyMode
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text8
  5271  00D300                     __ptext8:
  5272                           	opt stack 0
  5273  00D300                     _readEEPROM:
  5274                           	opt stack 28
  5275                           
  5276                           ;incstack = 0
  5277                           ;readEEPROM@address stored from wreg
  5278  00D300  6E01               	movwf	readEEPROM@address,c
  5279  00D302                     
  5280                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  5281  00D302  B2A6               	btfsc	4006,1,c	;volsfr
  5282  00D304  D7FE               	goto	l1401
  5283                           
  5284                           ;EEPROMstorage.c: 32: EEADR = address;
  5285  00D306  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  5286                           
  5287                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  5288  00D30A  9EA6               	bcf	4006,7,c	;volsfr
  5289                           
  5290                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  5291  00D30C  9CA6               	bcf	4006,6,c	;volsfr
  5292                           
  5293                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  5294  00D30E  80A6               	bsf	4006,0,c	;volsfr
  5295                           
  5296                           ;EEPROMstorage.c: 36: return( EEDATA );
  5297  00D310  50A8               	movf	4008,w,c	;volatile
  5298  00D312  0012               	return	
  5299  00D314                     __end_of_readEEPROM:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _food_press *****************
  5318 ;; Defined at:
  5319 ;;		line 600 in file "standbyMode.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  dietSum         2   36[COMRAM] unsigned int 
  5322 ;;  drawer          2   38[COMRAM] unsigned int 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  keypress        1   58[COMRAM] unsigned char 
  5325 ;;  foodTable       8   50[COMRAM] unsigned int [4]
  5326 ;;  count           2   48[COMRAM] unsigned int 
  5327 ;;  isValid         2   46[COMRAM] unsigned int 
  5328 ;;  backCheck       2   44[COMRAM] unsigned int 
  5329 ;;  tally           2   42[COMRAM] unsigned int 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2   36[COMRAM] unsigned int 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;Total ram usage:       23 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    3
  5346 ;; This function calls:
  5347 ;;		_check_food
  5348 ;;		_get_digits
  5349 ;;		_lcdInst
  5350 ;;		_printf
  5351 ;;		_putch
  5352 ;; This function is called by:
  5353 ;;		_standbyMode
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text9
  5358  00D82E                     __ptext9:
  5359                           	opt stack 0
  5360  00D82E                     _food_press:
  5361                           	opt stack 26
  5362                           
  5363                           ;incstack = 0
  5364                           ;standbyMode.c: 602: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5365  00D82E  0E01               	movlw	1
  5366  00D830  EC6C  F069         	call	_lcdInst
  5367  00D834  0EC3               	movlw	195
  5368  00D836  6E29               	movwf	??_food_press& (0+255),c
  5369  00D838  0ECD               	movlw	205
  5370  00D83A                     u7057:
  5371  00D83A  2EE8               	decfsz	wreg,f,c
  5372  00D83C  D7FE               	bra	u7057
  5373  00D83E  2E29               	decfsz	??_food_press& (0+255),f,c
  5374  00D840  D7FC               	bra	u7057
  5375  00D842  F000               	nop	
  5376                           
  5377                           ;standbyMode.c: 603: printf("Drawer %i food:", drawer);
  5378  00D844  0E0F               	movlw	low STR_29
  5379  00D846  6E0D               	movwf	printf@f,c
  5380  00D848  0EFE               	movlw	high STR_29
  5381  00D84A  6E0E               	movwf	printf@f+1,c
  5382  00D84C  C027  F00F         	movff	food_press@drawer,?_printf+2
  5383  00D850  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5384  00D854  EC7A  F06F         	call	_printf	;wreg free
  5385                           
  5386                           ;standbyMode.c: 604: lcdInst(0xC0);;
  5387  00D858  0EC0               	movlw	192
  5388  00D85A  EC6C  F069         	call	_lcdInst
  5389                           
  5390                           ;standbyMode.c: 606: unsigned int tally = 0;
  5391  00D85E  0E00               	movlw	0
  5392  00D860  6E2C               	movwf	food_press@tally+1,c
  5393  00D862  0E00               	movlw	0
  5394  00D864  6E2B               	movwf	food_press@tally,c
  5395                           
  5396                           ;standbyMode.c: 607: unsigned int count = 0;
  5397  00D866  0E00               	movlw	0
  5398  00D868  6E32               	movwf	food_press@count+1,c
  5399  00D86A  0E00               	movlw	0
  5400  00D86C  6E31               	movwf	food_press@count,c
  5401                           
  5402                           ;standbyMode.c: 608: unsigned int foodTable[4] = {0, 0, 0, 0};
  5403  00D86E  EE20  F088         	lfsr	2,food_press@F3097
  5404  00D872  EE10  F033         	lfsr	1,food_press@foodTable
  5405  00D876  0E07               	movlw	7
  5406  00D878                     u4741:
  5407  00D878  CFDB FFE3          	movff	plusw2,plusw1
  5408  00D87C  06E8               	decf	wreg,f,c
  5409  00D87E  E2FC               	bc	u4741
  5410                           
  5411                           ;standbyMode.c: 609: unsigned int isValid = 0;
  5412  00D880  0E00               	movlw	0
  5413  00D882  6E30               	movwf	food_press@isValid+1,c
  5414  00D884  0E00               	movlw	0
  5415  00D886  6E2F               	movwf	food_press@isValid,c
  5416                           
  5417                           ;standbyMode.c: 610: unsigned int backCheck = 0;
  5418  00D888  0E00               	movlw	0
  5419  00D88A  6E2E               	movwf	food_press@backCheck+1,c
  5420  00D88C  0E00               	movlw	0
  5421  00D88E  6E2D               	movwf	food_press@backCheck,c
  5422                           
  5423                           ;standbyMode.c: 611: tally = get_digits(dietSum);
  5424  00D890  C025  F001         	movff	food_press@dietSum,get_digits@sum
  5425  00D894  C026  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  5426  00D898  EC47  F06B         	call	_get_digits	;wreg free
  5427  00D89C  C001  F02B         	movff	?_get_digits,food_press@tally
  5428  00D8A0  C002  F02C         	movff	?_get_digits+1,food_press@tally+1
  5429  00D8A4                     
  5430                           ;standbyMode.c: 614: while(PORTBbits.RB1 == 0){ continue; }
  5431  00D8A4  A281               	btfss	3969,1,c	;volatile
  5432  00D8A6  D7FE               	goto	l321
  5433                           
  5434                           ;standbyMode.c: 615: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5435  00D8A8  3881               	swapf	3969,w,c	;volatile
  5436  00D8AA  0B0F               	andlw	15
  5437  00D8AC  0B0F               	andlw	15
  5438  00D8AE  6E3B               	movwf	food_press@keypress,c
  5439  00D8B0  B281               	btfsc	3969,1,c	;volatile
  5440  00D8B2  D7FE               	goto	l326
  5441                           
  5442                           ;standbyMode.c: 618: if(keypress == 15){
  5443  00D8B4  0E0F               	movlw	15
  5444  00D8B6  183B               	xorwf	food_press@keypress,w,c
  5445  00D8B8  B4D8               	btfsc	status,2,c
  5446  00D8BA  D06D               	goto	l329
  5447                           
  5448                           ;standbyMode.c: 621: else if (keypress == 14){
  5449                           
  5450                           ;standbyMode.c: 620: }
  5451                           
  5452                           ;standbyMode.c: 619: break;
  5453  00D8BC  0E0E               	movlw	14
  5454  00D8BE  183B               	xorwf	food_press@keypress,w,c
  5455  00D8C0  A4D8               	btfss	status,2,c
  5456  00D8C2  D005               	goto	l331
  5457                           
  5458                           ;standbyMode.c: 622: backCheck = 1;
  5459  00D8C4  0E00               	movlw	0
  5460  00D8C6  6E2E               	movwf	food_press@backCheck+1,c
  5461  00D8C8  0E01               	movlw	1
  5462  00D8CA  6E2D               	movwf	food_press@backCheck,c
  5463                           
  5464                           ;standbyMode.c: 623: break;
  5465  00D8CC  D064               	goto	l329
  5466  00D8CE                     l331:
  5467                           
  5468                           ;standbyMode.c: 625: else if (keypress == 0 || keypress == 1 || keypress == 2){
  5469  00D8CE  503B               	movf	food_press@keypress,w,c
  5470  00D8D0  B4D8               	btfsc	status,2,c
  5471  00D8D2  D007               	goto	u4810
  5472  00D8D4  043B               	decf	food_press@keypress,w,c
  5473  00D8D6  B4D8               	btfsc	status,2,c
  5474  00D8D8  D004               	goto	u4810
  5475  00D8DA  0E02               	movlw	2
  5476  00D8DC  183B               	xorwf	food_press@keypress,w,c
  5477  00D8DE  A4D8               	btfss	status,2,c
  5478  00D8E0  D029               	goto	l333
  5479  00D8E2                     u4810:
  5480                           
  5481                           ;standbyMode.c: 626: if (count < tally){
  5482  00D8E2  502B               	movf	food_press@tally,w,c
  5483  00D8E4  5C31               	subwf	food_press@count,w,c
  5484  00D8E6  502C               	movf	food_press@tally+1,w,c
  5485  00D8E8  5832               	subwfb	food_press@count+1,w,c
  5486  00D8EA  B0D8               	btfsc	status,0,c
  5487  00D8EC  D7DB               	goto	l321
  5488                           
  5489                           ;standbyMode.c: 627: putch(input[keypress]);
  5490  00D8EE  503B               	movf	food_press@keypress,w,c
  5491  00D8F0  0D01               	mullw	1
  5492  00D8F2  0E36               	movlw	low _input
  5493  00D8F4  24F3               	addwf	prodl,w,c
  5494  00D8F6  6EF6               	movwf	tblptrl,c
  5495  00D8F8  0EFD               	movlw	high _input
  5496  00D8FA  20F4               	addwfc	prodh,w,c
  5497  00D8FC  6EF7               	movwf	tblptrh,c
  5498  00D8FE                     	if	0	;There are less than 3 active tblptr bytes
  5499  00D8FE                     	endif
  5500  00D8FE  0008               	tblrd		*
  5501  00D900  50F5               	movf	tablat,w,c
  5502  00D902  EC76  F069         	call	_putch
  5503                           
  5504                           ;standbyMode.c: 628: foodTable[count] = keypress + 1;
  5505  00D906  503B               	movf	food_press@keypress,w,c
  5506  00D908  6E29               	movwf	??_food_press& (0+255),c
  5507  00D90A  6A2A               	clrf	(??_food_press+1)& (0+255),c
  5508  00D90C  0E01               	movlw	1
  5509  00D90E  2629               	addwf	??_food_press,f,c
  5510  00D910  0E00               	movlw	0
  5511  00D912  222A               	addwfc	??_food_press+1,f,c
  5512  00D914  90D8               	bcf	status,0,c
  5513  00D916  3431               	rlcf	food_press@count,w,c
  5514  00D918  6ED9               	movwf	fsr2l,c
  5515  00D91A  3432               	rlcf	food_press@count+1,w,c
  5516  00D91C  6EDA               	movwf	fsr2h,c
  5517  00D91E  0E33               	movlw	low food_press@foodTable
  5518  00D920  26D9               	addwf	fsr2l,f,c
  5519  00D922  0E00               	movlw	high food_press@foodTable
  5520  00D924  22DA               	addwfc	fsr2h,f,c
  5521  00D926  C029  FFDE         	movff	??_food_press,postinc2
  5522  00D92A  C02A  FFDD         	movff	??_food_press+1,postdec2
  5523                           
  5524                           ;standbyMode.c: 629: count += 1;
  5525  00D92E  4A31               	infsnz	food_press@count,f,c
  5526  00D930  2A32               	incf	food_press@count+1,f,c
  5527                           
  5528                           ;standbyMode.c: 630: }
  5529                           ;standbyMode.c: 631: }
  5530  00D932  D7B8               	goto	l321
  5531  00D934                     l333:
  5532                           
  5533                           ;standbyMode.c: 632: else if (keypress == 12){
  5534  00D934  0E0C               	movlw	12
  5535  00D936  183B               	xorwf	food_press@keypress,w,c
  5536  00D938  A4D8               	btfss	status,2,c
  5537  00D93A  D7B4               	goto	l321
  5538                           
  5539                           ;standbyMode.c: 633: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5540  00D93C  0E01               	movlw	1
  5541  00D93E  EC6C  F069         	call	_lcdInst
  5542  00D942  0EC3               	movlw	195
  5543  00D944  6E29               	movwf	??_food_press& (0+255),c
  5544  00D946  0ECD               	movlw	205
  5545  00D948                     u7067:
  5546  00D948  2EE8               	decfsz	wreg,f,c
  5547  00D94A  D7FE               	bra	u7067
  5548  00D94C  2E29               	decfsz	??_food_press& (0+255),f,c
  5549  00D94E  D7FC               	bra	u7067
  5550  00D950  F000               	nop	
  5551                           
  5552                           ;standbyMode.c: 634: printf("Drawer %i food:", drawer);
  5553  00D952  0E0F               	movlw	low STR_29
  5554  00D954  6E0D               	movwf	printf@f,c
  5555  00D956  0EFE               	movlw	high STR_29
  5556  00D958  6E0E               	movwf	printf@f+1,c
  5557  00D95A  C027  F00F         	movff	food_press@drawer,?_printf+2
  5558  00D95E  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5559  00D962  EC7A  F06F         	call	_printf	;wreg free
  5560                           
  5561                           ;standbyMode.c: 635: lcdInst(0xC0);;
  5562  00D966  0EC0               	movlw	192
  5563  00D968  EC6C  F069         	call	_lcdInst
  5564                           
  5565                           ;standbyMode.c: 636: count = 0;
  5566  00D96C  0E00               	movlw	0
  5567  00D96E  6E32               	movwf	food_press@count+1,c
  5568  00D970  0E00               	movlw	0
  5569  00D972  6E31               	movwf	food_press@count,c
  5570                           
  5571                           ;standbyMode.c: 637: foodTable[0] = 0;
  5572  00D974  0E00               	movlw	0
  5573  00D976  6E34               	movwf	food_press@foodTable+1,c
  5574  00D978  0E00               	movlw	0
  5575  00D97A  6E33               	movwf	food_press@foodTable,c
  5576                           
  5577                           ;standbyMode.c: 638: foodTable[1] = 0;
  5578  00D97C  0E00               	movlw	0
  5579  00D97E  6E36               	movwf	food_press@foodTable+3,c
  5580  00D980  0E00               	movlw	0
  5581  00D982  6E35               	movwf	food_press@foodTable+2,c
  5582                           
  5583                           ;standbyMode.c: 639: foodTable[2] = 0;
  5584  00D984  0E00               	movlw	0
  5585  00D986  6E38               	movwf	food_press@foodTable+5,c
  5586  00D988  0E00               	movlw	0
  5587  00D98A  6E37               	movwf	food_press@foodTable+4,c
  5588                           
  5589                           ;standbyMode.c: 640: foodTable[3] = 0;
  5590  00D98C  0E00               	movlw	0
  5591  00D98E  6E3A               	movwf	food_press@foodTable+7,c
  5592  00D990  0E00               	movlw	0
  5593  00D992  6E39               	movwf	food_press@foodTable+6,c
  5594  00D994  D787               	goto	l321
  5595  00D996                     l329:
  5596                           
  5597                           ;standbyMode.c: 641: }
  5598                           ;standbyMode.c: 642: }
  5599                           ;standbyMode.c: 644: if (backCheck == 1){
  5600  00D996  042D               	decf	food_press@backCheck,w,c
  5601  00D998  102E               	iorwf	food_press@backCheck+1,w,c
  5602  00D99A  A4D8               	btfss	status,2,c
  5603  00D99C  D005               	goto	l340
  5604                           
  5605                           ;standbyMode.c: 645: return 100;
  5606  00D99E  0E00               	movlw	0
  5607  00D9A0  6E26               	movwf	?_food_press+1,c
  5608  00D9A2  0E64               	movlw	100
  5609  00D9A4  6E25               	movwf	?_food_press,c
  5610                           
  5611                           ;standbyMode.c: 646: }
  5612  00D9A6  0012               	return	
  5613  00D9A8                     l340:
  5614                           
  5615                           ;standbyMode.c: 647: else {
  5616                           ;standbyMode.c: 648: isValid = check_food(dietSum, foodTable);
  5617  00D9A8  C025  F001         	movff	food_press@dietSum,check_food@sum
  5618  00D9AC  C026  F002         	movff	food_press@dietSum+1,check_food@sum+1
  5619  00D9B0  0E33               	movlw	low food_press@foodTable
  5620  00D9B2  6E03               	movwf	check_food@foodInput,c
  5621  00D9B4  0E00               	movlw	high food_press@foodTable
  5622  00D9B6  6E04               	movwf	check_food@foodInput+1,c
  5623  00D9B8  EC8A  F075         	call	_check_food	;wreg free
  5624  00D9BC  C001  F02F         	movff	?_check_food,food_press@isValid
  5625  00D9C0  C002  F030         	movff	?_check_food+1,food_press@isValid+1
  5626                           
  5627                           ;standbyMode.c: 650: if (isValid == 0){
  5628  00D9C4  502F               	movf	food_press@isValid,w,c
  5629  00D9C6  1030               	iorwf	food_press@isValid+1,w,c
  5630  00D9C8  A4D8               	btfss	status,2,c
  5631  00D9CA  D026               	goto	l343
  5632                           
  5633                           ;standbyMode.c: 651: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5634  00D9CC  0E01               	movlw	1
  5635  00D9CE  EC6C  F069         	call	_lcdInst
  5636  00D9D2  0EC3               	movlw	195
  5637  00D9D4  6E29               	movwf	??_food_press& (0+255),c
  5638  00D9D6  0ECD               	movlw	205
  5639  00D9D8                     u7077:
  5640  00D9D8  2EE8               	decfsz	wreg,f,c
  5641  00D9DA  D7FE               	bra	u7077
  5642  00D9DC  2E29               	decfsz	??_food_press& (0+255),f,c
  5643  00D9DE  D7FC               	bra	u7077
  5644  00D9E0  F000               	nop	
  5645                           
  5646                           ;standbyMode.c: 652: printf("Invalid food!");
  5647  00D9E2  0E06               	movlw	low STR_31
  5648  00D9E4  6E0D               	movwf	printf@f,c
  5649  00D9E6  0EFF               	movlw	high STR_31
  5650  00D9E8  6E0E               	movwf	printf@f+1,c
  5651  00D9EA  EC7A  F06F         	call	_printf	;wreg free
  5652                           
  5653                           ;standbyMode.c: 653: lcdInst(0xC0);;
  5654  00D9EE  0EC0               	movlw	192
  5655  00D9F0  EC6C  F069         	call	_lcdInst
  5656                           
  5657                           ;standbyMode.c: 654: printf("Try again.");
  5658  00D9F4  0EA0               	movlw	low STR_32
  5659  00D9F6  6E0D               	movwf	printf@f,c
  5660  00D9F8  0EFF               	movlw	high STR_32
  5661  00D9FA  6E0E               	movwf	printf@f+1,c
  5662  00D9FC  EC7A  F06F         	call	_printf	;wreg free
  5663                           
  5664                           ;standbyMode.c: 655: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5665  00DA00  0E33               	movlw	51
  5666  00DA02  6E2A               	movwf	(??_food_press+1)& (0+255),c
  5667  00DA04  0EBB               	movlw	187
  5668  00DA06  6E29               	movwf	??_food_press& (0+255),c
  5669  00DA08  0EE0               	movlw	224
  5670  00DA0A                     u7087:
  5671  00DA0A  2EE8               	decfsz	wreg,f,c
  5672  00DA0C  D7FE               	bra	u7087
  5673  00DA0E  2E29               	decfsz	??_food_press& (0+255),f,c
  5674  00DA10  D7FC               	bra	u7087
  5675  00DA12  2E2A               	decfsz	(??_food_press+1)& (0+255),f,c
  5676  00DA14  D7FA               	bra	u7087
  5677                           
  5678                           ;standbyMode.c: 656: goto START;
  5679  00DA16  D70B               	goto	_food_press
  5680  00DA18                     l343:
  5681                           
  5682                           ;standbyMode.c: 658: else {
  5683                           ;standbyMode.c: 659: return isValid;
  5684  00DA18  C02F  F025         	movff	food_press@isValid,?_food_press
  5685  00DA1C  C030  F026         	movff	food_press@isValid+1,?_food_press+1
  5686  00DA20  0012               	return	
  5687  00DA22                     __end_of_food_press:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           plusw1	equ	0xFE3
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           plusw2	equ	0xFDB
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _get_digits *****************
  5708 ;; Defined at:
  5709 ;;		line 495 in file "standbyMode.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  sum             2    0[COMRAM] unsigned int 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  count           2    4[COMRAM] unsigned int 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  2    0[COMRAM] unsigned int 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;Total ram usage:        6 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; This function calls:
  5730 ;;		Nothing
  5731 ;; This function is called by:
  5732 ;;		_food_press
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text10
  5737  00D68E                     __ptext10:
  5738                           	opt stack 0
  5739  00D68E                     _get_digits:
  5740                           	opt stack 28
  5741                           
  5742                           ;standbyMode.c: 497: unsigned int count = 0;
  5743                           
  5744                           ;incstack = 0
  5745  00D68E  0E00               	movlw	0
  5746  00D690  6E06               	movwf	get_digits@count+1,c
  5747  00D692  0E00               	movlw	0
  5748  00D694  6E05               	movwf	get_digits@count,c
  5749                           
  5750                           ;standbyMode.c: 499: switch(sum){
  5751  00D696  D015               	goto	l294
  5752  00D698                     
  5753                           ;standbyMode.c: 512: count = 1;
  5754                           
  5755                           ;standbyMode.c: 511: case 12:
  5756                           
  5757                           ;standbyMode.c: 508: break;
  5758                           
  5759                           ;standbyMode.c: 507: count = 1;
  5760                           
  5761                           ;standbyMode.c: 506: case 7:
  5762                           
  5763                           ;standbyMode.c: 503: break;
  5764                           
  5765                           ;standbyMode.c: 502: count = 1;
  5766  00D698  0E00               	movlw	0
  5767  00D69A  6E06               	movwf	get_digits@count+1,c
  5768  00D69C  0E01               	movlw	1
  5769  00D69E                     L20:
  5770  00D69E  6E05               	movwf	get_digits@count,c
  5771                           
  5772                           ;standbyMode.c: 518: break;
  5773  00D6A0  D050               	goto	l296
  5774  00D6A2                     
  5775                           ;standbyMode.c: 527: count = 2;
  5776                           
  5777                           ;standbyMode.c: 526: case 19:
  5778                           
  5779                           ;standbyMode.c: 523: break;
  5780                           
  5781                           ;standbyMode.c: 522: count = 2;
  5782  00D6A2  0E00               	movlw	0
  5783  00D6A4  6E06               	movwf	get_digits@count+1,c
  5784  00D6A6  0E02               	movlw	2
  5785  00D6A8  D7FA               	goto	L20
  5786  00D6AA                     
  5787                           ;standbyMode.c: 562: count = 3;
  5788                           
  5789                           ;standbyMode.c: 561: case 31:
  5790                           
  5791                           ;standbyMode.c: 558: break;
  5792                           
  5793                           ;standbyMode.c: 557: count = 3;
  5794                           
  5795                           ;standbyMode.c: 556: case 26:
  5796                           
  5797                           ;standbyMode.c: 553: break;
  5798                           
  5799                           ;standbyMode.c: 552: count = 3;
  5800                           
  5801                           ;standbyMode.c: 551: case 22:
  5802                           
  5803                           ;standbyMode.c: 548: break;
  5804                           
  5805                           ;standbyMode.c: 547: count = 3;
  5806                           
  5807                           ;standbyMode.c: 546: case 27:
  5808                           
  5809                           ;standbyMode.c: 543: break;
  5810                           
  5811                           ;standbyMode.c: 542: count = 3;
  5812                           
  5813                           ;standbyMode.c: 541: case 17:
  5814                           
  5815                           ;standbyMode.c: 538: break;
  5816                           
  5817                           ;standbyMode.c: 537: count = 3;
  5818                           
  5819                           ;standbyMode.c: 536: case 18:
  5820                           
  5821                           ;standbyMode.c: 533: break;
  5822                           
  5823                           ;standbyMode.c: 532: count = 3;
  5824  00D6AA  0E00               	movlw	0
  5825  00D6AC  6E06               	movwf	get_digits@count+1,c
  5826  00D6AE  0E03               	movlw	3
  5827  00D6B0  D7F6               	goto	L20
  5828  00D6B2                     
  5829                           ;standbyMode.c: 587: count = 4;
  5830                           
  5831                           ;standbyMode.c: 586: case 43:
  5832                           
  5833                           ;standbyMode.c: 583: break;
  5834                           
  5835                           ;standbyMode.c: 582: count = 4;
  5836                           
  5837                           ;standbyMode.c: 581: case 39:
  5838                           
  5839                           ;standbyMode.c: 578: break;
  5840                           
  5841                           ;standbyMode.c: 577: count = 4;
  5842                           
  5843                           ;standbyMode.c: 576: case 34:
  5844                           
  5845                           ;standbyMode.c: 573: break;
  5846                           
  5847                           ;standbyMode.c: 572: count = 4;
  5848                           
  5849                           ;standbyMode.c: 571: case 29:
  5850                           
  5851                           ;standbyMode.c: 568: break;
  5852                           
  5853                           ;standbyMode.c: 567: count = 4;
  5854  00D6B2  0E00               	movlw	0
  5855  00D6B4  6E06               	movwf	get_digits@count+1,c
  5856  00D6B6  0E04               	movlw	4
  5857  00D6B8  D7F2               	goto	L20
  5858  00D6BA                     
  5859                           ;standbyMode.c: 592: count = 0;
  5860  00D6BA  0E00               	movlw	0
  5861  00D6BC  6E06               	movwf	get_digits@count+1,c
  5862  00D6BE  0E00               	movlw	0
  5863  00D6C0  D7EE               	goto	L20
  5864  00D6C2                     l294:
  5865  00D6C2  C001  F003         	movff	get_digits@sum,??_get_digits
  5866  00D6C6  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  5867                           
  5868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5869                           ; Switch size 1, requested type "space"
  5870                           ; Number of cases is 1, Range of values is 0 to 0
  5871                           ; switch strategies available:
  5872                           ; Name         Instructions Cycles
  5873                           ; simple_byte            4     3 (average)
  5874                           ;	Chosen strategy is simple_byte
  5875  00D6CA  5004               	movf	??_get_digits+1,w,c
  5876  00D6CC  0A00               	xorlw	0	; case 0
  5877  00D6CE  A4D8               	btfss	status,2,c
  5878  00D6D0  D7F4               	goto	l314
  5879                           
  5880                           ; Switch size 1, requested type "space"
  5881                           ; Number of cases is 18, Range of values is 3 to 43
  5882                           ; switch strategies available:
  5883                           ; Name         Instructions Cycles
  5884                           ; simple_byte           55    28 (average)
  5885                           ;	Chosen strategy is simple_byte
  5886  00D6D2  5003               	movf	??_get_digits,w,c
  5887  00D6D4  0A03               	xorlw	3	; case 3
  5888  00D6D6  B4D8               	btfsc	status,2,c
  5889  00D6D8  D7DF               	goto	l295
  5890  00D6DA  0A04               	xorlw	4	; case 7
  5891  00D6DC  B4D8               	btfsc	status,2,c
  5892  00D6DE  D7DC               	goto	l295
  5893  00D6E0  0A0D               	xorlw	13	; case 10
  5894  00D6E2  B4D8               	btfsc	status,2,c
  5895  00D6E4  D7DE               	goto	l300
  5896  00D6E6  0A06               	xorlw	6	; case 12
  5897  00D6E8  B4D8               	btfsc	status,2,c
  5898  00D6EA  D7D6               	goto	l295
  5899  00D6EC  0A01               	xorlw	1	; case 13
  5900  00D6EE  B4D8               	btfsc	status,2,c
  5901  00D6F0  D7DC               	goto	l302
  5902  00D6F2  0A02               	xorlw	2	; case 15
  5903  00D6F4  B4D8               	btfsc	status,2,c
  5904  00D6F6  D7D5               	goto	l300
  5905  00D6F8  0A1E               	xorlw	30	; case 17
  5906  00D6FA  B4D8               	btfsc	status,2,c
  5907  00D6FC  D7D6               	goto	l302
  5908  00D6FE  0A03               	xorlw	3	; case 18
  5909  00D700  B4D8               	btfsc	status,2,c
  5910  00D702  D7D3               	goto	l302
  5911  00D704  0A01               	xorlw	1	; case 19
  5912  00D706  B4D8               	btfsc	status,2,c
  5913  00D708  D7CC               	goto	l300
  5914  00D70A  0A05               	xorlw	5	; case 22
  5915  00D70C  B4D8               	btfsc	status,2,c
  5916  00D70E  D7CD               	goto	l302
  5917  00D710  0A0F               	xorlw	15	; case 25
  5918  00D712  B4D8               	btfsc	status,2,c
  5919  00D714  D7CE               	goto	l309
  5920  00D716  0A03               	xorlw	3	; case 26
  5921  00D718  B4D8               	btfsc	status,2,c
  5922  00D71A  D7C7               	goto	l302
  5923  00D71C  0A01               	xorlw	1	; case 27
  5924  00D71E  B4D8               	btfsc	status,2,c
  5925  00D720  D7C4               	goto	l302
  5926  00D722  0A06               	xorlw	6	; case 29
  5927  00D724  B4D8               	btfsc	status,2,c
  5928  00D726  D7C5               	goto	l309
  5929  00D728  0A02               	xorlw	2	; case 31
  5930  00D72A  B4D8               	btfsc	status,2,c
  5931  00D72C  D7BE               	goto	l302
  5932  00D72E  0A3D               	xorlw	61	; case 34
  5933  00D730  B4D8               	btfsc	status,2,c
  5934  00D732  D7BF               	goto	l309
  5935  00D734  0A05               	xorlw	5	; case 39
  5936  00D736  B4D8               	btfsc	status,2,c
  5937  00D738  D7BC               	goto	l309
  5938  00D73A  0A0C               	xorlw	12	; case 43
  5939  00D73C  B4D8               	btfsc	status,2,c
  5940  00D73E  D7B9               	goto	l309
  5941  00D740  D7BC               	goto	l314
  5942  00D742                     l296:
  5943                           
  5944                           ;standbyMode.c: 595: return count;
  5945  00D742  C005  F001         	movff	get_digits@count,?_get_digits
  5946  00D746  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  5947  00D74A  0012               	return		;funcret
  5948  00D74C                     __end_of_get_digits:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           plusw1	equ	0xFE3
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           plusw2	equ	0xFDB
  5964                           fsr2h	equ	0xFDA
  5965                           fsr2l	equ	0xFD9
  5966                           status	equ	0xFD8
  5967                           
  5968 ;; *************** function _check_food *****************
  5969 ;; Defined at:
  5970 ;;		line 120 in file "standbyMode.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;  sum             2    0[COMRAM] unsigned int 
  5973 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  5974 ;;		 -> food_press@foodTable(8), 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  returnValue     2    6[COMRAM] unsigned int 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  2    0[COMRAM] unsigned int 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        8 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_food_press
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text11
  6000  00EB14                     __ptext11:
  6001                           	opt stack 0
  6002  00EB14                     _check_food:
  6003                           	opt stack 28
  6004                           
  6005                           ;standbyMode.c: 122: unsigned int returnValue = 0;
  6006                           
  6007                           ;incstack = 0
  6008  00EB14  0E00               	movlw	0
  6009  00EB16  6E08               	movwf	check_food@returnValue+1,c
  6010  00EB18  0E00               	movlw	0
  6011  00EB1A  6E07               	movwf	check_food@returnValue,c
  6012                           
  6013                           ;standbyMode.c: 124: switch(sum){
  6014  00EB1C  D3D0               	goto	l148
  6015  00EB1E                     
  6016                           ;standbyMode.c: 127: if (foodInput[0] == 1 || foodInput[0] == 2){
  6017  00EB1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6018  00EB22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6019  00EB26  04DE               	decf	postinc2,w,c
  6020  00EB28  10DE               	iorwf	postinc2,w,c
  6021  00EB2A  B4D8               	btfsc	status,2,c
  6022  00EB2C  D009               	goto	u3550
  6023  00EB2E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6024  00EB32  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6025  00EB36  0E02               	movlw	2
  6026  00EB38  18DE               	xorwf	postinc2,w,c
  6027  00EB3A  10DE               	iorwf	postinc2,w,c
  6028  00EB3C  A4D8               	btfss	status,2,c
  6029  00EB3E  D3FE               	goto	l153
  6030  00EB40                     u3550:
  6031                           
  6032                           ;standbyMode.c: 128: returnValue = 1;
  6033  00EB40  0E00               	movlw	0
  6034  00EB42  6E08               	movwf	check_food@returnValue+1,c
  6035  00EB44  0E01               	movlw	1
  6036  00EB46  D3B9               	goto	L48
  6037  00EB48                     
  6038                           ;standbyMode.c: 134: if (foodInput[0] == 1 || foodInput[0] == 2){
  6039  00EB48  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6040  00EB4C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6041  00EB50  04DE               	decf	postinc2,w,c
  6042  00EB52  10DE               	iorwf	postinc2,w,c
  6043  00EB54  B4D8               	btfsc	status,2,c
  6044  00EB56  D009               	goto	u3570
  6045  00EB58  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6046  00EB5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6047  00EB60  0E02               	movlw	2
  6048  00EB62  18DE               	xorwf	postinc2,w,c
  6049  00EB64  10DE               	iorwf	postinc2,w,c
  6050  00EB66  A4D8               	btfss	status,2,c
  6051  00EB68  D3E9               	goto	l153
  6052  00EB6A                     u3570:
  6053                           
  6054                           ;standbyMode.c: 135: returnValue = 2;
  6055  00EB6A  0E00               	movlw	0
  6056  00EB6C  6E08               	movwf	check_food@returnValue+1,c
  6057  00EB6E  0E02               	movlw	2
  6058  00EB70  D3A4               	goto	L48
  6059  00EB72                     
  6060                           ;standbyMode.c: 141: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  6061  00EB72  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6062  00EB76  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6063  00EB7A  04DE               	decf	postinc2,w,c
  6064  00EB7C  10DE               	iorwf	postinc2,w,c
  6065  00EB7E  B4D8               	btfsc	status,2,c
  6066  00EB80  D012               	goto	u3600
  6067  00EB82  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6068  00EB86  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6069  00EB8A  0E02               	movlw	2
  6070  00EB8C  18DE               	xorwf	postinc2,w,c
  6071  00EB8E  10DE               	iorwf	postinc2,w,c
  6072  00EB90  B4D8               	btfsc	status,2,c
  6073  00EB92  D009               	goto	u3600
  6074  00EB94  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6075  00EB98  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6076  00EB9C  0E03               	movlw	3
  6077  00EB9E  18DE               	xorwf	postinc2,w,c
  6078  00EBA0  10DE               	iorwf	postinc2,w,c
  6079  00EBA2  A4D8               	btfss	status,2,c
  6080  00EBA4  D3CB               	goto	l153
  6081  00EBA6                     u3600:
  6082                           
  6083                           ;standbyMode.c: 142: returnValue = 3;
  6084  00EBA6  0E00               	movlw	0
  6085  00EBA8  6E08               	movwf	check_food@returnValue+1,c
  6086  00EBAA  0E03               	movlw	3
  6087  00EBAC  D386               	goto	L48
  6088  00EBAE                     
  6089                           ;standbyMode.c: 148: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  6090  00EBAE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6091  00EBB2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6092  00EBB6  0E03               	movlw	3
  6093  00EBB8  18DE               	xorwf	postinc2,w,c
  6094  00EBBA  10DE               	iorwf	postinc2,w,c
  6095  00EBBC  B4D8               	btfsc	status,2,c
  6096  00EBBE  D3BE               	goto	l153
  6097  00EBC0  EE20 F002          	lfsr	2,2
  6098  00EBC4  5003               	movf	check_food@foodInput,w,c
  6099  00EBC6  26D9               	addwf	fsr2l,f,c
  6100  00EBC8  5004               	movf	check_food@foodInput+1,w,c
  6101  00EBCA  22DA               	addwfc	fsr2h,f,c
  6102  00EBCC  0E03               	movlw	3
  6103  00EBCE  18DE               	xorwf	postinc2,w,c
  6104  00EBD0  10DE               	iorwf	postinc2,w,c
  6105  00EBD2  B4D8               	btfsc	status,2,c
  6106  00EBD4  D3B3               	goto	l153
  6107  00EBD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6108  00EBDA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6109  00EBDE  50DE               	movf	postinc2,w,c
  6110  00EBE0  10DE               	iorwf	postinc2,w,c
  6111  00EBE2  B4D8               	btfsc	status,2,c
  6112  00EBE4  D3AB               	goto	l153
  6113  00EBE6  EE20 F002          	lfsr	2,2
  6114  00EBEA  5003               	movf	check_food@foodInput,w,c
  6115  00EBEC  26D9               	addwf	fsr2l,f,c
  6116  00EBEE  5004               	movf	check_food@foodInput+1,w,c
  6117  00EBF0  22DA               	addwfc	fsr2h,f,c
  6118  00EBF2  50DE               	movf	postinc2,w,c
  6119  00EBF4  10DE               	iorwf	postinc2,w,c
  6120  00EBF6  B4D8               	btfsc	status,2,c
  6121  00EBF8  D3A1               	goto	l153
  6122                           
  6123                           ;standbyMode.c: 149: returnValue = 4;
  6124  00EBFA  0E00               	movlw	0
  6125  00EBFC  6E08               	movwf	check_food@returnValue+1,c
  6126  00EBFE  0E04               	movlw	4
  6127  00EC00  D35C               	goto	L48
  6128  00EC02                     
  6129                           ;standbyMode.c: 155: if (foodInput[1] == 3){
  6130  00EC02  EE20 F002          	lfsr	2,2
  6131  00EC06  5003               	movf	check_food@foodInput,w,c
  6132  00EC08  26D9               	addwf	fsr2l,f,c
  6133  00EC0A  5004               	movf	check_food@foodInput+1,w,c
  6134  00EC0C  22DA               	addwfc	fsr2h,f,c
  6135  00EC0E  0E03               	movlw	3
  6136  00EC10  18DE               	xorwf	postinc2,w,c
  6137  00EC12  10DE               	iorwf	postinc2,w,c
  6138  00EC14  A4D8               	btfss	status,2,c
  6139  00EC16  D00C               	goto	l165
  6140                           
  6141                           ;standbyMode.c: 156: if (foodInput[0] == 1){
  6142  00EC18  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6143  00EC1C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6144  00EC20  04DE               	decf	postinc2,w,c
  6145  00EC22  10DE               	iorwf	postinc2,w,c
  6146  00EC24  A4D8               	btfss	status,2,c
  6147  00EC26  D38A               	goto	l153
  6148                           
  6149                           ;standbyMode.c: 157: returnValue = 5;
  6150  00EC28  0E00               	movlw	0
  6151  00EC2A  6E08               	movwf	check_food@returnValue+1,c
  6152  00EC2C  0E05               	movlw	5
  6153  00EC2E  D345               	goto	L48
  6154  00EC30                     l165:
  6155                           
  6156                           ;standbyMode.c: 160: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6157  00EC30  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6158  00EC34  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6159  00EC38  0E03               	movlw	3
  6160  00EC3A  18DE               	xorwf	postinc2,w,c
  6161  00EC3C  10DE               	iorwf	postinc2,w,c
  6162  00EC3E  B4D8               	btfsc	status,2,c
  6163  00EC40  D37D               	goto	l153
  6164  00EC42  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6165  00EC46  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6166  00EC4A  50DE               	movf	postinc2,w,c
  6167  00EC4C  10DE               	iorwf	postinc2,w,c
  6168  00EC4E  B4D8               	btfsc	status,2,c
  6169  00EC50  D375               	goto	l153
  6170                           
  6171                           ;standbyMode.c: 161: returnValue = 6;
  6172  00EC52  0E00               	movlw	0
  6173  00EC54  6E08               	movwf	check_food@returnValue+1,c
  6174  00EC56  0E06               	movlw	6
  6175  00EC58  D330               	goto	L48
  6176  00EC5A                     
  6177                           ;standbyMode.c: 167: if (foodInput[1] == 3){
  6178  00EC5A  EE20 F002          	lfsr	2,2
  6179  00EC5E  5003               	movf	check_food@foodInput,w,c
  6180  00EC60  26D9               	addwf	fsr2l,f,c
  6181  00EC62  5004               	movf	check_food@foodInput+1,w,c
  6182  00EC64  22DA               	addwfc	fsr2h,f,c
  6183  00EC66  0E03               	movlw	3
  6184  00EC68  18DE               	xorwf	postinc2,w,c
  6185  00EC6A  10DE               	iorwf	postinc2,w,c
  6186  00EC6C  A4D8               	btfss	status,2,c
  6187  00EC6E  D00C               	goto	l170
  6188                           
  6189                           ;standbyMode.c: 168: if (foodInput[0] == 1){
  6190  00EC70  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6191  00EC74  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6192  00EC78  04DE               	decf	postinc2,w,c
  6193  00EC7A  10DE               	iorwf	postinc2,w,c
  6194  00EC7C  A4D8               	btfss	status,2,c
  6195  00EC7E  D35E               	goto	l153
  6196                           
  6197                           ;standbyMode.c: 169: returnValue = 7;
  6198  00EC80  0E00               	movlw	0
  6199  00EC82  6E08               	movwf	check_food@returnValue+1,c
  6200  00EC84  0E07               	movlw	7
  6201  00EC86  D319               	goto	L48
  6202  00EC88                     l170:
  6203                           
  6204                           ;standbyMode.c: 172: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6205  00EC88  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6206  00EC8C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6207  00EC90  0E03               	movlw	3
  6208  00EC92  18DE               	xorwf	postinc2,w,c
  6209  00EC94  10DE               	iorwf	postinc2,w,c
  6210  00EC96  B4D8               	btfsc	status,2,c
  6211  00EC98  D351               	goto	l153
  6212  00EC9A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6213  00EC9E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6214  00ECA2  50DE               	movf	postinc2,w,c
  6215  00ECA4  10DE               	iorwf	postinc2,w,c
  6216  00ECA6  B4D8               	btfsc	status,2,c
  6217  00ECA8  D349               	goto	l153
  6218                           
  6219                           ;standbyMode.c: 173: returnValue = 8;
  6220  00ECAA  0E00               	movlw	0
  6221  00ECAC  6E08               	movwf	check_food@returnValue+1,c
  6222  00ECAE  0E08               	movlw	8
  6223  00ECB0  D304               	goto	L48
  6224  00ECB2                     
  6225                           ;standbyMode.c: 179: if (foodInput[0] == 1 && foodInput[1] == 1){
  6226  00ECB2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6227  00ECB6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6228  00ECBA  04DE               	decf	postinc2,w,c
  6229  00ECBC  10DE               	iorwf	postinc2,w,c
  6230  00ECBE  A4D8               	btfss	status,2,c
  6231  00ECC0  D33D               	goto	l153
  6232  00ECC2  EE20 F002          	lfsr	2,2
  6233  00ECC6  5003               	movf	check_food@foodInput,w,c
  6234  00ECC8  26D9               	addwf	fsr2l,f,c
  6235  00ECCA  5004               	movf	check_food@foodInput+1,w,c
  6236  00ECCC  22DA               	addwfc	fsr2h,f,c
  6237  00ECCE  04DE               	decf	postinc2,w,c
  6238  00ECD0  10DE               	iorwf	postinc2,w,c
  6239  00ECD2  A4D8               	btfss	status,2,c
  6240  00ECD4  D333               	goto	l153
  6241                           
  6242                           ;standbyMode.c: 180: if (foodInput[2] == 1 || foodInput[2] == 2){
  6243  00ECD6  EE20 F004          	lfsr	2,4
  6244  00ECDA  5003               	movf	check_food@foodInput,w,c
  6245  00ECDC  26D9               	addwf	fsr2l,f,c
  6246  00ECDE  5004               	movf	check_food@foodInput+1,w,c
  6247  00ECE0  22DA               	addwfc	fsr2h,f,c
  6248  00ECE2  04DE               	decf	postinc2,w,c
  6249  00ECE4  10DE               	iorwf	postinc2,w,c
  6250  00ECE6  B4D8               	btfsc	status,2,c
  6251  00ECE8  D00B               	goto	u3760
  6252  00ECEA  EE20 F004          	lfsr	2,4
  6253  00ECEE  5003               	movf	check_food@foodInput,w,c
  6254  00ECF0  26D9               	addwf	fsr2l,f,c
  6255  00ECF2  5004               	movf	check_food@foodInput+1,w,c
  6256  00ECF4  22DA               	addwfc	fsr2h,f,c
  6257  00ECF6  0E02               	movlw	2
  6258  00ECF8  18DE               	xorwf	postinc2,w,c
  6259  00ECFA  10DE               	iorwf	postinc2,w,c
  6260  00ECFC  A4D8               	btfss	status,2,c
  6261  00ECFE  D31E               	goto	l153
  6262  00ED00                     u3760:
  6263                           
  6264                           ;standbyMode.c: 181: returnValue = 9;
  6265  00ED00  0E00               	movlw	0
  6266  00ED02  6E08               	movwf	check_food@returnValue+1,c
  6267  00ED04  0E09               	movlw	9
  6268  00ED06  D2D9               	goto	L48
  6269  00ED08                     
  6270                           ;standbyMode.c: 188: if (foodInput[0] == 1 && foodInput[1] == 1){
  6271  00ED08  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6272  00ED0C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6273  00ED10  04DE               	decf	postinc2,w,c
  6274  00ED12  10DE               	iorwf	postinc2,w,c
  6275  00ED14  A4D8               	btfss	status,2,c
  6276  00ED16  D312               	goto	l153
  6277  00ED18  EE20 F002          	lfsr	2,2
  6278  00ED1C  5003               	movf	check_food@foodInput,w,c
  6279  00ED1E  26D9               	addwf	fsr2l,f,c
  6280  00ED20  5004               	movf	check_food@foodInput+1,w,c
  6281  00ED22  22DA               	addwfc	fsr2h,f,c
  6282  00ED24  04DE               	decf	postinc2,w,c
  6283  00ED26  10DE               	iorwf	postinc2,w,c
  6284  00ED28  A4D8               	btfss	status,2,c
  6285  00ED2A  D308               	goto	l153
  6286                           
  6287                           ;standbyMode.c: 189: if (foodInput[2] == 1 || foodInput[2] == 2){
  6288  00ED2C  EE20 F004          	lfsr	2,4
  6289  00ED30  5003               	movf	check_food@foodInput,w,c
  6290  00ED32  26D9               	addwf	fsr2l,f,c
  6291  00ED34  5004               	movf	check_food@foodInput+1,w,c
  6292  00ED36  22DA               	addwfc	fsr2h,f,c
  6293  00ED38  04DE               	decf	postinc2,w,c
  6294  00ED3A  10DE               	iorwf	postinc2,w,c
  6295  00ED3C  B4D8               	btfsc	status,2,c
  6296  00ED3E  D00B               	goto	u3800
  6297  00ED40  EE20 F004          	lfsr	2,4
  6298  00ED44  5003               	movf	check_food@foodInput,w,c
  6299  00ED46  26D9               	addwf	fsr2l,f,c
  6300  00ED48  5004               	movf	check_food@foodInput+1,w,c
  6301  00ED4A  22DA               	addwfc	fsr2h,f,c
  6302  00ED4C  0E02               	movlw	2
  6303  00ED4E  18DE               	xorwf	postinc2,w,c
  6304  00ED50  10DE               	iorwf	postinc2,w,c
  6305  00ED52  A4D8               	btfss	status,2,c
  6306  00ED54  D2F3               	goto	l153
  6307  00ED56                     u3800:
  6308                           
  6309                           ;standbyMode.c: 190: returnValue = 10;
  6310  00ED56  0E00               	movlw	0
  6311  00ED58  6E08               	movwf	check_food@returnValue+1,c
  6312  00ED5A  0E0A               	movlw	10
  6313  00ED5C  D2AE               	goto	L48
  6314  00ED5E                     
  6315                           ;standbyMode.c: 197: if (foodInput[1] == 1 && foodInput[2] == 1){
  6316  00ED5E  EE20 F002          	lfsr	2,2
  6317  00ED62  5003               	movf	check_food@foodInput,w,c
  6318  00ED64  26D9               	addwf	fsr2l,f,c
  6319  00ED66  5004               	movf	check_food@foodInput+1,w,c
  6320  00ED68  22DA               	addwfc	fsr2h,f,c
  6321  00ED6A  04DE               	decf	postinc2,w,c
  6322  00ED6C  10DE               	iorwf	postinc2,w,c
  6323  00ED6E  A4D8               	btfss	status,2,c
  6324  00ED70  D2E5               	goto	l153
  6325  00ED72  EE20 F004          	lfsr	2,4
  6326  00ED76  5003               	movf	check_food@foodInput,w,c
  6327  00ED78  26D9               	addwf	fsr2l,f,c
  6328  00ED7A  5004               	movf	check_food@foodInput+1,w,c
  6329  00ED7C  22DA               	addwfc	fsr2h,f,c
  6330  00ED7E  04DE               	decf	postinc2,w,c
  6331  00ED80  10DE               	iorwf	postinc2,w,c
  6332  00ED82  A4D8               	btfss	status,2,c
  6333  00ED84  D2DB               	goto	l153
  6334                           
  6335                           ;standbyMode.c: 198: if (foodInput[0] == 1 || foodInput[0] == 2){
  6336  00ED86  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6337  00ED8A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6338  00ED8E  04DE               	decf	postinc2,w,c
  6339  00ED90  10DE               	iorwf	postinc2,w,c
  6340  00ED92  B4D8               	btfsc	status,2,c
  6341  00ED94  D009               	goto	u3840
  6342  00ED96  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6343  00ED9A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6344  00ED9E  0E02               	movlw	2
  6345  00EDA0  18DE               	xorwf	postinc2,w,c
  6346  00EDA2  10DE               	iorwf	postinc2,w,c
  6347  00EDA4  A4D8               	btfss	status,2,c
  6348  00EDA6  D2CA               	goto	l153
  6349  00EDA8                     u3840:
  6350                           
  6351                           ;standbyMode.c: 199: returnValue = 11;
  6352  00EDA8  0E00               	movlw	0
  6353  00EDAA  6E08               	movwf	check_food@returnValue+1,c
  6354  00EDAC  0E0B               	movlw	11
  6355  00EDAE  D285               	goto	L48
  6356  00EDB0                     
  6357                           ;standbyMode.c: 206: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6358  00EDB0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6359  00EDB4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6360  00EDB8  04DE               	decf	postinc2,w,c
  6361  00EDBA  10DE               	iorwf	postinc2,w,c
  6362  00EDBC  A4D8               	btfss	status,2,c
  6363  00EDBE  D018               	goto	l190
  6364  00EDC0  EE20 F002          	lfsr	2,2
  6365  00EDC4  5003               	movf	check_food@foodInput,w,c
  6366  00EDC6  26D9               	addwf	fsr2l,f,c
  6367  00EDC8  5004               	movf	check_food@foodInput+1,w,c
  6368  00EDCA  22DA               	addwfc	fsr2h,f,c
  6369  00EDCC  04DE               	decf	postinc2,w,c
  6370  00EDCE  10DE               	iorwf	postinc2,w,c
  6371  00EDD0  A4D8               	btfss	status,2,c
  6372  00EDD2  D00E               	goto	l190
  6373  00EDD4  EE20 F004          	lfsr	2,4
  6374  00EDD8  5003               	movf	check_food@foodInput,w,c
  6375  00EDDA  26D9               	addwf	fsr2l,f,c
  6376  00EDDC  5004               	movf	check_food@foodInput+1,w,c
  6377  00EDDE  22DA               	addwfc	fsr2h,f,c
  6378  00EDE0  04DE               	decf	postinc2,w,c
  6379  00EDE2  10DE               	iorwf	postinc2,w,c
  6380  00EDE4  A4D8               	btfss	status,2,c
  6381  00EDE6  D004               	goto	l190
  6382                           
  6383                           ;standbyMode.c: 207: returnValue = 12;
  6384  00EDE8  0E00               	movlw	0
  6385  00EDEA  6E08               	movwf	check_food@returnValue+1,c
  6386  00EDEC  0E0C               	movlw	12
  6387  00EDEE  D265               	goto	L48
  6388  00EDF0                     l190:
  6389                           
  6390                           ;standbyMode.c: 209: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6391  00EDF0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6392  00EDF4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6393  00EDF8  0E02               	movlw	2
  6394  00EDFA  18DE               	xorwf	postinc2,w,c
  6395  00EDFC  10DE               	iorwf	postinc2,w,c
  6396  00EDFE  A4D8               	btfss	status,2,c
  6397  00EE00  D018               	goto	l192
  6398  00EE02  EE20 F002          	lfsr	2,2
  6399  00EE06  5003               	movf	check_food@foodInput,w,c
  6400  00EE08  26D9               	addwf	fsr2l,f,c
  6401  00EE0A  5004               	movf	check_food@foodInput+1,w,c
  6402  00EE0C  22DA               	addwfc	fsr2h,f,c
  6403  00EE0E  04DE               	decf	postinc2,w,c
  6404  00EE10  10DE               	iorwf	postinc2,w,c
  6405  00EE12  A4D8               	btfss	status,2,c
  6406  00EE14  D00E               	goto	l192
  6407  00EE16  EE20 F004          	lfsr	2,4
  6408  00EE1A  5003               	movf	check_food@foodInput,w,c
  6409  00EE1C  26D9               	addwf	fsr2l,f,c
  6410  00EE1E  5004               	movf	check_food@foodInput+1,w,c
  6411  00EE20  22DA               	addwfc	fsr2h,f,c
  6412  00EE22  04DE               	decf	postinc2,w,c
  6413  00EE24  10DE               	iorwf	postinc2,w,c
  6414  00EE26  A4D8               	btfss	status,2,c
  6415  00EE28  D004               	goto	l192
  6416                           
  6417                           ;standbyMode.c: 210: returnValue = 13;
  6418  00EE2A  0E00               	movlw	0
  6419  00EE2C  6E08               	movwf	check_food@returnValue+1,c
  6420  00EE2E  0E0D               	movlw	13
  6421  00EE30  D244               	goto	L48
  6422  00EE32                     l192:
  6423                           
  6424                           ;standbyMode.c: 212: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6425  00EE32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6426  00EE36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6427  00EE3A  04DE               	decf	postinc2,w,c
  6428  00EE3C  10DE               	iorwf	postinc2,w,c
  6429  00EE3E  A4D8               	btfss	status,2,c
  6430  00EE40  D019               	goto	l194
  6431  00EE42  EE20 F002          	lfsr	2,2
  6432  00EE46  5003               	movf	check_food@foodInput,w,c
  6433  00EE48  26D9               	addwf	fsr2l,f,c
  6434  00EE4A  5004               	movf	check_food@foodInput+1,w,c
  6435  00EE4C  22DA               	addwfc	fsr2h,f,c
  6436  00EE4E  0E02               	movlw	2
  6437  00EE50  18DE               	xorwf	postinc2,w,c
  6438  00EE52  10DE               	iorwf	postinc2,w,c
  6439  00EE54  A4D8               	btfss	status,2,c
  6440  00EE56  D00E               	goto	l194
  6441  00EE58  EE20 F004          	lfsr	2,4
  6442  00EE5C  5003               	movf	check_food@foodInput,w,c
  6443  00EE5E  26D9               	addwf	fsr2l,f,c
  6444  00EE60  5004               	movf	check_food@foodInput+1,w,c
  6445  00EE62  22DA               	addwfc	fsr2h,f,c
  6446  00EE64  04DE               	decf	postinc2,w,c
  6447  00EE66  10DE               	iorwf	postinc2,w,c
  6448  00EE68  A4D8               	btfss	status,2,c
  6449  00EE6A  D004               	goto	l194
  6450                           
  6451                           ;standbyMode.c: 213: returnValue = 14;
  6452  00EE6C  0E00               	movlw	0
  6453  00EE6E  6E08               	movwf	check_food@returnValue+1,c
  6454  00EE70  0E0E               	movlw	14
  6455  00EE72  D223               	goto	L48
  6456  00EE74                     l194:
  6457                           
  6458                           ;standbyMode.c: 215: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6459  00EE74  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6460  00EE78  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6461  00EE7C  04DE               	decf	postinc2,w,c
  6462  00EE7E  10DE               	iorwf	postinc2,w,c
  6463  00EE80  A4D8               	btfss	status,2,c
  6464  00EE82  D25C               	goto	l153
  6465  00EE84  EE20 F002          	lfsr	2,2
  6466  00EE88  5003               	movf	check_food@foodInput,w,c
  6467  00EE8A  26D9               	addwf	fsr2l,f,c
  6468  00EE8C  5004               	movf	check_food@foodInput+1,w,c
  6469  00EE8E  22DA               	addwfc	fsr2h,f,c
  6470  00EE90  04DE               	decf	postinc2,w,c
  6471  00EE92  10DE               	iorwf	postinc2,w,c
  6472  00EE94  A4D8               	btfss	status,2,c
  6473  00EE96  D252               	goto	l153
  6474  00EE98  EE20 F004          	lfsr	2,4
  6475  00EE9C  5003               	movf	check_food@foodInput,w,c
  6476  00EE9E  26D9               	addwf	fsr2l,f,c
  6477  00EEA0  5004               	movf	check_food@foodInput+1,w,c
  6478  00EEA2  22DA               	addwfc	fsr2h,f,c
  6479  00EEA4  0E02               	movlw	2
  6480  00EEA6  18DE               	xorwf	postinc2,w,c
  6481  00EEA8  10DE               	iorwf	postinc2,w,c
  6482  00EEAA  A4D8               	btfss	status,2,c
  6483  00EEAC  D247               	goto	l153
  6484                           
  6485                           ;standbyMode.c: 216: returnValue = 15;
  6486  00EEAE  0E00               	movlw	0
  6487  00EEB0  6E08               	movwf	check_food@returnValue+1,c
  6488  00EEB2  0E0F               	movlw	15
  6489  00EEB4  D202               	goto	L48
  6490  00EEB6                     
  6491                           ;standbyMode.c: 222: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6492  00EEB6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6493  00EEBA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6494  00EEBE  04DE               	decf	postinc2,w,c
  6495  00EEC0  10DE               	iorwf	postinc2,w,c
  6496  00EEC2  A4D8               	btfss	status,2,c
  6497  00EEC4  D018               	goto	l198
  6498  00EEC6  EE20 F002          	lfsr	2,2
  6499  00EECA  5003               	movf	check_food@foodInput,w,c
  6500  00EECC  26D9               	addwf	fsr2l,f,c
  6501  00EECE  5004               	movf	check_food@foodInput+1,w,c
  6502  00EED0  22DA               	addwfc	fsr2h,f,c
  6503  00EED2  04DE               	decf	postinc2,w,c
  6504  00EED4  10DE               	iorwf	postinc2,w,c
  6505  00EED6  A4D8               	btfss	status,2,c
  6506  00EED8  D00E               	goto	l198
  6507  00EEDA  EE20 F004          	lfsr	2,4
  6508  00EEDE  5003               	movf	check_food@foodInput,w,c
  6509  00EEE0  26D9               	addwf	fsr2l,f,c
  6510  00EEE2  5004               	movf	check_food@foodInput+1,w,c
  6511  00EEE4  22DA               	addwfc	fsr2h,f,c
  6512  00EEE6  04DE               	decf	postinc2,w,c
  6513  00EEE8  10DE               	iorwf	postinc2,w,c
  6514  00EEEA  A4D8               	btfss	status,2,c
  6515  00EEEC  D004               	goto	l198
  6516                           
  6517                           ;standbyMode.c: 223: returnValue = 16;
  6518  00EEEE  0E00               	movlw	0
  6519  00EEF0  6E08               	movwf	check_food@returnValue+1,c
  6520  00EEF2  0E10               	movlw	16
  6521  00EEF4  D1E2               	goto	L48
  6522  00EEF6                     l198:
  6523                           
  6524                           ;standbyMode.c: 225: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6525  00EEF6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6526  00EEFA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6527  00EEFE  0E02               	movlw	2
  6528  00EF00  18DE               	xorwf	postinc2,w,c
  6529  00EF02  10DE               	iorwf	postinc2,w,c
  6530  00EF04  A4D8               	btfss	status,2,c
  6531  00EF06  D018               	goto	l200
  6532  00EF08  EE20 F002          	lfsr	2,2
  6533  00EF0C  5003               	movf	check_food@foodInput,w,c
  6534  00EF0E  26D9               	addwf	fsr2l,f,c
  6535  00EF10  5004               	movf	check_food@foodInput+1,w,c
  6536  00EF12  22DA               	addwfc	fsr2h,f,c
  6537  00EF14  04DE               	decf	postinc2,w,c
  6538  00EF16  10DE               	iorwf	postinc2,w,c
  6539  00EF18  A4D8               	btfss	status,2,c
  6540  00EF1A  D00E               	goto	l200
  6541  00EF1C  EE20 F004          	lfsr	2,4
  6542  00EF20  5003               	movf	check_food@foodInput,w,c
  6543  00EF22  26D9               	addwf	fsr2l,f,c
  6544  00EF24  5004               	movf	check_food@foodInput+1,w,c
  6545  00EF26  22DA               	addwfc	fsr2h,f,c
  6546  00EF28  04DE               	decf	postinc2,w,c
  6547  00EF2A  10DE               	iorwf	postinc2,w,c
  6548  00EF2C  A4D8               	btfss	status,2,c
  6549  00EF2E  D004               	goto	l200
  6550                           
  6551                           ;standbyMode.c: 226: returnValue = 17;
  6552  00EF30  0E00               	movlw	0
  6553  00EF32  6E08               	movwf	check_food@returnValue+1,c
  6554  00EF34  0E11               	movlw	17
  6555  00EF36  D1C1               	goto	L48
  6556  00EF38                     l200:
  6557                           
  6558                           ;standbyMode.c: 228: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6559  00EF38  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6560  00EF3C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6561  00EF40  04DE               	decf	postinc2,w,c
  6562  00EF42  10DE               	iorwf	postinc2,w,c
  6563  00EF44  A4D8               	btfss	status,2,c
  6564  00EF46  D019               	goto	l202
  6565  00EF48  EE20 F002          	lfsr	2,2
  6566  00EF4C  5003               	movf	check_food@foodInput,w,c
  6567  00EF4E  26D9               	addwf	fsr2l,f,c
  6568  00EF50  5004               	movf	check_food@foodInput+1,w,c
  6569  00EF52  22DA               	addwfc	fsr2h,f,c
  6570  00EF54  0E02               	movlw	2
  6571  00EF56  18DE               	xorwf	postinc2,w,c
  6572  00EF58  10DE               	iorwf	postinc2,w,c
  6573  00EF5A  A4D8               	btfss	status,2,c
  6574  00EF5C  D00E               	goto	l202
  6575  00EF5E  EE20 F004          	lfsr	2,4
  6576  00EF62  5003               	movf	check_food@foodInput,w,c
  6577  00EF64  26D9               	addwf	fsr2l,f,c
  6578  00EF66  5004               	movf	check_food@foodInput+1,w,c
  6579  00EF68  22DA               	addwfc	fsr2h,f,c
  6580  00EF6A  04DE               	decf	postinc2,w,c
  6581  00EF6C  10DE               	iorwf	postinc2,w,c
  6582  00EF6E  A4D8               	btfss	status,2,c
  6583  00EF70  D004               	goto	l202
  6584                           
  6585                           ;standbyMode.c: 229: returnValue = 18;
  6586  00EF72  0E00               	movlw	0
  6587  00EF74  6E08               	movwf	check_food@returnValue+1,c
  6588  00EF76  0E12               	movlw	18
  6589  00EF78  D1A0               	goto	L48
  6590  00EF7A                     l202:
  6591                           
  6592                           ;standbyMode.c: 231: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6593  00EF7A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6594  00EF7E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6595  00EF82  04DE               	decf	postinc2,w,c
  6596  00EF84  10DE               	iorwf	postinc2,w,c
  6597  00EF86  A4D8               	btfss	status,2,c
  6598  00EF88  D1D9               	goto	l153
  6599  00EF8A  EE20 F002          	lfsr	2,2
  6600  00EF8E  5003               	movf	check_food@foodInput,w,c
  6601  00EF90  26D9               	addwf	fsr2l,f,c
  6602  00EF92  5004               	movf	check_food@foodInput+1,w,c
  6603  00EF94  22DA               	addwfc	fsr2h,f,c
  6604  00EF96  04DE               	decf	postinc2,w,c
  6605  00EF98  10DE               	iorwf	postinc2,w,c
  6606  00EF9A  A4D8               	btfss	status,2,c
  6607  00EF9C  D1CF               	goto	l153
  6608  00EF9E  EE20 F004          	lfsr	2,4
  6609  00EFA2  5003               	movf	check_food@foodInput,w,c
  6610  00EFA4  26D9               	addwf	fsr2l,f,c
  6611  00EFA6  5004               	movf	check_food@foodInput+1,w,c
  6612  00EFA8  22DA               	addwfc	fsr2h,f,c
  6613  00EFAA  0E02               	movlw	2
  6614  00EFAC  18DE               	xorwf	postinc2,w,c
  6615  00EFAE  10DE               	iorwf	postinc2,w,c
  6616  00EFB0  A4D8               	btfss	status,2,c
  6617  00EFB2  D1C4               	goto	l153
  6618                           
  6619                           ;standbyMode.c: 232: returnValue = 19;
  6620  00EFB4  0E00               	movlw	0
  6621  00EFB6  6E08               	movwf	check_food@returnValue+1,c
  6622  00EFB8  0E13               	movlw	19
  6623  00EFBA  D17F               	goto	L48
  6624  00EFBC                     
  6625                           ;standbyMode.c: 238: if (foodInput[0] == 1 && foodInput[1] == 1){
  6626  00EFBC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6627  00EFC0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6628  00EFC4  04DE               	decf	postinc2,w,c
  6629  00EFC6  10DE               	iorwf	postinc2,w,c
  6630  00EFC8  A4D8               	btfss	status,2,c
  6631  00EFCA  D1B8               	goto	l153
  6632  00EFCC  EE20 F002          	lfsr	2,2
  6633  00EFD0  5003               	movf	check_food@foodInput,w,c
  6634  00EFD2  26D9               	addwf	fsr2l,f,c
  6635  00EFD4  5004               	movf	check_food@foodInput+1,w,c
  6636  00EFD6  22DA               	addwfc	fsr2h,f,c
  6637  00EFD8  04DE               	decf	postinc2,w,c
  6638  00EFDA  10DE               	iorwf	postinc2,w,c
  6639  00EFDC  A4D8               	btfss	status,2,c
  6640  00EFDE  D1AE               	goto	l153
  6641                           
  6642                           ;standbyMode.c: 239: if (foodInput[2] == 1 || foodInput[2] == 2){
  6643  00EFE0  EE20 F004          	lfsr	2,4
  6644  00EFE4  5003               	movf	check_food@foodInput,w,c
  6645  00EFE6  26D9               	addwf	fsr2l,f,c
  6646  00EFE8  5004               	movf	check_food@foodInput+1,w,c
  6647  00EFEA  22DA               	addwfc	fsr2h,f,c
  6648  00EFEC  04DE               	decf	postinc2,w,c
  6649  00EFEE  10DE               	iorwf	postinc2,w,c
  6650  00EFF0  B4D8               	btfsc	status,2,c
  6651  00EFF2  D00B               	goto	u4120
  6652  00EFF4  EE20 F004          	lfsr	2,4
  6653  00EFF8  5003               	movf	check_food@foodInput,w,c
  6654  00EFFA  26D9               	addwf	fsr2l,f,c
  6655  00EFFC  5004               	movf	check_food@foodInput+1,w,c
  6656  00EFFE  22DA               	addwfc	fsr2h,f,c
  6657  00F000  0E02               	movlw	2
  6658  00F002  18DE               	xorwf	postinc2,w,c
  6659  00F004  10DE               	iorwf	postinc2,w,c
  6660  00F006  A4D8               	btfss	status,2,c
  6661  00F008  D199               	goto	l153
  6662  00F00A                     u4120:
  6663                           
  6664                           ;standbyMode.c: 240: returnValue = 20;
  6665  00F00A  0E00               	movlw	0
  6666  00F00C  6E08               	movwf	check_food@returnValue+1,c
  6667  00F00E  0E14               	movlw	20
  6668  00F010  D154               	goto	L48
  6669  00F012                     
  6670                           ;standbyMode.c: 247: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6671  00F012  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6672  00F016  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6673  00F01A  04DE               	decf	postinc2,w,c
  6674  00F01C  10DE               	iorwf	postinc2,w,c
  6675  00F01E  A4D8               	btfss	status,2,c
  6676  00F020  D018               	goto	l211
  6677  00F022  EE20 F002          	lfsr	2,2
  6678  00F026  5003               	movf	check_food@foodInput,w,c
  6679  00F028  26D9               	addwf	fsr2l,f,c
  6680  00F02A  5004               	movf	check_food@foodInput+1,w,c
  6681  00F02C  22DA               	addwfc	fsr2h,f,c
  6682  00F02E  04DE               	decf	postinc2,w,c
  6683  00F030  10DE               	iorwf	postinc2,w,c
  6684  00F032  A4D8               	btfss	status,2,c
  6685  00F034  D00E               	goto	l211
  6686  00F036  EE20 F004          	lfsr	2,4
  6687  00F03A  5003               	movf	check_food@foodInput,w,c
  6688  00F03C  26D9               	addwf	fsr2l,f,c
  6689  00F03E  5004               	movf	check_food@foodInput+1,w,c
  6690  00F040  22DA               	addwfc	fsr2h,f,c
  6691  00F042  04DE               	decf	postinc2,w,c
  6692  00F044  10DE               	iorwf	postinc2,w,c
  6693  00F046  A4D8               	btfss	status,2,c
  6694  00F048  D004               	goto	l211
  6695                           
  6696                           ;standbyMode.c: 248: returnValue = 21;
  6697  00F04A  0E00               	movlw	0
  6698  00F04C  6E08               	movwf	check_food@returnValue+1,c
  6699  00F04E  0E15               	movlw	21
  6700  00F050  D134               	goto	L48
  6701  00F052                     l211:
  6702                           
  6703                           ;standbyMode.c: 250: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6704  00F052  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6705  00F056  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6706  00F05A  0E02               	movlw	2
  6707  00F05C  18DE               	xorwf	postinc2,w,c
  6708  00F05E  10DE               	iorwf	postinc2,w,c
  6709  00F060  A4D8               	btfss	status,2,c
  6710  00F062  D018               	goto	l213
  6711  00F064  EE20 F002          	lfsr	2,2
  6712  00F068  5003               	movf	check_food@foodInput,w,c
  6713  00F06A  26D9               	addwf	fsr2l,f,c
  6714  00F06C  5004               	movf	check_food@foodInput+1,w,c
  6715  00F06E  22DA               	addwfc	fsr2h,f,c
  6716  00F070  04DE               	decf	postinc2,w,c
  6717  00F072  10DE               	iorwf	postinc2,w,c
  6718  00F074  A4D8               	btfss	status,2,c
  6719  00F076  D00E               	goto	l213
  6720  00F078  EE20 F004          	lfsr	2,4
  6721  00F07C  5003               	movf	check_food@foodInput,w,c
  6722  00F07E  26D9               	addwf	fsr2l,f,c
  6723  00F080  5004               	movf	check_food@foodInput+1,w,c
  6724  00F082  22DA               	addwfc	fsr2h,f,c
  6725  00F084  04DE               	decf	postinc2,w,c
  6726  00F086  10DE               	iorwf	postinc2,w,c
  6727  00F088  A4D8               	btfss	status,2,c
  6728  00F08A  D004               	goto	l213
  6729                           
  6730                           ;standbyMode.c: 251: returnValue = 22;
  6731  00F08C  0E00               	movlw	0
  6732  00F08E  6E08               	movwf	check_food@returnValue+1,c
  6733  00F090  0E16               	movlw	22
  6734  00F092  D113               	goto	L48
  6735  00F094                     l213:
  6736                           
  6737                           ;standbyMode.c: 253: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6738  00F094  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6739  00F098  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6740  00F09C  04DE               	decf	postinc2,w,c
  6741  00F09E  10DE               	iorwf	postinc2,w,c
  6742  00F0A0  A4D8               	btfss	status,2,c
  6743  00F0A2  D019               	goto	l215
  6744  00F0A4  EE20 F002          	lfsr	2,2
  6745  00F0A8  5003               	movf	check_food@foodInput,w,c
  6746  00F0AA  26D9               	addwf	fsr2l,f,c
  6747  00F0AC  5004               	movf	check_food@foodInput+1,w,c
  6748  00F0AE  22DA               	addwfc	fsr2h,f,c
  6749  00F0B0  0E02               	movlw	2
  6750  00F0B2  18DE               	xorwf	postinc2,w,c
  6751  00F0B4  10DE               	iorwf	postinc2,w,c
  6752  00F0B6  A4D8               	btfss	status,2,c
  6753  00F0B8  D00E               	goto	l215
  6754  00F0BA  EE20 F004          	lfsr	2,4
  6755  00F0BE  5003               	movf	check_food@foodInput,w,c
  6756  00F0C0  26D9               	addwf	fsr2l,f,c
  6757  00F0C2  5004               	movf	check_food@foodInput+1,w,c
  6758  00F0C4  22DA               	addwfc	fsr2h,f,c
  6759  00F0C6  04DE               	decf	postinc2,w,c
  6760  00F0C8  10DE               	iorwf	postinc2,w,c
  6761  00F0CA  A4D8               	btfss	status,2,c
  6762  00F0CC  D004               	goto	l215
  6763                           
  6764                           ;standbyMode.c: 254: returnValue = 23;
  6765  00F0CE  0E00               	movlw	0
  6766  00F0D0  6E08               	movwf	check_food@returnValue+1,c
  6767  00F0D2  0E17               	movlw	23
  6768  00F0D4  D0F2               	goto	L48
  6769  00F0D6                     l215:
  6770                           
  6771                           ;standbyMode.c: 256: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6772  00F0D6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6773  00F0DA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6774  00F0DE  04DE               	decf	postinc2,w,c
  6775  00F0E0  10DE               	iorwf	postinc2,w,c
  6776  00F0E2  A4D8               	btfss	status,2,c
  6777  00F0E4  D12B               	goto	l153
  6778  00F0E6  EE20 F002          	lfsr	2,2
  6779  00F0EA  5003               	movf	check_food@foodInput,w,c
  6780  00F0EC  26D9               	addwf	fsr2l,f,c
  6781  00F0EE  5004               	movf	check_food@foodInput+1,w,c
  6782  00F0F0  22DA               	addwfc	fsr2h,f,c
  6783  00F0F2  04DE               	decf	postinc2,w,c
  6784  00F0F4  10DE               	iorwf	postinc2,w,c
  6785  00F0F6  A4D8               	btfss	status,2,c
  6786  00F0F8  D121               	goto	l153
  6787  00F0FA  EE20 F004          	lfsr	2,4
  6788  00F0FE  5003               	movf	check_food@foodInput,w,c
  6789  00F100  26D9               	addwf	fsr2l,f,c
  6790  00F102  5004               	movf	check_food@foodInput+1,w,c
  6791  00F104  22DA               	addwfc	fsr2h,f,c
  6792  00F106  0E02               	movlw	2
  6793  00F108  18DE               	xorwf	postinc2,w,c
  6794  00F10A  10DE               	iorwf	postinc2,w,c
  6795  00F10C  A4D8               	btfss	status,2,c
  6796  00F10E  D116               	goto	l153
  6797                           
  6798                           ;standbyMode.c: 257: returnValue = 24;
  6799  00F110  0E00               	movlw	0
  6800  00F112  6E08               	movwf	check_food@returnValue+1,c
  6801  00F114  0E18               	movlw	24
  6802  00F116  D0D1               	goto	L48
  6803  00F118                     
  6804                           ;standbyMode.c: 263: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6805  00F118  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6806  00F11C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6807  00F120  04DE               	decf	postinc2,w,c
  6808  00F122  10DE               	iorwf	postinc2,w,c
  6809  00F124  A4D8               	btfss	status,2,c
  6810  00F126  D10A               	goto	l153
  6811  00F128  EE20 F002          	lfsr	2,2
  6812  00F12C  5003               	movf	check_food@foodInput,w,c
  6813  00F12E  26D9               	addwf	fsr2l,f,c
  6814  00F130  5004               	movf	check_food@foodInput+1,w,c
  6815  00F132  22DA               	addwfc	fsr2h,f,c
  6816  00F134  04DE               	decf	postinc2,w,c
  6817  00F136  10DE               	iorwf	postinc2,w,c
  6818  00F138  A4D8               	btfss	status,2,c
  6819  00F13A  D100               	goto	l153
  6820  00F13C  EE20 F004          	lfsr	2,4
  6821  00F140  5003               	movf	check_food@foodInput,w,c
  6822  00F142  26D9               	addwf	fsr2l,f,c
  6823  00F144  5004               	movf	check_food@foodInput+1,w,c
  6824  00F146  22DA               	addwfc	fsr2h,f,c
  6825  00F148  04DE               	decf	postinc2,w,c
  6826  00F14A  10DE               	iorwf	postinc2,w,c
  6827  00F14C  A4D8               	btfss	status,2,c
  6828  00F14E  D0F6               	goto	l153
  6829  00F150  EE20 F006          	lfsr	2,6
  6830  00F154  5003               	movf	check_food@foodInput,w,c
  6831  00F156  26D9               	addwf	fsr2l,f,c
  6832  00F158  5004               	movf	check_food@foodInput+1,w,c
  6833  00F15A  22DA               	addwfc	fsr2h,f,c
  6834  00F15C  04DE               	decf	postinc2,w,c
  6835  00F15E  10DE               	iorwf	postinc2,w,c
  6836  00F160  A4D8               	btfss	status,2,c
  6837  00F162  D0EC               	goto	l153
  6838                           
  6839                           ;standbyMode.c: 264: returnValue = 25;
  6840  00F164  0E00               	movlw	0
  6841  00F166  6E08               	movwf	check_food@returnValue+1,c
  6842  00F168  0E19               	movlw	25
  6843  00F16A  D0A7               	goto	L48
  6844  00F16C                     
  6845                           ;standbyMode.c: 270: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6846  00F16C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6847  00F170  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6848  00F174  04DE               	decf	postinc2,w,c
  6849  00F176  10DE               	iorwf	postinc2,w,c
  6850  00F178  A4D8               	btfss	status,2,c
  6851  00F17A  D0E0               	goto	l153
  6852  00F17C  EE20 F002          	lfsr	2,2
  6853  00F180  5003               	movf	check_food@foodInput,w,c
  6854  00F182  26D9               	addwf	fsr2l,f,c
  6855  00F184  5004               	movf	check_food@foodInput+1,w,c
  6856  00F186  22DA               	addwfc	fsr2h,f,c
  6857  00F188  04DE               	decf	postinc2,w,c
  6858  00F18A  10DE               	iorwf	postinc2,w,c
  6859  00F18C  A4D8               	btfss	status,2,c
  6860  00F18E  D0D6               	goto	l153
  6861  00F190  EE20 F004          	lfsr	2,4
  6862  00F194  5003               	movf	check_food@foodInput,w,c
  6863  00F196  26D9               	addwf	fsr2l,f,c
  6864  00F198  5004               	movf	check_food@foodInput+1,w,c
  6865  00F19A  22DA               	addwfc	fsr2h,f,c
  6866  00F19C  04DE               	decf	postinc2,w,c
  6867  00F19E  10DE               	iorwf	postinc2,w,c
  6868  00F1A0  A4D8               	btfss	status,2,c
  6869  00F1A2  D0CC               	goto	l153
  6870  00F1A4  EE20 F006          	lfsr	2,6
  6871  00F1A8  5003               	movf	check_food@foodInput,w,c
  6872  00F1AA  26D9               	addwf	fsr2l,f,c
  6873  00F1AC  5004               	movf	check_food@foodInput+1,w,c
  6874  00F1AE  22DA               	addwfc	fsr2h,f,c
  6875  00F1B0  04DE               	decf	postinc2,w,c
  6876  00F1B2  10DE               	iorwf	postinc2,w,c
  6877  00F1B4  A4D8               	btfss	status,2,c
  6878  00F1B6  D0C2               	goto	l153
  6879                           
  6880                           ;standbyMode.c: 271: returnValue = 26;
  6881  00F1B8  0E00               	movlw	0
  6882  00F1BA  6E08               	movwf	check_food@returnValue+1,c
  6883  00F1BC  0E1A               	movlw	26
  6884  00F1BE  D07D               	goto	L48
  6885  00F1C0                     
  6886                           ;standbyMode.c: 277: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6887  00F1C0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6888  00F1C4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6889  00F1C8  04DE               	decf	postinc2,w,c
  6890  00F1CA  10DE               	iorwf	postinc2,w,c
  6891  00F1CC  A4D8               	btfss	status,2,c
  6892  00F1CE  D0B6               	goto	l153
  6893  00F1D0  EE20 F002          	lfsr	2,2
  6894  00F1D4  5003               	movf	check_food@foodInput,w,c
  6895  00F1D6  26D9               	addwf	fsr2l,f,c
  6896  00F1D8  5004               	movf	check_food@foodInput+1,w,c
  6897  00F1DA  22DA               	addwfc	fsr2h,f,c
  6898  00F1DC  04DE               	decf	postinc2,w,c
  6899  00F1DE  10DE               	iorwf	postinc2,w,c
  6900  00F1E0  A4D8               	btfss	status,2,c
  6901  00F1E2  D0AC               	goto	l153
  6902  00F1E4  EE20 F004          	lfsr	2,4
  6903  00F1E8  5003               	movf	check_food@foodInput,w,c
  6904  00F1EA  26D9               	addwf	fsr2l,f,c
  6905  00F1EC  5004               	movf	check_food@foodInput+1,w,c
  6906  00F1EE  22DA               	addwfc	fsr2h,f,c
  6907  00F1F0  04DE               	decf	postinc2,w,c
  6908  00F1F2  10DE               	iorwf	postinc2,w,c
  6909  00F1F4  A4D8               	btfss	status,2,c
  6910  00F1F6  D0A2               	goto	l153
  6911  00F1F8  EE20 F006          	lfsr	2,6
  6912  00F1FC  5003               	movf	check_food@foodInput,w,c
  6913  00F1FE  26D9               	addwf	fsr2l,f,c
  6914  00F200  5004               	movf	check_food@foodInput+1,w,c
  6915  00F202  22DA               	addwfc	fsr2h,f,c
  6916  00F204  04DE               	decf	postinc2,w,c
  6917  00F206  10DE               	iorwf	postinc2,w,c
  6918  00F208  A4D8               	btfss	status,2,c
  6919  00F20A  D098               	goto	l153
  6920                           
  6921                           ;standbyMode.c: 278: returnValue = 27;
  6922  00F20C  0E00               	movlw	0
  6923  00F20E  6E08               	movwf	check_food@returnValue+1,c
  6924  00F210  0E1B               	movlw	27
  6925  00F212  D053               	goto	L48
  6926  00F214                     
  6927                           ;standbyMode.c: 284: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6928  00F214  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6929  00F218  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6930  00F21C  04DE               	decf	postinc2,w,c
  6931  00F21E  10DE               	iorwf	postinc2,w,c
  6932  00F220  A4D8               	btfss	status,2,c
  6933  00F222  D08C               	goto	l153
  6934  00F224  EE20 F002          	lfsr	2,2
  6935  00F228  5003               	movf	check_food@foodInput,w,c
  6936  00F22A  26D9               	addwf	fsr2l,f,c
  6937  00F22C  5004               	movf	check_food@foodInput+1,w,c
  6938  00F22E  22DA               	addwfc	fsr2h,f,c
  6939  00F230  04DE               	decf	postinc2,w,c
  6940  00F232  10DE               	iorwf	postinc2,w,c
  6941  00F234  A4D8               	btfss	status,2,c
  6942  00F236  D082               	goto	l153
  6943  00F238  EE20 F004          	lfsr	2,4
  6944  00F23C  5003               	movf	check_food@foodInput,w,c
  6945  00F23E  26D9               	addwf	fsr2l,f,c
  6946  00F240  5004               	movf	check_food@foodInput+1,w,c
  6947  00F242  22DA               	addwfc	fsr2h,f,c
  6948  00F244  04DE               	decf	postinc2,w,c
  6949  00F246  10DE               	iorwf	postinc2,w,c
  6950  00F248  A4D8               	btfss	status,2,c
  6951  00F24A  D078               	goto	l153
  6952  00F24C  EE20 F006          	lfsr	2,6
  6953  00F250  5003               	movf	check_food@foodInput,w,c
  6954  00F252  26D9               	addwf	fsr2l,f,c
  6955  00F254  5004               	movf	check_food@foodInput+1,w,c
  6956  00F256  22DA               	addwfc	fsr2h,f,c
  6957  00F258  04DE               	decf	postinc2,w,c
  6958  00F25A  10DE               	iorwf	postinc2,w,c
  6959  00F25C  A4D8               	btfss	status,2,c
  6960  00F25E  D06E               	goto	l153
  6961                           
  6962                           ;standbyMode.c: 285: returnValue = 28;
  6963  00F260  0E00               	movlw	0
  6964  00F262  6E08               	movwf	check_food@returnValue+1,c
  6965  00F264  0E1C               	movlw	28
  6966  00F266  D029               	goto	L48
  6967  00F268                     
  6968                           ;standbyMode.c: 291: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6969  00F268  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6970  00F26C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6971  00F270  04DE               	decf	postinc2,w,c
  6972  00F272  10DE               	iorwf	postinc2,w,c
  6973  00F274  A4D8               	btfss	status,2,c
  6974  00F276  D062               	goto	l153
  6975  00F278  EE20 F002          	lfsr	2,2
  6976  00F27C  5003               	movf	check_food@foodInput,w,c
  6977  00F27E  26D9               	addwf	fsr2l,f,c
  6978  00F280  5004               	movf	check_food@foodInput+1,w,c
  6979  00F282  22DA               	addwfc	fsr2h,f,c
  6980  00F284  04DE               	decf	postinc2,w,c
  6981  00F286  10DE               	iorwf	postinc2,w,c
  6982  00F288  A4D8               	btfss	status,2,c
  6983  00F28A  D058               	goto	l153
  6984  00F28C  EE20 F004          	lfsr	2,4
  6985  00F290  5003               	movf	check_food@foodInput,w,c
  6986  00F292  26D9               	addwf	fsr2l,f,c
  6987  00F294  5004               	movf	check_food@foodInput+1,w,c
  6988  00F296  22DA               	addwfc	fsr2h,f,c
  6989  00F298  04DE               	decf	postinc2,w,c
  6990  00F29A  10DE               	iorwf	postinc2,w,c
  6991  00F29C  A4D8               	btfss	status,2,c
  6992  00F29E  D04E               	goto	l153
  6993  00F2A0  EE20 F006          	lfsr	2,6
  6994  00F2A4  5003               	movf	check_food@foodInput,w,c
  6995  00F2A6  26D9               	addwf	fsr2l,f,c
  6996  00F2A8  5004               	movf	check_food@foodInput+1,w,c
  6997  00F2AA  22DA               	addwfc	fsr2h,f,c
  6998  00F2AC  04DE               	decf	postinc2,w,c
  6999  00F2AE  10DE               	iorwf	postinc2,w,c
  7000  00F2B0  A4D8               	btfss	status,2,c
  7001  00F2B2  D044               	goto	l153
  7002                           
  7003                           ;standbyMode.c: 292: returnValue = 29;
  7004  00F2B4  0E00               	movlw	0
  7005  00F2B6  6E08               	movwf	check_food@returnValue+1,c
  7006  00F2B8  0E1D               	movlw	29
  7007  00F2BA                     L48:
  7008  00F2BA  6E07               	movwf	check_food@returnValue,c
  7009                           
  7010                           ;standbyMode.c: 299: }
  7011                           
  7012                           ;standbyMode.c: 298: break;
  7013                           
  7014                           ;standbyMode.c: 297: default:
  7015                           
  7016                           ;standbyMode.c: 293: }
  7017                           ;standbyMode.c: 294: break;
  7018  00F2BC  D03F               	goto	l153
  7019  00F2BE                     l148:
  7020  00F2BE  C001  F005         	movff	check_food@sum,??_check_food
  7021  00F2C2  C002  F006         	movff	check_food@sum+1,??_check_food+1
  7022                           
  7023                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7024                           ; Switch size 1, requested type "space"
  7025                           ; Number of cases is 1, Range of values is 0 to 0
  7026                           ; switch strategies available:
  7027                           ; Name         Instructions Cycles
  7028                           ; simple_byte            4     3 (average)
  7029                           ;	Chosen strategy is simple_byte
  7030  00F2C6  5006               	movf	??_check_food+1,w,c
  7031  00F2C8  0A00               	xorlw	0	; case 0
  7032  00F2CA  A4D8               	btfss	status,2,c
  7033  00F2CC  D037               	goto	l153
  7034                           
  7035                           ; Switch size 1, requested type "space"
  7036                           ; Number of cases is 18, Range of values is 3 to 43
  7037                           ; switch strategies available:
  7038                           ; Name         Instructions Cycles
  7039                           ; simple_byte           55    28 (average)
  7040                           ;	Chosen strategy is simple_byte
  7041  00F2CE  5005               	movf	??_check_food,w,c
  7042  00F2D0  0A03               	xorlw	3	; case 3
  7043  00F2D2  B4D8               	btfsc	status,2,c
  7044  00F2D4  D424               	goto	l149
  7045  00F2D6  0A04               	xorlw	4	; case 7
  7046  00F2D8  B4D8               	btfsc	status,2,c
  7047  00F2DA  D436               	goto	l154
  7048  00F2DC  0A0D               	xorlw	13	; case 10
  7049  00F2DE  B4D8               	btfsc	status,2,c
  7050  00F2E0  D466               	goto	l162
  7051  00F2E2  0A06               	xorlw	6	; case 12
  7052  00F2E4  B4D8               	btfsc	status,2,c
  7053  00F2E6  D445               	goto	l158
  7054  00F2E8  0A01               	xorlw	1	; case 13
  7055  00F2EA  B4D8               	btfsc	status,2,c
  7056  00F2EC  D4E2               	goto	l174
  7057  00F2EE  0A02               	xorlw	2	; case 15
  7058  00F2F0  B4D8               	btfsc	status,2,c
  7059  00F2F2  D487               	goto	l164
  7060  00F2F4  0A1E               	xorlw	30	; case 17
  7061  00F2F6  B4D8               	btfsc	status,2,c
  7062  00F2F8  D532               	goto	l184
  7063  00F2FA  0A03               	xorlw	3	; case 18
  7064  00F2FC  B4D8               	btfsc	status,2,c
  7065  00F2FE  D504               	goto	l179
  7066  00F300  0A01               	xorlw	1	; case 19
  7067  00F302  B4D8               	btfsc	status,2,c
  7068  00F304  D4AA               	goto	l169
  7069  00F306  0A05               	xorlw	5	; case 22
  7070  00F308  B4D8               	btfsc	status,2,c
  7071  00F30A  D5D5               	goto	l197
  7072  00F30C  0A0F               	xorlw	15	; case 25
  7073  00F30E  B4D8               	btfsc	status,2,c
  7074  00F310  D703               	goto	l218
  7075  00F312  0A03               	xorlw	3	; case 26
  7076  00F314  B4D8               	btfsc	status,2,c
  7077  00F316  D652               	goto	l205
  7078  00F318  0A01               	xorlw	1	; case 27
  7079  00F31A  B4D8               	btfsc	status,2,c
  7080  00F31C  D549               	goto	l189
  7081  00F31E  0A06               	xorlw	6	; case 29
  7082  00F320  B4D8               	btfsc	status,2,c
  7083  00F322  D724               	goto	l220
  7084  00F324  0A02               	xorlw	2	; case 31
  7085  00F326  B4D8               	btfsc	status,2,c
  7086  00F328  D674               	goto	l210
  7087  00F32A  0A3D               	xorlw	61	; case 34
  7088  00F32C  B4D8               	btfsc	status,2,c
  7089  00F32E  D748               	goto	l222
  7090  00F330  0A05               	xorlw	5	; case 39
  7091  00F332  B4D8               	btfsc	status,2,c
  7092  00F334  D76F               	goto	l224
  7093  00F336  0A0C               	xorlw	12	; case 43
  7094  00F338  B4D8               	btfsc	status,2,c
  7095  00F33A  D796               	goto	l226
  7096  00F33C                     l153:
  7097                           
  7098                           ;standbyMode.c: 300: return returnValue;
  7099  00F33C  C007  F001         	movff	check_food@returnValue,?_check_food
  7100  00F340  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  7101  00F344  0012               	return		;funcret
  7102  00F346                     __end_of_check_food:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           plusw1	equ	0xFE3
  7114                           indf2	equ	0xFDF
  7115                           postinc2	equ	0xFDE
  7116                           postdec2	equ	0xFDD
  7117                           plusw2	equ	0xFDB
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _diet_press *****************
  7123 ;; Defined at:
  7124 ;;		line 666 in file "standbyMode.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;  drawer          2   36[COMRAM] unsigned int 
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;  keypress        1   50[COMRAM] unsigned char 
  7129 ;;  dietTable       8   51[COMRAM] unsigned int [4]
  7130 ;;  sum             2   48[COMRAM] unsigned int 
  7131 ;;  count           2   46[COMRAM] unsigned int 
  7132 ;;  backCheck       2   44[COMRAM] unsigned int 
  7133 ;;  i               2   42[COMRAM] unsigned int 
  7134 ;;  previous        2   40[COMRAM] unsigned int 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  2   36[COMRAM] unsigned int 
  7137 ;; Registers used:
  7138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7148 ;;Total ram usage:       23 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    3
  7151 ;; This function calls:
  7152 ;;		_lcdInst
  7153 ;;		_printf
  7154 ;;		_putch
  7155 ;; This function is called by:
  7156 ;;		_standbyMode
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text12
  7161  00E5EE                     __ptext12:
  7162                           	opt stack 0
  7163  00E5EE                     _diet_press:
  7164                           	opt stack 26
  7165                           
  7166                           ;incstack = 0
  7167                           ;standbyMode.c: 669: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  7168  00E5EE  0E01               	movlw	1
  7169  00E5F0  EC6C  F069         	call	_lcdInst
  7170  00E5F4  0EC3               	movlw	195
  7171  00E5F6  6E27               	movwf	??_diet_press& (0+255),c
  7172  00E5F8  0ECD               	movlw	205
  7173  00E5FA                     u7097:
  7174  00E5FA  2EE8               	decfsz	wreg,f,c
  7175  00E5FC  D7FE               	bra	u7097
  7176  00E5FE  2E27               	decfsz	??_diet_press& (0+255),f,c
  7177  00E600  D7FC               	bra	u7097
  7178  00E602  F000               	nop	
  7179                           
  7180                           ;standbyMode.c: 670: printf("Drawer %i diet:", drawer);
  7181  00E604  0E3F               	movlw	low STR_33
  7182  00E606  6E0D               	movwf	printf@f,c
  7183  00E608  0EFE               	movlw	high STR_33
  7184  00E60A  6E0E               	movwf	printf@f+1,c
  7185  00E60C  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7186  00E610  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7187  00E614  EC7A  F06F         	call	_printf	;wreg free
  7188                           
  7189                           ;standbyMode.c: 671: lcdInst(0xC0);;
  7190  00E618  0EC0               	movlw	192
  7191  00E61A  EC6C  F069         	call	_lcdInst
  7192                           
  7193                           ;standbyMode.c: 673: unsigned int count = 0;
  7194  00E61E  0E00               	movlw	0
  7195  00E620  6E30               	movwf	diet_press@count+1,c
  7196  00E622  0E00               	movlw	0
  7197  00E624  6E2F               	movwf	diet_press@count,c
  7198                           
  7199                           ;standbyMode.c: 674: unsigned int previous = 0;
  7200  00E626  0E00               	movlw	0
  7201  00E628  6E2A               	movwf	diet_press@previous+1,c
  7202  00E62A  0E00               	movlw	0
  7203  00E62C  6E29               	movwf	diet_press@previous,c
  7204                           
  7205                           ;standbyMode.c: 675: unsigned int sum = 0;
  7206  00E62E  0E00               	movlw	0
  7207  00E630  6E32               	movwf	diet_press@sum+1,c
  7208  00E632  0E00               	movlw	0
  7209  00E634  6E31               	movwf	diet_press@sum,c
  7210                           
  7211                           ;standbyMode.c: 676: unsigned int i = 0;
  7212  00E636  0E00               	movlw	0
  7213  00E638  6E2C               	movwf	diet_press@i+1,c
  7214  00E63A  0E00               	movlw	0
  7215  00E63C  6E2B               	movwf	diet_press@i,c
  7216                           
  7217                           ;standbyMode.c: 677: unsigned int dietTable[4] = {0, 0, 0, 0};
  7218  00E63E  EE20  F080         	lfsr	2,diet_press@F3112
  7219  00E642  EE10  F034         	lfsr	1,diet_press@dietTable
  7220  00E646  0E07               	movlw	7
  7221  00E648                     u4861:
  7222  00E648  CFDB FFE3          	movff	plusw2,plusw1
  7223  00E64C  06E8               	decf	wreg,f,c
  7224  00E64E  E2FC               	bc	u4861
  7225                           
  7226                           ;standbyMode.c: 678: unsigned int backCheck = 0;
  7227  00E650  0E00               	movlw	0
  7228  00E652  6E2E               	movwf	diet_press@backCheck+1,c
  7229  00E654  0E00               	movlw	0
  7230  00E656  6E2D               	movwf	diet_press@backCheck,c
  7231  00E658                     l351:
  7232  00E658  A281               	btfss	3969,1,c	;volatile
  7233  00E65A  D7FE               	goto	l350
  7234                           
  7235                           ;standbyMode.c: 682: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7236  00E65C  3881               	swapf	3969,w,c	;volatile
  7237  00E65E  0B0F               	andlw	15
  7238  00E660  0B0F               	andlw	15
  7239  00E662  6E33               	movwf	diet_press@keypress,c
  7240  00E664  B281               	btfsc	3969,1,c	;volatile
  7241  00E666  D7FE               	goto	l355
  7242                           
  7243                           ;standbyMode.c: 685: if(keypress == 15){
  7244  00E668  0E0F               	movlw	15
  7245  00E66A  1833               	xorwf	diet_press@keypress,w,c
  7246  00E66C  B4D8               	btfsc	status,2,c
  7247  00E66E  D080               	goto	l358
  7248                           
  7249                           ;standbyMode.c: 688: else if (keypress == 14){
  7250                           
  7251                           ;standbyMode.c: 687: }
  7252                           
  7253                           ;standbyMode.c: 686: break;
  7254  00E670  0E0E               	movlw	14
  7255  00E672  1833               	xorwf	diet_press@keypress,w,c
  7256  00E674  A4D8               	btfss	status,2,c
  7257  00E676  D005               	goto	l360
  7258                           
  7259                           ;standbyMode.c: 689: backCheck = 1;
  7260  00E678  0E00               	movlw	0
  7261  00E67A  6E2E               	movwf	diet_press@backCheck+1,c
  7262  00E67C  0E01               	movlw	1
  7263  00E67E  6E2D               	movwf	diet_press@backCheck,c
  7264                           
  7265                           ;standbyMode.c: 690: break;
  7266  00E680  D077               	goto	l358
  7267  00E682                     l360:
  7268                           
  7269                           ;standbyMode.c: 692: else if (keypress == 12){
  7270  00E682  0E0C               	movlw	12
  7271  00E684  1833               	xorwf	diet_press@keypress,w,c
  7272  00E686  A4D8               	btfss	status,2,c
  7273  00E688  D02D               	goto	l362
  7274                           
  7275                           ;standbyMode.c: 693: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7276  00E68A  0E01               	movlw	1
  7277  00E68C  EC6C  F069         	call	_lcdInst
  7278  00E690  0EC3               	movlw	195
  7279  00E692  6E27               	movwf	??_diet_press& (0+255),c
  7280  00E694  0ECD               	movlw	205
  7281  00E696                     u7107:
  7282  00E696  2EE8               	decfsz	wreg,f,c
  7283  00E698  D7FE               	bra	u7107
  7284  00E69A  2E27               	decfsz	??_diet_press& (0+255),f,c
  7285  00E69C  D7FC               	bra	u7107
  7286  00E69E  F000               	nop	
  7287                           
  7288                           ;standbyMode.c: 694: printf("Drawer %i diet:", drawer);
  7289  00E6A0  0E3F               	movlw	low STR_33
  7290  00E6A2  6E0D               	movwf	printf@f,c
  7291  00E6A4  0EFE               	movlw	high STR_33
  7292  00E6A6  6E0E               	movwf	printf@f+1,c
  7293  00E6A8  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7294  00E6AC  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7295  00E6B0  EC7A  F06F         	call	_printf	;wreg free
  7296                           
  7297                           ;standbyMode.c: 695: lcdInst(0xC0);;
  7298  00E6B4  0EC0               	movlw	192
  7299  00E6B6  EC6C  F069         	call	_lcdInst
  7300                           
  7301                           ;standbyMode.c: 696: count = 0;
  7302  00E6BA  0E00               	movlw	0
  7303  00E6BC  6E30               	movwf	diet_press@count+1,c
  7304  00E6BE  0E00               	movlw	0
  7305  00E6C0  6E2F               	movwf	diet_press@count,c
  7306                           
  7307                           ;standbyMode.c: 697: dietTable[0] = 0;
  7308  00E6C2  0E00               	movlw	0
  7309  00E6C4  6E35               	movwf	diet_press@dietTable+1,c
  7310  00E6C6  0E00               	movlw	0
  7311  00E6C8  6E34               	movwf	diet_press@dietTable,c
  7312                           
  7313                           ;standbyMode.c: 698: dietTable[1] = 0;
  7314  00E6CA  0E00               	movlw	0
  7315  00E6CC  6E37               	movwf	diet_press@dietTable+3,c
  7316  00E6CE  0E00               	movlw	0
  7317  00E6D0  6E36               	movwf	diet_press@dietTable+2,c
  7318                           
  7319                           ;standbyMode.c: 699: dietTable[2] = 0;
  7320  00E6D2  0E00               	movlw	0
  7321  00E6D4  6E39               	movwf	diet_press@dietTable+5,c
  7322  00E6D6  0E00               	movlw	0
  7323  00E6D8  6E38               	movwf	diet_press@dietTable+4,c
  7324                           
  7325                           ;standbyMode.c: 700: dietTable[3] = 0;
  7326  00E6DA  0E00               	movlw	0
  7327  00E6DC  6E3B               	movwf	diet_press@dietTable+7,c
  7328  00E6DE  0E00               	movlw	0
  7329  00E6E0  6E3A               	movwf	diet_press@dietTable+6,c
  7330                           
  7331                           ;standbyMode.c: 701: }
  7332  00E6E2  D7BA               	goto	l350
  7333  00E6E4                     l362:
  7334                           
  7335                           ;standbyMode.c: 702: else if (count <= 3){
  7336  00E6E4  5030               	movf	diet_press@count+1,w,c
  7337  00E6E6  E1B8               	bnz	l351
  7338  00E6E8  0E04               	movlw	4
  7339  00E6EA  5C2F               	subwf	diet_press@count,w,c
  7340  00E6EC  B0D8               	btfsc	status,0,c
  7341  00E6EE  D7B4               	goto	l350
  7342                           
  7343                           ;standbyMode.c: 703: if (keypress == 3 || keypress == 7){
  7344  00E6F0  0E03               	movlw	3
  7345  00E6F2  1833               	xorwf	diet_press@keypress,w,c
  7346  00E6F4  B4D8               	btfsc	status,2,c
  7347  00E6F6  D004               	goto	u4940
  7348  00E6F8  0E07               	movlw	7
  7349  00E6FA  1833               	xorwf	diet_press@keypress,w,c
  7350  00E6FC  A4D8               	btfss	status,2,c
  7351  00E6FE  D013               	goto	l365
  7352  00E700                     u4940:
  7353                           
  7354                           ;standbyMode.c: 704: putch(input[keypress]);
  7355  00E700  5033               	movf	diet_press@keypress,w,c
  7356  00E702  0D01               	mullw	1
  7357  00E704  0E36               	movlw	low _input
  7358  00E706  24F3               	addwf	prodl,w,c
  7359  00E708  6EF6               	movwf	tblptrl,c
  7360  00E70A  0EFD               	movlw	high _input
  7361  00E70C  20F4               	addwfc	prodh,w,c
  7362  00E70E  6EF7               	movwf	tblptrh,c
  7363  00E710                     	if	0	;There are less than 3 active tblptr bytes
  7364  00E710                     	endif
  7365  00E710  0008               	tblrd		*
  7366  00E712  50F5               	movf	tablat,w,c
  7367  00E714  EC76  F069         	call	_putch
  7368                           
  7369                           ;standbyMode.c: 705: dietTable[count] = keypress;
  7370  00E718  5033               	movf	diet_press@keypress,w,c
  7371  00E71A  6E27               	movwf	??_diet_press& (0+255),c
  7372  00E71C  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7373  00E71E  D01A               	goto	L67
  7374  00E720                     l4145:
  7375                           
  7376                           ;standbyMode.c: 706: count += 1;
  7377  00E720  4A2F               	infsnz	diet_press@count,f,c
  7378  00E722  2A30               	incf	diet_press@count+1,f,c
  7379                           
  7380                           ;standbyMode.c: 707: }
  7381  00E724  D799               	goto	l350
  7382  00E726                     l365:
  7383                           
  7384                           ;standbyMode.c: 708: else if (keypress == 11){
  7385  00E726  0E0B               	movlw	11
  7386  00E728  1833               	xorwf	diet_press@keypress,w,c
  7387  00E72A  A4D8               	btfss	status,2,c
  7388  00E72C  D795               	goto	l350
  7389                           
  7390                           ;standbyMode.c: 709: putch(input[keypress]);
  7391  00E72E  5033               	movf	diet_press@keypress,w,c
  7392  00E730  0D01               	mullw	1
  7393  00E732  0E36               	movlw	low _input
  7394  00E734  24F3               	addwf	prodl,w,c
  7395  00E736  6EF6               	movwf	tblptrl,c
  7396  00E738  0EFD               	movlw	high _input
  7397  00E73A  20F4               	addwfc	prodh,w,c
  7398  00E73C  6EF7               	movwf	tblptrh,c
  7399  00E73E                     	if	0	;There are less than 3 active tblptr bytes
  7400  00E73E                     	endif
  7401  00E73E  0008               	tblrd		*
  7402  00E740  50F5               	movf	tablat,w,c
  7403  00E742  EC76  F069         	call	_putch
  7404                           
  7405                           ;standbyMode.c: 710: dietTable[count] = keypress + 1;
  7406  00E746  5033               	movf	diet_press@keypress,w,c
  7407  00E748  6E27               	movwf	??_diet_press& (0+255),c
  7408  00E74A  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7409  00E74C  0E01               	movlw	1
  7410  00E74E  2627               	addwf	??_diet_press,f,c
  7411  00E750  0E00               	movlw	0
  7412  00E752  2228               	addwfc	??_diet_press+1,f,c
  7413  00E754                     L67:
  7414  00E754  90D8               	bcf	status,0,c
  7415  00E756  342F               	rlcf	diet_press@count,w,c
  7416  00E758  6ED9               	movwf	fsr2l,c
  7417  00E75A  3430               	rlcf	diet_press@count+1,w,c
  7418  00E75C  6EDA               	movwf	fsr2h,c
  7419  00E75E  0E34               	movlw	low diet_press@dietTable
  7420  00E760  26D9               	addwf	fsr2l,f,c
  7421  00E762  0E00               	movlw	high diet_press@dietTable
  7422  00E764  22DA               	addwfc	fsr2h,f,c
  7423  00E766  C027  FFDE         	movff	??_diet_press,postinc2
  7424  00E76A  C028  FFDD         	movff	??_diet_press+1,postdec2
  7425  00E76E  D7D8               	goto	l4145
  7426  00E770                     l358:
  7427                           
  7428                           ;standbyMode.c: 712: }
  7429                           ;standbyMode.c: 713: }
  7430                           ;standbyMode.c: 714: }
  7431                           ;standbyMode.c: 716: if (backCheck == 1){
  7432  00E770  042D               	decf	diet_press@backCheck,w,c
  7433  00E772  102E               	iorwf	diet_press@backCheck+1,w,c
  7434  00E774  A4D8               	btfss	status,2,c
  7435  00E776  D004               	goto	l371
  7436                           
  7437                           ;standbyMode.c: 717: sum = 100;
  7438  00E778  0E00               	movlw	0
  7439  00E77A  6E32               	movwf	diet_press@sum+1,c
  7440  00E77C  0E64               	movlw	100
  7441  00E77E  D199               	goto	L66
  7442  00E780                     l371:
  7443                           
  7444                           ;standbyMode.c: 721: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7445  00E780  0E0C               	movlw	12
  7446  00E782  1834               	xorwf	diet_press@dietTable,w,c
  7447  00E784  1035               	iorwf	diet_press@dietTable+1,w,c
  7448  00E786  A4D8               	btfss	status,2,c
  7449  00E788  D010               	goto	l373
  7450  00E78A  5036               	movf	diet_press@dietTable+2,w,c
  7451  00E78C  1037               	iorwf	diet_press@dietTable+3,w,c
  7452  00E78E  A4D8               	btfss	status,2,c
  7453  00E790  D00C               	goto	l373
  7454  00E792  5038               	movf	diet_press@dietTable+4,w,c
  7455  00E794  1039               	iorwf	diet_press@dietTable+5,w,c
  7456  00E796  A4D8               	btfss	status,2,c
  7457  00E798  D008               	goto	l373
  7458  00E79A  503A               	movf	diet_press@dietTable+6,w,c
  7459  00E79C  103B               	iorwf	diet_press@dietTable+7,w,c
  7460  00E79E  A4D8               	btfss	status,2,c
  7461  00E7A0  D004               	goto	l373
  7462                           
  7463                           ;standbyMode.c: 722: sum = 12;
  7464  00E7A2  0E00               	movlw	0
  7465  00E7A4  6E32               	movwf	diet_press@sum+1,c
  7466  00E7A6  0E0C               	movlw	12
  7467  00E7A8  D184               	goto	L66
  7468  00E7AA                     l373:
  7469                           
  7470                           ;standbyMode.c: 726: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7471  00E7AA  0E03               	movlw	3
  7472  00E7AC  1834               	xorwf	diet_press@dietTable,w,c
  7473  00E7AE  1035               	iorwf	diet_press@dietTable+1,w,c
  7474  00E7B0  A4D8               	btfss	status,2,c
  7475  00E7B2  D010               	goto	l375
  7476  00E7B4  5036               	movf	diet_press@dietTable+2,w,c
  7477  00E7B6  1037               	iorwf	diet_press@dietTable+3,w,c
  7478  00E7B8  A4D8               	btfss	status,2,c
  7479  00E7BA  D00C               	goto	l375
  7480  00E7BC  5038               	movf	diet_press@dietTable+4,w,c
  7481  00E7BE  1039               	iorwf	diet_press@dietTable+5,w,c
  7482  00E7C0  A4D8               	btfss	status,2,c
  7483  00E7C2  D008               	goto	l375
  7484  00E7C4  503A               	movf	diet_press@dietTable+6,w,c
  7485  00E7C6  103B               	iorwf	diet_press@dietTable+7,w,c
  7486  00E7C8  A4D8               	btfss	status,2,c
  7487  00E7CA  D004               	goto	l375
  7488                           
  7489                           ;standbyMode.c: 727: sum = 3;
  7490  00E7CC  0E00               	movlw	0
  7491  00E7CE  6E32               	movwf	diet_press@sum+1,c
  7492  00E7D0  0E03               	movlw	3
  7493  00E7D2  D16F               	goto	L66
  7494  00E7D4                     l375:
  7495                           
  7496                           ;standbyMode.c: 731: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7497  00E7D4  0E07               	movlw	7
  7498  00E7D6  1834               	xorwf	diet_press@dietTable,w,c
  7499  00E7D8  1035               	iorwf	diet_press@dietTable+1,w,c
  7500  00E7DA  A4D8               	btfss	status,2,c
  7501  00E7DC  D010               	goto	l377
  7502  00E7DE  5036               	movf	diet_press@dietTable+2,w,c
  7503  00E7E0  1037               	iorwf	diet_press@dietTable+3,w,c
  7504  00E7E2  A4D8               	btfss	status,2,c
  7505  00E7E4  D00C               	goto	l377
  7506  00E7E6  5038               	movf	diet_press@dietTable+4,w,c
  7507  00E7E8  1039               	iorwf	diet_press@dietTable+5,w,c
  7508  00E7EA  A4D8               	btfss	status,2,c
  7509  00E7EC  D008               	goto	l377
  7510  00E7EE  503A               	movf	diet_press@dietTable+6,w,c
  7511  00E7F0  103B               	iorwf	diet_press@dietTable+7,w,c
  7512  00E7F2  A4D8               	btfss	status,2,c
  7513  00E7F4  D004               	goto	l377
  7514                           
  7515                           ;standbyMode.c: 732: sum = 7;
  7516  00E7F6  0E00               	movlw	0
  7517  00E7F8  6E32               	movwf	diet_press@sum+1,c
  7518  00E7FA  0E07               	movlw	7
  7519  00E7FC  D15A               	goto	L66
  7520  00E7FE                     l377:
  7521                           
  7522                           ;standbyMode.c: 736: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7523  00E7FE  0E03               	movlw	3
  7524  00E800  1834               	xorwf	diet_press@dietTable,w,c
  7525  00E802  1035               	iorwf	diet_press@dietTable+1,w,c
  7526  00E804  A4D8               	btfss	status,2,c
  7527  00E806  D011               	goto	l379
  7528  00E808  0E07               	movlw	7
  7529  00E80A  1836               	xorwf	diet_press@dietTable+2,w,c
  7530  00E80C  1037               	iorwf	diet_press@dietTable+3,w,c
  7531  00E80E  A4D8               	btfss	status,2,c
  7532  00E810  D00C               	goto	l379
  7533  00E812  5038               	movf	diet_press@dietTable+4,w,c
  7534  00E814  1039               	iorwf	diet_press@dietTable+5,w,c
  7535  00E816  A4D8               	btfss	status,2,c
  7536  00E818  D008               	goto	l379
  7537  00E81A  503A               	movf	diet_press@dietTable+6,w,c
  7538  00E81C  103B               	iorwf	diet_press@dietTable+7,w,c
  7539  00E81E  A4D8               	btfss	status,2,c
  7540  00E820  D004               	goto	l379
  7541                           
  7542                           ;standbyMode.c: 737: sum = 10;
  7543  00E822  0E00               	movlw	0
  7544  00E824  6E32               	movwf	diet_press@sum+1,c
  7545  00E826  0E0A               	movlw	10
  7546  00E828  D144               	goto	L66
  7547  00E82A                     l379:
  7548                           
  7549                           ;standbyMode.c: 741: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7550  00E82A  0E03               	movlw	3
  7551  00E82C  1834               	xorwf	diet_press@dietTable,w,c
  7552  00E82E  1035               	iorwf	diet_press@dietTable+1,w,c
  7553  00E830  A4D8               	btfss	status,2,c
  7554  00E832  D011               	goto	l381
  7555  00E834  0E0C               	movlw	12
  7556  00E836  1836               	xorwf	diet_press@dietTable+2,w,c
  7557  00E838  1037               	iorwf	diet_press@dietTable+3,w,c
  7558  00E83A  A4D8               	btfss	status,2,c
  7559  00E83C  D00C               	goto	l381
  7560  00E83E  5038               	movf	diet_press@dietTable+4,w,c
  7561  00E840  1039               	iorwf	diet_press@dietTable+5,w,c
  7562  00E842  A4D8               	btfss	status,2,c
  7563  00E844  D008               	goto	l381
  7564  00E846  503A               	movf	diet_press@dietTable+6,w,c
  7565  00E848  103B               	iorwf	diet_press@dietTable+7,w,c
  7566  00E84A  A4D8               	btfss	status,2,c
  7567  00E84C  D004               	goto	l381
  7568                           
  7569                           ;standbyMode.c: 742: sum = 15;
  7570  00E84E  0E00               	movlw	0
  7571  00E850  6E32               	movwf	diet_press@sum+1,c
  7572  00E852  0E0F               	movlw	15
  7573  00E854  D12E               	goto	L66
  7574  00E856                     l381:
  7575                           
  7576                           ;standbyMode.c: 746: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7577  00E856  0E07               	movlw	7
  7578  00E858  1834               	xorwf	diet_press@dietTable,w,c
  7579  00E85A  1035               	iorwf	diet_press@dietTable+1,w,c
  7580  00E85C  A4D8               	btfss	status,2,c
  7581  00E85E  D011               	goto	l383
  7582  00E860  0E0C               	movlw	12
  7583  00E862  1836               	xorwf	diet_press@dietTable+2,w,c
  7584  00E864  1037               	iorwf	diet_press@dietTable+3,w,c
  7585  00E866  A4D8               	btfss	status,2,c
  7586  00E868  D00C               	goto	l383
  7587  00E86A  5038               	movf	diet_press@dietTable+4,w,c
  7588  00E86C  1039               	iorwf	diet_press@dietTable+5,w,c
  7589  00E86E  A4D8               	btfss	status,2,c
  7590  00E870  D008               	goto	l383
  7591  00E872  503A               	movf	diet_press@dietTable+6,w,c
  7592  00E874  103B               	iorwf	diet_press@dietTable+7,w,c
  7593  00E876  A4D8               	btfss	status,2,c
  7594  00E878  D004               	goto	l383
  7595                           
  7596                           ;standbyMode.c: 747: sum = 19;
  7597  00E87A  0E00               	movlw	0
  7598  00E87C  6E32               	movwf	diet_press@sum+1,c
  7599  00E87E  0E13               	movlw	19
  7600  00E880  D118               	goto	L66
  7601  00E882                     l383:
  7602                           
  7603                           ;standbyMode.c: 751: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7604  00E882  0E03               	movlw	3
  7605  00E884  1834               	xorwf	diet_press@dietTable,w,c
  7606  00E886  1035               	iorwf	diet_press@dietTable+1,w,c
  7607  00E888  A4D8               	btfss	status,2,c
  7608  00E88A  D012               	goto	l385
  7609  00E88C  0E03               	movlw	3
  7610  00E88E  1836               	xorwf	diet_press@dietTable+2,w,c
  7611  00E890  1037               	iorwf	diet_press@dietTable+3,w,c
  7612  00E892  A4D8               	btfss	status,2,c
  7613  00E894  D00D               	goto	l385
  7614  00E896  0E07               	movlw	7
  7615  00E898  1838               	xorwf	diet_press@dietTable+4,w,c
  7616  00E89A  1039               	iorwf	diet_press@dietTable+5,w,c
  7617  00E89C  A4D8               	btfss	status,2,c
  7618  00E89E  D008               	goto	l385
  7619  00E8A0  503A               	movf	diet_press@dietTable+6,w,c
  7620  00E8A2  103B               	iorwf	diet_press@dietTable+7,w,c
  7621  00E8A4  A4D8               	btfss	status,2,c
  7622  00E8A6  D004               	goto	l385
  7623                           
  7624                           ;standbyMode.c: 752: sum = 13;
  7625  00E8A8  0E00               	movlw	0
  7626  00E8AA  6E32               	movwf	diet_press@sum+1,c
  7627  00E8AC  0E0D               	movlw	13
  7628  00E8AE  D101               	goto	L66
  7629  00E8B0                     l385:
  7630                           
  7631                           ;standbyMode.c: 756: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7632  00E8B0  0E03               	movlw	3
  7633  00E8B2  1834               	xorwf	diet_press@dietTable,w,c
  7634  00E8B4  1035               	iorwf	diet_press@dietTable+1,w,c
  7635  00E8B6  A4D8               	btfss	status,2,c
  7636  00E8B8  D012               	goto	l387
  7637  00E8BA  0E03               	movlw	3
  7638  00E8BC  1836               	xorwf	diet_press@dietTable+2,w,c
  7639  00E8BE  1037               	iorwf	diet_press@dietTable+3,w,c
  7640  00E8C0  A4D8               	btfss	status,2,c
  7641  00E8C2  D00D               	goto	l387
  7642  00E8C4  0E0C               	movlw	12
  7643  00E8C6  1838               	xorwf	diet_press@dietTable+4,w,c
  7644  00E8C8  1039               	iorwf	diet_press@dietTable+5,w,c
  7645  00E8CA  A4D8               	btfss	status,2,c
  7646  00E8CC  D008               	goto	l387
  7647  00E8CE  503A               	movf	diet_press@dietTable+6,w,c
  7648  00E8D0  103B               	iorwf	diet_press@dietTable+7,w,c
  7649  00E8D2  A4D8               	btfss	status,2,c
  7650  00E8D4  D004               	goto	l387
  7651                           
  7652                           ;standbyMode.c: 757: sum = 18;
  7653  00E8D6  0E00               	movlw	0
  7654  00E8D8  6E32               	movwf	diet_press@sum+1,c
  7655  00E8DA  0E12               	movlw	18
  7656  00E8DC  D0EA               	goto	L66
  7657  00E8DE                     l387:
  7658                           
  7659                           ;standbyMode.c: 761: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7660  00E8DE  0E03               	movlw	3
  7661  00E8E0  1834               	xorwf	diet_press@dietTable,w,c
  7662  00E8E2  1035               	iorwf	diet_press@dietTable+1,w,c
  7663  00E8E4  A4D8               	btfss	status,2,c
  7664  00E8E6  D012               	goto	l389
  7665  00E8E8  0E07               	movlw	7
  7666  00E8EA  1836               	xorwf	diet_press@dietTable+2,w,c
  7667  00E8EC  1037               	iorwf	diet_press@dietTable+3,w,c
  7668  00E8EE  A4D8               	btfss	status,2,c
  7669  00E8F0  D00D               	goto	l389
  7670  00E8F2  0E07               	movlw	7
  7671  00E8F4  1838               	xorwf	diet_press@dietTable+4,w,c
  7672  00E8F6  1039               	iorwf	diet_press@dietTable+5,w,c
  7673  00E8F8  A4D8               	btfss	status,2,c
  7674  00E8FA  D008               	goto	l389
  7675  00E8FC  503A               	movf	diet_press@dietTable+6,w,c
  7676  00E8FE  103B               	iorwf	diet_press@dietTable+7,w,c
  7677  00E900  A4D8               	btfss	status,2,c
  7678  00E902  D004               	goto	l389
  7679                           
  7680                           ;standbyMode.c: 762: sum = 17;
  7681  00E904  0E00               	movlw	0
  7682  00E906  6E32               	movwf	diet_press@sum+1,c
  7683  00E908  0E11               	movlw	17
  7684  00E90A  D0D3               	goto	L66
  7685  00E90C                     l389:
  7686                           
  7687                           ;standbyMode.c: 766: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7688  00E90C  0E03               	movlw	3
  7689  00E90E  1834               	xorwf	diet_press@dietTable,w,c
  7690  00E910  1035               	iorwf	diet_press@dietTable+1,w,c
  7691  00E912  A4D8               	btfss	status,2,c
  7692  00E914  D012               	goto	l391
  7693  00E916  0E0C               	movlw	12
  7694  00E918  1836               	xorwf	diet_press@dietTable+2,w,c
  7695  00E91A  1037               	iorwf	diet_press@dietTable+3,w,c
  7696  00E91C  A4D8               	btfss	status,2,c
  7697  00E91E  D00D               	goto	l391
  7698  00E920  0E0C               	movlw	12
  7699  00E922  1838               	xorwf	diet_press@dietTable+4,w,c
  7700  00E924  1039               	iorwf	diet_press@dietTable+5,w,c
  7701  00E926  A4D8               	btfss	status,2,c
  7702  00E928  D008               	goto	l391
  7703  00E92A  503A               	movf	diet_press@dietTable+6,w,c
  7704  00E92C  103B               	iorwf	diet_press@dietTable+7,w,c
  7705  00E92E  A4D8               	btfss	status,2,c
  7706  00E930  D004               	goto	l391
  7707                           
  7708                           ;standbyMode.c: 767: sum = 27;
  7709  00E932  0E00               	movlw	0
  7710  00E934  6E32               	movwf	diet_press@sum+1,c
  7711  00E936  0E1B               	movlw	27
  7712  00E938  D0BC               	goto	L66
  7713  00E93A                     l391:
  7714                           
  7715                           ;standbyMode.c: 771: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7716  00E93A  0E03               	movlw	3
  7717  00E93C  1834               	xorwf	diet_press@dietTable,w,c
  7718  00E93E  1035               	iorwf	diet_press@dietTable+1,w,c
  7719  00E940  A4D8               	btfss	status,2,c
  7720  00E942  D012               	goto	l393
  7721  00E944  0E07               	movlw	7
  7722  00E946  1836               	xorwf	diet_press@dietTable+2,w,c
  7723  00E948  1037               	iorwf	diet_press@dietTable+3,w,c
  7724  00E94A  A4D8               	btfss	status,2,c
  7725  00E94C  D00D               	goto	l393
  7726  00E94E  0E0C               	movlw	12
  7727  00E950  1838               	xorwf	diet_press@dietTable+4,w,c
  7728  00E952  1039               	iorwf	diet_press@dietTable+5,w,c
  7729  00E954  A4D8               	btfss	status,2,c
  7730  00E956  D008               	goto	l393
  7731  00E958  503A               	movf	diet_press@dietTable+6,w,c
  7732  00E95A  103B               	iorwf	diet_press@dietTable+7,w,c
  7733  00E95C  A4D8               	btfss	status,2,c
  7734  00E95E  D004               	goto	l393
  7735                           
  7736                           ;standbyMode.c: 772: sum = 22;
  7737  00E960  0E00               	movlw	0
  7738  00E962  6E32               	movwf	diet_press@sum+1,c
  7739  00E964  0E16               	movlw	22
  7740  00E966  D0A5               	goto	L66
  7741  00E968                     l393:
  7742                           
  7743                           ;standbyMode.c: 776: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7744  00E968  0E07               	movlw	7
  7745  00E96A  1834               	xorwf	diet_press@dietTable,w,c
  7746  00E96C  1035               	iorwf	diet_press@dietTable+1,w,c
  7747  00E96E  A4D8               	btfss	status,2,c
  7748  00E970  D012               	goto	l395
  7749  00E972  0E07               	movlw	7
  7750  00E974  1836               	xorwf	diet_press@dietTable+2,w,c
  7751  00E976  1037               	iorwf	diet_press@dietTable+3,w,c
  7752  00E978  A4D8               	btfss	status,2,c
  7753  00E97A  D00D               	goto	l395
  7754  00E97C  0E0C               	movlw	12
  7755  00E97E  1838               	xorwf	diet_press@dietTable+4,w,c
  7756  00E980  1039               	iorwf	diet_press@dietTable+5,w,c
  7757  00E982  A4D8               	btfss	status,2,c
  7758  00E984  D008               	goto	l395
  7759  00E986  503A               	movf	diet_press@dietTable+6,w,c
  7760  00E988  103B               	iorwf	diet_press@dietTable+7,w,c
  7761  00E98A  A4D8               	btfss	status,2,c
  7762  00E98C  D004               	goto	l395
  7763                           
  7764                           ;standbyMode.c: 777: sum = 26;
  7765  00E98E  0E00               	movlw	0
  7766  00E990  6E32               	movwf	diet_press@sum+1,c
  7767  00E992  0E1A               	movlw	26
  7768  00E994  D08E               	goto	L66
  7769  00E996                     l395:
  7770                           
  7771                           ;standbyMode.c: 781: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7772  00E996  0E07               	movlw	7
  7773  00E998  1834               	xorwf	diet_press@dietTable,w,c
  7774  00E99A  1035               	iorwf	diet_press@dietTable+1,w,c
  7775  00E99C  A4D8               	btfss	status,2,c
  7776  00E99E  D012               	goto	l397
  7777  00E9A0  0E0C               	movlw	12
  7778  00E9A2  1836               	xorwf	diet_press@dietTable+2,w,c
  7779  00E9A4  1037               	iorwf	diet_press@dietTable+3,w,c
  7780  00E9A6  A4D8               	btfss	status,2,c
  7781  00E9A8  D00D               	goto	l397
  7782  00E9AA  0E0C               	movlw	12
  7783  00E9AC  1838               	xorwf	diet_press@dietTable+4,w,c
  7784  00E9AE  1039               	iorwf	diet_press@dietTable+5,w,c
  7785  00E9B0  A4D8               	btfss	status,2,c
  7786  00E9B2  D008               	goto	l397
  7787  00E9B4  503A               	movf	diet_press@dietTable+6,w,c
  7788  00E9B6  103B               	iorwf	diet_press@dietTable+7,w,c
  7789  00E9B8  A4D8               	btfss	status,2,c
  7790  00E9BA  D004               	goto	l397
  7791                           
  7792                           ;standbyMode.c: 782: sum = 31;
  7793  00E9BC  0E00               	movlw	0
  7794  00E9BE  6E32               	movwf	diet_press@sum+1,c
  7795  00E9C0  0E1F               	movlw	31
  7796  00E9C2  D077               	goto	L66
  7797  00E9C4                     l397:
  7798                           
  7799                           ;standbyMode.c: 786: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  7800  00E9C4  0E03               	movlw	3
  7801  00E9C6  1834               	xorwf	diet_press@dietTable,w,c
  7802  00E9C8  1035               	iorwf	diet_press@dietTable+1,w,c
  7803  00E9CA  A4D8               	btfss	status,2,c
  7804  00E9CC  D013               	goto	l399
  7805  00E9CE  0E03               	movlw	3
  7806  00E9D0  1836               	xorwf	diet_press@dietTable+2,w,c
  7807  00E9D2  1037               	iorwf	diet_press@dietTable+3,w,c
  7808  00E9D4  A4D8               	btfss	status,2,c
  7809  00E9D6  D00E               	goto	l399
  7810  00E9D8  0E07               	movlw	7
  7811  00E9DA  1838               	xorwf	diet_press@dietTable+4,w,c
  7812  00E9DC  1039               	iorwf	diet_press@dietTable+5,w,c
  7813  00E9DE  A4D8               	btfss	status,2,c
  7814  00E9E0  D009               	goto	l399
  7815  00E9E2  0E0C               	movlw	12
  7816  00E9E4  183A               	xorwf	diet_press@dietTable+6,w,c
  7817  00E9E6  103B               	iorwf	diet_press@dietTable+7,w,c
  7818  00E9E8  A4D8               	btfss	status,2,c
  7819  00E9EA  D004               	goto	l399
  7820                           
  7821                           ;standbyMode.c: 787: sum = 25;
  7822  00E9EC  0E00               	movlw	0
  7823  00E9EE  6E32               	movwf	diet_press@sum+1,c
  7824  00E9F0  0E19               	movlw	25
  7825  00E9F2  D05F               	goto	L66
  7826  00E9F4                     l399:
  7827                           
  7828                           ;standbyMode.c: 791: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  7829  00E9F4  0E03               	movlw	3
  7830  00E9F6  1834               	xorwf	diet_press@dietTable,w,c
  7831  00E9F8  1035               	iorwf	diet_press@dietTable+1,w,c
  7832  00E9FA  A4D8               	btfss	status,2,c
  7833  00E9FC  D013               	goto	l401
  7834  00E9FE  0E07               	movlw	7
  7835  00EA00  1836               	xorwf	diet_press@dietTable+2,w,c
  7836  00EA02  1037               	iorwf	diet_press@dietTable+3,w,c
  7837  00EA04  A4D8               	btfss	status,2,c
  7838  00EA06  D00E               	goto	l401
  7839  00EA08  0E07               	movlw	7
  7840  00EA0A  1838               	xorwf	diet_press@dietTable+4,w,c
  7841  00EA0C  1039               	iorwf	diet_press@dietTable+5,w,c
  7842  00EA0E  A4D8               	btfss	status,2,c
  7843  00EA10  D009               	goto	l401
  7844  00EA12  0E0C               	movlw	12
  7845  00EA14  183A               	xorwf	diet_press@dietTable+6,w,c
  7846  00EA16  103B               	iorwf	diet_press@dietTable+7,w,c
  7847  00EA18  A4D8               	btfss	status,2,c
  7848  00EA1A  D004               	goto	l401
  7849                           
  7850                           ;standbyMode.c: 792: sum = 29;
  7851  00EA1C  0E00               	movlw	0
  7852  00EA1E  6E32               	movwf	diet_press@sum+1,c
  7853  00EA20  0E1D               	movlw	29
  7854  00EA22  D047               	goto	L66
  7855  00EA24                     l401:
  7856                           
  7857                           ;standbyMode.c: 796: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  7858  00EA24  0E03               	movlw	3
  7859  00EA26  1834               	xorwf	diet_press@dietTable,w,c
  7860  00EA28  1035               	iorwf	diet_press@dietTable+1,w,c
  7861  00EA2A  A4D8               	btfss	status,2,c
  7862  00EA2C  D013               	goto	l403
  7863  00EA2E  0E07               	movlw	7
  7864  00EA30  1836               	xorwf	diet_press@dietTable+2,w,c
  7865  00EA32  1037               	iorwf	diet_press@dietTable+3,w,c
  7866  00EA34  A4D8               	btfss	status,2,c
  7867  00EA36  D00E               	goto	l403
  7868  00EA38  0E0C               	movlw	12
  7869  00EA3A  1838               	xorwf	diet_press@dietTable+4,w,c
  7870  00EA3C  1039               	iorwf	diet_press@dietTable+5,w,c
  7871  00EA3E  A4D8               	btfss	status,2,c
  7872  00EA40  D009               	goto	l403
  7873  00EA42  0E0C               	movlw	12
  7874  00EA44  183A               	xorwf	diet_press@dietTable+6,w,c
  7875  00EA46  103B               	iorwf	diet_press@dietTable+7,w,c
  7876  00EA48  A4D8               	btfss	status,2,c
  7877  00EA4A  D004               	goto	l403
  7878                           
  7879                           ;standbyMode.c: 797: sum = 34;
  7880  00EA4C  0E00               	movlw	0
  7881  00EA4E  6E32               	movwf	diet_press@sum+1,c
  7882  00EA50  0E22               	movlw	34
  7883  00EA52  D02F               	goto	L66
  7884  00EA54                     l403:
  7885                           
  7886                           ;standbyMode.c: 801: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  7887  00EA54  0E03               	movlw	3
  7888  00EA56  1834               	xorwf	diet_press@dietTable,w,c
  7889  00EA58  1035               	iorwf	diet_press@dietTable+1,w,c
  7890  00EA5A  A4D8               	btfss	status,2,c
  7891  00EA5C  D013               	goto	l405
  7892  00EA5E  0E0C               	movlw	12
  7893  00EA60  1836               	xorwf	diet_press@dietTable+2,w,c
  7894  00EA62  1037               	iorwf	diet_press@dietTable+3,w,c
  7895  00EA64  A4D8               	btfss	status,2,c
  7896  00EA66  D00E               	goto	l405
  7897  00EA68  0E0C               	movlw	12
  7898  00EA6A  1838               	xorwf	diet_press@dietTable+4,w,c
  7899  00EA6C  1039               	iorwf	diet_press@dietTable+5,w,c
  7900  00EA6E  A4D8               	btfss	status,2,c
  7901  00EA70  D009               	goto	l405
  7902  00EA72  0E0C               	movlw	12
  7903  00EA74  183A               	xorwf	diet_press@dietTable+6,w,c
  7904  00EA76  103B               	iorwf	diet_press@dietTable+7,w,c
  7905  00EA78  A4D8               	btfss	status,2,c
  7906  00EA7A  D004               	goto	l405
  7907                           
  7908                           ;standbyMode.c: 802: sum = 39;
  7909  00EA7C  0E00               	movlw	0
  7910  00EA7E  6E32               	movwf	diet_press@sum+1,c
  7911  00EA80  0E27               	movlw	39
  7912  00EA82  D017               	goto	L66
  7913  00EA84                     l405:
  7914                           
  7915                           ;standbyMode.c: 806: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  7916  00EA84  0E07               	movlw	7
  7917  00EA86  1834               	xorwf	diet_press@dietTable,w,c
  7918  00EA88  1035               	iorwf	diet_press@dietTable+1,w,c
  7919  00EA8A  A4D8               	btfss	status,2,c
  7920  00EA8C  D014               	goto	l407
  7921  00EA8E  0E0C               	movlw	12
  7922  00EA90  1836               	xorwf	diet_press@dietTable+2,w,c
  7923  00EA92  1037               	iorwf	diet_press@dietTable+3,w,c
  7924  00EA94  A4D8               	btfss	status,2,c
  7925  00EA96  D00F               	goto	l407
  7926  00EA98  0E0C               	movlw	12
  7927  00EA9A  1838               	xorwf	diet_press@dietTable+4,w,c
  7928  00EA9C  1039               	iorwf	diet_press@dietTable+5,w,c
  7929  00EA9E  A4D8               	btfss	status,2,c
  7930  00EAA0  D00A               	goto	l407
  7931  00EAA2  0E0C               	movlw	12
  7932  00EAA4  183A               	xorwf	diet_press@dietTable+6,w,c
  7933  00EAA6  103B               	iorwf	diet_press@dietTable+7,w,c
  7934  00EAA8  A4D8               	btfss	status,2,c
  7935  00EAAA  D005               	goto	l407
  7936                           
  7937                           ;standbyMode.c: 807: sum = 43;
  7938  00EAAC  0E00               	movlw	0
  7939  00EAAE  6E32               	movwf	diet_press@sum+1,c
  7940  00EAB0  0E2B               	movlw	43
  7941  00EAB2                     L66:
  7942  00EAB2  6E31               	movwf	diet_press@sum,c
  7943                           
  7944                           ;standbyMode.c: 808: }
  7945  00EAB4  D02A               	goto	l408
  7946  00EAB6                     l407:
  7947                           
  7948                           ;standbyMode.c: 811: else{
  7949                           ;standbyMode.c: 812: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7950  00EAB6  0E01               	movlw	1
  7951  00EAB8  EC6C  F069         	call	_lcdInst
  7952  00EABC  0EC3               	movlw	195
  7953  00EABE  6E27               	movwf	??_diet_press& (0+255),c
  7954  00EAC0  0ECD               	movlw	205
  7955  00EAC2                     u7117:
  7956  00EAC2  2EE8               	decfsz	wreg,f,c
  7957  00EAC4  D7FE               	bra	u7117
  7958  00EAC6  2E27               	decfsz	??_diet_press& (0+255),f,c
  7959  00EAC8  D7FC               	bra	u7117
  7960  00EACA  F000               	nop	
  7961                           
  7962                           ;standbyMode.c: 813: printf("Invalid diet!");
  7963  00EACC  0E14               	movlw	low STR_35
  7964  00EACE  6E0D               	movwf	printf@f,c
  7965  00EAD0  0EFF               	movlw	high STR_35
  7966  00EAD2  6E0E               	movwf	printf@f+1,c
  7967  00EAD4  EC7A  F06F         	call	_printf	;wreg free
  7968                           
  7969                           ;standbyMode.c: 814: lcdInst(0xC0);;
  7970  00EAD8  0EC0               	movlw	192
  7971  00EADA  EC6C  F069         	call	_lcdInst
  7972                           
  7973                           ;standbyMode.c: 815: printf("Try again.");
  7974  00EADE  0EA0               	movlw	low STR_32
  7975  00EAE0  6E0D               	movwf	printf@f,c
  7976  00EAE2  0EFF               	movlw	high STR_32
  7977  00EAE4  6E0E               	movwf	printf@f+1,c
  7978  00EAE6  EC7A  F06F         	call	_printf	;wreg free
  7979                           
  7980                           ;standbyMode.c: 816: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7981  00EAEA  0E33               	movlw	51
  7982  00EAEC  6E28               	movwf	(??_diet_press+1)& (0+255),c
  7983  00EAEE  0EBB               	movlw	187
  7984  00EAF0  6E27               	movwf	??_diet_press& (0+255),c
  7985  00EAF2  0EE0               	movlw	224
  7986  00EAF4                     u7127:
  7987  00EAF4  2EE8               	decfsz	wreg,f,c
  7988  00EAF6  D7FE               	bra	u7127
  7989  00EAF8  2E27               	decfsz	??_diet_press& (0+255),f,c
  7990  00EAFA  D7FC               	bra	u7127
  7991  00EAFC  2E28               	decfsz	(??_diet_press+1)& (0+255),f,c
  7992  00EAFE  D7FA               	bra	u7127
  7993                           
  7994                           ;standbyMode.c: 817: sum = 0;
  7995  00EB00  0E00               	movlw	0
  7996  00EB02  6E32               	movwf	diet_press@sum+1,c
  7997  00EB04  0E00               	movlw	0
  7998  00EB06  6E31               	movwf	diet_press@sum,c
  7999                           
  8000                           ;standbyMode.c: 818: goto START;
  8001  00EB08  D572               	goto	_diet_press
  8002  00EB0A                     l408:
  8003                           
  8004                           ;standbyMode.c: 819: }
  8005                           ;standbyMode.c: 820: return sum;
  8006  00EB0A  C031  F025         	movff	diet_press@sum,?_diet_press
  8007  00EB0E  C032  F026         	movff	diet_press@sum+1,?_diet_press+1
  8008  00EB12  0012               	return		;funcret
  8009  00EB14                     __end_of_diet_press:
  8010                           	opt stack 0
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           prodh	equ	0xFF4
  8016                           prodl	equ	0xFF3
  8017                           intcon	equ	0xFF2
  8018                           postinc0	equ	0xFEE
  8019                           wreg	equ	0xFE8
  8020                           plusw1	equ	0xFE3
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           plusw2	equ	0xFDB
  8025                           fsr2h	equ	0xFDA
  8026                           fsr2l	equ	0xFD9
  8027                           status	equ	0xFD8
  8028                           
  8029 ;; *************** function _printf *****************
  8030 ;; Defined at:
  8031 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8034 ;;		 -> STR_70(11), STR_69(13), STR_68(11), STR_67(13), 
  8035 ;;		 -> STR_66(11), STR_65(8), STR_64(15), STR_63(16), 
  8036 ;;		 -> STR_62(10), STR_61(8), STR_60(15), STR_59(16), 
  8037 ;;		 -> STR_58(10), STR_57(16), STR_56(16), STR_55(17), 
  8038 ;;		 -> STR_54(13), STR_53(17), STR_52(14), STR_51(11), 
  8039 ;;		 -> STR_50(11), STR_49(15), STR_48(15), STR_47(10), 
  8040 ;;		 -> STR_46(13), STR_45(16), STR_44(16), STR_43(15), 
  8041 ;;		 -> STR_42(15), STR_41(17), STR_40(17), STR_39(8), 
  8042 ;;		 -> STR_38(15), STR_37(15), STR_36(11), STR_35(14), 
  8043 ;;		 -> STR_34(16), STR_33(16), STR_32(11), STR_31(14), 
  8044 ;;		 -> STR_30(16), STR_29(16), STR_28(16), STR_27(13), 
  8045 ;;		 -> STR_26(13), STR_25(15), STR_24(15), STR_23(17), 
  8046 ;;		 -> STR_22(18), STR_21(15), STR_20(11), STR_19(7), 
  8047 ;;		 -> STR_18(3), STR_17(16), STR_16(6), STR_15(7), 
  8048 ;;		 -> STR_14(16), STR_13(14), STR_12(17), STR_11(7), 
  8049 ;;		 -> STR_10(9), STR_9(17), STR_8(11), STR_7(17), 
  8050 ;;		 -> STR_6(14), STR_5(17), STR_4(11), STR_3(15), 
  8051 ;;		 -> STR_2(11), STR_1(8), 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  idx             1   26[COMRAM] unsigned char 
  8054 ;;  tmpval          4    0        struct .
  8055 ;;  cp              3    0        PTR const unsigned char 
  8056 ;;  width           2   33[COMRAM] int 
  8057 ;;  val             2   30[COMRAM] unsigned int 
  8058 ;;  ap              2   27[COMRAM] PTR void [1]
  8059 ;;		 -> ?_printf(2), 
  8060 ;;  len             2    0        unsigned int 
  8061 ;;  c               1   35[COMRAM] char 
  8062 ;;  flag            1   32[COMRAM] unsigned char 
  8063 ;;  prec            1   29[COMRAM] char 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  2   12[COMRAM] int 
  8066 ;; Registers used:
  8067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8073 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;Total ram usage:       24 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    2
  8080 ;; This function calls:
  8081 ;;		___lwdiv
  8082 ;;		___lwmod
  8083 ;;		___wmul
  8084 ;;		_isdigit
  8085 ;;		_putch
  8086 ;; This function is called by:
  8087 ;;		_viewLogs
  8088 ;;		_displayLogs
  8089 ;;		_food_press
  8090 ;;		_diet_press
  8091 ;;		_which_drawer
  8092 ;;		_standbyMode
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text13
  8097  00DEF4                     __ptext13:
  8098                           	opt stack 0
  8099  00DEF4                     _printf:
  8100                           	opt stack 26
  8101                           
  8102                           ;doprnt.c: 466: va_list ap;
  8103                           ;doprnt.c: 499: signed char c;
  8104                           ;doprnt.c: 501: int width;
  8105                           ;doprnt.c: 506: signed char prec;
  8106                           ;doprnt.c: 508: unsigned char flag;
  8107                           ;doprnt.c: 523: union {
  8108                           ;doprnt.c: 524: unsigned long vd;
  8109                           ;doprnt.c: 525: double integ;
  8110                           ;doprnt.c: 526: } tmpval;
  8111                           ;doprnt.c: 528: unsigned int val;
  8112                           ;doprnt.c: 529: unsigned len;
  8113                           ;doprnt.c: 530: const char * cp;
  8114                           ;doprnt.c: 533: *ap = __va_start();
  8115                           
  8116                           ;incstack = 0
  8117  00DEF4  0E0F               	movlw	low (?_printf+2)
  8118  00DEF6  6E1C               	movwf	printf@ap,c
  8119  00DEF8  0E00               	movlw	high (?_printf+2)
  8120  00DEFA  6E1D               	movwf	printf@ap+1,c
  8121                           
  8122                           ;doprnt.c: 536: while(c = *f++) {
  8123  00DEFC  D174               	goto	u3520
  8124  00DEFE                     
  8125                           ;doprnt.c: 538: if(c != '%')
  8126  00DEFE  0E25               	movlw	37
  8127  00DF00  1824               	xorwf	printf@c,w,c
  8128  00DF02  B4D8               	btfsc	status,2,c
  8129  00DF04  D004               	goto	l616
  8130                           
  8131                           ;doprnt.c: 540: {
  8132                           ;doprnt.c: 541: (putch(c) );
  8133  00DF06  5024               	movf	printf@c,w,c
  8134  00DF08  EC76  F069         	call	_putch
  8135                           
  8136                           ;doprnt.c: 542: continue;
  8137  00DF0C  D16C               	goto	u3520
  8138  00DF0E                     l616:
  8139                           
  8140                           ;doprnt.c: 543: }
  8141                           ;doprnt.c: 546: width = 0;
  8142  00DF0E  0E00               	movlw	0
  8143  00DF10  6E23               	movwf	printf@width+1,c
  8144  00DF12  0E00               	movlw	0
  8145  00DF14  6E22               	movwf	printf@width,c
  8146                           
  8147                           ;doprnt.c: 548: flag = 0;
  8148  00DF16  0E00               	movlw	0
  8149  00DF18  6E21               	movwf	printf@flag,c
  8150                           
  8151                           ;doprnt.c: 551: switch(*f) {
  8152                           
  8153                           ;doprnt.c: 550: for(;;) {
  8154  00DF1A  D003               	goto	l618
  8155  00DF1C                     
  8156                           ;doprnt.c: 580: flag |= 0x04;
  8157  00DF1C  8421               	bsf	printf@flag,2,c
  8158                           
  8159                           ;doprnt.c: 581: f++;
  8160  00DF1E  4A0D               	infsnz	printf@f,f,c
  8161  00DF20  2A0E               	incf	printf@f+1,f,c
  8162  00DF22                     l618:
  8163  00DF22  C00D  FFF6         	movff	printf@f,tblptrl
  8164  00DF26  C00E  FFF7         	movff	printf@f+1,tblptrh
  8165  00DF2A                     	if	0	;tblptru may be non-zero
  8166  00DF2A                     	endif
  8167  00DF2A                     	if	0	;tblptru may be non-zero
  8168  00DF2A                     	endif
  8169  00DF2A  0008               	tblrd		*
  8170  00DF2C  50F5               	movf	tablat,w,c
  8171                           
  8172                           ; Switch size 1, requested type "space"
  8173                           ; Number of cases is 1, Range of values is 48 to 48
  8174                           ; switch strategies available:
  8175                           ; Name         Instructions Cycles
  8176                           ; simple_byte            4     3 (average)
  8177                           ;	Chosen strategy is simple_byte
  8178  00DF2E  0A30               	xorlw	48	; case 48
  8179  00DF30  B4D8               	btfsc	status,2,c
  8180  00DF32  D7F4               	goto	l619
  8181                           
  8182                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8183                           
  8184                           ;doprnt.c: 586: }
  8185                           
  8186                           ;doprnt.c: 585: break;
  8187  00DF34  C00D  FFF6         	movff	printf@f,tblptrl
  8188  00DF38  C00E  FFF7         	movff	printf@f+1,tblptrh
  8189  00DF3C                     	if	0	;tblptru may be non-zero
  8190  00DF3C                     	endif
  8191  00DF3C                     	if	0	;tblptru may be non-zero
  8192  00DF3C                     	endif
  8193  00DF3C  0008               	tblrd		*
  8194  00DF3E  50F5               	movf	tablat,w,c
  8195  00DF40  EC8A  F069         	call	_isdigit
  8196  00DF44  A0D8               	btfss	status,0,c
  8197  00DF46  D035               	goto	l626
  8198                           
  8199                           ;doprnt.c: 598: width = 0;
  8200  00DF48  0E00               	movlw	0
  8201  00DF4A  6E23               	movwf	printf@width+1,c
  8202  00DF4C  0E00               	movlw	0
  8203  00DF4E  6E22               	movwf	printf@width,c
  8204  00DF50                     
  8205                           ;doprnt.c: 600: width *= 10;
  8206  00DF50  C022  F001         	movff	printf@width,___wmul@multiplier
  8207  00DF54  C023  F002         	movff	printf@width+1,___wmul@multiplier+1
  8208  00DF58  0E00               	movlw	0
  8209  00DF5A  6E04               	movwf	___wmul@multiplicand+1,c
  8210  00DF5C  0E0A               	movlw	10
  8211  00DF5E  6E03               	movwf	___wmul@multiplicand,c
  8212  00DF60  ECBC  F069         	call	___wmul	;wreg free
  8213  00DF64  C001  F022         	movff	?___wmul,printf@width
  8214  00DF68  C002  F023         	movff	?___wmul+1,printf@width+1
  8215                           
  8216                           ;doprnt.c: 601: width += *f++ - '0';
  8217  00DF6C  0ED0               	movlw	208
  8218  00DF6E  6E17               	movwf	??_printf& (0+255),c
  8219  00DF70  0EFF               	movlw	255
  8220  00DF72  6E18               	movwf	(??_printf+1)& (0+255),c
  8221  00DF74  C00D  FFF6         	movff	printf@f,tblptrl
  8222  00DF78  C00E  FFF7         	movff	printf@f+1,tblptrh
  8223  00DF7C                     	if	0	;tblptru may be non-zero
  8224  00DF7C                     	endif
  8225  00DF7C                     	if	0	;tblptru may be non-zero
  8226  00DF7C                     	endif
  8227  00DF7C  0008               	tblrd		*
  8228  00DF7E  50F5               	movf	tablat,w,c
  8229  00DF80  6E19               	movwf	(??_printf+2)& (0+255),c
  8230  00DF82  6A1A               	clrf	(??_printf+3)& (0+255),c
  8231  00DF84  5017               	movf	??_printf,w,c
  8232  00DF86  2619               	addwf	??_printf+2,f,c
  8233  00DF88  5018               	movf	??_printf+1,w,c
  8234  00DF8A  221A               	addwfc	??_printf+3,f,c
  8235  00DF8C  5019               	movf	??_printf+2,w,c
  8236  00DF8E  2622               	addwf	printf@width,f,c
  8237  00DF90  501A               	movf	??_printf+3,w,c
  8238  00DF92  2223               	addwfc	printf@width+1,f,c
  8239  00DF94  4A0D               	infsnz	printf@f,f,c
  8240  00DF96  2A0E               	incf	printf@f+1,f,c
  8241                           
  8242                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8243  00DF98  C00D  FFF6         	movff	printf@f,tblptrl
  8244  00DF9C  C00E  FFF7         	movff	printf@f+1,tblptrh
  8245  00DFA0                     	if	0	;tblptru may be non-zero
  8246  00DFA0                     	endif
  8247  00DFA0                     	if	0	;tblptru may be non-zero
  8248  00DFA0                     	endif
  8249  00DFA0  0008               	tblrd		*
  8250  00DFA2  50F5               	movf	tablat,w,c
  8251  00DFA4  EC8A  F069         	call	_isdigit
  8252  00DFA8  A0D8               	btfss	status,0,c
  8253  00DFAA  D003               	goto	l626
  8254  00DFAC  D7D1               	goto	l624
  8255  00DFAE                     
  8256                           ;doprnt.c: 721: flag |= 0x80;
  8257  00DFAE  8E21               	bsf	printf@flag,7,c
  8258                           
  8259                           ;doprnt.c: 723: break;
  8260  00DFB0  D017               	goto	l631
  8261  00DFB2                     l626:
  8262  00DFB2  C00D  FFF6         	movff	printf@f,tblptrl
  8263  00DFB6  C00E  FFF7         	movff	printf@f+1,tblptrh
  8264  00DFBA  4A0D               	infsnz	printf@f,f,c
  8265  00DFBC  2A0E               	incf	printf@f+1,f,c
  8266  00DFBE                     	if	0	;tblptru may be non-zero
  8267  00DFBE                     	endif
  8268  00DFBE                     	if	0	;tblptru may be non-zero
  8269  00DFBE                     	endif
  8270  00DFBE  0008               	tblrd		*
  8271  00DFC0  CFF5 F024          	movff	tablat,printf@c
  8272  00DFC4  5024               	movf	printf@c,w,c
  8273                           
  8274                           ; Switch size 1, requested type "space"
  8275                           ; Number of cases is 4, Range of values is 0 to 120
  8276                           ; switch strategies available:
  8277                           ; Name         Instructions Cycles
  8278                           ; simple_byte           13     7 (average)
  8279                           ;	Chosen strategy is simple_byte
  8280  00DFC6  0A00               	xorlw	0	; case 0
  8281  00DFC8  B4D8               	btfsc	status,2,c
  8282  00DFCA  0012               	return	
  8283  00DFCC  0A64               	xorlw	100	; case 100
  8284  00DFCE  B4D8               	btfsc	status,2,c
  8285  00DFD0  D007               	goto	l631
  8286  00DFD2  0A0D               	xorlw	13	; case 105
  8287  00DFD4  B4D8               	btfsc	status,2,c
  8288  00DFD6  D004               	goto	l631
  8289  00DFD8  0A11               	xorlw	17	; case 120
  8290  00DFDA  B4D8               	btfsc	status,2,c
  8291  00DFDC  D7E8               	goto	l632
  8292  00DFDE  D103               	goto	u3520
  8293  00DFE0                     l631:
  8294                           
  8295                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8296  00DFE0  BE21               	btfsc	printf@flag,7,c
  8297  00DFE2  D015               	goto	l634
  8298                           
  8299                           ;doprnt.c: 1253: {
  8300                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8301  00DFE4  C01C  FFD9         	movff	printf@ap,fsr2l
  8302  00DFE8  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8303  00DFEC  CFDE F01F          	movff	postinc2,printf@val
  8304  00DFF0  CFDD F020          	movff	postdec2,printf@val+1
  8305  00DFF4  0E02               	movlw	2
  8306  00DFF6  261C               	addwf	printf@ap,f,c
  8307  00DFF8  0E00               	movlw	0
  8308  00DFFA  221D               	addwfc	printf@ap+1,f,c
  8309                           
  8310                           ;doprnt.c: 1261: if((int)val < 0) {
  8311  00DFFC  AE20               	btfss	printf@val+1,7,c
  8312  00DFFE  D044               	goto	l637
  8313                           
  8314                           ;doprnt.c: 1262: flag |= 0x03;
  8315  00E000  0E03               	movlw	3
  8316  00E002  1221               	iorwf	printf@flag,f,c
  8317                           
  8318                           ;doprnt.c: 1263: val = -val;
  8319  00E004  6C1F               	negf	printf@val,c
  8320  00E006  1E20               	comf	printf@val+1,f,c
  8321  00E008  B0D8               	btfsc	status,0,c
  8322  00E00A  2A20               	incf	printf@val+1,f,c
  8323                           
  8324                           ;doprnt.c: 1264: }
  8325                           ;doprnt.c: 1266: }
  8326  00E00C  D03D               	goto	l637
  8327  00E00E                     l634:
  8328                           
  8329                           ;doprnt.c: 1268: else
  8330                           ;doprnt.c: 1273: {
  8331                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8332  00E00E  C01C  FFD9         	movff	printf@ap,fsr2l
  8333  00E012  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8334  00E016  CFDE F01F          	movff	postinc2,printf@val
  8335  00E01A  CFDD F020          	movff	postdec2,printf@val+1
  8336  00E01E  0E02               	movlw	2
  8337  00E020  261C               	addwf	printf@ap,f,c
  8338  00E022  0E00               	movlw	0
  8339  00E024  221D               	addwfc	printf@ap+1,f,c
  8340                           
  8341                           ;doprnt.c: 1287: }
  8342                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8343  00E026  D030               	goto	l637
  8344  00E028                     
  8345                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8346  00E028  0E01               	movlw	1
  8347  00E02A  6E24               	movwf	printf@c,c
  8348  00E02C                     l3305:
  8349  00E02C  0E05               	movlw	5
  8350  00E02E  1824               	xorwf	printf@c,w,c
  8351  00E030  B4D8               	btfsc	status,2,c
  8352  00E032  D032               	goto	l642
  8353                           
  8354                           ;doprnt.c: 1306: if(val < dpowers[c])
  8355  00E034  5024               	movf	printf@c,w,c
  8356  00E036  0D02               	mullw	2
  8357  00E038  0E47               	movlw	low _dpowers
  8358  00E03A  24F3               	addwf	prodl,w,c
  8359  00E03C  6EF6               	movwf	tblptrl,c
  8360  00E03E  0EFD               	movlw	high _dpowers
  8361  00E040  20F4               	addwfc	prodh,w,c
  8362  00E042  6EF7               	movwf	tblptrh,c
  8363  00E044                     	if	0	;There are less than 3 active tblptr bytes
  8364  00E044                     	endif
  8365  00E044  0009               	tblrd		*+
  8366  00E046  50F5               	movf	tablat,w,c
  8367  00E048  5C1F               	subwf	printf@val,w,c
  8368  00E04A  0009               	tblrd		*+
  8369  00E04C  50F5               	movf	tablat,w,c
  8370  00E04E  5820               	subwfb	printf@val+1,w,c
  8371  00E050  A0D8               	btfss	status,0,c
  8372  00E052  D022               	goto	l642
  8373                           
  8374                           ;doprnt.c: 1307: break;
  8375  00E054  2A24               	incf	printf@c,f,c
  8376  00E056  D7EA               	goto	l3305
  8377  00E058                     
  8378                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8379  00E058  0E01               	movlw	1
  8380  00E05A  6E24               	movwf	printf@c,c
  8381  00E05C                     l3319:
  8382  00E05C  0E04               	movlw	4
  8383  00E05E  1824               	xorwf	printf@c,w,c
  8384  00E060  B4D8               	btfsc	status,2,c
  8385  00E062  D01A               	goto	l642
  8386                           
  8387                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8388  00E064  5024               	movf	printf@c,w,c
  8389  00E066  0D02               	mullw	2
  8390  00E068  0E51               	movlw	low _hexpowers
  8391  00E06A  24F3               	addwf	prodl,w,c
  8392  00E06C  6EF6               	movwf	tblptrl,c
  8393  00E06E  0EFD               	movlw	high _hexpowers
  8394  00E070  20F4               	addwfc	prodh,w,c
  8395  00E072  6EF7               	movwf	tblptrh,c
  8396  00E074                     	if	0	;There are less than 3 active tblptr bytes
  8397  00E074                     	endif
  8398  00E074  0009               	tblrd		*+
  8399  00E076  50F5               	movf	tablat,w,c
  8400  00E078  5C1F               	subwf	printf@val,w,c
  8401  00E07A  0009               	tblrd		*+
  8402  00E07C  50F5               	movf	tablat,w,c
  8403  00E07E  5820               	subwfb	printf@val+1,w,c
  8404  00E080  A0D8               	btfss	status,0,c
  8405  00E082  D00A               	goto	l642
  8406                           
  8407                           ;doprnt.c: 1318: break;
  8408  00E084  2A24               	incf	printf@c,f,c
  8409  00E086  D7EA               	goto	l3319
  8410  00E088                     l637:
  8411  00E088  5021               	movf	printf@flag,w,c
  8412  00E08A  0B80               	andlw	128
  8413                           
  8414                           ; Switch size 1, requested type "space"
  8415                           ; Number of cases is 2, Range of values is 0 to 128
  8416                           ; switch strategies available:
  8417                           ; Name         Instructions Cycles
  8418                           ; simple_byte            7     4 (average)
  8419                           ;	Chosen strategy is simple_byte
  8420  00E08C  0A00               	xorlw	0	; case 0
  8421  00E08E  B4D8               	btfsc	status,2,c
  8422  00E090  D7CB               	goto	l638
  8423  00E092  0A80               	xorlw	128	; case 128
  8424  00E094  B4D8               	btfsc	status,2,c
  8425  00E096  D7E0               	goto	l643
  8426  00E098                     l642:
  8427                           
  8428                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8429  00E098  5022               	movf	printf@width,w,c
  8430  00E09A  1023               	iorwf	printf@width+1,w,c
  8431  00E09C  B4D8               	btfsc	status,2,c
  8432  00E09E  D009               	goto	l647
  8433  00E0A0  C021  F017         	movff	printf@flag,??_printf
  8434  00E0A4  0E03               	movlw	3
  8435  00E0A6  1617               	andwf	??_printf,f,c
  8436  00E0A8  B4D8               	btfsc	status,2,c
  8437  00E0AA  D003               	goto	l647
  8438                           
  8439                           ;doprnt.c: 1346: width--;
  8440  00E0AC  0622               	decf	printf@width,f,c
  8441  00E0AE  A0D8               	btfss	status,0,c
  8442  00E0B0  0623               	decf	printf@width+1,f,c
  8443  00E0B2                     l647:
  8444                           
  8445                           ;doprnt.c: 1381: if(width > c)
  8446  00E0B2  0E80               	movlw	128
  8447  00E0B4  BE24               	btfsc	printf@c,7,c
  8448  00E0B6  0E7F               	movlw	127
  8449  00E0B8  6E17               	movwf	??_printf& (0+255),c
  8450  00E0BA  5022               	movf	printf@width,w,c
  8451  00E0BC  5C24               	subwf	printf@c,w,c
  8452  00E0BE  5023               	movf	printf@width+1,w,c
  8453  00E0C0  0A80               	xorlw	128
  8454  00E0C2  5817               	subwfb	??_printf& (0+255),w,c
  8455  00E0C4  B0D8               	btfsc	status,0,c
  8456  00E0C6  D007               	goto	l648
  8457                           
  8458                           ;doprnt.c: 1382: width -= c;
  8459  00E0C8  5024               	movf	printf@c,w,c
  8460  00E0CA  5E22               	subwf	printf@width,f,c
  8461  00E0CC  0E00               	movlw	0
  8462  00E0CE  BE24               	btfsc	printf@c,7,c
  8463  00E0D0  0EFF               	movlw	255
  8464  00E0D2  5A23               	subwfb	printf@width+1,f,c
  8465  00E0D4  D004               	goto	l649
  8466  00E0D6                     l648:
  8467                           
  8468                           ;doprnt.c: 1383: else
  8469                           ;doprnt.c: 1384: width = 0;
  8470  00E0D6  0E00               	movlw	0
  8471  00E0D8  6E23               	movwf	printf@width+1,c
  8472  00E0DA  0E00               	movlw	0
  8473  00E0DC  6E22               	movwf	printf@width,c
  8474  00E0DE                     l649:
  8475                           
  8476                           ;doprnt.c: 1387: if(flag & 0x04) {
  8477  00E0DE  A421               	btfss	printf@flag,2,c
  8478  00E0E0  D014               	goto	l650
  8479                           
  8480                           ;doprnt.c: 1392: if(flag & 0x03)
  8481  00E0E2  C021  F017         	movff	printf@flag,??_printf
  8482  00E0E6  0E03               	movlw	3
  8483  00E0E8  1617               	andwf	??_printf,f,c
  8484  00E0EA  B4D8               	btfsc	status,2,c
  8485  00E0EC  D003               	goto	l651
  8486                           
  8487                           ;doprnt.c: 1393: (putch('-') );
  8488  00E0EE  0E2D               	movlw	45
  8489  00E0F0  EC76  F069         	call	_putch
  8490  00E0F4                     l651:
  8491                           
  8492                           ;doprnt.c: 1415: if(width)
  8493  00E0F4  5022               	movf	printf@width,w,c
  8494  00E0F6  1023               	iorwf	printf@width+1,w,c
  8495  00E0F8  B4D8               	btfsc	status,2,c
  8496  00E0FA  D01E               	goto	l659
  8497                           
  8498                           ;doprnt.c: 1417: (putch('0') );
  8499                           
  8500                           ;doprnt.c: 1416: do
  8501  00E0FC  0E30               	movlw	48
  8502  00E0FE  EC76  F069         	call	_putch
  8503                           
  8504                           ;doprnt.c: 1418: while(--width);
  8505  00E102  0622               	decf	printf@width,f,c
  8506  00E104  A0D8               	btfss	status,0,c
  8507  00E106  0623               	decf	printf@width+1,f,c
  8508  00E108  D7F5               	goto	l651
  8509  00E10A                     l650:
  8510                           
  8511                           ;doprnt.c: 1422: {
  8512                           ;doprnt.c: 1424: if(width
  8513                           ;doprnt.c: 1428: )
  8514  00E10A  5022               	movf	printf@width,w,c
  8515  00E10C  1023               	iorwf	printf@width+1,w,c
  8516  00E10E  B4D8               	btfsc	status,2,c
  8517  00E110  D00A               	goto	u3500
  8518  00E112                     u3490:
  8519                           
  8520                           ;doprnt.c: 1430: (putch(' ') );
  8521                           
  8522                           ;doprnt.c: 1429: do
  8523  00E112  0E20               	movlw	32
  8524  00E114  EC76  F069         	call	_putch
  8525                           
  8526                           ;doprnt.c: 1431: while(--width);
  8527  00E118  0622               	decf	printf@width,f,c
  8528  00E11A  A0D8               	btfss	status,0,c
  8529  00E11C  0623               	decf	printf@width+1,f,c
  8530  00E11E  5022               	movf	printf@width,w,c
  8531  00E120  1023               	iorwf	printf@width+1,w,c
  8532  00E122  A4D8               	btfss	status,2,c
  8533  00E124  D7F6               	goto	u3490
  8534  00E126                     u3500:
  8535                           
  8536                           ;doprnt.c: 1438: if(flag & 0x03)
  8537  00E126  C021  F017         	movff	printf@flag,??_printf
  8538  00E12A  0E03               	movlw	3
  8539  00E12C  1617               	andwf	??_printf,f,c
  8540  00E12E  B4D8               	btfsc	status,2,c
  8541  00E130  D003               	goto	l659
  8542                           
  8543                           ;doprnt.c: 1439: (putch('-') );
  8544  00E132  0E2D               	movlw	45
  8545  00E134  EC76  F069         	call	_putch
  8546  00E138                     l659:
  8547                           
  8548                           ;doprnt.c: 1469: }
  8549                           ;doprnt.c: 1472: prec = c;
  8550  00E138  C024  F01E         	movff	printf@c,printf@prec
  8551                           
  8552                           ;doprnt.c: 1474: while(prec--) {
  8553  00E13C  D050               	goto	l660
  8554  00E13E                     
  8555                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8556  00E13E  501E               	movf	printf@prec,w,c
  8557  00E140  0D02               	mullw	2
  8558  00E142  0E47               	movlw	low _dpowers
  8559  00E144  24F3               	addwf	prodl,w,c
  8560  00E146  6EF6               	movwf	tblptrl,c
  8561  00E148  0EFD               	movlw	high _dpowers
  8562  00E14A  20F4               	addwfc	prodh,w,c
  8563  00E14C  6EF7               	movwf	tblptrh,c
  8564  00E14E                     	if	0	;There are less than 3 active tblptr bytes
  8565  00E14E                     	endif
  8566  00E14E  0009               	tblrd		*+
  8567  00E150  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8568  00E154  000A               	tblrd		*-
  8569  00E156  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8570  00E15A  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8571  00E15E  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8572  00E162  EC47  F06A         	call	___lwdiv	;wreg free
  8573  00E166  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8574  00E16A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8575  00E16E  0E00               	movlw	0
  8576  00E170  6E0B               	movwf	___lwmod@divisor+1,c
  8577  00E172  0E0A               	movlw	10
  8578  00E174  6E0A               	movwf	___lwmod@divisor,c
  8579  00E176  EC00  F06A         	call	___lwmod	;wreg free
  8580  00E17A  5008               	movf	?___lwmod,w,c
  8581  00E17C  0F30               	addlw	48
  8582  00E17E  6E24               	movwf	printf@c,c
  8583                           
  8584                           ;doprnt.c: 1491: break;
  8585  00E180  D02B               	goto	l664
  8586  00E182                     
  8587                           ;doprnt.c: 1499: {
  8588                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8589  00E182  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8590  00E186  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8591  00E18A  501E               	movf	printf@prec,w,c
  8592  00E18C  0D02               	mullw	2
  8593  00E18E  0E51               	movlw	low _hexpowers
  8594  00E190  24F3               	addwf	prodl,w,c
  8595  00E192  6EF6               	movwf	tblptrl,c
  8596  00E194  0EFD               	movlw	high _hexpowers
  8597  00E196  20F4               	addwfc	prodh,w,c
  8598  00E198  6EF7               	movwf	tblptrh,c
  8599  00E19A                     	if	0	;There are less than 3 active tblptr bytes
  8600  00E19A                     	endif
  8601  00E19A  0009               	tblrd		*+
  8602  00E19C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8603  00E1A0  000A               	tblrd		*-
  8604  00E1A2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8605  00E1A6  EC47  F06A         	call	___lwdiv	;wreg free
  8606  00E1AA  5001               	movf	?___lwdiv,w,c
  8607  00E1AC  0B0F               	andlw	15
  8608  00E1AE  6E1B               	movwf	printf@idx,c
  8609                           
  8610                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8611  00E1B0  501B               	movf	printf@idx,w,c
  8612  00E1B2  0D01               	mullw	1
  8613  00E1B4  0E78               	movlw	low STR_71
  8614  00E1B6  24F3               	addwf	prodl,w,c
  8615  00E1B8  6EF6               	movwf	tblptrl,c
  8616  00E1BA  0EFD               	movlw	high STR_71
  8617  00E1BC  20F4               	addwfc	prodh,w,c
  8618  00E1BE  6EF7               	movwf	tblptrh,c
  8619  00E1C0                     	if	0	;There are less than 3 active tblptr bytes
  8620  00E1C0                     	endif
  8621  00E1C0  0008               	tblrd		*
  8622  00E1C2  CFF5 F024          	movff	tablat,printf@c
  8623                           
  8624                           ;doprnt.c: 1523: }
  8625                           
  8626                           ;doprnt.c: 1508: }
  8627                           ;doprnt.c: 1510: break;
  8628  00E1C6  D008               	goto	l664
  8629  00E1C8  5021               	movf	printf@flag,w,c
  8630  00E1CA  0B80               	andlw	128
  8631                           
  8632                           ; Switch size 1, requested type "space"
  8633                           ; Number of cases is 2, Range of values is 0 to 128
  8634                           ; switch strategies available:
  8635                           ; Name         Instructions Cycles
  8636                           ; simple_byte            7     4 (average)
  8637                           ;	Chosen strategy is simple_byte
  8638  00E1CC  0A00               	xorlw	0	; case 0
  8639  00E1CE  B4D8               	btfsc	status,2,c
  8640  00E1D0  D7B6               	goto	l663
  8641  00E1D2  0A80               	xorlw	128	; case 128
  8642  00E1D4  B4D8               	btfsc	status,2,c
  8643  00E1D6  D7D5               	goto	l665
  8644  00E1D8                     l664:
  8645                           
  8646                           ;doprnt.c: 1524: (putch(c) );
  8647  00E1D8  5024               	movf	printf@c,w,c
  8648  00E1DA  EC76  F069         	call	_putch
  8649  00E1DE                     l660:
  8650  00E1DE  061E               	decf	printf@prec,f,c
  8651  00E1E0  281E               	incf	printf@prec,w,c
  8652  00E1E2  A4D8               	btfss	status,2,c
  8653  00E1E4  D7F1               	goto	l662
  8654  00E1E6                     u3520:
  8655  00E1E6  C00D  FFF6         	movff	printf@f,tblptrl
  8656  00E1EA  C00E  FFF7         	movff	printf@f+1,tblptrh
  8657  00E1EE  4A0D               	infsnz	printf@f,f,c
  8658  00E1F0  2A0E               	incf	printf@f+1,f,c
  8659  00E1F2                     	if	0	;tblptru may be non-zero
  8660  00E1F2                     	endif
  8661  00E1F2                     	if	0	;tblptru may be non-zero
  8662  00E1F2                     	endif
  8663  00E1F2  0008               	tblrd		*
  8664  00E1F4  CFF5 F024          	movff	tablat,printf@c
  8665  00E1F8  5024               	movf	printf@c,w,c
  8666  00E1FA  B4D8               	btfsc	status,2,c
  8667  00E1FC  0012               	return	
  8668  00E1FE  D67F               	goto	l615
  8669  00E200                     __end_of_printf:
  8670                           	opt stack 0
  8671                           tblptru	equ	0xFF8
  8672                           tblptrh	equ	0xFF7
  8673                           tblptrl	equ	0xFF6
  8674                           tablat	equ	0xFF5
  8675                           prodh	equ	0xFF4
  8676                           prodl	equ	0xFF3
  8677                           intcon	equ	0xFF2
  8678                           postinc0	equ	0xFEE
  8679                           wreg	equ	0xFE8
  8680                           plusw1	equ	0xFE3
  8681                           indf2	equ	0xFDF
  8682                           postinc2	equ	0xFDE
  8683                           postdec2	equ	0xFDD
  8684                           plusw2	equ	0xFDB
  8685                           fsr2h	equ	0xFDA
  8686                           fsr2l	equ	0xFD9
  8687                           status	equ	0xFD8
  8688                           
  8689 ;; *************** function _putch *****************
  8690 ;; Defined at:
  8691 ;;		line 85 in file "standbyMode.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;  data            1    wreg     unsigned char 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  data            1    2[COMRAM] unsigned char 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;Total ram usage:        1 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    1
  8712 ;; This function calls:
  8713 ;;		_lcdNibble
  8714 ;; This function is called by:
  8715 ;;		_viewLogs
  8716 ;;		_food_press
  8717 ;;		_diet_press
  8718 ;;		_which_drawer
  8719 ;;		_standbyMode
  8720 ;;		_printf
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           	psect	text14
  8725  00D2EC                     __ptext14:
  8726                           	opt stack 0
  8727  00D2EC                     _putch:
  8728                           	opt stack 27
  8729                           
  8730                           ;incstack = 0
  8731                           ;putch@data stored from wreg
  8732  00D2EC  6E03               	movwf	putch@data,c
  8733                           
  8734                           ;standbyMode.c: 93: LATDbits.LATD2 = 1;
  8735  00D2EE  848C               	bsf	3980,2,c	;volatile
  8736                           
  8737                           ;standbyMode.c: 94: lcdNibble(data);
  8738  00D2F0  5003               	movf	putch@data,w,c
  8739  00D2F2  ECC7  F06A         	call	_lcdNibble
  8740                           
  8741                           ;standbyMode.c: 95: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8742  00D2F6  0EC8               	movlw	200
  8743  00D2F8                     u7137:
  8744  00D2F8  D000               	nop2	
  8745  00D2FA  2EE8               	decfsz	wreg,f,c
  8746  00D2FC  D7FD               	bra	u7137
  8747  00D2FE  0012               	return		;funcret
  8748  00D300                     __end_of_putch:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           plusw1	equ	0xFE3
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           plusw2	equ	0xFDB
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _isdigit *****************
  8769 ;; Defined at:
  8770 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  c               1    wreg     unsigned char 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  c               1    2[COMRAM] unsigned char 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;		None               void
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;Total ram usage:        3 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_printf
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           	psect	text15
  8798  00D314                     __ptext15:
  8799                           	opt stack 0
  8800  00D314                     _isdigit:
  8801                           	opt stack 27
  8802                           
  8803                           ;incstack = 0
  8804                           ;isdigit@c stored from wreg
  8805  00D314  6E03               	movwf	isdigit@c,c
  8806  00D316  0E00               	movlw	0
  8807  00D318  6E02               	movwf	_isdigit$930,c
  8808  00D31A  0E3A               	movlw	58
  8809  00D31C  6003               	cpfslt	isdigit@c,c
  8810  00D31E  D005               	goto	l998
  8811  00D320  0E2F               	movlw	47
  8812  00D322  6403               	cpfsgt	isdigit@c,c
  8813  00D324  D002               	goto	l998
  8814  00D326  0E01               	movlw	1
  8815  00D328  6E02               	movwf	_isdigit$930,c
  8816  00D32A                     l998:
  8817  00D32A  C002  F001         	movff	_isdigit$930,??_isdigit
  8818  00D32E  3001               	rrcf	??_isdigit,w,c
  8819  00D330  0012               	return	
  8820  00D332                     __end_of_isdigit:
  8821                           	opt stack 0
  8822                           tblptru	equ	0xFF8
  8823                           tblptrh	equ	0xFF7
  8824                           tblptrl	equ	0xFF6
  8825                           tablat	equ	0xFF5
  8826                           prodh	equ	0xFF4
  8827                           prodl	equ	0xFF3
  8828                           intcon	equ	0xFF2
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           plusw1	equ	0xFE3
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           plusw2	equ	0xFDB
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function ___wmul *****************
  8841 ;; Defined at:
  8842 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  multiplier      2    0[COMRAM] unsigned int 
  8845 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  product         2    4[COMRAM] unsigned int 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  2    0[COMRAM] unsigned int 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2, status,0, prodl, prodh
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;Total ram usage:        6 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		_displayLogs
  8867 ;;		_printf
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text16
  8872  00D378                     __ptext16:
  8873                           	opt stack 0
  8874  00D378                     ___wmul:
  8875                           	opt stack 27
  8876                           
  8877                           ;incstack = 0
  8878  00D378  5001               	movf	___wmul@multiplier,w,c
  8879  00D37A  0203               	mulwf	___wmul@multiplicand,c
  8880  00D37C  CFF3 F005          	movff	prodl,___wmul@product
  8881  00D380  CFF4 F006          	movff	prodh,___wmul@product+1
  8882  00D384  5001               	movf	___wmul@multiplier,w,c
  8883  00D386  0204               	mulwf	___wmul@multiplicand+1,c
  8884  00D388  50F3               	movf	prodl,w,c
  8885  00D38A  2606               	addwf	___wmul@product+1,f,c
  8886  00D38C  5002               	movf	___wmul@multiplier+1,w,c
  8887  00D38E  0203               	mulwf	___wmul@multiplicand,c
  8888  00D390  50F3               	movf	prodl,w,c
  8889  00D392  2606               	addwf	___wmul@product+1,f,c
  8890  00D394  C005  F001         	movff	___wmul@product,?___wmul
  8891  00D398  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8892  00D39C  0012               	return	
  8893  00D39E                     __end_of___wmul:
  8894                           	opt stack 0
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodh	equ	0xFF4
  8900                           prodl	equ	0xFF3
  8901                           intcon	equ	0xFF2
  8902                           postinc0	equ	0xFEE
  8903                           wreg	equ	0xFE8
  8904                           plusw1	equ	0xFE3
  8905                           indf2	equ	0xFDF
  8906                           postinc2	equ	0xFDE
  8907                           postdec2	equ	0xFDD
  8908                           plusw2	equ	0xFDB
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function ___lwmod *****************
  8914 ;; Defined at:
  8915 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  dividend        2    7[COMRAM] unsigned int 
  8918 ;;  divisor         2    9[COMRAM] unsigned int 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  counter         1   11[COMRAM] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  2    7[COMRAM] unsigned int 
  8923 ;; Registers used:
  8924 ;;		wreg, status,2, status,0
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        5 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; This function calls:
  8937 ;;		Nothing
  8938 ;; This function is called by:
  8939 ;;		_displayLogs
  8940 ;;		_printf
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text17
  8945  00D400                     __ptext17:
  8946                           	opt stack 0
  8947  00D400                     ___lwmod:
  8948                           	opt stack 27
  8949                           
  8950                           ;incstack = 0
  8951  00D400  500A               	movf	___lwmod@divisor,w,c
  8952  00D402  100B               	iorwf	___lwmod@divisor+1,w,c
  8953  00D404  B4D8               	btfsc	status,2,c
  8954  00D406  D018               	goto	l1092
  8955  00D408  0E01               	movlw	1
  8956  00D40A  6E0C               	movwf	___lwmod@counter,c
  8957  00D40C  D004               	goto	l1087
  8958  00D40E  90D8               	bcf	status,0,c
  8959  00D410  360A               	rlcf	___lwmod@divisor,f,c
  8960  00D412  360B               	rlcf	___lwmod@divisor+1,f,c
  8961  00D414  2A0C               	incf	___lwmod@counter,f,c
  8962  00D416                     l1087:
  8963  00D416  AE0B               	btfss	___lwmod@divisor+1,7,c
  8964  00D418  D7FA               	goto	l1088
  8965  00D41A                     u3290:
  8966  00D41A  500A               	movf	___lwmod@divisor,w,c
  8967  00D41C  5C08               	subwf	___lwmod@dividend,w,c
  8968  00D41E  500B               	movf	___lwmod@divisor+1,w,c
  8969  00D420  5809               	subwfb	___lwmod@dividend+1,w,c
  8970  00D422  A0D8               	btfss	status,0,c
  8971  00D424  D004               	goto	l1091
  8972  00D426  500A               	movf	___lwmod@divisor,w,c
  8973  00D428  5E08               	subwf	___lwmod@dividend,f,c
  8974  00D42A  500B               	movf	___lwmod@divisor+1,w,c
  8975  00D42C  5A09               	subwfb	___lwmod@dividend+1,f,c
  8976  00D42E                     l1091:
  8977  00D42E  90D8               	bcf	status,0,c
  8978  00D430  320B               	rrcf	___lwmod@divisor+1,f,c
  8979  00D432  320A               	rrcf	___lwmod@divisor,f,c
  8980  00D434  2E0C               	decfsz	___lwmod@counter,f,c
  8981  00D436  D7F1               	goto	u3290
  8982  00D438                     l1092:
  8983  00D438  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8984  00D43C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8985  00D440  0012               	return		;funcret
  8986  00D442                     __end_of___lwmod:
  8987                           	opt stack 0
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           intcon	equ	0xFF2
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           plusw1	equ	0xFE3
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           plusw2	equ	0xFDB
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function ___lwdiv *****************
  9007 ;; Defined at:
  9008 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  dividend        2    0[COMRAM] unsigned int 
  9011 ;;  divisor         2    2[COMRAM] unsigned int 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  quotient        2    4[COMRAM] unsigned int 
  9014 ;;  counter         1    6[COMRAM] unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  2    0[COMRAM] unsigned int 
  9017 ;; Registers used:
  9018 ;;		wreg, status,2, status,0
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;Total ram usage:        7 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; This function calls:
  9031 ;;		Nothing
  9032 ;; This function is called by:
  9033 ;;		_displayLogs
  9034 ;;		_printf
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text18
  9039  00D48E                     __ptext18:
  9040                           	opt stack 0
  9041  00D48E                     ___lwdiv:
  9042                           	opt stack 27
  9043                           
  9044                           ;incstack = 0
  9045  00D48E  0E00               	movlw	0
  9046  00D490  6E06               	movwf	___lwdiv@quotient+1,c
  9047  00D492  0E00               	movlw	0
  9048  00D494  6E05               	movwf	___lwdiv@quotient,c
  9049  00D496  5003               	movf	___lwdiv@divisor,w,c
  9050  00D498  1004               	iorwf	___lwdiv@divisor+1,w,c
  9051  00D49A  B4D8               	btfsc	status,2,c
  9052  00D49C  D01C               	goto	l1082
  9053  00D49E  0E01               	movlw	1
  9054  00D4A0  6E07               	movwf	___lwdiv@counter,c
  9055  00D4A2  D004               	goto	l1077
  9056  00D4A4  90D8               	bcf	status,0,c
  9057  00D4A6  3603               	rlcf	___lwdiv@divisor,f,c
  9058  00D4A8  3604               	rlcf	___lwdiv@divisor+1,f,c
  9059  00D4AA  2A07               	incf	___lwdiv@counter,f,c
  9060  00D4AC                     l1077:
  9061  00D4AC  AE04               	btfss	___lwdiv@divisor+1,7,c
  9062  00D4AE  D7FA               	goto	l1078
  9063  00D4B0                     u3260:
  9064  00D4B0  90D8               	bcf	status,0,c
  9065  00D4B2  3605               	rlcf	___lwdiv@quotient,f,c
  9066  00D4B4  3606               	rlcf	___lwdiv@quotient+1,f,c
  9067  00D4B6  5003               	movf	___lwdiv@divisor,w,c
  9068  00D4B8  5C01               	subwf	___lwdiv@dividend,w,c
  9069  00D4BA  5004               	movf	___lwdiv@divisor+1,w,c
  9070  00D4BC  5802               	subwfb	___lwdiv@dividend+1,w,c
  9071  00D4BE  A0D8               	btfss	status,0,c
  9072  00D4C0  D005               	goto	l1081
  9073  00D4C2  5003               	movf	___lwdiv@divisor,w,c
  9074  00D4C4  5E01               	subwf	___lwdiv@dividend,f,c
  9075  00D4C6  5004               	movf	___lwdiv@divisor+1,w,c
  9076  00D4C8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9077  00D4CA  8005               	bsf	___lwdiv@quotient,0,c
  9078  00D4CC                     l1081:
  9079  00D4CC  90D8               	bcf	status,0,c
  9080  00D4CE  3204               	rrcf	___lwdiv@divisor+1,f,c
  9081  00D4D0  3203               	rrcf	___lwdiv@divisor,f,c
  9082  00D4D2  2E07               	decfsz	___lwdiv@counter,f,c
  9083  00D4D4  D7ED               	goto	u3260
  9084  00D4D6                     l1082:
  9085  00D4D6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9086  00D4DA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9087  00D4DE  0012               	return		;funcret
  9088  00D4E0                     __end_of___lwdiv:
  9089                           	opt stack 0
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodh	equ	0xFF4
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           plusw1	equ	0xFE3
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           plusw2	equ	0xFDB
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function _I2C_Master_Write *****************
  9109 ;; Defined at:
  9110 ;;		line 108 in file "I2C.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;		None
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		wreg, status,2, status,0, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;Total ram usage:        2 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    1
  9131 ;; This function calls:
  9132 ;;		_I2C_Master_Wait
  9133 ;; This function is called by:
  9134 ;;		_standbyMode
  9135 ;;		_RTC_setTime
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text19
  9140  00D2BC                     __ptext19:
  9141                           	opt stack 0
  9142  00D2BC                     _I2C_Master_Write:
  9143                           	opt stack 28
  9144                           
  9145                           ;I2C.c: 116: I2C_Master_Wait();
  9146                           
  9147                           ;incstack = 0
  9148  00D2BC  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9149                           
  9150                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9151  00D2C0  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  9152  00D2C4  0012               	return		;funcret
  9153  00D2C6                     __end_of_I2C_Master_Write:
  9154                           	opt stack 0
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           postinc0	equ	0xFEE
  9163                           wreg	equ	0xFE8
  9164                           plusw1	equ	0xFE3
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           plusw2	equ	0xFDB
  9169                           fsr2h	equ	0xFDA
  9170                           fsr2l	equ	0xFD9
  9171                           status	equ	0xFD8
  9172                           
  9173 ;; *************** function _I2C_Master_Stop *****************
  9174 ;; Defined at:
  9175 ;;		line 95 in file "I2C.c"
  9176 ;; Parameters:    Size  Location     Type
  9177 ;;		None
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;		None
  9180 ;; Return value:  Size  Location     Type
  9181 ;;                  1    wreg      void 
  9182 ;; Registers used:
  9183 ;;		wreg, status,2, status,0, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;Total ram usage:        0 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    1
  9196 ;; This function calls:
  9197 ;;		_I2C_Master_Wait
  9198 ;; This function is called by:
  9199 ;;		_standbyMode
  9200 ;;		_RTC_setTime
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text20
  9205  00D2B4                     __ptext20:
  9206                           	opt stack 0
  9207  00D2B4                     _I2C_Master_Stop:
  9208                           	opt stack 28
  9209                           
  9210                           ;I2C.c: 104: I2C_Master_Wait();
  9211                           
  9212                           ;incstack = 0
  9213  00D2B4  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9214                           
  9215                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9216  00D2B8  84C5               	bsf	4037,2,c	;volatile
  9217  00D2BA  0012               	return		;funcret
  9218  00D2BC                     __end_of_I2C_Master_Stop:
  9219                           	opt stack 0
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           postinc0	equ	0xFEE
  9228                           wreg	equ	0xFE8
  9229                           plusw1	equ	0xFE3
  9230                           indf2	equ	0xFDF
  9231                           postinc2	equ	0xFDE
  9232                           postdec2	equ	0xFDD
  9233                           plusw2	equ	0xFDB
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function _I2C_Master_Start *****************
  9239 ;; Defined at:
  9240 ;;		line 69 in file "I2C.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;		None
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;		None
  9245 ;; Return value:  Size  Location     Type
  9246 ;;                  1    wreg      void 
  9247 ;; Registers used:
  9248 ;;		wreg, status,2, status,0, cstack
  9249 ;; Tracked objects:
  9250 ;;		On entry : 0/0
  9251 ;;		On exit  : 0/0
  9252 ;;		Unchanged: 0/0
  9253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;Total ram usage:        0 bytes
  9259 ;; Hardware stack levels used:    1
  9260 ;; Hardware stack levels required when called:    1
  9261 ;; This function calls:
  9262 ;;		_I2C_Master_Wait
  9263 ;; This function is called by:
  9264 ;;		_standbyMode
  9265 ;;		_RTC_setTime
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text21
  9270  00D2AC                     __ptext21:
  9271                           	opt stack 0
  9272  00D2AC                     _I2C_Master_Start:
  9273                           	opt stack 28
  9274                           
  9275                           ;I2C.c: 78: I2C_Master_Wait();
  9276                           
  9277                           ;incstack = 0
  9278  00D2AC  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9279                           
  9280                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  9281  00D2B0  80C5               	bsf	4037,0,c	;volatile
  9282  00D2B2  0012               	return		;funcret
  9283  00D2B4                     __end_of_I2C_Master_Start:
  9284                           	opt stack 0
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           intcon	equ	0xFF2
  9292                           postinc0	equ	0xFEE
  9293                           wreg	equ	0xFE8
  9294                           plusw1	equ	0xFE3
  9295                           indf2	equ	0xFDF
  9296                           postinc2	equ	0xFDE
  9297                           postdec2	equ	0xFDD
  9298                           plusw2	equ	0xFDB
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function _I2C_Master_Read *****************
  9304 ;; Defined at:
  9305 ;;		line 120 in file "I2C.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  ackBit          1    wreg     unsigned char 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  ackBit          1    1[COMRAM] unsigned char 
  9310 ;;  receivedByte    1    2[COMRAM] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      unsigned char 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;Total ram usage:        2 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    1
  9327 ;; This function calls:
  9328 ;;		_I2C_Master_Wait
  9329 ;; This function is called by:
  9330 ;;		_standbyMode
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           	psect	text22
  9335  00D354                     __ptext22:
  9336                           	opt stack 0
  9337  00D354                     _I2C_Master_Read:
  9338                           	opt stack 28
  9339                           
  9340                           ;incstack = 0
  9341                           ;I2C_Master_Read@ackBit stored from wreg
  9342  00D354  6E02               	movwf	I2C_Master_Read@ackBit,c
  9343                           
  9344                           ;I2C.c: 130: unsigned char receivedByte;
  9345                           ;I2C.c: 132: I2C_Master_Wait();
  9346  00D356  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9347                           
  9348                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  9349  00D35A  86C5               	bsf	4037,3,c	;volatile
  9350                           
  9351                           ;I2C.c: 135: I2C_Master_Wait();
  9352  00D35C  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9353                           
  9354                           ;I2C.c: 136: receivedByte = SSPBUF;
  9355  00D360  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  9356                           
  9357                           ;I2C.c: 138: I2C_Master_Wait();
  9358  00D364  EC63  F069         	call	_I2C_Master_Wait	;wreg free
  9359                           
  9360                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  9361  00D368  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  9362  00D36A  D002               	bra	u2855
  9363  00D36C  9AC5               	bcf	4037,5,c	;volatile
  9364  00D36E  D001               	bra	u2856
  9365  00D370                     u2855:
  9366  00D370  8AC5               	bsf	4037,5,c	;volatile
  9367  00D372                     u2856:
  9368                           
  9369                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  9370  00D372  88C5               	bsf	4037,4,c	;volatile
  9371                           
  9372                           ;I2C.c: 142: return receivedByte;
  9373  00D374  5003               	movf	I2C_Master_Read@receivedByte,w,c
  9374  00D376  0012               	return	
  9375  00D378                     __end_of_I2C_Master_Read:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           postinc0	equ	0xFEE
  9385                           wreg	equ	0xFE8
  9386                           plusw1	equ	0xFE3
  9387                           indf2	equ	0xFDF
  9388                           postinc2	equ	0xFDE
  9389                           postdec2	equ	0xFDD
  9390                           plusw2	equ	0xFDB
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function _I2C_Master_Wait *****************
  9396 ;; Defined at:
  9397 ;;		line 51 in file "I2C.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;		None
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;		None
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  1    wreg      void 
  9404 ;; Registers used:
  9405 ;;		wreg, status,2, status,0
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;Total ram usage:        1 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; This function calls:
  9418 ;;		Nothing
  9419 ;; This function is called by:
  9420 ;;		_I2C_Master_Start
  9421 ;;		_I2C_Master_Stop
  9422 ;;		_I2C_Master_Write
  9423 ;;		_I2C_Master_Read
  9424 ;;		_I2C_Master_RepeatedStart
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text23
  9429  00D2C6                     __ptext23:
  9430                           	opt stack 0
  9431  00D2C6                     _I2C_Master_Wait:
  9432                           	opt stack 28
  9433                           
  9434                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9435                           
  9436                           ;incstack = 0
  9437  00D2C6  B4C7               	btfsc	4039,2,c	;volatile
  9438  00D2C8  D7FE               	goto	_I2C_Master_Wait
  9439  00D2CA  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  9440  00D2CE  0E1F               	movlw	31
  9441  00D2D0  1601               	andwf	??_I2C_Master_Wait,f,c
  9442  00D2D2  B4D8               	btfsc	status,2,c
  9443  00D2D4  0012               	return	
  9444  00D2D6  D7F7               	goto	_I2C_Master_Wait
  9445  00D2D8                     __end_of_I2C_Master_Wait:
  9446                           	opt stack 0
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           prodh	equ	0xFF4
  9452                           prodl	equ	0xFF3
  9453                           intcon	equ	0xFF2
  9454                           postinc0	equ	0xFEE
  9455                           wreg	equ	0xFE8
  9456                           plusw1	equ	0xFE3
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           plusw2	equ	0xFDB
  9461                           fsr2h	equ	0xFDA
  9462                           fsr2l	equ	0xFD9
  9463                           status	equ	0xFD8
  9464                           
  9465 ;; *************** function _I2C_Master_Init *****************
  9466 ;; Defined at:
  9467 ;;		line 14 in file "I2C.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;Total ram usage:        8 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    1
  9488 ;; This function calls:
  9489 ;;		___lldiv
  9490 ;; This function is called by:
  9491 ;;		_standbyMode
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text24
  9496  00D532                     __ptext24:
  9497                           	opt stack 0
  9498  00D532                     _I2C_Master_Init:
  9499                           	opt stack 28
  9500                           
  9501                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  9502                           
  9503                           ;incstack = 0
  9504  00D532  9AC6               	bcf	4038,5,c	;volatile
  9505                           
  9506                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  9507  00D534  8694               	bsf	3988,3,c	;volatile
  9508                           
  9509                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  9510  00D536  8894               	bsf	3988,4,c	;volatile
  9511                           
  9512                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  9513  00D538  0E80               	movlw	128
  9514  00D53A  6EC7               	movwf	4039,c	;volatile
  9515                           
  9516                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  9517  00D53C  0E28               	movlw	40
  9518  00D53E  6EC6               	movwf	4038,c	;volatile
  9519                           
  9520                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  9521  00D540  0E00               	movlw	0
  9522  00D542  6EC5               	movwf	4037,c	;volatile
  9523                           
  9524                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  9525  00D544  0E00               	movlw	0
  9526  00D546  6E01               	movwf	___lldiv@dividend,c
  9527  00D548  0E5A               	movlw	90
  9528  00D54A  6E02               	movwf	___lldiv@dividend+1,c
  9529  00D54C  0E62               	movlw	98
  9530  00D54E  6E03               	movwf	___lldiv@dividend+2,c
  9531  00D550  0E02               	movlw	2
  9532  00D552  6E04               	movwf	___lldiv@dividend+3,c
  9533  00D554  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  9534  00D558  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  9535  00D55C  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  9536  00D560  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  9537  00D564  0E02               	movlw	2
  9538  00D566                     u5995:
  9539  00D566  90D8               	bcf	status,0,c
  9540  00D568  3612               	rlcf	??_I2C_Master_Init,f,c
  9541  00D56A  3613               	rlcf	??_I2C_Master_Init+1,f,c
  9542  00D56C  3614               	rlcf	??_I2C_Master_Init+2,f,c
  9543  00D56E  3615               	rlcf	??_I2C_Master_Init+3,f,c
  9544  00D570  2EE8               	decfsz	wreg,f,c
  9545  00D572  D7F9               	goto	u5995
  9546  00D574  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  9547  00D578  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9548  00D57C  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9549  00D580  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9550  00D584  EC06  F06B         	call	___lldiv	;wreg free
  9551  00D588  0401               	decf	?___lldiv,w,c
  9552  00D58A  6EC8               	movwf	4040,c	;volatile
  9553  00D58C  0012               	return		;funcret
  9554  00D58E                     __end_of_I2C_Master_Init:
  9555                           	opt stack 0
  9556                           tblptru	equ	0xFF8
  9557                           tblptrh	equ	0xFF7
  9558                           tblptrl	equ	0xFF6
  9559                           tablat	equ	0xFF5
  9560                           prodh	equ	0xFF4
  9561                           prodl	equ	0xFF3
  9562                           intcon	equ	0xFF2
  9563                           postinc0	equ	0xFEE
  9564                           wreg	equ	0xFE8
  9565                           plusw1	equ	0xFE3
  9566                           indf2	equ	0xFDF
  9567                           postinc2	equ	0xFDE
  9568                           postdec2	equ	0xFDD
  9569                           plusw2	equ	0xFDB
  9570                           fsr2h	equ	0xFDA
  9571                           fsr2l	equ	0xFD9
  9572                           status	equ	0xFD8
  9573                           
  9574 ;; *************** function ___lldiv *****************
  9575 ;; Defined at:
  9576 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;  dividend        4    0[COMRAM] unsigned long 
  9579 ;;  divisor         4    4[COMRAM] unsigned long 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  quotient        4    8[COMRAM] unsigned long 
  9582 ;;  counter         1   12[COMRAM] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  4    0[COMRAM] unsigned long 
  9585 ;; Registers used:
  9586 ;;		wreg, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9592 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;Total ram usage:       13 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_I2C_Master_Init
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           	psect	text25
  9606  00D60C                     __ptext25:
  9607                           	opt stack 0
  9608  00D60C                     ___lldiv:
  9609                           	opt stack 28
  9610                           
  9611                           ;incstack = 0
  9612  00D60C  0E00               	movlw	0
  9613  00D60E  6E09               	movwf	___lldiv@quotient,c
  9614  00D610  0E00               	movlw	0
  9615  00D612  6E0A               	movwf	___lldiv@quotient+1,c
  9616  00D614  0E00               	movlw	0
  9617  00D616  6E0B               	movwf	___lldiv@quotient+2,c
  9618  00D618  0E00               	movlw	0
  9619  00D61A  6E0C               	movwf	___lldiv@quotient+3,c
  9620  00D61C  5005               	movf	___lldiv@divisor,w,c
  9621  00D61E  1006               	iorwf	___lldiv@divisor+1,w,c
  9622  00D620  1007               	iorwf	___lldiv@divisor+2,w,c
  9623  00D622  1008               	iorwf	___lldiv@divisor+3,w,c
  9624  00D624  B4D8               	btfsc	status,2,c
  9625  00D626  D02A               	goto	l1029
  9626  00D628  0E01               	movlw	1
  9627  00D62A  6E0D               	movwf	___lldiv@counter,c
  9628  00D62C  D006               	goto	l1024
  9629  00D62E  90D8               	bcf	status,0,c
  9630  00D630  3605               	rlcf	___lldiv@divisor,f,c
  9631  00D632  3606               	rlcf	___lldiv@divisor+1,f,c
  9632  00D634  3607               	rlcf	___lldiv@divisor+2,f,c
  9633  00D636  3608               	rlcf	___lldiv@divisor+3,f,c
  9634  00D638  2A0D               	incf	___lldiv@counter,f,c
  9635  00D63A                     l1024:
  9636  00D63A  AE08               	btfss	___lldiv@divisor+3,7,c
  9637  00D63C  D7F8               	goto	l1025
  9638  00D63E                     u4610:
  9639  00D63E  90D8               	bcf	status,0,c
  9640  00D640  3609               	rlcf	___lldiv@quotient,f,c
  9641  00D642  360A               	rlcf	___lldiv@quotient+1,f,c
  9642  00D644  360B               	rlcf	___lldiv@quotient+2,f,c
  9643  00D646  360C               	rlcf	___lldiv@quotient+3,f,c
  9644  00D648  5005               	movf	___lldiv@divisor,w,c
  9645  00D64A  5C01               	subwf	___lldiv@dividend,w,c
  9646  00D64C  5006               	movf	___lldiv@divisor+1,w,c
  9647  00D64E  5802               	subwfb	___lldiv@dividend+1,w,c
  9648  00D650  5007               	movf	___lldiv@divisor+2,w,c
  9649  00D652  5803               	subwfb	___lldiv@dividend+2,w,c
  9650  00D654  5008               	movf	___lldiv@divisor+3,w,c
  9651  00D656  5804               	subwfb	___lldiv@dividend+3,w,c
  9652  00D658  A0D8               	btfss	status,0,c
  9653  00D65A  D009               	goto	l1028
  9654  00D65C  5005               	movf	___lldiv@divisor,w,c
  9655  00D65E  5E01               	subwf	___lldiv@dividend,f,c
  9656  00D660  5006               	movf	___lldiv@divisor+1,w,c
  9657  00D662  5A02               	subwfb	___lldiv@dividend+1,f,c
  9658  00D664  5007               	movf	___lldiv@divisor+2,w,c
  9659  00D666  5A03               	subwfb	___lldiv@dividend+2,f,c
  9660  00D668  5008               	movf	___lldiv@divisor+3,w,c
  9661  00D66A  5A04               	subwfb	___lldiv@dividend+3,f,c
  9662  00D66C  8009               	bsf	___lldiv@quotient,0,c
  9663  00D66E                     l1028:
  9664  00D66E  90D8               	bcf	status,0,c
  9665  00D670  3208               	rrcf	___lldiv@divisor+3,f,c
  9666  00D672  3207               	rrcf	___lldiv@divisor+2,f,c
  9667  00D674  3206               	rrcf	___lldiv@divisor+1,f,c
  9668  00D676  3205               	rrcf	___lldiv@divisor,f,c
  9669  00D678  2E0D               	decfsz	___lldiv@counter,f,c
  9670  00D67A  D7E1               	goto	u4610
  9671  00D67C                     l1029:
  9672  00D67C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9673  00D680  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9674  00D684  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9675  00D688  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9676  00D68C  0012               	return		;funcret
  9677  00D68E                     __end_of___lldiv:
  9678                           	opt stack 0
  9679                           tblptru	equ	0xFF8
  9680                           tblptrh	equ	0xFF7
  9681                           tblptrl	equ	0xFF6
  9682                           tablat	equ	0xFF5
  9683                           prodh	equ	0xFF4
  9684                           prodl	equ	0xFF3
  9685                           intcon	equ	0xFF2
  9686                           postinc0	equ	0xFEE
  9687                           wreg	equ	0xFE8
  9688                           plusw1	equ	0xFE3
  9689                           indf2	equ	0xFDF
  9690                           postinc2	equ	0xFDE
  9691                           postdec2	equ	0xFDD
  9692                           plusw2	equ	0xFDB
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function _initLCD *****************
  9698 ;; Defined at:
  9699 ;;		line 40 in file "standbyMode.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;		None
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;		None
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      void 
  9706 ;; Registers used:
  9707 ;;		wreg, status,2, status,0, cstack
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;Total ram usage:        1 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; Hardware stack levels required when called:    2
  9720 ;; This function calls:
  9721 ;;		_lcdInst
  9722 ;; This function is called by:
  9723 ;;		_main
  9724 ;; This function uses a non-reentrant model
  9725 ;;
  9726                           
  9727                           	psect	text26
  9728  00D442                     __ptext26:
  9729                           	opt stack 0
  9730  00D442                     _initLCD:
  9731                           	opt stack 28
  9732                           
  9733                           ;standbyMode.c: 48: _delay((unsigned long)((15)*(40000000/4000.0)));
  9734                           
  9735                           ;incstack = 0
  9736  00D442  0EC3               	movlw	195
  9737  00D444  6E04               	movwf	??_initLCD& (0+255),c
  9738  00D446  0ECD               	movlw	205
  9739  00D448                     u7147:
  9740  00D448  2EE8               	decfsz	wreg,f,c
  9741  00D44A  D7FE               	bra	u7147
  9742  00D44C  2E04               	decfsz	??_initLCD& (0+255),f,c
  9743  00D44E  D7FC               	bra	u7147
  9744  00D450  F000               	nop	
  9745                           
  9746                           ;standbyMode.c: 49: lcdInst(0b00110011);
  9747  00D452  0E33               	movlw	51
  9748  00D454  EC6C  F069         	call	_lcdInst
  9749                           
  9750                           ;standbyMode.c: 50: lcdInst(0b00110010);
  9751  00D458  0E32               	movlw	50
  9752  00D45A  EC6C  F069         	call	_lcdInst
  9753                           
  9754                           ;standbyMode.c: 51: lcdInst(0b00101000);
  9755  00D45E  0E28               	movlw	40
  9756  00D460  EC6C  F069         	call	_lcdInst
  9757                           
  9758                           ;standbyMode.c: 52: lcdInst(0b00001111);
  9759  00D464  0E0F               	movlw	15
  9760  00D466  EC6C  F069         	call	_lcdInst
  9761                           
  9762                           ;standbyMode.c: 53: lcdInst(0b00000110);
  9763  00D46A  0E06               	movlw	6
  9764  00D46C  EC6C  F069         	call	_lcdInst
  9765                           
  9766                           ;standbyMode.c: 54: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9767  00D470  0E01               	movlw	1
  9768  00D472  EC6C  F069         	call	_lcdInst
  9769  00D476  0EC3               	movlw	195
  9770  00D478  6E04               	movwf	??_initLCD& (0+255),c
  9771  00D47A  0ECD               	movlw	205
  9772  00D47C                     u7157:
  9773  00D47C  2EE8               	decfsz	wreg,f,c
  9774  00D47E  D7FE               	bra	u7157
  9775  00D480  2E04               	decfsz	??_initLCD& (0+255),f,c
  9776  00D482  D7FC               	bra	u7157
  9777  00D484  F000               	nop	
  9778                           
  9779                           ;standbyMode.c: 57: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  9780  00D486  0E0F               	movlw	15
  9781  00D488  EC6C  F069         	call	_lcdInst
  9782  00D48C  0012               	return		;funcret
  9783  00D48E                     __end_of_initLCD:
  9784                           	opt stack 0
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           intcon	equ	0xFF2
  9792                           postinc0	equ	0xFEE
  9793                           wreg	equ	0xFE8
  9794                           plusw1	equ	0xFE3
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           plusw2	equ	0xFDB
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _lcdInst *****************
  9804 ;; Defined at:
  9805 ;;		line 26 in file "standbyMode.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  data            1    wreg     unsigned char 
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  data            1    2[COMRAM] unsigned char 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		wreg, status,2, status,0, cstack
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;Total ram usage:        1 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    1
  9826 ;; This function calls:
  9827 ;;		_lcdNibble
  9828 ;; This function is called by:
  9829 ;;		_initLCD
  9830 ;;		_viewLogs
  9831 ;;		_displayLogs
  9832 ;;		_food_press
  9833 ;;		_diet_press
  9834 ;;		_which_drawer
  9835 ;;		_standbyMode
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           	psect	text27
  9840  00D2D8                     __ptext27:
  9841                           	opt stack 0
  9842  00D2D8                     _lcdInst:
  9843                           	opt stack 27
  9844                           
  9845                           ;incstack = 0
  9846                           ;lcdInst@data stored from wreg
  9847  00D2D8  6E03               	movwf	lcdInst@data,c
  9848                           
  9849                           ;standbyMode.c: 34: LATDbits.LATD2 = 0;
  9850  00D2DA  948C               	bcf	3980,2,c	;volatile
  9851                           
  9852                           ;standbyMode.c: 35: lcdNibble(data);
  9853  00D2DC  5003               	movf	lcdInst@data,w,c
  9854  00D2DE  ECC7  F06A         	call	_lcdNibble
  9855                           
  9856                           ;standbyMode.c: 36: _delay((unsigned long)((100)*(40000000/4000000.0)));
  9857  00D2E2  0EC8               	movlw	200
  9858  00D2E4                     u7167:
  9859  00D2E4  D000               	nop2	
  9860  00D2E6  2EE8               	decfsz	wreg,f,c
  9861  00D2E8  D7FD               	bra	u7167
  9862  00D2EA  0012               	return		;funcret
  9863  00D2EC                     __end_of_lcdInst:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           postinc0	equ	0xFEE
  9873                           wreg	equ	0xFE8
  9874                           plusw1	equ	0xFE3
  9875                           indf2	equ	0xFDF
  9876                           postinc2	equ	0xFDE
  9877                           postdec2	equ	0xFDD
  9878                           plusw2	equ	0xFDB
  9879                           fsr2h	equ	0xFDA
  9880                           fsr2l	equ	0xFD9
  9881                           status	equ	0xFD8
  9882                           
  9883 ;; *************** function _lcdNibble *****************
  9884 ;; Defined at:
  9885 ;;		line 61 in file "standbyMode.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;  data            1    wreg     unsigned char 
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  data            1    1[COMRAM] unsigned char 
  9890 ;;  temp            1    0[COMRAM] unsigned char 
  9891 ;; Return value:  Size  Location     Type
  9892 ;;                  1    wreg      void 
  9893 ;; Registers used:
  9894 ;;		wreg, status,2, status,0
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;Total ram usage:        2 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; This function calls:
  9907 ;;		Nothing
  9908 ;; This function is called by:
  9909 ;;		_lcdInst
  9910 ;;		_putch
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           	psect	text28
  9915  00D58E                     __ptext28:
  9916                           	opt stack 0
  9917  00D58E                     _lcdNibble:
  9918                           	opt stack 27
  9919                           
  9920                           ;incstack = 0
  9921                           ;lcdNibble@data stored from wreg
  9922  00D58E  6E02               	movwf	lcdNibble@data,c
  9923                           
  9924                           ;standbyMode.c: 69: char temp = (unsigned char) (data & 0xF0);
  9925  00D590  5002               	movf	lcdNibble@data,w,c
  9926  00D592  0BF0               	andlw	240
  9927  00D594  6E01               	movwf	lcdNibble@temp,c
  9928                           
  9929                           ;standbyMode.c: 70: LATD = (unsigned char) (LATD & 0x0F);
  9930  00D596  508C               	movf	3980,w,c	;volatile
  9931  00D598  0B0F               	andlw	15
  9932  00D59A  6E8C               	movwf	3980,c	;volatile
  9933                           
  9934                           ;standbyMode.c: 71: LATD = (unsigned char) (temp | LATD);
  9935  00D59C  5001               	movf	lcdNibble@temp,w,c
  9936  00D59E  108C               	iorwf	3980,w,c	;volatile
  9937  00D5A0  6E8C               	movwf	3980,c	;volatile
  9938                           
  9939                           ;standbyMode.c: 73: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9940  00D5A2  0E00               	movlw	0
  9941  00D5A4  BEF2               	btfsc	intcon,7,c	;volatile
  9942  00D5A6  0E01               	movlw	1
  9943  00D5A8  6E7C               	movwf	standbyMode@LCDinterruptState,c
  9944  00D5AA  9EF2               	bcf	intcon,7,c	;volatile
  9945  00D5AC  868C               	bsf	3980,3,c	;volatile
  9946  00D5AE  0E53               	movlw	83
  9947  00D5B0                     u7177:
  9948  00D5B0  2EE8               	decfsz	wreg,f,c
  9949  00D5B2  D7FE               	bra	u7177
  9950  00D5B4  F000               	nop	
  9951  00D5B6  968C               	bcf	3980,3,c	;volatile
  9952  00D5B8  0EC8               	movlw	200
  9953  00D5BA                     u7187:
  9954  00D5BA  D000               	nop2	
  9955  00D5BC  2EE8               	decfsz	wreg,f,c
  9956  00D5BE  D7FD               	bra	u7187
  9957  00D5C0  B07C               	btfsc	standbyMode@LCDinterruptState,0,c
  9958  00D5C2  D002               	bra	u3215
  9959  00D5C4  9EF2               	bcf	intcon,7,c	;volatile
  9960  00D5C6  D001               	bra	u3216
  9961  00D5C8                     u3215:
  9962  00D5C8  8EF2               	bsf	intcon,7,c	;volatile
  9963  00D5CA                     u3216:
  9964                           
  9965                           ;standbyMode.c: 76: data = (unsigned char) (data << 4);
  9966  00D5CA  3802               	swapf	lcdNibble@data,w,c
  9967  00D5CC  0BF0               	andlw	240
  9968  00D5CE  6E02               	movwf	lcdNibble@data,c
  9969                           
  9970                           ;standbyMode.c: 77: temp = (unsigned char) (data & 0xF0);
  9971  00D5D0  5002               	movf	lcdNibble@data,w,c
  9972  00D5D2  0BF0               	andlw	240
  9973  00D5D4  6E01               	movwf	lcdNibble@temp,c
  9974                           
  9975                           ;standbyMode.c: 78: LATD = (unsigned char) (LATD & 0x0F);
  9976  00D5D6  508C               	movf	3980,w,c	;volatile
  9977  00D5D8  0B0F               	andlw	15
  9978  00D5DA  6E8C               	movwf	3980,c	;volatile
  9979                           
  9980                           ;standbyMode.c: 79: LATD = (unsigned char) (temp | LATD);
  9981  00D5DC  5001               	movf	lcdNibble@temp,w,c
  9982  00D5DE  108C               	iorwf	3980,w,c	;volatile
  9983  00D5E0  6E8C               	movwf	3980,c	;volatile
  9984                           
  9985                           ;standbyMode.c: 81: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9986  00D5E2  0E00               	movlw	0
  9987  00D5E4  BEF2               	btfsc	intcon,7,c	;volatile
  9988  00D5E6  0E01               	movlw	1
  9989  00D5E8  6E7C               	movwf	standbyMode@LCDinterruptState,c
  9990  00D5EA  9EF2               	bcf	intcon,7,c	;volatile
  9991  00D5EC  868C               	bsf	3980,3,c	;volatile
  9992  00D5EE  0E53               	movlw	83
  9993  00D5F0                     u7197:
  9994  00D5F0  2EE8               	decfsz	wreg,f,c
  9995  00D5F2  D7FE               	bra	u7197
  9996  00D5F4  F000               	nop	
  9997  00D5F6  968C               	bcf	3980,3,c	;volatile
  9998  00D5F8  0EC8               	movlw	200
  9999  00D5FA                     u7207:
 10000  00D5FA  D000               	nop2	
 10001  00D5FC  2EE8               	decfsz	wreg,f,c
 10002  00D5FE  D7FD               	bra	u7207
 10003  00D600  B07C               	btfsc	standbyMode@LCDinterruptState,0,c
 10004  00D602  D002               	bra	u3225
 10005  00D604  9EF2               	bcf	intcon,7,c	;volatile
 10006  00D606  D001               	bra	u3226
 10007  00D608                     u3225:
 10008  00D608  8EF2               	bsf	intcon,7,c	;volatile
 10009  00D60A                     u3226:
 10010  00D60A  0012               	return		;funcret
 10011  00D60C                     __end_of_lcdNibble:
 10012                           	opt stack 0
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           intcon	equ	0xFF2
 10020                           postinc0	equ	0xFEE
 10021                           wreg	equ	0xFE8
 10022                           plusw1	equ	0xFE3
 10023                           indf2	equ	0xFDF
 10024                           postinc2	equ	0xFDE
 10025                           postdec2	equ	0xFDD
 10026                           plusw2	equ	0xFDB
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8
 10030                           tblptru	equ	0xFF8
 10031                           tblptrh	equ	0xFF7
 10032                           tblptrl	equ	0xFF6
 10033                           tablat	equ	0xFF5
 10034                           prodh	equ	0xFF4
 10035                           prodl	equ	0xFF3
 10036                           intcon	equ	0xFF2
 10037                           postinc0	equ	0xFEE
 10038                           wreg	equ	0xFE8
 10039                           plusw1	equ	0xFE3
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           plusw2	equ	0xFDB
 10044                           fsr2h	equ	0xFDA
 10045                           fsr2l	equ	0xFD9
 10046                           status	equ	0xFD8
 10047                           
 10048                           	psect	rparam
 10049  0000                     tblptru	equ	0xFF8
 10050                           tblptrh	equ	0xFF7
 10051                           tblptrl	equ	0xFF6
 10052                           tablat	equ	0xFF5
 10053                           prodh	equ	0xFF4
 10054                           prodl	equ	0xFF3
 10055                           intcon	equ	0xFF2
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           plusw1	equ	0xFE3
 10059                           indf2	equ	0xFDF
 10060                           postinc2	equ	0xFDE
 10061                           postdec2	equ	0xFDD
 10062                           plusw2	equ	0xFDB
 10063                           fsr2h	equ	0xFDA
 10064                           fsr2l	equ	0xFD9
 10065                           status	equ	0xFD8


Data Sizes:
    Strings     665
    Constant    65
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    107     125
    BANK0           128      0      16
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_70(CODE[11]), STR_69(CODE[13]), STR_68(CODE[11]), STR_67(CODE[13]), 
		 -> STR_66(CODE[11]), STR_65(CODE[8]), STR_64(CODE[15]), STR_63(CODE[16]), 
		 -> STR_62(CODE[10]), STR_61(CODE[8]), STR_60(CODE[15]), STR_59(CODE[16]), 
		 -> STR_58(CODE[10]), STR_57(CODE[16]), STR_56(CODE[16]), STR_55(CODE[17]), 
		 -> STR_54(CODE[13]), STR_53(CODE[17]), STR_52(CODE[14]), STR_51(CODE[11]), 
		 -> STR_50(CODE[11]), STR_49(CODE[15]), STR_48(CODE[15]), STR_47(CODE[10]), 
		 -> STR_46(CODE[13]), STR_45(CODE[16]), STR_44(CODE[16]), STR_43(CODE[15]), 
		 -> STR_42(CODE[15]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[8]), 
		 -> STR_38(CODE[15]), STR_37(CODE[15]), STR_36(CODE[11]), STR_35(CODE[14]), 
		 -> STR_34(CODE[16]), STR_33(CODE[16]), STR_32(CODE[11]), STR_31(CODE[14]), 
		 -> STR_30(CODE[16]), STR_29(CODE[16]), STR_28(CODE[16]), STR_27(CODE[13]), 
		 -> STR_26(CODE[13]), STR_25(CODE[15]), STR_24(CODE[15]), STR_23(CODE[17]), 
		 -> STR_22(CODE[18]), STR_21(CODE[15]), STR_20(CODE[11]), STR_19(CODE[7]), 
		 -> STR_18(CODE[3]), STR_17(CODE[16]), STR_16(CODE[6]), STR_15(CODE[7]), 
		 -> STR_14(CODE[16]), STR_13(CODE[14]), STR_12(CODE[17]), STR_11(CODE[7]), 
		 -> STR_10(CODE[9]), STR_9(CODE[17]), STR_8(CODE[11]), STR_7(CODE[17]), 
		 -> STR_6(CODE[14]), STR_5(CODE[17]), STR_4(CODE[11]), STR_3(CODE[15]), 
		 -> STR_2(CODE[11]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   62527
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         32    32      0   62392
                                             75 COMRAM    32    32      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1     880
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    9297
                                             36 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   19495
                                             63 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         27    25      2   10638
                                             36 COMRAM    27    25      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   11623
                                             36 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   10650
                                             36 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    8064
                                             12 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _readEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      10       5       12.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6B      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      34        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 24 00:30:04 2018

                 _standbyMode F346        __end_of_verifyKeypress D532                  ?_displayLogs 0025  
                 __CFG_CPD$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l200 EF38                           l210 F012  
                         l202 EF7A                           l211 F052                           l220 F16C  
                         l300 D6A2                           l213 F094                           l205 EFBC  
                         l222 F1C0                           l302 D6AA                           l215 F0D6  
                         l224 F214                           l232 D516                           l401 EA24  
                         l153 F33C                           l321 D8A4                           l233 D4FC  
                         l226 F268                           l218 F118                           l170 EC88  
                         l162 EBAE                           l154 EB48                           l314 D6BA  
                         l234 D512                           l242 DD4E                           l403 EA54  
                         l331 D8CE                           l148 F2BE                           l164 EC02  
                         l340 D9A8                           l252 DDE0                           l244 DD48  
                         l412 D7C2                           l420 D77E                           l500 F95E  
                         l405 EA84                           l165 EC30                           l149 EB1E  
                         l309 D6B2                           l333 D934                           l261 DED4  
                         l421 D786                           l413 D74E                           l350 E658  
                         l190 EDF0                           l174 ECB2                           l158 EB72  
                         l326 D8B0                           l270 E3E0                           l422 D78E  
                         l414 D824                           l407 EAB6                           l351 E658  
                         l343 DA18                           l247 DDD4                           l239 DCA2  
                         l423 D796                           l415 D756                           l431 DA68  
                         l511 FA4A                           l408 EB0A                           l360 E682  
                         l192 EE32                           l184 ED5E                           l280 E514  
                         l272 E424                           l424 D79E                           l416 D75E  
                         l504 F9A6                           l169 EC5A                           l329 D996  
                         l265 E33C                           l425 D7A6                           l417 D766  
                         l441 DA92                           l505 F9DE                           l362 E6E4  
                         l194 EE74                           l274 E468                           l266 E370  
                         l426 D7AE                           l418 D76E                           l530 FC7C  
                         l522 FBBC                           l371 E780                           l355 E664  
                         l179 ED08                           l283 E552                           l275 E4AC  
                         l427 D7B8                           l419 D776                           l443 DBB2  
                         l523 FBF4                           l515 FAB0                           l507 FA06  
                         l436 DA74                           l516 FB7E                           l381 E856  
                         l373 E7AA                           l365 E726                           l197 EEB6  
                         l189 EDB0                           l525 FCD0                           l517 FB22  
                         l358 E770                           l198 EEF6                           l294 D6C2  
                         l286 E5D6                           l462 DC08                           l446 DB72  
                         l518 FB74                           l631 DFE0                           l615 DEFE  
                         l391 E93A                           l383 E882                           l375 E7D4  
                         l295 D698                           l439 DBF4                           l447 DB46  
                         l551 D3C0                           l632 DFAE                           l624 DF50  
                         l616 DF0E                           l296 D742                           l480 FA0C  
                         l393 E968                           l385 E8B0                           l377 E7FE  
                         l289 E5E2                           l457 DBAE                           l473 F6F4  
                         l650 E10A                           l642 E098                           l634 E00E  
                         l626 DFB2                           l618 DF22                           l482 F7B4  
                         l651 E0F4                           l643 E058                           l619 DF1C  
                         l395 E996                           l387 E8DE                           l379 E82A  
                         l491 F9FE                           l660 E1DE                           l476 F700  
                         l468 F3D6                           l637 E088                           l397 E9C4  
                         l389 E90C                           l493 F83C                           l662 E1C8  
                         l638 E028                           l478 FC14                           l486 F7EE  
                         l663 E13E                           l647 E0B2                           l399 E9F4  
                         l479 F74C                           l664 E1D8                           l648 E0D6  
                         l665 E182                           l649 E0DE                           l497 F89A  
                         l489 F7FA                           l498 F968                           l659 E138  
                         l499 F90C                           l998 D32A                  __CFG_CPB$OFF 000000  
          standbyMode@display 005A                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l1024 D63A                          l1025 D62E  
                        l1028 D66E                          l1029 D67C                          l1081 D4CC  
                        l1401 D302                          l1082 D4D6                          l1091 D42E  
                        l1092 D438                          l1077 D4AC                          l1078 D4A4  
                        l1087 D416                          l1088 D40E                          l3305 E02C  
                        l3319 E05C                          l4145 E720                          l4601 F5AC  
                        l3643 D512                          l4703 F89A                          l4801 FAB6  
                        l4707 F8A0                          l4479 D3A0                          l4691 F844  
                        l4785 FA5A                          l4797 FAB0                          STR_1 FFDB  
                        STR_2 FF8A                          STR_3 FEBB                          STR_4 FF8A  
                        STR_5 FDCD                          STR_6 FF22                          STR_7 FDDE  
                        STR_8 FF8A                          STR_9 FDAB                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u3215 D5C8                          u3216 D5CA  
                        u4120 F00A                          u3225 D608                          u3226 D60A  
                        u3260 D4B0                          u3500 E126                          u3520 E1E6  
                        u3600 EBA6                          u3290 D41A                          u3550 EB40  
                        u3800 ED56                          u6120 F806                          u6040 F5AC  
                        u4610 D63E                          u3490 E112                          u3570 EB6A  
                        u4710 DE00                          u2855 D370                          u7007 E524  
                        u2856 D372                          u3840 EDA8                          u3760 ED00  
                        u6320 FC1C                          u6080 F754                          u7017 E544  
                        u4810 D8E2                          u4730 DED8                          u6170 F8A0  
                        u6090 F760                          u7107 E696                          u7027 E562  
                        u7117 EAC2                          u4741 D878                          u7037 E594  
                        u6270 FAB6                          u7207 D5FA                          u7127 EAF4  
                        u7047 E5AE                          u6407 F452                          u7137 D2F8  
                        u7057 D83A                          u6417 F48A                          u7147 D448  
                        u7067 D948                          u6507 F680                          u6427 F4B6  
                        u4940 E700                          u5820 DADE                          u7157 D47C  
                        u4861 E648                          u7077 D9D8                          u6517 F6B2  
                        u6437 F4EE                          u5910 DB24                          u7167 D2E4  
                        u7087 DA0A                          u6607 F950                          u6527 F6CC  
                        u6447 F508                          u7177 D5B0                          u7097 E5FA  
                        u6617 F974                          u6537 F76C                          u6457 F540  
                        u6377 F36E                          u7187 D5BA                          u6707 FC88  
                        u6627 FA18                          u6547 F7A4                          u6467 F5C4  
                        u6387 F394                          u7197 D5F0                          u6717 FCC0  
                        u6637 FAD2                          u6557 F7C0                          u6477 F5F6  
                        u6397 F3AE                          u5950 DB88                          u6807 DD08  
                        u6727 FCDC                          u6647 FB0A                          u6567 F812  
                        u6487 F610                          u5960 DBAA                          u6817 DD3A  
                        u6737 FD14                          u6657 FB2E                          u6577 F8BC  
                        u6497 F666                          u6907 E2E4                          u6827 DD5A  
                        u6747 DA34                          u6667 FB66                          u6587 F8F4  
                        u6917 E32E                          u6837 DD92                          u6757 DBC6  
                        u6677 FB8A                          u6597 F918                          u6927 E362  
                        u6847 DDAC                          u6767 DC58                          u6687 FC48  
                        u6937 E380                          u6857 DE44                          u6777 DC8A  
                        u6697 FC6E                          u5995 D566                          u6947 E3D2  
                        u6867 DE5C                          u6787 DCBC                          u6957 E416  
                        u6877 DE7C                          u6797 DCEE                          u6967 E45A  
                        u6887 DE94                          u6977 E49E                          u6897 DEC6  
                        u6987 E4BC                          u6997 E506         __end_of_decode_drawer D82E  
           viewLogs@logNumber 004A                          _main D3C8                          _keys FD25  
             food_press@F3097 0088                          fsr2h 000FDA                          indf2 000FDF  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 004B           standbyMode@keypress 0059                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM D39E               diet_press@F3112 0080  
             ?_verifyKeypress 0001              __end_of_LCD_LEFT FD61           standbyMode@whichKey 0057  
             food_press@count 0031               food_press@tally 002B             _drawerInformation 006C  
       I2C_Master_Read@ackBit 0002              ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FFCA  
                       STR_11 FFEB                         STR_20 FECE                         STR_12 FDCD  
                       STR_13 FF22                         STR_21 FECA                         STR_30 FE0F  
                       STR_14 FE1F                         STR_22 FD66                         STR_15 FFF2  
                       STR_31 FF06                         STR_23 FDBC                         STR_40 FDCD  
                       STR_16 FFF9                         STR_32 FFA0                         STR_24 FEAC  
                       STR_25 FE8E                         STR_33 FE3F                         STR_17 FE2F  
                       STR_41 FD9A                         STR_34 FE3F                         STR_18 FED6  
                       STR_50 FFAB                         STR_26 FF4B                         STR_42 FE7F  
                       STR_43 FE7F                         STR_19 FED2                         STR_51 FF7F  
                       STR_27 FF65                         STR_35 FF14                         STR_36 FFA0  
                       STR_52 FF30                         STR_60 FEF7                         STR_28 FE6F  
                       STR_44 FE5F                         STR_53 FD9A                         STR_61 FFD3  
                       STR_37 FE9D                         STR_29 FE0F                         STR_45 FDEF  
                       STR_70 FF95                         STR_38 FE9D                         STR_62 FFC0  
                       STR_46 FF72                         STR_54 FF58                         STR_63 FDFF  
                       STR_39 FFE3                         STR_47 FFB6                         STR_55 FD89  
                       STR_71 FD78                         STR_64 FEF7                         STR_48 FED9  
                       STR_56 FE4F                         STR_65 FFD3                         STR_57 FE6F  
                       STR_49 FEE8                         STR_58 FFC0                         STR_66 FF95  
                       STR_67 FF3E                         STR_59 FDFF                         STR_68 FF95  
                       STR_69 FF3E               __end_of___lldiv D68E             viewLogs@returnVal 0048  
             __end_of___lwdiv D4E0               __end_of___lwmod D442                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000               diet_press@count 002F               __end_of_lcdInst D2EC  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD D48E  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers FD51                  displayLogs@n 003E  
             __end_of_isdigit D332                         _input FD36                         _putch D2EC  
                       tablat 000FF5             _LCDinterruptState 007D                         plusw1 000FE3  
                       plusw2 000FDB                         status 000FD8   I2C_Master_Read@receivedByte 0003  
        standbyMode@keypress1 005B                __CFG_PBADEN$ON 000000               standbyMode@diet 0066  
             standbyMode@food 0060               standbyMode@time 004E               standbyMode@zero 005E  
             __initialization D332                  __end_of_main D400                  __end_of_keys FD36  
                standbyMode@i 0068                  standbyMode@x 0062                __CFG_OSC$HSPLL 000000  
           __end_of_LCD_RIGHT FD62              food_press@drawer 0027                        ??_main 006C  
               __activetblptr 000002           food_press@backCheck 002D             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0002            ??_I2C_Master_Start 0002                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 0004                        _EEDATA 000FA8  
                      _EECON2 000FA7                        ?_putch 0001                        _SSPADD 000FC8  
                      _SSPBUF 000FC9              diet_press@drawer 0025                __CFG_XINST$OFF 000000  
                      ___wmul D378                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 D338  
                      clear_1 D344                     ??_lcdInst 0003                        _printf DEF4  
        __size_of_displayLogs 03EE           food_press@foodTable 0033                     ??_initLCD 0004  
             get_digits@count 0005                     ??_isdigit 0001                  __mediumconst FD24  
            __end_of_viewLogs DEF4                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization D34A  
        which_drawer@keypress 0030                 ___rparam_used 000001               writeEEPROM@data 0001  
             viewLogs@logView 0044                  ?_standbyMode 0001          __end_of_happynewyear FD60  
              __pcstackCOMRAM 0001                 __end_of_input FD47                 __end_of_putch D300  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0025  
           food_press@isValid 002F                       ??_putch 0003                    __pbssBANK0 0080  
                  _check_food EB14              ??_verifyKeypress 0003                  ?_writeEEPROM 0001  
                     ?___wmul 0001                    _diet_press E5EE                       ?_printf 000D  
                  _get_digits D68E                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7                    _readEEPROM D300        standbyMode@drawerCount 0064  
                  _food_press D82E             __end_of_lcdNibble D60C                       __Hparam 0000  
                     __Lparam 0000                     ?_viewLogs 0040      displayLogs@operationTime 0030  
                     ___lldiv D60C               __size_of___wmul 0026                       ___lwdiv D48E  
                     ___lwmod D400                       __pcinit D332                       __ramtop 1000  
                     _lcdInst D2D8                       __ptext0 D3C8                       __ptext1 F346  
                     __ptext2 D39E                       __ptext3 DA22                       __ptext4 D74C  
                     __ptext5 DC26                       __ptext6 D4E0                       __ptext7 E200  
                     __ptext8 D300                       __ptext9 D82E        __size_of_decode_drawer 00E2  
             __size_of_printf 030C                       _initLCD D442             __end_of_hexpowers FD59  
                     _dpowers FD47         which_drawer@backCheck 002C                       _isdigit D314  
                   _LCD_RIGHT FD61      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0025      __size_of_I2C_Master_Stop 0008  
        end_of_initialization D34A          displayLogs@keypress3 002F               which_drawer@sum 002A  
       __end_of_LCD_SIZE_HORZ FD64                   ?_check_food 0001         __end_of_LCD_SIZE_VERT FD63  
               __Lmediumconst FD24     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                       printf@c 0024  
                     printf@f 000D                       postdec2 000FDD                    ??_viewLogs 0042  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 09DE  
                 ?_diet_press 0025                     _PORTBbits 000F81                 ?_which_drawer 0025  
         diet_press@backCheck 002D                   ?_get_digits 0001                     _TRISCbits 000F94  
            viewLogs@checkLog 0046                  _happynewyear FD59             readEEPROM@address 0001  
           standbyMode@drawer 006A                 _decode_drawer D74C                   ?_readEEPROM 0001  
                 printf@width 0022                   ?_food_press 0025           diet_press@dietTable 0034  
               ??_displayLogs 0027          __size_of_writeEEPROM 002A                __end_of___wmul D39E  
      standbyMode@validDrawer 005C           __size_of_check_food 0832                ??_which_drawer 0027  
              __end_of_printf E200           start_initialization D332                ?_decode_drawer 0001  
         __size_of_diet_press 0526             ??_I2C_Master_Init 0012             ??_I2C_Master_Read 0002  
           ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002           __size_of_get_digits 00BE  
                    ??___wmul 0005      I2C_Master_Init@clockFreq 000E              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 0017            food_press@keypress 003B           __size_of_readEEPROM 0014  
         __end_of_displayLogs E5EE           __size_of_food_press 01F4  standbyMode@LCDinterruptState 007C  
                 __pbssCOMRAM 006C           decode_drawer@drawer 0001              _I2C_Master_Start D2AC  
            _I2C_Master_Write D2BC              ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000  
               __pmediumconst FD24                     _lcdNibble D58E                      ?___lldiv 0001  
                    ?___lwdiv 0001                      ?___lwmod 0008             __size_of_viewLogs 02CE  
                    ?_lcdInst 0001                      ?_initLCD 0001                      ?_isdigit 0001  
         check_food@foodInput 0003                     _hexpowers FD51              ___lwdiv@quotient 0005  
             ??_decode_drawer 0003                __size_of_putch 0014                  ??_check_food 0005  
                    _LCD_LEFT FD60                ___wmul@product 0005                      _LATDbits 000F8C  
        __end_of_which_drawer DC26              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
                ??_diet_press 0027                   _displayLogs E200       __size_of_verifyKeypress 0052  
           ___wmul@multiplier 0001            __end_of_check_food F346                 lcdNibble@data 0002  
                  printf@flag 0021                 lcdNibble@temp 0001                    printf@prec 001E  
                ??_get_digits 0003                _LCD_HORZ_LIMIT FD65                 diet_press@sum 0031  
           which_drawer@count 002E            __end_of_diet_press EB14                  ??_readEEPROM 0001  
                ??_food_press 0029            diet_press@keypress 0033                    _EECON1bits 000FA6  
                    __Hrparam 0000                 ??_standbyMode 004C                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits D74C            diet_press@previous 0029  
            __size_of___lldiv 0082         displayLogs@flatPieces 002B              __size_of___lwdiv 0052  
            __size_of___lwmod 0042                   _isdigit$930 0002              __size_of_lcdInst 0014  
             _I2C_Master_Init D532               _I2C_Master_Read D354              __size_of_initLCD 004C  
             _I2C_Master_Wait D2C6            __end_of_readEEPROM D314               _I2C_Master_Stop D2B4  
      __end_of_LCD_HORZ_LIMIT FD66              __size_of_isdigit 001E            __end_of_food_press DA22  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 D68E  
                    __ptext11 EB14                      __ptext20 D2B4                      __ptext12 E5EE  
                    __ptext21 D2AC                      __ptext13 DEF4                      __ptext22 D354  
                    __ptext14 D2EC                      __ptext23 D2C6                      __ptext15 D314  
                    __ptext24 D532                      __ptext16 D378                      __ptext25 D60C  
                    __ptext17 D400                      __ptext26 D442                      __ptext18 D48E  
                    __ptext27 D2D8                      __ptext19 D2BC                      __ptext28 D58E  
              _LCD_VERT_LIMIT FD64                 __size_of_main 0038            displayLogs@minutes 0032  
          displayLogs@seconds 0034                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 0036  
    displayLogs@markedDrawer2 0038      displayLogs@markedDrawer3 003A      displayLogs@markedDrawer4 003C  
                 ??_lcdNibble 0001                      _viewLogs DC26               verifyKeypress@i 0008  
                   printf@idx 001B                     printf@val 001F           __end_of_standbyMode FD24  
 I2C_Master_Write@byteToWrite 0002      decode_drawer@returnValue 0005         displayLogs@longPieces 002D  
            which_drawer@rand 0028                     putch@data 0003      __end_of_I2C_Master_Start D2B4  
    __end_of_I2C_Master_Write D2C6                    _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FD65  
                    isdigit@c 0003         __size_of_which_drawer 0204     standbyMode@firstIteration 0055  
               _LCD_SIZE_HORZ FD63              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FD62  
            ___lldiv@dividend 0001       verifyKeypress@logNumber 0005        displayLogs@roundPieces 0029  
                    printf@ap 001C                   diet_press@i 002B       __end_of_I2C_Master_Init D58E  
     __end_of_I2C_Master_Read D378       __end_of_I2C_Master_Wait D2D8       __end_of_I2C_Master_Stop D2BC  
                 lcdInst@data 0003                _verifyKeypress D4E0           __end_of_writeEEPROM D3C8  
     verifyKeypress@returnVal 0006              ___lldiv@quotient 0009                  _which_drawer DA22  
             ___lwmod@divisor 000A               ___lwmod@counter 000C        verifyKeypress@keypress 0001  
                 _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5         check_food@returnValue 0007  
