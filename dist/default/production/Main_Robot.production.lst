

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 19 21:21:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	mediumconst
    66  00FD96                     __pmediumconst:
    67                           	opt stack 0
    68  00FD96  00                 	db	0
    69  00FD97                     _keys:
    70                           	opt stack 0
    71  00FD97  31                 	db	49
    72  00FD98  32                 	db	50
    73  00FD99  33                 	db	51
    74  00FD9A  41                 	db	65
    75  00FD9B  34                 	db	52
    76  00FD9C  35                 	db	53
    77  00FD9D  36                 	db	54
    78  00FD9E  42                 	db	66
    79  00FD9F  37                 	db	55
    80  00FDA0  38                 	db	56
    81  00FDA1  39                 	db	57
    82  00FDA2  43                 	db	67
    83  00FDA3  2A                 	db	42
    84  00FDA4  30                 	db	48
    85  00FDA5  23                 	db	35
    86  00FDA6  44                 	db	68
    87  00FDA7  00                 	db	0
    88  00FDA8                     __end_of_keys:
    89                           	opt stack 0
    90  00FDA8                     _input:
    91                           	opt stack 0
    92  00FDA8  31                 	db	49
    93  00FDA9  32                 	db	50
    94  00FDAA  33                 	db	51
    95  00FDAB  52                 	db	82
    96  00FDAC  34                 	db	52
    97  00FDAD  35                 	db	53
    98  00FDAE  36                 	db	54
    99  00FDAF  46                 	db	70
   100  00FDB0  37                 	db	55
   101  00FDB1  38                 	db	56
   102  00FDB2  39                 	db	57
   103  00FDB3  4C                 	db	76
   104  00FDB4  2A                 	db	42
   105  00FDB5  30                 	db	48
   106  00FDB6  23                 	db	35
   107  00FDB7  44                 	db	68
   108  00FDB8  00                 	db	0
   109  00FDB9                     __end_of_input:
   110                           	opt stack 0
   111  00FDB9                     _dpowers:
   112                           	opt stack 0
   113  00FDB9  0001               	dw	1
   114  00FDBB  000A               	dw	10
   115  00FDBD  0064               	dw	100
   116  00FDBF  03E8               	dw	1000
   117  00FDC1  2710               	dw	10000
   118  00FDC3                     __end_of_dpowers:
   119                           	opt stack 0
   120  00FDC3                     _LCD_LEFT:
   121                           	opt stack 0
   122  00FDC3  00                 	db	0
   123  00FDC4                     __end_of_LCD_LEFT:
   124                           	opt stack 0
   125  00FDC4                     _LCD_RIGHT:
   126                           	opt stack 0
   127  00FDC4  01                 	db	1
   128  00FDC5                     __end_of_LCD_RIGHT:
   129                           	opt stack 0
   130  00FDC5                     _LCD_SIZE_VERT:
   131                           	opt stack 0
   132  00FDC5  02                 	db	2
   133  00FDC6                     __end_of_LCD_SIZE_VERT:
   134                           	opt stack 0
   135  00FDC6                     _LCD_SIZE_HORZ:
   136                           	opt stack 0
   137  00FDC6  10                 	db	16
   138  00FDC7                     __end_of_LCD_SIZE_HORZ:
   139                           	opt stack 0
   140  00FDC7                     _LCD_VERT_LIMIT:
   141                           	opt stack 0
   142  00FDC7  02                 	db	2
   143  00FDC8                     __end_of_LCD_VERT_LIMIT:
   144                           	opt stack 0
   145  00FDC8                     _LCD_HORZ_LIMIT:
   146                           	opt stack 0
   147  00FDC8  28                 	db	40
   148  00FDC9                     __end_of_LCD_HORZ_LIMIT:
   149                           	opt stack 0
   150  0000                     _EECON2	set	4007
   151  0000                     _EEDATA	set	4008
   152  0000                     _EEADR	set	4009
   153  0000                     _EECON1bits	set	4006
   154  0000                     _PORTB	set	3969
   155  0000                     _PORTBbits	set	3969
   156  0000                     _INTCONbits	set	4082
   157  0000                     _LATDbits	set	3980
   158  0000                     _ADCON1	set	4033
   159  0000                     _ADCON0	set	4034
   160  0000                     _TRISE	set	3990
   161  0000                     _TRISD	set	3989
   162  0000                     _TRISC	set	3988
   163  0000                     _TRISB	set	3987
   164  0000                     _TRISA	set	3986
   165  0000                     _LATE	set	3981
   166  0000                     _LATD	set	3980
   167  0000                     _LATC	set	3979
   168  0000                     _LATB	set	3978
   169  0000                     _LATA	set	3977
   170  00FDC9                     STR_12:
   171  00FDC9  52                 	db	82	;'R'
   172  00FDCA  65                 	db	101	;'e'
   173  00FDCB  6D                 	db	109	;'m'
   174  00FDCC  61                 	db	97	;'a'
   175  00FDCD  69                 	db	105	;'i'
   176  00FDCE  6E                 	db	110	;'n'
   177  00FDCF  69                 	db	105	;'i'
   178  00FDD0  6E                 	db	110	;'n'
   179  00FDD1  67                 	db	103	;'g'
   180  00FDD2  20                 	db	32
   181  00FDD3  70                 	db	112	;'p'
   182  00FDD4  69                 	db	105	;'i'
   183  00FDD5  65                 	db	101	;'e'
   184  00FDD6  63                 	db	99	;'c'
   185  00FDD7  65                 	db	101	;'e'
   186  00FDD8  73                 	db	115	;'s'
   187  00FDD9  3A                 	db	58	;':'
   188  00FDDA  00                 	db	0
   189  00FDDB                     STR_41:
   190  00FDDB  64                 	db	100	;'d'
   191  00FDDC  72                 	db	114	;'r'
   192  00FDDD  61                 	db	97	;'a'
   193  00FDDE  77                 	db	119	;'w'
   194  00FDDF  65                 	db	101	;'e'
   195  00FDE0  72                 	db	114	;'r'
   196  00FDE1  73                 	db	115	;'s'
   197  00FDE2  20                 	db	32
   198  00FDE3  72                 	db	114	;'r'
   199  00FDE4  65                 	db	101	;'e'
   200  00FDE5  61                 	db	97	;'a'
   201  00FDE6  63                 	db	99	;'c'
   202  00FDE7  68                 	db	104	;'h'
   203  00FDE8  65                 	db	101	;'e'
   204  00FDE9  64                 	db	100	;'d'
   205  00FDEA  21                 	db	33
   206  00FDEB  00                 	db	0
   207  00FDEC                     STR_31:
   208  00FDEC  62                 	db	98	;'b'
   209  00FDED  65                 	db	101	;'e'
   210  00FDEE  67                 	db	103	;'g'
   211  00FDEF  69                 	db	105	;'i'
   212  00FDF0  6E                 	db	110	;'n'
   213  00FDF1  20                 	db	32
   214  00FDF2  6F                 	db	111	;'o'
   215  00FDF3  70                 	db	112	;'p'
   216  00FDF4  65                 	db	101	;'e'
   217  00FDF5  72                 	db	114	;'r'
   218  00FDF6  61                 	db	97	;'a'
   219  00FDF7  74                 	db	116	;'t'
   220  00FDF8  69                 	db	105	;'i'
   221  00FDF9  6F                 	db	111	;'o'
   222  00FDFA  6E                 	db	110	;'n'
   223  00FDFB  2E                 	db	46
   224  00FDFC  00                 	db	0
   225  00FDFD                     STR_3:
   226  00FDFD  50                 	db	80	;'P'
   227  00FDFE  6C                 	db	108	;'l'
   228  00FDFF  65                 	db	101	;'e'
   229  00FE00  61                 	db	97	;'a'
   230  00FE01  73                 	db	115	;'s'
   231  00FE02  65                 	db	101	;'e'
   232  00FE03  20                 	db	32
   233  00FE04  69                 	db	105	;'i'
   234  00FE05  6E                 	db	110	;'n'
   235  00FE06  70                 	db	112	;'p'
   236  00FE07  75                 	db	117	;'u'
   237  00FE08  74                 	db	116	;'t'
   238  00FE09  20                 	db	32
   239  00FE0A  6C                 	db	108	;'l'
   240  00FE0B  6F                 	db	111	;'o'
   241  00FE0C  67                 	db	103	;'g'
   242  00FE0D  00                 	db	0
   243  00FE0E                     STR_6:
   244  00FE0E  50                 	db	80	;'P'
   245  00FE0F  72                 	db	114	;'r'
   246  00FE10  65                 	db	101	;'e'
   247  00FE11  73                 	db	115	;'s'
   248  00FE12  73                 	db	115	;'s'
   249  00FE13  20                 	db	32
   250  00FE14  61                 	db	97	;'a'
   251  00FE15  6E                 	db	110	;'n'
   252  00FE16  79                 	db	121	;'y'
   253  00FE17  20                 	db	32
   254  00FE18  6B                 	db	107	;'k'
   255  00FE19  65                 	db	101	;'e'
   256  00FE1A  79                 	db	121	;'y'
   257  00FE1B  20                 	db	32
   258  00FE1C  74                 	db	116	;'t'
   259  00FE1D  6F                 	db	111	;'o'
   260  00FE1E  00                 	db	0
   261  00FE1F                     STR_35:
   262  00FE1F  63                 	db	99	;'c'
   263  00FE20  61                 	db	97	;'a'
   264  00FE21  62                 	db	98	;'b'
   265  00FE22  69                 	db	105	;'i'
   266  00FE23  6E                 	db	110	;'n'
   267  00FE24  65                 	db	101	;'e'
   268  00FE25  74                 	db	116	;'t'
   269  00FE26  20                 	db	32
   270  00FE27  73                 	db	115	;'s'
   271  00FE28  6F                 	db	111	;'o'
   272  00FE29  72                 	db	114	;'r'
   273  00FE2A  74                 	db	116	;'t'
   274  00FE2B  65                 	db	101	;'e'
   275  00FE2C  72                 	db	114	;'r'
   276  00FE2D  21                 	db	33
   277  00FE2E  00                 	db	0
   278  00FE2F                     STR_45:
   279  00FE2F  6E                 	db	110	;'n'
   280  00FE30  75                 	db	117	;'u'
   281  00FE31  6D                 	db	109	;'m'
   282  00FE32  62                 	db	98	;'b'
   283  00FE33  65                 	db	101	;'e'
   284  00FE34  72                 	db	114	;'r'
   285  00FE35  20                 	db	32
   286  00FE36  70                 	db	112	;'p'
   287  00FE37  72                 	db	114	;'r'
   288  00FE38  65                 	db	101	;'e'
   289  00FE39  73                 	db	115	;'s'
   290  00FE3A  73                 	db	115	;'s'
   291  00FE3B  65                 	db	101	;'e'
   292  00FE3C  64                 	db	100	;'d'
   293  00FE3D  2E                 	db	46
   294  00FE3E  00                 	db	0
   295  00FE3F                     STR_13:
   296  00FE3F  52                 	db	82	;'R'
   297  00FE40  3A                 	db	58	;':'
   298  00FE41  33                 	db	51	;'3'
   299  00FE42  20                 	db	32
   300  00FE43  20                 	db	32
   301  00FE44  46                 	db	70	;'F'
   302  00FE45  3A                 	db	58	;':'
   303  00FE46  31                 	db	49	;'1'
   304  00FE47  32                 	db	50	;'2'
   305  00FE48  20                 	db	32
   306  00FE49  20                 	db	32
   307  00FE4A  4C                 	db	76	;'L'
   308  00FE4B  3A                 	db	58	;':'
   309  00FE4C  31                 	db	49	;'1'
   310  00FE4D  30                 	db	48	;'0'
   311  00FE4E  00                 	db	0
   312  00FE4F                     STR_19:
   313  00FE4F  44                 	db	68	;'D'
   314  00FE50  72                 	db	114	;'r'
   315  00FE51  61                 	db	97	;'a'
   316  00FE52  77                 	db	119	;'w'
   317  00FE53  65                 	db	101	;'e'
   318  00FE54  72                 	db	114	;'r'
   319  00FE55  20                 	db	32
   320  00FE56  25                 	db	37
   321  00FE57  69                 	db	105	;'i'
   322  00FE58  20                 	db	32
   323  00FE59  66                 	db	102	;'f'
   324  00FE5A  6F                 	db	111	;'o'
   325  00FE5B  6F                 	db	111	;'o'
   326  00FE5C  64                 	db	100	;'d'
   327  00FE5D  3A                 	db	58	;':'
   328  00FE5E  00                 	db	0
   329  00FE5F                     STR_8:
   330  00FE5F  4F                 	db	79	;'O'
   331  00FE60  70                 	db	112	;'p'
   332  00FE61  65                 	db	101	;'e'
   333  00FE62  72                 	db	114	;'r'
   334  00FE63  61                 	db	97	;'a'
   335  00FE64  74                 	db	116	;'t'
   336  00FE65  69                 	db	105	;'i'
   337  00FE66  6F                 	db	111	;'o'
   338  00FE67  6E                 	db	110	;'n'
   339  00FE68  20                 	db	32
   340  00FE69  74                 	db	116	;'t'
   341  00FE6A  69                 	db	105	;'i'
   342  00FE6B  6D                 	db	109	;'m'
   343  00FE6C  65                 	db	101	;'e'
   344  00FE6D  3A                 	db	58	;':'
   345  00FE6E  00                 	db	0
   346  00FE6F                     STR_10:
   347  00FE6F  4D                 	db	77	;'M'
   348  00FE70  61                 	db	97	;'a'
   349  00FE71  72                 	db	114	;'r'
   350  00FE72  6B                 	db	107	;'k'
   351  00FE73  65                 	db	101	;'e'
   352  00FE74  64                 	db	100	;'d'
   353  00FE75  20                 	db	32
   354  00FE76  64                 	db	100	;'d'
   355  00FE77  72                 	db	114	;'r'
   356  00FE78  61                 	db	97	;'a'
   357  00FE79  77                 	db	119	;'w'
   358  00FE7A  65                 	db	101	;'e'
   359  00FE7B  72                 	db	114	;'r'
   360  00FE7C  73                 	db	115	;'s'
   361  00FE7D  3A                 	db	58	;':'
   362  00FE7E  00                 	db	0
   363  00FE7F                     STR_23:
   364  00FE7F  44                 	db	68	;'D'
   365  00FE80  72                 	db	114	;'r'
   366  00FE81  61                 	db	97	;'a'
   367  00FE82  77                 	db	119	;'w'
   368  00FE83  65                 	db	101	;'e'
   369  00FE84  72                 	db	114	;'r'
   370  00FE85  20                 	db	32
   371  00FE86  25                 	db	37
   372  00FE87  69                 	db	105	;'i'
   373  00FE88  20                 	db	32
   374  00FE89  64                 	db	100	;'d'
   375  00FE8A  69                 	db	105	;'i'
   376  00FE8B  65                 	db	101	;'e'
   377  00FE8C  74                 	db	116	;'t'
   378  00FE8D  3A                 	db	58	;':'
   379  00FE8E  00                 	db	0
   380  00FE8F                     STR_14:
   381  00FE8F  44                 	db	68	;'D'
   382  00FE90  72                 	db	114	;'r'
   383  00FE91  61                 	db	97	;'a'
   384  00FE92  77                 	db	119	;'w'
   385  00FE93  65                 	db	101	;'e'
   386  00FE94  72                 	db	114	;'r'
   387  00FE95  20                 	db	32
   388  00FE96  53                 	db	83	;'S'
   389  00FE97  75                 	db	117	;'u'
   390  00FE98  6D                 	db	109	;'m'
   391  00FE99  6D                 	db	109	;'m'
   392  00FE9A  61                 	db	97	;'a'
   393  00FE9B  72                 	db	114	;'r'
   394  00FE9C  79                 	db	121	;'y'
   395  00FE9D  3A                 	db	58	;':'
   396  00FE9E  00                 	db	0
   397  00FE9F                     STR_42:
   398  00FE9F  41                 	db	65	;'A'
   399  00FEA0  6E                 	db	110	;'n'
   400  00FEA1  6F                 	db	111	;'o'
   401  00FEA2  74                 	db	116	;'t'
   402  00FEA3  68                 	db	104	;'h'
   403  00FEA4  65                 	db	101	;'e'
   404  00FEA5  72                 	db	114	;'r'
   405  00FEA6  20                 	db	32
   406  00FEA7  64                 	db	100	;'d'
   407  00FEA8  72                 	db	114	;'r'
   408  00FEA9  61                 	db	97	;'a'
   409  00FEAA  77                 	db	119	;'w'
   410  00FEAB  65                 	db	101	;'e'
   411  00FEAC  72                 	db	114	;'r'
   412  00FEAD  3F                 	db	63	;'?'
   413  00FEAE  00                 	db	0
   414  00FEAF                     STR_18:
   415  00FEAF  23                 	db	35
   416  00FEB0  20                 	db	32
   417  00FEB1  3D                 	db	61	;'='
   418  00FEB2  20                 	db	32
   419  00FEB3  59                 	db	89	;'Y'
   420  00FEB4  65                 	db	101	;'e'
   421  00FEB5  73                 	db	115	;'s'
   422  00FEB6  2C                 	db	44
   423  00FEB7  20                 	db	32
   424  00FEB8  44                 	db	68	;'D'
   425  00FEB9  20                 	db	32
   426  00FEBA  3D                 	db	61	;'='
   427  00FEBB  20                 	db	32
   428  00FEBC  4E                 	db	78	;'N'
   429  00FEBD  6F                 	db	111	;'o'
   430  00FEBE  00                 	db	0
   431  00FEBF                     STR_34:
   432  00FEBF  57                 	db	87	;'W'
   433  00FEC0  65                 	db	101	;'e'
   434  00FEC1  6C                 	db	108	;'l'
   435  00FEC2  63                 	db	99	;'c'
   436  00FEC3  6F                 	db	111	;'o'
   437  00FEC4  6D                 	db	109	;'m'
   438  00FEC5  65                 	db	101	;'e'
   439  00FEC6  20                 	db	32
   440  00FEC7  74                 	db	116	;'t'
   441  00FEC8  6F                 	db	111	;'o'
   442  00FEC9  20                 	db	32
   443  00FECA  79                 	db	121	;'y'
   444  00FECB  6F                 	db	111	;'o'
   445  00FECC  75                 	db	117	;'u'
   446  00FECD  72                 	db	114	;'r'
   447  00FECE  00                 	db	0
   448  00FECF                     STR_43:
   449  00FECF  23                 	db	35
   450  00FED0  20                 	db	32
   451  00FED1  3D                 	db	61	;'='
   452  00FED2  20                 	db	32
   453  00FED3  4E                 	db	78	;'N'
   454  00FED4  6F                 	db	111	;'o'
   455  00FED5  2C                 	db	44
   456  00FED6  20                 	db	32
   457  00FED7  44                 	db	68	;'D'
   458  00FED8  20                 	db	32
   459  00FED9  3D                 	db	61	;'='
   460  00FEDA  20                 	db	32
   461  00FEDB  59                 	db	89	;'Y'
   462  00FEDC  65                 	db	101	;'e'
   463  00FEDD  73                 	db	115	;'s'
   464  00FEDE  00                 	db	0
   465  00FEDF                     STR_1:
   466  00FEDF  35                 	db	53	;'5'
   467  00FEE0  20                 	db	32
   468  00FEE1  70                 	db	112	;'p'
   469  00FEE2  72                 	db	114	;'r'
   470  00FEE3  65                 	db	101	;'e'
   471  00FEE4  76                 	db	118	;'v'
   472  00FEE5  69                 	db	105	;'i'
   473  00FEE6  6F                 	db	111	;'o'
   474  00FEE7  75                 	db	117	;'u'
   475  00FEE8  73                 	db	115	;'s'
   476  00FEE9  20                 	db	32
   477  00FEEA  6C                 	db	108	;'l'
   478  00FEEB  6F                 	db	111	;'o'
   479  00FEEC  67                 	db	103	;'g'
   480  00FEED  73                 	db	115	;'s'
   481  00FEEE  00                 	db	0
   482  00FEEF                     STR_32:
   483  00FEEF  53                 	db	83	;'S'
   484  00FEF0  74                 	db	116	;'t'
   485  00FEF1  6F                 	db	111	;'o'
   486  00FEF2  72                 	db	114	;'r'
   487  00FEF3  65                 	db	101	;'e'
   488  00FEF4  64                 	db	100	;'d'
   489  00FEF5  20                 	db	32
   490  00FEF6  76                 	db	118	;'v'
   491  00FEF7  61                 	db	97	;'a'
   492  00FEF8  6C                 	db	108	;'l'
   493  00FEF9  75                 	db	117	;'u'
   494  00FEFA  65                 	db	101	;'e'
   495  00FEFB  3A                 	db	58	;':'
   496  00FEFC  20                 	db	32
   497  00FEFD  00                 	db	0
   498  00FEFE                     STR_15:
   499  00FEFE  44                 	db	68	;'D'
   500  00FEFF  72                 	db	114	;'r'
   501  00FF00  61                 	db	97	;'a'
   502  00FF01  77                 	db	119	;'w'
   503  00FF02  65                 	db	101	;'e'
   504  00FF03  72                 	db	114	;'r'
   505  00FF04  20                 	db	32
   506  00FF05  31                 	db	49	;'1'
   507  00FF06  3A                 	db	58	;':'
   508  00FF07  20                 	db	32
   509  00FF08  52                 	db	82	;'R'
   510  00FF09  46                 	db	70	;'F'
   511  00FF0A  31                 	db	49	;'1'
   512  00FF0B  32                 	db	50	;'2'
   513  00FF0C  00                 	db	0
   514  00FF0D                     STR_27:
   515  00FF0D  44                 	db	68	;'D'
   516  00FF0E  72                 	db	114	;'r'
   517  00FF0F  61                 	db	97	;'a'
   518  00FF10  77                 	db	119	;'w'
   519  00FF11  65                 	db	101	;'e'
   520  00FF12  72                 	db	114	;'r'
   521  00FF13  20                 	db	32
   522  00FF14  6E                 	db	110	;'n'
   523  00FF15  75                 	db	117	;'u'
   524  00FF16  6D                 	db	109	;'m'
   525  00FF17  62                 	db	98	;'b'
   526  00FF18  65                 	db	101	;'e'
   527  00FF19  72                 	db	114	;'r'
   528  00FF1A  3A                 	db	58	;':'
   529  00FF1B  00                 	db	0
   530  00FF1C                     STR_46:
   531  00FF1C  44                 	db	68	;'D'
   532  00FF1D  72                 	db	114	;'r'
   533  00FF1E  61                 	db	97	;'a'
   534  00FF1F  77                 	db	119	;'w'
   535  00FF20  65                 	db	101	;'e'
   536  00FF21  72                 	db	114	;'r'
   537  00FF22  20                 	db	32
   538  00FF23  61                 	db	97	;'a'
   539  00FF24  6C                 	db	108	;'l'
   540  00FF25  72                 	db	114	;'r'
   541  00FF26  65                 	db	101	;'e'
   542  00FF27  61                 	db	97	;'a'
   543  00FF28  64                 	db	100	;'d'
   544  00FF29  79                 	db	121	;'y'
   545  00FF2A  00                 	db	0
   546  00FF2B                     STR_21:
   547  00FF2B  49                 	db	73	;'I'
   548  00FF2C  6E                 	db	110	;'n'
   549  00FF2D  76                 	db	118	;'v'
   550  00FF2E  61                 	db	97	;'a'
   551  00FF2F  6C                 	db	108	;'l'
   552  00FF30  69                 	db	105	;'i'
   553  00FF31  64                 	db	100	;'d'
   554  00FF32  20                 	db	32
   555  00FF33  66                 	db	102	;'f'
   556  00FF34  6F                 	db	111	;'o'
   557  00FF35  6F                 	db	111	;'o'
   558  00FF36  64                 	db	100	;'d'
   559  00FF37  21                 	db	33
   560  00FF38  00                 	db	0
   561  00FF39                     STR_25:
   562  00FF39  49                 	db	73	;'I'
   563  00FF3A  6E                 	db	110	;'n'
   564  00FF3B  76                 	db	118	;'v'
   565  00FF3C  61                 	db	97	;'a'
   566  00FF3D  6C                 	db	108	;'l'
   567  00FF3E  69                 	db	105	;'i'
   568  00FF3F  64                 	db	100	;'d'
   569  00FF40  20                 	db	32
   570  00FF41  64                 	db	100	;'d'
   571  00FF42  69                 	db	105	;'i'
   572  00FF43  65                 	db	101	;'e'
   573  00FF44  74                 	db	116	;'t'
   574  00FF45  21                 	db	33
   575  00FF46  00                 	db	0
   576  00FF47                     STR_38:
   577  00FF47  6F                 	db	111	;'o'
   578  00FF48  72                 	db	114	;'r'
   579  00FF49  20                 	db	32
   580  00FF4A  70                 	db	112	;'p'
   581  00FF4B  72                 	db	114	;'r'
   582  00FF4C  65                 	db	101	;'e'
   583  00FF4D  73                 	db	115	;'s'
   584  00FF4E  73                 	db	115	;'s'
   585  00FF4F  20                 	db	32
   586  00FF50  44                 	db	68	;'D'
   587  00FF51  20                 	db	32
   588  00FF52  74                 	db	116	;'t'
   589  00FF53  6F                 	db	111	;'o'
   590  00FF54  00                 	db	0
   591  00FF55                     STR_53:
   592  00FF55  49                 	db	73	;'I'
   593  00FF56  6E                 	db	110	;'n'
   594  00FF57  76                 	db	118	;'v'
   595  00FF58  61                 	db	97	;'a'
   596  00FF59  6C                 	db	108	;'l'
   597  00FF5A  69                 	db	105	;'i'
   598  00FF5B  64                 	db	100	;'d'
   599  00FF5C  20                 	db	32
   600  00FF5D  6B                 	db	107	;'k'
   601  00FF5E  65                 	db	101	;'e'
   602  00FF5F  79                 	db	121	;'y'
   603  00FF60  21                 	db	33
   604  00FF61  00                 	db	0
   605  00FF62                     STR_16:
   606  00FF62  44                 	db	68	;'D'
   607  00FF63  72                 	db	114	;'r'
   608  00FF64  61                 	db	97	;'a'
   609  00FF65  77                 	db	119	;'w'
   610  00FF66  65                 	db	101	;'e'
   611  00FF67  72                 	db	114	;'r'
   612  00FF68  20                 	db	32
   613  00FF69  32                 	db	50	;'2'
   614  00FF6A  3A                 	db	58	;':'
   615  00FF6B  20                 	db	32
   616  00FF6C  4C                 	db	76	;'L'
   617  00FF6D  31                 	db	49	;'1'
   618  00FF6E  00                 	db	0
   619  00FF6F                     STR_40:
   620  00FF6F  4D                 	db	77	;'M'
   621  00FF70  61                 	db	97	;'a'
   622  00FF71  78                 	db	120	;'x'
   623  00FF72  69                 	db	105	;'i'
   624  00FF73  6D                 	db	109	;'m'
   625  00FF74  75                 	db	117	;'u'
   626  00FF75  6D                 	db	109	;'m'
   627  00FF76  20                 	db	32
   628  00FF77  6F                 	db	111	;'o'
   629  00FF78  66                 	db	102	;'f'
   630  00FF79  20                 	db	32
   631  00FF7A  38                 	db	56	;'8'
   632  00FF7B  00                 	db	0
   633  00FF7C                     STR_17:
   634  00FF7C  41                 	db	65	;'A'
   635  00FF7D  6E                 	db	110	;'n'
   636  00FF7E  6F                 	db	111	;'o'
   637  00FF7F  74                 	db	116	;'t'
   638  00FF80  68                 	db	104	;'h'
   639  00FF81  65                 	db	101	;'e'
   640  00FF82  72                 	db	114	;'r'
   641  00FF83  20                 	db	32
   642  00FF84  6C                 	db	108	;'l'
   643  00FF85  6F                 	db	111	;'o'
   644  00FF86  67                 	db	103	;'g'
   645  00FF87  3F                 	db	63	;'?'
   646  00FF88  00                 	db	0
   647  00FF89                     STR_37:
   648  00FF89  76                 	db	118	;'v'
   649  00FF8A  69                 	db	105	;'i'
   650  00FF8B  65                 	db	101	;'e'
   651  00FF8C  77                 	db	119	;'w'
   652  00FF8D  20                 	db	32
   653  00FF8E  6C                 	db	108	;'l'
   654  00FF8F  6F                 	db	111	;'o'
   655  00FF90  67                 	db	103	;'g'
   656  00FF91  73                 	db	115	;'s'
   657  00FF92  2C                 	db	44
   658  00FF93  00                 	db	0
   659  00FF94                     STR_2:
   660  00FF94  61                 	db	97	;'a'
   661  00FF95  76                 	db	118	;'v'
   662  00FF96  61                 	db	97	;'a'
   663  00FF97  69                 	db	105	;'i'
   664  00FF98  6C                 	db	108	;'l'
   665  00FF99  61                 	db	97	;'a'
   666  00FF9A  62                 	db	98	;'b'
   667  00FF9B  6C                 	db	108	;'l'
   668  00FF9C  65                 	db	101	;'e'
   669  00FF9D  2E                 	db	46
   670  00FF9E  00                 	db	0
   671  00FF9F                     STR_52:
   672  00FF9F  52                 	db	82	;'R'
   673  00FFA0  65                 	db	101	;'e'
   674  00FFA1  62                 	db	98	;'b'
   675  00FFA2  6F                 	db	111	;'o'
   676  00FFA3  6F                 	db	111	;'o'
   677  00FFA4  74                 	db	116	;'t'
   678  00FFA5  69                 	db	105	;'i'
   679  00FFA6  6E                 	db	110	;'n'
   680  00FFA7  67                 	db	103	;'g'
   681  00FFA8  2E                 	db	46
   682  00FFA9  00                 	db	0
   683  00FFAA                     STR_22:
   684  00FFAA  54                 	db	84	;'T'
   685  00FFAB  72                 	db	114	;'r'
   686  00FFAC  79                 	db	121	;'y'
   687  00FFAD  20                 	db	32
   688  00FFAE  61                 	db	97	;'a'
   689  00FFAF  67                 	db	103	;'g'
   690  00FFB0  61                 	db	97	;'a'
   691  00FFB1  69                 	db	105	;'i'
   692  00FFB2  6E                 	db	110	;'n'
   693  00FFB3  2E                 	db	46
   694  00FFB4  00                 	db	0
   695  00FFB5                     STR_36:
   696  00FFB5  50                 	db	80	;'P'
   697  00FFB6  72                 	db	114	;'r'
   698  00FFB7  65                 	db	101	;'e'
   699  00FFB8  73                 	db	115	;'s'
   700  00FFB9  73                 	db	115	;'s'
   701  00FFBA  20                 	db	32
   702  00FFBB  23                 	db	35
   703  00FFBC  20                 	db	32
   704  00FFBD  74                 	db	116	;'t'
   705  00FFBE  6F                 	db	111	;'o'
   706  00FFBF  00                 	db	0
   707  00FFC0                     STR_44:
   708  00FFC0  4E                 	db	78	;'N'
   709  00FFC1  6F                 	db	111	;'o'
   710  00FFC2  20                 	db	32
   711  00FFC3  64                 	db	100	;'d'
   712  00FFC4  72                 	db	114	;'r'
   713  00FFC5  61                 	db	97	;'a'
   714  00FFC6  77                 	db	119	;'w'
   715  00FFC7  65                 	db	101	;'e'
   716  00FFC8  72                 	db	114	;'r'
   717  00FFC9  00                 	db	0
   718  00FFCA                     STR_4:
   719  00FFCA  6E                 	db	110	;'n'
   720  00FFCB  75                 	db	117	;'u'
   721  00FFCC  6D                 	db	109	;'m'
   722  00FFCD  62                 	db	98	;'b'
   723  00FFCE  65                 	db	101	;'e'
   724  00FFCF  72                 	db	114	;'r'
   725  00FFD0  3A                 	db	58	;':'
   726  00FFD1  20                 	db	32
   727  00FFD2  00                 	db	0
   728  00FFD3                     STR_7:
   729  00FFD3  6D                 	db	109	;'m'
   730  00FFD4  6F                 	db	111	;'o'
   731  00FFD5  76                 	db	118	;'v'
   732  00FFD6  65                 	db	101	;'e'
   733  00FFD7  20                 	db	32
   734  00FFD8  6F                 	db	111	;'o'
   735  00FFD9  6E                 	db	110	;'n'
   736  00FFDA  2E                 	db	46
   737  00FFDB  00                 	db	0
   738  00FFDC                     STR_47:
   739  00FFDC  69                 	db	105	;'i'
   740  00FFDD  6E                 	db	110	;'n'
   741  00FFDE  20                 	db	32
   742  00FFDF  75                 	db	117	;'u'
   743  00FFE0  73                 	db	115	;'s'
   744  00FFE1  65                 	db	101	;'e'
   745  00FFE2  21                 	db	33
   746  00FFE3  00                 	db	0
   747  00FFE4                     STR_29:
   748  00FFE4  53                 	db	83	;'S'
   749  00FFE5  74                 	db	116	;'t'
   750  00FFE6  61                 	db	97	;'a'
   751  00FFE7  6E                 	db	110	;'n'
   752  00FFE8  64                 	db	100	;'d'
   753  00FFE9  62                 	db	98	;'b'
   754  00FFEA  79                 	db	121	;'y'
   755  00FFEB  00                 	db	0
   756  00FFEC                     STR_5:
   757  00FFEC  47                 	db	71	;'G'
   758  00FFED  72                 	db	114	;'r'
   759  00FFEE  65                 	db	101	;'e'
   760  00FFEF  61                 	db	97	;'a'
   761  00FFF0  74                 	db	116	;'t'
   762  00FFF1  21                 	db	33
   763  00FFF2  00                 	db	0
   764  00FFF3                     STR_11:
   765  00FFF3  31                 	db	49	;'1'
   766  00FFF4  2C                 	db	44
   767  00FFF5  20                 	db	32
   768  00FFF6  31                 	db	49	;'1'
   769  00FFF7  33                 	db	51	;'3'
   770  00FFF8  00                 	db	0
   771  00FFF9                     STR_9:
   772  00FFF9  32                 	db	50	;'2'
   773  00FFFA  3A                 	db	58	;':'
   774  00FFFB  33                 	db	51	;'3'
   775  00FFFC  39                 	db	57	;'9'
   776  00FFFD  00                 	db	0
   777  0000                     
   778                           ; #config settings
   779  00FFFE  00                 	db	0	; dummy byte at the end
   780  0000                     
   781                           	psect	cinit
   782  00DC40                     __pcinit:
   783                           	opt stack 0
   784  00DC40                     start_initialization:
   785                           	opt stack 0
   786  00DC40                     __initialization:
   787                           	opt stack 0
   788                           
   789                           ; Clear objects allocated to COMRAM (34 bytes)
   790  00DC40  EE00  F047         	lfsr	0,__pbssCOMRAM
   791  00DC44  0E22               	movlw	34
   792  00DC46                     clear_0:
   793  00DC46  6AEE               	clrf	postinc0,c
   794  00DC48  06E8               	decf	wreg,f,c
   795  00DC4A  E1FD               	bnz	clear_0
   796  00DC4C                     end_of_initialization:
   797                           	opt stack 0
   798  00DC4C                     __end_of__initialization:
   799                           	opt stack 0
   800  00DC4C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   801  00DC4E  6EF8               	movwf	tblptru,c
   802  00DC50  0100               	movlb	0
   803  00DC52  EF40  F06E         	goto	_main	;jump to C main() function
   804                           tblptru	equ	0xFF8
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808                           	psect	bssCOMRAM
   809  000047                     __pbssCOMRAM:
   810                           	opt stack 0
   811  000047                     _drawerInformation:
   812                           	opt stack 0
   813  000047                     	ds	16
   814  000057                     diet_press@F3060:
   815                           	opt stack 0
   816  000057                     	ds	8
   817  00005F                     food_press@F3045:
   818                           	opt stack 0
   819  00005F                     	ds	8
   820  000067                     standbyMode@LCDinterruptState:
   821                           	opt stack 0
   822  000067                     	ds	1
   823  000068                     	ds	1
   824                           tblptru	equ	0xFF8
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           
   828                           	psect	cstackCOMRAM
   829  000001                     __pcstackCOMRAM:
   830                           	opt stack 0
   831  000001                     ?_check_food:
   832                           	opt stack 0
   833  000001                     ?_get_digits:
   834                           	opt stack 0
   835  000001                     ?_decode_drawer:
   836                           	opt stack 0
   837  000001                     ?___lwdiv:
   838                           	opt stack 0
   839  000001                     lcdNibble@temp:
   840                           	opt stack 0
   841  000001                     writeEEPROM@data:
   842                           	opt stack 0
   843  000001                     readEEPROM@address:
   844                           	opt stack 0
   845  000001                     check_food@sum:
   846                           	opt stack 0
   847  000001                     get_digits@sum:
   848                           	opt stack 0
   849  000001                     decode_drawer@drawer:
   850                           	opt stack 0
   851  000001                     ___lwdiv@dividend:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x0
   855  000001                     	ds	1
   856  000002                     lcdNibble@data:
   857                           	opt stack 0
   858  000002                     writeEEPROM@address:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x1
   862  000002                     	ds	1
   863  000003                     ??_get_digits:
   864  000003                     ??_decode_drawer:
   865  000003                     lcdInst@data:
   866                           	opt stack 0
   867  000003                     putch@data:
   868                           	opt stack 0
   869  000003                     check_food@foodInput:
   870                           	opt stack 0
   871  000003                     ___lwdiv@divisor:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x2
   875  000003                     	ds	1
   876  000004                     ??_initLCD:
   877                           
   878                           ; 1 bytes @ 0x3
   879  000004                     	ds	1
   880  000005                     ??_check_food:
   881  000005                     get_digits@count:
   882                           	opt stack 0
   883  000005                     decode_drawer@returnValue:
   884                           	opt stack 0
   885  000005                     ___lwdiv@quotient:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x4
   889  000005                     	ds	2
   890  000007                     ___lwdiv@counter:
   891                           	opt stack 0
   892  000007                     check_food@returnValue:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x6
   896  000007                     	ds	1
   897  000008                     ?___lwmod:
   898                           	opt stack 0
   899  000008                     ___lwmod@dividend:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x7
   903  000008                     	ds	2
   904  00000A                     ___lwmod@divisor:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x9
   908  00000A                     	ds	2
   909  00000C                     ___lwmod@counter:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0xB
   913  00000C                     	ds	1
   914  00000D                     ?_printf:
   915                           	opt stack 0
   916  00000D                     printf@f:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0xC
   920  00000D                     	ds	4
   921  000011                     ??_printf:
   922                           
   923                           ; 1 bytes @ 0x10
   924  000011                     	ds	1
   925  000012                     printf@ap:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x11
   929  000012                     	ds	2
   930  000014                     printf@flag:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x13
   934  000014                     	ds	1
   935  000015                     printf@prec:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x14
   939  000015                     	ds	1
   940  000016                     printf@val:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x15
   944  000016                     	ds	2
   945  000018                     printf@c:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x17
   949  000018                     	ds	1
   950  000019                     ?_viewLogs:
   951                           	opt stack 0
   952  000019                     ?_food_press:
   953                           	opt stack 0
   954  000019                     ?_diet_press:
   955                           	opt stack 0
   956  000019                     ?_which_drawer:
   957                           	opt stack 0
   958  000019                     food_press@dietSum:
   959                           	opt stack 0
   960  000019                     diet_press@drawer:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x18
   964  000019                     	ds	2
   965  00001B                     ??_viewLogs:
   966  00001B                     ??_diet_press:
   967  00001B                     ??_which_drawer:
   968  00001B                     food_press@drawer:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x1A
   972  00001B                     	ds	1
   973  00001C                     which_drawer@rand:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x1B
   977  00001C                     	ds	1
   978  00001D                     ??_food_press:
   979  00001D                     viewLogs@keypress3:
   980                           	opt stack 0
   981  00001D                     diet_press@previous:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x1C
   985  00001D                     	ds	1
   986  00001E                     viewLogs@keypress2:
   987                           	opt stack 0
   988  00001E                     which_drawer@sum:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x1D
   992  00001E                     	ds	1
   993  00001F                     food_press@tally:
   994                           	opt stack 0
   995  00001F                     diet_press@i:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x1E
   999  00001F                     	ds	1
  1000  000020                     which_drawer@backCheck:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x1F
  1004  000020                     	ds	1
  1005  000021                     food_press@backCheck:
  1006                           	opt stack 0
  1007  000021                     diet_press@backCheck:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x20
  1011  000021                     	ds	1
  1012  000022                     which_drawer@count:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x21
  1016  000022                     	ds	1
  1017  000023                     food_press@isValid:
  1018                           	opt stack 0
  1019  000023                     diet_press@count:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x22
  1023  000023                     	ds	1
  1024  000024                     which_drawer@keypress:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x23
  1028  000024                     	ds	1
  1029  000025                     food_press@count:
  1030                           	opt stack 0
  1031  000025                     diet_press@sum:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x24
  1035  000025                     	ds	2
  1036  000027                     diet_press@keypress:
  1037                           	opt stack 0
  1038  000027                     food_press@foodTable:
  1039                           	opt stack 0
  1040                           
  1041                           ; 8 bytes @ 0x26
  1042  000027                     	ds	1
  1043  000028                     diet_press@dietTable:
  1044                           	opt stack 0
  1045                           
  1046                           ; 8 bytes @ 0x27
  1047  000028                     	ds	7
  1048  00002F                     food_press@keypress:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x2E
  1052  00002F                     	ds	1
  1053  000030                     ??_standbyMode:
  1054                           
  1055                           ; 1 bytes @ 0x2F
  1056  000030                     	ds	2
  1057  000032                     standbyMode@firstIteration:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x31
  1061  000032                     	ds	2
  1062  000034                     standbyMode@whichKey:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x33
  1066  000034                     	ds	2
  1067  000036                     standbyMode@keypress:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x35
  1071  000036                     	ds	1
  1072  000037                     standbyMode@display:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x36
  1076  000037                     	ds	1
  1077  000038                     standbyMode@keypress1:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x37
  1081  000038                     	ds	1
  1082  000039                     standbyMode@validDrawer:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x38
  1086  000039                     	ds	2
  1087  00003B                     standbyMode@zero:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x3A
  1091  00003B                     	ds	2
  1092  00003D                     standbyMode@food:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x3C
  1096  00003D                     	ds	2
  1097  00003F                     standbyMode@drawerCount:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x3E
  1101  00003F                     	ds	2
  1102  000041                     standbyMode@diet:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x40
  1106  000041                     	ds	2
  1107  000043                     standbyMode@i:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x42
  1111  000043                     	ds	2
  1112  000045                     standbyMode@drawer:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x44
  1116  000045                     	ds	2
  1117  000047                     tblptru	equ	0xFF8
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           
  1121                           ; 1 bytes @ 0x46
  1122 ;;
  1123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1124 ;;
  1125 ;; *************** function _main *****************
  1126 ;; Defined at:
  1127 ;;		line 13 in file "main.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;Total ram usage:        0 bytes
  1146 ;; Hardware stack levels required when called:    5
  1147 ;; This function calls:
  1148 ;;		_initLCD
  1149 ;;		_standbyMode
  1150 ;; This function is called by:
  1151 ;;		Startup code after reset
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text0
  1156  00DC80                     __ptext0:
  1157                           	opt stack 0
  1158  00DC80                     _main:
  1159                           	opt stack 26
  1160                           
  1161                           ;main.c: 19: LATA = 0x00;
  1162                           
  1163                           ;incstack = 0
  1164  00DC80  0E00               	movlw	0
  1165  00DC82  6E89               	movwf	3977,c	;volatile
  1166                           
  1167                           ;main.c: 20: LATB = 0x00;
  1168  00DC84  0E00               	movlw	0
  1169  00DC86  6E8A               	movwf	3978,c	;volatile
  1170                           
  1171                           ;main.c: 21: LATC = 0x00;
  1172  00DC88  0E00               	movlw	0
  1173  00DC8A  6E8B               	movwf	3979,c	;volatile
  1174                           
  1175                           ;main.c: 22: LATD = 0x00;
  1176  00DC8C  0E00               	movlw	0
  1177  00DC8E  6E8C               	movwf	3980,c	;volatile
  1178                           
  1179                           ;main.c: 23: LATE = 0x00;
  1180  00DC90  0E00               	movlw	0
  1181  00DC92  6E8D               	movwf	3981,c	;volatile
  1182                           
  1183                           ;main.c: 27: TRISA = 0xFF;
  1184  00DC94  6892               	setf	3986,c	;volatile
  1185                           
  1186                           ;main.c: 28: TRISB = 0xFF;
  1187  00DC96  6893               	setf	3987,c	;volatile
  1188                           
  1189                           ;main.c: 29: TRISC = 0x00;
  1190  00DC98  0E00               	movlw	0
  1191  00DC9A  6E94               	movwf	3988,c	;volatile
  1192                           
  1193                           ;main.c: 30: TRISD = 0x00;
  1194  00DC9C  0E00               	movlw	0
  1195  00DC9E  6E95               	movwf	3989,c	;volatile
  1196                           
  1197                           ;main.c: 31: TRISE = 0x00;
  1198  00DCA0  0E00               	movlw	0
  1199  00DCA2  6E96               	movwf	3990,c	;volatile
  1200                           
  1201                           ;main.c: 34: ADCON0 = 0x00;
  1202  00DCA4  0E00               	movlw	0
  1203  00DCA6  6EC2               	movwf	4034,c	;volatile
  1204                           
  1205                           ;main.c: 35: ADCON1 = 0b00001111;
  1206  00DCA8  0E0F               	movlw	15
  1207  00DCAA  6EC1               	movwf	4033,c	;volatile
  1208                           
  1209                           ;main.c: 38: initLCD();
  1210  00DCAC  EC7D  F06E         	call	_initLCD	;wreg free
  1211                           
  1212                           ;main.c: 56: standbyMode();
  1213  00DCB0  ECAA  F07A         	call	_standbyMode	;wreg free
  1214                           
  1215                           ;main.c: 57: return;
  1216  00DCB4  EF00  F000         	goto	start
  1217  00DCB8                     __end_of_main:
  1218                           	opt stack 0
  1219                           tblptru	equ	0xFF8
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           
  1223 ;; *************** function _standbyMode *****************
  1224 ;; Defined at:
  1225 ;;		line 839 in file "standbyMode.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  keypress1       1   55[COMRAM] unsigned char 
  1230 ;;  whichKey        2   51[COMRAM] unsigned int 
  1231 ;;  drawer          2   68[COMRAM] unsigned int 
  1232 ;;  i               2   66[COMRAM] unsigned int 
  1233 ;;  diet            2   64[COMRAM] unsigned int 
  1234 ;;  drawerCount     2   62[COMRAM] unsigned int 
  1235 ;;  food            2   60[COMRAM] unsigned int 
  1236 ;;  zero            2   58[COMRAM] unsigned int 
  1237 ;;  validDrawer     2   56[COMRAM] unsigned int 
  1238 ;;  firstIterati    2   49[COMRAM] unsigned int 
  1239 ;;  display         1   54[COMRAM] unsigned char 
  1240 ;;  keypress        1   53[COMRAM] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;Total ram usage:       23 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    4
  1257 ;; This function calls:
  1258 ;;		_diet_press
  1259 ;;		_food_press
  1260 ;;		_lcdInst
  1261 ;;		_printf
  1262 ;;		_putch
  1263 ;;		_readEEPROM
  1264 ;;		_viewLogs
  1265 ;;		_which_drawer
  1266 ;;		_writeEEPROM
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text1
  1273  00F554                     __ptext1:
  1274                           	opt stack 0
  1275  00F554                     _standbyMode:
  1276                           	opt stack 26
  1277                           
  1278                           ;standbyMode.c: 840: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1279                           
  1280                           ;incstack = 0
  1281  00F554  0E01               	movlw	1
  1282  00F556  EC02  F06E         	call	_lcdInst
  1283  00F55A  0EC3               	movlw	195
  1284  00F55C  6E30               	movwf	??_standbyMode& (0+255),c
  1285  00F55E  0ECD               	movlw	205
  1286  00F560                     u5587:
  1287  00F560  2EE8               	decfsz	wreg,f,c
  1288  00F562  D7FE               	bra	u5587
  1289  00F564  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1290  00F566  D7FC               	bra	u5587
  1291  00F568  F000               	nop	
  1292                           
  1293                           ;standbyMode.c: 841: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1294  00F56A  0E0C               	movlw	12
  1295  00F56C  EC02  F06E         	call	_lcdInst
  1296                           
  1297                           ;standbyMode.c: 842: printf("Standby");
  1298  00F570  0EE4               	movlw	low STR_29
  1299  00F572  6E0D               	movwf	printf@f,c
  1300  00F574  0EFF               	movlw	high STR_29
  1301  00F576  6E0E               	movwf	printf@f+1,c
  1302  00F578  ECDB  F06F         	call	_printf	;wreg free
  1303                           
  1304                           ;standbyMode.c: 843: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1305  00F57C  0E66               	movlw	102
  1306  00F57E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1307  00F580  0E76               	movlw	118
  1308  00F582  6E30               	movwf	??_standbyMode& (0+255),c
  1309  00F584  0EC1               	movlw	193
  1310  00F586                     u5597:
  1311  00F586  2EE8               	decfsz	wreg,f,c
  1312  00F588  D7FE               	bra	u5597
  1313  00F58A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1314  00F58C  D7FC               	bra	u5597
  1315  00F58E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1316  00F590  D7FA               	bra	u5597
  1317  00F592  F000               	nop	
  1318                           
  1319                           ;standbyMode.c: 844: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1320  00F594  0E01               	movlw	1
  1321  00F596  EC02  F06E         	call	_lcdInst
  1322  00F59A  0EC3               	movlw	195
  1323  00F59C  6E30               	movwf	??_standbyMode& (0+255),c
  1324  00F59E  0ECD               	movlw	205
  1325  00F5A0                     u5607:
  1326  00F5A0  2EE8               	decfsz	wreg,f,c
  1327  00F5A2  D7FE               	bra	u5607
  1328  00F5A4  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1329  00F5A6  D7FC               	bra	u5607
  1330  00F5A8  F000               	nop	
  1331                           
  1332                           ;standbyMode.c: 845: printf("Press any key to");
  1333  00F5AA  0E0E               	movlw	low STR_6
  1334  00F5AC  6E0D               	movwf	printf@f,c
  1335  00F5AE  0EFE               	movlw	high STR_6
  1336  00F5B0  6E0E               	movwf	printf@f+1,c
  1337  00F5B2  ECDB  F06F         	call	_printf	;wreg free
  1338                           
  1339                           ;standbyMode.c: 846: lcdInst(0xC0);;
  1340  00F5B6  0EC0               	movlw	192
  1341  00F5B8  EC02  F06E         	call	_lcdInst
  1342                           
  1343                           ;standbyMode.c: 847: printf("begin operation.");
  1344  00F5BC  0EEC               	movlw	low STR_31
  1345  00F5BE  6E0D               	movwf	printf@f,c
  1346  00F5C0  0EFD               	movlw	high STR_31
  1347  00F5C2  6E0E               	movwf	printf@f+1,c
  1348  00F5C4  ECDB  F06F         	call	_printf	;wreg free
  1349  00F5C8                     
  1350                           ;standbyMode.c: 850: continue;
  1351  00F5C8  A281               	btfss	3969,1,c	;volatile
  1352  00F5CA  D7FE               	goto	l423
  1353                           
  1354                           ;standbyMode.c: 851: }
  1355                           ;standbyMode.c: 853: writeEEPROM(0x0, 0x1);
  1356  00F5CC  0E01               	movlw	1
  1357  00F5CE  6E01               	movwf	writeEEPROM@data,c
  1358  00F5D0  0E00               	movlw	0
  1359  00F5D2  EC2B  F06E         	call	_writeEEPROM
  1360                           
  1361                           ;standbyMode.c: 854: unsigned char display = readEEPROM(0x0);
  1362  00F5D6  0E00               	movlw	0
  1363  00F5D8  EC16  F06E         	call	_readEEPROM
  1364  00F5DC  6E37               	movwf	standbyMode@display,c
  1365                           
  1366                           ;standbyMode.c: 855: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1367  00F5DE  0E01               	movlw	1
  1368  00F5E0  EC02  F06E         	call	_lcdInst
  1369  00F5E4  0EC3               	movlw	195
  1370  00F5E6  6E30               	movwf	??_standbyMode& (0+255),c
  1371  00F5E8  0ECD               	movlw	205
  1372  00F5EA                     u5617:
  1373  00F5EA  2EE8               	decfsz	wreg,f,c
  1374  00F5EC  D7FE               	bra	u5617
  1375  00F5EE  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1376  00F5F0  D7FC               	bra	u5617
  1377  00F5F2  F000               	nop	
  1378                           
  1379                           ;standbyMode.c: 856: printf("Stored value: ");
  1380  00F5F4  0EEF               	movlw	low STR_32
  1381  00F5F6  6E0D               	movwf	printf@f,c
  1382  00F5F8  0EFE               	movlw	high STR_32
  1383  00F5FA  6E0E               	movwf	printf@f+1,c
  1384  00F5FC  ECDB  F06F         	call	_printf	;wreg free
  1385                           
  1386                           ;standbyMode.c: 857: putch(input[display]);
  1387  00F600  5037               	movf	standbyMode@display,w,c
  1388  00F602  0D01               	mullw	1
  1389  00F604  0EA8               	movlw	low _input
  1390  00F606  24F3               	addwf	prodl,w,c
  1391  00F608  6EF6               	movwf	tblptrl,c
  1392  00F60A  0EFD               	movlw	high _input
  1393  00F60C  20F4               	addwfc	prodh,w,c
  1394  00F60E  6EF7               	movwf	tblptrh,c
  1395  00F610                     	if	0	;There are less than 3 active tblptr bytes
  1396  00F610                     	endif
  1397  00F610  0008               	tblrd		*
  1398  00F612  50F5               	movf	tablat,w,c
  1399  00F614  EC0C  F06E         	call	_putch
  1400                           
  1401                           ;standbyMode.c: 858: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1402  00F618  0E66               	movlw	102
  1403  00F61A  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1404  00F61C  0E76               	movlw	118
  1405  00F61E  6E30               	movwf	??_standbyMode& (0+255),c
  1406  00F620  0EC1               	movlw	193
  1407  00F622                     u5627:
  1408  00F622  2EE8               	decfsz	wreg,f,c
  1409  00F624  D7FE               	bra	u5627
  1410  00F626  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1411  00F628  D7FC               	bra	u5627
  1412  00F62A  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1413  00F62C  D7FA               	bra	u5627
  1414  00F62E  F000               	nop	
  1415                           
  1416                           ;standbyMode.c: 860: writeEEPROM(0x0, 0x3);
  1417  00F630  0E03               	movlw	3
  1418  00F632  6E01               	movwf	writeEEPROM@data,c
  1419  00F634  0E00               	movlw	0
  1420  00F636  EC2B  F06E         	call	_writeEEPROM
  1421                           
  1422                           ;standbyMode.c: 861: unsigned char display = readEEPROM(0x0);
  1423  00F63A  0E00               	movlw	0
  1424  00F63C  EC16  F06E         	call	_readEEPROM
  1425  00F640  6E37               	movwf	standbyMode@display,c
  1426                           
  1427                           ;standbyMode.c: 862: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1428  00F642  0E01               	movlw	1
  1429  00F644  EC02  F06E         	call	_lcdInst
  1430  00F648  0EC3               	movlw	195
  1431  00F64A  6E30               	movwf	??_standbyMode& (0+255),c
  1432  00F64C  0ECD               	movlw	205
  1433  00F64E                     u5637:
  1434  00F64E  2EE8               	decfsz	wreg,f,c
  1435  00F650  D7FE               	bra	u5637
  1436  00F652  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1437  00F654  D7FC               	bra	u5637
  1438  00F656  F000               	nop	
  1439                           
  1440                           ;standbyMode.c: 863: printf("Stored value: ");
  1441  00F658  0EEF               	movlw	low STR_32
  1442  00F65A  6E0D               	movwf	printf@f,c
  1443  00F65C  0EFE               	movlw	high STR_32
  1444  00F65E  6E0E               	movwf	printf@f+1,c
  1445  00F660  ECDB  F06F         	call	_printf	;wreg free
  1446                           
  1447                           ;standbyMode.c: 864: putch(input[display]);
  1448  00F664  5037               	movf	standbyMode@display,w,c
  1449  00F666  0D01               	mullw	1
  1450  00F668  0EA8               	movlw	low _input
  1451  00F66A  24F3               	addwf	prodl,w,c
  1452  00F66C  6EF6               	movwf	tblptrl,c
  1453  00F66E  0EFD               	movlw	high _input
  1454  00F670  20F4               	addwfc	prodh,w,c
  1455  00F672  6EF7               	movwf	tblptrh,c
  1456  00F674                     	if	0	;There are less than 3 active tblptr bytes
  1457  00F674                     	endif
  1458  00F674  0008               	tblrd		*
  1459  00F676  50F5               	movf	tablat,w,c
  1460  00F678  EC0C  F06E         	call	_putch
  1461                           
  1462                           ;standbyMode.c: 865: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1463  00F67C  0E66               	movlw	102
  1464  00F67E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1465  00F680  0E76               	movlw	118
  1466  00F682  6E30               	movwf	??_standbyMode& (0+255),c
  1467  00F684  0EC1               	movlw	193
  1468  00F686                     u5647:
  1469  00F686  2EE8               	decfsz	wreg,f,c
  1470  00F688  D7FE               	bra	u5647
  1471  00F68A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1472  00F68C  D7FC               	bra	u5647
  1473  00F68E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1474  00F690  D7FA               	bra	u5647
  1475  00F692  F000               	nop	
  1476                           
  1477                           ;standbyMode.c: 868: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1478  00F694  0E01               	movlw	1
  1479  00F696  EC02  F06E         	call	_lcdInst
  1480  00F69A  0EC3               	movlw	195
  1481  00F69C  6E30               	movwf	??_standbyMode& (0+255),c
  1482  00F69E  0ECD               	movlw	205
  1483  00F6A0                     u5657:
  1484  00F6A0  2EE8               	decfsz	wreg,f,c
  1485  00F6A2  D7FE               	bra	u5657
  1486  00F6A4  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1487  00F6A6  D7FC               	bra	u5657
  1488  00F6A8  F000               	nop	
  1489                           
  1490                           ;standbyMode.c: 869: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1491  00F6AA  0E0C               	movlw	12
  1492  00F6AC  EC02  F06E         	call	_lcdInst
  1493                           
  1494                           ;standbyMode.c: 870: printf("Welcome to your");
  1495  00F6B0  0EBF               	movlw	low STR_34
  1496  00F6B2  6E0D               	movwf	printf@f,c
  1497  00F6B4  0EFE               	movlw	high STR_34
  1498  00F6B6  6E0E               	movwf	printf@f+1,c
  1499  00F6B8  ECDB  F06F         	call	_printf	;wreg free
  1500                           
  1501                           ;standbyMode.c: 871: lcdInst(0xC0);;
  1502  00F6BC  0EC0               	movlw	192
  1503  00F6BE  EC02  F06E         	call	_lcdInst
  1504                           
  1505                           ;standbyMode.c: 872: printf("cabinet sorter!");
  1506  00F6C2  0E1F               	movlw	low STR_35
  1507  00F6C4  6E0D               	movwf	printf@f,c
  1508  00F6C6  0EFE               	movlw	high STR_35
  1509  00F6C8  6E0E               	movwf	printf@f+1,c
  1510  00F6CA  ECDB  F06F         	call	_printf	;wreg free
  1511                           
  1512                           ;standbyMode.c: 873: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1513  00F6CE  0E66               	movlw	102
  1514  00F6D0  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1515  00F6D2  0E76               	movlw	118
  1516  00F6D4  6E30               	movwf	??_standbyMode& (0+255),c
  1517  00F6D6  0EC1               	movlw	193
  1518  00F6D8                     u5667:
  1519  00F6D8  2EE8               	decfsz	wreg,f,c
  1520  00F6DA  D7FE               	bra	u5667
  1521  00F6DC  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1522  00F6DE  D7FC               	bra	u5667
  1523  00F6E0  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1524  00F6E2  D7FA               	bra	u5667
  1525  00F6E4  F000               	nop	
  1526                           
  1527                           ;standbyMode.c: 876: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1528  00F6E6  0E01               	movlw	1
  1529  00F6E8  EC02  F06E         	call	_lcdInst
  1530  00F6EC  0EC3               	movlw	195
  1531  00F6EE  6E30               	movwf	??_standbyMode& (0+255),c
  1532  00F6F0  0ECD               	movlw	205
  1533  00F6F2                     u5677:
  1534  00F6F2  2EE8               	decfsz	wreg,f,c
  1535  00F6F4  D7FE               	bra	u5677
  1536  00F6F6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1537  00F6F8  D7FC               	bra	u5677
  1538  00F6FA  F000               	nop	
  1539                           
  1540                           ;standbyMode.c: 877: printf("Press # to");
  1541  00F6FC  0EB5               	movlw	low STR_36
  1542  00F6FE  6E0D               	movwf	printf@f,c
  1543  00F700  0EFF               	movlw	high STR_36
  1544  00F702  6E0E               	movwf	printf@f+1,c
  1545  00F704  ECDB  F06F         	call	_printf	;wreg free
  1546                           
  1547                           ;standbyMode.c: 878: lcdInst(0xC0);;
  1548  00F708  0EC0               	movlw	192
  1549  00F70A  EC02  F06E         	call	_lcdInst
  1550                           
  1551                           ;standbyMode.c: 879: printf("view logs,");
  1552  00F70E  0E89               	movlw	low STR_37
  1553  00F710  6E0D               	movwf	printf@f,c
  1554  00F712  0EFF               	movlw	high STR_37
  1555  00F714  6E0E               	movwf	printf@f+1,c
  1556  00F716  ECDB  F06F         	call	_printf	;wreg free
  1557                           
  1558                           ;standbyMode.c: 880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1559  00F71A  0E66               	movlw	102
  1560  00F71C  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1561  00F71E  0E76               	movlw	118
  1562  00F720  6E30               	movwf	??_standbyMode& (0+255),c
  1563  00F722  0EC1               	movlw	193
  1564  00F724                     u5687:
  1565  00F724  2EE8               	decfsz	wreg,f,c
  1566  00F726  D7FE               	bra	u5687
  1567  00F728  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1568  00F72A  D7FC               	bra	u5687
  1569  00F72C  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1570  00F72E  D7FA               	bra	u5687
  1571  00F730  F000               	nop	
  1572                           
  1573                           ;standbyMode.c: 881: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1574  00F732  0E01               	movlw	1
  1575  00F734  EC02  F06E         	call	_lcdInst
  1576  00F738  0EC3               	movlw	195
  1577  00F73A  6E30               	movwf	??_standbyMode& (0+255),c
  1578  00F73C  0ECD               	movlw	205
  1579  00F73E                     u5697:
  1580  00F73E  2EE8               	decfsz	wreg,f,c
  1581  00F740  D7FE               	bra	u5697
  1582  00F742  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1583  00F744  D7FC               	bra	u5697
  1584  00F746  F000               	nop	
  1585                           
  1586                           ;standbyMode.c: 882: printf("or press D to");
  1587  00F748  0E47               	movlw	low STR_38
  1588  00F74A  6E0D               	movwf	printf@f,c
  1589  00F74C  0EFF               	movlw	high STR_38
  1590  00F74E  6E0E               	movwf	printf@f+1,c
  1591  00F750  ECDB  F06F         	call	_printf	;wreg free
  1592                           
  1593                           ;standbyMode.c: 883: lcdInst(0xC0);;
  1594  00F754  0EC0               	movlw	192
  1595  00F756  EC02  F06E         	call	_lcdInst
  1596                           
  1597                           ;standbyMode.c: 884: printf("begin operation.");
  1598  00F75A  0EEC               	movlw	low STR_31
  1599  00F75C  6E0D               	movwf	printf@f,c
  1600  00F75E  0EFD               	movlw	high STR_31
  1601  00F760  6E0E               	movwf	printf@f+1,c
  1602  00F762  ECDB  F06F         	call	_printf	;wreg free
  1603  00F766  A281               	btfss	3969,1,c	;volatile
  1604  00F768  D7FE               	goto	l426
  1605                           
  1606                           ;standbyMode.c: 887: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1607  00F76A  3881               	swapf	3969,w,c	;volatile
  1608  00F76C  0B0F               	andlw	15
  1609  00F76E  0B0F               	andlw	15
  1610  00F770  6E36               	movwf	standbyMode@keypress,c
  1611  00F772  B281               	btfsc	3969,1,c	;volatile
  1612  00F774  D7FE               	goto	l429
  1613                           
  1614                           ;standbyMode.c: 890: if (keypress == 15){
  1615  00F776  0E0F               	movlw	15
  1616  00F778  1836               	xorwf	standbyMode@keypress,w,c
  1617  00F77A  A4D8               	btfss	status,2,c
  1618  00F77C  D284               	goto	l431
  1619                           
  1620                           ;standbyMode.c: 932: unsigned int drawerCount = 0;
  1621  00F77E  0E00               	movlw	0
  1622  00F780  6E40               	movwf	standbyMode@drawerCount+1,c
  1623  00F782  0E00               	movlw	0
  1624  00F784  6E3F               	movwf	standbyMode@drawerCount,c
  1625                           
  1626                           ;standbyMode.c: 933: unsigned int i = 0;
  1627  00F786  0E00               	movlw	0
  1628  00F788  6E44               	movwf	standbyMode@i+1,c
  1629  00F78A  0E00               	movlw	0
  1630  00F78C  6E43               	movwf	standbyMode@i,c
  1631                           
  1632                           ;standbyMode.c: 934: unsigned int validDrawer = 0;
  1633  00F78E  0E00               	movlw	0
  1634  00F790  6E3A               	movwf	standbyMode@validDrawer+1,c
  1635  00F792  0E00               	movlw	0
  1636  00F794  6E39               	movwf	standbyMode@validDrawer,c
  1637                           
  1638                           ;standbyMode.c: 935: unsigned int zero = 0;
  1639  00F796  0E00               	movlw	0
  1640  00F798  6E3C               	movwf	standbyMode@zero+1,c
  1641  00F79A  0E00               	movlw	0
  1642  00F79C  6E3B               	movwf	standbyMode@zero,c
  1643                           
  1644                           ;standbyMode.c: 936: unsigned int firstIteration = 0;
  1645  00F79E  0E00               	movlw	0
  1646  00F7A0  6E33               	movwf	standbyMode@firstIteration+1,c
  1647  00F7A2  0E00               	movlw	0
  1648  00F7A4  6E32               	movwf	standbyMode@firstIteration,c
  1649                           
  1650                           ;standbyMode.c: 937: unsigned int drawer = 0;
  1651  00F7A6  0E00               	movlw	0
  1652  00F7A8  6E46               	movwf	standbyMode@drawer+1,c
  1653  00F7AA  0E00               	movlw	0
  1654  00F7AC  6E45               	movwf	standbyMode@drawer,c
  1655                           
  1656                           ;standbyMode.c: 938: unsigned int diet = 0;
  1657  00F7AE  0E00               	movlw	0
  1658  00F7B0  6E42               	movwf	standbyMode@diet+1,c
  1659  00F7B2  0E00               	movlw	0
  1660  00F7B4  6E41               	movwf	standbyMode@diet,c
  1661                           
  1662                           ;standbyMode.c: 939: unsigned int food = 0;
  1663  00F7B6  0E00               	movlw	0
  1664  00F7B8  6E3E               	movwf	standbyMode@food+1,c
  1665  00F7BA  0E00               	movlw	0
  1666  00F7BC  6E3D               	movwf	standbyMode@food,c
  1667  00F7BE                     
  1668                           ;standbyMode.c: 942: if (firstIteration == 1){
  1669  00F7BE  0432               	decf	standbyMode@firstIteration,w,c
  1670  00F7C0  1033               	iorwf	standbyMode@firstIteration+1,w,c
  1671  00F7C2  A4D8               	btfss	status,2,c
  1672  00F7C4  D15C               	goto	l433
  1673  00F7C6                     u5310:
  1674                           
  1675                           ;standbyMode.c: 945: if(drawerCount >= 8){
  1676                           
  1677                           ;standbyMode.c: 943: while (1){
  1678  00F7C6  5040               	movf	standbyMode@drawerCount+1,w,c
  1679  00F7C8  E104               	bnz	u5320
  1680  00F7CA  0E08               	movlw	8
  1681  00F7CC  5C3F               	subwf	standbyMode@drawerCount,w,c
  1682  00F7CE  A0D8               	btfss	status,0,c
  1683  00F7D0  D02A               	goto	l435
  1684  00F7D2                     u5320:
  1685                           
  1686                           ;standbyMode.c: 946: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1687  00F7D2  0E01               	movlw	1
  1688  00F7D4  EC02  F06E         	call	_lcdInst
  1689  00F7D8  0EC3               	movlw	195
  1690  00F7DA  6E30               	movwf	??_standbyMode& (0+255),c
  1691  00F7DC  0ECD               	movlw	205
  1692  00F7DE                     u5707:
  1693  00F7DE  2EE8               	decfsz	wreg,f,c
  1694  00F7E0  D7FE               	bra	u5707
  1695  00F7E2  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1696  00F7E4  D7FC               	bra	u5707
  1697  00F7E6  F000               	nop	
  1698                           
  1699                           ;standbyMode.c: 947: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1700  00F7E8  0E0C               	movlw	12
  1701  00F7EA  EC02  F06E         	call	_lcdInst
  1702                           
  1703                           ;standbyMode.c: 948: printf("Maximum of 8");
  1704  00F7EE  0E6F               	movlw	low STR_40
  1705  00F7F0  6E0D               	movwf	printf@f,c
  1706  00F7F2  0EFF               	movlw	high STR_40
  1707  00F7F4  6E0E               	movwf	printf@f+1,c
  1708  00F7F6  ECDB  F06F         	call	_printf	;wreg free
  1709                           
  1710                           ;standbyMode.c: 949: lcdInst(0xC0);;
  1711  00F7FA  0EC0               	movlw	192
  1712  00F7FC  EC02  F06E         	call	_lcdInst
  1713                           
  1714                           ;standbyMode.c: 950: printf("drawers reached!");
  1715  00F800  0EDB               	movlw	low STR_41
  1716  00F802  6E0D               	movwf	printf@f,c
  1717  00F804  0EFD               	movlw	high STR_41
  1718  00F806  6E0E               	movwf	printf@f+1,c
  1719  00F808  ECDB  F06F         	call	_printf	;wreg free
  1720                           
  1721                           ;standbyMode.c: 951: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1722  00F80C  0E66               	movlw	102
  1723  00F80E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1724  00F810  0E76               	movlw	118
  1725  00F812  6E30               	movwf	??_standbyMode& (0+255),c
  1726  00F814  0EC1               	movlw	193
  1727  00F816                     u5717:
  1728  00F816  2EE8               	decfsz	wreg,f,c
  1729  00F818  D7FE               	bra	u5717
  1730  00F81A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1731  00F81C  D7FC               	bra	u5717
  1732  00F81E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1733  00F820  D7FA               	bra	u5717
  1734  00F822  F000               	nop	
  1735                           
  1736                           ;standbyMode.c: 952: break;
  1737  00F824  0012               	return	
  1738  00F826                     l435:
  1739                           
  1740                           ;standbyMode.c: 953: }
  1741                           ;standbyMode.c: 955: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1742  00F826  0E01               	movlw	1
  1743  00F828  EC02  F06E         	call	_lcdInst
  1744  00F82C  0EC3               	movlw	195
  1745  00F82E  6E30               	movwf	??_standbyMode& (0+255),c
  1746  00F830  0ECD               	movlw	205
  1747  00F832                     u5727:
  1748  00F832  2EE8               	decfsz	wreg,f,c
  1749  00F834  D7FE               	bra	u5727
  1750  00F836  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1751  00F838  D7FC               	bra	u5727
  1752  00F83A  F000               	nop	
  1753                           
  1754                           ;standbyMode.c: 956: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1755  00F83C  0E0C               	movlw	12
  1756  00F83E  EC02  F06E         	call	_lcdInst
  1757                           
  1758                           ;standbyMode.c: 957: printf("Another drawer?");
  1759  00F842  0E9F               	movlw	low STR_42
  1760  00F844  6E0D               	movwf	printf@f,c
  1761  00F846  0EFE               	movlw	high STR_42
  1762  00F848  6E0E               	movwf	printf@f+1,c
  1763  00F84A  ECDB  F06F         	call	_printf	;wreg free
  1764                           
  1765                           ;standbyMode.c: 958: lcdInst(0xC0);;
  1766  00F84E  0EC0               	movlw	192
  1767  00F850  EC02  F06E         	call	_lcdInst
  1768                           
  1769                           ;standbyMode.c: 959: printf("# = No, D = Yes");
  1770  00F854  0ECF               	movlw	low STR_43
  1771  00F856  6E0D               	movwf	printf@f,c
  1772  00F858  0EFE               	movlw	high STR_43
  1773  00F85A  6E0E               	movwf	printf@f+1,c
  1774  00F85C  ECDB  F06F         	call	_printf	;wreg free
  1775  00F860  A281               	btfss	3969,1,c	;volatile
  1776  00F862  D7FE               	goto	l439
  1777                           
  1778                           ;standbyMode.c: 962: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  1779  00F864  3881               	swapf	3969,w,c	;volatile
  1780  00F866  0B0F               	andlw	15
  1781  00F868  0B0F               	andlw	15
  1782  00F86A  6E38               	movwf	standbyMode@keypress1,c
  1783  00F86C  B281               	btfsc	3969,1,c	;volatile
  1784  00F86E  D7FE               	goto	l442
  1785                           
  1786                           ;standbyMode.c: 965: if (keypress1 == 15){
  1787  00F870  0E0F               	movlw	15
  1788  00F872  1838               	xorwf	standbyMode@keypress1,w,c
  1789  00F874  A4D8               	btfss	status,2,c
  1790  00F876  D0FC               	goto	l444
  1791  00F878                     u5350:
  1792                           
  1793                           ;standbyMode.c: 966: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/400
      +                          0.0)));;
  1794  00F878  0E01               	movlw	1
  1795  00F87A  EC02  F06E         	call	_lcdInst
  1796  00F87E  0EC3               	movlw	195
  1797  00F880  6E30               	movwf	??_standbyMode& (0+255),c
  1798  00F882  0ECD               	movlw	205
  1799  00F884                     u5737:
  1800  00F884  2EE8               	decfsz	wreg,f,c
  1801  00F886  D7FE               	bra	u5737
  1802  00F888  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1803  00F88A  D7FC               	bra	u5737
  1804  00F88C  F000               	nop	
  1805                           
  1806                           ;standbyMode.c: 967: drawer = which_drawer();
  1807  00F88E  EC64  F071         	call	_which_drawer	;wreg free
  1808  00F892  C019  F045         	movff	?_which_drawer,standbyMode@drawer
  1809  00F896  C01A  F046         	movff	?_which_drawer+1,standbyMode@drawer+1
  1810                           
  1811                           ;standbyMode.c: 969: if (drawer == 100){
  1812  00F89A  0E64               	movlw	100
  1813  00F89C  1845               	xorwf	standbyMode@drawer,w,c
  1814  00F89E  1046               	iorwf	standbyMode@drawer+1,w,c
  1815  00F8A0  A4D8               	btfss	status,2,c
  1816  00F8A2  D005               	goto	l446
  1817                           
  1818                           ;standbyMode.c: 970: drawer = 0;
  1819  00F8A4  0E00               	movlw	0
  1820  00F8A6  6E46               	movwf	standbyMode@drawer+1,c
  1821  00F8A8  0E00               	movlw	0
  1822  00F8AA  6E45               	movwf	standbyMode@drawer,c
  1823                           
  1824                           ;standbyMode.c: 971: goto DRAWER_BACK;
  1825  00F8AC  D7BC               	goto	l435
  1826  00F8AE                     l446:
  1827                           
  1828                           ;standbyMode.c: 972: }
  1829                           ;standbyMode.c: 974: for (i=0; i<8; i++){
  1830  00F8AE  0E00               	movlw	0
  1831  00F8B0  6E44               	movwf	standbyMode@i+1,c
  1832  00F8B2  0E00               	movlw	0
  1833  00F8B4  6E43               	movwf	standbyMode@i,c
  1834  00F8B6                     l3844:
  1835  00F8B6  5044               	movf	standbyMode@i+1,w,c
  1836  00F8B8  E12C               	bnz	l3860
  1837  00F8BA  0E08               	movlw	8
  1838  00F8BC  5C43               	subwf	standbyMode@i,w,c
  1839  00F8BE  B0D8               	btfsc	status,0,c
  1840  00F8C0  D028               	goto	u5400
  1841                           
  1842                           ;standbyMode.c: 975: if (drawerInformation[i] == drawer){
  1843  00F8C2  90D8               	bcf	status,0,c
  1844  00F8C4  3443               	rlcf	standbyMode@i,w,c
  1845  00F8C6  6ED9               	movwf	fsr2l,c
  1846  00F8C8  3444               	rlcf	standbyMode@i+1,w,c
  1847  00F8CA  6EDA               	movwf	fsr2h,c
  1848  00F8CC  0E47               	movlw	low _drawerInformation
  1849  00F8CE  26D9               	addwf	fsr2l,f,c
  1850  00F8D0  0E00               	movlw	high _drawerInformation
  1851  00F8D2  22DA               	addwfc	fsr2h,f,c
  1852  00F8D4  5045               	movf	standbyMode@drawer,w,c
  1853  00F8D6  18DE               	xorwf	postinc2,w,c
  1854  00F8D8  E119               	bnz	l3856
  1855  00F8DA  5046               	movf	standbyMode@drawer+1,w,c
  1856  00F8DC  18DE               	xorwf	postinc2,w,c
  1857  00F8DE  A4D8               	btfss	status,2,c
  1858  00F8E0  D015               	goto	l450
  1859                           
  1860                           ;standbyMode.c: 976: validDrawer = 1;
  1861  00F8E2  0E00               	movlw	0
  1862  00F8E4  6E3A               	movwf	standbyMode@validDrawer+1,c
  1863  00F8E6  0E01               	movlw	1
  1864  00F8E8  6E39               	movwf	standbyMode@validDrawer,c
  1865                           
  1866                           ;standbyMode.c: 977: if (drawerInformation[i] == 0){
  1867  00F8EA  90D8               	bcf	status,0,c
  1868  00F8EC  3443               	rlcf	standbyMode@i,w,c
  1869  00F8EE  6ED9               	movwf	fsr2l,c
  1870  00F8F0  3444               	rlcf	standbyMode@i+1,w,c
  1871  00F8F2  6EDA               	movwf	fsr2h,c
  1872  00F8F4  0E47               	movlw	low _drawerInformation
  1873  00F8F6  26D9               	addwf	fsr2l,f,c
  1874  00F8F8  0E00               	movlw	high _drawerInformation
  1875  00F8FA  22DA               	addwfc	fsr2h,f,c
  1876  00F8FC  50DE               	movf	postinc2,w,c
  1877  00F8FE  10DE               	iorwf	postinc2,w,c
  1878  00F900  A4D8               	btfss	status,2,c
  1879  00F902  D004               	goto	l450
  1880                           
  1881                           ;standbyMode.c: 978: zero = 1;
  1882  00F904  0E00               	movlw	0
  1883  00F906  6E3C               	movwf	standbyMode@zero+1,c
  1884  00F908  0E01               	movlw	1
  1885  00F90A  6E3B               	movwf	standbyMode@zero,c
  1886  00F90C                     l450:
  1887  00F90C                     l3856:
  1888  00F90C  4A43               	infsnz	standbyMode@i,f,c
  1889  00F90E  2A44               	incf	standbyMode@i+1,f,c
  1890  00F910  D7D2               	goto	l3844
  1891  00F912                     u5400:
  1892  00F912                     l3860:
  1893                           
  1894                           ;standbyMode.c: 979: }
  1895                           ;standbyMode.c: 980: }
  1896                           ;standbyMode.c: 981: }
  1897                           ;standbyMode.c: 982: if (validDrawer == 1){
  1898  00F912  0439               	decf	standbyMode@validDrawer,w,c
  1899  00F914  103A               	iorwf	standbyMode@validDrawer+1,w,c
  1900  00F916  A4D8               	btfss	status,2,c
  1901  00F918  D060               	goto	l451
  1902                           
  1903                           ;standbyMode.c: 983: if (zero == 1){
  1904  00F91A  043B               	decf	standbyMode@zero,w,c
  1905  00F91C  103C               	iorwf	standbyMode@zero+1,w,c
  1906  00F91E  A4D8               	btfss	status,2,c
  1907  00F920  D02E               	goto	l452
  1908                           
  1909                           ;standbyMode.c: 984: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1910  00F922  0E01               	movlw	1
  1911  00F924  EC02  F06E         	call	_lcdInst
  1912  00F928  0EC3               	movlw	195
  1913  00F92A  6E30               	movwf	??_standbyMode& (0+255),c
  1914  00F92C  0ECD               	movlw	205
  1915  00F92E                     u5747:
  1916  00F92E  2EE8               	decfsz	wreg,f,c
  1917  00F930  D7FE               	bra	u5747
  1918  00F932  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1919  00F934  D7FC               	bra	u5747
  1920  00F936  F000               	nop	
  1921                           
  1922                           ;standbyMode.c: 985: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1923  00F938  0E0C               	movlw	12
  1924  00F93A  EC02  F06E         	call	_lcdInst
  1925                           
  1926                           ;standbyMode.c: 986: printf("No drawer");
  1927  00F93E  0EC0               	movlw	low STR_44
  1928  00F940  6E0D               	movwf	printf@f,c
  1929  00F942  0EFF               	movlw	high STR_44
  1930  00F944  6E0E               	movwf	printf@f+1,c
  1931  00F946  ECDB  F06F         	call	_printf	;wreg free
  1932                           
  1933                           ;standbyMode.c: 987: lcdInst(0xC0);;
  1934  00F94A  0EC0               	movlw	192
  1935  00F94C  EC02  F06E         	call	_lcdInst
  1936                           
  1937                           ;standbyMode.c: 988: printf("number pressed.");
  1938  00F950  0E2F               	movlw	low STR_45
  1939  00F952  6E0D               	movwf	printf@f,c
  1940  00F954  0EFE               	movlw	high STR_45
  1941  00F956  6E0E               	movwf	printf@f+1,c
  1942  00F958  ECDB  F06F         	call	_printf	;wreg free
  1943                           
  1944                           ;standbyMode.c: 989: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1945  00F95C  0E66               	movlw	102
  1946  00F95E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1947  00F960  0E76               	movlw	118
  1948  00F962  6E30               	movwf	??_standbyMode& (0+255),c
  1949  00F964  0EC1               	movlw	193
  1950  00F966                     u5757:
  1951  00F966  2EE8               	decfsz	wreg,f,c
  1952  00F968  D7FE               	bra	u5757
  1953  00F96A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1954  00F96C  D7FC               	bra	u5757
  1955  00F96E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1956  00F970  D7FA               	bra	u5757
  1957  00F972  F000               	nop	
  1958                           
  1959                           ;standbyMode.c: 990: zero = 0;
  1960  00F974  0E00               	movlw	0
  1961  00F976  6E3C               	movwf	standbyMode@zero+1,c
  1962  00F978  0E00               	movlw	0
  1963  00F97A  6E3B               	movwf	standbyMode@zero,c
  1964                           
  1965                           ;standbyMode.c: 991: }
  1966  00F97C  D029               	goto	l453
  1967  00F97E                     l452:
  1968                           
  1969                           ;standbyMode.c: 992: else{
  1970                           ;standbyMode.c: 993: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1971  00F97E  0E01               	movlw	1
  1972  00F980  EC02  F06E         	call	_lcdInst
  1973  00F984  0EC3               	movlw	195
  1974  00F986  6E30               	movwf	??_standbyMode& (0+255),c
  1975  00F988  0ECD               	movlw	205
  1976  00F98A                     u5767:
  1977  00F98A  2EE8               	decfsz	wreg,f,c
  1978  00F98C  D7FE               	bra	u5767
  1979  00F98E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1980  00F990  D7FC               	bra	u5767
  1981  00F992  F000               	nop	
  1982                           
  1983                           ;standbyMode.c: 994: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1984  00F994  0E0C               	movlw	12
  1985  00F996  EC02  F06E         	call	_lcdInst
  1986                           
  1987                           ;standbyMode.c: 995: printf("Drawer already");
  1988  00F99A  0E1C               	movlw	low STR_46
  1989  00F99C  6E0D               	movwf	printf@f,c
  1990  00F99E  0EFF               	movlw	high STR_46
  1991  00F9A0  6E0E               	movwf	printf@f+1,c
  1992  00F9A2  ECDB  F06F         	call	_printf	;wreg free
  1993                           
  1994                           ;standbyMode.c: 996: lcdInst(0xC0);;
  1995  00F9A6  0EC0               	movlw	192
  1996  00F9A8  EC02  F06E         	call	_lcdInst
  1997                           
  1998                           ;standbyMode.c: 997: printf("in use!");
  1999  00F9AC  0EDC               	movlw	low STR_47
  2000  00F9AE  6E0D               	movwf	printf@f,c
  2001  00F9B0  0EFF               	movlw	high STR_47
  2002  00F9B2  6E0E               	movwf	printf@f+1,c
  2003  00F9B4  ECDB  F06F         	call	_printf	;wreg free
  2004                           
  2005                           ;standbyMode.c: 998: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2006  00F9B8  0E66               	movlw	102
  2007  00F9BA  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2008  00F9BC  0E76               	movlw	118
  2009  00F9BE  6E30               	movwf	??_standbyMode& (0+255),c
  2010  00F9C0  0EC1               	movlw	193
  2011  00F9C2                     u5777:
  2012  00F9C2  2EE8               	decfsz	wreg,f,c
  2013  00F9C4  D7FE               	bra	u5777
  2014  00F9C6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2015  00F9C8  D7FC               	bra	u5777
  2016  00F9CA  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2017  00F9CC  D7FA               	bra	u5777
  2018  00F9CE  F000               	nop	
  2019  00F9D0                     l453:
  2020                           
  2021                           ;standbyMode.c: 999: }
  2022                           ;standbyMode.c: 1000: validDrawer = 0;
  2023  00F9D0  0E00               	movlw	0
  2024  00F9D2  6E3A               	movwf	standbyMode@validDrawer+1,c
  2025  00F9D4  0E00               	movlw	0
  2026  00F9D6  6E39               	movwf	standbyMode@validDrawer,c
  2027                           
  2028                           ;standbyMode.c: 1001: continue;
  2029  00F9D8  D6F6               	goto	u5310
  2030  00F9DA                     l451:
  2031                           
  2032                           ;standbyMode.c: 1003: else{
  2033                           ;standbyMode.c: 1004: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2034  00F9DA  0E01               	movlw	1
  2035  00F9DC  EC02  F06E         	call	_lcdInst
  2036  00F9E0  0EC3               	movlw	195
  2037  00F9E2  6E30               	movwf	??_standbyMode& (0+255),c
  2038  00F9E4  0ECD               	movlw	205
  2039  00F9E6                     u5787:
  2040  00F9E6  2EE8               	decfsz	wreg,f,c
  2041  00F9E8  D7FE               	bra	u5787
  2042  00F9EA  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2043  00F9EC  D7FC               	bra	u5787
  2044  00F9EE  F000               	nop	
  2045                           
  2046                           ;standbyMode.c: 1005: diet = diet_press(drawer);
  2047  00F9F0  C045  F019         	movff	standbyMode@drawer,diet_press@drawer
  2048  00F9F4  C046  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2049  00F9F8  ECFE  F073         	call	_diet_press	;wreg free
  2050  00F9FC  C019  F041         	movff	?_diet_press,standbyMode@diet
  2051  00FA00  C01A  F042         	movff	?_diet_press+1,standbyMode@diet+1
  2052                           
  2053                           ;standbyMode.c: 1006: if (diet == 100){
  2054  00FA04  0E64               	movlw	100
  2055  00FA06  1841               	xorwf	standbyMode@diet,w,c
  2056  00FA08  1042               	iorwf	standbyMode@diet+1,w,c
  2057  00FA0A  A4D8               	btfss	status,2,c
  2058  00FA0C  D005               	goto	l457
  2059                           
  2060                           ;standbyMode.c: 1007: diet = 0;
  2061  00FA0E  0E00               	movlw	0
  2062  00FA10  6E42               	movwf	standbyMode@diet+1,c
  2063  00FA12  0E00               	movlw	0
  2064  00FA14  6E41               	movwf	standbyMode@diet,c
  2065                           
  2066                           ;standbyMode.c: 1008: goto DIET_BACK1;
  2067  00FA16  D730               	goto	u5350
  2068  00FA18                     l457:
  2069                           
  2070                           ;standbyMode.c: 1009: }
  2071                           ;standbyMode.c: 1011: food = food_press(diet, drawer);
  2072  00FA18  C041  F019         	movff	standbyMode@diet,food_press@dietSum
  2073  00FA1C  C042  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  2074  00FA20  C045  F01B         	movff	standbyMode@drawer,food_press@drawer
  2075  00FA24  C046  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  2076  00FA28  EC6A  F070         	call	_food_press	;wreg free
  2077  00FA2C  C019  F03D         	movff	?_food_press,standbyMode@food
  2078  00FA30  C01A  F03E         	movff	?_food_press+1,standbyMode@food+1
  2079                           
  2080                           ;standbyMode.c: 1012: if (food == 100){
  2081  00FA34  0E64               	movlw	100
  2082  00FA36  183D               	xorwf	standbyMode@food,w,c
  2083  00FA38  103E               	iorwf	standbyMode@food+1,w,c
  2084  00FA3A  A4D8               	btfss	status,2,c
  2085  00FA3C  D009               	goto	l458
  2086                           
  2087                           ;standbyMode.c: 1013: diet = 0;
  2088  00FA3E  0E00               	movlw	0
  2089  00FA40  6E42               	movwf	standbyMode@diet+1,c
  2090  00FA42  0E00               	movlw	0
  2091  00FA44  6E41               	movwf	standbyMode@diet,c
  2092                           
  2093                           ;standbyMode.c: 1014: food = 0;
  2094  00FA46  0E00               	movlw	0
  2095  00FA48  6E3E               	movwf	standbyMode@food+1,c
  2096  00FA4A  0E00               	movlw	0
  2097  00FA4C  6E3D               	movwf	standbyMode@food,c
  2098                           
  2099                           ;standbyMode.c: 1015: goto FOOD_BACK1;
  2100  00FA4E  D7C5               	goto	l451
  2101  00FA50                     l458:
  2102                           
  2103                           ;standbyMode.c: 1016: }
  2104                           ;standbyMode.c: 1017: drawerInformation[drawerCount] = drawer;
  2105  00FA50  90D8               	bcf	status,0,c
  2106  00FA52  343F               	rlcf	standbyMode@drawerCount,w,c
  2107  00FA54  6ED9               	movwf	fsr2l,c
  2108  00FA56  3440               	rlcf	standbyMode@drawerCount+1,w,c
  2109  00FA58  6EDA               	movwf	fsr2h,c
  2110  00FA5A  0E47               	movlw	low _drawerInformation
  2111  00FA5C  26D9               	addwf	fsr2l,f,c
  2112  00FA5E  0E00               	movlw	high _drawerInformation
  2113  00FA60  22DA               	addwfc	fsr2h,f,c
  2114  00FA62  C045  FFDE         	movff	standbyMode@drawer,postinc2
  2115  00FA66  C046  FFDD         	movff	standbyMode@drawer+1,postdec2
  2116                           
  2117                           ;standbyMode.c: 1018: drawerCount += 1;
  2118  00FA6A  4A3F               	infsnz	standbyMode@drawerCount,f,c
  2119  00FA6C  2A40               	incf	standbyMode@drawerCount+1,f,c
  2120                           
  2121                           ;standbyMode.c: 1019: }
  2122                           ;standbyMode.c: 1020: }
  2123  00FA6E  D004               	goto	l460
  2124  00FA70                     l444:
  2125                           
  2126                           ;standbyMode.c: 1021: else if (keypress1 == 14){
  2127  00FA70  0E0E               	movlw	14
  2128  00FA72  1838               	xorwf	standbyMode@keypress1,w,c
  2129  00FA74  B4D8               	btfsc	status,2,c
  2130  00FA76  0012               	return	
  2131  00FA78                     l460:
  2132                           
  2133                           ;standbyMode.c: 1023: }
  2134                           ;standbyMode.c: 1024: keypress1 = 0;
  2135  00FA78  0E00               	movlw	0
  2136  00FA7A  6E38               	movwf	standbyMode@keypress1,c
  2137  00FA7C  D6A4               	goto	u5310
  2138  00FA7E                     l433:
  2139                           
  2140                           ;standbyMode.c: 1028: else{
  2141                           ;standbyMode.c: 1029: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2142  00FA7E  0E01               	movlw	1
  2143  00FA80  EC02  F06E         	call	_lcdInst
  2144  00FA84  0EC3               	movlw	195
  2145  00FA86  6E30               	movwf	??_standbyMode& (0+255),c
  2146  00FA88  0ECD               	movlw	205
  2147  00FA8A                     u5797:
  2148  00FA8A  2EE8               	decfsz	wreg,f,c
  2149  00FA8C  D7FE               	bra	u5797
  2150  00FA8E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2151  00FA90  D7FC               	bra	u5797
  2152  00FA92  F000               	nop	
  2153                           
  2154                           ;standbyMode.c: 1030: drawer = which_drawer();
  2155  00FA94  EC64  F071         	call	_which_drawer	;wreg free
  2156  00FA98  C019  F045         	movff	?_which_drawer,standbyMode@drawer
  2157  00FA9C  C01A  F046         	movff	?_which_drawer+1,standbyMode@drawer+1
  2158                           
  2159                           ;standbyMode.c: 1032: if (drawer == 100){
  2160  00FAA0  0E64               	movlw	100
  2161  00FAA2  1845               	xorwf	standbyMode@drawer,w,c
  2162  00FAA4  1046               	iorwf	standbyMode@drawer+1,w,c
  2163  00FAA6  A4D8               	btfss	status,2,c
  2164  00FAA8  D009               	goto	l464
  2165                           
  2166                           ;standbyMode.c: 1033: drawer = 0;
  2167  00FAAA  0E00               	movlw	0
  2168  00FAAC  6E46               	movwf	standbyMode@drawer+1,c
  2169  00FAAE  0E00               	movlw	0
  2170  00FAB0  6E45               	movwf	standbyMode@drawer,c
  2171                           
  2172                           ;standbyMode.c: 1034: firstIteration = 1;
  2173  00FAB2  0E00               	movlw	0
  2174  00FAB4  6E33               	movwf	standbyMode@firstIteration+1,c
  2175  00FAB6  0E01               	movlw	1
  2176  00FAB8  6E32               	movwf	standbyMode@firstIteration,c
  2177                           
  2178                           ;standbyMode.c: 1035: goto DRAWER_BACK;
  2179  00FABA  D6B5               	goto	l435
  2180  00FABC                     l464:
  2181                           
  2182                           ;standbyMode.c: 1036: }
  2183                           ;standbyMode.c: 1038: firstIteration = 1;
  2184  00FABC  0E00               	movlw	0
  2185  00FABE  6E33               	movwf	standbyMode@firstIteration+1,c
  2186  00FAC0  0E01               	movlw	1
  2187  00FAC2  6E32               	movwf	standbyMode@firstIteration,c
  2188                           
  2189                           ;standbyMode.c: 1039: for (i=0; i<8; i++){
  2190  00FAC4  0E00               	movlw	0
  2191  00FAC6  6E44               	movwf	standbyMode@i+1,c
  2192  00FAC8  0E00               	movlw	0
  2193  00FACA  6E43               	movwf	standbyMode@i,c
  2194  00FACC                     l3938:
  2195  00FACC  5044               	movf	standbyMode@i+1,w,c
  2196  00FACE  E12C               	bnz	l3954
  2197  00FAD0  0E08               	movlw	8
  2198  00FAD2  5C43               	subwf	standbyMode@i,w,c
  2199  00FAD4  B0D8               	btfsc	status,0,c
  2200  00FAD6  D028               	goto	u5500
  2201                           
  2202                           ;standbyMode.c: 1040: if (drawerInformation[i] == drawer){
  2203  00FAD8  90D8               	bcf	status,0,c
  2204  00FADA  3443               	rlcf	standbyMode@i,w,c
  2205  00FADC  6ED9               	movwf	fsr2l,c
  2206  00FADE  3444               	rlcf	standbyMode@i+1,w,c
  2207  00FAE0  6EDA               	movwf	fsr2h,c
  2208  00FAE2  0E47               	movlw	low _drawerInformation
  2209  00FAE4  26D9               	addwf	fsr2l,f,c
  2210  00FAE6  0E00               	movlw	high _drawerInformation
  2211  00FAE8  22DA               	addwfc	fsr2h,f,c
  2212  00FAEA  5045               	movf	standbyMode@drawer,w,c
  2213  00FAEC  18DE               	xorwf	postinc2,w,c
  2214  00FAEE  E119               	bnz	l3950
  2215  00FAF0  5046               	movf	standbyMode@drawer+1,w,c
  2216  00FAF2  18DE               	xorwf	postinc2,w,c
  2217  00FAF4  A4D8               	btfss	status,2,c
  2218  00FAF6  D015               	goto	l468
  2219                           
  2220                           ;standbyMode.c: 1041: validDrawer = 1;
  2221  00FAF8  0E00               	movlw	0
  2222  00FAFA  6E3A               	movwf	standbyMode@validDrawer+1,c
  2223  00FAFC  0E01               	movlw	1
  2224  00FAFE  6E39               	movwf	standbyMode@validDrawer,c
  2225                           
  2226                           ;standbyMode.c: 1042: if (drawerInformation[i] == 0){
  2227  00FB00  90D8               	bcf	status,0,c
  2228  00FB02  3443               	rlcf	standbyMode@i,w,c
  2229  00FB04  6ED9               	movwf	fsr2l,c
  2230  00FB06  3444               	rlcf	standbyMode@i+1,w,c
  2231  00FB08  6EDA               	movwf	fsr2h,c
  2232  00FB0A  0E47               	movlw	low _drawerInformation
  2233  00FB0C  26D9               	addwf	fsr2l,f,c
  2234  00FB0E  0E00               	movlw	high _drawerInformation
  2235  00FB10  22DA               	addwfc	fsr2h,f,c
  2236  00FB12  50DE               	movf	postinc2,w,c
  2237  00FB14  10DE               	iorwf	postinc2,w,c
  2238  00FB16  A4D8               	btfss	status,2,c
  2239  00FB18  D004               	goto	l468
  2240                           
  2241                           ;standbyMode.c: 1043: zero = 1;
  2242  00FB1A  0E00               	movlw	0
  2243  00FB1C  6E3C               	movwf	standbyMode@zero+1,c
  2244  00FB1E  0E01               	movlw	1
  2245  00FB20  6E3B               	movwf	standbyMode@zero,c
  2246  00FB22                     l468:
  2247  00FB22                     l3950:
  2248  00FB22  4A43               	infsnz	standbyMode@i,f,c
  2249  00FB24  2A44               	incf	standbyMode@i+1,f,c
  2250  00FB26  D7D2               	goto	l3938
  2251  00FB28                     u5500:
  2252  00FB28                     l3954:
  2253                           
  2254                           ;standbyMode.c: 1044: }
  2255                           ;standbyMode.c: 1045: }
  2256                           ;standbyMode.c: 1046: }
  2257                           ;standbyMode.c: 1047: if (validDrawer == 1){
  2258  00FB28  0439               	decf	standbyMode@validDrawer,w,c
  2259  00FB2A  103A               	iorwf	standbyMode@validDrawer+1,w,c
  2260  00FB2C  A4D8               	btfss	status,2,c
  2261  00FB2E  D060               	goto	l469
  2262                           
  2263                           ;standbyMode.c: 1048: if (zero == 1){
  2264  00FB30  043B               	decf	standbyMode@zero,w,c
  2265  00FB32  103C               	iorwf	standbyMode@zero+1,w,c
  2266  00FB34  A4D8               	btfss	status,2,c
  2267  00FB36  D02E               	goto	l470
  2268                           
  2269                           ;standbyMode.c: 1049: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2270  00FB38  0E01               	movlw	1
  2271  00FB3A  EC02  F06E         	call	_lcdInst
  2272  00FB3E  0EC3               	movlw	195
  2273  00FB40  6E30               	movwf	??_standbyMode& (0+255),c
  2274  00FB42  0ECD               	movlw	205
  2275  00FB44                     u5807:
  2276  00FB44  2EE8               	decfsz	wreg,f,c
  2277  00FB46  D7FE               	bra	u5807
  2278  00FB48  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2279  00FB4A  D7FC               	bra	u5807
  2280  00FB4C  F000               	nop	
  2281                           
  2282                           ;standbyMode.c: 1050: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2283  00FB4E  0E0C               	movlw	12
  2284  00FB50  EC02  F06E         	call	_lcdInst
  2285                           
  2286                           ;standbyMode.c: 1051: printf("No drawer");
  2287  00FB54  0EC0               	movlw	low STR_44
  2288  00FB56  6E0D               	movwf	printf@f,c
  2289  00FB58  0EFF               	movlw	high STR_44
  2290  00FB5A  6E0E               	movwf	printf@f+1,c
  2291  00FB5C  ECDB  F06F         	call	_printf	;wreg free
  2292                           
  2293                           ;standbyMode.c: 1052: lcdInst(0xC0);;
  2294  00FB60  0EC0               	movlw	192
  2295  00FB62  EC02  F06E         	call	_lcdInst
  2296                           
  2297                           ;standbyMode.c: 1053: printf("number pressed.");
  2298  00FB66  0E2F               	movlw	low STR_45
  2299  00FB68  6E0D               	movwf	printf@f,c
  2300  00FB6A  0EFE               	movlw	high STR_45
  2301  00FB6C  6E0E               	movwf	printf@f+1,c
  2302  00FB6E  ECDB  F06F         	call	_printf	;wreg free
  2303                           
  2304                           ;standbyMode.c: 1054: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2305  00FB72  0E66               	movlw	102
  2306  00FB74  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2307  00FB76  0E76               	movlw	118
  2308  00FB78  6E30               	movwf	??_standbyMode& (0+255),c
  2309  00FB7A  0EC1               	movlw	193
  2310  00FB7C                     u5817:
  2311  00FB7C  2EE8               	decfsz	wreg,f,c
  2312  00FB7E  D7FE               	bra	u5817
  2313  00FB80  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2314  00FB82  D7FC               	bra	u5817
  2315  00FB84  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2316  00FB86  D7FA               	bra	u5817
  2317  00FB88  F000               	nop	
  2318                           
  2319                           ;standbyMode.c: 1055: zero = 0;
  2320  00FB8A  0E00               	movlw	0
  2321  00FB8C  6E3C               	movwf	standbyMode@zero+1,c
  2322  00FB8E  0E00               	movlw	0
  2323  00FB90  6E3B               	movwf	standbyMode@zero,c
  2324                           
  2325                           ;standbyMode.c: 1056: }
  2326  00FB92  D029               	goto	l471
  2327  00FB94                     l470:
  2328                           
  2329                           ;standbyMode.c: 1057: else{
  2330                           ;standbyMode.c: 1058: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2331  00FB94  0E01               	movlw	1
  2332  00FB96  EC02  F06E         	call	_lcdInst
  2333  00FB9A  0EC3               	movlw	195
  2334  00FB9C  6E30               	movwf	??_standbyMode& (0+255),c
  2335  00FB9E  0ECD               	movlw	205
  2336  00FBA0                     u5827:
  2337  00FBA0  2EE8               	decfsz	wreg,f,c
  2338  00FBA2  D7FE               	bra	u5827
  2339  00FBA4  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2340  00FBA6  D7FC               	bra	u5827
  2341  00FBA8  F000               	nop	
  2342                           
  2343                           ;standbyMode.c: 1059: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2344  00FBAA  0E0C               	movlw	12
  2345  00FBAC  EC02  F06E         	call	_lcdInst
  2346                           
  2347                           ;standbyMode.c: 1060: printf("Drawer already");
  2348  00FBB0  0E1C               	movlw	low STR_46
  2349  00FBB2  6E0D               	movwf	printf@f,c
  2350  00FBB4  0EFF               	movlw	high STR_46
  2351  00FBB6  6E0E               	movwf	printf@f+1,c
  2352  00FBB8  ECDB  F06F         	call	_printf	;wreg free
  2353                           
  2354                           ;standbyMode.c: 1061: lcdInst(0xC0);;
  2355  00FBBC  0EC0               	movlw	192
  2356  00FBBE  EC02  F06E         	call	_lcdInst
  2357                           
  2358                           ;standbyMode.c: 1062: printf("in use!");
  2359  00FBC2  0EDC               	movlw	low STR_47
  2360  00FBC4  6E0D               	movwf	printf@f,c
  2361  00FBC6  0EFF               	movlw	high STR_47
  2362  00FBC8  6E0E               	movwf	printf@f+1,c
  2363  00FBCA  ECDB  F06F         	call	_printf	;wreg free
  2364                           
  2365                           ;standbyMode.c: 1063: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2366  00FBCE  0E66               	movlw	102
  2367  00FBD0  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2368  00FBD2  0E76               	movlw	118
  2369  00FBD4  6E30               	movwf	??_standbyMode& (0+255),c
  2370  00FBD6  0EC1               	movlw	193
  2371  00FBD8                     u5837:
  2372  00FBD8  2EE8               	decfsz	wreg,f,c
  2373  00FBDA  D7FE               	bra	u5837
  2374  00FBDC  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2375  00FBDE  D7FC               	bra	u5837
  2376  00FBE0  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2377  00FBE2  D7FA               	bra	u5837
  2378  00FBE4  F000               	nop	
  2379  00FBE6                     l471:
  2380                           
  2381                           ;standbyMode.c: 1064: }
  2382                           ;standbyMode.c: 1065: validDrawer = 0;
  2383  00FBE6  0E00               	movlw	0
  2384  00FBE8  6E3A               	movwf	standbyMode@validDrawer+1,c
  2385  00FBEA  0E00               	movlw	0
  2386  00FBEC  6E39               	movwf	standbyMode@validDrawer,c
  2387                           
  2388                           ;standbyMode.c: 1067: }
  2389                           
  2390                           ;standbyMode.c: 1066: continue;
  2391  00FBEE  D5E7               	goto	l432
  2392  00FBF0                     l469:
  2393                           
  2394                           ;standbyMode.c: 1068: else{
  2395                           ;standbyMode.c: 1069: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2396  00FBF0  0E01               	movlw	1
  2397  00FBF2  EC02  F06E         	call	_lcdInst
  2398  00FBF6  0EC3               	movlw	195
  2399  00FBF8  6E30               	movwf	??_standbyMode& (0+255),c
  2400  00FBFA  0ECD               	movlw	205
  2401  00FBFC                     u5847:
  2402  00FBFC  2EE8               	decfsz	wreg,f,c
  2403  00FBFE  D7FE               	bra	u5847
  2404  00FC00  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2405  00FC02  D7FC               	bra	u5847
  2406  00FC04  F000               	nop	
  2407                           
  2408                           ;standbyMode.c: 1070: diet = diet_press(drawer);
  2409  00FC06  C045  F019         	movff	standbyMode@drawer,diet_press@drawer
  2410  00FC0A  C046  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2411  00FC0E  ECFE  F073         	call	_diet_press	;wreg free
  2412  00FC12  C019  F041         	movff	?_diet_press,standbyMode@diet
  2413  00FC16  C01A  F042         	movff	?_diet_press+1,standbyMode@diet+1
  2414                           
  2415                           ;standbyMode.c: 1071: if (diet == 100){
  2416  00FC1A  0E64               	movlw	100
  2417  00FC1C  1841               	xorwf	standbyMode@diet,w,c
  2418  00FC1E  1042               	iorwf	standbyMode@diet+1,w,c
  2419  00FC20  A4D8               	btfss	status,2,c
  2420  00FC22  D005               	goto	l475
  2421                           
  2422                           ;standbyMode.c: 1072: diet = 0;
  2423  00FC24  0E00               	movlw	0
  2424  00FC26  6E42               	movwf	standbyMode@diet+1,c
  2425  00FC28  0E00               	movlw	0
  2426  00FC2A  6E41               	movwf	standbyMode@diet,c
  2427                           
  2428                           ;standbyMode.c: 1073: goto DIET_BACK2;
  2429  00FC2C  D728               	goto	l433
  2430  00FC2E                     l475:
  2431                           
  2432                           ;standbyMode.c: 1074: }
  2433                           ;standbyMode.c: 1076: food = food_press(diet, drawer);
  2434  00FC2E  C041  F019         	movff	standbyMode@diet,food_press@dietSum
  2435  00FC32  C042  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  2436  00FC36  C045  F01B         	movff	standbyMode@drawer,food_press@drawer
  2437  00FC3A  C046  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  2438  00FC3E  EC6A  F070         	call	_food_press	;wreg free
  2439  00FC42  C019  F03D         	movff	?_food_press,standbyMode@food
  2440  00FC46  C01A  F03E         	movff	?_food_press+1,standbyMode@food+1
  2441                           
  2442                           ;standbyMode.c: 1077: if (food == 100){
  2443  00FC4A  0E64               	movlw	100
  2444  00FC4C  183D               	xorwf	standbyMode@food,w,c
  2445  00FC4E  103E               	iorwf	standbyMode@food+1,w,c
  2446  00FC50  A4D8               	btfss	status,2,c
  2447  00FC52  D009               	goto	l476
  2448                           
  2449                           ;standbyMode.c: 1078: diet = 0;
  2450  00FC54  0E00               	movlw	0
  2451  00FC56  6E42               	movwf	standbyMode@diet+1,c
  2452  00FC58  0E00               	movlw	0
  2453  00FC5A  6E41               	movwf	standbyMode@diet,c
  2454                           
  2455                           ;standbyMode.c: 1079: food = 0;
  2456  00FC5C  0E00               	movlw	0
  2457  00FC5E  6E3E               	movwf	standbyMode@food+1,c
  2458  00FC60  0E00               	movlw	0
  2459  00FC62  6E3D               	movwf	standbyMode@food,c
  2460                           
  2461                           ;standbyMode.c: 1080: goto FOOD_BACK2;
  2462  00FC64  D7C5               	goto	l469
  2463  00FC66                     l476:
  2464                           
  2465                           ;standbyMode.c: 1081: }
  2466                           ;standbyMode.c: 1082: drawerInformation[drawerCount] = drawer;
  2467  00FC66  90D8               	bcf	status,0,c
  2468  00FC68  343F               	rlcf	standbyMode@drawerCount,w,c
  2469  00FC6A  6ED9               	movwf	fsr2l,c
  2470  00FC6C  3440               	rlcf	standbyMode@drawerCount+1,w,c
  2471  00FC6E  6EDA               	movwf	fsr2h,c
  2472  00FC70  0E47               	movlw	low _drawerInformation
  2473  00FC72  26D9               	addwf	fsr2l,f,c
  2474  00FC74  0E00               	movlw	high _drawerInformation
  2475  00FC76  22DA               	addwfc	fsr2h,f,c
  2476  00FC78  C045  FFDE         	movff	standbyMode@drawer,postinc2
  2477  00FC7C  C046  FFDD         	movff	standbyMode@drawer+1,postdec2
  2478                           
  2479                           ;standbyMode.c: 1083: drawerCount += 1;
  2480  00FC80  4A3F               	infsnz	standbyMode@drawerCount,f,c
  2481  00FC82  2A40               	incf	standbyMode@drawerCount+1,f,c
  2482  00FC84  D59C               	goto	l432
  2483  00FC86                     l431:
  2484                           
  2485                           ;standbyMode.c: 1088: else if (keypress == 14){
  2486  00FC86  0E0E               	movlw	14
  2487  00FC88  1836               	xorwf	standbyMode@keypress,w,c
  2488  00FC8A  A4D8               	btfss	status,2,c
  2489  00FC8C  D05A               	goto	l478
  2490  00FC8E                     u5550:
  2491                           
  2492                           ;standbyMode.c: 1090: unsigned int whichKey = viewLogs();
  2493                           
  2494                           ;standbyMode.c: 1089: while (1){
  2495  00FC8E  EC66  F072         	call	_viewLogs	;wreg free
  2496  00FC92  C019  F034         	movff	?_viewLogs,standbyMode@whichKey
  2497  00FC96  C01A  F035         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2498                           
  2499                           ;standbyMode.c: 1091: if (whichKey == 14){
  2500  00FC9A  0E0E               	movlw	14
  2501  00FC9C  1834               	xorwf	standbyMode@whichKey,w,c
  2502  00FC9E  1035               	iorwf	standbyMode@whichKey+1,w,c
  2503  00FCA0  B4D8               	btfsc	status,2,c
  2504  00FCA2  D7F5               	goto	u5550
  2505                           
  2506                           ;standbyMode.c: 1094: else if (whichKey == 15){
  2507                           
  2508                           ;standbyMode.c: 1093: }
  2509                           
  2510                           ;standbyMode.c: 1092: continue;
  2511  00FCA4  0E0F               	movlw	15
  2512  00FCA6  1834               	xorwf	standbyMode@whichKey,w,c
  2513  00FCA8  1035               	iorwf	standbyMode@whichKey+1,w,c
  2514  00FCAA  A4D8               	btfss	status,2,c
  2515  00FCAC  D020               	goto	l483
  2516                           
  2517                           ;standbyMode.c: 1095: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2518  00FCAE  0E01               	movlw	1
  2519  00FCB0  EC02  F06E         	call	_lcdInst
  2520  00FCB4  0EC3               	movlw	195
  2521  00FCB6  6E30               	movwf	??_standbyMode& (0+255),c
  2522  00FCB8  0ECD               	movlw	205
  2523  00FCBA                     u5857:
  2524  00FCBA  2EE8               	decfsz	wreg,f,c
  2525  00FCBC  D7FE               	bra	u5857
  2526  00FCBE  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2527  00FCC0  D7FC               	bra	u5857
  2528  00FCC2  F000               	nop	
  2529                           
  2530                           ;standbyMode.c: 1096: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2531  00FCC4  0E0C               	movlw	12
  2532  00FCC6  EC02  F06E         	call	_lcdInst
  2533                           
  2534                           ;standbyMode.c: 1097: printf("Rebooting.");
  2535  00FCCA  0E9F               	movlw	low STR_52
  2536  00FCCC  6E0D               	movwf	printf@f,c
  2537  00FCCE  0EFF               	movlw	high STR_52
  2538  00FCD0  6E0E               	movwf	printf@f+1,c
  2539  00FCD2  ECDB  F06F         	call	_printf	;wreg free
  2540                           
  2541                           ;standbyMode.c: 1098: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2542  00FCD6  0E66               	movlw	102
  2543  00FCD8  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2544  00FCDA  0E76               	movlw	118
  2545  00FCDC  6E30               	movwf	??_standbyMode& (0+255),c
  2546  00FCDE  0EC1               	movlw	193
  2547  00FCE0                     u5867:
  2548  00FCE0  2EE8               	decfsz	wreg,f,c
  2549  00FCE2  D7FE               	bra	u5867
  2550  00FCE4  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2551  00FCE6  D7FC               	bra	u5867
  2552  00FCE8  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2553  00FCEA  D7FA               	bra	u5867
  2554  00FCEC  D028               	goto	L1
  2555  00FCEE                     l483:
  2556                           
  2557                           ;standbyMode.c: 1101: else{
  2558                           ;standbyMode.c: 1102: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2559  00FCEE  0E01               	movlw	1
  2560  00FCF0  EC02  F06E         	call	_lcdInst
  2561  00FCF4  0EC3               	movlw	195
  2562  00FCF6  6E30               	movwf	??_standbyMode& (0+255),c
  2563  00FCF8  0ECD               	movlw	205
  2564  00FCFA                     u5877:
  2565  00FCFA  2EE8               	decfsz	wreg,f,c
  2566  00FCFC  D7FE               	bra	u5877
  2567  00FCFE  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2568  00FD00  D7FC               	bra	u5877
  2569  00FD02  F000               	nop	
  2570                           
  2571                           ;standbyMode.c: 1103: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2572  00FD04  0E0C               	movlw	12
  2573  00FD06  EC02  F06E         	call	_lcdInst
  2574                           
  2575                           ;standbyMode.c: 1104: printf("Invalid key!");
  2576  00FD0A  0E55               	movlw	low STR_53
  2577  00FD0C  6E0D               	movwf	printf@f,c
  2578  00FD0E  0EFF               	movlw	high STR_53
  2579  00FD10  6E0E               	movwf	printf@f+1,c
  2580  00FD12  ECDB  F06F         	call	_printf	;wreg free
  2581                           
  2582                           ;standbyMode.c: 1105: lcdInst(0xC0);;
  2583  00FD16  0EC0               	movlw	192
  2584  00FD18  EC02  F06E         	call	_lcdInst
  2585                           
  2586                           ;standbyMode.c: 1106: printf("Rebooting.");
  2587  00FD1C  0E9F               	movlw	low STR_52
  2588  00FD1E  6E0D               	movwf	printf@f,c
  2589  00FD20  0EFF               	movlw	high STR_52
  2590  00FD22  6E0E               	movwf	printf@f+1,c
  2591  00FD24  ECDB  F06F         	call	_printf	;wreg free
  2592                           
  2593                           ;standbyMode.c: 1107: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2594  00FD28  0E66               	movlw	102
  2595  00FD2A  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2596  00FD2C  0E76               	movlw	118
  2597  00FD2E  6E30               	movwf	??_standbyMode& (0+255),c
  2598  00FD30  0EC1               	movlw	193
  2599  00FD32                     u5887:
  2600  00FD32  2EE8               	decfsz	wreg,f,c
  2601  00FD34  D7FE               	bra	u5887
  2602  00FD36  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2603  00FD38  D7FC               	bra	u5887
  2604  00FD3A  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2605  00FD3C  D7FA               	bra	u5887
  2606  00FD3E                     L1:
  2607  00FD3E  F000               	nop	
  2608                           
  2609                           ;standbyMode.c: 1108: break;
  2610  00FD40  0012               	return	
  2611  00FD42                     l478:
  2612                           
  2613                           ;standbyMode.c: 1114: else {
  2614                           ;standbyMode.c: 1115: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2615  00FD42  0E01               	movlw	1
  2616  00FD44  EC02  F06E         	call	_lcdInst
  2617  00FD48  0EC3               	movlw	195
  2618  00FD4A  6E30               	movwf	??_standbyMode& (0+255),c
  2619  00FD4C  0ECD               	movlw	205
  2620  00FD4E                     u5897:
  2621  00FD4E  2EE8               	decfsz	wreg,f,c
  2622  00FD50  D7FE               	bra	u5897
  2623  00FD52  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2624  00FD54  D7FC               	bra	u5897
  2625  00FD56  F000               	nop	
  2626                           
  2627                           ;standbyMode.c: 1116: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2628  00FD58  0E0C               	movlw	12
  2629  00FD5A  EC02  F06E         	call	_lcdInst
  2630                           
  2631                           ;standbyMode.c: 1117: printf("Invalid key!");
  2632  00FD5E  0E55               	movlw	low STR_53
  2633  00FD60  6E0D               	movwf	printf@f,c
  2634  00FD62  0EFF               	movlw	high STR_53
  2635  00FD64  6E0E               	movwf	printf@f+1,c
  2636  00FD66  ECDB  F06F         	call	_printf	;wreg free
  2637                           
  2638                           ;standbyMode.c: 1118: lcdInst(0xC0);;
  2639  00FD6A  0EC0               	movlw	192
  2640  00FD6C  EC02  F06E         	call	_lcdInst
  2641                           
  2642                           ;standbyMode.c: 1119: printf("Rebooting.");
  2643  00FD70  0E9F               	movlw	low STR_52
  2644  00FD72  6E0D               	movwf	printf@f,c
  2645  00FD74  0EFF               	movlw	high STR_52
  2646  00FD76  6E0E               	movwf	printf@f+1,c
  2647  00FD78  ECDB  F06F         	call	_printf	;wreg free
  2648                           
  2649                           ;standbyMode.c: 1120: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2650  00FD7C  0E66               	movlw	102
  2651  00FD7E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2652  00FD80  0E76               	movlw	118
  2653  00FD82  6E30               	movwf	??_standbyMode& (0+255),c
  2654  00FD84  0EC1               	movlw	193
  2655  00FD86                     u5907:
  2656  00FD86  2EE8               	decfsz	wreg,f,c
  2657  00FD88  D7FE               	bra	u5907
  2658  00FD8A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2659  00FD8C  D7FC               	bra	u5907
  2660  00FD8E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2661  00FD90  D7FA               	bra	u5907
  2662  00FD92  F000               	nop	
  2663  00FD94  0012               	return	
  2664  00FD96                     __end_of_standbyMode:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           tblptrh	equ	0xFF7
  2668                           tblptrl	equ	0xFF6
  2669                           tablat	equ	0xFF5
  2670                           prodh	equ	0xFF4
  2671                           prodl	equ	0xFF3
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postinc2	equ	0xFDE
  2675                           postdec2	equ	0xFDD
  2676                           fsr2h	equ	0xFDA
  2677                           fsr2l	equ	0xFD9
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _writeEEPROM *****************
  2681 ;; Defined at:
  2682 ;;		line 10 in file "EEPROMstorage.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  address         1    wreg     unsigned char 
  2685 ;;  data            1    0[COMRAM] unsigned char 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  address         1    1[COMRAM] unsigned char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, status,2
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2697 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;Total ram usage:        2 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_standbyMode
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text2
  2711  00DC56                     __ptext2:
  2712                           	opt stack 0
  2713  00DC56                     _writeEEPROM:
  2714                           	opt stack 29
  2715                           
  2716                           ;incstack = 0
  2717                           ;writeEEPROM@address stored from wreg
  2718  00DC56  6E02               	movwf	writeEEPROM@address,c
  2719  00DC58                     
  2720                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  2721  00DC58  B2A6               	btfsc	4006,1,c	;volsfr
  2722  00DC5A  D7FE               	goto	l3690
  2723                           
  2724                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  2725  00DC5C  84A6               	bsf	4006,2,c	;volsfr
  2726                           
  2727                           ;EEPROMstorage.c: 14: EEADR=address;
  2728  00DC5E  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  2729                           
  2730                           ;EEPROMstorage.c: 15: EEDATA=data;
  2731  00DC62  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  2732                           
  2733                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  2734  00DC66  9EA6               	bcf	4006,7,c	;volsfr
  2735                           
  2736                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  2737  00DC68  9CA6               	bcf	4006,6,c	;volsfr
  2738                           
  2739                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  2740  00DC6A  9EF2               	bcf	intcon,7,c	;volatile
  2741                           
  2742                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  2743  00DC6C  0E55               	movlw	85
  2744  00DC6E  6EA7               	movwf	4007,c	;volsfr
  2745                           
  2746                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  2747  00DC70  0EAA               	movlw	170
  2748  00DC72  6EA7               	movwf	4007,c	;volsfr
  2749                           
  2750                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  2751  00DC74  82A6               	bsf	4006,1,c	;volsfr
  2752                           
  2753                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  2754  00DC76  8EF2               	bsf	intcon,7,c	;volatile
  2755  00DC78  B2A6               	btfsc	4006,1,c	;volsfr
  2756  00DC7A  D7FE               	goto	l504
  2757                           
  2758                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  2759  00DC7C  94A6               	bcf	4006,2,c	;volsfr
  2760  00DC7E  0012               	return		;funcret
  2761  00DC80                     __end_of_writeEEPROM:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           intcon	equ	0xFF2
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           postinc2	equ	0xFDE
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _which_drawer *****************
  2779 ;; Defined at:
  2780 ;;		line 773 in file "standbyMode.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  rand            2   27[COMRAM] unsigned int 
  2785 ;;  keypress        1   35[COMRAM] unsigned char 
  2786 ;;  count           2   33[COMRAM] unsigned int 
  2787 ;;  backCheck       2   31[COMRAM] unsigned int 
  2788 ;;  sum             2   29[COMRAM] unsigned int 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  2   24[COMRAM] unsigned int 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:       12 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    3
  2805 ;; This function calls:
  2806 ;;		_decode_drawer
  2807 ;;		_lcdInst
  2808 ;;		_printf
  2809 ;;		_putch
  2810 ;; This function is called by:
  2811 ;;		_standbyMode
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text3
  2816  00E2C8                     __ptext3:
  2817                           	opt stack 0
  2818  00E2C8                     _which_drawer:
  2819                           	opt stack 26
  2820                           
  2821                           ;standbyMode.c: 774: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2822                           
  2823                           ;incstack = 0
  2824  00E2C8  0E0C               	movlw	12
  2825  00E2CA  EC02  F06E         	call	_lcdInst
  2826                           
  2827                           ;standbyMode.c: 775: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2828  00E2CE  0E01               	movlw	1
  2829  00E2D0  EC02  F06E         	call	_lcdInst
  2830  00E2D4  0EC3               	movlw	195
  2831  00E2D6  6E1B               	movwf	??_which_drawer& (0+255),c
  2832  00E2D8  0ECD               	movlw	205
  2833  00E2DA                     u5917:
  2834  00E2DA  2EE8               	decfsz	wreg,f,c
  2835  00E2DC  D7FE               	bra	u5917
  2836  00E2DE  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2837  00E2E0  D7FC               	bra	u5917
  2838  00E2E2  F000               	nop	
  2839                           
  2840                           ;standbyMode.c: 776: printf("Drawer number:");
  2841  00E2E4  0E0D               	movlw	low STR_27
  2842  00E2E6  6E0D               	movwf	printf@f,c
  2843  00E2E8  0EFF               	movlw	high STR_27
  2844  00E2EA  6E0E               	movwf	printf@f+1,c
  2845  00E2EC  ECDB  F06F         	call	_printf	;wreg free
  2846                           
  2847                           ;standbyMode.c: 777: lcdInst(0xC0);;
  2848  00E2F0  0EC0               	movlw	192
  2849  00E2F2  EC02  F06E         	call	_lcdInst
  2850                           
  2851                           ;standbyMode.c: 779: unsigned int count = 0;
  2852  00E2F6  0E00               	movlw	0
  2853  00E2F8  6E23               	movwf	which_drawer@count+1,c
  2854  00E2FA  0E00               	movlw	0
  2855  00E2FC  6E22               	movwf	which_drawer@count,c
  2856                           
  2857                           ;standbyMode.c: 780: unsigned int sum = 0;
  2858  00E2FE  0E00               	movlw	0
  2859  00E300  6E1F               	movwf	which_drawer@sum+1,c
  2860  00E302  0E00               	movlw	0
  2861  00E304  6E1E               	movwf	which_drawer@sum,c
  2862                           
  2863                           ;standbyMode.c: 781: unsigned int backCheck = 0;
  2864  00E306  0E00               	movlw	0
  2865  00E308  6E21               	movwf	which_drawer@backCheck+1,c
  2866  00E30A  0E00               	movlw	0
  2867  00E30C  6E20               	movwf	which_drawer@backCheck,c
  2868  00E30E                     
  2869                           ;standbyMode.c: 784: while(PORTBbits.RB1 == 0){ continue; }
  2870  00E30E  A281               	btfss	3969,1,c	;volatile
  2871  00E310  D7FE               	goto	l386
  2872                           
  2873                           ;standbyMode.c: 785: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2874  00E312  3881               	swapf	3969,w,c	;volatile
  2875  00E314  0B0F               	andlw	15
  2876  00E316  0B0F               	andlw	15
  2877  00E318  6E24               	movwf	which_drawer@keypress,c
  2878  00E31A  B281               	btfsc	3969,1,c	;volatile
  2879  00E31C  D7FE               	goto	l391
  2880                           
  2881                           ;standbyMode.c: 788: if(keypress == 15){
  2882  00E31E  0E0F               	movlw	15
  2883  00E320  1824               	xorwf	which_drawer@keypress,w,c
  2884  00E322  B4D8               	btfsc	status,2,c
  2885  00E324  D0BA               	goto	l394
  2886                           
  2887                           ;standbyMode.c: 791: else if (keypress == 14){
  2888                           
  2889                           ;standbyMode.c: 790: }
  2890                           
  2891                           ;standbyMode.c: 789: break;
  2892  00E326  0E0E               	movlw	14
  2893  00E328  1824               	xorwf	which_drawer@keypress,w,c
  2894  00E32A  A4D8               	btfss	status,2,c
  2895  00E32C  D005               	goto	l396
  2896                           
  2897                           ;standbyMode.c: 792: backCheck = 100;
  2898  00E32E  0E00               	movlw	0
  2899  00E330  6E21               	movwf	which_drawer@backCheck+1,c
  2900  00E332  0E64               	movlw	100
  2901  00E334  6E20               	movwf	which_drawer@backCheck,c
  2902                           
  2903                           ;standbyMode.c: 793: break;
  2904  00E336  D0B1               	goto	l394
  2905  00E338                     l396:
  2906                           
  2907                           ;standbyMode.c: 795: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  2908  00E338  5024               	movf	which_drawer@keypress,w,c
  2909  00E33A  B4D8               	btfsc	status,2,c
  2910  00E33C  D023               	goto	u5080
  2911  00E33E  0424               	decf	which_drawer@keypress,w,c
  2912  00E340  B4D8               	btfsc	status,2,c
  2913  00E342  D020               	goto	u5080
  2914  00E344  0E02               	movlw	2
  2915  00E346  1824               	xorwf	which_drawer@keypress,w,c
  2916  00E348  B4D8               	btfsc	status,2,c
  2917  00E34A  D01C               	goto	u5080
  2918  00E34C  0E04               	movlw	4
  2919  00E34E  1824               	xorwf	which_drawer@keypress,w,c
  2920  00E350  B4D8               	btfsc	status,2,c
  2921  00E352  D018               	goto	u5080
  2922  00E354  0E05               	movlw	5
  2923  00E356  1824               	xorwf	which_drawer@keypress,w,c
  2924  00E358  B4D8               	btfsc	status,2,c
  2925  00E35A  D014               	goto	u5080
  2926  00E35C  0E06               	movlw	6
  2927  00E35E  1824               	xorwf	which_drawer@keypress,w,c
  2928  00E360  B4D8               	btfsc	status,2,c
  2929  00E362  D010               	goto	u5080
  2930  00E364  0E08               	movlw	8
  2931  00E366  1824               	xorwf	which_drawer@keypress,w,c
  2932  00E368  B4D8               	btfsc	status,2,c
  2933  00E36A  D00C               	goto	u5080
  2934  00E36C  0E09               	movlw	9
  2935  00E36E  1824               	xorwf	which_drawer@keypress,w,c
  2936  00E370  B4D8               	btfsc	status,2,c
  2937  00E372  D008               	goto	u5080
  2938  00E374  0E0A               	movlw	10
  2939  00E376  1824               	xorwf	which_drawer@keypress,w,c
  2940  00E378  B4D8               	btfsc	status,2,c
  2941  00E37A  D004               	goto	u5080
  2942  00E37C  0E0D               	movlw	13
  2943  00E37E  1824               	xorwf	which_drawer@keypress,w,c
  2944  00E380  A4D8               	btfss	status,2,c
  2945  00E382  D06A               	goto	l398
  2946  00E384                     u5080:
  2947                           
  2948                           ;standbyMode.c: 796: if (count == 0){
  2949  00E384  5022               	movf	which_drawer@count,w,c
  2950  00E386  1023               	iorwf	which_drawer@count+1,w,c
  2951  00E388  A4D8               	btfss	status,2,c
  2952  00E38A  D046               	goto	l401
  2953                           
  2954                           ;standbyMode.c: 797: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  2955  00E38C  0424               	decf	which_drawer@keypress,w,c
  2956  00E38E  B4D8               	btfsc	status,2,c
  2957  00E390  D01C               	goto	u5170
  2958  00E392  0E02               	movlw	2
  2959  00E394  1824               	xorwf	which_drawer@keypress,w,c
  2960  00E396  B4D8               	btfsc	status,2,c
  2961  00E398  D018               	goto	u5170
  2962  00E39A  0E04               	movlw	4
  2963  00E39C  1824               	xorwf	which_drawer@keypress,w,c
  2964  00E39E  B4D8               	btfsc	status,2,c
  2965  00E3A0  D014               	goto	u5170
  2966  00E3A2  0E05               	movlw	5
  2967  00E3A4  1824               	xorwf	which_drawer@keypress,w,c
  2968  00E3A6  B4D8               	btfsc	status,2,c
  2969  00E3A8  D010               	goto	u5170
  2970  00E3AA  0E06               	movlw	6
  2971  00E3AC  1824               	xorwf	which_drawer@keypress,w,c
  2972  00E3AE  B4D8               	btfsc	status,2,c
  2973  00E3B0  D00C               	goto	u5170
  2974  00E3B2  0E08               	movlw	8
  2975  00E3B4  1824               	xorwf	which_drawer@keypress,w,c
  2976  00E3B6  B4D8               	btfsc	status,2,c
  2977  00E3B8  D008               	goto	u5170
  2978  00E3BA  0E09               	movlw	9
  2979  00E3BC  1824               	xorwf	which_drawer@keypress,w,c
  2980  00E3BE  B4D8               	btfsc	status,2,c
  2981  00E3C0  D004               	goto	u5170
  2982  00E3C2  0E0A               	movlw	10
  2983  00E3C4  1824               	xorwf	which_drawer@keypress,w,c
  2984  00E3C6  A4D8               	btfss	status,2,c
  2985  00E3C8  D011               	goto	l402
  2986  00E3CA                     u5170:
  2987                           
  2988                           ;standbyMode.c: 798: count += 2;
  2989  00E3CA  0E02               	movlw	2
  2990  00E3CC  2622               	addwf	which_drawer@count,f,c
  2991  00E3CE  0E00               	movlw	0
  2992  00E3D0  2223               	addwfc	which_drawer@count+1,f,c
  2993                           
  2994                           ;standbyMode.c: 799: putch(input[keypress]);
  2995  00E3D2  5024               	movf	which_drawer@keypress,w,c
  2996  00E3D4  0D01               	mullw	1
  2997  00E3D6  0EA8               	movlw	low _input
  2998  00E3D8  24F3               	addwf	prodl,w,c
  2999  00E3DA  6EF6               	movwf	tblptrl,c
  3000  00E3DC  0EFD               	movlw	high _input
  3001  00E3DE  20F4               	addwfc	prodh,w,c
  3002  00E3E0  6EF7               	movwf	tblptrh,c
  3003  00E3E2                     	if	0	;There are less than 3 active tblptr bytes
  3004  00E3E2                     	endif
  3005  00E3E2  0008               	tblrd		*
  3006  00E3E4  50F5               	movf	tablat,w,c
  3007  00E3E6  EC0C  F06E         	call	_putch
  3008  00E3EA  D034               	goto	l412
  3009  00E3EC                     l402:
  3010                           
  3011                           ;standbyMode.c: 802: else if (keypress == 0){
  3012  00E3EC  5024               	movf	which_drawer@keypress,w,c
  3013  00E3EE  A4D8               	btfss	status,2,c
  3014  00E3F0  D78E               	goto	l386
  3015                           
  3016                           ;standbyMode.c: 803: putch(input[keypress]);
  3017  00E3F2  5024               	movf	which_drawer@keypress,w,c
  3018  00E3F4  0D01               	mullw	1
  3019  00E3F6  0EA8               	movlw	low _input
  3020  00E3F8  24F3               	addwf	prodl,w,c
  3021  00E3FA  6EF6               	movwf	tblptrl,c
  3022  00E3FC  0EFD               	movlw	high _input
  3023  00E3FE  20F4               	addwfc	prodh,w,c
  3024  00E400  6EF7               	movwf	tblptrh,c
  3025  00E402                     	if	0	;There are less than 3 active tblptr bytes
  3026  00E402                     	endif
  3027  00E402  0008               	tblrd		*
  3028  00E404  50F5               	movf	tablat,w,c
  3029  00E406  EC0C  F06E         	call	_putch
  3030                           
  3031                           ;standbyMode.c: 804: count += 1;
  3032  00E40A  4A22               	infsnz	which_drawer@count,f,c
  3033  00E40C  2A23               	incf	which_drawer@count+1,f,c
  3034  00E40E  D020               	goto	u5220
  3035  00E410                     L2:
  3036  00E410  261E               	addwf	which_drawer@sum,f,c
  3037  00E412  0E00               	movlw	0
  3038  00E414  221F               	addwfc	which_drawer@sum+1,f,c
  3039                           
  3040                           ;standbyMode.c: 806: }
  3041                           ;standbyMode.c: 807: }
  3042  00E416  D77B               	goto	l386
  3043  00E418                     l401:
  3044                           
  3045                           ;standbyMode.c: 808: else if (count == 1){
  3046  00E418  0422               	decf	which_drawer@count,w,c
  3047  00E41A  1023               	iorwf	which_drawer@count+1,w,c
  3048  00E41C  A4D8               	btfss	status,2,c
  3049  00E41E  D777               	goto	l386
  3050                           
  3051                           ;standbyMode.c: 809: if (keypress < 8 || keypress == 13){
  3052  00E420  0E07               	movlw	7
  3053  00E422  6424               	cpfsgt	which_drawer@keypress,c
  3054  00E424  D004               	goto	u5210
  3055  00E426  0E0D               	movlw	13
  3056  00E428  1824               	xorwf	which_drawer@keypress,w,c
  3057  00E42A  A4D8               	btfss	status,2,c
  3058  00E42C  D770               	goto	l386
  3059  00E42E                     u5210:
  3060                           
  3061                           ;standbyMode.c: 810: putch(input[keypress]);
  3062  00E42E  5024               	movf	which_drawer@keypress,w,c
  3063  00E430  0D01               	mullw	1
  3064  00E432  0EA8               	movlw	low _input
  3065  00E434  24F3               	addwf	prodl,w,c
  3066  00E436  6EF6               	movwf	tblptrl,c
  3067  00E438  0EFD               	movlw	high _input
  3068  00E43A  20F4               	addwfc	prodh,w,c
  3069  00E43C  6EF7               	movwf	tblptrh,c
  3070  00E43E                     	if	0	;There are less than 3 active tblptr bytes
  3071  00E43E                     	endif
  3072  00E43E  0008               	tblrd		*
  3073  00E440  50F5               	movf	tablat,w,c
  3074  00E442  EC0C  F06E         	call	_putch
  3075                           
  3076                           ;standbyMode.c: 811: count += 1;
  3077  00E446  4A22               	infsnz	which_drawer@count,f,c
  3078  00E448  2A23               	incf	which_drawer@count+1,f,c
  3079                           
  3080                           ;standbyMode.c: 812: if(keypress == 0){
  3081  00E44A  5024               	movf	which_drawer@keypress,w,c
  3082  00E44C  A4D8               	btfss	status,2,c
  3083  00E44E  D002               	goto	l412
  3084  00E450                     u5220:
  3085                           
  3086                           ;standbyMode.c: 813: sum += 20;
  3087  00E450  0E14               	movlw	20
  3088  00E452  D7DE               	goto	L2
  3089  00E454                     l412:
  3090                           
  3091                           ;standbyMode.c: 815: else {
  3092                           ;standbyMode.c: 816: sum += keypress;
  3093  00E454  5024               	movf	which_drawer@keypress,w,c
  3094  00E456  D7DC               	goto	L2
  3095  00E458                     l398:
  3096                           
  3097                           ;standbyMode.c: 821: else if (keypress == 12){
  3098  00E458  0E0C               	movlw	12
  3099  00E45A  1824               	xorwf	which_drawer@keypress,w,c
  3100  00E45C  A4D8               	btfss	status,2,c
  3101  00E45E  D757               	goto	l386
  3102                           
  3103                           ;standbyMode.c: 822: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3104  00E460  0E01               	movlw	1
  3105  00E462  EC02  F06E         	call	_lcdInst
  3106  00E466  0EC3               	movlw	195
  3107  00E468  6E1B               	movwf	??_which_drawer& (0+255),c
  3108  00E46A  0ECD               	movlw	205
  3109  00E46C                     u5927:
  3110  00E46C  2EE8               	decfsz	wreg,f,c
  3111  00E46E  D7FE               	bra	u5927
  3112  00E470  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  3113  00E472  D7FC               	bra	u5927
  3114  00E474  F000               	nop	
  3115                           
  3116                           ;standbyMode.c: 823: printf("Drawer number:");
  3117  00E476  0E0D               	movlw	low STR_27
  3118  00E478  6E0D               	movwf	printf@f,c
  3119  00E47A  0EFF               	movlw	high STR_27
  3120  00E47C  6E0E               	movwf	printf@f+1,c
  3121  00E47E  ECDB  F06F         	call	_printf	;wreg free
  3122                           
  3123                           ;standbyMode.c: 824: lcdInst(0xC0);;
  3124  00E482  0EC0               	movlw	192
  3125  00E484  EC02  F06E         	call	_lcdInst
  3126                           
  3127                           ;standbyMode.c: 825: count = 0;
  3128  00E488  0E00               	movlw	0
  3129  00E48A  6E23               	movwf	which_drawer@count+1,c
  3130  00E48C  0E00               	movlw	0
  3131  00E48E  6E22               	movwf	which_drawer@count,c
  3132                           
  3133                           ;standbyMode.c: 826: sum = 0;
  3134  00E490  0E00               	movlw	0
  3135  00E492  6E1F               	movwf	which_drawer@sum+1,c
  3136  00E494  0E00               	movlw	0
  3137  00E496  6E1E               	movwf	which_drawer@sum,c
  3138  00E498  D73A               	goto	l386
  3139  00E49A                     l394:
  3140                           
  3141                           ;standbyMode.c: 827: }
  3142                           ;standbyMode.c: 828: }
  3143                           ;standbyMode.c: 830: if (backCheck == 100){
  3144  00E49A  0E64               	movlw	100
  3145  00E49C  1820               	xorwf	which_drawer@backCheck,w,c
  3146  00E49E  1021               	iorwf	which_drawer@backCheck+1,w,c
  3147  00E4A0  A4D8               	btfss	status,2,c
  3148  00E4A2  D005               	goto	l417
  3149                           
  3150                           ;standbyMode.c: 831: return backCheck;
  3151  00E4A4  C020  F019         	movff	which_drawer@backCheck,?_which_drawer
  3152  00E4A8  C021  F01A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  3153                           
  3154                           ;standbyMode.c: 832: }
  3155  00E4AC  0012               	return	
  3156  00E4AE                     l417:
  3157                           
  3158                           ;standbyMode.c: 833: else{
  3159                           ;standbyMode.c: 834: unsigned int rand = decode_drawer(sum);
  3160  00E4AE  C01E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3161  00E4B2  C01F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3162  00E4B6  EC6A  F06F         	call	_decode_drawer	;wreg free
  3163  00E4BA  C001  F01C         	movff	?_decode_drawer,which_drawer@rand
  3164  00E4BE  C002  F01D         	movff	?_decode_drawer+1,which_drawer@rand+1
  3165                           
  3166                           ;standbyMode.c: 835: return rand;
  3167  00E4C2  C01C  F019         	movff	which_drawer@rand,?_which_drawer
  3168  00E4C6  C01D  F01A         	movff	which_drawer@rand+1,?_which_drawer+1
  3169  00E4CA  0012               	return	
  3170  00E4CC                     __end_of_which_drawer:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           intcon	equ	0xFF2
  3179                           postinc0	equ	0xFEE
  3180                           wreg	equ	0xFE8
  3181                           postinc2	equ	0xFDE
  3182                           postdec2	equ	0xFDD
  3183                           fsr2h	equ	0xFDA
  3184                           fsr2l	equ	0xFD9
  3185                           status	equ	0xFD8
  3186                           
  3187 ;; *************** function _decode_drawer *****************
  3188 ;; Defined at:
  3189 ;;		line 695 in file "standbyMode.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;  drawer          2    0[COMRAM] unsigned int 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  returnValue     2    4[COMRAM] unsigned int 
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  2    0[COMRAM] unsigned int 
  3196 ;; Registers used:
  3197 ;;		wreg, status,2, status,0
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;Total ram usage:        6 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_which_drawer
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text4
  3217  00DED4                     __ptext4:
  3218                           	opt stack 0
  3219  00DED4                     _decode_drawer:
  3220                           	opt stack 28
  3221                           
  3222                           ;standbyMode.c: 696: unsigned int returnValue;
  3223                           ;standbyMode.c: 698: switch(drawer){
  3224                           
  3225                           ;incstack = 0
  3226  00DED4  D03A               	goto	l367
  3227  00DED6                     
  3228                           ;standbyMode.c: 701: returnValue = 1;
  3229  00DED6  0E00               	movlw	0
  3230  00DED8  6E06               	movwf	decode_drawer@returnValue+1,c
  3231  00DEDA  0E01               	movlw	1
  3232  00DEDC  D02F               	goto	L14
  3233  00DEDE                     
  3234                           ;standbyMode.c: 706: returnValue = 2;
  3235  00DEDE  0E00               	movlw	0
  3236  00DEE0  6E06               	movwf	decode_drawer@returnValue+1,c
  3237  00DEE2  0E02               	movlw	2
  3238  00DEE4  D02B               	goto	L14
  3239  00DEE6                     
  3240                           ;standbyMode.c: 711: returnValue = 3;
  3241  00DEE6  0E00               	movlw	0
  3242  00DEE8  6E06               	movwf	decode_drawer@returnValue+1,c
  3243  00DEEA  0E03               	movlw	3
  3244  00DEEC  D027               	goto	L14
  3245  00DEEE                     
  3246                           ;standbyMode.c: 716: returnValue = 7;
  3247  00DEEE  0E00               	movlw	0
  3248  00DEF0  6E06               	movwf	decode_drawer@returnValue+1,c
  3249  00DEF2  0E07               	movlw	7
  3250  00DEF4  D023               	goto	L14
  3251  00DEF6                     
  3252                           ;standbyMode.c: 721: returnValue = 8;
  3253  00DEF6  0E00               	movlw	0
  3254  00DEF8  6E06               	movwf	decode_drawer@returnValue+1,c
  3255  00DEFA  0E08               	movlw	8
  3256  00DEFC  D01F               	goto	L14
  3257  00DEFE                     
  3258                           ;standbyMode.c: 726: returnValue = 9;
  3259  00DEFE  0E00               	movlw	0
  3260  00DF00  6E06               	movwf	decode_drawer@returnValue+1,c
  3261  00DF02  0E09               	movlw	9
  3262  00DF04  D01B               	goto	L14
  3263  00DF06                     
  3264                           ;standbyMode.c: 731: returnValue = 10;
  3265  00DF06  0E00               	movlw	0
  3266  00DF08  6E06               	movwf	decode_drawer@returnValue+1,c
  3267  00DF0A  0E0A               	movlw	10
  3268  00DF0C  D017               	goto	L14
  3269  00DF0E                     
  3270                           ;standbyMode.c: 736: returnValue = 11;
  3271  00DF0E  0E00               	movlw	0
  3272  00DF10  6E06               	movwf	decode_drawer@returnValue+1,c
  3273  00DF12  0E0B               	movlw	11
  3274  00DF14  D013               	goto	L14
  3275  00DF16                     
  3276                           ;standbyMode.c: 741: returnValue = 12;
  3277  00DF16  0E00               	movlw	0
  3278  00DF18  6E06               	movwf	decode_drawer@returnValue+1,c
  3279  00DF1A  0E0C               	movlw	12
  3280  00DF1C  D00F               	goto	L14
  3281  00DF1E                     
  3282                           ;standbyMode.c: 746: returnValue = 13;
  3283  00DF1E  0E00               	movlw	0
  3284  00DF20  6E06               	movwf	decode_drawer@returnValue+1,c
  3285  00DF22  0E0D               	movlw	13
  3286  00DF24  D00B               	goto	L14
  3287  00DF26                     
  3288                           ;standbyMode.c: 751: returnValue = 14;
  3289  00DF26  0E00               	movlw	0
  3290  00DF28  6E06               	movwf	decode_drawer@returnValue+1,c
  3291  00DF2A  0E0E               	movlw	14
  3292  00DF2C  D007               	goto	L14
  3293  00DF2E                     
  3294                           ;standbyMode.c: 756: returnValue = 15;
  3295  00DF2E  0E00               	movlw	0
  3296  00DF30  6E06               	movwf	decode_drawer@returnValue+1,c
  3297  00DF32  0E0F               	movlw	15
  3298  00DF34  D003               	goto	L14
  3299  00DF36                     
  3300                           ;standbyMode.c: 761: returnValue = 16;
  3301  00DF36  0E00               	movlw	0
  3302  00DF38  6E06               	movwf	decode_drawer@returnValue+1,c
  3303  00DF3A  0E10               	movlw	16
  3304  00DF3C                     L14:
  3305  00DF3C  6E05               	movwf	decode_drawer@returnValue,c
  3306                           
  3307                           ;standbyMode.c: 762: break;
  3308  00DF3E  D036               	goto	l369
  3309  00DF40                     l382:
  3310                           
  3311                           ;standbyMode.c: 765: returnValue = drawer;
  3312  00DF40  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3313  00DF44  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3314                           
  3315                           ;standbyMode.c: 767: }
  3316                           
  3317                           ;standbyMode.c: 766: break;
  3318  00DF48  D031               	goto	l369
  3319  00DF4A                     l367:
  3320  00DF4A  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3321  00DF4E  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3322                           
  3323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3324                           ; Switch size 1, requested type "space"
  3325                           ; Number of cases is 1, Range of values is 0 to 0
  3326                           ; switch strategies available:
  3327                           ; Name         Instructions Cycles
  3328                           ; simple_byte            4     3 (average)
  3329                           ;	Chosen strategy is simple_byte
  3330  00DF52  5004               	movf	??_decode_drawer+1,w,c
  3331  00DF54  0A00               	xorlw	0	; case 0
  3332  00DF56  A4D8               	btfss	status,2,c
  3333  00DF58  D7F3               	goto	l382
  3334                           
  3335                           ; Switch size 1, requested type "space"
  3336                           ; Number of cases is 13, Range of values is 1 to 40
  3337                           ; switch strategies available:
  3338                           ; Name         Instructions Cycles
  3339                           ; simple_byte           40    21 (average)
  3340                           ;	Chosen strategy is simple_byte
  3341  00DF5A  5003               	movf	??_decode_drawer,w,c
  3342  00DF5C  0A01               	xorlw	1	; case 1
  3343  00DF5E  B4D8               	btfsc	status,2,c
  3344  00DF60  D7BE               	goto	l370
  3345  00DF62  0A03               	xorlw	3	; case 2
  3346  00DF64  B4D8               	btfsc	status,2,c
  3347  00DF66  D7BF               	goto	l371
  3348  00DF68  0A0A               	xorlw	10	; case 8
  3349  00DF6A  B4D8               	btfsc	status,2,c
  3350  00DF6C  D7C0               	goto	l372
  3351  00DF6E  0A01               	xorlw	1	; case 9
  3352  00DF70  B4D8               	btfsc	status,2,c
  3353  00DF72  D7C1               	goto	l373
  3354  00DF74  0A03               	xorlw	3	; case 10
  3355  00DF76  B4D8               	btfsc	status,2,c
  3356  00DF78  D7C2               	goto	l374
  3357  00DF7A  0A1E               	xorlw	30	; case 20
  3358  00DF7C  B4D8               	btfsc	status,2,c
  3359  00DF7E  D7AB               	goto	l368
  3360  00DF80  0A01               	xorlw	1	; case 21
  3361  00DF82  B4D8               	btfsc	status,2,c
  3362  00DF84  D7C8               	goto	l377
  3363  00DF86  0A03               	xorlw	3	; case 22
  3364  00DF88  B4D8               	btfsc	status,2,c
  3365  00DF8A  D7C9               	goto	l378
  3366  00DF8C  0A0E               	xorlw	14	; case 24
  3367  00DF8E  B4D8               	btfsc	status,2,c
  3368  00DF90  D7CA               	goto	l379
  3369  00DF92  0A01               	xorlw	1	; case 25
  3370  00DF94  B4D8               	btfsc	status,2,c
  3371  00DF96  D7CB               	goto	l380
  3372  00DF98  0A03               	xorlw	3	; case 26
  3373  00DF9A  B4D8               	btfsc	status,2,c
  3374  00DF9C  D7CC               	goto	l381
  3375  00DF9E  0A3B               	xorlw	59	; case 33
  3376  00DFA0  B4D8               	btfsc	status,2,c
  3377  00DFA2  D7B1               	goto	l375
  3378  00DFA4  0A09               	xorlw	9	; case 40
  3379  00DFA6  B4D8               	btfsc	status,2,c
  3380  00DFA8  D7B2               	goto	l376
  3381  00DFAA  D7CA               	goto	l382
  3382  00DFAC                     l369:
  3383                           
  3384                           ;standbyMode.c: 768: return returnValue;
  3385  00DFAC  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3386  00DFB0  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3387  00DFB4  0012               	return		;funcret
  3388  00DFB6                     __end_of_decode_drawer:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           prodh	equ	0xFF4
  3395                           prodl	equ	0xFF3
  3396                           intcon	equ	0xFF2
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postinc2	equ	0xFDE
  3400                           postdec2	equ	0xFDD
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _viewLogs *****************
  3406 ;; Defined at:
  3407 ;;		line 272 in file "standbyMode.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  keypress2       1   29[COMRAM] unsigned char 
  3412 ;;  keypress3       1   28[COMRAM] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  2   24[COMRAM] unsigned int 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:        6 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    3
  3429 ;; This function calls:
  3430 ;;		_lcdInst
  3431 ;;		_printf
  3432 ;;		_putch
  3433 ;; This function is called by:
  3434 ;;		_standbyMode
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text5
  3439  00E4CC                     __ptext5:
  3440                           	opt stack 0
  3441  00E4CC                     _viewLogs:
  3442                           	opt stack 26
  3443                           
  3444                           ;standbyMode.c: 273: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3445                           
  3446                           ;incstack = 0
  3447  00E4CC  0E01               	movlw	1
  3448  00E4CE  EC02  F06E         	call	_lcdInst
  3449  00E4D2  0EC3               	movlw	195
  3450  00E4D4  6E1B               	movwf	??_viewLogs& (0+255),c
  3451  00E4D6  0ECD               	movlw	205
  3452  00E4D8                     u5937:
  3453  00E4D8  2EE8               	decfsz	wreg,f,c
  3454  00E4DA  D7FE               	bra	u5937
  3455  00E4DC  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3456  00E4DE  D7FC               	bra	u5937
  3457  00E4E0  F000               	nop	
  3458                           
  3459                           ;standbyMode.c: 274: printf("5 previous logs");
  3460  00E4E2  0EDF               	movlw	low STR_1
  3461  00E4E4  6E0D               	movwf	printf@f,c
  3462  00E4E6  0EFE               	movlw	high STR_1
  3463  00E4E8  6E0E               	movwf	printf@f+1,c
  3464  00E4EA  ECDB  F06F         	call	_printf	;wreg free
  3465                           
  3466                           ;standbyMode.c: 275: lcdInst(0xC0);;
  3467  00E4EE  0EC0               	movlw	192
  3468  00E4F0  EC02  F06E         	call	_lcdInst
  3469                           
  3470                           ;standbyMode.c: 276: printf("available.");
  3471  00E4F4  0E94               	movlw	low STR_2
  3472  00E4F6  6E0D               	movwf	printf@f,c
  3473  00E4F8  0EFF               	movlw	high STR_2
  3474  00E4FA  6E0E               	movwf	printf@f+1,c
  3475  00E4FC  ECDB  F06F         	call	_printf	;wreg free
  3476                           
  3477                           ;standbyMode.c: 277: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3478  00E500  0E66               	movlw	102
  3479  00E502  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3480  00E504  0E76               	movlw	118
  3481  00E506  6E1B               	movwf	??_viewLogs& (0+255),c
  3482  00E508  0EC1               	movlw	193
  3483  00E50A                     u5947:
  3484  00E50A  2EE8               	decfsz	wreg,f,c
  3485  00E50C  D7FE               	bra	u5947
  3486  00E50E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3487  00E510  D7FC               	bra	u5947
  3488  00E512  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3489  00E514  D7FA               	bra	u5947
  3490  00E516  F000               	nop	
  3491                           
  3492                           ;standbyMode.c: 278: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3493  00E518  0E01               	movlw	1
  3494  00E51A  EC02  F06E         	call	_lcdInst
  3495  00E51E  0EC3               	movlw	195
  3496  00E520  6E1B               	movwf	??_viewLogs& (0+255),c
  3497  00E522  0ECD               	movlw	205
  3498  00E524                     u5957:
  3499  00E524  2EE8               	decfsz	wreg,f,c
  3500  00E526  D7FE               	bra	u5957
  3501  00E528  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3502  00E52A  D7FC               	bra	u5957
  3503  00E52C  F000               	nop	
  3504                           
  3505                           ;standbyMode.c: 279: printf("Please input log");
  3506  00E52E  0EFD               	movlw	low STR_3
  3507  00E530  6E0D               	movwf	printf@f,c
  3508  00E532  0EFD               	movlw	high STR_3
  3509  00E534  6E0E               	movwf	printf@f+1,c
  3510  00E536  ECDB  F06F         	call	_printf	;wreg free
  3511                           
  3512                           ;standbyMode.c: 280: lcdInst(0xC0);;
  3513  00E53A  0EC0               	movlw	192
  3514  00E53C  EC02  F06E         	call	_lcdInst
  3515                           
  3516                           ;standbyMode.c: 281: printf("number: ");
  3517  00E540  0ECA               	movlw	low STR_4
  3518  00E542  6E0D               	movwf	printf@f,c
  3519  00E544  0EFF               	movlw	high STR_4
  3520  00E546  6E0E               	movwf	printf@f+1,c
  3521  00E548  ECDB  F06F         	call	_printf	;wreg free
  3522  00E54C                     
  3523                           ;standbyMode.c: 284: while(PORTBbits.RB1 == 0){ continue; }
  3524  00E54C  A281               	btfss	3969,1,c	;volatile
  3525  00E54E  D7FE               	goto	l213
  3526                           
  3527                           ;standbyMode.c: 285: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3528  00E550  3881               	swapf	3969,w,c	;volatile
  3529  00E552  0B0F               	andlw	15
  3530  00E554  0B0F               	andlw	15
  3531  00E556  6E1E               	movwf	viewLogs@keypress2,c
  3532  00E558  B281               	btfsc	3969,1,c	;volatile
  3533  00E55A  D7FE               	goto	l218
  3534                           
  3535                           ;standbyMode.c: 288: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4 || keypress2 == 5){
  3536  00E55C  501E               	movf	viewLogs@keypress2,w,c
  3537  00E55E  B4D8               	btfsc	status,2,c
  3538  00E560  D00F               	goto	u3920
  3539  00E562  041E               	decf	viewLogs@keypress2,w,c
  3540  00E564  B4D8               	btfsc	status,2,c
  3541  00E566  D00C               	goto	u3920
  3542  00E568  0E02               	movlw	2
  3543  00E56A  181E               	xorwf	viewLogs@keypress2,w,c
  3544  00E56C  B4D8               	btfsc	status,2,c
  3545  00E56E  D008               	goto	u3920
  3546  00E570  0E04               	movlw	4
  3547  00E572  181E               	xorwf	viewLogs@keypress2,w,c
  3548  00E574  B4D8               	btfsc	status,2,c
  3549  00E576  D004               	goto	u3920
  3550  00E578  0E05               	movlw	5
  3551  00E57A  181E               	xorwf	viewLogs@keypress2,w,c
  3552  00E57C  A4D8               	btfss	status,2,c
  3553  00E57E  D7E6               	goto	l213
  3554  00E580                     u3920:
  3555                           
  3556                           ;standbyMode.c: 289: putch(keys[keypress2]);
  3557  00E580  501E               	movf	viewLogs@keypress2,w,c
  3558  00E582  0D01               	mullw	1
  3559  00E584  0E97               	movlw	low _keys
  3560  00E586  24F3               	addwf	prodl,w,c
  3561  00E588  6EF6               	movwf	tblptrl,c
  3562  00E58A  0EFD               	movlw	high _keys
  3563  00E58C  20F4               	addwfc	prodh,w,c
  3564  00E58E  6EF7               	movwf	tblptrh,c
  3565  00E590                     	if	0	;There are less than 3 active tblptr bytes
  3566  00E590                     	endif
  3567  00E590  0008               	tblrd		*
  3568  00E592  50F5               	movf	tablat,w,c
  3569  00E594  EC0C  F06E         	call	_putch
  3570                           
  3571                           ;standbyMode.c: 290: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3572  00E598  0E33               	movlw	51
  3573  00E59A  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3574  00E59C  0EBB               	movlw	187
  3575  00E59E  6E1B               	movwf	??_viewLogs& (0+255),c
  3576  00E5A0  0EE0               	movlw	224
  3577  00E5A2                     u5967:
  3578  00E5A2  2EE8               	decfsz	wreg,f,c
  3579  00E5A4  D7FE               	bra	u5967
  3580  00E5A6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3581  00E5A8  D7FC               	bra	u5967
  3582  00E5AA  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3583  00E5AC  D7FA               	bra	u5967
  3584                           
  3585                           ;standbyMode.c: 292: }
  3586                           ;standbyMode.c: 293: }
  3587                           ;standbyMode.c: 295: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3588                           
  3589                           ;standbyMode.c: 291: break;
  3590  00E5AE  0E01               	movlw	1
  3591  00E5B0  EC02  F06E         	call	_lcdInst
  3592  00E5B4  0EC3               	movlw	195
  3593  00E5B6  6E1B               	movwf	??_viewLogs& (0+255),c
  3594  00E5B8  0ECD               	movlw	205
  3595  00E5BA                     u5977:
  3596  00E5BA  2EE8               	decfsz	wreg,f,c
  3597  00E5BC  D7FE               	bra	u5977
  3598  00E5BE  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3599  00E5C0  D7FC               	bra	u5977
  3600  00E5C2  F000               	nop	
  3601                           
  3602                           ;standbyMode.c: 296: printf("Great!");
  3603  00E5C4  0EEC               	movlw	low STR_5
  3604  00E5C6  6E0D               	movwf	printf@f,c
  3605  00E5C8  0EFF               	movlw	high STR_5
  3606  00E5CA  6E0E               	movwf	printf@f+1,c
  3607  00E5CC  ECDB  F06F         	call	_printf	;wreg free
  3608                           
  3609                           ;standbyMode.c: 297: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3610  00E5D0  0E33               	movlw	51
  3611  00E5D2  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3612  00E5D4  0EBB               	movlw	187
  3613  00E5D6  6E1B               	movwf	??_viewLogs& (0+255),c
  3614  00E5D8  0EE0               	movlw	224
  3615  00E5DA                     u5987:
  3616  00E5DA  2EE8               	decfsz	wreg,f,c
  3617  00E5DC  D7FE               	bra	u5987
  3618  00E5DE  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3619  00E5E0  D7FC               	bra	u5987
  3620  00E5E2  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3621  00E5E4  D7FA               	bra	u5987
  3622                           
  3623                           ;standbyMode.c: 298: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3624  00E5E6  0E01               	movlw	1
  3625  00E5E8  EC02  F06E         	call	_lcdInst
  3626  00E5EC  0EC3               	movlw	195
  3627  00E5EE  6E1B               	movwf	??_viewLogs& (0+255),c
  3628  00E5F0  0ECD               	movlw	205
  3629  00E5F2                     u5997:
  3630  00E5F2  2EE8               	decfsz	wreg,f,c
  3631  00E5F4  D7FE               	bra	u5997
  3632  00E5F6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3633  00E5F8  D7FC               	bra	u5997
  3634  00E5FA  F000               	nop	
  3635                           
  3636                           ;standbyMode.c: 299: printf("Press any key to");
  3637  00E5FC  0E0E               	movlw	low STR_6
  3638  00E5FE  6E0D               	movwf	printf@f,c
  3639  00E600  0EFE               	movlw	high STR_6
  3640  00E602  6E0E               	movwf	printf@f+1,c
  3641  00E604  ECDB  F06F         	call	_printf	;wreg free
  3642                           
  3643                           ;standbyMode.c: 300: lcdInst(0xC0);;
  3644  00E608  0EC0               	movlw	192
  3645  00E60A  EC02  F06E         	call	_lcdInst
  3646                           
  3647                           ;standbyMode.c: 301: printf("move on.");
  3648  00E60E  0ED3               	movlw	low STR_7
  3649  00E610  6E0D               	movwf	printf@f,c
  3650  00E612  0EFF               	movlw	high STR_7
  3651  00E614  6E0E               	movwf	printf@f+1,c
  3652  00E616  ECDB  F06F         	call	_printf	;wreg free
  3653                           
  3654                           ;standbyMode.c: 302: _delay((unsigned long)((500)*(40000000/4000.0)));
  3655  00E61A  0E1A               	movlw	26
  3656  00E61C  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3657  00E61E  0E5E               	movlw	94
  3658  00E620  6E1B               	movwf	??_viewLogs& (0+255),c
  3659  00E622  0E6E               	movlw	110
  3660  00E624                     u6007:
  3661  00E624  2EE8               	decfsz	wreg,f,c
  3662  00E626  D7FE               	bra	u6007
  3663  00E628  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3664  00E62A  D7FC               	bra	u6007
  3665  00E62C  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3666  00E62E  D7FA               	bra	u6007
  3667  00E630  D000               	nop2	
  3668  00E632                     
  3669                           ;standbyMode.c: 305: continue;
  3670  00E632  A281               	btfss	3969,1,c	;volatile
  3671  00E634  D7FE               	goto	l226
  3672                           
  3673                           ;standbyMode.c: 306: }
  3674                           ;standbyMode.c: 308: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3675  00E636  0E01               	movlw	1
  3676  00E638  EC02  F06E         	call	_lcdInst
  3677  00E63C  0EC3               	movlw	195
  3678  00E63E  6E1B               	movwf	??_viewLogs& (0+255),c
  3679  00E640  0ECD               	movlw	205
  3680  00E642                     u6017:
  3681  00E642  2EE8               	decfsz	wreg,f,c
  3682  00E644  D7FE               	bra	u6017
  3683  00E646  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3684  00E648  D7FC               	bra	u6017
  3685  00E64A  F000               	nop	
  3686                           
  3687                           ;standbyMode.c: 309: printf("Operation time:");
  3688  00E64C  0E5F               	movlw	low STR_8
  3689  00E64E  6E0D               	movwf	printf@f,c
  3690  00E650  0EFE               	movlw	high STR_8
  3691  00E652  6E0E               	movwf	printf@f+1,c
  3692  00E654  ECDB  F06F         	call	_printf	;wreg free
  3693                           
  3694                           ;standbyMode.c: 310: lcdInst(0xC0);;
  3695  00E658  0EC0               	movlw	192
  3696  00E65A  EC02  F06E         	call	_lcdInst
  3697                           
  3698                           ;standbyMode.c: 311: printf("2:39");
  3699  00E65E  0EF9               	movlw	low STR_9
  3700  00E660  6E0D               	movwf	printf@f,c
  3701  00E662  0EFF               	movlw	high STR_9
  3702  00E664  6E0E               	movwf	printf@f+1,c
  3703  00E666  ECDB  F06F         	call	_printf	;wreg free
  3704                           
  3705                           ;standbyMode.c: 312: _delay((unsigned long)((500)*(40000000/4000.0)));
  3706  00E66A  0E1A               	movlw	26
  3707  00E66C  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3708  00E66E  0E5E               	movlw	94
  3709  00E670  6E1B               	movwf	??_viewLogs& (0+255),c
  3710  00E672  0E6E               	movlw	110
  3711  00E674                     u6027:
  3712  00E674  2EE8               	decfsz	wreg,f,c
  3713  00E676  D7FE               	bra	u6027
  3714  00E678  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3715  00E67A  D7FC               	bra	u6027
  3716  00E67C  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3717  00E67E  D7FA               	bra	u6027
  3718  00E680  D000               	nop2	
  3719  00E682                     
  3720                           ;standbyMode.c: 315: continue;
  3721  00E682  A281               	btfss	3969,1,c	;volatile
  3722  00E684  D7FE               	goto	l229
  3723                           
  3724                           ;standbyMode.c: 316: }
  3725                           ;standbyMode.c: 318: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3726  00E686  0E01               	movlw	1
  3727  00E688  EC02  F06E         	call	_lcdInst
  3728  00E68C  0EC3               	movlw	195
  3729  00E68E  6E1B               	movwf	??_viewLogs& (0+255),c
  3730  00E690  0ECD               	movlw	205
  3731  00E692                     u6037:
  3732  00E692  2EE8               	decfsz	wreg,f,c
  3733  00E694  D7FE               	bra	u6037
  3734  00E696  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3735  00E698  D7FC               	bra	u6037
  3736  00E69A  F000               	nop	
  3737                           
  3738                           ;standbyMode.c: 319: printf("Marked drawers:");
  3739  00E69C  0E6F               	movlw	low STR_10
  3740  00E69E  6E0D               	movwf	printf@f,c
  3741  00E6A0  0EFE               	movlw	high STR_10
  3742  00E6A2  6E0E               	movwf	printf@f+1,c
  3743  00E6A4  ECDB  F06F         	call	_printf	;wreg free
  3744                           
  3745                           ;standbyMode.c: 320: lcdInst(0xC0);;
  3746  00E6A8  0EC0               	movlw	192
  3747  00E6AA  EC02  F06E         	call	_lcdInst
  3748                           
  3749                           ;standbyMode.c: 321: printf("1, 13");
  3750  00E6AE  0EF3               	movlw	low STR_11
  3751  00E6B0  6E0D               	movwf	printf@f,c
  3752  00E6B2  0EFF               	movlw	high STR_11
  3753  00E6B4  6E0E               	movwf	printf@f+1,c
  3754  00E6B6  ECDB  F06F         	call	_printf	;wreg free
  3755                           
  3756                           ;standbyMode.c: 322: _delay((unsigned long)((500)*(40000000/4000.0)));
  3757  00E6BA  0E1A               	movlw	26
  3758  00E6BC  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3759  00E6BE  0E5E               	movlw	94
  3760  00E6C0  6E1B               	movwf	??_viewLogs& (0+255),c
  3761  00E6C2  0E6E               	movlw	110
  3762  00E6C4                     u6047:
  3763  00E6C4  2EE8               	decfsz	wreg,f,c
  3764  00E6C6  D7FE               	bra	u6047
  3765  00E6C8  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3766  00E6CA  D7FC               	bra	u6047
  3767  00E6CC  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3768  00E6CE  D7FA               	bra	u6047
  3769  00E6D0  D000               	nop2	
  3770  00E6D2                     
  3771                           ;standbyMode.c: 325: continue;
  3772  00E6D2  A281               	btfss	3969,1,c	;volatile
  3773  00E6D4  D7FE               	goto	l232
  3774                           
  3775                           ;standbyMode.c: 326: }
  3776                           ;standbyMode.c: 328: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3777  00E6D6  0E01               	movlw	1
  3778  00E6D8  EC02  F06E         	call	_lcdInst
  3779  00E6DC  0EC3               	movlw	195
  3780  00E6DE  6E1B               	movwf	??_viewLogs& (0+255),c
  3781  00E6E0  0ECD               	movlw	205
  3782  00E6E2                     u6057:
  3783  00E6E2  2EE8               	decfsz	wreg,f,c
  3784  00E6E4  D7FE               	bra	u6057
  3785  00E6E6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3786  00E6E8  D7FC               	bra	u6057
  3787  00E6EA  F000               	nop	
  3788                           
  3789                           ;standbyMode.c: 329: printf("Remaining pieces:");
  3790  00E6EC  0EC9               	movlw	low STR_12
  3791  00E6EE  6E0D               	movwf	printf@f,c
  3792  00E6F0  0EFD               	movlw	high STR_12
  3793  00E6F2  6E0E               	movwf	printf@f+1,c
  3794  00E6F4  ECDB  F06F         	call	_printf	;wreg free
  3795                           
  3796                           ;standbyMode.c: 330: lcdInst(0xC0);;
  3797  00E6F8  0EC0               	movlw	192
  3798  00E6FA  EC02  F06E         	call	_lcdInst
  3799                           
  3800                           ;standbyMode.c: 331: printf("R:3  F:12  L:10");
  3801  00E6FE  0E3F               	movlw	low STR_13
  3802  00E700  6E0D               	movwf	printf@f,c
  3803  00E702  0EFE               	movlw	high STR_13
  3804  00E704  6E0E               	movwf	printf@f+1,c
  3805  00E706  ECDB  F06F         	call	_printf	;wreg free
  3806                           
  3807                           ;standbyMode.c: 332: _delay((unsigned long)((500)*(40000000/4000.0)));
  3808  00E70A  0E1A               	movlw	26
  3809  00E70C  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3810  00E70E  0E5E               	movlw	94
  3811  00E710  6E1B               	movwf	??_viewLogs& (0+255),c
  3812  00E712  0E6E               	movlw	110
  3813  00E714                     u6067:
  3814  00E714  2EE8               	decfsz	wreg,f,c
  3815  00E716  D7FE               	bra	u6067
  3816  00E718  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3817  00E71A  D7FC               	bra	u6067
  3818  00E71C  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3819  00E71E  D7FA               	bra	u6067
  3820  00E720  D000               	nop2	
  3821  00E722                     
  3822                           ;standbyMode.c: 335: continue;
  3823  00E722  A281               	btfss	3969,1,c	;volatile
  3824  00E724  D7FE               	goto	l235
  3825                           
  3826                           ;standbyMode.c: 336: }
  3827                           ;standbyMode.c: 338: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3828  00E726  0E01               	movlw	1
  3829  00E728  EC02  F06E         	call	_lcdInst
  3830  00E72C  0EC3               	movlw	195
  3831  00E72E  6E1B               	movwf	??_viewLogs& (0+255),c
  3832  00E730  0ECD               	movlw	205
  3833  00E732                     u6077:
  3834  00E732  2EE8               	decfsz	wreg,f,c
  3835  00E734  D7FE               	bra	u6077
  3836  00E736  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3837  00E738  D7FC               	bra	u6077
  3838  00E73A  F000               	nop	
  3839                           
  3840                           ;standbyMode.c: 339: printf("Drawer Summary:");
  3841  00E73C  0E8F               	movlw	low STR_14
  3842  00E73E  6E0D               	movwf	printf@f,c
  3843  00E740  0EFE               	movlw	high STR_14
  3844  00E742  6E0E               	movwf	printf@f+1,c
  3845  00E744  ECDB  F06F         	call	_printf	;wreg free
  3846                           
  3847                           ;standbyMode.c: 340: _delay((unsigned long)((500)*(40000000/4000.0)));
  3848  00E748  0E1A               	movlw	26
  3849  00E74A  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3850  00E74C  0E5E               	movlw	94
  3851  00E74E  6E1B               	movwf	??_viewLogs& (0+255),c
  3852  00E750  0E6E               	movlw	110
  3853  00E752                     u6087:
  3854  00E752  2EE8               	decfsz	wreg,f,c
  3855  00E754  D7FE               	bra	u6087
  3856  00E756  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3857  00E758  D7FC               	bra	u6087
  3858  00E75A  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3859  00E75C  D7FA               	bra	u6087
  3860  00E75E  D000               	nop2	
  3861  00E760                     
  3862                           ;standbyMode.c: 343: continue;
  3863  00E760  A281               	btfss	3969,1,c	;volatile
  3864  00E762  D7FE               	goto	l238
  3865                           
  3866                           ;standbyMode.c: 344: }
  3867                           ;standbyMode.c: 346: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3868  00E764  0E01               	movlw	1
  3869  00E766  EC02  F06E         	call	_lcdInst
  3870  00E76A  0EC3               	movlw	195
  3871  00E76C  6E1B               	movwf	??_viewLogs& (0+255),c
  3872  00E76E  0ECD               	movlw	205
  3873  00E770                     u6097:
  3874  00E770  2EE8               	decfsz	wreg,f,c
  3875  00E772  D7FE               	bra	u6097
  3876  00E774  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3877  00E776  D7FC               	bra	u6097
  3878  00E778  F000               	nop	
  3879                           
  3880                           ;standbyMode.c: 347: printf("Drawer 1: RF12");
  3881  00E77A  0EFE               	movlw	low STR_15
  3882  00E77C  6E0D               	movwf	printf@f,c
  3883  00E77E  0EFE               	movlw	high STR_15
  3884  00E780  6E0E               	movwf	printf@f+1,c
  3885  00E782  ECDB  F06F         	call	_printf	;wreg free
  3886                           
  3887                           ;standbyMode.c: 348: lcdInst(0xC0);;
  3888  00E786  0EC0               	movlw	192
  3889  00E788  EC02  F06E         	call	_lcdInst
  3890                           
  3891                           ;standbyMode.c: 349: printf("Drawer 2: L1");
  3892  00E78C  0E62               	movlw	low STR_16
  3893  00E78E  6E0D               	movwf	printf@f,c
  3894  00E790  0EFF               	movlw	high STR_16
  3895  00E792  6E0E               	movwf	printf@f+1,c
  3896  00E794  ECDB  F06F         	call	_printf	;wreg free
  3897                           
  3898                           ;standbyMode.c: 350: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3899  00E798  0E66               	movlw	102
  3900  00E79A  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3901  00E79C  0E76               	movlw	118
  3902  00E79E  6E1B               	movwf	??_viewLogs& (0+255),c
  3903  00E7A0  0EC1               	movlw	193
  3904  00E7A2                     u6107:
  3905  00E7A2  2EE8               	decfsz	wreg,f,c
  3906  00E7A4  D7FE               	bra	u6107
  3907  00E7A6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3908  00E7A8  D7FC               	bra	u6107
  3909  00E7AA  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3910  00E7AC  D7FA               	bra	u6107
  3911  00E7AE  F000               	nop	
  3912                           
  3913                           ;standbyMode.c: 352: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3914  00E7B0  0E01               	movlw	1
  3915  00E7B2  EC02  F06E         	call	_lcdInst
  3916  00E7B6  0EC3               	movlw	195
  3917  00E7B8  6E1B               	movwf	??_viewLogs& (0+255),c
  3918  00E7BA  0ECD               	movlw	205
  3919  00E7BC                     u6117:
  3920  00E7BC  2EE8               	decfsz	wreg,f,c
  3921  00E7BE  D7FE               	bra	u6117
  3922  00E7C0  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3923  00E7C2  D7FC               	bra	u6117
  3924  00E7C4  F000               	nop	
  3925                           
  3926                           ;standbyMode.c: 353: printf("Another log?");
  3927  00E7C6  0E7C               	movlw	low STR_17
  3928  00E7C8  6E0D               	movwf	printf@f,c
  3929  00E7CA  0EFF               	movlw	high STR_17
  3930  00E7CC  6E0E               	movwf	printf@f+1,c
  3931  00E7CE  ECDB  F06F         	call	_printf	;wreg free
  3932                           
  3933                           ;standbyMode.c: 354: lcdInst(0xC0);;
  3934  00E7D2  0EC0               	movlw	192
  3935  00E7D4  EC02  F06E         	call	_lcdInst
  3936                           
  3937                           ;standbyMode.c: 355: printf("# = Yes, D = No");
  3938  00E7D8  0EAF               	movlw	low STR_18
  3939  00E7DA  6E0D               	movwf	printf@f,c
  3940  00E7DC  0EFE               	movlw	high STR_18
  3941  00E7DE  6E0E               	movwf	printf@f+1,c
  3942  00E7E0  ECDB  F06F         	call	_printf	;wreg free
  3943  00E7E4  A281               	btfss	3969,1,c	;volatile
  3944  00E7E6  D7FE               	goto	l241
  3945                           
  3946                           ;standbyMode.c: 358: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  3947  00E7E8  3881               	swapf	3969,w,c	;volatile
  3948  00E7EA  0B0F               	andlw	15
  3949  00E7EC  0B0F               	andlw	15
  3950  00E7EE  6E1D               	movwf	viewLogs@keypress3,c
  3951  00E7F0  B281               	btfsc	3969,1,c	;volatile
  3952  00E7F2  D7FE               	goto	l244
  3953                           
  3954                           ;standbyMode.c: 360: return keypress3;
  3955  00E7F4  C01D  F019         	movff	viewLogs@keypress3,?_viewLogs
  3956  00E7F8  6A1A               	clrf	?_viewLogs+1,c
  3957  00E7FA  0012               	return		;funcret
  3958  00E7FC                     __end_of_viewLogs:
  3959                           	opt stack 0
  3960                           tblptru	equ	0xFF8
  3961                           tblptrh	equ	0xFF7
  3962                           tblptrl	equ	0xFF6
  3963                           tablat	equ	0xFF5
  3964                           prodh	equ	0xFF4
  3965                           prodl	equ	0xFF3
  3966                           intcon	equ	0xFF2
  3967                           postinc0	equ	0xFEE
  3968                           wreg	equ	0xFE8
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _readEEPROM *****************
  3976 ;; Defined at:
  3977 ;;		line 29 in file "EEPROMstorage.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  address         1    wreg     unsigned char 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  address         1    0[COMRAM] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      unsigned char 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:        1 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_standbyMode
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text6
  4005  00DC2C                     __ptext6:
  4006                           	opt stack 0
  4007  00DC2C                     _readEEPROM:
  4008                           	opt stack 29
  4009                           
  4010                           ;incstack = 0
  4011                           ;readEEPROM@address stored from wreg
  4012  00DC2C  6E01               	movwf	readEEPROM@address,c
  4013  00DC2E                     
  4014                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  4015  00DC2E  B2A6               	btfsc	4006,1,c	;volsfr
  4016  00DC30  D7FE               	goto	l2252
  4017                           
  4018                           ;EEPROMstorage.c: 32: EEADR = address;
  4019  00DC32  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  4020                           
  4021                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  4022  00DC36  9EA6               	bcf	4006,7,c	;volsfr
  4023                           
  4024                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  4025  00DC38  9CA6               	bcf	4006,6,c	;volsfr
  4026                           
  4027                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  4028  00DC3A  80A6               	bsf	4006,0,c	;volsfr
  4029                           
  4030                           ;EEPROMstorage.c: 36: return( EEDATA );
  4031  00DC3C  50A8               	movf	4008,w,c	;volatile
  4032  00DC3E  0012               	return	
  4033  00DC40                     __end_of_readEEPROM:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _food_press *****************
  4051 ;; Defined at:
  4052 ;;		line 470 in file "standbyMode.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  dietSum         2   24[COMRAM] unsigned int 
  4055 ;;  drawer          2   26[COMRAM] unsigned int 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  keypress        1   46[COMRAM] unsigned char 
  4058 ;;  foodTable       8   38[COMRAM] unsigned int [4]
  4059 ;;  count           2   36[COMRAM] unsigned int 
  4060 ;;  isValid         2   34[COMRAM] unsigned int 
  4061 ;;  backCheck       2   32[COMRAM] unsigned int 
  4062 ;;  tally           2   30[COMRAM] unsigned int 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  2   24[COMRAM] unsigned int 
  4065 ;; Registers used:
  4066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;Total ram usage:       23 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    3
  4079 ;; This function calls:
  4080 ;;		_check_food
  4081 ;;		_get_digits
  4082 ;;		_lcdInst
  4083 ;;		_printf
  4084 ;;		_putch
  4085 ;; This function is called by:
  4086 ;;		_standbyMode
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text7
  4091  00E0D4                     __ptext7:
  4092                           	opt stack 0
  4093  00E0D4                     _food_press:
  4094                           	opt stack 26
  4095                           
  4096                           ;incstack = 0
  4097                           ;standbyMode.c: 472: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  4098  00E0D4  0E01               	movlw	1
  4099  00E0D6  EC02  F06E         	call	_lcdInst
  4100  00E0DA  0EC3               	movlw	195
  4101  00E0DC  6E1D               	movwf	??_food_press& (0+255),c
  4102  00E0DE  0ECD               	movlw	205
  4103  00E0E0                     u6127:
  4104  00E0E0  2EE8               	decfsz	wreg,f,c
  4105  00E0E2  D7FE               	bra	u6127
  4106  00E0E4  2E1D               	decfsz	??_food_press& (0+255),f,c
  4107  00E0E6  D7FC               	bra	u6127
  4108  00E0E8  F000               	nop	
  4109                           
  4110                           ;standbyMode.c: 473: printf("Drawer %i food:", drawer);
  4111  00E0EA  0E4F               	movlw	low STR_19
  4112  00E0EC  6E0D               	movwf	printf@f,c
  4113  00E0EE  0EFE               	movlw	high STR_19
  4114  00E0F0  6E0E               	movwf	printf@f+1,c
  4115  00E0F2  C01B  F00F         	movff	food_press@drawer,?_printf+2
  4116  00E0F6  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  4117  00E0FA  ECDB  F06F         	call	_printf	;wreg free
  4118                           
  4119                           ;standbyMode.c: 474: lcdInst(0xC0);;
  4120  00E0FE  0EC0               	movlw	192
  4121  00E100  EC02  F06E         	call	_lcdInst
  4122                           
  4123                           ;standbyMode.c: 476: unsigned int tally = 0;
  4124  00E104  0E00               	movlw	0
  4125  00E106  6E20               	movwf	food_press@tally+1,c
  4126  00E108  0E00               	movlw	0
  4127  00E10A  6E1F               	movwf	food_press@tally,c
  4128                           
  4129                           ;standbyMode.c: 477: unsigned int count = 0;
  4130  00E10C  0E00               	movlw	0
  4131  00E10E  6E26               	movwf	food_press@count+1,c
  4132  00E110  0E00               	movlw	0
  4133  00E112  6E25               	movwf	food_press@count,c
  4134                           
  4135                           ;standbyMode.c: 478: unsigned int foodTable[4] = {0, 0, 0, 0};
  4136  00E114  EE20  F05F         	lfsr	2,food_press@F3045
  4137  00E118  EE10  F027         	lfsr	1,food_press@foodTable
  4138  00E11C  0E07               	movlw	7
  4139  00E11E                     u4001:
  4140  00E11E  CFDB FFE3          	movff	plusw2,plusw1
  4141  00E122  06E8               	decf	wreg,f,c
  4142  00E124  E2FC               	bc	u4001
  4143                           
  4144                           ;standbyMode.c: 479: unsigned int isValid = 0;
  4145  00E126  0E00               	movlw	0
  4146  00E128  6E24               	movwf	food_press@isValid+1,c
  4147  00E12A  0E00               	movlw	0
  4148  00E12C  6E23               	movwf	food_press@isValid,c
  4149                           
  4150                           ;standbyMode.c: 480: unsigned int backCheck = 0;
  4151  00E12E  0E00               	movlw	0
  4152  00E130  6E22               	movwf	food_press@backCheck+1,c
  4153  00E132  0E00               	movlw	0
  4154  00E134  6E21               	movwf	food_press@backCheck,c
  4155                           
  4156                           ;standbyMode.c: 481: tally = get_digits(dietSum);
  4157  00E136  C019  F001         	movff	food_press@dietSum,get_digits@sum
  4158  00E13A  C01A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  4159  00E13E  EC0B  F06F         	call	_get_digits	;wreg free
  4160  00E142  C001  F01F         	movff	?_get_digits,food_press@tally
  4161  00E146  C002  F020         	movff	?_get_digits+1,food_press@tally+1
  4162  00E14A                     
  4163                           ;standbyMode.c: 484: while(PORTBbits.RB1 == 0){ continue; }
  4164  00E14A  A281               	btfss	3969,1,c	;volatile
  4165  00E14C  D7FE               	goto	l276
  4166                           
  4167                           ;standbyMode.c: 485: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4168  00E14E  3881               	swapf	3969,w,c	;volatile
  4169  00E150  0B0F               	andlw	15
  4170  00E152  0B0F               	andlw	15
  4171  00E154  6E2F               	movwf	food_press@keypress,c
  4172  00E156  B281               	btfsc	3969,1,c	;volatile
  4173  00E158  D7FE               	goto	l281
  4174                           
  4175                           ;standbyMode.c: 488: if(keypress == 15){
  4176  00E15A  0E0F               	movlw	15
  4177  00E15C  182F               	xorwf	food_press@keypress,w,c
  4178  00E15E  B4D8               	btfsc	status,2,c
  4179  00E160  D06D               	goto	l284
  4180                           
  4181                           ;standbyMode.c: 491: else if (keypress == 14){
  4182                           
  4183                           ;standbyMode.c: 490: }
  4184                           
  4185                           ;standbyMode.c: 489: break;
  4186  00E162  0E0E               	movlw	14
  4187  00E164  182F               	xorwf	food_press@keypress,w,c
  4188  00E166  A4D8               	btfss	status,2,c
  4189  00E168  D005               	goto	l286
  4190                           
  4191                           ;standbyMode.c: 492: backCheck = 1;
  4192  00E16A  0E00               	movlw	0
  4193  00E16C  6E22               	movwf	food_press@backCheck+1,c
  4194  00E16E  0E01               	movlw	1
  4195  00E170  6E21               	movwf	food_press@backCheck,c
  4196                           
  4197                           ;standbyMode.c: 493: break;
  4198  00E172  D064               	goto	l284
  4199  00E174                     l286:
  4200                           
  4201                           ;standbyMode.c: 495: else if (keypress == 0 || keypress == 1 || keypress == 2){
  4202  00E174  502F               	movf	food_press@keypress,w,c
  4203  00E176  B4D8               	btfsc	status,2,c
  4204  00E178  D007               	goto	u4070
  4205  00E17A  042F               	decf	food_press@keypress,w,c
  4206  00E17C  B4D8               	btfsc	status,2,c
  4207  00E17E  D004               	goto	u4070
  4208  00E180  0E02               	movlw	2
  4209  00E182  182F               	xorwf	food_press@keypress,w,c
  4210  00E184  A4D8               	btfss	status,2,c
  4211  00E186  D029               	goto	l288
  4212  00E188                     u4070:
  4213                           
  4214                           ;standbyMode.c: 496: if (count < tally){
  4215  00E188  501F               	movf	food_press@tally,w,c
  4216  00E18A  5C25               	subwf	food_press@count,w,c
  4217  00E18C  5020               	movf	food_press@tally+1,w,c
  4218  00E18E  5826               	subwfb	food_press@count+1,w,c
  4219  00E190  B0D8               	btfsc	status,0,c
  4220  00E192  D7DB               	goto	l276
  4221                           
  4222                           ;standbyMode.c: 497: putch(input[keypress]);
  4223  00E194  502F               	movf	food_press@keypress,w,c
  4224  00E196  0D01               	mullw	1
  4225  00E198  0EA8               	movlw	low _input
  4226  00E19A  24F3               	addwf	prodl,w,c
  4227  00E19C  6EF6               	movwf	tblptrl,c
  4228  00E19E  0EFD               	movlw	high _input
  4229  00E1A0  20F4               	addwfc	prodh,w,c
  4230  00E1A2  6EF7               	movwf	tblptrh,c
  4231  00E1A4                     	if	0	;There are less than 3 active tblptr bytes
  4232  00E1A4                     	endif
  4233  00E1A4  0008               	tblrd		*
  4234  00E1A6  50F5               	movf	tablat,w,c
  4235  00E1A8  EC0C  F06E         	call	_putch
  4236                           
  4237                           ;standbyMode.c: 498: foodTable[count] = keypress + 1;
  4238  00E1AC  502F               	movf	food_press@keypress,w,c
  4239  00E1AE  6E1D               	movwf	??_food_press& (0+255),c
  4240  00E1B0  6A1E               	clrf	(??_food_press+1)& (0+255),c
  4241  00E1B2  0E01               	movlw	1
  4242  00E1B4  261D               	addwf	??_food_press,f,c
  4243  00E1B6  0E00               	movlw	0
  4244  00E1B8  221E               	addwfc	??_food_press+1,f,c
  4245  00E1BA  90D8               	bcf	status,0,c
  4246  00E1BC  3425               	rlcf	food_press@count,w,c
  4247  00E1BE  6ED9               	movwf	fsr2l,c
  4248  00E1C0  3426               	rlcf	food_press@count+1,w,c
  4249  00E1C2  6EDA               	movwf	fsr2h,c
  4250  00E1C4  0E27               	movlw	low food_press@foodTable
  4251  00E1C6  26D9               	addwf	fsr2l,f,c
  4252  00E1C8  0E00               	movlw	high food_press@foodTable
  4253  00E1CA  22DA               	addwfc	fsr2h,f,c
  4254  00E1CC  C01D  FFDE         	movff	??_food_press,postinc2
  4255  00E1D0  C01E  FFDD         	movff	??_food_press+1,postdec2
  4256                           
  4257                           ;standbyMode.c: 499: count += 1;
  4258  00E1D4  4A25               	infsnz	food_press@count,f,c
  4259  00E1D6  2A26               	incf	food_press@count+1,f,c
  4260                           
  4261                           ;standbyMode.c: 500: }
  4262                           ;standbyMode.c: 501: }
  4263  00E1D8  D7B8               	goto	l276
  4264  00E1DA                     l288:
  4265                           
  4266                           ;standbyMode.c: 502: else if (keypress == 12){
  4267  00E1DA  0E0C               	movlw	12
  4268  00E1DC  182F               	xorwf	food_press@keypress,w,c
  4269  00E1DE  A4D8               	btfss	status,2,c
  4270  00E1E0  D7B4               	goto	l276
  4271                           
  4272                           ;standbyMode.c: 503: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4273  00E1E2  0E01               	movlw	1
  4274  00E1E4  EC02  F06E         	call	_lcdInst
  4275  00E1E8  0EC3               	movlw	195
  4276  00E1EA  6E1D               	movwf	??_food_press& (0+255),c
  4277  00E1EC  0ECD               	movlw	205
  4278  00E1EE                     u6137:
  4279  00E1EE  2EE8               	decfsz	wreg,f,c
  4280  00E1F0  D7FE               	bra	u6137
  4281  00E1F2  2E1D               	decfsz	??_food_press& (0+255),f,c
  4282  00E1F4  D7FC               	bra	u6137
  4283  00E1F6  F000               	nop	
  4284                           
  4285                           ;standbyMode.c: 504: printf("Drawer %i food:", drawer);
  4286  00E1F8  0E4F               	movlw	low STR_19
  4287  00E1FA  6E0D               	movwf	printf@f,c
  4288  00E1FC  0EFE               	movlw	high STR_19
  4289  00E1FE  6E0E               	movwf	printf@f+1,c
  4290  00E200  C01B  F00F         	movff	food_press@drawer,?_printf+2
  4291  00E204  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  4292  00E208  ECDB  F06F         	call	_printf	;wreg free
  4293                           
  4294                           ;standbyMode.c: 505: lcdInst(0xC0);;
  4295  00E20C  0EC0               	movlw	192
  4296  00E20E  EC02  F06E         	call	_lcdInst
  4297                           
  4298                           ;standbyMode.c: 506: count = 0;
  4299  00E212  0E00               	movlw	0
  4300  00E214  6E26               	movwf	food_press@count+1,c
  4301  00E216  0E00               	movlw	0
  4302  00E218  6E25               	movwf	food_press@count,c
  4303                           
  4304                           ;standbyMode.c: 507: foodTable[0] = 0;
  4305  00E21A  0E00               	movlw	0
  4306  00E21C  6E28               	movwf	food_press@foodTable+1,c
  4307  00E21E  0E00               	movlw	0
  4308  00E220  6E27               	movwf	food_press@foodTable,c
  4309                           
  4310                           ;standbyMode.c: 508: foodTable[1] = 0;
  4311  00E222  0E00               	movlw	0
  4312  00E224  6E2A               	movwf	food_press@foodTable+3,c
  4313  00E226  0E00               	movlw	0
  4314  00E228  6E29               	movwf	food_press@foodTable+2,c
  4315                           
  4316                           ;standbyMode.c: 509: foodTable[2] = 0;
  4317  00E22A  0E00               	movlw	0
  4318  00E22C  6E2C               	movwf	food_press@foodTable+5,c
  4319  00E22E  0E00               	movlw	0
  4320  00E230  6E2B               	movwf	food_press@foodTable+4,c
  4321                           
  4322                           ;standbyMode.c: 510: foodTable[3] = 0;
  4323  00E232  0E00               	movlw	0
  4324  00E234  6E2E               	movwf	food_press@foodTable+7,c
  4325  00E236  0E00               	movlw	0
  4326  00E238  6E2D               	movwf	food_press@foodTable+6,c
  4327  00E23A  D787               	goto	l276
  4328  00E23C                     l284:
  4329                           
  4330                           ;standbyMode.c: 511: }
  4331                           ;standbyMode.c: 512: }
  4332                           ;standbyMode.c: 514: if (backCheck == 1){
  4333  00E23C  0421               	decf	food_press@backCheck,w,c
  4334  00E23E  1022               	iorwf	food_press@backCheck+1,w,c
  4335  00E240  A4D8               	btfss	status,2,c
  4336  00E242  D005               	goto	l295
  4337                           
  4338                           ;standbyMode.c: 515: return 100;
  4339  00E244  0E00               	movlw	0
  4340  00E246  6E1A               	movwf	?_food_press+1,c
  4341  00E248  0E64               	movlw	100
  4342  00E24A  6E19               	movwf	?_food_press,c
  4343                           
  4344                           ;standbyMode.c: 516: }
  4345  00E24C  0012               	return	
  4346  00E24E                     l295:
  4347                           
  4348                           ;standbyMode.c: 517: else {
  4349                           ;standbyMode.c: 518: isValid = check_food(dietSum, foodTable);
  4350  00E24E  C019  F001         	movff	food_press@dietSum,check_food@sum
  4351  00E252  C01A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  4352  00E256  0E27               	movlw	low food_press@foodTable
  4353  00E258  6E03               	movwf	check_food@foodInput,c
  4354  00E25A  0E00               	movlw	high food_press@foodTable
  4355  00E25C  6E04               	movwf	check_food@foodInput+1,c
  4356  00E25E  EC91  F076         	call	_check_food	;wreg free
  4357  00E262  C001  F023         	movff	?_check_food,food_press@isValid
  4358  00E266  C002  F024         	movff	?_check_food+1,food_press@isValid+1
  4359                           
  4360                           ;standbyMode.c: 520: if (isValid == 0){
  4361  00E26A  5023               	movf	food_press@isValid,w,c
  4362  00E26C  1024               	iorwf	food_press@isValid+1,w,c
  4363  00E26E  A4D8               	btfss	status,2,c
  4364  00E270  D026               	goto	l298
  4365                           
  4366                           ;standbyMode.c: 521: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4367  00E272  0E01               	movlw	1
  4368  00E274  EC02  F06E         	call	_lcdInst
  4369  00E278  0EC3               	movlw	195
  4370  00E27A  6E1D               	movwf	??_food_press& (0+255),c
  4371  00E27C  0ECD               	movlw	205
  4372  00E27E                     u6147:
  4373  00E27E  2EE8               	decfsz	wreg,f,c
  4374  00E280  D7FE               	bra	u6147
  4375  00E282  2E1D               	decfsz	??_food_press& (0+255),f,c
  4376  00E284  D7FC               	bra	u6147
  4377  00E286  F000               	nop	
  4378                           
  4379                           ;standbyMode.c: 522: printf("Invalid food!");
  4380  00E288  0E2B               	movlw	low STR_21
  4381  00E28A  6E0D               	movwf	printf@f,c
  4382  00E28C  0EFF               	movlw	high STR_21
  4383  00E28E  6E0E               	movwf	printf@f+1,c
  4384  00E290  ECDB  F06F         	call	_printf	;wreg free
  4385                           
  4386                           ;standbyMode.c: 523: lcdInst(0xC0);;
  4387  00E294  0EC0               	movlw	192
  4388  00E296  EC02  F06E         	call	_lcdInst
  4389                           
  4390                           ;standbyMode.c: 524: printf("Try again.");
  4391  00E29A  0EAA               	movlw	low STR_22
  4392  00E29C  6E0D               	movwf	printf@f,c
  4393  00E29E  0EFF               	movlw	high STR_22
  4394  00E2A0  6E0E               	movwf	printf@f+1,c
  4395  00E2A2  ECDB  F06F         	call	_printf	;wreg free
  4396                           
  4397                           ;standbyMode.c: 525: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4398  00E2A6  0E33               	movlw	51
  4399  00E2A8  6E1E               	movwf	(??_food_press+1)& (0+255),c
  4400  00E2AA  0EBB               	movlw	187
  4401  00E2AC  6E1D               	movwf	??_food_press& (0+255),c
  4402  00E2AE  0EE0               	movlw	224
  4403  00E2B0                     u6157:
  4404  00E2B0  2EE8               	decfsz	wreg,f,c
  4405  00E2B2  D7FE               	bra	u6157
  4406  00E2B4  2E1D               	decfsz	??_food_press& (0+255),f,c
  4407  00E2B6  D7FC               	bra	u6157
  4408  00E2B8  2E1E               	decfsz	(??_food_press+1)& (0+255),f,c
  4409  00E2BA  D7FA               	bra	u6157
  4410                           
  4411                           ;standbyMode.c: 526: goto START;
  4412  00E2BC  D70B               	goto	_food_press
  4413  00E2BE                     l298:
  4414                           
  4415                           ;standbyMode.c: 528: else {
  4416                           ;standbyMode.c: 529: return isValid;
  4417  00E2BE  C023  F019         	movff	food_press@isValid,?_food_press
  4418  00E2C2  C024  F01A         	movff	food_press@isValid+1,?_food_press+1
  4419  00E2C6  0012               	return	
  4420  00E2C8                     __end_of_food_press:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           postinc0	equ	0xFEE
  4430                           wreg	equ	0xFE8
  4431                           plusw1	equ	0xFE3
  4432                           postinc2	equ	0xFDE
  4433                           postdec2	equ	0xFDD
  4434                           plusw2	equ	0xFDB
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _get_digits *****************
  4440 ;; Defined at:
  4441 ;;		line 365 in file "standbyMode.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  sum             2    0[COMRAM] unsigned int 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  count           2    4[COMRAM] unsigned int 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  2    0[COMRAM] unsigned int 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        6 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_food_press
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text8
  4469  00DE16                     __ptext8:
  4470                           	opt stack 0
  4471  00DE16                     _get_digits:
  4472                           	opt stack 28
  4473                           
  4474                           ;standbyMode.c: 367: unsigned int count = 0;
  4475                           
  4476                           ;incstack = 0
  4477  00DE16  0E00               	movlw	0
  4478  00DE18  6E06               	movwf	get_digits@count+1,c
  4479  00DE1A  0E00               	movlw	0
  4480  00DE1C  6E05               	movwf	get_digits@count,c
  4481                           
  4482                           ;standbyMode.c: 369: switch(sum){
  4483  00DE1E  D015               	goto	l249
  4484  00DE20                     
  4485                           ;standbyMode.c: 382: count = 1;
  4486                           
  4487                           ;standbyMode.c: 381: case 12:
  4488                           
  4489                           ;standbyMode.c: 378: break;
  4490                           
  4491                           ;standbyMode.c: 377: count = 1;
  4492                           
  4493                           ;standbyMode.c: 376: case 7:
  4494                           
  4495                           ;standbyMode.c: 373: break;
  4496                           
  4497                           ;standbyMode.c: 372: count = 1;
  4498  00DE20  0E00               	movlw	0
  4499  00DE22  6E06               	movwf	get_digits@count+1,c
  4500  00DE24  0E01               	movlw	1
  4501  00DE26                     L15:
  4502  00DE26  6E05               	movwf	get_digits@count,c
  4503                           
  4504                           ;standbyMode.c: 388: break;
  4505  00DE28  D050               	goto	l251
  4506  00DE2A                     
  4507                           ;standbyMode.c: 397: count = 2;
  4508                           
  4509                           ;standbyMode.c: 396: case 19:
  4510                           
  4511                           ;standbyMode.c: 393: break;
  4512                           
  4513                           ;standbyMode.c: 392: count = 2;
  4514  00DE2A  0E00               	movlw	0
  4515  00DE2C  6E06               	movwf	get_digits@count+1,c
  4516  00DE2E  0E02               	movlw	2
  4517  00DE30  D7FA               	goto	L15
  4518  00DE32                     
  4519                           ;standbyMode.c: 432: count = 3;
  4520                           
  4521                           ;standbyMode.c: 431: case 31:
  4522                           
  4523                           ;standbyMode.c: 428: break;
  4524                           
  4525                           ;standbyMode.c: 427: count = 3;
  4526                           
  4527                           ;standbyMode.c: 426: case 26:
  4528                           
  4529                           ;standbyMode.c: 423: break;
  4530                           
  4531                           ;standbyMode.c: 422: count = 3;
  4532                           
  4533                           ;standbyMode.c: 421: case 22:
  4534                           
  4535                           ;standbyMode.c: 418: break;
  4536                           
  4537                           ;standbyMode.c: 417: count = 3;
  4538                           
  4539                           ;standbyMode.c: 416: case 27:
  4540                           
  4541                           ;standbyMode.c: 413: break;
  4542                           
  4543                           ;standbyMode.c: 412: count = 3;
  4544                           
  4545                           ;standbyMode.c: 411: case 17:
  4546                           
  4547                           ;standbyMode.c: 408: break;
  4548                           
  4549                           ;standbyMode.c: 407: count = 3;
  4550                           
  4551                           ;standbyMode.c: 406: case 18:
  4552                           
  4553                           ;standbyMode.c: 403: break;
  4554                           
  4555                           ;standbyMode.c: 402: count = 3;
  4556  00DE32  0E00               	movlw	0
  4557  00DE34  6E06               	movwf	get_digits@count+1,c
  4558  00DE36  0E03               	movlw	3
  4559  00DE38  D7F6               	goto	L15
  4560  00DE3A                     
  4561                           ;standbyMode.c: 457: count = 4;
  4562                           
  4563                           ;standbyMode.c: 456: case 43:
  4564                           
  4565                           ;standbyMode.c: 453: break;
  4566                           
  4567                           ;standbyMode.c: 452: count = 4;
  4568                           
  4569                           ;standbyMode.c: 451: case 39:
  4570                           
  4571                           ;standbyMode.c: 448: break;
  4572                           
  4573                           ;standbyMode.c: 447: count = 4;
  4574                           
  4575                           ;standbyMode.c: 446: case 34:
  4576                           
  4577                           ;standbyMode.c: 443: break;
  4578                           
  4579                           ;standbyMode.c: 442: count = 4;
  4580                           
  4581                           ;standbyMode.c: 441: case 29:
  4582                           
  4583                           ;standbyMode.c: 438: break;
  4584                           
  4585                           ;standbyMode.c: 437: count = 4;
  4586  00DE3A  0E00               	movlw	0
  4587  00DE3C  6E06               	movwf	get_digits@count+1,c
  4588  00DE3E  0E04               	movlw	4
  4589  00DE40  D7F2               	goto	L15
  4590  00DE42                     
  4591                           ;standbyMode.c: 462: count = 0;
  4592  00DE42  0E00               	movlw	0
  4593  00DE44  6E06               	movwf	get_digits@count+1,c
  4594  00DE46  0E00               	movlw	0
  4595  00DE48  D7EE               	goto	L15
  4596  00DE4A                     l249:
  4597  00DE4A  C001  F003         	movff	get_digits@sum,??_get_digits
  4598  00DE4E  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  4599                           
  4600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4601                           ; Switch size 1, requested type "space"
  4602                           ; Number of cases is 1, Range of values is 0 to 0
  4603                           ; switch strategies available:
  4604                           ; Name         Instructions Cycles
  4605                           ; simple_byte            4     3 (average)
  4606                           ;	Chosen strategy is simple_byte
  4607  00DE52  5004               	movf	??_get_digits+1,w,c
  4608  00DE54  0A00               	xorlw	0	; case 0
  4609  00DE56  A4D8               	btfss	status,2,c
  4610  00DE58  D7F4               	goto	l269
  4611                           
  4612                           ; Switch size 1, requested type "space"
  4613                           ; Number of cases is 18, Range of values is 3 to 43
  4614                           ; switch strategies available:
  4615                           ; Name         Instructions Cycles
  4616                           ; simple_byte           55    28 (average)
  4617                           ;	Chosen strategy is simple_byte
  4618  00DE5A  5003               	movf	??_get_digits,w,c
  4619  00DE5C  0A03               	xorlw	3	; case 3
  4620  00DE5E  B4D8               	btfsc	status,2,c
  4621  00DE60  D7DF               	goto	l250
  4622  00DE62  0A04               	xorlw	4	; case 7
  4623  00DE64  B4D8               	btfsc	status,2,c
  4624  00DE66  D7DC               	goto	l250
  4625  00DE68  0A0D               	xorlw	13	; case 10
  4626  00DE6A  B4D8               	btfsc	status,2,c
  4627  00DE6C  D7DE               	goto	l255
  4628  00DE6E  0A06               	xorlw	6	; case 12
  4629  00DE70  B4D8               	btfsc	status,2,c
  4630  00DE72  D7D6               	goto	l250
  4631  00DE74  0A01               	xorlw	1	; case 13
  4632  00DE76  B4D8               	btfsc	status,2,c
  4633  00DE78  D7DC               	goto	l257
  4634  00DE7A  0A02               	xorlw	2	; case 15
  4635  00DE7C  B4D8               	btfsc	status,2,c
  4636  00DE7E  D7D5               	goto	l255
  4637  00DE80  0A1E               	xorlw	30	; case 17
  4638  00DE82  B4D8               	btfsc	status,2,c
  4639  00DE84  D7D6               	goto	l257
  4640  00DE86  0A03               	xorlw	3	; case 18
  4641  00DE88  B4D8               	btfsc	status,2,c
  4642  00DE8A  D7D3               	goto	l257
  4643  00DE8C  0A01               	xorlw	1	; case 19
  4644  00DE8E  B4D8               	btfsc	status,2,c
  4645  00DE90  D7CC               	goto	l255
  4646  00DE92  0A05               	xorlw	5	; case 22
  4647  00DE94  B4D8               	btfsc	status,2,c
  4648  00DE96  D7CD               	goto	l257
  4649  00DE98  0A0F               	xorlw	15	; case 25
  4650  00DE9A  B4D8               	btfsc	status,2,c
  4651  00DE9C  D7CE               	goto	l264
  4652  00DE9E  0A03               	xorlw	3	; case 26
  4653  00DEA0  B4D8               	btfsc	status,2,c
  4654  00DEA2  D7C7               	goto	l257
  4655  00DEA4  0A01               	xorlw	1	; case 27
  4656  00DEA6  B4D8               	btfsc	status,2,c
  4657  00DEA8  D7C4               	goto	l257
  4658  00DEAA  0A06               	xorlw	6	; case 29
  4659  00DEAC  B4D8               	btfsc	status,2,c
  4660  00DEAE  D7C5               	goto	l264
  4661  00DEB0  0A02               	xorlw	2	; case 31
  4662  00DEB2  B4D8               	btfsc	status,2,c
  4663  00DEB4  D7BE               	goto	l257
  4664  00DEB6  0A3D               	xorlw	61	; case 34
  4665  00DEB8  B4D8               	btfsc	status,2,c
  4666  00DEBA  D7BF               	goto	l264
  4667  00DEBC  0A05               	xorlw	5	; case 39
  4668  00DEBE  B4D8               	btfsc	status,2,c
  4669  00DEC0  D7BC               	goto	l264
  4670  00DEC2  0A0C               	xorlw	12	; case 43
  4671  00DEC4  B4D8               	btfsc	status,2,c
  4672  00DEC6  D7B9               	goto	l264
  4673  00DEC8  D7BC               	goto	l269
  4674  00DECA                     l251:
  4675                           
  4676                           ;standbyMode.c: 465: return count;
  4677  00DECA  C005  F001         	movff	get_digits@count,?_get_digits
  4678  00DECE  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  4679  00DED2  0012               	return		;funcret
  4680  00DED4                     __end_of_get_digits:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           intcon	equ	0xFF2
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           plusw1	equ	0xFE3
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           plusw2	equ	0xFDB
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _check_food *****************
  4700 ;; Defined at:
  4701 ;;		line 88 in file "standbyMode.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  sum             2    0[COMRAM] unsigned int 
  4704 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  4705 ;;		 -> food_press@foodTable(8), 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  returnValue     2    6[COMRAM] unsigned int 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  2    0[COMRAM] unsigned int 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;Total ram usage:        8 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_food_press
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text9
  4731  00ED22                     __ptext9:
  4732                           	opt stack 0
  4733  00ED22                     _check_food:
  4734                           	opt stack 28
  4735                           
  4736                           ;standbyMode.c: 90: unsigned int returnValue = 0;
  4737                           
  4738                           ;incstack = 0
  4739  00ED22  0E00               	movlw	0
  4740  00ED24  6E08               	movwf	check_food@returnValue+1,c
  4741  00ED26  0E00               	movlw	0
  4742  00ED28  6E07               	movwf	check_food@returnValue,c
  4743                           
  4744                           ;standbyMode.c: 92: switch(sum){
  4745  00ED2A  D3D0               	goto	l129
  4746  00ED2C                     
  4747                           ;standbyMode.c: 95: if (foodInput[0] == 1 || foodInput[0] == 2){
  4748  00ED2C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4749  00ED30  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4750  00ED34  04DE               	decf	postinc2,w,c
  4751  00ED36  10DE               	iorwf	postinc2,w,c
  4752  00ED38  B4D8               	btfsc	status,2,c
  4753  00ED3A  D009               	goto	u2880
  4754  00ED3C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4755  00ED40  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4756  00ED44  0E02               	movlw	2
  4757  00ED46  18DE               	xorwf	postinc2,w,c
  4758  00ED48  10DE               	iorwf	postinc2,w,c
  4759  00ED4A  A4D8               	btfss	status,2,c
  4760  00ED4C  D3FE               	goto	l134
  4761  00ED4E                     u2880:
  4762                           
  4763                           ;standbyMode.c: 96: returnValue = 1;
  4764  00ED4E  0E00               	movlw	0
  4765  00ED50  6E08               	movwf	check_food@returnValue+1,c
  4766  00ED52  0E01               	movlw	1
  4767  00ED54  D3B9               	goto	L43
  4768  00ED56                     
  4769                           ;standbyMode.c: 102: if (foodInput[0] == 1 || foodInput[0] == 2){
  4770  00ED56  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4771  00ED5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4772  00ED5E  04DE               	decf	postinc2,w,c
  4773  00ED60  10DE               	iorwf	postinc2,w,c
  4774  00ED62  B4D8               	btfsc	status,2,c
  4775  00ED64  D009               	goto	u2900
  4776  00ED66  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4777  00ED6A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4778  00ED6E  0E02               	movlw	2
  4779  00ED70  18DE               	xorwf	postinc2,w,c
  4780  00ED72  10DE               	iorwf	postinc2,w,c
  4781  00ED74  A4D8               	btfss	status,2,c
  4782  00ED76  D3E9               	goto	l134
  4783  00ED78                     u2900:
  4784                           
  4785                           ;standbyMode.c: 103: returnValue = 2;
  4786  00ED78  0E00               	movlw	0
  4787  00ED7A  6E08               	movwf	check_food@returnValue+1,c
  4788  00ED7C  0E02               	movlw	2
  4789  00ED7E  D3A4               	goto	L43
  4790  00ED80                     
  4791                           ;standbyMode.c: 109: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  4792  00ED80  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4793  00ED84  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4794  00ED88  04DE               	decf	postinc2,w,c
  4795  00ED8A  10DE               	iorwf	postinc2,w,c
  4796  00ED8C  B4D8               	btfsc	status,2,c
  4797  00ED8E  D012               	goto	u2930
  4798  00ED90  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4799  00ED94  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4800  00ED98  0E02               	movlw	2
  4801  00ED9A  18DE               	xorwf	postinc2,w,c
  4802  00ED9C  10DE               	iorwf	postinc2,w,c
  4803  00ED9E  B4D8               	btfsc	status,2,c
  4804  00EDA0  D009               	goto	u2930
  4805  00EDA2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4806  00EDA6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4807  00EDAA  0E03               	movlw	3
  4808  00EDAC  18DE               	xorwf	postinc2,w,c
  4809  00EDAE  10DE               	iorwf	postinc2,w,c
  4810  00EDB0  A4D8               	btfss	status,2,c
  4811  00EDB2  D3CB               	goto	l134
  4812  00EDB4                     u2930:
  4813                           
  4814                           ;standbyMode.c: 110: returnValue = 3;
  4815  00EDB4  0E00               	movlw	0
  4816  00EDB6  6E08               	movwf	check_food@returnValue+1,c
  4817  00EDB8  0E03               	movlw	3
  4818  00EDBA  D386               	goto	L43
  4819  00EDBC                     
  4820                           ;standbyMode.c: 116: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  4821  00EDBC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4822  00EDC0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4823  00EDC4  0E03               	movlw	3
  4824  00EDC6  18DE               	xorwf	postinc2,w,c
  4825  00EDC8  10DE               	iorwf	postinc2,w,c
  4826  00EDCA  B4D8               	btfsc	status,2,c
  4827  00EDCC  D3BE               	goto	l134
  4828  00EDCE  EE20 F002          	lfsr	2,2
  4829  00EDD2  5003               	movf	check_food@foodInput,w,c
  4830  00EDD4  26D9               	addwf	fsr2l,f,c
  4831  00EDD6  5004               	movf	check_food@foodInput+1,w,c
  4832  00EDD8  22DA               	addwfc	fsr2h,f,c
  4833  00EDDA  0E03               	movlw	3
  4834  00EDDC  18DE               	xorwf	postinc2,w,c
  4835  00EDDE  10DE               	iorwf	postinc2,w,c
  4836  00EDE0  B4D8               	btfsc	status,2,c
  4837  00EDE2  D3B3               	goto	l134
  4838  00EDE4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4839  00EDE8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4840  00EDEC  50DE               	movf	postinc2,w,c
  4841  00EDEE  10DE               	iorwf	postinc2,w,c
  4842  00EDF0  B4D8               	btfsc	status,2,c
  4843  00EDF2  D3AB               	goto	l134
  4844  00EDF4  EE20 F002          	lfsr	2,2
  4845  00EDF8  5003               	movf	check_food@foodInput,w,c
  4846  00EDFA  26D9               	addwf	fsr2l,f,c
  4847  00EDFC  5004               	movf	check_food@foodInput+1,w,c
  4848  00EDFE  22DA               	addwfc	fsr2h,f,c
  4849  00EE00  50DE               	movf	postinc2,w,c
  4850  00EE02  10DE               	iorwf	postinc2,w,c
  4851  00EE04  B4D8               	btfsc	status,2,c
  4852  00EE06  D3A1               	goto	l134
  4853                           
  4854                           ;standbyMode.c: 117: returnValue = 4;
  4855  00EE08  0E00               	movlw	0
  4856  00EE0A  6E08               	movwf	check_food@returnValue+1,c
  4857  00EE0C  0E04               	movlw	4
  4858  00EE0E  D35C               	goto	L43
  4859  00EE10                     
  4860                           ;standbyMode.c: 123: if (foodInput[1] == 3){
  4861  00EE10  EE20 F002          	lfsr	2,2
  4862  00EE14  5003               	movf	check_food@foodInput,w,c
  4863  00EE16  26D9               	addwf	fsr2l,f,c
  4864  00EE18  5004               	movf	check_food@foodInput+1,w,c
  4865  00EE1A  22DA               	addwfc	fsr2h,f,c
  4866  00EE1C  0E03               	movlw	3
  4867  00EE1E  18DE               	xorwf	postinc2,w,c
  4868  00EE20  10DE               	iorwf	postinc2,w,c
  4869  00EE22  A4D8               	btfss	status,2,c
  4870  00EE24  D00C               	goto	l146
  4871                           
  4872                           ;standbyMode.c: 124: if (foodInput[0] == 1){
  4873  00EE26  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4874  00EE2A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4875  00EE2E  04DE               	decf	postinc2,w,c
  4876  00EE30  10DE               	iorwf	postinc2,w,c
  4877  00EE32  A4D8               	btfss	status,2,c
  4878  00EE34  D38A               	goto	l134
  4879                           
  4880                           ;standbyMode.c: 125: returnValue = 5;
  4881  00EE36  0E00               	movlw	0
  4882  00EE38  6E08               	movwf	check_food@returnValue+1,c
  4883  00EE3A  0E05               	movlw	5
  4884  00EE3C  D345               	goto	L43
  4885  00EE3E                     l146:
  4886                           
  4887                           ;standbyMode.c: 128: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4888  00EE3E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4889  00EE42  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4890  00EE46  0E03               	movlw	3
  4891  00EE48  18DE               	xorwf	postinc2,w,c
  4892  00EE4A  10DE               	iorwf	postinc2,w,c
  4893  00EE4C  B4D8               	btfsc	status,2,c
  4894  00EE4E  D37D               	goto	l134
  4895  00EE50  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4896  00EE54  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4897  00EE58  50DE               	movf	postinc2,w,c
  4898  00EE5A  10DE               	iorwf	postinc2,w,c
  4899  00EE5C  B4D8               	btfsc	status,2,c
  4900  00EE5E  D375               	goto	l134
  4901                           
  4902                           ;standbyMode.c: 129: returnValue = 6;
  4903  00EE60  0E00               	movlw	0
  4904  00EE62  6E08               	movwf	check_food@returnValue+1,c
  4905  00EE64  0E06               	movlw	6
  4906  00EE66  D330               	goto	L43
  4907  00EE68                     
  4908                           ;standbyMode.c: 135: if (foodInput[1] == 3){
  4909  00EE68  EE20 F002          	lfsr	2,2
  4910  00EE6C  5003               	movf	check_food@foodInput,w,c
  4911  00EE6E  26D9               	addwf	fsr2l,f,c
  4912  00EE70  5004               	movf	check_food@foodInput+1,w,c
  4913  00EE72  22DA               	addwfc	fsr2h,f,c
  4914  00EE74  0E03               	movlw	3
  4915  00EE76  18DE               	xorwf	postinc2,w,c
  4916  00EE78  10DE               	iorwf	postinc2,w,c
  4917  00EE7A  A4D8               	btfss	status,2,c
  4918  00EE7C  D00C               	goto	l151
  4919                           
  4920                           ;standbyMode.c: 136: if (foodInput[0] == 1){
  4921  00EE7E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4922  00EE82  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4923  00EE86  04DE               	decf	postinc2,w,c
  4924  00EE88  10DE               	iorwf	postinc2,w,c
  4925  00EE8A  A4D8               	btfss	status,2,c
  4926  00EE8C  D35E               	goto	l134
  4927                           
  4928                           ;standbyMode.c: 137: returnValue = 7;
  4929  00EE8E  0E00               	movlw	0
  4930  00EE90  6E08               	movwf	check_food@returnValue+1,c
  4931  00EE92  0E07               	movlw	7
  4932  00EE94  D319               	goto	L43
  4933  00EE96                     l151:
  4934                           
  4935                           ;standbyMode.c: 140: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4936  00EE96  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4937  00EE9A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4938  00EE9E  0E03               	movlw	3
  4939  00EEA0  18DE               	xorwf	postinc2,w,c
  4940  00EEA2  10DE               	iorwf	postinc2,w,c
  4941  00EEA4  B4D8               	btfsc	status,2,c
  4942  00EEA6  D351               	goto	l134
  4943  00EEA8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4944  00EEAC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4945  00EEB0  50DE               	movf	postinc2,w,c
  4946  00EEB2  10DE               	iorwf	postinc2,w,c
  4947  00EEB4  B4D8               	btfsc	status,2,c
  4948  00EEB6  D349               	goto	l134
  4949                           
  4950                           ;standbyMode.c: 141: returnValue = 8;
  4951  00EEB8  0E00               	movlw	0
  4952  00EEBA  6E08               	movwf	check_food@returnValue+1,c
  4953  00EEBC  0E08               	movlw	8
  4954  00EEBE  D304               	goto	L43
  4955  00EEC0                     
  4956                           ;standbyMode.c: 147: if (foodInput[0] == 1 && foodInput[1] == 1){
  4957  00EEC0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4958  00EEC4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4959  00EEC8  04DE               	decf	postinc2,w,c
  4960  00EECA  10DE               	iorwf	postinc2,w,c
  4961  00EECC  A4D8               	btfss	status,2,c
  4962  00EECE  D33D               	goto	l134
  4963  00EED0  EE20 F002          	lfsr	2,2
  4964  00EED4  5003               	movf	check_food@foodInput,w,c
  4965  00EED6  26D9               	addwf	fsr2l,f,c
  4966  00EED8  5004               	movf	check_food@foodInput+1,w,c
  4967  00EEDA  22DA               	addwfc	fsr2h,f,c
  4968  00EEDC  04DE               	decf	postinc2,w,c
  4969  00EEDE  10DE               	iorwf	postinc2,w,c
  4970  00EEE0  A4D8               	btfss	status,2,c
  4971  00EEE2  D333               	goto	l134
  4972                           
  4973                           ;standbyMode.c: 148: if (foodInput[2] == 1 || foodInput[2] == 2){
  4974  00EEE4  EE20 F004          	lfsr	2,4
  4975  00EEE8  5003               	movf	check_food@foodInput,w,c
  4976  00EEEA  26D9               	addwf	fsr2l,f,c
  4977  00EEEC  5004               	movf	check_food@foodInput+1,w,c
  4978  00EEEE  22DA               	addwfc	fsr2h,f,c
  4979  00EEF0  04DE               	decf	postinc2,w,c
  4980  00EEF2  10DE               	iorwf	postinc2,w,c
  4981  00EEF4  B4D8               	btfsc	status,2,c
  4982  00EEF6  D00B               	goto	u3090
  4983  00EEF8  EE20 F004          	lfsr	2,4
  4984  00EEFC  5003               	movf	check_food@foodInput,w,c
  4985  00EEFE  26D9               	addwf	fsr2l,f,c
  4986  00EF00  5004               	movf	check_food@foodInput+1,w,c
  4987  00EF02  22DA               	addwfc	fsr2h,f,c
  4988  00EF04  0E02               	movlw	2
  4989  00EF06  18DE               	xorwf	postinc2,w,c
  4990  00EF08  10DE               	iorwf	postinc2,w,c
  4991  00EF0A  A4D8               	btfss	status,2,c
  4992  00EF0C  D31E               	goto	l134
  4993  00EF0E                     u3090:
  4994                           
  4995                           ;standbyMode.c: 149: returnValue = 9;
  4996  00EF0E  0E00               	movlw	0
  4997  00EF10  6E08               	movwf	check_food@returnValue+1,c
  4998  00EF12  0E09               	movlw	9
  4999  00EF14  D2D9               	goto	L43
  5000  00EF16                     
  5001                           ;standbyMode.c: 156: if (foodInput[0] == 1 && foodInput[1] == 1){
  5002  00EF16  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5003  00EF1A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5004  00EF1E  04DE               	decf	postinc2,w,c
  5005  00EF20  10DE               	iorwf	postinc2,w,c
  5006  00EF22  A4D8               	btfss	status,2,c
  5007  00EF24  D312               	goto	l134
  5008  00EF26  EE20 F002          	lfsr	2,2
  5009  00EF2A  5003               	movf	check_food@foodInput,w,c
  5010  00EF2C  26D9               	addwf	fsr2l,f,c
  5011  00EF2E  5004               	movf	check_food@foodInput+1,w,c
  5012  00EF30  22DA               	addwfc	fsr2h,f,c
  5013  00EF32  04DE               	decf	postinc2,w,c
  5014  00EF34  10DE               	iorwf	postinc2,w,c
  5015  00EF36  A4D8               	btfss	status,2,c
  5016  00EF38  D308               	goto	l134
  5017                           
  5018                           ;standbyMode.c: 157: if (foodInput[2] == 1 || foodInput[2] == 2){
  5019  00EF3A  EE20 F004          	lfsr	2,4
  5020  00EF3E  5003               	movf	check_food@foodInput,w,c
  5021  00EF40  26D9               	addwf	fsr2l,f,c
  5022  00EF42  5004               	movf	check_food@foodInput+1,w,c
  5023  00EF44  22DA               	addwfc	fsr2h,f,c
  5024  00EF46  04DE               	decf	postinc2,w,c
  5025  00EF48  10DE               	iorwf	postinc2,w,c
  5026  00EF4A  B4D8               	btfsc	status,2,c
  5027  00EF4C  D00B               	goto	u3130
  5028  00EF4E  EE20 F004          	lfsr	2,4
  5029  00EF52  5003               	movf	check_food@foodInput,w,c
  5030  00EF54  26D9               	addwf	fsr2l,f,c
  5031  00EF56  5004               	movf	check_food@foodInput+1,w,c
  5032  00EF58  22DA               	addwfc	fsr2h,f,c
  5033  00EF5A  0E02               	movlw	2
  5034  00EF5C  18DE               	xorwf	postinc2,w,c
  5035  00EF5E  10DE               	iorwf	postinc2,w,c
  5036  00EF60  A4D8               	btfss	status,2,c
  5037  00EF62  D2F3               	goto	l134
  5038  00EF64                     u3130:
  5039                           
  5040                           ;standbyMode.c: 158: returnValue = 10;
  5041  00EF64  0E00               	movlw	0
  5042  00EF66  6E08               	movwf	check_food@returnValue+1,c
  5043  00EF68  0E0A               	movlw	10
  5044  00EF6A  D2AE               	goto	L43
  5045  00EF6C                     
  5046                           ;standbyMode.c: 165: if (foodInput[1] == 1 && foodInput[2] == 1){
  5047  00EF6C  EE20 F002          	lfsr	2,2
  5048  00EF70  5003               	movf	check_food@foodInput,w,c
  5049  00EF72  26D9               	addwf	fsr2l,f,c
  5050  00EF74  5004               	movf	check_food@foodInput+1,w,c
  5051  00EF76  22DA               	addwfc	fsr2h,f,c
  5052  00EF78  04DE               	decf	postinc2,w,c
  5053  00EF7A  10DE               	iorwf	postinc2,w,c
  5054  00EF7C  A4D8               	btfss	status,2,c
  5055  00EF7E  D2E5               	goto	l134
  5056  00EF80  EE20 F004          	lfsr	2,4
  5057  00EF84  5003               	movf	check_food@foodInput,w,c
  5058  00EF86  26D9               	addwf	fsr2l,f,c
  5059  00EF88  5004               	movf	check_food@foodInput+1,w,c
  5060  00EF8A  22DA               	addwfc	fsr2h,f,c
  5061  00EF8C  04DE               	decf	postinc2,w,c
  5062  00EF8E  10DE               	iorwf	postinc2,w,c
  5063  00EF90  A4D8               	btfss	status,2,c
  5064  00EF92  D2DB               	goto	l134
  5065                           
  5066                           ;standbyMode.c: 166: if (foodInput[0] == 1 || foodInput[0] == 2){
  5067  00EF94  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5068  00EF98  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5069  00EF9C  04DE               	decf	postinc2,w,c
  5070  00EF9E  10DE               	iorwf	postinc2,w,c
  5071  00EFA0  B4D8               	btfsc	status,2,c
  5072  00EFA2  D009               	goto	u3170
  5073  00EFA4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5074  00EFA8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5075  00EFAC  0E02               	movlw	2
  5076  00EFAE  18DE               	xorwf	postinc2,w,c
  5077  00EFB0  10DE               	iorwf	postinc2,w,c
  5078  00EFB2  A4D8               	btfss	status,2,c
  5079  00EFB4  D2CA               	goto	l134
  5080  00EFB6                     u3170:
  5081                           
  5082                           ;standbyMode.c: 167: returnValue = 11;
  5083  00EFB6  0E00               	movlw	0
  5084  00EFB8  6E08               	movwf	check_food@returnValue+1,c
  5085  00EFBA  0E0B               	movlw	11
  5086  00EFBC  D285               	goto	L43
  5087  00EFBE                     
  5088                           ;standbyMode.c: 174: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  5089  00EFBE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5090  00EFC2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5091  00EFC6  04DE               	decf	postinc2,w,c
  5092  00EFC8  10DE               	iorwf	postinc2,w,c
  5093  00EFCA  A4D8               	btfss	status,2,c
  5094  00EFCC  D018               	goto	l171
  5095  00EFCE  EE20 F002          	lfsr	2,2
  5096  00EFD2  5003               	movf	check_food@foodInput,w,c
  5097  00EFD4  26D9               	addwf	fsr2l,f,c
  5098  00EFD6  5004               	movf	check_food@foodInput+1,w,c
  5099  00EFD8  22DA               	addwfc	fsr2h,f,c
  5100  00EFDA  04DE               	decf	postinc2,w,c
  5101  00EFDC  10DE               	iorwf	postinc2,w,c
  5102  00EFDE  A4D8               	btfss	status,2,c
  5103  00EFE0  D00E               	goto	l171
  5104  00EFE2  EE20 F004          	lfsr	2,4
  5105  00EFE6  5003               	movf	check_food@foodInput,w,c
  5106  00EFE8  26D9               	addwf	fsr2l,f,c
  5107  00EFEA  5004               	movf	check_food@foodInput+1,w,c
  5108  00EFEC  22DA               	addwfc	fsr2h,f,c
  5109  00EFEE  04DE               	decf	postinc2,w,c
  5110  00EFF0  10DE               	iorwf	postinc2,w,c
  5111  00EFF2  A4D8               	btfss	status,2,c
  5112  00EFF4  D004               	goto	l171
  5113                           
  5114                           ;standbyMode.c: 175: returnValue = 12;
  5115  00EFF6  0E00               	movlw	0
  5116  00EFF8  6E08               	movwf	check_food@returnValue+1,c
  5117  00EFFA  0E0C               	movlw	12
  5118  00EFFC  D265               	goto	L43
  5119  00EFFE                     l171:
  5120                           
  5121                           ;standbyMode.c: 177: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  5122  00EFFE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5123  00F002  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5124  00F006  0E02               	movlw	2
  5125  00F008  18DE               	xorwf	postinc2,w,c
  5126  00F00A  10DE               	iorwf	postinc2,w,c
  5127  00F00C  A4D8               	btfss	status,2,c
  5128  00F00E  D018               	goto	l173
  5129  00F010  EE20 F002          	lfsr	2,2
  5130  00F014  5003               	movf	check_food@foodInput,w,c
  5131  00F016  26D9               	addwf	fsr2l,f,c
  5132  00F018  5004               	movf	check_food@foodInput+1,w,c
  5133  00F01A  22DA               	addwfc	fsr2h,f,c
  5134  00F01C  04DE               	decf	postinc2,w,c
  5135  00F01E  10DE               	iorwf	postinc2,w,c
  5136  00F020  A4D8               	btfss	status,2,c
  5137  00F022  D00E               	goto	l173
  5138  00F024  EE20 F004          	lfsr	2,4
  5139  00F028  5003               	movf	check_food@foodInput,w,c
  5140  00F02A  26D9               	addwf	fsr2l,f,c
  5141  00F02C  5004               	movf	check_food@foodInput+1,w,c
  5142  00F02E  22DA               	addwfc	fsr2h,f,c
  5143  00F030  04DE               	decf	postinc2,w,c
  5144  00F032  10DE               	iorwf	postinc2,w,c
  5145  00F034  A4D8               	btfss	status,2,c
  5146  00F036  D004               	goto	l173
  5147                           
  5148                           ;standbyMode.c: 178: returnValue = 13;
  5149  00F038  0E00               	movlw	0
  5150  00F03A  6E08               	movwf	check_food@returnValue+1,c
  5151  00F03C  0E0D               	movlw	13
  5152  00F03E  D244               	goto	L43
  5153  00F040                     l173:
  5154                           
  5155                           ;standbyMode.c: 180: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  5156  00F040  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5157  00F044  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5158  00F048  04DE               	decf	postinc2,w,c
  5159  00F04A  10DE               	iorwf	postinc2,w,c
  5160  00F04C  A4D8               	btfss	status,2,c
  5161  00F04E  D019               	goto	l175
  5162  00F050  EE20 F002          	lfsr	2,2
  5163  00F054  5003               	movf	check_food@foodInput,w,c
  5164  00F056  26D9               	addwf	fsr2l,f,c
  5165  00F058  5004               	movf	check_food@foodInput+1,w,c
  5166  00F05A  22DA               	addwfc	fsr2h,f,c
  5167  00F05C  0E02               	movlw	2
  5168  00F05E  18DE               	xorwf	postinc2,w,c
  5169  00F060  10DE               	iorwf	postinc2,w,c
  5170  00F062  A4D8               	btfss	status,2,c
  5171  00F064  D00E               	goto	l175
  5172  00F066  EE20 F004          	lfsr	2,4
  5173  00F06A  5003               	movf	check_food@foodInput,w,c
  5174  00F06C  26D9               	addwf	fsr2l,f,c
  5175  00F06E  5004               	movf	check_food@foodInput+1,w,c
  5176  00F070  22DA               	addwfc	fsr2h,f,c
  5177  00F072  04DE               	decf	postinc2,w,c
  5178  00F074  10DE               	iorwf	postinc2,w,c
  5179  00F076  A4D8               	btfss	status,2,c
  5180  00F078  D004               	goto	l175
  5181                           
  5182                           ;standbyMode.c: 181: returnValue = 14;
  5183  00F07A  0E00               	movlw	0
  5184  00F07C  6E08               	movwf	check_food@returnValue+1,c
  5185  00F07E  0E0E               	movlw	14
  5186  00F080  D223               	goto	L43
  5187  00F082                     l175:
  5188                           
  5189                           ;standbyMode.c: 183: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  5190  00F082  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5191  00F086  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5192  00F08A  04DE               	decf	postinc2,w,c
  5193  00F08C  10DE               	iorwf	postinc2,w,c
  5194  00F08E  A4D8               	btfss	status,2,c
  5195  00F090  D25C               	goto	l134
  5196  00F092  EE20 F002          	lfsr	2,2
  5197  00F096  5003               	movf	check_food@foodInput,w,c
  5198  00F098  26D9               	addwf	fsr2l,f,c
  5199  00F09A  5004               	movf	check_food@foodInput+1,w,c
  5200  00F09C  22DA               	addwfc	fsr2h,f,c
  5201  00F09E  04DE               	decf	postinc2,w,c
  5202  00F0A0  10DE               	iorwf	postinc2,w,c
  5203  00F0A2  A4D8               	btfss	status,2,c
  5204  00F0A4  D252               	goto	l134
  5205  00F0A6  EE20 F004          	lfsr	2,4
  5206  00F0AA  5003               	movf	check_food@foodInput,w,c
  5207  00F0AC  26D9               	addwf	fsr2l,f,c
  5208  00F0AE  5004               	movf	check_food@foodInput+1,w,c
  5209  00F0B0  22DA               	addwfc	fsr2h,f,c
  5210  00F0B2  0E02               	movlw	2
  5211  00F0B4  18DE               	xorwf	postinc2,w,c
  5212  00F0B6  10DE               	iorwf	postinc2,w,c
  5213  00F0B8  A4D8               	btfss	status,2,c
  5214  00F0BA  D247               	goto	l134
  5215                           
  5216                           ;standbyMode.c: 184: returnValue = 15;
  5217  00F0BC  0E00               	movlw	0
  5218  00F0BE  6E08               	movwf	check_food@returnValue+1,c
  5219  00F0C0  0E0F               	movlw	15
  5220  00F0C2  D202               	goto	L43
  5221  00F0C4                     
  5222                           ;standbyMode.c: 190: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  5223  00F0C4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5224  00F0C8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5225  00F0CC  04DE               	decf	postinc2,w,c
  5226  00F0CE  10DE               	iorwf	postinc2,w,c
  5227  00F0D0  A4D8               	btfss	status,2,c
  5228  00F0D2  D018               	goto	l179
  5229  00F0D4  EE20 F002          	lfsr	2,2
  5230  00F0D8  5003               	movf	check_food@foodInput,w,c
  5231  00F0DA  26D9               	addwf	fsr2l,f,c
  5232  00F0DC  5004               	movf	check_food@foodInput+1,w,c
  5233  00F0DE  22DA               	addwfc	fsr2h,f,c
  5234  00F0E0  04DE               	decf	postinc2,w,c
  5235  00F0E2  10DE               	iorwf	postinc2,w,c
  5236  00F0E4  A4D8               	btfss	status,2,c
  5237  00F0E6  D00E               	goto	l179
  5238  00F0E8  EE20 F004          	lfsr	2,4
  5239  00F0EC  5003               	movf	check_food@foodInput,w,c
  5240  00F0EE  26D9               	addwf	fsr2l,f,c
  5241  00F0F0  5004               	movf	check_food@foodInput+1,w,c
  5242  00F0F2  22DA               	addwfc	fsr2h,f,c
  5243  00F0F4  04DE               	decf	postinc2,w,c
  5244  00F0F6  10DE               	iorwf	postinc2,w,c
  5245  00F0F8  A4D8               	btfss	status,2,c
  5246  00F0FA  D004               	goto	l179
  5247                           
  5248                           ;standbyMode.c: 191: returnValue = 16;
  5249  00F0FC  0E00               	movlw	0
  5250  00F0FE  6E08               	movwf	check_food@returnValue+1,c
  5251  00F100  0E10               	movlw	16
  5252  00F102  D1E2               	goto	L43
  5253  00F104                     l179:
  5254                           
  5255                           ;standbyMode.c: 193: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  5256  00F104  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5257  00F108  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5258  00F10C  0E02               	movlw	2
  5259  00F10E  18DE               	xorwf	postinc2,w,c
  5260  00F110  10DE               	iorwf	postinc2,w,c
  5261  00F112  A4D8               	btfss	status,2,c
  5262  00F114  D018               	goto	l181
  5263  00F116  EE20 F002          	lfsr	2,2
  5264  00F11A  5003               	movf	check_food@foodInput,w,c
  5265  00F11C  26D9               	addwf	fsr2l,f,c
  5266  00F11E  5004               	movf	check_food@foodInput+1,w,c
  5267  00F120  22DA               	addwfc	fsr2h,f,c
  5268  00F122  04DE               	decf	postinc2,w,c
  5269  00F124  10DE               	iorwf	postinc2,w,c
  5270  00F126  A4D8               	btfss	status,2,c
  5271  00F128  D00E               	goto	l181
  5272  00F12A  EE20 F004          	lfsr	2,4
  5273  00F12E  5003               	movf	check_food@foodInput,w,c
  5274  00F130  26D9               	addwf	fsr2l,f,c
  5275  00F132  5004               	movf	check_food@foodInput+1,w,c
  5276  00F134  22DA               	addwfc	fsr2h,f,c
  5277  00F136  04DE               	decf	postinc2,w,c
  5278  00F138  10DE               	iorwf	postinc2,w,c
  5279  00F13A  A4D8               	btfss	status,2,c
  5280  00F13C  D004               	goto	l181
  5281                           
  5282                           ;standbyMode.c: 194: returnValue = 17;
  5283  00F13E  0E00               	movlw	0
  5284  00F140  6E08               	movwf	check_food@returnValue+1,c
  5285  00F142  0E11               	movlw	17
  5286  00F144  D1C1               	goto	L43
  5287  00F146                     l181:
  5288                           
  5289                           ;standbyMode.c: 196: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  5290  00F146  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5291  00F14A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5292  00F14E  04DE               	decf	postinc2,w,c
  5293  00F150  10DE               	iorwf	postinc2,w,c
  5294  00F152  A4D8               	btfss	status,2,c
  5295  00F154  D019               	goto	l183
  5296  00F156  EE20 F002          	lfsr	2,2
  5297  00F15A  5003               	movf	check_food@foodInput,w,c
  5298  00F15C  26D9               	addwf	fsr2l,f,c
  5299  00F15E  5004               	movf	check_food@foodInput+1,w,c
  5300  00F160  22DA               	addwfc	fsr2h,f,c
  5301  00F162  0E02               	movlw	2
  5302  00F164  18DE               	xorwf	postinc2,w,c
  5303  00F166  10DE               	iorwf	postinc2,w,c
  5304  00F168  A4D8               	btfss	status,2,c
  5305  00F16A  D00E               	goto	l183
  5306  00F16C  EE20 F004          	lfsr	2,4
  5307  00F170  5003               	movf	check_food@foodInput,w,c
  5308  00F172  26D9               	addwf	fsr2l,f,c
  5309  00F174  5004               	movf	check_food@foodInput+1,w,c
  5310  00F176  22DA               	addwfc	fsr2h,f,c
  5311  00F178  04DE               	decf	postinc2,w,c
  5312  00F17A  10DE               	iorwf	postinc2,w,c
  5313  00F17C  A4D8               	btfss	status,2,c
  5314  00F17E  D004               	goto	l183
  5315                           
  5316                           ;standbyMode.c: 197: returnValue = 18;
  5317  00F180  0E00               	movlw	0
  5318  00F182  6E08               	movwf	check_food@returnValue+1,c
  5319  00F184  0E12               	movlw	18
  5320  00F186  D1A0               	goto	L43
  5321  00F188                     l183:
  5322                           
  5323                           ;standbyMode.c: 199: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  5324  00F188  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5325  00F18C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5326  00F190  04DE               	decf	postinc2,w,c
  5327  00F192  10DE               	iorwf	postinc2,w,c
  5328  00F194  A4D8               	btfss	status,2,c
  5329  00F196  D1D9               	goto	l134
  5330  00F198  EE20 F002          	lfsr	2,2
  5331  00F19C  5003               	movf	check_food@foodInput,w,c
  5332  00F19E  26D9               	addwf	fsr2l,f,c
  5333  00F1A0  5004               	movf	check_food@foodInput+1,w,c
  5334  00F1A2  22DA               	addwfc	fsr2h,f,c
  5335  00F1A4  04DE               	decf	postinc2,w,c
  5336  00F1A6  10DE               	iorwf	postinc2,w,c
  5337  00F1A8  A4D8               	btfss	status,2,c
  5338  00F1AA  D1CF               	goto	l134
  5339  00F1AC  EE20 F004          	lfsr	2,4
  5340  00F1B0  5003               	movf	check_food@foodInput,w,c
  5341  00F1B2  26D9               	addwf	fsr2l,f,c
  5342  00F1B4  5004               	movf	check_food@foodInput+1,w,c
  5343  00F1B6  22DA               	addwfc	fsr2h,f,c
  5344  00F1B8  0E02               	movlw	2
  5345  00F1BA  18DE               	xorwf	postinc2,w,c
  5346  00F1BC  10DE               	iorwf	postinc2,w,c
  5347  00F1BE  A4D8               	btfss	status,2,c
  5348  00F1C0  D1C4               	goto	l134
  5349                           
  5350                           ;standbyMode.c: 200: returnValue = 19;
  5351  00F1C2  0E00               	movlw	0
  5352  00F1C4  6E08               	movwf	check_food@returnValue+1,c
  5353  00F1C6  0E13               	movlw	19
  5354  00F1C8  D17F               	goto	L43
  5355  00F1CA                     
  5356                           ;standbyMode.c: 206: if (foodInput[0] == 1 && foodInput[1] == 1){
  5357  00F1CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5358  00F1CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5359  00F1D2  04DE               	decf	postinc2,w,c
  5360  00F1D4  10DE               	iorwf	postinc2,w,c
  5361  00F1D6  A4D8               	btfss	status,2,c
  5362  00F1D8  D1B8               	goto	l134
  5363  00F1DA  EE20 F002          	lfsr	2,2
  5364  00F1DE  5003               	movf	check_food@foodInput,w,c
  5365  00F1E0  26D9               	addwf	fsr2l,f,c
  5366  00F1E2  5004               	movf	check_food@foodInput+1,w,c
  5367  00F1E4  22DA               	addwfc	fsr2h,f,c
  5368  00F1E6  04DE               	decf	postinc2,w,c
  5369  00F1E8  10DE               	iorwf	postinc2,w,c
  5370  00F1EA  A4D8               	btfss	status,2,c
  5371  00F1EC  D1AE               	goto	l134
  5372                           
  5373                           ;standbyMode.c: 207: if (foodInput[2] == 1 || foodInput[2] == 2){
  5374  00F1EE  EE20 F004          	lfsr	2,4
  5375  00F1F2  5003               	movf	check_food@foodInput,w,c
  5376  00F1F4  26D9               	addwf	fsr2l,f,c
  5377  00F1F6  5004               	movf	check_food@foodInput+1,w,c
  5378  00F1F8  22DA               	addwfc	fsr2h,f,c
  5379  00F1FA  04DE               	decf	postinc2,w,c
  5380  00F1FC  10DE               	iorwf	postinc2,w,c
  5381  00F1FE  B4D8               	btfsc	status,2,c
  5382  00F200  D00B               	goto	u3450
  5383  00F202  EE20 F004          	lfsr	2,4
  5384  00F206  5003               	movf	check_food@foodInput,w,c
  5385  00F208  26D9               	addwf	fsr2l,f,c
  5386  00F20A  5004               	movf	check_food@foodInput+1,w,c
  5387  00F20C  22DA               	addwfc	fsr2h,f,c
  5388  00F20E  0E02               	movlw	2
  5389  00F210  18DE               	xorwf	postinc2,w,c
  5390  00F212  10DE               	iorwf	postinc2,w,c
  5391  00F214  A4D8               	btfss	status,2,c
  5392  00F216  D199               	goto	l134
  5393  00F218                     u3450:
  5394                           
  5395                           ;standbyMode.c: 208: returnValue = 20;
  5396  00F218  0E00               	movlw	0
  5397  00F21A  6E08               	movwf	check_food@returnValue+1,c
  5398  00F21C  0E14               	movlw	20
  5399  00F21E  D154               	goto	L43
  5400  00F220                     
  5401                           ;standbyMode.c: 215: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  5402  00F220  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5403  00F224  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5404  00F228  04DE               	decf	postinc2,w,c
  5405  00F22A  10DE               	iorwf	postinc2,w,c
  5406  00F22C  A4D8               	btfss	status,2,c
  5407  00F22E  D018               	goto	l192
  5408  00F230  EE20 F002          	lfsr	2,2
  5409  00F234  5003               	movf	check_food@foodInput,w,c
  5410  00F236  26D9               	addwf	fsr2l,f,c
  5411  00F238  5004               	movf	check_food@foodInput+1,w,c
  5412  00F23A  22DA               	addwfc	fsr2h,f,c
  5413  00F23C  04DE               	decf	postinc2,w,c
  5414  00F23E  10DE               	iorwf	postinc2,w,c
  5415  00F240  A4D8               	btfss	status,2,c
  5416  00F242  D00E               	goto	l192
  5417  00F244  EE20 F004          	lfsr	2,4
  5418  00F248  5003               	movf	check_food@foodInput,w,c
  5419  00F24A  26D9               	addwf	fsr2l,f,c
  5420  00F24C  5004               	movf	check_food@foodInput+1,w,c
  5421  00F24E  22DA               	addwfc	fsr2h,f,c
  5422  00F250  04DE               	decf	postinc2,w,c
  5423  00F252  10DE               	iorwf	postinc2,w,c
  5424  00F254  A4D8               	btfss	status,2,c
  5425  00F256  D004               	goto	l192
  5426                           
  5427                           ;standbyMode.c: 216: returnValue = 21;
  5428  00F258  0E00               	movlw	0
  5429  00F25A  6E08               	movwf	check_food@returnValue+1,c
  5430  00F25C  0E15               	movlw	21
  5431  00F25E  D134               	goto	L43
  5432  00F260                     l192:
  5433                           
  5434                           ;standbyMode.c: 218: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  5435  00F260  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5436  00F264  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5437  00F268  0E02               	movlw	2
  5438  00F26A  18DE               	xorwf	postinc2,w,c
  5439  00F26C  10DE               	iorwf	postinc2,w,c
  5440  00F26E  A4D8               	btfss	status,2,c
  5441  00F270  D018               	goto	l194
  5442  00F272  EE20 F002          	lfsr	2,2
  5443  00F276  5003               	movf	check_food@foodInput,w,c
  5444  00F278  26D9               	addwf	fsr2l,f,c
  5445  00F27A  5004               	movf	check_food@foodInput+1,w,c
  5446  00F27C  22DA               	addwfc	fsr2h,f,c
  5447  00F27E  04DE               	decf	postinc2,w,c
  5448  00F280  10DE               	iorwf	postinc2,w,c
  5449  00F282  A4D8               	btfss	status,2,c
  5450  00F284  D00E               	goto	l194
  5451  00F286  EE20 F004          	lfsr	2,4
  5452  00F28A  5003               	movf	check_food@foodInput,w,c
  5453  00F28C  26D9               	addwf	fsr2l,f,c
  5454  00F28E  5004               	movf	check_food@foodInput+1,w,c
  5455  00F290  22DA               	addwfc	fsr2h,f,c
  5456  00F292  04DE               	decf	postinc2,w,c
  5457  00F294  10DE               	iorwf	postinc2,w,c
  5458  00F296  A4D8               	btfss	status,2,c
  5459  00F298  D004               	goto	l194
  5460                           
  5461                           ;standbyMode.c: 219: returnValue = 22;
  5462  00F29A  0E00               	movlw	0
  5463  00F29C  6E08               	movwf	check_food@returnValue+1,c
  5464  00F29E  0E16               	movlw	22
  5465  00F2A0  D113               	goto	L43
  5466  00F2A2                     l194:
  5467                           
  5468                           ;standbyMode.c: 221: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  5469  00F2A2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5470  00F2A6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5471  00F2AA  04DE               	decf	postinc2,w,c
  5472  00F2AC  10DE               	iorwf	postinc2,w,c
  5473  00F2AE  A4D8               	btfss	status,2,c
  5474  00F2B0  D019               	goto	l196
  5475  00F2B2  EE20 F002          	lfsr	2,2
  5476  00F2B6  5003               	movf	check_food@foodInput,w,c
  5477  00F2B8  26D9               	addwf	fsr2l,f,c
  5478  00F2BA  5004               	movf	check_food@foodInput+1,w,c
  5479  00F2BC  22DA               	addwfc	fsr2h,f,c
  5480  00F2BE  0E02               	movlw	2
  5481  00F2C0  18DE               	xorwf	postinc2,w,c
  5482  00F2C2  10DE               	iorwf	postinc2,w,c
  5483  00F2C4  A4D8               	btfss	status,2,c
  5484  00F2C6  D00E               	goto	l196
  5485  00F2C8  EE20 F004          	lfsr	2,4
  5486  00F2CC  5003               	movf	check_food@foodInput,w,c
  5487  00F2CE  26D9               	addwf	fsr2l,f,c
  5488  00F2D0  5004               	movf	check_food@foodInput+1,w,c
  5489  00F2D2  22DA               	addwfc	fsr2h,f,c
  5490  00F2D4  04DE               	decf	postinc2,w,c
  5491  00F2D6  10DE               	iorwf	postinc2,w,c
  5492  00F2D8  A4D8               	btfss	status,2,c
  5493  00F2DA  D004               	goto	l196
  5494                           
  5495                           ;standbyMode.c: 222: returnValue = 23;
  5496  00F2DC  0E00               	movlw	0
  5497  00F2DE  6E08               	movwf	check_food@returnValue+1,c
  5498  00F2E0  0E17               	movlw	23
  5499  00F2E2  D0F2               	goto	L43
  5500  00F2E4                     l196:
  5501                           
  5502                           ;standbyMode.c: 224: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  5503  00F2E4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5504  00F2E8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5505  00F2EC  04DE               	decf	postinc2,w,c
  5506  00F2EE  10DE               	iorwf	postinc2,w,c
  5507  00F2F0  A4D8               	btfss	status,2,c
  5508  00F2F2  D12B               	goto	l134
  5509  00F2F4  EE20 F002          	lfsr	2,2
  5510  00F2F8  5003               	movf	check_food@foodInput,w,c
  5511  00F2FA  26D9               	addwf	fsr2l,f,c
  5512  00F2FC  5004               	movf	check_food@foodInput+1,w,c
  5513  00F2FE  22DA               	addwfc	fsr2h,f,c
  5514  00F300  04DE               	decf	postinc2,w,c
  5515  00F302  10DE               	iorwf	postinc2,w,c
  5516  00F304  A4D8               	btfss	status,2,c
  5517  00F306  D121               	goto	l134
  5518  00F308  EE20 F004          	lfsr	2,4
  5519  00F30C  5003               	movf	check_food@foodInput,w,c
  5520  00F30E  26D9               	addwf	fsr2l,f,c
  5521  00F310  5004               	movf	check_food@foodInput+1,w,c
  5522  00F312  22DA               	addwfc	fsr2h,f,c
  5523  00F314  0E02               	movlw	2
  5524  00F316  18DE               	xorwf	postinc2,w,c
  5525  00F318  10DE               	iorwf	postinc2,w,c
  5526  00F31A  A4D8               	btfss	status,2,c
  5527  00F31C  D116               	goto	l134
  5528                           
  5529                           ;standbyMode.c: 225: returnValue = 24;
  5530  00F31E  0E00               	movlw	0
  5531  00F320  6E08               	movwf	check_food@returnValue+1,c
  5532  00F322  0E18               	movlw	24
  5533  00F324  D0D1               	goto	L43
  5534  00F326                     
  5535                           ;standbyMode.c: 231: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5536  00F326  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5537  00F32A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5538  00F32E  04DE               	decf	postinc2,w,c
  5539  00F330  10DE               	iorwf	postinc2,w,c
  5540  00F332  A4D8               	btfss	status,2,c
  5541  00F334  D10A               	goto	l134
  5542  00F336  EE20 F002          	lfsr	2,2
  5543  00F33A  5003               	movf	check_food@foodInput,w,c
  5544  00F33C  26D9               	addwf	fsr2l,f,c
  5545  00F33E  5004               	movf	check_food@foodInput+1,w,c
  5546  00F340  22DA               	addwfc	fsr2h,f,c
  5547  00F342  04DE               	decf	postinc2,w,c
  5548  00F344  10DE               	iorwf	postinc2,w,c
  5549  00F346  A4D8               	btfss	status,2,c
  5550  00F348  D100               	goto	l134
  5551  00F34A  EE20 F004          	lfsr	2,4
  5552  00F34E  5003               	movf	check_food@foodInput,w,c
  5553  00F350  26D9               	addwf	fsr2l,f,c
  5554  00F352  5004               	movf	check_food@foodInput+1,w,c
  5555  00F354  22DA               	addwfc	fsr2h,f,c
  5556  00F356  04DE               	decf	postinc2,w,c
  5557  00F358  10DE               	iorwf	postinc2,w,c
  5558  00F35A  A4D8               	btfss	status,2,c
  5559  00F35C  D0F6               	goto	l134
  5560  00F35E  EE20 F006          	lfsr	2,6
  5561  00F362  5003               	movf	check_food@foodInput,w,c
  5562  00F364  26D9               	addwf	fsr2l,f,c
  5563  00F366  5004               	movf	check_food@foodInput+1,w,c
  5564  00F368  22DA               	addwfc	fsr2h,f,c
  5565  00F36A  04DE               	decf	postinc2,w,c
  5566  00F36C  10DE               	iorwf	postinc2,w,c
  5567  00F36E  A4D8               	btfss	status,2,c
  5568  00F370  D0EC               	goto	l134
  5569                           
  5570                           ;standbyMode.c: 232: returnValue = 25;
  5571  00F372  0E00               	movlw	0
  5572  00F374  6E08               	movwf	check_food@returnValue+1,c
  5573  00F376  0E19               	movlw	25
  5574  00F378  D0A7               	goto	L43
  5575  00F37A                     
  5576                           ;standbyMode.c: 238: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5577  00F37A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5578  00F37E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5579  00F382  04DE               	decf	postinc2,w,c
  5580  00F384  10DE               	iorwf	postinc2,w,c
  5581  00F386  A4D8               	btfss	status,2,c
  5582  00F388  D0E0               	goto	l134
  5583  00F38A  EE20 F002          	lfsr	2,2
  5584  00F38E  5003               	movf	check_food@foodInput,w,c
  5585  00F390  26D9               	addwf	fsr2l,f,c
  5586  00F392  5004               	movf	check_food@foodInput+1,w,c
  5587  00F394  22DA               	addwfc	fsr2h,f,c
  5588  00F396  04DE               	decf	postinc2,w,c
  5589  00F398  10DE               	iorwf	postinc2,w,c
  5590  00F39A  A4D8               	btfss	status,2,c
  5591  00F39C  D0D6               	goto	l134
  5592  00F39E  EE20 F004          	lfsr	2,4
  5593  00F3A2  5003               	movf	check_food@foodInput,w,c
  5594  00F3A4  26D9               	addwf	fsr2l,f,c
  5595  00F3A6  5004               	movf	check_food@foodInput+1,w,c
  5596  00F3A8  22DA               	addwfc	fsr2h,f,c
  5597  00F3AA  04DE               	decf	postinc2,w,c
  5598  00F3AC  10DE               	iorwf	postinc2,w,c
  5599  00F3AE  A4D8               	btfss	status,2,c
  5600  00F3B0  D0CC               	goto	l134
  5601  00F3B2  EE20 F006          	lfsr	2,6
  5602  00F3B6  5003               	movf	check_food@foodInput,w,c
  5603  00F3B8  26D9               	addwf	fsr2l,f,c
  5604  00F3BA  5004               	movf	check_food@foodInput+1,w,c
  5605  00F3BC  22DA               	addwfc	fsr2h,f,c
  5606  00F3BE  04DE               	decf	postinc2,w,c
  5607  00F3C0  10DE               	iorwf	postinc2,w,c
  5608  00F3C2  A4D8               	btfss	status,2,c
  5609  00F3C4  D0C2               	goto	l134
  5610                           
  5611                           ;standbyMode.c: 239: returnValue = 26;
  5612  00F3C6  0E00               	movlw	0
  5613  00F3C8  6E08               	movwf	check_food@returnValue+1,c
  5614  00F3CA  0E1A               	movlw	26
  5615  00F3CC  D07D               	goto	L43
  5616  00F3CE                     
  5617                           ;standbyMode.c: 245: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5618  00F3CE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5619  00F3D2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5620  00F3D6  04DE               	decf	postinc2,w,c
  5621  00F3D8  10DE               	iorwf	postinc2,w,c
  5622  00F3DA  A4D8               	btfss	status,2,c
  5623  00F3DC  D0B6               	goto	l134
  5624  00F3DE  EE20 F002          	lfsr	2,2
  5625  00F3E2  5003               	movf	check_food@foodInput,w,c
  5626  00F3E4  26D9               	addwf	fsr2l,f,c
  5627  00F3E6  5004               	movf	check_food@foodInput+1,w,c
  5628  00F3E8  22DA               	addwfc	fsr2h,f,c
  5629  00F3EA  04DE               	decf	postinc2,w,c
  5630  00F3EC  10DE               	iorwf	postinc2,w,c
  5631  00F3EE  A4D8               	btfss	status,2,c
  5632  00F3F0  D0AC               	goto	l134
  5633  00F3F2  EE20 F004          	lfsr	2,4
  5634  00F3F6  5003               	movf	check_food@foodInput,w,c
  5635  00F3F8  26D9               	addwf	fsr2l,f,c
  5636  00F3FA  5004               	movf	check_food@foodInput+1,w,c
  5637  00F3FC  22DA               	addwfc	fsr2h,f,c
  5638  00F3FE  04DE               	decf	postinc2,w,c
  5639  00F400  10DE               	iorwf	postinc2,w,c
  5640  00F402  A4D8               	btfss	status,2,c
  5641  00F404  D0A2               	goto	l134
  5642  00F406  EE20 F006          	lfsr	2,6
  5643  00F40A  5003               	movf	check_food@foodInput,w,c
  5644  00F40C  26D9               	addwf	fsr2l,f,c
  5645  00F40E  5004               	movf	check_food@foodInput+1,w,c
  5646  00F410  22DA               	addwfc	fsr2h,f,c
  5647  00F412  04DE               	decf	postinc2,w,c
  5648  00F414  10DE               	iorwf	postinc2,w,c
  5649  00F416  A4D8               	btfss	status,2,c
  5650  00F418  D098               	goto	l134
  5651                           
  5652                           ;standbyMode.c: 246: returnValue = 27;
  5653  00F41A  0E00               	movlw	0
  5654  00F41C  6E08               	movwf	check_food@returnValue+1,c
  5655  00F41E  0E1B               	movlw	27
  5656  00F420  D053               	goto	L43
  5657  00F422                     
  5658                           ;standbyMode.c: 252: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5659  00F422  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5660  00F426  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5661  00F42A  04DE               	decf	postinc2,w,c
  5662  00F42C  10DE               	iorwf	postinc2,w,c
  5663  00F42E  A4D8               	btfss	status,2,c
  5664  00F430  D08C               	goto	l134
  5665  00F432  EE20 F002          	lfsr	2,2
  5666  00F436  5003               	movf	check_food@foodInput,w,c
  5667  00F438  26D9               	addwf	fsr2l,f,c
  5668  00F43A  5004               	movf	check_food@foodInput+1,w,c
  5669  00F43C  22DA               	addwfc	fsr2h,f,c
  5670  00F43E  04DE               	decf	postinc2,w,c
  5671  00F440  10DE               	iorwf	postinc2,w,c
  5672  00F442  A4D8               	btfss	status,2,c
  5673  00F444  D082               	goto	l134
  5674  00F446  EE20 F004          	lfsr	2,4
  5675  00F44A  5003               	movf	check_food@foodInput,w,c
  5676  00F44C  26D9               	addwf	fsr2l,f,c
  5677  00F44E  5004               	movf	check_food@foodInput+1,w,c
  5678  00F450  22DA               	addwfc	fsr2h,f,c
  5679  00F452  04DE               	decf	postinc2,w,c
  5680  00F454  10DE               	iorwf	postinc2,w,c
  5681  00F456  A4D8               	btfss	status,2,c
  5682  00F458  D078               	goto	l134
  5683  00F45A  EE20 F006          	lfsr	2,6
  5684  00F45E  5003               	movf	check_food@foodInput,w,c
  5685  00F460  26D9               	addwf	fsr2l,f,c
  5686  00F462  5004               	movf	check_food@foodInput+1,w,c
  5687  00F464  22DA               	addwfc	fsr2h,f,c
  5688  00F466  04DE               	decf	postinc2,w,c
  5689  00F468  10DE               	iorwf	postinc2,w,c
  5690  00F46A  A4D8               	btfss	status,2,c
  5691  00F46C  D06E               	goto	l134
  5692                           
  5693                           ;standbyMode.c: 253: returnValue = 28;
  5694  00F46E  0E00               	movlw	0
  5695  00F470  6E08               	movwf	check_food@returnValue+1,c
  5696  00F472  0E1C               	movlw	28
  5697  00F474  D029               	goto	L43
  5698  00F476                     
  5699                           ;standbyMode.c: 259: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5700  00F476  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5701  00F47A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5702  00F47E  04DE               	decf	postinc2,w,c
  5703  00F480  10DE               	iorwf	postinc2,w,c
  5704  00F482  A4D8               	btfss	status,2,c
  5705  00F484  D062               	goto	l134
  5706  00F486  EE20 F002          	lfsr	2,2
  5707  00F48A  5003               	movf	check_food@foodInput,w,c
  5708  00F48C  26D9               	addwf	fsr2l,f,c
  5709  00F48E  5004               	movf	check_food@foodInput+1,w,c
  5710  00F490  22DA               	addwfc	fsr2h,f,c
  5711  00F492  04DE               	decf	postinc2,w,c
  5712  00F494  10DE               	iorwf	postinc2,w,c
  5713  00F496  A4D8               	btfss	status,2,c
  5714  00F498  D058               	goto	l134
  5715  00F49A  EE20 F004          	lfsr	2,4
  5716  00F49E  5003               	movf	check_food@foodInput,w,c
  5717  00F4A0  26D9               	addwf	fsr2l,f,c
  5718  00F4A2  5004               	movf	check_food@foodInput+1,w,c
  5719  00F4A4  22DA               	addwfc	fsr2h,f,c
  5720  00F4A6  04DE               	decf	postinc2,w,c
  5721  00F4A8  10DE               	iorwf	postinc2,w,c
  5722  00F4AA  A4D8               	btfss	status,2,c
  5723  00F4AC  D04E               	goto	l134
  5724  00F4AE  EE20 F006          	lfsr	2,6
  5725  00F4B2  5003               	movf	check_food@foodInput,w,c
  5726  00F4B4  26D9               	addwf	fsr2l,f,c
  5727  00F4B6  5004               	movf	check_food@foodInput+1,w,c
  5728  00F4B8  22DA               	addwfc	fsr2h,f,c
  5729  00F4BA  04DE               	decf	postinc2,w,c
  5730  00F4BC  10DE               	iorwf	postinc2,w,c
  5731  00F4BE  A4D8               	btfss	status,2,c
  5732  00F4C0  D044               	goto	l134
  5733                           
  5734                           ;standbyMode.c: 260: returnValue = 29;
  5735  00F4C2  0E00               	movlw	0
  5736  00F4C4  6E08               	movwf	check_food@returnValue+1,c
  5737  00F4C6  0E1D               	movlw	29
  5738  00F4C8                     L43:
  5739  00F4C8  6E07               	movwf	check_food@returnValue,c
  5740                           
  5741                           ;standbyMode.c: 267: }
  5742                           
  5743                           ;standbyMode.c: 266: break;
  5744                           
  5745                           ;standbyMode.c: 265: default:
  5746                           
  5747                           ;standbyMode.c: 261: }
  5748                           ;standbyMode.c: 262: break;
  5749  00F4CA  D03F               	goto	l134
  5750  00F4CC                     l129:
  5751  00F4CC  C001  F005         	movff	check_food@sum,??_check_food
  5752  00F4D0  C002  F006         	movff	check_food@sum+1,??_check_food+1
  5753                           
  5754                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5755                           ; Switch size 1, requested type "space"
  5756                           ; Number of cases is 1, Range of values is 0 to 0
  5757                           ; switch strategies available:
  5758                           ; Name         Instructions Cycles
  5759                           ; simple_byte            4     3 (average)
  5760                           ;	Chosen strategy is simple_byte
  5761  00F4D4  5006               	movf	??_check_food+1,w,c
  5762  00F4D6  0A00               	xorlw	0	; case 0
  5763  00F4D8  A4D8               	btfss	status,2,c
  5764  00F4DA  D037               	goto	l134
  5765                           
  5766                           ; Switch size 1, requested type "space"
  5767                           ; Number of cases is 18, Range of values is 3 to 43
  5768                           ; switch strategies available:
  5769                           ; Name         Instructions Cycles
  5770                           ; simple_byte           55    28 (average)
  5771                           ;	Chosen strategy is simple_byte
  5772  00F4DC  5005               	movf	??_check_food,w,c
  5773  00F4DE  0A03               	xorlw	3	; case 3
  5774  00F4E0  B4D8               	btfsc	status,2,c
  5775  00F4E2  D424               	goto	l130
  5776  00F4E4  0A04               	xorlw	4	; case 7
  5777  00F4E6  B4D8               	btfsc	status,2,c
  5778  00F4E8  D436               	goto	l135
  5779  00F4EA  0A0D               	xorlw	13	; case 10
  5780  00F4EC  B4D8               	btfsc	status,2,c
  5781  00F4EE  D466               	goto	l143
  5782  00F4F0  0A06               	xorlw	6	; case 12
  5783  00F4F2  B4D8               	btfsc	status,2,c
  5784  00F4F4  D445               	goto	l139
  5785  00F4F6  0A01               	xorlw	1	; case 13
  5786  00F4F8  B4D8               	btfsc	status,2,c
  5787  00F4FA  D4E2               	goto	l155
  5788  00F4FC  0A02               	xorlw	2	; case 15
  5789  00F4FE  B4D8               	btfsc	status,2,c
  5790  00F500  D487               	goto	l145
  5791  00F502  0A1E               	xorlw	30	; case 17
  5792  00F504  B4D8               	btfsc	status,2,c
  5793  00F506  D532               	goto	l165
  5794  00F508  0A03               	xorlw	3	; case 18
  5795  00F50A  B4D8               	btfsc	status,2,c
  5796  00F50C  D504               	goto	l160
  5797  00F50E  0A01               	xorlw	1	; case 19
  5798  00F510  B4D8               	btfsc	status,2,c
  5799  00F512  D4AA               	goto	l150
  5800  00F514  0A05               	xorlw	5	; case 22
  5801  00F516  B4D8               	btfsc	status,2,c
  5802  00F518  D5D5               	goto	l178
  5803  00F51A  0A0F               	xorlw	15	; case 25
  5804  00F51C  B4D8               	btfsc	status,2,c
  5805  00F51E  D703               	goto	l199
  5806  00F520  0A03               	xorlw	3	; case 26
  5807  00F522  B4D8               	btfsc	status,2,c
  5808  00F524  D652               	goto	l186
  5809  00F526  0A01               	xorlw	1	; case 27
  5810  00F528  B4D8               	btfsc	status,2,c
  5811  00F52A  D549               	goto	l170
  5812  00F52C  0A06               	xorlw	6	; case 29
  5813  00F52E  B4D8               	btfsc	status,2,c
  5814  00F530  D724               	goto	l201
  5815  00F532  0A02               	xorlw	2	; case 31
  5816  00F534  B4D8               	btfsc	status,2,c
  5817  00F536  D674               	goto	l191
  5818  00F538  0A3D               	xorlw	61	; case 34
  5819  00F53A  B4D8               	btfsc	status,2,c
  5820  00F53C  D748               	goto	l203
  5821  00F53E  0A05               	xorlw	5	; case 39
  5822  00F540  B4D8               	btfsc	status,2,c
  5823  00F542  D76F               	goto	l205
  5824  00F544  0A0C               	xorlw	12	; case 43
  5825  00F546  B4D8               	btfsc	status,2,c
  5826  00F548  D796               	goto	l207
  5827  00F54A                     l134:
  5828                           
  5829                           ;standbyMode.c: 268: return returnValue;
  5830  00F54A  C007  F001         	movff	check_food@returnValue,?_check_food
  5831  00F54E  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  5832  00F552  0012               	return		;funcret
  5833  00F554                     __end_of_check_food:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           plusw1	equ	0xFE3
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           plusw2	equ	0xFDB
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _diet_press *****************
  5853 ;; Defined at:
  5854 ;;		line 536 in file "standbyMode.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  drawer          2   24[COMRAM] unsigned int 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  keypress        1   38[COMRAM] unsigned char 
  5859 ;;  dietTable       8   39[COMRAM] unsigned int [4]
  5860 ;;  sum             2   36[COMRAM] unsigned int 
  5861 ;;  count           2   34[COMRAM] unsigned int 
  5862 ;;  backCheck       2   32[COMRAM] unsigned int 
  5863 ;;  i               2   30[COMRAM] unsigned int 
  5864 ;;  previous        2   28[COMRAM] unsigned int 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  2   24[COMRAM] unsigned int 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:       23 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    3
  5881 ;; This function calls:
  5882 ;;		_lcdInst
  5883 ;;		_printf
  5884 ;;		_putch
  5885 ;; This function is called by:
  5886 ;;		_standbyMode
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text10
  5891  00E7FC                     __ptext10:
  5892                           	opt stack 0
  5893  00E7FC                     _diet_press:
  5894                           	opt stack 26
  5895                           
  5896                           ;incstack = 0
  5897                           ;standbyMode.c: 539: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5898  00E7FC  0E01               	movlw	1
  5899  00E7FE  EC02  F06E         	call	_lcdInst
  5900  00E802  0EC3               	movlw	195
  5901  00E804  6E1B               	movwf	??_diet_press& (0+255),c
  5902  00E806  0ECD               	movlw	205
  5903  00E808                     u6167:
  5904  00E808  2EE8               	decfsz	wreg,f,c
  5905  00E80A  D7FE               	bra	u6167
  5906  00E80C  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5907  00E80E  D7FC               	bra	u6167
  5908  00E810  F000               	nop	
  5909                           
  5910                           ;standbyMode.c: 540: printf("Drawer %i diet:", drawer);
  5911  00E812  0E7F               	movlw	low STR_23
  5912  00E814  6E0D               	movwf	printf@f,c
  5913  00E816  0EFE               	movlw	high STR_23
  5914  00E818  6E0E               	movwf	printf@f+1,c
  5915  00E81A  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5916  00E81E  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5917  00E822  ECDB  F06F         	call	_printf	;wreg free
  5918                           
  5919                           ;standbyMode.c: 541: lcdInst(0xC0);;
  5920  00E826  0EC0               	movlw	192
  5921  00E828  EC02  F06E         	call	_lcdInst
  5922                           
  5923                           ;standbyMode.c: 543: unsigned int count = 0;
  5924  00E82C  0E00               	movlw	0
  5925  00E82E  6E24               	movwf	diet_press@count+1,c
  5926  00E830  0E00               	movlw	0
  5927  00E832  6E23               	movwf	diet_press@count,c
  5928                           
  5929                           ;standbyMode.c: 544: unsigned int previous = 0;
  5930  00E834  0E00               	movlw	0
  5931  00E836  6E1E               	movwf	diet_press@previous+1,c
  5932  00E838  0E00               	movlw	0
  5933  00E83A  6E1D               	movwf	diet_press@previous,c
  5934                           
  5935                           ;standbyMode.c: 545: unsigned int sum = 0;
  5936  00E83C  0E00               	movlw	0
  5937  00E83E  6E26               	movwf	diet_press@sum+1,c
  5938  00E840  0E00               	movlw	0
  5939  00E842  6E25               	movwf	diet_press@sum,c
  5940                           
  5941                           ;standbyMode.c: 546: unsigned int i = 0;
  5942  00E844  0E00               	movlw	0
  5943  00E846  6E20               	movwf	diet_press@i+1,c
  5944  00E848  0E00               	movlw	0
  5945  00E84A  6E1F               	movwf	diet_press@i,c
  5946                           
  5947                           ;standbyMode.c: 547: unsigned int dietTable[4] = {0, 0, 0, 0};
  5948  00E84C  EE20  F057         	lfsr	2,diet_press@F3060
  5949  00E850  EE10  F028         	lfsr	1,diet_press@dietTable
  5950  00E854  0E07               	movlw	7
  5951  00E856                     u4121:
  5952  00E856  CFDB FFE3          	movff	plusw2,plusw1
  5953  00E85A  06E8               	decf	wreg,f,c
  5954  00E85C  E2FC               	bc	u4121
  5955                           
  5956                           ;standbyMode.c: 548: unsigned int backCheck = 0;
  5957  00E85E  0E00               	movlw	0
  5958  00E860  6E22               	movwf	diet_press@backCheck+1,c
  5959  00E862  0E00               	movlw	0
  5960  00E864  6E21               	movwf	diet_press@backCheck,c
  5961  00E866                     l306:
  5962  00E866  A281               	btfss	3969,1,c	;volatile
  5963  00E868  D7FE               	goto	l305
  5964                           
  5965                           ;standbyMode.c: 552: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5966  00E86A  3881               	swapf	3969,w,c	;volatile
  5967  00E86C  0B0F               	andlw	15
  5968  00E86E  0B0F               	andlw	15
  5969  00E870  6E27               	movwf	diet_press@keypress,c
  5970  00E872  B281               	btfsc	3969,1,c	;volatile
  5971  00E874  D7FE               	goto	l310
  5972                           
  5973                           ;standbyMode.c: 555: if(keypress == 15){
  5974  00E876  0E0F               	movlw	15
  5975  00E878  1827               	xorwf	diet_press@keypress,w,c
  5976  00E87A  B4D8               	btfsc	status,2,c
  5977  00E87C  D080               	goto	l313
  5978                           
  5979                           ;standbyMode.c: 558: else if (keypress == 14){
  5980                           
  5981                           ;standbyMode.c: 557: }
  5982                           
  5983                           ;standbyMode.c: 556: break;
  5984  00E87E  0E0E               	movlw	14
  5985  00E880  1827               	xorwf	diet_press@keypress,w,c
  5986  00E882  A4D8               	btfss	status,2,c
  5987  00E884  D005               	goto	l315
  5988                           
  5989                           ;standbyMode.c: 559: backCheck = 1;
  5990  00E886  0E00               	movlw	0
  5991  00E888  6E22               	movwf	diet_press@backCheck+1,c
  5992  00E88A  0E01               	movlw	1
  5993  00E88C  6E21               	movwf	diet_press@backCheck,c
  5994                           
  5995                           ;standbyMode.c: 560: break;
  5996  00E88E  D077               	goto	l313
  5997  00E890                     l315:
  5998                           
  5999                           ;standbyMode.c: 562: else if (keypress == 12){
  6000  00E890  0E0C               	movlw	12
  6001  00E892  1827               	xorwf	diet_press@keypress,w,c
  6002  00E894  A4D8               	btfss	status,2,c
  6003  00E896  D02D               	goto	l317
  6004                           
  6005                           ;standbyMode.c: 563: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6006  00E898  0E01               	movlw	1
  6007  00E89A  EC02  F06E         	call	_lcdInst
  6008  00E89E  0EC3               	movlw	195
  6009  00E8A0  6E1B               	movwf	??_diet_press& (0+255),c
  6010  00E8A2  0ECD               	movlw	205
  6011  00E8A4                     u6177:
  6012  00E8A4  2EE8               	decfsz	wreg,f,c
  6013  00E8A6  D7FE               	bra	u6177
  6014  00E8A8  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6015  00E8AA  D7FC               	bra	u6177
  6016  00E8AC  F000               	nop	
  6017                           
  6018                           ;standbyMode.c: 564: printf("Drawer %i diet:", drawer);
  6019  00E8AE  0E7F               	movlw	low STR_23
  6020  00E8B0  6E0D               	movwf	printf@f,c
  6021  00E8B2  0EFE               	movlw	high STR_23
  6022  00E8B4  6E0E               	movwf	printf@f+1,c
  6023  00E8B6  C019  F00F         	movff	diet_press@drawer,?_printf+2
  6024  00E8BA  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  6025  00E8BE  ECDB  F06F         	call	_printf	;wreg free
  6026                           
  6027                           ;standbyMode.c: 565: lcdInst(0xC0);;
  6028  00E8C2  0EC0               	movlw	192
  6029  00E8C4  EC02  F06E         	call	_lcdInst
  6030                           
  6031                           ;standbyMode.c: 566: count = 0;
  6032  00E8C8  0E00               	movlw	0
  6033  00E8CA  6E24               	movwf	diet_press@count+1,c
  6034  00E8CC  0E00               	movlw	0
  6035  00E8CE  6E23               	movwf	diet_press@count,c
  6036                           
  6037                           ;standbyMode.c: 567: dietTable[0] = 0;
  6038  00E8D0  0E00               	movlw	0
  6039  00E8D2  6E29               	movwf	diet_press@dietTable+1,c
  6040  00E8D4  0E00               	movlw	0
  6041  00E8D6  6E28               	movwf	diet_press@dietTable,c
  6042                           
  6043                           ;standbyMode.c: 568: dietTable[1] = 0;
  6044  00E8D8  0E00               	movlw	0
  6045  00E8DA  6E2B               	movwf	diet_press@dietTable+3,c
  6046  00E8DC  0E00               	movlw	0
  6047  00E8DE  6E2A               	movwf	diet_press@dietTable+2,c
  6048                           
  6049                           ;standbyMode.c: 569: dietTable[2] = 0;
  6050  00E8E0  0E00               	movlw	0
  6051  00E8E2  6E2D               	movwf	diet_press@dietTable+5,c
  6052  00E8E4  0E00               	movlw	0
  6053  00E8E6  6E2C               	movwf	diet_press@dietTable+4,c
  6054                           
  6055                           ;standbyMode.c: 570: dietTable[3] = 0;
  6056  00E8E8  0E00               	movlw	0
  6057  00E8EA  6E2F               	movwf	diet_press@dietTable+7,c
  6058  00E8EC  0E00               	movlw	0
  6059  00E8EE  6E2E               	movwf	diet_press@dietTable+6,c
  6060                           
  6061                           ;standbyMode.c: 571: }
  6062  00E8F0  D7BA               	goto	l305
  6063  00E8F2                     l317:
  6064                           
  6065                           ;standbyMode.c: 572: else if (count <= 3){
  6066  00E8F2  5024               	movf	diet_press@count+1,w,c
  6067  00E8F4  E1B8               	bnz	l306
  6068  00E8F6  0E04               	movlw	4
  6069  00E8F8  5C23               	subwf	diet_press@count,w,c
  6070  00E8FA  B0D8               	btfsc	status,0,c
  6071  00E8FC  D7B4               	goto	l305
  6072                           
  6073                           ;standbyMode.c: 573: if (keypress == 3 || keypress == 7){
  6074  00E8FE  0E03               	movlw	3
  6075  00E900  1827               	xorwf	diet_press@keypress,w,c
  6076  00E902  B4D8               	btfsc	status,2,c
  6077  00E904  D004               	goto	u4200
  6078  00E906  0E07               	movlw	7
  6079  00E908  1827               	xorwf	diet_press@keypress,w,c
  6080  00E90A  A4D8               	btfss	status,2,c
  6081  00E90C  D013               	goto	l320
  6082  00E90E                     u4200:
  6083                           
  6084                           ;standbyMode.c: 574: putch(input[keypress]);
  6085  00E90E  5027               	movf	diet_press@keypress,w,c
  6086  00E910  0D01               	mullw	1
  6087  00E912  0EA8               	movlw	low _input
  6088  00E914  24F3               	addwf	prodl,w,c
  6089  00E916  6EF6               	movwf	tblptrl,c
  6090  00E918  0EFD               	movlw	high _input
  6091  00E91A  20F4               	addwfc	prodh,w,c
  6092  00E91C  6EF7               	movwf	tblptrh,c
  6093  00E91E                     	if	0	;There are less than 3 active tblptr bytes
  6094  00E91E                     	endif
  6095  00E91E  0008               	tblrd		*
  6096  00E920  50F5               	movf	tablat,w,c
  6097  00E922  EC0C  F06E         	call	_putch
  6098                           
  6099                           ;standbyMode.c: 575: dietTable[count] = keypress;
  6100  00E926  5027               	movf	diet_press@keypress,w,c
  6101  00E928  6E1B               	movwf	??_diet_press& (0+255),c
  6102  00E92A  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  6103  00E92C  D01A               	goto	L62
  6104  00E92E                     l3362:
  6105                           
  6106                           ;standbyMode.c: 576: count += 1;
  6107  00E92E  4A23               	infsnz	diet_press@count,f,c
  6108  00E930  2A24               	incf	diet_press@count+1,f,c
  6109                           
  6110                           ;standbyMode.c: 577: }
  6111  00E932  D799               	goto	l305
  6112  00E934                     l320:
  6113                           
  6114                           ;standbyMode.c: 578: else if (keypress == 11){
  6115  00E934  0E0B               	movlw	11
  6116  00E936  1827               	xorwf	diet_press@keypress,w,c
  6117  00E938  A4D8               	btfss	status,2,c
  6118  00E93A  D795               	goto	l305
  6119                           
  6120                           ;standbyMode.c: 579: putch(input[keypress]);
  6121  00E93C  5027               	movf	diet_press@keypress,w,c
  6122  00E93E  0D01               	mullw	1
  6123  00E940  0EA8               	movlw	low _input
  6124  00E942  24F3               	addwf	prodl,w,c
  6125  00E944  6EF6               	movwf	tblptrl,c
  6126  00E946  0EFD               	movlw	high _input
  6127  00E948  20F4               	addwfc	prodh,w,c
  6128  00E94A  6EF7               	movwf	tblptrh,c
  6129  00E94C                     	if	0	;There are less than 3 active tblptr bytes
  6130  00E94C                     	endif
  6131  00E94C  0008               	tblrd		*
  6132  00E94E  50F5               	movf	tablat,w,c
  6133  00E950  EC0C  F06E         	call	_putch
  6134                           
  6135                           ;standbyMode.c: 580: dietTable[count] = keypress + 1;
  6136  00E954  5027               	movf	diet_press@keypress,w,c
  6137  00E956  6E1B               	movwf	??_diet_press& (0+255),c
  6138  00E958  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  6139  00E95A  0E01               	movlw	1
  6140  00E95C  261B               	addwf	??_diet_press,f,c
  6141  00E95E  0E00               	movlw	0
  6142  00E960  221C               	addwfc	??_diet_press+1,f,c
  6143  00E962                     L62:
  6144  00E962  90D8               	bcf	status,0,c
  6145  00E964  3423               	rlcf	diet_press@count,w,c
  6146  00E966  6ED9               	movwf	fsr2l,c
  6147  00E968  3424               	rlcf	diet_press@count+1,w,c
  6148  00E96A  6EDA               	movwf	fsr2h,c
  6149  00E96C  0E28               	movlw	low diet_press@dietTable
  6150  00E96E  26D9               	addwf	fsr2l,f,c
  6151  00E970  0E00               	movlw	high diet_press@dietTable
  6152  00E972  22DA               	addwfc	fsr2h,f,c
  6153  00E974  C01B  FFDE         	movff	??_diet_press,postinc2
  6154  00E978  C01C  FFDD         	movff	??_diet_press+1,postdec2
  6155  00E97C  D7D8               	goto	l3362
  6156  00E97E                     l313:
  6157                           
  6158                           ;standbyMode.c: 582: }
  6159                           ;standbyMode.c: 583: }
  6160                           ;standbyMode.c: 584: }
  6161                           ;standbyMode.c: 586: if (backCheck == 1){
  6162  00E97E  0421               	decf	diet_press@backCheck,w,c
  6163  00E980  1022               	iorwf	diet_press@backCheck+1,w,c
  6164  00E982  A4D8               	btfss	status,2,c
  6165  00E984  D004               	goto	l326
  6166                           
  6167                           ;standbyMode.c: 587: sum = 100;
  6168  00E986  0E00               	movlw	0
  6169  00E988  6E26               	movwf	diet_press@sum+1,c
  6170  00E98A  0E64               	movlw	100
  6171  00E98C  D199               	goto	L61
  6172  00E98E                     l326:
  6173                           
  6174                           ;standbyMode.c: 591: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  6175  00E98E  0E0C               	movlw	12
  6176  00E990  1828               	xorwf	diet_press@dietTable,w,c
  6177  00E992  1029               	iorwf	diet_press@dietTable+1,w,c
  6178  00E994  A4D8               	btfss	status,2,c
  6179  00E996  D010               	goto	l328
  6180  00E998  502A               	movf	diet_press@dietTable+2,w,c
  6181  00E99A  102B               	iorwf	diet_press@dietTable+3,w,c
  6182  00E99C  A4D8               	btfss	status,2,c
  6183  00E99E  D00C               	goto	l328
  6184  00E9A0  502C               	movf	diet_press@dietTable+4,w,c
  6185  00E9A2  102D               	iorwf	diet_press@dietTable+5,w,c
  6186  00E9A4  A4D8               	btfss	status,2,c
  6187  00E9A6  D008               	goto	l328
  6188  00E9A8  502E               	movf	diet_press@dietTable+6,w,c
  6189  00E9AA  102F               	iorwf	diet_press@dietTable+7,w,c
  6190  00E9AC  A4D8               	btfss	status,2,c
  6191  00E9AE  D004               	goto	l328
  6192                           
  6193                           ;standbyMode.c: 592: sum = 12;
  6194  00E9B0  0E00               	movlw	0
  6195  00E9B2  6E26               	movwf	diet_press@sum+1,c
  6196  00E9B4  0E0C               	movlw	12
  6197  00E9B6  D184               	goto	L61
  6198  00E9B8                     l328:
  6199                           
  6200                           ;standbyMode.c: 596: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  6201  00E9B8  0E03               	movlw	3
  6202  00E9BA  1828               	xorwf	diet_press@dietTable,w,c
  6203  00E9BC  1029               	iorwf	diet_press@dietTable+1,w,c
  6204  00E9BE  A4D8               	btfss	status,2,c
  6205  00E9C0  D010               	goto	l330
  6206  00E9C2  502A               	movf	diet_press@dietTable+2,w,c
  6207  00E9C4  102B               	iorwf	diet_press@dietTable+3,w,c
  6208  00E9C6  A4D8               	btfss	status,2,c
  6209  00E9C8  D00C               	goto	l330
  6210  00E9CA  502C               	movf	diet_press@dietTable+4,w,c
  6211  00E9CC  102D               	iorwf	diet_press@dietTable+5,w,c
  6212  00E9CE  A4D8               	btfss	status,2,c
  6213  00E9D0  D008               	goto	l330
  6214  00E9D2  502E               	movf	diet_press@dietTable+6,w,c
  6215  00E9D4  102F               	iorwf	diet_press@dietTable+7,w,c
  6216  00E9D6  A4D8               	btfss	status,2,c
  6217  00E9D8  D004               	goto	l330
  6218                           
  6219                           ;standbyMode.c: 597: sum = 3;
  6220  00E9DA  0E00               	movlw	0
  6221  00E9DC  6E26               	movwf	diet_press@sum+1,c
  6222  00E9DE  0E03               	movlw	3
  6223  00E9E0  D16F               	goto	L61
  6224  00E9E2                     l330:
  6225                           
  6226                           ;standbyMode.c: 601: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  6227  00E9E2  0E07               	movlw	7
  6228  00E9E4  1828               	xorwf	diet_press@dietTable,w,c
  6229  00E9E6  1029               	iorwf	diet_press@dietTable+1,w,c
  6230  00E9E8  A4D8               	btfss	status,2,c
  6231  00E9EA  D010               	goto	l332
  6232  00E9EC  502A               	movf	diet_press@dietTable+2,w,c
  6233  00E9EE  102B               	iorwf	diet_press@dietTable+3,w,c
  6234  00E9F0  A4D8               	btfss	status,2,c
  6235  00E9F2  D00C               	goto	l332
  6236  00E9F4  502C               	movf	diet_press@dietTable+4,w,c
  6237  00E9F6  102D               	iorwf	diet_press@dietTable+5,w,c
  6238  00E9F8  A4D8               	btfss	status,2,c
  6239  00E9FA  D008               	goto	l332
  6240  00E9FC  502E               	movf	diet_press@dietTable+6,w,c
  6241  00E9FE  102F               	iorwf	diet_press@dietTable+7,w,c
  6242  00EA00  A4D8               	btfss	status,2,c
  6243  00EA02  D004               	goto	l332
  6244                           
  6245                           ;standbyMode.c: 602: sum = 7;
  6246  00EA04  0E00               	movlw	0
  6247  00EA06  6E26               	movwf	diet_press@sum+1,c
  6248  00EA08  0E07               	movlw	7
  6249  00EA0A  D15A               	goto	L61
  6250  00EA0C                     l332:
  6251                           
  6252                           ;standbyMode.c: 606: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  6253  00EA0C  0E03               	movlw	3
  6254  00EA0E  1828               	xorwf	diet_press@dietTable,w,c
  6255  00EA10  1029               	iorwf	diet_press@dietTable+1,w,c
  6256  00EA12  A4D8               	btfss	status,2,c
  6257  00EA14  D011               	goto	l334
  6258  00EA16  0E07               	movlw	7
  6259  00EA18  182A               	xorwf	diet_press@dietTable+2,w,c
  6260  00EA1A  102B               	iorwf	diet_press@dietTable+3,w,c
  6261  00EA1C  A4D8               	btfss	status,2,c
  6262  00EA1E  D00C               	goto	l334
  6263  00EA20  502C               	movf	diet_press@dietTable+4,w,c
  6264  00EA22  102D               	iorwf	diet_press@dietTable+5,w,c
  6265  00EA24  A4D8               	btfss	status,2,c
  6266  00EA26  D008               	goto	l334
  6267  00EA28  502E               	movf	diet_press@dietTable+6,w,c
  6268  00EA2A  102F               	iorwf	diet_press@dietTable+7,w,c
  6269  00EA2C  A4D8               	btfss	status,2,c
  6270  00EA2E  D004               	goto	l334
  6271                           
  6272                           ;standbyMode.c: 607: sum = 10;
  6273  00EA30  0E00               	movlw	0
  6274  00EA32  6E26               	movwf	diet_press@sum+1,c
  6275  00EA34  0E0A               	movlw	10
  6276  00EA36  D144               	goto	L61
  6277  00EA38                     l334:
  6278                           
  6279                           ;standbyMode.c: 611: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  6280  00EA38  0E03               	movlw	3
  6281  00EA3A  1828               	xorwf	diet_press@dietTable,w,c
  6282  00EA3C  1029               	iorwf	diet_press@dietTable+1,w,c
  6283  00EA3E  A4D8               	btfss	status,2,c
  6284  00EA40  D011               	goto	l336
  6285  00EA42  0E0C               	movlw	12
  6286  00EA44  182A               	xorwf	diet_press@dietTable+2,w,c
  6287  00EA46  102B               	iorwf	diet_press@dietTable+3,w,c
  6288  00EA48  A4D8               	btfss	status,2,c
  6289  00EA4A  D00C               	goto	l336
  6290  00EA4C  502C               	movf	diet_press@dietTable+4,w,c
  6291  00EA4E  102D               	iorwf	diet_press@dietTable+5,w,c
  6292  00EA50  A4D8               	btfss	status,2,c
  6293  00EA52  D008               	goto	l336
  6294  00EA54  502E               	movf	diet_press@dietTable+6,w,c
  6295  00EA56  102F               	iorwf	diet_press@dietTable+7,w,c
  6296  00EA58  A4D8               	btfss	status,2,c
  6297  00EA5A  D004               	goto	l336
  6298                           
  6299                           ;standbyMode.c: 612: sum = 15;
  6300  00EA5C  0E00               	movlw	0
  6301  00EA5E  6E26               	movwf	diet_press@sum+1,c
  6302  00EA60  0E0F               	movlw	15
  6303  00EA62  D12E               	goto	L61
  6304  00EA64                     l336:
  6305                           
  6306                           ;standbyMode.c: 616: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  6307  00EA64  0E07               	movlw	7
  6308  00EA66  1828               	xorwf	diet_press@dietTable,w,c
  6309  00EA68  1029               	iorwf	diet_press@dietTable+1,w,c
  6310  00EA6A  A4D8               	btfss	status,2,c
  6311  00EA6C  D011               	goto	l338
  6312  00EA6E  0E0C               	movlw	12
  6313  00EA70  182A               	xorwf	diet_press@dietTable+2,w,c
  6314  00EA72  102B               	iorwf	diet_press@dietTable+3,w,c
  6315  00EA74  A4D8               	btfss	status,2,c
  6316  00EA76  D00C               	goto	l338
  6317  00EA78  502C               	movf	diet_press@dietTable+4,w,c
  6318  00EA7A  102D               	iorwf	diet_press@dietTable+5,w,c
  6319  00EA7C  A4D8               	btfss	status,2,c
  6320  00EA7E  D008               	goto	l338
  6321  00EA80  502E               	movf	diet_press@dietTable+6,w,c
  6322  00EA82  102F               	iorwf	diet_press@dietTable+7,w,c
  6323  00EA84  A4D8               	btfss	status,2,c
  6324  00EA86  D004               	goto	l338
  6325                           
  6326                           ;standbyMode.c: 617: sum = 19;
  6327  00EA88  0E00               	movlw	0
  6328  00EA8A  6E26               	movwf	diet_press@sum+1,c
  6329  00EA8C  0E13               	movlw	19
  6330  00EA8E  D118               	goto	L61
  6331  00EA90                     l338:
  6332                           
  6333                           ;standbyMode.c: 621: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  6334  00EA90  0E03               	movlw	3
  6335  00EA92  1828               	xorwf	diet_press@dietTable,w,c
  6336  00EA94  1029               	iorwf	diet_press@dietTable+1,w,c
  6337  00EA96  A4D8               	btfss	status,2,c
  6338  00EA98  D012               	goto	l340
  6339  00EA9A  0E03               	movlw	3
  6340  00EA9C  182A               	xorwf	diet_press@dietTable+2,w,c
  6341  00EA9E  102B               	iorwf	diet_press@dietTable+3,w,c
  6342  00EAA0  A4D8               	btfss	status,2,c
  6343  00EAA2  D00D               	goto	l340
  6344  00EAA4  0E07               	movlw	7
  6345  00EAA6  182C               	xorwf	diet_press@dietTable+4,w,c
  6346  00EAA8  102D               	iorwf	diet_press@dietTable+5,w,c
  6347  00EAAA  A4D8               	btfss	status,2,c
  6348  00EAAC  D008               	goto	l340
  6349  00EAAE  502E               	movf	diet_press@dietTable+6,w,c
  6350  00EAB0  102F               	iorwf	diet_press@dietTable+7,w,c
  6351  00EAB2  A4D8               	btfss	status,2,c
  6352  00EAB4  D004               	goto	l340
  6353                           
  6354                           ;standbyMode.c: 622: sum = 13;
  6355  00EAB6  0E00               	movlw	0
  6356  00EAB8  6E26               	movwf	diet_press@sum+1,c
  6357  00EABA  0E0D               	movlw	13
  6358  00EABC  D101               	goto	L61
  6359  00EABE                     l340:
  6360                           
  6361                           ;standbyMode.c: 626: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6362  00EABE  0E03               	movlw	3
  6363  00EAC0  1828               	xorwf	diet_press@dietTable,w,c
  6364  00EAC2  1029               	iorwf	diet_press@dietTable+1,w,c
  6365  00EAC4  A4D8               	btfss	status,2,c
  6366  00EAC6  D012               	goto	l342
  6367  00EAC8  0E03               	movlw	3
  6368  00EACA  182A               	xorwf	diet_press@dietTable+2,w,c
  6369  00EACC  102B               	iorwf	diet_press@dietTable+3,w,c
  6370  00EACE  A4D8               	btfss	status,2,c
  6371  00EAD0  D00D               	goto	l342
  6372  00EAD2  0E0C               	movlw	12
  6373  00EAD4  182C               	xorwf	diet_press@dietTable+4,w,c
  6374  00EAD6  102D               	iorwf	diet_press@dietTable+5,w,c
  6375  00EAD8  A4D8               	btfss	status,2,c
  6376  00EADA  D008               	goto	l342
  6377  00EADC  502E               	movf	diet_press@dietTable+6,w,c
  6378  00EADE  102F               	iorwf	diet_press@dietTable+7,w,c
  6379  00EAE0  A4D8               	btfss	status,2,c
  6380  00EAE2  D004               	goto	l342
  6381                           
  6382                           ;standbyMode.c: 627: sum = 18;
  6383  00EAE4  0E00               	movlw	0
  6384  00EAE6  6E26               	movwf	diet_press@sum+1,c
  6385  00EAE8  0E12               	movlw	18
  6386  00EAEA  D0EA               	goto	L61
  6387  00EAEC                     l342:
  6388                           
  6389                           ;standbyMode.c: 631: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  6390  00EAEC  0E03               	movlw	3
  6391  00EAEE  1828               	xorwf	diet_press@dietTable,w,c
  6392  00EAF0  1029               	iorwf	diet_press@dietTable+1,w,c
  6393  00EAF2  A4D8               	btfss	status,2,c
  6394  00EAF4  D012               	goto	l344
  6395  00EAF6  0E07               	movlw	7
  6396  00EAF8  182A               	xorwf	diet_press@dietTable+2,w,c
  6397  00EAFA  102B               	iorwf	diet_press@dietTable+3,w,c
  6398  00EAFC  A4D8               	btfss	status,2,c
  6399  00EAFE  D00D               	goto	l344
  6400  00EB00  0E07               	movlw	7
  6401  00EB02  182C               	xorwf	diet_press@dietTable+4,w,c
  6402  00EB04  102D               	iorwf	diet_press@dietTable+5,w,c
  6403  00EB06  A4D8               	btfss	status,2,c
  6404  00EB08  D008               	goto	l344
  6405  00EB0A  502E               	movf	diet_press@dietTable+6,w,c
  6406  00EB0C  102F               	iorwf	diet_press@dietTable+7,w,c
  6407  00EB0E  A4D8               	btfss	status,2,c
  6408  00EB10  D004               	goto	l344
  6409                           
  6410                           ;standbyMode.c: 632: sum = 17;
  6411  00EB12  0E00               	movlw	0
  6412  00EB14  6E26               	movwf	diet_press@sum+1,c
  6413  00EB16  0E11               	movlw	17
  6414  00EB18  D0D3               	goto	L61
  6415  00EB1A                     l344:
  6416                           
  6417                           ;standbyMode.c: 636: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6418  00EB1A  0E03               	movlw	3
  6419  00EB1C  1828               	xorwf	diet_press@dietTable,w,c
  6420  00EB1E  1029               	iorwf	diet_press@dietTable+1,w,c
  6421  00EB20  A4D8               	btfss	status,2,c
  6422  00EB22  D012               	goto	l346
  6423  00EB24  0E0C               	movlw	12
  6424  00EB26  182A               	xorwf	diet_press@dietTable+2,w,c
  6425  00EB28  102B               	iorwf	diet_press@dietTable+3,w,c
  6426  00EB2A  A4D8               	btfss	status,2,c
  6427  00EB2C  D00D               	goto	l346
  6428  00EB2E  0E0C               	movlw	12
  6429  00EB30  182C               	xorwf	diet_press@dietTable+4,w,c
  6430  00EB32  102D               	iorwf	diet_press@dietTable+5,w,c
  6431  00EB34  A4D8               	btfss	status,2,c
  6432  00EB36  D008               	goto	l346
  6433  00EB38  502E               	movf	diet_press@dietTable+6,w,c
  6434  00EB3A  102F               	iorwf	diet_press@dietTable+7,w,c
  6435  00EB3C  A4D8               	btfss	status,2,c
  6436  00EB3E  D004               	goto	l346
  6437                           
  6438                           ;standbyMode.c: 637: sum = 27;
  6439  00EB40  0E00               	movlw	0
  6440  00EB42  6E26               	movwf	diet_press@sum+1,c
  6441  00EB44  0E1B               	movlw	27
  6442  00EB46  D0BC               	goto	L61
  6443  00EB48                     l346:
  6444                           
  6445                           ;standbyMode.c: 641: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6446  00EB48  0E03               	movlw	3
  6447  00EB4A  1828               	xorwf	diet_press@dietTable,w,c
  6448  00EB4C  1029               	iorwf	diet_press@dietTable+1,w,c
  6449  00EB4E  A4D8               	btfss	status,2,c
  6450  00EB50  D012               	goto	l348
  6451  00EB52  0E07               	movlw	7
  6452  00EB54  182A               	xorwf	diet_press@dietTable+2,w,c
  6453  00EB56  102B               	iorwf	diet_press@dietTable+3,w,c
  6454  00EB58  A4D8               	btfss	status,2,c
  6455  00EB5A  D00D               	goto	l348
  6456  00EB5C  0E0C               	movlw	12
  6457  00EB5E  182C               	xorwf	diet_press@dietTable+4,w,c
  6458  00EB60  102D               	iorwf	diet_press@dietTable+5,w,c
  6459  00EB62  A4D8               	btfss	status,2,c
  6460  00EB64  D008               	goto	l348
  6461  00EB66  502E               	movf	diet_press@dietTable+6,w,c
  6462  00EB68  102F               	iorwf	diet_press@dietTable+7,w,c
  6463  00EB6A  A4D8               	btfss	status,2,c
  6464  00EB6C  D004               	goto	l348
  6465                           
  6466                           ;standbyMode.c: 642: sum = 22;
  6467  00EB6E  0E00               	movlw	0
  6468  00EB70  6E26               	movwf	diet_press@sum+1,c
  6469  00EB72  0E16               	movlw	22
  6470  00EB74  D0A5               	goto	L61
  6471  00EB76                     l348:
  6472                           
  6473                           ;standbyMode.c: 646: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6474  00EB76  0E07               	movlw	7
  6475  00EB78  1828               	xorwf	diet_press@dietTable,w,c
  6476  00EB7A  1029               	iorwf	diet_press@dietTable+1,w,c
  6477  00EB7C  A4D8               	btfss	status,2,c
  6478  00EB7E  D012               	goto	l350
  6479  00EB80  0E07               	movlw	7
  6480  00EB82  182A               	xorwf	diet_press@dietTable+2,w,c
  6481  00EB84  102B               	iorwf	diet_press@dietTable+3,w,c
  6482  00EB86  A4D8               	btfss	status,2,c
  6483  00EB88  D00D               	goto	l350
  6484  00EB8A  0E0C               	movlw	12
  6485  00EB8C  182C               	xorwf	diet_press@dietTable+4,w,c
  6486  00EB8E  102D               	iorwf	diet_press@dietTable+5,w,c
  6487  00EB90  A4D8               	btfss	status,2,c
  6488  00EB92  D008               	goto	l350
  6489  00EB94  502E               	movf	diet_press@dietTable+6,w,c
  6490  00EB96  102F               	iorwf	diet_press@dietTable+7,w,c
  6491  00EB98  A4D8               	btfss	status,2,c
  6492  00EB9A  D004               	goto	l350
  6493                           
  6494                           ;standbyMode.c: 647: sum = 26;
  6495  00EB9C  0E00               	movlw	0
  6496  00EB9E  6E26               	movwf	diet_press@sum+1,c
  6497  00EBA0  0E1A               	movlw	26
  6498  00EBA2  D08E               	goto	L61
  6499  00EBA4                     l350:
  6500                           
  6501                           ;standbyMode.c: 651: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6502  00EBA4  0E07               	movlw	7
  6503  00EBA6  1828               	xorwf	diet_press@dietTable,w,c
  6504  00EBA8  1029               	iorwf	diet_press@dietTable+1,w,c
  6505  00EBAA  A4D8               	btfss	status,2,c
  6506  00EBAC  D012               	goto	l352
  6507  00EBAE  0E0C               	movlw	12
  6508  00EBB0  182A               	xorwf	diet_press@dietTable+2,w,c
  6509  00EBB2  102B               	iorwf	diet_press@dietTable+3,w,c
  6510  00EBB4  A4D8               	btfss	status,2,c
  6511  00EBB6  D00D               	goto	l352
  6512  00EBB8  0E0C               	movlw	12
  6513  00EBBA  182C               	xorwf	diet_press@dietTable+4,w,c
  6514  00EBBC  102D               	iorwf	diet_press@dietTable+5,w,c
  6515  00EBBE  A4D8               	btfss	status,2,c
  6516  00EBC0  D008               	goto	l352
  6517  00EBC2  502E               	movf	diet_press@dietTable+6,w,c
  6518  00EBC4  102F               	iorwf	diet_press@dietTable+7,w,c
  6519  00EBC6  A4D8               	btfss	status,2,c
  6520  00EBC8  D004               	goto	l352
  6521                           
  6522                           ;standbyMode.c: 652: sum = 31;
  6523  00EBCA  0E00               	movlw	0
  6524  00EBCC  6E26               	movwf	diet_press@sum+1,c
  6525  00EBCE  0E1F               	movlw	31
  6526  00EBD0  D077               	goto	L61
  6527  00EBD2                     l352:
  6528                           
  6529                           ;standbyMode.c: 656: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6530  00EBD2  0E03               	movlw	3
  6531  00EBD4  1828               	xorwf	diet_press@dietTable,w,c
  6532  00EBD6  1029               	iorwf	diet_press@dietTable+1,w,c
  6533  00EBD8  A4D8               	btfss	status,2,c
  6534  00EBDA  D013               	goto	l354
  6535  00EBDC  0E03               	movlw	3
  6536  00EBDE  182A               	xorwf	diet_press@dietTable+2,w,c
  6537  00EBE0  102B               	iorwf	diet_press@dietTable+3,w,c
  6538  00EBE2  A4D8               	btfss	status,2,c
  6539  00EBE4  D00E               	goto	l354
  6540  00EBE6  0E07               	movlw	7
  6541  00EBE8  182C               	xorwf	diet_press@dietTable+4,w,c
  6542  00EBEA  102D               	iorwf	diet_press@dietTable+5,w,c
  6543  00EBEC  A4D8               	btfss	status,2,c
  6544  00EBEE  D009               	goto	l354
  6545  00EBF0  0E0C               	movlw	12
  6546  00EBF2  182E               	xorwf	diet_press@dietTable+6,w,c
  6547  00EBF4  102F               	iorwf	diet_press@dietTable+7,w,c
  6548  00EBF6  A4D8               	btfss	status,2,c
  6549  00EBF8  D004               	goto	l354
  6550                           
  6551                           ;standbyMode.c: 657: sum = 25;
  6552  00EBFA  0E00               	movlw	0
  6553  00EBFC  6E26               	movwf	diet_press@sum+1,c
  6554  00EBFE  0E19               	movlw	25
  6555  00EC00  D05F               	goto	L61
  6556  00EC02                     l354:
  6557                           
  6558                           ;standbyMode.c: 661: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6559  00EC02  0E03               	movlw	3
  6560  00EC04  1828               	xorwf	diet_press@dietTable,w,c
  6561  00EC06  1029               	iorwf	diet_press@dietTable+1,w,c
  6562  00EC08  A4D8               	btfss	status,2,c
  6563  00EC0A  D013               	goto	l356
  6564  00EC0C  0E07               	movlw	7
  6565  00EC0E  182A               	xorwf	diet_press@dietTable+2,w,c
  6566  00EC10  102B               	iorwf	diet_press@dietTable+3,w,c
  6567  00EC12  A4D8               	btfss	status,2,c
  6568  00EC14  D00E               	goto	l356
  6569  00EC16  0E07               	movlw	7
  6570  00EC18  182C               	xorwf	diet_press@dietTable+4,w,c
  6571  00EC1A  102D               	iorwf	diet_press@dietTable+5,w,c
  6572  00EC1C  A4D8               	btfss	status,2,c
  6573  00EC1E  D009               	goto	l356
  6574  00EC20  0E0C               	movlw	12
  6575  00EC22  182E               	xorwf	diet_press@dietTable+6,w,c
  6576  00EC24  102F               	iorwf	diet_press@dietTable+7,w,c
  6577  00EC26  A4D8               	btfss	status,2,c
  6578  00EC28  D004               	goto	l356
  6579                           
  6580                           ;standbyMode.c: 662: sum = 29;
  6581  00EC2A  0E00               	movlw	0
  6582  00EC2C  6E26               	movwf	diet_press@sum+1,c
  6583  00EC2E  0E1D               	movlw	29
  6584  00EC30  D047               	goto	L61
  6585  00EC32                     l356:
  6586                           
  6587                           ;standbyMode.c: 666: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  6588  00EC32  0E03               	movlw	3
  6589  00EC34  1828               	xorwf	diet_press@dietTable,w,c
  6590  00EC36  1029               	iorwf	diet_press@dietTable+1,w,c
  6591  00EC38  A4D8               	btfss	status,2,c
  6592  00EC3A  D013               	goto	l358
  6593  00EC3C  0E07               	movlw	7
  6594  00EC3E  182A               	xorwf	diet_press@dietTable+2,w,c
  6595  00EC40  102B               	iorwf	diet_press@dietTable+3,w,c
  6596  00EC42  A4D8               	btfss	status,2,c
  6597  00EC44  D00E               	goto	l358
  6598  00EC46  0E0C               	movlw	12
  6599  00EC48  182C               	xorwf	diet_press@dietTable+4,w,c
  6600  00EC4A  102D               	iorwf	diet_press@dietTable+5,w,c
  6601  00EC4C  A4D8               	btfss	status,2,c
  6602  00EC4E  D009               	goto	l358
  6603  00EC50  0E0C               	movlw	12
  6604  00EC52  182E               	xorwf	diet_press@dietTable+6,w,c
  6605  00EC54  102F               	iorwf	diet_press@dietTable+7,w,c
  6606  00EC56  A4D8               	btfss	status,2,c
  6607  00EC58  D004               	goto	l358
  6608                           
  6609                           ;standbyMode.c: 667: sum = 34;
  6610  00EC5A  0E00               	movlw	0
  6611  00EC5C  6E26               	movwf	diet_press@sum+1,c
  6612  00EC5E  0E22               	movlw	34
  6613  00EC60  D02F               	goto	L61
  6614  00EC62                     l358:
  6615                           
  6616                           ;standbyMode.c: 671: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6617  00EC62  0E03               	movlw	3
  6618  00EC64  1828               	xorwf	diet_press@dietTable,w,c
  6619  00EC66  1029               	iorwf	diet_press@dietTable+1,w,c
  6620  00EC68  A4D8               	btfss	status,2,c
  6621  00EC6A  D013               	goto	l360
  6622  00EC6C  0E0C               	movlw	12
  6623  00EC6E  182A               	xorwf	diet_press@dietTable+2,w,c
  6624  00EC70  102B               	iorwf	diet_press@dietTable+3,w,c
  6625  00EC72  A4D8               	btfss	status,2,c
  6626  00EC74  D00E               	goto	l360
  6627  00EC76  0E0C               	movlw	12
  6628  00EC78  182C               	xorwf	diet_press@dietTable+4,w,c
  6629  00EC7A  102D               	iorwf	diet_press@dietTable+5,w,c
  6630  00EC7C  A4D8               	btfss	status,2,c
  6631  00EC7E  D009               	goto	l360
  6632  00EC80  0E0C               	movlw	12
  6633  00EC82  182E               	xorwf	diet_press@dietTable+6,w,c
  6634  00EC84  102F               	iorwf	diet_press@dietTable+7,w,c
  6635  00EC86  A4D8               	btfss	status,2,c
  6636  00EC88  D004               	goto	l360
  6637                           
  6638                           ;standbyMode.c: 672: sum = 39;
  6639  00EC8A  0E00               	movlw	0
  6640  00EC8C  6E26               	movwf	diet_press@sum+1,c
  6641  00EC8E  0E27               	movlw	39
  6642  00EC90  D017               	goto	L61
  6643  00EC92                     l360:
  6644                           
  6645                           ;standbyMode.c: 676: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6646  00EC92  0E07               	movlw	7
  6647  00EC94  1828               	xorwf	diet_press@dietTable,w,c
  6648  00EC96  1029               	iorwf	diet_press@dietTable+1,w,c
  6649  00EC98  A4D8               	btfss	status,2,c
  6650  00EC9A  D014               	goto	l362
  6651  00EC9C  0E0C               	movlw	12
  6652  00EC9E  182A               	xorwf	diet_press@dietTable+2,w,c
  6653  00ECA0  102B               	iorwf	diet_press@dietTable+3,w,c
  6654  00ECA2  A4D8               	btfss	status,2,c
  6655  00ECA4  D00F               	goto	l362
  6656  00ECA6  0E0C               	movlw	12
  6657  00ECA8  182C               	xorwf	diet_press@dietTable+4,w,c
  6658  00ECAA  102D               	iorwf	diet_press@dietTable+5,w,c
  6659  00ECAC  A4D8               	btfss	status,2,c
  6660  00ECAE  D00A               	goto	l362
  6661  00ECB0  0E0C               	movlw	12
  6662  00ECB2  182E               	xorwf	diet_press@dietTable+6,w,c
  6663  00ECB4  102F               	iorwf	diet_press@dietTable+7,w,c
  6664  00ECB6  A4D8               	btfss	status,2,c
  6665  00ECB8  D005               	goto	l362
  6666                           
  6667                           ;standbyMode.c: 677: sum = 43;
  6668  00ECBA  0E00               	movlw	0
  6669  00ECBC  6E26               	movwf	diet_press@sum+1,c
  6670  00ECBE  0E2B               	movlw	43
  6671  00ECC0                     L61:
  6672  00ECC0  6E25               	movwf	diet_press@sum,c
  6673                           
  6674                           ;standbyMode.c: 678: }
  6675  00ECC2  D02A               	goto	l363
  6676  00ECC4                     l362:
  6677                           
  6678                           ;standbyMode.c: 681: else{
  6679                           ;standbyMode.c: 682: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6680  00ECC4  0E01               	movlw	1
  6681  00ECC6  EC02  F06E         	call	_lcdInst
  6682  00ECCA  0EC3               	movlw	195
  6683  00ECCC  6E1B               	movwf	??_diet_press& (0+255),c
  6684  00ECCE  0ECD               	movlw	205
  6685  00ECD0                     u6187:
  6686  00ECD0  2EE8               	decfsz	wreg,f,c
  6687  00ECD2  D7FE               	bra	u6187
  6688  00ECD4  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6689  00ECD6  D7FC               	bra	u6187
  6690  00ECD8  F000               	nop	
  6691                           
  6692                           ;standbyMode.c: 683: printf("Invalid diet!");
  6693  00ECDA  0E39               	movlw	low STR_25
  6694  00ECDC  6E0D               	movwf	printf@f,c
  6695  00ECDE  0EFF               	movlw	high STR_25
  6696  00ECE0  6E0E               	movwf	printf@f+1,c
  6697  00ECE2  ECDB  F06F         	call	_printf	;wreg free
  6698                           
  6699                           ;standbyMode.c: 684: lcdInst(0xC0);;
  6700  00ECE6  0EC0               	movlw	192
  6701  00ECE8  EC02  F06E         	call	_lcdInst
  6702                           
  6703                           ;standbyMode.c: 685: printf("Try again.");
  6704  00ECEC  0EAA               	movlw	low STR_22
  6705  00ECEE  6E0D               	movwf	printf@f,c
  6706  00ECF0  0EFF               	movlw	high STR_22
  6707  00ECF2  6E0E               	movwf	printf@f+1,c
  6708  00ECF4  ECDB  F06F         	call	_printf	;wreg free
  6709                           
  6710                           ;standbyMode.c: 686: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6711  00ECF8  0E33               	movlw	51
  6712  00ECFA  6E1C               	movwf	(??_diet_press+1)& (0+255),c
  6713  00ECFC  0EBB               	movlw	187
  6714  00ECFE  6E1B               	movwf	??_diet_press& (0+255),c
  6715  00ED00  0EE0               	movlw	224
  6716  00ED02                     u6197:
  6717  00ED02  2EE8               	decfsz	wreg,f,c
  6718  00ED04  D7FE               	bra	u6197
  6719  00ED06  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6720  00ED08  D7FC               	bra	u6197
  6721  00ED0A  2E1C               	decfsz	(??_diet_press+1)& (0+255),f,c
  6722  00ED0C  D7FA               	bra	u6197
  6723                           
  6724                           ;standbyMode.c: 687: sum = 0;
  6725  00ED0E  0E00               	movlw	0
  6726  00ED10  6E26               	movwf	diet_press@sum+1,c
  6727  00ED12  0E00               	movlw	0
  6728  00ED14  6E25               	movwf	diet_press@sum,c
  6729                           
  6730                           ;standbyMode.c: 688: goto START;
  6731  00ED16  D572               	goto	_diet_press
  6732  00ED18                     l363:
  6733                           
  6734                           ;standbyMode.c: 689: }
  6735                           ;standbyMode.c: 690: return sum;
  6736  00ED18  C025  F019         	movff	diet_press@sum,?_diet_press
  6737  00ED1C  C026  F01A         	movff	diet_press@sum+1,?_diet_press+1
  6738  00ED20  0012               	return		;funcret
  6739  00ED22                     __end_of_diet_press:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           intcon	equ	0xFF2
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           plusw1	equ	0xFE3
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           plusw2	equ	0xFDB
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _printf *****************
  6759 ;; Defined at:
  6760 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6763 ;;		 -> STR_56(11), STR_55(13), STR_54(11), STR_53(13), 
  6764 ;;		 -> STR_52(11), STR_51(8), STR_50(15), STR_49(16), 
  6765 ;;		 -> STR_48(10), STR_47(8), STR_46(15), STR_45(16), 
  6766 ;;		 -> STR_44(10), STR_43(16), STR_42(16), STR_41(17), 
  6767 ;;		 -> STR_40(13), STR_39(17), STR_38(14), STR_37(11), 
  6768 ;;		 -> STR_36(11), STR_35(16), STR_34(16), STR_33(15), 
  6769 ;;		 -> STR_32(15), STR_31(17), STR_30(17), STR_29(8), 
  6770 ;;		 -> STR_28(15), STR_27(15), STR_26(11), STR_25(14), 
  6771 ;;		 -> STR_24(16), STR_23(16), STR_22(11), STR_21(14), 
  6772 ;;		 -> STR_20(16), STR_19(16), STR_18(16), STR_17(13), 
  6773 ;;		 -> STR_16(13), STR_15(15), STR_14(16), STR_13(16), 
  6774 ;;		 -> STR_12(18), STR_11(6), STR_10(16), STR_9(5), 
  6775 ;;		 -> STR_8(16), STR_7(9), STR_6(17), STR_5(7), 
  6776 ;;		 -> STR_4(9), STR_3(17), STR_2(11), STR_1(16), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  tmpval          4    0        struct .
  6779 ;;  cp              3    0        PTR const unsigned char 
  6780 ;;  val             2   21[COMRAM] unsigned int 
  6781 ;;  ap              2   17[COMRAM] PTR void [1]
  6782 ;;		 -> ?_printf(2), 
  6783 ;;  len             2    0        unsigned int 
  6784 ;;  c               1   23[COMRAM] char 
  6785 ;;  prec            1   20[COMRAM] char 
  6786 ;;  flag            1   19[COMRAM] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  2   12[COMRAM] int 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6796 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;Total ram usage:       12 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    2
  6803 ;; This function calls:
  6804 ;;		___lwdiv
  6805 ;;		___lwmod
  6806 ;;		_putch
  6807 ;; This function is called by:
  6808 ;;		_viewLogs
  6809 ;;		_food_press
  6810 ;;		_diet_press
  6811 ;;		_which_drawer
  6812 ;;		_standbyMode
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text11
  6817  00DFB6                     __ptext11:
  6818                           	opt stack 0
  6819  00DFB6                     _printf:
  6820                           	opt stack 26
  6821                           
  6822                           ;doprnt.c: 466: va_list ap;
  6823                           ;doprnt.c: 499: signed char c;
  6824                           ;doprnt.c: 506: signed char prec;
  6825                           ;doprnt.c: 508: unsigned char flag;
  6826                           ;doprnt.c: 523: union {
  6827                           ;doprnt.c: 524: unsigned long vd;
  6828                           ;doprnt.c: 525: double integ;
  6829                           ;doprnt.c: 526: } tmpval;
  6830                           ;doprnt.c: 528: unsigned int val;
  6831                           ;doprnt.c: 529: unsigned len;
  6832                           ;doprnt.c: 530: const char * cp;
  6833                           ;doprnt.c: 533: *ap = __va_start();
  6834                           
  6835                           ;incstack = 0
  6836  00DFB6  0E0F               	movlw	low (?_printf+2)
  6837  00DFB8  6E12               	movwf	printf@ap,c
  6838  00DFBA  0E00               	movlw	high (?_printf+2)
  6839  00DFBC  6E13               	movwf	printf@ap+1,c
  6840                           
  6841                           ;doprnt.c: 536: while(c = *f++) {
  6842  00DFBE  D07D               	goto	u3840
  6843  00DFC0                     
  6844                           ;doprnt.c: 538: if(c != '%')
  6845  00DFC0  0E25               	movlw	37
  6846  00DFC2  1818               	xorwf	printf@c,w,c
  6847  00DFC4  B4D8               	btfsc	status,2,c
  6848  00DFC6  D004               	goto	l525
  6849                           
  6850                           ;doprnt.c: 540: {
  6851                           ;doprnt.c: 541: (putch(c) );
  6852  00DFC8  5018               	movf	printf@c,w,c
  6853  00DFCA  EC0C  F06E         	call	_putch
  6854                           
  6855                           ;doprnt.c: 542: continue;
  6856  00DFCE  D075               	goto	u3840
  6857  00DFD0                     l525:
  6858                           
  6859                           ;doprnt.c: 543: }
  6860                           ;doprnt.c: 548: flag = 0;
  6861  00DFD0  0E00               	movlw	0
  6862  00DFD2  6E14               	movwf	printf@flag,c
  6863                           
  6864                           ;doprnt.c: 822: }
  6865                           
  6866                           ;doprnt.c: 813: continue;
  6867                           
  6868                           ;doprnt.c: 802: default:
  6869                           
  6870                           ;doprnt.c: 698: case 'i':
  6871                           ;doprnt.c: 699: break;
  6872                           
  6873                           ;doprnt.c: 697: case 'd':
  6874                           
  6875                           ;doprnt.c: 638: goto alldone;
  6876                           
  6877                           ;doprnt.c: 637: case 0:
  6878                           
  6879                           ;doprnt.c: 635: switch(c = *f++) {
  6880  00DFD4  C00D  FFF6         	movff	printf@f,tblptrl
  6881  00DFD8  C00E  FFF7         	movff	printf@f+1,tblptrh
  6882  00DFDC  4A0D               	infsnz	printf@f,f,c
  6883  00DFDE  2A0E               	incf	printf@f+1,f,c
  6884  00DFE0                     	if	0	;tblptru may be non-zero
  6885  00DFE0                     	endif
  6886  00DFE0                     	if	0	;tblptru may be non-zero
  6887  00DFE0                     	endif
  6888  00DFE0  0008               	tblrd		*
  6889  00DFE2  CFF5 F018          	movff	tablat,printf@c
  6890  00DFE6  5018               	movf	printf@c,w,c
  6891                           
  6892                           ; Switch size 1, requested type "space"
  6893                           ; Number of cases is 3, Range of values is 0 to 105
  6894                           ; switch strategies available:
  6895                           ; Name         Instructions Cycles
  6896                           ; simple_byte           10     6 (average)
  6897                           ;	Chosen strategy is simple_byte
  6898  00DFE8  0A00               	xorlw	0	; case 0
  6899  00DFEA  B4D8               	btfsc	status,2,c
  6900  00DFEC  0012               	return	
  6901  00DFEE  0A64               	xorlw	100	; case 100
  6902  00DFF0  B4D8               	btfsc	status,2,c
  6903  00DFF2  D003               	goto	l531
  6904  00DFF4  0A0D               	xorlw	13	; case 105
  6905  00DFF6  A4D8               	btfss	status,2,c
  6906  00DFF8  D060               	goto	u3840
  6907  00DFFA                     l531:
  6908                           
  6909                           ;doprnt.c: 1253: {
  6910                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6911  00DFFA  C012  FFD9         	movff	printf@ap,fsr2l
  6912  00DFFE  C013  FFDA         	movff	printf@ap+1,fsr2h
  6913  00E002  CFDE F016          	movff	postinc2,printf@val
  6914  00E006  CFDD F017          	movff	postdec2,printf@val+1
  6915  00E00A  0E02               	movlw	2
  6916  00E00C  2612               	addwf	printf@ap,f,c
  6917  00E00E  0E00               	movlw	0
  6918  00E010  2213               	addwfc	printf@ap+1,f,c
  6919                           
  6920                           ;doprnt.c: 1261: if((int)val < 0) {
  6921  00E012  AE17               	btfss	printf@val+1,7,c
  6922  00E014  D006               	goto	l533
  6923                           
  6924                           ;doprnt.c: 1262: flag |= 0x03;
  6925  00E016  0E03               	movlw	3
  6926  00E018  1214               	iorwf	printf@flag,f,c
  6927                           
  6928                           ;doprnt.c: 1263: val = -val;
  6929  00E01A  6C16               	negf	printf@val,c
  6930  00E01C  1E17               	comf	printf@val+1,f,c
  6931  00E01E  B0D8               	btfsc	status,0,c
  6932  00E020  2A17               	incf	printf@val+1,f,c
  6933  00E022                     l533:
  6934                           
  6935                           ;doprnt.c: 1264: }
  6936                           ;doprnt.c: 1266: }
  6937                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6938  00E022  0E01               	movlw	1
  6939  00E024  6E18               	movwf	printf@c,c
  6940  00E026                     l2984:
  6941  00E026  0E05               	movlw	5
  6942  00E028  1818               	xorwf	printf@c,w,c
  6943  00E02A  B4D8               	btfsc	status,2,c
  6944  00E02C  D012               	goto	u3820
  6945                           
  6946                           ;doprnt.c: 1306: if(val < dpowers[c])
  6947  00E02E  5018               	movf	printf@c,w,c
  6948  00E030  0D02               	mullw	2
  6949  00E032  0EB9               	movlw	low _dpowers
  6950  00E034  24F3               	addwf	prodl,w,c
  6951  00E036  6EF6               	movwf	tblptrl,c
  6952  00E038  0EFD               	movlw	high _dpowers
  6953  00E03A  20F4               	addwfc	prodh,w,c
  6954  00E03C  6EF7               	movwf	tblptrh,c
  6955  00E03E                     	if	0	;There are less than 3 active tblptr bytes
  6956  00E03E                     	endif
  6957  00E03E  0009               	tblrd		*+
  6958  00E040  50F5               	movf	tablat,w,c
  6959  00E042  5C16               	subwf	printf@val,w,c
  6960  00E044  0009               	tblrd		*+
  6961  00E046  50F5               	movf	tablat,w,c
  6962  00E048  5817               	subwfb	printf@val+1,w,c
  6963  00E04A  A0D8               	btfss	status,0,c
  6964  00E04C  D002               	goto	u3820
  6965                           
  6966                           ;doprnt.c: 1307: break;
  6967  00E04E  2A18               	incf	printf@c,f,c
  6968  00E050  D7EA               	goto	l2984
  6969  00E052                     u3820:
  6970                           
  6971                           ;doprnt.c: 1422: {
  6972                           ;doprnt.c: 1438: if(flag & 0x03)
  6973  00E052  C014  F011         	movff	printf@flag,??_printf
  6974  00E056  0E03               	movlw	3
  6975  00E058  1611               	andwf	??_printf,f,c
  6976  00E05A  B4D8               	btfsc	status,2,c
  6977  00E05C  D003               	goto	l537
  6978                           
  6979                           ;doprnt.c: 1439: (putch('-') );
  6980  00E05E  0E2D               	movlw	45
  6981  00E060  EC0C  F06E         	call	_putch
  6982  00E064                     l537:
  6983                           
  6984                           ;doprnt.c: 1469: }
  6985                           ;doprnt.c: 1472: prec = c;
  6986  00E064  C018  F015         	movff	printf@c,printf@prec
  6987                           
  6988                           ;doprnt.c: 1474: while(prec--) {
  6989  00E068  D024               	goto	l538
  6990  00E06A                     
  6991                           ;doprnt.c: 1478: {
  6992                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6993  00E06A  5015               	movf	printf@prec,w,c
  6994  00E06C  0D02               	mullw	2
  6995  00E06E  0EB9               	movlw	low _dpowers
  6996  00E070  24F3               	addwf	prodl,w,c
  6997  00E072  6EF6               	movwf	tblptrl,c
  6998  00E074  0EFD               	movlw	high _dpowers
  6999  00E076  20F4               	addwfc	prodh,w,c
  7000  00E078  6EF7               	movwf	tblptrh,c
  7001  00E07A                     	if	0	;There are less than 3 active tblptr bytes
  7002  00E07A                     	endif
  7003  00E07A  0009               	tblrd		*+
  7004  00E07C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  7005  00E080  000A               	tblrd		*-
  7006  00E082  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  7007  00E086  C016  F001         	movff	printf@val,___lwdiv@dividend
  7008  00E08A  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  7009  00E08E  ECA3  F06E         	call	___lwdiv	;wreg free
  7010  00E092  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  7011  00E096  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  7012  00E09A  0E00               	movlw	0
  7013  00E09C  6E0B               	movwf	___lwmod@divisor+1,c
  7014  00E09E  0E0A               	movlw	10
  7015  00E0A0  6E0A               	movwf	___lwmod@divisor,c
  7016  00E0A2  EC5C  F06E         	call	___lwmod	;wreg free
  7017  00E0A6  5008               	movf	?___lwmod,w,c
  7018  00E0A8  0F30               	addlw	48
  7019  00E0AA  6E18               	movwf	printf@c,c
  7020                           
  7021                           ;doprnt.c: 1523: }
  7022                           ;doprnt.c: 1524: (putch(c) );
  7023  00E0AC  5018               	movf	printf@c,w,c
  7024  00E0AE  EC0C  F06E         	call	_putch
  7025  00E0B2                     l538:
  7026  00E0B2  0615               	decf	printf@prec,f,c
  7027  00E0B4  2815               	incf	printf@prec,w,c
  7028  00E0B6  A4D8               	btfss	status,2,c
  7029  00E0B8  D7D8               	goto	l539
  7030  00E0BA                     u3840:
  7031  00E0BA  C00D  FFF6         	movff	printf@f,tblptrl
  7032  00E0BE  C00E  FFF7         	movff	printf@f+1,tblptrh
  7033  00E0C2  4A0D               	infsnz	printf@f,f,c
  7034  00E0C4  2A0E               	incf	printf@f+1,f,c
  7035  00E0C6                     	if	0	;tblptru may be non-zero
  7036  00E0C6                     	endif
  7037  00E0C6                     	if	0	;tblptru may be non-zero
  7038  00E0C6                     	endif
  7039  00E0C6  0008               	tblrd		*
  7040  00E0C8  CFF5 F018          	movff	tablat,printf@c
  7041  00E0CC  5018               	movf	printf@c,w,c
  7042  00E0CE  B4D8               	btfsc	status,2,c
  7043  00E0D0  0012               	return	
  7044  00E0D2  D776               	goto	l524
  7045  00E0D4                     __end_of_printf:
  7046                           	opt stack 0
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           intcon	equ	0xFF2
  7054                           postinc0	equ	0xFEE
  7055                           wreg	equ	0xFE8
  7056                           plusw1	equ	0xFE3
  7057                           postinc2	equ	0xFDE
  7058                           postdec2	equ	0xFDD
  7059                           plusw2	equ	0xFDB
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function _putch *****************
  7065 ;; Defined at:
  7066 ;;		line 74 in file "standbyMode.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  data            1    wreg     unsigned char 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;  data            1    2[COMRAM] unsigned char 
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      void 
  7073 ;; Registers used:
  7074 ;;		wreg, status,2, status,0, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;Total ram usage:        1 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:    1
  7087 ;; This function calls:
  7088 ;;		_lcdNibble
  7089 ;; This function is called by:
  7090 ;;		_viewLogs
  7091 ;;		_food_press
  7092 ;;		_diet_press
  7093 ;;		_which_drawer
  7094 ;;		_standbyMode
  7095 ;;		_printf
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text12
  7100  00DC18                     __ptext12:
  7101                           	opt stack 0
  7102  00DC18                     _putch:
  7103                           	opt stack 27
  7104                           
  7105                           ;incstack = 0
  7106                           ;putch@data stored from wreg
  7107  00DC18  6E03               	movwf	putch@data,c
  7108                           
  7109                           ;standbyMode.c: 82: LATDbits.LATD2 = 1;
  7110  00DC1A  848C               	bsf	3980,2,c	;volatile
  7111                           
  7112                           ;standbyMode.c: 83: lcdNibble(data);
  7113  00DC1C  5003               	movf	putch@data,w,c
  7114  00DC1E  ECCC  F06E         	call	_lcdNibble
  7115                           
  7116                           ;standbyMode.c: 84: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7117  00DC22  0EC8               	movlw	200
  7118  00DC24                     u6207:
  7119  00DC24  D000               	nop2	
  7120  00DC26  2EE8               	decfsz	wreg,f,c
  7121  00DC28  D7FD               	bra	u6207
  7122  00DC2A  0012               	return		;funcret
  7123  00DC2C                     __end_of_putch:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           plusw1	equ	0xFE3
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           plusw2	equ	0xFDB
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function ___lwmod *****************
  7143 ;; Defined at:
  7144 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  dividend        2    7[COMRAM] unsigned int 
  7147 ;;  divisor         2    9[COMRAM] unsigned int 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;  counter         1   11[COMRAM] unsigned char 
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  2    7[COMRAM] unsigned int 
  7152 ;; Registers used:
  7153 ;;		wreg, status,2, status,0
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;Total ram usage:        5 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_printf
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text13
  7173  00DCB8                     __ptext13:
  7174                           	opt stack 0
  7175  00DCB8                     ___lwmod:
  7176                           	opt stack 27
  7177                           
  7178                           ;incstack = 0
  7179  00DCB8  500A               	movf	___lwmod@divisor,w,c
  7180  00DCBA  100B               	iorwf	___lwmod@divisor+1,w,c
  7181  00DCBC  B4D8               	btfsc	status,2,c
  7182  00DCBE  D018               	goto	l961
  7183  00DCC0  0E01               	movlw	1
  7184  00DCC2  6E0C               	movwf	___lwmod@counter,c
  7185  00DCC4  D004               	goto	l956
  7186  00DCC6  90D8               	bcf	status,0,c
  7187  00DCC8  360A               	rlcf	___lwmod@divisor,f,c
  7188  00DCCA  360B               	rlcf	___lwmod@divisor+1,f,c
  7189  00DCCC  2A0C               	incf	___lwmod@counter,f,c
  7190  00DCCE                     l956:
  7191  00DCCE  AE0B               	btfss	___lwmod@divisor+1,7,c
  7192  00DCD0  D7FA               	goto	l957
  7193  00DCD2                     u2850:
  7194  00DCD2  500A               	movf	___lwmod@divisor,w,c
  7195  00DCD4  5C08               	subwf	___lwmod@dividend,w,c
  7196  00DCD6  500B               	movf	___lwmod@divisor+1,w,c
  7197  00DCD8  5809               	subwfb	___lwmod@dividend+1,w,c
  7198  00DCDA  A0D8               	btfss	status,0,c
  7199  00DCDC  D004               	goto	l960
  7200  00DCDE  500A               	movf	___lwmod@divisor,w,c
  7201  00DCE0  5E08               	subwf	___lwmod@dividend,f,c
  7202  00DCE2  500B               	movf	___lwmod@divisor+1,w,c
  7203  00DCE4  5A09               	subwfb	___lwmod@dividend+1,f,c
  7204  00DCE6                     l960:
  7205  00DCE6  90D8               	bcf	status,0,c
  7206  00DCE8  320B               	rrcf	___lwmod@divisor+1,f,c
  7207  00DCEA  320A               	rrcf	___lwmod@divisor,f,c
  7208  00DCEC  2E0C               	decfsz	___lwmod@counter,f,c
  7209  00DCEE  D7F1               	goto	u2850
  7210  00DCF0                     l961:
  7211  00DCF0  C008  F008         	movff	___lwmod@dividend,?___lwmod
  7212  00DCF4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  7213  00DCF8  0012               	return		;funcret
  7214  00DCFA                     __end_of___lwmod:
  7215                           	opt stack 0
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           plusw1	equ	0xFE3
  7226                           postinc2	equ	0xFDE
  7227                           postdec2	equ	0xFDD
  7228                           plusw2	equ	0xFDB
  7229                           fsr2h	equ	0xFDA
  7230                           fsr2l	equ	0xFD9
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function ___lwdiv *****************
  7234 ;; Defined at:
  7235 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  dividend        2    0[COMRAM] unsigned int 
  7238 ;;  divisor         2    2[COMRAM] unsigned int 
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  quotient        2    4[COMRAM] unsigned int 
  7241 ;;  counter         1    6[COMRAM] unsigned char 
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  2    0[COMRAM] unsigned int 
  7244 ;; Registers used:
  7245 ;;		wreg, status,2, status,0
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;Total ram usage:        7 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; This function calls:
  7258 ;;		Nothing
  7259 ;; This function is called by:
  7260 ;;		_printf
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text14
  7265  00DD46                     __ptext14:
  7266                           	opt stack 0
  7267  00DD46                     ___lwdiv:
  7268                           	opt stack 27
  7269                           
  7270                           ;incstack = 0
  7271  00DD46  0E00               	movlw	0
  7272  00DD48  6E06               	movwf	___lwdiv@quotient+1,c
  7273  00DD4A  0E00               	movlw	0
  7274  00DD4C  6E05               	movwf	___lwdiv@quotient,c
  7275  00DD4E  5003               	movf	___lwdiv@divisor,w,c
  7276  00DD50  1004               	iorwf	___lwdiv@divisor+1,w,c
  7277  00DD52  B4D8               	btfsc	status,2,c
  7278  00DD54  D01C               	goto	l951
  7279  00DD56  0E01               	movlw	1
  7280  00DD58  6E07               	movwf	___lwdiv@counter,c
  7281  00DD5A  D004               	goto	l946
  7282  00DD5C  90D8               	bcf	status,0,c
  7283  00DD5E  3603               	rlcf	___lwdiv@divisor,f,c
  7284  00DD60  3604               	rlcf	___lwdiv@divisor+1,f,c
  7285  00DD62  2A07               	incf	___lwdiv@counter,f,c
  7286  00DD64                     l946:
  7287  00DD64  AE04               	btfss	___lwdiv@divisor+1,7,c
  7288  00DD66  D7FA               	goto	l947
  7289  00DD68                     u2820:
  7290  00DD68  90D8               	bcf	status,0,c
  7291  00DD6A  3605               	rlcf	___lwdiv@quotient,f,c
  7292  00DD6C  3606               	rlcf	___lwdiv@quotient+1,f,c
  7293  00DD6E  5003               	movf	___lwdiv@divisor,w,c
  7294  00DD70  5C01               	subwf	___lwdiv@dividend,w,c
  7295  00DD72  5004               	movf	___lwdiv@divisor+1,w,c
  7296  00DD74  5802               	subwfb	___lwdiv@dividend+1,w,c
  7297  00DD76  A0D8               	btfss	status,0,c
  7298  00DD78  D005               	goto	l950
  7299  00DD7A  5003               	movf	___lwdiv@divisor,w,c
  7300  00DD7C  5E01               	subwf	___lwdiv@dividend,f,c
  7301  00DD7E  5004               	movf	___lwdiv@divisor+1,w,c
  7302  00DD80  5A02               	subwfb	___lwdiv@dividend+1,f,c
  7303  00DD82  8005               	bsf	___lwdiv@quotient,0,c
  7304  00DD84                     l950:
  7305  00DD84  90D8               	bcf	status,0,c
  7306  00DD86  3204               	rrcf	___lwdiv@divisor+1,f,c
  7307  00DD88  3203               	rrcf	___lwdiv@divisor,f,c
  7308  00DD8A  2E07               	decfsz	___lwdiv@counter,f,c
  7309  00DD8C  D7ED               	goto	u2820
  7310  00DD8E                     l951:
  7311  00DD8E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7312  00DD92  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7313  00DD96  0012               	return		;funcret
  7314  00DD98                     __end_of___lwdiv:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           plusw1	equ	0xFE3
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           plusw2	equ	0xFDB
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function _initLCD *****************
  7334 ;; Defined at:
  7335 ;;		line 29 in file "standbyMode.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      void 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;Total ram usage:        1 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    2
  7356 ;; This function calls:
  7357 ;;		_lcdInst
  7358 ;; This function is called by:
  7359 ;;		_main
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text15
  7364  00DCFA                     __ptext15:
  7365                           	opt stack 0
  7366  00DCFA                     _initLCD:
  7367                           	opt stack 28
  7368                           
  7369                           ;standbyMode.c: 37: _delay((unsigned long)((15)*(40000000/4000.0)));
  7370                           
  7371                           ;incstack = 0
  7372  00DCFA  0EC3               	movlw	195
  7373  00DCFC  6E04               	movwf	??_initLCD& (0+255),c
  7374  00DCFE  0ECD               	movlw	205
  7375  00DD00                     u6217:
  7376  00DD00  2EE8               	decfsz	wreg,f,c
  7377  00DD02  D7FE               	bra	u6217
  7378  00DD04  2E04               	decfsz	??_initLCD& (0+255),f,c
  7379  00DD06  D7FC               	bra	u6217
  7380  00DD08  F000               	nop	
  7381                           
  7382                           ;standbyMode.c: 38: lcdInst(0b00110011);
  7383  00DD0A  0E33               	movlw	51
  7384  00DD0C  EC02  F06E         	call	_lcdInst
  7385                           
  7386                           ;standbyMode.c: 39: lcdInst(0b00110010);
  7387  00DD10  0E32               	movlw	50
  7388  00DD12  EC02  F06E         	call	_lcdInst
  7389                           
  7390                           ;standbyMode.c: 40: lcdInst(0b00101000);
  7391  00DD16  0E28               	movlw	40
  7392  00DD18  EC02  F06E         	call	_lcdInst
  7393                           
  7394                           ;standbyMode.c: 41: lcdInst(0b00001111);
  7395  00DD1C  0E0F               	movlw	15
  7396  00DD1E  EC02  F06E         	call	_lcdInst
  7397                           
  7398                           ;standbyMode.c: 42: lcdInst(0b00000110);
  7399  00DD22  0E06               	movlw	6
  7400  00DD24  EC02  F06E         	call	_lcdInst
  7401                           
  7402                           ;standbyMode.c: 43: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7403  00DD28  0E01               	movlw	1
  7404  00DD2A  EC02  F06E         	call	_lcdInst
  7405  00DD2E  0EC3               	movlw	195
  7406  00DD30  6E04               	movwf	??_initLCD& (0+255),c
  7407  00DD32  0ECD               	movlw	205
  7408  00DD34                     u6227:
  7409  00DD34  2EE8               	decfsz	wreg,f,c
  7410  00DD36  D7FE               	bra	u6227
  7411  00DD38  2E04               	decfsz	??_initLCD& (0+255),f,c
  7412  00DD3A  D7FC               	bra	u6227
  7413  00DD3C  F000               	nop	
  7414                           
  7415                           ;standbyMode.c: 46: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  7416  00DD3E  0E0F               	movlw	15
  7417  00DD40  EC02  F06E         	call	_lcdInst
  7418  00DD44  0012               	return		;funcret
  7419  00DD46                     __end_of_initLCD:
  7420                           	opt stack 0
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           intcon	equ	0xFF2
  7428                           postinc0	equ	0xFEE
  7429                           wreg	equ	0xFE8
  7430                           plusw1	equ	0xFE3
  7431                           postinc2	equ	0xFDE
  7432                           postdec2	equ	0xFDD
  7433                           plusw2	equ	0xFDB
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function _lcdInst *****************
  7439 ;; Defined at:
  7440 ;;		line 15 in file "standbyMode.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  data            1    wreg     unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  data            1    2[COMRAM] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;Total ram usage:        1 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    1
  7461 ;; This function calls:
  7462 ;;		_lcdNibble
  7463 ;; This function is called by:
  7464 ;;		_initLCD
  7465 ;;		_viewLogs
  7466 ;;		_food_press
  7467 ;;		_diet_press
  7468 ;;		_which_drawer
  7469 ;;		_standbyMode
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	text16
  7474  00DC04                     __ptext16:
  7475                           	opt stack 0
  7476  00DC04                     _lcdInst:
  7477                           	opt stack 27
  7478                           
  7479                           ;incstack = 0
  7480                           ;lcdInst@data stored from wreg
  7481  00DC04  6E03               	movwf	lcdInst@data,c
  7482                           
  7483                           ;standbyMode.c: 23: LATDbits.LATD2 = 0;
  7484  00DC06  948C               	bcf	3980,2,c	;volatile
  7485                           
  7486                           ;standbyMode.c: 24: lcdNibble(data);
  7487  00DC08  5003               	movf	lcdInst@data,w,c
  7488  00DC0A  ECCC  F06E         	call	_lcdNibble
  7489                           
  7490                           ;standbyMode.c: 25: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7491  00DC0E  0EC8               	movlw	200
  7492  00DC10                     u6237:
  7493  00DC10  D000               	nop2	
  7494  00DC12  2EE8               	decfsz	wreg,f,c
  7495  00DC14  D7FD               	bra	u6237
  7496  00DC16  0012               	return		;funcret
  7497  00DC18                     __end_of_lcdInst:
  7498                           	opt stack 0
  7499                           tblptru	equ	0xFF8
  7500                           tblptrh	equ	0xFF7
  7501                           tblptrl	equ	0xFF6
  7502                           tablat	equ	0xFF5
  7503                           prodh	equ	0xFF4
  7504                           prodl	equ	0xFF3
  7505                           intcon	equ	0xFF2
  7506                           postinc0	equ	0xFEE
  7507                           wreg	equ	0xFE8
  7508                           plusw1	equ	0xFE3
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           plusw2	equ	0xFDB
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _lcdNibble *****************
  7517 ;; Defined at:
  7518 ;;		line 50 in file "standbyMode.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  data            1    wreg     unsigned char 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  data            1    1[COMRAM] unsigned char 
  7523 ;;  temp            1    0[COMRAM] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  1    wreg      void 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        2 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; This function calls:
  7540 ;;		Nothing
  7541 ;; This function is called by:
  7542 ;;		_lcdInst
  7543 ;;		_putch
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text17
  7548  00DD98                     __ptext17:
  7549                           	opt stack 0
  7550  00DD98                     _lcdNibble:
  7551                           	opt stack 27
  7552                           
  7553                           ;incstack = 0
  7554                           ;lcdNibble@data stored from wreg
  7555  00DD98  6E02               	movwf	lcdNibble@data,c
  7556                           
  7557                           ;standbyMode.c: 58: char temp = (unsigned char) (data & 0xF0);
  7558  00DD9A  5002               	movf	lcdNibble@data,w,c
  7559  00DD9C  0BF0               	andlw	240
  7560  00DD9E  6E01               	movwf	lcdNibble@temp,c
  7561                           
  7562                           ;standbyMode.c: 59: LATD = (unsigned char) (LATD & 0x0F);
  7563  00DDA0  508C               	movf	3980,w,c	;volatile
  7564  00DDA2  0B0F               	andlw	15
  7565  00DDA4  6E8C               	movwf	3980,c	;volatile
  7566                           
  7567                           ;standbyMode.c: 60: LATD = (unsigned char) (temp | LATD);
  7568  00DDA6  5001               	movf	lcdNibble@temp,w,c
  7569  00DDA8  108C               	iorwf	3980,w,c	;volatile
  7570  00DDAA  6E8C               	movwf	3980,c	;volatile
  7571                           
  7572                           ;standbyMode.c: 62: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7573  00DDAC  0E00               	movlw	0
  7574  00DDAE  BEF2               	btfsc	intcon,7,c	;volatile
  7575  00DDB0  0E01               	movlw	1
  7576  00DDB2  6E67               	movwf	standbyMode@LCDinterruptState,c
  7577  00DDB4  9EF2               	bcf	intcon,7,c	;volatile
  7578  00DDB6  868C               	bsf	3980,3,c	;volatile
  7579  00DDB8  0E53               	movlw	83
  7580  00DDBA                     u6247:
  7581  00DDBA  2EE8               	decfsz	wreg,f,c
  7582  00DDBC  D7FE               	bra	u6247
  7583  00DDBE  F000               	nop	
  7584  00DDC0  968C               	bcf	3980,3,c	;volatile
  7585  00DDC2  0EC8               	movlw	200
  7586  00DDC4                     u6257:
  7587  00DDC4  D000               	nop2	
  7588  00DDC6  2EE8               	decfsz	wreg,f,c
  7589  00DDC8  D7FD               	bra	u6257
  7590  00DDCA  B067               	btfsc	standbyMode@LCDinterruptState,0,c
  7591  00DDCC  D002               	bra	u15
  7592  00DDCE  9EF2               	bcf	intcon,7,c	;volatile
  7593  00DDD0  D001               	bra	u16
  7594  00DDD2                     u15:
  7595  00DDD2  8EF2               	bsf	intcon,7,c	;volatile
  7596  00DDD4                     u16:
  7597                           
  7598                           ;standbyMode.c: 65: data = (unsigned char) (data << 4);
  7599  00DDD4  3802               	swapf	lcdNibble@data,w,c
  7600  00DDD6  0BF0               	andlw	240
  7601  00DDD8  6E02               	movwf	lcdNibble@data,c
  7602                           
  7603                           ;standbyMode.c: 66: temp = (unsigned char) (data & 0xF0);
  7604  00DDDA  5002               	movf	lcdNibble@data,w,c
  7605  00DDDC  0BF0               	andlw	240
  7606  00DDDE  6E01               	movwf	lcdNibble@temp,c
  7607                           
  7608                           ;standbyMode.c: 67: LATD = (unsigned char) (LATD & 0x0F);
  7609  00DDE0  508C               	movf	3980,w,c	;volatile
  7610  00DDE2  0B0F               	andlw	15
  7611  00DDE4  6E8C               	movwf	3980,c	;volatile
  7612                           
  7613                           ;standbyMode.c: 68: LATD = (unsigned char) (temp | LATD);
  7614  00DDE6  5001               	movf	lcdNibble@temp,w,c
  7615  00DDE8  108C               	iorwf	3980,w,c	;volatile
  7616  00DDEA  6E8C               	movwf	3980,c	;volatile
  7617                           
  7618                           ;standbyMode.c: 70: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7619  00DDEC  0E00               	movlw	0
  7620  00DDEE  BEF2               	btfsc	intcon,7,c	;volatile
  7621  00DDF0  0E01               	movlw	1
  7622  00DDF2  6E67               	movwf	standbyMode@LCDinterruptState,c
  7623  00DDF4  9EF2               	bcf	intcon,7,c	;volatile
  7624  00DDF6  868C               	bsf	3980,3,c	;volatile
  7625  00DDF8  0E53               	movlw	83
  7626  00DDFA                     u6267:
  7627  00DDFA  2EE8               	decfsz	wreg,f,c
  7628  00DDFC  D7FE               	bra	u6267
  7629  00DDFE  F000               	nop	
  7630  00DE00  968C               	bcf	3980,3,c	;volatile
  7631  00DE02  0EC8               	movlw	200
  7632  00DE04                     u6277:
  7633  00DE04  D000               	nop2	
  7634  00DE06  2EE8               	decfsz	wreg,f,c
  7635  00DE08  D7FD               	bra	u6277
  7636  00DE0A  B067               	btfsc	standbyMode@LCDinterruptState,0,c
  7637  00DE0C  D002               	bra	u25
  7638  00DE0E  9EF2               	bcf	intcon,7,c	;volatile
  7639  00DE10  D001               	bra	u26
  7640  00DE12                     u25:
  7641  00DE12  8EF2               	bsf	intcon,7,c	;volatile
  7642  00DE14                     u26:
  7643  00DE14  0012               	return		;funcret
  7644  00DE16                     __end_of_lcdNibble:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           plusw1	equ	0xFE3
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           plusw2	equ	0xFDB
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           tblptru	equ	0xFF8
  7663                           tblptrh	equ	0xFF7
  7664                           tblptrl	equ	0xFF6
  7665                           tablat	equ	0xFF5
  7666                           prodh	equ	0xFF4
  7667                           prodl	equ	0xFF3
  7668                           intcon	equ	0xFF2
  7669                           postinc0	equ	0xFEE
  7670                           wreg	equ	0xFE8
  7671                           plusw1	equ	0xFE3
  7672                           postinc2	equ	0xFDE
  7673                           postdec2	equ	0xFDD
  7674                           plusw2	equ	0xFDB
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679                           	psect	rparam
  7680  0000                     tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           prodh	equ	0xFF4
  7685                           prodl	equ	0xFF3
  7686                           intcon	equ	0xFF2
  7687                           postinc0	equ	0xFEE
  7688                           wreg	equ	0xFE8
  7689                           plusw1	equ	0xFE3
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           plusw2	equ	0xFDB
  7693                           fsr2h	equ	0xFDA
  7694                           fsr2l	equ	0xFD9
  7695                           status	equ	0xFD8


Data Sizes:
    Strings     565
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     104
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_56(CODE[11]), STR_55(CODE[13]), STR_54(CODE[11]), STR_53(CODE[13]), 
		 -> STR_52(CODE[11]), STR_51(CODE[8]), STR_50(CODE[15]), STR_49(CODE[16]), 
		 -> STR_48(CODE[10]), STR_47(CODE[8]), STR_46(CODE[15]), STR_45(CODE[16]), 
		 -> STR_44(CODE[10]), STR_43(CODE[16]), STR_42(CODE[16]), STR_41(CODE[17]), 
		 -> STR_40(CODE[13]), STR_39(CODE[17]), STR_38(CODE[14]), STR_37(CODE[11]), 
		 -> STR_36(CODE[11]), STR_35(CODE[16]), STR_34(CODE[16]), STR_33(CODE[15]), 
		 -> STR_32(CODE[15]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[8]), 
		 -> STR_28(CODE[15]), STR_27(CODE[15]), STR_26(CODE[11]), STR_25(CODE[14]), 
		 -> STR_24(CODE[16]), STR_23(CODE[16]), STR_22(CODE[11]), STR_21(CODE[14]), 
		 -> STR_20(CODE[16]), STR_19(CODE[16]), STR_18(CODE[16]), STR_17(CODE[13]), 
		 -> STR_16(CODE[13]), STR_15(CODE[15]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[18]), STR_11(CODE[6]), STR_10(CODE[16]), STR_9(CODE[5]), 
		 -> STR_8(CODE[16]), STR_7(CODE[9]), STR_6(CODE[17]), STR_5(CODE[7]), 
		 -> STR_4(CODE[9]), STR_3(CODE[17]), STR_2(CODE[11]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_diet_press
    _standbyMode->_food_press
    _which_drawer->_printf
    _viewLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35634
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         23    23      0   35544
                                             47 COMRAM    23    23      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1     196
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    6500
                                             24 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             6     4      2    5693
                                             24 COMRAM     6     4      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4    8826
                                             24 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2    7853
                                             24 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    5357
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _readEEPROM
     _viewLogs
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      68       1       81.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      68      34        0.0%
DATA                 0      0      68       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 19 21:21:33 2018

                 _standbyMode F554                            u15 DDD2                            u16 DDD4  
                          u25 DE12                            u26 DE14                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 F37A  
                         l130 ED2C                           l203 F3CE                           l205 F422  
                         l213 E54C                           l310 E872                           l150 EE68  
                         l134 F54A                           l207 F476                           l151 EE96  
                         l143 EDBC                           l135 ED56                           l320 E934  
                         l160 EF16                           l232 E6D2                           l313 E97E  
                         l305 E866                           l129 F4CC                           l145 EE10  
                         l241 E7E4                           l401 E418                           l330 E9E2  
                         l306 E866                           l170 EFBE                           l146 EE3E  
                         l250 DE20                           l226 E632                           l218 E558  
                         l402 E3EC                           l315 E890                           l171 EFFE  
                         l155 EEC0                           l139 ED80                           l251 DECA  
                         l235 E722                           l340 EABE                           l332 EA0C  
                         l244 E7F0                           l412 E454                           l317 E8F2  
                         l181 F146                           l173 F040                           l165 EF6C  
                         l229 E682                           l350 EBA4                           l342 EAEC  
                         l334 EA38                           l326 E98E                           l238 E760  
                         l191 F220                           l183 F188                           l175 F082  
                         l255 DE2A                           l431 FC86                           l423 F5C8  
                         l360 EC92                           l352 EBD2                           l344 EB1A  
                         l336 EA64                           l328 E9B8                           l192 F260  
                         l264 DE3A                           l504 DC78                           l432 F7BE  
                         l249 DE4A                           l257 DE32                           l281 E156  
                         l417 E4AE                           l433 FA7E                           l362 ECC4  
                         l354 EC02                           l346 EB48                           l338 EA90  
                         l194 F2A2                           l186 F1CA                           l178 F0C4  
                         l370 DEDE                           l450 F90C                           l442 F86C  
                         l426 F766                           l531 DFFA                           l363 ED18  
                         l179 F104                           l371 DEE6                           l451 F9DA  
                         l435 F826                           l524 DFC0                           l356 EC32  
                         l348 EB76                           l196 F2E4                           l284 E23C  
                         l276 E14A                           l380 DF2E                           l372 DEEE  
                         l460 FA78                           l444 FA70                           l452 F97E  
                         l533 E022                           l525 DFD0                           l269 DE42  
                         l381 DF36                           l373 DEF6                           l453 F9D0  
                         l429 F772                           l358 EC62                           l286 E174  
                         l382 DF40                           l374 DEFE                           l470 FB94  
                         l446 F8AE                           l199 F326                           l295 E24E  
                         l367 DF4A                           l375 DF06                           l391 E31A  
                         l471 FBE6                           l439 F860                           l288 E1DA  
                         l376 DF0E                           l368 DED6                           l464 FABC  
                         l537 E064                           l377 DF16                           l369 DFAC  
                         l457 FA18                           l538 E0B2                           l298 E2BE  
                         l378 DF1E                           l394 E49A                           l386 E30E  
                         l458 FA50                           l539 E06A                           l379 DF26  
                         l483 FCEE                           l475 FC2E                           l396 E338  
                         l476 FC66                           l468 FB22                           l469 FBF0  
                         l398 E458                           l478 FD42                           l950 DD84  
                         l951 DD8E                           l960 DCE6                           l961 DCF0  
                         l946 DD64                           l947 DD5C                           l956 DCCE  
                         l957 DCC6                  __CFG_CPB$OFF 000000            standbyMode@display 0037  
                         wreg 000FE8                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l2252 DC2E                          l3362 E92E                          l3690 DC58  
                        l3860 F912                          l3844 F8B6                          l3950 FB22  
                        l2984 E026                          l3856 F90C                          l3954 FB28  
                        l3938 FACC                          STR_1 FEDF                          STR_2 FF94  
                        STR_3 FDFD                          STR_4 FFCA                          STR_5 FFEC  
                        STR_6 FE0E                          STR_7 FFD3                          STR_8 FE5F  
                        STR_9 FFF9                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          u4001 E11E  
                        _LATE 000F8D                          u3130 EF64                          u4200 E90E  
                        u4121 E856                          u3170 EFB6                          u3090 EF0E  
                        u4070 E188                          u3450 F218                          u5210 E42E  
                        u2820 DD68                          u2900 ED78                          u5220 E450  
                        u5310 F7C6                          u6007 E624                          u5080 E384  
                        u5400 F912                          u5320 F7D2                          u6017 E642  
                        u2850 DCD2                          u2930 EDB4                          u5170 E3CA  
                        u6107 E7A2                          u6027 E674                          u3820 E052  
                        u5500 FB28                          u6117 E7BC                          u6037 E692  
                        u5350 F878                          u6207 DC24                          u6127 E0E0  
                        u6047 E6C4                          u3840 E0BA                          u2880 ED4E  
                        u3920 E580                          u6217 DD00                          u6137 E1EE  
                        u6057 E6E2                          u6227 DD34                          u6147 E27E  
                        u6067 E714                          u6237 DC10                          u6157 E2B0  
                        u6077 E732                          u5550 FC8E                          u6247 DDBA  
                        u6167 E808                          u6087 E752                          u5607 F5A0  
                        u6257 DDC4                          u6177 E8A4                          u6097 E770  
                        u5617 F5EA                          u6267 DDFA                          u6187 ECD0  
                        u5707 F7DE                          u5627 F622                          u6277 DE04  
                        u6197 ED02                          u5717 F816                          u5637 F64E  
                        u5807 FB44                          u5727 F832                          u5647 F686  
                        u5817 FB7C                          u5737 F884                          u5657 F6A0  
                        u5907 FD86                          u5827 FBA0                          u5747 F92E  
                        u5667 F6D8                          u5587 F560                          u5917 E2DA  
                        u5837 FBD8                          u5757 F966                          u5677 F6F2  
                        u5597 F586                          u5927 E46C                          u5847 FBFC  
                        u5767 F98A                          u5687 F724                          u5937 E4D8  
                        u5857 FCBA                          u5777 F9C2                          u5697 F73E  
                        u5947 E50A                          u5867 FCE0                          u5787 F9E6  
                        u5957 E524                          u5877 FCFA                          u5797 FA8A  
                        u5967 E5A2                          u5887 FD32                          u5977 E5BA  
                        u5897 FD4E                          u5987 E5DA                          u5997 E5F2  
       __end_of_decode_drawer DFB6                          _main DC80                          _keys FD97  
             food_press@F3045 005F                          fsr2h 000FDA                          fsr2l 000FD9  
               get_digits@sum 0001                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000             viewLogs@keypress2 001E  
           viewLogs@keypress3 001D           standbyMode@keypress 0036                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM DC56               diet_press@F3060 0057  
            __end_of_LCD_LEFT FDC4           standbyMode@whichKey 0034               food_press@count 0025  
             food_press@tally 001F             _drawerInformation 0047            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FE6F  
                       STR_11 FFF3                         STR_20 FE4F                         STR_12 FDC9  
                       STR_21 FF2B                         STR_13 FE3F                         STR_30 FE0E  
                       STR_22 FFAA                         STR_14 FE8F                         STR_15 FEFE  
                       STR_23 FE7F                         STR_31 FDEC                         STR_24 FE7F  
                       STR_40 FF6F                         STR_16 FF62                         STR_32 FEEF  
                       STR_33 FEEF                         STR_17 FF7C                         STR_25 FF39  
                       STR_41 FDDB                         STR_26 FFAA                         STR_50 FF1C  
                       STR_34 FEBF                         STR_18 FEAF                         STR_42 FE9F  
                       STR_51 FFDC                         STR_27 FF0D                         STR_43 FECF  
                       STR_19 FE4F                         STR_35 FE1F                         STR_28 FF0D  
                       STR_44 FFC0                         STR_36 FFB5                         STR_52 FF9F  
                       STR_29 FFE4                         STR_37 FF89                         STR_53 FF55  
                       STR_45 FE2F                         STR_54 FF9F                         STR_38 FF47  
                       STR_46 FF1C                         STR_55 FF55                         STR_39 FDEC  
                       STR_47 FFDC                         STR_56 FF9F                         STR_48 FFC0  
                       STR_49 FE2F               __end_of___lwdiv DD98               __end_of___lwmod DCFA  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000               diet_press@count 0023  
             __end_of_lcdInst DC18                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD DD46                __CFG_EBTRB$OFF 000000               __end_of_dpowers FDC3  
                       _input FDA8                         _putch DC18                         tablat 000FF5  
           _LCDinterruptState 0068                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8          standbyMode@keypress1 0038                __CFG_PBADEN$ON 000000  
             standbyMode@diet 0041               standbyMode@food 003D               standbyMode@zero 003B  
             __initialization DC40                  __end_of_main DCB8                  __end_of_keys FDA8  
                standbyMode@i 0043                __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FDC5  
            food_press@drawer 001B                        ??_main 0047                 __activetblptr 000002  
         food_press@backCheck 0021                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _EEDATA 000FA8                        _EECON2 000FA7                        ?_putch 0001  
            diet_press@drawer 0019                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 DC46  
                   ??_lcdInst 0003                        _printf DFB6           food_press@foodTable 0027  
                   ??_initLCD 0004               get_digits@count 0005                  __mediumconst FD96  
            __end_of_viewLogs E7FC                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization DC4C  
        which_drawer@keypress 0024                 ___rparam_used 000001               writeEEPROM@data 0001  
                ?_standbyMode 0001                __pcstackCOMRAM 0001                 __end_of_input FDB9  
               __end_of_putch DC2C            __size_of_lcdNibble 007E                 check_food@sum 0001  
           food_press@dietSum 0019             food_press@isValid 0023                       ??_putch 0003  
                  _check_food ED22                  ?_writeEEPROM 0001                    _diet_press E7FC  
                     ?_printf 000D                    _get_digits DE16                    _readEEPROM DC2C  
      standbyMode@drawerCount 003F                    _food_press E0D4             __end_of_lcdNibble DE16  
                     __Hparam 0000                       __Lparam 0000                     ?_viewLogs 0019  
                     ___lwdiv DD46                       ___lwmod DCB8                       __pcinit DC40  
                     __ramtop 1000                       _lcdInst DC04                       __ptext0 DC80  
                     __ptext1 F554                       __ptext2 DC56                       __ptext3 E2C8  
                     __ptext4 DED4                       __ptext5 E4CC                       __ptext6 DC2C  
                     __ptext7 E0D4                       __ptext8 DE16                       __ptext9 ED22  
      __size_of_decode_drawer 00E2               __size_of_printf 011E                       _initLCD DCFA  
                     _dpowers FDB9         which_drawer@backCheck 0020                     _LCD_RIGHT FDC4  
        end_of_initialization DC4C               which_drawer@sum 001E         __end_of_LCD_SIZE_HORZ FDC7  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FDC6                 __Lmediumconst FD96  
                     printf@c 0018                       printf@f 000D                       postdec2 000FDD  
                  ??_viewLogs 001B                       postinc0 000FEE                       postinc2 000FDE  
        __size_of_standbyMode 0842                   ?_diet_press 0019                     _PORTBbits 000F81  
               ?_which_drawer 0019           diet_press@backCheck 0021                   ?_get_digits 0001  
           readEEPROM@address 0001             standbyMode@drawer 0045                 _decode_drawer DED4  
                 ?_readEEPROM 0001                   ?_food_press 0019           diet_press@dietTable 0028  
        __size_of_writeEEPROM 002A        standbyMode@validDrawer 0039           __size_of_check_food 0832  
              ??_which_drawer 001B                __end_of_printf E0D4           start_initialization DC40  
              ?_decode_drawer 0001           __size_of_diet_press 0526           __size_of_get_digits 00BE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0011            food_press@keypress 002F  
         __size_of_readEEPROM 0014           __size_of_food_press 01F4  standbyMode@LCDinterruptState 0067  
                 __pbssCOMRAM 0047           decode_drawer@drawer 0001              ___lwdiv@dividend 0001  
           __CFG_CCP2MX$PORTC 000000                 __pmediumconst FD96                     _lcdNibble DD98  
                    ?___lwdiv 0001                      ?___lwmod 0008             __size_of_viewLogs 0330  
                    ?_lcdInst 0001                      ?_initLCD 0001           check_food@foodInput 0003  
            ___lwdiv@quotient 0005               ??_decode_drawer 0003                __size_of_putch 0014  
                ??_check_food 0005                      _LCD_LEFT FDC3                      _LATDbits 000F8C  
        __end_of_which_drawer E4CC              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
                ??_diet_press 001B            __end_of_check_food F554                 lcdNibble@data 0002  
                  printf@flag 0014                 lcdNibble@temp 0001                    printf@prec 0015  
                ??_get_digits 0003                _LCD_HORZ_LIMIT FDC8                 diet_press@sum 0025  
           which_drawer@count 0022            __end_of_diet_press ED22                  ??_readEEPROM 0001  
                ??_food_press 001D            diet_press@keypress 0027                    _EECON1bits 000FA6  
                    __Hrparam 0000                 ??_standbyMode 0030                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits DED4            diet_press@previous 001D  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_lcdInst 0014  
            __size_of_initLCD 004C            __end_of_readEEPROM DC40        __end_of_LCD_HORZ_LIMIT FDC9  
          __end_of_food_press E2C8               ___lwdiv@divisor 0003               ___lwdiv@counter 0007  
                    __ptext10 E7FC                      __ptext11 DFB6                      __ptext12 DC18  
                    __ptext13 DCB8                      __ptext14 DD46                      __ptext15 DCFA  
                    __ptext16 DC04                      __ptext17 DD98                _LCD_VERT_LIMIT FDC7  
               __size_of_main 0038                 ??_writeEEPROM 0002                   ??_lcdNibble 0001  
                    _viewLogs E4CC                     printf@val 0016           __end_of_standbyMode FD96  
    decode_drawer@returnValue 0005              which_drawer@rand 001C                     putch@data 0003  
                  _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FDC8         __size_of_which_drawer 0204  
   standbyMode@firstIteration 0032                 _LCD_SIZE_HORZ FDC6              ___lwmod@dividend 0008  
               _LCD_SIZE_VERT FDC5                      printf@ap 0012                   diet_press@i 001F  
                 lcdInst@data 0003           __end_of_writeEEPROM DC80                  _which_drawer E2C8  
             ___lwmod@divisor 000A               ___lwmod@counter 000C         check_food@returnValue 0007  
