

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 27 17:37:31 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4620 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	mediumconst
    80  00FD22                     __pmediumconst:
    81                           	opt stack 0
    82  00FD22  00                 	db	0
    83  00FD23                     _keys:
    84                           	opt stack 0
    85  00FD23  31                 	db	49
    86  00FD24  32                 	db	50
    87  00FD25  33                 	db	51
    88  00FD26  41                 	db	65
    89  00FD27  34                 	db	52
    90  00FD28  35                 	db	53
    91  00FD29  36                 	db	54
    92  00FD2A  42                 	db	66
    93  00FD2B  37                 	db	55
    94  00FD2C  38                 	db	56
    95  00FD2D  39                 	db	57
    96  00FD2E  43                 	db	67
    97  00FD2F  2A                 	db	42
    98  00FD30  30                 	db	48
    99  00FD31  23                 	db	35
   100  00FD32  44                 	db	68
   101  00FD33  00                 	db	0
   102  00FD34                     __end_of_keys:
   103                           	opt stack 0
   104  00FD34                     _input:
   105                           	opt stack 0
   106  00FD34  31                 	db	49
   107  00FD35  32                 	db	50
   108  00FD36  33                 	db	51
   109  00FD37  52                 	db	82
   110  00FD38  34                 	db	52
   111  00FD39  35                 	db	53
   112  00FD3A  36                 	db	54
   113  00FD3B  46                 	db	70
   114  00FD3C  37                 	db	55
   115  00FD3D  38                 	db	56
   116  00FD3E  39                 	db	57
   117  00FD3F  4C                 	db	76
   118  00FD40  2A                 	db	42
   119  00FD41  30                 	db	48
   120  00FD42  23                 	db	35
   121  00FD43  44                 	db	68
   122  00FD44  00                 	db	0
   123  00FD45                     __end_of_input:
   124                           	opt stack 0
   125  00FD45                     _dpowers:
   126                           	opt stack 0
   127  00FD45  0001               	dw	1
   128  00FD47  000A               	dw	10
   129  00FD49  0064               	dw	100
   130  00FD4B  03E8               	dw	1000
   131  00FD4D  2710               	dw	10000
   132  00FD4F                     __end_of_dpowers:
   133                           	opt stack 0
   134  00FD4F                     _hexpowers:
   135                           	opt stack 0
   136  00FD4F  0001               	dw	1
   137  00FD51  0010               	dw	16
   138  00FD53  0100               	dw	256
   139  00FD55  1000               	dw	4096
   140  00FD57                     __end_of_hexpowers:
   141                           	opt stack 0
   142  00FD57                     _happynewyear:
   143                           	opt stack 0
   144  00FD57  00                 	db	0
   145  00FD58  28                 	db	40
   146  00FD59  00                 	db	0
   147  00FD5A  06                 	db	6
   148  00FD5B  24                 	db	36
   149  00FD5C  02                 	db	2
   150  00FD5D  18                 	db	24
   151  00FD5E                     __end_of_happynewyear:
   152                           	opt stack 0
   153  00FD5E                     _LCD_LEFT:
   154                           	opt stack 0
   155  00FD5E  00                 	db	0
   156  00FD5F                     __end_of_LCD_LEFT:
   157                           	opt stack 0
   158  00FD5F                     _LCD_RIGHT:
   159                           	opt stack 0
   160  00FD5F  01                 	db	1
   161  00FD60                     __end_of_LCD_RIGHT:
   162                           	opt stack 0
   163  00FD60                     _LCD_SIZE_VERT:
   164                           	opt stack 0
   165  00FD60  02                 	db	2
   166  00FD61                     __end_of_LCD_SIZE_VERT:
   167                           	opt stack 0
   168  00FD61                     _LCD_SIZE_HORZ:
   169                           	opt stack 0
   170  00FD61  10                 	db	16
   171  00FD62                     __end_of_LCD_SIZE_HORZ:
   172                           	opt stack 0
   173  00FD62                     _LCD_VERT_LIMIT:
   174                           	opt stack 0
   175  00FD62  02                 	db	2
   176  00FD63                     __end_of_LCD_VERT_LIMIT:
   177                           	opt stack 0
   178  00FD63                     _LCD_HORZ_LIMIT:
   179                           	opt stack 0
   180  00FD63  28                 	db	40
   181  00FD64                     __end_of_LCD_HORZ_LIMIT:
   182                           	opt stack 0
   183  0000                     _SSPBUF	set	4041
   184  0000                     _SSPCON2bits	set	4037
   185  0000                     _SSPADD	set	4040
   186  0000                     _SSPCON2	set	4037
   187  0000                     _SSPCON1	set	4038
   188  0000                     _SSPSTAT	set	4039
   189  0000                     _TRISCbits	set	3988
   190  0000                     _SSPCON1bits	set	4038
   191  0000                     _EECON2	set	4007
   192  0000                     _EEDATA	set	4008
   193  0000                     _EEADR	set	4009
   194  0000                     _EECON1bits	set	4006
   195  0000                     _PORTB	set	3969
   196  0000                     _PORTBbits	set	3969
   197  0000                     _INTCONbits	set	4082
   198  0000                     _LATDbits	set	3980
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON0	set	4034
   201  0000                     _TRISE	set	3990
   202  0000                     _TRISD	set	3989
   203  0000                     _TRISC	set	3988
   204  0000                     _TRISB	set	3987
   205  0000                     _TRISA	set	3986
   206  0000                     _LATE	set	3981
   207  0000                     _LATD	set	3980
   208  0000                     _LATC	set	3979
   209  0000                     _LATB	set	3978
   210  0000                     _LATA	set	3977
   211  00FD64                     STR_23:
   212  00FD64  52                 	db	82	;'R'
   213  00FD65  65                 	db	101	;'e'
   214  00FD66  6D                 	db	109	;'m'
   215  00FD67  61                 	db	97	;'a'
   216  00FD68  69                 	db	105	;'i'
   217  00FD69  6E                 	db	110	;'n'
   218  00FD6A  69                 	db	105	;'i'
   219  00FD6B  6E                 	db	110	;'n'
   220  00FD6C  67                 	db	103	;'g'
   221  00FD6D  20                 	db	32
   222  00FD6E  70                 	db	112	;'p'
   223  00FD6F  69                 	db	105	;'i'
   224  00FD70  65                 	db	101	;'e'
   225  00FD71  63                 	db	99	;'c'
   226  00FD72  65                 	db	101	;'e'
   227  00FD73  73                 	db	115	;'s'
   228  00FD74  3A                 	db	58	;':'
   229  00FD75  00                 	db	0
   230  00FD76                     STR_70:
   231  00FD76  30                 	db	48	;'0'
   232  00FD77  31                 	db	49	;'1'
   233  00FD78  32                 	db	50	;'2'
   234  00FD79  33                 	db	51	;'3'
   235  00FD7A  34                 	db	52	;'4'
   236  00FD7B  35                 	db	53	;'5'
   237  00FD7C  36                 	db	54	;'6'
   238  00FD7D  37                 	db	55	;'7'
   239  00FD7E  38                 	db	56	;'8'
   240  00FD7F  39                 	db	57	;'9'
   241  00FD80  61                 	db	97	;'a'
   242  00FD81  62                 	db	98	;'b'
   243  00FD82  63                 	db	99	;'c'
   244  00FD83  64                 	db	100	;'d'
   245  00FD84  65                 	db	101	;'e'
   246  00FD85  66                 	db	102	;'f'
   247  00FD86  00                 	db	0
   248  00FD87                     STR_54:
   249  00FD87  64                 	db	100	;'d'
   250  00FD88  72                 	db	114	;'r'
   251  00FD89  61                 	db	97	;'a'
   252  00FD8A  77                 	db	119	;'w'
   253  00FD8B  65                 	db	101	;'e'
   254  00FD8C  72                 	db	114	;'r'
   255  00FD8D  73                 	db	115	;'s'
   256  00FD8E  20                 	db	32
   257  00FD8F  72                 	db	114	;'r'
   258  00FD90  65                 	db	101	;'e'
   259  00FD91  61                 	db	97	;'a'
   260  00FD92  63                 	db	99	;'c'
   261  00FD93  68                 	db	104	;'h'
   262  00FD94  65                 	db	101	;'e'
   263  00FD95  64                 	db	100	;'d'
   264  00FD96  21                 	db	33
   265  00FD97  00                 	db	0
   266  00FD98                     STR_42:
   267  00FD98  62                 	db	98	;'b'
   268  00FD99  65                 	db	101	;'e'
   269  00FD9A  67                 	db	103	;'g'
   270  00FD9B  69                 	db	105	;'i'
   271  00FD9C  6E                 	db	110	;'n'
   272  00FD9D  20                 	db	32
   273  00FD9E  6F                 	db	111	;'o'
   274  00FD9F  70                 	db	112	;'p'
   275  00FDA0  65                 	db	101	;'e'
   276  00FDA1  72                 	db	114	;'r'
   277  00FDA2  61                 	db	97	;'a'
   278  00FDA3  74                 	db	116	;'t'
   279  00FDA4  69                 	db	105	;'i'
   280  00FDA5  6F                 	db	111	;'o'
   281  00FDA6  6E                 	db	110	;'n'
   282  00FDA7  2E                 	db	46
   283  00FDA8  00                 	db	0
   284  00FDA9                     STR_9:
   285  00FDA9  50                 	db	80	;'P'
   286  00FDAA  6C                 	db	108	;'l'
   287  00FDAB  65                 	db	101	;'e'
   288  00FDAC  61                 	db	97	;'a'
   289  00FDAD  73                 	db	115	;'s'
   290  00FDAE  65                 	db	101	;'e'
   291  00FDAF  20                 	db	32
   292  00FDB0  69                 	db	105	;'i'
   293  00FDB1  6E                 	db	110	;'n'
   294  00FDB2  70                 	db	112	;'p'
   295  00FDB3  75                 	db	117	;'u'
   296  00FDB4  74                 	db	116	;'t'
   297  00FDB5  20                 	db	32
   298  00FDB6  6C                 	db	108	;'l'
   299  00FDB7  6F                 	db	111	;'o'
   300  00FDB8  67                 	db	103	;'g'
   301  00FDB9  00                 	db	0
   302  00FDBA                     STR_24:
   303  00FDBA  52                 	db	82	;'R'
   304  00FDBB  3A                 	db	58	;':'
   305  00FDBC  25                 	db	37
   306  00FDBD  69                 	db	105	;'i'
   307  00FDBE  20                 	db	32
   308  00FDBF  20                 	db	32
   309  00FDC0  46                 	db	70	;'F'
   310  00FDC1  3A                 	db	58	;':'
   311  00FDC2  25                 	db	37
   312  00FDC3  69                 	db	105	;'i'
   313  00FDC4  20                 	db	32
   314  00FDC5  20                 	db	32
   315  00FDC6  4C                 	db	76	;'L'
   316  00FDC7  3A                 	db	58	;':'
   317  00FDC8  25                 	db	37
   318  00FDC9  69                 	db	105	;'i'
   319  00FDCA  00                 	db	0
   320  00FDCB                     STR_5:
   321  00FDCB  50                 	db	80	;'P'
   322  00FDCC  72                 	db	114	;'r'
   323  00FDCD  65                 	db	101	;'e'
   324  00FDCE  73                 	db	115	;'s'
   325  00FDCF  73                 	db	115	;'s'
   326  00FDD0  20                 	db	32
   327  00FDD1  61                 	db	97	;'a'
   328  00FDD2  6E                 	db	110	;'n'
   329  00FDD3  79                 	db	121	;'y'
   330  00FDD4  20                 	db	32
   331  00FDD5  6B                 	db	107	;'k'
   332  00FDD6  65                 	db	101	;'e'
   333  00FDD7  79                 	db	121	;'y'
   334  00FDD8  20                 	db	32
   335  00FDD9  74                 	db	116	;'t'
   336  00FDDA  6F                 	db	111	;'o'
   337  00FDDB  00                 	db	0
   338  00FDDC                     STR_7:
   339  00FDDC  25                 	db	37
   340  00FDDD  69                 	db	105	;'i'
   341  00FDDE  20                 	db	32
   342  00FDDF  70                 	db	112	;'p'
   343  00FDE0  72                 	db	114	;'r'
   344  00FDE1  65                 	db	101	;'e'
   345  00FDE2  76                 	db	118	;'v'
   346  00FDE3  69                 	db	105	;'i'
   347  00FDE4  6F                 	db	111	;'o'
   348  00FDE5  75                 	db	117	;'u'
   349  00FDE6  73                 	db	115	;'s'
   350  00FDE7  20                 	db	32
   351  00FDE8  6C                 	db	108	;'l'
   352  00FDE9  6F                 	db	111	;'o'
   353  00FDEA  67                 	db	103	;'g'
   354  00FDEB  73                 	db	115	;'s'
   355  00FDEC  00                 	db	0
   356  00FDED                     STR_44:
   357  00FDED  63                 	db	99	;'c'
   358  00FDEE  61                 	db	97	;'a'
   359  00FDEF  62                 	db	98	;'b'
   360  00FDF0  69                 	db	105	;'i'
   361  00FDF1  6E                 	db	110	;'n'
   362  00FDF2  65                 	db	101	;'e'
   363  00FDF3  74                 	db	116	;'t'
   364  00FDF4  20                 	db	32
   365  00FDF5  73                 	db	115	;'s'
   366  00FDF6  6F                 	db	111	;'o'
   367  00FDF7  72                 	db	114	;'r'
   368  00FDF8  74                 	db	116	;'t'
   369  00FDF9  65                 	db	101	;'e'
   370  00FDFA  72                 	db	114	;'r'
   371  00FDFB  21                 	db	33
   372  00FDFC  00                 	db	0
   373  00FDFD                     STR_58:
   374  00FDFD  6E                 	db	110	;'n'
   375  00FDFE  75                 	db	117	;'u'
   376  00FDFF  6D                 	db	109	;'m'
   377  00FE00  62                 	db	98	;'b'
   378  00FE01  65                 	db	101	;'e'
   379  00FE02  72                 	db	114	;'r'
   380  00FE03  20                 	db	32
   381  00FE04  70                 	db	112	;'p'
   382  00FE05  72                 	db	114	;'r'
   383  00FE06  65                 	db	101	;'e'
   384  00FE07  73                 	db	115	;'s'
   385  00FE08  73                 	db	115	;'s'
   386  00FE09  65                 	db	101	;'e'
   387  00FE0A  64                 	db	100	;'d'
   388  00FE0B  2E                 	db	46
   389  00FE0C  00                 	db	0
   390  00FE0D                     STR_30:
   391  00FE0D  44                 	db	68	;'D'
   392  00FE0E  72                 	db	114	;'r'
   393  00FE0F  61                 	db	97	;'a'
   394  00FE10  77                 	db	119	;'w'
   395  00FE11  65                 	db	101	;'e'
   396  00FE12  72                 	db	114	;'r'
   397  00FE13  20                 	db	32
   398  00FE14  25                 	db	37
   399  00FE15  69                 	db	105	;'i'
   400  00FE16  20                 	db	32
   401  00FE17  66                 	db	102	;'f'
   402  00FE18  6F                 	db	111	;'o'
   403  00FE19  6F                 	db	111	;'o'
   404  00FE1A  64                 	db	100	;'d'
   405  00FE1B  3A                 	db	58	;':'
   406  00FE1C  00                 	db	0
   407  00FE1D                     STR_16:
   408  00FE1D  4F                 	db	79	;'O'
   409  00FE1E  70                 	db	112	;'p'
   410  00FE1F  65                 	db	101	;'e'
   411  00FE20  72                 	db	114	;'r'
   412  00FE21  61                 	db	97	;'a'
   413  00FE22  74                 	db	116	;'t'
   414  00FE23  69                 	db	105	;'i'
   415  00FE24  6F                 	db	111	;'o'
   416  00FE25  6E                 	db	110	;'n'
   417  00FE26  20                 	db	32
   418  00FE27  74                 	db	116	;'t'
   419  00FE28  69                 	db	105	;'i'
   420  00FE29  6D                 	db	109	;'m'
   421  00FE2A  65                 	db	101	;'e'
   422  00FE2B  3A                 	db	58	;':'
   423  00FE2C  00                 	db	0
   424  00FE2D                     STR_18:
   425  00FE2D  4D                 	db	77	;'M'
   426  00FE2E  61                 	db	97	;'a'
   427  00FE2F  72                 	db	114	;'r'
   428  00FE30  6B                 	db	107	;'k'
   429  00FE31  65                 	db	101	;'e'
   430  00FE32  64                 	db	100	;'d'
   431  00FE33  20                 	db	32
   432  00FE34  64                 	db	100	;'d'
   433  00FE35  72                 	db	114	;'r'
   434  00FE36  61                 	db	97	;'a'
   435  00FE37  77                 	db	119	;'w'
   436  00FE38  65                 	db	101	;'e'
   437  00FE39  72                 	db	114	;'r'
   438  00FE3A  73                 	db	115	;'s'
   439  00FE3B  3A                 	db	58	;':'
   440  00FE3C  00                 	db	0
   441  00FE3D                     STR_34:
   442  00FE3D  44                 	db	68	;'D'
   443  00FE3E  72                 	db	114	;'r'
   444  00FE3F  61                 	db	97	;'a'
   445  00FE40  77                 	db	119	;'w'
   446  00FE41  65                 	db	101	;'e'
   447  00FE42  72                 	db	114	;'r'
   448  00FE43  20                 	db	32
   449  00FE44  25                 	db	37
   450  00FE45  69                 	db	105	;'i'
   451  00FE46  20                 	db	32
   452  00FE47  64                 	db	100	;'d'
   453  00FE48  69                 	db	105	;'i'
   454  00FE49  65                 	db	101	;'e'
   455  00FE4A  74                 	db	116	;'t'
   456  00FE4B  3A                 	db	58	;':'
   457  00FE4C  00                 	db	0
   458  00FE4D                     STR_55:
   459  00FE4D  41                 	db	65	;'A'
   460  00FE4E  6E                 	db	110	;'n'
   461  00FE4F  6F                 	db	111	;'o'
   462  00FE50  74                 	db	116	;'t'
   463  00FE51  68                 	db	104	;'h'
   464  00FE52  65                 	db	101	;'e'
   465  00FE53  72                 	db	114	;'r'
   466  00FE54  20                 	db	32
   467  00FE55  64                 	db	100	;'d'
   468  00FE56  72                 	db	114	;'r'
   469  00FE57  61                 	db	97	;'a'
   470  00FE58  77                 	db	119	;'w'
   471  00FE59  65                 	db	101	;'e'
   472  00FE5A  72                 	db	114	;'r'
   473  00FE5B  3F                 	db	63	;'?'
   474  00FE5C  00                 	db	0
   475  00FE5D                     STR_43:
   476  00FE5D  57                 	db	87	;'W'
   477  00FE5E  65                 	db	101	;'e'
   478  00FE5F  6C                 	db	108	;'l'
   479  00FE60  63                 	db	99	;'c'
   480  00FE61  6F                 	db	111	;'o'
   481  00FE62  6D                 	db	109	;'m'
   482  00FE63  65                 	db	101	;'e'
   483  00FE64  20                 	db	32
   484  00FE65  74                 	db	116	;'t'
   485  00FE66  6F                 	db	111	;'o'
   486  00FE67  20                 	db	32
   487  00FE68  79                 	db	121	;'y'
   488  00FE69  6F                 	db	111	;'o'
   489  00FE6A  75                 	db	117	;'u'
   490  00FE6B  72                 	db	114	;'r'
   491  00FE6C  00                 	db	0
   492  00FE6D                     STR_29:
   493  00FE6D  23                 	db	35
   494  00FE6E  20                 	db	32
   495  00FE6F  3D                 	db	61	;'='
   496  00FE70  20                 	db	32
   497  00FE71  4E                 	db	78	;'N'
   498  00FE72  6F                 	db	111	;'o'
   499  00FE73  2C                 	db	44
   500  00FE74  20                 	db	32
   501  00FE75  44                 	db	68	;'D'
   502  00FE76  20                 	db	32
   503  00FE77  3D                 	db	61	;'='
   504  00FE78  20                 	db	32
   505  00FE79  59                 	db	89	;'Y'
   506  00FE7A  65                 	db	101	;'e'
   507  00FE7B  73                 	db	115	;'s'
   508  00FE7C  00                 	db	0
   509  00FE7D                     STR_26:
   510  00FE7D  44                 	db	68	;'D'
   511  00FE7E  72                 	db	114	;'r'
   512  00FE7F  61                 	db	97	;'a'
   513  00FE80  77                 	db	119	;'w'
   514  00FE81  65                 	db	101	;'e'
   515  00FE82  72                 	db	114	;'r'
   516  00FE83  20                 	db	32
   517  00FE84  31                 	db	49	;'1'
   518  00FE85  3A                 	db	58	;':'
   519  00FE86  20                 	db	32
   520  00FE87  52                 	db	82	;'R'
   521  00FE88  46                 	db	70	;'F'
   522  00FE89  31                 	db	49	;'1'
   523  00FE8A  32                 	db	50	;'2'
   524  00FE8B  00                 	db	0
   525  00FE8C                     STR_38:
   526  00FE8C  44                 	db	68	;'D'
   527  00FE8D  72                 	db	114	;'r'
   528  00FE8E  61                 	db	97	;'a'
   529  00FE8F  77                 	db	119	;'w'
   530  00FE90  65                 	db	101	;'e'
   531  00FE91  72                 	db	114	;'r'
   532  00FE92  20                 	db	32
   533  00FE93  6E                 	db	110	;'n'
   534  00FE94  75                 	db	117	;'u'
   535  00FE95  6D                 	db	109	;'m'
   536  00FE96  62                 	db	98	;'b'
   537  00FE97  65                 	db	101	;'e'
   538  00FE98  72                 	db	114	;'r'
   539  00FE99  3A                 	db	58	;':'
   540  00FE9A  00                 	db	0
   541  00FE9B                     STR_25:
   542  00FE9B  49                 	db	73	;'I'
   543  00FE9C  6E                 	db	110	;'n'
   544  00FE9D  70                 	db	112	;'p'
   545  00FE9E  75                 	db	117	;'u'
   546  00FE9F  74                 	db	116	;'t'
   547  00FEA0  20                 	db	32
   548  00FEA1  53                 	db	83	;'S'
   549  00FEA2  75                 	db	117	;'u'
   550  00FEA3  6D                 	db	109	;'m'
   551  00FEA4  6D                 	db	109	;'m'
   552  00FEA5  61                 	db	97	;'a'
   553  00FEA6  72                 	db	114	;'r'
   554  00FEA7  79                 	db	121	;'y'
   555  00FEA8  3A                 	db	58	;':'
   556  00FEA9  00                 	db	0
   557  00FEAA                     STR_3:
   558  00FEAA  31                 	db	49	;'1'
   559  00FEAB  20                 	db	32
   560  00FEAC  70                 	db	112	;'p'
   561  00FEAD  72                 	db	114	;'r'
   562  00FEAE  65                 	db	101	;'e'
   563  00FEAF  76                 	db	118	;'v'
   564  00FEB0  69                 	db	105	;'i'
   565  00FEB1  6F                 	db	111	;'o'
   566  00FEB2  75                 	db	117	;'u'
   567  00FEB3  73                 	db	115	;'s'
   568  00FEB4  20                 	db	32
   569  00FEB5  6C                 	db	108	;'l'
   570  00FEB6  6F                 	db	111	;'o'
   571  00FEB7  67                 	db	103	;'g'
   572  00FEB8  00                 	db	0
   573  00FEB9                     STR_22:
   574  00FEB9  25                 	db	37
   575  00FEBA  69                 	db	105	;'i'
   576  00FEBB  2C                 	db	44
   577  00FEBC  20                 	db	32
   578  00FEBD  25                 	db	37
   579  00FEBE  69                 	db	105	;'i'
   580  00FEBF  2C                 	db	44
   581  00FEC0  20                 	db	32
   582  00FEC1  25                 	db	37
   583  00FEC2  69                 	db	105	;'i'
   584  00FEC3  2C                 	db	44
   585  00FEC4  20                 	db	32
   586  00FEC5  25                 	db	37
   587  00FEC6  69                 	db	105	;'i'
   588  00FEC7  00                 	db	0
   589  00FEC8                     STR_15:
   590  00FEC8  25                 	db	37
   591  00FEC9  30                 	db	48	;'0'
   592  00FECA  32                 	db	50	;'2'
   593  00FECB  69                 	db	105	;'i'
   594  00FECC  2F                 	db	47
   595  00FECD  25                 	db	37
   596  00FECE  30                 	db	48	;'0'
   597  00FECF  32                 	db	50	;'2'
   598  00FED0  69                 	db	105	;'i'
   599  00FED1  2F                 	db	47
   600  00FED2  25                 	db	37
   601  00FED3  30                 	db	48	;'0'
   602  00FED4  32                 	db	50	;'2'
   603  00FED5  69                 	db	105	;'i'
   604  00FED6  00                 	db	0
   605  00FED7                     STR_47:
   606  00FED7  25                 	db	37
   607  00FED8  30                 	db	48	;'0'
   608  00FED9  32                 	db	50	;'2'
   609  00FEDA  78                 	db	120	;'x'
   610  00FEDB  2F                 	db	47
   611  00FEDC  25                 	db	37
   612  00FEDD  30                 	db	48	;'0'
   613  00FEDE  32                 	db	50	;'2'
   614  00FEDF  78                 	db	120	;'x'
   615  00FEE0  2F                 	db	47
   616  00FEE1  25                 	db	37
   617  00FEE2  30                 	db	48	;'0'
   618  00FEE3  32                 	db	50	;'2'
   619  00FEE4  78                 	db	120	;'x'
   620  00FEE5  00                 	db	0
   621  00FEE6                     STR_48:
   622  00FEE6  25                 	db	37
   623  00FEE7  30                 	db	48	;'0'
   624  00FEE8  32                 	db	50	;'2'
   625  00FEE9  78                 	db	120	;'x'
   626  00FEEA  3A                 	db	58	;':'
   627  00FEEB  25                 	db	37
   628  00FEEC  30                 	db	48	;'0'
   629  00FEED  32                 	db	50	;'2'
   630  00FEEE  78                 	db	120	;'x'
   631  00FEEF  3A                 	db	58	;':'
   632  00FEF0  25                 	db	37
   633  00FEF1  30                 	db	48	;'0'
   634  00FEF2  32                 	db	50	;'2'
   635  00FEF3  78                 	db	120	;'x'
   636  00FEF4  00                 	db	0
   637  00FEF5                     STR_59:
   638  00FEF5  44                 	db	68	;'D'
   639  00FEF6  72                 	db	114	;'r'
   640  00FEF7  61                 	db	97	;'a'
   641  00FEF8  77                 	db	119	;'w'
   642  00FEF9  65                 	db	101	;'e'
   643  00FEFA  72                 	db	114	;'r'
   644  00FEFB  20                 	db	32
   645  00FEFC  61                 	db	97	;'a'
   646  00FEFD  6C                 	db	108	;'l'
   647  00FEFE  72                 	db	114	;'r'
   648  00FEFF  65                 	db	101	;'e'
   649  00FF00  61                 	db	97	;'a'
   650  00FF01  64                 	db	100	;'d'
   651  00FF02  79                 	db	121	;'y'
   652  00FF03  00                 	db	0
   653  00FF04                     STR_32:
   654  00FF04  49                 	db	73	;'I'
   655  00FF05  6E                 	db	110	;'n'
   656  00FF06  76                 	db	118	;'v'
   657  00FF07  61                 	db	97	;'a'
   658  00FF08  6C                 	db	108	;'l'
   659  00FF09  69                 	db	105	;'i'
   660  00FF0A  64                 	db	100	;'d'
   661  00FF0B  20                 	db	32
   662  00FF0C  66                 	db	102	;'f'
   663  00FF0D  6F                 	db	111	;'o'
   664  00FF0E  6F                 	db	111	;'o'
   665  00FF0F  64                 	db	100	;'d'
   666  00FF10  21                 	db	33
   667  00FF11  00                 	db	0
   668  00FF12                     STR_36:
   669  00FF12  49                 	db	73	;'I'
   670  00FF13  6E                 	db	110	;'n'
   671  00FF14  76                 	db	118	;'v'
   672  00FF15  61                 	db	97	;'a'
   673  00FF16  6C                 	db	108	;'l'
   674  00FF17  69                 	db	105	;'i'
   675  00FF18  64                 	db	100	;'d'
   676  00FF19  20                 	db	32
   677  00FF1A  64                 	db	100	;'d'
   678  00FF1B  69                 	db	105	;'i'
   679  00FF1C  65                 	db	101	;'e'
   680  00FF1D  74                 	db	116	;'t'
   681  00FF1E  21                 	db	33
   682  00FF1F  00                 	db	0
   683  00FF20                     STR_6:
   684  00FF20  6D                 	db	109	;'m'
   685  00FF21  6F                 	db	111	;'o'
   686  00FF22  76                 	db	118	;'v'
   687  00FF23  65                 	db	101	;'e'
   688  00FF24  20                 	db	32
   689  00FF25  66                 	db	102	;'f'
   690  00FF26  6F                 	db	111	;'o'
   691  00FF27  72                 	db	114	;'r'
   692  00FF28  77                 	db	119	;'w'
   693  00FF29  61                 	db	97	;'a'
   694  00FF2A  72                 	db	114	;'r'
   695  00FF2B  64                 	db	100	;'d'
   696  00FF2C  2E                 	db	46
   697  00FF2D  00                 	db	0
   698  00FF2E                     STR_51:
   699  00FF2E  6F                 	db	111	;'o'
   700  00FF2F  72                 	db	114	;'r'
   701  00FF30  20                 	db	32
   702  00FF31  70                 	db	112	;'p'
   703  00FF32  72                 	db	114	;'r'
   704  00FF33  65                 	db	101	;'e'
   705  00FF34  73                 	db	115	;'s'
   706  00FF35  73                 	db	115	;'s'
   707  00FF36  20                 	db	32
   708  00FF37  44                 	db	68	;'D'
   709  00FF38  20                 	db	32
   710  00FF39  74                 	db	116	;'t'
   711  00FF3A  6F                 	db	111	;'o'
   712  00FF3B  00                 	db	0
   713  00FF3C                     STR_66:
   714  00FF3C  49                 	db	73	;'I'
   715  00FF3D  6E                 	db	110	;'n'
   716  00FF3E  76                 	db	118	;'v'
   717  00FF3F  61                 	db	97	;'a'
   718  00FF40  6C                 	db	108	;'l'
   719  00FF41  69                 	db	105	;'i'
   720  00FF42  64                 	db	100	;'d'
   721  00FF43  20                 	db	32
   722  00FF44  6B                 	db	107	;'k'
   723  00FF45  65                 	db	101	;'e'
   724  00FF46  79                 	db	121	;'y'
   725  00FF47  21                 	db	33
   726  00FF48  00                 	db	0
   727  00FF49                     STR_27:
   728  00FF49  44                 	db	68	;'D'
   729  00FF4A  72                 	db	114	;'r'
   730  00FF4B  61                 	db	97	;'a'
   731  00FF4C  77                 	db	119	;'w'
   732  00FF4D  65                 	db	101	;'e'
   733  00FF4E  72                 	db	114	;'r'
   734  00FF4F  20                 	db	32
   735  00FF50  32                 	db	50	;'2'
   736  00FF51  3A                 	db	58	;':'
   737  00FF52  20                 	db	32
   738  00FF53  4C                 	db	76	;'L'
   739  00FF54  31                 	db	49	;'1'
   740  00FF55  00                 	db	0
   741  00FF56                     STR_53:
   742  00FF56  4D                 	db	77	;'M'
   743  00FF57  61                 	db	97	;'a'
   744  00FF58  78                 	db	120	;'x'
   745  00FF59  69                 	db	105	;'i'
   746  00FF5A  6D                 	db	109	;'m'
   747  00FF5B  75                 	db	117	;'u'
   748  00FF5C  6D                 	db	109	;'m'
   749  00FF5D  20                 	db	32
   750  00FF5E  6F                 	db	111	;'o'
   751  00FF5F  66                 	db	102	;'f'
   752  00FF60  20                 	db	32
   753  00FF61  38                 	db	56	;'8'
   754  00FF62  00                 	db	0
   755  00FF63                     STR_28:
   756  00FF63  41                 	db	65	;'A'
   757  00FF64  6E                 	db	110	;'n'
   758  00FF65  6F                 	db	111	;'o'
   759  00FF66  74                 	db	116	;'t'
   760  00FF67  68                 	db	104	;'h'
   761  00FF68  65                 	db	101	;'e'
   762  00FF69  72                 	db	114	;'r'
   763  00FF6A  20                 	db	32
   764  00FF6B  6C                 	db	108	;'l'
   765  00FF6C  6F                 	db	111	;'o'
   766  00FF6D  67                 	db	103	;'g'
   767  00FF6E  3F                 	db	63	;'?'
   768  00FF6F  00                 	db	0
   769  00FF70                     STR_45:
   770  00FF70  43                 	db	67	;'C'
   771  00FF71  75                 	db	117	;'u'
   772  00FF72  72                 	db	114	;'r'
   773  00FF73  72                 	db	114	;'r'
   774  00FF74  65                 	db	101	;'e'
   775  00FF75  6E                 	db	110	;'n'
   776  00FF76  74                 	db	116	;'t'
   777  00FF77  20                 	db	32
   778  00FF78  64                 	db	100	;'d'
   779  00FF79  61                 	db	97	;'a'
   780  00FF7A  74                 	db	116	;'t'
   781  00FF7B  65                 	db	101	;'e'
   782  00FF7C  00                 	db	0
   783  00FF7D                     STR_50:
   784  00FF7D  76                 	db	118	;'v'
   785  00FF7E  69                 	db	105	;'i'
   786  00FF7F  65                 	db	101	;'e'
   787  00FF80  77                 	db	119	;'w'
   788  00FF81  20                 	db	32
   789  00FF82  6C                 	db	108	;'l'
   790  00FF83  6F                 	db	111	;'o'
   791  00FF84  67                 	db	103	;'g'
   792  00FF85  73                 	db	115	;'s'
   793  00FF86  2C                 	db	44
   794  00FF87  00                 	db	0
   795  00FF88                     STR_2:
   796  00FF88  61                 	db	97	;'a'
   797  00FF89  76                 	db	118	;'v'
   798  00FF8A  61                 	db	97	;'a'
   799  00FF8B  69                 	db	105	;'i'
   800  00FF8C  6C                 	db	108	;'l'
   801  00FF8D  61                 	db	97	;'a'
   802  00FF8E  62                 	db	98	;'b'
   803  00FF8F  6C                 	db	108	;'l'
   804  00FF90  65                 	db	101	;'e'
   805  00FF91  2E                 	db	46
   806  00FF92  00                 	db	0
   807  00FF93                     STR_65:
   808  00FF93  52                 	db	82	;'R'
   809  00FF94  65                 	db	101	;'e'
   810  00FF95  62                 	db	98	;'b'
   811  00FF96  6F                 	db	111	;'o'
   812  00FF97  6F                 	db	111	;'o'
   813  00FF98  74                 	db	116	;'t'
   814  00FF99  69                 	db	105	;'i'
   815  00FF9A  6E                 	db	110	;'n'
   816  00FF9B  67                 	db	103	;'g'
   817  00FF9C  2E                 	db	46
   818  00FF9D  00                 	db	0
   819  00FF9E                     STR_33:
   820  00FF9E  54                 	db	84	;'T'
   821  00FF9F  72                 	db	114	;'r'
   822  00FFA0  79                 	db	121	;'y'
   823  00FFA1  20                 	db	32
   824  00FFA2  61                 	db	97	;'a'
   825  00FFA3  67                 	db	103	;'g'
   826  00FFA4  61                 	db	97	;'a'
   827  00FFA5  69                 	db	105	;'i'
   828  00FFA6  6E                 	db	110	;'n'
   829  00FFA7  2E                 	db	46
   830  00FFA8  00                 	db	0
   831  00FFA9                     STR_49:
   832  00FFA9  50                 	db	80	;'P'
   833  00FFAA  72                 	db	114	;'r'
   834  00FFAB  65                 	db	101	;'e'
   835  00FFAC  73                 	db	115	;'s'
   836  00FFAD  73                 	db	115	;'s'
   837  00FFAE  20                 	db	32
   838  00FFAF  23                 	db	35
   839  00FFB0  20                 	db	32
   840  00FFB1  74                 	db	116	;'t'
   841  00FFB2  6F                 	db	111	;'o'
   842  00FFB3  00                 	db	0
   843  00FFB4                     STR_46:
   844  00FFB4  61                 	db	97	;'a'
   845  00FFB5  6E                 	db	110	;'n'
   846  00FFB6  64                 	db	100	;'d'
   847  00FFB7  20                 	db	32
   848  00FFB8  74                 	db	116	;'t'
   849  00FFB9  69                 	db	105	;'i'
   850  00FFBA  6D                 	db	109	;'m'
   851  00FFBB  65                 	db	101	;'e'
   852  00FFBC  3A                 	db	58	;':'
   853  00FFBD  00                 	db	0
   854  00FFBE                     STR_57:
   855  00FFBE  4E                 	db	78	;'N'
   856  00FFBF  6F                 	db	111	;'o'
   857  00FFC0  20                 	db	32
   858  00FFC1  64                 	db	100	;'d'
   859  00FFC2  72                 	db	114	;'r'
   860  00FFC3  61                 	db	97	;'a'
   861  00FFC4  77                 	db	119	;'w'
   862  00FFC5  65                 	db	101	;'e'
   863  00FFC6  72                 	db	114	;'r'
   864  00FFC7  00                 	db	0
   865  00FFC8                     STR_10:
   866  00FFC8  6E                 	db	110	;'n'
   867  00FFC9  75                 	db	117	;'u'
   868  00FFCA  6D                 	db	109	;'m'
   869  00FFCB  62                 	db	98	;'b'
   870  00FFCC  65                 	db	101	;'e'
   871  00FFCD  72                 	db	114	;'r'
   872  00FFCE  3A                 	db	58	;':'
   873  00FFCF  20                 	db	32
   874  00FFD0  00                 	db	0
   875  00FFD1                     STR_60:
   876  00FFD1  69                 	db	105	;'i'
   877  00FFD2  6E                 	db	110	;'n'
   878  00FFD3  20                 	db	32
   879  00FFD4  75                 	db	117	;'u'
   880  00FFD5  73                 	db	115	;'s'
   881  00FFD6  65                 	db	101	;'e'
   882  00FFD7  21                 	db	33
   883  00FFD8  00                 	db	0
   884  00FFD9                     STR_17:
   885  00FFD9  25                 	db	37
   886  00FFDA  69                 	db	105	;'i'
   887  00FFDB  3A                 	db	58	;':'
   888  00FFDC  25                 	db	37
   889  00FFDD  30                 	db	48	;'0'
   890  00FFDE  32                 	db	50	;'2'
   891  00FFDF  69                 	db	105	;'i'
   892  00FFE0  00                 	db	0
   893  00FFE1                     STR_1:
   894  00FFE1  4E                 	db	78	;'N'
   895  00FFE2  6F                 	db	111	;'o'
   896  00FFE3  20                 	db	32
   897  00FFE4  6C                 	db	108	;'l'
   898  00FFE5  6F                 	db	111	;'o'
   899  00FFE6  67                 	db	103	;'g'
   900  00FFE7  73                 	db	115	;'s'
   901  00FFE8  00                 	db	0
   902  00FFE9                     STR_40:
   903  00FFE9  53                 	db	83	;'S'
   904  00FFEA  74                 	db	116	;'t'
   905  00FFEB  61                 	db	97	;'a'
   906  00FFEC  6E                 	db	110	;'n'
   907  00FFED  64                 	db	100	;'d'
   908  00FFEE  62                 	db	98	;'b'
   909  00FFEF  79                 	db	121	;'y'
   910  00FFF0  00                 	db	0
   911  00FFF1                     STR_11:
   912  00FFF1  47                 	db	71	;'G'
   913  00FFF2  72                 	db	114	;'r'
   914  00FFF3  65                 	db	101	;'e'
   915  00FFF4  61                 	db	97	;'a'
   916  00FFF5  74                 	db	116	;'t'
   917  00FFF6  21                 	db	33
   918  00FFF7  00                 	db	0
   919  00FFF8                     STR_14:
   920  00FFF8  44                 	db	68	;'D'
   921  00FFF9  61                 	db	97	;'a'
   922  00FFFA  74                 	db	116	;'t'
   923  00FFFB  65                 	db	101	;'e'
   924  00FFFC  3A                 	db	58	;':'
   925  00FFFD  00                 	db	0
   926  0000                     
   927                           ; #config settings
   928  00FFFE  00                 	db	0	; dummy byte at the end
   929  0000                     
   930                           	psect	cinit
   931  00D2B0                     __pcinit:
   932                           	opt stack 0
   933  00D2B0                     start_initialization:
   934                           	opt stack 0
   935  00D2B0                     __initialization:
   936                           	opt stack 0
   937                           
   938                           ; Clear objects allocated to BANK0 (24 bytes)
   939  00D2B0  EE00  F080         	lfsr	0,__pbssBANK0
   940  00D2B4  0E18               	movlw	24
   941  00D2B6                     clear_0:
   942  00D2B6  6AEE               	clrf	postinc0,c
   943  00D2B8  06E8               	decf	wreg,f,c
   944  00D2BA  E1FD               	bnz	clear_0
   945                           
   946                           ; Clear objects allocated to COMRAM (10 bytes)
   947  00D2BC  EE00  F071         	lfsr	0,__pbssCOMRAM
   948  00D2C0  0E0A               	movlw	10
   949  00D2C2                     clear_1:
   950  00D2C2  6AEE               	clrf	postinc0,c
   951  00D2C4  06E8               	decf	wreg,f,c
   952  00D2C6  E1FD               	bnz	clear_1
   953  00D2C8                     end_of_initialization:
   954                           	opt stack 0
   955  00D2C8                     __end_of__initialization:
   956                           	opt stack 0
   957  00D2C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   958  00D2CA  6EF8               	movwf	tblptru,c
   959  00D2CC  0100               	movlb	0
   960  00D2CE  EFB6  F069         	goto	_main	;jump to C main() function
   961                           tblptru	equ	0xFF8
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           
   965                           	psect	bssCOMRAM
   966  000071                     __pbssCOMRAM:
   967                           	opt stack 0
   968  000071                     food_press@F3105:
   969                           	opt stack 0
   970  000071                     	ds	8
   971  000079                     standbyMode@LCDinterruptState:
   972                           	opt stack 0
   973  000079                     	ds	1
   974  00007A                     	ds	1
   975                           tblptru	equ	0xFF8
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           
   979                           	psect	bssBANK0
   980  000080                     __pbssBANK0:
   981                           	opt stack 0
   982  000080                     _drawerInformation:
   983                           	opt stack 0
   984  000080                     	ds	16
   985  000090                     diet_press@F3120:
   986                           	opt stack 0
   987  000090                     	ds	8
   988                           tblptru	equ	0xFF8
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           
   992                           	psect	cstackCOMRAM
   993  000001                     __pcstackCOMRAM:
   994                           	opt stack 0
   995  000001                     ??_isdigit:
   996  000001                     ??_I2C_Master_Wait:
   997  000001                     ?_check_food:
   998                           	opt stack 0
   999  000001                     ?_verifyKeypress:
  1000                           	opt stack 0
  1001  000001                     ?_get_digits:
  1002                           	opt stack 0
  1003  000001                     ?_decode_drawer:
  1004                           	opt stack 0
  1005  000001                     ?___wmul:
  1006                           	opt stack 0
  1007  000001                     ?___lwdiv:
  1008                           	opt stack 0
  1009  000001                     ?___lldiv:
  1010                           	opt stack 0
  1011  000001                     lcdNibble@temp:
  1012                           	opt stack 0
  1013  000001                     writeEEPROM@data:
  1014                           	opt stack 0
  1015  000001                     readEEPROM@address:
  1016                           	opt stack 0
  1017  000001                     check_food@sum:
  1018                           	opt stack 0
  1019  000001                     verifyKeypress@keypress:
  1020                           	opt stack 0
  1021  000001                     get_digits@sum:
  1022                           	opt stack 0
  1023  000001                     decode_drawer@drawer:
  1024                           	opt stack 0
  1025  000001                     ___wmul@multiplier:
  1026                           	opt stack 0
  1027  000001                     ___lwdiv@dividend:
  1028                           	opt stack 0
  1029  000001                     ___lldiv@dividend:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x0
  1033  000001                     	ds	1
  1034  000002                     lcdNibble@data:
  1035                           	opt stack 0
  1036  000002                     writeEEPROM@address:
  1037                           	opt stack 0
  1038  000002                     I2C_Master_Read@ackBit:
  1039                           	opt stack 0
  1040  000002                     _isdigit$944:
  1041                           	opt stack 0
  1042  000002                     I2C_Master_Write@byteToWrite:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x1
  1046  000002                     	ds	1
  1047  000003                     ??_shiftEEPROM:
  1048  000003                     ??_verifyKeypress:
  1049  000003                     ??_get_digits:
  1050  000003                     ??_decode_drawer:
  1051  000003                     lcdInst@data:
  1052                           	opt stack 0
  1053  000003                     putch@data:
  1054                           	opt stack 0
  1055  000003                     I2C_Master_Read@receivedByte:
  1056                           	opt stack 0
  1057  000003                     isdigit@c:
  1058                           	opt stack 0
  1059  000003                     check_food@foodInput:
  1060                           	opt stack 0
  1061  000003                     initEEPROM@i:
  1062                           	opt stack 0
  1063  000003                     ___wmul@multiplicand:
  1064                           	opt stack 0
  1065  000003                     ___lwdiv@divisor:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x2
  1069  000003                     	ds	1
  1070  000004                     ??_initLCD:
  1071  000004                     shiftEEPROM@temp:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x3
  1075  000004                     	ds	1
  1076  000005                     ??_check_food:
  1077  000005                     verifyKeypress@logNumber:
  1078                           	opt stack 0
  1079  000005                     get_digits@count:
  1080                           	opt stack 0
  1081  000005                     decode_drawer@returnValue:
  1082                           	opt stack 0
  1083  000005                     ___wmul@product:
  1084                           	opt stack 0
  1085  000005                     ___lwdiv@quotient:
  1086                           	opt stack 0
  1087  000005                     ___lldiv@divisor:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x4
  1091  000005                     	ds	1
  1092  000006                     verifyKeypress@returnVal:
  1093                           	opt stack 0
  1094  000006                     shiftEEPROM@i:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x5
  1098  000006                     	ds	1
  1099  000007                     ___lwdiv@counter:
  1100                           	opt stack 0
  1101  000007                     check_food@returnValue:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x6
  1105  000007                     	ds	1
  1106  000008                     ?___lwmod:
  1107                           	opt stack 0
  1108  000008                     verifyKeypress@i:
  1109                           	opt stack 0
  1110  000008                     ___lwmod@dividend:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x7
  1114  000008                     	ds	1
  1115  000009                     ___lldiv@quotient:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x8
  1119  000009                     	ds	1
  1120  00000A                     ___lwmod@divisor:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x9
  1124  00000A                     	ds	2
  1125  00000C                     ___lwmod@counter:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0xB
  1129  00000C                     	ds	1
  1130  00000D                     ?_printf:
  1131                           	opt stack 0
  1132  00000D                     ___lldiv@counter:
  1133                           	opt stack 0
  1134  00000D                     printf@f:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0xC
  1138  00000D                     	ds	1
  1139  00000E                     I2C_Master_Init@clockFreq:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0xD
  1143  00000E                     	ds	4
  1144  000012                     ??_I2C_Master_Init:
  1145                           
  1146                           ; 1 bytes @ 0x11
  1147  000012                     	ds	5
  1148  000017                     ??_printf:
  1149                           
  1150                           ; 1 bytes @ 0x16
  1151  000017                     	ds	4
  1152  00001B                     printf@idx:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x1A
  1156  00001B                     	ds	1
  1157  00001C                     printf@ap:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x1B
  1161  00001C                     	ds	2
  1162  00001E                     printf@prec:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x1D
  1166  00001E                     	ds	1
  1167  00001F                     printf@val:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x1E
  1171  00001F                     	ds	2
  1172  000021                     printf@flag:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x20
  1176  000021                     	ds	1
  1177  000022                     printf@width:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x21
  1181  000022                     	ds	2
  1182  000024                     printf@c:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x23
  1186  000024                     	ds	1
  1187  000025                     ?_displayLogs:
  1188                           	opt stack 0
  1189  000025                     ?_food_press:
  1190                           	opt stack 0
  1191  000025                     ?_diet_press:
  1192                           	opt stack 0
  1193  000025                     ?_which_drawer:
  1194                           	opt stack 0
  1195  000025                     displayLogs@logNumber:
  1196                           	opt stack 0
  1197  000025                     food_press@dietSum:
  1198                           	opt stack 0
  1199  000025                     diet_press@drawer:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x24
  1203  000025                     	ds	2
  1204  000027                     ??_displayLogs:
  1205  000027                     ??_diet_press:
  1206  000027                     ??_which_drawer:
  1207  000027                     food_press@drawer:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x26
  1211  000027                     	ds	1
  1212  000028                     which_drawer@rand:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x27
  1216  000028                     	ds	1
  1217  000029                     ??_food_press:
  1218  000029                     displayLogs@year:
  1219                           	opt stack 0
  1220  000029                     diet_press@previous:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x28
  1224  000029                     	ds	1
  1225  00002A                     which_drawer@sum:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x29
  1229  00002A                     	ds	1
  1230  00002B                     displayLogs@month:
  1231                           	opt stack 0
  1232  00002B                     food_press@tally:
  1233                           	opt stack 0
  1234  00002B                     diet_press@i:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x2A
  1238  00002B                     	ds	1
  1239  00002C                     which_drawer@backCheck:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x2B
  1243  00002C                     	ds	1
  1244  00002D                     displayLogs@day:
  1245                           	opt stack 0
  1246  00002D                     food_press@backCheck:
  1247                           	opt stack 0
  1248  00002D                     diet_press@backCheck:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x2C
  1252  00002D                     	ds	1
  1253  00002E                     which_drawer@count:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x2D
  1257  00002E                     	ds	1
  1258  00002F                     displayLogs@roundPieces:
  1259                           	opt stack 0
  1260  00002F                     food_press@isValid:
  1261                           	opt stack 0
  1262  00002F                     diet_press@count:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x2E
  1266  00002F                     	ds	1
  1267  000030                     which_drawer@keypress:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x2F
  1271  000030                     	ds	1
  1272  000031                     displayLogs@flatPieces:
  1273                           	opt stack 0
  1274  000031                     food_press@count:
  1275                           	opt stack 0
  1276  000031                     diet_press@sum:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x30
  1280  000031                     	ds	2
  1281  000033                     diet_press@keypress:
  1282                           	opt stack 0
  1283  000033                     displayLogs@longPieces:
  1284                           	opt stack 0
  1285  000033                     food_press@foodTable:
  1286                           	opt stack 0
  1287                           
  1288                           ; 8 bytes @ 0x32
  1289  000033                     	ds	1
  1290  000034                     diet_press@dietTable:
  1291                           	opt stack 0
  1292                           
  1293                           ; 8 bytes @ 0x33
  1294  000034                     	ds	1
  1295  000035                     displayLogs@minutes:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x34
  1299  000035                     	ds	2
  1300  000037                     displayLogs@seconds:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x36
  1304  000037                     	ds	2
  1305  000039                     displayLogs@keypress3:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x38
  1309  000039                     	ds	1
  1310  00003A                     displayLogs@operationTime:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x39
  1314  00003A                     	ds	1
  1315  00003B                     food_press@keypress:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x3A
  1319  00003B                     	ds	1
  1320  00003C                     displayLogs@markedDrawer1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x3B
  1324  00003C                     	ds	2
  1325  00003E                     displayLogs@markedDrawer2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x3D
  1329  00003E                     	ds	2
  1330  000040                     displayLogs@markedDrawer3:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x3F
  1334  000040                     	ds	2
  1335  000042                     displayLogs@markedDrawer4:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x41
  1339  000042                     	ds	2
  1340  000044                     displayLogs@n:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x43
  1344  000044                     	ds	2
  1345  000046                     ?_viewLogs:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x45
  1349  000046                     	ds	2
  1350  000048                     ??_viewLogs:
  1351                           
  1352                           ; 1 bytes @ 0x47
  1353  000048                     	ds	2
  1354  00004A                     viewLogs@checkLog:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x49
  1358  00004A                     	ds	2
  1359  00004C                     viewLogs@returnVal:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x4B
  1363  00004C                     	ds	2
  1364  00004E                     viewLogs@logView:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x4D
  1368  00004E                     	ds	2
  1369  000050                     viewLogs@logNumber:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x4F
  1373  000050                     	ds	1
  1374  000051                     viewLogs@keypress2:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x50
  1378  000051                     	ds	1
  1379  000052                     ??_standbyMode:
  1380                           
  1381                           ; 1 bytes @ 0x51
  1382  000052                     	ds	2
  1383  000054                     standbyMode@time:
  1384                           	opt stack 0
  1385                           
  1386                           ; 7 bytes @ 0x53
  1387  000054                     	ds	7
  1388  00005B                     standbyMode@firstIteration:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x5A
  1392  00005B                     	ds	2
  1393  00005D                     standbyMode@whichKey:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x5C
  1397  00005D                     	ds	2
  1398  00005F                     standbyMode@keypress:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x5E
  1402  00005F                     	ds	1
  1403  000060                     standbyMode@keypress1:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x5F
  1407  000060                     	ds	1
  1408  000061                     standbyMode@validDrawer:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x60
  1412  000061                     	ds	2
  1413  000063                     standbyMode@zero:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x62
  1417  000063                     	ds	2
  1418  000065                     standbyMode@food:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x64
  1422  000065                     	ds	2
  1423  000067                     standbyMode@x:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x66
  1427  000067                     	ds	2
  1428  000069                     standbyMode@drawerCount:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x68
  1432  000069                     	ds	2
  1433  00006B                     standbyMode@diet:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x6A
  1437  00006B                     	ds	2
  1438  00006D                     standbyMode@i:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x6C
  1442  00006D                     	ds	2
  1443  00006F                     standbyMode@drawer:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x6E
  1447  00006F                     	ds	2
  1448  000071                     tblptru	equ	0xFF8
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           
  1452                           ; 1 bytes @ 0x70
  1453 ;;
  1454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1455 ;;
  1456 ;; *************** function _main *****************
  1457 ;; Defined at:
  1458 ;;		line 13 in file "main.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;Total ram usage:        0 bytes
  1477 ;; Hardware stack levels required when called:    6
  1478 ;; This function calls:
  1479 ;;		_initLCD
  1480 ;;		_standbyMode
  1481 ;; This function is called by:
  1482 ;;		Startup code after reset
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text0
  1487  00D36C                     __ptext0:
  1488                           	opt stack 0
  1489  00D36C                     _main:
  1490                           	opt stack 25
  1491                           
  1492                           ;main.c: 19: LATA = 0x00;
  1493                           
  1494                           ;incstack = 0
  1495  00D36C  0E00               	movlw	0
  1496  00D36E  6E89               	movwf	3977,c	;volatile
  1497                           
  1498                           ;main.c: 20: LATB = 0x00;
  1499  00D370  0E00               	movlw	0
  1500  00D372  6E8A               	movwf	3978,c	;volatile
  1501                           
  1502                           ;main.c: 21: LATC = 0x00;
  1503  00D374  0E00               	movlw	0
  1504  00D376  6E8B               	movwf	3979,c	;volatile
  1505                           
  1506                           ;main.c: 22: LATD = 0x00;
  1507  00D378  0E00               	movlw	0
  1508  00D37A  6E8C               	movwf	3980,c	;volatile
  1509                           
  1510                           ;main.c: 23: LATE = 0x00;
  1511  00D37C  0E00               	movlw	0
  1512  00D37E  6E8D               	movwf	3981,c	;volatile
  1513                           
  1514                           ;main.c: 27: TRISA = 0xFF;
  1515  00D380  6892               	setf	3986,c	;volatile
  1516                           
  1517                           ;main.c: 28: TRISB = 0xFF;
  1518  00D382  6893               	setf	3987,c	;volatile
  1519                           
  1520                           ;main.c: 29: TRISC = 0x00;
  1521  00D384  0E00               	movlw	0
  1522  00D386  6E94               	movwf	3988,c	;volatile
  1523                           
  1524                           ;main.c: 30: TRISD = 0x00;
  1525  00D388  0E00               	movlw	0
  1526  00D38A  6E95               	movwf	3989,c	;volatile
  1527                           
  1528                           ;main.c: 31: TRISE = 0x00;
  1529  00D38C  0E00               	movlw	0
  1530  00D38E  6E96               	movwf	3990,c	;volatile
  1531                           
  1532                           ;main.c: 34: ADCON0 = 0x00;
  1533  00D390  0E00               	movlw	0
  1534  00D392  6EC2               	movwf	4034,c	;volatile
  1535                           
  1536                           ;main.c: 35: ADCON1 = 0b00001111;
  1537  00D394  0E0F               	movlw	15
  1538  00D396  6EC1               	movwf	4033,c	;volatile
  1539                           
  1540                           ;main.c: 38: initLCD();
  1541  00D398  ECF3  F069         	call	_initLCD	;wreg free
  1542                           
  1543                           ;main.c: 56: standbyMode();
  1544  00D39C  EC04  F07A         	call	_standbyMode	;wreg free
  1545                           
  1546                           ;main.c: 57: return;
  1547  00D3A0  EF00  F000         	goto	start
  1548  00D3A4                     __end_of_main:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           
  1554 ;; *************** function _standbyMode *****************
  1555 ;; Defined at:
  1556 ;;		line 980 in file "standbyMode.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  keypress1       1   95[COMRAM] unsigned char 
  1561 ;;  whichKey        2   92[COMRAM] unsigned int 
  1562 ;;  drawer          2  110[COMRAM] unsigned int 
  1563 ;;  i               2  108[COMRAM] unsigned int 
  1564 ;;  diet            2  106[COMRAM] unsigned int 
  1565 ;;  drawerCount     2  104[COMRAM] unsigned int 
  1566 ;;  food            2  100[COMRAM] unsigned int 
  1567 ;;  zero            2   98[COMRAM] unsigned int 
  1568 ;;  validDrawer     2   96[COMRAM] unsigned int 
  1569 ;;  firstIterati    2   90[COMRAM] unsigned int 
  1570 ;;  time            7   83[COMRAM] unsigned char [7]
  1571 ;;  x               2  102[COMRAM] unsigned int 
  1572 ;;  keypress        1   94[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;Total ram usage:       31 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    5
  1589 ;; This function calls:
  1590 ;;		_I2C_Master_Init
  1591 ;;		_I2C_Master_Read
  1592 ;;		_I2C_Master_Start
  1593 ;;		_I2C_Master_Stop
  1594 ;;		_I2C_Master_Write
  1595 ;;		_diet_press
  1596 ;;		_food_press
  1597 ;;		_initEEPROM
  1598 ;;		_lcdInst
  1599 ;;		_printf
  1600 ;;		_shiftEEPROM
  1601 ;;		_viewLogs
  1602 ;;		_which_drawer
  1603 ;;		_writeEEPROM
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text1
  1610  00F408                     __ptext1:
  1611                           	opt stack 0
  1612  00F408                     _standbyMode:
  1613                           	opt stack 25
  1614                           
  1615                           ;standbyMode.c: 981: I2C_Master_Init(100000);
  1616                           
  1617                           ;incstack = 0
  1618  00F408  0EA0               	movlw	160
  1619  00F40A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1620  00F40C  0E86               	movlw	134
  1621  00F40E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1622  00F410  0E01               	movlw	1
  1623  00F412  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1624  00F414  0E00               	movlw	0
  1625  00F416  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1626  00F418  EC6B  F06A         	call	_I2C_Master_Init	;wreg free
  1627                           
  1628                           ;standbyMode.c: 982: unsigned char time[7];
  1629                           ;standbyMode.c: 983: unsigned int x = 0;
  1630  00F41C  0E00               	movlw	0
  1631  00F41E  6E68               	movwf	standbyMode@x+1,c
  1632  00F420  0E00               	movlw	0
  1633  00F422  6E67               	movwf	standbyMode@x,c
  1634                           
  1635                           ;standbyMode.c: 984: initEEPROM();
  1636  00F424  EC8E  F069         	call	_initEEPROM	;wreg free
  1637                           
  1638                           ;standbyMode.c: 987: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1639  00F428  0E01               	movlw	1
  1640  00F42A  EC2B  F069         	call	_lcdInst
  1641  00F42E  0EC3               	movlw	195
  1642  00F430  6E52               	movwf	??_standbyMode& (0+255),c
  1643  00F432  0ECD               	movlw	205
  1644  00F434                     u6597:
  1645  00F434  2EE8               	decfsz	wreg,f,c
  1646  00F436  D7FE               	bra	u6597
  1647  00F438  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1648  00F43A  D7FC               	bra	u6597
  1649  00F43C  F000               	nop	
  1650                           
  1651                           ;standbyMode.c: 988: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1652  00F43E  0E0C               	movlw	12
  1653  00F440  EC2B  F069         	call	_lcdInst
  1654                           
  1655                           ;standbyMode.c: 989: printf("Standby");
  1656  00F444  0EE9               	movlw	low STR_40
  1657  00F446  6E0D               	movwf	printf@f,c
  1658  00F448  0EFF               	movlw	high STR_40
  1659  00F44A  6E0E               	movwf	printf@f+1,c
  1660  00F44C  ECAF  F06F         	call	_printf	;wreg free
  1661                           
  1662                           ;standbyMode.c: 990: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1663  00F450  0E66               	movlw	102
  1664  00F452  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1665  00F454  0E76               	movlw	118
  1666  00F456  6E52               	movwf	??_standbyMode& (0+255),c
  1667  00F458  0EC1               	movlw	193
  1668  00F45A                     u6607:
  1669  00F45A  2EE8               	decfsz	wreg,f,c
  1670  00F45C  D7FE               	bra	u6607
  1671  00F45E  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1672  00F460  D7FC               	bra	u6607
  1673  00F462  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1674  00F464  D7FA               	bra	u6607
  1675  00F466  F000               	nop	
  1676                           
  1677                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1678  00F468  0E01               	movlw	1
  1679  00F46A  EC2B  F069         	call	_lcdInst
  1680  00F46E  0EC3               	movlw	195
  1681  00F470  6E52               	movwf	??_standbyMode& (0+255),c
  1682  00F472  0ECD               	movlw	205
  1683  00F474                     u6617:
  1684  00F474  2EE8               	decfsz	wreg,f,c
  1685  00F476  D7FE               	bra	u6617
  1686  00F478  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1687  00F47A  D7FC               	bra	u6617
  1688  00F47C  F000               	nop	
  1689                           
  1690                           ;standbyMode.c: 992: printf("Press any key to");
  1691  00F47E  0ECB               	movlw	low STR_5
  1692  00F480  6E0D               	movwf	printf@f,c
  1693  00F482  0EFD               	movlw	high STR_5
  1694  00F484  6E0E               	movwf	printf@f+1,c
  1695  00F486  ECAF  F06F         	call	_printf	;wreg free
  1696                           
  1697                           ;standbyMode.c: 993: lcdInst(0xC0);;
  1698  00F48A  0EC0               	movlw	192
  1699  00F48C  EC2B  F069         	call	_lcdInst
  1700                           
  1701                           ;standbyMode.c: 994: printf("begin operation.");
  1702  00F490  0E98               	movlw	low STR_42
  1703  00F492  6E0D               	movwf	printf@f,c
  1704  00F494  0EFD               	movlw	high STR_42
  1705  00F496  6E0E               	movwf	printf@f+1,c
  1706  00F498  ECAF  F06F         	call	_printf	;wreg free
  1707  00F49C                     
  1708                           ;standbyMode.c: 997: continue;
  1709  00F49C  A281               	btfss	3969,1,c	;volatile
  1710  00F49E  D7FE               	goto	l475
  1711                           
  1712                           ;standbyMode.c: 998: }
  1713                           ;standbyMode.c: 1001: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1714  00F4A0  0E01               	movlw	1
  1715  00F4A2  EC2B  F069         	call	_lcdInst
  1716  00F4A6  0EC3               	movlw	195
  1717  00F4A8  6E52               	movwf	??_standbyMode& (0+255),c
  1718  00F4AA  0ECD               	movlw	205
  1719  00F4AC                     u6627:
  1720  00F4AC  2EE8               	decfsz	wreg,f,c
  1721  00F4AE  D7FE               	bra	u6627
  1722  00F4B0  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1723  00F4B2  D7FC               	bra	u6627
  1724  00F4B4  F000               	nop	
  1725                           
  1726                           ;standbyMode.c: 1002: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1727  00F4B6  0E0C               	movlw	12
  1728  00F4B8  EC2B  F069         	call	_lcdInst
  1729                           
  1730                           ;standbyMode.c: 1003: printf("Welcome to your");
  1731  00F4BC  0E5D               	movlw	low STR_43
  1732  00F4BE  6E0D               	movwf	printf@f,c
  1733  00F4C0  0EFE               	movlw	high STR_43
  1734  00F4C2  6E0E               	movwf	printf@f+1,c
  1735  00F4C4  ECAF  F06F         	call	_printf	;wreg free
  1736                           
  1737                           ;standbyMode.c: 1004: lcdInst(0xC0);;
  1738  00F4C8  0EC0               	movlw	192
  1739  00F4CA  EC2B  F069         	call	_lcdInst
  1740                           
  1741                           ;standbyMode.c: 1005: printf("cabinet sorter!");
  1742  00F4CE  0EED               	movlw	low STR_44
  1743  00F4D0  6E0D               	movwf	printf@f,c
  1744  00F4D2  0EFD               	movlw	high STR_44
  1745  00F4D4  6E0E               	movwf	printf@f+1,c
  1746  00F4D6  ECAF  F06F         	call	_printf	;wreg free
  1747                           
  1748                           ;standbyMode.c: 1006: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1749  00F4DA  0E33               	movlw	51
  1750  00F4DC  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1751  00F4DE  0EBB               	movlw	187
  1752  00F4E0  6E52               	movwf	??_standbyMode& (0+255),c
  1753  00F4E2  0EE0               	movlw	224
  1754  00F4E4                     u6637:
  1755  00F4E4  2EE8               	decfsz	wreg,f,c
  1756  00F4E6  D7FE               	bra	u6637
  1757  00F4E8  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1758  00F4EA  D7FC               	bra	u6637
  1759  00F4EC  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1760  00F4EE  D7FA               	bra	u6637
  1761                           
  1762                           ;standbyMode.c: 1009: writeEEPROM(250, 2);
  1763  00F4F0  0E02               	movlw	2
  1764  00F4F2  6E01               	movwf	writeEEPROM@data,c
  1765  00F4F4  0EFA               	movlw	250
  1766  00F4F6  ECA1  F069         	call	_writeEEPROM
  1767                           
  1768                           ;standbyMode.c: 1010: writeEEPROM(0, 18);
  1769  00F4FA  0E12               	movlw	18
  1770  00F4FC  6E01               	movwf	writeEEPROM@data,c
  1771  00F4FE  0E00               	movlw	0
  1772  00F500  ECA1  F069         	call	_writeEEPROM
  1773                           
  1774                           ;standbyMode.c: 1011: writeEEPROM(1, 2);
  1775  00F504  0E02               	movlw	2
  1776  00F506  6E01               	movwf	writeEEPROM@data,c
  1777  00F508  0E01               	movlw	1
  1778  00F50A  ECA1  F069         	call	_writeEEPROM
  1779                           
  1780                           ;standbyMode.c: 1012: writeEEPROM(2, 28);
  1781  00F50E  0E1C               	movlw	28
  1782  00F510  6E01               	movwf	writeEEPROM@data,c
  1783  00F512  0E02               	movlw	2
  1784  00F514  ECA1  F069         	call	_writeEEPROM
  1785                           
  1786                           ;standbyMode.c: 1013: writeEEPROM(3, 91);
  1787  00F518  0E5B               	movlw	91
  1788  00F51A  6E01               	movwf	writeEEPROM@data,c
  1789  00F51C  0E03               	movlw	3
  1790  00F51E  ECA1  F069         	call	_writeEEPROM
  1791                           
  1792                           ;standbyMode.c: 1014: writeEEPROM(4, 3);
  1793  00F522  0E03               	movlw	3
  1794  00F524  6E01               	movwf	writeEEPROM@data,c
  1795  00F526  0E04               	movlw	4
  1796  00F528  ECA1  F069         	call	_writeEEPROM
  1797                           
  1798                           ;standbyMode.c: 1015: writeEEPROM(5, 15);
  1799  00F52C  0E0F               	movlw	15
  1800  00F52E  6E01               	movwf	writeEEPROM@data,c
  1801  00F530  0E05               	movlw	5
  1802  00F532  ECA1  F069         	call	_writeEEPROM
  1803                           
  1804                           ;standbyMode.c: 1016: writeEEPROM(6, 8);
  1805  00F536  0E08               	movlw	8
  1806  00F538  6E01               	movwf	writeEEPROM@data,c
  1807  00F53A  0E06               	movlw	6
  1808  00F53C  ECA1  F069         	call	_writeEEPROM
  1809                           
  1810                           ;standbyMode.c: 1017: writeEEPROM(7, 12);
  1811  00F540  0E0C               	movlw	12
  1812  00F542  6E01               	movwf	writeEEPROM@data,c
  1813  00F544  0E07               	movlw	7
  1814  00F546  ECA1  F069         	call	_writeEEPROM
  1815                           
  1816                           ;standbyMode.c: 1018: writeEEPROM(8, 1);
  1817  00F54A  0E01               	movlw	1
  1818  00F54C  6E01               	movwf	writeEEPROM@data,c
  1819  00F54E  0E08               	movlw	8
  1820  00F550  ECA1  F069         	call	_writeEEPROM
  1821                           
  1822                           ;standbyMode.c: 1019: writeEEPROM(9, 13);
  1823  00F554  0E0D               	movlw	13
  1824  00F556  6E01               	movwf	writeEEPROM@data,c
  1825  00F558  0E09               	movlw	9
  1826  00F55A  ECA1  F069         	call	_writeEEPROM
  1827                           
  1828                           ;standbyMode.c: 1020: writeEEPROM(10, 0);
  1829  00F55E  0E00               	movlw	0
  1830  00F560  6E01               	movwf	writeEEPROM@data,c
  1831  00F562  0E0A               	movlw	10
  1832  00F564  ECA1  F069         	call	_writeEEPROM
  1833                           
  1834                           ;standbyMode.c: 1021: shiftEEPROM();
  1835  00F568  EC19  F06B         	call	_shiftEEPROM	;wreg free
  1836                           
  1837                           ;standbyMode.c: 1030: I2C_Master_Start();
  1838  00F56C  EC15  F069         	call	_I2C_Master_Start	;wreg free
  1839                           
  1840                           ;standbyMode.c: 1031: I2C_Master_Write(0b11010001);
  1841  00F570  0E00               	movlw	0
  1842  00F572  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1843  00F574  0ED1               	movlw	209
  1844  00F576  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1845  00F578  EC1D  F069         	call	_I2C_Master_Write	;wreg free
  1846                           
  1847                           ;standbyMode.c: 1032: for(x = 0; x < 6; x++){
  1848  00F57C  0E00               	movlw	0
  1849  00F57E  6E68               	movwf	standbyMode@x+1,c
  1850  00F580  0E00               	movlw	0
  1851  00F582  6E67               	movwf	standbyMode@x,c
  1852  00F584                     l4748:
  1853  00F584  5068               	movf	standbyMode@x+1,w,c
  1854  00F586  E111               	bnz	l4758
  1855  00F588  0E06               	movlw	6
  1856  00F58A  5C67               	subwf	standbyMode@x,w,c
  1857  00F58C  B0D8               	btfsc	status,0,c
  1858  00F58E  D00D               	goto	u6260
  1859                           
  1860                           ;standbyMode.c: 1033: time[x] = I2C_Master_Read(0);
  1861  00F590  0E54               	movlw	low standbyMode@time
  1862  00F592  2467               	addwf	standbyMode@x,w,c
  1863  00F594  6ED9               	movwf	fsr2l,c
  1864  00F596  0E00               	movlw	high standbyMode@time
  1865  00F598  2068               	addwfc	standbyMode@x+1,w,c
  1866  00F59A  6EDA               	movwf	fsr2h,c
  1867  00F59C  0E00               	movlw	0
  1868  00F59E  EC69  F069         	call	_I2C_Master_Read
  1869  00F5A2  6EDF               	movwf	indf2,c
  1870  00F5A4  4A67               	infsnz	standbyMode@x,f,c
  1871  00F5A6  2A68               	incf	standbyMode@x+1,f,c
  1872  00F5A8  D7ED               	goto	l4748
  1873  00F5AA                     u6260:
  1874  00F5AA                     l4758:
  1875                           
  1876                           ;standbyMode.c: 1034: }
  1877                           ;standbyMode.c: 1035: time[6] = I2C_Master_Read(1);
  1878  00F5AA  0E01               	movlw	1
  1879  00F5AC  EC69  F069         	call	_I2C_Master_Read
  1880  00F5B0  6E5A               	movwf	standbyMode@time+6,c
  1881                           
  1882                           ;standbyMode.c: 1036: I2C_Master_Stop();
  1883  00F5B2  EC19  F069         	call	_I2C_Master_Stop	;wreg free
  1884                           
  1885                           ;standbyMode.c: 1038: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1886  00F5B6  0E01               	movlw	1
  1887  00F5B8  EC2B  F069         	call	_lcdInst
  1888  00F5BC  0EC3               	movlw	195
  1889  00F5BE  6E52               	movwf	??_standbyMode& (0+255),c
  1890  00F5C0  0ECD               	movlw	205
  1891  00F5C2                     u6647:
  1892  00F5C2  2EE8               	decfsz	wreg,f,c
  1893  00F5C4  D7FE               	bra	u6647
  1894  00F5C6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1895  00F5C8  D7FC               	bra	u6647
  1896  00F5CA  F000               	nop	
  1897                           
  1898                           ;standbyMode.c: 1039: printf("Current date");
  1899  00F5CC  0E70               	movlw	low STR_45
  1900  00F5CE  6E0D               	movwf	printf@f,c
  1901  00F5D0  0EFF               	movlw	high STR_45
  1902  00F5D2  6E0E               	movwf	printf@f+1,c
  1903  00F5D4  ECAF  F06F         	call	_printf	;wreg free
  1904                           
  1905                           ;standbyMode.c: 1040: lcdInst(0xC0);;
  1906  00F5D8  0EC0               	movlw	192
  1907  00F5DA  EC2B  F069         	call	_lcdInst
  1908                           
  1909                           ;standbyMode.c: 1041: printf("and time:");
  1910  00F5DE  0EB4               	movlw	low STR_46
  1911  00F5E0  6E0D               	movwf	printf@f,c
  1912  00F5E2  0EFF               	movlw	high STR_46
  1913  00F5E4  6E0E               	movwf	printf@f+1,c
  1914  00F5E6  ECAF  F06F         	call	_printf	;wreg free
  1915                           
  1916                           ;standbyMode.c: 1042: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1917  00F5EA  0E66               	movlw	102
  1918  00F5EC  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1919  00F5EE  0E76               	movlw	118
  1920  00F5F0  6E52               	movwf	??_standbyMode& (0+255),c
  1921  00F5F2  0EC1               	movlw	193
  1922  00F5F4                     u6657:
  1923  00F5F4  2EE8               	decfsz	wreg,f,c
  1924  00F5F6  D7FE               	bra	u6657
  1925  00F5F8  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1926  00F5FA  D7FC               	bra	u6657
  1927  00F5FC  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1928  00F5FE  D7FA               	bra	u6657
  1929  00F600  F000               	nop	
  1930                           
  1931                           ;standbyMode.c: 1044: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1932  00F602  0E01               	movlw	1
  1933  00F604  EC2B  F069         	call	_lcdInst
  1934  00F608  0EC3               	movlw	195
  1935  00F60A  6E52               	movwf	??_standbyMode& (0+255),c
  1936  00F60C  0ECD               	movlw	205
  1937  00F60E                     u6667:
  1938  00F60E  2EE8               	decfsz	wreg,f,c
  1939  00F610  D7FE               	bra	u6667
  1940  00F612  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1941  00F614  D7FC               	bra	u6667
  1942  00F616  F000               	nop	
  1943                           
  1944                           ;standbyMode.c: 1045: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  1945  00F618  0ED7               	movlw	low STR_47
  1946  00F61A  6E0D               	movwf	printf@f,c
  1947  00F61C  0EFE               	movlw	high STR_47
  1948  00F61E  6E0E               	movwf	printf@f+1,c
  1949  00F620  C05A  F00F         	movff	standbyMode@time+6,?_printf+2
  1950  00F624  6A10               	clrf	?_printf+3,c
  1951  00F626  C059  F011         	movff	standbyMode@time+5,?_printf+4
  1952  00F62A  6A12               	clrf	?_printf+5,c
  1953  00F62C  C058  F013         	movff	standbyMode@time+4,?_printf+6
  1954  00F630  6A14               	clrf	?_printf+7,c
  1955  00F632  ECAF  F06F         	call	_printf	;wreg free
  1956                           
  1957                           ;standbyMode.c: 1046: lcdInst(0xC0);;
  1958  00F636  0EC0               	movlw	192
  1959  00F638  EC2B  F069         	call	_lcdInst
  1960                           
  1961                           ;standbyMode.c: 1047: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1962  00F63C  0EE6               	movlw	low STR_48
  1963  00F63E  6E0D               	movwf	printf@f,c
  1964  00F640  0EFE               	movlw	high STR_48
  1965  00F642  6E0E               	movwf	printf@f+1,c
  1966  00F644  C056  F00F         	movff	standbyMode@time+2,?_printf+2
  1967  00F648  6A10               	clrf	?_printf+3,c
  1968  00F64A  C055  F011         	movff	standbyMode@time+1,?_printf+4
  1969  00F64E  6A12               	clrf	?_printf+5,c
  1970  00F650  C054  F013         	movff	standbyMode@time,?_printf+6
  1971  00F654  6A14               	clrf	?_printf+7,c
  1972  00F656  ECAF  F06F         	call	_printf	;wreg free
  1973                           
  1974                           ;standbyMode.c: 1048: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1975  00F65A  0E66               	movlw	102
  1976  00F65C  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1977  00F65E  0E76               	movlw	118
  1978  00F660  6E52               	movwf	??_standbyMode& (0+255),c
  1979  00F662  0EC1               	movlw	193
  1980  00F664                     u6677:
  1981  00F664  2EE8               	decfsz	wreg,f,c
  1982  00F666  D7FE               	bra	u6677
  1983  00F668  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1984  00F66A  D7FC               	bra	u6677
  1985  00F66C  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1986  00F66E  D7FA               	bra	u6677
  1987  00F670  F000               	nop	
  1988                           
  1989                           ;standbyMode.c: 1051: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1990  00F672  0E01               	movlw	1
  1991  00F674  EC2B  F069         	call	_lcdInst
  1992  00F678  0EC3               	movlw	195
  1993  00F67A  6E52               	movwf	??_standbyMode& (0+255),c
  1994  00F67C  0ECD               	movlw	205
  1995  00F67E                     u6687:
  1996  00F67E  2EE8               	decfsz	wreg,f,c
  1997  00F680  D7FE               	bra	u6687
  1998  00F682  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1999  00F684  D7FC               	bra	u6687
  2000  00F686  F000               	nop	
  2001                           
  2002                           ;standbyMode.c: 1052: printf("Press # to");
  2003  00F688  0EA9               	movlw	low STR_49
  2004  00F68A  6E0D               	movwf	printf@f,c
  2005  00F68C  0EFF               	movlw	high STR_49
  2006  00F68E  6E0E               	movwf	printf@f+1,c
  2007  00F690  ECAF  F06F         	call	_printf	;wreg free
  2008                           
  2009                           ;standbyMode.c: 1053: lcdInst(0xC0);;
  2010  00F694  0EC0               	movlw	192
  2011  00F696  EC2B  F069         	call	_lcdInst
  2012                           
  2013                           ;standbyMode.c: 1054: printf("view logs,");
  2014  00F69A  0E7D               	movlw	low STR_50
  2015  00F69C  6E0D               	movwf	printf@f,c
  2016  00F69E  0EFF               	movlw	high STR_50
  2017  00F6A0  6E0E               	movwf	printf@f+1,c
  2018  00F6A2  ECAF  F06F         	call	_printf	;wreg free
  2019                           
  2020                           ;standbyMode.c: 1055: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2021  00F6A6  0E66               	movlw	102
  2022  00F6A8  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2023  00F6AA  0E76               	movlw	118
  2024  00F6AC  6E52               	movwf	??_standbyMode& (0+255),c
  2025  00F6AE  0EC1               	movlw	193
  2026  00F6B0                     u6697:
  2027  00F6B0  2EE8               	decfsz	wreg,f,c
  2028  00F6B2  D7FE               	bra	u6697
  2029  00F6B4  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2030  00F6B6  D7FC               	bra	u6697
  2031  00F6B8  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2032  00F6BA  D7FA               	bra	u6697
  2033  00F6BC  F000               	nop	
  2034                           
  2035                           ;standbyMode.c: 1056: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2036  00F6BE  0E01               	movlw	1
  2037  00F6C0  EC2B  F069         	call	_lcdInst
  2038  00F6C4  0EC3               	movlw	195
  2039  00F6C6  6E52               	movwf	??_standbyMode& (0+255),c
  2040  00F6C8  0ECD               	movlw	205
  2041  00F6CA                     u6707:
  2042  00F6CA  2EE8               	decfsz	wreg,f,c
  2043  00F6CC  D7FE               	bra	u6707
  2044  00F6CE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2045  00F6D0  D7FC               	bra	u6707
  2046  00F6D2  F000               	nop	
  2047                           
  2048                           ;standbyMode.c: 1057: printf("or press D to");
  2049  00F6D4  0E2E               	movlw	low STR_51
  2050  00F6D6  6E0D               	movwf	printf@f,c
  2051  00F6D8  0EFF               	movlw	high STR_51
  2052  00F6DA  6E0E               	movwf	printf@f+1,c
  2053  00F6DC  ECAF  F06F         	call	_printf	;wreg free
  2054                           
  2055                           ;standbyMode.c: 1058: lcdInst(0xC0);;
  2056  00F6E0  0EC0               	movlw	192
  2057  00F6E2  EC2B  F069         	call	_lcdInst
  2058                           
  2059                           ;standbyMode.c: 1059: printf("begin operation.");
  2060  00F6E6  0E98               	movlw	low STR_42
  2061  00F6E8  6E0D               	movwf	printf@f,c
  2062  00F6EA  0EFD               	movlw	high STR_42
  2063  00F6EC  6E0E               	movwf	printf@f+1,c
  2064  00F6EE  ECAF  F06F         	call	_printf	;wreg free
  2065  00F6F2  A281               	btfss	3969,1,c	;volatile
  2066  00F6F4  D7FE               	goto	l480
  2067                           
  2068                           ;standbyMode.c: 1062: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2069  00F6F6  3881               	swapf	3969,w,c	;volatile
  2070  00F6F8  0B0F               	andlw	15
  2071  00F6FA  0B0F               	andlw	15
  2072  00F6FC  6E5F               	movwf	standbyMode@keypress,c
  2073  00F6FE  B281               	btfsc	3969,1,c	;volatile
  2074  00F700  D7FE               	goto	l483
  2075                           
  2076                           ;standbyMode.c: 1065: if (keypress == 15){
  2077  00F702  0E0F               	movlw	15
  2078  00F704  185F               	xorwf	standbyMode@keypress,w,c
  2079  00F706  A4D8               	btfss	status,2,c
  2080  00F708  D284               	goto	l485
  2081                           
  2082                           ;standbyMode.c: 1107: unsigned int drawerCount = 0;
  2083  00F70A  0E00               	movlw	0
  2084  00F70C  6E6A               	movwf	standbyMode@drawerCount+1,c
  2085  00F70E  0E00               	movlw	0
  2086  00F710  6E69               	movwf	standbyMode@drawerCount,c
  2087                           
  2088                           ;standbyMode.c: 1108: unsigned int i = 0;
  2089  00F712  0E00               	movlw	0
  2090  00F714  6E6E               	movwf	standbyMode@i+1,c
  2091  00F716  0E00               	movlw	0
  2092  00F718  6E6D               	movwf	standbyMode@i,c
  2093                           
  2094                           ;standbyMode.c: 1109: unsigned int validDrawer = 0;
  2095  00F71A  0E00               	movlw	0
  2096  00F71C  6E62               	movwf	standbyMode@validDrawer+1,c
  2097  00F71E  0E00               	movlw	0
  2098  00F720  6E61               	movwf	standbyMode@validDrawer,c
  2099                           
  2100                           ;standbyMode.c: 1110: unsigned int zero = 0;
  2101  00F722  0E00               	movlw	0
  2102  00F724  6E64               	movwf	standbyMode@zero+1,c
  2103  00F726  0E00               	movlw	0
  2104  00F728  6E63               	movwf	standbyMode@zero,c
  2105                           
  2106                           ;standbyMode.c: 1111: unsigned int firstIteration = 0;
  2107  00F72A  0E00               	movlw	0
  2108  00F72C  6E5C               	movwf	standbyMode@firstIteration+1,c
  2109  00F72E  0E00               	movlw	0
  2110  00F730  6E5B               	movwf	standbyMode@firstIteration,c
  2111                           
  2112                           ;standbyMode.c: 1112: unsigned int drawer = 0;
  2113  00F732  0E00               	movlw	0
  2114  00F734  6E70               	movwf	standbyMode@drawer+1,c
  2115  00F736  0E00               	movlw	0
  2116  00F738  6E6F               	movwf	standbyMode@drawer,c
  2117                           
  2118                           ;standbyMode.c: 1113: unsigned int diet = 0;
  2119  00F73A  0E00               	movlw	0
  2120  00F73C  6E6C               	movwf	standbyMode@diet+1,c
  2121  00F73E  0E00               	movlw	0
  2122  00F740  6E6B               	movwf	standbyMode@diet,c
  2123                           
  2124                           ;standbyMode.c: 1114: unsigned int food = 0;
  2125  00F742  0E00               	movlw	0
  2126  00F744  6E66               	movwf	standbyMode@food+1,c
  2127  00F746  0E00               	movlw	0
  2128  00F748  6E65               	movwf	standbyMode@food,c
  2129  00F74A                     
  2130                           ;standbyMode.c: 1117: if (firstIteration == 1){
  2131  00F74A  045B               	decf	standbyMode@firstIteration,w,c
  2132  00F74C  105C               	iorwf	standbyMode@firstIteration+1,w,c
  2133  00F74E  A4D8               	btfss	status,2,c
  2134  00F750  D15C               	goto	l487
  2135  00F752                     u6300:
  2136                           
  2137                           ;standbyMode.c: 1120: if(drawerCount >= 8){
  2138                           
  2139                           ;standbyMode.c: 1118: while (1){
  2140  00F752  506A               	movf	standbyMode@drawerCount+1,w,c
  2141  00F754  E104               	bnz	u6310
  2142  00F756  0E08               	movlw	8
  2143  00F758  5C69               	subwf	standbyMode@drawerCount,w,c
  2144  00F75A  A0D8               	btfss	status,0,c
  2145  00F75C  D02A               	goto	l489
  2146  00F75E                     u6310:
  2147                           
  2148                           ;standbyMode.c: 1121: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2149  00F75E  0E01               	movlw	1
  2150  00F760  EC2B  F069         	call	_lcdInst
  2151  00F764  0EC3               	movlw	195
  2152  00F766  6E52               	movwf	??_standbyMode& (0+255),c
  2153  00F768  0ECD               	movlw	205
  2154  00F76A                     u6717:
  2155  00F76A  2EE8               	decfsz	wreg,f,c
  2156  00F76C  D7FE               	bra	u6717
  2157  00F76E  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2158  00F770  D7FC               	bra	u6717
  2159  00F772  F000               	nop	
  2160                           
  2161                           ;standbyMode.c: 1122: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2162  00F774  0E0C               	movlw	12
  2163  00F776  EC2B  F069         	call	_lcdInst
  2164                           
  2165                           ;standbyMode.c: 1123: printf("Maximum of 8");
  2166  00F77A  0E56               	movlw	low STR_53
  2167  00F77C  6E0D               	movwf	printf@f,c
  2168  00F77E  0EFF               	movlw	high STR_53
  2169  00F780  6E0E               	movwf	printf@f+1,c
  2170  00F782  ECAF  F06F         	call	_printf	;wreg free
  2171                           
  2172                           ;standbyMode.c: 1124: lcdInst(0xC0);;
  2173  00F786  0EC0               	movlw	192
  2174  00F788  EC2B  F069         	call	_lcdInst
  2175                           
  2176                           ;standbyMode.c: 1125: printf("drawers reached!");
  2177  00F78C  0E87               	movlw	low STR_54
  2178  00F78E  6E0D               	movwf	printf@f,c
  2179  00F790  0EFD               	movlw	high STR_54
  2180  00F792  6E0E               	movwf	printf@f+1,c
  2181  00F794  ECAF  F06F         	call	_printf	;wreg free
  2182                           
  2183                           ;standbyMode.c: 1126: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2184  00F798  0E66               	movlw	102
  2185  00F79A  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2186  00F79C  0E76               	movlw	118
  2187  00F79E  6E52               	movwf	??_standbyMode& (0+255),c
  2188  00F7A0  0EC1               	movlw	193
  2189  00F7A2                     u6727:
  2190  00F7A2  2EE8               	decfsz	wreg,f,c
  2191  00F7A4  D7FE               	bra	u6727
  2192  00F7A6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2193  00F7A8  D7FC               	bra	u6727
  2194  00F7AA  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2195  00F7AC  D7FA               	bra	u6727
  2196  00F7AE  F000               	nop	
  2197                           
  2198                           ;standbyMode.c: 1127: break;
  2199  00F7B0  0012               	return	
  2200  00F7B2                     l489:
  2201                           
  2202                           ;standbyMode.c: 1128: }
  2203                           ;standbyMode.c: 1130: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  2204  00F7B2  0E01               	movlw	1
  2205  00F7B4  EC2B  F069         	call	_lcdInst
  2206  00F7B8  0EC3               	movlw	195
  2207  00F7BA  6E52               	movwf	??_standbyMode& (0+255),c
  2208  00F7BC  0ECD               	movlw	205
  2209  00F7BE                     u6737:
  2210  00F7BE  2EE8               	decfsz	wreg,f,c
  2211  00F7C0  D7FE               	bra	u6737
  2212  00F7C2  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2213  00F7C4  D7FC               	bra	u6737
  2214  00F7C6  F000               	nop	
  2215                           
  2216                           ;standbyMode.c: 1131: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2217  00F7C8  0E0C               	movlw	12
  2218  00F7CA  EC2B  F069         	call	_lcdInst
  2219                           
  2220                           ;standbyMode.c: 1132: printf("Another drawer?");
  2221  00F7CE  0E4D               	movlw	low STR_55
  2222  00F7D0  6E0D               	movwf	printf@f,c
  2223  00F7D2  0EFE               	movlw	high STR_55
  2224  00F7D4  6E0E               	movwf	printf@f+1,c
  2225  00F7D6  ECAF  F06F         	call	_printf	;wreg free
  2226                           
  2227                           ;standbyMode.c: 1133: lcdInst(0xC0);;
  2228  00F7DA  0EC0               	movlw	192
  2229  00F7DC  EC2B  F069         	call	_lcdInst
  2230                           
  2231                           ;standbyMode.c: 1134: printf("# = No, D = Yes");
  2232  00F7E0  0E6D               	movlw	low STR_29
  2233  00F7E2  6E0D               	movwf	printf@f,c
  2234  00F7E4  0EFE               	movlw	high STR_29
  2235  00F7E6  6E0E               	movwf	printf@f+1,c
  2236  00F7E8  ECAF  F06F         	call	_printf	;wreg free
  2237  00F7EC  A281               	btfss	3969,1,c	;volatile
  2238  00F7EE  D7FE               	goto	l493
  2239                           
  2240                           ;standbyMode.c: 1137: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2241  00F7F0  3881               	swapf	3969,w,c	;volatile
  2242  00F7F2  0B0F               	andlw	15
  2243  00F7F4  0B0F               	andlw	15
  2244  00F7F6  6E60               	movwf	standbyMode@keypress1,c
  2245  00F7F8  B281               	btfsc	3969,1,c	;volatile
  2246  00F7FA  D7FE               	goto	l496
  2247                           
  2248                           ;standbyMode.c: 1140: if (keypress1 == 15){
  2249  00F7FC  0E0F               	movlw	15
  2250  00F7FE  1860               	xorwf	standbyMode@keypress1,w,c
  2251  00F800  A4D8               	btfss	status,2,c
  2252  00F802  D0FC               	goto	l498
  2253  00F804                     u6340:
  2254                           
  2255                           ;standbyMode.c: 1141: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2256  00F804  0E01               	movlw	1
  2257  00F806  EC2B  F069         	call	_lcdInst
  2258  00F80A  0EC3               	movlw	195
  2259  00F80C  6E52               	movwf	??_standbyMode& (0+255),c
  2260  00F80E  0ECD               	movlw	205
  2261  00F810                     u6747:
  2262  00F810  2EE8               	decfsz	wreg,f,c
  2263  00F812  D7FE               	bra	u6747
  2264  00F814  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2265  00F816  D7FC               	bra	u6747
  2266  00F818  F000               	nop	
  2267                           
  2268                           ;standbyMode.c: 1142: drawer = which_drawer();
  2269  00F81A  EC3A  F06D         	call	_which_drawer	;wreg free
  2270  00F81E  C025  F06F         	movff	?_which_drawer,standbyMode@drawer
  2271  00F822  C026  F070         	movff	?_which_drawer+1,standbyMode@drawer+1
  2272                           
  2273                           ;standbyMode.c: 1144: if (drawer == 100){
  2274  00F826  0E64               	movlw	100
  2275  00F828  186F               	xorwf	standbyMode@drawer,w,c
  2276  00F82A  1070               	iorwf	standbyMode@drawer+1,w,c
  2277  00F82C  A4D8               	btfss	status,2,c
  2278  00F82E  D005               	goto	l500
  2279                           
  2280                           ;standbyMode.c: 1145: drawer = 0;
  2281  00F830  0E00               	movlw	0
  2282  00F832  6E70               	movwf	standbyMode@drawer+1,c
  2283  00F834  0E00               	movlw	0
  2284  00F836  6E6F               	movwf	standbyMode@drawer,c
  2285                           
  2286                           ;standbyMode.c: 1146: goto DRAWER_BACK;
  2287  00F838  D7BC               	goto	l489
  2288  00F83A                     l500:
  2289                           
  2290                           ;standbyMode.c: 1147: }
  2291                           ;standbyMode.c: 1149: for (i=0; i<8; i++){
  2292  00F83A  0E00               	movlw	0
  2293  00F83C  6E6E               	movwf	standbyMode@i+1,c
  2294  00F83E  0E00               	movlw	0
  2295  00F840  6E6D               	movwf	standbyMode@i,c
  2296  00F842                     l4848:
  2297  00F842  506E               	movf	standbyMode@i+1,w,c
  2298  00F844  E12C               	bnz	l4864
  2299  00F846  0E08               	movlw	8
  2300  00F848  5C6D               	subwf	standbyMode@i,w,c
  2301  00F84A  B0D8               	btfsc	status,0,c
  2302  00F84C  D028               	goto	u6390
  2303                           
  2304                           ;standbyMode.c: 1150: if (drawerInformation[i] == drawer){
  2305  00F84E  90D8               	bcf	status,0,c
  2306  00F850  346D               	rlcf	standbyMode@i,w,c
  2307  00F852  6ED9               	movwf	fsr2l,c
  2308  00F854  346E               	rlcf	standbyMode@i+1,w,c
  2309  00F856  6EDA               	movwf	fsr2h,c
  2310  00F858  0E80               	movlw	low _drawerInformation
  2311  00F85A  26D9               	addwf	fsr2l,f,c
  2312  00F85C  0E00               	movlw	high _drawerInformation
  2313  00F85E  22DA               	addwfc	fsr2h,f,c
  2314  00F860  506F               	movf	standbyMode@drawer,w,c
  2315  00F862  18DE               	xorwf	postinc2,w,c
  2316  00F864  E119               	bnz	l4860
  2317  00F866  5070               	movf	standbyMode@drawer+1,w,c
  2318  00F868  18DE               	xorwf	postinc2,w,c
  2319  00F86A  A4D8               	btfss	status,2,c
  2320  00F86C  D015               	goto	l504
  2321                           
  2322                           ;standbyMode.c: 1151: validDrawer = 1;
  2323  00F86E  0E00               	movlw	0
  2324  00F870  6E62               	movwf	standbyMode@validDrawer+1,c
  2325  00F872  0E01               	movlw	1
  2326  00F874  6E61               	movwf	standbyMode@validDrawer,c
  2327                           
  2328                           ;standbyMode.c: 1152: if (drawerInformation[i] == 0){
  2329  00F876  90D8               	bcf	status,0,c
  2330  00F878  346D               	rlcf	standbyMode@i,w,c
  2331  00F87A  6ED9               	movwf	fsr2l,c
  2332  00F87C  346E               	rlcf	standbyMode@i+1,w,c
  2333  00F87E  6EDA               	movwf	fsr2h,c
  2334  00F880  0E80               	movlw	low _drawerInformation
  2335  00F882  26D9               	addwf	fsr2l,f,c
  2336  00F884  0E00               	movlw	high _drawerInformation
  2337  00F886  22DA               	addwfc	fsr2h,f,c
  2338  00F888  50DE               	movf	postinc2,w,c
  2339  00F88A  10DE               	iorwf	postinc2,w,c
  2340  00F88C  A4D8               	btfss	status,2,c
  2341  00F88E  D004               	goto	l504
  2342                           
  2343                           ;standbyMode.c: 1153: zero = 1;
  2344  00F890  0E00               	movlw	0
  2345  00F892  6E64               	movwf	standbyMode@zero+1,c
  2346  00F894  0E01               	movlw	1
  2347  00F896  6E63               	movwf	standbyMode@zero,c
  2348  00F898                     l504:
  2349  00F898                     l4860:
  2350  00F898  4A6D               	infsnz	standbyMode@i,f,c
  2351  00F89A  2A6E               	incf	standbyMode@i+1,f,c
  2352  00F89C  D7D2               	goto	l4848
  2353  00F89E                     u6390:
  2354  00F89E                     l4864:
  2355                           
  2356                           ;standbyMode.c: 1154: }
  2357                           ;standbyMode.c: 1155: }
  2358                           ;standbyMode.c: 1156: }
  2359                           ;standbyMode.c: 1157: if (validDrawer == 1){
  2360  00F89E  0461               	decf	standbyMode@validDrawer,w,c
  2361  00F8A0  1062               	iorwf	standbyMode@validDrawer+1,w,c
  2362  00F8A2  A4D8               	btfss	status,2,c
  2363  00F8A4  D060               	goto	l505
  2364                           
  2365                           ;standbyMode.c: 1158: if (zero == 1){
  2366  00F8A6  0463               	decf	standbyMode@zero,w,c
  2367  00F8A8  1064               	iorwf	standbyMode@zero+1,w,c
  2368  00F8AA  A4D8               	btfss	status,2,c
  2369  00F8AC  D02E               	goto	l506
  2370                           
  2371                           ;standbyMode.c: 1159: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2372  00F8AE  0E01               	movlw	1
  2373  00F8B0  EC2B  F069         	call	_lcdInst
  2374  00F8B4  0EC3               	movlw	195
  2375  00F8B6  6E52               	movwf	??_standbyMode& (0+255),c
  2376  00F8B8  0ECD               	movlw	205
  2377  00F8BA                     u6757:
  2378  00F8BA  2EE8               	decfsz	wreg,f,c
  2379  00F8BC  D7FE               	bra	u6757
  2380  00F8BE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2381  00F8C0  D7FC               	bra	u6757
  2382  00F8C2  F000               	nop	
  2383                           
  2384                           ;standbyMode.c: 1160: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2385  00F8C4  0E0C               	movlw	12
  2386  00F8C6  EC2B  F069         	call	_lcdInst
  2387                           
  2388                           ;standbyMode.c: 1161: printf("No drawer");
  2389  00F8CA  0EBE               	movlw	low STR_57
  2390  00F8CC  6E0D               	movwf	printf@f,c
  2391  00F8CE  0EFF               	movlw	high STR_57
  2392  00F8D0  6E0E               	movwf	printf@f+1,c
  2393  00F8D2  ECAF  F06F         	call	_printf	;wreg free
  2394                           
  2395                           ;standbyMode.c: 1162: lcdInst(0xC0);;
  2396  00F8D6  0EC0               	movlw	192
  2397  00F8D8  EC2B  F069         	call	_lcdInst
  2398                           
  2399                           ;standbyMode.c: 1163: printf("number pressed.");
  2400  00F8DC  0EFD               	movlw	low STR_58
  2401  00F8DE  6E0D               	movwf	printf@f,c
  2402  00F8E0  0EFD               	movlw	high STR_58
  2403  00F8E2  6E0E               	movwf	printf@f+1,c
  2404  00F8E4  ECAF  F06F         	call	_printf	;wreg free
  2405                           
  2406                           ;standbyMode.c: 1164: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2407  00F8E8  0E66               	movlw	102
  2408  00F8EA  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2409  00F8EC  0E76               	movlw	118
  2410  00F8EE  6E52               	movwf	??_standbyMode& (0+255),c
  2411  00F8F0  0EC1               	movlw	193
  2412  00F8F2                     u6767:
  2413  00F8F2  2EE8               	decfsz	wreg,f,c
  2414  00F8F4  D7FE               	bra	u6767
  2415  00F8F6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2416  00F8F8  D7FC               	bra	u6767
  2417  00F8FA  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2418  00F8FC  D7FA               	bra	u6767
  2419  00F8FE  F000               	nop	
  2420                           
  2421                           ;standbyMode.c: 1165: zero = 0;
  2422  00F900  0E00               	movlw	0
  2423  00F902  6E64               	movwf	standbyMode@zero+1,c
  2424  00F904  0E00               	movlw	0
  2425  00F906  6E63               	movwf	standbyMode@zero,c
  2426                           
  2427                           ;standbyMode.c: 1166: }
  2428  00F908  D029               	goto	l507
  2429  00F90A                     l506:
  2430                           
  2431                           ;standbyMode.c: 1167: else{
  2432                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2433  00F90A  0E01               	movlw	1
  2434  00F90C  EC2B  F069         	call	_lcdInst
  2435  00F910  0EC3               	movlw	195
  2436  00F912  6E52               	movwf	??_standbyMode& (0+255),c
  2437  00F914  0ECD               	movlw	205
  2438  00F916                     u6777:
  2439  00F916  2EE8               	decfsz	wreg,f,c
  2440  00F918  D7FE               	bra	u6777
  2441  00F91A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2442  00F91C  D7FC               	bra	u6777
  2443  00F91E  F000               	nop	
  2444                           
  2445                           ;standbyMode.c: 1169: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2446  00F920  0E0C               	movlw	12
  2447  00F922  EC2B  F069         	call	_lcdInst
  2448                           
  2449                           ;standbyMode.c: 1170: printf("Drawer already");
  2450  00F926  0EF5               	movlw	low STR_59
  2451  00F928  6E0D               	movwf	printf@f,c
  2452  00F92A  0EFE               	movlw	high STR_59
  2453  00F92C  6E0E               	movwf	printf@f+1,c
  2454  00F92E  ECAF  F06F         	call	_printf	;wreg free
  2455                           
  2456                           ;standbyMode.c: 1171: lcdInst(0xC0);;
  2457  00F932  0EC0               	movlw	192
  2458  00F934  EC2B  F069         	call	_lcdInst
  2459                           
  2460                           ;standbyMode.c: 1172: printf("in use!");
  2461  00F938  0ED1               	movlw	low STR_60
  2462  00F93A  6E0D               	movwf	printf@f,c
  2463  00F93C  0EFF               	movlw	high STR_60
  2464  00F93E  6E0E               	movwf	printf@f+1,c
  2465  00F940  ECAF  F06F         	call	_printf	;wreg free
  2466                           
  2467                           ;standbyMode.c: 1173: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2468  00F944  0E66               	movlw	102
  2469  00F946  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2470  00F948  0E76               	movlw	118
  2471  00F94A  6E52               	movwf	??_standbyMode& (0+255),c
  2472  00F94C  0EC1               	movlw	193
  2473  00F94E                     u6787:
  2474  00F94E  2EE8               	decfsz	wreg,f,c
  2475  00F950  D7FE               	bra	u6787
  2476  00F952  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2477  00F954  D7FC               	bra	u6787
  2478  00F956  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2479  00F958  D7FA               	bra	u6787
  2480  00F95A  F000               	nop	
  2481  00F95C                     l507:
  2482                           
  2483                           ;standbyMode.c: 1174: }
  2484                           ;standbyMode.c: 1175: validDrawer = 0;
  2485  00F95C  0E00               	movlw	0
  2486  00F95E  6E62               	movwf	standbyMode@validDrawer+1,c
  2487  00F960  0E00               	movlw	0
  2488  00F962  6E61               	movwf	standbyMode@validDrawer,c
  2489                           
  2490                           ;standbyMode.c: 1176: continue;
  2491  00F964  D6F6               	goto	u6300
  2492  00F966                     l505:
  2493                           
  2494                           ;standbyMode.c: 1178: else{
  2495                           ;standbyMode.c: 1179: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2496  00F966  0E01               	movlw	1
  2497  00F968  EC2B  F069         	call	_lcdInst
  2498  00F96C  0EC3               	movlw	195
  2499  00F96E  6E52               	movwf	??_standbyMode& (0+255),c
  2500  00F970  0ECD               	movlw	205
  2501  00F972                     u6797:
  2502  00F972  2EE8               	decfsz	wreg,f,c
  2503  00F974  D7FE               	bra	u6797
  2504  00F976  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2505  00F978  D7FC               	bra	u6797
  2506  00F97A  F000               	nop	
  2507                           
  2508                           ;standbyMode.c: 1180: diet = diet_press(drawer);
  2509  00F97C  C06F  F025         	movff	standbyMode@drawer,diet_press@drawer
  2510  00F980  C070  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2511  00F984  EC58  F073         	call	_diet_press	;wreg free
  2512  00F988  C025  F06B         	movff	?_diet_press,standbyMode@diet
  2513  00F98C  C026  F06C         	movff	?_diet_press+1,standbyMode@diet+1
  2514                           
  2515                           ;standbyMode.c: 1181: if (diet == 100){
  2516  00F990  0E64               	movlw	100
  2517  00F992  186B               	xorwf	standbyMode@diet,w,c
  2518  00F994  106C               	iorwf	standbyMode@diet+1,w,c
  2519  00F996  A4D8               	btfss	status,2,c
  2520  00F998  D005               	goto	l511
  2521                           
  2522                           ;standbyMode.c: 1182: diet = 0;
  2523  00F99A  0E00               	movlw	0
  2524  00F99C  6E6C               	movwf	standbyMode@diet+1,c
  2525  00F99E  0E00               	movlw	0
  2526  00F9A0  6E6B               	movwf	standbyMode@diet,c
  2527                           
  2528                           ;standbyMode.c: 1183: goto DIET_BACK1;
  2529  00F9A2  D730               	goto	u6340
  2530  00F9A4                     l511:
  2531                           
  2532                           ;standbyMode.c: 1184: }
  2533                           ;standbyMode.c: 1186: food = food_press(diet, drawer);
  2534  00F9A4  C06B  F025         	movff	standbyMode@diet,food_press@dietSum
  2535  00F9A8  C06C  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2536  00F9AC  C06F  F027         	movff	standbyMode@drawer,food_press@drawer
  2537  00F9B0  C070  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2538  00F9B4  EC40  F06C         	call	_food_press	;wreg free
  2539  00F9B8  C025  F065         	movff	?_food_press,standbyMode@food
  2540  00F9BC  C026  F066         	movff	?_food_press+1,standbyMode@food+1
  2541                           
  2542                           ;standbyMode.c: 1187: if (food == 100){
  2543  00F9C0  0E64               	movlw	100
  2544  00F9C2  1865               	xorwf	standbyMode@food,w,c
  2545  00F9C4  1066               	iorwf	standbyMode@food+1,w,c
  2546  00F9C6  A4D8               	btfss	status,2,c
  2547  00F9C8  D009               	goto	l512
  2548                           
  2549                           ;standbyMode.c: 1188: diet = 0;
  2550  00F9CA  0E00               	movlw	0
  2551  00F9CC  6E6C               	movwf	standbyMode@diet+1,c
  2552  00F9CE  0E00               	movlw	0
  2553  00F9D0  6E6B               	movwf	standbyMode@diet,c
  2554                           
  2555                           ;standbyMode.c: 1189: food = 0;
  2556  00F9D2  0E00               	movlw	0
  2557  00F9D4  6E66               	movwf	standbyMode@food+1,c
  2558  00F9D6  0E00               	movlw	0
  2559  00F9D8  6E65               	movwf	standbyMode@food,c
  2560                           
  2561                           ;standbyMode.c: 1190: goto FOOD_BACK1;
  2562  00F9DA  D7C5               	goto	l505
  2563  00F9DC                     l512:
  2564                           
  2565                           ;standbyMode.c: 1191: }
  2566                           ;standbyMode.c: 1192: drawerInformation[drawerCount] = drawer;
  2567  00F9DC  90D8               	bcf	status,0,c
  2568  00F9DE  3469               	rlcf	standbyMode@drawerCount,w,c
  2569  00F9E0  6ED9               	movwf	fsr2l,c
  2570  00F9E2  346A               	rlcf	standbyMode@drawerCount+1,w,c
  2571  00F9E4  6EDA               	movwf	fsr2h,c
  2572  00F9E6  0E80               	movlw	low _drawerInformation
  2573  00F9E8  26D9               	addwf	fsr2l,f,c
  2574  00F9EA  0E00               	movlw	high _drawerInformation
  2575  00F9EC  22DA               	addwfc	fsr2h,f,c
  2576  00F9EE  C06F  FFDE         	movff	standbyMode@drawer,postinc2
  2577  00F9F2  C070  FFDD         	movff	standbyMode@drawer+1,postdec2
  2578                           
  2579                           ;standbyMode.c: 1193: drawerCount += 1;
  2580  00F9F6  4A69               	infsnz	standbyMode@drawerCount,f,c
  2581  00F9F8  2A6A               	incf	standbyMode@drawerCount+1,f,c
  2582                           
  2583                           ;standbyMode.c: 1194: }
  2584                           ;standbyMode.c: 1195: }
  2585  00F9FA  D004               	goto	l514
  2586  00F9FC                     l498:
  2587                           
  2588                           ;standbyMode.c: 1196: else if (keypress1 == 14){
  2589  00F9FC  0E0E               	movlw	14
  2590  00F9FE  1860               	xorwf	standbyMode@keypress1,w,c
  2591  00FA00  B4D8               	btfsc	status,2,c
  2592  00FA02  0012               	return	
  2593  00FA04                     l514:
  2594                           
  2595                           ;standbyMode.c: 1198: }
  2596                           ;standbyMode.c: 1199: keypress1 = 0;
  2597  00FA04  0E00               	movlw	0
  2598  00FA06  6E60               	movwf	standbyMode@keypress1,c
  2599  00FA08  D6A4               	goto	u6300
  2600  00FA0A                     l487:
  2601                           
  2602                           ;standbyMode.c: 1203: else{
  2603                           ;standbyMode.c: 1204: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2604  00FA0A  0E01               	movlw	1
  2605  00FA0C  EC2B  F069         	call	_lcdInst
  2606  00FA10  0EC3               	movlw	195
  2607  00FA12  6E52               	movwf	??_standbyMode& (0+255),c
  2608  00FA14  0ECD               	movlw	205
  2609  00FA16                     u6807:
  2610  00FA16  2EE8               	decfsz	wreg,f,c
  2611  00FA18  D7FE               	bra	u6807
  2612  00FA1A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2613  00FA1C  D7FC               	bra	u6807
  2614  00FA1E  F000               	nop	
  2615                           
  2616                           ;standbyMode.c: 1205: drawer = which_drawer();
  2617  00FA20  EC3A  F06D         	call	_which_drawer	;wreg free
  2618  00FA24  C025  F06F         	movff	?_which_drawer,standbyMode@drawer
  2619  00FA28  C026  F070         	movff	?_which_drawer+1,standbyMode@drawer+1
  2620                           
  2621                           ;standbyMode.c: 1207: if (drawer == 100){
  2622  00FA2C  0E64               	movlw	100
  2623  00FA2E  186F               	xorwf	standbyMode@drawer,w,c
  2624  00FA30  1070               	iorwf	standbyMode@drawer+1,w,c
  2625  00FA32  A4D8               	btfss	status,2,c
  2626  00FA34  D009               	goto	l518
  2627                           
  2628                           ;standbyMode.c: 1208: drawer = 0;
  2629  00FA36  0E00               	movlw	0
  2630  00FA38  6E70               	movwf	standbyMode@drawer+1,c
  2631  00FA3A  0E00               	movlw	0
  2632  00FA3C  6E6F               	movwf	standbyMode@drawer,c
  2633                           
  2634                           ;standbyMode.c: 1209: firstIteration = 1;
  2635  00FA3E  0E00               	movlw	0
  2636  00FA40  6E5C               	movwf	standbyMode@firstIteration+1,c
  2637  00FA42  0E01               	movlw	1
  2638  00FA44  6E5B               	movwf	standbyMode@firstIteration,c
  2639                           
  2640                           ;standbyMode.c: 1210: goto DRAWER_BACK;
  2641  00FA46  D6B5               	goto	l489
  2642  00FA48                     l518:
  2643                           
  2644                           ;standbyMode.c: 1211: }
  2645                           ;standbyMode.c: 1213: firstIteration = 1;
  2646  00FA48  0E00               	movlw	0
  2647  00FA4A  6E5C               	movwf	standbyMode@firstIteration+1,c
  2648  00FA4C  0E01               	movlw	1
  2649  00FA4E  6E5B               	movwf	standbyMode@firstIteration,c
  2650                           
  2651                           ;standbyMode.c: 1214: for (i=0; i<8; i++){
  2652  00FA50  0E00               	movlw	0
  2653  00FA52  6E6E               	movwf	standbyMode@i+1,c
  2654  00FA54  0E00               	movlw	0
  2655  00FA56  6E6D               	movwf	standbyMode@i,c
  2656  00FA58                     l4942:
  2657  00FA58  506E               	movf	standbyMode@i+1,w,c
  2658  00FA5A  E12C               	bnz	l4958
  2659  00FA5C  0E08               	movlw	8
  2660  00FA5E  5C6D               	subwf	standbyMode@i,w,c
  2661  00FA60  B0D8               	btfsc	status,0,c
  2662  00FA62  D028               	goto	u6490
  2663                           
  2664                           ;standbyMode.c: 1215: if (drawerInformation[i] == drawer){
  2665  00FA64  90D8               	bcf	status,0,c
  2666  00FA66  346D               	rlcf	standbyMode@i,w,c
  2667  00FA68  6ED9               	movwf	fsr2l,c
  2668  00FA6A  346E               	rlcf	standbyMode@i+1,w,c
  2669  00FA6C  6EDA               	movwf	fsr2h,c
  2670  00FA6E  0E80               	movlw	low _drawerInformation
  2671  00FA70  26D9               	addwf	fsr2l,f,c
  2672  00FA72  0E00               	movlw	high _drawerInformation
  2673  00FA74  22DA               	addwfc	fsr2h,f,c
  2674  00FA76  506F               	movf	standbyMode@drawer,w,c
  2675  00FA78  18DE               	xorwf	postinc2,w,c
  2676  00FA7A  E119               	bnz	l4954
  2677  00FA7C  5070               	movf	standbyMode@drawer+1,w,c
  2678  00FA7E  18DE               	xorwf	postinc2,w,c
  2679  00FA80  A4D8               	btfss	status,2,c
  2680  00FA82  D015               	goto	l522
  2681                           
  2682                           ;standbyMode.c: 1216: validDrawer = 1;
  2683  00FA84  0E00               	movlw	0
  2684  00FA86  6E62               	movwf	standbyMode@validDrawer+1,c
  2685  00FA88  0E01               	movlw	1
  2686  00FA8A  6E61               	movwf	standbyMode@validDrawer,c
  2687                           
  2688                           ;standbyMode.c: 1217: if (drawerInformation[i] == 0){
  2689  00FA8C  90D8               	bcf	status,0,c
  2690  00FA8E  346D               	rlcf	standbyMode@i,w,c
  2691  00FA90  6ED9               	movwf	fsr2l,c
  2692  00FA92  346E               	rlcf	standbyMode@i+1,w,c
  2693  00FA94  6EDA               	movwf	fsr2h,c
  2694  00FA96  0E80               	movlw	low _drawerInformation
  2695  00FA98  26D9               	addwf	fsr2l,f,c
  2696  00FA9A  0E00               	movlw	high _drawerInformation
  2697  00FA9C  22DA               	addwfc	fsr2h,f,c
  2698  00FA9E  50DE               	movf	postinc2,w,c
  2699  00FAA0  10DE               	iorwf	postinc2,w,c
  2700  00FAA2  A4D8               	btfss	status,2,c
  2701  00FAA4  D004               	goto	l522
  2702                           
  2703                           ;standbyMode.c: 1218: zero = 1;
  2704  00FAA6  0E00               	movlw	0
  2705  00FAA8  6E64               	movwf	standbyMode@zero+1,c
  2706  00FAAA  0E01               	movlw	1
  2707  00FAAC  6E63               	movwf	standbyMode@zero,c
  2708  00FAAE                     l522:
  2709  00FAAE                     l4954:
  2710  00FAAE  4A6D               	infsnz	standbyMode@i,f,c
  2711  00FAB0  2A6E               	incf	standbyMode@i+1,f,c
  2712  00FAB2  D7D2               	goto	l4942
  2713  00FAB4                     u6490:
  2714  00FAB4                     l4958:
  2715                           
  2716                           ;standbyMode.c: 1219: }
  2717                           ;standbyMode.c: 1220: }
  2718                           ;standbyMode.c: 1221: }
  2719                           ;standbyMode.c: 1222: if (validDrawer == 1){
  2720  00FAB4  0461               	decf	standbyMode@validDrawer,w,c
  2721  00FAB6  1062               	iorwf	standbyMode@validDrawer+1,w,c
  2722  00FAB8  A4D8               	btfss	status,2,c
  2723  00FABA  D060               	goto	l523
  2724                           
  2725                           ;standbyMode.c: 1223: if (zero == 1){
  2726  00FABC  0463               	decf	standbyMode@zero,w,c
  2727  00FABE  1064               	iorwf	standbyMode@zero+1,w,c
  2728  00FAC0  A4D8               	btfss	status,2,c
  2729  00FAC2  D02E               	goto	l524
  2730                           
  2731                           ;standbyMode.c: 1224: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2732  00FAC4  0E01               	movlw	1
  2733  00FAC6  EC2B  F069         	call	_lcdInst
  2734  00FACA  0EC3               	movlw	195
  2735  00FACC  6E52               	movwf	??_standbyMode& (0+255),c
  2736  00FACE  0ECD               	movlw	205
  2737  00FAD0                     u6817:
  2738  00FAD0  2EE8               	decfsz	wreg,f,c
  2739  00FAD2  D7FE               	bra	u6817
  2740  00FAD4  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2741  00FAD6  D7FC               	bra	u6817
  2742  00FAD8  F000               	nop	
  2743                           
  2744                           ;standbyMode.c: 1225: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2745  00FADA  0E0C               	movlw	12
  2746  00FADC  EC2B  F069         	call	_lcdInst
  2747                           
  2748                           ;standbyMode.c: 1226: printf("No drawer");
  2749  00FAE0  0EBE               	movlw	low STR_57
  2750  00FAE2  6E0D               	movwf	printf@f,c
  2751  00FAE4  0EFF               	movlw	high STR_57
  2752  00FAE6  6E0E               	movwf	printf@f+1,c
  2753  00FAE8  ECAF  F06F         	call	_printf	;wreg free
  2754                           
  2755                           ;standbyMode.c: 1227: lcdInst(0xC0);;
  2756  00FAEC  0EC0               	movlw	192
  2757  00FAEE  EC2B  F069         	call	_lcdInst
  2758                           
  2759                           ;standbyMode.c: 1228: printf("number pressed.");
  2760  00FAF2  0EFD               	movlw	low STR_58
  2761  00FAF4  6E0D               	movwf	printf@f,c
  2762  00FAF6  0EFD               	movlw	high STR_58
  2763  00FAF8  6E0E               	movwf	printf@f+1,c
  2764  00FAFA  ECAF  F06F         	call	_printf	;wreg free
  2765                           
  2766                           ;standbyMode.c: 1229: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2767  00FAFE  0E66               	movlw	102
  2768  00FB00  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2769  00FB02  0E76               	movlw	118
  2770  00FB04  6E52               	movwf	??_standbyMode& (0+255),c
  2771  00FB06  0EC1               	movlw	193
  2772  00FB08                     u6827:
  2773  00FB08  2EE8               	decfsz	wreg,f,c
  2774  00FB0A  D7FE               	bra	u6827
  2775  00FB0C  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2776  00FB0E  D7FC               	bra	u6827
  2777  00FB10  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2778  00FB12  D7FA               	bra	u6827
  2779  00FB14  F000               	nop	
  2780                           
  2781                           ;standbyMode.c: 1230: zero = 0;
  2782  00FB16  0E00               	movlw	0
  2783  00FB18  6E64               	movwf	standbyMode@zero+1,c
  2784  00FB1A  0E00               	movlw	0
  2785  00FB1C  6E63               	movwf	standbyMode@zero,c
  2786                           
  2787                           ;standbyMode.c: 1231: }
  2788  00FB1E  D029               	goto	l525
  2789  00FB20                     l524:
  2790                           
  2791                           ;standbyMode.c: 1232: else{
  2792                           ;standbyMode.c: 1233: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2793  00FB20  0E01               	movlw	1
  2794  00FB22  EC2B  F069         	call	_lcdInst
  2795  00FB26  0EC3               	movlw	195
  2796  00FB28  6E52               	movwf	??_standbyMode& (0+255),c
  2797  00FB2A  0ECD               	movlw	205
  2798  00FB2C                     u6837:
  2799  00FB2C  2EE8               	decfsz	wreg,f,c
  2800  00FB2E  D7FE               	bra	u6837
  2801  00FB30  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2802  00FB32  D7FC               	bra	u6837
  2803  00FB34  F000               	nop	
  2804                           
  2805                           ;standbyMode.c: 1234: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2806  00FB36  0E0C               	movlw	12
  2807  00FB38  EC2B  F069         	call	_lcdInst
  2808                           
  2809                           ;standbyMode.c: 1235: printf("Drawer already");
  2810  00FB3C  0EF5               	movlw	low STR_59
  2811  00FB3E  6E0D               	movwf	printf@f,c
  2812  00FB40  0EFE               	movlw	high STR_59
  2813  00FB42  6E0E               	movwf	printf@f+1,c
  2814  00FB44  ECAF  F06F         	call	_printf	;wreg free
  2815                           
  2816                           ;standbyMode.c: 1236: lcdInst(0xC0);;
  2817  00FB48  0EC0               	movlw	192
  2818  00FB4A  EC2B  F069         	call	_lcdInst
  2819                           
  2820                           ;standbyMode.c: 1237: printf("in use!");
  2821  00FB4E  0ED1               	movlw	low STR_60
  2822  00FB50  6E0D               	movwf	printf@f,c
  2823  00FB52  0EFF               	movlw	high STR_60
  2824  00FB54  6E0E               	movwf	printf@f+1,c
  2825  00FB56  ECAF  F06F         	call	_printf	;wreg free
  2826                           
  2827                           ;standbyMode.c: 1238: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2828  00FB5A  0E66               	movlw	102
  2829  00FB5C  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2830  00FB5E  0E76               	movlw	118
  2831  00FB60  6E52               	movwf	??_standbyMode& (0+255),c
  2832  00FB62  0EC1               	movlw	193
  2833  00FB64                     u6847:
  2834  00FB64  2EE8               	decfsz	wreg,f,c
  2835  00FB66  D7FE               	bra	u6847
  2836  00FB68  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2837  00FB6A  D7FC               	bra	u6847
  2838  00FB6C  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2839  00FB6E  D7FA               	bra	u6847
  2840  00FB70  F000               	nop	
  2841  00FB72                     l525:
  2842                           
  2843                           ;standbyMode.c: 1239: }
  2844                           ;standbyMode.c: 1240: validDrawer = 0;
  2845  00FB72  0E00               	movlw	0
  2846  00FB74  6E62               	movwf	standbyMode@validDrawer+1,c
  2847  00FB76  0E00               	movlw	0
  2848  00FB78  6E61               	movwf	standbyMode@validDrawer,c
  2849                           
  2850                           ;standbyMode.c: 1242: }
  2851                           
  2852                           ;standbyMode.c: 1241: continue;
  2853  00FB7A  D5E7               	goto	l486
  2854  00FB7C                     l523:
  2855                           
  2856                           ;standbyMode.c: 1243: else{
  2857                           ;standbyMode.c: 1244: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2858  00FB7C  0E01               	movlw	1
  2859  00FB7E  EC2B  F069         	call	_lcdInst
  2860  00FB82  0EC3               	movlw	195
  2861  00FB84  6E52               	movwf	??_standbyMode& (0+255),c
  2862  00FB86  0ECD               	movlw	205
  2863  00FB88                     u6857:
  2864  00FB88  2EE8               	decfsz	wreg,f,c
  2865  00FB8A  D7FE               	bra	u6857
  2866  00FB8C  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2867  00FB8E  D7FC               	bra	u6857
  2868  00FB90  F000               	nop	
  2869                           
  2870                           ;standbyMode.c: 1245: diet = diet_press(drawer);
  2871  00FB92  C06F  F025         	movff	standbyMode@drawer,diet_press@drawer
  2872  00FB96  C070  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2873  00FB9A  EC58  F073         	call	_diet_press	;wreg free
  2874  00FB9E  C025  F06B         	movff	?_diet_press,standbyMode@diet
  2875  00FBA2  C026  F06C         	movff	?_diet_press+1,standbyMode@diet+1
  2876                           
  2877                           ;standbyMode.c: 1246: if (diet == 100){
  2878  00FBA6  0E64               	movlw	100
  2879  00FBA8  186B               	xorwf	standbyMode@diet,w,c
  2880  00FBAA  106C               	iorwf	standbyMode@diet+1,w,c
  2881  00FBAC  A4D8               	btfss	status,2,c
  2882  00FBAE  D005               	goto	l529
  2883                           
  2884                           ;standbyMode.c: 1247: diet = 0;
  2885  00FBB0  0E00               	movlw	0
  2886  00FBB2  6E6C               	movwf	standbyMode@diet+1,c
  2887  00FBB4  0E00               	movlw	0
  2888  00FBB6  6E6B               	movwf	standbyMode@diet,c
  2889                           
  2890                           ;standbyMode.c: 1248: goto DIET_BACK2;
  2891  00FBB8  D728               	goto	l487
  2892  00FBBA                     l529:
  2893                           
  2894                           ;standbyMode.c: 1249: }
  2895                           ;standbyMode.c: 1251: food = food_press(diet, drawer);
  2896  00FBBA  C06B  F025         	movff	standbyMode@diet,food_press@dietSum
  2897  00FBBE  C06C  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2898  00FBC2  C06F  F027         	movff	standbyMode@drawer,food_press@drawer
  2899  00FBC6  C070  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2900  00FBCA  EC40  F06C         	call	_food_press	;wreg free
  2901  00FBCE  C025  F065         	movff	?_food_press,standbyMode@food
  2902  00FBD2  C026  F066         	movff	?_food_press+1,standbyMode@food+1
  2903                           
  2904                           ;standbyMode.c: 1252: if (food == 100){
  2905  00FBD6  0E64               	movlw	100
  2906  00FBD8  1865               	xorwf	standbyMode@food,w,c
  2907  00FBDA  1066               	iorwf	standbyMode@food+1,w,c
  2908  00FBDC  A4D8               	btfss	status,2,c
  2909  00FBDE  D009               	goto	l530
  2910                           
  2911                           ;standbyMode.c: 1253: diet = 0;
  2912  00FBE0  0E00               	movlw	0
  2913  00FBE2  6E6C               	movwf	standbyMode@diet+1,c
  2914  00FBE4  0E00               	movlw	0
  2915  00FBE6  6E6B               	movwf	standbyMode@diet,c
  2916                           
  2917                           ;standbyMode.c: 1254: food = 0;
  2918  00FBE8  0E00               	movlw	0
  2919  00FBEA  6E66               	movwf	standbyMode@food+1,c
  2920  00FBEC  0E00               	movlw	0
  2921  00FBEE  6E65               	movwf	standbyMode@food,c
  2922                           
  2923                           ;standbyMode.c: 1255: goto FOOD_BACK2;
  2924  00FBF0  D7C5               	goto	l523
  2925  00FBF2                     l530:
  2926                           
  2927                           ;standbyMode.c: 1256: }
  2928                           ;standbyMode.c: 1257: drawerInformation[drawerCount] = drawer;
  2929  00FBF2  90D8               	bcf	status,0,c
  2930  00FBF4  3469               	rlcf	standbyMode@drawerCount,w,c
  2931  00FBF6  6ED9               	movwf	fsr2l,c
  2932  00FBF8  346A               	rlcf	standbyMode@drawerCount+1,w,c
  2933  00FBFA  6EDA               	movwf	fsr2h,c
  2934  00FBFC  0E80               	movlw	low _drawerInformation
  2935  00FBFE  26D9               	addwf	fsr2l,f,c
  2936  00FC00  0E00               	movlw	high _drawerInformation
  2937  00FC02  22DA               	addwfc	fsr2h,f,c
  2938  00FC04  C06F  FFDE         	movff	standbyMode@drawer,postinc2
  2939  00FC08  C070  FFDD         	movff	standbyMode@drawer+1,postdec2
  2940                           
  2941                           ;standbyMode.c: 1258: drawerCount += 1;
  2942  00FC0C  4A69               	infsnz	standbyMode@drawerCount,f,c
  2943  00FC0E  2A6A               	incf	standbyMode@drawerCount+1,f,c
  2944  00FC10  D59C               	goto	l486
  2945  00FC12                     l485:
  2946                           
  2947                           ;standbyMode.c: 1263: else if (keypress == 14){
  2948  00FC12  0E0E               	movlw	14
  2949  00FC14  185F               	xorwf	standbyMode@keypress,w,c
  2950  00FC16  A4D8               	btfss	status,2,c
  2951  00FC18  D05A               	goto	l532
  2952  00FC1A                     u6540:
  2953                           
  2954                           ;standbyMode.c: 1265: unsigned int whichKey = viewLogs();
  2955                           
  2956                           ;standbyMode.c: 1264: while (1){
  2957  00FC1A  EC3C  F06E         	call	_viewLogs	;wreg free
  2958  00FC1E  C046  F05D         	movff	?_viewLogs,standbyMode@whichKey
  2959  00FC22  C047  F05E         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2960                           
  2961                           ;standbyMode.c: 1266: if (whichKey == 15){
  2962  00FC26  0E0F               	movlw	15
  2963  00FC28  185D               	xorwf	standbyMode@whichKey,w,c
  2964  00FC2A  105E               	iorwf	standbyMode@whichKey+1,w,c
  2965  00FC2C  B4D8               	btfsc	status,2,c
  2966  00FC2E  D7F5               	goto	u6540
  2967                           
  2968                           ;standbyMode.c: 1269: else if (whichKey == 14){
  2969                           
  2970                           ;standbyMode.c: 1268: }
  2971                           
  2972                           ;standbyMode.c: 1267: continue;
  2973  00FC30  0E0E               	movlw	14
  2974  00FC32  185D               	xorwf	standbyMode@whichKey,w,c
  2975  00FC34  105E               	iorwf	standbyMode@whichKey+1,w,c
  2976  00FC36  A4D8               	btfss	status,2,c
  2977  00FC38  D020               	goto	l537
  2978                           
  2979                           ;standbyMode.c: 1270: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2980  00FC3A  0E01               	movlw	1
  2981  00FC3C  EC2B  F069         	call	_lcdInst
  2982  00FC40  0EC3               	movlw	195
  2983  00FC42  6E52               	movwf	??_standbyMode& (0+255),c
  2984  00FC44  0ECD               	movlw	205
  2985  00FC46                     u6867:
  2986  00FC46  2EE8               	decfsz	wreg,f,c
  2987  00FC48  D7FE               	bra	u6867
  2988  00FC4A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2989  00FC4C  D7FC               	bra	u6867
  2990  00FC4E  F000               	nop	
  2991                           
  2992                           ;standbyMode.c: 1271: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2993  00FC50  0E0C               	movlw	12
  2994  00FC52  EC2B  F069         	call	_lcdInst
  2995                           
  2996                           ;standbyMode.c: 1272: printf("Rebooting.");
  2997  00FC56  0E93               	movlw	low STR_65
  2998  00FC58  6E0D               	movwf	printf@f,c
  2999  00FC5A  0EFF               	movlw	high STR_65
  3000  00FC5C  6E0E               	movwf	printf@f+1,c
  3001  00FC5E  ECAF  F06F         	call	_printf	;wreg free
  3002                           
  3003                           ;standbyMode.c: 1273: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3004  00FC62  0E66               	movlw	102
  3005  00FC64  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3006  00FC66  0E76               	movlw	118
  3007  00FC68  6E52               	movwf	??_standbyMode& (0+255),c
  3008  00FC6A  0EC1               	movlw	193
  3009  00FC6C                     u6877:
  3010  00FC6C  2EE8               	decfsz	wreg,f,c
  3011  00FC6E  D7FE               	bra	u6877
  3012  00FC70  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3013  00FC72  D7FC               	bra	u6877
  3014  00FC74  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3015  00FC76  D7FA               	bra	u6877
  3016  00FC78  D028               	goto	L1
  3017  00FC7A                     l537:
  3018                           
  3019                           ;standbyMode.c: 1276: else{
  3020                           ;standbyMode.c: 1277: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3021  00FC7A  0E01               	movlw	1
  3022  00FC7C  EC2B  F069         	call	_lcdInst
  3023  00FC80  0EC3               	movlw	195
  3024  00FC82  6E52               	movwf	??_standbyMode& (0+255),c
  3025  00FC84  0ECD               	movlw	205
  3026  00FC86                     u6887:
  3027  00FC86  2EE8               	decfsz	wreg,f,c
  3028  00FC88  D7FE               	bra	u6887
  3029  00FC8A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3030  00FC8C  D7FC               	bra	u6887
  3031  00FC8E  F000               	nop	
  3032                           
  3033                           ;standbyMode.c: 1278: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3034  00FC90  0E0C               	movlw	12
  3035  00FC92  EC2B  F069         	call	_lcdInst
  3036                           
  3037                           ;standbyMode.c: 1279: printf("Invalid key!");
  3038  00FC96  0E3C               	movlw	low STR_66
  3039  00FC98  6E0D               	movwf	printf@f,c
  3040  00FC9A  0EFF               	movlw	high STR_66
  3041  00FC9C  6E0E               	movwf	printf@f+1,c
  3042  00FC9E  ECAF  F06F         	call	_printf	;wreg free
  3043                           
  3044                           ;standbyMode.c: 1280: lcdInst(0xC0);;
  3045  00FCA2  0EC0               	movlw	192
  3046  00FCA4  EC2B  F069         	call	_lcdInst
  3047                           
  3048                           ;standbyMode.c: 1281: printf("Rebooting.");
  3049  00FCA8  0E93               	movlw	low STR_65
  3050  00FCAA  6E0D               	movwf	printf@f,c
  3051  00FCAC  0EFF               	movlw	high STR_65
  3052  00FCAE  6E0E               	movwf	printf@f+1,c
  3053  00FCB0  ECAF  F06F         	call	_printf	;wreg free
  3054                           
  3055                           ;standbyMode.c: 1282: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3056  00FCB4  0E66               	movlw	102
  3057  00FCB6  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3058  00FCB8  0E76               	movlw	118
  3059  00FCBA  6E52               	movwf	??_standbyMode& (0+255),c
  3060  00FCBC  0EC1               	movlw	193
  3061  00FCBE                     u6897:
  3062  00FCBE  2EE8               	decfsz	wreg,f,c
  3063  00FCC0  D7FE               	bra	u6897
  3064  00FCC2  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3065  00FCC4  D7FC               	bra	u6897
  3066  00FCC6  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3067  00FCC8  D7FA               	bra	u6897
  3068  00FCCA                     L1:
  3069  00FCCA  F000               	nop	
  3070                           
  3071                           ;standbyMode.c: 1283: break;
  3072  00FCCC  0012               	return	
  3073  00FCCE                     l532:
  3074                           
  3075                           ;standbyMode.c: 1288: else {
  3076                           ;standbyMode.c: 1289: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3077  00FCCE  0E01               	movlw	1
  3078  00FCD0  EC2B  F069         	call	_lcdInst
  3079  00FCD4  0EC3               	movlw	195
  3080  00FCD6  6E52               	movwf	??_standbyMode& (0+255),c
  3081  00FCD8  0ECD               	movlw	205
  3082  00FCDA                     u6907:
  3083  00FCDA  2EE8               	decfsz	wreg,f,c
  3084  00FCDC  D7FE               	bra	u6907
  3085  00FCDE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3086  00FCE0  D7FC               	bra	u6907
  3087  00FCE2  F000               	nop	
  3088                           
  3089                           ;standbyMode.c: 1290: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3090  00FCE4  0E0C               	movlw	12
  3091  00FCE6  EC2B  F069         	call	_lcdInst
  3092                           
  3093                           ;standbyMode.c: 1291: printf("Invalid key!");
  3094  00FCEA  0E3C               	movlw	low STR_66
  3095  00FCEC  6E0D               	movwf	printf@f,c
  3096  00FCEE  0EFF               	movlw	high STR_66
  3097  00FCF0  6E0E               	movwf	printf@f+1,c
  3098  00FCF2  ECAF  F06F         	call	_printf	;wreg free
  3099                           
  3100                           ;standbyMode.c: 1292: lcdInst(0xC0);;
  3101  00FCF6  0EC0               	movlw	192
  3102  00FCF8  EC2B  F069         	call	_lcdInst
  3103                           
  3104                           ;standbyMode.c: 1293: printf("Rebooting.");
  3105  00FCFC  0E93               	movlw	low STR_65
  3106  00FCFE  6E0D               	movwf	printf@f,c
  3107  00FD00  0EFF               	movlw	high STR_65
  3108  00FD02  6E0E               	movwf	printf@f+1,c
  3109  00FD04  ECAF  F06F         	call	_printf	;wreg free
  3110                           
  3111                           ;standbyMode.c: 1294: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3112  00FD08  0E66               	movlw	102
  3113  00FD0A  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3114  00FD0C  0E76               	movlw	118
  3115  00FD0E  6E52               	movwf	??_standbyMode& (0+255),c
  3116  00FD10  0EC1               	movlw	193
  3117  00FD12                     u6917:
  3118  00FD12  2EE8               	decfsz	wreg,f,c
  3119  00FD14  D7FE               	bra	u6917
  3120  00FD16  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3121  00FD18  D7FC               	bra	u6917
  3122  00FD1A  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3123  00FD1C  D7FA               	bra	u6917
  3124  00FD1E  F000               	nop	
  3125  00FD20  0012               	return	
  3126  00FD22                     __end_of_standbyMode:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           indf2	equ	0xFDF
  3132                           postinc2	equ	0xFDE
  3133                           postdec2	equ	0xFDD
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _which_drawer *****************
  3139 ;; Defined at:
  3140 ;;		line 914 in file "standbyMode.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;		None
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  rand            2   39[COMRAM] unsigned int 
  3145 ;;  keypress        1   47[COMRAM] unsigned char 
  3146 ;;  count           2   45[COMRAM] unsigned int 
  3147 ;;  backCheck       2   43[COMRAM] unsigned int 
  3148 ;;  sum             2   41[COMRAM] unsigned int 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   36[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:       12 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		_decode_drawer
  3167 ;;		_lcdInst
  3168 ;;		_printf
  3169 ;;		_putch
  3170 ;; This function is called by:
  3171 ;;		_standbyMode
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text2
  3176  00DA74                     __ptext2:
  3177                           	opt stack 0
  3178  00DA74                     _which_drawer:
  3179                           	opt stack 26
  3180                           
  3181                           ;standbyMode.c: 915: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3182                           
  3183                           ;incstack = 0
  3184  00DA74  0E0C               	movlw	12
  3185  00DA76  EC2B  F069         	call	_lcdInst
  3186                           
  3187                           ;standbyMode.c: 916: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3188  00DA7A  0E01               	movlw	1
  3189  00DA7C  EC2B  F069         	call	_lcdInst
  3190  00DA80  0EC3               	movlw	195
  3191  00DA82  6E27               	movwf	??_which_drawer& (0+255),c
  3192  00DA84  0ECD               	movlw	205
  3193  00DA86                     u6927:
  3194  00DA86  2EE8               	decfsz	wreg,f,c
  3195  00DA88  D7FE               	bra	u6927
  3196  00DA8A  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3197  00DA8C  D7FC               	bra	u6927
  3198  00DA8E  F000               	nop	
  3199                           
  3200                           ;standbyMode.c: 917: printf("Drawer number:");
  3201  00DA90  0E8C               	movlw	low STR_38
  3202  00DA92  6E0D               	movwf	printf@f,c
  3203  00DA94  0EFE               	movlw	high STR_38
  3204  00DA96  6E0E               	movwf	printf@f+1,c
  3205  00DA98  ECAF  F06F         	call	_printf	;wreg free
  3206                           
  3207                           ;standbyMode.c: 918: lcdInst(0xC0);;
  3208  00DA9C  0EC0               	movlw	192
  3209  00DA9E  EC2B  F069         	call	_lcdInst
  3210                           
  3211                           ;standbyMode.c: 920: unsigned int count = 0;
  3212  00DAA2  0E00               	movlw	0
  3213  00DAA4  6E2F               	movwf	which_drawer@count+1,c
  3214  00DAA6  0E00               	movlw	0
  3215  00DAA8  6E2E               	movwf	which_drawer@count,c
  3216                           
  3217                           ;standbyMode.c: 921: unsigned int sum = 0;
  3218  00DAAA  0E00               	movlw	0
  3219  00DAAC  6E2B               	movwf	which_drawer@sum+1,c
  3220  00DAAE  0E00               	movlw	0
  3221  00DAB0  6E2A               	movwf	which_drawer@sum,c
  3222                           
  3223                           ;standbyMode.c: 922: unsigned int backCheck = 0;
  3224  00DAB2  0E00               	movlw	0
  3225  00DAB4  6E2D               	movwf	which_drawer@backCheck+1,c
  3226  00DAB6  0E00               	movlw	0
  3227  00DAB8  6E2C               	movwf	which_drawer@backCheck,c
  3228  00DABA                     
  3229                           ;standbyMode.c: 925: while(PORTBbits.RB1 == 0){ continue; }
  3230  00DABA  A281               	btfss	3969,1,c	;volatile
  3231  00DABC  D7FE               	goto	l438
  3232                           
  3233                           ;standbyMode.c: 926: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3234  00DABE  3881               	swapf	3969,w,c	;volatile
  3235  00DAC0  0B0F               	andlw	15
  3236  00DAC2  0B0F               	andlw	15
  3237  00DAC4  6E30               	movwf	which_drawer@keypress,c
  3238  00DAC6  B281               	btfsc	3969,1,c	;volatile
  3239  00DAC8  D7FE               	goto	l443
  3240                           
  3241                           ;standbyMode.c: 929: if(keypress == 15){
  3242  00DACA  0E0F               	movlw	15
  3243  00DACC  1830               	xorwf	which_drawer@keypress,w,c
  3244  00DACE  B4D8               	btfsc	status,2,c
  3245  00DAD0  D0BA               	goto	l446
  3246                           
  3247                           ;standbyMode.c: 932: else if (keypress == 14){
  3248                           
  3249                           ;standbyMode.c: 931: }
  3250                           
  3251                           ;standbyMode.c: 930: break;
  3252  00DAD2  0E0E               	movlw	14
  3253  00DAD4  1830               	xorwf	which_drawer@keypress,w,c
  3254  00DAD6  A4D8               	btfss	status,2,c
  3255  00DAD8  D005               	goto	l448
  3256                           
  3257                           ;standbyMode.c: 933: backCheck = 100;
  3258  00DADA  0E00               	movlw	0
  3259  00DADC  6E2D               	movwf	which_drawer@backCheck+1,c
  3260  00DADE  0E64               	movlw	100
  3261  00DAE0  6E2C               	movwf	which_drawer@backCheck,c
  3262                           
  3263                           ;standbyMode.c: 934: break;
  3264  00DAE2  D0B1               	goto	l446
  3265  00DAE4                     l448:
  3266                           
  3267                           ;standbyMode.c: 936: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  3268  00DAE4  5030               	movf	which_drawer@keypress,w,c
  3269  00DAE6  B4D8               	btfsc	status,2,c
  3270  00DAE8  D023               	goto	u5970
  3271  00DAEA  0430               	decf	which_drawer@keypress,w,c
  3272  00DAEC  B4D8               	btfsc	status,2,c
  3273  00DAEE  D020               	goto	u5970
  3274  00DAF0  0E02               	movlw	2
  3275  00DAF2  1830               	xorwf	which_drawer@keypress,w,c
  3276  00DAF4  B4D8               	btfsc	status,2,c
  3277  00DAF6  D01C               	goto	u5970
  3278  00DAF8  0E04               	movlw	4
  3279  00DAFA  1830               	xorwf	which_drawer@keypress,w,c
  3280  00DAFC  B4D8               	btfsc	status,2,c
  3281  00DAFE  D018               	goto	u5970
  3282  00DB00  0E05               	movlw	5
  3283  00DB02  1830               	xorwf	which_drawer@keypress,w,c
  3284  00DB04  B4D8               	btfsc	status,2,c
  3285  00DB06  D014               	goto	u5970
  3286  00DB08  0E06               	movlw	6
  3287  00DB0A  1830               	xorwf	which_drawer@keypress,w,c
  3288  00DB0C  B4D8               	btfsc	status,2,c
  3289  00DB0E  D010               	goto	u5970
  3290  00DB10  0E08               	movlw	8
  3291  00DB12  1830               	xorwf	which_drawer@keypress,w,c
  3292  00DB14  B4D8               	btfsc	status,2,c
  3293  00DB16  D00C               	goto	u5970
  3294  00DB18  0E09               	movlw	9
  3295  00DB1A  1830               	xorwf	which_drawer@keypress,w,c
  3296  00DB1C  B4D8               	btfsc	status,2,c
  3297  00DB1E  D008               	goto	u5970
  3298  00DB20  0E0A               	movlw	10
  3299  00DB22  1830               	xorwf	which_drawer@keypress,w,c
  3300  00DB24  B4D8               	btfsc	status,2,c
  3301  00DB26  D004               	goto	u5970
  3302  00DB28  0E0D               	movlw	13
  3303  00DB2A  1830               	xorwf	which_drawer@keypress,w,c
  3304  00DB2C  A4D8               	btfss	status,2,c
  3305  00DB2E  D06A               	goto	l450
  3306  00DB30                     u5970:
  3307                           
  3308                           ;standbyMode.c: 937: if (count == 0){
  3309  00DB30  502E               	movf	which_drawer@count,w,c
  3310  00DB32  102F               	iorwf	which_drawer@count+1,w,c
  3311  00DB34  A4D8               	btfss	status,2,c
  3312  00DB36  D046               	goto	l453
  3313                           
  3314                           ;standbyMode.c: 938: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  3315  00DB38  0430               	decf	which_drawer@keypress,w,c
  3316  00DB3A  B4D8               	btfsc	status,2,c
  3317  00DB3C  D01C               	goto	u6060
  3318  00DB3E  0E02               	movlw	2
  3319  00DB40  1830               	xorwf	which_drawer@keypress,w,c
  3320  00DB42  B4D8               	btfsc	status,2,c
  3321  00DB44  D018               	goto	u6060
  3322  00DB46  0E04               	movlw	4
  3323  00DB48  1830               	xorwf	which_drawer@keypress,w,c
  3324  00DB4A  B4D8               	btfsc	status,2,c
  3325  00DB4C  D014               	goto	u6060
  3326  00DB4E  0E05               	movlw	5
  3327  00DB50  1830               	xorwf	which_drawer@keypress,w,c
  3328  00DB52  B4D8               	btfsc	status,2,c
  3329  00DB54  D010               	goto	u6060
  3330  00DB56  0E06               	movlw	6
  3331  00DB58  1830               	xorwf	which_drawer@keypress,w,c
  3332  00DB5A  B4D8               	btfsc	status,2,c
  3333  00DB5C  D00C               	goto	u6060
  3334  00DB5E  0E08               	movlw	8
  3335  00DB60  1830               	xorwf	which_drawer@keypress,w,c
  3336  00DB62  B4D8               	btfsc	status,2,c
  3337  00DB64  D008               	goto	u6060
  3338  00DB66  0E09               	movlw	9
  3339  00DB68  1830               	xorwf	which_drawer@keypress,w,c
  3340  00DB6A  B4D8               	btfsc	status,2,c
  3341  00DB6C  D004               	goto	u6060
  3342  00DB6E  0E0A               	movlw	10
  3343  00DB70  1830               	xorwf	which_drawer@keypress,w,c
  3344  00DB72  A4D8               	btfss	status,2,c
  3345  00DB74  D011               	goto	l454
  3346  00DB76                     u6060:
  3347                           
  3348                           ;standbyMode.c: 939: count += 2;
  3349  00DB76  0E02               	movlw	2
  3350  00DB78  262E               	addwf	which_drawer@count,f,c
  3351  00DB7A  0E00               	movlw	0
  3352  00DB7C  222F               	addwfc	which_drawer@count+1,f,c
  3353                           
  3354                           ;standbyMode.c: 940: putch(input[keypress]);
  3355  00DB7E  5030               	movf	which_drawer@keypress,w,c
  3356  00DB80  0D01               	mullw	1
  3357  00DB82  0E34               	movlw	low _input
  3358  00DB84  24F3               	addwf	prodl,w,c
  3359  00DB86  6EF6               	movwf	tblptrl,c
  3360  00DB88  0EFD               	movlw	high _input
  3361  00DB8A  20F4               	addwfc	prodh,w,c
  3362  00DB8C  6EF7               	movwf	tblptrh,c
  3363  00DB8E                     	if	0	;There are less than 3 active tblptr bytes
  3364  00DB8E                     	endif
  3365  00DB8E  0008               	tblrd		*
  3366  00DB90  50F5               	movf	tablat,w,c
  3367  00DB92  EC35  F069         	call	_putch
  3368  00DB96  D034               	goto	l464
  3369  00DB98                     l454:
  3370                           
  3371                           ;standbyMode.c: 943: else if (keypress == 0){
  3372  00DB98  5030               	movf	which_drawer@keypress,w,c
  3373  00DB9A  A4D8               	btfss	status,2,c
  3374  00DB9C  D78E               	goto	l438
  3375                           
  3376                           ;standbyMode.c: 944: putch(input[keypress]);
  3377  00DB9E  5030               	movf	which_drawer@keypress,w,c
  3378  00DBA0  0D01               	mullw	1
  3379  00DBA2  0E34               	movlw	low _input
  3380  00DBA4  24F3               	addwf	prodl,w,c
  3381  00DBA6  6EF6               	movwf	tblptrl,c
  3382  00DBA8  0EFD               	movlw	high _input
  3383  00DBAA  20F4               	addwfc	prodh,w,c
  3384  00DBAC  6EF7               	movwf	tblptrh,c
  3385  00DBAE                     	if	0	;There are less than 3 active tblptr bytes
  3386  00DBAE                     	endif
  3387  00DBAE  0008               	tblrd		*
  3388  00DBB0  50F5               	movf	tablat,w,c
  3389  00DBB2  EC35  F069         	call	_putch
  3390                           
  3391                           ;standbyMode.c: 945: count += 1;
  3392  00DBB6  4A2E               	infsnz	which_drawer@count,f,c
  3393  00DBB8  2A2F               	incf	which_drawer@count+1,f,c
  3394  00DBBA  D020               	goto	u6110
  3395  00DBBC                     L2:
  3396  00DBBC  262A               	addwf	which_drawer@sum,f,c
  3397  00DBBE  0E00               	movlw	0
  3398  00DBC0  222B               	addwfc	which_drawer@sum+1,f,c
  3399                           
  3400                           ;standbyMode.c: 947: }
  3401                           ;standbyMode.c: 948: }
  3402  00DBC2  D77B               	goto	l438
  3403  00DBC4                     l453:
  3404                           
  3405                           ;standbyMode.c: 949: else if (count == 1){
  3406  00DBC4  042E               	decf	which_drawer@count,w,c
  3407  00DBC6  102F               	iorwf	which_drawer@count+1,w,c
  3408  00DBC8  A4D8               	btfss	status,2,c
  3409  00DBCA  D777               	goto	l438
  3410                           
  3411                           ;standbyMode.c: 950: if (keypress < 8 || keypress == 13){
  3412  00DBCC  0E07               	movlw	7
  3413  00DBCE  6430               	cpfsgt	which_drawer@keypress,c
  3414  00DBD0  D004               	goto	u6100
  3415  00DBD2  0E0D               	movlw	13
  3416  00DBD4  1830               	xorwf	which_drawer@keypress,w,c
  3417  00DBD6  A4D8               	btfss	status,2,c
  3418  00DBD8  D770               	goto	l438
  3419  00DBDA                     u6100:
  3420                           
  3421                           ;standbyMode.c: 951: putch(input[keypress]);
  3422  00DBDA  5030               	movf	which_drawer@keypress,w,c
  3423  00DBDC  0D01               	mullw	1
  3424  00DBDE  0E34               	movlw	low _input
  3425  00DBE0  24F3               	addwf	prodl,w,c
  3426  00DBE2  6EF6               	movwf	tblptrl,c
  3427  00DBE4  0EFD               	movlw	high _input
  3428  00DBE6  20F4               	addwfc	prodh,w,c
  3429  00DBE8  6EF7               	movwf	tblptrh,c
  3430  00DBEA                     	if	0	;There are less than 3 active tblptr bytes
  3431  00DBEA                     	endif
  3432  00DBEA  0008               	tblrd		*
  3433  00DBEC  50F5               	movf	tablat,w,c
  3434  00DBEE  EC35  F069         	call	_putch
  3435                           
  3436                           ;standbyMode.c: 952: count += 1;
  3437  00DBF2  4A2E               	infsnz	which_drawer@count,f,c
  3438  00DBF4  2A2F               	incf	which_drawer@count+1,f,c
  3439                           
  3440                           ;standbyMode.c: 953: if(keypress == 0){
  3441  00DBF6  5030               	movf	which_drawer@keypress,w,c
  3442  00DBF8  A4D8               	btfss	status,2,c
  3443  00DBFA  D002               	goto	l464
  3444  00DBFC                     u6110:
  3445                           
  3446                           ;standbyMode.c: 954: sum += 20;
  3447  00DBFC  0E14               	movlw	20
  3448  00DBFE  D7DE               	goto	L2
  3449  00DC00                     l464:
  3450                           
  3451                           ;standbyMode.c: 956: else {
  3452                           ;standbyMode.c: 957: sum += keypress;
  3453  00DC00  5030               	movf	which_drawer@keypress,w,c
  3454  00DC02  D7DC               	goto	L2
  3455  00DC04                     l450:
  3456                           
  3457                           ;standbyMode.c: 962: else if (keypress == 12){
  3458  00DC04  0E0C               	movlw	12
  3459  00DC06  1830               	xorwf	which_drawer@keypress,w,c
  3460  00DC08  A4D8               	btfss	status,2,c
  3461  00DC0A  D757               	goto	l438
  3462                           
  3463                           ;standbyMode.c: 963: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3464  00DC0C  0E01               	movlw	1
  3465  00DC0E  EC2B  F069         	call	_lcdInst
  3466  00DC12  0EC3               	movlw	195
  3467  00DC14  6E27               	movwf	??_which_drawer& (0+255),c
  3468  00DC16  0ECD               	movlw	205
  3469  00DC18                     u6937:
  3470  00DC18  2EE8               	decfsz	wreg,f,c
  3471  00DC1A  D7FE               	bra	u6937
  3472  00DC1C  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3473  00DC1E  D7FC               	bra	u6937
  3474  00DC20  F000               	nop	
  3475                           
  3476                           ;standbyMode.c: 964: printf("Drawer number:");
  3477  00DC22  0E8C               	movlw	low STR_38
  3478  00DC24  6E0D               	movwf	printf@f,c
  3479  00DC26  0EFE               	movlw	high STR_38
  3480  00DC28  6E0E               	movwf	printf@f+1,c
  3481  00DC2A  ECAF  F06F         	call	_printf	;wreg free
  3482                           
  3483                           ;standbyMode.c: 965: lcdInst(0xC0);;
  3484  00DC2E  0EC0               	movlw	192
  3485  00DC30  EC2B  F069         	call	_lcdInst
  3486                           
  3487                           ;standbyMode.c: 966: count = 0;
  3488  00DC34  0E00               	movlw	0
  3489  00DC36  6E2F               	movwf	which_drawer@count+1,c
  3490  00DC38  0E00               	movlw	0
  3491  00DC3A  6E2E               	movwf	which_drawer@count,c
  3492                           
  3493                           ;standbyMode.c: 967: sum = 0;
  3494  00DC3C  0E00               	movlw	0
  3495  00DC3E  6E2B               	movwf	which_drawer@sum+1,c
  3496  00DC40  0E00               	movlw	0
  3497  00DC42  6E2A               	movwf	which_drawer@sum,c
  3498  00DC44  D73A               	goto	l438
  3499  00DC46                     l446:
  3500                           
  3501                           ;standbyMode.c: 968: }
  3502                           ;standbyMode.c: 969: }
  3503                           ;standbyMode.c: 971: if (backCheck == 100){
  3504  00DC46  0E64               	movlw	100
  3505  00DC48  182C               	xorwf	which_drawer@backCheck,w,c
  3506  00DC4A  102D               	iorwf	which_drawer@backCheck+1,w,c
  3507  00DC4C  A4D8               	btfss	status,2,c
  3508  00DC4E  D005               	goto	l469
  3509                           
  3510                           ;standbyMode.c: 972: return backCheck;
  3511  00DC50  C02C  F025         	movff	which_drawer@backCheck,?_which_drawer
  3512  00DC54  C02D  F026         	movff	which_drawer@backCheck+1,?_which_drawer+1
  3513                           
  3514                           ;standbyMode.c: 973: }
  3515  00DC58  0012               	return	
  3516  00DC5A                     l469:
  3517                           
  3518                           ;standbyMode.c: 974: else{
  3519                           ;standbyMode.c: 975: unsigned int rand = decode_drawer(sum);
  3520  00DC5A  C02A  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3521  00DC5E  C02B  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3522  00DC62  ECCF  F06B         	call	_decode_drawer	;wreg free
  3523  00DC66  C001  F028         	movff	?_decode_drawer,which_drawer@rand
  3524  00DC6A  C002  F029         	movff	?_decode_drawer+1,which_drawer@rand+1
  3525                           
  3526                           ;standbyMode.c: 976: return rand;
  3527  00DC6E  C028  F025         	movff	which_drawer@rand,?_which_drawer
  3528  00DC72  C029  F026         	movff	which_drawer@rand+1,?_which_drawer+1
  3529  00DC76  0012               	return	
  3530  00DC78                     __end_of_which_drawer:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _decode_drawer *****************
  3548 ;; Defined at:
  3549 ;;		line 836 in file "standbyMode.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  drawer          2    0[COMRAM] unsigned int 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  returnValue     2    4[COMRAM] unsigned int 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  2    0[COMRAM] unsigned int 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;Total ram usage:        6 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_which_drawer
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text3
  3577  00D79E                     __ptext3:
  3578                           	opt stack 0
  3579  00D79E                     _decode_drawer:
  3580                           	opt stack 28
  3581                           
  3582                           ;standbyMode.c: 837: unsigned int returnValue;
  3583                           ;standbyMode.c: 839: switch(drawer){
  3584                           
  3585                           ;incstack = 0
  3586  00D79E  D03A               	goto	l419
  3587  00D7A0                     
  3588                           ;standbyMode.c: 842: returnValue = 1;
  3589  00D7A0  0E00               	movlw	0
  3590  00D7A2  6E06               	movwf	decode_drawer@returnValue+1,c
  3591  00D7A4  0E01               	movlw	1
  3592  00D7A6  D02F               	goto	L14
  3593  00D7A8                     
  3594                           ;standbyMode.c: 847: returnValue = 2;
  3595  00D7A8  0E00               	movlw	0
  3596  00D7AA  6E06               	movwf	decode_drawer@returnValue+1,c
  3597  00D7AC  0E02               	movlw	2
  3598  00D7AE  D02B               	goto	L14
  3599  00D7B0                     
  3600                           ;standbyMode.c: 852: returnValue = 3;
  3601  00D7B0  0E00               	movlw	0
  3602  00D7B2  6E06               	movwf	decode_drawer@returnValue+1,c
  3603  00D7B4  0E03               	movlw	3
  3604  00D7B6  D027               	goto	L14
  3605  00D7B8                     
  3606                           ;standbyMode.c: 857: returnValue = 7;
  3607  00D7B8  0E00               	movlw	0
  3608  00D7BA  6E06               	movwf	decode_drawer@returnValue+1,c
  3609  00D7BC  0E07               	movlw	7
  3610  00D7BE  D023               	goto	L14
  3611  00D7C0                     
  3612                           ;standbyMode.c: 862: returnValue = 8;
  3613  00D7C0  0E00               	movlw	0
  3614  00D7C2  6E06               	movwf	decode_drawer@returnValue+1,c
  3615  00D7C4  0E08               	movlw	8
  3616  00D7C6  D01F               	goto	L14
  3617  00D7C8                     
  3618                           ;standbyMode.c: 867: returnValue = 9;
  3619  00D7C8  0E00               	movlw	0
  3620  00D7CA  6E06               	movwf	decode_drawer@returnValue+1,c
  3621  00D7CC  0E09               	movlw	9
  3622  00D7CE  D01B               	goto	L14
  3623  00D7D0                     
  3624                           ;standbyMode.c: 872: returnValue = 10;
  3625  00D7D0  0E00               	movlw	0
  3626  00D7D2  6E06               	movwf	decode_drawer@returnValue+1,c
  3627  00D7D4  0E0A               	movlw	10
  3628  00D7D6  D017               	goto	L14
  3629  00D7D8                     
  3630                           ;standbyMode.c: 877: returnValue = 11;
  3631  00D7D8  0E00               	movlw	0
  3632  00D7DA  6E06               	movwf	decode_drawer@returnValue+1,c
  3633  00D7DC  0E0B               	movlw	11
  3634  00D7DE  D013               	goto	L14
  3635  00D7E0                     
  3636                           ;standbyMode.c: 882: returnValue = 12;
  3637  00D7E0  0E00               	movlw	0
  3638  00D7E2  6E06               	movwf	decode_drawer@returnValue+1,c
  3639  00D7E4  0E0C               	movlw	12
  3640  00D7E6  D00F               	goto	L14
  3641  00D7E8                     
  3642                           ;standbyMode.c: 887: returnValue = 13;
  3643  00D7E8  0E00               	movlw	0
  3644  00D7EA  6E06               	movwf	decode_drawer@returnValue+1,c
  3645  00D7EC  0E0D               	movlw	13
  3646  00D7EE  D00B               	goto	L14
  3647  00D7F0                     
  3648                           ;standbyMode.c: 892: returnValue = 14;
  3649  00D7F0  0E00               	movlw	0
  3650  00D7F2  6E06               	movwf	decode_drawer@returnValue+1,c
  3651  00D7F4  0E0E               	movlw	14
  3652  00D7F6  D007               	goto	L14
  3653  00D7F8                     
  3654                           ;standbyMode.c: 897: returnValue = 15;
  3655  00D7F8  0E00               	movlw	0
  3656  00D7FA  6E06               	movwf	decode_drawer@returnValue+1,c
  3657  00D7FC  0E0F               	movlw	15
  3658  00D7FE  D003               	goto	L14
  3659  00D800                     
  3660                           ;standbyMode.c: 902: returnValue = 16;
  3661  00D800  0E00               	movlw	0
  3662  00D802  6E06               	movwf	decode_drawer@returnValue+1,c
  3663  00D804  0E10               	movlw	16
  3664  00D806                     L14:
  3665  00D806  6E05               	movwf	decode_drawer@returnValue,c
  3666                           
  3667                           ;standbyMode.c: 903: break;
  3668  00D808  D036               	goto	l421
  3669  00D80A                     l434:
  3670                           
  3671                           ;standbyMode.c: 906: returnValue = drawer;
  3672  00D80A  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3673  00D80E  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3674                           
  3675                           ;standbyMode.c: 908: }
  3676                           
  3677                           ;standbyMode.c: 907: break;
  3678  00D812  D031               	goto	l421
  3679  00D814                     l419:
  3680  00D814  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3681  00D818  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3682                           
  3683                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3684                           ; Switch size 1, requested type "space"
  3685                           ; Number of cases is 1, Range of values is 0 to 0
  3686                           ; switch strategies available:
  3687                           ; Name         Instructions Cycles
  3688                           ; simple_byte            4     3 (average)
  3689                           ;	Chosen strategy is simple_byte
  3690  00D81C  5004               	movf	??_decode_drawer+1,w,c
  3691  00D81E  0A00               	xorlw	0	; case 0
  3692  00D820  A4D8               	btfss	status,2,c
  3693  00D822  D7F3               	goto	l434
  3694                           
  3695                           ; Switch size 1, requested type "space"
  3696                           ; Number of cases is 13, Range of values is 1 to 40
  3697                           ; switch strategies available:
  3698                           ; Name         Instructions Cycles
  3699                           ; simple_byte           40    21 (average)
  3700                           ;	Chosen strategy is simple_byte
  3701  00D824  5003               	movf	??_decode_drawer,w,c
  3702  00D826  0A01               	xorlw	1	; case 1
  3703  00D828  B4D8               	btfsc	status,2,c
  3704  00D82A  D7BE               	goto	l422
  3705  00D82C  0A03               	xorlw	3	; case 2
  3706  00D82E  B4D8               	btfsc	status,2,c
  3707  00D830  D7BF               	goto	l423
  3708  00D832  0A0A               	xorlw	10	; case 8
  3709  00D834  B4D8               	btfsc	status,2,c
  3710  00D836  D7C0               	goto	l424
  3711  00D838  0A01               	xorlw	1	; case 9
  3712  00D83A  B4D8               	btfsc	status,2,c
  3713  00D83C  D7C1               	goto	l425
  3714  00D83E  0A03               	xorlw	3	; case 10
  3715  00D840  B4D8               	btfsc	status,2,c
  3716  00D842  D7C2               	goto	l426
  3717  00D844  0A1E               	xorlw	30	; case 20
  3718  00D846  B4D8               	btfsc	status,2,c
  3719  00D848  D7AB               	goto	l420
  3720  00D84A  0A01               	xorlw	1	; case 21
  3721  00D84C  B4D8               	btfsc	status,2,c
  3722  00D84E  D7C8               	goto	l429
  3723  00D850  0A03               	xorlw	3	; case 22
  3724  00D852  B4D8               	btfsc	status,2,c
  3725  00D854  D7C9               	goto	l430
  3726  00D856  0A0E               	xorlw	14	; case 24
  3727  00D858  B4D8               	btfsc	status,2,c
  3728  00D85A  D7CA               	goto	l431
  3729  00D85C  0A01               	xorlw	1	; case 25
  3730  00D85E  B4D8               	btfsc	status,2,c
  3731  00D860  D7CB               	goto	l432
  3732  00D862  0A03               	xorlw	3	; case 26
  3733  00D864  B4D8               	btfsc	status,2,c
  3734  00D866  D7CC               	goto	l433
  3735  00D868  0A3B               	xorlw	59	; case 33
  3736  00D86A  B4D8               	btfsc	status,2,c
  3737  00D86C  D7B1               	goto	l427
  3738  00D86E  0A09               	xorlw	9	; case 40
  3739  00D870  B4D8               	btfsc	status,2,c
  3740  00D872  D7B2               	goto	l428
  3741  00D874  D7CA               	goto	l434
  3742  00D876                     l421:
  3743                           
  3744                           ;standbyMode.c: 909: return returnValue;
  3745  00D876  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3746  00D87A  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3747  00D87E  0012               	return		;funcret
  3748  00D880                     __end_of_decode_drawer:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           indf2	equ	0xFDF
  3759                           postinc2	equ	0xFDE
  3760                           postdec2	equ	0xFDD
  3761                           fsr2h	equ	0xFDA
  3762                           fsr2l	equ	0xFD9
  3763                           status	equ	0xFD8
  3764                           
  3765 ;; *************** function _viewLogs *****************
  3766 ;; Defined at:
  3767 ;;		line 319 in file "standbyMode.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;		None
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  keypress2       1   80[COMRAM] unsigned char 
  3772 ;;  logView         2   77[COMRAM] unsigned int 
  3773 ;;  returnVal       2   75[COMRAM] unsigned int 
  3774 ;;  checkLog        2   73[COMRAM] unsigned int 
  3775 ;;  logNumber       1   79[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  2   69[COMRAM] unsigned int 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:       12 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    4
  3792 ;; This function calls:
  3793 ;;		_displayLogs
  3794 ;;		_lcdInst
  3795 ;;		_printf
  3796 ;;		_putch
  3797 ;;		_readEEPROM
  3798 ;;		_verifyKeypress
  3799 ;; This function is called by:
  3800 ;;		_standbyMode
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text4
  3805  00DC78                     __ptext4:
  3806                           	opt stack 0
  3807  00DC78                     _viewLogs:
  3808                           	opt stack 25
  3809                           
  3810                           ;standbyMode.c: 321: unsigned char logNumber = readEEPROM(250);
  3811                           
  3812                           ;incstack = 0
  3813  00DC78  0EFA               	movlw	250
  3814  00DC7A  EC3F  F069         	call	_readEEPROM
  3815  00DC7E  6E50               	movwf	viewLogs@logNumber,c
  3816                           
  3817                           ;standbyMode.c: 322: unsigned int logView = 0;
  3818  00DC80  0E00               	movlw	0
  3819  00DC82  6E4F               	movwf	viewLogs@logView+1,c
  3820  00DC84  0E00               	movlw	0
  3821  00DC86  6E4E               	movwf	viewLogs@logView,c
  3822                           
  3823                           ;standbyMode.c: 323: unsigned int checkLog = 0;
  3824  00DC88  0E00               	movlw	0
  3825  00DC8A  6E4B               	movwf	viewLogs@checkLog+1,c
  3826  00DC8C  0E00               	movlw	0
  3827  00DC8E  6E4A               	movwf	viewLogs@checkLog,c
  3828                           
  3829                           ;standbyMode.c: 324: unsigned int returnVal = 0;
  3830  00DC90  0E00               	movlw	0
  3831  00DC92  6E4D               	movwf	viewLogs@returnVal+1,c
  3832  00DC94  0E00               	movlw	0
  3833  00DC96  6E4C               	movwf	viewLogs@returnVal,c
  3834                           
  3835                           ;standbyMode.c: 326: if (logNumber == 0){
  3836  00DC98  5050               	movf	viewLogs@logNumber,w,c
  3837  00DC9A  A4D8               	btfss	status,2,c
  3838  00DC9C  D02B               	goto	l243
  3839                           
  3840                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3841  00DC9E  0E01               	movlw	1
  3842  00DCA0  EC2B  F069         	call	_lcdInst
  3843  00DCA4  0EC3               	movlw	195
  3844  00DCA6  6E48               	movwf	??_viewLogs& (0+255),c
  3845  00DCA8  0ECD               	movlw	205
  3846  00DCAA                     u6947:
  3847  00DCAA  2EE8               	decfsz	wreg,f,c
  3848  00DCAC  D7FE               	bra	u6947
  3849  00DCAE  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3850  00DCB0  D7FC               	bra	u6947
  3851  00DCB2  F000               	nop	
  3852                           
  3853                           ;standbyMode.c: 328: printf("No logs");
  3854  00DCB4  0EE1               	movlw	low STR_1
  3855  00DCB6  6E0D               	movwf	printf@f,c
  3856  00DCB8  0EFF               	movlw	high STR_1
  3857  00DCBA  6E0E               	movwf	printf@f+1,c
  3858  00DCBC  ECAF  F06F         	call	_printf	;wreg free
  3859                           
  3860                           ;standbyMode.c: 329: lcdInst(0xC0);;
  3861  00DCC0  0EC0               	movlw	192
  3862  00DCC2  EC2B  F069         	call	_lcdInst
  3863                           
  3864                           ;standbyMode.c: 330: printf("available.");
  3865  00DCC6  0E88               	movlw	low STR_2
  3866  00DCC8  6E0D               	movwf	printf@f,c
  3867  00DCCA  0EFF               	movlw	high STR_2
  3868  00DCCC  6E0E               	movwf	printf@f+1,c
  3869  00DCCE  ECAF  F06F         	call	_printf	;wreg free
  3870                           
  3871                           ;standbyMode.c: 331: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3872  00DCD2  0E66               	movlw	102
  3873  00DCD4  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3874  00DCD6  0E76               	movlw	118
  3875  00DCD8  6E48               	movwf	??_viewLogs& (0+255),c
  3876  00DCDA  0EC1               	movlw	193
  3877  00DCDC                     u6957:
  3878  00DCDC  2EE8               	decfsz	wreg,f,c
  3879  00DCDE  D7FE               	bra	u6957
  3880  00DCE0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3881  00DCE2  D7FC               	bra	u6957
  3882  00DCE4  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3883  00DCE6  D7FA               	bra	u6957
  3884  00DCE8  F000               	nop	
  3885                           
  3886                           ;standbyMode.c: 332: return 14;
  3887  00DCEA  0E00               	movlw	0
  3888  00DCEC  6E47               	movwf	?_viewLogs+1,c
  3889  00DCEE  0E0E               	movlw	14
  3890  00DCF0  6E46               	movwf	?_viewLogs,c
  3891                           
  3892                           ;standbyMode.c: 333: }
  3893  00DCF2  0012               	return	
  3894  00DCF4                     l243:
  3895                           
  3896                           ;standbyMode.c: 334: else {
  3897                           ;standbyMode.c: 335: if (logNumber == 1){
  3898  00DCF4  0450               	decf	viewLogs@logNumber,w,c
  3899  00DCF6  A4D8               	btfss	status,2,c
  3900  00DCF8  D053               	goto	l246
  3901                           
  3902                           ;standbyMode.c: 336: logView = 1;
  3903  00DCFA  0E00               	movlw	0
  3904  00DCFC  6E4F               	movwf	viewLogs@logView+1,c
  3905  00DCFE  0E01               	movlw	1
  3906  00DD00  6E4E               	movwf	viewLogs@logView,c
  3907                           
  3908                           ;standbyMode.c: 338: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3909  00DD02  0E01               	movlw	1
  3910  00DD04  EC2B  F069         	call	_lcdInst
  3911  00DD08  0EC3               	movlw	195
  3912  00DD0A  6E48               	movwf	??_viewLogs& (0+255),c
  3913  00DD0C  0ECD               	movlw	205
  3914  00DD0E                     u6967:
  3915  00DD0E  2EE8               	decfsz	wreg,f,c
  3916  00DD10  D7FE               	bra	u6967
  3917  00DD12  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3918  00DD14  D7FC               	bra	u6967
  3919  00DD16  F000               	nop	
  3920                           
  3921                           ;standbyMode.c: 339: printf("1 previous log");
  3922  00DD18  0EAA               	movlw	low STR_3
  3923  00DD1A  6E0D               	movwf	printf@f,c
  3924  00DD1C  0EFE               	movlw	high STR_3
  3925  00DD1E  6E0E               	movwf	printf@f+1,c
  3926  00DD20  ECAF  F06F         	call	_printf	;wreg free
  3927                           
  3928                           ;standbyMode.c: 340: lcdInst(0xC0);;
  3929  00DD24  0EC0               	movlw	192
  3930  00DD26  EC2B  F069         	call	_lcdInst
  3931                           
  3932                           ;standbyMode.c: 341: printf("available.");
  3933  00DD2A  0E88               	movlw	low STR_2
  3934  00DD2C  6E0D               	movwf	printf@f,c
  3935  00DD2E  0EFF               	movlw	high STR_2
  3936  00DD30  6E0E               	movwf	printf@f+1,c
  3937  00DD32  ECAF  F06F         	call	_printf	;wreg free
  3938                           
  3939                           ;standbyMode.c: 342: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3940  00DD36  0E66               	movlw	102
  3941  00DD38  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3942  00DD3A  0E76               	movlw	118
  3943  00DD3C  6E48               	movwf	??_viewLogs& (0+255),c
  3944  00DD3E  0EC1               	movlw	193
  3945  00DD40                     u6977:
  3946  00DD40  2EE8               	decfsz	wreg,f,c
  3947  00DD42  D7FE               	bra	u6977
  3948  00DD44  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3949  00DD46  D7FC               	bra	u6977
  3950  00DD48  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3951  00DD4A  D7FA               	bra	u6977
  3952  00DD4C  F000               	nop	
  3953                           
  3954                           ;standbyMode.c: 344: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3955  00DD4E  0E01               	movlw	1
  3956  00DD50  EC2B  F069         	call	_lcdInst
  3957  00DD54  0EC3               	movlw	195
  3958  00DD56  6E48               	movwf	??_viewLogs& (0+255),c
  3959  00DD58  0ECD               	movlw	205
  3960  00DD5A                     u6987:
  3961  00DD5A  2EE8               	decfsz	wreg,f,c
  3962  00DD5C  D7FE               	bra	u6987
  3963  00DD5E  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3964  00DD60  D7FC               	bra	u6987
  3965  00DD62  F000               	nop	
  3966                           
  3967                           ;standbyMode.c: 345: printf("Press any key to");
  3968  00DD64  0ECB               	movlw	low STR_5
  3969  00DD66  6E0D               	movwf	printf@f,c
  3970  00DD68  0EFD               	movlw	high STR_5
  3971  00DD6A  6E0E               	movwf	printf@f+1,c
  3972  00DD6C  ECAF  F06F         	call	_printf	;wreg free
  3973                           
  3974                           ;standbyMode.c: 346: lcdInst(0xC0);;
  3975  00DD70  0EC0               	movlw	192
  3976  00DD72  EC2B  F069         	call	_lcdInst
  3977                           
  3978                           ;standbyMode.c: 347: printf("move forward.");
  3979  00DD76  0E20               	movlw	low STR_6
  3980  00DD78  6E0D               	movwf	printf@f,c
  3981  00DD7A  0EFF               	movlw	high STR_6
  3982  00DD7C  6E0E               	movwf	printf@f+1,c
  3983  00DD7E  ECAF  F06F         	call	_printf	;wreg free
  3984                           
  3985                           ;standbyMode.c: 348: _delay((unsigned long)((500)*(40000000/4000.0)));
  3986  00DD82  0E1A               	movlw	26
  3987  00DD84  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3988  00DD86  0E5E               	movlw	94
  3989  00DD88  6E48               	movwf	??_viewLogs& (0+255),c
  3990  00DD8A  0E6E               	movlw	110
  3991  00DD8C                     u6997:
  3992  00DD8C  2EE8               	decfsz	wreg,f,c
  3993  00DD8E  D7FE               	bra	u6997
  3994  00DD90  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3995  00DD92  D7FC               	bra	u6997
  3996  00DD94  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3997  00DD96  D7FA               	bra	u6997
  3998  00DD98  D000               	nop2	
  3999  00DD9A                     
  4000                           ;standbyMode.c: 351: continue;
  4001  00DD9A  B281               	btfsc	3969,1,c	;volatile
  4002  00DD9C  D0D1               	goto	u4880
  4003  00DD9E  D7FD               	goto	l248
  4004  00DDA0                     l246:
  4005                           
  4006                           ;standbyMode.c: 354: else {
  4007                           ;standbyMode.c: 355: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4008  00DDA0  0E01               	movlw	1
  4009  00DDA2  EC2B  F069         	call	_lcdInst
  4010  00DDA6  0EC3               	movlw	195
  4011  00DDA8  6E48               	movwf	??_viewLogs& (0+255),c
  4012  00DDAA  0ECD               	movlw	205
  4013  00DDAC                     u7007:
  4014  00DDAC  2EE8               	decfsz	wreg,f,c
  4015  00DDAE  D7FE               	bra	u7007
  4016  00DDB0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4017  00DDB2  D7FC               	bra	u7007
  4018  00DDB4  F000               	nop	
  4019                           
  4020                           ;standbyMode.c: 356: printf("%i previous logs", logNumber);
  4021  00DDB6  0EDC               	movlw	low STR_7
  4022  00DDB8  6E0D               	movwf	printf@f,c
  4023  00DDBA  0EFD               	movlw	high STR_7
  4024  00DDBC  6E0E               	movwf	printf@f+1,c
  4025  00DDBE  C050  F00F         	movff	viewLogs@logNumber,?_printf+2
  4026  00DDC2  6A10               	clrf	?_printf+3,c
  4027  00DDC4  ECAF  F06F         	call	_printf	;wreg free
  4028                           
  4029                           ;standbyMode.c: 357: lcdInst(0xC0);;
  4030  00DDC8  0EC0               	movlw	192
  4031  00DDCA  EC2B  F069         	call	_lcdInst
  4032                           
  4033                           ;standbyMode.c: 358: printf("available.");
  4034  00DDCE  0E88               	movlw	low STR_2
  4035  00DDD0  6E0D               	movwf	printf@f,c
  4036  00DDD2  0EFF               	movlw	high STR_2
  4037  00DDD4  6E0E               	movwf	printf@f+1,c
  4038  00DDD6  ECAF  F06F         	call	_printf	;wreg free
  4039                           
  4040                           ;standbyMode.c: 359: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4041  00DDDA  0E66               	movlw	102
  4042  00DDDC  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4043  00DDDE  0E76               	movlw	118
  4044  00DDE0  6E48               	movwf	??_viewLogs& (0+255),c
  4045  00DDE2  0EC1               	movlw	193
  4046  00DDE4                     u7017:
  4047  00DDE4  2EE8               	decfsz	wreg,f,c
  4048  00DDE6  D7FE               	bra	u7017
  4049  00DDE8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4050  00DDEA  D7FC               	bra	u7017
  4051  00DDEC  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4052  00DDEE  D7FA               	bra	u7017
  4053  00DDF0  F000               	nop	
  4054                           
  4055                           ;standbyMode.c: 360: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4056  00DDF2  0E01               	movlw	1
  4057  00DDF4  EC2B  F069         	call	_lcdInst
  4058  00DDF8  0EC3               	movlw	195
  4059  00DDFA  6E48               	movwf	??_viewLogs& (0+255),c
  4060  00DDFC  0ECD               	movlw	205
  4061  00DDFE                     u7027:
  4062  00DDFE  2EE8               	decfsz	wreg,f,c
  4063  00DE00  D7FE               	bra	u7027
  4064  00DE02  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4065  00DE04  D7FC               	bra	u7027
  4066  00DE06  F000               	nop	
  4067                           
  4068                           ;standbyMode.c: 361: printf("Please input log");
  4069  00DE08  0EA9               	movlw	low STR_9
  4070  00DE0A  6E0D               	movwf	printf@f,c
  4071  00DE0C  0EFD               	movlw	high STR_9
  4072  00DE0E  6E0E               	movwf	printf@f+1,c
  4073  00DE10  ECAF  F06F         	call	_printf	;wreg free
  4074                           
  4075                           ;standbyMode.c: 362: lcdInst(0xC0);;
  4076  00DE14  0EC0               	movlw	192
  4077  00DE16  EC2B  F069         	call	_lcdInst
  4078                           
  4079                           ;standbyMode.c: 363: printf("number: ");
  4080  00DE1A  0EC8               	movlw	low STR_10
  4081  00DE1C  6E0D               	movwf	printf@f,c
  4082  00DE1E  0EFF               	movlw	high STR_10
  4083  00DE20  6E0E               	movwf	printf@f+1,c
  4084  00DE22  ECAF  F06F         	call	_printf	;wreg free
  4085  00DE26                     
  4086                           ;standbyMode.c: 366: while(PORTBbits.RB1 == 0){ continue; }
  4087  00DE26  A281               	btfss	3969,1,c	;volatile
  4088  00DE28  D7FE               	goto	l251
  4089                           
  4090                           ;standbyMode.c: 367: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  4091  00DE2A  3881               	swapf	3969,w,c	;volatile
  4092  00DE2C  0B0F               	andlw	15
  4093  00DE2E  0B0F               	andlw	15
  4094  00DE30  6E51               	movwf	viewLogs@keypress2,c
  4095  00DE32  B281               	btfsc	3969,1,c	;volatile
  4096  00DE34  D7FE               	goto	l256
  4097                           
  4098                           ;standbyMode.c: 370: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  4099  00DE36  5051               	movf	viewLogs@keypress2,w,c
  4100  00DE38  B4D8               	btfsc	status,2,c
  4101  00DE3A  D00B               	goto	u4850
  4102  00DE3C  0451               	decf	viewLogs@keypress2,w,c
  4103  00DE3E  B4D8               	btfsc	status,2,c
  4104  00DE40  D008               	goto	u4850
  4105  00DE42  0E02               	movlw	2
  4106  00DE44  1851               	xorwf	viewLogs@keypress2,w,c
  4107  00DE46  B4D8               	btfsc	status,2,c
  4108  00DE48  D004               	goto	u4850
  4109  00DE4A  0E04               	movlw	4
  4110  00DE4C  1851               	xorwf	viewLogs@keypress2,w,c
  4111  00DE4E  A4D8               	btfss	status,2,c
  4112  00DE50  D7EA               	goto	l251
  4113  00DE52                     u4850:
  4114                           
  4115                           ;standbyMode.c: 371: checkLog = verifyKeypress(logNumber, keypress2);
  4116  00DE52  C051  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  4117  00DE56  6A02               	clrf	verifyKeypress@keypress+1,c
  4118  00DE58  5050               	movf	viewLogs@logNumber,w,c
  4119  00DE5A  EC42  F06A         	call	_verifyKeypress
  4120  00DE5E  C001  F04A         	movff	?_verifyKeypress,viewLogs@checkLog
  4121  00DE62  C002  F04B         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  4122                           
  4123                           ;standbyMode.c: 372: if (checkLog == 1){
  4124  00DE66  044A               	decf	viewLogs@checkLog,w,c
  4125  00DE68  104B               	iorwf	viewLogs@checkLog+1,w,c
  4126  00DE6A  A4D8               	btfss	status,2,c
  4127  00DE6C  D7DC               	goto	l251
  4128                           
  4129                           ;standbyMode.c: 373: putch(keys[keypress2]);
  4130  00DE6E  5051               	movf	viewLogs@keypress2,w,c
  4131  00DE70  0D01               	mullw	1
  4132  00DE72  0E23               	movlw	low _keys
  4133  00DE74  24F3               	addwf	prodl,w,c
  4134  00DE76  6EF6               	movwf	tblptrl,c
  4135  00DE78  0EFD               	movlw	high _keys
  4136  00DE7A  20F4               	addwfc	prodh,w,c
  4137  00DE7C  6EF7               	movwf	tblptrh,c
  4138  00DE7E                     	if	0	;There are less than 3 active tblptr bytes
  4139  00DE7E                     	endif
  4140  00DE7E  0008               	tblrd		*
  4141  00DE80  50F5               	movf	tablat,w,c
  4142  00DE82  EC35  F069         	call	_putch
  4143                           
  4144                           ;standbyMode.c: 374: if (keypress2 == 4){
  4145  00DE86  0E04               	movlw	4
  4146  00DE88  1851               	xorwf	viewLogs@keypress2,w,c
  4147  00DE8A  A4D8               	btfss	status,2,c
  4148  00DE8C  D004               	goto	l262
  4149                           
  4150                           ;standbyMode.c: 375: logView = keypress2;
  4151  00DE8E  C051  F04E         	movff	viewLogs@keypress2,viewLogs@logView
  4152  00DE92  6A4F               	clrf	viewLogs@logView+1,c
  4153                           
  4154                           ;standbyMode.c: 376: }
  4155  00DE94  D006               	goto	l263
  4156  00DE96                     l262:
  4157                           
  4158                           ;standbyMode.c: 377: else{
  4159                           ;standbyMode.c: 378: logView = keypress2 + 1;
  4160  00DE96  0E01               	movlw	1
  4161  00DE98  2451               	addwf	viewLogs@keypress2,w,c
  4162  00DE9A  6E4E               	movwf	viewLogs@logView,c
  4163  00DE9C  6A4F               	clrf	viewLogs@logView+1,c
  4164  00DE9E  0E00               	movlw	0
  4165  00DEA0  224F               	addwfc	viewLogs@logView+1,f,c
  4166  00DEA2                     l263:
  4167                           
  4168                           ;standbyMode.c: 379: }
  4169                           ;standbyMode.c: 380: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4170  00DEA2  0E33               	movlw	51
  4171  00DEA4  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4172  00DEA6  0EBB               	movlw	187
  4173  00DEA8  6E48               	movwf	??_viewLogs& (0+255),c
  4174  00DEAA  0EE0               	movlw	224
  4175  00DEAC                     u7037:
  4176  00DEAC  2EE8               	decfsz	wreg,f,c
  4177  00DEAE  D7FE               	bra	u7037
  4178  00DEB0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4179  00DEB2  D7FC               	bra	u7037
  4180  00DEB4  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4181  00DEB6  D7FA               	bra	u7037
  4182                           
  4183                           ;standbyMode.c: 382: }
  4184                           ;standbyMode.c: 383: }
  4185                           ;standbyMode.c: 384: }
  4186                           ;standbyMode.c: 386: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4187                           
  4188                           ;standbyMode.c: 381: break;
  4189  00DEB8  0E01               	movlw	1
  4190  00DEBA  EC2B  F069         	call	_lcdInst
  4191  00DEBE  0EC3               	movlw	195
  4192  00DEC0  6E48               	movwf	??_viewLogs& (0+255),c
  4193  00DEC2  0ECD               	movlw	205
  4194  00DEC4                     u7047:
  4195  00DEC4  2EE8               	decfsz	wreg,f,c
  4196  00DEC6  D7FE               	bra	u7047
  4197  00DEC8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4198  00DECA  D7FC               	bra	u7047
  4199  00DECC  F000               	nop	
  4200                           
  4201                           ;standbyMode.c: 387: printf("Great!");
  4202  00DECE  0EF1               	movlw	low STR_11
  4203  00DED0  6E0D               	movwf	printf@f,c
  4204  00DED2  0EFF               	movlw	high STR_11
  4205  00DED4  6E0E               	movwf	printf@f+1,c
  4206  00DED6  ECAF  F06F         	call	_printf	;wreg free
  4207                           
  4208                           ;standbyMode.c: 388: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4209  00DEDA  0E33               	movlw	51
  4210  00DEDC  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4211  00DEDE  0EBB               	movlw	187
  4212  00DEE0  6E48               	movwf	??_viewLogs& (0+255),c
  4213  00DEE2  0EE0               	movlw	224
  4214  00DEE4                     u7057:
  4215  00DEE4  2EE8               	decfsz	wreg,f,c
  4216  00DEE6  D7FE               	bra	u7057
  4217  00DEE8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4218  00DEEA  D7FC               	bra	u7057
  4219  00DEEC  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4220  00DEEE  D7FA               	bra	u7057
  4221                           
  4222                           ;standbyMode.c: 389: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4223  00DEF0  0E01               	movlw	1
  4224  00DEF2  EC2B  F069         	call	_lcdInst
  4225  00DEF6  0EC3               	movlw	195
  4226  00DEF8  6E48               	movwf	??_viewLogs& (0+255),c
  4227  00DEFA  0ECD               	movlw	205
  4228  00DEFC                     u7067:
  4229  00DEFC  2EE8               	decfsz	wreg,f,c
  4230  00DEFE  D7FE               	bra	u7067
  4231  00DF00  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4232  00DF02  D7FC               	bra	u7067
  4233  00DF04  F000               	nop	
  4234                           
  4235                           ;standbyMode.c: 390: printf("Press any key to");
  4236  00DF06  0ECB               	movlw	low STR_5
  4237  00DF08  6E0D               	movwf	printf@f,c
  4238  00DF0A  0EFD               	movlw	high STR_5
  4239  00DF0C  6E0E               	movwf	printf@f+1,c
  4240  00DF0E  ECAF  F06F         	call	_printf	;wreg free
  4241                           
  4242                           ;standbyMode.c: 391: lcdInst(0xC0);;
  4243  00DF12  0EC0               	movlw	192
  4244  00DF14  EC2B  F069         	call	_lcdInst
  4245                           
  4246                           ;standbyMode.c: 392: printf("move forward.");
  4247  00DF18  0E20               	movlw	low STR_6
  4248  00DF1A  6E0D               	movwf	printf@f,c
  4249  00DF1C  0EFF               	movlw	high STR_6
  4250  00DF1E  6E0E               	movwf	printf@f+1,c
  4251  00DF20  ECAF  F06F         	call	_printf	;wreg free
  4252                           
  4253                           ;standbyMode.c: 393: _delay((unsigned long)((500)*(40000000/4000.0)));
  4254  00DF24  0E1A               	movlw	26
  4255  00DF26  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4256  00DF28  0E5E               	movlw	94
  4257  00DF2A  6E48               	movwf	??_viewLogs& (0+255),c
  4258  00DF2C  0E6E               	movlw	110
  4259  00DF2E                     u7077:
  4260  00DF2E  2EE8               	decfsz	wreg,f,c
  4261  00DF30  D7FE               	bra	u7077
  4262  00DF32  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4263  00DF34  D7FC               	bra	u7077
  4264  00DF36  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4265  00DF38  D7FA               	bra	u7077
  4266  00DF3A  D000               	nop2	
  4267  00DF3C                     
  4268                           ;standbyMode.c: 396: continue;
  4269  00DF3C  A281               	btfss	3969,1,c	;volatile
  4270  00DF3E  D7FE               	goto	l267
  4271  00DF40                     u4880:
  4272                           
  4273                           ;standbyMode.c: 397: }
  4274                           ;standbyMode.c: 398: }
  4275                           ;standbyMode.c: 399: returnVal = displayLogs(logView);
  4276  00DF40  C04E  F025         	movff	viewLogs@logView,displayLogs@logNumber
  4277  00DF44  C04F  F026         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  4278  00DF48  EC35  F071         	call	_displayLogs	;wreg free
  4279  00DF4C  C025  F04C         	movff	?_displayLogs,viewLogs@returnVal
  4280  00DF50  C026  F04D         	movff	?_displayLogs+1,viewLogs@returnVal+1
  4281                           
  4282                           ;standbyMode.c: 400: return returnVal;
  4283  00DF54  C04C  F046         	movff	viewLogs@returnVal,?_viewLogs
  4284  00DF58  C04D  F047         	movff	viewLogs@returnVal+1,?_viewLogs+1
  4285  00DF5C  0012               	return	
  4286  00DF5E                     __end_of_viewLogs:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function _verifyKeypress *****************
  4304 ;; Defined at:
  4305 ;;		line 305 in file "standbyMode.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  logNumber       1    wreg     unsigned char 
  4308 ;;  keypress        2    0[COMRAM] unsigned int 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  logNumber       1    4[COMRAM] unsigned char 
  4311 ;;  i               2    7[COMRAM] unsigned int 
  4312 ;;  returnVal       2    5[COMRAM] unsigned int 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  2    0[COMRAM] unsigned int 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        9 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		_viewLogs
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text5
  4336  00D484                     __ptext5:
  4337                           	opt stack 0
  4338  00D484                     _verifyKeypress:
  4339                           	opt stack 28
  4340                           
  4341                           ;incstack = 0
  4342                           ;verifyKeypress@logNumber stored from wreg
  4343  00D484  6E05               	movwf	verifyKeypress@logNumber,c
  4344                           
  4345                           ;standbyMode.c: 306: unsigned int i = 0;
  4346  00D486  0E00               	movlw	0
  4347  00D488  6E09               	movwf	verifyKeypress@i+1,c
  4348  00D48A  0E00               	movlw	0
  4349  00D48C  6E08               	movwf	verifyKeypress@i,c
  4350                           
  4351                           ;standbyMode.c: 307: unsigned int returnVal = 0;
  4352  00D48E  0E00               	movlw	0
  4353  00D490  6E07               	movwf	verifyKeypress@returnVal+1,c
  4354  00D492  0E00               	movlw	0
  4355  00D494  6E06               	movwf	verifyKeypress@returnVal,c
  4356                           
  4357                           ;standbyMode.c: 309: for (i=0; i<logNumber; i++){
  4358  00D496  0E00               	movlw	0
  4359  00D498  6E09               	movwf	verifyKeypress@i+1,c
  4360  00D49A  0E00               	movlw	0
  4361  00D49C  6E08               	movwf	verifyKeypress@i,c
  4362  00D49E  D00D               	goto	l236
  4363  00D4A0                     
  4364                           ;standbyMode.c: 310: if (keypress == i){
  4365  00D4A0  5008               	movf	verifyKeypress@i,w,c
  4366  00D4A2  1801               	xorwf	verifyKeypress@keypress,w,c
  4367  00D4A4  E108               	bnz	l3726
  4368  00D4A6  5009               	movf	verifyKeypress@i+1,w,c
  4369  00D4A8  1802               	xorwf	verifyKeypress@keypress+1,w,c
  4370  00D4AA  A4D8               	btfss	status,2,c
  4371  00D4AC  D004               	goto	l238
  4372                           
  4373                           ;standbyMode.c: 311: returnVal = 1;
  4374  00D4AE  0E00               	movlw	0
  4375  00D4B0  6E07               	movwf	verifyKeypress@returnVal+1,c
  4376  00D4B2  0E01               	movlw	1
  4377  00D4B4  6E06               	movwf	verifyKeypress@returnVal,c
  4378  00D4B6                     l238:
  4379  00D4B6                     l3726:
  4380  00D4B6  4A08               	infsnz	verifyKeypress@i,f,c
  4381  00D4B8  2A09               	incf	verifyKeypress@i+1,f,c
  4382  00D4BA                     l236:
  4383  00D4BA  5005               	movf	verifyKeypress@logNumber,w,c
  4384  00D4BC  6E03               	movwf	??_verifyKeypress& (0+255),c
  4385  00D4BE  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  4386  00D4C0  5003               	movf	??_verifyKeypress,w,c
  4387  00D4C2  5C08               	subwf	verifyKeypress@i,w,c
  4388  00D4C4  5004               	movf	??_verifyKeypress+1,w,c
  4389  00D4C6  5809               	subwfb	verifyKeypress@i+1,w,c
  4390  00D4C8  A0D8               	btfss	status,0,c
  4391  00D4CA  D7EA               	goto	l237
  4392                           
  4393                           ;standbyMode.c: 312: }
  4394                           ;standbyMode.c: 313: }
  4395                           ;standbyMode.c: 314: return returnVal;
  4396  00D4CC  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  4397  00D4D0  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  4398  00D4D4  0012               	return		;funcret
  4399  00D4D6                     __end_of_verifyKeypress:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           postinc0	equ	0xFEE
  4408                           wreg	equ	0xFE8
  4409                           indf2	equ	0xFDF
  4410                           postinc2	equ	0xFDE
  4411                           postdec2	equ	0xFDD
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _displayLogs *****************
  4417 ;; Defined at:
  4418 ;;		line 406 in file "standbyMode.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  logNumber       2   36[COMRAM] unsigned int 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;  n               2   67[COMRAM] unsigned int 
  4423 ;;  markedDrawer    2   65[COMRAM] unsigned int 
  4424 ;;  markedDrawer    2   63[COMRAM] unsigned int 
  4425 ;;  markedDrawer    2   61[COMRAM] unsigned int 
  4426 ;;  markedDrawer    2   59[COMRAM] unsigned int 
  4427 ;;  operationTim    2   57[COMRAM] unsigned int 
  4428 ;;  seconds         2   54[COMRAM] unsigned int 
  4429 ;;  minutes         2   52[COMRAM] unsigned int 
  4430 ;;  longPieces      2   50[COMRAM] unsigned int 
  4431 ;;  flatPieces      2   48[COMRAM] unsigned int 
  4432 ;;  roundPieces     2   46[COMRAM] unsigned int 
  4433 ;;  day             2   44[COMRAM] unsigned int 
  4434 ;;  month           2   42[COMRAM] unsigned int 
  4435 ;;  year            2   40[COMRAM] unsigned int 
  4436 ;;  keypress3       1   56[COMRAM] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  2   36[COMRAM] unsigned int 
  4439 ;; Registers used:
  4440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;Total ram usage:       33 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    3
  4453 ;; This function calls:
  4454 ;;		___lwdiv
  4455 ;;		___lwmod
  4456 ;;		___wmul
  4457 ;;		_lcdInst
  4458 ;;		_printf
  4459 ;;		_readEEPROM
  4460 ;; This function is called by:
  4461 ;;		_viewLogs
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text6
  4466  00E26A                     __ptext6:
  4467                           	opt stack 0
  4468  00E26A                     _displayLogs:
  4469                           	opt stack 25
  4470                           
  4471                           ;standbyMode.c: 407: unsigned int n = (logNumber-1)*51;
  4472                           
  4473                           ;incstack = 0
  4474  00E26A  0EFF               	movlw	255
  4475  00E26C  2425               	addwf	displayLogs@logNumber,w,c
  4476  00E26E  6E01               	movwf	___wmul@multiplier,c
  4477  00E270  0EFF               	movlw	255
  4478  00E272  2026               	addwfc	displayLogs@logNumber+1,w,c
  4479  00E274  6E02               	movwf	___wmul@multiplier+1,c
  4480  00E276  0E00               	movlw	0
  4481  00E278  6E04               	movwf	___wmul@multiplicand+1,c
  4482  00E27A  0E33               	movlw	51
  4483  00E27C  6E03               	movwf	___wmul@multiplicand,c
  4484  00E27E  EC7B  F069         	call	___wmul	;wreg free
  4485  00E282  C001  F044         	movff	?___wmul,displayLogs@n
  4486  00E286  C002  F045         	movff	?___wmul+1,displayLogs@n+1
  4487                           
  4488                           ;standbyMode.c: 408: unsigned int year = readEEPROM(n);
  4489  00E28A  5044               	movf	displayLogs@n,w,c
  4490  00E28C  EC3F  F069         	call	_readEEPROM
  4491  00E290  6E27               	movwf	??_displayLogs& (0+255),c
  4492  00E292  5027               	movf	??_displayLogs,w,c
  4493  00E294  6E29               	movwf	displayLogs@year,c
  4494  00E296  6A2A               	clrf	displayLogs@year+1,c
  4495                           
  4496                           ;standbyMode.c: 409: unsigned int month = readEEPROM(1+n);
  4497  00E298  2844               	incf	displayLogs@n,w,c
  4498  00E29A  EC3F  F069         	call	_readEEPROM
  4499  00E29E  6E27               	movwf	??_displayLogs& (0+255),c
  4500  00E2A0  5027               	movf	??_displayLogs,w,c
  4501  00E2A2  6E2B               	movwf	displayLogs@month,c
  4502  00E2A4  6A2C               	clrf	displayLogs@month+1,c
  4503                           
  4504                           ;standbyMode.c: 410: unsigned int day = readEEPROM(2+n);
  4505  00E2A6  5044               	movf	displayLogs@n,w,c
  4506  00E2A8  0F02               	addlw	2
  4507  00E2AA  EC3F  F069         	call	_readEEPROM
  4508  00E2AE  6E27               	movwf	??_displayLogs& (0+255),c
  4509  00E2B0  5027               	movf	??_displayLogs,w,c
  4510  00E2B2  6E2D               	movwf	displayLogs@day,c
  4511  00E2B4  6A2E               	clrf	displayLogs@day+1,c
  4512                           
  4513                           ;standbyMode.c: 411: unsigned int operationTime = readEEPROM(3+n);
  4514  00E2B6  5044               	movf	displayLogs@n,w,c
  4515  00E2B8  0F03               	addlw	3
  4516  00E2BA  EC3F  F069         	call	_readEEPROM
  4517  00E2BE  6E27               	movwf	??_displayLogs& (0+255),c
  4518  00E2C0  5027               	movf	??_displayLogs,w,c
  4519  00E2C2  6E3A               	movwf	displayLogs@operationTime,c
  4520  00E2C4  6A3B               	clrf	displayLogs@operationTime+1,c
  4521                           
  4522                           ;standbyMode.c: 412: unsigned int roundPieces = readEEPROM(4+n);
  4523  00E2C6  5044               	movf	displayLogs@n,w,c
  4524  00E2C8  0F04               	addlw	4
  4525  00E2CA  EC3F  F069         	call	_readEEPROM
  4526  00E2CE  6E27               	movwf	??_displayLogs& (0+255),c
  4527  00E2D0  5027               	movf	??_displayLogs,w,c
  4528  00E2D2  6E2F               	movwf	displayLogs@roundPieces,c
  4529  00E2D4  6A30               	clrf	displayLogs@roundPieces+1,c
  4530                           
  4531                           ;standbyMode.c: 413: unsigned int flatPieces = readEEPROM(5+n);
  4532  00E2D6  5044               	movf	displayLogs@n,w,c
  4533  00E2D8  0F05               	addlw	5
  4534  00E2DA  EC3F  F069         	call	_readEEPROM
  4535  00E2DE  6E27               	movwf	??_displayLogs& (0+255),c
  4536  00E2E0  5027               	movf	??_displayLogs,w,c
  4537  00E2E2  6E31               	movwf	displayLogs@flatPieces,c
  4538  00E2E4  6A32               	clrf	displayLogs@flatPieces+1,c
  4539                           
  4540                           ;standbyMode.c: 414: unsigned int longPieces = readEEPROM(6+n);
  4541  00E2E6  5044               	movf	displayLogs@n,w,c
  4542  00E2E8  0F06               	addlw	6
  4543  00E2EA  EC3F  F069         	call	_readEEPROM
  4544  00E2EE  6E27               	movwf	??_displayLogs& (0+255),c
  4545  00E2F0  5027               	movf	??_displayLogs,w,c
  4546  00E2F2  6E33               	movwf	displayLogs@longPieces,c
  4547  00E2F4  6A34               	clrf	displayLogs@longPieces+1,c
  4548                           
  4549                           ;standbyMode.c: 415: unsigned int markedDrawer1 = readEEPROM(7+n);
  4550  00E2F6  5044               	movf	displayLogs@n,w,c
  4551  00E2F8  0F07               	addlw	7
  4552  00E2FA  EC3F  F069         	call	_readEEPROM
  4553  00E2FE  6E27               	movwf	??_displayLogs& (0+255),c
  4554  00E300  5027               	movf	??_displayLogs,w,c
  4555  00E302  6E3C               	movwf	displayLogs@markedDrawer1,c
  4556  00E304  6A3D               	clrf	displayLogs@markedDrawer1+1,c
  4557                           
  4558                           ;standbyMode.c: 416: unsigned int markedDrawer2 = readEEPROM(8+n);
  4559  00E306  5044               	movf	displayLogs@n,w,c
  4560  00E308  0F08               	addlw	8
  4561  00E30A  EC3F  F069         	call	_readEEPROM
  4562  00E30E  6E27               	movwf	??_displayLogs& (0+255),c
  4563  00E310  5027               	movf	??_displayLogs,w,c
  4564  00E312  6E3E               	movwf	displayLogs@markedDrawer2,c
  4565  00E314  6A3F               	clrf	displayLogs@markedDrawer2+1,c
  4566                           
  4567                           ;standbyMode.c: 417: unsigned int markedDrawer3 = readEEPROM(9+n);
  4568  00E316  5044               	movf	displayLogs@n,w,c
  4569  00E318  0F09               	addlw	9
  4570  00E31A  EC3F  F069         	call	_readEEPROM
  4571  00E31E  6E27               	movwf	??_displayLogs& (0+255),c
  4572  00E320  5027               	movf	??_displayLogs,w,c
  4573  00E322  6E40               	movwf	displayLogs@markedDrawer3,c
  4574  00E324  6A41               	clrf	displayLogs@markedDrawer3+1,c
  4575                           
  4576                           ;standbyMode.c: 418: unsigned int markedDrawer4 = readEEPROM(10+n);
  4577  00E326  5044               	movf	displayLogs@n,w,c
  4578  00E328  0F0A               	addlw	10
  4579  00E32A  EC3F  F069         	call	_readEEPROM
  4580  00E32E  6E27               	movwf	??_displayLogs& (0+255),c
  4581  00E330  5027               	movf	??_displayLogs,w,c
  4582  00E332  6E42               	movwf	displayLogs@markedDrawer4,c
  4583  00E334  6A43               	clrf	displayLogs@markedDrawer4+1,c
  4584                           
  4585                           ;standbyMode.c: 420: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4586  00E336  0E01               	movlw	1
  4587  00E338  EC2B  F069         	call	_lcdInst
  4588  00E33C  0EC3               	movlw	195
  4589  00E33E  6E27               	movwf	??_displayLogs& (0+255),c
  4590  00E340  0ECD               	movlw	205
  4591  00E342                     u7087:
  4592  00E342  2EE8               	decfsz	wreg,f,c
  4593  00E344  D7FE               	bra	u7087
  4594  00E346  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4595  00E348  D7FC               	bra	u7087
  4596  00E34A  F000               	nop	
  4597                           
  4598                           ;standbyMode.c: 421: printf("Date:");
  4599  00E34C  0EF8               	movlw	low STR_14
  4600  00E34E  6E0D               	movwf	printf@f,c
  4601  00E350  0EFF               	movlw	high STR_14
  4602  00E352  6E0E               	movwf	printf@f+1,c
  4603  00E354  ECAF  F06F         	call	_printf	;wreg free
  4604                           
  4605                           ;standbyMode.c: 422: lcdInst(0xC0);;
  4606  00E358  0EC0               	movlw	192
  4607  00E35A  EC2B  F069         	call	_lcdInst
  4608                           
  4609                           ;standbyMode.c: 423: printf("%02i/%02i/%02i", year, month, day);
  4610  00E35E  0EC8               	movlw	low STR_15
  4611  00E360  6E0D               	movwf	printf@f,c
  4612  00E362  0EFE               	movlw	high STR_15
  4613  00E364  6E0E               	movwf	printf@f+1,c
  4614  00E366  C029  F00F         	movff	displayLogs@year,?_printf+2
  4615  00E36A  C02A  F010         	movff	displayLogs@year+1,?_printf+3
  4616  00E36E  C02B  F011         	movff	displayLogs@month,?_printf+4
  4617  00E372  C02C  F012         	movff	displayLogs@month+1,?_printf+5
  4618  00E376  C02D  F013         	movff	displayLogs@day,?_printf+6
  4619  00E37A  C02E  F014         	movff	displayLogs@day+1,?_printf+7
  4620  00E37E  ECAF  F06F         	call	_printf	;wreg free
  4621                           
  4622                           ;standbyMode.c: 424: _delay((unsigned long)((500)*(40000000/4000.0)));
  4623  00E382  0E1A               	movlw	26
  4624  00E384  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4625  00E386  0E5E               	movlw	94
  4626  00E388  6E27               	movwf	??_displayLogs& (0+255),c
  4627  00E38A  0E6E               	movlw	110
  4628  00E38C                     u7097:
  4629  00E38C  2EE8               	decfsz	wreg,f,c
  4630  00E38E  D7FE               	bra	u7097
  4631  00E390  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4632  00E392  D7FC               	bra	u7097
  4633  00E394  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4634  00E396  D7FA               	bra	u7097
  4635  00E398  D000               	nop2	
  4636  00E39A                     
  4637                           ;standbyMode.c: 426: continue;
  4638  00E39A  A281               	btfss	3969,1,c	;volatile
  4639  00E39C  D7FE               	goto	l272
  4640                           
  4641                           ;standbyMode.c: 427: }
  4642                           ;standbyMode.c: 429: unsigned int minutes = operationTime/60;
  4643  00E39E  C03A  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  4644  00E3A2  C03B  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  4645  00E3A6  0E00               	movlw	0
  4646  00E3A8  6E04               	movwf	___lwdiv@divisor+1,c
  4647  00E3AA  0E3C               	movlw	60
  4648  00E3AC  6E03               	movwf	___lwdiv@divisor,c
  4649  00E3AE  EC19  F06A         	call	___lwdiv	;wreg free
  4650  00E3B2  C001  F035         	movff	?___lwdiv,displayLogs@minutes
  4651  00E3B6  C002  F036         	movff	?___lwdiv+1,displayLogs@minutes+1
  4652                           
  4653                           ;standbyMode.c: 430: unsigned int seconds = operationTime%60;
  4654  00E3BA  C03A  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  4655  00E3BE  C03B  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  4656  00E3C2  0E00               	movlw	0
  4657  00E3C4  6E0B               	movwf	___lwmod@divisor+1,c
  4658  00E3C6  0E3C               	movlw	60
  4659  00E3C8  6E0A               	movwf	___lwmod@divisor,c
  4660  00E3CA  ECD2  F069         	call	___lwmod	;wreg free
  4661  00E3CE  C008  F037         	movff	?___lwmod,displayLogs@seconds
  4662  00E3D2  C009  F038         	movff	?___lwmod+1,displayLogs@seconds+1
  4663                           
  4664                           ;standbyMode.c: 431: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4665  00E3D6  0E01               	movlw	1
  4666  00E3D8  EC2B  F069         	call	_lcdInst
  4667  00E3DC  0EC3               	movlw	195
  4668  00E3DE  6E27               	movwf	??_displayLogs& (0+255),c
  4669  00E3E0  0ECD               	movlw	205
  4670  00E3E2                     u7107:
  4671  00E3E2  2EE8               	decfsz	wreg,f,c
  4672  00E3E4  D7FE               	bra	u7107
  4673  00E3E6  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4674  00E3E8  D7FC               	bra	u7107
  4675  00E3EA  F000               	nop	
  4676                           
  4677                           ;standbyMode.c: 432: printf("Operation time:");
  4678  00E3EC  0E1D               	movlw	low STR_16
  4679  00E3EE  6E0D               	movwf	printf@f,c
  4680  00E3F0  0EFE               	movlw	high STR_16
  4681  00E3F2  6E0E               	movwf	printf@f+1,c
  4682  00E3F4  ECAF  F06F         	call	_printf	;wreg free
  4683                           
  4684                           ;standbyMode.c: 433: lcdInst(0xC0);;
  4685  00E3F8  0EC0               	movlw	192
  4686  00E3FA  EC2B  F069         	call	_lcdInst
  4687                           
  4688                           ;standbyMode.c: 434: printf("%i:%02i", minutes, seconds);
  4689  00E3FE  0ED9               	movlw	low STR_17
  4690  00E400  6E0D               	movwf	printf@f,c
  4691  00E402  0EFF               	movlw	high STR_17
  4692  00E404  6E0E               	movwf	printf@f+1,c
  4693  00E406  C035  F00F         	movff	displayLogs@minutes,?_printf+2
  4694  00E40A  C036  F010         	movff	displayLogs@minutes+1,?_printf+3
  4695  00E40E  C037  F011         	movff	displayLogs@seconds,?_printf+4
  4696  00E412  C038  F012         	movff	displayLogs@seconds+1,?_printf+5
  4697  00E416  ECAF  F06F         	call	_printf	;wreg free
  4698                           
  4699                           ;standbyMode.c: 435: _delay((unsigned long)((500)*(40000000/4000.0)));
  4700  00E41A  0E1A               	movlw	26
  4701  00E41C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4702  00E41E  0E5E               	movlw	94
  4703  00E420  6E27               	movwf	??_displayLogs& (0+255),c
  4704  00E422  0E6E               	movlw	110
  4705  00E424                     u7117:
  4706  00E424  2EE8               	decfsz	wreg,f,c
  4707  00E426  D7FE               	bra	u7117
  4708  00E428  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4709  00E42A  D7FC               	bra	u7117
  4710  00E42C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4711  00E42E  D7FA               	bra	u7117
  4712  00E430  D000               	nop2	
  4713  00E432                     
  4714                           ;standbyMode.c: 438: continue;
  4715  00E432  A281               	btfss	3969,1,c	;volatile
  4716  00E434  D7FE               	goto	l275
  4717                           
  4718                           ;standbyMode.c: 439: }
  4719                           ;standbyMode.c: 441: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4720  00E436  0E01               	movlw	1
  4721  00E438  EC2B  F069         	call	_lcdInst
  4722  00E43C  0EC3               	movlw	195
  4723  00E43E  6E27               	movwf	??_displayLogs& (0+255),c
  4724  00E440  0ECD               	movlw	205
  4725  00E442                     u7127:
  4726  00E442  2EE8               	decfsz	wreg,f,c
  4727  00E444  D7FE               	bra	u7127
  4728  00E446  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4729  00E448  D7FC               	bra	u7127
  4730  00E44A  F000               	nop	
  4731                           
  4732                           ;standbyMode.c: 442: printf("Marked drawers:");
  4733  00E44C  0E2D               	movlw	low STR_18
  4734  00E44E  6E0D               	movwf	printf@f,c
  4735  00E450  0EFE               	movlw	high STR_18
  4736  00E452  6E0E               	movwf	printf@f+1,c
  4737  00E454  ECAF  F06F         	call	_printf	;wreg free
  4738                           
  4739                           ;standbyMode.c: 443: lcdInst(0xC0);;
  4740  00E458  0EC0               	movlw	192
  4741  00E45A  EC2B  F069         	call	_lcdInst
  4742                           
  4743                           ;standbyMode.c: 445: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  4744  00E45E  5042               	movf	displayLogs@markedDrawer4,w,c
  4745  00E460  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4746  00E462  A4D8               	btfss	status,2,c
  4747  00E464  D01E               	goto	l277
  4748  00E466  5040               	movf	displayLogs@markedDrawer3,w,c
  4749  00E468  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  4750  00E46A  A4D8               	btfss	status,2,c
  4751  00E46C  D01A               	goto	l277
  4752  00E46E  503E               	movf	displayLogs@markedDrawer2,w,c
  4753  00E470  103F               	iorwf	displayLogs@markedDrawer2+1,w,c
  4754  00E472  A4D8               	btfss	status,2,c
  4755  00E474  D016               	goto	l277
  4756                           
  4757                           ;standbyMode.c: 446: printf("%i", markedDrawer1);
  4758  00E476  0EC5               	movlw	low (STR_22+12)
  4759  00E478  6E0D               	movwf	printf@f,c
  4760  00E47A  0EFE               	movlw	high (STR_22+12)
  4761  00E47C  6E0E               	movwf	printf@f+1,c
  4762  00E47E  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4763  00E482  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4764  00E486  ECAF  F06F         	call	_printf	;wreg free
  4765                           
  4766                           ;standbyMode.c: 447: _delay((unsigned long)((500)*(40000000/4000.0)));
  4767  00E48A  0E1A               	movlw	26
  4768  00E48C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4769  00E48E  0E5E               	movlw	94
  4770  00E490  6E27               	movwf	??_displayLogs& (0+255),c
  4771  00E492  0E6E               	movlw	110
  4772  00E494                     u7137:
  4773  00E494  2EE8               	decfsz	wreg,f,c
  4774  00E496  D7FE               	bra	u7137
  4775  00E498  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4776  00E49A  D7FC               	bra	u7137
  4777  00E49C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4778  00E49E  D7FA               	bra	u7137
  4779  00E4A0  D065               	goto	L17
  4780  00E4A2                     l277:
  4781                           
  4782                           ;standbyMode.c: 450: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  4783  00E4A2  5042               	movf	displayLogs@markedDrawer4,w,c
  4784  00E4A4  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4785  00E4A6  A4D8               	btfss	status,2,c
  4786  00E4A8  D01E               	goto	l279
  4787  00E4AA  5040               	movf	displayLogs@markedDrawer3,w,c
  4788  00E4AC  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  4789  00E4AE  A4D8               	btfss	status,2,c
  4790  00E4B0  D01A               	goto	l279
  4791                           
  4792                           ;standbyMode.c: 451: printf("%i, %i", markedDrawer1, markedDrawer2);
  4793  00E4B2  0EC1               	movlw	low (STR_22+8)
  4794  00E4B4  6E0D               	movwf	printf@f,c
  4795  00E4B6  0EFE               	movlw	high (STR_22+8)
  4796  00E4B8  6E0E               	movwf	printf@f+1,c
  4797  00E4BA  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4798  00E4BE  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4799  00E4C2  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4800  00E4C6  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4801  00E4CA  ECAF  F06F         	call	_printf	;wreg free
  4802                           
  4803                           ;standbyMode.c: 452: _delay((unsigned long)((500)*(40000000/4000.0)));
  4804  00E4CE  0E1A               	movlw	26
  4805  00E4D0  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4806  00E4D2  0E5E               	movlw	94
  4807  00E4D4  6E27               	movwf	??_displayLogs& (0+255),c
  4808  00E4D6  0E6E               	movlw	110
  4809  00E4D8                     u7147:
  4810  00E4D8  2EE8               	decfsz	wreg,f,c
  4811  00E4DA  D7FE               	bra	u7147
  4812  00E4DC  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4813  00E4DE  D7FC               	bra	u7147
  4814  00E4E0  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4815  00E4E2  D7FA               	bra	u7147
  4816  00E4E4  D043               	goto	L17
  4817  00E4E6                     l279:
  4818                           
  4819                           ;standbyMode.c: 455: else if (markedDrawer4 == 0){
  4820  00E4E6  5042               	movf	displayLogs@markedDrawer4,w,c
  4821  00E4E8  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4822  00E4EA  A4D8               	btfss	status,2,c
  4823  00E4EC  D01E               	goto	l281
  4824                           
  4825                           ;standbyMode.c: 456: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  4826  00E4EE  0EBD               	movlw	low (STR_22+4)
  4827  00E4F0  6E0D               	movwf	printf@f,c
  4828  00E4F2  0EFE               	movlw	high (STR_22+4)
  4829  00E4F4  6E0E               	movwf	printf@f+1,c
  4830  00E4F6  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4831  00E4FA  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4832  00E4FE  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4833  00E502  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4834  00E506  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4835  00E50A  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4836  00E50E  ECAF  F06F         	call	_printf	;wreg free
  4837                           
  4838                           ;standbyMode.c: 457: _delay((unsigned long)((500)*(40000000/4000.0)));
  4839  00E512  0E1A               	movlw	26
  4840  00E514  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4841  00E516  0E5E               	movlw	94
  4842  00E518  6E27               	movwf	??_displayLogs& (0+255),c
  4843  00E51A  0E6E               	movlw	110
  4844  00E51C                     u7157:
  4845  00E51C  2EE8               	decfsz	wreg,f,c
  4846  00E51E  D7FE               	bra	u7157
  4847  00E520  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4848  00E522  D7FC               	bra	u7157
  4849  00E524  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4850  00E526  D7FA               	bra	u7157
  4851  00E528  D021               	goto	L17
  4852  00E52A                     l281:
  4853                           
  4854                           ;standbyMode.c: 460: else {
  4855                           ;standbyMode.c: 461: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  4856  00E52A  0EB9               	movlw	low STR_22
  4857  00E52C  6E0D               	movwf	printf@f,c
  4858  00E52E  0EFE               	movlw	high STR_22
  4859  00E530  6E0E               	movwf	printf@f+1,c
  4860  00E532  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4861  00E536  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4862  00E53A  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4863  00E53E  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4864  00E542  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4865  00E546  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4866  00E54A  C042  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  4867  00E54E  C043  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  4868  00E552  ECAF  F06F         	call	_printf	;wreg free
  4869                           
  4870                           ;standbyMode.c: 462: _delay((unsigned long)((500)*(40000000/4000.0)));
  4871  00E556  0E1A               	movlw	26
  4872  00E558  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4873  00E55A  0E5E               	movlw	94
  4874  00E55C  6E27               	movwf	??_displayLogs& (0+255),c
  4875  00E55E  0E6E               	movlw	110
  4876  00E560                     u7167:
  4877  00E560  2EE8               	decfsz	wreg,f,c
  4878  00E562  D7FE               	bra	u7167
  4879  00E564  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4880  00E566  D7FC               	bra	u7167
  4881  00E568  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4882  00E56A  D7FA               	bra	u7167
  4883  00E56C                     L17:
  4884  00E56C  D000               	nop2	
  4885  00E56E                     
  4886                           ;standbyMode.c: 466: continue;
  4887                           
  4888                           ;standbyMode.c: 463: }
  4889                           ;standbyMode.c: 465: while(PORTBbits.RB1 == 0){
  4890  00E56E  A281               	btfss	3969,1,c	;volatile
  4891  00E570  D7FE               	goto	l282
  4892                           
  4893                           ;standbyMode.c: 467: }
  4894                           ;standbyMode.c: 469: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4895  00E572  0E01               	movlw	1
  4896  00E574  EC2B  F069         	call	_lcdInst
  4897  00E578  0EC3               	movlw	195
  4898  00E57A  6E27               	movwf	??_displayLogs& (0+255),c
  4899  00E57C  0ECD               	movlw	205
  4900  00E57E                     u7177:
  4901  00E57E  2EE8               	decfsz	wreg,f,c
  4902  00E580  D7FE               	bra	u7177
  4903  00E582  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4904  00E584  D7FC               	bra	u7177
  4905  00E586  F000               	nop	
  4906                           
  4907                           ;standbyMode.c: 470: printf("Remaining pieces:");
  4908  00E588  0E64               	movlw	low STR_23
  4909  00E58A  6E0D               	movwf	printf@f,c
  4910  00E58C  0EFD               	movlw	high STR_23
  4911  00E58E  6E0E               	movwf	printf@f+1,c
  4912  00E590  ECAF  F06F         	call	_printf	;wreg free
  4913                           
  4914                           ;standbyMode.c: 471: lcdInst(0xC0);;
  4915  00E594  0EC0               	movlw	192
  4916  00E596  EC2B  F069         	call	_lcdInst
  4917                           
  4918                           ;standbyMode.c: 472: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  4919  00E59A  0EBA               	movlw	low STR_24
  4920  00E59C  6E0D               	movwf	printf@f,c
  4921  00E59E  0EFD               	movlw	high STR_24
  4922  00E5A0  6E0E               	movwf	printf@f+1,c
  4923  00E5A2  C02F  F00F         	movff	displayLogs@roundPieces,?_printf+2
  4924  00E5A6  C030  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  4925  00E5AA  C031  F011         	movff	displayLogs@flatPieces,?_printf+4
  4926  00E5AE  C032  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  4927  00E5B2  C033  F013         	movff	displayLogs@longPieces,?_printf+6
  4928  00E5B6  C034  F014         	movff	displayLogs@longPieces+1,?_printf+7
  4929  00E5BA  ECAF  F06F         	call	_printf	;wreg free
  4930                           
  4931                           ;standbyMode.c: 473: _delay((unsigned long)((500)*(40000000/4000.0)));
  4932  00E5BE  0E1A               	movlw	26
  4933  00E5C0  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4934  00E5C2  0E5E               	movlw	94
  4935  00E5C4  6E27               	movwf	??_displayLogs& (0+255),c
  4936  00E5C6  0E6E               	movlw	110
  4937  00E5C8                     u7187:
  4938  00E5C8  2EE8               	decfsz	wreg,f,c
  4939  00E5CA  D7FE               	bra	u7187
  4940  00E5CC  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4941  00E5CE  D7FC               	bra	u7187
  4942  00E5D0  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4943  00E5D2  D7FA               	bra	u7187
  4944  00E5D4  D000               	nop2	
  4945  00E5D6                     
  4946                           ;standbyMode.c: 476: continue;
  4947  00E5D6  A281               	btfss	3969,1,c	;volatile
  4948  00E5D8  D7FE               	goto	l287
  4949                           
  4950                           ;standbyMode.c: 477: }
  4951                           ;standbyMode.c: 479: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4952  00E5DA  0E01               	movlw	1
  4953  00E5DC  EC2B  F069         	call	_lcdInst
  4954  00E5E0  0EC3               	movlw	195
  4955  00E5E2  6E27               	movwf	??_displayLogs& (0+255),c
  4956  00E5E4  0ECD               	movlw	205
  4957  00E5E6                     u7197:
  4958  00E5E6  2EE8               	decfsz	wreg,f,c
  4959  00E5E8  D7FE               	bra	u7197
  4960  00E5EA  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4961  00E5EC  D7FC               	bra	u7197
  4962  00E5EE  F000               	nop	
  4963                           
  4964                           ;standbyMode.c: 480: printf("Input Summary:");
  4965  00E5F0  0E9B               	movlw	low STR_25
  4966  00E5F2  6E0D               	movwf	printf@f,c
  4967  00E5F4  0EFE               	movlw	high STR_25
  4968  00E5F6  6E0E               	movwf	printf@f+1,c
  4969  00E5F8  ECAF  F06F         	call	_printf	;wreg free
  4970                           
  4971                           ;standbyMode.c: 481: _delay((unsigned long)((500)*(40000000/4000.0)));
  4972  00E5FC  0E1A               	movlw	26
  4973  00E5FE  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4974  00E600  0E5E               	movlw	94
  4975  00E602  6E27               	movwf	??_displayLogs& (0+255),c
  4976  00E604  0E6E               	movlw	110
  4977  00E606                     u7207:
  4978  00E606  2EE8               	decfsz	wreg,f,c
  4979  00E608  D7FE               	bra	u7207
  4980  00E60A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4981  00E60C  D7FC               	bra	u7207
  4982  00E60E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4983  00E610  D7FA               	bra	u7207
  4984  00E612  D000               	nop2	
  4985  00E614                     
  4986                           ;standbyMode.c: 484: continue;
  4987  00E614  A281               	btfss	3969,1,c	;volatile
  4988  00E616  D7FE               	goto	l290
  4989                           
  4990                           ;standbyMode.c: 485: }
  4991                           ;standbyMode.c: 487: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4992  00E618  0E01               	movlw	1
  4993  00E61A  EC2B  F069         	call	_lcdInst
  4994  00E61E  0EC3               	movlw	195
  4995  00E620  6E27               	movwf	??_displayLogs& (0+255),c
  4996  00E622  0ECD               	movlw	205
  4997  00E624                     u7217:
  4998  00E624  2EE8               	decfsz	wreg,f,c
  4999  00E626  D7FE               	bra	u7217
  5000  00E628  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5001  00E62A  D7FC               	bra	u7217
  5002  00E62C  F000               	nop	
  5003                           
  5004                           ;standbyMode.c: 488: printf("Drawer 1: RF12");
  5005  00E62E  0E7D               	movlw	low STR_26
  5006  00E630  6E0D               	movwf	printf@f,c
  5007  00E632  0EFE               	movlw	high STR_26
  5008  00E634  6E0E               	movwf	printf@f+1,c
  5009  00E636  ECAF  F06F         	call	_printf	;wreg free
  5010                           
  5011                           ;standbyMode.c: 489: lcdInst(0xC0);;
  5012  00E63A  0EC0               	movlw	192
  5013  00E63C  EC2B  F069         	call	_lcdInst
  5014                           
  5015                           ;standbyMode.c: 490: printf("Drawer 2: L1");
  5016  00E640  0E49               	movlw	low STR_27
  5017  00E642  6E0D               	movwf	printf@f,c
  5018  00E644  0EFF               	movlw	high STR_27
  5019  00E646  6E0E               	movwf	printf@f+1,c
  5020  00E648  ECAF  F06F         	call	_printf	;wreg free
  5021                           
  5022                           ;standbyMode.c: 491: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5023  00E64C  0E66               	movlw	102
  5024  00E64E  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5025  00E650  0E76               	movlw	118
  5026  00E652  6E27               	movwf	??_displayLogs& (0+255),c
  5027  00E654  0EC1               	movlw	193
  5028  00E656                     u7227:
  5029  00E656  2EE8               	decfsz	wreg,f,c
  5030  00E658  D7FE               	bra	u7227
  5031  00E65A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5032  00E65C  D7FC               	bra	u7227
  5033  00E65E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5034  00E660  D7FA               	bra	u7227
  5035  00E662  F000               	nop	
  5036                           
  5037                           ;standbyMode.c: 493: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5038  00E664  0E01               	movlw	1
  5039  00E666  EC2B  F069         	call	_lcdInst
  5040  00E66A  0EC3               	movlw	195
  5041  00E66C  6E27               	movwf	??_displayLogs& (0+255),c
  5042  00E66E  0ECD               	movlw	205
  5043  00E670                     u7237:
  5044  00E670  2EE8               	decfsz	wreg,f,c
  5045  00E672  D7FE               	bra	u7237
  5046  00E674  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5047  00E676  D7FC               	bra	u7237
  5048  00E678  F000               	nop	
  5049                           
  5050                           ;standbyMode.c: 494: printf("Another log?");
  5051  00E67A  0E63               	movlw	low STR_28
  5052  00E67C  6E0D               	movwf	printf@f,c
  5053  00E67E  0EFF               	movlw	high STR_28
  5054  00E680  6E0E               	movwf	printf@f+1,c
  5055  00E682  ECAF  F06F         	call	_printf	;wreg free
  5056                           
  5057                           ;standbyMode.c: 495: lcdInst(0xC0);;
  5058  00E686  0EC0               	movlw	192
  5059  00E688  EC2B  F069         	call	_lcdInst
  5060                           
  5061                           ;standbyMode.c: 496: printf("# = No, D = Yes");
  5062  00E68C  0E6D               	movlw	low STR_29
  5063  00E68E  6E0D               	movwf	printf@f,c
  5064  00E690  0EFE               	movlw	high STR_29
  5065  00E692  6E0E               	movwf	printf@f+1,c
  5066  00E694  ECAF  F06F         	call	_printf	;wreg free
  5067  00E698  A281               	btfss	3969,1,c	;volatile
  5068  00E69A  D7FE               	goto	l293
  5069                           
  5070                           ;standbyMode.c: 499: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  5071  00E69C  3881               	swapf	3969,w,c	;volatile
  5072  00E69E  0B0F               	andlw	15
  5073  00E6A0  0B0F               	andlw	15
  5074  00E6A2  6E39               	movwf	displayLogs@keypress3,c
  5075  00E6A4  B281               	btfsc	3969,1,c	;volatile
  5076  00E6A6  D7FE               	goto	l296
  5077                           
  5078                           ;standbyMode.c: 501: return keypress3;
  5079  00E6A8  C039  F025         	movff	displayLogs@keypress3,?_displayLogs
  5080  00E6AC  6A26               	clrf	?_displayLogs+1,c
  5081  00E6AE  0012               	return		;funcret
  5082  00E6B0                     __end_of_displayLogs:
  5083                           	opt stack 0
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           postinc0	equ	0xFEE
  5091                           wreg	equ	0xFE8
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _shiftEEPROM *****************
  5100 ;; Defined at:
  5101 ;;		line 48 in file "EEPROMstorage.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  i               2    5[COMRAM] unsigned int 
  5106 ;;  temp            2    3[COMRAM] unsigned int 
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;Total ram usage:        5 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    1
  5123 ;; This function calls:
  5124 ;;		_readEEPROM
  5125 ;;		_writeEEPROM
  5126 ;; This function is called by:
  5127 ;;		_standbyMode
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text7
  5132  00D632                     __ptext7:
  5133                           	opt stack 0
  5134  00D632                     _shiftEEPROM:
  5135                           	opt stack 28
  5136                           
  5137                           ;EEPROMstorage.c: 49: unsigned int i = 0;
  5138                           
  5139                           ;incstack = 0
  5140  00D632  0E00               	movlw	0
  5141  00D634  6E07               	movwf	shiftEEPROM@i+1,c
  5142  00D636  0E00               	movlw	0
  5143  00D638  6E06               	movwf	shiftEEPROM@i,c
  5144                           
  5145                           ;EEPROMstorage.c: 50: unsigned int temp = 0;
  5146  00D63A  0E00               	movlw	0
  5147  00D63C  6E05               	movwf	shiftEEPROM@temp+1,c
  5148  00D63E  0E00               	movlw	0
  5149  00D640  6E04               	movwf	shiftEEPROM@temp,c
  5150                           
  5151                           ;EEPROMstorage.c: 51: for (i=102; i<153; i++){
  5152  00D642  0E00               	movlw	0
  5153  00D644  6E07               	movwf	shiftEEPROM@i+1,c
  5154  00D646  0E66               	movlw	102
  5155  00D648  6E06               	movwf	shiftEEPROM@i,c
  5156  00D64A                     l4618:
  5157  00D64A  5007               	movf	shiftEEPROM@i+1,w,c
  5158  00D64C  E114               	bnz	l4628
  5159  00D64E  0E99               	movlw	153
  5160  00D650  5C06               	subwf	shiftEEPROM@i,w,c
  5161  00D652  B0D8               	btfsc	status,0,c
  5162  00D654  D010               	goto	u6180
  5163                           
  5164                           ;EEPROMstorage.c: 52: temp = readEEPROM(i);
  5165  00D656  5006               	movf	shiftEEPROM@i,w,c
  5166  00D658  EC3F  F069         	call	_readEEPROM
  5167  00D65C  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5168  00D65E  5003               	movf	??_shiftEEPROM,w,c
  5169  00D660  6E04               	movwf	shiftEEPROM@temp,c
  5170  00D662  6A05               	clrf	shiftEEPROM@temp+1,c
  5171                           
  5172                           ;EEPROMstorage.c: 53: writeEEPROM(i+51, temp);
  5173  00D664  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5174  00D668  5006               	movf	shiftEEPROM@i,w,c
  5175  00D66A  0F33               	addlw	51
  5176  00D66C  ECA1  F069         	call	_writeEEPROM
  5177  00D670  4A06               	infsnz	shiftEEPROM@i,f,c
  5178  00D672  2A07               	incf	shiftEEPROM@i+1,f,c
  5179  00D674  D7EA               	goto	l4618
  5180  00D676                     u6180:
  5181  00D676                     l4628:
  5182                           
  5183                           ;EEPROMstorage.c: 54: }
  5184                           ;EEPROMstorage.c: 56: for (i=51; i<102; i++){
  5185  00D676  0E00               	movlw	0
  5186  00D678  6E07               	movwf	shiftEEPROM@i+1,c
  5187  00D67A  0E33               	movlw	51
  5188  00D67C  6E06               	movwf	shiftEEPROM@i,c
  5189  00D67E                     l4630:
  5190  00D67E  5007               	movf	shiftEEPROM@i+1,w,c
  5191  00D680  E114               	bnz	l4640
  5192  00D682  0E66               	movlw	102
  5193  00D684  5C06               	subwf	shiftEEPROM@i,w,c
  5194  00D686  B0D8               	btfsc	status,0,c
  5195  00D688  D010               	goto	u6200
  5196                           
  5197                           ;EEPROMstorage.c: 57: temp = readEEPROM(i);
  5198  00D68A  5006               	movf	shiftEEPROM@i,w,c
  5199  00D68C  EC3F  F069         	call	_readEEPROM
  5200  00D690  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5201  00D692  5003               	movf	??_shiftEEPROM,w,c
  5202  00D694  6E04               	movwf	shiftEEPROM@temp,c
  5203  00D696  6A05               	clrf	shiftEEPROM@temp+1,c
  5204                           
  5205                           ;EEPROMstorage.c: 58: writeEEPROM(i+51, temp);
  5206  00D698  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5207  00D69C  5006               	movf	shiftEEPROM@i,w,c
  5208  00D69E  0F33               	addlw	51
  5209  00D6A0  ECA1  F069         	call	_writeEEPROM
  5210  00D6A4  4A06               	infsnz	shiftEEPROM@i,f,c
  5211  00D6A6  2A07               	incf	shiftEEPROM@i+1,f,c
  5212  00D6A8  D7EA               	goto	l4630
  5213  00D6AA                     u6200:
  5214  00D6AA                     l4640:
  5215                           
  5216                           ;EEPROMstorage.c: 59: }
  5217                           ;EEPROMstorage.c: 61: for (i=0; i<51; i++){
  5218  00D6AA  0E00               	movlw	0
  5219  00D6AC  6E07               	movwf	shiftEEPROM@i+1,c
  5220  00D6AE  0E00               	movlw	0
  5221  00D6B0  6E06               	movwf	shiftEEPROM@i,c
  5222  00D6B2                     l4642:
  5223  00D6B2  5007               	movf	shiftEEPROM@i+1,w,c
  5224  00D6B4  E114               	bnz	l580
  5225  00D6B6  0E33               	movlw	51
  5226  00D6B8  5C06               	subwf	shiftEEPROM@i,w,c
  5227  00D6BA  B0D8               	btfsc	status,0,c
  5228  00D6BC  0012               	return	
  5229                           
  5230                           ;EEPROMstorage.c: 62: temp = readEEPROM(i);
  5231  00D6BE  5006               	movf	shiftEEPROM@i,w,c
  5232  00D6C0  EC3F  F069         	call	_readEEPROM
  5233  00D6C4  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5234  00D6C6  5003               	movf	??_shiftEEPROM,w,c
  5235  00D6C8  6E04               	movwf	shiftEEPROM@temp,c
  5236  00D6CA  6A05               	clrf	shiftEEPROM@temp+1,c
  5237                           
  5238                           ;EEPROMstorage.c: 63: writeEEPROM(i+51, temp);
  5239  00D6CC  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5240  00D6D0  5006               	movf	shiftEEPROM@i,w,c
  5241  00D6D2  0F33               	addlw	51
  5242  00D6D4  ECA1  F069         	call	_writeEEPROM
  5243  00D6D8  4A06               	infsnz	shiftEEPROM@i,f,c
  5244  00D6DA  2A07               	incf	shiftEEPROM@i+1,f,c
  5245  00D6DC  D7EA               	goto	l4642
  5246  00D6DE                     l580:
  5247  00D6DE  0012               	return		;funcret
  5248  00D6E0                     __end_of_shiftEEPROM:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           indf2	equ	0xFDF
  5259                           postinc2	equ	0xFDE
  5260                           postdec2	equ	0xFDD
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function _readEEPROM *****************
  5266 ;; Defined at:
  5267 ;;		line 29 in file "EEPROMstorage.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  address         1    wreg     unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  address         1    0[COMRAM] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      unsigned char 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:        1 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; This function calls:
  5288 ;;		Nothing
  5289 ;; This function is called by:
  5290 ;;		_viewLogs
  5291 ;;		_displayLogs
  5292 ;;		_shiftEEPROM
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           	psect	text8
  5297  00D27E                     __ptext8:
  5298                           	opt stack 0
  5299  00D27E                     _readEEPROM:
  5300                           	opt stack 28
  5301                           
  5302                           ;incstack = 0
  5303                           ;readEEPROM@address stored from wreg
  5304  00D27E  6E01               	movwf	readEEPROM@address,c
  5305  00D280                     
  5306                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  5307  00D280  B2A6               	btfsc	4006,1,c	;volsfr
  5308  00D282  D7FE               	goto	l3326
  5309                           
  5310                           ;EEPROMstorage.c: 32: EEADR = address;
  5311  00D284  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  5312                           
  5313                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  5314  00D288  9EA6               	bcf	4006,7,c	;volsfr
  5315                           
  5316                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  5317  00D28A  9CA6               	bcf	4006,6,c	;volsfr
  5318                           
  5319                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  5320  00D28C  80A6               	bsf	4006,0,c	;volsfr
  5321                           
  5322                           ;EEPROMstorage.c: 36: return( EEDATA );
  5323  00D28E  50A8               	movf	4008,w,c	;volatile
  5324  00D290  0012               	return	
  5325  00D292                     __end_of_readEEPROM:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _initEEPROM *****************
  5343 ;; Defined at:
  5344 ;;		line 40 in file "EEPROMstorage.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  i               2    2[COMRAM] unsigned int 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, status,2, status,0, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:        2 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    1
  5365 ;; This function calls:
  5366 ;;		_writeEEPROM
  5367 ;; This function is called by:
  5368 ;;		_standbyMode
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text9
  5373  00D31C                     __ptext9:
  5374                           	opt stack 0
  5375  00D31C                     _initEEPROM:
  5376                           	opt stack 28
  5377                           
  5378                           ;EEPROMstorage.c: 41: unsigned int i = 0;
  5379                           
  5380                           ;incstack = 0
  5381  00D31C  0E00               	movlw	0
  5382  00D31E  6E04               	movwf	initEEPROM@i+1,c
  5383  00D320  0E00               	movlw	0
  5384  00D322  6E03               	movwf	initEEPROM@i,c
  5385                           
  5386                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
  5387  00D324  0E00               	movlw	0
  5388  00D326  6E04               	movwf	initEEPROM@i+1,c
  5389  00D328  0E00               	movlw	0
  5390  00D32A  6E03               	movwf	initEEPROM@i,c
  5391  00D32C                     l4606:
  5392  00D32C  0404               	decf	initEEPROM@i+1,w,c
  5393  00D32E  B0D8               	btfsc	status,0,c
  5394  00D330  0012               	return	
  5395                           
  5396                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
  5397  00D332  0E00               	movlw	0
  5398  00D334  6E01               	movwf	writeEEPROM@data,c
  5399  00D336  5003               	movf	initEEPROM@i,w,c
  5400  00D338  ECA1  F069         	call	_writeEEPROM
  5401  00D33C  4A03               	infsnz	initEEPROM@i,f,c
  5402  00D33E  2A04               	incf	initEEPROM@i+1,f,c
  5403  00D340  D7F5               	goto	l4606
  5404  00D342                     __end_of_initEEPROM:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _writeEEPROM *****************
  5422 ;; Defined at:
  5423 ;;		line 10 in file "EEPROMstorage.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  address         1    wreg     unsigned char 
  5426 ;;  data            1    0[COMRAM] unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  address         1    1[COMRAM] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5438 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;Total ram usage:        2 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_standbyMode
  5448 ;;		_initEEPROM
  5449 ;;		_shiftEEPROM
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text10
  5454  00D342                     __ptext10:
  5455                           	opt stack 0
  5456  00D342                     _writeEEPROM:
  5457                           	opt stack 29
  5458                           
  5459                           ;incstack = 0
  5460                           ;writeEEPROM@address stored from wreg
  5461  00D342  6E02               	movwf	writeEEPROM@address,c
  5462  00D344                     
  5463                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  5464  00D344  B2A6               	btfsc	4006,1,c	;volsfr
  5465  00D346  D7FE               	goto	l3934
  5466                           
  5467                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  5468  00D348  84A6               	bsf	4006,2,c	;volsfr
  5469                           
  5470                           ;EEPROMstorage.c: 14: EEADR=address;
  5471  00D34A  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  5472                           
  5473                           ;EEPROMstorage.c: 15: EEDATA=data;
  5474  00D34E  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  5475                           
  5476                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  5477  00D352  9EA6               	bcf	4006,7,c	;volsfr
  5478                           
  5479                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  5480  00D354  9CA6               	bcf	4006,6,c	;volsfr
  5481                           
  5482                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  5483  00D356  9EF2               	bcf	intcon,7,c	;volatile
  5484                           
  5485                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  5486  00D358  0E55               	movlw	85
  5487  00D35A  6EA7               	movwf	4007,c	;volsfr
  5488                           
  5489                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  5490  00D35C  0EAA               	movlw	170
  5491  00D35E  6EA7               	movwf	4007,c	;volsfr
  5492                           
  5493                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  5494  00D360  82A6               	bsf	4006,1,c	;volsfr
  5495                           
  5496                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  5497  00D362  8EF2               	bsf	intcon,7,c	;volatile
  5498  00D364  B2A6               	btfsc	4006,1,c	;volsfr
  5499  00D366  D7FE               	goto	l558
  5500                           
  5501                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  5502  00D368  94A6               	bcf	4006,2,c	;volsfr
  5503  00D36A  0012               	return		;funcret
  5504  00D36C                     __end_of_writeEEPROM:
  5505                           	opt stack 0
  5506                           tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           intcon	equ	0xFF2
  5513                           postinc0	equ	0xFEE
  5514                           wreg	equ	0xFE8
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           postdec2	equ	0xFDD
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function _food_press *****************
  5523 ;; Defined at:
  5524 ;;		line 611 in file "standbyMode.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  dietSum         2   36[COMRAM] unsigned int 
  5527 ;;  drawer          2   38[COMRAM] unsigned int 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  keypress        1   58[COMRAM] unsigned char 
  5530 ;;  foodTable       8   50[COMRAM] unsigned int [4]
  5531 ;;  count           2   48[COMRAM] unsigned int 
  5532 ;;  isValid         2   46[COMRAM] unsigned int 
  5533 ;;  backCheck       2   44[COMRAM] unsigned int 
  5534 ;;  tally           2   42[COMRAM] unsigned int 
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  2   36[COMRAM] unsigned int 
  5537 ;; Registers used:
  5538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;Total ram usage:       23 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    3
  5551 ;; This function calls:
  5552 ;;		_check_food
  5553 ;;		_get_digits
  5554 ;;		_lcdInst
  5555 ;;		_printf
  5556 ;;		_putch
  5557 ;; This function is called by:
  5558 ;;		_standbyMode
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text11
  5563  00D880                     __ptext11:
  5564                           	opt stack 0
  5565  00D880                     _food_press:
  5566                           	opt stack 26
  5567                           
  5568                           ;incstack = 0
  5569                           ;standbyMode.c: 613: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5570  00D880  0E01               	movlw	1
  5571  00D882  EC2B  F069         	call	_lcdInst
  5572  00D886  0EC3               	movlw	195
  5573  00D888  6E29               	movwf	??_food_press& (0+255),c
  5574  00D88A  0ECD               	movlw	205
  5575  00D88C                     u7247:
  5576  00D88C  2EE8               	decfsz	wreg,f,c
  5577  00D88E  D7FE               	bra	u7247
  5578  00D890  2E29               	decfsz	??_food_press& (0+255),f,c
  5579  00D892  D7FC               	bra	u7247
  5580  00D894  F000               	nop	
  5581                           
  5582                           ;standbyMode.c: 614: printf("Drawer %i food:", drawer);
  5583  00D896  0E0D               	movlw	low STR_30
  5584  00D898  6E0D               	movwf	printf@f,c
  5585  00D89A  0EFE               	movlw	high STR_30
  5586  00D89C  6E0E               	movwf	printf@f+1,c
  5587  00D89E  C027  F00F         	movff	food_press@drawer,?_printf+2
  5588  00D8A2  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5589  00D8A6  ECAF  F06F         	call	_printf	;wreg free
  5590                           
  5591                           ;standbyMode.c: 615: lcdInst(0xC0);;
  5592  00D8AA  0EC0               	movlw	192
  5593  00D8AC  EC2B  F069         	call	_lcdInst
  5594                           
  5595                           ;standbyMode.c: 617: unsigned int tally = 0;
  5596  00D8B0  0E00               	movlw	0
  5597  00D8B2  6E2C               	movwf	food_press@tally+1,c
  5598  00D8B4  0E00               	movlw	0
  5599  00D8B6  6E2B               	movwf	food_press@tally,c
  5600                           
  5601                           ;standbyMode.c: 618: unsigned int count = 0;
  5602  00D8B8  0E00               	movlw	0
  5603  00D8BA  6E32               	movwf	food_press@count+1,c
  5604  00D8BC  0E00               	movlw	0
  5605  00D8BE  6E31               	movwf	food_press@count,c
  5606                           
  5607                           ;standbyMode.c: 619: unsigned int foodTable[4] = {0, 0, 0, 0};
  5608  00D8C0  EE20  F071         	lfsr	2,food_press@F3105
  5609  00D8C4  EE10  F033         	lfsr	1,food_press@foodTable
  5610  00D8C8  0E07               	movlw	7
  5611  00D8CA                     u4891:
  5612  00D8CA  CFDB FFE3          	movff	plusw2,plusw1
  5613  00D8CE  06E8               	decf	wreg,f,c
  5614  00D8D0  E2FC               	bc	u4891
  5615                           
  5616                           ;standbyMode.c: 620: unsigned int isValid = 0;
  5617  00D8D2  0E00               	movlw	0
  5618  00D8D4  6E30               	movwf	food_press@isValid+1,c
  5619  00D8D6  0E00               	movlw	0
  5620  00D8D8  6E2F               	movwf	food_press@isValid,c
  5621                           
  5622                           ;standbyMode.c: 621: unsigned int backCheck = 0;
  5623  00D8DA  0E00               	movlw	0
  5624  00D8DC  6E2E               	movwf	food_press@backCheck+1,c
  5625  00D8DE  0E00               	movlw	0
  5626  00D8E0  6E2D               	movwf	food_press@backCheck,c
  5627                           
  5628                           ;standbyMode.c: 622: tally = get_digits(dietSum);
  5629  00D8E2  C025  F001         	movff	food_press@dietSum,get_digits@sum
  5630  00D8E6  C026  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  5631  00D8EA  EC70  F06B         	call	_get_digits	;wreg free
  5632  00D8EE  C001  F02B         	movff	?_get_digits,food_press@tally
  5633  00D8F2  C002  F02C         	movff	?_get_digits+1,food_press@tally+1
  5634  00D8F6                     
  5635                           ;standbyMode.c: 625: while(PORTBbits.RB1 == 0){ continue; }
  5636  00D8F6  A281               	btfss	3969,1,c	;volatile
  5637  00D8F8  D7FE               	goto	l328
  5638                           
  5639                           ;standbyMode.c: 626: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5640  00D8FA  3881               	swapf	3969,w,c	;volatile
  5641  00D8FC  0B0F               	andlw	15
  5642  00D8FE  0B0F               	andlw	15
  5643  00D900  6E3B               	movwf	food_press@keypress,c
  5644  00D902  B281               	btfsc	3969,1,c	;volatile
  5645  00D904  D7FE               	goto	l333
  5646                           
  5647                           ;standbyMode.c: 629: if(keypress == 15){
  5648  00D906  0E0F               	movlw	15
  5649  00D908  183B               	xorwf	food_press@keypress,w,c
  5650  00D90A  B4D8               	btfsc	status,2,c
  5651  00D90C  D06D               	goto	l336
  5652                           
  5653                           ;standbyMode.c: 632: else if (keypress == 14){
  5654                           
  5655                           ;standbyMode.c: 631: }
  5656                           
  5657                           ;standbyMode.c: 630: break;
  5658  00D90E  0E0E               	movlw	14
  5659  00D910  183B               	xorwf	food_press@keypress,w,c
  5660  00D912  A4D8               	btfss	status,2,c
  5661  00D914  D005               	goto	l338
  5662                           
  5663                           ;standbyMode.c: 633: backCheck = 1;
  5664  00D916  0E00               	movlw	0
  5665  00D918  6E2E               	movwf	food_press@backCheck+1,c
  5666  00D91A  0E01               	movlw	1
  5667  00D91C  6E2D               	movwf	food_press@backCheck,c
  5668                           
  5669                           ;standbyMode.c: 634: break;
  5670  00D91E  D064               	goto	l336
  5671  00D920                     l338:
  5672                           
  5673                           ;standbyMode.c: 636: else if (keypress == 0 || keypress == 1 || keypress == 2){
  5674  00D920  503B               	movf	food_press@keypress,w,c
  5675  00D922  B4D8               	btfsc	status,2,c
  5676  00D924  D007               	goto	u4960
  5677  00D926  043B               	decf	food_press@keypress,w,c
  5678  00D928  B4D8               	btfsc	status,2,c
  5679  00D92A  D004               	goto	u4960
  5680  00D92C  0E02               	movlw	2
  5681  00D92E  183B               	xorwf	food_press@keypress,w,c
  5682  00D930  A4D8               	btfss	status,2,c
  5683  00D932  D029               	goto	l340
  5684  00D934                     u4960:
  5685                           
  5686                           ;standbyMode.c: 637: if (count < tally){
  5687  00D934  502B               	movf	food_press@tally,w,c
  5688  00D936  5C31               	subwf	food_press@count,w,c
  5689  00D938  502C               	movf	food_press@tally+1,w,c
  5690  00D93A  5832               	subwfb	food_press@count+1,w,c
  5691  00D93C  B0D8               	btfsc	status,0,c
  5692  00D93E  D7DB               	goto	l328
  5693                           
  5694                           ;standbyMode.c: 638: putch(input[keypress]);
  5695  00D940  503B               	movf	food_press@keypress,w,c
  5696  00D942  0D01               	mullw	1
  5697  00D944  0E34               	movlw	low _input
  5698  00D946  24F3               	addwf	prodl,w,c
  5699  00D948  6EF6               	movwf	tblptrl,c
  5700  00D94A  0EFD               	movlw	high _input
  5701  00D94C  20F4               	addwfc	prodh,w,c
  5702  00D94E  6EF7               	movwf	tblptrh,c
  5703  00D950                     	if	0	;There are less than 3 active tblptr bytes
  5704  00D950                     	endif
  5705  00D950  0008               	tblrd		*
  5706  00D952  50F5               	movf	tablat,w,c
  5707  00D954  EC35  F069         	call	_putch
  5708                           
  5709                           ;standbyMode.c: 639: foodTable[count] = keypress + 1;
  5710  00D958  503B               	movf	food_press@keypress,w,c
  5711  00D95A  6E29               	movwf	??_food_press& (0+255),c
  5712  00D95C  6A2A               	clrf	(??_food_press+1)& (0+255),c
  5713  00D95E  0E01               	movlw	1
  5714  00D960  2629               	addwf	??_food_press,f,c
  5715  00D962  0E00               	movlw	0
  5716  00D964  222A               	addwfc	??_food_press+1,f,c
  5717  00D966  90D8               	bcf	status,0,c
  5718  00D968  3431               	rlcf	food_press@count,w,c
  5719  00D96A  6ED9               	movwf	fsr2l,c
  5720  00D96C  3432               	rlcf	food_press@count+1,w,c
  5721  00D96E  6EDA               	movwf	fsr2h,c
  5722  00D970  0E33               	movlw	low food_press@foodTable
  5723  00D972  26D9               	addwf	fsr2l,f,c
  5724  00D974  0E00               	movlw	high food_press@foodTable
  5725  00D976  22DA               	addwfc	fsr2h,f,c
  5726  00D978  C029  FFDE         	movff	??_food_press,postinc2
  5727  00D97C  C02A  FFDD         	movff	??_food_press+1,postdec2
  5728                           
  5729                           ;standbyMode.c: 640: count += 1;
  5730  00D980  4A31               	infsnz	food_press@count,f,c
  5731  00D982  2A32               	incf	food_press@count+1,f,c
  5732                           
  5733                           ;standbyMode.c: 641: }
  5734                           ;standbyMode.c: 642: }
  5735  00D984  D7B8               	goto	l328
  5736  00D986                     l340:
  5737                           
  5738                           ;standbyMode.c: 643: else if (keypress == 12){
  5739  00D986  0E0C               	movlw	12
  5740  00D988  183B               	xorwf	food_press@keypress,w,c
  5741  00D98A  A4D8               	btfss	status,2,c
  5742  00D98C  D7B4               	goto	l328
  5743                           
  5744                           ;standbyMode.c: 644: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5745  00D98E  0E01               	movlw	1
  5746  00D990  EC2B  F069         	call	_lcdInst
  5747  00D994  0EC3               	movlw	195
  5748  00D996  6E29               	movwf	??_food_press& (0+255),c
  5749  00D998  0ECD               	movlw	205
  5750  00D99A                     u7257:
  5751  00D99A  2EE8               	decfsz	wreg,f,c
  5752  00D99C  D7FE               	bra	u7257
  5753  00D99E  2E29               	decfsz	??_food_press& (0+255),f,c
  5754  00D9A0  D7FC               	bra	u7257
  5755  00D9A2  F000               	nop	
  5756                           
  5757                           ;standbyMode.c: 645: printf("Drawer %i food:", drawer);
  5758  00D9A4  0E0D               	movlw	low STR_30
  5759  00D9A6  6E0D               	movwf	printf@f,c
  5760  00D9A8  0EFE               	movlw	high STR_30
  5761  00D9AA  6E0E               	movwf	printf@f+1,c
  5762  00D9AC  C027  F00F         	movff	food_press@drawer,?_printf+2
  5763  00D9B0  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5764  00D9B4  ECAF  F06F         	call	_printf	;wreg free
  5765                           
  5766                           ;standbyMode.c: 646: lcdInst(0xC0);;
  5767  00D9B8  0EC0               	movlw	192
  5768  00D9BA  EC2B  F069         	call	_lcdInst
  5769                           
  5770                           ;standbyMode.c: 647: count = 0;
  5771  00D9BE  0E00               	movlw	0
  5772  00D9C0  6E32               	movwf	food_press@count+1,c
  5773  00D9C2  0E00               	movlw	0
  5774  00D9C4  6E31               	movwf	food_press@count,c
  5775                           
  5776                           ;standbyMode.c: 648: foodTable[0] = 0;
  5777  00D9C6  0E00               	movlw	0
  5778  00D9C8  6E34               	movwf	food_press@foodTable+1,c
  5779  00D9CA  0E00               	movlw	0
  5780  00D9CC  6E33               	movwf	food_press@foodTable,c
  5781                           
  5782                           ;standbyMode.c: 649: foodTable[1] = 0;
  5783  00D9CE  0E00               	movlw	0
  5784  00D9D0  6E36               	movwf	food_press@foodTable+3,c
  5785  00D9D2  0E00               	movlw	0
  5786  00D9D4  6E35               	movwf	food_press@foodTable+2,c
  5787                           
  5788                           ;standbyMode.c: 650: foodTable[2] = 0;
  5789  00D9D6  0E00               	movlw	0
  5790  00D9D8  6E38               	movwf	food_press@foodTable+5,c
  5791  00D9DA  0E00               	movlw	0
  5792  00D9DC  6E37               	movwf	food_press@foodTable+4,c
  5793                           
  5794                           ;standbyMode.c: 651: foodTable[3] = 0;
  5795  00D9DE  0E00               	movlw	0
  5796  00D9E0  6E3A               	movwf	food_press@foodTable+7,c
  5797  00D9E2  0E00               	movlw	0
  5798  00D9E4  6E39               	movwf	food_press@foodTable+6,c
  5799  00D9E6  D787               	goto	l328
  5800  00D9E8                     l336:
  5801                           
  5802                           ;standbyMode.c: 652: }
  5803                           ;standbyMode.c: 653: }
  5804                           ;standbyMode.c: 655: if (backCheck == 1){
  5805  00D9E8  042D               	decf	food_press@backCheck,w,c
  5806  00D9EA  102E               	iorwf	food_press@backCheck+1,w,c
  5807  00D9EC  A4D8               	btfss	status,2,c
  5808  00D9EE  D005               	goto	l347
  5809                           
  5810                           ;standbyMode.c: 656: return 100;
  5811  00D9F0  0E00               	movlw	0
  5812  00D9F2  6E26               	movwf	?_food_press+1,c
  5813  00D9F4  0E64               	movlw	100
  5814  00D9F6  6E25               	movwf	?_food_press,c
  5815                           
  5816                           ;standbyMode.c: 657: }
  5817  00D9F8  0012               	return	
  5818  00D9FA                     l347:
  5819                           
  5820                           ;standbyMode.c: 658: else {
  5821                           ;standbyMode.c: 659: isValid = check_food(dietSum, foodTable);
  5822  00D9FA  C025  F001         	movff	food_press@dietSum,check_food@sum
  5823  00D9FE  C026  F002         	movff	food_press@dietSum+1,check_food@sum+1
  5824  00DA02  0E33               	movlw	low food_press@foodTable
  5825  00DA04  6E03               	movwf	check_food@foodInput,c
  5826  00DA06  0E00               	movlw	high food_press@foodTable
  5827  00DA08  6E04               	movwf	check_food@foodInput+1,c
  5828  00DA0A  ECEB  F075         	call	_check_food	;wreg free
  5829  00DA0E  C001  F02F         	movff	?_check_food,food_press@isValid
  5830  00DA12  C002  F030         	movff	?_check_food+1,food_press@isValid+1
  5831                           
  5832                           ;standbyMode.c: 661: if (isValid == 0){
  5833  00DA16  502F               	movf	food_press@isValid,w,c
  5834  00DA18  1030               	iorwf	food_press@isValid+1,w,c
  5835  00DA1A  A4D8               	btfss	status,2,c
  5836  00DA1C  D026               	goto	l350
  5837                           
  5838                           ;standbyMode.c: 662: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5839  00DA1E  0E01               	movlw	1
  5840  00DA20  EC2B  F069         	call	_lcdInst
  5841  00DA24  0EC3               	movlw	195
  5842  00DA26  6E29               	movwf	??_food_press& (0+255),c
  5843  00DA28  0ECD               	movlw	205
  5844  00DA2A                     u7267:
  5845  00DA2A  2EE8               	decfsz	wreg,f,c
  5846  00DA2C  D7FE               	bra	u7267
  5847  00DA2E  2E29               	decfsz	??_food_press& (0+255),f,c
  5848  00DA30  D7FC               	bra	u7267
  5849  00DA32  F000               	nop	
  5850                           
  5851                           ;standbyMode.c: 663: printf("Invalid food!");
  5852  00DA34  0E04               	movlw	low STR_32
  5853  00DA36  6E0D               	movwf	printf@f,c
  5854  00DA38  0EFF               	movlw	high STR_32
  5855  00DA3A  6E0E               	movwf	printf@f+1,c
  5856  00DA3C  ECAF  F06F         	call	_printf	;wreg free
  5857                           
  5858                           ;standbyMode.c: 664: lcdInst(0xC0);;
  5859  00DA40  0EC0               	movlw	192
  5860  00DA42  EC2B  F069         	call	_lcdInst
  5861                           
  5862                           ;standbyMode.c: 665: printf("Try again.");
  5863  00DA46  0E9E               	movlw	low STR_33
  5864  00DA48  6E0D               	movwf	printf@f,c
  5865  00DA4A  0EFF               	movlw	high STR_33
  5866  00DA4C  6E0E               	movwf	printf@f+1,c
  5867  00DA4E  ECAF  F06F         	call	_printf	;wreg free
  5868                           
  5869                           ;standbyMode.c: 666: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5870  00DA52  0E33               	movlw	51
  5871  00DA54  6E2A               	movwf	(??_food_press+1)& (0+255),c
  5872  00DA56  0EBB               	movlw	187
  5873  00DA58  6E29               	movwf	??_food_press& (0+255),c
  5874  00DA5A  0EE0               	movlw	224
  5875  00DA5C                     u7277:
  5876  00DA5C  2EE8               	decfsz	wreg,f,c
  5877  00DA5E  D7FE               	bra	u7277
  5878  00DA60  2E29               	decfsz	??_food_press& (0+255),f,c
  5879  00DA62  D7FC               	bra	u7277
  5880  00DA64  2E2A               	decfsz	(??_food_press+1)& (0+255),f,c
  5881  00DA66  D7FA               	bra	u7277
  5882                           
  5883                           ;standbyMode.c: 667: goto START;
  5884  00DA68  D70B               	goto	_food_press
  5885  00DA6A                     l350:
  5886                           
  5887                           ;standbyMode.c: 669: else {
  5888                           ;standbyMode.c: 670: return isValid;
  5889  00DA6A  C02F  F025         	movff	food_press@isValid,?_food_press
  5890  00DA6E  C030  F026         	movff	food_press@isValid+1,?_food_press+1
  5891  00DA72  0012               	return	
  5892  00DA74                     __end_of_food_press:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           plusw1	equ	0xFE3
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           plusw2	equ	0xFDB
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _get_digits *****************
  5913 ;; Defined at:
  5914 ;;		line 506 in file "standbyMode.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  sum             2    0[COMRAM] unsigned int 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  count           2    4[COMRAM] unsigned int 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  2    0[COMRAM] unsigned int 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:        6 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; This function calls:
  5935 ;;		Nothing
  5936 ;; This function is called by:
  5937 ;;		_food_press
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text12
  5942  00D6E0                     __ptext12:
  5943                           	opt stack 0
  5944  00D6E0                     _get_digits:
  5945                           	opt stack 28
  5946                           
  5947                           ;standbyMode.c: 508: unsigned int count = 0;
  5948                           
  5949                           ;incstack = 0
  5950  00D6E0  0E00               	movlw	0
  5951  00D6E2  6E06               	movwf	get_digits@count+1,c
  5952  00D6E4  0E00               	movlw	0
  5953  00D6E6  6E05               	movwf	get_digits@count,c
  5954                           
  5955                           ;standbyMode.c: 510: switch(sum){
  5956  00D6E8  D015               	goto	l301
  5957  00D6EA                     
  5958                           ;standbyMode.c: 523: count = 1;
  5959                           
  5960                           ;standbyMode.c: 522: case 12:
  5961                           
  5962                           ;standbyMode.c: 519: break;
  5963                           
  5964                           ;standbyMode.c: 518: count = 1;
  5965                           
  5966                           ;standbyMode.c: 517: case 7:
  5967                           
  5968                           ;standbyMode.c: 514: break;
  5969                           
  5970                           ;standbyMode.c: 513: count = 1;
  5971  00D6EA  0E00               	movlw	0
  5972  00D6EC  6E06               	movwf	get_digits@count+1,c
  5973  00D6EE  0E01               	movlw	1
  5974  00D6F0                     L18:
  5975  00D6F0  6E05               	movwf	get_digits@count,c
  5976                           
  5977                           ;standbyMode.c: 529: break;
  5978  00D6F2  D050               	goto	l303
  5979  00D6F4                     
  5980                           ;standbyMode.c: 538: count = 2;
  5981                           
  5982                           ;standbyMode.c: 537: case 19:
  5983                           
  5984                           ;standbyMode.c: 534: break;
  5985                           
  5986                           ;standbyMode.c: 533: count = 2;
  5987  00D6F4  0E00               	movlw	0
  5988  00D6F6  6E06               	movwf	get_digits@count+1,c
  5989  00D6F8  0E02               	movlw	2
  5990  00D6FA  D7FA               	goto	L18
  5991  00D6FC                     
  5992                           ;standbyMode.c: 573: count = 3;
  5993                           
  5994                           ;standbyMode.c: 572: case 31:
  5995                           
  5996                           ;standbyMode.c: 569: break;
  5997                           
  5998                           ;standbyMode.c: 568: count = 3;
  5999                           
  6000                           ;standbyMode.c: 567: case 26:
  6001                           
  6002                           ;standbyMode.c: 564: break;
  6003                           
  6004                           ;standbyMode.c: 563: count = 3;
  6005                           
  6006                           ;standbyMode.c: 562: case 22:
  6007                           
  6008                           ;standbyMode.c: 559: break;
  6009                           
  6010                           ;standbyMode.c: 558: count = 3;
  6011                           
  6012                           ;standbyMode.c: 557: case 27:
  6013                           
  6014                           ;standbyMode.c: 554: break;
  6015                           
  6016                           ;standbyMode.c: 553: count = 3;
  6017                           
  6018                           ;standbyMode.c: 552: case 17:
  6019                           
  6020                           ;standbyMode.c: 549: break;
  6021                           
  6022                           ;standbyMode.c: 548: count = 3;
  6023                           
  6024                           ;standbyMode.c: 547: case 18:
  6025                           
  6026                           ;standbyMode.c: 544: break;
  6027                           
  6028                           ;standbyMode.c: 543: count = 3;
  6029  00D6FC  0E00               	movlw	0
  6030  00D6FE  6E06               	movwf	get_digits@count+1,c
  6031  00D700  0E03               	movlw	3
  6032  00D702  D7F6               	goto	L18
  6033  00D704                     
  6034                           ;standbyMode.c: 598: count = 4;
  6035                           
  6036                           ;standbyMode.c: 597: case 43:
  6037                           
  6038                           ;standbyMode.c: 594: break;
  6039                           
  6040                           ;standbyMode.c: 593: count = 4;
  6041                           
  6042                           ;standbyMode.c: 592: case 39:
  6043                           
  6044                           ;standbyMode.c: 589: break;
  6045                           
  6046                           ;standbyMode.c: 588: count = 4;
  6047                           
  6048                           ;standbyMode.c: 587: case 34:
  6049                           
  6050                           ;standbyMode.c: 584: break;
  6051                           
  6052                           ;standbyMode.c: 583: count = 4;
  6053                           
  6054                           ;standbyMode.c: 582: case 29:
  6055                           
  6056                           ;standbyMode.c: 579: break;
  6057                           
  6058                           ;standbyMode.c: 578: count = 4;
  6059  00D704  0E00               	movlw	0
  6060  00D706  6E06               	movwf	get_digits@count+1,c
  6061  00D708  0E04               	movlw	4
  6062  00D70A  D7F2               	goto	L18
  6063  00D70C                     
  6064                           ;standbyMode.c: 603: count = 0;
  6065  00D70C  0E00               	movlw	0
  6066  00D70E  6E06               	movwf	get_digits@count+1,c
  6067  00D710  0E00               	movlw	0
  6068  00D712  D7EE               	goto	L18
  6069  00D714                     l301:
  6070  00D714  C001  F003         	movff	get_digits@sum,??_get_digits
  6071  00D718  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  6072                           
  6073                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6074                           ; Switch size 1, requested type "space"
  6075                           ; Number of cases is 1, Range of values is 0 to 0
  6076                           ; switch strategies available:
  6077                           ; Name         Instructions Cycles
  6078                           ; simple_byte            4     3 (average)
  6079                           ;	Chosen strategy is simple_byte
  6080  00D71C  5004               	movf	??_get_digits+1,w,c
  6081  00D71E  0A00               	xorlw	0	; case 0
  6082  00D720  A4D8               	btfss	status,2,c
  6083  00D722  D7F4               	goto	l321
  6084                           
  6085                           ; Switch size 1, requested type "space"
  6086                           ; Number of cases is 18, Range of values is 3 to 43
  6087                           ; switch strategies available:
  6088                           ; Name         Instructions Cycles
  6089                           ; simple_byte           55    28 (average)
  6090                           ;	Chosen strategy is simple_byte
  6091  00D724  5003               	movf	??_get_digits,w,c
  6092  00D726  0A03               	xorlw	3	; case 3
  6093  00D728  B4D8               	btfsc	status,2,c
  6094  00D72A  D7DF               	goto	l302
  6095  00D72C  0A04               	xorlw	4	; case 7
  6096  00D72E  B4D8               	btfsc	status,2,c
  6097  00D730  D7DC               	goto	l302
  6098  00D732  0A0D               	xorlw	13	; case 10
  6099  00D734  B4D8               	btfsc	status,2,c
  6100  00D736  D7DE               	goto	l307
  6101  00D738  0A06               	xorlw	6	; case 12
  6102  00D73A  B4D8               	btfsc	status,2,c
  6103  00D73C  D7D6               	goto	l302
  6104  00D73E  0A01               	xorlw	1	; case 13
  6105  00D740  B4D8               	btfsc	status,2,c
  6106  00D742  D7DC               	goto	l309
  6107  00D744  0A02               	xorlw	2	; case 15
  6108  00D746  B4D8               	btfsc	status,2,c
  6109  00D748  D7D5               	goto	l307
  6110  00D74A  0A1E               	xorlw	30	; case 17
  6111  00D74C  B4D8               	btfsc	status,2,c
  6112  00D74E  D7D6               	goto	l309
  6113  00D750  0A03               	xorlw	3	; case 18
  6114  00D752  B4D8               	btfsc	status,2,c
  6115  00D754  D7D3               	goto	l309
  6116  00D756  0A01               	xorlw	1	; case 19
  6117  00D758  B4D8               	btfsc	status,2,c
  6118  00D75A  D7CC               	goto	l307
  6119  00D75C  0A05               	xorlw	5	; case 22
  6120  00D75E  B4D8               	btfsc	status,2,c
  6121  00D760  D7CD               	goto	l309
  6122  00D762  0A0F               	xorlw	15	; case 25
  6123  00D764  B4D8               	btfsc	status,2,c
  6124  00D766  D7CE               	goto	l316
  6125  00D768  0A03               	xorlw	3	; case 26
  6126  00D76A  B4D8               	btfsc	status,2,c
  6127  00D76C  D7C7               	goto	l309
  6128  00D76E  0A01               	xorlw	1	; case 27
  6129  00D770  B4D8               	btfsc	status,2,c
  6130  00D772  D7C4               	goto	l309
  6131  00D774  0A06               	xorlw	6	; case 29
  6132  00D776  B4D8               	btfsc	status,2,c
  6133  00D778  D7C5               	goto	l316
  6134  00D77A  0A02               	xorlw	2	; case 31
  6135  00D77C  B4D8               	btfsc	status,2,c
  6136  00D77E  D7BE               	goto	l309
  6137  00D780  0A3D               	xorlw	61	; case 34
  6138  00D782  B4D8               	btfsc	status,2,c
  6139  00D784  D7BF               	goto	l316
  6140  00D786  0A05               	xorlw	5	; case 39
  6141  00D788  B4D8               	btfsc	status,2,c
  6142  00D78A  D7BC               	goto	l316
  6143  00D78C  0A0C               	xorlw	12	; case 43
  6144  00D78E  B4D8               	btfsc	status,2,c
  6145  00D790  D7B9               	goto	l316
  6146  00D792  D7BC               	goto	l321
  6147  00D794                     l303:
  6148                           
  6149                           ;standbyMode.c: 606: return count;
  6150  00D794  C005  F001         	movff	get_digits@count,?_get_digits
  6151  00D798  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  6152  00D79C  0012               	return		;funcret
  6153  00D79E                     __end_of_get_digits:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           postinc0	equ	0xFEE
  6163                           wreg	equ	0xFE8
  6164                           plusw1	equ	0xFE3
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           plusw2	equ	0xFDB
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function _check_food *****************
  6174 ;; Defined at:
  6175 ;;		line 120 in file "standbyMode.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  sum             2    0[COMRAM] unsigned int 
  6178 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  6179 ;;		 -> food_press@foodTable(8), 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  returnValue     2    6[COMRAM] unsigned int 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  2    0[COMRAM] unsigned int 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6191 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;Total ram usage:        8 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_food_press
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text13
  6205  00EBD6                     __ptext13:
  6206                           	opt stack 0
  6207  00EBD6                     _check_food:
  6208                           	opt stack 28
  6209                           
  6210                           ;standbyMode.c: 122: unsigned int returnValue = 0;
  6211                           
  6212                           ;incstack = 0
  6213  00EBD6  0E00               	movlw	0
  6214  00EBD8  6E08               	movwf	check_food@returnValue+1,c
  6215  00EBDA  0E00               	movlw	0
  6216  00EBDC  6E07               	movwf	check_food@returnValue,c
  6217                           
  6218                           ;standbyMode.c: 124: switch(sum){
  6219  00EBDE  D3D0               	goto	l152
  6220  00EBE0                     
  6221                           ;standbyMode.c: 127: if (foodInput[0] == 1 || foodInput[0] == 2){
  6222  00EBE0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6223  00EBE4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6224  00EBE8  04DE               	decf	postinc2,w,c
  6225  00EBEA  10DE               	iorwf	postinc2,w,c
  6226  00EBEC  B4D8               	btfsc	status,2,c
  6227  00EBEE  D009               	goto	u3650
  6228  00EBF0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6229  00EBF4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6230  00EBF8  0E02               	movlw	2
  6231  00EBFA  18DE               	xorwf	postinc2,w,c
  6232  00EBFC  10DE               	iorwf	postinc2,w,c
  6233  00EBFE  A4D8               	btfss	status,2,c
  6234  00EC00  D3FE               	goto	l157
  6235  00EC02                     u3650:
  6236                           
  6237                           ;standbyMode.c: 128: returnValue = 1;
  6238  00EC02  0E00               	movlw	0
  6239  00EC04  6E08               	movwf	check_food@returnValue+1,c
  6240  00EC06  0E01               	movlw	1
  6241  00EC08  D3B9               	goto	L46
  6242  00EC0A                     
  6243                           ;standbyMode.c: 134: if (foodInput[0] == 1 || foodInput[0] == 2){
  6244  00EC0A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6245  00EC0E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6246  00EC12  04DE               	decf	postinc2,w,c
  6247  00EC14  10DE               	iorwf	postinc2,w,c
  6248  00EC16  B4D8               	btfsc	status,2,c
  6249  00EC18  D009               	goto	u3670
  6250  00EC1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6251  00EC1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6252  00EC22  0E02               	movlw	2
  6253  00EC24  18DE               	xorwf	postinc2,w,c
  6254  00EC26  10DE               	iorwf	postinc2,w,c
  6255  00EC28  A4D8               	btfss	status,2,c
  6256  00EC2A  D3E9               	goto	l157
  6257  00EC2C                     u3670:
  6258                           
  6259                           ;standbyMode.c: 135: returnValue = 2;
  6260  00EC2C  0E00               	movlw	0
  6261  00EC2E  6E08               	movwf	check_food@returnValue+1,c
  6262  00EC30  0E02               	movlw	2
  6263  00EC32  D3A4               	goto	L46
  6264  00EC34                     
  6265                           ;standbyMode.c: 141: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  6266  00EC34  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6267  00EC38  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6268  00EC3C  04DE               	decf	postinc2,w,c
  6269  00EC3E  10DE               	iorwf	postinc2,w,c
  6270  00EC40  B4D8               	btfsc	status,2,c
  6271  00EC42  D012               	goto	u3700
  6272  00EC44  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6273  00EC48  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6274  00EC4C  0E02               	movlw	2
  6275  00EC4E  18DE               	xorwf	postinc2,w,c
  6276  00EC50  10DE               	iorwf	postinc2,w,c
  6277  00EC52  B4D8               	btfsc	status,2,c
  6278  00EC54  D009               	goto	u3700
  6279  00EC56  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6280  00EC5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6281  00EC5E  0E03               	movlw	3
  6282  00EC60  18DE               	xorwf	postinc2,w,c
  6283  00EC62  10DE               	iorwf	postinc2,w,c
  6284  00EC64  A4D8               	btfss	status,2,c
  6285  00EC66  D3CB               	goto	l157
  6286  00EC68                     u3700:
  6287                           
  6288                           ;standbyMode.c: 142: returnValue = 3;
  6289  00EC68  0E00               	movlw	0
  6290  00EC6A  6E08               	movwf	check_food@returnValue+1,c
  6291  00EC6C  0E03               	movlw	3
  6292  00EC6E  D386               	goto	L46
  6293  00EC70                     
  6294                           ;standbyMode.c: 148: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  6295  00EC70  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6296  00EC74  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6297  00EC78  0E03               	movlw	3
  6298  00EC7A  18DE               	xorwf	postinc2,w,c
  6299  00EC7C  10DE               	iorwf	postinc2,w,c
  6300  00EC7E  B4D8               	btfsc	status,2,c
  6301  00EC80  D3BE               	goto	l157
  6302  00EC82  EE20 F002          	lfsr	2,2
  6303  00EC86  5003               	movf	check_food@foodInput,w,c
  6304  00EC88  26D9               	addwf	fsr2l,f,c
  6305  00EC8A  5004               	movf	check_food@foodInput+1,w,c
  6306  00EC8C  22DA               	addwfc	fsr2h,f,c
  6307  00EC8E  0E03               	movlw	3
  6308  00EC90  18DE               	xorwf	postinc2,w,c
  6309  00EC92  10DE               	iorwf	postinc2,w,c
  6310  00EC94  B4D8               	btfsc	status,2,c
  6311  00EC96  D3B3               	goto	l157
  6312  00EC98  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6313  00EC9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6314  00ECA0  50DE               	movf	postinc2,w,c
  6315  00ECA2  10DE               	iorwf	postinc2,w,c
  6316  00ECA4  B4D8               	btfsc	status,2,c
  6317  00ECA6  D3AB               	goto	l157
  6318  00ECA8  EE20 F002          	lfsr	2,2
  6319  00ECAC  5003               	movf	check_food@foodInput,w,c
  6320  00ECAE  26D9               	addwf	fsr2l,f,c
  6321  00ECB0  5004               	movf	check_food@foodInput+1,w,c
  6322  00ECB2  22DA               	addwfc	fsr2h,f,c
  6323  00ECB4  50DE               	movf	postinc2,w,c
  6324  00ECB6  10DE               	iorwf	postinc2,w,c
  6325  00ECB8  B4D8               	btfsc	status,2,c
  6326  00ECBA  D3A1               	goto	l157
  6327                           
  6328                           ;standbyMode.c: 149: returnValue = 4;
  6329  00ECBC  0E00               	movlw	0
  6330  00ECBE  6E08               	movwf	check_food@returnValue+1,c
  6331  00ECC0  0E04               	movlw	4
  6332  00ECC2  D35C               	goto	L46
  6333  00ECC4                     
  6334                           ;standbyMode.c: 155: if (foodInput[1] == 3){
  6335  00ECC4  EE20 F002          	lfsr	2,2
  6336  00ECC8  5003               	movf	check_food@foodInput,w,c
  6337  00ECCA  26D9               	addwf	fsr2l,f,c
  6338  00ECCC  5004               	movf	check_food@foodInput+1,w,c
  6339  00ECCE  22DA               	addwfc	fsr2h,f,c
  6340  00ECD0  0E03               	movlw	3
  6341  00ECD2  18DE               	xorwf	postinc2,w,c
  6342  00ECD4  10DE               	iorwf	postinc2,w,c
  6343  00ECD6  A4D8               	btfss	status,2,c
  6344  00ECD8  D00C               	goto	l169
  6345                           
  6346                           ;standbyMode.c: 156: if (foodInput[0] == 1){
  6347  00ECDA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6348  00ECDE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6349  00ECE2  04DE               	decf	postinc2,w,c
  6350  00ECE4  10DE               	iorwf	postinc2,w,c
  6351  00ECE6  A4D8               	btfss	status,2,c
  6352  00ECE8  D38A               	goto	l157
  6353                           
  6354                           ;standbyMode.c: 157: returnValue = 5;
  6355  00ECEA  0E00               	movlw	0
  6356  00ECEC  6E08               	movwf	check_food@returnValue+1,c
  6357  00ECEE  0E05               	movlw	5
  6358  00ECF0  D345               	goto	L46
  6359  00ECF2                     l169:
  6360                           
  6361                           ;standbyMode.c: 160: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6362  00ECF2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6363  00ECF6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6364  00ECFA  0E03               	movlw	3
  6365  00ECFC  18DE               	xorwf	postinc2,w,c
  6366  00ECFE  10DE               	iorwf	postinc2,w,c
  6367  00ED00  B4D8               	btfsc	status,2,c
  6368  00ED02  D37D               	goto	l157
  6369  00ED04  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6370  00ED08  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6371  00ED0C  50DE               	movf	postinc2,w,c
  6372  00ED0E  10DE               	iorwf	postinc2,w,c
  6373  00ED10  B4D8               	btfsc	status,2,c
  6374  00ED12  D375               	goto	l157
  6375                           
  6376                           ;standbyMode.c: 161: returnValue = 6;
  6377  00ED14  0E00               	movlw	0
  6378  00ED16  6E08               	movwf	check_food@returnValue+1,c
  6379  00ED18  0E06               	movlw	6
  6380  00ED1A  D330               	goto	L46
  6381  00ED1C                     
  6382                           ;standbyMode.c: 167: if (foodInput[1] == 3){
  6383  00ED1C  EE20 F002          	lfsr	2,2
  6384  00ED20  5003               	movf	check_food@foodInput,w,c
  6385  00ED22  26D9               	addwf	fsr2l,f,c
  6386  00ED24  5004               	movf	check_food@foodInput+1,w,c
  6387  00ED26  22DA               	addwfc	fsr2h,f,c
  6388  00ED28  0E03               	movlw	3
  6389  00ED2A  18DE               	xorwf	postinc2,w,c
  6390  00ED2C  10DE               	iorwf	postinc2,w,c
  6391  00ED2E  A4D8               	btfss	status,2,c
  6392  00ED30  D00C               	goto	l174
  6393                           
  6394                           ;standbyMode.c: 168: if (foodInput[0] == 1){
  6395  00ED32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6396  00ED36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6397  00ED3A  04DE               	decf	postinc2,w,c
  6398  00ED3C  10DE               	iorwf	postinc2,w,c
  6399  00ED3E  A4D8               	btfss	status,2,c
  6400  00ED40  D35E               	goto	l157
  6401                           
  6402                           ;standbyMode.c: 169: returnValue = 7;
  6403  00ED42  0E00               	movlw	0
  6404  00ED44  6E08               	movwf	check_food@returnValue+1,c
  6405  00ED46  0E07               	movlw	7
  6406  00ED48  D319               	goto	L46
  6407  00ED4A                     l174:
  6408                           
  6409                           ;standbyMode.c: 172: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6410  00ED4A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6411  00ED4E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6412  00ED52  0E03               	movlw	3
  6413  00ED54  18DE               	xorwf	postinc2,w,c
  6414  00ED56  10DE               	iorwf	postinc2,w,c
  6415  00ED58  B4D8               	btfsc	status,2,c
  6416  00ED5A  D351               	goto	l157
  6417  00ED5C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6418  00ED60  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6419  00ED64  50DE               	movf	postinc2,w,c
  6420  00ED66  10DE               	iorwf	postinc2,w,c
  6421  00ED68  B4D8               	btfsc	status,2,c
  6422  00ED6A  D349               	goto	l157
  6423                           
  6424                           ;standbyMode.c: 173: returnValue = 8;
  6425  00ED6C  0E00               	movlw	0
  6426  00ED6E  6E08               	movwf	check_food@returnValue+1,c
  6427  00ED70  0E08               	movlw	8
  6428  00ED72  D304               	goto	L46
  6429  00ED74                     
  6430                           ;standbyMode.c: 179: if (foodInput[0] == 1 && foodInput[1] == 1){
  6431  00ED74  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6432  00ED78  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6433  00ED7C  04DE               	decf	postinc2,w,c
  6434  00ED7E  10DE               	iorwf	postinc2,w,c
  6435  00ED80  A4D8               	btfss	status,2,c
  6436  00ED82  D33D               	goto	l157
  6437  00ED84  EE20 F002          	lfsr	2,2
  6438  00ED88  5003               	movf	check_food@foodInput,w,c
  6439  00ED8A  26D9               	addwf	fsr2l,f,c
  6440  00ED8C  5004               	movf	check_food@foodInput+1,w,c
  6441  00ED8E  22DA               	addwfc	fsr2h,f,c
  6442  00ED90  04DE               	decf	postinc2,w,c
  6443  00ED92  10DE               	iorwf	postinc2,w,c
  6444  00ED94  A4D8               	btfss	status,2,c
  6445  00ED96  D333               	goto	l157
  6446                           
  6447                           ;standbyMode.c: 180: if (foodInput[2] == 1 || foodInput[2] == 2){
  6448  00ED98  EE20 F004          	lfsr	2,4
  6449  00ED9C  5003               	movf	check_food@foodInput,w,c
  6450  00ED9E  26D9               	addwf	fsr2l,f,c
  6451  00EDA0  5004               	movf	check_food@foodInput+1,w,c
  6452  00EDA2  22DA               	addwfc	fsr2h,f,c
  6453  00EDA4  04DE               	decf	postinc2,w,c
  6454  00EDA6  10DE               	iorwf	postinc2,w,c
  6455  00EDA8  B4D8               	btfsc	status,2,c
  6456  00EDAA  D00B               	goto	u3860
  6457  00EDAC  EE20 F004          	lfsr	2,4
  6458  00EDB0  5003               	movf	check_food@foodInput,w,c
  6459  00EDB2  26D9               	addwf	fsr2l,f,c
  6460  00EDB4  5004               	movf	check_food@foodInput+1,w,c
  6461  00EDB6  22DA               	addwfc	fsr2h,f,c
  6462  00EDB8  0E02               	movlw	2
  6463  00EDBA  18DE               	xorwf	postinc2,w,c
  6464  00EDBC  10DE               	iorwf	postinc2,w,c
  6465  00EDBE  A4D8               	btfss	status,2,c
  6466  00EDC0  D31E               	goto	l157
  6467  00EDC2                     u3860:
  6468                           
  6469                           ;standbyMode.c: 181: returnValue = 9;
  6470  00EDC2  0E00               	movlw	0
  6471  00EDC4  6E08               	movwf	check_food@returnValue+1,c
  6472  00EDC6  0E09               	movlw	9
  6473  00EDC8  D2D9               	goto	L46
  6474  00EDCA                     
  6475                           ;standbyMode.c: 188: if (foodInput[0] == 1 && foodInput[1] == 1){
  6476  00EDCA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6477  00EDCE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6478  00EDD2  04DE               	decf	postinc2,w,c
  6479  00EDD4  10DE               	iorwf	postinc2,w,c
  6480  00EDD6  A4D8               	btfss	status,2,c
  6481  00EDD8  D312               	goto	l157
  6482  00EDDA  EE20 F002          	lfsr	2,2
  6483  00EDDE  5003               	movf	check_food@foodInput,w,c
  6484  00EDE0  26D9               	addwf	fsr2l,f,c
  6485  00EDE2  5004               	movf	check_food@foodInput+1,w,c
  6486  00EDE4  22DA               	addwfc	fsr2h,f,c
  6487  00EDE6  04DE               	decf	postinc2,w,c
  6488  00EDE8  10DE               	iorwf	postinc2,w,c
  6489  00EDEA  A4D8               	btfss	status,2,c
  6490  00EDEC  D308               	goto	l157
  6491                           
  6492                           ;standbyMode.c: 189: if (foodInput[2] == 1 || foodInput[2] == 2){
  6493  00EDEE  EE20 F004          	lfsr	2,4
  6494  00EDF2  5003               	movf	check_food@foodInput,w,c
  6495  00EDF4  26D9               	addwf	fsr2l,f,c
  6496  00EDF6  5004               	movf	check_food@foodInput+1,w,c
  6497  00EDF8  22DA               	addwfc	fsr2h,f,c
  6498  00EDFA  04DE               	decf	postinc2,w,c
  6499  00EDFC  10DE               	iorwf	postinc2,w,c
  6500  00EDFE  B4D8               	btfsc	status,2,c
  6501  00EE00  D00B               	goto	u3900
  6502  00EE02  EE20 F004          	lfsr	2,4
  6503  00EE06  5003               	movf	check_food@foodInput,w,c
  6504  00EE08  26D9               	addwf	fsr2l,f,c
  6505  00EE0A  5004               	movf	check_food@foodInput+1,w,c
  6506  00EE0C  22DA               	addwfc	fsr2h,f,c
  6507  00EE0E  0E02               	movlw	2
  6508  00EE10  18DE               	xorwf	postinc2,w,c
  6509  00EE12  10DE               	iorwf	postinc2,w,c
  6510  00EE14  A4D8               	btfss	status,2,c
  6511  00EE16  D2F3               	goto	l157
  6512  00EE18                     u3900:
  6513                           
  6514                           ;standbyMode.c: 190: returnValue = 10;
  6515  00EE18  0E00               	movlw	0
  6516  00EE1A  6E08               	movwf	check_food@returnValue+1,c
  6517  00EE1C  0E0A               	movlw	10
  6518  00EE1E  D2AE               	goto	L46
  6519  00EE20                     
  6520                           ;standbyMode.c: 197: if (foodInput[1] == 1 && foodInput[2] == 1){
  6521  00EE20  EE20 F002          	lfsr	2,2
  6522  00EE24  5003               	movf	check_food@foodInput,w,c
  6523  00EE26  26D9               	addwf	fsr2l,f,c
  6524  00EE28  5004               	movf	check_food@foodInput+1,w,c
  6525  00EE2A  22DA               	addwfc	fsr2h,f,c
  6526  00EE2C  04DE               	decf	postinc2,w,c
  6527  00EE2E  10DE               	iorwf	postinc2,w,c
  6528  00EE30  A4D8               	btfss	status,2,c
  6529  00EE32  D2E5               	goto	l157
  6530  00EE34  EE20 F004          	lfsr	2,4
  6531  00EE38  5003               	movf	check_food@foodInput,w,c
  6532  00EE3A  26D9               	addwf	fsr2l,f,c
  6533  00EE3C  5004               	movf	check_food@foodInput+1,w,c
  6534  00EE3E  22DA               	addwfc	fsr2h,f,c
  6535  00EE40  04DE               	decf	postinc2,w,c
  6536  00EE42  10DE               	iorwf	postinc2,w,c
  6537  00EE44  A4D8               	btfss	status,2,c
  6538  00EE46  D2DB               	goto	l157
  6539                           
  6540                           ;standbyMode.c: 198: if (foodInput[0] == 1 || foodInput[0] == 2){
  6541  00EE48  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6542  00EE4C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6543  00EE50  04DE               	decf	postinc2,w,c
  6544  00EE52  10DE               	iorwf	postinc2,w,c
  6545  00EE54  B4D8               	btfsc	status,2,c
  6546  00EE56  D009               	goto	u3940
  6547  00EE58  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6548  00EE5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6549  00EE60  0E02               	movlw	2
  6550  00EE62  18DE               	xorwf	postinc2,w,c
  6551  00EE64  10DE               	iorwf	postinc2,w,c
  6552  00EE66  A4D8               	btfss	status,2,c
  6553  00EE68  D2CA               	goto	l157
  6554  00EE6A                     u3940:
  6555                           
  6556                           ;standbyMode.c: 199: returnValue = 11;
  6557  00EE6A  0E00               	movlw	0
  6558  00EE6C  6E08               	movwf	check_food@returnValue+1,c
  6559  00EE6E  0E0B               	movlw	11
  6560  00EE70  D285               	goto	L46
  6561  00EE72                     
  6562                           ;standbyMode.c: 206: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6563  00EE72  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6564  00EE76  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6565  00EE7A  04DE               	decf	postinc2,w,c
  6566  00EE7C  10DE               	iorwf	postinc2,w,c
  6567  00EE7E  A4D8               	btfss	status,2,c
  6568  00EE80  D018               	goto	l194
  6569  00EE82  EE20 F002          	lfsr	2,2
  6570  00EE86  5003               	movf	check_food@foodInput,w,c
  6571  00EE88  26D9               	addwf	fsr2l,f,c
  6572  00EE8A  5004               	movf	check_food@foodInput+1,w,c
  6573  00EE8C  22DA               	addwfc	fsr2h,f,c
  6574  00EE8E  04DE               	decf	postinc2,w,c
  6575  00EE90  10DE               	iorwf	postinc2,w,c
  6576  00EE92  A4D8               	btfss	status,2,c
  6577  00EE94  D00E               	goto	l194
  6578  00EE96  EE20 F004          	lfsr	2,4
  6579  00EE9A  5003               	movf	check_food@foodInput,w,c
  6580  00EE9C  26D9               	addwf	fsr2l,f,c
  6581  00EE9E  5004               	movf	check_food@foodInput+1,w,c
  6582  00EEA0  22DA               	addwfc	fsr2h,f,c
  6583  00EEA2  04DE               	decf	postinc2,w,c
  6584  00EEA4  10DE               	iorwf	postinc2,w,c
  6585  00EEA6  A4D8               	btfss	status,2,c
  6586  00EEA8  D004               	goto	l194
  6587                           
  6588                           ;standbyMode.c: 207: returnValue = 12;
  6589  00EEAA  0E00               	movlw	0
  6590  00EEAC  6E08               	movwf	check_food@returnValue+1,c
  6591  00EEAE  0E0C               	movlw	12
  6592  00EEB0  D265               	goto	L46
  6593  00EEB2                     l194:
  6594                           
  6595                           ;standbyMode.c: 209: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6596  00EEB2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6597  00EEB6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6598  00EEBA  0E02               	movlw	2
  6599  00EEBC  18DE               	xorwf	postinc2,w,c
  6600  00EEBE  10DE               	iorwf	postinc2,w,c
  6601  00EEC0  A4D8               	btfss	status,2,c
  6602  00EEC2  D018               	goto	l196
  6603  00EEC4  EE20 F002          	lfsr	2,2
  6604  00EEC8  5003               	movf	check_food@foodInput,w,c
  6605  00EECA  26D9               	addwf	fsr2l,f,c
  6606  00EECC  5004               	movf	check_food@foodInput+1,w,c
  6607  00EECE  22DA               	addwfc	fsr2h,f,c
  6608  00EED0  04DE               	decf	postinc2,w,c
  6609  00EED2  10DE               	iorwf	postinc2,w,c
  6610  00EED4  A4D8               	btfss	status,2,c
  6611  00EED6  D00E               	goto	l196
  6612  00EED8  EE20 F004          	lfsr	2,4
  6613  00EEDC  5003               	movf	check_food@foodInput,w,c
  6614  00EEDE  26D9               	addwf	fsr2l,f,c
  6615  00EEE0  5004               	movf	check_food@foodInput+1,w,c
  6616  00EEE2  22DA               	addwfc	fsr2h,f,c
  6617  00EEE4  04DE               	decf	postinc2,w,c
  6618  00EEE6  10DE               	iorwf	postinc2,w,c
  6619  00EEE8  A4D8               	btfss	status,2,c
  6620  00EEEA  D004               	goto	l196
  6621                           
  6622                           ;standbyMode.c: 210: returnValue = 13;
  6623  00EEEC  0E00               	movlw	0
  6624  00EEEE  6E08               	movwf	check_food@returnValue+1,c
  6625  00EEF0  0E0D               	movlw	13
  6626  00EEF2  D244               	goto	L46
  6627  00EEF4                     l196:
  6628                           
  6629                           ;standbyMode.c: 212: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6630  00EEF4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6631  00EEF8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6632  00EEFC  04DE               	decf	postinc2,w,c
  6633  00EEFE  10DE               	iorwf	postinc2,w,c
  6634  00EF00  A4D8               	btfss	status,2,c
  6635  00EF02  D019               	goto	l198
  6636  00EF04  EE20 F002          	lfsr	2,2
  6637  00EF08  5003               	movf	check_food@foodInput,w,c
  6638  00EF0A  26D9               	addwf	fsr2l,f,c
  6639  00EF0C  5004               	movf	check_food@foodInput+1,w,c
  6640  00EF0E  22DA               	addwfc	fsr2h,f,c
  6641  00EF10  0E02               	movlw	2
  6642  00EF12  18DE               	xorwf	postinc2,w,c
  6643  00EF14  10DE               	iorwf	postinc2,w,c
  6644  00EF16  A4D8               	btfss	status,2,c
  6645  00EF18  D00E               	goto	l198
  6646  00EF1A  EE20 F004          	lfsr	2,4
  6647  00EF1E  5003               	movf	check_food@foodInput,w,c
  6648  00EF20  26D9               	addwf	fsr2l,f,c
  6649  00EF22  5004               	movf	check_food@foodInput+1,w,c
  6650  00EF24  22DA               	addwfc	fsr2h,f,c
  6651  00EF26  04DE               	decf	postinc2,w,c
  6652  00EF28  10DE               	iorwf	postinc2,w,c
  6653  00EF2A  A4D8               	btfss	status,2,c
  6654  00EF2C  D004               	goto	l198
  6655                           
  6656                           ;standbyMode.c: 213: returnValue = 14;
  6657  00EF2E  0E00               	movlw	0
  6658  00EF30  6E08               	movwf	check_food@returnValue+1,c
  6659  00EF32  0E0E               	movlw	14
  6660  00EF34  D223               	goto	L46
  6661  00EF36                     l198:
  6662                           
  6663                           ;standbyMode.c: 215: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6664  00EF36  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6665  00EF3A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6666  00EF3E  04DE               	decf	postinc2,w,c
  6667  00EF40  10DE               	iorwf	postinc2,w,c
  6668  00EF42  A4D8               	btfss	status,2,c
  6669  00EF44  D25C               	goto	l157
  6670  00EF46  EE20 F002          	lfsr	2,2
  6671  00EF4A  5003               	movf	check_food@foodInput,w,c
  6672  00EF4C  26D9               	addwf	fsr2l,f,c
  6673  00EF4E  5004               	movf	check_food@foodInput+1,w,c
  6674  00EF50  22DA               	addwfc	fsr2h,f,c
  6675  00EF52  04DE               	decf	postinc2,w,c
  6676  00EF54  10DE               	iorwf	postinc2,w,c
  6677  00EF56  A4D8               	btfss	status,2,c
  6678  00EF58  D252               	goto	l157
  6679  00EF5A  EE20 F004          	lfsr	2,4
  6680  00EF5E  5003               	movf	check_food@foodInput,w,c
  6681  00EF60  26D9               	addwf	fsr2l,f,c
  6682  00EF62  5004               	movf	check_food@foodInput+1,w,c
  6683  00EF64  22DA               	addwfc	fsr2h,f,c
  6684  00EF66  0E02               	movlw	2
  6685  00EF68  18DE               	xorwf	postinc2,w,c
  6686  00EF6A  10DE               	iorwf	postinc2,w,c
  6687  00EF6C  A4D8               	btfss	status,2,c
  6688  00EF6E  D247               	goto	l157
  6689                           
  6690                           ;standbyMode.c: 216: returnValue = 15;
  6691  00EF70  0E00               	movlw	0
  6692  00EF72  6E08               	movwf	check_food@returnValue+1,c
  6693  00EF74  0E0F               	movlw	15
  6694  00EF76  D202               	goto	L46
  6695  00EF78                     
  6696                           ;standbyMode.c: 222: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6697  00EF78  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6698  00EF7C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6699  00EF80  04DE               	decf	postinc2,w,c
  6700  00EF82  10DE               	iorwf	postinc2,w,c
  6701  00EF84  A4D8               	btfss	status,2,c
  6702  00EF86  D018               	goto	l202
  6703  00EF88  EE20 F002          	lfsr	2,2
  6704  00EF8C  5003               	movf	check_food@foodInput,w,c
  6705  00EF8E  26D9               	addwf	fsr2l,f,c
  6706  00EF90  5004               	movf	check_food@foodInput+1,w,c
  6707  00EF92  22DA               	addwfc	fsr2h,f,c
  6708  00EF94  04DE               	decf	postinc2,w,c
  6709  00EF96  10DE               	iorwf	postinc2,w,c
  6710  00EF98  A4D8               	btfss	status,2,c
  6711  00EF9A  D00E               	goto	l202
  6712  00EF9C  EE20 F004          	lfsr	2,4
  6713  00EFA0  5003               	movf	check_food@foodInput,w,c
  6714  00EFA2  26D9               	addwf	fsr2l,f,c
  6715  00EFA4  5004               	movf	check_food@foodInput+1,w,c
  6716  00EFA6  22DA               	addwfc	fsr2h,f,c
  6717  00EFA8  04DE               	decf	postinc2,w,c
  6718  00EFAA  10DE               	iorwf	postinc2,w,c
  6719  00EFAC  A4D8               	btfss	status,2,c
  6720  00EFAE  D004               	goto	l202
  6721                           
  6722                           ;standbyMode.c: 223: returnValue = 16;
  6723  00EFB0  0E00               	movlw	0
  6724  00EFB2  6E08               	movwf	check_food@returnValue+1,c
  6725  00EFB4  0E10               	movlw	16
  6726  00EFB6  D1E2               	goto	L46
  6727  00EFB8                     l202:
  6728                           
  6729                           ;standbyMode.c: 225: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6730  00EFB8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6731  00EFBC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6732  00EFC0  0E02               	movlw	2
  6733  00EFC2  18DE               	xorwf	postinc2,w,c
  6734  00EFC4  10DE               	iorwf	postinc2,w,c
  6735  00EFC6  A4D8               	btfss	status,2,c
  6736  00EFC8  D018               	goto	l204
  6737  00EFCA  EE20 F002          	lfsr	2,2
  6738  00EFCE  5003               	movf	check_food@foodInput,w,c
  6739  00EFD0  26D9               	addwf	fsr2l,f,c
  6740  00EFD2  5004               	movf	check_food@foodInput+1,w,c
  6741  00EFD4  22DA               	addwfc	fsr2h,f,c
  6742  00EFD6  04DE               	decf	postinc2,w,c
  6743  00EFD8  10DE               	iorwf	postinc2,w,c
  6744  00EFDA  A4D8               	btfss	status,2,c
  6745  00EFDC  D00E               	goto	l204
  6746  00EFDE  EE20 F004          	lfsr	2,4
  6747  00EFE2  5003               	movf	check_food@foodInput,w,c
  6748  00EFE4  26D9               	addwf	fsr2l,f,c
  6749  00EFE6  5004               	movf	check_food@foodInput+1,w,c
  6750  00EFE8  22DA               	addwfc	fsr2h,f,c
  6751  00EFEA  04DE               	decf	postinc2,w,c
  6752  00EFEC  10DE               	iorwf	postinc2,w,c
  6753  00EFEE  A4D8               	btfss	status,2,c
  6754  00EFF0  D004               	goto	l204
  6755                           
  6756                           ;standbyMode.c: 226: returnValue = 17;
  6757  00EFF2  0E00               	movlw	0
  6758  00EFF4  6E08               	movwf	check_food@returnValue+1,c
  6759  00EFF6  0E11               	movlw	17
  6760  00EFF8  D1C1               	goto	L46
  6761  00EFFA                     l204:
  6762                           
  6763                           ;standbyMode.c: 228: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6764  00EFFA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6765  00EFFE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6766  00F002  04DE               	decf	postinc2,w,c
  6767  00F004  10DE               	iorwf	postinc2,w,c
  6768  00F006  A4D8               	btfss	status,2,c
  6769  00F008  D019               	goto	l206
  6770  00F00A  EE20 F002          	lfsr	2,2
  6771  00F00E  5003               	movf	check_food@foodInput,w,c
  6772  00F010  26D9               	addwf	fsr2l,f,c
  6773  00F012  5004               	movf	check_food@foodInput+1,w,c
  6774  00F014  22DA               	addwfc	fsr2h,f,c
  6775  00F016  0E02               	movlw	2
  6776  00F018  18DE               	xorwf	postinc2,w,c
  6777  00F01A  10DE               	iorwf	postinc2,w,c
  6778  00F01C  A4D8               	btfss	status,2,c
  6779  00F01E  D00E               	goto	l206
  6780  00F020  EE20 F004          	lfsr	2,4
  6781  00F024  5003               	movf	check_food@foodInput,w,c
  6782  00F026  26D9               	addwf	fsr2l,f,c
  6783  00F028  5004               	movf	check_food@foodInput+1,w,c
  6784  00F02A  22DA               	addwfc	fsr2h,f,c
  6785  00F02C  04DE               	decf	postinc2,w,c
  6786  00F02E  10DE               	iorwf	postinc2,w,c
  6787  00F030  A4D8               	btfss	status,2,c
  6788  00F032  D004               	goto	l206
  6789                           
  6790                           ;standbyMode.c: 229: returnValue = 18;
  6791  00F034  0E00               	movlw	0
  6792  00F036  6E08               	movwf	check_food@returnValue+1,c
  6793  00F038  0E12               	movlw	18
  6794  00F03A  D1A0               	goto	L46
  6795  00F03C                     l206:
  6796                           
  6797                           ;standbyMode.c: 231: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6798  00F03C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6799  00F040  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6800  00F044  04DE               	decf	postinc2,w,c
  6801  00F046  10DE               	iorwf	postinc2,w,c
  6802  00F048  A4D8               	btfss	status,2,c
  6803  00F04A  D1D9               	goto	l157
  6804  00F04C  EE20 F002          	lfsr	2,2
  6805  00F050  5003               	movf	check_food@foodInput,w,c
  6806  00F052  26D9               	addwf	fsr2l,f,c
  6807  00F054  5004               	movf	check_food@foodInput+1,w,c
  6808  00F056  22DA               	addwfc	fsr2h,f,c
  6809  00F058  04DE               	decf	postinc2,w,c
  6810  00F05A  10DE               	iorwf	postinc2,w,c
  6811  00F05C  A4D8               	btfss	status,2,c
  6812  00F05E  D1CF               	goto	l157
  6813  00F060  EE20 F004          	lfsr	2,4
  6814  00F064  5003               	movf	check_food@foodInput,w,c
  6815  00F066  26D9               	addwf	fsr2l,f,c
  6816  00F068  5004               	movf	check_food@foodInput+1,w,c
  6817  00F06A  22DA               	addwfc	fsr2h,f,c
  6818  00F06C  0E02               	movlw	2
  6819  00F06E  18DE               	xorwf	postinc2,w,c
  6820  00F070  10DE               	iorwf	postinc2,w,c
  6821  00F072  A4D8               	btfss	status,2,c
  6822  00F074  D1C4               	goto	l157
  6823                           
  6824                           ;standbyMode.c: 232: returnValue = 19;
  6825  00F076  0E00               	movlw	0
  6826  00F078  6E08               	movwf	check_food@returnValue+1,c
  6827  00F07A  0E13               	movlw	19
  6828  00F07C  D17F               	goto	L46
  6829  00F07E                     
  6830                           ;standbyMode.c: 238: if (foodInput[0] == 1 && foodInput[1] == 1){
  6831  00F07E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6832  00F082  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6833  00F086  04DE               	decf	postinc2,w,c
  6834  00F088  10DE               	iorwf	postinc2,w,c
  6835  00F08A  A4D8               	btfss	status,2,c
  6836  00F08C  D1B8               	goto	l157
  6837  00F08E  EE20 F002          	lfsr	2,2
  6838  00F092  5003               	movf	check_food@foodInput,w,c
  6839  00F094  26D9               	addwf	fsr2l,f,c
  6840  00F096  5004               	movf	check_food@foodInput+1,w,c
  6841  00F098  22DA               	addwfc	fsr2h,f,c
  6842  00F09A  04DE               	decf	postinc2,w,c
  6843  00F09C  10DE               	iorwf	postinc2,w,c
  6844  00F09E  A4D8               	btfss	status,2,c
  6845  00F0A0  D1AE               	goto	l157
  6846                           
  6847                           ;standbyMode.c: 239: if (foodInput[2] == 1 || foodInput[2] == 2){
  6848  00F0A2  EE20 F004          	lfsr	2,4
  6849  00F0A6  5003               	movf	check_food@foodInput,w,c
  6850  00F0A8  26D9               	addwf	fsr2l,f,c
  6851  00F0AA  5004               	movf	check_food@foodInput+1,w,c
  6852  00F0AC  22DA               	addwfc	fsr2h,f,c
  6853  00F0AE  04DE               	decf	postinc2,w,c
  6854  00F0B0  10DE               	iorwf	postinc2,w,c
  6855  00F0B2  B4D8               	btfsc	status,2,c
  6856  00F0B4  D00B               	goto	u4220
  6857  00F0B6  EE20 F004          	lfsr	2,4
  6858  00F0BA  5003               	movf	check_food@foodInput,w,c
  6859  00F0BC  26D9               	addwf	fsr2l,f,c
  6860  00F0BE  5004               	movf	check_food@foodInput+1,w,c
  6861  00F0C0  22DA               	addwfc	fsr2h,f,c
  6862  00F0C2  0E02               	movlw	2
  6863  00F0C4  18DE               	xorwf	postinc2,w,c
  6864  00F0C6  10DE               	iorwf	postinc2,w,c
  6865  00F0C8  A4D8               	btfss	status,2,c
  6866  00F0CA  D199               	goto	l157
  6867  00F0CC                     u4220:
  6868                           
  6869                           ;standbyMode.c: 240: returnValue = 20;
  6870  00F0CC  0E00               	movlw	0
  6871  00F0CE  6E08               	movwf	check_food@returnValue+1,c
  6872  00F0D0  0E14               	movlw	20
  6873  00F0D2  D154               	goto	L46
  6874  00F0D4                     
  6875                           ;standbyMode.c: 247: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6876  00F0D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6877  00F0D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6878  00F0DC  04DE               	decf	postinc2,w,c
  6879  00F0DE  10DE               	iorwf	postinc2,w,c
  6880  00F0E0  A4D8               	btfss	status,2,c
  6881  00F0E2  D018               	goto	l215
  6882  00F0E4  EE20 F002          	lfsr	2,2
  6883  00F0E8  5003               	movf	check_food@foodInput,w,c
  6884  00F0EA  26D9               	addwf	fsr2l,f,c
  6885  00F0EC  5004               	movf	check_food@foodInput+1,w,c
  6886  00F0EE  22DA               	addwfc	fsr2h,f,c
  6887  00F0F0  04DE               	decf	postinc2,w,c
  6888  00F0F2  10DE               	iorwf	postinc2,w,c
  6889  00F0F4  A4D8               	btfss	status,2,c
  6890  00F0F6  D00E               	goto	l215
  6891  00F0F8  EE20 F004          	lfsr	2,4
  6892  00F0FC  5003               	movf	check_food@foodInput,w,c
  6893  00F0FE  26D9               	addwf	fsr2l,f,c
  6894  00F100  5004               	movf	check_food@foodInput+1,w,c
  6895  00F102  22DA               	addwfc	fsr2h,f,c
  6896  00F104  04DE               	decf	postinc2,w,c
  6897  00F106  10DE               	iorwf	postinc2,w,c
  6898  00F108  A4D8               	btfss	status,2,c
  6899  00F10A  D004               	goto	l215
  6900                           
  6901                           ;standbyMode.c: 248: returnValue = 21;
  6902  00F10C  0E00               	movlw	0
  6903  00F10E  6E08               	movwf	check_food@returnValue+1,c
  6904  00F110  0E15               	movlw	21
  6905  00F112  D134               	goto	L46
  6906  00F114                     l215:
  6907                           
  6908                           ;standbyMode.c: 250: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6909  00F114  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6910  00F118  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6911  00F11C  0E02               	movlw	2
  6912  00F11E  18DE               	xorwf	postinc2,w,c
  6913  00F120  10DE               	iorwf	postinc2,w,c
  6914  00F122  A4D8               	btfss	status,2,c
  6915  00F124  D018               	goto	l217
  6916  00F126  EE20 F002          	lfsr	2,2
  6917  00F12A  5003               	movf	check_food@foodInput,w,c
  6918  00F12C  26D9               	addwf	fsr2l,f,c
  6919  00F12E  5004               	movf	check_food@foodInput+1,w,c
  6920  00F130  22DA               	addwfc	fsr2h,f,c
  6921  00F132  04DE               	decf	postinc2,w,c
  6922  00F134  10DE               	iorwf	postinc2,w,c
  6923  00F136  A4D8               	btfss	status,2,c
  6924  00F138  D00E               	goto	l217
  6925  00F13A  EE20 F004          	lfsr	2,4
  6926  00F13E  5003               	movf	check_food@foodInput,w,c
  6927  00F140  26D9               	addwf	fsr2l,f,c
  6928  00F142  5004               	movf	check_food@foodInput+1,w,c
  6929  00F144  22DA               	addwfc	fsr2h,f,c
  6930  00F146  04DE               	decf	postinc2,w,c
  6931  00F148  10DE               	iorwf	postinc2,w,c
  6932  00F14A  A4D8               	btfss	status,2,c
  6933  00F14C  D004               	goto	l217
  6934                           
  6935                           ;standbyMode.c: 251: returnValue = 22;
  6936  00F14E  0E00               	movlw	0
  6937  00F150  6E08               	movwf	check_food@returnValue+1,c
  6938  00F152  0E16               	movlw	22
  6939  00F154  D113               	goto	L46
  6940  00F156                     l217:
  6941                           
  6942                           ;standbyMode.c: 253: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6943  00F156  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6944  00F15A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6945  00F15E  04DE               	decf	postinc2,w,c
  6946  00F160  10DE               	iorwf	postinc2,w,c
  6947  00F162  A4D8               	btfss	status,2,c
  6948  00F164  D019               	goto	l219
  6949  00F166  EE20 F002          	lfsr	2,2
  6950  00F16A  5003               	movf	check_food@foodInput,w,c
  6951  00F16C  26D9               	addwf	fsr2l,f,c
  6952  00F16E  5004               	movf	check_food@foodInput+1,w,c
  6953  00F170  22DA               	addwfc	fsr2h,f,c
  6954  00F172  0E02               	movlw	2
  6955  00F174  18DE               	xorwf	postinc2,w,c
  6956  00F176  10DE               	iorwf	postinc2,w,c
  6957  00F178  A4D8               	btfss	status,2,c
  6958  00F17A  D00E               	goto	l219
  6959  00F17C  EE20 F004          	lfsr	2,4
  6960  00F180  5003               	movf	check_food@foodInput,w,c
  6961  00F182  26D9               	addwf	fsr2l,f,c
  6962  00F184  5004               	movf	check_food@foodInput+1,w,c
  6963  00F186  22DA               	addwfc	fsr2h,f,c
  6964  00F188  04DE               	decf	postinc2,w,c
  6965  00F18A  10DE               	iorwf	postinc2,w,c
  6966  00F18C  A4D8               	btfss	status,2,c
  6967  00F18E  D004               	goto	l219
  6968                           
  6969                           ;standbyMode.c: 254: returnValue = 23;
  6970  00F190  0E00               	movlw	0
  6971  00F192  6E08               	movwf	check_food@returnValue+1,c
  6972  00F194  0E17               	movlw	23
  6973  00F196  D0F2               	goto	L46
  6974  00F198                     l219:
  6975                           
  6976                           ;standbyMode.c: 256: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6977  00F198  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6978  00F19C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6979  00F1A0  04DE               	decf	postinc2,w,c
  6980  00F1A2  10DE               	iorwf	postinc2,w,c
  6981  00F1A4  A4D8               	btfss	status,2,c
  6982  00F1A6  D12B               	goto	l157
  6983  00F1A8  EE20 F002          	lfsr	2,2
  6984  00F1AC  5003               	movf	check_food@foodInput,w,c
  6985  00F1AE  26D9               	addwf	fsr2l,f,c
  6986  00F1B0  5004               	movf	check_food@foodInput+1,w,c
  6987  00F1B2  22DA               	addwfc	fsr2h,f,c
  6988  00F1B4  04DE               	decf	postinc2,w,c
  6989  00F1B6  10DE               	iorwf	postinc2,w,c
  6990  00F1B8  A4D8               	btfss	status,2,c
  6991  00F1BA  D121               	goto	l157
  6992  00F1BC  EE20 F004          	lfsr	2,4
  6993  00F1C0  5003               	movf	check_food@foodInput,w,c
  6994  00F1C2  26D9               	addwf	fsr2l,f,c
  6995  00F1C4  5004               	movf	check_food@foodInput+1,w,c
  6996  00F1C6  22DA               	addwfc	fsr2h,f,c
  6997  00F1C8  0E02               	movlw	2
  6998  00F1CA  18DE               	xorwf	postinc2,w,c
  6999  00F1CC  10DE               	iorwf	postinc2,w,c
  7000  00F1CE  A4D8               	btfss	status,2,c
  7001  00F1D0  D116               	goto	l157
  7002                           
  7003                           ;standbyMode.c: 257: returnValue = 24;
  7004  00F1D2  0E00               	movlw	0
  7005  00F1D4  6E08               	movwf	check_food@returnValue+1,c
  7006  00F1D6  0E18               	movlw	24
  7007  00F1D8  D0D1               	goto	L46
  7008  00F1DA                     
  7009                           ;standbyMode.c: 263: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7010  00F1DA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7011  00F1DE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7012  00F1E2  04DE               	decf	postinc2,w,c
  7013  00F1E4  10DE               	iorwf	postinc2,w,c
  7014  00F1E6  A4D8               	btfss	status,2,c
  7015  00F1E8  D10A               	goto	l157
  7016  00F1EA  EE20 F002          	lfsr	2,2
  7017  00F1EE  5003               	movf	check_food@foodInput,w,c
  7018  00F1F0  26D9               	addwf	fsr2l,f,c
  7019  00F1F2  5004               	movf	check_food@foodInput+1,w,c
  7020  00F1F4  22DA               	addwfc	fsr2h,f,c
  7021  00F1F6  04DE               	decf	postinc2,w,c
  7022  00F1F8  10DE               	iorwf	postinc2,w,c
  7023  00F1FA  A4D8               	btfss	status,2,c
  7024  00F1FC  D100               	goto	l157
  7025  00F1FE  EE20 F004          	lfsr	2,4
  7026  00F202  5003               	movf	check_food@foodInput,w,c
  7027  00F204  26D9               	addwf	fsr2l,f,c
  7028  00F206  5004               	movf	check_food@foodInput+1,w,c
  7029  00F208  22DA               	addwfc	fsr2h,f,c
  7030  00F20A  04DE               	decf	postinc2,w,c
  7031  00F20C  10DE               	iorwf	postinc2,w,c
  7032  00F20E  A4D8               	btfss	status,2,c
  7033  00F210  D0F6               	goto	l157
  7034  00F212  EE20 F006          	lfsr	2,6
  7035  00F216  5003               	movf	check_food@foodInput,w,c
  7036  00F218  26D9               	addwf	fsr2l,f,c
  7037  00F21A  5004               	movf	check_food@foodInput+1,w,c
  7038  00F21C  22DA               	addwfc	fsr2h,f,c
  7039  00F21E  04DE               	decf	postinc2,w,c
  7040  00F220  10DE               	iorwf	postinc2,w,c
  7041  00F222  A4D8               	btfss	status,2,c
  7042  00F224  D0EC               	goto	l157
  7043                           
  7044                           ;standbyMode.c: 264: returnValue = 25;
  7045  00F226  0E00               	movlw	0
  7046  00F228  6E08               	movwf	check_food@returnValue+1,c
  7047  00F22A  0E19               	movlw	25
  7048  00F22C  D0A7               	goto	L46
  7049  00F22E                     
  7050                           ;standbyMode.c: 270: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7051  00F22E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7052  00F232  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7053  00F236  04DE               	decf	postinc2,w,c
  7054  00F238  10DE               	iorwf	postinc2,w,c
  7055  00F23A  A4D8               	btfss	status,2,c
  7056  00F23C  D0E0               	goto	l157
  7057  00F23E  EE20 F002          	lfsr	2,2
  7058  00F242  5003               	movf	check_food@foodInput,w,c
  7059  00F244  26D9               	addwf	fsr2l,f,c
  7060  00F246  5004               	movf	check_food@foodInput+1,w,c
  7061  00F248  22DA               	addwfc	fsr2h,f,c
  7062  00F24A  04DE               	decf	postinc2,w,c
  7063  00F24C  10DE               	iorwf	postinc2,w,c
  7064  00F24E  A4D8               	btfss	status,2,c
  7065  00F250  D0D6               	goto	l157
  7066  00F252  EE20 F004          	lfsr	2,4
  7067  00F256  5003               	movf	check_food@foodInput,w,c
  7068  00F258  26D9               	addwf	fsr2l,f,c
  7069  00F25A  5004               	movf	check_food@foodInput+1,w,c
  7070  00F25C  22DA               	addwfc	fsr2h,f,c
  7071  00F25E  04DE               	decf	postinc2,w,c
  7072  00F260  10DE               	iorwf	postinc2,w,c
  7073  00F262  A4D8               	btfss	status,2,c
  7074  00F264  D0CC               	goto	l157
  7075  00F266  EE20 F006          	lfsr	2,6
  7076  00F26A  5003               	movf	check_food@foodInput,w,c
  7077  00F26C  26D9               	addwf	fsr2l,f,c
  7078  00F26E  5004               	movf	check_food@foodInput+1,w,c
  7079  00F270  22DA               	addwfc	fsr2h,f,c
  7080  00F272  04DE               	decf	postinc2,w,c
  7081  00F274  10DE               	iorwf	postinc2,w,c
  7082  00F276  A4D8               	btfss	status,2,c
  7083  00F278  D0C2               	goto	l157
  7084                           
  7085                           ;standbyMode.c: 271: returnValue = 26;
  7086  00F27A  0E00               	movlw	0
  7087  00F27C  6E08               	movwf	check_food@returnValue+1,c
  7088  00F27E  0E1A               	movlw	26
  7089  00F280  D07D               	goto	L46
  7090  00F282                     
  7091                           ;standbyMode.c: 277: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7092  00F282  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7093  00F286  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7094  00F28A  04DE               	decf	postinc2,w,c
  7095  00F28C  10DE               	iorwf	postinc2,w,c
  7096  00F28E  A4D8               	btfss	status,2,c
  7097  00F290  D0B6               	goto	l157
  7098  00F292  EE20 F002          	lfsr	2,2
  7099  00F296  5003               	movf	check_food@foodInput,w,c
  7100  00F298  26D9               	addwf	fsr2l,f,c
  7101  00F29A  5004               	movf	check_food@foodInput+1,w,c
  7102  00F29C  22DA               	addwfc	fsr2h,f,c
  7103  00F29E  04DE               	decf	postinc2,w,c
  7104  00F2A0  10DE               	iorwf	postinc2,w,c
  7105  00F2A2  A4D8               	btfss	status,2,c
  7106  00F2A4  D0AC               	goto	l157
  7107  00F2A6  EE20 F004          	lfsr	2,4
  7108  00F2AA  5003               	movf	check_food@foodInput,w,c
  7109  00F2AC  26D9               	addwf	fsr2l,f,c
  7110  00F2AE  5004               	movf	check_food@foodInput+1,w,c
  7111  00F2B0  22DA               	addwfc	fsr2h,f,c
  7112  00F2B2  04DE               	decf	postinc2,w,c
  7113  00F2B4  10DE               	iorwf	postinc2,w,c
  7114  00F2B6  A4D8               	btfss	status,2,c
  7115  00F2B8  D0A2               	goto	l157
  7116  00F2BA  EE20 F006          	lfsr	2,6
  7117  00F2BE  5003               	movf	check_food@foodInput,w,c
  7118  00F2C0  26D9               	addwf	fsr2l,f,c
  7119  00F2C2  5004               	movf	check_food@foodInput+1,w,c
  7120  00F2C4  22DA               	addwfc	fsr2h,f,c
  7121  00F2C6  04DE               	decf	postinc2,w,c
  7122  00F2C8  10DE               	iorwf	postinc2,w,c
  7123  00F2CA  A4D8               	btfss	status,2,c
  7124  00F2CC  D098               	goto	l157
  7125                           
  7126                           ;standbyMode.c: 278: returnValue = 27;
  7127  00F2CE  0E00               	movlw	0
  7128  00F2D0  6E08               	movwf	check_food@returnValue+1,c
  7129  00F2D2  0E1B               	movlw	27
  7130  00F2D4  D053               	goto	L46
  7131  00F2D6                     
  7132                           ;standbyMode.c: 284: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7133  00F2D6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7134  00F2DA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7135  00F2DE  04DE               	decf	postinc2,w,c
  7136  00F2E0  10DE               	iorwf	postinc2,w,c
  7137  00F2E2  A4D8               	btfss	status,2,c
  7138  00F2E4  D08C               	goto	l157
  7139  00F2E6  EE20 F002          	lfsr	2,2
  7140  00F2EA  5003               	movf	check_food@foodInput,w,c
  7141  00F2EC  26D9               	addwf	fsr2l,f,c
  7142  00F2EE  5004               	movf	check_food@foodInput+1,w,c
  7143  00F2F0  22DA               	addwfc	fsr2h,f,c
  7144  00F2F2  04DE               	decf	postinc2,w,c
  7145  00F2F4  10DE               	iorwf	postinc2,w,c
  7146  00F2F6  A4D8               	btfss	status,2,c
  7147  00F2F8  D082               	goto	l157
  7148  00F2FA  EE20 F004          	lfsr	2,4
  7149  00F2FE  5003               	movf	check_food@foodInput,w,c
  7150  00F300  26D9               	addwf	fsr2l,f,c
  7151  00F302  5004               	movf	check_food@foodInput+1,w,c
  7152  00F304  22DA               	addwfc	fsr2h,f,c
  7153  00F306  04DE               	decf	postinc2,w,c
  7154  00F308  10DE               	iorwf	postinc2,w,c
  7155  00F30A  A4D8               	btfss	status,2,c
  7156  00F30C  D078               	goto	l157
  7157  00F30E  EE20 F006          	lfsr	2,6
  7158  00F312  5003               	movf	check_food@foodInput,w,c
  7159  00F314  26D9               	addwf	fsr2l,f,c
  7160  00F316  5004               	movf	check_food@foodInput+1,w,c
  7161  00F318  22DA               	addwfc	fsr2h,f,c
  7162  00F31A  04DE               	decf	postinc2,w,c
  7163  00F31C  10DE               	iorwf	postinc2,w,c
  7164  00F31E  A4D8               	btfss	status,2,c
  7165  00F320  D06E               	goto	l157
  7166                           
  7167                           ;standbyMode.c: 285: returnValue = 28;
  7168  00F322  0E00               	movlw	0
  7169  00F324  6E08               	movwf	check_food@returnValue+1,c
  7170  00F326  0E1C               	movlw	28
  7171  00F328  D029               	goto	L46
  7172  00F32A                     
  7173                           ;standbyMode.c: 291: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7174  00F32A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7175  00F32E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7176  00F332  04DE               	decf	postinc2,w,c
  7177  00F334  10DE               	iorwf	postinc2,w,c
  7178  00F336  A4D8               	btfss	status,2,c
  7179  00F338  D062               	goto	l157
  7180  00F33A  EE20 F002          	lfsr	2,2
  7181  00F33E  5003               	movf	check_food@foodInput,w,c
  7182  00F340  26D9               	addwf	fsr2l,f,c
  7183  00F342  5004               	movf	check_food@foodInput+1,w,c
  7184  00F344  22DA               	addwfc	fsr2h,f,c
  7185  00F346  04DE               	decf	postinc2,w,c
  7186  00F348  10DE               	iorwf	postinc2,w,c
  7187  00F34A  A4D8               	btfss	status,2,c
  7188  00F34C  D058               	goto	l157
  7189  00F34E  EE20 F004          	lfsr	2,4
  7190  00F352  5003               	movf	check_food@foodInput,w,c
  7191  00F354  26D9               	addwf	fsr2l,f,c
  7192  00F356  5004               	movf	check_food@foodInput+1,w,c
  7193  00F358  22DA               	addwfc	fsr2h,f,c
  7194  00F35A  04DE               	decf	postinc2,w,c
  7195  00F35C  10DE               	iorwf	postinc2,w,c
  7196  00F35E  A4D8               	btfss	status,2,c
  7197  00F360  D04E               	goto	l157
  7198  00F362  EE20 F006          	lfsr	2,6
  7199  00F366  5003               	movf	check_food@foodInput,w,c
  7200  00F368  26D9               	addwf	fsr2l,f,c
  7201  00F36A  5004               	movf	check_food@foodInput+1,w,c
  7202  00F36C  22DA               	addwfc	fsr2h,f,c
  7203  00F36E  04DE               	decf	postinc2,w,c
  7204  00F370  10DE               	iorwf	postinc2,w,c
  7205  00F372  A4D8               	btfss	status,2,c
  7206  00F374  D044               	goto	l157
  7207                           
  7208                           ;standbyMode.c: 292: returnValue = 29;
  7209  00F376  0E00               	movlw	0
  7210  00F378  6E08               	movwf	check_food@returnValue+1,c
  7211  00F37A  0E1D               	movlw	29
  7212  00F37C                     L46:
  7213  00F37C  6E07               	movwf	check_food@returnValue,c
  7214                           
  7215                           ;standbyMode.c: 299: }
  7216                           
  7217                           ;standbyMode.c: 298: break;
  7218                           
  7219                           ;standbyMode.c: 297: default:
  7220                           
  7221                           ;standbyMode.c: 293: }
  7222                           ;standbyMode.c: 294: break;
  7223  00F37E  D03F               	goto	l157
  7224  00F380                     l152:
  7225  00F380  C001  F005         	movff	check_food@sum,??_check_food
  7226  00F384  C002  F006         	movff	check_food@sum+1,??_check_food+1
  7227                           
  7228                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7229                           ; Switch size 1, requested type "space"
  7230                           ; Number of cases is 1, Range of values is 0 to 0
  7231                           ; switch strategies available:
  7232                           ; Name         Instructions Cycles
  7233                           ; simple_byte            4     3 (average)
  7234                           ;	Chosen strategy is simple_byte
  7235  00F388  5006               	movf	??_check_food+1,w,c
  7236  00F38A  0A00               	xorlw	0	; case 0
  7237  00F38C  A4D8               	btfss	status,2,c
  7238  00F38E  D037               	goto	l157
  7239                           
  7240                           ; Switch size 1, requested type "space"
  7241                           ; Number of cases is 18, Range of values is 3 to 43
  7242                           ; switch strategies available:
  7243                           ; Name         Instructions Cycles
  7244                           ; simple_byte           55    28 (average)
  7245                           ;	Chosen strategy is simple_byte
  7246  00F390  5005               	movf	??_check_food,w,c
  7247  00F392  0A03               	xorlw	3	; case 3
  7248  00F394  B4D8               	btfsc	status,2,c
  7249  00F396  D424               	goto	l153
  7250  00F398  0A04               	xorlw	4	; case 7
  7251  00F39A  B4D8               	btfsc	status,2,c
  7252  00F39C  D436               	goto	l158
  7253  00F39E  0A0D               	xorlw	13	; case 10
  7254  00F3A0  B4D8               	btfsc	status,2,c
  7255  00F3A2  D466               	goto	l166
  7256  00F3A4  0A06               	xorlw	6	; case 12
  7257  00F3A6  B4D8               	btfsc	status,2,c
  7258  00F3A8  D445               	goto	l162
  7259  00F3AA  0A01               	xorlw	1	; case 13
  7260  00F3AC  B4D8               	btfsc	status,2,c
  7261  00F3AE  D4E2               	goto	l178
  7262  00F3B0  0A02               	xorlw	2	; case 15
  7263  00F3B2  B4D8               	btfsc	status,2,c
  7264  00F3B4  D487               	goto	l168
  7265  00F3B6  0A1E               	xorlw	30	; case 17
  7266  00F3B8  B4D8               	btfsc	status,2,c
  7267  00F3BA  D532               	goto	l188
  7268  00F3BC  0A03               	xorlw	3	; case 18
  7269  00F3BE  B4D8               	btfsc	status,2,c
  7270  00F3C0  D504               	goto	l183
  7271  00F3C2  0A01               	xorlw	1	; case 19
  7272  00F3C4  B4D8               	btfsc	status,2,c
  7273  00F3C6  D4AA               	goto	l173
  7274  00F3C8  0A05               	xorlw	5	; case 22
  7275  00F3CA  B4D8               	btfsc	status,2,c
  7276  00F3CC  D5D5               	goto	l201
  7277  00F3CE  0A0F               	xorlw	15	; case 25
  7278  00F3D0  B4D8               	btfsc	status,2,c
  7279  00F3D2  D703               	goto	l222
  7280  00F3D4  0A03               	xorlw	3	; case 26
  7281  00F3D6  B4D8               	btfsc	status,2,c
  7282  00F3D8  D652               	goto	l209
  7283  00F3DA  0A01               	xorlw	1	; case 27
  7284  00F3DC  B4D8               	btfsc	status,2,c
  7285  00F3DE  D549               	goto	l193
  7286  00F3E0  0A06               	xorlw	6	; case 29
  7287  00F3E2  B4D8               	btfsc	status,2,c
  7288  00F3E4  D724               	goto	l224
  7289  00F3E6  0A02               	xorlw	2	; case 31
  7290  00F3E8  B4D8               	btfsc	status,2,c
  7291  00F3EA  D674               	goto	l214
  7292  00F3EC  0A3D               	xorlw	61	; case 34
  7293  00F3EE  B4D8               	btfsc	status,2,c
  7294  00F3F0  D748               	goto	l226
  7295  00F3F2  0A05               	xorlw	5	; case 39
  7296  00F3F4  B4D8               	btfsc	status,2,c
  7297  00F3F6  D76F               	goto	l228
  7298  00F3F8  0A0C               	xorlw	12	; case 43
  7299  00F3FA  B4D8               	btfsc	status,2,c
  7300  00F3FC  D796               	goto	l230
  7301  00F3FE                     l157:
  7302                           
  7303                           ;standbyMode.c: 300: return returnValue;
  7304  00F3FE  C007  F001         	movff	check_food@returnValue,?_check_food
  7305  00F402  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  7306  00F406  0012               	return		;funcret
  7307  00F408                     __end_of_check_food:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           intcon	equ	0xFF2
  7316                           postinc0	equ	0xFEE
  7317                           wreg	equ	0xFE8
  7318                           plusw1	equ	0xFE3
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           plusw2	equ	0xFDB
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function _diet_press *****************
  7328 ;; Defined at:
  7329 ;;		line 677 in file "standbyMode.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  drawer          2   36[COMRAM] unsigned int 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  keypress        1   50[COMRAM] unsigned char 
  7334 ;;  dietTable       8   51[COMRAM] unsigned int [4]
  7335 ;;  sum             2   48[COMRAM] unsigned int 
  7336 ;;  count           2   46[COMRAM] unsigned int 
  7337 ;;  backCheck       2   44[COMRAM] unsigned int 
  7338 ;;  i               2   42[COMRAM] unsigned int 
  7339 ;;  previous        2   40[COMRAM] unsigned int 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  2   36[COMRAM] unsigned int 
  7342 ;; Registers used:
  7343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;Total ram usage:       23 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    3
  7356 ;; This function calls:
  7357 ;;		_lcdInst
  7358 ;;		_printf
  7359 ;;		_putch
  7360 ;; This function is called by:
  7361 ;;		_standbyMode
  7362 ;; This function uses a non-reentrant model
  7363 ;;
  7364                           
  7365                           	psect	text14
  7366  00E6B0                     __ptext14:
  7367                           	opt stack 0
  7368  00E6B0                     _diet_press:
  7369                           	opt stack 26
  7370                           
  7371                           ;incstack = 0
  7372                           ;standbyMode.c: 680: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  7373  00E6B0  0E01               	movlw	1
  7374  00E6B2  EC2B  F069         	call	_lcdInst
  7375  00E6B6  0EC3               	movlw	195
  7376  00E6B8  6E27               	movwf	??_diet_press& (0+255),c
  7377  00E6BA  0ECD               	movlw	205
  7378  00E6BC                     u7287:
  7379  00E6BC  2EE8               	decfsz	wreg,f,c
  7380  00E6BE  D7FE               	bra	u7287
  7381  00E6C0  2E27               	decfsz	??_diet_press& (0+255),f,c
  7382  00E6C2  D7FC               	bra	u7287
  7383  00E6C4  F000               	nop	
  7384                           
  7385                           ;standbyMode.c: 681: printf("Drawer %i diet:", drawer);
  7386  00E6C6  0E3D               	movlw	low STR_34
  7387  00E6C8  6E0D               	movwf	printf@f,c
  7388  00E6CA  0EFE               	movlw	high STR_34
  7389  00E6CC  6E0E               	movwf	printf@f+1,c
  7390  00E6CE  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7391  00E6D2  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7392  00E6D6  ECAF  F06F         	call	_printf	;wreg free
  7393                           
  7394                           ;standbyMode.c: 682: lcdInst(0xC0);;
  7395  00E6DA  0EC0               	movlw	192
  7396  00E6DC  EC2B  F069         	call	_lcdInst
  7397                           
  7398                           ;standbyMode.c: 684: unsigned int count = 0;
  7399  00E6E0  0E00               	movlw	0
  7400  00E6E2  6E30               	movwf	diet_press@count+1,c
  7401  00E6E4  0E00               	movlw	0
  7402  00E6E6  6E2F               	movwf	diet_press@count,c
  7403                           
  7404                           ;standbyMode.c: 685: unsigned int previous = 0;
  7405  00E6E8  0E00               	movlw	0
  7406  00E6EA  6E2A               	movwf	diet_press@previous+1,c
  7407  00E6EC  0E00               	movlw	0
  7408  00E6EE  6E29               	movwf	diet_press@previous,c
  7409                           
  7410                           ;standbyMode.c: 686: unsigned int sum = 0;
  7411  00E6F0  0E00               	movlw	0
  7412  00E6F2  6E32               	movwf	diet_press@sum+1,c
  7413  00E6F4  0E00               	movlw	0
  7414  00E6F6  6E31               	movwf	diet_press@sum,c
  7415                           
  7416                           ;standbyMode.c: 687: unsigned int i = 0;
  7417  00E6F8  0E00               	movlw	0
  7418  00E6FA  6E2C               	movwf	diet_press@i+1,c
  7419  00E6FC  0E00               	movlw	0
  7420  00E6FE  6E2B               	movwf	diet_press@i,c
  7421                           
  7422                           ;standbyMode.c: 688: unsigned int dietTable[4] = {0, 0, 0, 0};
  7423  00E700  EE20  F090         	lfsr	2,diet_press@F3120
  7424  00E704  EE10  F034         	lfsr	1,diet_press@dietTable
  7425  00E708  0E07               	movlw	7
  7426  00E70A                     u5011:
  7427  00E70A  CFDB FFE3          	movff	plusw2,plusw1
  7428  00E70E  06E8               	decf	wreg,f,c
  7429  00E710  E2FC               	bc	u5011
  7430                           
  7431                           ;standbyMode.c: 689: unsigned int backCheck = 0;
  7432  00E712  0E00               	movlw	0
  7433  00E714  6E2E               	movwf	diet_press@backCheck+1,c
  7434  00E716  0E00               	movlw	0
  7435  00E718  6E2D               	movwf	diet_press@backCheck,c
  7436  00E71A                     l358:
  7437  00E71A  A281               	btfss	3969,1,c	;volatile
  7438  00E71C  D7FE               	goto	l357
  7439                           
  7440                           ;standbyMode.c: 693: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7441  00E71E  3881               	swapf	3969,w,c	;volatile
  7442  00E720  0B0F               	andlw	15
  7443  00E722  0B0F               	andlw	15
  7444  00E724  6E33               	movwf	diet_press@keypress,c
  7445  00E726  B281               	btfsc	3969,1,c	;volatile
  7446  00E728  D7FE               	goto	l362
  7447                           
  7448                           ;standbyMode.c: 696: if(keypress == 15){
  7449  00E72A  0E0F               	movlw	15
  7450  00E72C  1833               	xorwf	diet_press@keypress,w,c
  7451  00E72E  B4D8               	btfsc	status,2,c
  7452  00E730  D080               	goto	l365
  7453                           
  7454                           ;standbyMode.c: 699: else if (keypress == 14){
  7455                           
  7456                           ;standbyMode.c: 698: }
  7457                           
  7458                           ;standbyMode.c: 697: break;
  7459  00E732  0E0E               	movlw	14
  7460  00E734  1833               	xorwf	diet_press@keypress,w,c
  7461  00E736  A4D8               	btfss	status,2,c
  7462  00E738  D005               	goto	l367
  7463                           
  7464                           ;standbyMode.c: 700: backCheck = 1;
  7465  00E73A  0E00               	movlw	0
  7466  00E73C  6E2E               	movwf	diet_press@backCheck+1,c
  7467  00E73E  0E01               	movlw	1
  7468  00E740  6E2D               	movwf	diet_press@backCheck,c
  7469                           
  7470                           ;standbyMode.c: 701: break;
  7471  00E742  D077               	goto	l365
  7472  00E744                     l367:
  7473                           
  7474                           ;standbyMode.c: 703: else if (keypress == 12){
  7475  00E744  0E0C               	movlw	12
  7476  00E746  1833               	xorwf	diet_press@keypress,w,c
  7477  00E748  A4D8               	btfss	status,2,c
  7478  00E74A  D02D               	goto	l369
  7479                           
  7480                           ;standbyMode.c: 704: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7481  00E74C  0E01               	movlw	1
  7482  00E74E  EC2B  F069         	call	_lcdInst
  7483  00E752  0EC3               	movlw	195
  7484  00E754  6E27               	movwf	??_diet_press& (0+255),c
  7485  00E756  0ECD               	movlw	205
  7486  00E758                     u7297:
  7487  00E758  2EE8               	decfsz	wreg,f,c
  7488  00E75A  D7FE               	bra	u7297
  7489  00E75C  2E27               	decfsz	??_diet_press& (0+255),f,c
  7490  00E75E  D7FC               	bra	u7297
  7491  00E760  F000               	nop	
  7492                           
  7493                           ;standbyMode.c: 705: printf("Drawer %i diet:", drawer);
  7494  00E762  0E3D               	movlw	low STR_34
  7495  00E764  6E0D               	movwf	printf@f,c
  7496  00E766  0EFE               	movlw	high STR_34
  7497  00E768  6E0E               	movwf	printf@f+1,c
  7498  00E76A  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7499  00E76E  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7500  00E772  ECAF  F06F         	call	_printf	;wreg free
  7501                           
  7502                           ;standbyMode.c: 706: lcdInst(0xC0);;
  7503  00E776  0EC0               	movlw	192
  7504  00E778  EC2B  F069         	call	_lcdInst
  7505                           
  7506                           ;standbyMode.c: 707: count = 0;
  7507  00E77C  0E00               	movlw	0
  7508  00E77E  6E30               	movwf	diet_press@count+1,c
  7509  00E780  0E00               	movlw	0
  7510  00E782  6E2F               	movwf	diet_press@count,c
  7511                           
  7512                           ;standbyMode.c: 708: dietTable[0] = 0;
  7513  00E784  0E00               	movlw	0
  7514  00E786  6E35               	movwf	diet_press@dietTable+1,c
  7515  00E788  0E00               	movlw	0
  7516  00E78A  6E34               	movwf	diet_press@dietTable,c
  7517                           
  7518                           ;standbyMode.c: 709: dietTable[1] = 0;
  7519  00E78C  0E00               	movlw	0
  7520  00E78E  6E37               	movwf	diet_press@dietTable+3,c
  7521  00E790  0E00               	movlw	0
  7522  00E792  6E36               	movwf	diet_press@dietTable+2,c
  7523                           
  7524                           ;standbyMode.c: 710: dietTable[2] = 0;
  7525  00E794  0E00               	movlw	0
  7526  00E796  6E39               	movwf	diet_press@dietTable+5,c
  7527  00E798  0E00               	movlw	0
  7528  00E79A  6E38               	movwf	diet_press@dietTable+4,c
  7529                           
  7530                           ;standbyMode.c: 711: dietTable[3] = 0;
  7531  00E79C  0E00               	movlw	0
  7532  00E79E  6E3B               	movwf	diet_press@dietTable+7,c
  7533  00E7A0  0E00               	movlw	0
  7534  00E7A2  6E3A               	movwf	diet_press@dietTable+6,c
  7535                           
  7536                           ;standbyMode.c: 712: }
  7537  00E7A4  D7BA               	goto	l357
  7538  00E7A6                     l369:
  7539                           
  7540                           ;standbyMode.c: 713: else if (count <= 3){
  7541  00E7A6  5030               	movf	diet_press@count+1,w,c
  7542  00E7A8  E1B8               	bnz	l358
  7543  00E7AA  0E04               	movlw	4
  7544  00E7AC  5C2F               	subwf	diet_press@count,w,c
  7545  00E7AE  B0D8               	btfsc	status,0,c
  7546  00E7B0  D7B4               	goto	l357
  7547                           
  7548                           ;standbyMode.c: 714: if (keypress == 3 || keypress == 7){
  7549  00E7B2  0E03               	movlw	3
  7550  00E7B4  1833               	xorwf	diet_press@keypress,w,c
  7551  00E7B6  B4D8               	btfsc	status,2,c
  7552  00E7B8  D004               	goto	u5090
  7553  00E7BA  0E07               	movlw	7
  7554  00E7BC  1833               	xorwf	diet_press@keypress,w,c
  7555  00E7BE  A4D8               	btfss	status,2,c
  7556  00E7C0  D013               	goto	l372
  7557  00E7C2                     u5090:
  7558                           
  7559                           ;standbyMode.c: 715: putch(input[keypress]);
  7560  00E7C2  5033               	movf	diet_press@keypress,w,c
  7561  00E7C4  0D01               	mullw	1
  7562  00E7C6  0E34               	movlw	low _input
  7563  00E7C8  24F3               	addwf	prodl,w,c
  7564  00E7CA  6EF6               	movwf	tblptrl,c
  7565  00E7CC  0EFD               	movlw	high _input
  7566  00E7CE  20F4               	addwfc	prodh,w,c
  7567  00E7D0  6EF7               	movwf	tblptrh,c
  7568  00E7D2                     	if	0	;There are less than 3 active tblptr bytes
  7569  00E7D2                     	endif
  7570  00E7D2  0008               	tblrd		*
  7571  00E7D4  50F5               	movf	tablat,w,c
  7572  00E7D6  EC35  F069         	call	_putch
  7573                           
  7574                           ;standbyMode.c: 716: dietTable[count] = keypress;
  7575  00E7DA  5033               	movf	diet_press@keypress,w,c
  7576  00E7DC  6E27               	movwf	??_diet_press& (0+255),c
  7577  00E7DE  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7578  00E7E0  D01A               	goto	L65
  7579  00E7E2                     l4270:
  7580                           
  7581                           ;standbyMode.c: 717: count += 1;
  7582  00E7E2  4A2F               	infsnz	diet_press@count,f,c
  7583  00E7E4  2A30               	incf	diet_press@count+1,f,c
  7584                           
  7585                           ;standbyMode.c: 718: }
  7586  00E7E6  D799               	goto	l357
  7587  00E7E8                     l372:
  7588                           
  7589                           ;standbyMode.c: 719: else if (keypress == 11){
  7590  00E7E8  0E0B               	movlw	11
  7591  00E7EA  1833               	xorwf	diet_press@keypress,w,c
  7592  00E7EC  A4D8               	btfss	status,2,c
  7593  00E7EE  D795               	goto	l357
  7594                           
  7595                           ;standbyMode.c: 720: putch(input[keypress]);
  7596  00E7F0  5033               	movf	diet_press@keypress,w,c
  7597  00E7F2  0D01               	mullw	1
  7598  00E7F4  0E34               	movlw	low _input
  7599  00E7F6  24F3               	addwf	prodl,w,c
  7600  00E7F8  6EF6               	movwf	tblptrl,c
  7601  00E7FA  0EFD               	movlw	high _input
  7602  00E7FC  20F4               	addwfc	prodh,w,c
  7603  00E7FE  6EF7               	movwf	tblptrh,c
  7604  00E800                     	if	0	;There are less than 3 active tblptr bytes
  7605  00E800                     	endif
  7606  00E800  0008               	tblrd		*
  7607  00E802  50F5               	movf	tablat,w,c
  7608  00E804  EC35  F069         	call	_putch
  7609                           
  7610                           ;standbyMode.c: 721: dietTable[count] = keypress + 1;
  7611  00E808  5033               	movf	diet_press@keypress,w,c
  7612  00E80A  6E27               	movwf	??_diet_press& (0+255),c
  7613  00E80C  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7614  00E80E  0E01               	movlw	1
  7615  00E810  2627               	addwf	??_diet_press,f,c
  7616  00E812  0E00               	movlw	0
  7617  00E814  2228               	addwfc	??_diet_press+1,f,c
  7618  00E816                     L65:
  7619  00E816  90D8               	bcf	status,0,c
  7620  00E818  342F               	rlcf	diet_press@count,w,c
  7621  00E81A  6ED9               	movwf	fsr2l,c
  7622  00E81C  3430               	rlcf	diet_press@count+1,w,c
  7623  00E81E  6EDA               	movwf	fsr2h,c
  7624  00E820  0E34               	movlw	low diet_press@dietTable
  7625  00E822  26D9               	addwf	fsr2l,f,c
  7626  00E824  0E00               	movlw	high diet_press@dietTable
  7627  00E826  22DA               	addwfc	fsr2h,f,c
  7628  00E828  C027  FFDE         	movff	??_diet_press,postinc2
  7629  00E82C  C028  FFDD         	movff	??_diet_press+1,postdec2
  7630  00E830  D7D8               	goto	l4270
  7631  00E832                     l365:
  7632                           
  7633                           ;standbyMode.c: 723: }
  7634                           ;standbyMode.c: 724: }
  7635                           ;standbyMode.c: 725: }
  7636                           ;standbyMode.c: 727: if (backCheck == 1){
  7637  00E832  042D               	decf	diet_press@backCheck,w,c
  7638  00E834  102E               	iorwf	diet_press@backCheck+1,w,c
  7639  00E836  A4D8               	btfss	status,2,c
  7640  00E838  D004               	goto	l378
  7641                           
  7642                           ;standbyMode.c: 728: sum = 100;
  7643  00E83A  0E00               	movlw	0
  7644  00E83C  6E32               	movwf	diet_press@sum+1,c
  7645  00E83E  0E64               	movlw	100
  7646  00E840  D199               	goto	L64
  7647  00E842                     l378:
  7648                           
  7649                           ;standbyMode.c: 732: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7650  00E842  0E0C               	movlw	12
  7651  00E844  1834               	xorwf	diet_press@dietTable,w,c
  7652  00E846  1035               	iorwf	diet_press@dietTable+1,w,c
  7653  00E848  A4D8               	btfss	status,2,c
  7654  00E84A  D010               	goto	l380
  7655  00E84C  5036               	movf	diet_press@dietTable+2,w,c
  7656  00E84E  1037               	iorwf	diet_press@dietTable+3,w,c
  7657  00E850  A4D8               	btfss	status,2,c
  7658  00E852  D00C               	goto	l380
  7659  00E854  5038               	movf	diet_press@dietTable+4,w,c
  7660  00E856  1039               	iorwf	diet_press@dietTable+5,w,c
  7661  00E858  A4D8               	btfss	status,2,c
  7662  00E85A  D008               	goto	l380
  7663  00E85C  503A               	movf	diet_press@dietTable+6,w,c
  7664  00E85E  103B               	iorwf	diet_press@dietTable+7,w,c
  7665  00E860  A4D8               	btfss	status,2,c
  7666  00E862  D004               	goto	l380
  7667                           
  7668                           ;standbyMode.c: 733: sum = 12;
  7669  00E864  0E00               	movlw	0
  7670  00E866  6E32               	movwf	diet_press@sum+1,c
  7671  00E868  0E0C               	movlw	12
  7672  00E86A  D184               	goto	L64
  7673  00E86C                     l380:
  7674                           
  7675                           ;standbyMode.c: 737: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7676  00E86C  0E03               	movlw	3
  7677  00E86E  1834               	xorwf	diet_press@dietTable,w,c
  7678  00E870  1035               	iorwf	diet_press@dietTable+1,w,c
  7679  00E872  A4D8               	btfss	status,2,c
  7680  00E874  D010               	goto	l382
  7681  00E876  5036               	movf	diet_press@dietTable+2,w,c
  7682  00E878  1037               	iorwf	diet_press@dietTable+3,w,c
  7683  00E87A  A4D8               	btfss	status,2,c
  7684  00E87C  D00C               	goto	l382
  7685  00E87E  5038               	movf	diet_press@dietTable+4,w,c
  7686  00E880  1039               	iorwf	diet_press@dietTable+5,w,c
  7687  00E882  A4D8               	btfss	status,2,c
  7688  00E884  D008               	goto	l382
  7689  00E886  503A               	movf	diet_press@dietTable+6,w,c
  7690  00E888  103B               	iorwf	diet_press@dietTable+7,w,c
  7691  00E88A  A4D8               	btfss	status,2,c
  7692  00E88C  D004               	goto	l382
  7693                           
  7694                           ;standbyMode.c: 738: sum = 3;
  7695  00E88E  0E00               	movlw	0
  7696  00E890  6E32               	movwf	diet_press@sum+1,c
  7697  00E892  0E03               	movlw	3
  7698  00E894  D16F               	goto	L64
  7699  00E896                     l382:
  7700                           
  7701                           ;standbyMode.c: 742: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7702  00E896  0E07               	movlw	7
  7703  00E898  1834               	xorwf	diet_press@dietTable,w,c
  7704  00E89A  1035               	iorwf	diet_press@dietTable+1,w,c
  7705  00E89C  A4D8               	btfss	status,2,c
  7706  00E89E  D010               	goto	l384
  7707  00E8A0  5036               	movf	diet_press@dietTable+2,w,c
  7708  00E8A2  1037               	iorwf	diet_press@dietTable+3,w,c
  7709  00E8A4  A4D8               	btfss	status,2,c
  7710  00E8A6  D00C               	goto	l384
  7711  00E8A8  5038               	movf	diet_press@dietTable+4,w,c
  7712  00E8AA  1039               	iorwf	diet_press@dietTable+5,w,c
  7713  00E8AC  A4D8               	btfss	status,2,c
  7714  00E8AE  D008               	goto	l384
  7715  00E8B0  503A               	movf	diet_press@dietTable+6,w,c
  7716  00E8B2  103B               	iorwf	diet_press@dietTable+7,w,c
  7717  00E8B4  A4D8               	btfss	status,2,c
  7718  00E8B6  D004               	goto	l384
  7719                           
  7720                           ;standbyMode.c: 743: sum = 7;
  7721  00E8B8  0E00               	movlw	0
  7722  00E8BA  6E32               	movwf	diet_press@sum+1,c
  7723  00E8BC  0E07               	movlw	7
  7724  00E8BE  D15A               	goto	L64
  7725  00E8C0                     l384:
  7726                           
  7727                           ;standbyMode.c: 747: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7728  00E8C0  0E03               	movlw	3
  7729  00E8C2  1834               	xorwf	diet_press@dietTable,w,c
  7730  00E8C4  1035               	iorwf	diet_press@dietTable+1,w,c
  7731  00E8C6  A4D8               	btfss	status,2,c
  7732  00E8C8  D011               	goto	l386
  7733  00E8CA  0E07               	movlw	7
  7734  00E8CC  1836               	xorwf	diet_press@dietTable+2,w,c
  7735  00E8CE  1037               	iorwf	diet_press@dietTable+3,w,c
  7736  00E8D0  A4D8               	btfss	status,2,c
  7737  00E8D2  D00C               	goto	l386
  7738  00E8D4  5038               	movf	diet_press@dietTable+4,w,c
  7739  00E8D6  1039               	iorwf	diet_press@dietTable+5,w,c
  7740  00E8D8  A4D8               	btfss	status,2,c
  7741  00E8DA  D008               	goto	l386
  7742  00E8DC  503A               	movf	diet_press@dietTable+6,w,c
  7743  00E8DE  103B               	iorwf	diet_press@dietTable+7,w,c
  7744  00E8E0  A4D8               	btfss	status,2,c
  7745  00E8E2  D004               	goto	l386
  7746                           
  7747                           ;standbyMode.c: 748: sum = 10;
  7748  00E8E4  0E00               	movlw	0
  7749  00E8E6  6E32               	movwf	diet_press@sum+1,c
  7750  00E8E8  0E0A               	movlw	10
  7751  00E8EA  D144               	goto	L64
  7752  00E8EC                     l386:
  7753                           
  7754                           ;standbyMode.c: 752: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7755  00E8EC  0E03               	movlw	3
  7756  00E8EE  1834               	xorwf	diet_press@dietTable,w,c
  7757  00E8F0  1035               	iorwf	diet_press@dietTable+1,w,c
  7758  00E8F2  A4D8               	btfss	status,2,c
  7759  00E8F4  D011               	goto	l388
  7760  00E8F6  0E0C               	movlw	12
  7761  00E8F8  1836               	xorwf	diet_press@dietTable+2,w,c
  7762  00E8FA  1037               	iorwf	diet_press@dietTable+3,w,c
  7763  00E8FC  A4D8               	btfss	status,2,c
  7764  00E8FE  D00C               	goto	l388
  7765  00E900  5038               	movf	diet_press@dietTable+4,w,c
  7766  00E902  1039               	iorwf	diet_press@dietTable+5,w,c
  7767  00E904  A4D8               	btfss	status,2,c
  7768  00E906  D008               	goto	l388
  7769  00E908  503A               	movf	diet_press@dietTable+6,w,c
  7770  00E90A  103B               	iorwf	diet_press@dietTable+7,w,c
  7771  00E90C  A4D8               	btfss	status,2,c
  7772  00E90E  D004               	goto	l388
  7773                           
  7774                           ;standbyMode.c: 753: sum = 15;
  7775  00E910  0E00               	movlw	0
  7776  00E912  6E32               	movwf	diet_press@sum+1,c
  7777  00E914  0E0F               	movlw	15
  7778  00E916  D12E               	goto	L64
  7779  00E918                     l388:
  7780                           
  7781                           ;standbyMode.c: 757: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7782  00E918  0E07               	movlw	7
  7783  00E91A  1834               	xorwf	diet_press@dietTable,w,c
  7784  00E91C  1035               	iorwf	diet_press@dietTable+1,w,c
  7785  00E91E  A4D8               	btfss	status,2,c
  7786  00E920  D011               	goto	l390
  7787  00E922  0E0C               	movlw	12
  7788  00E924  1836               	xorwf	diet_press@dietTable+2,w,c
  7789  00E926  1037               	iorwf	diet_press@dietTable+3,w,c
  7790  00E928  A4D8               	btfss	status,2,c
  7791  00E92A  D00C               	goto	l390
  7792  00E92C  5038               	movf	diet_press@dietTable+4,w,c
  7793  00E92E  1039               	iorwf	diet_press@dietTable+5,w,c
  7794  00E930  A4D8               	btfss	status,2,c
  7795  00E932  D008               	goto	l390
  7796  00E934  503A               	movf	diet_press@dietTable+6,w,c
  7797  00E936  103B               	iorwf	diet_press@dietTable+7,w,c
  7798  00E938  A4D8               	btfss	status,2,c
  7799  00E93A  D004               	goto	l390
  7800                           
  7801                           ;standbyMode.c: 758: sum = 19;
  7802  00E93C  0E00               	movlw	0
  7803  00E93E  6E32               	movwf	diet_press@sum+1,c
  7804  00E940  0E13               	movlw	19
  7805  00E942  D118               	goto	L64
  7806  00E944                     l390:
  7807                           
  7808                           ;standbyMode.c: 762: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7809  00E944  0E03               	movlw	3
  7810  00E946  1834               	xorwf	diet_press@dietTable,w,c
  7811  00E948  1035               	iorwf	diet_press@dietTable+1,w,c
  7812  00E94A  A4D8               	btfss	status,2,c
  7813  00E94C  D012               	goto	l392
  7814  00E94E  0E03               	movlw	3
  7815  00E950  1836               	xorwf	diet_press@dietTable+2,w,c
  7816  00E952  1037               	iorwf	diet_press@dietTable+3,w,c
  7817  00E954  A4D8               	btfss	status,2,c
  7818  00E956  D00D               	goto	l392
  7819  00E958  0E07               	movlw	7
  7820  00E95A  1838               	xorwf	diet_press@dietTable+4,w,c
  7821  00E95C  1039               	iorwf	diet_press@dietTable+5,w,c
  7822  00E95E  A4D8               	btfss	status,2,c
  7823  00E960  D008               	goto	l392
  7824  00E962  503A               	movf	diet_press@dietTable+6,w,c
  7825  00E964  103B               	iorwf	diet_press@dietTable+7,w,c
  7826  00E966  A4D8               	btfss	status,2,c
  7827  00E968  D004               	goto	l392
  7828                           
  7829                           ;standbyMode.c: 763: sum = 13;
  7830  00E96A  0E00               	movlw	0
  7831  00E96C  6E32               	movwf	diet_press@sum+1,c
  7832  00E96E  0E0D               	movlw	13
  7833  00E970  D101               	goto	L64
  7834  00E972                     l392:
  7835                           
  7836                           ;standbyMode.c: 767: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7837  00E972  0E03               	movlw	3
  7838  00E974  1834               	xorwf	diet_press@dietTable,w,c
  7839  00E976  1035               	iorwf	diet_press@dietTable+1,w,c
  7840  00E978  A4D8               	btfss	status,2,c
  7841  00E97A  D012               	goto	l394
  7842  00E97C  0E03               	movlw	3
  7843  00E97E  1836               	xorwf	diet_press@dietTable+2,w,c
  7844  00E980  1037               	iorwf	diet_press@dietTable+3,w,c
  7845  00E982  A4D8               	btfss	status,2,c
  7846  00E984  D00D               	goto	l394
  7847  00E986  0E0C               	movlw	12
  7848  00E988  1838               	xorwf	diet_press@dietTable+4,w,c
  7849  00E98A  1039               	iorwf	diet_press@dietTable+5,w,c
  7850  00E98C  A4D8               	btfss	status,2,c
  7851  00E98E  D008               	goto	l394
  7852  00E990  503A               	movf	diet_press@dietTable+6,w,c
  7853  00E992  103B               	iorwf	diet_press@dietTable+7,w,c
  7854  00E994  A4D8               	btfss	status,2,c
  7855  00E996  D004               	goto	l394
  7856                           
  7857                           ;standbyMode.c: 768: sum = 18;
  7858  00E998  0E00               	movlw	0
  7859  00E99A  6E32               	movwf	diet_press@sum+1,c
  7860  00E99C  0E12               	movlw	18
  7861  00E99E  D0EA               	goto	L64
  7862  00E9A0                     l394:
  7863                           
  7864                           ;standbyMode.c: 772: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7865  00E9A0  0E03               	movlw	3
  7866  00E9A2  1834               	xorwf	diet_press@dietTable,w,c
  7867  00E9A4  1035               	iorwf	diet_press@dietTable+1,w,c
  7868  00E9A6  A4D8               	btfss	status,2,c
  7869  00E9A8  D012               	goto	l396
  7870  00E9AA  0E07               	movlw	7
  7871  00E9AC  1836               	xorwf	diet_press@dietTable+2,w,c
  7872  00E9AE  1037               	iorwf	diet_press@dietTable+3,w,c
  7873  00E9B0  A4D8               	btfss	status,2,c
  7874  00E9B2  D00D               	goto	l396
  7875  00E9B4  0E07               	movlw	7
  7876  00E9B6  1838               	xorwf	diet_press@dietTable+4,w,c
  7877  00E9B8  1039               	iorwf	diet_press@dietTable+5,w,c
  7878  00E9BA  A4D8               	btfss	status,2,c
  7879  00E9BC  D008               	goto	l396
  7880  00E9BE  503A               	movf	diet_press@dietTable+6,w,c
  7881  00E9C0  103B               	iorwf	diet_press@dietTable+7,w,c
  7882  00E9C2  A4D8               	btfss	status,2,c
  7883  00E9C4  D004               	goto	l396
  7884                           
  7885                           ;standbyMode.c: 773: sum = 17;
  7886  00E9C6  0E00               	movlw	0
  7887  00E9C8  6E32               	movwf	diet_press@sum+1,c
  7888  00E9CA  0E11               	movlw	17
  7889  00E9CC  D0D3               	goto	L64
  7890  00E9CE                     l396:
  7891                           
  7892                           ;standbyMode.c: 777: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7893  00E9CE  0E03               	movlw	3
  7894  00E9D0  1834               	xorwf	diet_press@dietTable,w,c
  7895  00E9D2  1035               	iorwf	diet_press@dietTable+1,w,c
  7896  00E9D4  A4D8               	btfss	status,2,c
  7897  00E9D6  D012               	goto	l398
  7898  00E9D8  0E0C               	movlw	12
  7899  00E9DA  1836               	xorwf	diet_press@dietTable+2,w,c
  7900  00E9DC  1037               	iorwf	diet_press@dietTable+3,w,c
  7901  00E9DE  A4D8               	btfss	status,2,c
  7902  00E9E0  D00D               	goto	l398
  7903  00E9E2  0E0C               	movlw	12
  7904  00E9E4  1838               	xorwf	diet_press@dietTable+4,w,c
  7905  00E9E6  1039               	iorwf	diet_press@dietTable+5,w,c
  7906  00E9E8  A4D8               	btfss	status,2,c
  7907  00E9EA  D008               	goto	l398
  7908  00E9EC  503A               	movf	diet_press@dietTable+6,w,c
  7909  00E9EE  103B               	iorwf	diet_press@dietTable+7,w,c
  7910  00E9F0  A4D8               	btfss	status,2,c
  7911  00E9F2  D004               	goto	l398
  7912                           
  7913                           ;standbyMode.c: 778: sum = 27;
  7914  00E9F4  0E00               	movlw	0
  7915  00E9F6  6E32               	movwf	diet_press@sum+1,c
  7916  00E9F8  0E1B               	movlw	27
  7917  00E9FA  D0BC               	goto	L64
  7918  00E9FC                     l398:
  7919                           
  7920                           ;standbyMode.c: 782: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7921  00E9FC  0E03               	movlw	3
  7922  00E9FE  1834               	xorwf	diet_press@dietTable,w,c
  7923  00EA00  1035               	iorwf	diet_press@dietTable+1,w,c
  7924  00EA02  A4D8               	btfss	status,2,c
  7925  00EA04  D012               	goto	l400
  7926  00EA06  0E07               	movlw	7
  7927  00EA08  1836               	xorwf	diet_press@dietTable+2,w,c
  7928  00EA0A  1037               	iorwf	diet_press@dietTable+3,w,c
  7929  00EA0C  A4D8               	btfss	status,2,c
  7930  00EA0E  D00D               	goto	l400
  7931  00EA10  0E0C               	movlw	12
  7932  00EA12  1838               	xorwf	diet_press@dietTable+4,w,c
  7933  00EA14  1039               	iorwf	diet_press@dietTable+5,w,c
  7934  00EA16  A4D8               	btfss	status,2,c
  7935  00EA18  D008               	goto	l400
  7936  00EA1A  503A               	movf	diet_press@dietTable+6,w,c
  7937  00EA1C  103B               	iorwf	diet_press@dietTable+7,w,c
  7938  00EA1E  A4D8               	btfss	status,2,c
  7939  00EA20  D004               	goto	l400
  7940                           
  7941                           ;standbyMode.c: 783: sum = 22;
  7942  00EA22  0E00               	movlw	0
  7943  00EA24  6E32               	movwf	diet_press@sum+1,c
  7944  00EA26  0E16               	movlw	22
  7945  00EA28  D0A5               	goto	L64
  7946  00EA2A                     l400:
  7947                           
  7948                           ;standbyMode.c: 787: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7949  00EA2A  0E07               	movlw	7
  7950  00EA2C  1834               	xorwf	diet_press@dietTable,w,c
  7951  00EA2E  1035               	iorwf	diet_press@dietTable+1,w,c
  7952  00EA30  A4D8               	btfss	status,2,c
  7953  00EA32  D012               	goto	l402
  7954  00EA34  0E07               	movlw	7
  7955  00EA36  1836               	xorwf	diet_press@dietTable+2,w,c
  7956  00EA38  1037               	iorwf	diet_press@dietTable+3,w,c
  7957  00EA3A  A4D8               	btfss	status,2,c
  7958  00EA3C  D00D               	goto	l402
  7959  00EA3E  0E0C               	movlw	12
  7960  00EA40  1838               	xorwf	diet_press@dietTable+4,w,c
  7961  00EA42  1039               	iorwf	diet_press@dietTable+5,w,c
  7962  00EA44  A4D8               	btfss	status,2,c
  7963  00EA46  D008               	goto	l402
  7964  00EA48  503A               	movf	diet_press@dietTable+6,w,c
  7965  00EA4A  103B               	iorwf	diet_press@dietTable+7,w,c
  7966  00EA4C  A4D8               	btfss	status,2,c
  7967  00EA4E  D004               	goto	l402
  7968                           
  7969                           ;standbyMode.c: 788: sum = 26;
  7970  00EA50  0E00               	movlw	0
  7971  00EA52  6E32               	movwf	diet_press@sum+1,c
  7972  00EA54  0E1A               	movlw	26
  7973  00EA56  D08E               	goto	L64
  7974  00EA58                     l402:
  7975                           
  7976                           ;standbyMode.c: 792: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7977  00EA58  0E07               	movlw	7
  7978  00EA5A  1834               	xorwf	diet_press@dietTable,w,c
  7979  00EA5C  1035               	iorwf	diet_press@dietTable+1,w,c
  7980  00EA5E  A4D8               	btfss	status,2,c
  7981  00EA60  D012               	goto	l404
  7982  00EA62  0E0C               	movlw	12
  7983  00EA64  1836               	xorwf	diet_press@dietTable+2,w,c
  7984  00EA66  1037               	iorwf	diet_press@dietTable+3,w,c
  7985  00EA68  A4D8               	btfss	status,2,c
  7986  00EA6A  D00D               	goto	l404
  7987  00EA6C  0E0C               	movlw	12
  7988  00EA6E  1838               	xorwf	diet_press@dietTable+4,w,c
  7989  00EA70  1039               	iorwf	diet_press@dietTable+5,w,c
  7990  00EA72  A4D8               	btfss	status,2,c
  7991  00EA74  D008               	goto	l404
  7992  00EA76  503A               	movf	diet_press@dietTable+6,w,c
  7993  00EA78  103B               	iorwf	diet_press@dietTable+7,w,c
  7994  00EA7A  A4D8               	btfss	status,2,c
  7995  00EA7C  D004               	goto	l404
  7996                           
  7997                           ;standbyMode.c: 793: sum = 31;
  7998  00EA7E  0E00               	movlw	0
  7999  00EA80  6E32               	movwf	diet_press@sum+1,c
  8000  00EA82  0E1F               	movlw	31
  8001  00EA84  D077               	goto	L64
  8002  00EA86                     l404:
  8003                           
  8004                           ;standbyMode.c: 797: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  8005  00EA86  0E03               	movlw	3
  8006  00EA88  1834               	xorwf	diet_press@dietTable,w,c
  8007  00EA8A  1035               	iorwf	diet_press@dietTable+1,w,c
  8008  00EA8C  A4D8               	btfss	status,2,c
  8009  00EA8E  D013               	goto	l406
  8010  00EA90  0E03               	movlw	3
  8011  00EA92  1836               	xorwf	diet_press@dietTable+2,w,c
  8012  00EA94  1037               	iorwf	diet_press@dietTable+3,w,c
  8013  00EA96  A4D8               	btfss	status,2,c
  8014  00EA98  D00E               	goto	l406
  8015  00EA9A  0E07               	movlw	7
  8016  00EA9C  1838               	xorwf	diet_press@dietTable+4,w,c
  8017  00EA9E  1039               	iorwf	diet_press@dietTable+5,w,c
  8018  00EAA0  A4D8               	btfss	status,2,c
  8019  00EAA2  D009               	goto	l406
  8020  00EAA4  0E0C               	movlw	12
  8021  00EAA6  183A               	xorwf	diet_press@dietTable+6,w,c
  8022  00EAA8  103B               	iorwf	diet_press@dietTable+7,w,c
  8023  00EAAA  A4D8               	btfss	status,2,c
  8024  00EAAC  D004               	goto	l406
  8025                           
  8026                           ;standbyMode.c: 798: sum = 25;
  8027  00EAAE  0E00               	movlw	0
  8028  00EAB0  6E32               	movwf	diet_press@sum+1,c
  8029  00EAB2  0E19               	movlw	25
  8030  00EAB4  D05F               	goto	L64
  8031  00EAB6                     l406:
  8032                           
  8033                           ;standbyMode.c: 802: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  8034  00EAB6  0E03               	movlw	3
  8035  00EAB8  1834               	xorwf	diet_press@dietTable,w,c
  8036  00EABA  1035               	iorwf	diet_press@dietTable+1,w,c
  8037  00EABC  A4D8               	btfss	status,2,c
  8038  00EABE  D013               	goto	l408
  8039  00EAC0  0E07               	movlw	7
  8040  00EAC2  1836               	xorwf	diet_press@dietTable+2,w,c
  8041  00EAC4  1037               	iorwf	diet_press@dietTable+3,w,c
  8042  00EAC6  A4D8               	btfss	status,2,c
  8043  00EAC8  D00E               	goto	l408
  8044  00EACA  0E07               	movlw	7
  8045  00EACC  1838               	xorwf	diet_press@dietTable+4,w,c
  8046  00EACE  1039               	iorwf	diet_press@dietTable+5,w,c
  8047  00EAD0  A4D8               	btfss	status,2,c
  8048  00EAD2  D009               	goto	l408
  8049  00EAD4  0E0C               	movlw	12
  8050  00EAD6  183A               	xorwf	diet_press@dietTable+6,w,c
  8051  00EAD8  103B               	iorwf	diet_press@dietTable+7,w,c
  8052  00EADA  A4D8               	btfss	status,2,c
  8053  00EADC  D004               	goto	l408
  8054                           
  8055                           ;standbyMode.c: 803: sum = 29;
  8056  00EADE  0E00               	movlw	0
  8057  00EAE0  6E32               	movwf	diet_press@sum+1,c
  8058  00EAE2  0E1D               	movlw	29
  8059  00EAE4  D047               	goto	L64
  8060  00EAE6                     l408:
  8061                           
  8062                           ;standbyMode.c: 807: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  8063  00EAE6  0E03               	movlw	3
  8064  00EAE8  1834               	xorwf	diet_press@dietTable,w,c
  8065  00EAEA  1035               	iorwf	diet_press@dietTable+1,w,c
  8066  00EAEC  A4D8               	btfss	status,2,c
  8067  00EAEE  D013               	goto	l410
  8068  00EAF0  0E07               	movlw	7
  8069  00EAF2  1836               	xorwf	diet_press@dietTable+2,w,c
  8070  00EAF4  1037               	iorwf	diet_press@dietTable+3,w,c
  8071  00EAF6  A4D8               	btfss	status,2,c
  8072  00EAF8  D00E               	goto	l410
  8073  00EAFA  0E0C               	movlw	12
  8074  00EAFC  1838               	xorwf	diet_press@dietTable+4,w,c
  8075  00EAFE  1039               	iorwf	diet_press@dietTable+5,w,c
  8076  00EB00  A4D8               	btfss	status,2,c
  8077  00EB02  D009               	goto	l410
  8078  00EB04  0E0C               	movlw	12
  8079  00EB06  183A               	xorwf	diet_press@dietTable+6,w,c
  8080  00EB08  103B               	iorwf	diet_press@dietTable+7,w,c
  8081  00EB0A  A4D8               	btfss	status,2,c
  8082  00EB0C  D004               	goto	l410
  8083                           
  8084                           ;standbyMode.c: 808: sum = 34;
  8085  00EB0E  0E00               	movlw	0
  8086  00EB10  6E32               	movwf	diet_press@sum+1,c
  8087  00EB12  0E22               	movlw	34
  8088  00EB14  D02F               	goto	L64
  8089  00EB16                     l410:
  8090                           
  8091                           ;standbyMode.c: 812: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  8092  00EB16  0E03               	movlw	3
  8093  00EB18  1834               	xorwf	diet_press@dietTable,w,c
  8094  00EB1A  1035               	iorwf	diet_press@dietTable+1,w,c
  8095  00EB1C  A4D8               	btfss	status,2,c
  8096  00EB1E  D013               	goto	l412
  8097  00EB20  0E0C               	movlw	12
  8098  00EB22  1836               	xorwf	diet_press@dietTable+2,w,c
  8099  00EB24  1037               	iorwf	diet_press@dietTable+3,w,c
  8100  00EB26  A4D8               	btfss	status,2,c
  8101  00EB28  D00E               	goto	l412
  8102  00EB2A  0E0C               	movlw	12
  8103  00EB2C  1838               	xorwf	diet_press@dietTable+4,w,c
  8104  00EB2E  1039               	iorwf	diet_press@dietTable+5,w,c
  8105  00EB30  A4D8               	btfss	status,2,c
  8106  00EB32  D009               	goto	l412
  8107  00EB34  0E0C               	movlw	12
  8108  00EB36  183A               	xorwf	diet_press@dietTable+6,w,c
  8109  00EB38  103B               	iorwf	diet_press@dietTable+7,w,c
  8110  00EB3A  A4D8               	btfss	status,2,c
  8111  00EB3C  D004               	goto	l412
  8112                           
  8113                           ;standbyMode.c: 813: sum = 39;
  8114  00EB3E  0E00               	movlw	0
  8115  00EB40  6E32               	movwf	diet_press@sum+1,c
  8116  00EB42  0E27               	movlw	39
  8117  00EB44  D017               	goto	L64
  8118  00EB46                     l412:
  8119                           
  8120                           ;standbyMode.c: 817: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  8121  00EB46  0E07               	movlw	7
  8122  00EB48  1834               	xorwf	diet_press@dietTable,w,c
  8123  00EB4A  1035               	iorwf	diet_press@dietTable+1,w,c
  8124  00EB4C  A4D8               	btfss	status,2,c
  8125  00EB4E  D014               	goto	l414
  8126  00EB50  0E0C               	movlw	12
  8127  00EB52  1836               	xorwf	diet_press@dietTable+2,w,c
  8128  00EB54  1037               	iorwf	diet_press@dietTable+3,w,c
  8129  00EB56  A4D8               	btfss	status,2,c
  8130  00EB58  D00F               	goto	l414
  8131  00EB5A  0E0C               	movlw	12
  8132  00EB5C  1838               	xorwf	diet_press@dietTable+4,w,c
  8133  00EB5E  1039               	iorwf	diet_press@dietTable+5,w,c
  8134  00EB60  A4D8               	btfss	status,2,c
  8135  00EB62  D00A               	goto	l414
  8136  00EB64  0E0C               	movlw	12
  8137  00EB66  183A               	xorwf	diet_press@dietTable+6,w,c
  8138  00EB68  103B               	iorwf	diet_press@dietTable+7,w,c
  8139  00EB6A  A4D8               	btfss	status,2,c
  8140  00EB6C  D005               	goto	l414
  8141                           
  8142                           ;standbyMode.c: 818: sum = 43;
  8143  00EB6E  0E00               	movlw	0
  8144  00EB70  6E32               	movwf	diet_press@sum+1,c
  8145  00EB72  0E2B               	movlw	43
  8146  00EB74                     L64:
  8147  00EB74  6E31               	movwf	diet_press@sum,c
  8148                           
  8149                           ;standbyMode.c: 819: }
  8150  00EB76  D02A               	goto	l415
  8151  00EB78                     l414:
  8152                           
  8153                           ;standbyMode.c: 822: else{
  8154                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8155  00EB78  0E01               	movlw	1
  8156  00EB7A  EC2B  F069         	call	_lcdInst
  8157  00EB7E  0EC3               	movlw	195
  8158  00EB80  6E27               	movwf	??_diet_press& (0+255),c
  8159  00EB82  0ECD               	movlw	205
  8160  00EB84                     u7307:
  8161  00EB84  2EE8               	decfsz	wreg,f,c
  8162  00EB86  D7FE               	bra	u7307
  8163  00EB88  2E27               	decfsz	??_diet_press& (0+255),f,c
  8164  00EB8A  D7FC               	bra	u7307
  8165  00EB8C  F000               	nop	
  8166                           
  8167                           ;standbyMode.c: 824: printf("Invalid diet!");
  8168  00EB8E  0E12               	movlw	low STR_36
  8169  00EB90  6E0D               	movwf	printf@f,c
  8170  00EB92  0EFF               	movlw	high STR_36
  8171  00EB94  6E0E               	movwf	printf@f+1,c
  8172  00EB96  ECAF  F06F         	call	_printf	;wreg free
  8173                           
  8174                           ;standbyMode.c: 825: lcdInst(0xC0);;
  8175  00EB9A  0EC0               	movlw	192
  8176  00EB9C  EC2B  F069         	call	_lcdInst
  8177                           
  8178                           ;standbyMode.c: 826: printf("Try again.");
  8179  00EBA0  0E9E               	movlw	low STR_33
  8180  00EBA2  6E0D               	movwf	printf@f,c
  8181  00EBA4  0EFF               	movlw	high STR_33
  8182  00EBA6  6E0E               	movwf	printf@f+1,c
  8183  00EBA8  ECAF  F06F         	call	_printf	;wreg free
  8184                           
  8185                           ;standbyMode.c: 827: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8186  00EBAC  0E33               	movlw	51
  8187  00EBAE  6E28               	movwf	(??_diet_press+1)& (0+255),c
  8188  00EBB0  0EBB               	movlw	187
  8189  00EBB2  6E27               	movwf	??_diet_press& (0+255),c
  8190  00EBB4  0EE0               	movlw	224
  8191  00EBB6                     u7317:
  8192  00EBB6  2EE8               	decfsz	wreg,f,c
  8193  00EBB8  D7FE               	bra	u7317
  8194  00EBBA  2E27               	decfsz	??_diet_press& (0+255),f,c
  8195  00EBBC  D7FC               	bra	u7317
  8196  00EBBE  2E28               	decfsz	(??_diet_press+1)& (0+255),f,c
  8197  00EBC0  D7FA               	bra	u7317
  8198                           
  8199                           ;standbyMode.c: 828: sum = 0;
  8200  00EBC2  0E00               	movlw	0
  8201  00EBC4  6E32               	movwf	diet_press@sum+1,c
  8202  00EBC6  0E00               	movlw	0
  8203  00EBC8  6E31               	movwf	diet_press@sum,c
  8204                           
  8205                           ;standbyMode.c: 829: goto START;
  8206  00EBCA  D572               	goto	_diet_press
  8207  00EBCC                     l415:
  8208                           
  8209                           ;standbyMode.c: 830: }
  8210                           ;standbyMode.c: 831: return sum;
  8211  00EBCC  C031  F025         	movff	diet_press@sum,?_diet_press
  8212  00EBD0  C032  F026         	movff	diet_press@sum+1,?_diet_press+1
  8213  00EBD4  0012               	return		;funcret
  8214  00EBD6                     __end_of_diet_press:
  8215                           	opt stack 0
  8216                           tblptru	equ	0xFF8
  8217                           tblptrh	equ	0xFF7
  8218                           tblptrl	equ	0xFF6
  8219                           tablat	equ	0xFF5
  8220                           prodh	equ	0xFF4
  8221                           prodl	equ	0xFF3
  8222                           intcon	equ	0xFF2
  8223                           postinc0	equ	0xFEE
  8224                           wreg	equ	0xFE8
  8225                           plusw1	equ	0xFE3
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           plusw2	equ	0xFDB
  8230                           fsr2h	equ	0xFDA
  8231                           fsr2l	equ	0xFD9
  8232                           status	equ	0xFD8
  8233                           
  8234 ;; *************** function _printf *****************
  8235 ;; Defined at:
  8236 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8239 ;;		 -> STR_69(11), STR_68(13), STR_67(11), STR_66(13), 
  8240 ;;		 -> STR_65(11), STR_64(8), STR_63(15), STR_62(16), 
  8241 ;;		 -> STR_61(10), STR_60(8), STR_59(15), STR_58(16), 
  8242 ;;		 -> STR_57(10), STR_56(16), STR_55(16), STR_54(17), 
  8243 ;;		 -> STR_53(13), STR_52(17), STR_51(14), STR_50(11), 
  8244 ;;		 -> STR_49(11), STR_48(15), STR_47(15), STR_46(10), 
  8245 ;;		 -> STR_45(13), STR_44(16), STR_43(16), STR_42(17), 
  8246 ;;		 -> STR_41(17), STR_40(8), STR_39(15), STR_38(15), 
  8247 ;;		 -> STR_37(11), STR_36(14), STR_35(16), STR_34(16), 
  8248 ;;		 -> STR_33(11), STR_32(14), STR_31(16), STR_30(16), 
  8249 ;;		 -> STR_29(16), STR_28(13), STR_27(13), STR_26(15), 
  8250 ;;		 -> STR_25(15), STR_24(17), STR_23(18), STR_22(15), 
  8251 ;;		 -> STR_21(11), STR_20(7), STR_19(3), STR_18(16), 
  8252 ;;		 -> STR_17(8), STR_16(16), STR_15(15), STR_14(6), 
  8253 ;;		 -> STR_13(14), STR_12(17), STR_11(7), STR_10(9), 
  8254 ;;		 -> STR_9(17), STR_8(11), STR_7(17), STR_6(14), 
  8255 ;;		 -> STR_5(17), STR_4(11), STR_3(15), STR_2(11), 
  8256 ;;		 -> STR_1(8), 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  idx             1   26[COMRAM] unsigned char 
  8259 ;;  tmpval          4    0        struct .
  8260 ;;  cp              3    0        PTR const unsigned char 
  8261 ;;  width           2   33[COMRAM] int 
  8262 ;;  val             2   30[COMRAM] unsigned int 
  8263 ;;  ap              2   27[COMRAM] PTR void [1]
  8264 ;;		 -> ?_printf(2), 
  8265 ;;  len             2    0        unsigned int 
  8266 ;;  c               1   35[COMRAM] char 
  8267 ;;  flag            1   32[COMRAM] unsigned char 
  8268 ;;  prec            1   29[COMRAM] char 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  2   12[COMRAM] int 
  8271 ;; Registers used:
  8272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8278 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;Total ram usage:       24 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    2
  8285 ;; This function calls:
  8286 ;;		___lwdiv
  8287 ;;		___lwmod
  8288 ;;		___wmul
  8289 ;;		_isdigit
  8290 ;;		_putch
  8291 ;; This function is called by:
  8292 ;;		_viewLogs
  8293 ;;		_displayLogs
  8294 ;;		_food_press
  8295 ;;		_diet_press
  8296 ;;		_which_drawer
  8297 ;;		_standbyMode
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text15
  8302  00DF5E                     __ptext15:
  8303                           	opt stack 0
  8304  00DF5E                     _printf:
  8305                           	opt stack 26
  8306                           
  8307                           ;doprnt.c: 466: va_list ap;
  8308                           ;doprnt.c: 499: signed char c;
  8309                           ;doprnt.c: 501: int width;
  8310                           ;doprnt.c: 506: signed char prec;
  8311                           ;doprnt.c: 508: unsigned char flag;
  8312                           ;doprnt.c: 523: union {
  8313                           ;doprnt.c: 524: unsigned long vd;
  8314                           ;doprnt.c: 525: double integ;
  8315                           ;doprnt.c: 526: } tmpval;
  8316                           ;doprnt.c: 528: unsigned int val;
  8317                           ;doprnt.c: 529: unsigned len;
  8318                           ;doprnt.c: 530: const char * cp;
  8319                           ;doprnt.c: 533: *ap = __va_start();
  8320                           
  8321                           ;incstack = 0
  8322  00DF5E  0E0F               	movlw	low (?_printf+2)
  8323  00DF60  6E1C               	movwf	printf@ap,c
  8324  00DF62  0E00               	movlw	high (?_printf+2)
  8325  00DF64  6E1D               	movwf	printf@ap+1,c
  8326                           
  8327                           ;doprnt.c: 536: while(c = *f++) {
  8328  00DF66  D174               	goto	u3620
  8329  00DF68                     
  8330                           ;doprnt.c: 538: if(c != '%')
  8331  00DF68  0E25               	movlw	37
  8332  00DF6A  1824               	xorwf	printf@c,w,c
  8333  00DF6C  B4D8               	btfsc	status,2,c
  8334  00DF6E  D004               	goto	l637
  8335                           
  8336                           ;doprnt.c: 540: {
  8337                           ;doprnt.c: 541: (putch(c) );
  8338  00DF70  5024               	movf	printf@c,w,c
  8339  00DF72  EC35  F069         	call	_putch
  8340                           
  8341                           ;doprnt.c: 542: continue;
  8342  00DF76  D16C               	goto	u3620
  8343  00DF78                     l637:
  8344                           
  8345                           ;doprnt.c: 543: }
  8346                           ;doprnt.c: 546: width = 0;
  8347  00DF78  0E00               	movlw	0
  8348  00DF7A  6E23               	movwf	printf@width+1,c
  8349  00DF7C  0E00               	movlw	0
  8350  00DF7E  6E22               	movwf	printf@width,c
  8351                           
  8352                           ;doprnt.c: 548: flag = 0;
  8353  00DF80  0E00               	movlw	0
  8354  00DF82  6E21               	movwf	printf@flag,c
  8355                           
  8356                           ;doprnt.c: 551: switch(*f) {
  8357                           
  8358                           ;doprnt.c: 550: for(;;) {
  8359  00DF84  D003               	goto	l639
  8360  00DF86                     
  8361                           ;doprnt.c: 580: flag |= 0x04;
  8362  00DF86  8421               	bsf	printf@flag,2,c
  8363                           
  8364                           ;doprnt.c: 581: f++;
  8365  00DF88  4A0D               	infsnz	printf@f,f,c
  8366  00DF8A  2A0E               	incf	printf@f+1,f,c
  8367  00DF8C                     l639:
  8368  00DF8C  C00D  FFF6         	movff	printf@f,tblptrl
  8369  00DF90  C00E  FFF7         	movff	printf@f+1,tblptrh
  8370  00DF94                     	if	0	;tblptru may be non-zero
  8371  00DF94                     	endif
  8372  00DF94                     	if	0	;tblptru may be non-zero
  8373  00DF94                     	endif
  8374  00DF94  0008               	tblrd		*
  8375  00DF96  50F5               	movf	tablat,w,c
  8376                           
  8377                           ; Switch size 1, requested type "space"
  8378                           ; Number of cases is 1, Range of values is 48 to 48
  8379                           ; switch strategies available:
  8380                           ; Name         Instructions Cycles
  8381                           ; simple_byte            4     3 (average)
  8382                           ;	Chosen strategy is simple_byte
  8383  00DF98  0A30               	xorlw	48	; case 48
  8384  00DF9A  B4D8               	btfsc	status,2,c
  8385  00DF9C  D7F4               	goto	l640
  8386                           
  8387                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8388                           
  8389                           ;doprnt.c: 586: }
  8390                           
  8391                           ;doprnt.c: 585: break;
  8392  00DF9E  C00D  FFF6         	movff	printf@f,tblptrl
  8393  00DFA2  C00E  FFF7         	movff	printf@f+1,tblptrh
  8394  00DFA6                     	if	0	;tblptru may be non-zero
  8395  00DFA6                     	endif
  8396  00DFA6                     	if	0	;tblptru may be non-zero
  8397  00DFA6                     	endif
  8398  00DFA6  0008               	tblrd		*
  8399  00DFA8  50F5               	movf	tablat,w,c
  8400  00DFAA  EC49  F069         	call	_isdigit
  8401  00DFAE  A0D8               	btfss	status,0,c
  8402  00DFB0  D035               	goto	l647
  8403                           
  8404                           ;doprnt.c: 598: width = 0;
  8405  00DFB2  0E00               	movlw	0
  8406  00DFB4  6E23               	movwf	printf@width+1,c
  8407  00DFB6  0E00               	movlw	0
  8408  00DFB8  6E22               	movwf	printf@width,c
  8409  00DFBA                     
  8410                           ;doprnt.c: 600: width *= 10;
  8411  00DFBA  C022  F001         	movff	printf@width,___wmul@multiplier
  8412  00DFBE  C023  F002         	movff	printf@width+1,___wmul@multiplier+1
  8413  00DFC2  0E00               	movlw	0
  8414  00DFC4  6E04               	movwf	___wmul@multiplicand+1,c
  8415  00DFC6  0E0A               	movlw	10
  8416  00DFC8  6E03               	movwf	___wmul@multiplicand,c
  8417  00DFCA  EC7B  F069         	call	___wmul	;wreg free
  8418  00DFCE  C001  F022         	movff	?___wmul,printf@width
  8419  00DFD2  C002  F023         	movff	?___wmul+1,printf@width+1
  8420                           
  8421                           ;doprnt.c: 601: width += *f++ - '0';
  8422  00DFD6  0ED0               	movlw	208
  8423  00DFD8  6E17               	movwf	??_printf& (0+255),c
  8424  00DFDA  0EFF               	movlw	255
  8425  00DFDC  6E18               	movwf	(??_printf+1)& (0+255),c
  8426  00DFDE  C00D  FFF6         	movff	printf@f,tblptrl
  8427  00DFE2  C00E  FFF7         	movff	printf@f+1,tblptrh
  8428  00DFE6                     	if	0	;tblptru may be non-zero
  8429  00DFE6                     	endif
  8430  00DFE6                     	if	0	;tblptru may be non-zero
  8431  00DFE6                     	endif
  8432  00DFE6  0008               	tblrd		*
  8433  00DFE8  50F5               	movf	tablat,w,c
  8434  00DFEA  6E19               	movwf	(??_printf+2)& (0+255),c
  8435  00DFEC  6A1A               	clrf	(??_printf+3)& (0+255),c
  8436  00DFEE  5017               	movf	??_printf,w,c
  8437  00DFF0  2619               	addwf	??_printf+2,f,c
  8438  00DFF2  5018               	movf	??_printf+1,w,c
  8439  00DFF4  221A               	addwfc	??_printf+3,f,c
  8440  00DFF6  5019               	movf	??_printf+2,w,c
  8441  00DFF8  2622               	addwf	printf@width,f,c
  8442  00DFFA  501A               	movf	??_printf+3,w,c
  8443  00DFFC  2223               	addwfc	printf@width+1,f,c
  8444  00DFFE  4A0D               	infsnz	printf@f,f,c
  8445  00E000  2A0E               	incf	printf@f+1,f,c
  8446                           
  8447                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8448  00E002  C00D  FFF6         	movff	printf@f,tblptrl
  8449  00E006  C00E  FFF7         	movff	printf@f+1,tblptrh
  8450  00E00A                     	if	0	;tblptru may be non-zero
  8451  00E00A                     	endif
  8452  00E00A                     	if	0	;tblptru may be non-zero
  8453  00E00A                     	endif
  8454  00E00A  0008               	tblrd		*
  8455  00E00C  50F5               	movf	tablat,w,c
  8456  00E00E  EC49  F069         	call	_isdigit
  8457  00E012  A0D8               	btfss	status,0,c
  8458  00E014  D003               	goto	l647
  8459  00E016  D7D1               	goto	l645
  8460  00E018                     
  8461                           ;doprnt.c: 721: flag |= 0x80;
  8462  00E018  8E21               	bsf	printf@flag,7,c
  8463                           
  8464                           ;doprnt.c: 723: break;
  8465  00E01A  D017               	goto	l652
  8466  00E01C                     l647:
  8467  00E01C  C00D  FFF6         	movff	printf@f,tblptrl
  8468  00E020  C00E  FFF7         	movff	printf@f+1,tblptrh
  8469  00E024  4A0D               	infsnz	printf@f,f,c
  8470  00E026  2A0E               	incf	printf@f+1,f,c
  8471  00E028                     	if	0	;tblptru may be non-zero
  8472  00E028                     	endif
  8473  00E028                     	if	0	;tblptru may be non-zero
  8474  00E028                     	endif
  8475  00E028  0008               	tblrd		*
  8476  00E02A  CFF5 F024          	movff	tablat,printf@c
  8477  00E02E  5024               	movf	printf@c,w,c
  8478                           
  8479                           ; Switch size 1, requested type "space"
  8480                           ; Number of cases is 4, Range of values is 0 to 120
  8481                           ; switch strategies available:
  8482                           ; Name         Instructions Cycles
  8483                           ; simple_byte           13     7 (average)
  8484                           ;	Chosen strategy is simple_byte
  8485  00E030  0A00               	xorlw	0	; case 0
  8486  00E032  B4D8               	btfsc	status,2,c
  8487  00E034  0012               	return	
  8488  00E036  0A64               	xorlw	100	; case 100
  8489  00E038  B4D8               	btfsc	status,2,c
  8490  00E03A  D007               	goto	l652
  8491  00E03C  0A0D               	xorlw	13	; case 105
  8492  00E03E  B4D8               	btfsc	status,2,c
  8493  00E040  D004               	goto	l652
  8494  00E042  0A11               	xorlw	17	; case 120
  8495  00E044  B4D8               	btfsc	status,2,c
  8496  00E046  D7E8               	goto	l653
  8497  00E048  D103               	goto	u3620
  8498  00E04A                     l652:
  8499                           
  8500                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8501  00E04A  BE21               	btfsc	printf@flag,7,c
  8502  00E04C  D015               	goto	l655
  8503                           
  8504                           ;doprnt.c: 1253: {
  8505                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8506  00E04E  C01C  FFD9         	movff	printf@ap,fsr2l
  8507  00E052  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8508  00E056  CFDE F01F          	movff	postinc2,printf@val
  8509  00E05A  CFDD F020          	movff	postdec2,printf@val+1
  8510  00E05E  0E02               	movlw	2
  8511  00E060  261C               	addwf	printf@ap,f,c
  8512  00E062  0E00               	movlw	0
  8513  00E064  221D               	addwfc	printf@ap+1,f,c
  8514                           
  8515                           ;doprnt.c: 1261: if((int)val < 0) {
  8516  00E066  AE20               	btfss	printf@val+1,7,c
  8517  00E068  D044               	goto	l658
  8518                           
  8519                           ;doprnt.c: 1262: flag |= 0x03;
  8520  00E06A  0E03               	movlw	3
  8521  00E06C  1221               	iorwf	printf@flag,f,c
  8522                           
  8523                           ;doprnt.c: 1263: val = -val;
  8524  00E06E  6C1F               	negf	printf@val,c
  8525  00E070  1E20               	comf	printf@val+1,f,c
  8526  00E072  B0D8               	btfsc	status,0,c
  8527  00E074  2A20               	incf	printf@val+1,f,c
  8528                           
  8529                           ;doprnt.c: 1264: }
  8530                           ;doprnt.c: 1266: }
  8531  00E076  D03D               	goto	l658
  8532  00E078                     l655:
  8533                           
  8534                           ;doprnt.c: 1268: else
  8535                           ;doprnt.c: 1273: {
  8536                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8537  00E078  C01C  FFD9         	movff	printf@ap,fsr2l
  8538  00E07C  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8539  00E080  CFDE F01F          	movff	postinc2,printf@val
  8540  00E084  CFDD F020          	movff	postdec2,printf@val+1
  8541  00E088  0E02               	movlw	2
  8542  00E08A  261C               	addwf	printf@ap,f,c
  8543  00E08C  0E00               	movlw	0
  8544  00E08E  221D               	addwfc	printf@ap+1,f,c
  8545                           
  8546                           ;doprnt.c: 1287: }
  8547                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8548  00E090  D030               	goto	l658
  8549  00E092                     
  8550                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8551  00E092  0E01               	movlw	1
  8552  00E094  6E24               	movwf	printf@c,c
  8553  00E096                     l3388:
  8554  00E096  0E05               	movlw	5
  8555  00E098  1824               	xorwf	printf@c,w,c
  8556  00E09A  B4D8               	btfsc	status,2,c
  8557  00E09C  D032               	goto	l663
  8558                           
  8559                           ;doprnt.c: 1306: if(val < dpowers[c])
  8560  00E09E  5024               	movf	printf@c,w,c
  8561  00E0A0  0D02               	mullw	2
  8562  00E0A2  0E45               	movlw	low _dpowers
  8563  00E0A4  24F3               	addwf	prodl,w,c
  8564  00E0A6  6EF6               	movwf	tblptrl,c
  8565  00E0A8  0EFD               	movlw	high _dpowers
  8566  00E0AA  20F4               	addwfc	prodh,w,c
  8567  00E0AC  6EF7               	movwf	tblptrh,c
  8568  00E0AE                     	if	0	;There are less than 3 active tblptr bytes
  8569  00E0AE                     	endif
  8570  00E0AE  0009               	tblrd		*+
  8571  00E0B0  50F5               	movf	tablat,w,c
  8572  00E0B2  5C1F               	subwf	printf@val,w,c
  8573  00E0B4  0009               	tblrd		*+
  8574  00E0B6  50F5               	movf	tablat,w,c
  8575  00E0B8  5820               	subwfb	printf@val+1,w,c
  8576  00E0BA  A0D8               	btfss	status,0,c
  8577  00E0BC  D022               	goto	l663
  8578                           
  8579                           ;doprnt.c: 1307: break;
  8580  00E0BE  2A24               	incf	printf@c,f,c
  8581  00E0C0  D7EA               	goto	l3388
  8582  00E0C2                     
  8583                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8584  00E0C2  0E01               	movlw	1
  8585  00E0C4  6E24               	movwf	printf@c,c
  8586  00E0C6                     l3402:
  8587  00E0C6  0E04               	movlw	4
  8588  00E0C8  1824               	xorwf	printf@c,w,c
  8589  00E0CA  B4D8               	btfsc	status,2,c
  8590  00E0CC  D01A               	goto	l663
  8591                           
  8592                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8593  00E0CE  5024               	movf	printf@c,w,c
  8594  00E0D0  0D02               	mullw	2
  8595  00E0D2  0E4F               	movlw	low _hexpowers
  8596  00E0D4  24F3               	addwf	prodl,w,c
  8597  00E0D6  6EF6               	movwf	tblptrl,c
  8598  00E0D8  0EFD               	movlw	high _hexpowers
  8599  00E0DA  20F4               	addwfc	prodh,w,c
  8600  00E0DC  6EF7               	movwf	tblptrh,c
  8601  00E0DE                     	if	0	;There are less than 3 active tblptr bytes
  8602  00E0DE                     	endif
  8603  00E0DE  0009               	tblrd		*+
  8604  00E0E0  50F5               	movf	tablat,w,c
  8605  00E0E2  5C1F               	subwf	printf@val,w,c
  8606  00E0E4  0009               	tblrd		*+
  8607  00E0E6  50F5               	movf	tablat,w,c
  8608  00E0E8  5820               	subwfb	printf@val+1,w,c
  8609  00E0EA  A0D8               	btfss	status,0,c
  8610  00E0EC  D00A               	goto	l663
  8611                           
  8612                           ;doprnt.c: 1318: break;
  8613  00E0EE  2A24               	incf	printf@c,f,c
  8614  00E0F0  D7EA               	goto	l3402
  8615  00E0F2                     l658:
  8616  00E0F2  5021               	movf	printf@flag,w,c
  8617  00E0F4  0B80               	andlw	128
  8618                           
  8619                           ; Switch size 1, requested type "space"
  8620                           ; Number of cases is 2, Range of values is 0 to 128
  8621                           ; switch strategies available:
  8622                           ; Name         Instructions Cycles
  8623                           ; simple_byte            7     4 (average)
  8624                           ;	Chosen strategy is simple_byte
  8625  00E0F6  0A00               	xorlw	0	; case 0
  8626  00E0F8  B4D8               	btfsc	status,2,c
  8627  00E0FA  D7CB               	goto	l659
  8628  00E0FC  0A80               	xorlw	128	; case 128
  8629  00E0FE  B4D8               	btfsc	status,2,c
  8630  00E100  D7E0               	goto	l664
  8631  00E102                     l663:
  8632                           
  8633                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8634  00E102  5022               	movf	printf@width,w,c
  8635  00E104  1023               	iorwf	printf@width+1,w,c
  8636  00E106  B4D8               	btfsc	status,2,c
  8637  00E108  D009               	goto	l668
  8638  00E10A  C021  F017         	movff	printf@flag,??_printf
  8639  00E10E  0E03               	movlw	3
  8640  00E110  1617               	andwf	??_printf,f,c
  8641  00E112  B4D8               	btfsc	status,2,c
  8642  00E114  D003               	goto	l668
  8643                           
  8644                           ;doprnt.c: 1346: width--;
  8645  00E116  0622               	decf	printf@width,f,c
  8646  00E118  A0D8               	btfss	status,0,c
  8647  00E11A  0623               	decf	printf@width+1,f,c
  8648  00E11C                     l668:
  8649                           
  8650                           ;doprnt.c: 1381: if(width > c)
  8651  00E11C  0E80               	movlw	128
  8652  00E11E  BE24               	btfsc	printf@c,7,c
  8653  00E120  0E7F               	movlw	127
  8654  00E122  6E17               	movwf	??_printf& (0+255),c
  8655  00E124  5022               	movf	printf@width,w,c
  8656  00E126  5C24               	subwf	printf@c,w,c
  8657  00E128  5023               	movf	printf@width+1,w,c
  8658  00E12A  0A80               	xorlw	128
  8659  00E12C  5817               	subwfb	??_printf& (0+255),w,c
  8660  00E12E  B0D8               	btfsc	status,0,c
  8661  00E130  D007               	goto	l669
  8662                           
  8663                           ;doprnt.c: 1382: width -= c;
  8664  00E132  5024               	movf	printf@c,w,c
  8665  00E134  5E22               	subwf	printf@width,f,c
  8666  00E136  0E00               	movlw	0
  8667  00E138  BE24               	btfsc	printf@c,7,c
  8668  00E13A  0EFF               	movlw	255
  8669  00E13C  5A23               	subwfb	printf@width+1,f,c
  8670  00E13E  D004               	goto	l670
  8671  00E140                     l669:
  8672                           
  8673                           ;doprnt.c: 1383: else
  8674                           ;doprnt.c: 1384: width = 0;
  8675  00E140  0E00               	movlw	0
  8676  00E142  6E23               	movwf	printf@width+1,c
  8677  00E144  0E00               	movlw	0
  8678  00E146  6E22               	movwf	printf@width,c
  8679  00E148                     l670:
  8680                           
  8681                           ;doprnt.c: 1387: if(flag & 0x04) {
  8682  00E148  A421               	btfss	printf@flag,2,c
  8683  00E14A  D014               	goto	l671
  8684                           
  8685                           ;doprnt.c: 1392: if(flag & 0x03)
  8686  00E14C  C021  F017         	movff	printf@flag,??_printf
  8687  00E150  0E03               	movlw	3
  8688  00E152  1617               	andwf	??_printf,f,c
  8689  00E154  B4D8               	btfsc	status,2,c
  8690  00E156  D003               	goto	l672
  8691                           
  8692                           ;doprnt.c: 1393: (putch('-') );
  8693  00E158  0E2D               	movlw	45
  8694  00E15A  EC35  F069         	call	_putch
  8695  00E15E                     l672:
  8696                           
  8697                           ;doprnt.c: 1415: if(width)
  8698  00E15E  5022               	movf	printf@width,w,c
  8699  00E160  1023               	iorwf	printf@width+1,w,c
  8700  00E162  B4D8               	btfsc	status,2,c
  8701  00E164  D01E               	goto	l680
  8702                           
  8703                           ;doprnt.c: 1417: (putch('0') );
  8704                           
  8705                           ;doprnt.c: 1416: do
  8706  00E166  0E30               	movlw	48
  8707  00E168  EC35  F069         	call	_putch
  8708                           
  8709                           ;doprnt.c: 1418: while(--width);
  8710  00E16C  0622               	decf	printf@width,f,c
  8711  00E16E  A0D8               	btfss	status,0,c
  8712  00E170  0623               	decf	printf@width+1,f,c
  8713  00E172  D7F5               	goto	l672
  8714  00E174                     l671:
  8715                           
  8716                           ;doprnt.c: 1422: {
  8717                           ;doprnt.c: 1424: if(width
  8718                           ;doprnt.c: 1428: )
  8719  00E174  5022               	movf	printf@width,w,c
  8720  00E176  1023               	iorwf	printf@width+1,w,c
  8721  00E178  B4D8               	btfsc	status,2,c
  8722  00E17A  D00A               	goto	u3600
  8723  00E17C                     u3590:
  8724                           
  8725                           ;doprnt.c: 1430: (putch(' ') );
  8726                           
  8727                           ;doprnt.c: 1429: do
  8728  00E17C  0E20               	movlw	32
  8729  00E17E  EC35  F069         	call	_putch
  8730                           
  8731                           ;doprnt.c: 1431: while(--width);
  8732  00E182  0622               	decf	printf@width,f,c
  8733  00E184  A0D8               	btfss	status,0,c
  8734  00E186  0623               	decf	printf@width+1,f,c
  8735  00E188  5022               	movf	printf@width,w,c
  8736  00E18A  1023               	iorwf	printf@width+1,w,c
  8737  00E18C  A4D8               	btfss	status,2,c
  8738  00E18E  D7F6               	goto	u3590
  8739  00E190                     u3600:
  8740                           
  8741                           ;doprnt.c: 1438: if(flag & 0x03)
  8742  00E190  C021  F017         	movff	printf@flag,??_printf
  8743  00E194  0E03               	movlw	3
  8744  00E196  1617               	andwf	??_printf,f,c
  8745  00E198  B4D8               	btfsc	status,2,c
  8746  00E19A  D003               	goto	l680
  8747                           
  8748                           ;doprnt.c: 1439: (putch('-') );
  8749  00E19C  0E2D               	movlw	45
  8750  00E19E  EC35  F069         	call	_putch
  8751  00E1A2                     l680:
  8752                           
  8753                           ;doprnt.c: 1469: }
  8754                           ;doprnt.c: 1472: prec = c;
  8755  00E1A2  C024  F01E         	movff	printf@c,printf@prec
  8756                           
  8757                           ;doprnt.c: 1474: while(prec--) {
  8758  00E1A6  D050               	goto	l681
  8759  00E1A8                     
  8760                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8761  00E1A8  501E               	movf	printf@prec,w,c
  8762  00E1AA  0D02               	mullw	2
  8763  00E1AC  0E45               	movlw	low _dpowers
  8764  00E1AE  24F3               	addwf	prodl,w,c
  8765  00E1B0  6EF6               	movwf	tblptrl,c
  8766  00E1B2  0EFD               	movlw	high _dpowers
  8767  00E1B4  20F4               	addwfc	prodh,w,c
  8768  00E1B6  6EF7               	movwf	tblptrh,c
  8769  00E1B8                     	if	0	;There are less than 3 active tblptr bytes
  8770  00E1B8                     	endif
  8771  00E1B8  0009               	tblrd		*+
  8772  00E1BA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8773  00E1BE  000A               	tblrd		*-
  8774  00E1C0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8775  00E1C4  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8776  00E1C8  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8777  00E1CC  EC19  F06A         	call	___lwdiv	;wreg free
  8778  00E1D0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8779  00E1D4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8780  00E1D8  0E00               	movlw	0
  8781  00E1DA  6E0B               	movwf	___lwmod@divisor+1,c
  8782  00E1DC  0E0A               	movlw	10
  8783  00E1DE  6E0A               	movwf	___lwmod@divisor,c
  8784  00E1E0  ECD2  F069         	call	___lwmod	;wreg free
  8785  00E1E4  5008               	movf	?___lwmod,w,c
  8786  00E1E6  0F30               	addlw	48
  8787  00E1E8  6E24               	movwf	printf@c,c
  8788                           
  8789                           ;doprnt.c: 1491: break;
  8790  00E1EA  D02B               	goto	l685
  8791  00E1EC                     
  8792                           ;doprnt.c: 1499: {
  8793                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8794  00E1EC  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8795  00E1F0  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8796  00E1F4  501E               	movf	printf@prec,w,c
  8797  00E1F6  0D02               	mullw	2
  8798  00E1F8  0E4F               	movlw	low _hexpowers
  8799  00E1FA  24F3               	addwf	prodl,w,c
  8800  00E1FC  6EF6               	movwf	tblptrl,c
  8801  00E1FE  0EFD               	movlw	high _hexpowers
  8802  00E200  20F4               	addwfc	prodh,w,c
  8803  00E202  6EF7               	movwf	tblptrh,c
  8804  00E204                     	if	0	;There are less than 3 active tblptr bytes
  8805  00E204                     	endif
  8806  00E204  0009               	tblrd		*+
  8807  00E206  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8808  00E20A  000A               	tblrd		*-
  8809  00E20C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8810  00E210  EC19  F06A         	call	___lwdiv	;wreg free
  8811  00E214  5001               	movf	?___lwdiv,w,c
  8812  00E216  0B0F               	andlw	15
  8813  00E218  6E1B               	movwf	printf@idx,c
  8814                           
  8815                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8816  00E21A  501B               	movf	printf@idx,w,c
  8817  00E21C  0D01               	mullw	1
  8818  00E21E  0E76               	movlw	low STR_70
  8819  00E220  24F3               	addwf	prodl,w,c
  8820  00E222  6EF6               	movwf	tblptrl,c
  8821  00E224  0EFD               	movlw	high STR_70
  8822  00E226  20F4               	addwfc	prodh,w,c
  8823  00E228  6EF7               	movwf	tblptrh,c
  8824  00E22A                     	if	0	;There are less than 3 active tblptr bytes
  8825  00E22A                     	endif
  8826  00E22A  0008               	tblrd		*
  8827  00E22C  CFF5 F024          	movff	tablat,printf@c
  8828                           
  8829                           ;doprnt.c: 1523: }
  8830                           
  8831                           ;doprnt.c: 1508: }
  8832                           ;doprnt.c: 1510: break;
  8833  00E230  D008               	goto	l685
  8834  00E232  5021               	movf	printf@flag,w,c
  8835  00E234  0B80               	andlw	128
  8836                           
  8837                           ; Switch size 1, requested type "space"
  8838                           ; Number of cases is 2, Range of values is 0 to 128
  8839                           ; switch strategies available:
  8840                           ; Name         Instructions Cycles
  8841                           ; simple_byte            7     4 (average)
  8842                           ;	Chosen strategy is simple_byte
  8843  00E236  0A00               	xorlw	0	; case 0
  8844  00E238  B4D8               	btfsc	status,2,c
  8845  00E23A  D7B6               	goto	l684
  8846  00E23C  0A80               	xorlw	128	; case 128
  8847  00E23E  B4D8               	btfsc	status,2,c
  8848  00E240  D7D5               	goto	l686
  8849  00E242                     l685:
  8850                           
  8851                           ;doprnt.c: 1524: (putch(c) );
  8852  00E242  5024               	movf	printf@c,w,c
  8853  00E244  EC35  F069         	call	_putch
  8854  00E248                     l681:
  8855  00E248  061E               	decf	printf@prec,f,c
  8856  00E24A  281E               	incf	printf@prec,w,c
  8857  00E24C  A4D8               	btfss	status,2,c
  8858  00E24E  D7F1               	goto	l683
  8859  00E250                     u3620:
  8860  00E250  C00D  FFF6         	movff	printf@f,tblptrl
  8861  00E254  C00E  FFF7         	movff	printf@f+1,tblptrh
  8862  00E258  4A0D               	infsnz	printf@f,f,c
  8863  00E25A  2A0E               	incf	printf@f+1,f,c
  8864  00E25C                     	if	0	;tblptru may be non-zero
  8865  00E25C                     	endif
  8866  00E25C                     	if	0	;tblptru may be non-zero
  8867  00E25C                     	endif
  8868  00E25C  0008               	tblrd		*
  8869  00E25E  CFF5 F024          	movff	tablat,printf@c
  8870  00E262  5024               	movf	printf@c,w,c
  8871  00E264  B4D8               	btfsc	status,2,c
  8872  00E266  0012               	return	
  8873  00E268  D67F               	goto	l636
  8874  00E26A                     __end_of_printf:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           plusw1	equ	0xFE3
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           plusw2	equ	0xFDB
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _putch *****************
  8895 ;; Defined at:
  8896 ;;		line 85 in file "standbyMode.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  data            1    wreg     unsigned char 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  data            1    2[COMRAM] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        1 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    1
  8917 ;; This function calls:
  8918 ;;		_lcdNibble
  8919 ;; This function is called by:
  8920 ;;		_viewLogs
  8921 ;;		_food_press
  8922 ;;		_diet_press
  8923 ;;		_which_drawer
  8924 ;;		_printf
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text16
  8929  00D26A                     __ptext16:
  8930                           	opt stack 0
  8931  00D26A                     _putch:
  8932                           	opt stack 27
  8933                           
  8934                           ;incstack = 0
  8935                           ;putch@data stored from wreg
  8936  00D26A  6E03               	movwf	putch@data,c
  8937                           
  8938                           ;standbyMode.c: 93: LATDbits.LATD2 = 1;
  8939  00D26C  848C               	bsf	3980,2,c	;volatile
  8940                           
  8941                           ;standbyMode.c: 94: lcdNibble(data);
  8942  00D26E  5003               	movf	putch@data,w,c
  8943  00D270  EC99  F06A         	call	_lcdNibble
  8944                           
  8945                           ;standbyMode.c: 95: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8946  00D274  0EC8               	movlw	200
  8947  00D276                     u7327:
  8948  00D276  D000               	nop2	
  8949  00D278  2EE8               	decfsz	wreg,f,c
  8950  00D27A  D7FD               	bra	u7327
  8951  00D27C  0012               	return		;funcret
  8952  00D27E                     __end_of_putch:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           postinc0	equ	0xFEE
  8962                           wreg	equ	0xFE8
  8963                           plusw1	equ	0xFE3
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           plusw2	equ	0xFDB
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8
  8971                           
  8972 ;; *************** function _isdigit *****************
  8973 ;; Defined at:
  8974 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  c               1    wreg     unsigned char 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  c               1    2[COMRAM] unsigned char 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;		None               void
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;Total ram usage:        3 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_printf
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text17
  9002  00D292                     __ptext17:
  9003                           	opt stack 0
  9004  00D292                     _isdigit:
  9005                           	opt stack 27
  9006                           
  9007                           ;incstack = 0
  9008                           ;isdigit@c stored from wreg
  9009  00D292  6E03               	movwf	isdigit@c,c
  9010  00D294  0E00               	movlw	0
  9011  00D296  6E02               	movwf	_isdigit$944,c
  9012  00D298  0E3A               	movlw	58
  9013  00D29A  6003               	cpfslt	isdigit@c,c
  9014  00D29C  D005               	goto	l1019
  9015  00D29E  0E2F               	movlw	47
  9016  00D2A0  6403               	cpfsgt	isdigit@c,c
  9017  00D2A2  D002               	goto	l1019
  9018  00D2A4  0E01               	movlw	1
  9019  00D2A6  6E02               	movwf	_isdigit$944,c
  9020  00D2A8                     l1019:
  9021  00D2A8  C002  F001         	movff	_isdigit$944,??_isdigit
  9022  00D2AC  3001               	rrcf	??_isdigit,w,c
  9023  00D2AE  0012               	return	
  9024  00D2B0                     __end_of_isdigit:
  9025                           	opt stack 0
  9026                           tblptru	equ	0xFF8
  9027                           tblptrh	equ	0xFF7
  9028                           tblptrl	equ	0xFF6
  9029                           tablat	equ	0xFF5
  9030                           prodh	equ	0xFF4
  9031                           prodl	equ	0xFF3
  9032                           intcon	equ	0xFF2
  9033                           postinc0	equ	0xFEE
  9034                           wreg	equ	0xFE8
  9035                           plusw1	equ	0xFE3
  9036                           indf2	equ	0xFDF
  9037                           postinc2	equ	0xFDE
  9038                           postdec2	equ	0xFDD
  9039                           plusw2	equ	0xFDB
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function ___wmul *****************
  9045 ;; Defined at:
  9046 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;  multiplier      2    0[COMRAM] unsigned int 
  9049 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;  product         2    4[COMRAM] unsigned int 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  2    0[COMRAM] unsigned int 
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0, prodl, prodh
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;Total ram usage:        6 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; This function calls:
  9068 ;;		Nothing
  9069 ;; This function is called by:
  9070 ;;		_displayLogs
  9071 ;;		_printf
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           	psect	text18
  9076  00D2F6                     __ptext18:
  9077                           	opt stack 0
  9078  00D2F6                     ___wmul:
  9079                           	opt stack 27
  9080                           
  9081                           ;incstack = 0
  9082  00D2F6  5001               	movf	___wmul@multiplier,w,c
  9083  00D2F8  0203               	mulwf	___wmul@multiplicand,c
  9084  00D2FA  CFF3 F005          	movff	prodl,___wmul@product
  9085  00D2FE  CFF4 F006          	movff	prodh,___wmul@product+1
  9086  00D302  5001               	movf	___wmul@multiplier,w,c
  9087  00D304  0204               	mulwf	___wmul@multiplicand+1,c
  9088  00D306  50F3               	movf	prodl,w,c
  9089  00D308  2606               	addwf	___wmul@product+1,f,c
  9090  00D30A  5002               	movf	___wmul@multiplier+1,w,c
  9091  00D30C  0203               	mulwf	___wmul@multiplicand,c
  9092  00D30E  50F3               	movf	prodl,w,c
  9093  00D310  2606               	addwf	___wmul@product+1,f,c
  9094  00D312  C005  F001         	movff	___wmul@product,?___wmul
  9095  00D316  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9096  00D31A  0012               	return	
  9097  00D31C                     __end_of___wmul:
  9098                           	opt stack 0
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon	equ	0xFF2
  9106                           postinc0	equ	0xFEE
  9107                           wreg	equ	0xFE8
  9108                           plusw1	equ	0xFE3
  9109                           indf2	equ	0xFDF
  9110                           postinc2	equ	0xFDE
  9111                           postdec2	equ	0xFDD
  9112                           plusw2	equ	0xFDB
  9113                           fsr2h	equ	0xFDA
  9114                           fsr2l	equ	0xFD9
  9115                           status	equ	0xFD8
  9116                           
  9117 ;; *************** function ___lwmod *****************
  9118 ;; Defined at:
  9119 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  dividend        2    7[COMRAM] unsigned int 
  9122 ;;  divisor         2    9[COMRAM] unsigned int 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  counter         1   11[COMRAM] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  2    7[COMRAM] unsigned int 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9137 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;Total ram usage:        5 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; This function calls:
  9141 ;;		Nothing
  9142 ;; This function is called by:
  9143 ;;		_displayLogs
  9144 ;;		_printf
  9145 ;; This function uses a non-reentrant model
  9146 ;;
  9147                           
  9148                           	psect	text19
  9149  00D3A4                     __ptext19:
  9150                           	opt stack 0
  9151  00D3A4                     ___lwmod:
  9152                           	opt stack 27
  9153                           
  9154                           ;incstack = 0
  9155  00D3A4  500A               	movf	___lwmod@divisor,w,c
  9156  00D3A6  100B               	iorwf	___lwmod@divisor+1,w,c
  9157  00D3A8  B4D8               	btfsc	status,2,c
  9158  00D3AA  D018               	goto	l1113
  9159  00D3AC  0E01               	movlw	1
  9160  00D3AE  6E0C               	movwf	___lwmod@counter,c
  9161  00D3B0  D004               	goto	l1108
  9162  00D3B2  90D8               	bcf	status,0,c
  9163  00D3B4  360A               	rlcf	___lwmod@divisor,f,c
  9164  00D3B6  360B               	rlcf	___lwmod@divisor+1,f,c
  9165  00D3B8  2A0C               	incf	___lwmod@counter,f,c
  9166  00D3BA                     l1108:
  9167  00D3BA  AE0B               	btfss	___lwmod@divisor+1,7,c
  9168  00D3BC  D7FA               	goto	l1109
  9169  00D3BE                     u3380:
  9170  00D3BE  500A               	movf	___lwmod@divisor,w,c
  9171  00D3C0  5C08               	subwf	___lwmod@dividend,w,c
  9172  00D3C2  500B               	movf	___lwmod@divisor+1,w,c
  9173  00D3C4  5809               	subwfb	___lwmod@dividend+1,w,c
  9174  00D3C6  A0D8               	btfss	status,0,c
  9175  00D3C8  D004               	goto	l1112
  9176  00D3CA  500A               	movf	___lwmod@divisor,w,c
  9177  00D3CC  5E08               	subwf	___lwmod@dividend,f,c
  9178  00D3CE  500B               	movf	___lwmod@divisor+1,w,c
  9179  00D3D0  5A09               	subwfb	___lwmod@dividend+1,f,c
  9180  00D3D2                     l1112:
  9181  00D3D2  90D8               	bcf	status,0,c
  9182  00D3D4  320B               	rrcf	___lwmod@divisor+1,f,c
  9183  00D3D6  320A               	rrcf	___lwmod@divisor,f,c
  9184  00D3D8  2E0C               	decfsz	___lwmod@counter,f,c
  9185  00D3DA  D7F1               	goto	u3380
  9186  00D3DC                     l1113:
  9187  00D3DC  C008  F008         	movff	___lwmod@dividend,?___lwmod
  9188  00D3E0  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  9189  00D3E4  0012               	return		;funcret
  9190  00D3E6                     __end_of___lwmod:
  9191                           	opt stack 0
  9192                           tblptru	equ	0xFF8
  9193                           tblptrh	equ	0xFF7
  9194                           tblptrl	equ	0xFF6
  9195                           tablat	equ	0xFF5
  9196                           prodh	equ	0xFF4
  9197                           prodl	equ	0xFF3
  9198                           intcon	equ	0xFF2
  9199                           postinc0	equ	0xFEE
  9200                           wreg	equ	0xFE8
  9201                           plusw1	equ	0xFE3
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           postdec2	equ	0xFDD
  9205                           plusw2	equ	0xFDB
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function ___lwdiv *****************
  9211 ;; Defined at:
  9212 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  dividend        2    0[COMRAM] unsigned int 
  9215 ;;  divisor         2    2[COMRAM] unsigned int 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  quotient        2    4[COMRAM] unsigned int 
  9218 ;;  counter         1    6[COMRAM] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  2    0[COMRAM] unsigned int 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        7 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; This function calls:
  9235 ;;		Nothing
  9236 ;; This function is called by:
  9237 ;;		_displayLogs
  9238 ;;		_printf
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text20
  9243  00D432                     __ptext20:
  9244                           	opt stack 0
  9245  00D432                     ___lwdiv:
  9246                           	opt stack 27
  9247                           
  9248                           ;incstack = 0
  9249  00D432  0E00               	movlw	0
  9250  00D434  6E06               	movwf	___lwdiv@quotient+1,c
  9251  00D436  0E00               	movlw	0
  9252  00D438  6E05               	movwf	___lwdiv@quotient,c
  9253  00D43A  5003               	movf	___lwdiv@divisor,w,c
  9254  00D43C  1004               	iorwf	___lwdiv@divisor+1,w,c
  9255  00D43E  B4D8               	btfsc	status,2,c
  9256  00D440  D01C               	goto	l1103
  9257  00D442  0E01               	movlw	1
  9258  00D444  6E07               	movwf	___lwdiv@counter,c
  9259  00D446  D004               	goto	l1098
  9260  00D448  90D8               	bcf	status,0,c
  9261  00D44A  3603               	rlcf	___lwdiv@divisor,f,c
  9262  00D44C  3604               	rlcf	___lwdiv@divisor+1,f,c
  9263  00D44E  2A07               	incf	___lwdiv@counter,f,c
  9264  00D450                     l1098:
  9265  00D450  AE04               	btfss	___lwdiv@divisor+1,7,c
  9266  00D452  D7FA               	goto	l1099
  9267  00D454                     u3350:
  9268  00D454  90D8               	bcf	status,0,c
  9269  00D456  3605               	rlcf	___lwdiv@quotient,f,c
  9270  00D458  3606               	rlcf	___lwdiv@quotient+1,f,c
  9271  00D45A  5003               	movf	___lwdiv@divisor,w,c
  9272  00D45C  5C01               	subwf	___lwdiv@dividend,w,c
  9273  00D45E  5004               	movf	___lwdiv@divisor+1,w,c
  9274  00D460  5802               	subwfb	___lwdiv@dividend+1,w,c
  9275  00D462  A0D8               	btfss	status,0,c
  9276  00D464  D005               	goto	l1102
  9277  00D466  5003               	movf	___lwdiv@divisor,w,c
  9278  00D468  5E01               	subwf	___lwdiv@dividend,f,c
  9279  00D46A  5004               	movf	___lwdiv@divisor+1,w,c
  9280  00D46C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9281  00D46E  8005               	bsf	___lwdiv@quotient,0,c
  9282  00D470                     l1102:
  9283  00D470  90D8               	bcf	status,0,c
  9284  00D472  3204               	rrcf	___lwdiv@divisor+1,f,c
  9285  00D474  3203               	rrcf	___lwdiv@divisor,f,c
  9286  00D476  2E07               	decfsz	___lwdiv@counter,f,c
  9287  00D478  D7ED               	goto	u3350
  9288  00D47A                     l1103:
  9289  00D47A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9290  00D47E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9291  00D482  0012               	return		;funcret
  9292  00D484                     __end_of___lwdiv:
  9293                           	opt stack 0
  9294                           tblptru	equ	0xFF8
  9295                           tblptrh	equ	0xFF7
  9296                           tblptrl	equ	0xFF6
  9297                           tablat	equ	0xFF5
  9298                           prodh	equ	0xFF4
  9299                           prodl	equ	0xFF3
  9300                           intcon	equ	0xFF2
  9301                           postinc0	equ	0xFEE
  9302                           wreg	equ	0xFE8
  9303                           plusw1	equ	0xFE3
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           plusw2	equ	0xFDB
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function _I2C_Master_Write *****************
  9313 ;; Defined at:
  9314 ;;		line 108 in file "I2C.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      void 
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0, cstack
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;Total ram usage:        2 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    1
  9335 ;; This function calls:
  9336 ;;		_I2C_Master_Wait
  9337 ;; This function is called by:
  9338 ;;		_standbyMode
  9339 ;;		_RTC_setTime
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text21
  9344  00D23A                     __ptext21:
  9345                           	opt stack 0
  9346  00D23A                     _I2C_Master_Write:
  9347                           	opt stack 28
  9348                           
  9349                           ;I2C.c: 116: I2C_Master_Wait();
  9350                           
  9351                           ;incstack = 0
  9352  00D23A  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9353                           
  9354                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9355  00D23E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  9356  00D242  0012               	return		;funcret
  9357  00D244                     __end_of_I2C_Master_Write:
  9358                           	opt stack 0
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           prodh	equ	0xFF4
  9364                           prodl	equ	0xFF3
  9365                           intcon	equ	0xFF2
  9366                           postinc0	equ	0xFEE
  9367                           wreg	equ	0xFE8
  9368                           plusw1	equ	0xFE3
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           plusw2	equ	0xFDB
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function _I2C_Master_Stop *****************
  9378 ;; Defined at:
  9379 ;;		line 95 in file "I2C.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, status,2, status,0, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;Total ram usage:        0 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    1
  9400 ;; This function calls:
  9401 ;;		_I2C_Master_Wait
  9402 ;; This function is called by:
  9403 ;;		_standbyMode
  9404 ;;		_RTC_setTime
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text22
  9409  00D232                     __ptext22:
  9410                           	opt stack 0
  9411  00D232                     _I2C_Master_Stop:
  9412                           	opt stack 28
  9413                           
  9414                           ;I2C.c: 104: I2C_Master_Wait();
  9415                           
  9416                           ;incstack = 0
  9417  00D232  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9418                           
  9419                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9420  00D236  84C5               	bsf	4037,2,c	;volatile
  9421  00D238  0012               	return		;funcret
  9422  00D23A                     __end_of_I2C_Master_Stop:
  9423                           	opt stack 0
  9424                           tblptru	equ	0xFF8
  9425                           tblptrh	equ	0xFF7
  9426                           tblptrl	equ	0xFF6
  9427                           tablat	equ	0xFF5
  9428                           prodh	equ	0xFF4
  9429                           prodl	equ	0xFF3
  9430                           intcon	equ	0xFF2
  9431                           postinc0	equ	0xFEE
  9432                           wreg	equ	0xFE8
  9433                           plusw1	equ	0xFE3
  9434                           indf2	equ	0xFDF
  9435                           postinc2	equ	0xFDE
  9436                           postdec2	equ	0xFDD
  9437                           plusw2	equ	0xFDB
  9438                           fsr2h	equ	0xFDA
  9439                           fsr2l	equ	0xFD9
  9440                           status	equ	0xFD8
  9441                           
  9442 ;; *************** function _I2C_Master_Start *****************
  9443 ;; Defined at:
  9444 ;;		line 69 in file "I2C.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;		None
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  1    wreg      void 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;Total ram usage:        0 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    1
  9465 ;; This function calls:
  9466 ;;		_I2C_Master_Wait
  9467 ;; This function is called by:
  9468 ;;		_standbyMode
  9469 ;;		_RTC_setTime
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text23
  9474  00D22A                     __ptext23:
  9475                           	opt stack 0
  9476  00D22A                     _I2C_Master_Start:
  9477                           	opt stack 28
  9478                           
  9479                           ;I2C.c: 78: I2C_Master_Wait();
  9480                           
  9481                           ;incstack = 0
  9482  00D22A  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9483                           
  9484                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  9485  00D22E  80C5               	bsf	4037,0,c	;volatile
  9486  00D230  0012               	return		;funcret
  9487  00D232                     __end_of_I2C_Master_Start:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           postinc0	equ	0xFEE
  9497                           wreg	equ	0xFE8
  9498                           plusw1	equ	0xFE3
  9499                           indf2	equ	0xFDF
  9500                           postinc2	equ	0xFDE
  9501                           postdec2	equ	0xFDD
  9502                           plusw2	equ	0xFDB
  9503                           fsr2h	equ	0xFDA
  9504                           fsr2l	equ	0xFD9
  9505                           status	equ	0xFD8
  9506                           
  9507 ;; *************** function _I2C_Master_Read *****************
  9508 ;; Defined at:
  9509 ;;		line 120 in file "I2C.c"
  9510 ;; Parameters:    Size  Location     Type
  9511 ;;  ackBit          1    wreg     unsigned char 
  9512 ;; Auto vars:     Size  Location     Type
  9513 ;;  ackBit          1    1[COMRAM] unsigned char 
  9514 ;;  receivedByte    1    2[COMRAM] unsigned char 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      unsigned char 
  9517 ;; Registers used:
  9518 ;;		wreg, status,2, status,0, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;Total ram usage:        2 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    1
  9531 ;; This function calls:
  9532 ;;		_I2C_Master_Wait
  9533 ;; This function is called by:
  9534 ;;		_standbyMode
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text24
  9539  00D2D2                     __ptext24:
  9540                           	opt stack 0
  9541  00D2D2                     _I2C_Master_Read:
  9542                           	opt stack 28
  9543                           
  9544                           ;incstack = 0
  9545                           ;I2C_Master_Read@ackBit stored from wreg
  9546  00D2D2  6E02               	movwf	I2C_Master_Read@ackBit,c
  9547                           
  9548                           ;I2C.c: 130: unsigned char receivedByte;
  9549                           ;I2C.c: 132: I2C_Master_Wait();
  9550  00D2D4  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9551                           
  9552                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  9553  00D2D8  86C5               	bsf	4037,3,c	;volatile
  9554                           
  9555                           ;I2C.c: 135: I2C_Master_Wait();
  9556  00D2DA  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9557                           
  9558                           ;I2C.c: 136: receivedByte = SSPBUF;
  9559  00D2DE  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  9560                           
  9561                           ;I2C.c: 138: I2C_Master_Wait();
  9562  00D2E2  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9563                           
  9564                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  9565  00D2E6  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  9566  00D2E8  D002               	bra	u6235
  9567  00D2EA  9AC5               	bcf	4037,5,c	;volatile
  9568  00D2EC  D001               	bra	u6236
  9569  00D2EE                     u6235:
  9570  00D2EE  8AC5               	bsf	4037,5,c	;volatile
  9571  00D2F0                     u6236:
  9572                           
  9573                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  9574  00D2F0  88C5               	bsf	4037,4,c	;volatile
  9575                           
  9576                           ;I2C.c: 142: return receivedByte;
  9577  00D2F2  5003               	movf	I2C_Master_Read@receivedByte,w,c
  9578  00D2F4  0012               	return	
  9579  00D2F6                     __end_of_I2C_Master_Read:
  9580                           	opt stack 0
  9581                           tblptru	equ	0xFF8
  9582                           tblptrh	equ	0xFF7
  9583                           tblptrl	equ	0xFF6
  9584                           tablat	equ	0xFF5
  9585                           prodh	equ	0xFF4
  9586                           prodl	equ	0xFF3
  9587                           intcon	equ	0xFF2
  9588                           postinc0	equ	0xFEE
  9589                           wreg	equ	0xFE8
  9590                           plusw1	equ	0xFE3
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           postdec2	equ	0xFDD
  9594                           plusw2	equ	0xFDB
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _I2C_Master_Wait *****************
  9600 ;; Defined at:
  9601 ;;		line 51 in file "I2C.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      void 
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;Total ram usage:        1 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; This function calls:
  9622 ;;		Nothing
  9623 ;; This function is called by:
  9624 ;;		_I2C_Master_Start
  9625 ;;		_I2C_Master_Stop
  9626 ;;		_I2C_Master_Write
  9627 ;;		_I2C_Master_Read
  9628 ;;		_I2C_Master_RepeatedStart
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           	psect	text25
  9633  00D244                     __ptext25:
  9634                           	opt stack 0
  9635  00D244                     _I2C_Master_Wait:
  9636                           	opt stack 28
  9637                           
  9638                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9639                           
  9640                           ;incstack = 0
  9641  00D244  B4C7               	btfsc	4039,2,c	;volatile
  9642  00D246  D7FE               	goto	_I2C_Master_Wait
  9643  00D248  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  9644  00D24C  0E1F               	movlw	31
  9645  00D24E  1601               	andwf	??_I2C_Master_Wait,f,c
  9646  00D250  B4D8               	btfsc	status,2,c
  9647  00D252  0012               	return	
  9648  00D254  D7F7               	goto	_I2C_Master_Wait
  9649  00D256                     __end_of_I2C_Master_Wait:
  9650                           	opt stack 0
  9651                           tblptru	equ	0xFF8
  9652                           tblptrh	equ	0xFF7
  9653                           tblptrl	equ	0xFF6
  9654                           tablat	equ	0xFF5
  9655                           prodh	equ	0xFF4
  9656                           prodl	equ	0xFF3
  9657                           intcon	equ	0xFF2
  9658                           postinc0	equ	0xFEE
  9659                           wreg	equ	0xFE8
  9660                           plusw1	equ	0xFE3
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           plusw2	equ	0xFDB
  9665                           fsr2h	equ	0xFDA
  9666                           fsr2l	equ	0xFD9
  9667                           status	equ	0xFD8
  9668                           
  9669 ;; *************** function _I2C_Master_Init *****************
  9670 ;; Defined at:
  9671 ;;		line 14 in file "I2C.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  1    wreg      void 
  9678 ;; Registers used:
  9679 ;;		wreg, status,2, status,0, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;Total ram usage:        8 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    1
  9692 ;; This function calls:
  9693 ;;		___lldiv
  9694 ;; This function is called by:
  9695 ;;		_standbyMode
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text26
  9700  00D4D6                     __ptext26:
  9701                           	opt stack 0
  9702  00D4D6                     _I2C_Master_Init:
  9703                           	opt stack 28
  9704                           
  9705                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  9706                           
  9707                           ;incstack = 0
  9708  00D4D6  9AC6               	bcf	4038,5,c	;volatile
  9709                           
  9710                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  9711  00D4D8  8694               	bsf	3988,3,c	;volatile
  9712                           
  9713                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  9714  00D4DA  8894               	bsf	3988,4,c	;volatile
  9715                           
  9716                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  9717  00D4DC  0E80               	movlw	128
  9718  00D4DE  6EC7               	movwf	4039,c	;volatile
  9719                           
  9720                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  9721  00D4E0  0E28               	movlw	40
  9722  00D4E2  6EC6               	movwf	4038,c	;volatile
  9723                           
  9724                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  9725  00D4E4  0E00               	movlw	0
  9726  00D4E6  6EC5               	movwf	4037,c	;volatile
  9727                           
  9728                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  9729  00D4E8  0E00               	movlw	0
  9730  00D4EA  6E01               	movwf	___lldiv@dividend,c
  9731  00D4EC  0E5A               	movlw	90
  9732  00D4EE  6E02               	movwf	___lldiv@dividend+1,c
  9733  00D4F0  0E62               	movlw	98
  9734  00D4F2  6E03               	movwf	___lldiv@dividend+2,c
  9735  00D4F4  0E02               	movlw	2
  9736  00D4F6  6E04               	movwf	___lldiv@dividend+3,c
  9737  00D4F8  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  9738  00D4FC  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  9739  00D500  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  9740  00D504  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  9741  00D508  0E02               	movlw	2
  9742  00D50A                     u6145:
  9743  00D50A  90D8               	bcf	status,0,c
  9744  00D50C  3612               	rlcf	??_I2C_Master_Init,f,c
  9745  00D50E  3613               	rlcf	??_I2C_Master_Init+1,f,c
  9746  00D510  3614               	rlcf	??_I2C_Master_Init+2,f,c
  9747  00D512  3615               	rlcf	??_I2C_Master_Init+3,f,c
  9748  00D514  2EE8               	decfsz	wreg,f,c
  9749  00D516  D7F9               	goto	u6145
  9750  00D518  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  9751  00D51C  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9752  00D520  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9753  00D524  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9754  00D528  ECD8  F06A         	call	___lldiv	;wreg free
  9755  00D52C  0401               	decf	?___lldiv,w,c
  9756  00D52E  6EC8               	movwf	4040,c	;volatile
  9757  00D530  0012               	return		;funcret
  9758  00D532                     __end_of_I2C_Master_Init:
  9759                           	opt stack 0
  9760                           tblptru	equ	0xFF8
  9761                           tblptrh	equ	0xFF7
  9762                           tblptrl	equ	0xFF6
  9763                           tablat	equ	0xFF5
  9764                           prodh	equ	0xFF4
  9765                           prodl	equ	0xFF3
  9766                           intcon	equ	0xFF2
  9767                           postinc0	equ	0xFEE
  9768                           wreg	equ	0xFE8
  9769                           plusw1	equ	0xFE3
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function ___lldiv *****************
  9779 ;; Defined at:
  9780 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  dividend        4    0[COMRAM] unsigned long 
  9783 ;;  divisor         4    4[COMRAM] unsigned long 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  quotient        4    8[COMRAM] unsigned long 
  9786 ;;  counter         1   12[COMRAM] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  4    0[COMRAM] unsigned long 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:       13 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_I2C_Master_Init
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	text27
  9810  00D5B0                     __ptext27:
  9811                           	opt stack 0
  9812  00D5B0                     ___lldiv:
  9813                           	opt stack 28
  9814                           
  9815                           ;incstack = 0
  9816  00D5B0  0E00               	movlw	0
  9817  00D5B2  6E09               	movwf	___lldiv@quotient,c
  9818  00D5B4  0E00               	movlw	0
  9819  00D5B6  6E0A               	movwf	___lldiv@quotient+1,c
  9820  00D5B8  0E00               	movlw	0
  9821  00D5BA  6E0B               	movwf	___lldiv@quotient+2,c
  9822  00D5BC  0E00               	movlw	0
  9823  00D5BE  6E0C               	movwf	___lldiv@quotient+3,c
  9824  00D5C0  5005               	movf	___lldiv@divisor,w,c
  9825  00D5C2  1006               	iorwf	___lldiv@divisor+1,w,c
  9826  00D5C4  1007               	iorwf	___lldiv@divisor+2,w,c
  9827  00D5C6  1008               	iorwf	___lldiv@divisor+3,w,c
  9828  00D5C8  B4D8               	btfsc	status,2,c
  9829  00D5CA  D02A               	goto	l1050
  9830  00D5CC  0E01               	movlw	1
  9831  00D5CE  6E0D               	movwf	___lldiv@counter,c
  9832  00D5D0  D006               	goto	l1045
  9833  00D5D2  90D8               	bcf	status,0,c
  9834  00D5D4  3605               	rlcf	___lldiv@divisor,f,c
  9835  00D5D6  3606               	rlcf	___lldiv@divisor+1,f,c
  9836  00D5D8  3607               	rlcf	___lldiv@divisor+2,f,c
  9837  00D5DA  3608               	rlcf	___lldiv@divisor+3,f,c
  9838  00D5DC  2A0D               	incf	___lldiv@counter,f,c
  9839  00D5DE                     l1045:
  9840  00D5DE  AE08               	btfss	___lldiv@divisor+3,7,c
  9841  00D5E0  D7F8               	goto	l1046
  9842  00D5E2                     u4750:
  9843  00D5E2  90D8               	bcf	status,0,c
  9844  00D5E4  3609               	rlcf	___lldiv@quotient,f,c
  9845  00D5E6  360A               	rlcf	___lldiv@quotient+1,f,c
  9846  00D5E8  360B               	rlcf	___lldiv@quotient+2,f,c
  9847  00D5EA  360C               	rlcf	___lldiv@quotient+3,f,c
  9848  00D5EC  5005               	movf	___lldiv@divisor,w,c
  9849  00D5EE  5C01               	subwf	___lldiv@dividend,w,c
  9850  00D5F0  5006               	movf	___lldiv@divisor+1,w,c
  9851  00D5F2  5802               	subwfb	___lldiv@dividend+1,w,c
  9852  00D5F4  5007               	movf	___lldiv@divisor+2,w,c
  9853  00D5F6  5803               	subwfb	___lldiv@dividend+2,w,c
  9854  00D5F8  5008               	movf	___lldiv@divisor+3,w,c
  9855  00D5FA  5804               	subwfb	___lldiv@dividend+3,w,c
  9856  00D5FC  A0D8               	btfss	status,0,c
  9857  00D5FE  D009               	goto	l1049
  9858  00D600  5005               	movf	___lldiv@divisor,w,c
  9859  00D602  5E01               	subwf	___lldiv@dividend,f,c
  9860  00D604  5006               	movf	___lldiv@divisor+1,w,c
  9861  00D606  5A02               	subwfb	___lldiv@dividend+1,f,c
  9862  00D608  5007               	movf	___lldiv@divisor+2,w,c
  9863  00D60A  5A03               	subwfb	___lldiv@dividend+2,f,c
  9864  00D60C  5008               	movf	___lldiv@divisor+3,w,c
  9865  00D60E  5A04               	subwfb	___lldiv@dividend+3,f,c
  9866  00D610  8009               	bsf	___lldiv@quotient,0,c
  9867  00D612                     l1049:
  9868  00D612  90D8               	bcf	status,0,c
  9869  00D614  3208               	rrcf	___lldiv@divisor+3,f,c
  9870  00D616  3207               	rrcf	___lldiv@divisor+2,f,c
  9871  00D618  3206               	rrcf	___lldiv@divisor+1,f,c
  9872  00D61A  3205               	rrcf	___lldiv@divisor,f,c
  9873  00D61C  2E0D               	decfsz	___lldiv@counter,f,c
  9874  00D61E  D7E1               	goto	u4750
  9875  00D620                     l1050:
  9876  00D620  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9877  00D624  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9878  00D628  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9879  00D62C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9880  00D630  0012               	return		;funcret
  9881  00D632                     __end_of___lldiv:
  9882                           	opt stack 0
  9883                           tblptru	equ	0xFF8
  9884                           tblptrh	equ	0xFF7
  9885                           tblptrl	equ	0xFF6
  9886                           tablat	equ	0xFF5
  9887                           prodh	equ	0xFF4
  9888                           prodl	equ	0xFF3
  9889                           intcon	equ	0xFF2
  9890                           postinc0	equ	0xFEE
  9891                           wreg	equ	0xFE8
  9892                           plusw1	equ	0xFE3
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           plusw2	equ	0xFDB
  9897                           fsr2h	equ	0xFDA
  9898                           fsr2l	equ	0xFD9
  9899                           status	equ	0xFD8
  9900                           
  9901 ;; *************** function _initLCD *****************
  9902 ;; Defined at:
  9903 ;;		line 40 in file "standbyMode.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;		None
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;		None
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  1    wreg      void 
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;Total ram usage:        1 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    2
  9924 ;; This function calls:
  9925 ;;		_lcdInst
  9926 ;; This function is called by:
  9927 ;;		_main
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           	psect	text28
  9932  00D3E6                     __ptext28:
  9933                           	opt stack 0
  9934  00D3E6                     _initLCD:
  9935                           	opt stack 28
  9936                           
  9937                           ;standbyMode.c: 48: _delay((unsigned long)((15)*(40000000/4000.0)));
  9938                           
  9939                           ;incstack = 0
  9940  00D3E6  0EC3               	movlw	195
  9941  00D3E8  6E04               	movwf	??_initLCD& (0+255),c
  9942  00D3EA  0ECD               	movlw	205
  9943  00D3EC                     u7337:
  9944  00D3EC  2EE8               	decfsz	wreg,f,c
  9945  00D3EE  D7FE               	bra	u7337
  9946  00D3F0  2E04               	decfsz	??_initLCD& (0+255),f,c
  9947  00D3F2  D7FC               	bra	u7337
  9948  00D3F4  F000               	nop	
  9949                           
  9950                           ;standbyMode.c: 49: lcdInst(0b00110011);
  9951  00D3F6  0E33               	movlw	51
  9952  00D3F8  EC2B  F069         	call	_lcdInst
  9953                           
  9954                           ;standbyMode.c: 50: lcdInst(0b00110010);
  9955  00D3FC  0E32               	movlw	50
  9956  00D3FE  EC2B  F069         	call	_lcdInst
  9957                           
  9958                           ;standbyMode.c: 51: lcdInst(0b00101000);
  9959  00D402  0E28               	movlw	40
  9960  00D404  EC2B  F069         	call	_lcdInst
  9961                           
  9962                           ;standbyMode.c: 52: lcdInst(0b00001111);
  9963  00D408  0E0F               	movlw	15
  9964  00D40A  EC2B  F069         	call	_lcdInst
  9965                           
  9966                           ;standbyMode.c: 53: lcdInst(0b00000110);
  9967  00D40E  0E06               	movlw	6
  9968  00D410  EC2B  F069         	call	_lcdInst
  9969                           
  9970                           ;standbyMode.c: 54: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9971  00D414  0E01               	movlw	1
  9972  00D416  EC2B  F069         	call	_lcdInst
  9973  00D41A  0EC3               	movlw	195
  9974  00D41C  6E04               	movwf	??_initLCD& (0+255),c
  9975  00D41E  0ECD               	movlw	205
  9976  00D420                     u7347:
  9977  00D420  2EE8               	decfsz	wreg,f,c
  9978  00D422  D7FE               	bra	u7347
  9979  00D424  2E04               	decfsz	??_initLCD& (0+255),f,c
  9980  00D426  D7FC               	bra	u7347
  9981  00D428  F000               	nop	
  9982                           
  9983                           ;standbyMode.c: 57: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  9984  00D42A  0E0F               	movlw	15
  9985  00D42C  EC2B  F069         	call	_lcdInst
  9986  00D430  0012               	return		;funcret
  9987  00D432                     __end_of_initLCD:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           postinc0	equ	0xFEE
  9997                           wreg	equ	0xFE8
  9998                           plusw1	equ	0xFE3
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           plusw2	equ	0xFDB
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _lcdInst *****************
 10008 ;; Defined at:
 10009 ;;		line 26 in file "standbyMode.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  data            1    wreg     unsigned char 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  data            1    2[COMRAM] unsigned char 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;Total ram usage:        1 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    1
 10030 ;; This function calls:
 10031 ;;		_lcdNibble
 10032 ;; This function is called by:
 10033 ;;		_initLCD
 10034 ;;		_viewLogs
 10035 ;;		_displayLogs
 10036 ;;		_food_press
 10037 ;;		_diet_press
 10038 ;;		_which_drawer
 10039 ;;		_standbyMode
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text29
 10044  00D256                     __ptext29:
 10045                           	opt stack 0
 10046  00D256                     _lcdInst:
 10047                           	opt stack 27
 10048                           
 10049                           ;incstack = 0
 10050                           ;lcdInst@data stored from wreg
 10051  00D256  6E03               	movwf	lcdInst@data,c
 10052                           
 10053                           ;standbyMode.c: 34: LATDbits.LATD2 = 0;
 10054  00D258  948C               	bcf	3980,2,c	;volatile
 10055                           
 10056                           ;standbyMode.c: 35: lcdNibble(data);
 10057  00D25A  5003               	movf	lcdInst@data,w,c
 10058  00D25C  EC99  F06A         	call	_lcdNibble
 10059                           
 10060                           ;standbyMode.c: 36: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10061  00D260  0EC8               	movlw	200
 10062  00D262                     u7357:
 10063  00D262  D000               	nop2	
 10064  00D264  2EE8               	decfsz	wreg,f,c
 10065  00D266  D7FD               	bra	u7357
 10066  00D268  0012               	return		;funcret
 10067  00D26A                     __end_of_lcdInst:
 10068                           	opt stack 0
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           prodh	equ	0xFF4
 10074                           prodl	equ	0xFF3
 10075                           intcon	equ	0xFF2
 10076                           postinc0	equ	0xFEE
 10077                           wreg	equ	0xFE8
 10078                           plusw1	equ	0xFE3
 10079                           indf2	equ	0xFDF
 10080                           postinc2	equ	0xFDE
 10081                           postdec2	equ	0xFDD
 10082                           plusw2	equ	0xFDB
 10083                           fsr2h	equ	0xFDA
 10084                           fsr2l	equ	0xFD9
 10085                           status	equ	0xFD8
 10086                           
 10087 ;; *************** function _lcdNibble *****************
 10088 ;; Defined at:
 10089 ;;		line 61 in file "standbyMode.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;  data            1    wreg     unsigned char 
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  data            1    1[COMRAM] unsigned char 
 10094 ;;  temp            1    0[COMRAM] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  1    wreg      void 
 10097 ;; Registers used:
 10098 ;;		wreg, status,2, status,0
 10099 ;; Tracked objects:
 10100 ;;		On entry : 0/0
 10101 ;;		On exit  : 0/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;Total ram usage:        2 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; This function calls:
 10111 ;;		Nothing
 10112 ;; This function is called by:
 10113 ;;		_lcdInst
 10114 ;;		_putch
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text30
 10119  00D532                     __ptext30:
 10120                           	opt stack 0
 10121  00D532                     _lcdNibble:
 10122                           	opt stack 27
 10123                           
 10124                           ;incstack = 0
 10125                           ;lcdNibble@data stored from wreg
 10126  00D532  6E02               	movwf	lcdNibble@data,c
 10127                           
 10128                           ;standbyMode.c: 69: char temp = (unsigned char) (data & 0xF0);
 10129  00D534  5002               	movf	lcdNibble@data,w,c
 10130  00D536  0BF0               	andlw	240
 10131  00D538  6E01               	movwf	lcdNibble@temp,c
 10132                           
 10133                           ;standbyMode.c: 70: LATD = (unsigned char) (LATD & 0x0F);
 10134  00D53A  508C               	movf	3980,w,c	;volatile
 10135  00D53C  0B0F               	andlw	15
 10136  00D53E  6E8C               	movwf	3980,c	;volatile
 10137                           
 10138                           ;standbyMode.c: 71: LATD = (unsigned char) (temp | LATD);
 10139  00D540  5001               	movf	lcdNibble@temp,w,c
 10140  00D542  108C               	iorwf	3980,w,c	;volatile
 10141  00D544  6E8C               	movwf	3980,c	;volatile
 10142                           
 10143                           ;standbyMode.c: 73: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10144  00D546  0E00               	movlw	0
 10145  00D548  BEF2               	btfsc	intcon,7,c	;volatile
 10146  00D54A  0E01               	movlw	1
 10147  00D54C  6E79               	movwf	standbyMode@LCDinterruptState,c
 10148  00D54E  9EF2               	bcf	intcon,7,c	;volatile
 10149  00D550  868C               	bsf	3980,3,c	;volatile
 10150  00D552  0E53               	movlw	83
 10151  00D554                     u7367:
 10152  00D554  2EE8               	decfsz	wreg,f,c
 10153  00D556  D7FE               	bra	u7367
 10154  00D558  F000               	nop	
 10155  00D55A  968C               	bcf	3980,3,c	;volatile
 10156  00D55C  0EC8               	movlw	200
 10157  00D55E                     u7377:
 10158  00D55E  D000               	nop2	
 10159  00D560  2EE8               	decfsz	wreg,f,c
 10160  00D562  D7FD               	bra	u7377
 10161  00D564  B079               	btfsc	standbyMode@LCDinterruptState,0,c
 10162  00D566  D002               	bra	u3305
 10163  00D568  9EF2               	bcf	intcon,7,c	;volatile
 10164  00D56A  D001               	bra	u3306
 10165  00D56C                     u3305:
 10166  00D56C  8EF2               	bsf	intcon,7,c	;volatile
 10167  00D56E                     u3306:
 10168                           
 10169                           ;standbyMode.c: 76: data = (unsigned char) (data << 4);
 10170  00D56E  3802               	swapf	lcdNibble@data,w,c
 10171  00D570  0BF0               	andlw	240
 10172  00D572  6E02               	movwf	lcdNibble@data,c
 10173                           
 10174                           ;standbyMode.c: 77: temp = (unsigned char) (data & 0xF0);
 10175  00D574  5002               	movf	lcdNibble@data,w,c
 10176  00D576  0BF0               	andlw	240
 10177  00D578  6E01               	movwf	lcdNibble@temp,c
 10178                           
 10179                           ;standbyMode.c: 78: LATD = (unsigned char) (LATD & 0x0F);
 10180  00D57A  508C               	movf	3980,w,c	;volatile
 10181  00D57C  0B0F               	andlw	15
 10182  00D57E  6E8C               	movwf	3980,c	;volatile
 10183                           
 10184                           ;standbyMode.c: 79: LATD = (unsigned char) (temp | LATD);
 10185  00D580  5001               	movf	lcdNibble@temp,w,c
 10186  00D582  108C               	iorwf	3980,w,c	;volatile
 10187  00D584  6E8C               	movwf	3980,c	;volatile
 10188                           
 10189                           ;standbyMode.c: 81: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10190  00D586  0E00               	movlw	0
 10191  00D588  BEF2               	btfsc	intcon,7,c	;volatile
 10192  00D58A  0E01               	movlw	1
 10193  00D58C  6E79               	movwf	standbyMode@LCDinterruptState,c
 10194  00D58E  9EF2               	bcf	intcon,7,c	;volatile
 10195  00D590  868C               	bsf	3980,3,c	;volatile
 10196  00D592  0E53               	movlw	83
 10197  00D594                     u7387:
 10198  00D594  2EE8               	decfsz	wreg,f,c
 10199  00D596  D7FE               	bra	u7387
 10200  00D598  F000               	nop	
 10201  00D59A  968C               	bcf	3980,3,c	;volatile
 10202  00D59C  0EC8               	movlw	200
 10203  00D59E                     u7397:
 10204  00D59E  D000               	nop2	
 10205  00D5A0  2EE8               	decfsz	wreg,f,c
 10206  00D5A2  D7FD               	bra	u7397
 10207  00D5A4  B079               	btfsc	standbyMode@LCDinterruptState,0,c
 10208  00D5A6  D002               	bra	u3315
 10209  00D5A8  9EF2               	bcf	intcon,7,c	;volatile
 10210  00D5AA  D001               	bra	u3316
 10211  00D5AC                     u3315:
 10212  00D5AC  8EF2               	bsf	intcon,7,c	;volatile
 10213  00D5AE                     u3316:
 10214  00D5AE  0012               	return		;funcret
 10215  00D5B0                     __end_of_lcdNibble:
 10216                           	opt stack 0
 10217                           tblptru	equ	0xFF8
 10218                           tblptrh	equ	0xFF7
 10219                           tblptrl	equ	0xFF6
 10220                           tablat	equ	0xFF5
 10221                           prodh	equ	0xFF4
 10222                           prodl	equ	0xFF3
 10223                           intcon	equ	0xFF2
 10224                           postinc0	equ	0xFEE
 10225                           wreg	equ	0xFE8
 10226                           plusw1	equ	0xFE3
 10227                           indf2	equ	0xFDF
 10228                           postinc2	equ	0xFDE
 10229                           postdec2	equ	0xFDD
 10230                           plusw2	equ	0xFDB
 10231                           fsr2h	equ	0xFDA
 10232                           fsr2l	equ	0xFD9
 10233                           status	equ	0xFD8
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           postinc0	equ	0xFEE
 10242                           wreg	equ	0xFE8
 10243                           plusw1	equ	0xFE3
 10244                           indf2	equ	0xFDF
 10245                           postinc2	equ	0xFDE
 10246                           postdec2	equ	0xFDD
 10247                           plusw2	equ	0xFDB
 10248                           fsr2h	equ	0xFDA
 10249                           fsr2l	equ	0xFD9
 10250                           status	equ	0xFD8
 10251                           
 10252                           	psect	rparam
 10253  0000                     tblptru	equ	0xFF8
 10254                           tblptrh	equ	0xFF7
 10255                           tblptrl	equ	0xFF6
 10256                           tablat	equ	0xFF5
 10257                           prodh	equ	0xFF4
 10258                           prodl	equ	0xFF3
 10259                           intcon	equ	0xFF2
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           plusw1	equ	0xFE3
 10263                           indf2	equ	0xFDF
 10264                           postinc2	equ	0xFDE
 10265                           postdec2	equ	0xFDD
 10266                           plusw2	equ	0xFDB
 10267                           fsr2h	equ	0xFDA
 10268                           fsr2l	equ	0xFD9
 10269                           status	equ	0xFD8


Data Sizes:
    Strings     666
    Constant    65
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     122
    BANK0           128      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_69(CODE[11]), STR_68(CODE[13]), STR_67(CODE[11]), STR_66(CODE[13]), 
		 -> STR_65(CODE[11]), STR_64(CODE[8]), STR_63(CODE[15]), STR_62(CODE[16]), 
		 -> STR_61(CODE[10]), STR_60(CODE[8]), STR_59(CODE[15]), STR_58(CODE[16]), 
		 -> STR_57(CODE[10]), STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[17]), 
		 -> STR_53(CODE[13]), STR_52(CODE[17]), STR_51(CODE[14]), STR_50(CODE[11]), 
		 -> STR_49(CODE[11]), STR_48(CODE[15]), STR_47(CODE[15]), STR_46(CODE[10]), 
		 -> STR_45(CODE[13]), STR_44(CODE[16]), STR_43(CODE[16]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[8]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[11]), STR_36(CODE[14]), STR_35(CODE[16]), STR_34(CODE[16]), 
		 -> STR_33(CODE[11]), STR_32(CODE[14]), STR_31(CODE[16]), STR_30(CODE[16]), 
		 -> STR_29(CODE[16]), STR_28(CODE[13]), STR_27(CODE[13]), STR_26(CODE[15]), 
		 -> STR_25(CODE[15]), STR_24(CODE[17]), STR_23(CODE[18]), STR_22(CODE[15]), 
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[3]), STR_18(CODE[16]), 
		 -> STR_17(CODE[8]), STR_16(CODE[16]), STR_15(CODE[15]), STR_14(CODE[6]), 
		 -> STR_13(CODE[14]), STR_12(CODE[17]), STR_11(CODE[7]), STR_10(CODE[9]), 
		 -> STR_9(CODE[17]), STR_8(CODE[11]), STR_7(CODE[17]), STR_6(CODE[14]), 
		 -> STR_5(CODE[17]), STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[11]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _initEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   65198
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         31    31      0   65063
                                             81 COMRAM    31    31      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _diet_press
                         _food_press
                         _initEEPROM
                            _lcdInst
                             _printf
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    9221
                                             36 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   19471
                                             69 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         33    31      2   10638
                                             36 COMRAM    33    31      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1623
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEEPROM                                           2     2      0    1329
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1260
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   11547
                                             36 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   10574
                                             36 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    7988
                                             12 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     326
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _initEEPROM
       _writeEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      18       5       18.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      7A       1       96.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      92      34        0.0%
DATA                 0      0      92       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 27 17:37:31 2018

                 _standbyMode F408        __end_of_verifyKeypress D4D6                  ?_displayLogs 0025  
                 __CFG_CPD$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l201 EF78                           l202 EFB8  
                         l204 EFFA                           l301 D714                           l230 F32A  
                         l222 F1DA                           l214 F0D4                           l206 F03C  
                         l302 D6EA                           l215 F114                           l303 D794  
                         l400 EA2A                           l152 F380                           l224 F22E  
                         l217 F156                           l209 F07E                           l153 EBE0  
                         l321 D70C                           l410 EB16                           l402 EA58  
                         l226 F282                           l162 EC34                           l219 F198  
                         l307 D6F4                           l251 DE26                           l243 DCF4  
                         l412 EB46                           l404 EA86                           l228 F2D6  
                         l316 D704                           l340 D986                           l236 D4BA  
                         l420 D7A0                           l500 F83A                           l173 ED1C  
                         l157 F3FE                           l309 D6FC                           l333 D902  
                         l237 D4A0                           l421 D876                           l414 EB78  
                         l406 EAB6                           l174 ED4A                           l166 EC70  
                         l158 EC0A                           l350 DA6A                           l238 D4B6  
                         l262 DE96                           l246 DDA0                           l430 D7E8  
                         l422 D7A8                           l415 EBCC                           l183 EDCA  
                         l263 DEA2                           l431 D7F0                           l423 D7B0  
                         l511 F9A4                           l408 EAE6                           l168 ECC4  
                         l336 D9E8                           l328 D8F6                           l272 E39A  
                         l256 DE32                           l248 DD9A                           l432 D7F8  
                         l424 D7B8                           l512 F9DC                           l504 F898  
                         l193 EE72                           l169 ECF2                           l281 E52A  
                         l433 D800                           l425 D7C0                           l505 F966  
                         l362 E726                           l194 EEB2                           l178 ED74  
                         l338 D920                           l290 E614                           l282 E56E  
                         l434 D80A                           l426 D7C8                           l450 DC04  
                         l530 FBF2                           l522 FAAE                           l514 FA04  
                         l506 F90A                           l347 D9FA                           l275 E432  
                         l267 DF3C                           l419 D814                           l427 D7D0  
                         l443 DAC6                           l523 FB7C                           l507 F95C  
                         l380 E86C                           l372 E7E8                           l196 EEF4  
                         l188 EE20                           l428 D7D8                           l532 FCCE  
                         l524 FB20                           l365 E832                           l357 E71A  
                         l293 E698                           l277 E4A2                           l429 D7E0  
                         l453 DBC4                           l525 FB72                           l390 E944  
                         l382 E896                           l358 E71A                           l198 EF36  
                         l446 DC46                           l454 DB98                           l438 DABA  
                         l518 FA48                           l367 E744                           l287 E5D6  
                         l279 E4E6                           l640 DF86                           l392 E972  
                         l384 E8C0                           l296 E6A4                           l464 DC00  
                         l448 DAE4                           l480 F6F2                           l369 E7A6  
                         l537 FC7A                           l529 FBBA                           l394 E9A0  
                         l386 E8EC                           l378 E842                           l483 F6FE  
                         l475 F49C                           l652 E04A                           l636 DF68  
                         l396 E9CE                           l388 E918                           l580 D6DE  
                         l653 E018                           l645 DFBA                           l637 DF78  
                         l469 DC5A                           l485 FC12                           l493 F7EC  
                         l670 E148                           l398 E9FC                           l558 D364  
                         l486 F74A                           l671 E174                           l663 E102  
                         l655 E078                           l647 E01C                           l639 DF8C  
                         l487 FA0A                           l680 E1A2                           l672 E15E  
                         l664 E0C2                           l496 F7F8                           l681 E248  
                         l489 F7B2                           l658 E0F2                           l498 F9FC  
                         l683 E232                           l659 E092                           l684 E1A8  
                         l668 E11C                           l685 E242                           l669 E140  
                         l686 E1EC                  __CFG_CPB$OFF 000000                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1102 D470  
                        l1103 D47A                          l1112 D3D2                          l1113 D3DC  
                        l1050 D620                          l1019 D2A8                          l1108 D3BA  
                        l1045 D5DE                          l1109 D3B2                          l1046 D5D2  
                        l1049 D612                          l1098 D450                          l1099 D448  
                        l3402 E0C6                          l3326 D280                          l4270 E7E2  
                        l3388 E096                          l4606 D32C                          l4630 D67E  
                        l3726 D4B6                          l4640 D6AA                          l4642 D6B2  
                        l4618 D64A                          l4628 D676                          l3934 D344  
                        l4860 F898                          l4748 F584                          l4942 FA58  
                        l4758 F5AA                          l4864 F89E                          l4848 F842  
                        l4954 FAAE                          l4958 FAB4                          STR_1 FFE1  
                        STR_2 FF88                          STR_3 FEAA                          STR_4 FF88  
                        STR_5 FDCB                          STR_6 FF20                          STR_7 FDDC  
                        STR_8 FF88                          STR_9 FDA9                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u3305 D56C                          u3306 D56E  
                        u3315 D5AC                          u5011 E70A                          u3316 D5AE  
                        u4220 F0CC                          u3350 D454                          u3600 E190  
                        u3380 D3BE                          u3620 E250                          u3700 EC68  
                        u6100 DBDA                          u6110 DBFC                          u6200 D6AA  
                        u5090 E7C2                          u3650 EC02                          u3900 EE18  
                        u6060 DB76                          u6300 F752                          u3590 E17C  
                        u3670 EC2C                          u6310 F75E                          u7007 DDAC  
                        u6145 D50A                          u7017 DDE4                          u6235 D2EE  
                        u7107 E3E2                          u7027 DDFE                          u6236 D2F0  
                        u3940 EE6A                          u3860 EDC2                          u6180 D676  
                        u6340 F804                          u6260 F5AA                          u7117 E424  
                        u7037 DEAC                          u4750 D5E2                          u7207 E606  
                        u7127 E442                          u7047 DEC4                          u7217 E624  
                        u7137 E494                          u7057 DEE4                          u4850 DE52  
                        u7307 EB84                          u7227 E656                          u7147 E4D8  
                        u7067 DEFC                          u6540 FC1A                          u7317 EBB6  
                        u7237 E670                          u7157 E51C                          u7077 DF2E  
                        u6390 F89E                          u7327 D276                          u7247 D88C  
                        u7167 E560                          u7087 E342                          u6607 F45A  
                        u4960 D934                          u4880 DF40                          u7337 D3EC  
                        u7257 D99A                          u7177 E57E                          u7097 E38C  
                        u6617 F474                          u6490 FAB4                          u7347 D420  
                        u7267 DA2A                          u4891 D8CA                          u7187 E5C8  
                        u6707 F6CA                          u6627 F4AC                          u7357 D262  
                        u7277 DA5C                          u7197 E5E6                          u6717 F76A  
                        u6637 F4E4                          u7367 D554                          u7287 E6BC  
                        u6807 FA16                          u6727 F7A2                          u6647 F5C2  
                        u7377 D55E                          u7297 E758                          u6817 FAD0  
                        u6737 F7BE                          u6657 F5F4                          u5970 DB30  
                        u7387 D594                          u6907 FCDA                          u6827 FB08  
                        u6747 F810                          u6667 F60E                          u7397 D59E  
                        u6917 FD12                          u6837 FB2C                          u6757 F8BA  
                        u6677 F664                          u6597 F434                          u6927 DA86  
                        u6847 FB64                          u6767 F8F2                          u6687 F67E  
                        u6937 DC18                          u6857 FB88                          u6777 F916  
                        u6697 F6B0                          u6947 DCAA                          u6867 FC46  
                        u6787 F94E                          u6957 DCDC                          u6877 FC6C  
                        u6797 F972                          u6967 DD0E                          u6887 FC86  
                        u6977 DD40                          u6897 FCBE                          u6987 DD5A  
                        u6997 DD8C         __end_of_decode_drawer D880             viewLogs@logNumber 0050  
                        _main D36C                          _keys FD23               food_press@F3105 0071  
                        fsr2h 000FDA                          indf2 000FDF                          fsr2l 000FD9  
               get_digits@sum 0001                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000             viewLogs@keypress2 0051  
         standbyMode@keypress 005F                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
                 _writeEEPROM D342               diet_press@F3120 0090               ?_verifyKeypress 0001  
            __end_of_LCD_LEFT FD5F           standbyMode@whichKey 005D               food_press@count 0031  
             food_press@tally 002B             _drawerInformation 0080         I2C_Master_Read@ackBit 0002  
            ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001            writeEEPROM@address 0002                         ?_main 0001  
                       _EEADR 000FA9                         STR_10 FFC8                         STR_11 FFF1  
                       STR_20 FEC1                         STR_12 FDCB                         STR_13 FF20  
                       STR_21 FEBD                         STR_14 FFF8                         STR_22 FEB9  
                       STR_30 FE0D                         STR_31 FE0D                         STR_15 FEC8  
                       STR_23 FD64                         STR_40 FFE9                         STR_32 FF04  
                       STR_16 FE1D                         STR_24 FDBA                         STR_41 FDCB  
                       STR_17 FFD9                         STR_33 FF9E                         STR_25 FE9B  
                       STR_50 FF7D                         STR_26 FE7D                         STR_34 FE3D  
                       STR_18 FE2D                         STR_42 FD98                         STR_35 FE3D  
                       STR_19 FEC5                         STR_27 FF49                         STR_51 FF2E  
                       STR_43 FE5D                         STR_52 FD98                         STR_60 FFD1  
                       STR_28 FF63                         STR_36 FF12                         STR_44 FDED  
                       STR_37 FF9E                         STR_61 FFBE                         STR_45 FF70  
                       STR_53 FF56                         STR_29 FE6D                         STR_62 FDFD  
                       STR_46 FFB4                         STR_38 FE8C                         STR_54 FD87  
                       STR_70 FD76                         STR_39 FE8C                         STR_63 FEF5  
                       STR_47 FED7                         STR_55 FE4D                         STR_64 FFD1  
                       STR_56 FE6D                         STR_48 FEE6                         STR_57 FFBE  
                       STR_49 FFA9                         STR_65 FF93                         STR_66 FF3C  
                       STR_58 FDFD                         STR_67 FF93                         STR_59 FEF5  
                       STR_68 FF3C                         STR_69 FF93               __end_of___lldiv D632  
           viewLogs@returnVal 004C               __end_of___lwdiv D484               __end_of___lwmod D3E6  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000               diet_press@count 002F  
             __end_of_lcdInst D26A                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                 initEEPROM@i 0003                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD D432                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FD4F                  displayLogs@n 0044               __end_of_isdigit D2B0  
                       _input FD34                         _putch D26A                         tablat 000FF5  
           _LCDinterruptState 007A                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8   I2C_Master_Read@receivedByte 0003          standbyMode@keypress1 0060  
              __CFG_PBADEN$ON 000000               standbyMode@diet 006B               standbyMode@food 0065  
             standbyMode@time 0054               standbyMode@zero 0063               __initialization D2B0  
                __end_of_main D3A4                  __end_of_keys FD34                  standbyMode@i 006D  
                standbyMode@x 0067                __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FD60  
            food_press@drawer 0027                        ??_main 0071                 __activetblptr 000002  
         food_press@backCheck 002D             ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0002  
                ?_shiftEEPROM 0001            ??_I2C_Master_Start 0002                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 0004                        _EEDATA 000FA8  
                      _EECON2 000FA7                        ?_putch 0001                        _SSPADD 000FC8  
                      _SSPBUF 000FC9              diet_press@drawer 0025                __CFG_XINST$OFF 000000  
                      ___wmul D2F6                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 D2B6  
                      clear_1 D2C2                     ??_lcdInst 0003                        _printf DF5E  
        __size_of_displayLogs 0446           food_press@foodTable 0033                     ??_initLCD 0004  
             get_digits@count 0005                     ??_isdigit 0001                  __mediumconst FD22  
            __end_of_viewLogs DF5E                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization D2C8  
        which_drawer@keypress 0030                 ___rparam_used 000001               writeEEPROM@data 0001  
             viewLogs@logView 004E                  ?_standbyMode 0001          __end_of_happynewyear FD5E  
              __pcstackCOMRAM 0001                 __end_of_input FD45                 __end_of_putch D27E  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0025  
           food_press@isValid 002F                       ??_putch 0003                    __pbssBANK0 0080  
                  _check_food EBD6              ??_verifyKeypress 0003                  ?_writeEEPROM 0001  
                     ?___wmul 0001                    _diet_press E6B0                       ?_printf 000D  
                  _get_digits D6E0                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7          __size_of_shiftEEPROM 00AE                    _initEEPROM D31C  
                  _readEEPROM D27E        standbyMode@drawerCount 0069                    _food_press D880  
           __end_of_lcdNibble D5B0                       __Hparam 0000                       __Lparam 0000  
                   ?_viewLogs 0046      displayLogs@operationTime 003A                       ___lldiv D5B0  
             __size_of___wmul 0026                       ___lwdiv D432                       ___lwmod D3A4  
                     __pcinit D2B0                       __ramtop 1000                       _lcdInst D256  
                     __ptext0 D36C                       __ptext1 F408                       __ptext2 DA74  
                     __ptext3 D79E                       __ptext4 DC78                       __ptext5 D484  
                     __ptext6 E26A                       __ptext7 D632                       __ptext8 D27E  
                     __ptext9 D31C        __size_of_decode_drawer 00E2               __size_of_printf 030C  
                     _initLCD D3E6             __end_of_hexpowers FD57                       _dpowers FD45  
       which_drawer@backCheck 002C                       _isdigit D292                displayLogs@day 002D  
                   _LCD_RIGHT FD5F      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0025      __size_of_I2C_Master_Stop 0008  
        end_of_initialization D2C8          displayLogs@keypress3 0039               which_drawer@sum 002A  
       __end_of_LCD_SIZE_HORZ FD62                   ?_check_food 0001         __end_of_LCD_SIZE_VERT FD61  
               __Lmediumconst FD22     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                       printf@c 0024  
                     printf@f 000D                       postdec2 000FDD                    ??_viewLogs 0048  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 091A  
                 ?_diet_press 0025                     _PORTBbits 000F81                 ?_which_drawer 0025  
         diet_press@backCheck 002D                   ?_get_digits 0001                     _TRISCbits 000F94  
            viewLogs@checkLog 004A                  _happynewyear FD57             readEEPROM@address 0001  
           standbyMode@drawer 006F                   ?_initEEPROM 0001                 _decode_drawer D79E  
                 ?_readEEPROM 0001                   printf@width 0022                   ?_food_press 0025  
         diet_press@dietTable 0034                 ??_displayLogs 0027          __size_of_writeEEPROM 002A  
              __end_of___wmul D31C        standbyMode@validDrawer 0061           __size_of_check_food 0832  
              ??_which_drawer 0027                __end_of_printf E26A           start_initialization D2B0  
              ?_decode_drawer 0001           __size_of_diet_press 0526             ??_I2C_Master_Init 0012  
           ??_I2C_Master_Read 0002             ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002  
         __size_of_get_digits 00BE                      ??___wmul 0005      I2C_Master_Init@clockFreq 000E  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0017           __size_of_initEEPROM 0026  
          food_press@keypress 003B           __size_of_readEEPROM 0014           __end_of_displayLogs E6B0  
         __size_of_food_press 01F4  standbyMode@LCDinterruptState 0079                   __pbssCOMRAM 0071  
         decode_drawer@drawer 0001              _I2C_Master_Start D22A              _I2C_Master_Write D23A  
            ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000                 __pmediumconst FD22  
                   _lcdNibble D532                      ?___lldiv 0001                      ?___lwdiv 0001  
                    ?___lwmod 0008             __size_of_viewLogs 02E6                      ?_lcdInst 0001  
                    ?_initLCD 0001                      ?_isdigit 0001           check_food@foodInput 0003  
               ??_shiftEEPROM 0003                     _hexpowers FD4F              ___lwdiv@quotient 0005  
             ??_decode_drawer 0003                __size_of_putch 0014                  ??_check_food 0005  
                    _LCD_LEFT FD5E              displayLogs@month 002B                ___wmul@product 0005  
                    _LATDbits 000F8C          __end_of_which_drawer DC78              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001                  ??_diet_press 0027                  shiftEEPROM@i 0006  
                 _displayLogs E26A       __size_of_verifyKeypress 0052             ___wmul@multiplier 0001  
          __end_of_check_food F408                 lcdNibble@data 0002                    printf@flag 0021  
               lcdNibble@temp 0001                    printf@prec 001E                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FD63                 diet_press@sum 0031             which_drawer@count 002E  
                ??_initEEPROM 0003           __end_of_shiftEEPROM D6E0            __end_of_diet_press EBD6  
                ??_readEEPROM 0001                  ??_food_press 0029            diet_press@keypress 0033  
                  _EECON1bits 000FA6                      __Hrparam 0000                 ??_standbyMode 0052  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000            __end_of_get_digits D79E  
          diet_press@previous 0029              __size_of___lldiv 0082         displayLogs@flatPieces 0031  
            __size_of___lwdiv 0052              __size_of___lwmod 0042                   _isdigit$944 0002  
            __size_of_lcdInst 0014            __end_of_initEEPROM D342               _I2C_Master_Init D4D6  
             _I2C_Master_Read D2D2              __size_of_initLCD 004C               _I2C_Master_Wait D244  
          __end_of_readEEPROM D292               _I2C_Master_Stop D232        __end_of_LCD_HORZ_LIMIT FD64  
            __size_of_isdigit 001E            __end_of_food_press DA74               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 D342                      __ptext11 D880  
                    __ptext20 D432                      __ptext12 D6E0                      __ptext21 D23A  
                    __ptext13 EBD6                      __ptext30 D532                      __ptext22 D232  
                    __ptext14 E6B0                      __ptext23 D22A                      __ptext15 DF5E  
                    __ptext24 D2D2                      __ptext16 D26A                      __ptext25 D244  
                    __ptext17 D292                      __ptext26 D4D6                      __ptext18 D2F6  
                    __ptext27 D5B0                      __ptext19 D3A4                      __ptext28 D3E6  
                    __ptext29 D256                _LCD_VERT_LIMIT FD62                 __size_of_main 0038  
             displayLogs@year 0029            displayLogs@minutes 0035            displayLogs@seconds 0037  
               ??_writeEEPROM 0002      displayLogs@markedDrawer1 003C      displayLogs@markedDrawer2 003E  
    displayLogs@markedDrawer3 0040      displayLogs@markedDrawer4 0042                   ??_lcdNibble 0001  
                    _viewLogs DC78               verifyKeypress@i 0008                     printf@idx 001B  
                   printf@val 001F           __end_of_standbyMode FD22   I2C_Master_Write@byteToWrite 0002  
    decode_drawer@returnValue 0005         displayLogs@longPieces 0033              which_drawer@rand 0028  
                   putch@data 0003      __end_of_I2C_Master_Start D232      __end_of_I2C_Master_Write D244  
                  _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FD63                   _shiftEEPROM D632  
                    isdigit@c 0003         __size_of_which_drawer 0204     standbyMode@firstIteration 005B  
               _LCD_SIZE_HORZ FD61              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FD60  
            ___lldiv@dividend 0001       verifyKeypress@logNumber 0005        displayLogs@roundPieces 002F  
                    printf@ap 001C                   diet_press@i 002B       __end_of_I2C_Master_Init D532  
     __end_of_I2C_Master_Read D2F6       __end_of_I2C_Master_Wait D256       __end_of_I2C_Master_Stop D23A  
                 lcdInst@data 0003               shiftEEPROM@temp 0004                _verifyKeypress D484  
         __end_of_writeEEPROM D36C       verifyKeypress@returnVal 0006              ___lldiv@quotient 0009  
                _which_drawer DA74               ___lwmod@divisor 000A               ___lwmod@counter 000C  
      verifyKeypress@keypress 0001                   _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5  
       check_food@returnValue 0007  
