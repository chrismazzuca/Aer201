

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar  5 22:30:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4620 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  00C790                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _UART
    93  00C790  6C                 	db	low _uart
    94  00C791  00                 	db	high _uart
    95                           
    96                           ;initializer for _columnRight
    97  00C792  34                 	db	52
    98                           
    99                           ;initializer for _columnLeft
   100  00C793  33                 	db	51
   101                           
   102                           ;initializer for _rowDown
   103  00C794  32                 	db	50
   104                           
   105                           ;initializer for _rowUp
   106  00C795  31                 	db	49
   107                           
   108                           	psect	mediumconst
   109  00FD22                     __pmediumconst:
   110                           	opt stack 0
   111  00FD22  00                 	db	0
   112  00FD23                     _keys:
   113                           	opt stack 0
   114  00FD23  31                 	db	49
   115  00FD24  32                 	db	50
   116  00FD25  33                 	db	51
   117  00FD26  41                 	db	65
   118  00FD27  34                 	db	52
   119  00FD28  35                 	db	53
   120  00FD29  36                 	db	54
   121  00FD2A  42                 	db	66
   122  00FD2B  37                 	db	55
   123  00FD2C  38                 	db	56
   124  00FD2D  39                 	db	57
   125  00FD2E  43                 	db	67
   126  00FD2F  2A                 	db	42
   127  00FD30  30                 	db	48
   128  00FD31  23                 	db	35
   129  00FD32  44                 	db	68
   130  00FD33  00                 	db	0
   131  00FD34                     __end_of_keys:
   132                           	opt stack 0
   133  00FD34                     _input:
   134                           	opt stack 0
   135  00FD34  31                 	db	49
   136  00FD35  32                 	db	50
   137  00FD36  33                 	db	51
   138  00FD37  52                 	db	82
   139  00FD38  34                 	db	52
   140  00FD39  35                 	db	53
   141  00FD3A  36                 	db	54
   142  00FD3B  46                 	db	70
   143  00FD3C  37                 	db	55
   144  00FD3D  38                 	db	56
   145  00FD3E  39                 	db	57
   146  00FD3F  4C                 	db	76
   147  00FD40  2A                 	db	42
   148  00FD41  30                 	db	48
   149  00FD42  23                 	db	35
   150  00FD43  44                 	db	68
   151  00FD44  00                 	db	0
   152  00FD45                     __end_of_input:
   153                           	opt stack 0
   154  00FD45                     _dpowers:
   155                           	opt stack 0
   156  00FD45  0001               	dw	1
   157  00FD47  000A               	dw	10
   158  00FD49  0064               	dw	100
   159  00FD4B  03E8               	dw	1000
   160  00FD4D  2710               	dw	10000
   161  00FD4F                     __end_of_dpowers:
   162                           	opt stack 0
   163  00FD4F                     _hexpowers:
   164                           	opt stack 0
   165  00FD4F  0001               	dw	1
   166  00FD51  0010               	dw	16
   167  00FD53  0100               	dw	256
   168  00FD55  1000               	dw	4096
   169  00FD57                     __end_of_hexpowers:
   170                           	opt stack 0
   171  00FD57                     _happynewyear:
   172                           	opt stack 0
   173  00FD57  00                 	db	0
   174  00FD58  28                 	db	40
   175  00FD59  00                 	db	0
   176  00FD5A  06                 	db	6
   177  00FD5B  24                 	db	36
   178  00FD5C  02                 	db	2
   179  00FD5D  18                 	db	24
   180  00FD5E                     __end_of_happynewyear:
   181                           	opt stack 0
   182  00FD5E                     _LCD_LEFT:
   183                           	opt stack 0
   184  00FD5E  00                 	db	0
   185  00FD5F                     __end_of_LCD_LEFT:
   186                           	opt stack 0
   187  00FD5F                     _LCD_RIGHT:
   188                           	opt stack 0
   189  00FD5F  01                 	db	1
   190  00FD60                     __end_of_LCD_RIGHT:
   191                           	opt stack 0
   192  00FD60                     _LCD_SIZE_VERT:
   193                           	opt stack 0
   194  00FD60  02                 	db	2
   195  00FD61                     __end_of_LCD_SIZE_VERT:
   196                           	opt stack 0
   197  00FD61                     _LCD_SIZE_HORZ:
   198                           	opt stack 0
   199  00FD61  10                 	db	16
   200  00FD62                     __end_of_LCD_SIZE_HORZ:
   201                           	opt stack 0
   202  00FD62                     _LCD_VERT_LIMIT:
   203                           	opt stack 0
   204  00FD62  02                 	db	2
   205  00FD63                     __end_of_LCD_VERT_LIMIT:
   206                           	opt stack 0
   207  00FD63                     _LCD_HORZ_LIMIT:
   208                           	opt stack 0
   209  00FD63  28                 	db	40
   210  00FD64                     __end_of_LCD_HORZ_LIMIT:
   211                           	opt stack 0
   212  0000                     _SPBRG	set	4015
   213  0000                     _RCREG	set	4014
   214  0000                     _RCSTAbits	set	4011
   215  0000                     _TXREG	set	4013
   216  0000                     _TXSTAbits	set	4012
   217  0000                     _ADRESL	set	4035
   218  0000                     _ADRESH	set	4036
   219  0000                     _ADCON0bits	set	4034
   220  0000                     _SSPBUF	set	4041
   221  0000                     _SSPCON2bits	set	4037
   222  0000                     _SSPADD	set	4040
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPCON1	set	4038
   225  0000                     _SSPSTAT	set	4039
   226  0000                     _TRISCbits	set	3988
   227  0000                     _SSPCON1bits	set	4038
   228  0000                     _EECON2	set	4007
   229  0000                     _EEDATA	set	4008
   230  0000                     _EEADR	set	4009
   231  0000                     _EECON1bits	set	4006
   232  0000                     _PORTB	set	3969
   233  0000                     _PORTBbits	set	3969
   234  0000                     _INTCONbits	set	4082
   235  0000                     _LATDbits	set	3980
   236  0000                     _ADCON1	set	4033
   237  0000                     _ADCON0	set	4034
   238  0000                     _TRISE	set	3990
   239  0000                     _TRISD	set	3989
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISA	set	3986
   243  0000                     _LATE	set	3981
   244  0000                     _LATD	set	3980
   245  0000                     _LATC	set	3979
   246  0000                     _LATB	set	3978
   247  0000                     _LATA	set	3977
   248  0000                     _TRISC7	set	31911
   249  0000                     _TRISC6	set	31910
   250  0000                     _RCIE	set	31981
   251  0000                     _RCIF	set	31989
   252  0000                     _TXIE	set	31980
   253  0000                     _TRMT	set	32097
   254  0000                     _TXIF	set	31988
   255  0000                     _ADON	set	32272
   256  00FD64                     STR_24:
   257  00FD64  52                 	db	82	;'R'
   258  00FD65  65                 	db	101	;'e'
   259  00FD66  6D                 	db	109	;'m'
   260  00FD67  61                 	db	97	;'a'
   261  00FD68  69                 	db	105	;'i'
   262  00FD69  6E                 	db	110	;'n'
   263  00FD6A  69                 	db	105	;'i'
   264  00FD6B  6E                 	db	110	;'n'
   265  00FD6C  67                 	db	103	;'g'
   266  00FD6D  20                 	db	32
   267  00FD6E  70                 	db	112	;'p'
   268  00FD6F  69                 	db	105	;'i'
   269  00FD70  65                 	db	101	;'e'
   270  00FD71  63                 	db	99	;'c'
   271  00FD72  65                 	db	101	;'e'
   272  00FD73  73                 	db	115	;'s'
   273  00FD74  3A                 	db	58	;':'
   274  00FD75  00                 	db	0
   275  00FD76                     STR_71:
   276  00FD76  30                 	db	48	;'0'
   277  00FD77  31                 	db	49	;'1'
   278  00FD78  32                 	db	50	;'2'
   279  00FD79  33                 	db	51	;'3'
   280  00FD7A  34                 	db	52	;'4'
   281  00FD7B  35                 	db	53	;'5'
   282  00FD7C  36                 	db	54	;'6'
   283  00FD7D  37                 	db	55	;'7'
   284  00FD7E  38                 	db	56	;'8'
   285  00FD7F  39                 	db	57	;'9'
   286  00FD80  61                 	db	97	;'a'
   287  00FD81  62                 	db	98	;'b'
   288  00FD82  63                 	db	99	;'c'
   289  00FD83  64                 	db	100	;'d'
   290  00FD84  65                 	db	101	;'e'
   291  00FD85  66                 	db	102	;'f'
   292  00FD86  00                 	db	0
   293  00FD87                     STR_55:
   294  00FD87  64                 	db	100	;'d'
   295  00FD88  72                 	db	114	;'r'
   296  00FD89  61                 	db	97	;'a'
   297  00FD8A  77                 	db	119	;'w'
   298  00FD8B  65                 	db	101	;'e'
   299  00FD8C  72                 	db	114	;'r'
   300  00FD8D  73                 	db	115	;'s'
   301  00FD8E  20                 	db	32
   302  00FD8F  72                 	db	114	;'r'
   303  00FD90  65                 	db	101	;'e'
   304  00FD91  61                 	db	97	;'a'
   305  00FD92  63                 	db	99	;'c'
   306  00FD93  68                 	db	104	;'h'
   307  00FD94  65                 	db	101	;'e'
   308  00FD95  64                 	db	100	;'d'
   309  00FD96  21                 	db	33
   310  00FD97  00                 	db	0
   311  00FD98                     STR_43:
   312  00FD98  62                 	db	98	;'b'
   313  00FD99  65                 	db	101	;'e'
   314  00FD9A  67                 	db	103	;'g'
   315  00FD9B  69                 	db	105	;'i'
   316  00FD9C  6E                 	db	110	;'n'
   317  00FD9D  20                 	db	32
   318  00FD9E  6F                 	db	111	;'o'
   319  00FD9F  70                 	db	112	;'p'
   320  00FDA0  65                 	db	101	;'e'
   321  00FDA1  72                 	db	114	;'r'
   322  00FDA2  61                 	db	97	;'a'
   323  00FDA3  74                 	db	116	;'t'
   324  00FDA4  69                 	db	105	;'i'
   325  00FDA5  6F                 	db	111	;'o'
   326  00FDA6  6E                 	db	110	;'n'
   327  00FDA7  2E                 	db	46
   328  00FDA8  00                 	db	0
   329  00FDA9                     STR_10:
   330  00FDA9  50                 	db	80	;'P'
   331  00FDAA  6C                 	db	108	;'l'
   332  00FDAB  65                 	db	101	;'e'
   333  00FDAC  61                 	db	97	;'a'
   334  00FDAD  73                 	db	115	;'s'
   335  00FDAE  65                 	db	101	;'e'
   336  00FDAF  20                 	db	32
   337  00FDB0  69                 	db	105	;'i'
   338  00FDB1  6E                 	db	110	;'n'
   339  00FDB2  70                 	db	112	;'p'
   340  00FDB3  75                 	db	117	;'u'
   341  00FDB4  74                 	db	116	;'t'
   342  00FDB5  20                 	db	32
   343  00FDB6  6C                 	db	108	;'l'
   344  00FDB7  6F                 	db	111	;'o'
   345  00FDB8  67                 	db	103	;'g'
   346  00FDB9  00                 	db	0
   347  00FDBA                     STR_25:
   348  00FDBA  52                 	db	82	;'R'
   349  00FDBB  3A                 	db	58	;':'
   350  00FDBC  25                 	db	37
   351  00FDBD  69                 	db	105	;'i'
   352  00FDBE  20                 	db	32
   353  00FDBF  20                 	db	32
   354  00FDC0  46                 	db	70	;'F'
   355  00FDC1  3A                 	db	58	;':'
   356  00FDC2  25                 	db	37
   357  00FDC3  69                 	db	105	;'i'
   358  00FDC4  20                 	db	32
   359  00FDC5  20                 	db	32
   360  00FDC6  4C                 	db	76	;'L'
   361  00FDC7  3A                 	db	58	;':'
   362  00FDC8  25                 	db	37
   363  00FDC9  69                 	db	105	;'i'
   364  00FDCA  00                 	db	0
   365  00FDCB                     STR_6:
   366  00FDCB  50                 	db	80	;'P'
   367  00FDCC  72                 	db	114	;'r'
   368  00FDCD  65                 	db	101	;'e'
   369  00FDCE  73                 	db	115	;'s'
   370  00FDCF  73                 	db	115	;'s'
   371  00FDD0  20                 	db	32
   372  00FDD1  61                 	db	97	;'a'
   373  00FDD2  6E                 	db	110	;'n'
   374  00FDD3  79                 	db	121	;'y'
   375  00FDD4  20                 	db	32
   376  00FDD5  6B                 	db	107	;'k'
   377  00FDD6  65                 	db	101	;'e'
   378  00FDD7  79                 	db	121	;'y'
   379  00FDD8  20                 	db	32
   380  00FDD9  74                 	db	116	;'t'
   381  00FDDA  6F                 	db	111	;'o'
   382  00FDDB  00                 	db	0
   383  00FDDC                     STR_8:
   384  00FDDC  25                 	db	37
   385  00FDDD  69                 	db	105	;'i'
   386  00FDDE  20                 	db	32
   387  00FDDF  70                 	db	112	;'p'
   388  00FDE0  72                 	db	114	;'r'
   389  00FDE1  65                 	db	101	;'e'
   390  00FDE2  76                 	db	118	;'v'
   391  00FDE3  69                 	db	105	;'i'
   392  00FDE4  6F                 	db	111	;'o'
   393  00FDE5  75                 	db	117	;'u'
   394  00FDE6  73                 	db	115	;'s'
   395  00FDE7  20                 	db	32
   396  00FDE8  6C                 	db	108	;'l'
   397  00FDE9  6F                 	db	111	;'o'
   398  00FDEA  67                 	db	103	;'g'
   399  00FDEB  73                 	db	115	;'s'
   400  00FDEC  00                 	db	0
   401  00FDED                     STR_45:
   402  00FDED  63                 	db	99	;'c'
   403  00FDEE  61                 	db	97	;'a'
   404  00FDEF  62                 	db	98	;'b'
   405  00FDF0  69                 	db	105	;'i'
   406  00FDF1  6E                 	db	110	;'n'
   407  00FDF2  65                 	db	101	;'e'
   408  00FDF3  74                 	db	116	;'t'
   409  00FDF4  20                 	db	32
   410  00FDF5  73                 	db	115	;'s'
   411  00FDF6  6F                 	db	111	;'o'
   412  00FDF7  72                 	db	114	;'r'
   413  00FDF8  74                 	db	116	;'t'
   414  00FDF9  65                 	db	101	;'e'
   415  00FDFA  72                 	db	114	;'r'
   416  00FDFB  21                 	db	33
   417  00FDFC  00                 	db	0
   418  00FDFD                     STR_59:
   419  00FDFD  6E                 	db	110	;'n'
   420  00FDFE  75                 	db	117	;'u'
   421  00FDFF  6D                 	db	109	;'m'
   422  00FE00  62                 	db	98	;'b'
   423  00FE01  65                 	db	101	;'e'
   424  00FE02  72                 	db	114	;'r'
   425  00FE03  20                 	db	32
   426  00FE04  70                 	db	112	;'p'
   427  00FE05  72                 	db	114	;'r'
   428  00FE06  65                 	db	101	;'e'
   429  00FE07  73                 	db	115	;'s'
   430  00FE08  73                 	db	115	;'s'
   431  00FE09  65                 	db	101	;'e'
   432  00FE0A  64                 	db	100	;'d'
   433  00FE0B  2E                 	db	46
   434  00FE0C  00                 	db	0
   435  00FE0D                     STR_31:
   436  00FE0D  44                 	db	68	;'D'
   437  00FE0E  72                 	db	114	;'r'
   438  00FE0F  61                 	db	97	;'a'
   439  00FE10  77                 	db	119	;'w'
   440  00FE11  65                 	db	101	;'e'
   441  00FE12  72                 	db	114	;'r'
   442  00FE13  20                 	db	32
   443  00FE14  25                 	db	37
   444  00FE15  69                 	db	105	;'i'
   445  00FE16  20                 	db	32
   446  00FE17  66                 	db	102	;'f'
   447  00FE18  6F                 	db	111	;'o'
   448  00FE19  6F                 	db	111	;'o'
   449  00FE1A  64                 	db	100	;'d'
   450  00FE1B  3A                 	db	58	;':'
   451  00FE1C  00                 	db	0
   452  00FE1D                     STR_17:
   453  00FE1D  4F                 	db	79	;'O'
   454  00FE1E  70                 	db	112	;'p'
   455  00FE1F  65                 	db	101	;'e'
   456  00FE20  72                 	db	114	;'r'
   457  00FE21  61                 	db	97	;'a'
   458  00FE22  74                 	db	116	;'t'
   459  00FE23  69                 	db	105	;'i'
   460  00FE24  6F                 	db	111	;'o'
   461  00FE25  6E                 	db	110	;'n'
   462  00FE26  20                 	db	32
   463  00FE27  74                 	db	116	;'t'
   464  00FE28  69                 	db	105	;'i'
   465  00FE29  6D                 	db	109	;'m'
   466  00FE2A  65                 	db	101	;'e'
   467  00FE2B  3A                 	db	58	;':'
   468  00FE2C  00                 	db	0
   469  00FE2D                     STR_19:
   470  00FE2D  4D                 	db	77	;'M'
   471  00FE2E  61                 	db	97	;'a'
   472  00FE2F  72                 	db	114	;'r'
   473  00FE30  6B                 	db	107	;'k'
   474  00FE31  65                 	db	101	;'e'
   475  00FE32  64                 	db	100	;'d'
   476  00FE33  20                 	db	32
   477  00FE34  64                 	db	100	;'d'
   478  00FE35  72                 	db	114	;'r'
   479  00FE36  61                 	db	97	;'a'
   480  00FE37  77                 	db	119	;'w'
   481  00FE38  65                 	db	101	;'e'
   482  00FE39  72                 	db	114	;'r'
   483  00FE3A  73                 	db	115	;'s'
   484  00FE3B  3A                 	db	58	;':'
   485  00FE3C  00                 	db	0
   486  00FE3D                     STR_35:
   487  00FE3D  44                 	db	68	;'D'
   488  00FE3E  72                 	db	114	;'r'
   489  00FE3F  61                 	db	97	;'a'
   490  00FE40  77                 	db	119	;'w'
   491  00FE41  65                 	db	101	;'e'
   492  00FE42  72                 	db	114	;'r'
   493  00FE43  20                 	db	32
   494  00FE44  25                 	db	37
   495  00FE45  69                 	db	105	;'i'
   496  00FE46  20                 	db	32
   497  00FE47  64                 	db	100	;'d'
   498  00FE48  69                 	db	105	;'i'
   499  00FE49  65                 	db	101	;'e'
   500  00FE4A  74                 	db	116	;'t'
   501  00FE4B  3A                 	db	58	;':'
   502  00FE4C  00                 	db	0
   503  00FE4D                     STR_56:
   504  00FE4D  41                 	db	65	;'A'
   505  00FE4E  6E                 	db	110	;'n'
   506  00FE4F  6F                 	db	111	;'o'
   507  00FE50  74                 	db	116	;'t'
   508  00FE51  68                 	db	104	;'h'
   509  00FE52  65                 	db	101	;'e'
   510  00FE53  72                 	db	114	;'r'
   511  00FE54  20                 	db	32
   512  00FE55  64                 	db	100	;'d'
   513  00FE56  72                 	db	114	;'r'
   514  00FE57  61                 	db	97	;'a'
   515  00FE58  77                 	db	119	;'w'
   516  00FE59  65                 	db	101	;'e'
   517  00FE5A  72                 	db	114	;'r'
   518  00FE5B  3F                 	db	63	;'?'
   519  00FE5C  00                 	db	0
   520  00FE5D                     STR_44:
   521  00FE5D  57                 	db	87	;'W'
   522  00FE5E  65                 	db	101	;'e'
   523  00FE5F  6C                 	db	108	;'l'
   524  00FE60  63                 	db	99	;'c'
   525  00FE61  6F                 	db	111	;'o'
   526  00FE62  6D                 	db	109	;'m'
   527  00FE63  65                 	db	101	;'e'
   528  00FE64  20                 	db	32
   529  00FE65  74                 	db	116	;'t'
   530  00FE66  6F                 	db	111	;'o'
   531  00FE67  20                 	db	32
   532  00FE68  79                 	db	121	;'y'
   533  00FE69  6F                 	db	111	;'o'
   534  00FE6A  75                 	db	117	;'u'
   535  00FE6B  72                 	db	114	;'r'
   536  00FE6C  00                 	db	0
   537  00FE6D                     STR_30:
   538  00FE6D  23                 	db	35
   539  00FE6E  20                 	db	32
   540  00FE6F  3D                 	db	61	;'='
   541  00FE70  20                 	db	32
   542  00FE71  4E                 	db	78	;'N'
   543  00FE72  6F                 	db	111	;'o'
   544  00FE73  2C                 	db	44
   545  00FE74  20                 	db	32
   546  00FE75  44                 	db	68	;'D'
   547  00FE76  20                 	db	32
   548  00FE77  3D                 	db	61	;'='
   549  00FE78  20                 	db	32
   550  00FE79  59                 	db	89	;'Y'
   551  00FE7A  65                 	db	101	;'e'
   552  00FE7B  73                 	db	115	;'s'
   553  00FE7C  00                 	db	0
   554  00FE7D                     STR_27:
   555  00FE7D  44                 	db	68	;'D'
   556  00FE7E  72                 	db	114	;'r'
   557  00FE7F  61                 	db	97	;'a'
   558  00FE80  77                 	db	119	;'w'
   559  00FE81  65                 	db	101	;'e'
   560  00FE82  72                 	db	114	;'r'
   561  00FE83  20                 	db	32
   562  00FE84  31                 	db	49	;'1'
   563  00FE85  3A                 	db	58	;':'
   564  00FE86  20                 	db	32
   565  00FE87  52                 	db	82	;'R'
   566  00FE88  46                 	db	70	;'F'
   567  00FE89  31                 	db	49	;'1'
   568  00FE8A  32                 	db	50	;'2'
   569  00FE8B  00                 	db	0
   570  00FE8C                     STR_39:
   571  00FE8C  44                 	db	68	;'D'
   572  00FE8D  72                 	db	114	;'r'
   573  00FE8E  61                 	db	97	;'a'
   574  00FE8F  77                 	db	119	;'w'
   575  00FE90  65                 	db	101	;'e'
   576  00FE91  72                 	db	114	;'r'
   577  00FE92  20                 	db	32
   578  00FE93  6E                 	db	110	;'n'
   579  00FE94  75                 	db	117	;'u'
   580  00FE95  6D                 	db	109	;'m'
   581  00FE96  62                 	db	98	;'b'
   582  00FE97  65                 	db	101	;'e'
   583  00FE98  72                 	db	114	;'r'
   584  00FE99  3A                 	db	58	;':'
   585  00FE9A  00                 	db	0
   586  00FE9B                     STR_26:
   587  00FE9B  49                 	db	73	;'I'
   588  00FE9C  6E                 	db	110	;'n'
   589  00FE9D  70                 	db	112	;'p'
   590  00FE9E  75                 	db	117	;'u'
   591  00FE9F  74                 	db	116	;'t'
   592  00FEA0  20                 	db	32
   593  00FEA1  53                 	db	83	;'S'
   594  00FEA2  75                 	db	117	;'u'
   595  00FEA3  6D                 	db	109	;'m'
   596  00FEA4  6D                 	db	109	;'m'
   597  00FEA5  61                 	db	97	;'a'
   598  00FEA6  72                 	db	114	;'r'
   599  00FEA7  79                 	db	121	;'y'
   600  00FEA8  3A                 	db	58	;':'
   601  00FEA9  00                 	db	0
   602  00FEAA                     STR_4:
   603  00FEAA  31                 	db	49	;'1'
   604  00FEAB  20                 	db	32
   605  00FEAC  70                 	db	112	;'p'
   606  00FEAD  72                 	db	114	;'r'
   607  00FEAE  65                 	db	101	;'e'
   608  00FEAF  76                 	db	118	;'v'
   609  00FEB0  69                 	db	105	;'i'
   610  00FEB1  6F                 	db	111	;'o'
   611  00FEB2  75                 	db	117	;'u'
   612  00FEB3  73                 	db	115	;'s'
   613  00FEB4  20                 	db	32
   614  00FEB5  6C                 	db	108	;'l'
   615  00FEB6  6F                 	db	111	;'o'
   616  00FEB7  67                 	db	103	;'g'
   617  00FEB8  00                 	db	0
   618  00FEB9                     STR_23:
   619  00FEB9  25                 	db	37
   620  00FEBA  69                 	db	105	;'i'
   621  00FEBB  2C                 	db	44
   622  00FEBC  20                 	db	32
   623  00FEBD  25                 	db	37
   624  00FEBE  69                 	db	105	;'i'
   625  00FEBF  2C                 	db	44
   626  00FEC0  20                 	db	32
   627  00FEC1  25                 	db	37
   628  00FEC2  69                 	db	105	;'i'
   629  00FEC3  2C                 	db	44
   630  00FEC4  20                 	db	32
   631  00FEC5  25                 	db	37
   632  00FEC6  69                 	db	105	;'i'
   633  00FEC7  00                 	db	0
   634  00FEC8                     STR_16:
   635  00FEC8  25                 	db	37
   636  00FEC9  30                 	db	48	;'0'
   637  00FECA  32                 	db	50	;'2'
   638  00FECB  69                 	db	105	;'i'
   639  00FECC  2F                 	db	47
   640  00FECD  25                 	db	37
   641  00FECE  30                 	db	48	;'0'
   642  00FECF  32                 	db	50	;'2'
   643  00FED0  69                 	db	105	;'i'
   644  00FED1  2F                 	db	47
   645  00FED2  25                 	db	37
   646  00FED3  30                 	db	48	;'0'
   647  00FED4  32                 	db	50	;'2'
   648  00FED5  69                 	db	105	;'i'
   649  00FED6  00                 	db	0
   650  00FED7                     STR_48:
   651  00FED7  25                 	db	37
   652  00FED8  30                 	db	48	;'0'
   653  00FED9  32                 	db	50	;'2'
   654  00FEDA  78                 	db	120	;'x'
   655  00FEDB  2F                 	db	47
   656  00FEDC  25                 	db	37
   657  00FEDD  30                 	db	48	;'0'
   658  00FEDE  32                 	db	50	;'2'
   659  00FEDF  78                 	db	120	;'x'
   660  00FEE0  2F                 	db	47
   661  00FEE1  25                 	db	37
   662  00FEE2  30                 	db	48	;'0'
   663  00FEE3  32                 	db	50	;'2'
   664  00FEE4  78                 	db	120	;'x'
   665  00FEE5  00                 	db	0
   666  00FEE6                     STR_49:
   667  00FEE6  25                 	db	37
   668  00FEE7  30                 	db	48	;'0'
   669  00FEE8  32                 	db	50	;'2'
   670  00FEE9  78                 	db	120	;'x'
   671  00FEEA  3A                 	db	58	;':'
   672  00FEEB  25                 	db	37
   673  00FEEC  30                 	db	48	;'0'
   674  00FEED  32                 	db	50	;'2'
   675  00FEEE  78                 	db	120	;'x'
   676  00FEEF  3A                 	db	58	;':'
   677  00FEF0  25                 	db	37
   678  00FEF1  30                 	db	48	;'0'
   679  00FEF2  32                 	db	50	;'2'
   680  00FEF3  78                 	db	120	;'x'
   681  00FEF4  00                 	db	0
   682  00FEF5                     STR_60:
   683  00FEF5  44                 	db	68	;'D'
   684  00FEF6  72                 	db	114	;'r'
   685  00FEF7  61                 	db	97	;'a'
   686  00FEF8  77                 	db	119	;'w'
   687  00FEF9  65                 	db	101	;'e'
   688  00FEFA  72                 	db	114	;'r'
   689  00FEFB  20                 	db	32
   690  00FEFC  61                 	db	97	;'a'
   691  00FEFD  6C                 	db	108	;'l'
   692  00FEFE  72                 	db	114	;'r'
   693  00FEFF  65                 	db	101	;'e'
   694  00FF00  61                 	db	97	;'a'
   695  00FF01  64                 	db	100	;'d'
   696  00FF02  79                 	db	121	;'y'
   697  00FF03  00                 	db	0
   698  00FF04                     STR_33:
   699  00FF04  49                 	db	73	;'I'
   700  00FF05  6E                 	db	110	;'n'
   701  00FF06  76                 	db	118	;'v'
   702  00FF07  61                 	db	97	;'a'
   703  00FF08  6C                 	db	108	;'l'
   704  00FF09  69                 	db	105	;'i'
   705  00FF0A  64                 	db	100	;'d'
   706  00FF0B  20                 	db	32
   707  00FF0C  66                 	db	102	;'f'
   708  00FF0D  6F                 	db	111	;'o'
   709  00FF0E  6F                 	db	111	;'o'
   710  00FF0F  64                 	db	100	;'d'
   711  00FF10  21                 	db	33
   712  00FF11  00                 	db	0
   713  00FF12                     STR_37:
   714  00FF12  49                 	db	73	;'I'
   715  00FF13  6E                 	db	110	;'n'
   716  00FF14  76                 	db	118	;'v'
   717  00FF15  61                 	db	97	;'a'
   718  00FF16  6C                 	db	108	;'l'
   719  00FF17  69                 	db	105	;'i'
   720  00FF18  64                 	db	100	;'d'
   721  00FF19  20                 	db	32
   722  00FF1A  64                 	db	100	;'d'
   723  00FF1B  69                 	db	105	;'i'
   724  00FF1C  65                 	db	101	;'e'
   725  00FF1D  74                 	db	116	;'t'
   726  00FF1E  21                 	db	33
   727  00FF1F  00                 	db	0
   728  00FF20                     STR_7:
   729  00FF20  6D                 	db	109	;'m'
   730  00FF21  6F                 	db	111	;'o'
   731  00FF22  76                 	db	118	;'v'
   732  00FF23  65                 	db	101	;'e'
   733  00FF24  20                 	db	32
   734  00FF25  66                 	db	102	;'f'
   735  00FF26  6F                 	db	111	;'o'
   736  00FF27  72                 	db	114	;'r'
   737  00FF28  77                 	db	119	;'w'
   738  00FF29  61                 	db	97	;'a'
   739  00FF2A  72                 	db	114	;'r'
   740  00FF2B  64                 	db	100	;'d'
   741  00FF2C  2E                 	db	46
   742  00FF2D  00                 	db	0
   743  00FF2E                     STR_52:
   744  00FF2E  6F                 	db	111	;'o'
   745  00FF2F  72                 	db	114	;'r'
   746  00FF30  20                 	db	32
   747  00FF31  70                 	db	112	;'p'
   748  00FF32  72                 	db	114	;'r'
   749  00FF33  65                 	db	101	;'e'
   750  00FF34  73                 	db	115	;'s'
   751  00FF35  73                 	db	115	;'s'
   752  00FF36  20                 	db	32
   753  00FF37  44                 	db	68	;'D'
   754  00FF38  20                 	db	32
   755  00FF39  74                 	db	116	;'t'
   756  00FF3A  6F                 	db	111	;'o'
   757  00FF3B  00                 	db	0
   758  00FF3C                     STR_67:
   759  00FF3C  49                 	db	73	;'I'
   760  00FF3D  6E                 	db	110	;'n'
   761  00FF3E  76                 	db	118	;'v'
   762  00FF3F  61                 	db	97	;'a'
   763  00FF40  6C                 	db	108	;'l'
   764  00FF41  69                 	db	105	;'i'
   765  00FF42  64                 	db	100	;'d'
   766  00FF43  20                 	db	32
   767  00FF44  6B                 	db	107	;'k'
   768  00FF45  65                 	db	101	;'e'
   769  00FF46  79                 	db	121	;'y'
   770  00FF47  21                 	db	33
   771  00FF48  00                 	db	0
   772  00FF49                     STR_28:
   773  00FF49  44                 	db	68	;'D'
   774  00FF4A  72                 	db	114	;'r'
   775  00FF4B  61                 	db	97	;'a'
   776  00FF4C  77                 	db	119	;'w'
   777  00FF4D  65                 	db	101	;'e'
   778  00FF4E  72                 	db	114	;'r'
   779  00FF4F  20                 	db	32
   780  00FF50  32                 	db	50	;'2'
   781  00FF51  3A                 	db	58	;':'
   782  00FF52  20                 	db	32
   783  00FF53  4C                 	db	76	;'L'
   784  00FF54  31                 	db	49	;'1'
   785  00FF55  00                 	db	0
   786  00FF56                     STR_54:
   787  00FF56  4D                 	db	77	;'M'
   788  00FF57  61                 	db	97	;'a'
   789  00FF58  78                 	db	120	;'x'
   790  00FF59  69                 	db	105	;'i'
   791  00FF5A  6D                 	db	109	;'m'
   792  00FF5B  75                 	db	117	;'u'
   793  00FF5C  6D                 	db	109	;'m'
   794  00FF5D  20                 	db	32
   795  00FF5E  6F                 	db	111	;'o'
   796  00FF5F  66                 	db	102	;'f'
   797  00FF60  20                 	db	32
   798  00FF61  38                 	db	56	;'8'
   799  00FF62  00                 	db	0
   800  00FF63                     STR_29:
   801  00FF63  41                 	db	65	;'A'
   802  00FF64  6E                 	db	110	;'n'
   803  00FF65  6F                 	db	111	;'o'
   804  00FF66  74                 	db	116	;'t'
   805  00FF67  68                 	db	104	;'h'
   806  00FF68  65                 	db	101	;'e'
   807  00FF69  72                 	db	114	;'r'
   808  00FF6A  20                 	db	32
   809  00FF6B  6C                 	db	108	;'l'
   810  00FF6C  6F                 	db	111	;'o'
   811  00FF6D  67                 	db	103	;'g'
   812  00FF6E  3F                 	db	63	;'?'
   813  00FF6F  00                 	db	0
   814  00FF70                     STR_46:
   815  00FF70  43                 	db	67	;'C'
   816  00FF71  75                 	db	117	;'u'
   817  00FF72  72                 	db	114	;'r'
   818  00FF73  72                 	db	114	;'r'
   819  00FF74  65                 	db	101	;'e'
   820  00FF75  6E                 	db	110	;'n'
   821  00FF76  74                 	db	116	;'t'
   822  00FF77  20                 	db	32
   823  00FF78  64                 	db	100	;'d'
   824  00FF79  61                 	db	97	;'a'
   825  00FF7A  74                 	db	116	;'t'
   826  00FF7B  65                 	db	101	;'e'
   827  00FF7C  00                 	db	0
   828  00FF7D                     STR_51:
   829  00FF7D  76                 	db	118	;'v'
   830  00FF7E  69                 	db	105	;'i'
   831  00FF7F  65                 	db	101	;'e'
   832  00FF80  77                 	db	119	;'w'
   833  00FF81  20                 	db	32
   834  00FF82  6C                 	db	108	;'l'
   835  00FF83  6F                 	db	111	;'o'
   836  00FF84  67                 	db	103	;'g'
   837  00FF85  73                 	db	115	;'s'
   838  00FF86  2C                 	db	44
   839  00FF87  00                 	db	0
   840  00FF88                     STR_3:
   841  00FF88  61                 	db	97	;'a'
   842  00FF89  76                 	db	118	;'v'
   843  00FF8A  61                 	db	97	;'a'
   844  00FF8B  69                 	db	105	;'i'
   845  00FF8C  6C                 	db	108	;'l'
   846  00FF8D  61                 	db	97	;'a'
   847  00FF8E  62                 	db	98	;'b'
   848  00FF8F  6C                 	db	108	;'l'
   849  00FF90  65                 	db	101	;'e'
   850  00FF91  2E                 	db	46
   851  00FF92  00                 	db	0
   852  00FF93                     STR_66:
   853  00FF93  52                 	db	82	;'R'
   854  00FF94  65                 	db	101	;'e'
   855  00FF95  62                 	db	98	;'b'
   856  00FF96  6F                 	db	111	;'o'
   857  00FF97  6F                 	db	111	;'o'
   858  00FF98  74                 	db	116	;'t'
   859  00FF99  69                 	db	105	;'i'
   860  00FF9A  6E                 	db	110	;'n'
   861  00FF9B  67                 	db	103	;'g'
   862  00FF9C  2E                 	db	46
   863  00FF9D  00                 	db	0
   864  00FF9E                     STR_34:
   865  00FF9E  54                 	db	84	;'T'
   866  00FF9F  72                 	db	114	;'r'
   867  00FFA0  79                 	db	121	;'y'
   868  00FFA1  20                 	db	32
   869  00FFA2  61                 	db	97	;'a'
   870  00FFA3  67                 	db	103	;'g'
   871  00FFA4  61                 	db	97	;'a'
   872  00FFA5  69                 	db	105	;'i'
   873  00FFA6  6E                 	db	110	;'n'
   874  00FFA7  2E                 	db	46
   875  00FFA8  00                 	db	0
   876  00FFA9                     STR_50:
   877  00FFA9  50                 	db	80	;'P'
   878  00FFAA  72                 	db	114	;'r'
   879  00FFAB  65                 	db	101	;'e'
   880  00FFAC  73                 	db	115	;'s'
   881  00FFAD  73                 	db	115	;'s'
   882  00FFAE  20                 	db	32
   883  00FFAF  23                 	db	35
   884  00FFB0  20                 	db	32
   885  00FFB1  74                 	db	116	;'t'
   886  00FFB2  6F                 	db	111	;'o'
   887  00FFB3  00                 	db	0
   888  00FFB4                     STR_47:
   889  00FFB4  61                 	db	97	;'a'
   890  00FFB5  6E                 	db	110	;'n'
   891  00FFB6  64                 	db	100	;'d'
   892  00FFB7  20                 	db	32
   893  00FFB8  74                 	db	116	;'t'
   894  00FFB9  69                 	db	105	;'i'
   895  00FFBA  6D                 	db	109	;'m'
   896  00FFBB  65                 	db	101	;'e'
   897  00FFBC  3A                 	db	58	;':'
   898  00FFBD  00                 	db	0
   899  00FFBE                     STR_58:
   900  00FFBE  4E                 	db	78	;'N'
   901  00FFBF  6F                 	db	111	;'o'
   902  00FFC0  20                 	db	32
   903  00FFC1  64                 	db	100	;'d'
   904  00FFC2  72                 	db	114	;'r'
   905  00FFC3  61                 	db	97	;'a'
   906  00FFC4  77                 	db	119	;'w'
   907  00FFC5  65                 	db	101	;'e'
   908  00FFC6  72                 	db	114	;'r'
   909  00FFC7  00                 	db	0
   910  00FFC8                     STR_11:
   911  00FFC8  6E                 	db	110	;'n'
   912  00FFC9  75                 	db	117	;'u'
   913  00FFCA  6D                 	db	109	;'m'
   914  00FFCB  62                 	db	98	;'b'
   915  00FFCC  65                 	db	101	;'e'
   916  00FFCD  72                 	db	114	;'r'
   917  00FFCE  3A                 	db	58	;':'
   918  00FFCF  20                 	db	32
   919  00FFD0  00                 	db	0
   920  00FFD1                     STR_61:
   921  00FFD1  69                 	db	105	;'i'
   922  00FFD2  6E                 	db	110	;'n'
   923  00FFD3  20                 	db	32
   924  00FFD4  75                 	db	117	;'u'
   925  00FFD5  73                 	db	115	;'s'
   926  00FFD6  65                 	db	101	;'e'
   927  00FFD7  21                 	db	33
   928  00FFD8  00                 	db	0
   929  00FFD9                     STR_18:
   930  00FFD9  25                 	db	37
   931  00FFDA  69                 	db	105	;'i'
   932  00FFDB  3A                 	db	58	;':'
   933  00FFDC  25                 	db	37
   934  00FFDD  30                 	db	48	;'0'
   935  00FFDE  32                 	db	50	;'2'
   936  00FFDF  69                 	db	105	;'i'
   937  00FFE0  00                 	db	0
   938  00FFE1                     STR_2:
   939  00FFE1  4E                 	db	78	;'N'
   940  00FFE2  6F                 	db	111	;'o'
   941  00FFE3  20                 	db	32
   942  00FFE4  6C                 	db	108	;'l'
   943  00FFE5  6F                 	db	111	;'o'
   944  00FFE6  67                 	db	103	;'g'
   945  00FFE7  73                 	db	115	;'s'
   946  00FFE8  00                 	db	0
   947  00FFE9                     STR_1:
   948  00FFE9  53                 	db	83	;'S'
   949  00FFEA  74                 	db	116	;'t'
   950  00FFEB  61                 	db	97	;'a'
   951  00FFEC  6E                 	db	110	;'n'
   952  00FFED  64                 	db	100	;'d'
   953  00FFEE  62                 	db	98	;'b'
   954  00FFEF  79                 	db	121	;'y'
   955  00FFF0  00                 	db	0
   956  00FFF1                     STR_12:
   957  00FFF1  47                 	db	71	;'G'
   958  00FFF2  72                 	db	114	;'r'
   959  00FFF3  65                 	db	101	;'e'
   960  00FFF4  61                 	db	97	;'a'
   961  00FFF5  74                 	db	116	;'t'
   962  00FFF6  21                 	db	33
   963  00FFF7  00                 	db	0
   964  00FFF8                     STR_15:
   965  00FFF8  44                 	db	68	;'D'
   966  00FFF9  61                 	db	97	;'a'
   967  00FFFA  74                 	db	116	;'t'
   968  00FFFB  65                 	db	101	;'e'
   969  00FFFC  3A                 	db	58	;':'
   970  00FFFD  00                 	db	0
   971  0000                     
   972                           ; #config settings
   973  00FFFE  00                 	db	0	; dummy byte at the end
   974  0000                     
   975                           	psect	cinit
   976  00C90E                     __pcinit:
   977                           	opt stack 0
   978  00C90E                     start_initialization:
   979                           	opt stack 0
   980  00C90E                     __initialization:
   981                           	opt stack 0
   982                           
   983                           ; Initialize objects allocated to COMRAM (6 bytes)
   984                           ; load TBLPTR registers with __pidataCOMRAM
   985  00C90E  0E90               	movlw	low __pidataCOMRAM
   986  00C910  6EF6               	movwf	tblptrl,c
   987  00C912  0EC7               	movlw	high __pidataCOMRAM
   988  00C914  6EF7               	movwf	tblptrh,c
   989  00C916  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   990  00C918  6EF8               	movwf	tblptru,c
   991  00C91A  EE00  F078         	lfsr	0,__pdataCOMRAM
   992  00C91E  EE10 F006          	lfsr	1,6
   993  00C922                     copy_data0:
   994  00C922  0009               	tblrd		*+
   995  00C924  CFF5 FFEE          	movff	tablat,postinc0
   996  00C928  50E5               	movf	postdec1,w,c
   997  00C92A  50E1               	movf	fsr1l,w,c
   998  00C92C  E1FA               	bnz	copy_data0
   999                           
  1000                           ; Clear objects allocated to BANK1 (96 bytes)
  1001  00C92E  EE01  F000         	lfsr	0,__pbssBANK1
  1002  00C932  0E60               	movlw	96
  1003  00C934                     clear_0:
  1004  00C934  6AEE               	clrf	postinc0,c
  1005  00C936  06E8               	decf	wreg,f,c
  1006  00C938  E1FD               	bnz	clear_0
  1007                           
  1008                           ; Clear objects allocated to COMRAM (31 bytes)
  1009  00C93A  EE00  F059         	lfsr	0,__pbssCOMRAM
  1010  00C93E  0E1F               	movlw	31
  1011  00C940                     clear_1:
  1012  00C940  6AEE               	clrf	postinc0,c
  1013  00C942  06E8               	decf	wreg,f,c
  1014  00C944  E1FD               	bnz	clear_1
  1015  00C946                     end_of_initialization:
  1016                           	opt stack 0
  1017  00C946                     __end_of__initialization:
  1018                           	opt stack 0
  1019  00C946  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1020  00C948  6EF8               	movwf	tblptru,c
  1021  00C94A  0100               	movlb	0
  1022  00C94C  EF8D  F065         	goto	_main	;jump to C main() function
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	bssCOMRAM
  1033  000059                     __pbssCOMRAM:
  1034                           	opt stack 0
  1035  000059                     diet_press@F3141:
  1036                           	opt stack 0
  1037  000059                     	ds	8
  1038  000061                     food_press@F3126:
  1039                           	opt stack 0
  1040  000061                     	ds	8
  1041  000069                     standbyMode@LCDinterruptState:
  1042                           	opt stack 0
  1043  000069                     	ds	1
  1044  00006A                     _UARTinterruptState:
  1045                           	opt stack 0
  1046  00006A                     	ds	1
  1047  00006B                     	ds	1
  1048  00006C                     _uart:
  1049                           	opt stack 0
  1050  00006C                     	ds	12
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           postinc0	equ	0xFEE
  1056                           wreg	equ	0xFE8
  1057                           postdec1	equ	0xFE5
  1058                           fsr1l	equ	0xFE1
  1059                           
  1060                           	psect	dataCOMRAM
  1061  000078                     __pdataCOMRAM:
  1062                           	opt stack 0
  1063  000078                     _UART:
  1064                           	opt stack 0
  1065  000078                     	ds	2
  1066  00007A                     _columnRight:
  1067                           	opt stack 0
  1068  00007A                     	ds	1
  1069  00007B                     _columnLeft:
  1070                           	opt stack 0
  1071  00007B                     	ds	1
  1072  00007C                     _rowDown:
  1073                           	opt stack 0
  1074  00007C                     	ds	1
  1075  00007D                     _rowUp:
  1076                           	opt stack 0
  1077  00007D                     	ds	1
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           postdec1	equ	0xFE5
  1085                           fsr1l	equ	0xFE1
  1086                           
  1087                           	psect	bssBANK1
  1088  000100                     __pbssBANK1:
  1089                           	opt stack 0
  1090  000100                     standbyMode@F3167:
  1091                           	opt stack 0
  1092  000100                     	ds	16
  1093  000110                     standbyMode@F3165:
  1094                           	opt stack 0
  1095  000110                     	ds	16
  1096  000120                     standbyMode@F3163:
  1097                           	opt stack 0
  1098  000120                     	ds	16
  1099  000130                     standbyMode@F3161:
  1100                           	opt stack 0
  1101  000130                     	ds	16
  1102  000140                     standbyMode@F3159:
  1103                           	opt stack 0
  1104  000140                     	ds	16
  1105  000150                     _arr_dataRX:
  1106                           	opt stack 0
  1107  000150                     	ds	16
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	cstackBANK0
  1118  000080                     __pcstackBANK0:
  1119                           	opt stack 0
  1120  000080                     standbyMode@roundPieces:
  1121                           	opt stack 0
  1122                           
  1123                           ; 16 bytes @ 0x0
  1124  000080                     	ds	16
  1125  000090                     standbyMode@flatPieces:
  1126                           	opt stack 0
  1127                           
  1128                           ; 16 bytes @ 0x10
  1129  000090                     	ds	16
  1130  0000A0                     standbyMode@longPieces:
  1131                           	opt stack 0
  1132                           
  1133                           ; 16 bytes @ 0x20
  1134  0000A0                     	ds	16
  1135  0000B0                     standbyMode@dietType:
  1136                           	opt stack 0
  1137                           
  1138                           ; 16 bytes @ 0x30
  1139  0000B0                     	ds	16
  1140  0000C0                     standbyMode@drawerInformation:
  1141                           	opt stack 0
  1142                           
  1143                           ; 16 bytes @ 0x40
  1144  0000C0                     	ds	16
  1145  0000D0                     standbyMode@time:
  1146                           	opt stack 0
  1147                           
  1148                           ; 7 bytes @ 0x50
  1149  0000D0                     	ds	7
  1150  0000D7                     standbyMode@firstIteration:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x57
  1154  0000D7                     	ds	2
  1155  0000D9                     standbyMode@whichKey:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x59
  1159  0000D9                     	ds	2
  1160  0000DB                     standbyMode@keypress:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x5B
  1164  0000DB                     	ds	1
  1165  0000DC                     standbyMode@round:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x5C
  1169  0000DC                     	ds	2
  1170  0000DE                     standbyMode@flat:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x5E
  1174  0000DE                     	ds	2
  1175  0000E0                     standbyMode@lng:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x60
  1179  0000E0                     	ds	2
  1180  0000E2                     standbyMode@keypress1:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x62
  1184  0000E2                     	ds	1
  1185  0000E3                     standbyMode@validDrawer:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x63
  1189  0000E3                     	ds	2
  1190  0000E5                     standbyMode@zero:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x65
  1194  0000E5                     	ds	2
  1195  0000E7                     standbyMode@x:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x67
  1199  0000E7                     	ds	2
  1200  0000E9                     standbyMode@logNumber:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x69
  1204  0000E9                     	ds	1
  1205  0000EA                     standbyMode@n:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x6A
  1209  0000EA                     	ds	2
  1210  0000EC                     standbyMode@diet:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x6C
  1214  0000EC                     	ds	2
  1215  0000EE                     standbyMode@food:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x6E
  1219  0000EE                     	ds	2
  1220  0000F0                     standbyMode@drawer:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x70
  1224  0000F0                     	ds	2
  1225  0000F2                     standbyMode@drawerCount:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x72
  1229  0000F2                     	ds	2
  1230  0000F4                     standbyMode@i:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x74
  1234  0000F4                     	ds	2
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           
  1244                           	psect	cstackCOMRAM
  1245  000001                     __pcstackCOMRAM:
  1246                           	opt stack 0
  1247  000001                     ??_isdigit:
  1248  000001                     ??_I2C_Master_Wait:
  1249  000001                     ?_check_food:
  1250                           	opt stack 0
  1251  000001                     ?_getRound:
  1252                           	opt stack 0
  1253  000001                     ?_getFlat:
  1254                           	opt stack 0
  1255  000001                     ?_getLong:
  1256                           	opt stack 0
  1257  000001                     ?_verifyKeypress:
  1258                           	opt stack 0
  1259  000001                     ?_get_digits:
  1260                           	opt stack 0
  1261  000001                     ?_decode_drawer:
  1262                           	opt stack 0
  1263  000001                     ?___wmul:
  1264                           	opt stack 0
  1265  000001                     ?___lwdiv:
  1266                           	opt stack 0
  1267  000001                     ?___aldiv:
  1268                           	opt stack 0
  1269  000001                     ?___lldiv:
  1270                           	opt stack 0
  1271  000001                     lcdNibble@temp:
  1272                           	opt stack 0
  1273  000001                     writeEEPROM@data:
  1274                           	opt stack 0
  1275  000001                     readEEPROM@address:
  1276                           	opt stack 0
  1277  000001                     check_food@sum:
  1278                           	opt stack 0
  1279  000001                     getRound@code:
  1280                           	opt stack 0
  1281  000001                     getFlat@code:
  1282                           	opt stack 0
  1283  000001                     getLong@code:
  1284                           	opt stack 0
  1285  000001                     verifyKeypress@keypress:
  1286                           	opt stack 0
  1287  000001                     get_digits@sum:
  1288                           	opt stack 0
  1289  000001                     decode_drawer@drawer:
  1290                           	opt stack 0
  1291  000001                     ___wmul@multiplier:
  1292                           	opt stack 0
  1293  000001                     ___lwdiv@dividend:
  1294                           	opt stack 0
  1295  000001                     ___aldiv@dividend:
  1296                           	opt stack 0
  1297  000001                     ___lldiv@dividend:
  1298                           	opt stack 0
  1299                           
  1300                           ; 4 bytes @ 0x0
  1301  000001                     	ds	1
  1302  000002                     lcdNibble@data:
  1303                           	opt stack 0
  1304  000002                     writeEEPROM@address:
  1305                           	opt stack 0
  1306  000002                     I2C_Master_Read@ackBit:
  1307                           	opt stack 0
  1308  000002                     _isdigit$1349:
  1309                           	opt stack 0
  1310  000002                     I2C_Master_Write@byteToWrite:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x1
  1314  000002                     	ds	1
  1315  000003                     ??_shiftEEPROM:
  1316  000003                     ??_getRound:
  1317  000003                     ??_getFlat:
  1318  000003                     ??_getLong:
  1319  000003                     ??_verifyKeypress:
  1320  000003                     ??_get_digits:
  1321  000003                     ??_decode_drawer:
  1322  000003                     lcdInst@data:
  1323                           	opt stack 0
  1324  000003                     putch@data:
  1325                           	opt stack 0
  1326  000003                     I2C_Master_Read@receivedByte:
  1327                           	opt stack 0
  1328  000003                     isdigit@c:
  1329                           	opt stack 0
  1330  000003                     check_food@foodInput:
  1331                           	opt stack 0
  1332  000003                     initEEPROM@i:
  1333                           	opt stack 0
  1334  000003                     ___wmul@multiplicand:
  1335                           	opt stack 0
  1336  000003                     ___lwdiv@divisor:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x2
  1340  000003                     	ds	1
  1341  000004                     ??_initLCD:
  1342  000004                     shiftEEPROM@temp:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x3
  1346  000004                     	ds	1
  1347  000005                     ??_check_food:
  1348  000005                     verifyKeypress@logNumber:
  1349                           	opt stack 0
  1350  000005                     getRound@returnValue:
  1351                           	opt stack 0
  1352  000005                     getFlat@returnValue:
  1353                           	opt stack 0
  1354  000005                     getLong@returnValue:
  1355                           	opt stack 0
  1356  000005                     get_digits@count:
  1357                           	opt stack 0
  1358  000005                     decode_drawer@returnValue:
  1359                           	opt stack 0
  1360  000005                     ___wmul@product:
  1361                           	opt stack 0
  1362  000005                     ___lwdiv@quotient:
  1363                           	opt stack 0
  1364  000005                     ___aldiv@divisor:
  1365                           	opt stack 0
  1366  000005                     ___lldiv@divisor:
  1367                           	opt stack 0
  1368                           
  1369                           ; 4 bytes @ 0x4
  1370  000005                     	ds	1
  1371  000006                     verifyKeypress@returnVal:
  1372                           	opt stack 0
  1373  000006                     shiftEEPROM@i:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x5
  1377  000006                     	ds	1
  1378  000007                     ___lwdiv@counter:
  1379                           	opt stack 0
  1380  000007                     check_food@returnValue:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x6
  1384  000007                     	ds	1
  1385  000008                     ?___lwmod:
  1386                           	opt stack 0
  1387  000008                     verifyKeypress@i:
  1388                           	opt stack 0
  1389  000008                     ___lwmod@dividend:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x7
  1393  000008                     	ds	1
  1394  000009                     ___aldiv@counter:
  1395                           	opt stack 0
  1396  000009                     ___lldiv@quotient:
  1397                           	opt stack 0
  1398                           
  1399                           ; 4 bytes @ 0x8
  1400  000009                     	ds	1
  1401  00000A                     ___aldiv@sign:
  1402                           	opt stack 0
  1403  00000A                     ___lwmod@divisor:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x9
  1407  00000A                     	ds	1
  1408  00000B                     ___aldiv@quotient:
  1409                           	opt stack 0
  1410                           
  1411                           ; 4 bytes @ 0xA
  1412  00000B                     	ds	1
  1413  00000C                     ___lwmod@counter:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0xB
  1417  00000C                     	ds	1
  1418  00000D                     ?_printf:
  1419                           	opt stack 0
  1420  00000D                     ___lldiv@counter:
  1421                           	opt stack 0
  1422  00000D                     printf@f:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0xC
  1426  00000D                     	ds	1
  1427  00000E                     I2C_Master_Init@clockFreq:
  1428                           	opt stack 0
  1429                           
  1430                           ; 4 bytes @ 0xD
  1431  00000E                     	ds	1
  1432  00000F                     UART_Init@baud:
  1433                           	opt stack 0
  1434                           
  1435                           ; 4 bytes @ 0xE
  1436  00000F                     	ds	3
  1437  000012                     ??_I2C_Master_Init:
  1438                           
  1439                           ; 1 bytes @ 0x11
  1440  000012                     	ds	1
  1441  000013                     ??_UART_Init:
  1442                           
  1443                           ; 1 bytes @ 0x12
  1444  000013                     	ds	4
  1445  000017                     ??_printf:
  1446  000017                     
  1447                           ; 1 bytes @ 0x16
  1448  000017                     	ds	4
  1449  00001B                     printf@idx:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x1A
  1453  00001B                     	ds	1
  1454  00001C                     printf@ap:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x1B
  1458  00001C                     	ds	2
  1459  00001E                     printf@prec:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x1D
  1463  00001E                     	ds	1
  1464  00001F                     printf@val:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x1E
  1468  00001F                     	ds	2
  1469  000021                     printf@flag:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x20
  1473  000021                     	ds	1
  1474  000022                     printf@width:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x21
  1478  000022                     	ds	2
  1479  000024                     printf@c:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x23
  1483  000024                     	ds	1
  1484  000025                     ?_displayLogs:
  1485                           	opt stack 0
  1486  000025                     ?_food_press:
  1487                           	opt stack 0
  1488  000025                     ?_diet_press:
  1489                           	opt stack 0
  1490  000025                     ?_which_drawer:
  1491                           	opt stack 0
  1492  000025                     displayLogs@logNumber:
  1493                           	opt stack 0
  1494  000025                     food_press@dietSum:
  1495                           	opt stack 0
  1496  000025                     diet_press@drawer:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x24
  1500  000025                     	ds	2
  1501  000027                     ??_displayLogs:
  1502  000027                     ??_diet_press:
  1503  000027                     ??_which_drawer:
  1504  000027                     food_press@drawer:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x26
  1508  000027                     	ds	1
  1509  000028                     which_drawer@rand:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x27
  1513  000028                     	ds	1
  1514  000029                     ??_food_press:
  1515  000029                     displayLogs@year:
  1516                           	opt stack 0
  1517  000029                     diet_press@previous:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x28
  1521  000029                     	ds	1
  1522  00002A                     which_drawer@sum:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x29
  1526  00002A                     	ds	1
  1527  00002B                     displayLogs@month:
  1528                           	opt stack 0
  1529  00002B                     food_press@tally:
  1530                           	opt stack 0
  1531  00002B                     diet_press@i:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x2A
  1535  00002B                     	ds	1
  1536  00002C                     which_drawer@backCheck:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x2B
  1540  00002C                     	ds	1
  1541  00002D                     displayLogs@day:
  1542                           	opt stack 0
  1543  00002D                     food_press@backCheck:
  1544                           	opt stack 0
  1545  00002D                     diet_press@backCheck:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x2C
  1549  00002D                     	ds	1
  1550  00002E                     which_drawer@count:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x2D
  1554  00002E                     	ds	1
  1555  00002F                     displayLogs@roundPieces:
  1556                           	opt stack 0
  1557  00002F                     food_press@isValid:
  1558                           	opt stack 0
  1559  00002F                     diet_press@count:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x2E
  1563  00002F                     	ds	1
  1564  000030                     which_drawer@keypress:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x2F
  1568  000030                     	ds	1
  1569  000031                     displayLogs@flatPieces:
  1570                           	opt stack 0
  1571  000031                     food_press@count:
  1572                           	opt stack 0
  1573  000031                     diet_press@sum:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x30
  1577  000031                     	ds	2
  1578  000033                     food_press@keypress:
  1579                           	opt stack 0
  1580  000033                     diet_press@keypress:
  1581                           	opt stack 0
  1582  000033                     displayLogs@longPieces:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x32
  1586  000033                     	ds	1
  1587  000034                     food_press@foodTable:
  1588                           	opt stack 0
  1589  000034                     diet_press@dietTable:
  1590                           	opt stack 0
  1591                           
  1592                           ; 8 bytes @ 0x33
  1593  000034                     	ds	1
  1594  000035                     displayLogs@minutes:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x34
  1598  000035                     	ds	2
  1599  000037                     displayLogs@seconds:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x36
  1603  000037                     	ds	2
  1604  000039                     displayLogs@keypress3:
  1605                           	opt stack 0
  1606                           
  1607                           ; 1 bytes @ 0x38
  1608  000039                     	ds	1
  1609  00003A                     displayLogs@operationTime:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x39
  1613  00003A                     	ds	2
  1614  00003C                     displayLogs@markedDrawer1:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x3B
  1618  00003C                     	ds	2
  1619  00003E                     displayLogs@markedDrawer2:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x3D
  1623  00003E                     	ds	2
  1624  000040                     displayLogs@markedDrawer3:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x3F
  1628  000040                     	ds	2
  1629  000042                     displayLogs@markedDrawer4:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x41
  1633  000042                     	ds	2
  1634  000044                     displayLogs@n:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x43
  1638  000044                     	ds	2
  1639  000046                     ?_viewLogs:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x45
  1643  000046                     	ds	2
  1644  000048                     ??_viewLogs:
  1645                           
  1646                           ; 1 bytes @ 0x47
  1647  000048                     	ds	2
  1648  00004A                     viewLogs@checkLog:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x49
  1652  00004A                     	ds	2
  1653  00004C                     viewLogs@returnVal:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x4B
  1657  00004C                     	ds	2
  1658  00004E                     viewLogs@logView:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x4D
  1662  00004E                     	ds	2
  1663  000050                     viewLogs@logNumber:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x4F
  1667  000050                     	ds	1
  1668  000051                     viewLogs@keypress2:
  1669                           	opt stack 0
  1670                           
  1671                           ; 1 bytes @ 0x50
  1672  000051                     	ds	1
  1673  000052                     ?_standbyMode:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x51
  1677  000052                     	ds	2
  1678  000054                     ??_standbyMode:
  1679                           
  1680                           ; 1 bytes @ 0x53
  1681  000054                     	ds	2
  1682  000056                     ??_main:
  1683                           
  1684                           ; 1 bytes @ 0x55
  1685  000056                     	ds	1
  1686  000057                     main@operationMode:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x56
  1690  000057                     	ds	2
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700 ;;
  1701 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1702 ;;
  1703 ;; *************** function _main *****************
  1704 ;; Defined at:
  1705 ;;		line 14 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  operationMod    2   86[COMRAM] unsigned int 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        3 bytes
  1724 ;; Hardware stack levels required when called:    6
  1725 ;; This function calls:
  1726 ;;		_initLCD
  1727 ;;		_lcdInst
  1728 ;;		_mainOperation
  1729 ;;		_printf
  1730 ;;		_standbyMode
  1731 ;; This function is called by:
  1732 ;;		Startup code after reset
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text0
  1737  00CB1A                     __ptext0:
  1738                           	opt stack 0
  1739  00CB1A                     _main:
  1740                           	opt stack 25
  1741                           
  1742                           ;main.c: 20: LATA = 0x00;
  1743                           
  1744                           ;incstack = 0
  1745  00CB1A  0E00               	movlw	0
  1746  00CB1C  6E89               	movwf	3977,c	;volatile
  1747                           
  1748                           ;main.c: 21: LATB = 0x00;
  1749  00CB1E  0E00               	movlw	0
  1750  00CB20  6E8A               	movwf	3978,c	;volatile
  1751                           
  1752                           ;main.c: 22: LATC = 0x00;
  1753  00CB22  0E00               	movlw	0
  1754  00CB24  6E8B               	movwf	3979,c	;volatile
  1755                           
  1756                           ;main.c: 23: LATD = 0x00;
  1757  00CB26  0E00               	movlw	0
  1758  00CB28  6E8C               	movwf	3980,c	;volatile
  1759                           
  1760                           ;main.c: 24: LATE = 0x00;
  1761  00CB2A  0E00               	movlw	0
  1762  00CB2C  6E8D               	movwf	3981,c	;volatile
  1763                           
  1764                           ;main.c: 28: TRISA = 0xFF;
  1765  00CB2E  6892               	setf	3986,c	;volatile
  1766                           
  1767                           ;main.c: 29: TRISB = 0xFF;
  1768  00CB30  6893               	setf	3987,c	;volatile
  1769                           
  1770                           ;main.c: 30: TRISC = 0x00;
  1771  00CB32  0E00               	movlw	0
  1772  00CB34  6E94               	movwf	3988,c	;volatile
  1773                           
  1774                           ;main.c: 31: TRISD = 0x00;
  1775  00CB36  0E00               	movlw	0
  1776  00CB38  6E95               	movwf	3989,c	;volatile
  1777                           
  1778                           ;main.c: 32: TRISE = 0x00;
  1779  00CB3A  0E00               	movlw	0
  1780  00CB3C  6E96               	movwf	3990,c	;volatile
  1781                           
  1782                           ;main.c: 35: ADCON0 = 0x00;
  1783  00CB3E  0E00               	movlw	0
  1784  00CB40  6EC2               	movwf	4034,c	;volatile
  1785                           
  1786                           ;main.c: 36: ADCON1 = 0b00001111;
  1787  00CB42  0E0F               	movlw	15
  1788  00CB44  6EC1               	movwf	4033,c	;volatile
  1789                           
  1790                           ;main.c: 39: initLCD();
  1791  00CB46  ECA8  F064         	call	_initLCD	;wreg free
  1792                           
  1793                           ;main.c: 40: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1794  00CB4A  0E01               	movlw	1
  1795  00CB4C  ECE1  F063         	call	_lcdInst
  1796  00CB50  0EC3               	movlw	195
  1797  00CB52  6E56               	movwf	??_main& (0+255),c
  1798  00CB54  0ECD               	movlw	205
  1799  00CB56                     u7857:
  1800  00CB56  2EE8               	decfsz	wreg,f,c
  1801  00CB58  D7FE               	bra	u7857
  1802  00CB5A  2E56               	decfsz	??_main& (0+255),f,c
  1803  00CB5C  D7FC               	bra	u7857
  1804  00CB5E  F000               	nop	
  1805                           
  1806                           ;main.c: 41: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1807  00CB60  0E0C               	movlw	12
  1808  00CB62  ECE1  F063         	call	_lcdInst
  1809                           
  1810                           ;main.c: 42: printf("Standby");
  1811  00CB66  0EE9               	movlw	low STR_1
  1812  00CB68  6E0D               	movwf	printf@f,c
  1813  00CB6A  0EFF               	movlw	high STR_1
  1814  00CB6C  6E0E               	movwf	printf@f+1,c
  1815  00CB6E  ECC5  F06C         	call	_printf	;wreg free
  1816                           
  1817                           ;main.c: 44: unsigned int operationMode = 0;
  1818  00CB72  0E00               	movlw	0
  1819  00CB74  6E58               	movwf	main@operationMode+1,c
  1820  00CB76  0E00               	movlw	0
  1821  00CB78  6E57               	movwf	main@operationMode,c
  1822                           
  1823                           ;main.c: 89: operationMode = standbyMode();
  1824  00CB7A  EC5F  F078         	call	_standbyMode	;wreg free
  1825  00CB7E  C052  F057         	movff	?_standbyMode,main@operationMode
  1826  00CB82  C053  F058         	movff	?_standbyMode+1,main@operationMode+1
  1827                           
  1828                           ;main.c: 91: if (operationMode == 1){
  1829  00CB86  0457               	decf	main@operationMode,w,c
  1830  00CB88  1058               	iorwf	main@operationMode+1,w,c
  1831  00CB8A  A4D8               	btfss	status,2,c
  1832  00CB8C  EF00  F000         	goto	start
  1833                           
  1834                           ;main.c: 92: mainOperation();
  1835  00CB90  ECFF  F063         	call	_mainOperation	;wreg free
  1836                           
  1837                           ;main.c: 93: }
  1838                           ;main.c: 94: return;
  1839  00CB94  EF00  F000         	goto	start
  1840  00CB98                     __end_of_main:
  1841                           	opt stack 0
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           postinc0	equ	0xFEE
  1847                           wreg	equ	0xFE8
  1848                           postdec1	equ	0xFE5
  1849                           fsr1l	equ	0xFE1
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _standbyMode *****************
  1853 ;; Defined at:
  1854 ;;		line 1483 in file "standbyMode.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  keypress1       1   98[BANK0 ] unsigned char 
  1859 ;;  whichKey        2   89[BANK0 ] unsigned int 
  1860 ;;  drawerInform   16   64[BANK0 ] unsigned int [8]
  1861 ;;  dietType       16   48[BANK0 ] unsigned int [8]
  1862 ;;  longPieces     16   32[BANK0 ] unsigned int [8]
  1863 ;;  flatPieces     16   16[BANK0 ] unsigned int [8]
  1864 ;;  roundPieces    16    0[BANK0 ] unsigned int [8]
  1865 ;;  time            7   80[BANK0 ] unsigned char [7]
  1866 ;;  i               2  116[BANK0 ] unsigned int 
  1867 ;;  drawerCount     2  114[BANK0 ] unsigned int 
  1868 ;;  drawer          2  112[BANK0 ] unsigned int 
  1869 ;;  food            2  110[BANK0 ] unsigned int 
  1870 ;;  diet            2  108[BANK0 ] unsigned int 
  1871 ;;  n               2  106[BANK0 ] unsigned int 
  1872 ;;  x               2  103[BANK0 ] unsigned int 
  1873 ;;  zero            2  101[BANK0 ] unsigned int 
  1874 ;;  validDrawer     2   99[BANK0 ] unsigned int 
  1875 ;;  lng             2   96[BANK0 ] unsigned int 
  1876 ;;  flat            2   94[BANK0 ] unsigned int 
  1877 ;;  round           2   92[BANK0 ] unsigned int 
  1878 ;;  firstIterati    2   87[BANK0 ] unsigned int 
  1879 ;;  logNumber       1  105[BANK0 ] unsigned char 
  1880 ;;  keypress        1   91[BANK0 ] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  2   81[COMRAM] unsigned int 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Locals:         0     118       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Totals:         4     118       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;Total ram usage:      122 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    5
  1897 ;; This function calls:
  1898 ;;		_I2C_Master_Init
  1899 ;;		_I2C_Master_Read
  1900 ;;		_I2C_Master_Start
  1901 ;;		_I2C_Master_Stop
  1902 ;;		_I2C_Master_Write
  1903 ;;		___wmul
  1904 ;;		_diet_press
  1905 ;;		_food_press
  1906 ;;		_getFlat
  1907 ;;		_getLong
  1908 ;;		_getRound
  1909 ;;		_initEEPROM
  1910 ;;		_lcdInst
  1911 ;;		_printf
  1912 ;;		_readEEPROM
  1913 ;;		_shiftEEPROM
  1914 ;;		_viewLogs
  1915 ;;		_which_drawer
  1916 ;;		_writeEEPROM
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text1
  1923  00F0BE                     __ptext1:
  1924                           	opt stack 0
  1925  00F0BE                     _standbyMode:
  1926                           	opt stack 25
  1927                           
  1928                           ;standbyMode.c: 1484: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  1929                           
  1930                           ;incstack = 0
  1931  00F0BE  EE21  F040         	lfsr	2,standbyMode@F3159
  1932  00F0C2  EE10  F0C0         	lfsr	1,standbyMode@drawerInformation
  1933  00F0C6  0E0F               	movlw	15
  1934  00F0C8                     u7261:
  1935  00F0C8  CFDB FFE3          	movff	plusw2,plusw1
  1936  00F0CC  06E8               	decf	wreg,f,c
  1937  00F0CE  E2FC               	bc	u7261
  1938                           
  1939                           ;standbyMode.c: 1485: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  1940  00F0D0  EE21  F030         	lfsr	2,standbyMode@F3161
  1941  00F0D4  EE10  F080         	lfsr	1,standbyMode@roundPieces
  1942  00F0D8  0E0F               	movlw	15
  1943  00F0DA                     u7271:
  1944  00F0DA  CFDB FFE3          	movff	plusw2,plusw1
  1945  00F0DE  06E8               	decf	wreg,f,c
  1946  00F0E0  E2FC               	bc	u7271
  1947                           
  1948                           ;standbyMode.c: 1486: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  1949  00F0E2  EE21  F020         	lfsr	2,standbyMode@F3163
  1950  00F0E6  EE10  F090         	lfsr	1,standbyMode@flatPieces
  1951  00F0EA  0E0F               	movlw	15
  1952  00F0EC                     u7281:
  1953  00F0EC  CFDB FFE3          	movff	plusw2,plusw1
  1954  00F0F0  06E8               	decf	wreg,f,c
  1955  00F0F2  E2FC               	bc	u7281
  1956                           
  1957                           ;standbyMode.c: 1487: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  1958  00F0F4  EE21  F010         	lfsr	2,standbyMode@F3165
  1959  00F0F8  EE10  F0A0         	lfsr	1,standbyMode@longPieces
  1960  00F0FC  0E0F               	movlw	15
  1961  00F0FE                     u7291:
  1962  00F0FE  CFDB FFE3          	movff	plusw2,plusw1
  1963  00F102  06E8               	decf	wreg,f,c
  1964  00F104  E2FC               	bc	u7291
  1965                           
  1966                           ;standbyMode.c: 1488: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  1967  00F106  EE21  F000         	lfsr	2,standbyMode@F3167
  1968  00F10A  EE10  F0B0         	lfsr	1,standbyMode@dietType
  1969  00F10E  0E0F               	movlw	15
  1970  00F110                     u7301:
  1971  00F110  CFDB FFE3          	movff	plusw2,plusw1
  1972  00F114  06E8               	decf	wreg,f,c
  1973  00F116  E2FC               	bc	u7301
  1974                           
  1975                           ;standbyMode.c: 1489: unsigned int drawerCount = 0;
  1976  00F118  0E00               	movlw	0
  1977  00F11A  0100               	movlb	0	; () banked
  1978  00F11C  6FF3               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  1979  00F11E  0E00               	movlw	0
  1980  00F120  6FF2               	movwf	standbyMode@drawerCount& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;standbyMode.c: 1490: unsigned int i = 0;
  1984  00F122  0E00               	movlw	0
  1985  00F124  6FF5               	movwf	(standbyMode@i+1)& (0+255),b
  1986  00F126  0E00               	movlw	0
  1987  00F128  6FF4               	movwf	standbyMode@i& (0+255),b
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;standbyMode.c: 1491: unsigned int validDrawer = 0;
  1991  00F12A  0E00               	movlw	0
  1992  00F12C  6FE4               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  1993  00F12E  0E00               	movlw	0
  1994  00F130  6FE3               	movwf	standbyMode@validDrawer& (0+255),b
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;standbyMode.c: 1492: unsigned int zero = 0;
  1998  00F132  0E00               	movlw	0
  1999  00F134  6FE6               	movwf	(standbyMode@zero+1)& (0+255),b
  2000  00F136  0E00               	movlw	0
  2001  00F138  6FE5               	movwf	standbyMode@zero& (0+255),b
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;standbyMode.c: 1493: unsigned int firstIteration = 0;
  2005  00F13A  0E00               	movlw	0
  2006  00F13C  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2007  00F13E  0E00               	movlw	0
  2008  00F140  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;standbyMode.c: 1494: unsigned int drawer = 0;
  2012  00F142  0E00               	movlw	0
  2013  00F144  6FF1               	movwf	(standbyMode@drawer+1)& (0+255),b
  2014  00F146  0E00               	movlw	0
  2015  00F148  6FF0               	movwf	standbyMode@drawer& (0+255),b
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;standbyMode.c: 1495: unsigned int diet = 0;
  2019  00F14A  0E00               	movlw	0
  2020  00F14C  6FED               	movwf	(standbyMode@diet+1)& (0+255),b
  2021  00F14E  0E00               	movlw	0
  2022  00F150  6FEC               	movwf	standbyMode@diet& (0+255),b
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;standbyMode.c: 1496: unsigned int food = 0;
  2026  00F152  0E00               	movlw	0
  2027  00F154  6FEF               	movwf	(standbyMode@food+1)& (0+255),b
  2028  00F156  0E00               	movlw	0
  2029  00F158  6FEE               	movwf	standbyMode@food& (0+255),b
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;standbyMode.c: 1497: unsigned char logNumber = 0;
  2033  00F15A  0E00               	movlw	0
  2034  00F15C  6FE9               	movwf	standbyMode@logNumber& (0+255),b
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;standbyMode.c: 1498: unsigned int n = 0;
  2038  00F15E  0E00               	movlw	0
  2039  00F160  6FEB               	movwf	(standbyMode@n+1)& (0+255),b
  2040  00F162  0E00               	movlw	0
  2041  00F164  6FEA               	movwf	standbyMode@n& (0+255),b
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;standbyMode.c: 1499: unsigned int round = 0;
  2045  00F166  0E00               	movlw	0
  2046  00F168  6FDD               	movwf	(standbyMode@round+1)& (0+255),b
  2047  00F16A  0E00               	movlw	0
  2048  00F16C  6FDC               	movwf	standbyMode@round& (0+255),b
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;standbyMode.c: 1500: unsigned int flat = 0;
  2052  00F16E  0E00               	movlw	0
  2053  00F170  6FDF               	movwf	(standbyMode@flat+1)& (0+255),b
  2054  00F172  0E00               	movlw	0
  2055  00F174  6FDE               	movwf	standbyMode@flat& (0+255),b
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;standbyMode.c: 1501: unsigned int lng = 0;
  2059  00F176  0E00               	movlw	0
  2060  00F178  6FE1               	movwf	(standbyMode@lng+1)& (0+255),b
  2061  00F17A  0E00               	movlw	0
  2062  00F17C  6FE0               	movwf	standbyMode@lng& (0+255),b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;standbyMode.c: 1503: unsigned char time[7];
  2066                           ;standbyMode.c: 1504: unsigned int x = 0;
  2067  00F17E  0E00               	movlw	0
  2068  00F180  6FE8               	movwf	(standbyMode@x+1)& (0+255),b
  2069  00F182  0E00               	movlw	0
  2070  00F184  6FE7               	movwf	standbyMode@x& (0+255),b
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;standbyMode.c: 1505: initEEPROM();
  2074  00F186  EC3E  F064         	call	_initEEPROM	;wreg free
  2075                           
  2076                           ;standbyMode.c: 1508: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2077  00F18A  0E01               	movlw	1
  2078  00F18C  ECE1  F063         	call	_lcdInst
  2079  00F190  0EC3               	movlw	195
  2080  00F192  6E54               	movwf	??_standbyMode& (0+255),c
  2081  00F194  0ECD               	movlw	205
  2082  00F196                     u7867:
  2083  00F196  2EE8               	decfsz	wreg,f,c
  2084  00F198  D7FE               	bra	u7867
  2085  00F19A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2086  00F19C  D7FC               	bra	u7867
  2087  00F19E  F000               	nop	
  2088                           
  2089                           ;standbyMode.c: 1509: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2090  00F1A0  0E0C               	movlw	12
  2091  00F1A2  ECE1  F063         	call	_lcdInst
  2092                           
  2093                           ;standbyMode.c: 1510: printf("Standby");
  2094  00F1A6  0EE9               	movlw	low STR_1
  2095  00F1A8  6E0D               	movwf	printf@f,c
  2096  00F1AA  0EFF               	movlw	high STR_1
  2097  00F1AC  6E0E               	movwf	printf@f+1,c
  2098  00F1AE  ECC5  F06C         	call	_printf	;wreg free
  2099                           
  2100                           ;standbyMode.c: 1511: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2101  00F1B2  0E66               	movlw	102
  2102  00F1B4  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2103  00F1B6  0E76               	movlw	118
  2104  00F1B8  6E54               	movwf	??_standbyMode& (0+255),c
  2105  00F1BA  0EC1               	movlw	193
  2106  00F1BC                     u7877:
  2107  00F1BC  2EE8               	decfsz	wreg,f,c
  2108  00F1BE  D7FE               	bra	u7877
  2109  00F1C0  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2110  00F1C2  D7FC               	bra	u7877
  2111  00F1C4  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2112  00F1C6  D7FA               	bra	u7877
  2113  00F1C8  F000               	nop	
  2114                           
  2115                           ;standbyMode.c: 1512: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2116  00F1CA  0E01               	movlw	1
  2117  00F1CC  ECE1  F063         	call	_lcdInst
  2118  00F1D0  0EC3               	movlw	195
  2119  00F1D2  6E54               	movwf	??_standbyMode& (0+255),c
  2120  00F1D4  0ECD               	movlw	205
  2121  00F1D6                     u7887:
  2122  00F1D6  2EE8               	decfsz	wreg,f,c
  2123  00F1D8  D7FE               	bra	u7887
  2124  00F1DA  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2125  00F1DC  D7FC               	bra	u7887
  2126  00F1DE  F000               	nop	
  2127                           
  2128                           ;standbyMode.c: 1513: printf("Press any key to");
  2129  00F1E0  0ECB               	movlw	low STR_6
  2130  00F1E2  6E0D               	movwf	printf@f,c
  2131  00F1E4  0EFD               	movlw	high STR_6
  2132  00F1E6  6E0E               	movwf	printf@f+1,c
  2133  00F1E8  ECC5  F06C         	call	_printf	;wreg free
  2134                           
  2135                           ;standbyMode.c: 1514: lcdInst(0xC0);;
  2136  00F1EC  0EC0               	movlw	192
  2137  00F1EE  ECE1  F063         	call	_lcdInst
  2138                           
  2139                           ;standbyMode.c: 1515: printf("begin operation.");
  2140  00F1F2  0E98               	movlw	low STR_43
  2141  00F1F4  6E0D               	movwf	printf@f,c
  2142  00F1F6  0EFD               	movlw	high STR_43
  2143  00F1F8  6E0E               	movwf	printf@f+1,c
  2144  00F1FA  ECC5  F06C         	call	_printf	;wreg free
  2145  00F1FE                     
  2146                           ;standbyMode.c: 1518: continue;
  2147  00F1FE  A281               	btfss	3969,1,c	;volatile
  2148  00F200  D7FE               	goto	l648
  2149                           
  2150                           ;standbyMode.c: 1519: }
  2151                           ;standbyMode.c: 1522: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2152  00F202  0E01               	movlw	1
  2153  00F204  ECE1  F063         	call	_lcdInst
  2154  00F208  0EC3               	movlw	195
  2155  00F20A  6E54               	movwf	??_standbyMode& (0+255),c
  2156  00F20C  0ECD               	movlw	205
  2157  00F20E                     u7897:
  2158  00F20E  2EE8               	decfsz	wreg,f,c
  2159  00F210  D7FE               	bra	u7897
  2160  00F212  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2161  00F214  D7FC               	bra	u7897
  2162  00F216  F000               	nop	
  2163                           
  2164                           ;standbyMode.c: 1523: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2165  00F218  0E0C               	movlw	12
  2166  00F21A  ECE1  F063         	call	_lcdInst
  2167                           
  2168                           ;standbyMode.c: 1524: printf("Welcome to your");
  2169  00F21E  0E5D               	movlw	low STR_44
  2170  00F220  6E0D               	movwf	printf@f,c
  2171  00F222  0EFE               	movlw	high STR_44
  2172  00F224  6E0E               	movwf	printf@f+1,c
  2173  00F226  ECC5  F06C         	call	_printf	;wreg free
  2174                           
  2175                           ;standbyMode.c: 1525: lcdInst(0xC0);;
  2176  00F22A  0EC0               	movlw	192
  2177  00F22C  ECE1  F063         	call	_lcdInst
  2178                           
  2179                           ;standbyMode.c: 1526: printf("cabinet sorter!");
  2180  00F230  0EED               	movlw	low STR_45
  2181  00F232  6E0D               	movwf	printf@f,c
  2182  00F234  0EFD               	movlw	high STR_45
  2183  00F236  6E0E               	movwf	printf@f+1,c
  2184  00F238  ECC5  F06C         	call	_printf	;wreg free
  2185                           
  2186                           ;standbyMode.c: 1527: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2187  00F23C  0E33               	movlw	51
  2188  00F23E  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2189  00F240  0EBB               	movlw	187
  2190  00F242  6E54               	movwf	??_standbyMode& (0+255),c
  2191  00F244  0EE0               	movlw	224
  2192  00F246                     u7907:
  2193  00F246  2EE8               	decfsz	wreg,f,c
  2194  00F248  D7FE               	bra	u7907
  2195  00F24A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2196  00F24C  D7FC               	bra	u7907
  2197  00F24E  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2198  00F250  D7FA               	bra	u7907
  2199                           
  2200                           ;standbyMode.c: 1530: writeEEPROM(250, 2);
  2201  00F252  0E02               	movlw	2
  2202  00F254  6E01               	movwf	writeEEPROM@data,c
  2203  00F256  0EFA               	movlw	250
  2204  00F258  EC51  F064         	call	_writeEEPROM
  2205                           
  2206                           ;standbyMode.c: 1531: writeEEPROM(0, 18);
  2207  00F25C  0E12               	movlw	18
  2208  00F25E  6E01               	movwf	writeEEPROM@data,c
  2209  00F260  0E00               	movlw	0
  2210  00F262  EC51  F064         	call	_writeEEPROM
  2211                           
  2212                           ;standbyMode.c: 1532: writeEEPROM(1, 2);
  2213  00F266  0E02               	movlw	2
  2214  00F268  6E01               	movwf	writeEEPROM@data,c
  2215  00F26A  0E01               	movlw	1
  2216  00F26C  EC51  F064         	call	_writeEEPROM
  2217                           
  2218                           ;standbyMode.c: 1533: writeEEPROM(2, 28);
  2219  00F270  0E1C               	movlw	28
  2220  00F272  6E01               	movwf	writeEEPROM@data,c
  2221  00F274  0E02               	movlw	2
  2222  00F276  EC51  F064         	call	_writeEEPROM
  2223                           
  2224                           ;standbyMode.c: 1534: writeEEPROM(3, 91);
  2225  00F27A  0E5B               	movlw	91
  2226  00F27C  6E01               	movwf	writeEEPROM@data,c
  2227  00F27E  0E03               	movlw	3
  2228  00F280  EC51  F064         	call	_writeEEPROM
  2229                           
  2230                           ;standbyMode.c: 1535: writeEEPROM(4, 3);
  2231  00F284  0E03               	movlw	3
  2232  00F286  6E01               	movwf	writeEEPROM@data,c
  2233  00F288  0E04               	movlw	4
  2234  00F28A  EC51  F064         	call	_writeEEPROM
  2235                           
  2236                           ;standbyMode.c: 1536: writeEEPROM(5, 15);
  2237  00F28E  0E0F               	movlw	15
  2238  00F290  6E01               	movwf	writeEEPROM@data,c
  2239  00F292  0E05               	movlw	5
  2240  00F294  EC51  F064         	call	_writeEEPROM
  2241                           
  2242                           ;standbyMode.c: 1537: writeEEPROM(6, 8);
  2243  00F298  0E08               	movlw	8
  2244  00F29A  6E01               	movwf	writeEEPROM@data,c
  2245  00F29C  0E06               	movlw	6
  2246  00F29E  EC51  F064         	call	_writeEEPROM
  2247                           
  2248                           ;standbyMode.c: 1538: writeEEPROM(7, 12);
  2249  00F2A2  0E0C               	movlw	12
  2250  00F2A4  6E01               	movwf	writeEEPROM@data,c
  2251  00F2A6  0E07               	movlw	7
  2252  00F2A8  EC51  F064         	call	_writeEEPROM
  2253                           
  2254                           ;standbyMode.c: 1539: writeEEPROM(8, 1);
  2255  00F2AC  0E01               	movlw	1
  2256  00F2AE  6E01               	movwf	writeEEPROM@data,c
  2257  00F2B0  0E08               	movlw	8
  2258  00F2B2  EC51  F064         	call	_writeEEPROM
  2259                           
  2260                           ;standbyMode.c: 1540: writeEEPROM(9, 13);
  2261  00F2B6  0E0D               	movlw	13
  2262  00F2B8  6E01               	movwf	writeEEPROM@data,c
  2263  00F2BA  0E09               	movlw	9
  2264  00F2BC  EC51  F064         	call	_writeEEPROM
  2265                           
  2266                           ;standbyMode.c: 1541: writeEEPROM(10, 0);
  2267  00F2C0  0E00               	movlw	0
  2268  00F2C2  6E01               	movwf	writeEEPROM@data,c
  2269  00F2C4  0E0A               	movlw	10
  2270  00F2C6  EC51  F064         	call	_writeEEPROM
  2271                           
  2272                           ;standbyMode.c: 1542: shiftEEPROM();
  2273  00F2CA  EC4E  F066         	call	_shiftEEPROM	;wreg free
  2274                           
  2275                           ;standbyMode.c: 1551: I2C_Master_Init(100000);
  2276  00F2CE  0EA0               	movlw	160
  2277  00F2D0  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2278  00F2D2  0E86               	movlw	134
  2279  00F2D4  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2280  00F2D6  0E01               	movlw	1
  2281  00F2D8  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2282  00F2DA  0E00               	movlw	0
  2283  00F2DC  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2284  00F2DE  EC20  F065         	call	_I2C_Master_Init	;wreg free
  2285                           
  2286                           ;standbyMode.c: 1552: I2C_Master_Start();
  2287  00F2E2  ECCB  F063         	call	_I2C_Master_Start	;wreg free
  2288                           
  2289                           ;standbyMode.c: 1553: I2C_Master_Write(0b11010001);
  2290  00F2E6  0E00               	movlw	0
  2291  00F2E8  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2292  00F2EA  0ED1               	movlw	209
  2293  00F2EC  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2294  00F2EE  ECD3  F063         	call	_I2C_Master_Write	;wreg free
  2295                           
  2296                           ;standbyMode.c: 1554: for(x = 0; x < 6; x++){
  2297  00F2F2  0E00               	movlw	0
  2298  00F2F4  0100               	movlb	0	; () banked
  2299  00F2F6  6FE8               	movwf	(standbyMode@x+1)& (0+255),b
  2300  00F2F8  0E00               	movlw	0
  2301  00F2FA  6FE7               	movwf	standbyMode@x& (0+255),b
  2302  00F2FC                     l6242:
  2303                           
  2304                           ; BSR set to: 0
  2305  00F2FC  51E8               	movf	(standbyMode@x+1)& (0+255),w,b
  2306  00F2FE  E112               	bnz	l6252
  2307  00F300  0E06               	movlw	6
  2308  00F302  5DE7               	subwf	standbyMode@x& (0+255),w,b
  2309  00F304  B0D8               	btfsc	status,0,c
  2310  00F306  D00E               	goto	u7330
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;standbyMode.c: 1555: time[x] = I2C_Master_Read(0);
  2314                           
  2315                           ; BSR set to: 0
  2316                           
  2317                           ; BSR set to: 0
  2318  00F308  0ED0               	movlw	low standbyMode@time
  2319  00F30A  25E7               	addwf	standbyMode@x& (0+255),w,b
  2320  00F30C  6ED9               	movwf	fsr2l,c
  2321  00F30E  0E00               	movlw	high standbyMode@time
  2322  00F310  21E8               	addwfc	(standbyMode@x+1)& (0+255),w,b
  2323  00F312  6EDA               	movwf	fsr2h,c
  2324  00F314  0E00               	movlw	0
  2325  00F316  EC19  F064         	call	_I2C_Master_Read
  2326  00F31A  6EDF               	movwf	indf2,c
  2327  00F31C  0100               	movlb	0	; () banked
  2328  00F31E  4BE7               	infsnz	standbyMode@x& (0+255),f,b
  2329  00F320  2BE8               	incf	(standbyMode@x+1)& (0+255),f,b
  2330  00F322  D7EC               	goto	l6242
  2331  00F324                     u7330:
  2332  00F324                     l6252:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;standbyMode.c: 1556: }
  2336                           ;standbyMode.c: 1557: time[6] = I2C_Master_Read(1);
  2337  00F324  0E01               	movlw	1
  2338  00F326  EC19  F064         	call	_I2C_Master_Read
  2339  00F32A  0100               	movlb	0	; () banked
  2340  00F32C  6FD6               	movwf	(standbyMode@time+6)& (0+255),b
  2341                           
  2342                           ;standbyMode.c: 1558: I2C_Master_Stop();
  2343  00F32E  ECCF  F063         	call	_I2C_Master_Stop	;wreg free
  2344                           
  2345                           ;standbyMode.c: 1560: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2346  00F332  0E01               	movlw	1
  2347  00F334  ECE1  F063         	call	_lcdInst
  2348  00F338  0EC3               	movlw	195
  2349  00F33A  6E54               	movwf	??_standbyMode& (0+255),c
  2350  00F33C  0ECD               	movlw	205
  2351  00F33E                     u7917:
  2352  00F33E  2EE8               	decfsz	wreg,f,c
  2353  00F340  D7FE               	bra	u7917
  2354  00F342  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2355  00F344  D7FC               	bra	u7917
  2356  00F346  F000               	nop	
  2357                           
  2358                           ;standbyMode.c: 1561: printf("Current date");
  2359  00F348  0E70               	movlw	low STR_46
  2360  00F34A  6E0D               	movwf	printf@f,c
  2361  00F34C  0EFF               	movlw	high STR_46
  2362  00F34E  6E0E               	movwf	printf@f+1,c
  2363  00F350  ECC5  F06C         	call	_printf	;wreg free
  2364                           
  2365                           ;standbyMode.c: 1562: lcdInst(0xC0);;
  2366  00F354  0EC0               	movlw	192
  2367  00F356  ECE1  F063         	call	_lcdInst
  2368                           
  2369                           ;standbyMode.c: 1563: printf("and time:");
  2370  00F35A  0EB4               	movlw	low STR_47
  2371  00F35C  6E0D               	movwf	printf@f,c
  2372  00F35E  0EFF               	movlw	high STR_47
  2373  00F360  6E0E               	movwf	printf@f+1,c
  2374  00F362  ECC5  F06C         	call	_printf	;wreg free
  2375                           
  2376                           ;standbyMode.c: 1564: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2377  00F366  0E66               	movlw	102
  2378  00F368  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2379  00F36A  0E76               	movlw	118
  2380  00F36C  6E54               	movwf	??_standbyMode& (0+255),c
  2381  00F36E  0EC1               	movlw	193
  2382  00F370                     u7927:
  2383  00F370  2EE8               	decfsz	wreg,f,c
  2384  00F372  D7FE               	bra	u7927
  2385  00F374  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2386  00F376  D7FC               	bra	u7927
  2387  00F378  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2388  00F37A  D7FA               	bra	u7927
  2389  00F37C  F000               	nop	
  2390                           
  2391                           ;standbyMode.c: 1566: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2392  00F37E  0E01               	movlw	1
  2393  00F380  ECE1  F063         	call	_lcdInst
  2394  00F384  0EC3               	movlw	195
  2395  00F386  6E54               	movwf	??_standbyMode& (0+255),c
  2396  00F388  0ECD               	movlw	205
  2397  00F38A                     u7937:
  2398  00F38A  2EE8               	decfsz	wreg,f,c
  2399  00F38C  D7FE               	bra	u7937
  2400  00F38E  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2401  00F390  D7FC               	bra	u7937
  2402  00F392  F000               	nop	
  2403                           
  2404                           ;standbyMode.c: 1567: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2405  00F394  0ED7               	movlw	low STR_48
  2406  00F396  6E0D               	movwf	printf@f,c
  2407  00F398  0EFE               	movlw	high STR_48
  2408  00F39A  6E0E               	movwf	printf@f+1,c
  2409  00F39C  C0D6  F00F         	movff	standbyMode@time+6,?_printf+2
  2410  00F3A0  6A10               	clrf	?_printf+3,c
  2411  00F3A2  C0D5  F011         	movff	standbyMode@time+5,?_printf+4
  2412  00F3A6  6A12               	clrf	?_printf+5,c
  2413  00F3A8  C0D4  F013         	movff	standbyMode@time+4,?_printf+6
  2414  00F3AC  6A14               	clrf	?_printf+7,c
  2415  00F3AE  ECC5  F06C         	call	_printf	;wreg free
  2416                           
  2417                           ;standbyMode.c: 1568: lcdInst(0xC0);;
  2418  00F3B2  0EC0               	movlw	192
  2419  00F3B4  ECE1  F063         	call	_lcdInst
  2420                           
  2421                           ;standbyMode.c: 1569: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2422  00F3B8  0EE6               	movlw	low STR_49
  2423  00F3BA  6E0D               	movwf	printf@f,c
  2424  00F3BC  0EFE               	movlw	high STR_49
  2425  00F3BE  6E0E               	movwf	printf@f+1,c
  2426  00F3C0  C0D2  F00F         	movff	standbyMode@time+2,?_printf+2
  2427  00F3C4  6A10               	clrf	?_printf+3,c
  2428  00F3C6  C0D1  F011         	movff	standbyMode@time+1,?_printf+4
  2429  00F3CA  6A12               	clrf	?_printf+5,c
  2430  00F3CC  C0D0  F013         	movff	standbyMode@time,?_printf+6
  2431  00F3D0  6A14               	clrf	?_printf+7,c
  2432  00F3D2  ECC5  F06C         	call	_printf	;wreg free
  2433                           
  2434                           ;standbyMode.c: 1570: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2435  00F3D6  0E66               	movlw	102
  2436  00F3D8  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2437  00F3DA  0E76               	movlw	118
  2438  00F3DC  6E54               	movwf	??_standbyMode& (0+255),c
  2439  00F3DE  0EC1               	movlw	193
  2440  00F3E0                     u7947:
  2441  00F3E0  2EE8               	decfsz	wreg,f,c
  2442  00F3E2  D7FE               	bra	u7947
  2443  00F3E4  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2444  00F3E6  D7FC               	bra	u7947
  2445  00F3E8  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2446  00F3EA  D7FA               	bra	u7947
  2447  00F3EC  F000               	nop	
  2448                           
  2449                           ;standbyMode.c: 1573: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2450  00F3EE  0E01               	movlw	1
  2451  00F3F0  ECE1  F063         	call	_lcdInst
  2452  00F3F4  0EC3               	movlw	195
  2453  00F3F6  6E54               	movwf	??_standbyMode& (0+255),c
  2454  00F3F8  0ECD               	movlw	205
  2455  00F3FA                     u7957:
  2456  00F3FA  2EE8               	decfsz	wreg,f,c
  2457  00F3FC  D7FE               	bra	u7957
  2458  00F3FE  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2459  00F400  D7FC               	bra	u7957
  2460  00F402  F000               	nop	
  2461                           
  2462                           ;standbyMode.c: 1574: printf("Press # to");
  2463  00F404  0EA9               	movlw	low STR_50
  2464  00F406  6E0D               	movwf	printf@f,c
  2465  00F408  0EFF               	movlw	high STR_50
  2466  00F40A  6E0E               	movwf	printf@f+1,c
  2467  00F40C  ECC5  F06C         	call	_printf	;wreg free
  2468                           
  2469                           ;standbyMode.c: 1575: lcdInst(0xC0);;
  2470  00F410  0EC0               	movlw	192
  2471  00F412  ECE1  F063         	call	_lcdInst
  2472                           
  2473                           ;standbyMode.c: 1576: printf("view logs,");
  2474  00F416  0E7D               	movlw	low STR_51
  2475  00F418  6E0D               	movwf	printf@f,c
  2476  00F41A  0EFF               	movlw	high STR_51
  2477  00F41C  6E0E               	movwf	printf@f+1,c
  2478  00F41E  ECC5  F06C         	call	_printf	;wreg free
  2479                           
  2480                           ;standbyMode.c: 1577: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2481  00F422  0E66               	movlw	102
  2482  00F424  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2483  00F426  0E76               	movlw	118
  2484  00F428  6E54               	movwf	??_standbyMode& (0+255),c
  2485  00F42A  0EC1               	movlw	193
  2486  00F42C                     u7967:
  2487  00F42C  2EE8               	decfsz	wreg,f,c
  2488  00F42E  D7FE               	bra	u7967
  2489  00F430  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2490  00F432  D7FC               	bra	u7967
  2491  00F434  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2492  00F436  D7FA               	bra	u7967
  2493  00F438  F000               	nop	
  2494                           
  2495                           ;standbyMode.c: 1578: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2496  00F43A  0E01               	movlw	1
  2497  00F43C  ECE1  F063         	call	_lcdInst
  2498  00F440  0EC3               	movlw	195
  2499  00F442  6E54               	movwf	??_standbyMode& (0+255),c
  2500  00F444  0ECD               	movlw	205
  2501  00F446                     u7977:
  2502  00F446  2EE8               	decfsz	wreg,f,c
  2503  00F448  D7FE               	bra	u7977
  2504  00F44A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2505  00F44C  D7FC               	bra	u7977
  2506  00F44E  F000               	nop	
  2507                           
  2508                           ;standbyMode.c: 1579: printf("or press D to");
  2509  00F450  0E2E               	movlw	low STR_52
  2510  00F452  6E0D               	movwf	printf@f,c
  2511  00F454  0EFF               	movlw	high STR_52
  2512  00F456  6E0E               	movwf	printf@f+1,c
  2513  00F458  ECC5  F06C         	call	_printf	;wreg free
  2514                           
  2515                           ;standbyMode.c: 1580: lcdInst(0xC0);;
  2516  00F45C  0EC0               	movlw	192
  2517  00F45E  ECE1  F063         	call	_lcdInst
  2518                           
  2519                           ;standbyMode.c: 1581: printf("begin operation.");
  2520  00F462  0E98               	movlw	low STR_43
  2521  00F464  6E0D               	movwf	printf@f,c
  2522  00F466  0EFD               	movlw	high STR_43
  2523  00F468  6E0E               	movwf	printf@f+1,c
  2524  00F46A  ECC5  F06C         	call	_printf	;wreg free
  2525  00F46E  A281               	btfss	3969,1,c	;volatile
  2526  00F470  D7FE               	goto	l653
  2527                           
  2528                           ;standbyMode.c: 1584: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2529  00F472  3881               	swapf	3969,w,c	;volatile
  2530  00F474  0B0F               	andlw	15
  2531  00F476  0B0F               	andlw	15
  2532  00F478  0100               	movlb	0	; () banked
  2533  00F47A  6FDB               	movwf	standbyMode@keypress& (0+255),b
  2534  00F47C                     
  2535                           ; BSR set to: 0
  2536  00F47C  B281               	btfsc	3969,1,c	;volatile
  2537  00F47E  D7FE               	goto	l656
  2538                           
  2539                           ;standbyMode.c: 1587: if (keypress == 15){
  2540  00F480  0E0F               	movlw	15
  2541  00F482  0100               	movlb	0	; () banked
  2542  00F484  19DB               	xorwf	standbyMode@keypress& (0+255),w,b
  2543  00F486  A4D8               	btfss	status,2,c
  2544  00F488  D3BB               	goto	l658
  2545  00F48A                     u7360:
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;standbyMode.c: 1631: if (firstIteration == 1){
  2549                           
  2550                           ; BSR set to: 0
  2551                           
  2552                           ;standbyMode.c: 1630: while (1){
  2553  00F48A  05D7               	decf	standbyMode@firstIteration& (0+255),w,b
  2554  00F48C  11D8               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  2555  00F48E  A4D8               	btfss	status,2,c
  2556  00F490  D1B6               	goto	l660
  2557  00F492                     u7370:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;standbyMode.c: 1634: if(drawerCount >= 8){
  2561                           
  2562                           ; BSR set to: 0
  2563                           
  2564                           ;standbyMode.c: 1632: while (1){
  2565  00F492  51F3               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  2566  00F494  E104               	bnz	u7380
  2567  00F496  0E08               	movlw	8
  2568  00F498  5DF2               	subwf	standbyMode@drawerCount& (0+255),w,b
  2569  00F49A  A0D8               	btfss	status,0,c
  2570  00F49C  D02A               	goto	l662
  2571  00F49E                     u7380:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;standbyMode.c: 1635: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2575  00F49E  0E01               	movlw	1
  2576  00F4A0  ECE1  F063         	call	_lcdInst
  2577  00F4A4  0EC3               	movlw	195
  2578  00F4A6  6E54               	movwf	??_standbyMode& (0+255),c
  2579  00F4A8  0ECD               	movlw	205
  2580  00F4AA                     u7987:
  2581  00F4AA  2EE8               	decfsz	wreg,f,c
  2582  00F4AC  D7FE               	bra	u7987
  2583  00F4AE  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2584  00F4B0  D7FC               	bra	u7987
  2585  00F4B2  F000               	nop	
  2586                           
  2587                           ;standbyMode.c: 1636: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2588  00F4B4  0E0C               	movlw	12
  2589  00F4B6  ECE1  F063         	call	_lcdInst
  2590                           
  2591                           ;standbyMode.c: 1637: printf("Maximum of 8");
  2592  00F4BA  0E56               	movlw	low STR_54
  2593  00F4BC  6E0D               	movwf	printf@f,c
  2594  00F4BE  0EFF               	movlw	high STR_54
  2595  00F4C0  6E0E               	movwf	printf@f+1,c
  2596  00F4C2  ECC5  F06C         	call	_printf	;wreg free
  2597                           
  2598                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  2599  00F4C6  0EC0               	movlw	192
  2600  00F4C8  ECE1  F063         	call	_lcdInst
  2601                           
  2602                           ;standbyMode.c: 1639: printf("drawers reached!");
  2603  00F4CC  0E87               	movlw	low STR_55
  2604  00F4CE  6E0D               	movwf	printf@f,c
  2605  00F4D0  0EFD               	movlw	high STR_55
  2606  00F4D2  6E0E               	movwf	printf@f+1,c
  2607  00F4D4  ECC5  F06C         	call	_printf	;wreg free
  2608                           
  2609                           ;standbyMode.c: 1640: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2610  00F4D8  0E66               	movlw	102
  2611  00F4DA  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2612  00F4DC  0E76               	movlw	118
  2613  00F4DE  6E54               	movwf	??_standbyMode& (0+255),c
  2614  00F4E0  0EC1               	movlw	193
  2615  00F4E2                     u7997:
  2616  00F4E2  2EE8               	decfsz	wreg,f,c
  2617  00F4E4  D7FE               	bra	u7997
  2618  00F4E6  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2619  00F4E8  D7FC               	bra	u7997
  2620  00F4EA  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2621  00F4EC  D7FA               	bra	u7997
  2622  00F4EE  F000               	nop	
  2623                           
  2624                           ;standbyMode.c: 1641: break;
  2625  00F4F0  D2E2               	goto	l688
  2626  00F4F2                     l662:
  2627                           
  2628                           ;standbyMode.c: 1642: }
  2629                           ;standbyMode.c: 1644: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  2630  00F4F2  0E01               	movlw	1
  2631  00F4F4  ECE1  F063         	call	_lcdInst
  2632  00F4F8  0EC3               	movlw	195
  2633  00F4FA  6E54               	movwf	??_standbyMode& (0+255),c
  2634  00F4FC  0ECD               	movlw	205
  2635  00F4FE                     u8007:
  2636  00F4FE  2EE8               	decfsz	wreg,f,c
  2637  00F500  D7FE               	bra	u8007
  2638  00F502  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2639  00F504  D7FC               	bra	u8007
  2640  00F506  F000               	nop	
  2641                           
  2642                           ;standbyMode.c: 1645: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2643  00F508  0E0C               	movlw	12
  2644  00F50A  ECE1  F063         	call	_lcdInst
  2645                           
  2646                           ;standbyMode.c: 1646: printf("Another drawer?");
  2647  00F50E  0E4D               	movlw	low STR_56
  2648  00F510  6E0D               	movwf	printf@f,c
  2649  00F512  0EFE               	movlw	high STR_56
  2650  00F514  6E0E               	movwf	printf@f+1,c
  2651  00F516  ECC5  F06C         	call	_printf	;wreg free
  2652                           
  2653                           ;standbyMode.c: 1647: lcdInst(0xC0);;
  2654  00F51A  0EC0               	movlw	192
  2655  00F51C  ECE1  F063         	call	_lcdInst
  2656                           
  2657                           ;standbyMode.c: 1648: printf("# = No, D = Yes");
  2658  00F520  0E6D               	movlw	low STR_30
  2659  00F522  6E0D               	movwf	printf@f,c
  2660  00F524  0EFE               	movlw	high STR_30
  2661  00F526  6E0E               	movwf	printf@f+1,c
  2662  00F528  ECC5  F06C         	call	_printf	;wreg free
  2663  00F52C  A281               	btfss	3969,1,c	;volatile
  2664  00F52E  D7FE               	goto	l666
  2665                           
  2666                           ;standbyMode.c: 1651: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2667  00F530  3881               	swapf	3969,w,c	;volatile
  2668  00F532  0B0F               	andlw	15
  2669  00F534  0B0F               	andlw	15
  2670  00F536  0100               	movlb	0	; () banked
  2671  00F538  6FE2               	movwf	standbyMode@keypress1& (0+255),b
  2672  00F53A                     
  2673                           ; BSR set to: 0
  2674  00F53A  B281               	btfsc	3969,1,c	;volatile
  2675  00F53C  D7FE               	goto	l669
  2676                           
  2677                           ;standbyMode.c: 1654: if (keypress1 == 15){
  2678  00F53E  0E0F               	movlw	15
  2679  00F540  0100               	movlb	0	; () banked
  2680  00F542  19E2               	xorwf	standbyMode@keypress1& (0+255),w,b
  2681  00F544  A4D8               	btfss	status,2,c
  2682  00F546  D154               	goto	l671
  2683  00F548                     u7410:
  2684                           
  2685                           ; BSR set to: 0
  2686                           
  2687                           ; BSR set to: 0
  2688                           
  2689                           ;standbyMode.c: 1655: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2690  00F548  0E01               	movlw	1
  2691  00F54A  ECE1  F063         	call	_lcdInst
  2692  00F54E  0EC3               	movlw	195
  2693  00F550  6E54               	movwf	??_standbyMode& (0+255),c
  2694  00F552  0ECD               	movlw	205
  2695  00F554                     u8017:
  2696  00F554  2EE8               	decfsz	wreg,f,c
  2697  00F556  D7FE               	bra	u8017
  2698  00F558  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2699  00F55A  D7FC               	bra	u8017
  2700  00F55C  F000               	nop	
  2701                           
  2702                           ;standbyMode.c: 1656: drawer = which_drawer();
  2703  00F55E  EC50  F06A         	call	_which_drawer	;wreg free
  2704  00F562  C025  F0F0         	movff	?_which_drawer,standbyMode@drawer
  2705  00F566  C026  F0F1         	movff	?_which_drawer+1,standbyMode@drawer+1
  2706                           
  2707                           ;standbyMode.c: 1658: if (drawer == 100){
  2708  00F56A  0E64               	movlw	100
  2709  00F56C  0100               	movlb	0	; () banked
  2710  00F56E  19F0               	xorwf	standbyMode@drawer& (0+255),w,b
  2711  00F570  11F1               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  2712  00F572  A4D8               	btfss	status,2,c
  2713  00F574  D005               	goto	l673
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;standbyMode.c: 1659: drawer = 0;
  2717  00F576  0E00               	movlw	0
  2718  00F578  6FF1               	movwf	(standbyMode@drawer+1)& (0+255),b
  2719  00F57A  0E00               	movlw	0
  2720  00F57C  6FF0               	movwf	standbyMode@drawer& (0+255),b
  2721                           
  2722                           ;standbyMode.c: 1660: goto DRAWER_BACK;
  2723  00F57E  D7B9               	goto	l662
  2724  00F580                     l673:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;standbyMode.c: 1661: }
  2728                           ;standbyMode.c: 1663: for (i=0; i<8; i++){
  2729                           
  2730                           ; BSR set to: 0
  2731  00F580  0E00               	movlw	0
  2732  00F582  6FF5               	movwf	(standbyMode@i+1)& (0+255),b
  2733  00F584  0E00               	movlw	0
  2734  00F586  6FF4               	movwf	standbyMode@i& (0+255),b
  2735  00F588                     l6340:
  2736                           
  2737                           ; BSR set to: 0
  2738  00F588  51F5               	movf	(standbyMode@i+1)& (0+255),w,b
  2739  00F58A  E12C               	bnz	l6356
  2740  00F58C  0E08               	movlw	8
  2741  00F58E  5DF4               	subwf	standbyMode@i& (0+255),w,b
  2742  00F590  B0D8               	btfsc	status,0,c
  2743  00F592  D028               	goto	u7460
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;standbyMode.c: 1664: if (drawerInformation[i] == drawer){
  2747                           
  2748                           ; BSR set to: 0
  2749                           
  2750                           ; BSR set to: 0
  2751  00F594  90D8               	bcf	status,0,c
  2752  00F596  35F4               	rlcf	standbyMode@i& (0+255),w,b
  2753  00F598  6ED9               	movwf	fsr2l,c
  2754  00F59A  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  2755  00F59C  6EDA               	movwf	fsr2h,c
  2756  00F59E  0EC0               	movlw	low standbyMode@drawerInformation
  2757  00F5A0  26D9               	addwf	fsr2l,f,c
  2758  00F5A2  0E00               	movlw	high standbyMode@drawerInformation
  2759  00F5A4  22DA               	addwfc	fsr2h,f,c
  2760  00F5A6  51F0               	movf	standbyMode@drawer& (0+255),w,b
  2761  00F5A8  18DE               	xorwf	postinc2,w,c
  2762  00F5AA  E119               	bnz	l6352
  2763  00F5AC  51F1               	movf	(standbyMode@drawer+1)& (0+255),w,b
  2764  00F5AE  18DE               	xorwf	postinc2,w,c
  2765  00F5B0  A4D8               	btfss	status,2,c
  2766  00F5B2  D015               	goto	l677
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;standbyMode.c: 1665: validDrawer = 1;
  2770  00F5B4  0E00               	movlw	0
  2771  00F5B6  6FE4               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2772  00F5B8  0E01               	movlw	1
  2773  00F5BA  6FE3               	movwf	standbyMode@validDrawer& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;standbyMode.c: 1666: if (drawerInformation[i] == 0){
  2777  00F5BC  90D8               	bcf	status,0,c
  2778  00F5BE  35F4               	rlcf	standbyMode@i& (0+255),w,b
  2779  00F5C0  6ED9               	movwf	fsr2l,c
  2780  00F5C2  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  2781  00F5C4  6EDA               	movwf	fsr2h,c
  2782  00F5C6  0EC0               	movlw	low standbyMode@drawerInformation
  2783  00F5C8  26D9               	addwf	fsr2l,f,c
  2784  00F5CA  0E00               	movlw	high standbyMode@drawerInformation
  2785  00F5CC  22DA               	addwfc	fsr2h,f,c
  2786  00F5CE  50DE               	movf	postinc2,w,c
  2787  00F5D0  10DE               	iorwf	postinc2,w,c
  2788  00F5D2  A4D8               	btfss	status,2,c
  2789  00F5D4  D004               	goto	l677
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;standbyMode.c: 1667: zero = 1;
  2793  00F5D6  0E00               	movlw	0
  2794  00F5D8  6FE6               	movwf	(standbyMode@zero+1)& (0+255),b
  2795  00F5DA  0E01               	movlw	1
  2796  00F5DC  6FE5               	movwf	standbyMode@zero& (0+255),b
  2797  00F5DE                     l677:
  2798  00F5DE                     l6352:
  2799                           
  2800                           ; BSR set to: 0
  2801  00F5DE  4BF4               	infsnz	standbyMode@i& (0+255),f,b
  2802  00F5E0  2BF5               	incf	(standbyMode@i+1)& (0+255),f,b
  2803  00F5E2  D7D2               	goto	l6340
  2804  00F5E4                     u7460:
  2805  00F5E4                     l6356:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;standbyMode.c: 1668: }
  2809                           ;standbyMode.c: 1669: }
  2810                           ;standbyMode.c: 1670: }
  2811                           ;standbyMode.c: 1671: if (validDrawer == 1){
  2812  00F5E4  05E3               	decf	standbyMode@validDrawer& (0+255),w,b
  2813  00F5E6  11E4               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  2814  00F5E8  A4D8               	btfss	status,2,c
  2815  00F5EA  D062               	goto	l678
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;standbyMode.c: 1672: if (zero == 1){
  2819  00F5EC  05E5               	decf	standbyMode@zero& (0+255),w,b
  2820  00F5EE  11E6               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  2821  00F5F0  A4D8               	btfss	status,2,c
  2822  00F5F2  D02F               	goto	l679
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;standbyMode.c: 1673: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2826  00F5F4  0E01               	movlw	1
  2827  00F5F6  ECE1  F063         	call	_lcdInst
  2828  00F5FA  0EC3               	movlw	195
  2829  00F5FC  6E54               	movwf	??_standbyMode& (0+255),c
  2830  00F5FE  0ECD               	movlw	205
  2831  00F600                     u8027:
  2832  00F600  2EE8               	decfsz	wreg,f,c
  2833  00F602  D7FE               	bra	u8027
  2834  00F604  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2835  00F606  D7FC               	bra	u8027
  2836  00F608  F000               	nop	
  2837                           
  2838                           ;standbyMode.c: 1674: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2839  00F60A  0E0C               	movlw	12
  2840  00F60C  ECE1  F063         	call	_lcdInst
  2841                           
  2842                           ;standbyMode.c: 1675: printf("No drawer");
  2843  00F610  0EBE               	movlw	low STR_58
  2844  00F612  6E0D               	movwf	printf@f,c
  2845  00F614  0EFF               	movlw	high STR_58
  2846  00F616  6E0E               	movwf	printf@f+1,c
  2847  00F618  ECC5  F06C         	call	_printf	;wreg free
  2848                           
  2849                           ;standbyMode.c: 1676: lcdInst(0xC0);;
  2850  00F61C  0EC0               	movlw	192
  2851  00F61E  ECE1  F063         	call	_lcdInst
  2852                           
  2853                           ;standbyMode.c: 1677: printf("number pressed.");
  2854  00F622  0EFD               	movlw	low STR_59
  2855  00F624  6E0D               	movwf	printf@f,c
  2856  00F626  0EFD               	movlw	high STR_59
  2857  00F628  6E0E               	movwf	printf@f+1,c
  2858  00F62A  ECC5  F06C         	call	_printf	;wreg free
  2859                           
  2860                           ;standbyMode.c: 1678: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2861  00F62E  0E66               	movlw	102
  2862  00F630  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2863  00F632  0E76               	movlw	118
  2864  00F634  6E54               	movwf	??_standbyMode& (0+255),c
  2865  00F636  0EC1               	movlw	193
  2866  00F638                     u8037:
  2867  00F638  2EE8               	decfsz	wreg,f,c
  2868  00F63A  D7FE               	bra	u8037
  2869  00F63C  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2870  00F63E  D7FC               	bra	u8037
  2871  00F640  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2872  00F642  D7FA               	bra	u8037
  2873  00F644  F000               	nop	
  2874                           
  2875                           ;standbyMode.c: 1679: zero = 0;
  2876  00F646  0E00               	movlw	0
  2877  00F648  0100               	movlb	0	; () banked
  2878  00F64A  6FE6               	movwf	(standbyMode@zero+1)& (0+255),b
  2879  00F64C  0E00               	movlw	0
  2880  00F64E  6FE5               	movwf	standbyMode@zero& (0+255),b
  2881                           
  2882                           ;standbyMode.c: 1680: }
  2883  00F650  D029               	goto	l680
  2884  00F652                     l679:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;standbyMode.c: 1681: else{
  2888                           ;standbyMode.c: 1682: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2889                           
  2890                           ; BSR set to: 0
  2891  00F652  0E01               	movlw	1
  2892  00F654  ECE1  F063         	call	_lcdInst
  2893  00F658  0EC3               	movlw	195
  2894  00F65A  6E54               	movwf	??_standbyMode& (0+255),c
  2895  00F65C  0ECD               	movlw	205
  2896  00F65E                     u8047:
  2897  00F65E  2EE8               	decfsz	wreg,f,c
  2898  00F660  D7FE               	bra	u8047
  2899  00F662  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2900  00F664  D7FC               	bra	u8047
  2901  00F666  F000               	nop	
  2902                           
  2903                           ;standbyMode.c: 1683: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2904  00F668  0E0C               	movlw	12
  2905  00F66A  ECE1  F063         	call	_lcdInst
  2906                           
  2907                           ;standbyMode.c: 1684: printf("Drawer already");
  2908  00F66E  0EF5               	movlw	low STR_60
  2909  00F670  6E0D               	movwf	printf@f,c
  2910  00F672  0EFE               	movlw	high STR_60
  2911  00F674  6E0E               	movwf	printf@f+1,c
  2912  00F676  ECC5  F06C         	call	_printf	;wreg free
  2913                           
  2914                           ;standbyMode.c: 1685: lcdInst(0xC0);;
  2915  00F67A  0EC0               	movlw	192
  2916  00F67C  ECE1  F063         	call	_lcdInst
  2917                           
  2918                           ;standbyMode.c: 1686: printf("in use!");
  2919  00F680  0ED1               	movlw	low STR_61
  2920  00F682  6E0D               	movwf	printf@f,c
  2921  00F684  0EFF               	movlw	high STR_61
  2922  00F686  6E0E               	movwf	printf@f+1,c
  2923  00F688  ECC5  F06C         	call	_printf	;wreg free
  2924                           
  2925                           ;standbyMode.c: 1687: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2926  00F68C  0E66               	movlw	102
  2927  00F68E  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  2928  00F690  0E76               	movlw	118
  2929  00F692  6E54               	movwf	??_standbyMode& (0+255),c
  2930  00F694  0EC1               	movlw	193
  2931  00F696                     u8057:
  2932  00F696  2EE8               	decfsz	wreg,f,c
  2933  00F698  D7FE               	bra	u8057
  2934  00F69A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2935  00F69C  D7FC               	bra	u8057
  2936  00F69E  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2937  00F6A0  D7FA               	bra	u8057
  2938  00F6A2  F000               	nop	
  2939  00F6A4                     l680:
  2940                           
  2941                           ;standbyMode.c: 1688: }
  2942                           ;standbyMode.c: 1689: validDrawer = 0;
  2943  00F6A4  0E00               	movlw	0
  2944  00F6A6  0100               	movlb	0	; () banked
  2945  00F6A8  6FE4               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2946  00F6AA  0E00               	movlw	0
  2947  00F6AC  6FE3               	movwf	standbyMode@validDrawer& (0+255),b
  2948                           
  2949                           ;standbyMode.c: 1690: continue;
  2950  00F6AE  D6F1               	goto	u7370
  2951  00F6B0                     l678:
  2952                           
  2953                           ; BSR set to: 0
  2954                           
  2955                           ; BSR set to: 0
  2956                           
  2957                           ;standbyMode.c: 1692: else{
  2958                           ;standbyMode.c: 1693: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2959                           
  2960                           ; BSR set to: 0
  2961  00F6B0  0E01               	movlw	1
  2962  00F6B2  ECE1  F063         	call	_lcdInst
  2963  00F6B6  0EC3               	movlw	195
  2964  00F6B8  6E54               	movwf	??_standbyMode& (0+255),c
  2965  00F6BA  0ECD               	movlw	205
  2966  00F6BC                     u8067:
  2967  00F6BC  2EE8               	decfsz	wreg,f,c
  2968  00F6BE  D7FE               	bra	u8067
  2969  00F6C0  2E54               	decfsz	??_standbyMode& (0+255),f,c
  2970  00F6C2  D7FC               	bra	u8067
  2971  00F6C4  F000               	nop	
  2972                           
  2973                           ;standbyMode.c: 1694: diet = diet_press(drawer);
  2974  00F6C6  C0F0  F025         	movff	standbyMode@drawer,diet_press@drawer
  2975  00F6CA  C0F1  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2976  00F6CE  EC6E  F070         	call	_diet_press	;wreg free
  2977  00F6D2  C025  F0EC         	movff	?_diet_press,standbyMode@diet
  2978  00F6D6  C026  F0ED         	movff	?_diet_press+1,standbyMode@diet+1
  2979                           
  2980                           ;standbyMode.c: 1695: if (diet == 100){
  2981  00F6DA  0E64               	movlw	100
  2982  00F6DC  0100               	movlb	0	; () banked
  2983  00F6DE  19EC               	xorwf	standbyMode@diet& (0+255),w,b
  2984  00F6E0  11ED               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  2985  00F6E2  A4D8               	btfss	status,2,c
  2986  00F6E4  D005               	goto	l684
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;standbyMode.c: 1696: diet = 0;
  2990  00F6E6  0E00               	movlw	0
  2991  00F6E8  6FED               	movwf	(standbyMode@diet+1)& (0+255),b
  2992  00F6EA  0E00               	movlw	0
  2993  00F6EC  6FEC               	movwf	standbyMode@diet& (0+255),b
  2994                           
  2995                           ;standbyMode.c: 1697: goto DIET_BACK1;
  2996  00F6EE  D72C               	goto	u7410
  2997  00F6F0                     l684:
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;standbyMode.c: 1698: }
  3001                           ;standbyMode.c: 1700: food = food_press(diet, drawer);
  3002                           
  3003                           ; BSR set to: 0
  3004  00F6F0  C0EC  F025         	movff	standbyMode@diet,food_press@dietSum
  3005  00F6F4  C0ED  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  3006  00F6F8  C0F0  F027         	movff	standbyMode@drawer,food_press@drawer
  3007  00F6FC  C0F1  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  3008  00F700  EC56  F069         	call	_food_press	;wreg free
  3009  00F704  C025  F0EE         	movff	?_food_press,standbyMode@food
  3010  00F708  C026  F0EF         	movff	?_food_press+1,standbyMode@food+1
  3011                           
  3012                           ;standbyMode.c: 1701: if (food == 100){
  3013  00F70C  0E64               	movlw	100
  3014  00F70E  0100               	movlb	0	; () banked
  3015  00F710  19EE               	xorwf	standbyMode@food& (0+255),w,b
  3016  00F712  11EF               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3017  00F714  A4D8               	btfss	status,2,c
  3018  00F716  D009               	goto	l685
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;standbyMode.c: 1702: diet = 0;
  3022  00F718  0E00               	movlw	0
  3023  00F71A  6FED               	movwf	(standbyMode@diet+1)& (0+255),b
  3024  00F71C  0E00               	movlw	0
  3025  00F71E  6FEC               	movwf	standbyMode@diet& (0+255),b
  3026                           
  3027                           ;standbyMode.c: 1703: food = 0;
  3028  00F720  0E00               	movlw	0
  3029  00F722  6FEF               	movwf	(standbyMode@food+1)& (0+255),b
  3030  00F724  0E00               	movlw	0
  3031  00F726  6FEE               	movwf	standbyMode@food& (0+255),b
  3032                           
  3033                           ;standbyMode.c: 1704: goto FOOD_BACK1;
  3034  00F728  D7C3               	goto	l678
  3035  00F72A                     l685:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;standbyMode.c: 1705: }
  3039                           ;standbyMode.c: 1706: drawerInformation[drawerCount] = drawer;
  3040                           
  3041                           ; BSR set to: 0
  3042  00F72A  90D8               	bcf	status,0,c
  3043  00F72C  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3044  00F72E  6ED9               	movwf	fsr2l,c
  3045  00F730  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3046  00F732  6EDA               	movwf	fsr2h,c
  3047  00F734  0EC0               	movlw	low standbyMode@drawerInformation
  3048  00F736  26D9               	addwf	fsr2l,f,c
  3049  00F738  0E00               	movlw	high standbyMode@drawerInformation
  3050  00F73A  22DA               	addwfc	fsr2h,f,c
  3051  00F73C  C0F0  FFDE         	movff	standbyMode@drawer,postinc2
  3052  00F740  C0F1  FFDD         	movff	standbyMode@drawer+1,postdec2
  3053                           
  3054                           ;standbyMode.c: 1707: dietType[drawerCount] = diet;
  3055  00F744  90D8               	bcf	status,0,c
  3056  00F746  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3057  00F748  6ED9               	movwf	fsr2l,c
  3058  00F74A  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3059  00F74C  6EDA               	movwf	fsr2h,c
  3060  00F74E  0EB0               	movlw	low standbyMode@dietType
  3061  00F750  26D9               	addwf	fsr2l,f,c
  3062  00F752  0E00               	movlw	high standbyMode@dietType
  3063  00F754  22DA               	addwfc	fsr2h,f,c
  3064  00F756  C0EC  FFDE         	movff	standbyMode@diet,postinc2
  3065  00F75A  C0ED  FFDD         	movff	standbyMode@diet+1,postdec2
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;standbyMode.c: 1708: round = getRound(food);
  3069  00F75E  C0EE  F001         	movff	standbyMode@food,getRound@code
  3070  00F762  C0EF  F002         	movff	standbyMode@food+1,getRound@code+1
  3071  00F766  EC53  F068         	call	_getRound	;wreg free
  3072  00F76A  C001  F0DC         	movff	?_getRound,standbyMode@round
  3073  00F76E  C002  F0DD         	movff	?_getRound+1,standbyMode@round+1
  3074                           
  3075                           ;standbyMode.c: 1709: flat = getFlat(food);
  3076  00F772  C0EE  F001         	movff	standbyMode@food,getFlat@code
  3077  00F776  C0EF  F002         	movff	standbyMode@food+1,getFlat@code+1
  3078  00F77A  ECDB  F067         	call	_getFlat	;wreg free
  3079  00F77E  C001  F0DE         	movff	?_getFlat,standbyMode@flat
  3080  00F782  C002  F0DF         	movff	?_getFlat+1,standbyMode@flat+1
  3081                           
  3082                           ;standbyMode.c: 1710: lng = getLong(food);
  3083  00F786  C0EE  F001         	movff	standbyMode@food,getLong@code
  3084  00F78A  C0EF  F002         	movff	standbyMode@food+1,getLong@code+1
  3085  00F78E  ECCB  F068         	call	_getLong	;wreg free
  3086  00F792  C001  F0E0         	movff	?_getLong,standbyMode@lng
  3087  00F796  C002  F0E1         	movff	?_getLong+1,standbyMode@lng+1
  3088                           
  3089                           ;standbyMode.c: 1711: roundPieces[drawerCount] = round;
  3090  00F79A  90D8               	bcf	status,0,c
  3091  00F79C  0100               	movlb	0	; () banked
  3092  00F79E  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3093  00F7A0  6ED9               	movwf	fsr2l,c
  3094  00F7A2  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3095  00F7A4  6EDA               	movwf	fsr2h,c
  3096  00F7A6  0E80               	movlw	low standbyMode@roundPieces
  3097  00F7A8  26D9               	addwf	fsr2l,f,c
  3098  00F7AA  0E00               	movlw	high standbyMode@roundPieces
  3099  00F7AC  22DA               	addwfc	fsr2h,f,c
  3100  00F7AE  C0DC  FFDE         	movff	standbyMode@round,postinc2
  3101  00F7B2  C0DD  FFDD         	movff	standbyMode@round+1,postdec2
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;standbyMode.c: 1712: flatPieces[drawerCount] = flat;
  3105  00F7B6  90D8               	bcf	status,0,c
  3106  00F7B8  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3107  00F7BA  6ED9               	movwf	fsr2l,c
  3108  00F7BC  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3109  00F7BE  6EDA               	movwf	fsr2h,c
  3110  00F7C0  0E90               	movlw	low standbyMode@flatPieces
  3111  00F7C2  26D9               	addwf	fsr2l,f,c
  3112  00F7C4  0E00               	movlw	high standbyMode@flatPieces
  3113  00F7C6  22DA               	addwfc	fsr2h,f,c
  3114  00F7C8  C0DE  FFDE         	movff	standbyMode@flat,postinc2
  3115  00F7CC  C0DF  FFDD         	movff	standbyMode@flat+1,postdec2
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;standbyMode.c: 1713: longPieces[drawerCount] = lng;
  3119  00F7D0  90D8               	bcf	status,0,c
  3120  00F7D2  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3121  00F7D4  6ED9               	movwf	fsr2l,c
  3122  00F7D6  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3123  00F7D8  6EDA               	movwf	fsr2h,c
  3124  00F7DA  0EA0               	movlw	low standbyMode@longPieces
  3125  00F7DC  26D9               	addwf	fsr2l,f,c
  3126  00F7DE  0E00               	movlw	high standbyMode@longPieces
  3127  00F7E0  22DA               	addwfc	fsr2h,f,c
  3128  00F7E2  C0E0  FFDE         	movff	standbyMode@lng,postinc2
  3129  00F7E6  C0E1  FFDD         	movff	standbyMode@lng+1,postdec2
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;standbyMode.c: 1714: drawerCount += 1;
  3133  00F7EA  4BF2               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3134  00F7EC  2BF3               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;standbyMode.c: 1715: }
  3138                           ;standbyMode.c: 1716: }
  3139  00F7EE  D004               	goto	l687
  3140  00F7F0                     l671:
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;standbyMode.c: 1717: else if (keypress1 == 14){
  3144                           
  3145                           ; BSR set to: 0
  3146  00F7F0  0E0E               	movlw	14
  3147  00F7F2  19E2               	xorwf	standbyMode@keypress1& (0+255),w,b
  3148  00F7F4  B4D8               	btfsc	status,2,c
  3149  00F7F6  D15F               	goto	l688
  3150  00F7F8                     l687:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;standbyMode.c: 1719: }
  3154                           ;standbyMode.c: 1720: keypress1 = 0;
  3155                           
  3156                           ; BSR set to: 0
  3157                           
  3158                           ; BSR set to: 0
  3159  00F7F8  0E00               	movlw	0
  3160  00F7FA  6FE2               	movwf	standbyMode@keypress1& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163  00F7FC  D64A               	goto	u7370
  3164  00F7FE                     l660:
  3165                           
  3166                           ; BSR set to: 0
  3167                           
  3168                           ; BSR set to: 0
  3169                           
  3170                           ;standbyMode.c: 1724: else{
  3171                           ;standbyMode.c: 1725: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3172                           
  3173                           ; BSR set to: 0
  3174  00F7FE  0E01               	movlw	1
  3175  00F800  ECE1  F063         	call	_lcdInst
  3176  00F804  0EC3               	movlw	195
  3177  00F806  6E54               	movwf	??_standbyMode& (0+255),c
  3178  00F808  0ECD               	movlw	205
  3179  00F80A                     u8077:
  3180  00F80A  2EE8               	decfsz	wreg,f,c
  3181  00F80C  D7FE               	bra	u8077
  3182  00F80E  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3183  00F810  D7FC               	bra	u8077
  3184  00F812  F000               	nop	
  3185                           
  3186                           ;standbyMode.c: 1726: drawer = which_drawer();
  3187  00F814  EC50  F06A         	call	_which_drawer	;wreg free
  3188  00F818  C025  F0F0         	movff	?_which_drawer,standbyMode@drawer
  3189  00F81C  C026  F0F1         	movff	?_which_drawer+1,standbyMode@drawer+1
  3190                           
  3191                           ;standbyMode.c: 1728: if (drawer == 100){
  3192  00F820  0E64               	movlw	100
  3193  00F822  0100               	movlb	0	; () banked
  3194  00F824  19F0               	xorwf	standbyMode@drawer& (0+255),w,b
  3195  00F826  11F1               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3196  00F828  A4D8               	btfss	status,2,c
  3197  00F82A  D009               	goto	l691
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;standbyMode.c: 1729: drawer = 0;
  3201  00F82C  0E00               	movlw	0
  3202  00F82E  6FF1               	movwf	(standbyMode@drawer+1)& (0+255),b
  3203  00F830  0E00               	movlw	0
  3204  00F832  6FF0               	movwf	standbyMode@drawer& (0+255),b
  3205                           
  3206                           ;standbyMode.c: 1730: firstIteration = 1;
  3207  00F834  0E00               	movlw	0
  3208  00F836  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3209  00F838  0E01               	movlw	1
  3210  00F83A  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  3211                           
  3212                           ;standbyMode.c: 1731: goto DRAWER_BACK;
  3213  00F83C  D65A               	goto	l662
  3214  00F83E                     l691:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;standbyMode.c: 1732: }
  3218                           ;standbyMode.c: 1734: firstIteration = 1;
  3219                           
  3220                           ; BSR set to: 0
  3221  00F83E  0E00               	movlw	0
  3222  00F840  6FD8               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3223  00F842  0E01               	movlw	1
  3224  00F844  6FD7               	movwf	standbyMode@firstIteration& (0+255),b
  3225                           
  3226                           ;standbyMode.c: 1735: for (i=0; i<8; i++){
  3227  00F846  0E00               	movlw	0
  3228  00F848  6FF5               	movwf	(standbyMode@i+1)& (0+255),b
  3229  00F84A  0E00               	movlw	0
  3230  00F84C  6FF4               	movwf	standbyMode@i& (0+255),b
  3231  00F84E                     l6446:
  3232                           
  3233                           ; BSR set to: 0
  3234  00F84E  51F5               	movf	(standbyMode@i+1)& (0+255),w,b
  3235  00F850  E12C               	bnz	l6462
  3236  00F852  0E08               	movlw	8
  3237  00F854  5DF4               	subwf	standbyMode@i& (0+255),w,b
  3238  00F856  B0D8               	btfsc	status,0,c
  3239  00F858  D028               	goto	u7560
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;standbyMode.c: 1736: if (drawerInformation[i] == drawer){
  3243                           
  3244                           ; BSR set to: 0
  3245                           
  3246                           ; BSR set to: 0
  3247  00F85A  90D8               	bcf	status,0,c
  3248  00F85C  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3249  00F85E  6ED9               	movwf	fsr2l,c
  3250  00F860  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3251  00F862  6EDA               	movwf	fsr2h,c
  3252  00F864  0EC0               	movlw	low standbyMode@drawerInformation
  3253  00F866  26D9               	addwf	fsr2l,f,c
  3254  00F868  0E00               	movlw	high standbyMode@drawerInformation
  3255  00F86A  22DA               	addwfc	fsr2h,f,c
  3256  00F86C  51F0               	movf	standbyMode@drawer& (0+255),w,b
  3257  00F86E  18DE               	xorwf	postinc2,w,c
  3258  00F870  E119               	bnz	l6458
  3259  00F872  51F1               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3260  00F874  18DE               	xorwf	postinc2,w,c
  3261  00F876  A4D8               	btfss	status,2,c
  3262  00F878  D015               	goto	l695
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;standbyMode.c: 1737: validDrawer = 1;
  3266  00F87A  0E00               	movlw	0
  3267  00F87C  6FE4               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3268  00F87E  0E01               	movlw	1
  3269  00F880  6FE3               	movwf	standbyMode@validDrawer& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;standbyMode.c: 1738: if (drawerInformation[i] == 0){
  3273  00F882  90D8               	bcf	status,0,c
  3274  00F884  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3275  00F886  6ED9               	movwf	fsr2l,c
  3276  00F888  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3277  00F88A  6EDA               	movwf	fsr2h,c
  3278  00F88C  0EC0               	movlw	low standbyMode@drawerInformation
  3279  00F88E  26D9               	addwf	fsr2l,f,c
  3280  00F890  0E00               	movlw	high standbyMode@drawerInformation
  3281  00F892  22DA               	addwfc	fsr2h,f,c
  3282  00F894  50DE               	movf	postinc2,w,c
  3283  00F896  10DE               	iorwf	postinc2,w,c
  3284  00F898  A4D8               	btfss	status,2,c
  3285  00F89A  D004               	goto	l695
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;standbyMode.c: 1739: zero = 1;
  3289  00F89C  0E00               	movlw	0
  3290  00F89E  6FE6               	movwf	(standbyMode@zero+1)& (0+255),b
  3291  00F8A0  0E01               	movlw	1
  3292  00F8A2  6FE5               	movwf	standbyMode@zero& (0+255),b
  3293  00F8A4                     l695:
  3294  00F8A4                     l6458:
  3295                           
  3296                           ; BSR set to: 0
  3297  00F8A4  4BF4               	infsnz	standbyMode@i& (0+255),f,b
  3298  00F8A6  2BF5               	incf	(standbyMode@i+1)& (0+255),f,b
  3299  00F8A8  D7D2               	goto	l6446
  3300  00F8AA                     u7560:
  3301  00F8AA                     l6462:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;standbyMode.c: 1740: }
  3305                           ;standbyMode.c: 1741: }
  3306                           ;standbyMode.c: 1742: }
  3307                           ;standbyMode.c: 1743: if (validDrawer == 1){
  3308  00F8AA  05E3               	decf	standbyMode@validDrawer& (0+255),w,b
  3309  00F8AC  11E4               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3310  00F8AE  A4D8               	btfss	status,2,c
  3311  00F8B0  D062               	goto	l696
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;standbyMode.c: 1744: if (zero == 1){
  3315  00F8B2  05E5               	decf	standbyMode@zero& (0+255),w,b
  3316  00F8B4  11E6               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3317  00F8B6  A4D8               	btfss	status,2,c
  3318  00F8B8  D02F               	goto	l697
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;standbyMode.c: 1745: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3322  00F8BA  0E01               	movlw	1
  3323  00F8BC  ECE1  F063         	call	_lcdInst
  3324  00F8C0  0EC3               	movlw	195
  3325  00F8C2  6E54               	movwf	??_standbyMode& (0+255),c
  3326  00F8C4  0ECD               	movlw	205
  3327  00F8C6                     u8087:
  3328  00F8C6  2EE8               	decfsz	wreg,f,c
  3329  00F8C8  D7FE               	bra	u8087
  3330  00F8CA  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3331  00F8CC  D7FC               	bra	u8087
  3332  00F8CE  F000               	nop	
  3333                           
  3334                           ;standbyMode.c: 1746: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3335  00F8D0  0E0C               	movlw	12
  3336  00F8D2  ECE1  F063         	call	_lcdInst
  3337                           
  3338                           ;standbyMode.c: 1747: printf("No drawer");
  3339  00F8D6  0EBE               	movlw	low STR_58
  3340  00F8D8  6E0D               	movwf	printf@f,c
  3341  00F8DA  0EFF               	movlw	high STR_58
  3342  00F8DC  6E0E               	movwf	printf@f+1,c
  3343  00F8DE  ECC5  F06C         	call	_printf	;wreg free
  3344                           
  3345                           ;standbyMode.c: 1748: lcdInst(0xC0);;
  3346  00F8E2  0EC0               	movlw	192
  3347  00F8E4  ECE1  F063         	call	_lcdInst
  3348                           
  3349                           ;standbyMode.c: 1749: printf("number pressed.");
  3350  00F8E8  0EFD               	movlw	low STR_59
  3351  00F8EA  6E0D               	movwf	printf@f,c
  3352  00F8EC  0EFD               	movlw	high STR_59
  3353  00F8EE  6E0E               	movwf	printf@f+1,c
  3354  00F8F0  ECC5  F06C         	call	_printf	;wreg free
  3355                           
  3356                           ;standbyMode.c: 1750: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3357  00F8F4  0E66               	movlw	102
  3358  00F8F6  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  3359  00F8F8  0E76               	movlw	118
  3360  00F8FA  6E54               	movwf	??_standbyMode& (0+255),c
  3361  00F8FC  0EC1               	movlw	193
  3362  00F8FE                     u8097:
  3363  00F8FE  2EE8               	decfsz	wreg,f,c
  3364  00F900  D7FE               	bra	u8097
  3365  00F902  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3366  00F904  D7FC               	bra	u8097
  3367  00F906  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3368  00F908  D7FA               	bra	u8097
  3369  00F90A  F000               	nop	
  3370                           
  3371                           ;standbyMode.c: 1751: zero = 0;
  3372  00F90C  0E00               	movlw	0
  3373  00F90E  0100               	movlb	0	; () banked
  3374  00F910  6FE6               	movwf	(standbyMode@zero+1)& (0+255),b
  3375  00F912  0E00               	movlw	0
  3376  00F914  6FE5               	movwf	standbyMode@zero& (0+255),b
  3377                           
  3378                           ;standbyMode.c: 1752: }
  3379  00F916  D029               	goto	l698
  3380  00F918                     l697:
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;standbyMode.c: 1753: else{
  3384                           ;standbyMode.c: 1754: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3385                           
  3386                           ; BSR set to: 0
  3387  00F918  0E01               	movlw	1
  3388  00F91A  ECE1  F063         	call	_lcdInst
  3389  00F91E  0EC3               	movlw	195
  3390  00F920  6E54               	movwf	??_standbyMode& (0+255),c
  3391  00F922  0ECD               	movlw	205
  3392  00F924                     u8107:
  3393  00F924  2EE8               	decfsz	wreg,f,c
  3394  00F926  D7FE               	bra	u8107
  3395  00F928  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3396  00F92A  D7FC               	bra	u8107
  3397  00F92C  F000               	nop	
  3398                           
  3399                           ;standbyMode.c: 1755: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3400  00F92E  0E0C               	movlw	12
  3401  00F930  ECE1  F063         	call	_lcdInst
  3402                           
  3403                           ;standbyMode.c: 1756: printf("Drawer already");
  3404  00F934  0EF5               	movlw	low STR_60
  3405  00F936  6E0D               	movwf	printf@f,c
  3406  00F938  0EFE               	movlw	high STR_60
  3407  00F93A  6E0E               	movwf	printf@f+1,c
  3408  00F93C  ECC5  F06C         	call	_printf	;wreg free
  3409                           
  3410                           ;standbyMode.c: 1757: lcdInst(0xC0);;
  3411  00F940  0EC0               	movlw	192
  3412  00F942  ECE1  F063         	call	_lcdInst
  3413                           
  3414                           ;standbyMode.c: 1758: printf("in use!");
  3415  00F946  0ED1               	movlw	low STR_61
  3416  00F948  6E0D               	movwf	printf@f,c
  3417  00F94A  0EFF               	movlw	high STR_61
  3418  00F94C  6E0E               	movwf	printf@f+1,c
  3419  00F94E  ECC5  F06C         	call	_printf	;wreg free
  3420                           
  3421                           ;standbyMode.c: 1759: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3422  00F952  0E66               	movlw	102
  3423  00F954  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  3424  00F956  0E76               	movlw	118
  3425  00F958  6E54               	movwf	??_standbyMode& (0+255),c
  3426  00F95A  0EC1               	movlw	193
  3427  00F95C                     u8117:
  3428  00F95C  2EE8               	decfsz	wreg,f,c
  3429  00F95E  D7FE               	bra	u8117
  3430  00F960  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3431  00F962  D7FC               	bra	u8117
  3432  00F964  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3433  00F966  D7FA               	bra	u8117
  3434  00F968  F000               	nop	
  3435  00F96A                     l698:
  3436                           
  3437                           ;standbyMode.c: 1760: }
  3438                           ;standbyMode.c: 1761: validDrawer = 0;
  3439  00F96A  0E00               	movlw	0
  3440  00F96C  0100               	movlb	0	; () banked
  3441  00F96E  6FE4               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3442  00F970  0E00               	movlw	0
  3443  00F972  6FE3               	movwf	standbyMode@validDrawer& (0+255),b
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;standbyMode.c: 1763: }
  3447                           
  3448                           ;standbyMode.c: 1762: continue;
  3449  00F974  D58A               	goto	u7360
  3450  00F976                     l696:
  3451                           
  3452                           ; BSR set to: 0
  3453                           
  3454                           ; BSR set to: 0
  3455                           
  3456                           ;standbyMode.c: 1764: else{
  3457                           ;standbyMode.c: 1765: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3458                           
  3459                           ; BSR set to: 0
  3460  00F976  0E01               	movlw	1
  3461  00F978  ECE1  F063         	call	_lcdInst
  3462  00F97C  0EC3               	movlw	195
  3463  00F97E  6E54               	movwf	??_standbyMode& (0+255),c
  3464  00F980  0ECD               	movlw	205
  3465  00F982                     u8127:
  3466  00F982  2EE8               	decfsz	wreg,f,c
  3467  00F984  D7FE               	bra	u8127
  3468  00F986  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3469  00F988  D7FC               	bra	u8127
  3470  00F98A  F000               	nop	
  3471                           
  3472                           ;standbyMode.c: 1766: diet = diet_press(drawer);
  3473  00F98C  C0F0  F025         	movff	standbyMode@drawer,diet_press@drawer
  3474  00F990  C0F1  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3475  00F994  EC6E  F070         	call	_diet_press	;wreg free
  3476  00F998  C025  F0EC         	movff	?_diet_press,standbyMode@diet
  3477  00F99C  C026  F0ED         	movff	?_diet_press+1,standbyMode@diet+1
  3478                           
  3479                           ;standbyMode.c: 1767: if (diet == 100){
  3480  00F9A0  0E64               	movlw	100
  3481  00F9A2  0100               	movlb	0	; () banked
  3482  00F9A4  19EC               	xorwf	standbyMode@diet& (0+255),w,b
  3483  00F9A6  11ED               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3484  00F9A8  A4D8               	btfss	status,2,c
  3485  00F9AA  D005               	goto	l702
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;standbyMode.c: 1768: diet = 0;
  3489  00F9AC  0E00               	movlw	0
  3490  00F9AE  6FED               	movwf	(standbyMode@diet+1)& (0+255),b
  3491  00F9B0  0E00               	movlw	0
  3492  00F9B2  6FEC               	movwf	standbyMode@diet& (0+255),b
  3493                           
  3494                           ;standbyMode.c: 1769: goto DIET_BACK2;
  3495  00F9B4  D724               	goto	l660
  3496  00F9B6                     l702:
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;standbyMode.c: 1770: }
  3500                           ;standbyMode.c: 1772: food = food_press(diet, drawer);
  3501                           
  3502                           ; BSR set to: 0
  3503  00F9B6  C0EC  F025         	movff	standbyMode@diet,food_press@dietSum
  3504  00F9BA  C0ED  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  3505  00F9BE  C0F0  F027         	movff	standbyMode@drawer,food_press@drawer
  3506  00F9C2  C0F1  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  3507  00F9C6  EC56  F069         	call	_food_press	;wreg free
  3508  00F9CA  C025  F0EE         	movff	?_food_press,standbyMode@food
  3509  00F9CE  C026  F0EF         	movff	?_food_press+1,standbyMode@food+1
  3510                           
  3511                           ;standbyMode.c: 1773: if (food == 100){
  3512  00F9D2  0E64               	movlw	100
  3513  00F9D4  0100               	movlb	0	; () banked
  3514  00F9D6  19EE               	xorwf	standbyMode@food& (0+255),w,b
  3515  00F9D8  11EF               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3516  00F9DA  A4D8               	btfss	status,2,c
  3517  00F9DC  D009               	goto	l703
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;standbyMode.c: 1774: diet = 0;
  3521  00F9DE  0E00               	movlw	0
  3522  00F9E0  6FED               	movwf	(standbyMode@diet+1)& (0+255),b
  3523  00F9E2  0E00               	movlw	0
  3524  00F9E4  6FEC               	movwf	standbyMode@diet& (0+255),b
  3525                           
  3526                           ;standbyMode.c: 1775: food = 0;
  3527  00F9E6  0E00               	movlw	0
  3528  00F9E8  6FEF               	movwf	(standbyMode@food+1)& (0+255),b
  3529  00F9EA  0E00               	movlw	0
  3530  00F9EC  6FEE               	movwf	standbyMode@food& (0+255),b
  3531                           
  3532                           ;standbyMode.c: 1776: goto FOOD_BACK2;
  3533  00F9EE  D7C3               	goto	l696
  3534  00F9F0                     l703:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;standbyMode.c: 1777: }
  3538                           ;standbyMode.c: 1778: drawerInformation[drawerCount] = drawer;
  3539                           
  3540                           ; BSR set to: 0
  3541  00F9F0  90D8               	bcf	status,0,c
  3542  00F9F2  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3543  00F9F4  6ED9               	movwf	fsr2l,c
  3544  00F9F6  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3545  00F9F8  6EDA               	movwf	fsr2h,c
  3546  00F9FA  0EC0               	movlw	low standbyMode@drawerInformation
  3547  00F9FC  26D9               	addwf	fsr2l,f,c
  3548  00F9FE  0E00               	movlw	high standbyMode@drawerInformation
  3549  00FA00  22DA               	addwfc	fsr2h,f,c
  3550  00FA02  C0F0  FFDE         	movff	standbyMode@drawer,postinc2
  3551  00FA06  C0F1  FFDD         	movff	standbyMode@drawer+1,postdec2
  3552                           
  3553                           ;standbyMode.c: 1779: dietType[drawerCount] = diet;
  3554  00FA0A  90D8               	bcf	status,0,c
  3555  00FA0C  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3556  00FA0E  6ED9               	movwf	fsr2l,c
  3557  00FA10  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3558  00FA12  6EDA               	movwf	fsr2h,c
  3559  00FA14  0EB0               	movlw	low standbyMode@dietType
  3560  00FA16  26D9               	addwf	fsr2l,f,c
  3561  00FA18  0E00               	movlw	high standbyMode@dietType
  3562  00FA1A  22DA               	addwfc	fsr2h,f,c
  3563  00FA1C  C0EC  FFDE         	movff	standbyMode@diet,postinc2
  3564  00FA20  C0ED  FFDD         	movff	standbyMode@diet+1,postdec2
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;standbyMode.c: 1780: round = getRound(food);
  3568  00FA24  C0EE  F001         	movff	standbyMode@food,getRound@code
  3569  00FA28  C0EF  F002         	movff	standbyMode@food+1,getRound@code+1
  3570  00FA2C  EC53  F068         	call	_getRound	;wreg free
  3571  00FA30  C001  F0DC         	movff	?_getRound,standbyMode@round
  3572  00FA34  C002  F0DD         	movff	?_getRound+1,standbyMode@round+1
  3573                           
  3574                           ;standbyMode.c: 1781: flat = getFlat(food);
  3575  00FA38  C0EE  F001         	movff	standbyMode@food,getFlat@code
  3576  00FA3C  C0EF  F002         	movff	standbyMode@food+1,getFlat@code+1
  3577  00FA40  ECDB  F067         	call	_getFlat	;wreg free
  3578  00FA44  C001  F0DE         	movff	?_getFlat,standbyMode@flat
  3579  00FA48  C002  F0DF         	movff	?_getFlat+1,standbyMode@flat+1
  3580                           
  3581                           ;standbyMode.c: 1782: lng = getLong(food);
  3582  00FA4C  C0EE  F001         	movff	standbyMode@food,getLong@code
  3583  00FA50  C0EF  F002         	movff	standbyMode@food+1,getLong@code+1
  3584  00FA54  ECCB  F068         	call	_getLong	;wreg free
  3585  00FA58  C001  F0E0         	movff	?_getLong,standbyMode@lng
  3586  00FA5C  C002  F0E1         	movff	?_getLong+1,standbyMode@lng+1
  3587                           
  3588                           ;standbyMode.c: 1783: roundPieces[drawerCount] = round;
  3589  00FA60  90D8               	bcf	status,0,c
  3590  00FA62  0100               	movlb	0	; () banked
  3591  00FA64  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3592  00FA66  6ED9               	movwf	fsr2l,c
  3593  00FA68  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3594  00FA6A  6EDA               	movwf	fsr2h,c
  3595  00FA6C  0E80               	movlw	low standbyMode@roundPieces
  3596  00FA6E  26D9               	addwf	fsr2l,f,c
  3597  00FA70  0E00               	movlw	high standbyMode@roundPieces
  3598  00FA72  22DA               	addwfc	fsr2h,f,c
  3599  00FA74  C0DC  FFDE         	movff	standbyMode@round,postinc2
  3600  00FA78  C0DD  FFDD         	movff	standbyMode@round+1,postdec2
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;standbyMode.c: 1784: flatPieces[drawerCount] = flat;
  3604  00FA7C  90D8               	bcf	status,0,c
  3605  00FA7E  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3606  00FA80  6ED9               	movwf	fsr2l,c
  3607  00FA82  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3608  00FA84  6EDA               	movwf	fsr2h,c
  3609  00FA86  0E90               	movlw	low standbyMode@flatPieces
  3610  00FA88  26D9               	addwf	fsr2l,f,c
  3611  00FA8A  0E00               	movlw	high standbyMode@flatPieces
  3612  00FA8C  22DA               	addwfc	fsr2h,f,c
  3613  00FA8E  C0DE  FFDE         	movff	standbyMode@flat,postinc2
  3614  00FA92  C0DF  FFDD         	movff	standbyMode@flat+1,postdec2
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;standbyMode.c: 1785: longPieces[drawerCount] = lng;
  3618  00FA96  90D8               	bcf	status,0,c
  3619  00FA98  35F2               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3620  00FA9A  6ED9               	movwf	fsr2l,c
  3621  00FA9C  35F3               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3622  00FA9E  6EDA               	movwf	fsr2h,c
  3623  00FAA0  0EA0               	movlw	low standbyMode@longPieces
  3624  00FAA2  26D9               	addwf	fsr2l,f,c
  3625  00FAA4  0E00               	movlw	high standbyMode@longPieces
  3626  00FAA6  22DA               	addwfc	fsr2h,f,c
  3627  00FAA8  C0E0  FFDE         	movff	standbyMode@lng,postinc2
  3628  00FAAC  C0E1  FFDD         	movff	standbyMode@lng+1,postdec2
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;standbyMode.c: 1786: drawerCount += 1;
  3632  00FAB0  4BF2               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3633  00FAB2  2BF3               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636                           
  3637                           ; BSR set to: 0
  3638                           
  3639                           ; BSR set to: 0
  3640  00FAB4  D4EA               	goto	u7360
  3641  00FAB6                     l688:
  3642                           
  3643                           ;standbyMode.c: 1787: }
  3644                           ;standbyMode.c: 1788: }
  3645                           ;standbyMode.c: 1789: }
  3646                           ;standbyMode.c: 1791: if (drawerCount == 0){
  3647                           
  3648                           ; BSR set to: 0
  3649  00FAB6  0100               	movlb	0	; () banked
  3650  00FAB8  51F2               	movf	standbyMode@drawerCount& (0+255),w,b
  3651  00FABA  11F3               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  3652  00FABC  A4D8               	btfss	status,2,c
  3653  00FABE  D005               	goto	l704
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;standbyMode.c: 1792: return 0;
  3657  00FAC0  0E00               	movlw	0
  3658  00FAC2  6E53               	movwf	?_standbyMode+1,c
  3659  00FAC4  0E00               	movlw	0
  3660  00FAC6  6E52               	movwf	?_standbyMode,c
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;standbyMode.c: 1793: }
  3664                           
  3665                           ; BSR set to: 0
  3666  00FAC8  0012               	return	
  3667  00FACA                     l704:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;standbyMode.c: 1794: else{
  3671                           ;standbyMode.c: 1795: logNumber = readEEPROM(250);
  3672                           
  3673                           ; BSR set to: 0
  3674  00FACA  0EFA               	movlw	250
  3675  00FACC  ECF5  F063         	call	_readEEPROM
  3676  00FAD0  0100               	movlb	0	; () banked
  3677  00FAD2  6FE9               	movwf	standbyMode@logNumber& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;standbyMode.c: 1796: if (logNumber == 4){
  3681  00FAD4  0E04               	movlw	4
  3682  00FAD6  19E9               	xorwf	standbyMode@logNumber& (0+255),w,b
  3683  00FAD8  B4D8               	btfsc	status,2,c
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;standbyMode.c: 1797: shiftEEPROM();
  3687  00FADA  EC4E  F066         	call	_shiftEEPROM	;wreg free
  3688                           
  3689                           ;standbyMode.c: 1798: }
  3690                           ;standbyMode.c: 1799: for (i=0; i<8; i++){
  3691  00FADE  0E00               	movlw	0
  3692  00FAE0  0100               	movlb	0	; () banked
  3693  00FAE2  6FF5               	movwf	(standbyMode@i+1)& (0+255),b
  3694  00FAE4  0E00               	movlw	0
  3695  00FAE6  6FF4               	movwf	standbyMode@i& (0+255),b
  3696                           
  3697                           ; BSR set to: 0
  3698  00FAE8  51F5               	movf	(standbyMode@i+1)& (0+255),w,b
  3699  00FAEA  E105               	bnz	u7630
  3700  00FAEC  0E08               	movlw	8
  3701  00FAEE  5DF4               	subwf	standbyMode@i& (0+255),w,b
  3702  00FAF0  B0D8               	btfsc	status,0,c
  3703  00FAF2  D081               	goto	u7660
  3704  00FAF4  D001               	goto	l708
  3705  00FAF6                     u7630:
  3706                           
  3707                           ; BSR set to: 0
  3708  00FAF6  D07F               	goto	u7660
  3709  00FAF8                     l708:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;standbyMode.c: 1800: if (logNumber == 0 || logNumber == 4){
  3713                           
  3714                           ; BSR set to: 0
  3715  00FAF8  51E9               	movf	standbyMode@logNumber& (0+255),w,b
  3716  00FAFA  B4D8               	btfsc	status,2,c
  3717  00FAFC  D004               	goto	u7650
  3718                           
  3719                           ; BSR set to: 0
  3720  00FAFE  0E04               	movlw	4
  3721  00FB00  19E9               	xorwf	standbyMode@logNumber& (0+255),w,b
  3722  00FB02  A4D8               	btfss	status,2,c
  3723  00FB04  D00F               	goto	l710
  3724  00FB06                     u7650:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;standbyMode.c: 1801: n = 5*i;
  3728                           
  3729                           ; BSR set to: 0
  3730  00FB06  C0F4  F001         	movff	standbyMode@i,___wmul@multiplier
  3731  00FB0A  C0F5  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  3732  00FB0E  0E00               	movlw	0
  3733  00FB10  6E04               	movwf	___wmul@multiplicand+1,c
  3734  00FB12  0E05               	movlw	5
  3735  00FB14  6E03               	movwf	___wmul@multiplicand,c
  3736  00FB16  EC2B  F064         	call	___wmul	;wreg free
  3737  00FB1A  C001  F0EA         	movff	?___wmul,standbyMode@n
  3738  00FB1E  C002  F0EB         	movff	?___wmul+1,standbyMode@n+1
  3739                           
  3740                           ;standbyMode.c: 1802: }
  3741  00FB22  D013               	goto	l713
  3742  00FB24                     l710:
  3743                           
  3744                           ;standbyMode.c: 1803: else{
  3745                           ;standbyMode.c: 1804: n = (logNumber)*51 + 5*i;
  3746  00FB24  C0F4  F001         	movff	standbyMode@i,___wmul@multiplier
  3747  00FB28  C0F5  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  3748  00FB2C  0E00               	movlw	0
  3749  00FB2E  6E04               	movwf	___wmul@multiplicand+1,c
  3750  00FB30  0E05               	movlw	5
  3751  00FB32  6E03               	movwf	___wmul@multiplicand,c
  3752  00FB34  EC2B  F064         	call	___wmul	;wreg free
  3753  00FB38  0100               	movlb	0	; () banked
  3754  00FB3A  51E9               	movf	standbyMode@logNumber& (0+255),w,b
  3755  00FB3C  0D33               	mullw	51
  3756  00FB3E  5001               	movf	?___wmul,w,c
  3757  00FB40  24F3               	addwf	prodl,w,c
  3758  00FB42  6FEA               	movwf	standbyMode@n& (0+255),b
  3759  00FB44  5002               	movf	?___wmul+1,w,c
  3760  00FB46  20F4               	addwfc	prodh,w,c
  3761  00FB48  6FEB               	movwf	(standbyMode@n+1)& (0+255),b
  3762  00FB4A                     l713:
  3763                           
  3764                           ;standbyMode.c: 1805: }
  3765                           ;standbyMode.c: 1806: writeEEPROM(11+n, drawerInformation[i]);
  3766                           
  3767                           ; BSR set to: 0
  3768  00FB4A  90D8               	bcf	status,0,c
  3769  00FB4C  0100               	movlb	0	; () banked
  3770  00FB4E  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3771  00FB50  6ED9               	movwf	fsr2l,c
  3772  00FB52  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3773  00FB54  6EDA               	movwf	fsr2h,c
  3774  00FB56  0EC0               	movlw	low standbyMode@drawerInformation
  3775  00FB58  26D9               	addwf	fsr2l,f,c
  3776  00FB5A  0E00               	movlw	high standbyMode@drawerInformation
  3777  00FB5C  22DA               	addwfc	fsr2h,f,c
  3778  00FB5E  50DF               	movf	indf2,w,c
  3779  00FB60  6E01               	movwf	writeEEPROM@data,c
  3780  00FB62  51EA               	movf	standbyMode@n& (0+255),w,b
  3781  00FB64  0F0B               	addlw	11
  3782  00FB66  EC51  F064         	call	_writeEEPROM
  3783                           
  3784                           ;standbyMode.c: 1807: writeEEPROM(12+n, dietType[i]);
  3785  00FB6A  90D8               	bcf	status,0,c
  3786  00FB6C  0100               	movlb	0	; () banked
  3787  00FB6E  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3788  00FB70  6ED9               	movwf	fsr2l,c
  3789  00FB72  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3790  00FB74  6EDA               	movwf	fsr2h,c
  3791  00FB76  0EB0               	movlw	low standbyMode@dietType
  3792  00FB78  26D9               	addwf	fsr2l,f,c
  3793  00FB7A  0E00               	movlw	high standbyMode@dietType
  3794  00FB7C  22DA               	addwfc	fsr2h,f,c
  3795  00FB7E  50DF               	movf	indf2,w,c
  3796  00FB80  6E01               	movwf	writeEEPROM@data,c
  3797  00FB82  51EA               	movf	standbyMode@n& (0+255),w,b
  3798  00FB84  0F0C               	addlw	12
  3799  00FB86  EC51  F064         	call	_writeEEPROM
  3800                           
  3801                           ;standbyMode.c: 1808: writeEEPROM(13+n, roundPieces[i]);
  3802  00FB8A  90D8               	bcf	status,0,c
  3803  00FB8C  0100               	movlb	0	; () banked
  3804  00FB8E  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3805  00FB90  6ED9               	movwf	fsr2l,c
  3806  00FB92  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3807  00FB94  6EDA               	movwf	fsr2h,c
  3808  00FB96  0E80               	movlw	low standbyMode@roundPieces
  3809  00FB98  26D9               	addwf	fsr2l,f,c
  3810  00FB9A  0E00               	movlw	high standbyMode@roundPieces
  3811  00FB9C  22DA               	addwfc	fsr2h,f,c
  3812  00FB9E  50DF               	movf	indf2,w,c
  3813  00FBA0  6E01               	movwf	writeEEPROM@data,c
  3814  00FBA2  51EA               	movf	standbyMode@n& (0+255),w,b
  3815  00FBA4  0F0D               	addlw	13
  3816  00FBA6  EC51  F064         	call	_writeEEPROM
  3817                           
  3818                           ;standbyMode.c: 1809: writeEEPROM(14+n, flatPieces[i]);
  3819  00FBAA  90D8               	bcf	status,0,c
  3820  00FBAC  0100               	movlb	0	; () banked
  3821  00FBAE  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3822  00FBB0  6ED9               	movwf	fsr2l,c
  3823  00FBB2  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3824  00FBB4  6EDA               	movwf	fsr2h,c
  3825  00FBB6  0E90               	movlw	low standbyMode@flatPieces
  3826  00FBB8  26D9               	addwf	fsr2l,f,c
  3827  00FBBA  0E00               	movlw	high standbyMode@flatPieces
  3828  00FBBC  22DA               	addwfc	fsr2h,f,c
  3829  00FBBE  50DF               	movf	indf2,w,c
  3830  00FBC0  6E01               	movwf	writeEEPROM@data,c
  3831  00FBC2  51EA               	movf	standbyMode@n& (0+255),w,b
  3832  00FBC4  0F0E               	addlw	14
  3833  00FBC6  EC51  F064         	call	_writeEEPROM
  3834                           
  3835                           ;standbyMode.c: 1810: writeEEPROM(15+n, longPieces[i]);
  3836  00FBCA  90D8               	bcf	status,0,c
  3837  00FBCC  0100               	movlb	0	; () banked
  3838  00FBCE  35F4               	rlcf	standbyMode@i& (0+255),w,b
  3839  00FBD0  6ED9               	movwf	fsr2l,c
  3840  00FBD2  35F5               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3841  00FBD4  6EDA               	movwf	fsr2h,c
  3842  00FBD6  0EA0               	movlw	low standbyMode@longPieces
  3843  00FBD8  26D9               	addwf	fsr2l,f,c
  3844  00FBDA  0E00               	movlw	high standbyMode@longPieces
  3845  00FBDC  22DA               	addwfc	fsr2h,f,c
  3846  00FBDE  50DF               	movf	indf2,w,c
  3847  00FBE0  6E01               	movwf	writeEEPROM@data,c
  3848  00FBE2  51EA               	movf	standbyMode@n& (0+255),w,b
  3849  00FBE4  0F0F               	addlw	15
  3850  00FBE6  EC51  F064         	call	_writeEEPROM
  3851  00FBEA  0100               	movlb	0	; () banked
  3852  00FBEC  4BF4               	infsnz	standbyMode@i& (0+255),f,b
  3853  00FBEE  2BF5               	incf	(standbyMode@i+1)& (0+255),f,b
  3854                           
  3855                           ; BSR set to: 0
  3856  00FBF0  51F5               	movf	(standbyMode@i+1)& (0+255),w,b
  3857  00FBF2  E101               	bnz	l6574
  3858  00FBF4  D77B               	goto	L1
  3859  00FBF6                     u7660:
  3860  00FBF6                     l6574:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;standbyMode.c: 1811: }
  3864                           ;standbyMode.c: 1812: return 1;
  3865  00FBF6  0E00               	movlw	0
  3866  00FBF8  6E53               	movwf	?_standbyMode+1,c
  3867  00FBFA  0E01               	movlw	1
  3868  00FBFC  6E52               	movwf	?_standbyMode,c
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;standbyMode.c: 1813: }
  3872                           ;standbyMode.c: 1814: }
  3873                           
  3874                           ; BSR set to: 0
  3875  00FBFE  0012               	return	
  3876  00FC00                     l658:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;standbyMode.c: 1815: else if (keypress == 14){
  3880                           
  3881                           ; BSR set to: 0
  3882  00FC00  0E0E               	movlw	14
  3883  00FC02  19DB               	xorwf	standbyMode@keypress& (0+255),w,b
  3884  00FC04  A4D8               	btfss	status,2,c
  3885  00FC06  D05F               	goto	l715
  3886  00FC08                     u7670:
  3887                           
  3888                           ;standbyMode.c: 1817: unsigned int whichKey = viewLogs();
  3889                           
  3890                           ; BSR set to: 0
  3891                           
  3892                           ;standbyMode.c: 1816: while (1){
  3893  00FC08  EC52  F06B         	call	_viewLogs	;wreg free
  3894  00FC0C  C046  F0D9         	movff	?_viewLogs,standbyMode@whichKey
  3895  00FC10  C047  F0DA         	movff	?_viewLogs+1,standbyMode@whichKey+1
  3896                           
  3897                           ;standbyMode.c: 1818: if (whichKey == 15){
  3898  00FC14  0E0F               	movlw	15
  3899  00FC16  0100               	movlb	0	; () banked
  3900  00FC18  19D9               	xorwf	standbyMode@whichKey& (0+255),w,b
  3901  00FC1A  11DA               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  3902  00FC1C  B4D8               	btfsc	status,2,c
  3903  00FC1E  D7F4               	goto	u7670
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;standbyMode.c: 1821: else if (whichKey == 14){
  3907                           
  3908                           ; BSR set to: 0
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;standbyMode.c: 1820: }
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;standbyMode.c: 1819: continue;
  3915  00FC20  0E0E               	movlw	14
  3916  00FC22  19D9               	xorwf	standbyMode@whichKey& (0+255),w,b
  3917  00FC24  11DA               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  3918  00FC26  A4D8               	btfss	status,2,c
  3919  00FC28  D020               	goto	l720
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;standbyMode.c: 1822: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3923  00FC2A  0E01               	movlw	1
  3924  00FC2C  ECE1  F063         	call	_lcdInst
  3925  00FC30  0EC3               	movlw	195
  3926  00FC32  6E54               	movwf	??_standbyMode& (0+255),c
  3927  00FC34  0ECD               	movlw	205
  3928  00FC36                     u8137:
  3929  00FC36  2EE8               	decfsz	wreg,f,c
  3930  00FC38  D7FE               	bra	u8137
  3931  00FC3A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3932  00FC3C  D7FC               	bra	u8137
  3933  00FC3E  F000               	nop	
  3934                           
  3935                           ;standbyMode.c: 1823: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3936  00FC40  0E0C               	movlw	12
  3937  00FC42  ECE1  F063         	call	_lcdInst
  3938                           
  3939                           ;standbyMode.c: 1824: printf("Rebooting.");
  3940  00FC46  0E93               	movlw	low STR_66
  3941  00FC48  6E0D               	movwf	printf@f,c
  3942  00FC4A  0EFF               	movlw	high STR_66
  3943  00FC4C  6E0E               	movwf	printf@f+1,c
  3944  00FC4E  ECC5  F06C         	call	_printf	;wreg free
  3945                           
  3946                           ;standbyMode.c: 1825: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3947  00FC52  0E66               	movlw	102
  3948  00FC54  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  3949  00FC56  0E76               	movlw	118
  3950  00FC58  6E54               	movwf	??_standbyMode& (0+255),c
  3951  00FC5A  0EC1               	movlw	193
  3952  00FC5C                     u8147:
  3953  00FC5C  2EE8               	decfsz	wreg,f,c
  3954  00FC5E  D7FE               	bra	u8147
  3955  00FC60  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3956  00FC62  D7FC               	bra	u8147
  3957  00FC64  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3958  00FC66  D7FA               	bra	u8147
  3959  00FC68  D028               	goto	L2
  3960  00FC6A                     l720:
  3961                           
  3962                           ;standbyMode.c: 1828: else{
  3963                           ;standbyMode.c: 1829: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3964  00FC6A  0E01               	movlw	1
  3965  00FC6C  ECE1  F063         	call	_lcdInst
  3966  00FC70  0EC3               	movlw	195
  3967  00FC72  6E54               	movwf	??_standbyMode& (0+255),c
  3968  00FC74  0ECD               	movlw	205
  3969  00FC76                     u8157:
  3970  00FC76  2EE8               	decfsz	wreg,f,c
  3971  00FC78  D7FE               	bra	u8157
  3972  00FC7A  2E54               	decfsz	??_standbyMode& (0+255),f,c
  3973  00FC7C  D7FC               	bra	u8157
  3974  00FC7E  F000               	nop	
  3975                           
  3976                           ;standbyMode.c: 1830: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3977  00FC80  0E0C               	movlw	12
  3978  00FC82  ECE1  F063         	call	_lcdInst
  3979                           
  3980                           ;standbyMode.c: 1831: printf("Invalid key!");
  3981  00FC86  0E3C               	movlw	low STR_67
  3982  00FC88  6E0D               	movwf	printf@f,c
  3983  00FC8A  0EFF               	movlw	high STR_67
  3984  00FC8C  6E0E               	movwf	printf@f+1,c
  3985  00FC8E  ECC5  F06C         	call	_printf	;wreg free
  3986                           
  3987                           ;standbyMode.c: 1832: lcdInst(0xC0);;
  3988  00FC92  0EC0               	movlw	192
  3989  00FC94  ECE1  F063         	call	_lcdInst
  3990                           
  3991                           ;standbyMode.c: 1833: printf("Rebooting.");
  3992  00FC98  0E93               	movlw	low STR_66
  3993  00FC9A  6E0D               	movwf	printf@f,c
  3994  00FC9C  0EFF               	movlw	high STR_66
  3995  00FC9E  6E0E               	movwf	printf@f+1,c
  3996  00FCA0  ECC5  F06C         	call	_printf	;wreg free
  3997                           
  3998                           ;standbyMode.c: 1834: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3999  00FCA4  0E66               	movlw	102
  4000  00FCA6  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  4001  00FCA8  0E76               	movlw	118
  4002  00FCAA  6E54               	movwf	??_standbyMode& (0+255),c
  4003  00FCAC  0EC1               	movlw	193
  4004  00FCAE                     u8167:
  4005  00FCAE  2EE8               	decfsz	wreg,f,c
  4006  00FCB0  D7FE               	bra	u8167
  4007  00FCB2  2E54               	decfsz	??_standbyMode& (0+255),f,c
  4008  00FCB4  D7FC               	bra	u8167
  4009  00FCB6  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4010  00FCB8  D7FA               	bra	u8167
  4011  00FCBA                     L2:
  4012  00FCBA  F000               	nop	
  4013                           
  4014                           ;standbyMode.c: 1836: }
  4015                           ;standbyMode.c: 1837: }
  4016                           ;standbyMode.c: 1838: return 0;
  4017                           
  4018                           ;standbyMode.c: 1835: break;
  4019  00FCBC  0E00               	movlw	0
  4020  00FCBE  6E53               	movwf	?_standbyMode+1,c
  4021  00FCC0  0E00               	movlw	0
  4022  00FCC2  6E52               	movwf	?_standbyMode,c
  4023                           
  4024                           ;standbyMode.c: 1839: }
  4025  00FCC4  0012               	return	
  4026  00FCC6                     l715:
  4027                           
  4028                           ;standbyMode.c: 1841: else {
  4029                           ;standbyMode.c: 1842: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4030  00FCC6  0E01               	movlw	1
  4031  00FCC8  ECE1  F063         	call	_lcdInst
  4032  00FCCC  0EC3               	movlw	195
  4033  00FCCE  6E54               	movwf	??_standbyMode& (0+255),c
  4034  00FCD0  0ECD               	movlw	205
  4035  00FCD2                     u8177:
  4036  00FCD2  2EE8               	decfsz	wreg,f,c
  4037  00FCD4  D7FE               	bra	u8177
  4038  00FCD6  2E54               	decfsz	??_standbyMode& (0+255),f,c
  4039  00FCD8  D7FC               	bra	u8177
  4040  00FCDA  F000               	nop	
  4041                           
  4042                           ;standbyMode.c: 1843: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4043  00FCDC  0E0C               	movlw	12
  4044  00FCDE  ECE1  F063         	call	_lcdInst
  4045                           
  4046                           ;standbyMode.c: 1844: printf("Invalid key!");
  4047  00FCE2  0E3C               	movlw	low STR_67
  4048  00FCE4  6E0D               	movwf	printf@f,c
  4049  00FCE6  0EFF               	movlw	high STR_67
  4050  00FCE8  6E0E               	movwf	printf@f+1,c
  4051  00FCEA  ECC5  F06C         	call	_printf	;wreg free
  4052                           
  4053                           ;standbyMode.c: 1845: lcdInst(0xC0);;
  4054  00FCEE  0EC0               	movlw	192
  4055  00FCF0  ECE1  F063         	call	_lcdInst
  4056                           
  4057                           ;standbyMode.c: 1846: printf("Rebooting.");
  4058  00FCF4  0E93               	movlw	low STR_66
  4059  00FCF6  6E0D               	movwf	printf@f,c
  4060  00FCF8  0EFF               	movlw	high STR_66
  4061  00FCFA  6E0E               	movwf	printf@f+1,c
  4062  00FCFC  ECC5  F06C         	call	_printf	;wreg free
  4063                           
  4064                           ;standbyMode.c: 1847: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4065  00FD00  0E66               	movlw	102
  4066  00FD02  6E55               	movwf	(??_standbyMode+1)& (0+255),c
  4067  00FD04  0E76               	movlw	118
  4068  00FD06  6E54               	movwf	??_standbyMode& (0+255),c
  4069  00FD08  0EC1               	movlw	193
  4070  00FD0A                     u8187:
  4071  00FD0A  2EE8               	decfsz	wreg,f,c
  4072  00FD0C  D7FE               	bra	u8187
  4073  00FD0E  2E54               	decfsz	??_standbyMode& (0+255),f,c
  4074  00FD10  D7FC               	bra	u8187
  4075  00FD12  2E55               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4076  00FD14  D7FA               	bra	u8187
  4077  00FD16  F000               	nop	
  4078                           
  4079                           ;standbyMode.c: 1848: return 0;
  4080  00FD18  0E00               	movlw	0
  4081  00FD1A  6E53               	movwf	?_standbyMode+1,c
  4082  00FD1C  0E00               	movlw	0
  4083  00FD1E  6E52               	movwf	?_standbyMode,c
  4084  00FD20  0012               	return	
  4085  00FD22                     __end_of_standbyMode:
  4086                           	opt stack 0
  4087                           tblptru	equ	0xFF8
  4088                           tblptrh	equ	0xFF7
  4089                           tblptrl	equ	0xFF6
  4090                           tablat	equ	0xFF5
  4091                           prodh	equ	0xFF4
  4092                           prodl	equ	0xFF3
  4093                           postinc0	equ	0xFEE
  4094                           wreg	equ	0xFE8
  4095                           postdec1	equ	0xFE5
  4096                           plusw1	equ	0xFE3
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           plusw2	equ	0xFDB
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function _which_drawer *****************
  4107 ;; Defined at:
  4108 ;;		line 1417 in file "standbyMode.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  rand            2   39[COMRAM] unsigned int 
  4113 ;;  keypress        1   47[COMRAM] unsigned char 
  4114 ;;  count           2   45[COMRAM] unsigned int 
  4115 ;;  backCheck       2   43[COMRAM] unsigned int 
  4116 ;;  sum             2   41[COMRAM] unsigned int 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  2   36[COMRAM] unsigned int 
  4119 ;; Registers used:
  4120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;Total ram usage:       12 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    3
  4133 ;; This function calls:
  4134 ;;		_decode_drawer
  4135 ;;		_lcdInst
  4136 ;;		_printf
  4137 ;;		_putch
  4138 ;; This function is called by:
  4139 ;;		_standbyMode
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text2
  4144  00D4A0                     __ptext2:
  4145                           	opt stack 0
  4146  00D4A0                     _which_drawer:
  4147                           	opt stack 26
  4148                           
  4149                           ;standbyMode.c: 1418: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4150                           
  4151                           ;incstack = 0
  4152  00D4A0  0E0C               	movlw	12
  4153  00D4A2  ECE1  F063         	call	_lcdInst
  4154                           
  4155                           ;standbyMode.c: 1419: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4156  00D4A6  0E01               	movlw	1
  4157  00D4A8  ECE1  F063         	call	_lcdInst
  4158  00D4AC  0EC3               	movlw	195
  4159  00D4AE  6E27               	movwf	??_which_drawer& (0+255),c
  4160  00D4B0  0ECD               	movlw	205
  4161  00D4B2                     u8197:
  4162  00D4B2  2EE8               	decfsz	wreg,f,c
  4163  00D4B4  D7FE               	bra	u8197
  4164  00D4B6  2E27               	decfsz	??_which_drawer& (0+255),f,c
  4165  00D4B8  D7FC               	bra	u8197
  4166  00D4BA  F000               	nop	
  4167                           
  4168                           ;standbyMode.c: 1420: printf("Drawer number:");
  4169  00D4BC  0E8C               	movlw	low STR_39
  4170  00D4BE  6E0D               	movwf	printf@f,c
  4171  00D4C0  0EFE               	movlw	high STR_39
  4172  00D4C2  6E0E               	movwf	printf@f+1,c
  4173  00D4C4  ECC5  F06C         	call	_printf	;wreg free
  4174                           
  4175                           ;standbyMode.c: 1421: lcdInst(0xC0);;
  4176  00D4C8  0EC0               	movlw	192
  4177  00D4CA  ECE1  F063         	call	_lcdInst
  4178                           
  4179                           ;standbyMode.c: 1423: unsigned int count = 0;
  4180  00D4CE  0E00               	movlw	0
  4181  00D4D0  6E2F               	movwf	which_drawer@count+1,c
  4182  00D4D2  0E00               	movlw	0
  4183  00D4D4  6E2E               	movwf	which_drawer@count,c
  4184                           
  4185                           ;standbyMode.c: 1424: unsigned int sum = 0;
  4186  00D4D6  0E00               	movlw	0
  4187  00D4D8  6E2B               	movwf	which_drawer@sum+1,c
  4188  00D4DA  0E00               	movlw	0
  4189  00D4DC  6E2A               	movwf	which_drawer@sum,c
  4190                           
  4191                           ;standbyMode.c: 1425: unsigned int backCheck = 0;
  4192  00D4DE  0E00               	movlw	0
  4193  00D4E0  6E2D               	movwf	which_drawer@backCheck+1,c
  4194  00D4E2  0E00               	movlw	0
  4195  00D4E4  6E2C               	movwf	which_drawer@backCheck,c
  4196  00D4E6                     
  4197                           ;standbyMode.c: 1428: while(PORTBbits.RB1 == 0){ continue; }
  4198  00D4E6  A281               	btfss	3969,1,c	;volatile
  4199  00D4E8  D7FE               	goto	l601
  4200                           
  4201                           ;standbyMode.c: 1429: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4202  00D4EA  3881               	swapf	3969,w,c	;volatile
  4203  00D4EC  0B0F               	andlw	15
  4204  00D4EE  0B0F               	andlw	15
  4205  00D4F0  6E30               	movwf	which_drawer@keypress,c
  4206  00D4F2  B281               	btfsc	3969,1,c	;volatile
  4207  00D4F4  D7FE               	goto	l606
  4208                           
  4209                           ;standbyMode.c: 1432: if(keypress == 15){
  4210  00D4F6  0E0F               	movlw	15
  4211  00D4F8  1830               	xorwf	which_drawer@keypress,w,c
  4212  00D4FA  B4D8               	btfsc	status,2,c
  4213  00D4FC  D0BA               	goto	l609
  4214                           
  4215                           ;standbyMode.c: 1435: else if (keypress == 14){
  4216                           
  4217                           ;standbyMode.c: 1434: }
  4218                           
  4219                           ;standbyMode.c: 1433: break;
  4220  00D4FE  0E0E               	movlw	14
  4221  00D500  1830               	xorwf	which_drawer@keypress,w,c
  4222  00D502  A4D8               	btfss	status,2,c
  4223  00D504  D005               	goto	l611
  4224                           
  4225                           ;standbyMode.c: 1436: backCheck = 100;
  4226  00D506  0E00               	movlw	0
  4227  00D508  6E2D               	movwf	which_drawer@backCheck+1,c
  4228  00D50A  0E64               	movlw	100
  4229  00D50C  6E2C               	movwf	which_drawer@backCheck,c
  4230                           
  4231                           ;standbyMode.c: 1437: break;
  4232  00D50E  D0B1               	goto	l609
  4233  00D510                     l611:
  4234                           
  4235                           ;standbyMode.c: 1439: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  4236  00D510  5030               	movf	which_drawer@keypress,w,c
  4237  00D512  B4D8               	btfsc	status,2,c
  4238  00D514  D023               	goto	u6990
  4239  00D516  0430               	decf	which_drawer@keypress,w,c
  4240  00D518  B4D8               	btfsc	status,2,c
  4241  00D51A  D020               	goto	u6990
  4242  00D51C  0E02               	movlw	2
  4243  00D51E  1830               	xorwf	which_drawer@keypress,w,c
  4244  00D520  B4D8               	btfsc	status,2,c
  4245  00D522  D01C               	goto	u6990
  4246  00D524  0E04               	movlw	4
  4247  00D526  1830               	xorwf	which_drawer@keypress,w,c
  4248  00D528  B4D8               	btfsc	status,2,c
  4249  00D52A  D018               	goto	u6990
  4250  00D52C  0E05               	movlw	5
  4251  00D52E  1830               	xorwf	which_drawer@keypress,w,c
  4252  00D530  B4D8               	btfsc	status,2,c
  4253  00D532  D014               	goto	u6990
  4254  00D534  0E06               	movlw	6
  4255  00D536  1830               	xorwf	which_drawer@keypress,w,c
  4256  00D538  B4D8               	btfsc	status,2,c
  4257  00D53A  D010               	goto	u6990
  4258  00D53C  0E08               	movlw	8
  4259  00D53E  1830               	xorwf	which_drawer@keypress,w,c
  4260  00D540  B4D8               	btfsc	status,2,c
  4261  00D542  D00C               	goto	u6990
  4262  00D544  0E09               	movlw	9
  4263  00D546  1830               	xorwf	which_drawer@keypress,w,c
  4264  00D548  B4D8               	btfsc	status,2,c
  4265  00D54A  D008               	goto	u6990
  4266  00D54C  0E0A               	movlw	10
  4267  00D54E  1830               	xorwf	which_drawer@keypress,w,c
  4268  00D550  B4D8               	btfsc	status,2,c
  4269  00D552  D004               	goto	u6990
  4270  00D554  0E0D               	movlw	13
  4271  00D556  1830               	xorwf	which_drawer@keypress,w,c
  4272  00D558  A4D8               	btfss	status,2,c
  4273  00D55A  D06A               	goto	l613
  4274  00D55C                     u6990:
  4275                           
  4276                           ;standbyMode.c: 1440: if (count == 0){
  4277  00D55C  502E               	movf	which_drawer@count,w,c
  4278  00D55E  102F               	iorwf	which_drawer@count+1,w,c
  4279  00D560  A4D8               	btfss	status,2,c
  4280  00D562  D046               	goto	l616
  4281                           
  4282                           ;standbyMode.c: 1441: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  4283  00D564  0430               	decf	which_drawer@keypress,w,c
  4284  00D566  B4D8               	btfsc	status,2,c
  4285  00D568  D01C               	goto	u7080
  4286  00D56A  0E02               	movlw	2
  4287  00D56C  1830               	xorwf	which_drawer@keypress,w,c
  4288  00D56E  B4D8               	btfsc	status,2,c
  4289  00D570  D018               	goto	u7080
  4290  00D572  0E04               	movlw	4
  4291  00D574  1830               	xorwf	which_drawer@keypress,w,c
  4292  00D576  B4D8               	btfsc	status,2,c
  4293  00D578  D014               	goto	u7080
  4294  00D57A  0E05               	movlw	5
  4295  00D57C  1830               	xorwf	which_drawer@keypress,w,c
  4296  00D57E  B4D8               	btfsc	status,2,c
  4297  00D580  D010               	goto	u7080
  4298  00D582  0E06               	movlw	6
  4299  00D584  1830               	xorwf	which_drawer@keypress,w,c
  4300  00D586  B4D8               	btfsc	status,2,c
  4301  00D588  D00C               	goto	u7080
  4302  00D58A  0E08               	movlw	8
  4303  00D58C  1830               	xorwf	which_drawer@keypress,w,c
  4304  00D58E  B4D8               	btfsc	status,2,c
  4305  00D590  D008               	goto	u7080
  4306  00D592  0E09               	movlw	9
  4307  00D594  1830               	xorwf	which_drawer@keypress,w,c
  4308  00D596  B4D8               	btfsc	status,2,c
  4309  00D598  D004               	goto	u7080
  4310  00D59A  0E0A               	movlw	10
  4311  00D59C  1830               	xorwf	which_drawer@keypress,w,c
  4312  00D59E  A4D8               	btfss	status,2,c
  4313  00D5A0  D011               	goto	l617
  4314  00D5A2                     u7080:
  4315                           
  4316                           ;standbyMode.c: 1442: count += 2;
  4317  00D5A2  0E02               	movlw	2
  4318  00D5A4  262E               	addwf	which_drawer@count,f,c
  4319  00D5A6  0E00               	movlw	0
  4320  00D5A8  222F               	addwfc	which_drawer@count+1,f,c
  4321                           
  4322                           ;standbyMode.c: 1443: putch(input[keypress]);
  4323  00D5AA  5030               	movf	which_drawer@keypress,w,c
  4324  00D5AC  0D01               	mullw	1
  4325  00D5AE  0E34               	movlw	low _input
  4326  00D5B0  24F3               	addwf	prodl,w,c
  4327  00D5B2  6EF6               	movwf	tblptrl,c
  4328  00D5B4  0EFD               	movlw	high _input
  4329  00D5B6  20F4               	addwfc	prodh,w,c
  4330  00D5B8  6EF7               	movwf	tblptrh,c
  4331  00D5BA                     	if	0	;There are less than 3 active tblptr bytes
  4332  00D5BA                     	endif
  4333  00D5BA  0008               	tblrd		*
  4334  00D5BC  50F5               	movf	tablat,w,c
  4335  00D5BE  ECEB  F063         	call	_putch
  4336  00D5C2  D034               	goto	l627
  4337  00D5C4                     l617:
  4338                           
  4339                           ;standbyMode.c: 1446: else if (keypress == 0){
  4340  00D5C4  5030               	movf	which_drawer@keypress,w,c
  4341  00D5C6  A4D8               	btfss	status,2,c
  4342  00D5C8  D78E               	goto	l601
  4343                           
  4344                           ;standbyMode.c: 1447: putch(input[keypress]);
  4345  00D5CA  5030               	movf	which_drawer@keypress,w,c
  4346  00D5CC  0D01               	mullw	1
  4347  00D5CE  0E34               	movlw	low _input
  4348  00D5D0  24F3               	addwf	prodl,w,c
  4349  00D5D2  6EF6               	movwf	tblptrl,c
  4350  00D5D4  0EFD               	movlw	high _input
  4351  00D5D6  20F4               	addwfc	prodh,w,c
  4352  00D5D8  6EF7               	movwf	tblptrh,c
  4353  00D5DA                     	if	0	;There are less than 3 active tblptr bytes
  4354  00D5DA                     	endif
  4355  00D5DA  0008               	tblrd		*
  4356  00D5DC  50F5               	movf	tablat,w,c
  4357  00D5DE  ECEB  F063         	call	_putch
  4358                           
  4359                           ;standbyMode.c: 1448: count += 1;
  4360  00D5E2  4A2E               	infsnz	which_drawer@count,f,c
  4361  00D5E4  2A2F               	incf	which_drawer@count+1,f,c
  4362  00D5E6  D020               	goto	u7130
  4363  00D5E8                     L3:
  4364  00D5E8  262A               	addwf	which_drawer@sum,f,c
  4365  00D5EA  0E00               	movlw	0
  4366  00D5EC  222B               	addwfc	which_drawer@sum+1,f,c
  4367                           
  4368                           ;standbyMode.c: 1450: }
  4369                           ;standbyMode.c: 1451: }
  4370  00D5EE  D77B               	goto	l601
  4371  00D5F0                     l616:
  4372                           
  4373                           ;standbyMode.c: 1452: else if (count == 1){
  4374  00D5F0  042E               	decf	which_drawer@count,w,c
  4375  00D5F2  102F               	iorwf	which_drawer@count+1,w,c
  4376  00D5F4  A4D8               	btfss	status,2,c
  4377  00D5F6  D777               	goto	l601
  4378                           
  4379                           ;standbyMode.c: 1453: if (keypress < 8 || keypress == 13){
  4380  00D5F8  0E07               	movlw	7
  4381  00D5FA  6430               	cpfsgt	which_drawer@keypress,c
  4382  00D5FC  D004               	goto	u7120
  4383  00D5FE  0E0D               	movlw	13
  4384  00D600  1830               	xorwf	which_drawer@keypress,w,c
  4385  00D602  A4D8               	btfss	status,2,c
  4386  00D604  D770               	goto	l601
  4387  00D606                     u7120:
  4388                           
  4389                           ;standbyMode.c: 1454: putch(input[keypress]);
  4390  00D606  5030               	movf	which_drawer@keypress,w,c
  4391  00D608  0D01               	mullw	1
  4392  00D60A  0E34               	movlw	low _input
  4393  00D60C  24F3               	addwf	prodl,w,c
  4394  00D60E  6EF6               	movwf	tblptrl,c
  4395  00D610  0EFD               	movlw	high _input
  4396  00D612  20F4               	addwfc	prodh,w,c
  4397  00D614  6EF7               	movwf	tblptrh,c
  4398  00D616                     	if	0	;There are less than 3 active tblptr bytes
  4399  00D616                     	endif
  4400  00D616  0008               	tblrd		*
  4401  00D618  50F5               	movf	tablat,w,c
  4402  00D61A  ECEB  F063         	call	_putch
  4403                           
  4404                           ;standbyMode.c: 1455: count += 1;
  4405  00D61E  4A2E               	infsnz	which_drawer@count,f,c
  4406  00D620  2A2F               	incf	which_drawer@count+1,f,c
  4407                           
  4408                           ;standbyMode.c: 1456: if(keypress == 0){
  4409  00D622  5030               	movf	which_drawer@keypress,w,c
  4410  00D624  A4D8               	btfss	status,2,c
  4411  00D626  D002               	goto	l627
  4412  00D628                     u7130:
  4413                           
  4414                           ;standbyMode.c: 1457: sum += 20;
  4415  00D628  0E14               	movlw	20
  4416  00D62A  D7DE               	goto	L3
  4417  00D62C                     l627:
  4418                           
  4419                           ;standbyMode.c: 1459: else {
  4420                           ;standbyMode.c: 1460: sum += keypress;
  4421  00D62C  5030               	movf	which_drawer@keypress,w,c
  4422  00D62E  D7DC               	goto	L3
  4423  00D630                     l613:
  4424                           
  4425                           ;standbyMode.c: 1465: else if (keypress == 12){
  4426  00D630  0E0C               	movlw	12
  4427  00D632  1830               	xorwf	which_drawer@keypress,w,c
  4428  00D634  A4D8               	btfss	status,2,c
  4429  00D636  D757               	goto	l601
  4430                           
  4431                           ;standbyMode.c: 1466: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4432  00D638  0E01               	movlw	1
  4433  00D63A  ECE1  F063         	call	_lcdInst
  4434  00D63E  0EC3               	movlw	195
  4435  00D640  6E27               	movwf	??_which_drawer& (0+255),c
  4436  00D642  0ECD               	movlw	205
  4437  00D644                     u8207:
  4438  00D644  2EE8               	decfsz	wreg,f,c
  4439  00D646  D7FE               	bra	u8207
  4440  00D648  2E27               	decfsz	??_which_drawer& (0+255),f,c
  4441  00D64A  D7FC               	bra	u8207
  4442  00D64C  F000               	nop	
  4443                           
  4444                           ;standbyMode.c: 1467: printf("Drawer number:");
  4445  00D64E  0E8C               	movlw	low STR_39
  4446  00D650  6E0D               	movwf	printf@f,c
  4447  00D652  0EFE               	movlw	high STR_39
  4448  00D654  6E0E               	movwf	printf@f+1,c
  4449  00D656  ECC5  F06C         	call	_printf	;wreg free
  4450                           
  4451                           ;standbyMode.c: 1468: lcdInst(0xC0);;
  4452  00D65A  0EC0               	movlw	192
  4453  00D65C  ECE1  F063         	call	_lcdInst
  4454                           
  4455                           ;standbyMode.c: 1469: count = 0;
  4456  00D660  0E00               	movlw	0
  4457  00D662  6E2F               	movwf	which_drawer@count+1,c
  4458  00D664  0E00               	movlw	0
  4459  00D666  6E2E               	movwf	which_drawer@count,c
  4460                           
  4461                           ;standbyMode.c: 1470: sum = 0;
  4462  00D668  0E00               	movlw	0
  4463  00D66A  6E2B               	movwf	which_drawer@sum+1,c
  4464  00D66C  0E00               	movlw	0
  4465  00D66E  6E2A               	movwf	which_drawer@sum,c
  4466  00D670  D73A               	goto	l601
  4467  00D672                     l609:
  4468                           
  4469                           ;standbyMode.c: 1471: }
  4470                           ;standbyMode.c: 1472: }
  4471                           ;standbyMode.c: 1474: if (backCheck == 100){
  4472  00D672  0E64               	movlw	100
  4473  00D674  182C               	xorwf	which_drawer@backCheck,w,c
  4474  00D676  102D               	iorwf	which_drawer@backCheck+1,w,c
  4475  00D678  A4D8               	btfss	status,2,c
  4476  00D67A  D005               	goto	l632
  4477                           
  4478                           ;standbyMode.c: 1475: return backCheck;
  4479  00D67C  C02C  F025         	movff	which_drawer@backCheck,?_which_drawer
  4480  00D680  C02D  F026         	movff	which_drawer@backCheck+1,?_which_drawer+1
  4481                           
  4482                           ;standbyMode.c: 1476: }
  4483  00D684  0012               	return	
  4484  00D686                     l632:
  4485                           
  4486                           ;standbyMode.c: 1477: else{
  4487                           ;standbyMode.c: 1478: unsigned int rand = decode_drawer(sum);
  4488  00D686  C02A  F001         	movff	which_drawer@sum,decode_drawer@drawer
  4489  00D68A  C02B  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  4490  00D68E  EC6A  F067         	call	_decode_drawer	;wreg free
  4491  00D692  C001  F028         	movff	?_decode_drawer,which_drawer@rand
  4492  00D696  C002  F029         	movff	?_decode_drawer+1,which_drawer@rand+1
  4493                           
  4494                           ;standbyMode.c: 1479: return rand;
  4495  00D69A  C028  F025         	movff	which_drawer@rand,?_which_drawer
  4496  00D69E  C029  F026         	movff	which_drawer@rand+1,?_which_drawer+1
  4497  00D6A2  0012               	return	
  4498  00D6A4                     __end_of_which_drawer:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           postinc0	equ	0xFEE
  4507                           wreg	equ	0xFE8
  4508                           postdec1	equ	0xFE5
  4509                           plusw1	equ	0xFE3
  4510                           fsr1l	equ	0xFE1
  4511                           indf2	equ	0xFDF
  4512                           postinc2	equ	0xFDE
  4513                           postdec2	equ	0xFDD
  4514                           plusw2	equ	0xFDB
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function _decode_drawer *****************
  4520 ;; Defined at:
  4521 ;;		line 1339 in file "standbyMode.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  drawer          2    0[COMRAM] unsigned int 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  returnValue     2    4[COMRAM] unsigned int 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  2    0[COMRAM] unsigned int 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;Total ram usage:        6 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_which_drawer
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text3
  4549  00CED4                     __ptext3:
  4550                           	opt stack 0
  4551  00CED4                     _decode_drawer:
  4552                           	opt stack 28
  4553                           
  4554                           ;standbyMode.c: 1340: unsigned int returnValue;
  4555                           ;standbyMode.c: 1342: switch(drawer){
  4556                           
  4557                           ;incstack = 0
  4558  00CED4  D03A               	goto	l582
  4559  00CED6                     
  4560                           ;standbyMode.c: 1345: returnValue = 1;
  4561  00CED6  0E00               	movlw	0
  4562  00CED8  6E06               	movwf	decode_drawer@returnValue+1,c
  4563  00CEDA  0E01               	movlw	1
  4564  00CEDC  D02F               	goto	L15
  4565  00CEDE                     
  4566                           ;standbyMode.c: 1350: returnValue = 2;
  4567  00CEDE  0E00               	movlw	0
  4568  00CEE0  6E06               	movwf	decode_drawer@returnValue+1,c
  4569  00CEE2  0E02               	movlw	2
  4570  00CEE4  D02B               	goto	L15
  4571  00CEE6                     
  4572                           ;standbyMode.c: 1355: returnValue = 3;
  4573  00CEE6  0E00               	movlw	0
  4574  00CEE8  6E06               	movwf	decode_drawer@returnValue+1,c
  4575  00CEEA  0E03               	movlw	3
  4576  00CEEC  D027               	goto	L15
  4577  00CEEE                     
  4578                           ;standbyMode.c: 1360: returnValue = 7;
  4579  00CEEE  0E00               	movlw	0
  4580  00CEF0  6E06               	movwf	decode_drawer@returnValue+1,c
  4581  00CEF2  0E07               	movlw	7
  4582  00CEF4  D023               	goto	L15
  4583  00CEF6                     
  4584                           ;standbyMode.c: 1365: returnValue = 8;
  4585  00CEF6  0E00               	movlw	0
  4586  00CEF8  6E06               	movwf	decode_drawer@returnValue+1,c
  4587  00CEFA  0E08               	movlw	8
  4588  00CEFC  D01F               	goto	L15
  4589  00CEFE                     
  4590                           ;standbyMode.c: 1370: returnValue = 9;
  4591  00CEFE  0E00               	movlw	0
  4592  00CF00  6E06               	movwf	decode_drawer@returnValue+1,c
  4593  00CF02  0E09               	movlw	9
  4594  00CF04  D01B               	goto	L15
  4595  00CF06                     
  4596                           ;standbyMode.c: 1375: returnValue = 10;
  4597  00CF06  0E00               	movlw	0
  4598  00CF08  6E06               	movwf	decode_drawer@returnValue+1,c
  4599  00CF0A  0E0A               	movlw	10
  4600  00CF0C  D017               	goto	L15
  4601  00CF0E                     
  4602                           ;standbyMode.c: 1380: returnValue = 11;
  4603  00CF0E  0E00               	movlw	0
  4604  00CF10  6E06               	movwf	decode_drawer@returnValue+1,c
  4605  00CF12  0E0B               	movlw	11
  4606  00CF14  D013               	goto	L15
  4607  00CF16                     
  4608                           ;standbyMode.c: 1385: returnValue = 12;
  4609  00CF16  0E00               	movlw	0
  4610  00CF18  6E06               	movwf	decode_drawer@returnValue+1,c
  4611  00CF1A  0E0C               	movlw	12
  4612  00CF1C  D00F               	goto	L15
  4613  00CF1E                     
  4614                           ;standbyMode.c: 1390: returnValue = 13;
  4615  00CF1E  0E00               	movlw	0
  4616  00CF20  6E06               	movwf	decode_drawer@returnValue+1,c
  4617  00CF22  0E0D               	movlw	13
  4618  00CF24  D00B               	goto	L15
  4619  00CF26                     
  4620                           ;standbyMode.c: 1395: returnValue = 14;
  4621  00CF26  0E00               	movlw	0
  4622  00CF28  6E06               	movwf	decode_drawer@returnValue+1,c
  4623  00CF2A  0E0E               	movlw	14
  4624  00CF2C  D007               	goto	L15
  4625  00CF2E                     
  4626                           ;standbyMode.c: 1400: returnValue = 15;
  4627  00CF2E  0E00               	movlw	0
  4628  00CF30  6E06               	movwf	decode_drawer@returnValue+1,c
  4629  00CF32  0E0F               	movlw	15
  4630  00CF34  D003               	goto	L15
  4631  00CF36                     
  4632                           ;standbyMode.c: 1405: returnValue = 16;
  4633  00CF36  0E00               	movlw	0
  4634  00CF38  6E06               	movwf	decode_drawer@returnValue+1,c
  4635  00CF3A  0E10               	movlw	16
  4636  00CF3C                     L15:
  4637  00CF3C  6E05               	movwf	decode_drawer@returnValue,c
  4638                           
  4639                           ;standbyMode.c: 1406: break;
  4640  00CF3E  D036               	goto	l584
  4641  00CF40                     l597:
  4642                           
  4643                           ;standbyMode.c: 1409: returnValue = drawer;
  4644  00CF40  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  4645  00CF44  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  4646                           
  4647                           ;standbyMode.c: 1411: }
  4648                           
  4649                           ;standbyMode.c: 1410: break;
  4650  00CF48  D031               	goto	l584
  4651  00CF4A                     l582:
  4652  00CF4A  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  4653  00CF4E  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  4654                           
  4655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4656                           ; Switch size 1, requested type "space"
  4657                           ; Number of cases is 1, Range of values is 0 to 0
  4658                           ; switch strategies available:
  4659                           ; Name         Instructions Cycles
  4660                           ; simple_byte            4     3 (average)
  4661                           ;	Chosen strategy is simple_byte
  4662  00CF52  5004               	movf	??_decode_drawer+1,w,c
  4663  00CF54  0A00               	xorlw	0	; case 0
  4664  00CF56  A4D8               	btfss	status,2,c
  4665  00CF58  D7F3               	goto	l597
  4666                           
  4667                           ; Switch size 1, requested type "space"
  4668                           ; Number of cases is 13, Range of values is 1 to 40
  4669                           ; switch strategies available:
  4670                           ; Name         Instructions Cycles
  4671                           ; simple_byte           40    21 (average)
  4672                           ;	Chosen strategy is simple_byte
  4673  00CF5A  5003               	movf	??_decode_drawer,w,c
  4674  00CF5C  0A01               	xorlw	1	; case 1
  4675  00CF5E  B4D8               	btfsc	status,2,c
  4676  00CF60  D7BE               	goto	l585
  4677  00CF62  0A03               	xorlw	3	; case 2
  4678  00CF64  B4D8               	btfsc	status,2,c
  4679  00CF66  D7BF               	goto	l586
  4680  00CF68  0A0A               	xorlw	10	; case 8
  4681  00CF6A  B4D8               	btfsc	status,2,c
  4682  00CF6C  D7C0               	goto	l587
  4683  00CF6E  0A01               	xorlw	1	; case 9
  4684  00CF70  B4D8               	btfsc	status,2,c
  4685  00CF72  D7C1               	goto	l588
  4686  00CF74  0A03               	xorlw	3	; case 10
  4687  00CF76  B4D8               	btfsc	status,2,c
  4688  00CF78  D7C2               	goto	l589
  4689  00CF7A  0A1E               	xorlw	30	; case 20
  4690  00CF7C  B4D8               	btfsc	status,2,c
  4691  00CF7E  D7AB               	goto	l583
  4692  00CF80  0A01               	xorlw	1	; case 21
  4693  00CF82  B4D8               	btfsc	status,2,c
  4694  00CF84  D7C8               	goto	l592
  4695  00CF86  0A03               	xorlw	3	; case 22
  4696  00CF88  B4D8               	btfsc	status,2,c
  4697  00CF8A  D7C9               	goto	l593
  4698  00CF8C  0A0E               	xorlw	14	; case 24
  4699  00CF8E  B4D8               	btfsc	status,2,c
  4700  00CF90  D7CA               	goto	l594
  4701  00CF92  0A01               	xorlw	1	; case 25
  4702  00CF94  B4D8               	btfsc	status,2,c
  4703  00CF96  D7CB               	goto	l595
  4704  00CF98  0A03               	xorlw	3	; case 26
  4705  00CF9A  B4D8               	btfsc	status,2,c
  4706  00CF9C  D7CC               	goto	l596
  4707  00CF9E  0A3B               	xorlw	59	; case 33
  4708  00CFA0  B4D8               	btfsc	status,2,c
  4709  00CFA2  D7B1               	goto	l590
  4710  00CFA4  0A09               	xorlw	9	; case 40
  4711  00CFA6  B4D8               	btfsc	status,2,c
  4712  00CFA8  D7B2               	goto	l591
  4713  00CFAA  D7CA               	goto	l597
  4714  00CFAC                     l584:
  4715                           
  4716                           ;standbyMode.c: 1412: return returnValue;
  4717  00CFAC  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  4718  00CFB0  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  4719  00CFB4  0012               	return		;funcret
  4720  00CFB6                     __end_of_decode_drawer:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           tblptrh	equ	0xFF7
  4724                           tblptrl	equ	0xFF6
  4725                           tablat	equ	0xFF5
  4726                           prodh	equ	0xFF4
  4727                           prodl	equ	0xFF3
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           plusw1	equ	0xFE3
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           plusw2	equ	0xFDB
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function _viewLogs *****************
  4742 ;; Defined at:
  4743 ;;		line 822 in file "standbyMode.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  keypress2       1   80[COMRAM] unsigned char 
  4748 ;;  logView         2   77[COMRAM] unsigned int 
  4749 ;;  returnVal       2   75[COMRAM] unsigned int 
  4750 ;;  checkLog        2   73[COMRAM] unsigned int 
  4751 ;;  logNumber       1   79[COMRAM] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  2   69[COMRAM] unsigned int 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:       12 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    4
  4768 ;; This function calls:
  4769 ;;		_displayLogs
  4770 ;;		_lcdInst
  4771 ;;		_printf
  4772 ;;		_putch
  4773 ;;		_readEEPROM
  4774 ;;		_verifyKeypress
  4775 ;; This function is called by:
  4776 ;;		_standbyMode
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text4
  4781  00D6A4                     __ptext4:
  4782                           	opt stack 0
  4783  00D6A4                     _viewLogs:
  4784                           	opt stack 25
  4785                           
  4786                           ;standbyMode.c: 824: unsigned char logNumber = readEEPROM(250);
  4787                           
  4788                           ;incstack = 0
  4789  00D6A4  0EFA               	movlw	250
  4790  00D6A6  ECF5  F063         	call	_readEEPROM
  4791  00D6AA  6E50               	movwf	viewLogs@logNumber,c
  4792                           
  4793                           ;standbyMode.c: 825: unsigned int logView = 0;
  4794  00D6AC  0E00               	movlw	0
  4795  00D6AE  6E4F               	movwf	viewLogs@logView+1,c
  4796  00D6B0  0E00               	movlw	0
  4797  00D6B2  6E4E               	movwf	viewLogs@logView,c
  4798                           
  4799                           ;standbyMode.c: 826: unsigned int checkLog = 0;
  4800  00D6B4  0E00               	movlw	0
  4801  00D6B6  6E4B               	movwf	viewLogs@checkLog+1,c
  4802  00D6B8  0E00               	movlw	0
  4803  00D6BA  6E4A               	movwf	viewLogs@checkLog,c
  4804                           
  4805                           ;standbyMode.c: 827: unsigned int returnVal = 0;
  4806  00D6BC  0E00               	movlw	0
  4807  00D6BE  6E4D               	movwf	viewLogs@returnVal+1,c
  4808  00D6C0  0E00               	movlw	0
  4809  00D6C2  6E4C               	movwf	viewLogs@returnVal,c
  4810                           
  4811                           ;standbyMode.c: 829: if (logNumber == 0){
  4812  00D6C4  5050               	movf	viewLogs@logNumber,w,c
  4813  00D6C6  A4D8               	btfss	status,2,c
  4814  00D6C8  D02B               	goto	l406
  4815                           
  4816                           ;standbyMode.c: 830: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4817  00D6CA  0E01               	movlw	1
  4818  00D6CC  ECE1  F063         	call	_lcdInst
  4819  00D6D0  0EC3               	movlw	195
  4820  00D6D2  6E48               	movwf	??_viewLogs& (0+255),c
  4821  00D6D4  0ECD               	movlw	205
  4822  00D6D6                     u8217:
  4823  00D6D6  2EE8               	decfsz	wreg,f,c
  4824  00D6D8  D7FE               	bra	u8217
  4825  00D6DA  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4826  00D6DC  D7FC               	bra	u8217
  4827  00D6DE  F000               	nop	
  4828                           
  4829                           ;standbyMode.c: 831: printf("No logs");
  4830  00D6E0  0EE1               	movlw	low STR_2
  4831  00D6E2  6E0D               	movwf	printf@f,c
  4832  00D6E4  0EFF               	movlw	high STR_2
  4833  00D6E6  6E0E               	movwf	printf@f+1,c
  4834  00D6E8  ECC5  F06C         	call	_printf	;wreg free
  4835                           
  4836                           ;standbyMode.c: 832: lcdInst(0xC0);;
  4837  00D6EC  0EC0               	movlw	192
  4838  00D6EE  ECE1  F063         	call	_lcdInst
  4839                           
  4840                           ;standbyMode.c: 833: printf("available.");
  4841  00D6F2  0E88               	movlw	low STR_3
  4842  00D6F4  6E0D               	movwf	printf@f,c
  4843  00D6F6  0EFF               	movlw	high STR_3
  4844  00D6F8  6E0E               	movwf	printf@f+1,c
  4845  00D6FA  ECC5  F06C         	call	_printf	;wreg free
  4846                           
  4847                           ;standbyMode.c: 834: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4848  00D6FE  0E66               	movlw	102
  4849  00D700  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4850  00D702  0E76               	movlw	118
  4851  00D704  6E48               	movwf	??_viewLogs& (0+255),c
  4852  00D706  0EC1               	movlw	193
  4853  00D708                     u8227:
  4854  00D708  2EE8               	decfsz	wreg,f,c
  4855  00D70A  D7FE               	bra	u8227
  4856  00D70C  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4857  00D70E  D7FC               	bra	u8227
  4858  00D710  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4859  00D712  D7FA               	bra	u8227
  4860  00D714  F000               	nop	
  4861                           
  4862                           ;standbyMode.c: 835: return 14;
  4863  00D716  0E00               	movlw	0
  4864  00D718  6E47               	movwf	?_viewLogs+1,c
  4865  00D71A  0E0E               	movlw	14
  4866  00D71C  6E46               	movwf	?_viewLogs,c
  4867                           
  4868                           ;standbyMode.c: 836: }
  4869  00D71E  0012               	return	
  4870  00D720                     l406:
  4871                           
  4872                           ;standbyMode.c: 837: else {
  4873                           ;standbyMode.c: 838: if (logNumber == 1){
  4874  00D720  0450               	decf	viewLogs@logNumber,w,c
  4875  00D722  A4D8               	btfss	status,2,c
  4876  00D724  D053               	goto	l409
  4877                           
  4878                           ;standbyMode.c: 839: logView = 1;
  4879  00D726  0E00               	movlw	0
  4880  00D728  6E4F               	movwf	viewLogs@logView+1,c
  4881  00D72A  0E01               	movlw	1
  4882  00D72C  6E4E               	movwf	viewLogs@logView,c
  4883                           
  4884                           ;standbyMode.c: 841: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4885  00D72E  0E01               	movlw	1
  4886  00D730  ECE1  F063         	call	_lcdInst
  4887  00D734  0EC3               	movlw	195
  4888  00D736  6E48               	movwf	??_viewLogs& (0+255),c
  4889  00D738  0ECD               	movlw	205
  4890  00D73A                     u8237:
  4891  00D73A  2EE8               	decfsz	wreg,f,c
  4892  00D73C  D7FE               	bra	u8237
  4893  00D73E  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4894  00D740  D7FC               	bra	u8237
  4895  00D742  F000               	nop	
  4896                           
  4897                           ;standbyMode.c: 842: printf("1 previous log");
  4898  00D744  0EAA               	movlw	low STR_4
  4899  00D746  6E0D               	movwf	printf@f,c
  4900  00D748  0EFE               	movlw	high STR_4
  4901  00D74A  6E0E               	movwf	printf@f+1,c
  4902  00D74C  ECC5  F06C         	call	_printf	;wreg free
  4903                           
  4904                           ;standbyMode.c: 843: lcdInst(0xC0);;
  4905  00D750  0EC0               	movlw	192
  4906  00D752  ECE1  F063         	call	_lcdInst
  4907                           
  4908                           ;standbyMode.c: 844: printf("available.");
  4909  00D756  0E88               	movlw	low STR_3
  4910  00D758  6E0D               	movwf	printf@f,c
  4911  00D75A  0EFF               	movlw	high STR_3
  4912  00D75C  6E0E               	movwf	printf@f+1,c
  4913  00D75E  ECC5  F06C         	call	_printf	;wreg free
  4914                           
  4915                           ;standbyMode.c: 845: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4916  00D762  0E66               	movlw	102
  4917  00D764  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4918  00D766  0E76               	movlw	118
  4919  00D768  6E48               	movwf	??_viewLogs& (0+255),c
  4920  00D76A  0EC1               	movlw	193
  4921  00D76C                     u8247:
  4922  00D76C  2EE8               	decfsz	wreg,f,c
  4923  00D76E  D7FE               	bra	u8247
  4924  00D770  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4925  00D772  D7FC               	bra	u8247
  4926  00D774  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4927  00D776  D7FA               	bra	u8247
  4928  00D778  F000               	nop	
  4929                           
  4930                           ;standbyMode.c: 847: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4931  00D77A  0E01               	movlw	1
  4932  00D77C  ECE1  F063         	call	_lcdInst
  4933  00D780  0EC3               	movlw	195
  4934  00D782  6E48               	movwf	??_viewLogs& (0+255),c
  4935  00D784  0ECD               	movlw	205
  4936  00D786                     u8257:
  4937  00D786  2EE8               	decfsz	wreg,f,c
  4938  00D788  D7FE               	bra	u8257
  4939  00D78A  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4940  00D78C  D7FC               	bra	u8257
  4941  00D78E  F000               	nop	
  4942                           
  4943                           ;standbyMode.c: 848: printf("Press any key to");
  4944  00D790  0ECB               	movlw	low STR_6
  4945  00D792  6E0D               	movwf	printf@f,c
  4946  00D794  0EFD               	movlw	high STR_6
  4947  00D796  6E0E               	movwf	printf@f+1,c
  4948  00D798  ECC5  F06C         	call	_printf	;wreg free
  4949                           
  4950                           ;standbyMode.c: 849: lcdInst(0xC0);;
  4951  00D79C  0EC0               	movlw	192
  4952  00D79E  ECE1  F063         	call	_lcdInst
  4953                           
  4954                           ;standbyMode.c: 850: printf("move forward.");
  4955  00D7A2  0E20               	movlw	low STR_7
  4956  00D7A4  6E0D               	movwf	printf@f,c
  4957  00D7A6  0EFF               	movlw	high STR_7
  4958  00D7A8  6E0E               	movwf	printf@f+1,c
  4959  00D7AA  ECC5  F06C         	call	_printf	;wreg free
  4960                           
  4961                           ;standbyMode.c: 851: _delay((unsigned long)((500)*(40000000/4000.0)));
  4962  00D7AE  0E1A               	movlw	26
  4963  00D7B0  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4964  00D7B2  0E5E               	movlw	94
  4965  00D7B4  6E48               	movwf	??_viewLogs& (0+255),c
  4966  00D7B6  0E6E               	movlw	110
  4967  00D7B8                     u8267:
  4968  00D7B8  2EE8               	decfsz	wreg,f,c
  4969  00D7BA  D7FE               	bra	u8267
  4970  00D7BC  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4971  00D7BE  D7FC               	bra	u8267
  4972  00D7C0  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4973  00D7C2  D7FA               	bra	u8267
  4974  00D7C4  D000               	nop2	
  4975  00D7C6                     
  4976                           ;standbyMode.c: 854: continue;
  4977  00D7C6  B281               	btfsc	3969,1,c	;volatile
  4978  00D7C8  D0D1               	goto	u5900
  4979  00D7CA  D7FD               	goto	l411
  4980  00D7CC                     l409:
  4981                           
  4982                           ;standbyMode.c: 857: else {
  4983                           ;standbyMode.c: 858: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4984  00D7CC  0E01               	movlw	1
  4985  00D7CE  ECE1  F063         	call	_lcdInst
  4986  00D7D2  0EC3               	movlw	195
  4987  00D7D4  6E48               	movwf	??_viewLogs& (0+255),c
  4988  00D7D6  0ECD               	movlw	205
  4989  00D7D8                     u8277:
  4990  00D7D8  2EE8               	decfsz	wreg,f,c
  4991  00D7DA  D7FE               	bra	u8277
  4992  00D7DC  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4993  00D7DE  D7FC               	bra	u8277
  4994  00D7E0  F000               	nop	
  4995                           
  4996                           ;standbyMode.c: 859: printf("%i previous logs", logNumber);
  4997  00D7E2  0EDC               	movlw	low STR_8
  4998  00D7E4  6E0D               	movwf	printf@f,c
  4999  00D7E6  0EFD               	movlw	high STR_8
  5000  00D7E8  6E0E               	movwf	printf@f+1,c
  5001  00D7EA  C050  F00F         	movff	viewLogs@logNumber,?_printf+2
  5002  00D7EE  6A10               	clrf	?_printf+3,c
  5003  00D7F0  ECC5  F06C         	call	_printf	;wreg free
  5004                           
  5005                           ;standbyMode.c: 860: lcdInst(0xC0);;
  5006  00D7F4  0EC0               	movlw	192
  5007  00D7F6  ECE1  F063         	call	_lcdInst
  5008                           
  5009                           ;standbyMode.c: 861: printf("available.");
  5010  00D7FA  0E88               	movlw	low STR_3
  5011  00D7FC  6E0D               	movwf	printf@f,c
  5012  00D7FE  0EFF               	movlw	high STR_3
  5013  00D800  6E0E               	movwf	printf@f+1,c
  5014  00D802  ECC5  F06C         	call	_printf	;wreg free
  5015                           
  5016                           ;standbyMode.c: 862: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5017  00D806  0E66               	movlw	102
  5018  00D808  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  5019  00D80A  0E76               	movlw	118
  5020  00D80C  6E48               	movwf	??_viewLogs& (0+255),c
  5021  00D80E  0EC1               	movlw	193
  5022  00D810                     u8287:
  5023  00D810  2EE8               	decfsz	wreg,f,c
  5024  00D812  D7FE               	bra	u8287
  5025  00D814  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5026  00D816  D7FC               	bra	u8287
  5027  00D818  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5028  00D81A  D7FA               	bra	u8287
  5029  00D81C  F000               	nop	
  5030                           
  5031                           ;standbyMode.c: 863: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5032  00D81E  0E01               	movlw	1
  5033  00D820  ECE1  F063         	call	_lcdInst
  5034  00D824  0EC3               	movlw	195
  5035  00D826  6E48               	movwf	??_viewLogs& (0+255),c
  5036  00D828  0ECD               	movlw	205
  5037  00D82A                     u8297:
  5038  00D82A  2EE8               	decfsz	wreg,f,c
  5039  00D82C  D7FE               	bra	u8297
  5040  00D82E  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5041  00D830  D7FC               	bra	u8297
  5042  00D832  F000               	nop	
  5043                           
  5044                           ;standbyMode.c: 864: printf("Please input log");
  5045  00D834  0EA9               	movlw	low STR_10
  5046  00D836  6E0D               	movwf	printf@f,c
  5047  00D838  0EFD               	movlw	high STR_10
  5048  00D83A  6E0E               	movwf	printf@f+1,c
  5049  00D83C  ECC5  F06C         	call	_printf	;wreg free
  5050                           
  5051                           ;standbyMode.c: 865: lcdInst(0xC0);;
  5052  00D840  0EC0               	movlw	192
  5053  00D842  ECE1  F063         	call	_lcdInst
  5054                           
  5055                           ;standbyMode.c: 866: printf("number: ");
  5056  00D846  0EC8               	movlw	low STR_11
  5057  00D848  6E0D               	movwf	printf@f,c
  5058  00D84A  0EFF               	movlw	high STR_11
  5059  00D84C  6E0E               	movwf	printf@f+1,c
  5060  00D84E  ECC5  F06C         	call	_printf	;wreg free
  5061  00D852                     
  5062                           ;standbyMode.c: 869: while(PORTBbits.RB1 == 0){ continue; }
  5063  00D852  A281               	btfss	3969,1,c	;volatile
  5064  00D854  D7FE               	goto	l414
  5065                           
  5066                           ;standbyMode.c: 870: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  5067  00D856  3881               	swapf	3969,w,c	;volatile
  5068  00D858  0B0F               	andlw	15
  5069  00D85A  0B0F               	andlw	15
  5070  00D85C  6E51               	movwf	viewLogs@keypress2,c
  5071  00D85E  B281               	btfsc	3969,1,c	;volatile
  5072  00D860  D7FE               	goto	l419
  5073                           
  5074                           ;standbyMode.c: 873: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  5075  00D862  5051               	movf	viewLogs@keypress2,w,c
  5076  00D864  B4D8               	btfsc	status,2,c
  5077  00D866  D00B               	goto	u5870
  5078  00D868  0451               	decf	viewLogs@keypress2,w,c
  5079  00D86A  B4D8               	btfsc	status,2,c
  5080  00D86C  D008               	goto	u5870
  5081  00D86E  0E02               	movlw	2
  5082  00D870  1851               	xorwf	viewLogs@keypress2,w,c
  5083  00D872  B4D8               	btfsc	status,2,c
  5084  00D874  D004               	goto	u5870
  5085  00D876  0E04               	movlw	4
  5086  00D878  1851               	xorwf	viewLogs@keypress2,w,c
  5087  00D87A  A4D8               	btfss	status,2,c
  5088  00D87C  D7EA               	goto	l414
  5089  00D87E                     u5870:
  5090                           
  5091                           ;standbyMode.c: 874: checkLog = verifyKeypress(logNumber, keypress2);
  5092  00D87E  C051  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  5093  00D882  6A02               	clrf	verifyKeypress@keypress+1,c
  5094  00D884  5050               	movf	viewLogs@logNumber,w,c
  5095  00D886  ECF7  F064         	call	_verifyKeypress
  5096  00D88A  C001  F04A         	movff	?_verifyKeypress,viewLogs@checkLog
  5097  00D88E  C002  F04B         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  5098                           
  5099                           ;standbyMode.c: 875: if (checkLog == 1){
  5100  00D892  044A               	decf	viewLogs@checkLog,w,c
  5101  00D894  104B               	iorwf	viewLogs@checkLog+1,w,c
  5102  00D896  A4D8               	btfss	status,2,c
  5103  00D898  D7DC               	goto	l414
  5104                           
  5105                           ;standbyMode.c: 876: putch(keys[keypress2]);
  5106  00D89A  5051               	movf	viewLogs@keypress2,w,c
  5107  00D89C  0D01               	mullw	1
  5108  00D89E  0E23               	movlw	low _keys
  5109  00D8A0  24F3               	addwf	prodl,w,c
  5110  00D8A2  6EF6               	movwf	tblptrl,c
  5111  00D8A4  0EFD               	movlw	high _keys
  5112  00D8A6  20F4               	addwfc	prodh,w,c
  5113  00D8A8  6EF7               	movwf	tblptrh,c
  5114  00D8AA                     	if	0	;There are less than 3 active tblptr bytes
  5115  00D8AA                     	endif
  5116  00D8AA  0008               	tblrd		*
  5117  00D8AC  50F5               	movf	tablat,w,c
  5118  00D8AE  ECEB  F063         	call	_putch
  5119                           
  5120                           ;standbyMode.c: 877: if (keypress2 == 4){
  5121  00D8B2  0E04               	movlw	4
  5122  00D8B4  1851               	xorwf	viewLogs@keypress2,w,c
  5123  00D8B6  A4D8               	btfss	status,2,c
  5124  00D8B8  D004               	goto	l425
  5125                           
  5126                           ;standbyMode.c: 878: logView = keypress2;
  5127  00D8BA  C051  F04E         	movff	viewLogs@keypress2,viewLogs@logView
  5128  00D8BE  6A4F               	clrf	viewLogs@logView+1,c
  5129                           
  5130                           ;standbyMode.c: 879: }
  5131  00D8C0  D006               	goto	l426
  5132  00D8C2                     l425:
  5133                           
  5134                           ;standbyMode.c: 880: else{
  5135                           ;standbyMode.c: 881: logView = keypress2 + 1;
  5136  00D8C2  0E01               	movlw	1
  5137  00D8C4  2451               	addwf	viewLogs@keypress2,w,c
  5138  00D8C6  6E4E               	movwf	viewLogs@logView,c
  5139  00D8C8  6A4F               	clrf	viewLogs@logView+1,c
  5140  00D8CA  0E00               	movlw	0
  5141  00D8CC  224F               	addwfc	viewLogs@logView+1,f,c
  5142  00D8CE                     l426:
  5143                           
  5144                           ;standbyMode.c: 882: }
  5145                           ;standbyMode.c: 883: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5146  00D8CE  0E33               	movlw	51
  5147  00D8D0  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  5148  00D8D2  0EBB               	movlw	187
  5149  00D8D4  6E48               	movwf	??_viewLogs& (0+255),c
  5150  00D8D6  0EE0               	movlw	224
  5151  00D8D8                     u8307:
  5152  00D8D8  2EE8               	decfsz	wreg,f,c
  5153  00D8DA  D7FE               	bra	u8307
  5154  00D8DC  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5155  00D8DE  D7FC               	bra	u8307
  5156  00D8E0  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5157  00D8E2  D7FA               	bra	u8307
  5158                           
  5159                           ;standbyMode.c: 885: }
  5160                           ;standbyMode.c: 886: }
  5161                           ;standbyMode.c: 887: }
  5162                           ;standbyMode.c: 889: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5163                           
  5164                           ;standbyMode.c: 884: break;
  5165  00D8E4  0E01               	movlw	1
  5166  00D8E6  ECE1  F063         	call	_lcdInst
  5167  00D8EA  0EC3               	movlw	195
  5168  00D8EC  6E48               	movwf	??_viewLogs& (0+255),c
  5169  00D8EE  0ECD               	movlw	205
  5170  00D8F0                     u8317:
  5171  00D8F0  2EE8               	decfsz	wreg,f,c
  5172  00D8F2  D7FE               	bra	u8317
  5173  00D8F4  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5174  00D8F6  D7FC               	bra	u8317
  5175  00D8F8  F000               	nop	
  5176                           
  5177                           ;standbyMode.c: 890: printf("Great!");
  5178  00D8FA  0EF1               	movlw	low STR_12
  5179  00D8FC  6E0D               	movwf	printf@f,c
  5180  00D8FE  0EFF               	movlw	high STR_12
  5181  00D900  6E0E               	movwf	printf@f+1,c
  5182  00D902  ECC5  F06C         	call	_printf	;wreg free
  5183                           
  5184                           ;standbyMode.c: 891: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5185  00D906  0E33               	movlw	51
  5186  00D908  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  5187  00D90A  0EBB               	movlw	187
  5188  00D90C  6E48               	movwf	??_viewLogs& (0+255),c
  5189  00D90E  0EE0               	movlw	224
  5190  00D910                     u8327:
  5191  00D910  2EE8               	decfsz	wreg,f,c
  5192  00D912  D7FE               	bra	u8327
  5193  00D914  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5194  00D916  D7FC               	bra	u8327
  5195  00D918  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5196  00D91A  D7FA               	bra	u8327
  5197                           
  5198                           ;standbyMode.c: 892: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5199  00D91C  0E01               	movlw	1
  5200  00D91E  ECE1  F063         	call	_lcdInst
  5201  00D922  0EC3               	movlw	195
  5202  00D924  6E48               	movwf	??_viewLogs& (0+255),c
  5203  00D926  0ECD               	movlw	205
  5204  00D928                     u8337:
  5205  00D928  2EE8               	decfsz	wreg,f,c
  5206  00D92A  D7FE               	bra	u8337
  5207  00D92C  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5208  00D92E  D7FC               	bra	u8337
  5209  00D930  F000               	nop	
  5210                           
  5211                           ;standbyMode.c: 893: printf("Press any key to");
  5212  00D932  0ECB               	movlw	low STR_6
  5213  00D934  6E0D               	movwf	printf@f,c
  5214  00D936  0EFD               	movlw	high STR_6
  5215  00D938  6E0E               	movwf	printf@f+1,c
  5216  00D93A  ECC5  F06C         	call	_printf	;wreg free
  5217                           
  5218                           ;standbyMode.c: 894: lcdInst(0xC0);;
  5219  00D93E  0EC0               	movlw	192
  5220  00D940  ECE1  F063         	call	_lcdInst
  5221                           
  5222                           ;standbyMode.c: 895: printf("move forward.");
  5223  00D944  0E20               	movlw	low STR_7
  5224  00D946  6E0D               	movwf	printf@f,c
  5225  00D948  0EFF               	movlw	high STR_7
  5226  00D94A  6E0E               	movwf	printf@f+1,c
  5227  00D94C  ECC5  F06C         	call	_printf	;wreg free
  5228                           
  5229                           ;standbyMode.c: 896: _delay((unsigned long)((500)*(40000000/4000.0)));
  5230  00D950  0E1A               	movlw	26
  5231  00D952  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  5232  00D954  0E5E               	movlw	94
  5233  00D956  6E48               	movwf	??_viewLogs& (0+255),c
  5234  00D958  0E6E               	movlw	110
  5235  00D95A                     u8347:
  5236  00D95A  2EE8               	decfsz	wreg,f,c
  5237  00D95C  D7FE               	bra	u8347
  5238  00D95E  2E48               	decfsz	??_viewLogs& (0+255),f,c
  5239  00D960  D7FC               	bra	u8347
  5240  00D962  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5241  00D964  D7FA               	bra	u8347
  5242  00D966  D000               	nop2	
  5243  00D968                     
  5244                           ;standbyMode.c: 899: continue;
  5245  00D968  A281               	btfss	3969,1,c	;volatile
  5246  00D96A  D7FE               	goto	l430
  5247  00D96C                     u5900:
  5248                           
  5249                           ;standbyMode.c: 900: }
  5250                           ;standbyMode.c: 901: }
  5251                           ;standbyMode.c: 902: returnVal = displayLogs(logView);
  5252  00D96C  C04E  F025         	movff	viewLogs@logView,displayLogs@logNumber
  5253  00D970  C04F  F026         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  5254  00D974  EC4B  F06E         	call	_displayLogs	;wreg free
  5255  00D978  C025  F04C         	movff	?_displayLogs,viewLogs@returnVal
  5256  00D97C  C026  F04D         	movff	?_displayLogs+1,viewLogs@returnVal+1
  5257                           
  5258                           ;standbyMode.c: 903: return returnVal;
  5259  00D980  C04C  F046         	movff	viewLogs@returnVal,?_viewLogs
  5260  00D984  C04D  F047         	movff	viewLogs@returnVal+1,?_viewLogs+1
  5261  00D988  0012               	return	
  5262  00D98A                     __end_of_viewLogs:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           postdec1	equ	0xFE5
  5273                           plusw1	equ	0xFE3
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           plusw2	equ	0xFDB
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _verifyKeypress *****************
  5284 ;; Defined at:
  5285 ;;		line 808 in file "standbyMode.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  logNumber       1    wreg     unsigned char 
  5288 ;;  keypress        2    0[COMRAM] unsigned int 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  logNumber       1    4[COMRAM] unsigned char 
  5291 ;;  i               2    7[COMRAM] unsigned int 
  5292 ;;  returnVal       2    5[COMRAM] unsigned int 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  2    0[COMRAM] unsigned int 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;Total ram usage:        9 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_viewLogs
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text5
  5316  00C9EE                     __ptext5:
  5317                           	opt stack 0
  5318  00C9EE                     _verifyKeypress:
  5319                           	opt stack 28
  5320                           
  5321                           ;incstack = 0
  5322                           ;verifyKeypress@logNumber stored from wreg
  5323  00C9EE  6E05               	movwf	verifyKeypress@logNumber,c
  5324                           
  5325                           ;standbyMode.c: 809: unsigned int i = 0;
  5326  00C9F0  0E00               	movlw	0
  5327  00C9F2  6E09               	movwf	verifyKeypress@i+1,c
  5328  00C9F4  0E00               	movlw	0
  5329  00C9F6  6E08               	movwf	verifyKeypress@i,c
  5330                           
  5331                           ;standbyMode.c: 810: unsigned int returnVal = 0;
  5332  00C9F8  0E00               	movlw	0
  5333  00C9FA  6E07               	movwf	verifyKeypress@returnVal+1,c
  5334  00C9FC  0E00               	movlw	0
  5335  00C9FE  6E06               	movwf	verifyKeypress@returnVal,c
  5336                           
  5337                           ;standbyMode.c: 812: for (i=0; i<logNumber; i++){
  5338  00CA00  0E00               	movlw	0
  5339  00CA02  6E09               	movwf	verifyKeypress@i+1,c
  5340  00CA04  0E00               	movlw	0
  5341  00CA06  6E08               	movwf	verifyKeypress@i,c
  5342  00CA08  D00D               	goto	l399
  5343  00CA0A                     
  5344                           ;standbyMode.c: 813: if (keypress == i){
  5345  00CA0A  5008               	movf	verifyKeypress@i,w,c
  5346  00CA0C  1801               	xorwf	verifyKeypress@keypress,w,c
  5347  00CA0E  E108               	bnz	l4906
  5348  00CA10  5009               	movf	verifyKeypress@i+1,w,c
  5349  00CA12  1802               	xorwf	verifyKeypress@keypress+1,w,c
  5350  00CA14  A4D8               	btfss	status,2,c
  5351  00CA16  D004               	goto	l401
  5352                           
  5353                           ;standbyMode.c: 814: returnVal = 1;
  5354  00CA18  0E00               	movlw	0
  5355  00CA1A  6E07               	movwf	verifyKeypress@returnVal+1,c
  5356  00CA1C  0E01               	movlw	1
  5357  00CA1E  6E06               	movwf	verifyKeypress@returnVal,c
  5358  00CA20                     l401:
  5359  00CA20                     l4906:
  5360  00CA20  4A08               	infsnz	verifyKeypress@i,f,c
  5361  00CA22  2A09               	incf	verifyKeypress@i+1,f,c
  5362  00CA24                     l399:
  5363  00CA24  5005               	movf	verifyKeypress@logNumber,w,c
  5364  00CA26  6E03               	movwf	??_verifyKeypress& (0+255),c
  5365  00CA28  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  5366  00CA2A  5003               	movf	??_verifyKeypress,w,c
  5367  00CA2C  5C08               	subwf	verifyKeypress@i,w,c
  5368  00CA2E  5004               	movf	??_verifyKeypress+1,w,c
  5369  00CA30  5809               	subwfb	verifyKeypress@i+1,w,c
  5370  00CA32  A0D8               	btfss	status,0,c
  5371  00CA34  D7EA               	goto	l400
  5372                           
  5373                           ;standbyMode.c: 815: }
  5374                           ;standbyMode.c: 816: }
  5375                           ;standbyMode.c: 817: return returnVal;
  5376  00CA36  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  5377  00CA3A  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  5378  00CA3E  0012               	return		;funcret
  5379  00CA40                     __end_of_verifyKeypress:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           postdec1	equ	0xFE5
  5390                           plusw1	equ	0xFE3
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           plusw2	equ	0xFDB
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _displayLogs *****************
  5401 ;; Defined at:
  5402 ;;		line 909 in file "standbyMode.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  logNumber       2   36[COMRAM] unsigned int 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  n               2   67[COMRAM] unsigned int 
  5407 ;;  markedDrawer    2   65[COMRAM] unsigned int 
  5408 ;;  markedDrawer    2   63[COMRAM] unsigned int 
  5409 ;;  markedDrawer    2   61[COMRAM] unsigned int 
  5410 ;;  markedDrawer    2   59[COMRAM] unsigned int 
  5411 ;;  operationTim    2   57[COMRAM] unsigned int 
  5412 ;;  seconds         2   54[COMRAM] unsigned int 
  5413 ;;  minutes         2   52[COMRAM] unsigned int 
  5414 ;;  longPieces      2   50[COMRAM] unsigned int 
  5415 ;;  flatPieces      2   48[COMRAM] unsigned int 
  5416 ;;  roundPieces     2   46[COMRAM] unsigned int 
  5417 ;;  day             2   44[COMRAM] unsigned int 
  5418 ;;  month           2   42[COMRAM] unsigned int 
  5419 ;;  year            2   40[COMRAM] unsigned int 
  5420 ;;  keypress3       1   56[COMRAM] unsigned char 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  2   36[COMRAM] unsigned int 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;Total ram usage:       33 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    3
  5437 ;; This function calls:
  5438 ;;		___lwdiv
  5439 ;;		___lwmod
  5440 ;;		___wmul
  5441 ;;		_lcdInst
  5442 ;;		_printf
  5443 ;;		_readEEPROM
  5444 ;; This function is called by:
  5445 ;;		_viewLogs
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text6
  5450  00DC96                     __ptext6:
  5451                           	opt stack 0
  5452  00DC96                     _displayLogs:
  5453                           	opt stack 25
  5454                           
  5455                           ;standbyMode.c: 910: unsigned int n = (logNumber-1)*51;
  5456                           
  5457                           ;incstack = 0
  5458  00DC96  0EFF               	movlw	255
  5459  00DC98  2425               	addwf	displayLogs@logNumber,w,c
  5460  00DC9A  6E01               	movwf	___wmul@multiplier,c
  5461  00DC9C  0EFF               	movlw	255
  5462  00DC9E  2026               	addwfc	displayLogs@logNumber+1,w,c
  5463  00DCA0  6E02               	movwf	___wmul@multiplier+1,c
  5464  00DCA2  0E00               	movlw	0
  5465  00DCA4  6E04               	movwf	___wmul@multiplicand+1,c
  5466  00DCA6  0E33               	movlw	51
  5467  00DCA8  6E03               	movwf	___wmul@multiplicand,c
  5468  00DCAA  EC2B  F064         	call	___wmul	;wreg free
  5469  00DCAE  C001  F044         	movff	?___wmul,displayLogs@n
  5470  00DCB2  C002  F045         	movff	?___wmul+1,displayLogs@n+1
  5471                           
  5472                           ;standbyMode.c: 911: unsigned int year = readEEPROM(n);
  5473  00DCB6  5044               	movf	displayLogs@n,w,c
  5474  00DCB8  ECF5  F063         	call	_readEEPROM
  5475  00DCBC  6E27               	movwf	??_displayLogs& (0+255),c
  5476  00DCBE  5027               	movf	??_displayLogs,w,c
  5477  00DCC0  6E29               	movwf	displayLogs@year,c
  5478  00DCC2  6A2A               	clrf	displayLogs@year+1,c
  5479                           
  5480                           ;standbyMode.c: 912: unsigned int month = readEEPROM(1+n);
  5481  00DCC4  2844               	incf	displayLogs@n,w,c
  5482  00DCC6  ECF5  F063         	call	_readEEPROM
  5483  00DCCA  6E27               	movwf	??_displayLogs& (0+255),c
  5484  00DCCC  5027               	movf	??_displayLogs,w,c
  5485  00DCCE  6E2B               	movwf	displayLogs@month,c
  5486  00DCD0  6A2C               	clrf	displayLogs@month+1,c
  5487                           
  5488                           ;standbyMode.c: 913: unsigned int day = readEEPROM(2+n);
  5489  00DCD2  5044               	movf	displayLogs@n,w,c
  5490  00DCD4  0F02               	addlw	2
  5491  00DCD6  ECF5  F063         	call	_readEEPROM
  5492  00DCDA  6E27               	movwf	??_displayLogs& (0+255),c
  5493  00DCDC  5027               	movf	??_displayLogs,w,c
  5494  00DCDE  6E2D               	movwf	displayLogs@day,c
  5495  00DCE0  6A2E               	clrf	displayLogs@day+1,c
  5496                           
  5497                           ;standbyMode.c: 914: unsigned int operationTime = readEEPROM(3+n);
  5498  00DCE2  5044               	movf	displayLogs@n,w,c
  5499  00DCE4  0F03               	addlw	3
  5500  00DCE6  ECF5  F063         	call	_readEEPROM
  5501  00DCEA  6E27               	movwf	??_displayLogs& (0+255),c
  5502  00DCEC  5027               	movf	??_displayLogs,w,c
  5503  00DCEE  6E3A               	movwf	displayLogs@operationTime,c
  5504  00DCF0  6A3B               	clrf	displayLogs@operationTime+1,c
  5505                           
  5506                           ;standbyMode.c: 915: unsigned int roundPieces = readEEPROM(4+n);
  5507  00DCF2  5044               	movf	displayLogs@n,w,c
  5508  00DCF4  0F04               	addlw	4
  5509  00DCF6  ECF5  F063         	call	_readEEPROM
  5510  00DCFA  6E27               	movwf	??_displayLogs& (0+255),c
  5511  00DCFC  5027               	movf	??_displayLogs,w,c
  5512  00DCFE  6E2F               	movwf	displayLogs@roundPieces,c
  5513  00DD00  6A30               	clrf	displayLogs@roundPieces+1,c
  5514                           
  5515                           ;standbyMode.c: 916: unsigned int flatPieces = readEEPROM(5+n);
  5516  00DD02  5044               	movf	displayLogs@n,w,c
  5517  00DD04  0F05               	addlw	5
  5518  00DD06  ECF5  F063         	call	_readEEPROM
  5519  00DD0A  6E27               	movwf	??_displayLogs& (0+255),c
  5520  00DD0C  5027               	movf	??_displayLogs,w,c
  5521  00DD0E  6E31               	movwf	displayLogs@flatPieces,c
  5522  00DD10  6A32               	clrf	displayLogs@flatPieces+1,c
  5523                           
  5524                           ;standbyMode.c: 917: unsigned int longPieces = readEEPROM(6+n);
  5525  00DD12  5044               	movf	displayLogs@n,w,c
  5526  00DD14  0F06               	addlw	6
  5527  00DD16  ECF5  F063         	call	_readEEPROM
  5528  00DD1A  6E27               	movwf	??_displayLogs& (0+255),c
  5529  00DD1C  5027               	movf	??_displayLogs,w,c
  5530  00DD1E  6E33               	movwf	displayLogs@longPieces,c
  5531  00DD20  6A34               	clrf	displayLogs@longPieces+1,c
  5532                           
  5533                           ;standbyMode.c: 918: unsigned int markedDrawer1 = readEEPROM(7+n);
  5534  00DD22  5044               	movf	displayLogs@n,w,c
  5535  00DD24  0F07               	addlw	7
  5536  00DD26  ECF5  F063         	call	_readEEPROM
  5537  00DD2A  6E27               	movwf	??_displayLogs& (0+255),c
  5538  00DD2C  5027               	movf	??_displayLogs,w,c
  5539  00DD2E  6E3C               	movwf	displayLogs@markedDrawer1,c
  5540  00DD30  6A3D               	clrf	displayLogs@markedDrawer1+1,c
  5541                           
  5542                           ;standbyMode.c: 919: unsigned int markedDrawer2 = readEEPROM(8+n);
  5543  00DD32  5044               	movf	displayLogs@n,w,c
  5544  00DD34  0F08               	addlw	8
  5545  00DD36  ECF5  F063         	call	_readEEPROM
  5546  00DD3A  6E27               	movwf	??_displayLogs& (0+255),c
  5547  00DD3C  5027               	movf	??_displayLogs,w,c
  5548  00DD3E  6E3E               	movwf	displayLogs@markedDrawer2,c
  5549  00DD40  6A3F               	clrf	displayLogs@markedDrawer2+1,c
  5550                           
  5551                           ;standbyMode.c: 920: unsigned int markedDrawer3 = readEEPROM(9+n);
  5552  00DD42  5044               	movf	displayLogs@n,w,c
  5553  00DD44  0F09               	addlw	9
  5554  00DD46  ECF5  F063         	call	_readEEPROM
  5555  00DD4A  6E27               	movwf	??_displayLogs& (0+255),c
  5556  00DD4C  5027               	movf	??_displayLogs,w,c
  5557  00DD4E  6E40               	movwf	displayLogs@markedDrawer3,c
  5558  00DD50  6A41               	clrf	displayLogs@markedDrawer3+1,c
  5559                           
  5560                           ;standbyMode.c: 921: unsigned int markedDrawer4 = readEEPROM(10+n);
  5561  00DD52  5044               	movf	displayLogs@n,w,c
  5562  00DD54  0F0A               	addlw	10
  5563  00DD56  ECF5  F063         	call	_readEEPROM
  5564  00DD5A  6E27               	movwf	??_displayLogs& (0+255),c
  5565  00DD5C  5027               	movf	??_displayLogs,w,c
  5566  00DD5E  6E42               	movwf	displayLogs@markedDrawer4,c
  5567  00DD60  6A43               	clrf	displayLogs@markedDrawer4+1,c
  5568                           
  5569                           ;standbyMode.c: 923: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5570  00DD62  0E01               	movlw	1
  5571  00DD64  ECE1  F063         	call	_lcdInst
  5572  00DD68  0EC3               	movlw	195
  5573  00DD6A  6E27               	movwf	??_displayLogs& (0+255),c
  5574  00DD6C  0ECD               	movlw	205
  5575  00DD6E                     u8357:
  5576  00DD6E  2EE8               	decfsz	wreg,f,c
  5577  00DD70  D7FE               	bra	u8357
  5578  00DD72  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5579  00DD74  D7FC               	bra	u8357
  5580  00DD76  F000               	nop	
  5581                           
  5582                           ;standbyMode.c: 924: printf("Date:");
  5583  00DD78  0EF8               	movlw	low STR_15
  5584  00DD7A  6E0D               	movwf	printf@f,c
  5585  00DD7C  0EFF               	movlw	high STR_15
  5586  00DD7E  6E0E               	movwf	printf@f+1,c
  5587  00DD80  ECC5  F06C         	call	_printf	;wreg free
  5588                           
  5589                           ;standbyMode.c: 925: lcdInst(0xC0);;
  5590  00DD84  0EC0               	movlw	192
  5591  00DD86  ECE1  F063         	call	_lcdInst
  5592                           
  5593                           ;standbyMode.c: 926: printf("%02i/%02i/%02i", year, month, day);
  5594  00DD8A  0EC8               	movlw	low STR_16
  5595  00DD8C  6E0D               	movwf	printf@f,c
  5596  00DD8E  0EFE               	movlw	high STR_16
  5597  00DD90  6E0E               	movwf	printf@f+1,c
  5598  00DD92  C029  F00F         	movff	displayLogs@year,?_printf+2
  5599  00DD96  C02A  F010         	movff	displayLogs@year+1,?_printf+3
  5600  00DD9A  C02B  F011         	movff	displayLogs@month,?_printf+4
  5601  00DD9E  C02C  F012         	movff	displayLogs@month+1,?_printf+5
  5602  00DDA2  C02D  F013         	movff	displayLogs@day,?_printf+6
  5603  00DDA6  C02E  F014         	movff	displayLogs@day+1,?_printf+7
  5604  00DDAA  ECC5  F06C         	call	_printf	;wreg free
  5605                           
  5606                           ;standbyMode.c: 927: _delay((unsigned long)((500)*(40000000/4000.0)));
  5607  00DDAE  0E1A               	movlw	26
  5608  00DDB0  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5609  00DDB2  0E5E               	movlw	94
  5610  00DDB4  6E27               	movwf	??_displayLogs& (0+255),c
  5611  00DDB6  0E6E               	movlw	110
  5612  00DDB8                     u8367:
  5613  00DDB8  2EE8               	decfsz	wreg,f,c
  5614  00DDBA  D7FE               	bra	u8367
  5615  00DDBC  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5616  00DDBE  D7FC               	bra	u8367
  5617  00DDC0  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5618  00DDC2  D7FA               	bra	u8367
  5619  00DDC4  D000               	nop2	
  5620  00DDC6                     
  5621                           ;standbyMode.c: 929: continue;
  5622  00DDC6  A281               	btfss	3969,1,c	;volatile
  5623  00DDC8  D7FE               	goto	l435
  5624                           
  5625                           ;standbyMode.c: 930: }
  5626                           ;standbyMode.c: 932: unsigned int minutes = operationTime/60;
  5627  00DDCA  C03A  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  5628  00DDCE  C03B  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  5629  00DDD2  0E00               	movlw	0
  5630  00DDD4  6E04               	movwf	___lwdiv@divisor+1,c
  5631  00DDD6  0E3C               	movlw	60
  5632  00DDD8  6E03               	movwf	___lwdiv@divisor,c
  5633  00DDDA  ECCE  F064         	call	___lwdiv	;wreg free
  5634  00DDDE  C001  F035         	movff	?___lwdiv,displayLogs@minutes
  5635  00DDE2  C002  F036         	movff	?___lwdiv+1,displayLogs@minutes+1
  5636                           
  5637                           ;standbyMode.c: 933: unsigned int seconds = operationTime%60;
  5638  00DDE6  C03A  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  5639  00DDEA  C03B  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  5640  00DDEE  0E00               	movlw	0
  5641  00DDF0  6E0B               	movwf	___lwmod@divisor+1,c
  5642  00DDF2  0E3C               	movlw	60
  5643  00DDF4  6E0A               	movwf	___lwmod@divisor,c
  5644  00DDF6  EC66  F064         	call	___lwmod	;wreg free
  5645  00DDFA  C008  F037         	movff	?___lwmod,displayLogs@seconds
  5646  00DDFE  C009  F038         	movff	?___lwmod+1,displayLogs@seconds+1
  5647                           
  5648                           ;standbyMode.c: 934: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5649  00DE02  0E01               	movlw	1
  5650  00DE04  ECE1  F063         	call	_lcdInst
  5651  00DE08  0EC3               	movlw	195
  5652  00DE0A  6E27               	movwf	??_displayLogs& (0+255),c
  5653  00DE0C  0ECD               	movlw	205
  5654  00DE0E                     u8377:
  5655  00DE0E  2EE8               	decfsz	wreg,f,c
  5656  00DE10  D7FE               	bra	u8377
  5657  00DE12  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5658  00DE14  D7FC               	bra	u8377
  5659  00DE16  F000               	nop	
  5660                           
  5661                           ;standbyMode.c: 935: printf("Operation time:");
  5662  00DE18  0E1D               	movlw	low STR_17
  5663  00DE1A  6E0D               	movwf	printf@f,c
  5664  00DE1C  0EFE               	movlw	high STR_17
  5665  00DE1E  6E0E               	movwf	printf@f+1,c
  5666  00DE20  ECC5  F06C         	call	_printf	;wreg free
  5667                           
  5668                           ;standbyMode.c: 936: lcdInst(0xC0);;
  5669  00DE24  0EC0               	movlw	192
  5670  00DE26  ECE1  F063         	call	_lcdInst
  5671                           
  5672                           ;standbyMode.c: 937: printf("%i:%02i", minutes, seconds);
  5673  00DE2A  0ED9               	movlw	low STR_18
  5674  00DE2C  6E0D               	movwf	printf@f,c
  5675  00DE2E  0EFF               	movlw	high STR_18
  5676  00DE30  6E0E               	movwf	printf@f+1,c
  5677  00DE32  C035  F00F         	movff	displayLogs@minutes,?_printf+2
  5678  00DE36  C036  F010         	movff	displayLogs@minutes+1,?_printf+3
  5679  00DE3A  C037  F011         	movff	displayLogs@seconds,?_printf+4
  5680  00DE3E  C038  F012         	movff	displayLogs@seconds+1,?_printf+5
  5681  00DE42  ECC5  F06C         	call	_printf	;wreg free
  5682                           
  5683                           ;standbyMode.c: 938: _delay((unsigned long)((500)*(40000000/4000.0)));
  5684  00DE46  0E1A               	movlw	26
  5685  00DE48  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5686  00DE4A  0E5E               	movlw	94
  5687  00DE4C  6E27               	movwf	??_displayLogs& (0+255),c
  5688  00DE4E  0E6E               	movlw	110
  5689  00DE50                     u8387:
  5690  00DE50  2EE8               	decfsz	wreg,f,c
  5691  00DE52  D7FE               	bra	u8387
  5692  00DE54  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5693  00DE56  D7FC               	bra	u8387
  5694  00DE58  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5695  00DE5A  D7FA               	bra	u8387
  5696  00DE5C  D000               	nop2	
  5697  00DE5E                     
  5698                           ;standbyMode.c: 941: continue;
  5699  00DE5E  A281               	btfss	3969,1,c	;volatile
  5700  00DE60  D7FE               	goto	l438
  5701                           
  5702                           ;standbyMode.c: 942: }
  5703                           ;standbyMode.c: 944: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5704  00DE62  0E01               	movlw	1
  5705  00DE64  ECE1  F063         	call	_lcdInst
  5706  00DE68  0EC3               	movlw	195
  5707  00DE6A  6E27               	movwf	??_displayLogs& (0+255),c
  5708  00DE6C  0ECD               	movlw	205
  5709  00DE6E                     u8397:
  5710  00DE6E  2EE8               	decfsz	wreg,f,c
  5711  00DE70  D7FE               	bra	u8397
  5712  00DE72  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5713  00DE74  D7FC               	bra	u8397
  5714  00DE76  F000               	nop	
  5715                           
  5716                           ;standbyMode.c: 945: printf("Marked drawers:");
  5717  00DE78  0E2D               	movlw	low STR_19
  5718  00DE7A  6E0D               	movwf	printf@f,c
  5719  00DE7C  0EFE               	movlw	high STR_19
  5720  00DE7E  6E0E               	movwf	printf@f+1,c
  5721  00DE80  ECC5  F06C         	call	_printf	;wreg free
  5722                           
  5723                           ;standbyMode.c: 946: lcdInst(0xC0);;
  5724  00DE84  0EC0               	movlw	192
  5725  00DE86  ECE1  F063         	call	_lcdInst
  5726                           
  5727                           ;standbyMode.c: 948: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  5728  00DE8A  5042               	movf	displayLogs@markedDrawer4,w,c
  5729  00DE8C  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  5730  00DE8E  A4D8               	btfss	status,2,c
  5731  00DE90  D01E               	goto	l440
  5732  00DE92  5040               	movf	displayLogs@markedDrawer3,w,c
  5733  00DE94  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  5734  00DE96  A4D8               	btfss	status,2,c
  5735  00DE98  D01A               	goto	l440
  5736  00DE9A  503E               	movf	displayLogs@markedDrawer2,w,c
  5737  00DE9C  103F               	iorwf	displayLogs@markedDrawer2+1,w,c
  5738  00DE9E  A4D8               	btfss	status,2,c
  5739  00DEA0  D016               	goto	l440
  5740                           
  5741                           ;standbyMode.c: 949: printf("%i", markedDrawer1);
  5742  00DEA2  0EC5               	movlw	low (STR_23+12)
  5743  00DEA4  6E0D               	movwf	printf@f,c
  5744  00DEA6  0EFE               	movlw	high (STR_23+12)
  5745  00DEA8  6E0E               	movwf	printf@f+1,c
  5746  00DEAA  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  5747  00DEAE  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  5748  00DEB2  ECC5  F06C         	call	_printf	;wreg free
  5749                           
  5750                           ;standbyMode.c: 950: _delay((unsigned long)((500)*(40000000/4000.0)));
  5751  00DEB6  0E1A               	movlw	26
  5752  00DEB8  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5753  00DEBA  0E5E               	movlw	94
  5754  00DEBC  6E27               	movwf	??_displayLogs& (0+255),c
  5755  00DEBE  0E6E               	movlw	110
  5756  00DEC0                     u8407:
  5757  00DEC0  2EE8               	decfsz	wreg,f,c
  5758  00DEC2  D7FE               	bra	u8407
  5759  00DEC4  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5760  00DEC6  D7FC               	bra	u8407
  5761  00DEC8  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5762  00DECA  D7FA               	bra	u8407
  5763  00DECC  D065               	goto	L18
  5764  00DECE                     l440:
  5765                           
  5766                           ;standbyMode.c: 953: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  5767  00DECE  5042               	movf	displayLogs@markedDrawer4,w,c
  5768  00DED0  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  5769  00DED2  A4D8               	btfss	status,2,c
  5770  00DED4  D01E               	goto	l442
  5771  00DED6  5040               	movf	displayLogs@markedDrawer3,w,c
  5772  00DED8  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  5773  00DEDA  A4D8               	btfss	status,2,c
  5774  00DEDC  D01A               	goto	l442
  5775                           
  5776                           ;standbyMode.c: 954: printf("%i, %i", markedDrawer1, markedDrawer2);
  5777  00DEDE  0EC1               	movlw	low (STR_23+8)
  5778  00DEE0  6E0D               	movwf	printf@f,c
  5779  00DEE2  0EFE               	movlw	high (STR_23+8)
  5780  00DEE4  6E0E               	movwf	printf@f+1,c
  5781  00DEE6  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  5782  00DEEA  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  5783  00DEEE  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  5784  00DEF2  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  5785  00DEF6  ECC5  F06C         	call	_printf	;wreg free
  5786                           
  5787                           ;standbyMode.c: 955: _delay((unsigned long)((500)*(40000000/4000.0)));
  5788  00DEFA  0E1A               	movlw	26
  5789  00DEFC  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5790  00DEFE  0E5E               	movlw	94
  5791  00DF00  6E27               	movwf	??_displayLogs& (0+255),c
  5792  00DF02  0E6E               	movlw	110
  5793  00DF04                     u8417:
  5794  00DF04  2EE8               	decfsz	wreg,f,c
  5795  00DF06  D7FE               	bra	u8417
  5796  00DF08  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5797  00DF0A  D7FC               	bra	u8417
  5798  00DF0C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5799  00DF0E  D7FA               	bra	u8417
  5800  00DF10  D043               	goto	L18
  5801  00DF12                     l442:
  5802                           
  5803                           ;standbyMode.c: 958: else if (markedDrawer4 == 0){
  5804  00DF12  5042               	movf	displayLogs@markedDrawer4,w,c
  5805  00DF14  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  5806  00DF16  A4D8               	btfss	status,2,c
  5807  00DF18  D01E               	goto	l444
  5808                           
  5809                           ;standbyMode.c: 959: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  5810  00DF1A  0EBD               	movlw	low (STR_23+4)
  5811  00DF1C  6E0D               	movwf	printf@f,c
  5812  00DF1E  0EFE               	movlw	high (STR_23+4)
  5813  00DF20  6E0E               	movwf	printf@f+1,c
  5814  00DF22  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  5815  00DF26  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  5816  00DF2A  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  5817  00DF2E  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  5818  00DF32  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  5819  00DF36  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  5820  00DF3A  ECC5  F06C         	call	_printf	;wreg free
  5821                           
  5822                           ;standbyMode.c: 960: _delay((unsigned long)((500)*(40000000/4000.0)));
  5823  00DF3E  0E1A               	movlw	26
  5824  00DF40  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5825  00DF42  0E5E               	movlw	94
  5826  00DF44  6E27               	movwf	??_displayLogs& (0+255),c
  5827  00DF46  0E6E               	movlw	110
  5828  00DF48                     u8427:
  5829  00DF48  2EE8               	decfsz	wreg,f,c
  5830  00DF4A  D7FE               	bra	u8427
  5831  00DF4C  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5832  00DF4E  D7FC               	bra	u8427
  5833  00DF50  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5834  00DF52  D7FA               	bra	u8427
  5835  00DF54  D021               	goto	L18
  5836  00DF56                     l444:
  5837                           
  5838                           ;standbyMode.c: 963: else {
  5839                           ;standbyMode.c: 964: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  5840  00DF56  0EB9               	movlw	low STR_23
  5841  00DF58  6E0D               	movwf	printf@f,c
  5842  00DF5A  0EFE               	movlw	high STR_23
  5843  00DF5C  6E0E               	movwf	printf@f+1,c
  5844  00DF5E  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  5845  00DF62  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  5846  00DF66  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  5847  00DF6A  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  5848  00DF6E  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  5849  00DF72  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  5850  00DF76  C042  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  5851  00DF7A  C043  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  5852  00DF7E  ECC5  F06C         	call	_printf	;wreg free
  5853                           
  5854                           ;standbyMode.c: 965: _delay((unsigned long)((500)*(40000000/4000.0)));
  5855  00DF82  0E1A               	movlw	26
  5856  00DF84  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5857  00DF86  0E5E               	movlw	94
  5858  00DF88  6E27               	movwf	??_displayLogs& (0+255),c
  5859  00DF8A  0E6E               	movlw	110
  5860  00DF8C                     u8437:
  5861  00DF8C  2EE8               	decfsz	wreg,f,c
  5862  00DF8E  D7FE               	bra	u8437
  5863  00DF90  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5864  00DF92  D7FC               	bra	u8437
  5865  00DF94  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5866  00DF96  D7FA               	bra	u8437
  5867  00DF98                     L18:
  5868  00DF98  D000               	nop2	
  5869  00DF9A                     
  5870                           ;standbyMode.c: 969: continue;
  5871                           
  5872                           ;standbyMode.c: 966: }
  5873                           ;standbyMode.c: 968: while(PORTBbits.RB1 == 0){
  5874  00DF9A  A281               	btfss	3969,1,c	;volatile
  5875  00DF9C  D7FE               	goto	l445
  5876                           
  5877                           ;standbyMode.c: 970: }
  5878                           ;standbyMode.c: 972: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5879  00DF9E  0E01               	movlw	1
  5880  00DFA0  ECE1  F063         	call	_lcdInst
  5881  00DFA4  0EC3               	movlw	195
  5882  00DFA6  6E27               	movwf	??_displayLogs& (0+255),c
  5883  00DFA8  0ECD               	movlw	205
  5884  00DFAA                     u8447:
  5885  00DFAA  2EE8               	decfsz	wreg,f,c
  5886  00DFAC  D7FE               	bra	u8447
  5887  00DFAE  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5888  00DFB0  D7FC               	bra	u8447
  5889  00DFB2  F000               	nop	
  5890                           
  5891                           ;standbyMode.c: 973: printf("Remaining pieces:");
  5892  00DFB4  0E64               	movlw	low STR_24
  5893  00DFB6  6E0D               	movwf	printf@f,c
  5894  00DFB8  0EFD               	movlw	high STR_24
  5895  00DFBA  6E0E               	movwf	printf@f+1,c
  5896  00DFBC  ECC5  F06C         	call	_printf	;wreg free
  5897                           
  5898                           ;standbyMode.c: 974: lcdInst(0xC0);;
  5899  00DFC0  0EC0               	movlw	192
  5900  00DFC2  ECE1  F063         	call	_lcdInst
  5901                           
  5902                           ;standbyMode.c: 975: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  5903  00DFC6  0EBA               	movlw	low STR_25
  5904  00DFC8  6E0D               	movwf	printf@f,c
  5905  00DFCA  0EFD               	movlw	high STR_25
  5906  00DFCC  6E0E               	movwf	printf@f+1,c
  5907  00DFCE  C02F  F00F         	movff	displayLogs@roundPieces,?_printf+2
  5908  00DFD2  C030  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  5909  00DFD6  C031  F011         	movff	displayLogs@flatPieces,?_printf+4
  5910  00DFDA  C032  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  5911  00DFDE  C033  F013         	movff	displayLogs@longPieces,?_printf+6
  5912  00DFE2  C034  F014         	movff	displayLogs@longPieces+1,?_printf+7
  5913  00DFE6  ECC5  F06C         	call	_printf	;wreg free
  5914                           
  5915                           ;standbyMode.c: 976: _delay((unsigned long)((500)*(40000000/4000.0)));
  5916  00DFEA  0E1A               	movlw	26
  5917  00DFEC  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5918  00DFEE  0E5E               	movlw	94
  5919  00DFF0  6E27               	movwf	??_displayLogs& (0+255),c
  5920  00DFF2  0E6E               	movlw	110
  5921  00DFF4                     u8457:
  5922  00DFF4  2EE8               	decfsz	wreg,f,c
  5923  00DFF6  D7FE               	bra	u8457
  5924  00DFF8  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5925  00DFFA  D7FC               	bra	u8457
  5926  00DFFC  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5927  00DFFE  D7FA               	bra	u8457
  5928  00E000  D000               	nop2	
  5929  00E002                     
  5930                           ;standbyMode.c: 979: continue;
  5931  00E002  A281               	btfss	3969,1,c	;volatile
  5932  00E004  D7FE               	goto	l450
  5933                           
  5934                           ;standbyMode.c: 980: }
  5935                           ;standbyMode.c: 982: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5936  00E006  0E01               	movlw	1
  5937  00E008  ECE1  F063         	call	_lcdInst
  5938  00E00C  0EC3               	movlw	195
  5939  00E00E  6E27               	movwf	??_displayLogs& (0+255),c
  5940  00E010  0ECD               	movlw	205
  5941  00E012                     u8467:
  5942  00E012  2EE8               	decfsz	wreg,f,c
  5943  00E014  D7FE               	bra	u8467
  5944  00E016  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5945  00E018  D7FC               	bra	u8467
  5946  00E01A  F000               	nop	
  5947                           
  5948                           ;standbyMode.c: 983: printf("Input Summary:");
  5949  00E01C  0E9B               	movlw	low STR_26
  5950  00E01E  6E0D               	movwf	printf@f,c
  5951  00E020  0EFE               	movlw	high STR_26
  5952  00E022  6E0E               	movwf	printf@f+1,c
  5953  00E024  ECC5  F06C         	call	_printf	;wreg free
  5954                           
  5955                           ;standbyMode.c: 984: _delay((unsigned long)((500)*(40000000/4000.0)));
  5956  00E028  0E1A               	movlw	26
  5957  00E02A  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5958  00E02C  0E5E               	movlw	94
  5959  00E02E  6E27               	movwf	??_displayLogs& (0+255),c
  5960  00E030  0E6E               	movlw	110
  5961  00E032                     u8477:
  5962  00E032  2EE8               	decfsz	wreg,f,c
  5963  00E034  D7FE               	bra	u8477
  5964  00E036  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5965  00E038  D7FC               	bra	u8477
  5966  00E03A  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5967  00E03C  D7FA               	bra	u8477
  5968  00E03E  D000               	nop2	
  5969  00E040                     
  5970                           ;standbyMode.c: 987: continue;
  5971  00E040  A281               	btfss	3969,1,c	;volatile
  5972  00E042  D7FE               	goto	l453
  5973                           
  5974                           ;standbyMode.c: 988: }
  5975                           ;standbyMode.c: 990: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5976  00E044  0E01               	movlw	1
  5977  00E046  ECE1  F063         	call	_lcdInst
  5978  00E04A  0EC3               	movlw	195
  5979  00E04C  6E27               	movwf	??_displayLogs& (0+255),c
  5980  00E04E  0ECD               	movlw	205
  5981  00E050                     u8487:
  5982  00E050  2EE8               	decfsz	wreg,f,c
  5983  00E052  D7FE               	bra	u8487
  5984  00E054  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5985  00E056  D7FC               	bra	u8487
  5986  00E058  F000               	nop	
  5987                           
  5988                           ;standbyMode.c: 991: printf("Drawer 1: RF12");
  5989  00E05A  0E7D               	movlw	low STR_27
  5990  00E05C  6E0D               	movwf	printf@f,c
  5991  00E05E  0EFE               	movlw	high STR_27
  5992  00E060  6E0E               	movwf	printf@f+1,c
  5993  00E062  ECC5  F06C         	call	_printf	;wreg free
  5994                           
  5995                           ;standbyMode.c: 992: lcdInst(0xC0);;
  5996  00E066  0EC0               	movlw	192
  5997  00E068  ECE1  F063         	call	_lcdInst
  5998                           
  5999                           ;standbyMode.c: 993: printf("Drawer 2: L1");
  6000  00E06C  0E49               	movlw	low STR_28
  6001  00E06E  6E0D               	movwf	printf@f,c
  6002  00E070  0EFF               	movlw	high STR_28
  6003  00E072  6E0E               	movwf	printf@f+1,c
  6004  00E074  ECC5  F06C         	call	_printf	;wreg free
  6005                           
  6006                           ;standbyMode.c: 994: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6007  00E078  0E66               	movlw	102
  6008  00E07A  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  6009  00E07C  0E76               	movlw	118
  6010  00E07E  6E27               	movwf	??_displayLogs& (0+255),c
  6011  00E080  0EC1               	movlw	193
  6012  00E082                     u8497:
  6013  00E082  2EE8               	decfsz	wreg,f,c
  6014  00E084  D7FE               	bra	u8497
  6015  00E086  2E27               	decfsz	??_displayLogs& (0+255),f,c
  6016  00E088  D7FC               	bra	u8497
  6017  00E08A  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6018  00E08C  D7FA               	bra	u8497
  6019  00E08E  F000               	nop	
  6020                           
  6021                           ;standbyMode.c: 996: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6022  00E090  0E01               	movlw	1
  6023  00E092  ECE1  F063         	call	_lcdInst
  6024  00E096  0EC3               	movlw	195
  6025  00E098  6E27               	movwf	??_displayLogs& (0+255),c
  6026  00E09A  0ECD               	movlw	205
  6027  00E09C                     u8507:
  6028  00E09C  2EE8               	decfsz	wreg,f,c
  6029  00E09E  D7FE               	bra	u8507
  6030  00E0A0  2E27               	decfsz	??_displayLogs& (0+255),f,c
  6031  00E0A2  D7FC               	bra	u8507
  6032  00E0A4  F000               	nop	
  6033                           
  6034                           ;standbyMode.c: 997: printf("Another log?");
  6035  00E0A6  0E63               	movlw	low STR_29
  6036  00E0A8  6E0D               	movwf	printf@f,c
  6037  00E0AA  0EFF               	movlw	high STR_29
  6038  00E0AC  6E0E               	movwf	printf@f+1,c
  6039  00E0AE  ECC5  F06C         	call	_printf	;wreg free
  6040                           
  6041                           ;standbyMode.c: 998: lcdInst(0xC0);;
  6042  00E0B2  0EC0               	movlw	192
  6043  00E0B4  ECE1  F063         	call	_lcdInst
  6044                           
  6045                           ;standbyMode.c: 999: printf("# = No, D = Yes");
  6046  00E0B8  0E6D               	movlw	low STR_30
  6047  00E0BA  6E0D               	movwf	printf@f,c
  6048  00E0BC  0EFE               	movlw	high STR_30
  6049  00E0BE  6E0E               	movwf	printf@f+1,c
  6050  00E0C0  ECC5  F06C         	call	_printf	;wreg free
  6051  00E0C4  A281               	btfss	3969,1,c	;volatile
  6052  00E0C6  D7FE               	goto	l456
  6053                           
  6054                           ;standbyMode.c: 1002: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  6055  00E0C8  3881               	swapf	3969,w,c	;volatile
  6056  00E0CA  0B0F               	andlw	15
  6057  00E0CC  0B0F               	andlw	15
  6058  00E0CE  6E39               	movwf	displayLogs@keypress3,c
  6059  00E0D0  B281               	btfsc	3969,1,c	;volatile
  6060  00E0D2  D7FE               	goto	l459
  6061                           
  6062                           ;standbyMode.c: 1004: return keypress3;
  6063  00E0D4  C039  F025         	movff	displayLogs@keypress3,?_displayLogs
  6064  00E0D8  6A26               	clrf	?_displayLogs+1,c
  6065  00E0DA  0012               	return		;funcret
  6066  00E0DC                     __end_of_displayLogs:
  6067                           	opt stack 0
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           postdec1	equ	0xFE5
  6077                           plusw1	equ	0xFE3
  6078                           fsr1l	equ	0xFE1
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           plusw2	equ	0xFDB
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function _shiftEEPROM *****************
  6088 ;; Defined at:
  6089 ;;		line 48 in file "EEPROMstorage.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  i               2    5[COMRAM] unsigned int 
  6094 ;;  temp            2    3[COMRAM] unsigned int 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        5 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    1
  6111 ;; This function calls:
  6112 ;;		_readEEPROM
  6113 ;;		_writeEEPROM
  6114 ;; This function is called by:
  6115 ;;		_standbyMode
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           	psect	text7
  6120  00CC9C                     __ptext7:
  6121                           	opt stack 0
  6122  00CC9C                     _shiftEEPROM:
  6123                           	opt stack 28
  6124                           
  6125                           ;EEPROMstorage.c: 49: unsigned int i = 0;
  6126                           
  6127                           ;incstack = 0
  6128  00CC9C  0E00               	movlw	0
  6129  00CC9E  6E07               	movwf	shiftEEPROM@i+1,c
  6130  00CCA0  0E00               	movlw	0
  6131  00CCA2  6E06               	movwf	shiftEEPROM@i,c
  6132                           
  6133                           ;EEPROMstorage.c: 50: unsigned int temp = 0;
  6134  00CCA4  0E00               	movlw	0
  6135  00CCA6  6E05               	movwf	shiftEEPROM@temp+1,c
  6136  00CCA8  0E00               	movlw	0
  6137  00CCAA  6E04               	movwf	shiftEEPROM@temp,c
  6138                           
  6139                           ;EEPROMstorage.c: 51: for (i=102; i<153; i++){
  6140  00CCAC  0E00               	movlw	0
  6141  00CCAE  6E07               	movwf	shiftEEPROM@i+1,c
  6142  00CCB0  0E66               	movlw	102
  6143  00CCB2  6E06               	movwf	shiftEEPROM@i,c
  6144  00CCB4                     l6068:
  6145  00CCB4  5007               	movf	shiftEEPROM@i+1,w,c
  6146  00CCB6  E114               	bnz	l6078
  6147  00CCB8  0E99               	movlw	153
  6148  00CCBA  5C06               	subwf	shiftEEPROM@i,w,c
  6149  00CCBC  B0D8               	btfsc	status,0,c
  6150  00CCBE  D010               	goto	u7190
  6151                           
  6152                           ;EEPROMstorage.c: 52: temp = readEEPROM(i);
  6153  00CCC0  5006               	movf	shiftEEPROM@i,w,c
  6154  00CCC2  ECF5  F063         	call	_readEEPROM
  6155  00CCC6  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6156  00CCC8  5003               	movf	??_shiftEEPROM,w,c
  6157  00CCCA  6E04               	movwf	shiftEEPROM@temp,c
  6158  00CCCC  6A05               	clrf	shiftEEPROM@temp+1,c
  6159                           
  6160                           ;EEPROMstorage.c: 53: writeEEPROM(i+51, temp);
  6161  00CCCE  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6162  00CCD2  5006               	movf	shiftEEPROM@i,w,c
  6163  00CCD4  0F33               	addlw	51
  6164  00CCD6  EC51  F064         	call	_writeEEPROM
  6165  00CCDA  4A06               	infsnz	shiftEEPROM@i,f,c
  6166  00CCDC  2A07               	incf	shiftEEPROM@i+1,f,c
  6167  00CCDE  D7EA               	goto	l6068
  6168  00CCE0                     u7190:
  6169  00CCE0                     l6078:
  6170                           
  6171                           ;EEPROMstorage.c: 54: }
  6172                           ;EEPROMstorage.c: 56: for (i=51; i<102; i++){
  6173  00CCE0  0E00               	movlw	0
  6174  00CCE2  6E07               	movwf	shiftEEPROM@i+1,c
  6175  00CCE4  0E33               	movlw	51
  6176  00CCE6  6E06               	movwf	shiftEEPROM@i,c
  6177  00CCE8                     l6080:
  6178  00CCE8  5007               	movf	shiftEEPROM@i+1,w,c
  6179  00CCEA  E114               	bnz	l6090
  6180  00CCEC  0E66               	movlw	102
  6181  00CCEE  5C06               	subwf	shiftEEPROM@i,w,c
  6182  00CCF0  B0D8               	btfsc	status,0,c
  6183  00CCF2  D010               	goto	u7210
  6184                           
  6185                           ;EEPROMstorage.c: 57: temp = readEEPROM(i);
  6186  00CCF4  5006               	movf	shiftEEPROM@i,w,c
  6187  00CCF6  ECF5  F063         	call	_readEEPROM
  6188  00CCFA  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6189  00CCFC  5003               	movf	??_shiftEEPROM,w,c
  6190  00CCFE  6E04               	movwf	shiftEEPROM@temp,c
  6191  00CD00  6A05               	clrf	shiftEEPROM@temp+1,c
  6192                           
  6193                           ;EEPROMstorage.c: 58: writeEEPROM(i+51, temp);
  6194  00CD02  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6195  00CD06  5006               	movf	shiftEEPROM@i,w,c
  6196  00CD08  0F33               	addlw	51
  6197  00CD0A  EC51  F064         	call	_writeEEPROM
  6198  00CD0E  4A06               	infsnz	shiftEEPROM@i,f,c
  6199  00CD10  2A07               	incf	shiftEEPROM@i+1,f,c
  6200  00CD12  D7EA               	goto	l6080
  6201  00CD14                     u7210:
  6202  00CD14                     l6090:
  6203                           
  6204                           ;EEPROMstorage.c: 59: }
  6205                           ;EEPROMstorage.c: 61: for (i=0; i<51; i++){
  6206  00CD14  0E00               	movlw	0
  6207  00CD16  6E07               	movwf	shiftEEPROM@i+1,c
  6208  00CD18  0E00               	movlw	0
  6209  00CD1A  6E06               	movwf	shiftEEPROM@i,c
  6210  00CD1C                     l6092:
  6211  00CD1C  5007               	movf	shiftEEPROM@i+1,w,c
  6212  00CD1E  E114               	bnz	l762
  6213  00CD20  0E33               	movlw	51
  6214  00CD22  5C06               	subwf	shiftEEPROM@i,w,c
  6215  00CD24  B0D8               	btfsc	status,0,c
  6216  00CD26  0012               	return	
  6217                           
  6218                           ;EEPROMstorage.c: 62: temp = readEEPROM(i);
  6219  00CD28  5006               	movf	shiftEEPROM@i,w,c
  6220  00CD2A  ECF5  F063         	call	_readEEPROM
  6221  00CD2E  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6222  00CD30  5003               	movf	??_shiftEEPROM,w,c
  6223  00CD32  6E04               	movwf	shiftEEPROM@temp,c
  6224  00CD34  6A05               	clrf	shiftEEPROM@temp+1,c
  6225                           
  6226                           ;EEPROMstorage.c: 63: writeEEPROM(i+51, temp);
  6227  00CD36  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6228  00CD3A  5006               	movf	shiftEEPROM@i,w,c
  6229  00CD3C  0F33               	addlw	51
  6230  00CD3E  EC51  F064         	call	_writeEEPROM
  6231  00CD42  4A06               	infsnz	shiftEEPROM@i,f,c
  6232  00CD44  2A07               	incf	shiftEEPROM@i+1,f,c
  6233  00CD46  D7EA               	goto	l6092
  6234  00CD48                     l762:
  6235  00CD48  0012               	return		;funcret
  6236  00CD4A                     __end_of_shiftEEPROM:
  6237                           	opt stack 0
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           postinc0	equ	0xFEE
  6245                           wreg	equ	0xFE8
  6246                           postdec1	equ	0xFE5
  6247                           plusw1	equ	0xFE3
  6248                           fsr1l	equ	0xFE1
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           plusw2	equ	0xFDB
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _readEEPROM *****************
  6258 ;; Defined at:
  6259 ;;		line 29 in file "EEPROMstorage.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  address         1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  address         1    0[COMRAM] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      unsigned char 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:        1 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_viewLogs
  6283 ;;		_displayLogs
  6284 ;;		_standbyMode
  6285 ;;		_shiftEEPROM
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text8
  6290  00C7EA                     __ptext8:
  6291                           	opt stack 0
  6292  00C7EA                     _readEEPROM:
  6293                           	opt stack 28
  6294                           
  6295                           ;incstack = 0
  6296                           ;readEEPROM@address stored from wreg
  6297  00C7EA  6E01               	movwf	readEEPROM@address,c
  6298  00C7EC                     
  6299                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  6300  00C7EC  B2A6               	btfsc	4006,1,c	;volsfr
  6301  00C7EE  D7FE               	goto	l4554
  6302                           
  6303                           ;EEPROMstorage.c: 32: EEADR = address;
  6304  00C7F0  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  6305                           
  6306                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  6307  00C7F4  9EA6               	bcf	4006,7,c	;volsfr
  6308                           
  6309                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  6310  00C7F6  9CA6               	bcf	4006,6,c	;volsfr
  6311                           
  6312                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  6313  00C7F8  80A6               	bsf	4006,0,c	;volsfr
  6314                           
  6315                           ;EEPROMstorage.c: 36: return( EEDATA );
  6316  00C7FA  50A8               	movf	4008,w,c	;volatile
  6317  00C7FC  0012               	return	
  6318  00C7FE                     __end_of_readEEPROM:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           postdec1	equ	0xFE5
  6329                           plusw1	equ	0xFE3
  6330                           fsr1l	equ	0xFE1
  6331                           indf2	equ	0xFDF
  6332                           postinc2	equ	0xFDE
  6333                           postdec2	equ	0xFDD
  6334                           plusw2	equ	0xFDB
  6335                           fsr2h	equ	0xFDA
  6336                           fsr2l	equ	0xFD9
  6337                           status	equ	0xFD8
  6338                           
  6339 ;; *************** function _initEEPROM *****************
  6340 ;; Defined at:
  6341 ;;		line 40 in file "EEPROMstorage.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;		None
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  i               2    2[COMRAM] unsigned int 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  1    wreg      void 
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;Total ram usage:        2 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    1
  6362 ;; This function calls:
  6363 ;;		_writeEEPROM
  6364 ;; This function is called by:
  6365 ;;		_standbyMode
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text9
  6370  00C87C                     __ptext9:
  6371                           	opt stack 0
  6372  00C87C                     _initEEPROM:
  6373                           	opt stack 28
  6374                           
  6375                           ;EEPROMstorage.c: 41: unsigned int i = 0;
  6376                           
  6377                           ;incstack = 0
  6378  00C87C  0E00               	movlw	0
  6379  00C87E  6E04               	movwf	initEEPROM@i+1,c
  6380  00C880  0E00               	movlw	0
  6381  00C882  6E03               	movwf	initEEPROM@i,c
  6382                           
  6383                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
  6384  00C884  0E00               	movlw	0
  6385  00C886  6E04               	movwf	initEEPROM@i+1,c
  6386  00C888  0E00               	movlw	0
  6387  00C88A  6E03               	movwf	initEEPROM@i,c
  6388  00C88C                     l6056:
  6389  00C88C  0404               	decf	initEEPROM@i+1,w,c
  6390  00C88E  B0D8               	btfsc	status,0,c
  6391  00C890  0012               	return	
  6392                           
  6393                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
  6394  00C892  0E00               	movlw	0
  6395  00C894  6E01               	movwf	writeEEPROM@data,c
  6396  00C896  5003               	movf	initEEPROM@i,w,c
  6397  00C898  EC51  F064         	call	_writeEEPROM
  6398  00C89C  4A03               	infsnz	initEEPROM@i,f,c
  6399  00C89E  2A04               	incf	initEEPROM@i+1,f,c
  6400  00C8A0  D7F5               	goto	l6056
  6401  00C8A2                     __end_of_initEEPROM:
  6402                           	opt stack 0
  6403                           tblptru	equ	0xFF8
  6404                           tblptrh	equ	0xFF7
  6405                           tblptrl	equ	0xFF6
  6406                           tablat	equ	0xFF5
  6407                           prodh	equ	0xFF4
  6408                           prodl	equ	0xFF3
  6409                           postinc0	equ	0xFEE
  6410                           wreg	equ	0xFE8
  6411                           postdec1	equ	0xFE5
  6412                           plusw1	equ	0xFE3
  6413                           fsr1l	equ	0xFE1
  6414                           indf2	equ	0xFDF
  6415                           postinc2	equ	0xFDE
  6416                           postdec2	equ	0xFDD
  6417                           plusw2	equ	0xFDB
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _writeEEPROM *****************
  6423 ;; Defined at:
  6424 ;;		line 10 in file "EEPROMstorage.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  address         1    wreg     unsigned char 
  6427 ;;  data            1    0[COMRAM] unsigned char 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;  address         1    1[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      void 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; This function calls:
  6446 ;;		Nothing
  6447 ;; This function is called by:
  6448 ;;		_standbyMode
  6449 ;;		_initEEPROM
  6450 ;;		_shiftEEPROM
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text10
  6455  00C8A2                     __ptext10:
  6456                           	opt stack 0
  6457  00C8A2                     _writeEEPROM:
  6458                           	opt stack 29
  6459                           
  6460                           ;incstack = 0
  6461                           ;writeEEPROM@address stored from wreg
  6462  00C8A2  6E02               	movwf	writeEEPROM@address,c
  6463  00C8A4                     
  6464                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  6465  00C8A4  B2A6               	btfsc	4006,1,c	;volsfr
  6466  00C8A6  D7FE               	goto	l5114
  6467                           
  6468                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  6469  00C8A8  84A6               	bsf	4006,2,c	;volsfr
  6470                           
  6471                           ;EEPROMstorage.c: 14: EEADR=address;
  6472  00C8AA  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  6473                           
  6474                           ;EEPROMstorage.c: 15: EEDATA=data;
  6475  00C8AE  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  6476                           
  6477                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  6478  00C8B2  9EA6               	bcf	4006,7,c	;volsfr
  6479                           
  6480                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  6481  00C8B4  9CA6               	bcf	4006,6,c	;volsfr
  6482                           
  6483                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  6484  00C8B6  9EF2               	bcf	intcon,7,c	;volatile
  6485                           
  6486                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  6487  00C8B8  0E55               	movlw	85
  6488  00C8BA  6EA7               	movwf	4007,c	;volsfr
  6489                           
  6490                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  6491  00C8BC  0EAA               	movlw	170
  6492  00C8BE  6EA7               	movwf	4007,c	;volsfr
  6493                           
  6494                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  6495  00C8C0  82A6               	bsf	4006,1,c	;volsfr
  6496                           
  6497                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  6498  00C8C2  8EF2               	bsf	intcon,7,c	;volatile
  6499  00C8C4  B2A6               	btfsc	4006,1,c	;volsfr
  6500  00C8C6  D7FE               	goto	l740
  6501                           
  6502                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  6503  00C8C8  94A6               	bcf	4006,2,c	;volsfr
  6504  00C8CA  0012               	return		;funcret
  6505  00C8CC                     __end_of_writeEEPROM:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           intcon	equ	0xFF2
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           postdec1	equ	0xFE5
  6517                           plusw1	equ	0xFE3
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           plusw2	equ	0xFDB
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function _getRound *****************
  6528 ;; Defined at:
  6529 ;;		line 312 in file "standbyMode.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  code            2    0[COMRAM] unsigned int 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  returnValue     2    4[COMRAM] unsigned int 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2    0[COMRAM] unsigned int 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:        6 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_standbyMode
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	text11
  6557  00D0A6                     __ptext11:
  6558                           	opt stack 0
  6559  00D0A6                     _getRound:
  6560                           	opt stack 29
  6561                           
  6562                           ;standbyMode.c: 313: unsigned int returnValue = 0;
  6563                           
  6564                           ;incstack = 0
  6565  00D0A6  0E00               	movlw	0
  6566  00D0A8  6E06               	movwf	getRound@returnValue+1,c
  6567  00D0AA  0E00               	movlw	0
  6568  00D0AC  6E05               	movwf	getRound@returnValue,c
  6569                           
  6570                           ;standbyMode.c: 314: switch(code){
  6571  00D0AE  D00D               	goto	l289
  6572  00D0B0                     
  6573                           ;standbyMode.c: 322: returnValue = 2;
  6574  00D0B0  0E00               	movlw	0
  6575  00D0B2  6E06               	movwf	getRound@returnValue+1,c
  6576  00D0B4  0E02               	movlw	2
  6577  00D0B6                     L20:
  6578  00D0B6  6E05               	movwf	getRound@returnValue,c
  6579                           
  6580                           ;standbyMode.c: 328: break;
  6581  00D0B8  D069               	goto	l291
  6582  00D0BA                     
  6583                           ;standbyMode.c: 457: returnValue = 1;
  6584                           
  6585                           ;standbyMode.c: 456: case 45:
  6586                           
  6587                           ;standbyMode.c: 453: break;
  6588                           
  6589                           ;standbyMode.c: 452: returnValue = 1;
  6590                           
  6591                           ;standbyMode.c: 451: case 44:
  6592                           
  6593                           ;standbyMode.c: 448: break;
  6594                           
  6595                           ;standbyMode.c: 447: returnValue = 1;
  6596  00D0BA  0E00               	movlw	0
  6597  00D0BC  6E06               	movwf	getRound@returnValue+1,c
  6598  00D0BE  0E01               	movlw	1
  6599  00D0C0  D7FA               	goto	L20
  6600  00D0C2                     
  6601                           ;standbyMode.c: 461: returnValue = 0;
  6602  00D0C2  0E00               	movlw	0
  6603  00D0C4  6E06               	movwf	getRound@returnValue+1,c
  6604  00D0C6  0E00               	movlw	0
  6605  00D0C8  D7F6               	goto	L20
  6606  00D0CA                     l289:
  6607  00D0CA  C001  F003         	movff	getRound@code,??_getRound
  6608  00D0CE  C002  F004         	movff	getRound@code+1,??_getRound+1
  6609                           
  6610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6611                           ; Switch size 1, requested type "space"
  6612                           ; Number of cases is 1, Range of values is 0 to 0
  6613                           ; switch strategies available:
  6614                           ; Name         Instructions Cycles
  6615                           ; simple_byte            4     3 (average)
  6616                           ;	Chosen strategy is simple_byte
  6617  00D0D2  5004               	movf	??_getRound+1,w,c
  6618  00D0D4  0A00               	xorlw	0	; case 0
  6619  00D0D6  A4D8               	btfss	status,2,c
  6620  00D0D8  D7F4               	goto	l320
  6621                           
  6622                           ; Switch size 1, requested type "space"
  6623                           ; Number of cases is 29, Range of values is 1 to 45
  6624                           ; switch strategies available:
  6625                           ; Name         Instructions Cycles
  6626                           ; simple_byte           88    45 (average)
  6627                           ;	Chosen strategy is simple_byte
  6628  00D0DA  5003               	movf	??_getRound,w,c
  6629  00D0DC  0A01               	xorlw	1	; case 1
  6630  00D0DE  B4D8               	btfsc	status,2,c
  6631  00D0E0  D7EC               	goto	l317
  6632  00D0E2  0A03               	xorlw	3	; case 2
  6633  00D0E4  B4D8               	btfsc	status,2,c
  6634  00D0E6  D7E4               	goto	l292
  6635  00D0E8  0A0A               	xorlw	10	; case 8
  6636  00D0EA  B4D8               	btfsc	status,2,c
  6637  00D0EC  D7E6               	goto	l317
  6638  00D0EE  0A01               	xorlw	1	; case 9
  6639  00D0F0  B4D8               	btfsc	status,2,c
  6640  00D0F2  D7E3               	goto	l317
  6641  00D0F4  0A03               	xorlw	3	; case 10
  6642  00D0F6  B4D8               	btfsc	status,2,c
  6643  00D0F8  D7DB               	goto	l292
  6644  00D0FA  0A01               	xorlw	1	; case 11
  6645  00D0FC  B4D8               	btfsc	status,2,c
  6646  00D0FE  D7D8               	goto	l292
  6647  00D100  0A07               	xorlw	7	; case 12
  6648  00D102  B4D8               	btfsc	status,2,c
  6649  00D104  D7DA               	goto	l317
  6650  00D106  0A01               	xorlw	1	; case 13
  6651  00D108  B4D8               	btfsc	status,2,c
  6652  00D10A  D7D7               	goto	l317
  6653  00D10C  0A03               	xorlw	3	; case 14
  6654  00D10E  B4D8               	btfsc	status,2,c
  6655  00D110  D7D4               	goto	l317
  6656  00D112  0A01               	xorlw	1	; case 15
  6657  00D114  B4D8               	btfsc	status,2,c
  6658  00D116  D7CC               	goto	l292
  6659  00D118  0A1F               	xorlw	31	; case 16
  6660  00D11A  B4D8               	btfsc	status,2,c
  6661  00D11C  D7C9               	goto	l292
  6662  00D11E  0A06               	xorlw	6	; case 22
  6663  00D120  B4D8               	btfsc	status,2,c
  6664  00D122  D7C6               	goto	l292
  6665  00D124  0A01               	xorlw	1	; case 23
  6666  00D126  B4D8               	btfsc	status,2,c
  6667  00D128  D7C3               	goto	l292
  6668  00D12A  0A0F               	xorlw	15	; case 24
  6669  00D12C  B4D8               	btfsc	status,2,c
  6670  00D12E  D7C0               	goto	l292
  6671  00D130  0A01               	xorlw	1	; case 25
  6672  00D132  B4D8               	btfsc	status,2,c
  6673  00D134  D7BD               	goto	l292
  6674  00D136  0A03               	xorlw	3	; case 26
  6675  00D138  B4D8               	btfsc	status,2,c
  6676  00D13A  D7BF               	goto	l317
  6677  00D13C  0A01               	xorlw	1	; case 27
  6678  00D13E  B4D8               	btfsc	status,2,c
  6679  00D140  D7B7               	goto	l292
  6680  00D142  0A07               	xorlw	7	; case 28
  6681  00D144  B4D8               	btfsc	status,2,c
  6682  00D146  D7B9               	goto	l317
  6683  00D148  0A01               	xorlw	1	; case 29
  6684  00D14A  B4D8               	btfsc	status,2,c
  6685  00D14C  D7B6               	goto	l317
  6686  00D14E  0A03               	xorlw	3	; case 30
  6687  00D150  B4D8               	btfsc	status,2,c
  6688  00D152  D7B3               	goto	l317
  6689  00D154  0A01               	xorlw	1	; case 31
  6690  00D156  B4D8               	btfsc	status,2,c
  6691  00D158  D7AB               	goto	l292
  6692  00D15A  0A3F               	xorlw	63	; case 32
  6693  00D15C  B4D8               	btfsc	status,2,c
  6694  00D15E  D7AD               	goto	l317
  6695  00D160  0A01               	xorlw	1	; case 33
  6696  00D162  B4D8               	btfsc	status,2,c
  6697  00D164  D7AA               	goto	l317
  6698  00D166  0A03               	xorlw	3	; case 34
  6699  00D168  B4D8               	btfsc	status,2,c
  6700  00D16A  D7A7               	goto	l317
  6701  00D16C  0A01               	xorlw	1	; case 35
  6702  00D16E  B4D8               	btfsc	status,2,c
  6703  00D170  D79F               	goto	l292
  6704  00D172  0A09               	xorlw	9	; case 42
  6705  00D174  B4D8               	btfsc	status,2,c
  6706  00D176  D79C               	goto	l292
  6707  00D178  0A01               	xorlw	1	; case 43
  6708  00D17A  B4D8               	btfsc	status,2,c
  6709  00D17C  D79E               	goto	l317
  6710  00D17E  0A07               	xorlw	7	; case 44
  6711  00D180  B4D8               	btfsc	status,2,c
  6712  00D182  D79B               	goto	l317
  6713  00D184  0A01               	xorlw	1	; case 45
  6714  00D186  B4D8               	btfsc	status,2,c
  6715  00D188  D798               	goto	l317
  6716  00D18A  D79B               	goto	l320
  6717  00D18C                     l291:
  6718                           
  6719                           ;standbyMode.c: 464: return returnValue;
  6720  00D18C  C005  F001         	movff	getRound@returnValue,?_getRound
  6721  00D190  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  6722  00D194  0012               	return		;funcret
  6723  00D196                     __end_of_getRound:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon	equ	0xFF2
  6732                           postinc0	equ	0xFEE
  6733                           wreg	equ	0xFE8
  6734                           postdec1	equ	0xFE5
  6735                           plusw1	equ	0xFE3
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           plusw2	equ	0xFDB
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _getLong *****************
  6746 ;; Defined at:
  6747 ;;		line 625 in file "standbyMode.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  code            2    0[COMRAM] unsigned int 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  returnValue     2    4[COMRAM] unsigned int 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  2    0[COMRAM] unsigned int 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;Total ram usage:        6 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_standbyMode
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text12
  6775  00D196                     __ptext12:
  6776                           	opt stack 0
  6777  00D196                     _getLong:
  6778                           	opt stack 29
  6779                           
  6780                           ;standbyMode.c: 626: unsigned int returnValue = 0;
  6781                           
  6782                           ;incstack = 0
  6783  00D196  0E00               	movlw	0
  6784  00D198  6E06               	movwf	getLong@returnValue+1,c
  6785  00D19A  0E00               	movlw	0
  6786  00D19C  6E05               	movwf	getLong@returnValue,c
  6787                           
  6788                           ;standbyMode.c: 628: switch(code){
  6789  00D19E  D011               	goto	l359
  6790  00D1A0                     
  6791                           ;standbyMode.c: 646: returnValue = 1;
  6792  00D1A0  0E00               	movlw	0
  6793  00D1A2  6E06               	movwf	getLong@returnValue+1,c
  6794  00D1A4  0E01               	movlw	1
  6795  00D1A6  D007               	goto	L34
  6796  00D1A8                     l368:
  6797                           
  6798                           ;standbyMode.c: 676: returnValue = 2;
  6799                           
  6800                           ;standbyMode.c: 675: case 18:
  6801                           
  6802                           ;standbyMode.c: 672: break;
  6803                           
  6804                           ;standbyMode.c: 671: returnValue = 1;
  6805                           
  6806                           ;standbyMode.c: 670: case 17:
  6807                           
  6808                           ;standbyMode.c: 667: break;
  6809                           
  6810                           ;standbyMode.c: 666: returnValue = 2;
  6811  00D1A8  0E00               	movlw	0
  6812  00D1AA  6E06               	movwf	getLong@returnValue+1,c
  6813  00D1AC  0E02               	movlw	2
  6814  00D1AE  D003               	goto	L34
  6815  00D1B0                     l371:
  6816                           
  6817                           ;standbyMode.c: 681: returnValue = 3;
  6818  00D1B0  0E00               	movlw	0
  6819  00D1B2  6E06               	movwf	getLong@returnValue+1,c
  6820  00D1B4  0E03               	movlw	3
  6821  00D1B6                     L34:
  6822  00D1B6  6E05               	movwf	getLong@returnValue,c
  6823                           
  6824                           ;standbyMode.c: 702: break;
  6825  00D1B8  D074               	goto	l361
  6826  00D1BA                     
  6827                           ;standbyMode.c: 800: returnValue = 0;
  6828  00D1BA  0E00               	movlw	0
  6829  00D1BC  6E06               	movwf	getLong@returnValue+1,c
  6830  00D1BE  0E00               	movlw	0
  6831  00D1C0  D7FA               	goto	L34
  6832  00D1C2                     l359:
  6833  00D1C2  C001  F003         	movff	getLong@code,??_getLong
  6834  00D1C6  C002  F004         	movff	getLong@code+1,??_getLong+1
  6835                           
  6836                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6837                           ; Switch size 1, requested type "space"
  6838                           ; Number of cases is 1, Range of values is 0 to 0
  6839                           ; switch strategies available:
  6840                           ; Name         Instructions Cycles
  6841                           ; simple_byte            4     3 (average)
  6842                           ;	Chosen strategy is simple_byte
  6843  00D1CA  5004               	movf	??_getLong+1,w,c
  6844  00D1CC  0A00               	xorlw	0	; case 0
  6845  00D1CE  A4D8               	btfss	status,2,c
  6846  00D1D0  D7F4               	goto	l395
  6847                           
  6848                           ; Switch size 1, requested type "space"
  6849                           ; Number of cases is 34, Range of values is 5 to 46
  6850                           ; switch strategies available:
  6851                           ; Name         Instructions Cycles
  6852                           ; simple_byte          103    52 (average)
  6853                           ;	Chosen strategy is simple_byte
  6854  00D1D2  5003               	movf	??_getLong,w,c
  6855  00D1D4  0A05               	xorlw	5	; case 5
  6856  00D1D6  B4D8               	btfsc	status,2,c
  6857  00D1D8  D7E3               	goto	l364
  6858  00D1DA  0A03               	xorlw	3	; case 6
  6859  00D1DC  B4D8               	btfsc	status,2,c
  6860  00D1DE  D7E4               	goto	l368
  6861  00D1E0  0A01               	xorlw	1	; case 7
  6862  00D1E2  B4D8               	btfsc	status,2,c
  6863  00D1E4  D7E5               	goto	l371
  6864  00D1E6  0A0B               	xorlw	11	; case 12
  6865  00D1E8  B4D8               	btfsc	status,2,c
  6866  00D1EA  D7DA               	goto	l364
  6867  00D1EC  0A01               	xorlw	1	; case 13
  6868  00D1EE  B4D8               	btfsc	status,2,c
  6869  00D1F0  D7DB               	goto	l368
  6870  00D1F2  0A03               	xorlw	3	; case 14
  6871  00D1F4  B4D8               	btfsc	status,2,c
  6872  00D1F6  D7DC               	goto	l371
  6873  00D1F8  0A01               	xorlw	1	; case 15
  6874  00D1FA  B4D8               	btfsc	status,2,c
  6875  00D1FC  D7D1               	goto	l364
  6876  00D1FE  0A1F               	xorlw	31	; case 16
  6877  00D200  B4D8               	btfsc	status,2,c
  6878  00D202  D7D2               	goto	l368
  6879  00D204  0A01               	xorlw	1	; case 17
  6880  00D206  B4D8               	btfsc	status,2,c
  6881  00D208  D7CB               	goto	l364
  6882  00D20A  0A03               	xorlw	3	; case 18
  6883  00D20C  B4D8               	btfsc	status,2,c
  6884  00D20E  D7CC               	goto	l368
  6885  00D210  0A01               	xorlw	1	; case 19
  6886  00D212  B4D8               	btfsc	status,2,c
  6887  00D214  D7CD               	goto	l371
  6888  00D216  0A07               	xorlw	7	; case 20
  6889  00D218  B4D8               	btfsc	status,2,c
  6890  00D21A  D7C2               	goto	l364
  6891  00D21C  0A01               	xorlw	1	; case 21
  6892  00D21E  B4D8               	btfsc	status,2,c
  6893  00D220  D7C3               	goto	l368
  6894  00D222  0A0D               	xorlw	13	; case 24
  6895  00D224  B4D8               	btfsc	status,2,c
  6896  00D226  D7BC               	goto	l364
  6897  00D228  0A01               	xorlw	1	; case 25
  6898  00D22A  B4D8               	btfsc	status,2,c
  6899  00D22C  D7BD               	goto	l368
  6900  00D22E  0A05               	xorlw	5	; case 28
  6901  00D230  B4D8               	btfsc	status,2,c
  6902  00D232  D7BA               	goto	l368
  6903  00D234  0A01               	xorlw	1	; case 29
  6904  00D236  B4D8               	btfsc	status,2,c
  6905  00D238  D7BB               	goto	l371
  6906  00D23A  0A03               	xorlw	3	; case 30
  6907  00D23C  B4D8               	btfsc	status,2,c
  6908  00D23E  D7B8               	goto	l371
  6909  00D240  0A01               	xorlw	1	; case 31
  6910  00D242  B4D8               	btfsc	status,2,c
  6911  00D244  D7B1               	goto	l368
  6912  00D246  0A3F               	xorlw	63	; case 32
  6913  00D248  B4D8               	btfsc	status,2,c
  6914  00D24A  D7AA               	goto	l364
  6915  00D24C  0A01               	xorlw	1	; case 33
  6916  00D24E  B4D8               	btfsc	status,2,c
  6917  00D250  D7AB               	goto	l368
  6918  00D252  0A03               	xorlw	3	; case 34
  6919  00D254  B4D8               	btfsc	status,2,c
  6920  00D256  D7A4               	goto	l364
  6921  00D258  0A01               	xorlw	1	; case 35
  6922  00D25A  B4D8               	btfsc	status,2,c
  6923  00D25C  D7A1               	goto	l364
  6924  00D25E  0A07               	xorlw	7	; case 36
  6925  00D260  B4D8               	btfsc	status,2,c
  6926  00D262  D79E               	goto	l364
  6927  00D264  0A01               	xorlw	1	; case 37
  6928  00D266  B4D8               	btfsc	status,2,c
  6929  00D268  D79F               	goto	l368
  6930  00D26A  0A03               	xorlw	3	; case 38
  6931  00D26C  B4D8               	btfsc	status,2,c
  6932  00D26E  D79C               	goto	l368
  6933  00D270  0A01               	xorlw	1	; case 39
  6934  00D272  B4D8               	btfsc	status,2,c
  6935  00D274  D79D               	goto	l371
  6936  00D276  0A0F               	xorlw	15	; case 40
  6937  00D278  B4D8               	btfsc	status,2,c
  6938  00D27A  D79A               	goto	l371
  6939  00D27C  0A01               	xorlw	1	; case 41
  6940  00D27E  B4D8               	btfsc	status,2,c
  6941  00D280  D793               	goto	l368
  6942  00D282  0A03               	xorlw	3	; case 42
  6943  00D284  B4D8               	btfsc	status,2,c
  6944  00D286  D78C               	goto	l364
  6945  00D288  0A01               	xorlw	1	; case 43
  6946  00D28A  B4D8               	btfsc	status,2,c
  6947  00D28C  D789               	goto	l364
  6948  00D28E  0A07               	xorlw	7	; case 44
  6949  00D290  B4D8               	btfsc	status,2,c
  6950  00D292  D78A               	goto	l368
  6951  00D294  0A01               	xorlw	1	; case 45
  6952  00D296  B4D8               	btfsc	status,2,c
  6953  00D298  D78B               	goto	l371
  6954  00D29A  0A03               	xorlw	3	; case 46
  6955  00D29C  B4D8               	btfsc	status,2,c
  6956  00D29E  D788               	goto	l371
  6957  00D2A0  D78C               	goto	l395
  6958  00D2A2                     l361:
  6959                           
  6960                           ;standbyMode.c: 803: return returnValue;
  6961  00D2A2  C005  F001         	movff	getLong@returnValue,?_getLong
  6962  00D2A6  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  6963  00D2AA  0012               	return		;funcret
  6964  00D2AC                     __end_of_getLong:
  6965                           	opt stack 0
  6966                           tblptru	equ	0xFF8
  6967                           tblptrh	equ	0xFF7
  6968                           tblptrl	equ	0xFF6
  6969                           tablat	equ	0xFF5
  6970                           prodh	equ	0xFF4
  6971                           prodl	equ	0xFF3
  6972                           intcon	equ	0xFF2
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           plusw1	equ	0xFE3
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           plusw2	equ	0xFDB
  6982                           fsr2h	equ	0xFDA
  6983                           fsr2l	equ	0xFD9
  6984                           status	equ	0xFD8
  6985                           
  6986 ;; *************** function _getFlat *****************
  6987 ;; Defined at:
  6988 ;;		line 468 in file "standbyMode.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  code            2    0[COMRAM] unsigned int 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  returnValue     2    4[COMRAM] unsigned int 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  2    0[COMRAM] unsigned int 
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;Total ram usage:        6 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_standbyMode
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text13
  7016  00CFB6                     __ptext13:
  7017                           	opt stack 0
  7018  00CFB6                     _getFlat:
  7019                           	opt stack 29
  7020                           
  7021                           ;standbyMode.c: 469: unsigned int returnValue = 0;
  7022                           
  7023                           ;incstack = 0
  7024  00CFB6  0E00               	movlw	0
  7025  00CFB8  6E06               	movwf	getFlat@returnValue+1,c
  7026  00CFBA  0E00               	movlw	0
  7027  00CFBC  6E05               	movwf	getFlat@returnValue,c
  7028                           
  7029                           ;standbyMode.c: 471: switch(code){
  7030  00CFBE  D00D               	goto	l324
  7031  00CFC0                     
  7032                           ;standbyMode.c: 474: returnValue = 1;
  7033  00CFC0  0E00               	movlw	0
  7034  00CFC2  6E06               	movwf	getFlat@returnValue+1,c
  7035  00CFC4  0E01               	movlw	1
  7036  00CFC6  D003               	goto	L40
  7037  00CFC8                     
  7038                           ;standbyMode.c: 499: returnValue = 2;
  7039                           
  7040                           ;standbyMode.c: 498: case 11:
  7041                           
  7042                           ;standbyMode.c: 495: break;
  7043                           
  7044                           ;standbyMode.c: 494: returnValue = 1;
  7045                           
  7046                           ;standbyMode.c: 493: case 10:
  7047                           
  7048                           ;standbyMode.c: 490: break;
  7049                           
  7050                           ;standbyMode.c: 489: returnValue = 2;
  7051                           
  7052                           ;standbyMode.c: 488: case 9:
  7053                           
  7054                           ;standbyMode.c: 485: break;
  7055                           
  7056                           ;standbyMode.c: 484: returnValue = 1;
  7057                           
  7058                           ;standbyMode.c: 483: case 8:
  7059                           
  7060                           ;standbyMode.c: 480: break;
  7061                           
  7062                           ;standbyMode.c: 479: returnValue = 2;
  7063  00CFC8  0E00               	movlw	0
  7064  00CFCA  6E06               	movwf	getFlat@returnValue+1,c
  7065  00CFCC  0E02               	movlw	2
  7066  00CFCE                     L40:
  7067  00CFCE  6E05               	movwf	getFlat@returnValue,c
  7068                           
  7069                           ;standbyMode.c: 505: break;
  7070  00CFD0  D065               	goto	l326
  7071  00CFD2                     
  7072                           ;standbyMode.c: 618: returnValue = 0;
  7073  00CFD2  0E00               	movlw	0
  7074  00CFD4  6E06               	movwf	getFlat@returnValue+1,c
  7075  00CFD6  0E00               	movlw	0
  7076  00CFD8  D7FA               	goto	L40
  7077  00CFDA                     l324:
  7078  00CFDA  C001  F003         	movff	getFlat@code,??_getFlat
  7079  00CFDE  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  7080                           
  7081                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7082                           ; Switch size 1, requested type "space"
  7083                           ; Number of cases is 1, Range of values is 0 to 0
  7084                           ; switch strategies available:
  7085                           ; Name         Instructions Cycles
  7086                           ; simple_byte            4     3 (average)
  7087                           ;	Chosen strategy is simple_byte
  7088  00CFE2  5004               	movf	??_getFlat+1,w,c
  7089  00CFE4  0A00               	xorlw	0	; case 0
  7090  00CFE6  A4D8               	btfss	status,2,c
  7091  00CFE8  D7F4               	goto	l355
  7092                           
  7093                           ; Switch size 1, requested type "space"
  7094                           ; Number of cases is 29, Range of values is 3 to 46
  7095                           ; switch strategies available:
  7096                           ; Name         Instructions Cycles
  7097                           ; simple_byte           88    45 (average)
  7098                           ;	Chosen strategy is simple_byte
  7099  00CFEA  5003               	movf	??_getFlat,w,c
  7100  00CFEC  0A03               	xorlw	3	; case 3
  7101  00CFEE  B4D8               	btfsc	status,2,c
  7102  00CFF0  D7E7               	goto	l325
  7103  00CFF2  0A07               	xorlw	7	; case 4
  7104  00CFF4  B4D8               	btfsc	status,2,c
  7105  00CFF6  D7E8               	goto	l327
  7106  00CFF8  0A0C               	xorlw	12	; case 8
  7107  00CFFA  B4D8               	btfsc	status,2,c
  7108  00CFFC  D7E1               	goto	l325
  7109  00CFFE  0A01               	xorlw	1	; case 9
  7110  00D000  B4D8               	btfsc	status,2,c
  7111  00D002  D7E2               	goto	l327
  7112  00D004  0A03               	xorlw	3	; case 10
  7113  00D006  B4D8               	btfsc	status,2,c
  7114  00D008  D7DB               	goto	l325
  7115  00D00A  0A01               	xorlw	1	; case 11
  7116  00D00C  B4D8               	btfsc	status,2,c
  7117  00D00E  D7DC               	goto	l327
  7118  00D010  0A1A               	xorlw	26	; case 17
  7119  00D012  B4D8               	btfsc	status,2,c
  7120  00D014  D7D5               	goto	l325
  7121  00D016  0A03               	xorlw	3	; case 18
  7122  00D018  B4D8               	btfsc	status,2,c
  7123  00D01A  D7D2               	goto	l325
  7124  00D01C  0A01               	xorlw	1	; case 19
  7125  00D01E  B4D8               	btfsc	status,2,c
  7126  00D020  D7CF               	goto	l325
  7127  00D022  0A07               	xorlw	7	; case 20
  7128  00D024  B4D8               	btfsc	status,2,c
  7129  00D026  D7D0               	goto	l327
  7130  00D028  0A01               	xorlw	1	; case 21
  7131  00D02A  B4D8               	btfsc	status,2,c
  7132  00D02C  D7CD               	goto	l327
  7133  00D02E  0A03               	xorlw	3	; case 22
  7134  00D030  B4D8               	btfsc	status,2,c
  7135  00D032  D7C6               	goto	l325
  7136  00D034  0A01               	xorlw	1	; case 23
  7137  00D036  B4D8               	btfsc	status,2,c
  7138  00D038  D7C7               	goto	l327
  7139  00D03A  0A0D               	xorlw	13	; case 26
  7140  00D03C  B4D8               	btfsc	status,2,c
  7141  00D03E  D7C4               	goto	l327
  7142  00D040  0A01               	xorlw	1	; case 27
  7143  00D042  B4D8               	btfsc	status,2,c
  7144  00D044  D7C1               	goto	l327
  7145  00D046  0A3B               	xorlw	59	; case 32
  7146  00D048  B4D8               	btfsc	status,2,c
  7147  00D04A  D7BA               	goto	l325
  7148  00D04C  0A01               	xorlw	1	; case 33
  7149  00D04E  B4D8               	btfsc	status,2,c
  7150  00D050  D7B7               	goto	l325
  7151  00D052  0A03               	xorlw	3	; case 34
  7152  00D054  B4D8               	btfsc	status,2,c
  7153  00D056  D7B8               	goto	l327
  7154  00D058  0A01               	xorlw	1	; case 35
  7155  00D05A  B4D8               	btfsc	status,2,c
  7156  00D05C  D7B1               	goto	l325
  7157  00D05E  0A07               	xorlw	7	; case 36
  7158  00D060  B4D8               	btfsc	status,2,c
  7159  00D062  D7B2               	goto	l327
  7160  00D064  0A01               	xorlw	1	; case 37
  7161  00D066  B4D8               	btfsc	status,2,c
  7162  00D068  D7AF               	goto	l327
  7163  00D06A  0A03               	xorlw	3	; case 38
  7164  00D06C  B4D8               	btfsc	status,2,c
  7165  00D06E  D7A8               	goto	l325
  7166  00D070  0A01               	xorlw	1	; case 39
  7167  00D072  B4D8               	btfsc	status,2,c
  7168  00D074  D7A5               	goto	l325
  7169  00D076  0A0F               	xorlw	15	; case 40
  7170  00D078  B4D8               	btfsc	status,2,c
  7171  00D07A  D7A2               	goto	l325
  7172  00D07C  0A01               	xorlw	1	; case 41
  7173  00D07E  B4D8               	btfsc	status,2,c
  7174  00D080  D7A3               	goto	l327
  7175  00D082  0A03               	xorlw	3	; case 42
  7176  00D084  B4D8               	btfsc	status,2,c
  7177  00D086  D79C               	goto	l325
  7178  00D088  0A01               	xorlw	1	; case 43
  7179  00D08A  B4D8               	btfsc	status,2,c
  7180  00D08C  D79D               	goto	l327
  7181  00D08E  0A07               	xorlw	7	; case 44
  7182  00D090  B4D8               	btfsc	status,2,c
  7183  00D092  D796               	goto	l325
  7184  00D094  0A02               	xorlw	2	; case 46
  7185  00D096  B4D8               	btfsc	status,2,c
  7186  00D098  D793               	goto	l325
  7187  00D09A  D79B               	goto	l355
  7188  00D09C                     l326:
  7189                           
  7190                           ;standbyMode.c: 621: return returnValue;
  7191  00D09C  C005  F001         	movff	getFlat@returnValue,?_getFlat
  7192  00D0A0  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  7193  00D0A4  0012               	return		;funcret
  7194  00D0A6                     __end_of_getFlat:
  7195                           	opt stack 0
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           plusw1	equ	0xFE3
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           plusw2	equ	0xFDB
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8
  7215                           
  7216 ;; *************** function _food_press *****************
  7217 ;; Defined at:
  7218 ;;		line 1114 in file "standbyMode.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  dietSum         2   36[COMRAM] unsigned int 
  7221 ;;  drawer          2   38[COMRAM] unsigned int 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  keypress        1   50[COMRAM] unsigned char 
  7224 ;;  foodTable       8   51[COMRAM] unsigned int [4]
  7225 ;;  count           2   48[COMRAM] unsigned int 
  7226 ;;  isValid         2   46[COMRAM] unsigned int 
  7227 ;;  backCheck       2   44[COMRAM] unsigned int 
  7228 ;;  tally           2   42[COMRAM] unsigned int 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  2   36[COMRAM] unsigned int 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;Total ram usage:       23 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    3
  7245 ;; This function calls:
  7246 ;;		_check_food
  7247 ;;		_get_digits
  7248 ;;		_lcdInst
  7249 ;;		_printf
  7250 ;;		_putch
  7251 ;; This function is called by:
  7252 ;;		_standbyMode
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text14
  7257  00D2AC                     __ptext14:
  7258                           	opt stack 0
  7259  00D2AC                     _food_press:
  7260                           	opt stack 26
  7261                           
  7262                           ;incstack = 0
  7263                           ;standbyMode.c: 1116: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  7264  00D2AC  0E01               	movlw	1
  7265  00D2AE  ECE1  F063         	call	_lcdInst
  7266  00D2B2  0EC3               	movlw	195
  7267  00D2B4  6E29               	movwf	??_food_press& (0+255),c
  7268  00D2B6  0ECD               	movlw	205
  7269  00D2B8                     u8517:
  7270  00D2B8  2EE8               	decfsz	wreg,f,c
  7271  00D2BA  D7FE               	bra	u8517
  7272  00D2BC  2E29               	decfsz	??_food_press& (0+255),f,c
  7273  00D2BE  D7FC               	bra	u8517
  7274  00D2C0  F000               	nop	
  7275                           
  7276                           ;standbyMode.c: 1117: printf("Drawer %i food:", drawer);
  7277  00D2C2  0E0D               	movlw	low STR_31
  7278  00D2C4  6E0D               	movwf	printf@f,c
  7279  00D2C6  0EFE               	movlw	high STR_31
  7280  00D2C8  6E0E               	movwf	printf@f+1,c
  7281  00D2CA  C027  F00F         	movff	food_press@drawer,?_printf+2
  7282  00D2CE  C028  F010         	movff	food_press@drawer+1,?_printf+3
  7283  00D2D2  ECC5  F06C         	call	_printf	;wreg free
  7284                           
  7285                           ;standbyMode.c: 1118: lcdInst(0xC0);;
  7286  00D2D6  0EC0               	movlw	192
  7287  00D2D8  ECE1  F063         	call	_lcdInst
  7288                           
  7289                           ;standbyMode.c: 1120: unsigned int tally = 0;
  7290  00D2DC  0E00               	movlw	0
  7291  00D2DE  6E2C               	movwf	food_press@tally+1,c
  7292  00D2E0  0E00               	movlw	0
  7293  00D2E2  6E2B               	movwf	food_press@tally,c
  7294                           
  7295                           ;standbyMode.c: 1121: unsigned int count = 0;
  7296  00D2E4  0E00               	movlw	0
  7297  00D2E6  6E32               	movwf	food_press@count+1,c
  7298  00D2E8  0E00               	movlw	0
  7299  00D2EA  6E31               	movwf	food_press@count,c
  7300                           
  7301                           ;standbyMode.c: 1122: unsigned int foodTable[4] = {0, 0, 0, 0};
  7302  00D2EC  EE20  F061         	lfsr	2,food_press@F3126
  7303  00D2F0  EE10  F034         	lfsr	1,food_press@foodTable
  7304  00D2F4  0E07               	movlw	7
  7305  00D2F6                     u5911:
  7306  00D2F6  CFDB FFE3          	movff	plusw2,plusw1
  7307  00D2FA  06E8               	decf	wreg,f,c
  7308  00D2FC  E2FC               	bc	u5911
  7309                           
  7310                           ;standbyMode.c: 1123: unsigned int isValid = 0;
  7311  00D2FE  0E00               	movlw	0
  7312  00D300  6E30               	movwf	food_press@isValid+1,c
  7313  00D302  0E00               	movlw	0
  7314  00D304  6E2F               	movwf	food_press@isValid,c
  7315                           
  7316                           ;standbyMode.c: 1124: unsigned int backCheck = 0;
  7317  00D306  0E00               	movlw	0
  7318  00D308  6E2E               	movwf	food_press@backCheck+1,c
  7319  00D30A  0E00               	movlw	0
  7320  00D30C  6E2D               	movwf	food_press@backCheck,c
  7321                           
  7322                           ;standbyMode.c: 1125: tally = get_digits(dietSum);
  7323  00D30E  C025  F001         	movff	food_press@dietSum,get_digits@sum
  7324  00D312  C026  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  7325  00D316  ECA5  F066         	call	_get_digits	;wreg free
  7326  00D31A  C001  F02B         	movff	?_get_digits,food_press@tally
  7327  00D31E  C002  F02C         	movff	?_get_digits+1,food_press@tally+1
  7328  00D322                     
  7329                           ;standbyMode.c: 1128: while(PORTBbits.RB1 == 0){ continue; }
  7330  00D322  A281               	btfss	3969,1,c	;volatile
  7331  00D324  D7FE               	goto	l491
  7332                           
  7333                           ;standbyMode.c: 1129: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7334  00D326  3881               	swapf	3969,w,c	;volatile
  7335  00D328  0B0F               	andlw	15
  7336  00D32A  0B0F               	andlw	15
  7337  00D32C  6E33               	movwf	food_press@keypress,c
  7338  00D32E  B281               	btfsc	3969,1,c	;volatile
  7339  00D330  D7FE               	goto	l496
  7340                           
  7341                           ;standbyMode.c: 1132: if(keypress == 15){
  7342  00D332  0E0F               	movlw	15
  7343  00D334  1833               	xorwf	food_press@keypress,w,c
  7344  00D336  B4D8               	btfsc	status,2,c
  7345  00D338  D06D               	goto	l499
  7346                           
  7347                           ;standbyMode.c: 1135: else if (keypress == 14){
  7348                           
  7349                           ;standbyMode.c: 1134: }
  7350                           
  7351                           ;standbyMode.c: 1133: break;
  7352  00D33A  0E0E               	movlw	14
  7353  00D33C  1833               	xorwf	food_press@keypress,w,c
  7354  00D33E  A4D8               	btfss	status,2,c
  7355  00D340  D005               	goto	l501
  7356                           
  7357                           ;standbyMode.c: 1136: backCheck = 1;
  7358  00D342  0E00               	movlw	0
  7359  00D344  6E2E               	movwf	food_press@backCheck+1,c
  7360  00D346  0E01               	movlw	1
  7361  00D348  6E2D               	movwf	food_press@backCheck,c
  7362                           
  7363                           ;standbyMode.c: 1137: break;
  7364  00D34A  D064               	goto	l499
  7365  00D34C                     l501:
  7366                           
  7367                           ;standbyMode.c: 1139: else if (keypress == 0 || keypress == 1 || keypress == 2){
  7368  00D34C  5033               	movf	food_press@keypress,w,c
  7369  00D34E  B4D8               	btfsc	status,2,c
  7370  00D350  D007               	goto	u5980
  7371  00D352  0433               	decf	food_press@keypress,w,c
  7372  00D354  B4D8               	btfsc	status,2,c
  7373  00D356  D004               	goto	u5980
  7374  00D358  0E02               	movlw	2
  7375  00D35A  1833               	xorwf	food_press@keypress,w,c
  7376  00D35C  A4D8               	btfss	status,2,c
  7377  00D35E  D029               	goto	l503
  7378  00D360                     u5980:
  7379                           
  7380                           ;standbyMode.c: 1140: if (count < tally){
  7381  00D360  502B               	movf	food_press@tally,w,c
  7382  00D362  5C31               	subwf	food_press@count,w,c
  7383  00D364  502C               	movf	food_press@tally+1,w,c
  7384  00D366  5832               	subwfb	food_press@count+1,w,c
  7385  00D368  B0D8               	btfsc	status,0,c
  7386  00D36A  D7DB               	goto	l491
  7387                           
  7388                           ;standbyMode.c: 1141: putch(input[keypress]);
  7389  00D36C  5033               	movf	food_press@keypress,w,c
  7390  00D36E  0D01               	mullw	1
  7391  00D370  0E34               	movlw	low _input
  7392  00D372  24F3               	addwf	prodl,w,c
  7393  00D374  6EF6               	movwf	tblptrl,c
  7394  00D376  0EFD               	movlw	high _input
  7395  00D378  20F4               	addwfc	prodh,w,c
  7396  00D37A  6EF7               	movwf	tblptrh,c
  7397  00D37C                     	if	0	;There are less than 3 active tblptr bytes
  7398  00D37C                     	endif
  7399  00D37C  0008               	tblrd		*
  7400  00D37E  50F5               	movf	tablat,w,c
  7401  00D380  ECEB  F063         	call	_putch
  7402                           
  7403                           ;standbyMode.c: 1142: foodTable[count] = keypress + 1;
  7404  00D384  5033               	movf	food_press@keypress,w,c
  7405  00D386  6E29               	movwf	??_food_press& (0+255),c
  7406  00D388  6A2A               	clrf	(??_food_press+1)& (0+255),c
  7407  00D38A  0E01               	movlw	1
  7408  00D38C  2629               	addwf	??_food_press,f,c
  7409  00D38E  0E00               	movlw	0
  7410  00D390  222A               	addwfc	??_food_press+1,f,c
  7411  00D392  90D8               	bcf	status,0,c
  7412  00D394  3431               	rlcf	food_press@count,w,c
  7413  00D396  6ED9               	movwf	fsr2l,c
  7414  00D398  3432               	rlcf	food_press@count+1,w,c
  7415  00D39A  6EDA               	movwf	fsr2h,c
  7416  00D39C  0E34               	movlw	low food_press@foodTable
  7417  00D39E  26D9               	addwf	fsr2l,f,c
  7418  00D3A0  0E00               	movlw	high food_press@foodTable
  7419  00D3A2  22DA               	addwfc	fsr2h,f,c
  7420  00D3A4  C029  FFDE         	movff	??_food_press,postinc2
  7421  00D3A8  C02A  FFDD         	movff	??_food_press+1,postdec2
  7422                           
  7423                           ;standbyMode.c: 1143: count += 1;
  7424  00D3AC  4A31               	infsnz	food_press@count,f,c
  7425  00D3AE  2A32               	incf	food_press@count+1,f,c
  7426                           
  7427                           ;standbyMode.c: 1144: }
  7428                           ;standbyMode.c: 1145: }
  7429  00D3B0  D7B8               	goto	l491
  7430  00D3B2                     l503:
  7431                           
  7432                           ;standbyMode.c: 1146: else if (keypress == 12){
  7433  00D3B2  0E0C               	movlw	12
  7434  00D3B4  1833               	xorwf	food_press@keypress,w,c
  7435  00D3B6  A4D8               	btfss	status,2,c
  7436  00D3B8  D7B4               	goto	l491
  7437                           
  7438                           ;standbyMode.c: 1147: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7439  00D3BA  0E01               	movlw	1
  7440  00D3BC  ECE1  F063         	call	_lcdInst
  7441  00D3C0  0EC3               	movlw	195
  7442  00D3C2  6E29               	movwf	??_food_press& (0+255),c
  7443  00D3C4  0ECD               	movlw	205
  7444  00D3C6                     u8527:
  7445  00D3C6  2EE8               	decfsz	wreg,f,c
  7446  00D3C8  D7FE               	bra	u8527
  7447  00D3CA  2E29               	decfsz	??_food_press& (0+255),f,c
  7448  00D3CC  D7FC               	bra	u8527
  7449  00D3CE  F000               	nop	
  7450                           
  7451                           ;standbyMode.c: 1148: printf("Drawer %i food:", drawer);
  7452  00D3D0  0E0D               	movlw	low STR_31
  7453  00D3D2  6E0D               	movwf	printf@f,c
  7454  00D3D4  0EFE               	movlw	high STR_31
  7455  00D3D6  6E0E               	movwf	printf@f+1,c
  7456  00D3D8  C027  F00F         	movff	food_press@drawer,?_printf+2
  7457  00D3DC  C028  F010         	movff	food_press@drawer+1,?_printf+3
  7458  00D3E0  ECC5  F06C         	call	_printf	;wreg free
  7459                           
  7460                           ;standbyMode.c: 1149: lcdInst(0xC0);;
  7461  00D3E4  0EC0               	movlw	192
  7462  00D3E6  ECE1  F063         	call	_lcdInst
  7463                           
  7464                           ;standbyMode.c: 1150: count = 0;
  7465  00D3EA  0E00               	movlw	0
  7466  00D3EC  6E32               	movwf	food_press@count+1,c
  7467  00D3EE  0E00               	movlw	0
  7468  00D3F0  6E31               	movwf	food_press@count,c
  7469                           
  7470                           ;standbyMode.c: 1151: foodTable[0] = 0;
  7471  00D3F2  0E00               	movlw	0
  7472  00D3F4  6E35               	movwf	food_press@foodTable+1,c
  7473  00D3F6  0E00               	movlw	0
  7474  00D3F8  6E34               	movwf	food_press@foodTable,c
  7475                           
  7476                           ;standbyMode.c: 1152: foodTable[1] = 0;
  7477  00D3FA  0E00               	movlw	0
  7478  00D3FC  6E37               	movwf	food_press@foodTable+3,c
  7479  00D3FE  0E00               	movlw	0
  7480  00D400  6E36               	movwf	food_press@foodTable+2,c
  7481                           
  7482                           ;standbyMode.c: 1153: foodTable[2] = 0;
  7483  00D402  0E00               	movlw	0
  7484  00D404  6E39               	movwf	food_press@foodTable+5,c
  7485  00D406  0E00               	movlw	0
  7486  00D408  6E38               	movwf	food_press@foodTable+4,c
  7487                           
  7488                           ;standbyMode.c: 1154: foodTable[3] = 0;
  7489  00D40A  0E00               	movlw	0
  7490  00D40C  6E3B               	movwf	food_press@foodTable+7,c
  7491  00D40E  0E00               	movlw	0
  7492  00D410  6E3A               	movwf	food_press@foodTable+6,c
  7493  00D412  D787               	goto	l491
  7494  00D414                     l499:
  7495                           
  7496                           ;standbyMode.c: 1155: }
  7497                           ;standbyMode.c: 1156: }
  7498                           ;standbyMode.c: 1158: if (backCheck == 1){
  7499  00D414  042D               	decf	food_press@backCheck,w,c
  7500  00D416  102E               	iorwf	food_press@backCheck+1,w,c
  7501  00D418  A4D8               	btfss	status,2,c
  7502  00D41A  D005               	goto	l510
  7503                           
  7504                           ;standbyMode.c: 1159: return 100;
  7505  00D41C  0E00               	movlw	0
  7506  00D41E  6E26               	movwf	?_food_press+1,c
  7507  00D420  0E64               	movlw	100
  7508  00D422  6E25               	movwf	?_food_press,c
  7509                           
  7510                           ;standbyMode.c: 1160: }
  7511  00D424  0012               	return	
  7512  00D426                     l510:
  7513                           
  7514                           ;standbyMode.c: 1161: else {
  7515                           ;standbyMode.c: 1162: isValid = check_food(dietSum, foodTable);
  7516  00D426  C025  F001         	movff	food_press@dietSum,check_food@sum
  7517  00D42A  C026  F002         	movff	food_press@dietSum+1,check_food@sum+1
  7518  00D42E  0E34               	movlw	low food_press@foodTable
  7519  00D430  6E03               	movwf	check_food@foodInput,c
  7520  00D432  0E00               	movlw	high food_press@foodTable
  7521  00D434  6E04               	movwf	check_food@foodInput+1,c
  7522  00D436  EC01  F073         	call	_check_food	;wreg free
  7523  00D43A  C001  F02F         	movff	?_check_food,food_press@isValid
  7524  00D43E  C002  F030         	movff	?_check_food+1,food_press@isValid+1
  7525                           
  7526                           ;standbyMode.c: 1164: if (isValid == 0){
  7527  00D442  502F               	movf	food_press@isValid,w,c
  7528  00D444  1030               	iorwf	food_press@isValid+1,w,c
  7529  00D446  A4D8               	btfss	status,2,c
  7530  00D448  D026               	goto	l513
  7531                           
  7532                           ;standbyMode.c: 1165: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7533  00D44A  0E01               	movlw	1
  7534  00D44C  ECE1  F063         	call	_lcdInst
  7535  00D450  0EC3               	movlw	195
  7536  00D452  6E29               	movwf	??_food_press& (0+255),c
  7537  00D454  0ECD               	movlw	205
  7538  00D456                     u8537:
  7539  00D456  2EE8               	decfsz	wreg,f,c
  7540  00D458  D7FE               	bra	u8537
  7541  00D45A  2E29               	decfsz	??_food_press& (0+255),f,c
  7542  00D45C  D7FC               	bra	u8537
  7543  00D45E  F000               	nop	
  7544                           
  7545                           ;standbyMode.c: 1166: printf("Invalid food!");
  7546  00D460  0E04               	movlw	low STR_33
  7547  00D462  6E0D               	movwf	printf@f,c
  7548  00D464  0EFF               	movlw	high STR_33
  7549  00D466  6E0E               	movwf	printf@f+1,c
  7550  00D468  ECC5  F06C         	call	_printf	;wreg free
  7551                           
  7552                           ;standbyMode.c: 1167: lcdInst(0xC0);;
  7553  00D46C  0EC0               	movlw	192
  7554  00D46E  ECE1  F063         	call	_lcdInst
  7555                           
  7556                           ;standbyMode.c: 1168: printf("Try again.");
  7557  00D472  0E9E               	movlw	low STR_34
  7558  00D474  6E0D               	movwf	printf@f,c
  7559  00D476  0EFF               	movlw	high STR_34
  7560  00D478  6E0E               	movwf	printf@f+1,c
  7561  00D47A  ECC5  F06C         	call	_printf	;wreg free
  7562                           
  7563                           ;standbyMode.c: 1169: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7564  00D47E  0E33               	movlw	51
  7565  00D480  6E2A               	movwf	(??_food_press+1)& (0+255),c
  7566  00D482  0EBB               	movlw	187
  7567  00D484  6E29               	movwf	??_food_press& (0+255),c
  7568  00D486  0EE0               	movlw	224
  7569  00D488                     u8547:
  7570  00D488  2EE8               	decfsz	wreg,f,c
  7571  00D48A  D7FE               	bra	u8547
  7572  00D48C  2E29               	decfsz	??_food_press& (0+255),f,c
  7573  00D48E  D7FC               	bra	u8547
  7574  00D490  2E2A               	decfsz	(??_food_press+1)& (0+255),f,c
  7575  00D492  D7FA               	bra	u8547
  7576                           
  7577                           ;standbyMode.c: 1170: goto START;
  7578  00D494  D70B               	goto	_food_press
  7579  00D496                     l513:
  7580                           
  7581                           ;standbyMode.c: 1172: else {
  7582                           ;standbyMode.c: 1173: return isValid;
  7583  00D496  C02F  F025         	movff	food_press@isValid,?_food_press
  7584  00D49A  C030  F026         	movff	food_press@isValid+1,?_food_press+1
  7585  00D49E  0012               	return	
  7586  00D4A0                     __end_of_food_press:
  7587                           	opt stack 0
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           intcon	equ	0xFF2
  7595                           postinc0	equ	0xFEE
  7596                           wreg	equ	0xFE8
  7597                           postdec1	equ	0xFE5
  7598                           plusw1	equ	0xFE3
  7599                           fsr1l	equ	0xFE1
  7600                           indf2	equ	0xFDF
  7601                           postinc2	equ	0xFDE
  7602                           postdec2	equ	0xFDD
  7603                           plusw2	equ	0xFDB
  7604                           fsr2h	equ	0xFDA
  7605                           fsr2l	equ	0xFD9
  7606                           status	equ	0xFD8
  7607                           
  7608 ;; *************** function _get_digits *****************
  7609 ;; Defined at:
  7610 ;;		line 1009 in file "standbyMode.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;  sum             2    0[COMRAM] unsigned int 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  count           2    4[COMRAM] unsigned int 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  2    0[COMRAM] unsigned int 
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;Total ram usage:        6 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_food_press
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           	psect	text15
  7638  00CD4A                     __ptext15:
  7639                           	opt stack 0
  7640  00CD4A                     _get_digits:
  7641                           	opt stack 28
  7642                           
  7643                           ;standbyMode.c: 1011: unsigned int count = 0;
  7644                           
  7645                           ;incstack = 0
  7646  00CD4A  0E00               	movlw	0
  7647  00CD4C  6E06               	movwf	get_digits@count+1,c
  7648  00CD4E  0E00               	movlw	0
  7649  00CD50  6E05               	movwf	get_digits@count,c
  7650                           
  7651                           ;standbyMode.c: 1013: switch(sum){
  7652  00CD52  D015               	goto	l464
  7653  00CD54                     
  7654                           ;standbyMode.c: 1026: count = 1;
  7655                           
  7656                           ;standbyMode.c: 1025: case 12:
  7657                           
  7658                           ;standbyMode.c: 1022: break;
  7659                           
  7660                           ;standbyMode.c: 1021: count = 1;
  7661                           
  7662                           ;standbyMode.c: 1020: case 7:
  7663                           
  7664                           ;standbyMode.c: 1017: break;
  7665                           
  7666                           ;standbyMode.c: 1016: count = 1;
  7667  00CD54  0E00               	movlw	0
  7668  00CD56  6E06               	movwf	get_digits@count+1,c
  7669  00CD58  0E01               	movlw	1
  7670  00CD5A                     L41:
  7671  00CD5A  6E05               	movwf	get_digits@count,c
  7672                           
  7673                           ;standbyMode.c: 1032: break;
  7674  00CD5C  D050               	goto	l466
  7675  00CD5E                     
  7676                           ;standbyMode.c: 1041: count = 2;
  7677                           
  7678                           ;standbyMode.c: 1040: case 19:
  7679                           
  7680                           ;standbyMode.c: 1037: break;
  7681                           
  7682                           ;standbyMode.c: 1036: count = 2;
  7683  00CD5E  0E00               	movlw	0
  7684  00CD60  6E06               	movwf	get_digits@count+1,c
  7685  00CD62  0E02               	movlw	2
  7686  00CD64  D7FA               	goto	L41
  7687  00CD66                     
  7688                           ;standbyMode.c: 1076: count = 3;
  7689                           
  7690                           ;standbyMode.c: 1075: case 31:
  7691                           
  7692                           ;standbyMode.c: 1072: break;
  7693                           
  7694                           ;standbyMode.c: 1071: count = 3;
  7695                           
  7696                           ;standbyMode.c: 1070: case 26:
  7697                           
  7698                           ;standbyMode.c: 1067: break;
  7699                           
  7700                           ;standbyMode.c: 1066: count = 3;
  7701                           
  7702                           ;standbyMode.c: 1065: case 22:
  7703                           
  7704                           ;standbyMode.c: 1062: break;
  7705                           
  7706                           ;standbyMode.c: 1061: count = 3;
  7707                           
  7708                           ;standbyMode.c: 1060: case 27:
  7709                           
  7710                           ;standbyMode.c: 1057: break;
  7711                           
  7712                           ;standbyMode.c: 1056: count = 3;
  7713                           
  7714                           ;standbyMode.c: 1055: case 17:
  7715                           
  7716                           ;standbyMode.c: 1052: break;
  7717                           
  7718                           ;standbyMode.c: 1051: count = 3;
  7719                           
  7720                           ;standbyMode.c: 1050: case 18:
  7721                           
  7722                           ;standbyMode.c: 1047: break;
  7723                           
  7724                           ;standbyMode.c: 1046: count = 3;
  7725  00CD66  0E00               	movlw	0
  7726  00CD68  6E06               	movwf	get_digits@count+1,c
  7727  00CD6A  0E03               	movlw	3
  7728  00CD6C  D7F6               	goto	L41
  7729  00CD6E                     
  7730                           ;standbyMode.c: 1101: count = 4;
  7731                           
  7732                           ;standbyMode.c: 1100: case 43:
  7733                           
  7734                           ;standbyMode.c: 1097: break;
  7735                           
  7736                           ;standbyMode.c: 1096: count = 4;
  7737                           
  7738                           ;standbyMode.c: 1095: case 39:
  7739                           
  7740                           ;standbyMode.c: 1092: break;
  7741                           
  7742                           ;standbyMode.c: 1091: count = 4;
  7743                           
  7744                           ;standbyMode.c: 1090: case 34:
  7745                           
  7746                           ;standbyMode.c: 1087: break;
  7747                           
  7748                           ;standbyMode.c: 1086: count = 4;
  7749                           
  7750                           ;standbyMode.c: 1085: case 29:
  7751                           
  7752                           ;standbyMode.c: 1082: break;
  7753                           
  7754                           ;standbyMode.c: 1081: count = 4;
  7755  00CD6E  0E00               	movlw	0
  7756  00CD70  6E06               	movwf	get_digits@count+1,c
  7757  00CD72  0E04               	movlw	4
  7758  00CD74  D7F2               	goto	L41
  7759  00CD76                     
  7760                           ;standbyMode.c: 1106: count = 0;
  7761  00CD76  0E00               	movlw	0
  7762  00CD78  6E06               	movwf	get_digits@count+1,c
  7763  00CD7A  0E00               	movlw	0
  7764  00CD7C  D7EE               	goto	L41
  7765  00CD7E                     l464:
  7766  00CD7E  C001  F003         	movff	get_digits@sum,??_get_digits
  7767  00CD82  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  7768                           
  7769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7770                           ; Switch size 1, requested type "space"
  7771                           ; Number of cases is 1, Range of values is 0 to 0
  7772                           ; switch strategies available:
  7773                           ; Name         Instructions Cycles
  7774                           ; simple_byte            4     3 (average)
  7775                           ;	Chosen strategy is simple_byte
  7776  00CD86  5004               	movf	??_get_digits+1,w,c
  7777  00CD88  0A00               	xorlw	0	; case 0
  7778  00CD8A  A4D8               	btfss	status,2,c
  7779  00CD8C  D7F4               	goto	l484
  7780                           
  7781                           ; Switch size 1, requested type "space"
  7782                           ; Number of cases is 18, Range of values is 3 to 43
  7783                           ; switch strategies available:
  7784                           ; Name         Instructions Cycles
  7785                           ; simple_byte           55    28 (average)
  7786                           ;	Chosen strategy is simple_byte
  7787  00CD8E  5003               	movf	??_get_digits,w,c
  7788  00CD90  0A03               	xorlw	3	; case 3
  7789  00CD92  B4D8               	btfsc	status,2,c
  7790  00CD94  D7DF               	goto	l465
  7791  00CD96  0A04               	xorlw	4	; case 7
  7792  00CD98  B4D8               	btfsc	status,2,c
  7793  00CD9A  D7DC               	goto	l465
  7794  00CD9C  0A0D               	xorlw	13	; case 10
  7795  00CD9E  B4D8               	btfsc	status,2,c
  7796  00CDA0  D7DE               	goto	l470
  7797  00CDA2  0A06               	xorlw	6	; case 12
  7798  00CDA4  B4D8               	btfsc	status,2,c
  7799  00CDA6  D7D6               	goto	l465
  7800  00CDA8  0A01               	xorlw	1	; case 13
  7801  00CDAA  B4D8               	btfsc	status,2,c
  7802  00CDAC  D7DC               	goto	l472
  7803  00CDAE  0A02               	xorlw	2	; case 15
  7804  00CDB0  B4D8               	btfsc	status,2,c
  7805  00CDB2  D7D5               	goto	l470
  7806  00CDB4  0A1E               	xorlw	30	; case 17
  7807  00CDB6  B4D8               	btfsc	status,2,c
  7808  00CDB8  D7D6               	goto	l472
  7809  00CDBA  0A03               	xorlw	3	; case 18
  7810  00CDBC  B4D8               	btfsc	status,2,c
  7811  00CDBE  D7D3               	goto	l472
  7812  00CDC0  0A01               	xorlw	1	; case 19
  7813  00CDC2  B4D8               	btfsc	status,2,c
  7814  00CDC4  D7CC               	goto	l470
  7815  00CDC6  0A05               	xorlw	5	; case 22
  7816  00CDC8  B4D8               	btfsc	status,2,c
  7817  00CDCA  D7CD               	goto	l472
  7818  00CDCC  0A0F               	xorlw	15	; case 25
  7819  00CDCE  B4D8               	btfsc	status,2,c
  7820  00CDD0  D7CE               	goto	l479
  7821  00CDD2  0A03               	xorlw	3	; case 26
  7822  00CDD4  B4D8               	btfsc	status,2,c
  7823  00CDD6  D7C7               	goto	l472
  7824  00CDD8  0A01               	xorlw	1	; case 27
  7825  00CDDA  B4D8               	btfsc	status,2,c
  7826  00CDDC  D7C4               	goto	l472
  7827  00CDDE  0A06               	xorlw	6	; case 29
  7828  00CDE0  B4D8               	btfsc	status,2,c
  7829  00CDE2  D7C5               	goto	l479
  7830  00CDE4  0A02               	xorlw	2	; case 31
  7831  00CDE6  B4D8               	btfsc	status,2,c
  7832  00CDE8  D7BE               	goto	l472
  7833  00CDEA  0A3D               	xorlw	61	; case 34
  7834  00CDEC  B4D8               	btfsc	status,2,c
  7835  00CDEE  D7BF               	goto	l479
  7836  00CDF0  0A05               	xorlw	5	; case 39
  7837  00CDF2  B4D8               	btfsc	status,2,c
  7838  00CDF4  D7BC               	goto	l479
  7839  00CDF6  0A0C               	xorlw	12	; case 43
  7840  00CDF8  B4D8               	btfsc	status,2,c
  7841  00CDFA  D7B9               	goto	l479
  7842  00CDFC  D7BC               	goto	l484
  7843  00CDFE                     l466:
  7844                           
  7845                           ;standbyMode.c: 1109: return count;
  7846  00CDFE  C005  F001         	movff	get_digits@count,?_get_digits
  7847  00CE02  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  7848  00CE06  0012               	return		;funcret
  7849  00CE08                     __end_of_get_digits:
  7850                           	opt stack 0
  7851                           tblptru	equ	0xFF8
  7852                           tblptrh	equ	0xFF7
  7853                           tblptrl	equ	0xFF6
  7854                           tablat	equ	0xFF5
  7855                           prodh	equ	0xFF4
  7856                           prodl	equ	0xFF3
  7857                           intcon	equ	0xFF2
  7858                           postinc0	equ	0xFEE
  7859                           wreg	equ	0xFE8
  7860                           postdec1	equ	0xFE5
  7861                           plusw1	equ	0xFE3
  7862                           fsr1l	equ	0xFE1
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           plusw2	equ	0xFDB
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _check_food *****************
  7872 ;; Defined at:
  7873 ;;		line 90 in file "standbyMode.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  sum             2    0[COMRAM] unsigned int 
  7876 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  7877 ;;		 -> food_press@foodTable(8), 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  returnValue     2    6[COMRAM] unsigned int 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  2    0[COMRAM] unsigned int 
  7882 ;; Registers used:
  7883 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;Total ram usage:        8 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; This function calls:
  7896 ;;		Nothing
  7897 ;; This function is called by:
  7898 ;;		_food_press
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text16
  7903  00E602                     __ptext16:
  7904                           	opt stack 0
  7905  00E602                     _check_food:
  7906                           	opt stack 28
  7907                           
  7908                           ;standbyMode.c: 91: unsigned int returnValue = 0;
  7909                           
  7910                           ;incstack = 0
  7911  00E602  0E00               	movlw	0
  7912  00E604  6E08               	movwf	check_food@returnValue+1,c
  7913  00E606  0E00               	movlw	0
  7914  00E608  6E07               	movwf	check_food@returnValue,c
  7915                           
  7916                           ;standbyMode.c: 93: switch(sum){
  7917  00E60A  EF16  F078         	goto	l191
  7918  00E60E                     
  7919                           ;standbyMode.c: 96: if (foodInput[0] == 1){
  7920  00E60E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7921  00E612  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7922  00E616  04DE               	decf	postinc2,w,c
  7923  00E618  10DE               	iorwf	postinc2,w,c
  7924  00E61A  A4D8               	btfss	status,2,c
  7925  00E61C  D005               	goto	l193
  7926                           
  7927                           ;standbyMode.c: 97: returnValue = 1;
  7928  00E61E  0E00               	movlw	0
  7929  00E620  6E08               	movwf	check_food@returnValue+1,c
  7930  00E622  0E01               	movlw	1
  7931  00E624  EF14  F078         	goto	L86
  7932  00E628                     l193:
  7933                           
  7934                           ;standbyMode.c: 99: else if (foodInput[0] == 2){
  7935  00E628  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7936  00E62C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7937  00E630  0E02               	movlw	2
  7938  00E632  18DE               	xorwf	postinc2,w,c
  7939  00E634  10DE               	iorwf	postinc2,w,c
  7940  00E636  A4D8               	btfss	status,2,c
  7941  00E638  EF5A  F078         	goto	l196
  7942                           
  7943                           ;standbyMode.c: 100: returnValue = 2;
  7944  00E63C  0E00               	movlw	0
  7945  00E63E  6E08               	movwf	check_food@returnValue+1,c
  7946  00E640  0E02               	movlw	2
  7947  00E642  EF14  F078         	goto	L86
  7948  00E646                     
  7949                           ;standbyMode.c: 106: if (foodInput[0] == 1){
  7950  00E646  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7951  00E64A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7952  00E64E  04DE               	decf	postinc2,w,c
  7953  00E650  10DE               	iorwf	postinc2,w,c
  7954  00E652  A4D8               	btfss	status,2,c
  7955  00E654  D005               	goto	l198
  7956                           
  7957                           ;standbyMode.c: 107: returnValue = 3;
  7958  00E656  0E00               	movlw	0
  7959  00E658  6E08               	movwf	check_food@returnValue+1,c
  7960  00E65A  0E03               	movlw	3
  7961  00E65C  EF14  F078         	goto	L86
  7962  00E660                     l198:
  7963                           
  7964                           ;standbyMode.c: 109: else if (foodInput[0] == 2){
  7965  00E660  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7966  00E664  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7967  00E668  0E02               	movlw	2
  7968  00E66A  18DE               	xorwf	postinc2,w,c
  7969  00E66C  10DE               	iorwf	postinc2,w,c
  7970  00E66E  A4D8               	btfss	status,2,c
  7971  00E670  EF5A  F078         	goto	l196
  7972                           
  7973                           ;standbyMode.c: 110: returnValue = 4;
  7974  00E674  0E00               	movlw	0
  7975  00E676  6E08               	movwf	check_food@returnValue+1,c
  7976  00E678  0E04               	movlw	4
  7977  00E67A  EF14  F078         	goto	L86
  7978  00E67E                     
  7979                           ;standbyMode.c: 116: if (foodInput[0] == 1){
  7980  00E67E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7981  00E682  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7982  00E686  04DE               	decf	postinc2,w,c
  7983  00E688  10DE               	iorwf	postinc2,w,c
  7984  00E68A  A4D8               	btfss	status,2,c
  7985  00E68C  D005               	goto	l202
  7986                           
  7987                           ;standbyMode.c: 117: returnValue = 5;
  7988  00E68E  0E00               	movlw	0
  7989  00E690  6E08               	movwf	check_food@returnValue+1,c
  7990  00E692  0E05               	movlw	5
  7991  00E694  EF14  F078         	goto	L86
  7992  00E698                     l202:
  7993                           
  7994                           ;standbyMode.c: 119: else if (foodInput[0] == 2){
  7995  00E698  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7996  00E69C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7997  00E6A0  0E02               	movlw	2
  7998  00E6A2  18DE               	xorwf	postinc2,w,c
  7999  00E6A4  10DE               	iorwf	postinc2,w,c
  8000  00E6A6  A4D8               	btfss	status,2,c
  8001  00E6A8  D005               	goto	l204
  8002                           
  8003                           ;standbyMode.c: 120: returnValue = 6;
  8004  00E6AA  0E00               	movlw	0
  8005  00E6AC  6E08               	movwf	check_food@returnValue+1,c
  8006  00E6AE  0E06               	movlw	6
  8007  00E6B0  EF14  F078         	goto	L86
  8008  00E6B4                     l204:
  8009                           
  8010                           ;standbyMode.c: 122: else if (foodInput[0] == 3){
  8011  00E6B4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8012  00E6B8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8013  00E6BC  0E03               	movlw	3
  8014  00E6BE  18DE               	xorwf	postinc2,w,c
  8015  00E6C0  10DE               	iorwf	postinc2,w,c
  8016  00E6C2  A4D8               	btfss	status,2,c
  8017  00E6C4  EF5A  F078         	goto	l196
  8018                           
  8019                           ;standbyMode.c: 123: returnValue = 7;
  8020  00E6C8  0E00               	movlw	0
  8021  00E6CA  6E08               	movwf	check_food@returnValue+1,c
  8022  00E6CC  0E07               	movlw	7
  8023  00E6CE  EF14  F078         	goto	L86
  8024  00E6D2                     
  8025                           ;standbyMode.c: 129: if (foodInput[0] == 1 && foodInput[1] == 1){
  8026  00E6D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8027  00E6D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8028  00E6DA  04DE               	decf	postinc2,w,c
  8029  00E6DC  10DE               	iorwf	postinc2,w,c
  8030  00E6DE  A4D8               	btfss	status,2,c
  8031  00E6E0  D00F               	goto	l208
  8032  00E6E2  EE20 F002          	lfsr	2,2
  8033  00E6E6  5003               	movf	check_food@foodInput,w,c
  8034  00E6E8  26D9               	addwf	fsr2l,f,c
  8035  00E6EA  5004               	movf	check_food@foodInput+1,w,c
  8036  00E6EC  22DA               	addwfc	fsr2h,f,c
  8037  00E6EE  04DE               	decf	postinc2,w,c
  8038  00E6F0  10DE               	iorwf	postinc2,w,c
  8039  00E6F2  A4D8               	btfss	status,2,c
  8040  00E6F4  D005               	goto	l208
  8041                           
  8042                           ;standbyMode.c: 130: returnValue = 8;
  8043  00E6F6  0E00               	movlw	0
  8044  00E6F8  6E08               	movwf	check_food@returnValue+1,c
  8045  00E6FA  0E08               	movlw	8
  8046  00E6FC  EF14  F078         	goto	L86
  8047  00E700                     l208:
  8048                           
  8049                           ;standbyMode.c: 132: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8050  00E700  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8051  00E704  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8052  00E708  04DE               	decf	postinc2,w,c
  8053  00E70A  10DE               	iorwf	postinc2,w,c
  8054  00E70C  A4D8               	btfss	status,2,c
  8055  00E70E  D010               	goto	l210
  8056  00E710  EE20 F002          	lfsr	2,2
  8057  00E714  5003               	movf	check_food@foodInput,w,c
  8058  00E716  26D9               	addwf	fsr2l,f,c
  8059  00E718  5004               	movf	check_food@foodInput+1,w,c
  8060  00E71A  22DA               	addwfc	fsr2h,f,c
  8061  00E71C  0E02               	movlw	2
  8062  00E71E  18DE               	xorwf	postinc2,w,c
  8063  00E720  10DE               	iorwf	postinc2,w,c
  8064  00E722  A4D8               	btfss	status,2,c
  8065  00E724  D005               	goto	l210
  8066                           
  8067                           ;standbyMode.c: 133: returnValue = 9;
  8068  00E726  0E00               	movlw	0
  8069  00E728  6E08               	movwf	check_food@returnValue+1,c
  8070  00E72A  0E09               	movlw	9
  8071  00E72C  EF14  F078         	goto	L86
  8072  00E730                     l210:
  8073                           
  8074                           ;standbyMode.c: 135: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8075  00E730  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8076  00E734  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8077  00E738  0E02               	movlw	2
  8078  00E73A  18DE               	xorwf	postinc2,w,c
  8079  00E73C  10DE               	iorwf	postinc2,w,c
  8080  00E73E  A4D8               	btfss	status,2,c
  8081  00E740  D00F               	goto	l212
  8082  00E742  EE20 F002          	lfsr	2,2
  8083  00E746  5003               	movf	check_food@foodInput,w,c
  8084  00E748  26D9               	addwf	fsr2l,f,c
  8085  00E74A  5004               	movf	check_food@foodInput+1,w,c
  8086  00E74C  22DA               	addwfc	fsr2h,f,c
  8087  00E74E  04DE               	decf	postinc2,w,c
  8088  00E750  10DE               	iorwf	postinc2,w,c
  8089  00E752  A4D8               	btfss	status,2,c
  8090  00E754  D005               	goto	l212
  8091                           
  8092                           ;standbyMode.c: 136: returnValue = 10;
  8093  00E756  0E00               	movlw	0
  8094  00E758  6E08               	movwf	check_food@returnValue+1,c
  8095  00E75A  0E0A               	movlw	10
  8096  00E75C  EF14  F078         	goto	L86
  8097  00E760                     l212:
  8098                           
  8099                           ;standbyMode.c: 138: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8100  00E760  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8101  00E764  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8102  00E768  0E02               	movlw	2
  8103  00E76A  18DE               	xorwf	postinc2,w,c
  8104  00E76C  10DE               	iorwf	postinc2,w,c
  8105  00E76E  A4D8               	btfss	status,2,c
  8106  00E770  EF5A  F078         	goto	l196
  8107  00E774  EE20 F002          	lfsr	2,2
  8108  00E778  5003               	movf	check_food@foodInput,w,c
  8109  00E77A  26D9               	addwf	fsr2l,f,c
  8110  00E77C  5004               	movf	check_food@foodInput+1,w,c
  8111  00E77E  22DA               	addwfc	fsr2h,f,c
  8112  00E780  0E02               	movlw	2
  8113  00E782  18DE               	xorwf	postinc2,w,c
  8114  00E784  10DE               	iorwf	postinc2,w,c
  8115  00E786  A4D8               	btfss	status,2,c
  8116  00E788  EF5A  F078         	goto	l196
  8117                           
  8118                           ;standbyMode.c: 139: returnValue = 11;
  8119  00E78C  0E00               	movlw	0
  8120  00E78E  6E08               	movwf	check_food@returnValue+1,c
  8121  00E790  0E0B               	movlw	11
  8122  00E792  EF14  F078         	goto	L86
  8123  00E796                     
  8124                           ;standbyMode.c: 145: if (foodInput[0] == 1 && foodInput[1] == 1){
  8125  00E796  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8126  00E79A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8127  00E79E  04DE               	decf	postinc2,w,c
  8128  00E7A0  10DE               	iorwf	postinc2,w,c
  8129  00E7A2  A4D8               	btfss	status,2,c
  8130  00E7A4  D00F               	goto	l216
  8131  00E7A6  EE20 F002          	lfsr	2,2
  8132  00E7AA  5003               	movf	check_food@foodInput,w,c
  8133  00E7AC  26D9               	addwf	fsr2l,f,c
  8134  00E7AE  5004               	movf	check_food@foodInput+1,w,c
  8135  00E7B0  22DA               	addwfc	fsr2h,f,c
  8136  00E7B2  04DE               	decf	postinc2,w,c
  8137  00E7B4  10DE               	iorwf	postinc2,w,c
  8138  00E7B6  A4D8               	btfss	status,2,c
  8139  00E7B8  D005               	goto	l216
  8140                           
  8141                           ;standbyMode.c: 146: returnValue = 12;
  8142  00E7BA  0E00               	movlw	0
  8143  00E7BC  6E08               	movwf	check_food@returnValue+1,c
  8144  00E7BE  0E0C               	movlw	12
  8145  00E7C0  EF14  F078         	goto	L86
  8146  00E7C4                     l216:
  8147                           
  8148                           ;standbyMode.c: 148: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8149  00E7C4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8150  00E7C8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8151  00E7CC  04DE               	decf	postinc2,w,c
  8152  00E7CE  10DE               	iorwf	postinc2,w,c
  8153  00E7D0  A4D8               	btfss	status,2,c
  8154  00E7D2  D010               	goto	l218
  8155  00E7D4  EE20 F002          	lfsr	2,2
  8156  00E7D8  5003               	movf	check_food@foodInput,w,c
  8157  00E7DA  26D9               	addwf	fsr2l,f,c
  8158  00E7DC  5004               	movf	check_food@foodInput+1,w,c
  8159  00E7DE  22DA               	addwfc	fsr2h,f,c
  8160  00E7E0  0E02               	movlw	2
  8161  00E7E2  18DE               	xorwf	postinc2,w,c
  8162  00E7E4  10DE               	iorwf	postinc2,w,c
  8163  00E7E6  A4D8               	btfss	status,2,c
  8164  00E7E8  D005               	goto	l218
  8165                           
  8166                           ;standbyMode.c: 149: returnValue = 13;
  8167  00E7EA  0E00               	movlw	0
  8168  00E7EC  6E08               	movwf	check_food@returnValue+1,c
  8169  00E7EE  0E0D               	movlw	13
  8170  00E7F0  EF14  F078         	goto	L86
  8171  00E7F4                     l218:
  8172                           
  8173                           ;standbyMode.c: 151: else if (foodInput[0] == 1 && foodInput[1] == 3){
  8174  00E7F4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8175  00E7F8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8176  00E7FC  04DE               	decf	postinc2,w,c
  8177  00E7FE  10DE               	iorwf	postinc2,w,c
  8178  00E800  A4D8               	btfss	status,2,c
  8179  00E802  D010               	goto	l220
  8180  00E804  EE20 F002          	lfsr	2,2
  8181  00E808  5003               	movf	check_food@foodInput,w,c
  8182  00E80A  26D9               	addwf	fsr2l,f,c
  8183  00E80C  5004               	movf	check_food@foodInput+1,w,c
  8184  00E80E  22DA               	addwfc	fsr2h,f,c
  8185  00E810  0E03               	movlw	3
  8186  00E812  18DE               	xorwf	postinc2,w,c
  8187  00E814  10DE               	iorwf	postinc2,w,c
  8188  00E816  A4D8               	btfss	status,2,c
  8189  00E818  D005               	goto	l220
  8190                           
  8191                           ;standbyMode.c: 152: returnValue = 14;
  8192  00E81A  0E00               	movlw	0
  8193  00E81C  6E08               	movwf	check_food@returnValue+1,c
  8194  00E81E  0E0E               	movlw	14
  8195  00E820  EF14  F078         	goto	L86
  8196  00E824                     l220:
  8197                           
  8198                           ;standbyMode.c: 154: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8199  00E824  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8200  00E828  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8201  00E82C  0E02               	movlw	2
  8202  00E82E  18DE               	xorwf	postinc2,w,c
  8203  00E830  10DE               	iorwf	postinc2,w,c
  8204  00E832  A4D8               	btfss	status,2,c
  8205  00E834  D00E               	goto	l222
  8206  00E836  EE20 F002          	lfsr	2,2
  8207  00E83A  5003               	movf	check_food@foodInput,w,c
  8208  00E83C  26D9               	addwf	fsr2l,f,c
  8209  00E83E  5004               	movf	check_food@foodInput+1,w,c
  8210  00E840  22DA               	addwfc	fsr2h,f,c
  8211  00E842  04DE               	decf	postinc2,w,c
  8212  00E844  10DE               	iorwf	postinc2,w,c
  8213  00E846  A4D8               	btfss	status,2,c
  8214  00E848  D004               	goto	l222
  8215                           
  8216                           ;standbyMode.c: 155: returnValue = 15;
  8217  00E84A  0E00               	movlw	0
  8218  00E84C  6E08               	movwf	check_food@returnValue+1,c
  8219  00E84E  0E0F               	movlw	15
  8220  00E850  D3EB               	goto	L86
  8221  00E852                     l222:
  8222                           
  8223                           ;standbyMode.c: 157: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8224  00E852  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8225  00E856  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8226  00E85A  0E02               	movlw	2
  8227  00E85C  18DE               	xorwf	postinc2,w,c
  8228  00E85E  10DE               	iorwf	postinc2,w,c
  8229  00E860  A4D8               	btfss	status,2,c
  8230  00E862  EF5A  F078         	goto	l196
  8231  00E866  EE20 F002          	lfsr	2,2
  8232  00E86A  5003               	movf	check_food@foodInput,w,c
  8233  00E86C  26D9               	addwf	fsr2l,f,c
  8234  00E86E  5004               	movf	check_food@foodInput+1,w,c
  8235  00E870  22DA               	addwfc	fsr2h,f,c
  8236  00E872  0E02               	movlw	2
  8237  00E874  18DE               	xorwf	postinc2,w,c
  8238  00E876  10DE               	iorwf	postinc2,w,c
  8239  00E878  A4D8               	btfss	status,2,c
  8240  00E87A  EF5A  F078         	goto	l196
  8241                           
  8242                           ;standbyMode.c: 158: returnValue = 16;
  8243  00E87E  0E00               	movlw	0
  8244  00E880  6E08               	movwf	check_food@returnValue+1,c
  8245  00E882  0E10               	movlw	16
  8246  00E884  D3D1               	goto	L86
  8247  00E886                     
  8248                           ;standbyMode.c: 164: if (foodInput[0] == 1 && foodInput[1] == 1){
  8249  00E886  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8250  00E88A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8251  00E88E  04DE               	decf	postinc2,w,c
  8252  00E890  10DE               	iorwf	postinc2,w,c
  8253  00E892  A4D8               	btfss	status,2,c
  8254  00E894  D00E               	goto	l226
  8255  00E896  EE20 F002          	lfsr	2,2
  8256  00E89A  5003               	movf	check_food@foodInput,w,c
  8257  00E89C  26D9               	addwf	fsr2l,f,c
  8258  00E89E  5004               	movf	check_food@foodInput+1,w,c
  8259  00E8A0  22DA               	addwfc	fsr2h,f,c
  8260  00E8A2  04DE               	decf	postinc2,w,c
  8261  00E8A4  10DE               	iorwf	postinc2,w,c
  8262  00E8A6  A4D8               	btfss	status,2,c
  8263  00E8A8  D004               	goto	l226
  8264                           
  8265                           ;standbyMode.c: 165: returnValue = 17;
  8266  00E8AA  0E00               	movlw	0
  8267  00E8AC  6E08               	movwf	check_food@returnValue+1,c
  8268  00E8AE  0E11               	movlw	17
  8269  00E8B0  D3BB               	goto	L86
  8270  00E8B2                     l226:
  8271                           
  8272                           ;standbyMode.c: 167: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8273  00E8B2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8274  00E8B6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8275  00E8BA  04DE               	decf	postinc2,w,c
  8276  00E8BC  10DE               	iorwf	postinc2,w,c
  8277  00E8BE  A4D8               	btfss	status,2,c
  8278  00E8C0  D00F               	goto	l228
  8279  00E8C2  EE20 F002          	lfsr	2,2
  8280  00E8C6  5003               	movf	check_food@foodInput,w,c
  8281  00E8C8  26D9               	addwf	fsr2l,f,c
  8282  00E8CA  5004               	movf	check_food@foodInput+1,w,c
  8283  00E8CC  22DA               	addwfc	fsr2h,f,c
  8284  00E8CE  0E02               	movlw	2
  8285  00E8D0  18DE               	xorwf	postinc2,w,c
  8286  00E8D2  10DE               	iorwf	postinc2,w,c
  8287  00E8D4  A4D8               	btfss	status,2,c
  8288  00E8D6  D004               	goto	l228
  8289                           
  8290                           ;standbyMode.c: 168: returnValue = 18;
  8291  00E8D8  0E00               	movlw	0
  8292  00E8DA  6E08               	movwf	check_food@returnValue+1,c
  8293  00E8DC  0E12               	movlw	18
  8294  00E8DE  D3A4               	goto	L86
  8295  00E8E0                     l228:
  8296                           
  8297                           ;standbyMode.c: 170: else if (foodInput[0] == 1 && foodInput[1] == 3){
  8298  00E8E0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8299  00E8E4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8300  00E8E8  04DE               	decf	postinc2,w,c
  8301  00E8EA  10DE               	iorwf	postinc2,w,c
  8302  00E8EC  A4D8               	btfss	status,2,c
  8303  00E8EE  D00F               	goto	l230
  8304  00E8F0  EE20 F002          	lfsr	2,2
  8305  00E8F4  5003               	movf	check_food@foodInput,w,c
  8306  00E8F6  26D9               	addwf	fsr2l,f,c
  8307  00E8F8  5004               	movf	check_food@foodInput+1,w,c
  8308  00E8FA  22DA               	addwfc	fsr2h,f,c
  8309  00E8FC  0E03               	movlw	3
  8310  00E8FE  18DE               	xorwf	postinc2,w,c
  8311  00E900  10DE               	iorwf	postinc2,w,c
  8312  00E902  A4D8               	btfss	status,2,c
  8313  00E904  D004               	goto	l230
  8314                           
  8315                           ;standbyMode.c: 171: returnValue = 19;
  8316  00E906  0E00               	movlw	0
  8317  00E908  6E08               	movwf	check_food@returnValue+1,c
  8318  00E90A  0E13               	movlw	19
  8319  00E90C  D38D               	goto	L86
  8320  00E90E                     l230:
  8321                           
  8322                           ;standbyMode.c: 173: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8323  00E90E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8324  00E912  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8325  00E916  0E02               	movlw	2
  8326  00E918  18DE               	xorwf	postinc2,w,c
  8327  00E91A  10DE               	iorwf	postinc2,w,c
  8328  00E91C  A4D8               	btfss	status,2,c
  8329  00E91E  D00E               	goto	l232
  8330  00E920  EE20 F002          	lfsr	2,2
  8331  00E924  5003               	movf	check_food@foodInput,w,c
  8332  00E926  26D9               	addwf	fsr2l,f,c
  8333  00E928  5004               	movf	check_food@foodInput+1,w,c
  8334  00E92A  22DA               	addwfc	fsr2h,f,c
  8335  00E92C  04DE               	decf	postinc2,w,c
  8336  00E92E  10DE               	iorwf	postinc2,w,c
  8337  00E930  A4D8               	btfss	status,2,c
  8338  00E932  D004               	goto	l232
  8339                           
  8340                           ;standbyMode.c: 174: returnValue = 20;
  8341  00E934  0E00               	movlw	0
  8342  00E936  6E08               	movwf	check_food@returnValue+1,c
  8343  00E938  0E14               	movlw	20
  8344  00E93A  D376               	goto	L86
  8345  00E93C                     l232:
  8346                           
  8347                           ;standbyMode.c: 176: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8348  00E93C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8349  00E940  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8350  00E944  0E02               	movlw	2
  8351  00E946  18DE               	xorwf	postinc2,w,c
  8352  00E948  10DE               	iorwf	postinc2,w,c
  8353  00E94A  A4D8               	btfss	status,2,c
  8354  00E94C  D3B3               	goto	l196
  8355  00E94E  EE20 F002          	lfsr	2,2
  8356  00E952  5003               	movf	check_food@foodInput,w,c
  8357  00E954  26D9               	addwf	fsr2l,f,c
  8358  00E956  5004               	movf	check_food@foodInput+1,w,c
  8359  00E958  22DA               	addwfc	fsr2h,f,c
  8360  00E95A  0E02               	movlw	2
  8361  00E95C  18DE               	xorwf	postinc2,w,c
  8362  00E95E  10DE               	iorwf	postinc2,w,c
  8363  00E960  A4D8               	btfss	status,2,c
  8364  00E962  D3A8               	goto	l196
  8365                           
  8366                           ;standbyMode.c: 177: returnValue = 21;
  8367  00E964  0E00               	movlw	0
  8368  00E966  6E08               	movwf	check_food@returnValue+1,c
  8369  00E968  0E15               	movlw	21
  8370  00E96A  D35E               	goto	L86
  8371  00E96C                     
  8372                           ;standbyMode.c: 183: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8373  00E96C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8374  00E970  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8375  00E974  04DE               	decf	postinc2,w,c
  8376  00E976  10DE               	iorwf	postinc2,w,c
  8377  00E978  A4D8               	btfss	status,2,c
  8378  00E97A  D018               	goto	l236
  8379  00E97C  EE20 F002          	lfsr	2,2
  8380  00E980  5003               	movf	check_food@foodInput,w,c
  8381  00E982  26D9               	addwf	fsr2l,f,c
  8382  00E984  5004               	movf	check_food@foodInput+1,w,c
  8383  00E986  22DA               	addwfc	fsr2h,f,c
  8384  00E988  04DE               	decf	postinc2,w,c
  8385  00E98A  10DE               	iorwf	postinc2,w,c
  8386  00E98C  A4D8               	btfss	status,2,c
  8387  00E98E  D00E               	goto	l236
  8388  00E990  EE20 F004          	lfsr	2,4
  8389  00E994  5003               	movf	check_food@foodInput,w,c
  8390  00E996  26D9               	addwf	fsr2l,f,c
  8391  00E998  5004               	movf	check_food@foodInput+1,w,c
  8392  00E99A  22DA               	addwfc	fsr2h,f,c
  8393  00E99C  04DE               	decf	postinc2,w,c
  8394  00E99E  10DE               	iorwf	postinc2,w,c
  8395  00E9A0  A4D8               	btfss	status,2,c
  8396  00E9A2  D004               	goto	l236
  8397                           
  8398                           ;standbyMode.c: 184: returnValue = 22;
  8399  00E9A4  0E00               	movlw	0
  8400  00E9A6  6E08               	movwf	check_food@returnValue+1,c
  8401  00E9A8  0E16               	movlw	22
  8402  00E9AA  D33E               	goto	L86
  8403  00E9AC                     l236:
  8404                           
  8405                           ;standbyMode.c: 186: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8406  00E9AC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8407  00E9B0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8408  00E9B4  04DE               	decf	postinc2,w,c
  8409  00E9B6  10DE               	iorwf	postinc2,w,c
  8410  00E9B8  A4D8               	btfss	status,2,c
  8411  00E9BA  D37C               	goto	l196
  8412  00E9BC  EE20 F002          	lfsr	2,2
  8413  00E9C0  5003               	movf	check_food@foodInput,w,c
  8414  00E9C2  26D9               	addwf	fsr2l,f,c
  8415  00E9C4  5004               	movf	check_food@foodInput+1,w,c
  8416  00E9C6  22DA               	addwfc	fsr2h,f,c
  8417  00E9C8  04DE               	decf	postinc2,w,c
  8418  00E9CA  10DE               	iorwf	postinc2,w,c
  8419  00E9CC  A4D8               	btfss	status,2,c
  8420  00E9CE  D372               	goto	l196
  8421  00E9D0  EE20 F004          	lfsr	2,4
  8422  00E9D4  5003               	movf	check_food@foodInput,w,c
  8423  00E9D6  26D9               	addwf	fsr2l,f,c
  8424  00E9D8  5004               	movf	check_food@foodInput+1,w,c
  8425  00E9DA  22DA               	addwfc	fsr2h,f,c
  8426  00E9DC  0E02               	movlw	2
  8427  00E9DE  18DE               	xorwf	postinc2,w,c
  8428  00E9E0  10DE               	iorwf	postinc2,w,c
  8429  00E9E2  A4D8               	btfss	status,2,c
  8430  00E9E4  D367               	goto	l196
  8431                           
  8432                           ;standbyMode.c: 187: returnValue = 23;
  8433  00E9E6  0E00               	movlw	0
  8434  00E9E8  6E08               	movwf	check_food@returnValue+1,c
  8435  00E9EA  0E17               	movlw	23
  8436  00E9EC  D31D               	goto	L86
  8437  00E9EE                     
  8438                           ;standbyMode.c: 193: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8439  00E9EE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8440  00E9F2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8441  00E9F6  04DE               	decf	postinc2,w,c
  8442  00E9F8  10DE               	iorwf	postinc2,w,c
  8443  00E9FA  A4D8               	btfss	status,2,c
  8444  00E9FC  D018               	goto	l240
  8445  00E9FE  EE20 F002          	lfsr	2,2
  8446  00EA02  5003               	movf	check_food@foodInput,w,c
  8447  00EA04  26D9               	addwf	fsr2l,f,c
  8448  00EA06  5004               	movf	check_food@foodInput+1,w,c
  8449  00EA08  22DA               	addwfc	fsr2h,f,c
  8450  00EA0A  04DE               	decf	postinc2,w,c
  8451  00EA0C  10DE               	iorwf	postinc2,w,c
  8452  00EA0E  A4D8               	btfss	status,2,c
  8453  00EA10  D00E               	goto	l240
  8454  00EA12  EE20 F004          	lfsr	2,4
  8455  00EA16  5003               	movf	check_food@foodInput,w,c
  8456  00EA18  26D9               	addwf	fsr2l,f,c
  8457  00EA1A  5004               	movf	check_food@foodInput+1,w,c
  8458  00EA1C  22DA               	addwfc	fsr2h,f,c
  8459  00EA1E  04DE               	decf	postinc2,w,c
  8460  00EA20  10DE               	iorwf	postinc2,w,c
  8461  00EA22  A4D8               	btfss	status,2,c
  8462  00EA24  D004               	goto	l240
  8463                           
  8464                           ;standbyMode.c: 194: returnValue = 24;
  8465  00EA26  0E00               	movlw	0
  8466  00EA28  6E08               	movwf	check_food@returnValue+1,c
  8467  00EA2A  0E18               	movlw	24
  8468  00EA2C  D2FD               	goto	L86
  8469  00EA2E                     l240:
  8470                           
  8471                           ;standbyMode.c: 196: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8472  00EA2E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8473  00EA32  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8474  00EA36  04DE               	decf	postinc2,w,c
  8475  00EA38  10DE               	iorwf	postinc2,w,c
  8476  00EA3A  A4D8               	btfss	status,2,c
  8477  00EA3C  D33B               	goto	l196
  8478  00EA3E  EE20 F002          	lfsr	2,2
  8479  00EA42  5003               	movf	check_food@foodInput,w,c
  8480  00EA44  26D9               	addwf	fsr2l,f,c
  8481  00EA46  5004               	movf	check_food@foodInput+1,w,c
  8482  00EA48  22DA               	addwfc	fsr2h,f,c
  8483  00EA4A  04DE               	decf	postinc2,w,c
  8484  00EA4C  10DE               	iorwf	postinc2,w,c
  8485  00EA4E  A4D8               	btfss	status,2,c
  8486  00EA50  D331               	goto	l196
  8487  00EA52  EE20 F004          	lfsr	2,4
  8488  00EA56  5003               	movf	check_food@foodInput,w,c
  8489  00EA58  26D9               	addwf	fsr2l,f,c
  8490  00EA5A  5004               	movf	check_food@foodInput+1,w,c
  8491  00EA5C  22DA               	addwfc	fsr2h,f,c
  8492  00EA5E  0E02               	movlw	2
  8493  00EA60  18DE               	xorwf	postinc2,w,c
  8494  00EA62  10DE               	iorwf	postinc2,w,c
  8495  00EA64  A4D8               	btfss	status,2,c
  8496  00EA66  D326               	goto	l196
  8497                           
  8498                           ;standbyMode.c: 197: returnValue = 25;
  8499  00EA68  0E00               	movlw	0
  8500  00EA6A  6E08               	movwf	check_food@returnValue+1,c
  8501  00EA6C  0E19               	movlw	25
  8502  00EA6E  D2DC               	goto	L86
  8503  00EA70                     
  8504                           ;standbyMode.c: 203: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8505  00EA70  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8506  00EA74  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8507  00EA78  04DE               	decf	postinc2,w,c
  8508  00EA7A  10DE               	iorwf	postinc2,w,c
  8509  00EA7C  A4D8               	btfss	status,2,c
  8510  00EA7E  D018               	goto	l244
  8511  00EA80  EE20 F002          	lfsr	2,2
  8512  00EA84  5003               	movf	check_food@foodInput,w,c
  8513  00EA86  26D9               	addwf	fsr2l,f,c
  8514  00EA88  5004               	movf	check_food@foodInput+1,w,c
  8515  00EA8A  22DA               	addwfc	fsr2h,f,c
  8516  00EA8C  04DE               	decf	postinc2,w,c
  8517  00EA8E  10DE               	iorwf	postinc2,w,c
  8518  00EA90  A4D8               	btfss	status,2,c
  8519  00EA92  D00E               	goto	l244
  8520  00EA94  EE20 F004          	lfsr	2,4
  8521  00EA98  5003               	movf	check_food@foodInput,w,c
  8522  00EA9A  26D9               	addwf	fsr2l,f,c
  8523  00EA9C  5004               	movf	check_food@foodInput+1,w,c
  8524  00EA9E  22DA               	addwfc	fsr2h,f,c
  8525  00EAA0  04DE               	decf	postinc2,w,c
  8526  00EAA2  10DE               	iorwf	postinc2,w,c
  8527  00EAA4  A4D8               	btfss	status,2,c
  8528  00EAA6  D004               	goto	l244
  8529                           
  8530                           ;standbyMode.c: 204: returnValue = 26;
  8531  00EAA8  0E00               	movlw	0
  8532  00EAAA  6E08               	movwf	check_food@returnValue+1,c
  8533  00EAAC  0E1A               	movlw	26
  8534  00EAAE  D2BC               	goto	L86
  8535  00EAB0                     l244:
  8536                           
  8537                           ;standbyMode.c: 206: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  8538  00EAB0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8539  00EAB4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8540  00EAB8  0E02               	movlw	2
  8541  00EABA  18DE               	xorwf	postinc2,w,c
  8542  00EABC  10DE               	iorwf	postinc2,w,c
  8543  00EABE  A4D8               	btfss	status,2,c
  8544  00EAC0  D2F9               	goto	l196
  8545  00EAC2  EE20 F002          	lfsr	2,2
  8546  00EAC6  5003               	movf	check_food@foodInput,w,c
  8547  00EAC8  26D9               	addwf	fsr2l,f,c
  8548  00EACA  5004               	movf	check_food@foodInput+1,w,c
  8549  00EACC  22DA               	addwfc	fsr2h,f,c
  8550  00EACE  04DE               	decf	postinc2,w,c
  8551  00EAD0  10DE               	iorwf	postinc2,w,c
  8552  00EAD2  A4D8               	btfss	status,2,c
  8553  00EAD4  D2EF               	goto	l196
  8554  00EAD6  EE20 F004          	lfsr	2,4
  8555  00EADA  5003               	movf	check_food@foodInput,w,c
  8556  00EADC  26D9               	addwf	fsr2l,f,c
  8557  00EADE  5004               	movf	check_food@foodInput+1,w,c
  8558  00EAE0  22DA               	addwfc	fsr2h,f,c
  8559  00EAE2  04DE               	decf	postinc2,w,c
  8560  00EAE4  10DE               	iorwf	postinc2,w,c
  8561  00EAE6  A4D8               	btfss	status,2,c
  8562  00EAE8  D2E5               	goto	l196
  8563                           
  8564                           ;standbyMode.c: 207: returnValue = 27;
  8565  00EAEA  0E00               	movlw	0
  8566  00EAEC  6E08               	movwf	check_food@returnValue+1,c
  8567  00EAEE  0E1B               	movlw	27
  8568  00EAF0  D29B               	goto	L86
  8569  00EAF2                     
  8570                           ;standbyMode.c: 213: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8571  00EAF2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8572  00EAF6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8573  00EAFA  04DE               	decf	postinc2,w,c
  8574  00EAFC  10DE               	iorwf	postinc2,w,c
  8575  00EAFE  A4D8               	btfss	status,2,c
  8576  00EB00  D018               	goto	l248
  8577  00EB02  EE20 F002          	lfsr	2,2
  8578  00EB06  5003               	movf	check_food@foodInput,w,c
  8579  00EB08  26D9               	addwf	fsr2l,f,c
  8580  00EB0A  5004               	movf	check_food@foodInput+1,w,c
  8581  00EB0C  22DA               	addwfc	fsr2h,f,c
  8582  00EB0E  04DE               	decf	postinc2,w,c
  8583  00EB10  10DE               	iorwf	postinc2,w,c
  8584  00EB12  A4D8               	btfss	status,2,c
  8585  00EB14  D00E               	goto	l248
  8586  00EB16  EE20 F004          	lfsr	2,4
  8587  00EB1A  5003               	movf	check_food@foodInput,w,c
  8588  00EB1C  26D9               	addwf	fsr2l,f,c
  8589  00EB1E  5004               	movf	check_food@foodInput+1,w,c
  8590  00EB20  22DA               	addwfc	fsr2h,f,c
  8591  00EB22  04DE               	decf	postinc2,w,c
  8592  00EB24  10DE               	iorwf	postinc2,w,c
  8593  00EB26  A4D8               	btfss	status,2,c
  8594  00EB28  D004               	goto	l248
  8595                           
  8596                           ;standbyMode.c: 214: returnValue = 28;
  8597  00EB2A  0E00               	movlw	0
  8598  00EB2C  6E08               	movwf	check_food@returnValue+1,c
  8599  00EB2E  0E1C               	movlw	28
  8600  00EB30  D27B               	goto	L86
  8601  00EB32                     l248:
  8602                           
  8603                           ;standbyMode.c: 216: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8604  00EB32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8605  00EB36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8606  00EB3A  04DE               	decf	postinc2,w,c
  8607  00EB3C  10DE               	iorwf	postinc2,w,c
  8608  00EB3E  A4D8               	btfss	status,2,c
  8609  00EB40  D019               	goto	l250
  8610  00EB42  EE20 F002          	lfsr	2,2
  8611  00EB46  5003               	movf	check_food@foodInput,w,c
  8612  00EB48  26D9               	addwf	fsr2l,f,c
  8613  00EB4A  5004               	movf	check_food@foodInput+1,w,c
  8614  00EB4C  22DA               	addwfc	fsr2h,f,c
  8615  00EB4E  04DE               	decf	postinc2,w,c
  8616  00EB50  10DE               	iorwf	postinc2,w,c
  8617  00EB52  A4D8               	btfss	status,2,c
  8618  00EB54  D00F               	goto	l250
  8619  00EB56  EE20 F004          	lfsr	2,4
  8620  00EB5A  5003               	movf	check_food@foodInput,w,c
  8621  00EB5C  26D9               	addwf	fsr2l,f,c
  8622  00EB5E  5004               	movf	check_food@foodInput+1,w,c
  8623  00EB60  22DA               	addwfc	fsr2h,f,c
  8624  00EB62  0E02               	movlw	2
  8625  00EB64  18DE               	xorwf	postinc2,w,c
  8626  00EB66  10DE               	iorwf	postinc2,w,c
  8627  00EB68  A4D8               	btfss	status,2,c
  8628  00EB6A  D004               	goto	l250
  8629                           
  8630                           ;standbyMode.c: 217: returnValue = 29;
  8631  00EB6C  0E00               	movlw	0
  8632  00EB6E  6E08               	movwf	check_food@returnValue+1,c
  8633  00EB70  0E1D               	movlw	29
  8634  00EB72  D25A               	goto	L86
  8635  00EB74                     l250:
  8636                           
  8637                           ;standbyMode.c: 219: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  8638  00EB74  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8639  00EB78  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8640  00EB7C  04DE               	decf	postinc2,w,c
  8641  00EB7E  10DE               	iorwf	postinc2,w,c
  8642  00EB80  A4D8               	btfss	status,2,c
  8643  00EB82  D019               	goto	l252
  8644  00EB84  EE20 F002          	lfsr	2,2
  8645  00EB88  5003               	movf	check_food@foodInput,w,c
  8646  00EB8A  26D9               	addwf	fsr2l,f,c
  8647  00EB8C  5004               	movf	check_food@foodInput+1,w,c
  8648  00EB8E  22DA               	addwfc	fsr2h,f,c
  8649  00EB90  0E02               	movlw	2
  8650  00EB92  18DE               	xorwf	postinc2,w,c
  8651  00EB94  10DE               	iorwf	postinc2,w,c
  8652  00EB96  A4D8               	btfss	status,2,c
  8653  00EB98  D00E               	goto	l252
  8654  00EB9A  EE20 F004          	lfsr	2,4
  8655  00EB9E  5003               	movf	check_food@foodInput,w,c
  8656  00EBA0  26D9               	addwf	fsr2l,f,c
  8657  00EBA2  5004               	movf	check_food@foodInput+1,w,c
  8658  00EBA4  22DA               	addwfc	fsr2h,f,c
  8659  00EBA6  04DE               	decf	postinc2,w,c
  8660  00EBA8  10DE               	iorwf	postinc2,w,c
  8661  00EBAA  A4D8               	btfss	status,2,c
  8662  00EBAC  D004               	goto	l252
  8663                           
  8664                           ;standbyMode.c: 220: returnValue = 30;
  8665  00EBAE  0E00               	movlw	0
  8666  00EBB0  6E08               	movwf	check_food@returnValue+1,c
  8667  00EBB2  0E1E               	movlw	30
  8668  00EBB4  D239               	goto	L86
  8669  00EBB6                     l252:
  8670                           
  8671                           ;standbyMode.c: 222: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  8672  00EBB6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8673  00EBBA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8674  00EBBE  0E02               	movlw	2
  8675  00EBC0  18DE               	xorwf	postinc2,w,c
  8676  00EBC2  10DE               	iorwf	postinc2,w,c
  8677  00EBC4  A4D8               	btfss	status,2,c
  8678  00EBC6  D276               	goto	l196
  8679  00EBC8  EE20 F002          	lfsr	2,2
  8680  00EBCC  5003               	movf	check_food@foodInput,w,c
  8681  00EBCE  26D9               	addwf	fsr2l,f,c
  8682  00EBD0  5004               	movf	check_food@foodInput+1,w,c
  8683  00EBD2  22DA               	addwfc	fsr2h,f,c
  8684  00EBD4  04DE               	decf	postinc2,w,c
  8685  00EBD6  10DE               	iorwf	postinc2,w,c
  8686  00EBD8  A4D8               	btfss	status,2,c
  8687  00EBDA  D26C               	goto	l196
  8688  00EBDC  EE20 F004          	lfsr	2,4
  8689  00EBE0  5003               	movf	check_food@foodInput,w,c
  8690  00EBE2  26D9               	addwf	fsr2l,f,c
  8691  00EBE4  5004               	movf	check_food@foodInput+1,w,c
  8692  00EBE6  22DA               	addwfc	fsr2h,f,c
  8693  00EBE8  04DE               	decf	postinc2,w,c
  8694  00EBEA  10DE               	iorwf	postinc2,w,c
  8695  00EBEC  A4D8               	btfss	status,2,c
  8696  00EBEE  D262               	goto	l196
  8697                           
  8698                           ;standbyMode.c: 223: returnValue = 31;
  8699  00EBF0  0E00               	movlw	0
  8700  00EBF2  6E08               	movwf	check_food@returnValue+1,c
  8701  00EBF4  0E1F               	movlw	31
  8702  00EBF6  D218               	goto	L86
  8703  00EBF8                     
  8704                           ;standbyMode.c: 229: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8705  00EBF8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8706  00EBFC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8707  00EC00  04DE               	decf	postinc2,w,c
  8708  00EC02  10DE               	iorwf	postinc2,w,c
  8709  00EC04  A4D8               	btfss	status,2,c
  8710  00EC06  D018               	goto	l256
  8711  00EC08  EE20 F002          	lfsr	2,2
  8712  00EC0C  5003               	movf	check_food@foodInput,w,c
  8713  00EC0E  26D9               	addwf	fsr2l,f,c
  8714  00EC10  5004               	movf	check_food@foodInput+1,w,c
  8715  00EC12  22DA               	addwfc	fsr2h,f,c
  8716  00EC14  04DE               	decf	postinc2,w,c
  8717  00EC16  10DE               	iorwf	postinc2,w,c
  8718  00EC18  A4D8               	btfss	status,2,c
  8719  00EC1A  D00E               	goto	l256
  8720  00EC1C  EE20 F004          	lfsr	2,4
  8721  00EC20  5003               	movf	check_food@foodInput,w,c
  8722  00EC22  26D9               	addwf	fsr2l,f,c
  8723  00EC24  5004               	movf	check_food@foodInput+1,w,c
  8724  00EC26  22DA               	addwfc	fsr2h,f,c
  8725  00EC28  04DE               	decf	postinc2,w,c
  8726  00EC2A  10DE               	iorwf	postinc2,w,c
  8727  00EC2C  A4D8               	btfss	status,2,c
  8728  00EC2E  D004               	goto	l256
  8729                           
  8730                           ;standbyMode.c: 230: returnValue = 32;
  8731  00EC30  0E00               	movlw	0
  8732  00EC32  6E08               	movwf	check_food@returnValue+1,c
  8733  00EC34  0E20               	movlw	32
  8734  00EC36  D1F8               	goto	L86
  8735  00EC38                     l256:
  8736                           
  8737                           ;standbyMode.c: 232: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8738  00EC38  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8739  00EC3C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8740  00EC40  04DE               	decf	postinc2,w,c
  8741  00EC42  10DE               	iorwf	postinc2,w,c
  8742  00EC44  A4D8               	btfss	status,2,c
  8743  00EC46  D019               	goto	l258
  8744  00EC48  EE20 F002          	lfsr	2,2
  8745  00EC4C  5003               	movf	check_food@foodInput,w,c
  8746  00EC4E  26D9               	addwf	fsr2l,f,c
  8747  00EC50  5004               	movf	check_food@foodInput+1,w,c
  8748  00EC52  22DA               	addwfc	fsr2h,f,c
  8749  00EC54  04DE               	decf	postinc2,w,c
  8750  00EC56  10DE               	iorwf	postinc2,w,c
  8751  00EC58  A4D8               	btfss	status,2,c
  8752  00EC5A  D00F               	goto	l258
  8753  00EC5C  EE20 F004          	lfsr	2,4
  8754  00EC60  5003               	movf	check_food@foodInput,w,c
  8755  00EC62  26D9               	addwf	fsr2l,f,c
  8756  00EC64  5004               	movf	check_food@foodInput+1,w,c
  8757  00EC66  22DA               	addwfc	fsr2h,f,c
  8758  00EC68  0E02               	movlw	2
  8759  00EC6A  18DE               	xorwf	postinc2,w,c
  8760  00EC6C  10DE               	iorwf	postinc2,w,c
  8761  00EC6E  A4D8               	btfss	status,2,c
  8762  00EC70  D004               	goto	l258
  8763                           
  8764                           ;standbyMode.c: 233: returnValue = 33;
  8765  00EC72  0E00               	movlw	0
  8766  00EC74  6E08               	movwf	check_food@returnValue+1,c
  8767  00EC76  0E21               	movlw	33
  8768  00EC78  D1D7               	goto	L86
  8769  00EC7A                     l258:
  8770                           
  8771                           ;standbyMode.c: 235: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  8772  00EC7A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8773  00EC7E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8774  00EC82  04DE               	decf	postinc2,w,c
  8775  00EC84  10DE               	iorwf	postinc2,w,c
  8776  00EC86  A4D8               	btfss	status,2,c
  8777  00EC88  D019               	goto	l260
  8778  00EC8A  EE20 F002          	lfsr	2,2
  8779  00EC8E  5003               	movf	check_food@foodInput,w,c
  8780  00EC90  26D9               	addwf	fsr2l,f,c
  8781  00EC92  5004               	movf	check_food@foodInput+1,w,c
  8782  00EC94  22DA               	addwfc	fsr2h,f,c
  8783  00EC96  0E02               	movlw	2
  8784  00EC98  18DE               	xorwf	postinc2,w,c
  8785  00EC9A  10DE               	iorwf	postinc2,w,c
  8786  00EC9C  A4D8               	btfss	status,2,c
  8787  00EC9E  D00E               	goto	l260
  8788  00ECA0  EE20 F004          	lfsr	2,4
  8789  00ECA4  5003               	movf	check_food@foodInput,w,c
  8790  00ECA6  26D9               	addwf	fsr2l,f,c
  8791  00ECA8  5004               	movf	check_food@foodInput+1,w,c
  8792  00ECAA  22DA               	addwfc	fsr2h,f,c
  8793  00ECAC  04DE               	decf	postinc2,w,c
  8794  00ECAE  10DE               	iorwf	postinc2,w,c
  8795  00ECB0  A4D8               	btfss	status,2,c
  8796  00ECB2  D004               	goto	l260
  8797                           
  8798                           ;standbyMode.c: 236: returnValue = 34;
  8799  00ECB4  0E00               	movlw	0
  8800  00ECB6  6E08               	movwf	check_food@returnValue+1,c
  8801  00ECB8  0E22               	movlw	34
  8802  00ECBA  D1B6               	goto	L86
  8803  00ECBC                     l260:
  8804                           
  8805                           ;standbyMode.c: 238: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  8806  00ECBC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8807  00ECC0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8808  00ECC4  0E02               	movlw	2
  8809  00ECC6  18DE               	xorwf	postinc2,w,c
  8810  00ECC8  10DE               	iorwf	postinc2,w,c
  8811  00ECCA  A4D8               	btfss	status,2,c
  8812  00ECCC  D1F3               	goto	l196
  8813  00ECCE  EE20 F002          	lfsr	2,2
  8814  00ECD2  5003               	movf	check_food@foodInput,w,c
  8815  00ECD4  26D9               	addwf	fsr2l,f,c
  8816  00ECD6  5004               	movf	check_food@foodInput+1,w,c
  8817  00ECD8  22DA               	addwfc	fsr2h,f,c
  8818  00ECDA  04DE               	decf	postinc2,w,c
  8819  00ECDC  10DE               	iorwf	postinc2,w,c
  8820  00ECDE  A4D8               	btfss	status,2,c
  8821  00ECE0  D1E9               	goto	l196
  8822  00ECE2  EE20 F004          	lfsr	2,4
  8823  00ECE6  5003               	movf	check_food@foodInput,w,c
  8824  00ECE8  26D9               	addwf	fsr2l,f,c
  8825  00ECEA  5004               	movf	check_food@foodInput+1,w,c
  8826  00ECEC  22DA               	addwfc	fsr2h,f,c
  8827  00ECEE  04DE               	decf	postinc2,w,c
  8828  00ECF0  10DE               	iorwf	postinc2,w,c
  8829  00ECF2  A4D8               	btfss	status,2,c
  8830  00ECF4  D1DF               	goto	l196
  8831                           
  8832                           ;standbyMode.c: 239: returnValue = 35;
  8833  00ECF6  0E00               	movlw	0
  8834  00ECF8  6E08               	movwf	check_food@returnValue+1,c
  8835  00ECFA  0E23               	movlw	35
  8836  00ECFC  D195               	goto	L86
  8837  00ECFE                     
  8838                           ;standbyMode.c: 245: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8839  00ECFE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8840  00ED02  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8841  00ED06  04DE               	decf	postinc2,w,c
  8842  00ED08  10DE               	iorwf	postinc2,w,c
  8843  00ED0A  A4D8               	btfss	status,2,c
  8844  00ED0C  D018               	goto	l264
  8845  00ED0E  EE20 F002          	lfsr	2,2
  8846  00ED12  5003               	movf	check_food@foodInput,w,c
  8847  00ED14  26D9               	addwf	fsr2l,f,c
  8848  00ED16  5004               	movf	check_food@foodInput+1,w,c
  8849  00ED18  22DA               	addwfc	fsr2h,f,c
  8850  00ED1A  04DE               	decf	postinc2,w,c
  8851  00ED1C  10DE               	iorwf	postinc2,w,c
  8852  00ED1E  A4D8               	btfss	status,2,c
  8853  00ED20  D00E               	goto	l264
  8854  00ED22  EE20 F004          	lfsr	2,4
  8855  00ED26  5003               	movf	check_food@foodInput,w,c
  8856  00ED28  26D9               	addwf	fsr2l,f,c
  8857  00ED2A  5004               	movf	check_food@foodInput+1,w,c
  8858  00ED2C  22DA               	addwfc	fsr2h,f,c
  8859  00ED2E  04DE               	decf	postinc2,w,c
  8860  00ED30  10DE               	iorwf	postinc2,w,c
  8861  00ED32  A4D8               	btfss	status,2,c
  8862  00ED34  D004               	goto	l264
  8863                           
  8864                           ;standbyMode.c: 246: returnValue = 36;
  8865  00ED36  0E00               	movlw	0
  8866  00ED38  6E08               	movwf	check_food@returnValue+1,c
  8867  00ED3A  0E24               	movlw	36
  8868  00ED3C  D175               	goto	L86
  8869  00ED3E                     l264:
  8870                           
  8871                           ;standbyMode.c: 248: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8872  00ED3E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8873  00ED42  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8874  00ED46  04DE               	decf	postinc2,w,c
  8875  00ED48  10DE               	iorwf	postinc2,w,c
  8876  00ED4A  A4D8               	btfss	status,2,c
  8877  00ED4C  D1B3               	goto	l196
  8878  00ED4E  EE20 F002          	lfsr	2,2
  8879  00ED52  5003               	movf	check_food@foodInput,w,c
  8880  00ED54  26D9               	addwf	fsr2l,f,c
  8881  00ED56  5004               	movf	check_food@foodInput+1,w,c
  8882  00ED58  22DA               	addwfc	fsr2h,f,c
  8883  00ED5A  04DE               	decf	postinc2,w,c
  8884  00ED5C  10DE               	iorwf	postinc2,w,c
  8885  00ED5E  A4D8               	btfss	status,2,c
  8886  00ED60  D1A9               	goto	l196
  8887  00ED62  EE20 F004          	lfsr	2,4
  8888  00ED66  5003               	movf	check_food@foodInput,w,c
  8889  00ED68  26D9               	addwf	fsr2l,f,c
  8890  00ED6A  5004               	movf	check_food@foodInput+1,w,c
  8891  00ED6C  22DA               	addwfc	fsr2h,f,c
  8892  00ED6E  0E02               	movlw	2
  8893  00ED70  18DE               	xorwf	postinc2,w,c
  8894  00ED72  10DE               	iorwf	postinc2,w,c
  8895  00ED74  A4D8               	btfss	status,2,c
  8896  00ED76  D19E               	goto	l196
  8897                           
  8898                           ;standbyMode.c: 249: returnValue = 37;
  8899  00ED78  0E00               	movlw	0
  8900  00ED7A  6E08               	movwf	check_food@returnValue+1,c
  8901  00ED7C  0E25               	movlw	37
  8902  00ED7E  D154               	goto	L86
  8903  00ED80                     
  8904                           ;standbyMode.c: 255: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  8905  00ED80  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8906  00ED84  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8907  00ED88  04DE               	decf	postinc2,w,c
  8908  00ED8A  10DE               	iorwf	postinc2,w,c
  8909  00ED8C  A4D8               	btfss	status,2,c
  8910  00ED8E  D018               	goto	l268
  8911  00ED90  EE20 F002          	lfsr	2,2
  8912  00ED94  5003               	movf	check_food@foodInput,w,c
  8913  00ED96  26D9               	addwf	fsr2l,f,c
  8914  00ED98  5004               	movf	check_food@foodInput+1,w,c
  8915  00ED9A  22DA               	addwfc	fsr2h,f,c
  8916  00ED9C  04DE               	decf	postinc2,w,c
  8917  00ED9E  10DE               	iorwf	postinc2,w,c
  8918  00EDA0  A4D8               	btfss	status,2,c
  8919  00EDA2  D00E               	goto	l268
  8920  00EDA4  EE20 F004          	lfsr	2,4
  8921  00EDA8  5003               	movf	check_food@foodInput,w,c
  8922  00EDAA  26D9               	addwf	fsr2l,f,c
  8923  00EDAC  5004               	movf	check_food@foodInput+1,w,c
  8924  00EDAE  22DA               	addwfc	fsr2h,f,c
  8925  00EDB0  04DE               	decf	postinc2,w,c
  8926  00EDB2  10DE               	iorwf	postinc2,w,c
  8927  00EDB4  A4D8               	btfss	status,2,c
  8928  00EDB6  D004               	goto	l268
  8929                           
  8930                           ;standbyMode.c: 256: returnValue = 38;
  8931  00EDB8  0E00               	movlw	0
  8932  00EDBA  6E08               	movwf	check_food@returnValue+1,c
  8933  00EDBC  0E26               	movlw	38
  8934  00EDBE  D134               	goto	L86
  8935  00EDC0                     l268:
  8936                           
  8937                           ;standbyMode.c: 258: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  8938  00EDC0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8939  00EDC4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8940  00EDC8  04DE               	decf	postinc2,w,c
  8941  00EDCA  10DE               	iorwf	postinc2,w,c
  8942  00EDCC  A4D8               	btfss	status,2,c
  8943  00EDCE  D019               	goto	l270
  8944  00EDD0  EE20 F002          	lfsr	2,2
  8945  00EDD4  5003               	movf	check_food@foodInput,w,c
  8946  00EDD6  26D9               	addwf	fsr2l,f,c
  8947  00EDD8  5004               	movf	check_food@foodInput+1,w,c
  8948  00EDDA  22DA               	addwfc	fsr2h,f,c
  8949  00EDDC  04DE               	decf	postinc2,w,c
  8950  00EDDE  10DE               	iorwf	postinc2,w,c
  8951  00EDE0  A4D8               	btfss	status,2,c
  8952  00EDE2  D00F               	goto	l270
  8953  00EDE4  EE20 F004          	lfsr	2,4
  8954  00EDE8  5003               	movf	check_food@foodInput,w,c
  8955  00EDEA  26D9               	addwf	fsr2l,f,c
  8956  00EDEC  5004               	movf	check_food@foodInput+1,w,c
  8957  00EDEE  22DA               	addwfc	fsr2h,f,c
  8958  00EDF0  0E02               	movlw	2
  8959  00EDF2  18DE               	xorwf	postinc2,w,c
  8960  00EDF4  10DE               	iorwf	postinc2,w,c
  8961  00EDF6  A4D8               	btfss	status,2,c
  8962  00EDF8  D004               	goto	l270
  8963                           
  8964                           ;standbyMode.c: 259: returnValue = 39;
  8965  00EDFA  0E00               	movlw	0
  8966  00EDFC  6E08               	movwf	check_food@returnValue+1,c
  8967  00EDFE  0E27               	movlw	39
  8968  00EE00  D113               	goto	L86
  8969  00EE02                     l270:
  8970                           
  8971                           ;standbyMode.c: 261: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  8972  00EE02  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8973  00EE06  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8974  00EE0A  04DE               	decf	postinc2,w,c
  8975  00EE0C  10DE               	iorwf	postinc2,w,c
  8976  00EE0E  A4D8               	btfss	status,2,c
  8977  00EE10  D019               	goto	l272
  8978  00EE12  EE20 F002          	lfsr	2,2
  8979  00EE16  5003               	movf	check_food@foodInput,w,c
  8980  00EE18  26D9               	addwf	fsr2l,f,c
  8981  00EE1A  5004               	movf	check_food@foodInput+1,w,c
  8982  00EE1C  22DA               	addwfc	fsr2h,f,c
  8983  00EE1E  0E02               	movlw	2
  8984  00EE20  18DE               	xorwf	postinc2,w,c
  8985  00EE22  10DE               	iorwf	postinc2,w,c
  8986  00EE24  A4D8               	btfss	status,2,c
  8987  00EE26  D00E               	goto	l272
  8988  00EE28  EE20 F004          	lfsr	2,4
  8989  00EE2C  5003               	movf	check_food@foodInput,w,c
  8990  00EE2E  26D9               	addwf	fsr2l,f,c
  8991  00EE30  5004               	movf	check_food@foodInput+1,w,c
  8992  00EE32  22DA               	addwfc	fsr2h,f,c
  8993  00EE34  04DE               	decf	postinc2,w,c
  8994  00EE36  10DE               	iorwf	postinc2,w,c
  8995  00EE38  A4D8               	btfss	status,2,c
  8996  00EE3A  D004               	goto	l272
  8997                           
  8998                           ;standbyMode.c: 262: returnValue = 40;
  8999  00EE3C  0E00               	movlw	0
  9000  00EE3E  6E08               	movwf	check_food@returnValue+1,c
  9001  00EE40  0E28               	movlw	40
  9002  00EE42  D0F2               	goto	L86
  9003  00EE44                     l272:
  9004                           
  9005                           ;standbyMode.c: 264: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9006  00EE44  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9007  00EE48  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9008  00EE4C  0E02               	movlw	2
  9009  00EE4E  18DE               	xorwf	postinc2,w,c
  9010  00EE50  10DE               	iorwf	postinc2,w,c
  9011  00EE52  A4D8               	btfss	status,2,c
  9012  00EE54  D12F               	goto	l196
  9013  00EE56  EE20 F002          	lfsr	2,2
  9014  00EE5A  5003               	movf	check_food@foodInput,w,c
  9015  00EE5C  26D9               	addwf	fsr2l,f,c
  9016  00EE5E  5004               	movf	check_food@foodInput+1,w,c
  9017  00EE60  22DA               	addwfc	fsr2h,f,c
  9018  00EE62  04DE               	decf	postinc2,w,c
  9019  00EE64  10DE               	iorwf	postinc2,w,c
  9020  00EE66  A4D8               	btfss	status,2,c
  9021  00EE68  D125               	goto	l196
  9022  00EE6A  EE20 F004          	lfsr	2,4
  9023  00EE6E  5003               	movf	check_food@foodInput,w,c
  9024  00EE70  26D9               	addwf	fsr2l,f,c
  9025  00EE72  5004               	movf	check_food@foodInput+1,w,c
  9026  00EE74  22DA               	addwfc	fsr2h,f,c
  9027  00EE76  04DE               	decf	postinc2,w,c
  9028  00EE78  10DE               	iorwf	postinc2,w,c
  9029  00EE7A  A4D8               	btfss	status,2,c
  9030  00EE7C  D11B               	goto	l196
  9031                           
  9032                           ;standbyMode.c: 265: returnValue = 41;
  9033  00EE7E  0E00               	movlw	0
  9034  00EE80  6E08               	movwf	check_food@returnValue+1,c
  9035  00EE82  0E29               	movlw	41
  9036  00EE84  D0D1               	goto	L86
  9037  00EE86                     
  9038                           ;standbyMode.c: 271: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9039  00EE86  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9040  00EE8A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9041  00EE8E  04DE               	decf	postinc2,w,c
  9042  00EE90  10DE               	iorwf	postinc2,w,c
  9043  00EE92  A4D8               	btfss	status,2,c
  9044  00EE94  D10F               	goto	l196
  9045  00EE96  EE20 F002          	lfsr	2,2
  9046  00EE9A  5003               	movf	check_food@foodInput,w,c
  9047  00EE9C  26D9               	addwf	fsr2l,f,c
  9048  00EE9E  5004               	movf	check_food@foodInput+1,w,c
  9049  00EEA0  22DA               	addwfc	fsr2h,f,c
  9050  00EEA2  04DE               	decf	postinc2,w,c
  9051  00EEA4  10DE               	iorwf	postinc2,w,c
  9052  00EEA6  A4D8               	btfss	status,2,c
  9053  00EEA8  D105               	goto	l196
  9054  00EEAA  EE20 F004          	lfsr	2,4
  9055  00EEAE  5003               	movf	check_food@foodInput,w,c
  9056  00EEB0  26D9               	addwf	fsr2l,f,c
  9057  00EEB2  5004               	movf	check_food@foodInput+1,w,c
  9058  00EEB4  22DA               	addwfc	fsr2h,f,c
  9059  00EEB6  04DE               	decf	postinc2,w,c
  9060  00EEB8  10DE               	iorwf	postinc2,w,c
  9061  00EEBA  A4D8               	btfss	status,2,c
  9062  00EEBC  D0FB               	goto	l196
  9063  00EEBE  EE20 F006          	lfsr	2,6
  9064  00EEC2  5003               	movf	check_food@foodInput,w,c
  9065  00EEC4  26D9               	addwf	fsr2l,f,c
  9066  00EEC6  5004               	movf	check_food@foodInput+1,w,c
  9067  00EEC8  22DA               	addwfc	fsr2h,f,c
  9068  00EECA  04DE               	decf	postinc2,w,c
  9069  00EECC  10DE               	iorwf	postinc2,w,c
  9070  00EECE  A4D8               	btfss	status,2,c
  9071  00EED0  D0F1               	goto	l196
  9072                           
  9073                           ;standbyMode.c: 272: returnValue = 42;
  9074  00EED2  0E00               	movlw	0
  9075  00EED4  6E08               	movwf	check_food@returnValue+1,c
  9076  00EED6  0E2A               	movlw	42
  9077  00EED8  D0A7               	goto	L86
  9078  00EEDA                     
  9079                           ;standbyMode.c: 278: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9080  00EEDA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9081  00EEDE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9082  00EEE2  04DE               	decf	postinc2,w,c
  9083  00EEE4  10DE               	iorwf	postinc2,w,c
  9084  00EEE6  A4D8               	btfss	status,2,c
  9085  00EEE8  D0E5               	goto	l196
  9086  00EEEA  EE20 F002          	lfsr	2,2
  9087  00EEEE  5003               	movf	check_food@foodInput,w,c
  9088  00EEF0  26D9               	addwf	fsr2l,f,c
  9089  00EEF2  5004               	movf	check_food@foodInput+1,w,c
  9090  00EEF4  22DA               	addwfc	fsr2h,f,c
  9091  00EEF6  04DE               	decf	postinc2,w,c
  9092  00EEF8  10DE               	iorwf	postinc2,w,c
  9093  00EEFA  A4D8               	btfss	status,2,c
  9094  00EEFC  D0DB               	goto	l196
  9095  00EEFE  EE20 F004          	lfsr	2,4
  9096  00EF02  5003               	movf	check_food@foodInput,w,c
  9097  00EF04  26D9               	addwf	fsr2l,f,c
  9098  00EF06  5004               	movf	check_food@foodInput+1,w,c
  9099  00EF08  22DA               	addwfc	fsr2h,f,c
  9100  00EF0A  04DE               	decf	postinc2,w,c
  9101  00EF0C  10DE               	iorwf	postinc2,w,c
  9102  00EF0E  A4D8               	btfss	status,2,c
  9103  00EF10  D0D1               	goto	l196
  9104  00EF12  EE20 F006          	lfsr	2,6
  9105  00EF16  5003               	movf	check_food@foodInput,w,c
  9106  00EF18  26D9               	addwf	fsr2l,f,c
  9107  00EF1A  5004               	movf	check_food@foodInput+1,w,c
  9108  00EF1C  22DA               	addwfc	fsr2h,f,c
  9109  00EF1E  04DE               	decf	postinc2,w,c
  9110  00EF20  10DE               	iorwf	postinc2,w,c
  9111  00EF22  A4D8               	btfss	status,2,c
  9112  00EF24  D0C7               	goto	l196
  9113                           
  9114                           ;standbyMode.c: 279: returnValue = 43;
  9115  00EF26  0E00               	movlw	0
  9116  00EF28  6E08               	movwf	check_food@returnValue+1,c
  9117  00EF2A  0E2B               	movlw	43
  9118  00EF2C  D07D               	goto	L86
  9119  00EF2E                     
  9120                           ;standbyMode.c: 285: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9121  00EF2E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9122  00EF32  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9123  00EF36  04DE               	decf	postinc2,w,c
  9124  00EF38  10DE               	iorwf	postinc2,w,c
  9125  00EF3A  A4D8               	btfss	status,2,c
  9126  00EF3C  D0BB               	goto	l196
  9127  00EF3E  EE20 F002          	lfsr	2,2
  9128  00EF42  5003               	movf	check_food@foodInput,w,c
  9129  00EF44  26D9               	addwf	fsr2l,f,c
  9130  00EF46  5004               	movf	check_food@foodInput+1,w,c
  9131  00EF48  22DA               	addwfc	fsr2h,f,c
  9132  00EF4A  04DE               	decf	postinc2,w,c
  9133  00EF4C  10DE               	iorwf	postinc2,w,c
  9134  00EF4E  A4D8               	btfss	status,2,c
  9135  00EF50  D0B1               	goto	l196
  9136  00EF52  EE20 F004          	lfsr	2,4
  9137  00EF56  5003               	movf	check_food@foodInput,w,c
  9138  00EF58  26D9               	addwf	fsr2l,f,c
  9139  00EF5A  5004               	movf	check_food@foodInput+1,w,c
  9140  00EF5C  22DA               	addwfc	fsr2h,f,c
  9141  00EF5E  04DE               	decf	postinc2,w,c
  9142  00EF60  10DE               	iorwf	postinc2,w,c
  9143  00EF62  A4D8               	btfss	status,2,c
  9144  00EF64  D0A7               	goto	l196
  9145  00EF66  EE20 F006          	lfsr	2,6
  9146  00EF6A  5003               	movf	check_food@foodInput,w,c
  9147  00EF6C  26D9               	addwf	fsr2l,f,c
  9148  00EF6E  5004               	movf	check_food@foodInput+1,w,c
  9149  00EF70  22DA               	addwfc	fsr2h,f,c
  9150  00EF72  04DE               	decf	postinc2,w,c
  9151  00EF74  10DE               	iorwf	postinc2,w,c
  9152  00EF76  A4D8               	btfss	status,2,c
  9153  00EF78  D09D               	goto	l196
  9154                           
  9155                           ;standbyMode.c: 286: returnValue = 44;
  9156  00EF7A  0E00               	movlw	0
  9157  00EF7C  6E08               	movwf	check_food@returnValue+1,c
  9158  00EF7E  0E2C               	movlw	44
  9159  00EF80  D053               	goto	L86
  9160  00EF82                     
  9161                           ;standbyMode.c: 292: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9162  00EF82  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9163  00EF86  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9164  00EF8A  04DE               	decf	postinc2,w,c
  9165  00EF8C  10DE               	iorwf	postinc2,w,c
  9166  00EF8E  A4D8               	btfss	status,2,c
  9167  00EF90  D091               	goto	l196
  9168  00EF92  EE20 F002          	lfsr	2,2
  9169  00EF96  5003               	movf	check_food@foodInput,w,c
  9170  00EF98  26D9               	addwf	fsr2l,f,c
  9171  00EF9A  5004               	movf	check_food@foodInput+1,w,c
  9172  00EF9C  22DA               	addwfc	fsr2h,f,c
  9173  00EF9E  04DE               	decf	postinc2,w,c
  9174  00EFA0  10DE               	iorwf	postinc2,w,c
  9175  00EFA2  A4D8               	btfss	status,2,c
  9176  00EFA4  D087               	goto	l196
  9177  00EFA6  EE20 F004          	lfsr	2,4
  9178  00EFAA  5003               	movf	check_food@foodInput,w,c
  9179  00EFAC  26D9               	addwf	fsr2l,f,c
  9180  00EFAE  5004               	movf	check_food@foodInput+1,w,c
  9181  00EFB0  22DA               	addwfc	fsr2h,f,c
  9182  00EFB2  04DE               	decf	postinc2,w,c
  9183  00EFB4  10DE               	iorwf	postinc2,w,c
  9184  00EFB6  A4D8               	btfss	status,2,c
  9185  00EFB8  D07D               	goto	l196
  9186  00EFBA  EE20 F006          	lfsr	2,6
  9187  00EFBE  5003               	movf	check_food@foodInput,w,c
  9188  00EFC0  26D9               	addwf	fsr2l,f,c
  9189  00EFC2  5004               	movf	check_food@foodInput+1,w,c
  9190  00EFC4  22DA               	addwfc	fsr2h,f,c
  9191  00EFC6  04DE               	decf	postinc2,w,c
  9192  00EFC8  10DE               	iorwf	postinc2,w,c
  9193  00EFCA  A4D8               	btfss	status,2,c
  9194  00EFCC  D073               	goto	l196
  9195                           
  9196                           ;standbyMode.c: 293: returnValue = 45;
  9197  00EFCE  0E00               	movlw	0
  9198  00EFD0  6E08               	movwf	check_food@returnValue+1,c
  9199  00EFD2  0E2D               	movlw	45
  9200  00EFD4  D029               	goto	L86
  9201  00EFD6                     
  9202                           ;standbyMode.c: 299: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9203  00EFD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9204  00EFDA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9205  00EFDE  04DE               	decf	postinc2,w,c
  9206  00EFE0  10DE               	iorwf	postinc2,w,c
  9207  00EFE2  A4D8               	btfss	status,2,c
  9208  00EFE4  D067               	goto	l196
  9209  00EFE6  EE20 F002          	lfsr	2,2
  9210  00EFEA  5003               	movf	check_food@foodInput,w,c
  9211  00EFEC  26D9               	addwf	fsr2l,f,c
  9212  00EFEE  5004               	movf	check_food@foodInput+1,w,c
  9213  00EFF0  22DA               	addwfc	fsr2h,f,c
  9214  00EFF2  04DE               	decf	postinc2,w,c
  9215  00EFF4  10DE               	iorwf	postinc2,w,c
  9216  00EFF6  A4D8               	btfss	status,2,c
  9217  00EFF8  D05D               	goto	l196
  9218  00EFFA  EE20 F004          	lfsr	2,4
  9219  00EFFE  5003               	movf	check_food@foodInput,w,c
  9220  00F000  26D9               	addwf	fsr2l,f,c
  9221  00F002  5004               	movf	check_food@foodInput+1,w,c
  9222  00F004  22DA               	addwfc	fsr2h,f,c
  9223  00F006  04DE               	decf	postinc2,w,c
  9224  00F008  10DE               	iorwf	postinc2,w,c
  9225  00F00A  A4D8               	btfss	status,2,c
  9226  00F00C  D053               	goto	l196
  9227  00F00E  EE20 F006          	lfsr	2,6
  9228  00F012  5003               	movf	check_food@foodInput,w,c
  9229  00F014  26D9               	addwf	fsr2l,f,c
  9230  00F016  5004               	movf	check_food@foodInput+1,w,c
  9231  00F018  22DA               	addwfc	fsr2h,f,c
  9232  00F01A  04DE               	decf	postinc2,w,c
  9233  00F01C  10DE               	iorwf	postinc2,w,c
  9234  00F01E  A4D8               	btfss	status,2,c
  9235  00F020  D049               	goto	l196
  9236                           
  9237                           ;standbyMode.c: 300: returnValue = 46;
  9238  00F022  0E00               	movlw	0
  9239  00F024  6E08               	movwf	check_food@returnValue+1,c
  9240  00F026  0E2E               	movlw	46
  9241  00F028                     L86:
  9242  00F028  6E07               	movwf	check_food@returnValue,c
  9243                           
  9244                           ;standbyMode.c: 307: }
  9245                           
  9246                           ;standbyMode.c: 306: break;
  9247                           
  9248                           ;standbyMode.c: 305: default:
  9249                           
  9250                           ;standbyMode.c: 301: }
  9251                           ;standbyMode.c: 302: break;
  9252  00F02A  D044               	goto	l196
  9253  00F02C                     l191:
  9254  00F02C  C001  F005         	movff	check_food@sum,??_check_food
  9255  00F030  C002  F006         	movff	check_food@sum+1,??_check_food+1
  9256                           
  9257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9258                           ; Switch size 1, requested type "space"
  9259                           ; Number of cases is 1, Range of values is 0 to 0
  9260                           ; switch strategies available:
  9261                           ; Name         Instructions Cycles
  9262                           ; simple_byte            4     3 (average)
  9263                           ;	Chosen strategy is simple_byte
  9264  00F034  5006               	movf	??_check_food+1,w,c
  9265  00F036  0A00               	xorlw	0	; case 0
  9266  00F038  A4D8               	btfss	status,2,c
  9267  00F03A  D03C               	goto	l196
  9268                           
  9269                           ; Switch size 1, requested type "space"
  9270                           ; Number of cases is 18, Range of values is 3 to 43
  9271                           ; switch strategies available:
  9272                           ; Name         Instructions Cycles
  9273                           ; simple_byte           55    28 (average)
  9274                           ;	Chosen strategy is simple_byte
  9275  00F03C  5005               	movf	??_check_food,w,c
  9276  00F03E  0A03               	xorlw	3	; case 3
  9277  00F040  B4D8               	btfsc	status,2,c
  9278  00F042  EF07  F073         	goto	l192
  9279  00F046  0A04               	xorlw	4	; case 7
  9280  00F048  B4D8               	btfsc	status,2,c
  9281  00F04A  EF23  F073         	goto	l197
  9282  00F04E  0A0D               	xorlw	13	; case 10
  9283  00F050  B4D8               	btfsc	status,2,c
  9284  00F052  EF69  F073         	goto	l207
  9285  00F056  0A06               	xorlw	6	; case 12
  9286  00F058  B4D8               	btfsc	status,2,c
  9287  00F05A  EF3F  F073         	goto	l201
  9288  00F05E  0A01               	xorlw	1	; case 13
  9289  00F060  B4D8               	btfsc	status,2,c
  9290  00F062  D484               	goto	l235
  9291  00F064  0A02               	xorlw	2	; case 15
  9292  00F066  B4D8               	btfsc	status,2,c
  9293  00F068  EFCB  F073         	goto	l215
  9294  00F06C  0A1E               	xorlw	30	; case 17
  9295  00F06E  B4D8               	btfsc	status,2,c
  9296  00F070  D4FF               	goto	l243
  9297  00F072  0A03               	xorlw	3	; case 18
  9298  00F074  B4D8               	btfsc	status,2,c
  9299  00F076  D4BB               	goto	l239
  9300  00F078  0A01               	xorlw	1	; case 19
  9301  00F07A  B4D8               	btfsc	status,2,c
  9302  00F07C  D404               	goto	l225
  9303  00F07E  0A05               	xorlw	5	; case 22
  9304  00F080  B4D8               	btfsc	status,2,c
  9305  00F082  D5BA               	goto	l255
  9306  00F084  0A0F               	xorlw	15	; case 25
  9307  00F086  B4D8               	btfsc	status,2,c
  9308  00F088  D6FE               	goto	l275
  9309  00F08A  0A03               	xorlw	3	; case 26
  9310  00F08C  B4D8               	btfsc	status,2,c
  9311  00F08E  D637               	goto	l263
  9312  00F090  0A01               	xorlw	1	; case 27
  9313  00F092  B4D8               	btfsc	status,2,c
  9314  00F094  D52E               	goto	l247
  9315  00F096  0A06               	xorlw	6	; case 29
  9316  00F098  B4D8               	btfsc	status,2,c
  9317  00F09A  D71F               	goto	l277
  9318  00F09C  0A02               	xorlw	2	; case 31
  9319  00F09E  B4D8               	btfsc	status,2,c
  9320  00F0A0  D66F               	goto	l267
  9321  00F0A2  0A3D               	xorlw	61	; case 34
  9322  00F0A4  B4D8               	btfsc	status,2,c
  9323  00F0A6  D743               	goto	l279
  9324  00F0A8  0A05               	xorlw	5	; case 39
  9325  00F0AA  B4D8               	btfsc	status,2,c
  9326  00F0AC  D76A               	goto	l281
  9327  00F0AE  0A0C               	xorlw	12	; case 43
  9328  00F0B0  B4D8               	btfsc	status,2,c
  9329  00F0B2  D791               	goto	l283
  9330  00F0B4                     l196:
  9331                           
  9332                           ;standbyMode.c: 308: return returnValue;
  9333  00F0B4  C007  F001         	movff	check_food@returnValue,?_check_food
  9334  00F0B8  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  9335  00F0BC  0012               	return		;funcret
  9336  00F0BE                     __end_of_check_food:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           postinc0	equ	0xFEE
  9346                           wreg	equ	0xFE8
  9347                           postdec1	equ	0xFE5
  9348                           plusw1	equ	0xFE3
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           plusw2	equ	0xFDB
  9354                           fsr2h	equ	0xFDA
  9355                           fsr2l	equ	0xFD9
  9356                           status	equ	0xFD8
  9357                           
  9358 ;; *************** function _diet_press *****************
  9359 ;; Defined at:
  9360 ;;		line 1180 in file "standbyMode.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;  drawer          2   36[COMRAM] unsigned int 
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;  keypress        1   50[COMRAM] unsigned char 
  9365 ;;  dietTable       8   51[COMRAM] unsigned int [4]
  9366 ;;  sum             2   48[COMRAM] unsigned int 
  9367 ;;  count           2   46[COMRAM] unsigned int 
  9368 ;;  backCheck       2   44[COMRAM] unsigned int 
  9369 ;;  i               2   42[COMRAM] unsigned int 
  9370 ;;  previous        2   40[COMRAM] unsigned int 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  2   36[COMRAM] unsigned int 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;Total ram usage:       23 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    3
  9387 ;; This function calls:
  9388 ;;		_lcdInst
  9389 ;;		_printf
  9390 ;;		_putch
  9391 ;; This function is called by:
  9392 ;;		_standbyMode
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           	psect	text17
  9397  00E0DC                     __ptext17:
  9398                           	opt stack 0
  9399  00E0DC                     _diet_press:
  9400                           	opt stack 26
  9401                           
  9402                           ;incstack = 0
  9403                           ;standbyMode.c: 1183: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  9404  00E0DC  0E01               	movlw	1
  9405  00E0DE  ECE1  F063         	call	_lcdInst
  9406  00E0E2  0EC3               	movlw	195
  9407  00E0E4  6E27               	movwf	??_diet_press& (0+255),c
  9408  00E0E6  0ECD               	movlw	205
  9409  00E0E8                     u8557:
  9410  00E0E8  2EE8               	decfsz	wreg,f,c
  9411  00E0EA  D7FE               	bra	u8557
  9412  00E0EC  2E27               	decfsz	??_diet_press& (0+255),f,c
  9413  00E0EE  D7FC               	bra	u8557
  9414  00E0F0  F000               	nop	
  9415                           
  9416                           ;standbyMode.c: 1184: printf("Drawer %i diet:", drawer);
  9417  00E0F2  0E3D               	movlw	low STR_35
  9418  00E0F4  6E0D               	movwf	printf@f,c
  9419  00E0F6  0EFE               	movlw	high STR_35
  9420  00E0F8  6E0E               	movwf	printf@f+1,c
  9421  00E0FA  C025  F00F         	movff	diet_press@drawer,?_printf+2
  9422  00E0FE  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  9423  00E102  ECC5  F06C         	call	_printf	;wreg free
  9424                           
  9425                           ;standbyMode.c: 1185: lcdInst(0xC0);;
  9426  00E106  0EC0               	movlw	192
  9427  00E108  ECE1  F063         	call	_lcdInst
  9428                           
  9429                           ;standbyMode.c: 1187: unsigned int count = 0;
  9430  00E10C  0E00               	movlw	0
  9431  00E10E  6E30               	movwf	diet_press@count+1,c
  9432  00E110  0E00               	movlw	0
  9433  00E112  6E2F               	movwf	diet_press@count,c
  9434                           
  9435                           ;standbyMode.c: 1188: unsigned int previous = 0;
  9436  00E114  0E00               	movlw	0
  9437  00E116  6E2A               	movwf	diet_press@previous+1,c
  9438  00E118  0E00               	movlw	0
  9439  00E11A  6E29               	movwf	diet_press@previous,c
  9440                           
  9441                           ;standbyMode.c: 1189: unsigned int sum = 0;
  9442  00E11C  0E00               	movlw	0
  9443  00E11E  6E32               	movwf	diet_press@sum+1,c
  9444  00E120  0E00               	movlw	0
  9445  00E122  6E31               	movwf	diet_press@sum,c
  9446                           
  9447                           ;standbyMode.c: 1190: unsigned int i = 0;
  9448  00E124  0E00               	movlw	0
  9449  00E126  6E2C               	movwf	diet_press@i+1,c
  9450  00E128  0E00               	movlw	0
  9451  00E12A  6E2B               	movwf	diet_press@i,c
  9452                           
  9453                           ;standbyMode.c: 1191: unsigned int dietTable[4] = {0, 0, 0, 0};
  9454  00E12C  EE20  F059         	lfsr	2,diet_press@F3141
  9455  00E130  EE10  F034         	lfsr	1,diet_press@dietTable
  9456  00E134  0E07               	movlw	7
  9457  00E136                     u6031:
  9458  00E136  CFDB FFE3          	movff	plusw2,plusw1
  9459  00E13A  06E8               	decf	wreg,f,c
  9460  00E13C  E2FC               	bc	u6031
  9461                           
  9462                           ;standbyMode.c: 1192: unsigned int backCheck = 0;
  9463  00E13E  0E00               	movlw	0
  9464  00E140  6E2E               	movwf	diet_press@backCheck+1,c
  9465  00E142  0E00               	movlw	0
  9466  00E144  6E2D               	movwf	diet_press@backCheck,c
  9467  00E146                     l521:
  9468  00E146  A281               	btfss	3969,1,c	;volatile
  9469  00E148  D7FE               	goto	l520
  9470                           
  9471                           ;standbyMode.c: 1196: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9472  00E14A  3881               	swapf	3969,w,c	;volatile
  9473  00E14C  0B0F               	andlw	15
  9474  00E14E  0B0F               	andlw	15
  9475  00E150  6E33               	movwf	diet_press@keypress,c
  9476  00E152  B281               	btfsc	3969,1,c	;volatile
  9477  00E154  D7FE               	goto	l525
  9478                           
  9479                           ;standbyMode.c: 1199: if(keypress == 15){
  9480  00E156  0E0F               	movlw	15
  9481  00E158  1833               	xorwf	diet_press@keypress,w,c
  9482  00E15A  B4D8               	btfsc	status,2,c
  9483  00E15C  D080               	goto	l528
  9484                           
  9485                           ;standbyMode.c: 1202: else if (keypress == 14){
  9486                           
  9487                           ;standbyMode.c: 1201: }
  9488                           
  9489                           ;standbyMode.c: 1200: break;
  9490  00E15E  0E0E               	movlw	14
  9491  00E160  1833               	xorwf	diet_press@keypress,w,c
  9492  00E162  A4D8               	btfss	status,2,c
  9493  00E164  D005               	goto	l530
  9494                           
  9495                           ;standbyMode.c: 1203: backCheck = 1;
  9496  00E166  0E00               	movlw	0
  9497  00E168  6E2E               	movwf	diet_press@backCheck+1,c
  9498  00E16A  0E01               	movlw	1
  9499  00E16C  6E2D               	movwf	diet_press@backCheck,c
  9500                           
  9501                           ;standbyMode.c: 1204: break;
  9502  00E16E  D077               	goto	l528
  9503  00E170                     l530:
  9504                           
  9505                           ;standbyMode.c: 1206: else if (keypress == 12){
  9506  00E170  0E0C               	movlw	12
  9507  00E172  1833               	xorwf	diet_press@keypress,w,c
  9508  00E174  A4D8               	btfss	status,2,c
  9509  00E176  D02D               	goto	l532
  9510                           
  9511                           ;standbyMode.c: 1207: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9512  00E178  0E01               	movlw	1
  9513  00E17A  ECE1  F063         	call	_lcdInst
  9514  00E17E  0EC3               	movlw	195
  9515  00E180  6E27               	movwf	??_diet_press& (0+255),c
  9516  00E182  0ECD               	movlw	205
  9517  00E184                     u8567:
  9518  00E184  2EE8               	decfsz	wreg,f,c
  9519  00E186  D7FE               	bra	u8567
  9520  00E188  2E27               	decfsz	??_diet_press& (0+255),f,c
  9521  00E18A  D7FC               	bra	u8567
  9522  00E18C  F000               	nop	
  9523                           
  9524                           ;standbyMode.c: 1208: printf("Drawer %i diet:", drawer);
  9525  00E18E  0E3D               	movlw	low STR_35
  9526  00E190  6E0D               	movwf	printf@f,c
  9527  00E192  0EFE               	movlw	high STR_35
  9528  00E194  6E0E               	movwf	printf@f+1,c
  9529  00E196  C025  F00F         	movff	diet_press@drawer,?_printf+2
  9530  00E19A  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  9531  00E19E  ECC5  F06C         	call	_printf	;wreg free
  9532                           
  9533                           ;standbyMode.c: 1209: lcdInst(0xC0);;
  9534  00E1A2  0EC0               	movlw	192
  9535  00E1A4  ECE1  F063         	call	_lcdInst
  9536                           
  9537                           ;standbyMode.c: 1210: count = 0;
  9538  00E1A8  0E00               	movlw	0
  9539  00E1AA  6E30               	movwf	diet_press@count+1,c
  9540  00E1AC  0E00               	movlw	0
  9541  00E1AE  6E2F               	movwf	diet_press@count,c
  9542                           
  9543                           ;standbyMode.c: 1211: dietTable[0] = 0;
  9544  00E1B0  0E00               	movlw	0
  9545  00E1B2  6E35               	movwf	diet_press@dietTable+1,c
  9546  00E1B4  0E00               	movlw	0
  9547  00E1B6  6E34               	movwf	diet_press@dietTable,c
  9548                           
  9549                           ;standbyMode.c: 1212: dietTable[1] = 0;
  9550  00E1B8  0E00               	movlw	0
  9551  00E1BA  6E37               	movwf	diet_press@dietTable+3,c
  9552  00E1BC  0E00               	movlw	0
  9553  00E1BE  6E36               	movwf	diet_press@dietTable+2,c
  9554                           
  9555                           ;standbyMode.c: 1213: dietTable[2] = 0;
  9556  00E1C0  0E00               	movlw	0
  9557  00E1C2  6E39               	movwf	diet_press@dietTable+5,c
  9558  00E1C4  0E00               	movlw	0
  9559  00E1C6  6E38               	movwf	diet_press@dietTable+4,c
  9560                           
  9561                           ;standbyMode.c: 1214: dietTable[3] = 0;
  9562  00E1C8  0E00               	movlw	0
  9563  00E1CA  6E3B               	movwf	diet_press@dietTable+7,c
  9564  00E1CC  0E00               	movlw	0
  9565  00E1CE  6E3A               	movwf	diet_press@dietTable+6,c
  9566                           
  9567                           ;standbyMode.c: 1215: }
  9568  00E1D0  D7BA               	goto	l520
  9569  00E1D2                     l532:
  9570                           
  9571                           ;standbyMode.c: 1216: else if (count <= 3){
  9572  00E1D2  5030               	movf	diet_press@count+1,w,c
  9573  00E1D4  E1B8               	bnz	l521
  9574  00E1D6  0E04               	movlw	4
  9575  00E1D8  5C2F               	subwf	diet_press@count,w,c
  9576  00E1DA  B0D8               	btfsc	status,0,c
  9577  00E1DC  D7B4               	goto	l520
  9578                           
  9579                           ;standbyMode.c: 1217: if (keypress == 3 || keypress == 7){
  9580  00E1DE  0E03               	movlw	3
  9581  00E1E0  1833               	xorwf	diet_press@keypress,w,c
  9582  00E1E2  B4D8               	btfsc	status,2,c
  9583  00E1E4  D004               	goto	u6110
  9584  00E1E6  0E07               	movlw	7
  9585  00E1E8  1833               	xorwf	diet_press@keypress,w,c
  9586  00E1EA  A4D8               	btfss	status,2,c
  9587  00E1EC  D013               	goto	l535
  9588  00E1EE                     u6110:
  9589                           
  9590                           ;standbyMode.c: 1218: putch(input[keypress]);
  9591  00E1EE  5033               	movf	diet_press@keypress,w,c
  9592  00E1F0  0D01               	mullw	1
  9593  00E1F2  0E34               	movlw	low _input
  9594  00E1F4  24F3               	addwf	prodl,w,c
  9595  00E1F6  6EF6               	movwf	tblptrl,c
  9596  00E1F8  0EFD               	movlw	high _input
  9597  00E1FA  20F4               	addwfc	prodh,w,c
  9598  00E1FC  6EF7               	movwf	tblptrh,c
  9599  00E1FE                     	if	0	;There are less than 3 active tblptr bytes
  9600  00E1FE                     	endif
  9601  00E1FE  0008               	tblrd		*
  9602  00E200  50F5               	movf	tablat,w,c
  9603  00E202  ECEB  F063         	call	_putch
  9604                           
  9605                           ;standbyMode.c: 1219: dietTable[count] = keypress;
  9606  00E206  5033               	movf	diet_press@keypress,w,c
  9607  00E208  6E27               	movwf	??_diet_press& (0+255),c
  9608  00E20A  6A28               	clrf	(??_diet_press+1)& (0+255),c
  9609  00E20C  D01A               	goto	L105
  9610  00E20E                     l5726:
  9611                           
  9612                           ;standbyMode.c: 1220: count += 1;
  9613  00E20E  4A2F               	infsnz	diet_press@count,f,c
  9614  00E210  2A30               	incf	diet_press@count+1,f,c
  9615                           
  9616                           ;standbyMode.c: 1221: }
  9617  00E212  D799               	goto	l520
  9618  00E214                     l535:
  9619                           
  9620                           ;standbyMode.c: 1222: else if (keypress == 11){
  9621  00E214  0E0B               	movlw	11
  9622  00E216  1833               	xorwf	diet_press@keypress,w,c
  9623  00E218  A4D8               	btfss	status,2,c
  9624  00E21A  D795               	goto	l520
  9625                           
  9626                           ;standbyMode.c: 1223: putch(input[keypress]);
  9627  00E21C  5033               	movf	diet_press@keypress,w,c
  9628  00E21E  0D01               	mullw	1
  9629  00E220  0E34               	movlw	low _input
  9630  00E222  24F3               	addwf	prodl,w,c
  9631  00E224  6EF6               	movwf	tblptrl,c
  9632  00E226  0EFD               	movlw	high _input
  9633  00E228  20F4               	addwfc	prodh,w,c
  9634  00E22A  6EF7               	movwf	tblptrh,c
  9635  00E22C                     	if	0	;There are less than 3 active tblptr bytes
  9636  00E22C                     	endif
  9637  00E22C  0008               	tblrd		*
  9638  00E22E  50F5               	movf	tablat,w,c
  9639  00E230  ECEB  F063         	call	_putch
  9640                           
  9641                           ;standbyMode.c: 1224: dietTable[count] = keypress + 1;
  9642  00E234  5033               	movf	diet_press@keypress,w,c
  9643  00E236  6E27               	movwf	??_diet_press& (0+255),c
  9644  00E238  6A28               	clrf	(??_diet_press+1)& (0+255),c
  9645  00E23A  0E01               	movlw	1
  9646  00E23C  2627               	addwf	??_diet_press,f,c
  9647  00E23E  0E00               	movlw	0
  9648  00E240  2228               	addwfc	??_diet_press+1,f,c
  9649  00E242                     L105:
  9650  00E242  90D8               	bcf	status,0,c
  9651  00E244  342F               	rlcf	diet_press@count,w,c
  9652  00E246  6ED9               	movwf	fsr2l,c
  9653  00E248  3430               	rlcf	diet_press@count+1,w,c
  9654  00E24A  6EDA               	movwf	fsr2h,c
  9655  00E24C  0E34               	movlw	low diet_press@dietTable
  9656  00E24E  26D9               	addwf	fsr2l,f,c
  9657  00E250  0E00               	movlw	high diet_press@dietTable
  9658  00E252  22DA               	addwfc	fsr2h,f,c
  9659  00E254  C027  FFDE         	movff	??_diet_press,postinc2
  9660  00E258  C028  FFDD         	movff	??_diet_press+1,postdec2
  9661  00E25C  D7D8               	goto	l5726
  9662  00E25E                     l528:
  9663                           
  9664                           ;standbyMode.c: 1226: }
  9665                           ;standbyMode.c: 1227: }
  9666                           ;standbyMode.c: 1228: }
  9667                           ;standbyMode.c: 1230: if (backCheck == 1){
  9668  00E25E  042D               	decf	diet_press@backCheck,w,c
  9669  00E260  102E               	iorwf	diet_press@backCheck+1,w,c
  9670  00E262  A4D8               	btfss	status,2,c
  9671  00E264  D004               	goto	l541
  9672                           
  9673                           ;standbyMode.c: 1231: sum = 100;
  9674  00E266  0E00               	movlw	0
  9675  00E268  6E32               	movwf	diet_press@sum+1,c
  9676  00E26A  0E64               	movlw	100
  9677  00E26C  D199               	goto	L104
  9678  00E26E                     l541:
  9679                           
  9680                           ;standbyMode.c: 1235: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
  9681  00E26E  0E0C               	movlw	12
  9682  00E270  1834               	xorwf	diet_press@dietTable,w,c
  9683  00E272  1035               	iorwf	diet_press@dietTable+1,w,c
  9684  00E274  A4D8               	btfss	status,2,c
  9685  00E276  D010               	goto	l543
  9686  00E278  5036               	movf	diet_press@dietTable+2,w,c
  9687  00E27A  1037               	iorwf	diet_press@dietTable+3,w,c
  9688  00E27C  A4D8               	btfss	status,2,c
  9689  00E27E  D00C               	goto	l543
  9690  00E280  5038               	movf	diet_press@dietTable+4,w,c
  9691  00E282  1039               	iorwf	diet_press@dietTable+5,w,c
  9692  00E284  A4D8               	btfss	status,2,c
  9693  00E286  D008               	goto	l543
  9694  00E288  503A               	movf	diet_press@dietTable+6,w,c
  9695  00E28A  103B               	iorwf	diet_press@dietTable+7,w,c
  9696  00E28C  A4D8               	btfss	status,2,c
  9697  00E28E  D004               	goto	l543
  9698                           
  9699                           ;standbyMode.c: 1236: sum = 12;
  9700  00E290  0E00               	movlw	0
  9701  00E292  6E32               	movwf	diet_press@sum+1,c
  9702  00E294  0E0C               	movlw	12
  9703  00E296  D184               	goto	L104
  9704  00E298                     l543:
  9705                           
  9706                           ;standbyMode.c: 1240: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  9707  00E298  0E03               	movlw	3
  9708  00E29A  1834               	xorwf	diet_press@dietTable,w,c
  9709  00E29C  1035               	iorwf	diet_press@dietTable+1,w,c
  9710  00E29E  A4D8               	btfss	status,2,c
  9711  00E2A0  D010               	goto	l545
  9712  00E2A2  5036               	movf	diet_press@dietTable+2,w,c
  9713  00E2A4  1037               	iorwf	diet_press@dietTable+3,w,c
  9714  00E2A6  A4D8               	btfss	status,2,c
  9715  00E2A8  D00C               	goto	l545
  9716  00E2AA  5038               	movf	diet_press@dietTable+4,w,c
  9717  00E2AC  1039               	iorwf	diet_press@dietTable+5,w,c
  9718  00E2AE  A4D8               	btfss	status,2,c
  9719  00E2B0  D008               	goto	l545
  9720  00E2B2  503A               	movf	diet_press@dietTable+6,w,c
  9721  00E2B4  103B               	iorwf	diet_press@dietTable+7,w,c
  9722  00E2B6  A4D8               	btfss	status,2,c
  9723  00E2B8  D004               	goto	l545
  9724                           
  9725                           ;standbyMode.c: 1241: sum = 3;
  9726  00E2BA  0E00               	movlw	0
  9727  00E2BC  6E32               	movwf	diet_press@sum+1,c
  9728  00E2BE  0E03               	movlw	3
  9729  00E2C0  D16F               	goto	L104
  9730  00E2C2                     l545:
  9731                           
  9732                           ;standbyMode.c: 1245: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  9733  00E2C2  0E07               	movlw	7
  9734  00E2C4  1834               	xorwf	diet_press@dietTable,w,c
  9735  00E2C6  1035               	iorwf	diet_press@dietTable+1,w,c
  9736  00E2C8  A4D8               	btfss	status,2,c
  9737  00E2CA  D010               	goto	l547
  9738  00E2CC  5036               	movf	diet_press@dietTable+2,w,c
  9739  00E2CE  1037               	iorwf	diet_press@dietTable+3,w,c
  9740  00E2D0  A4D8               	btfss	status,2,c
  9741  00E2D2  D00C               	goto	l547
  9742  00E2D4  5038               	movf	diet_press@dietTable+4,w,c
  9743  00E2D6  1039               	iorwf	diet_press@dietTable+5,w,c
  9744  00E2D8  A4D8               	btfss	status,2,c
  9745  00E2DA  D008               	goto	l547
  9746  00E2DC  503A               	movf	diet_press@dietTable+6,w,c
  9747  00E2DE  103B               	iorwf	diet_press@dietTable+7,w,c
  9748  00E2E0  A4D8               	btfss	status,2,c
  9749  00E2E2  D004               	goto	l547
  9750                           
  9751                           ;standbyMode.c: 1246: sum = 7;
  9752  00E2E4  0E00               	movlw	0
  9753  00E2E6  6E32               	movwf	diet_press@sum+1,c
  9754  00E2E8  0E07               	movlw	7
  9755  00E2EA  D15A               	goto	L104
  9756  00E2EC                     l547:
  9757                           
  9758                           ;standbyMode.c: 1250: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  9759  00E2EC  0E03               	movlw	3
  9760  00E2EE  1834               	xorwf	diet_press@dietTable,w,c
  9761  00E2F0  1035               	iorwf	diet_press@dietTable+1,w,c
  9762  00E2F2  A4D8               	btfss	status,2,c
  9763  00E2F4  D011               	goto	l549
  9764  00E2F6  0E07               	movlw	7
  9765  00E2F8  1836               	xorwf	diet_press@dietTable+2,w,c
  9766  00E2FA  1037               	iorwf	diet_press@dietTable+3,w,c
  9767  00E2FC  A4D8               	btfss	status,2,c
  9768  00E2FE  D00C               	goto	l549
  9769  00E300  5038               	movf	diet_press@dietTable+4,w,c
  9770  00E302  1039               	iorwf	diet_press@dietTable+5,w,c
  9771  00E304  A4D8               	btfss	status,2,c
  9772  00E306  D008               	goto	l549
  9773  00E308  503A               	movf	diet_press@dietTable+6,w,c
  9774  00E30A  103B               	iorwf	diet_press@dietTable+7,w,c
  9775  00E30C  A4D8               	btfss	status,2,c
  9776  00E30E  D004               	goto	l549
  9777                           
  9778                           ;standbyMode.c: 1251: sum = 10;
  9779  00E310  0E00               	movlw	0
  9780  00E312  6E32               	movwf	diet_press@sum+1,c
  9781  00E314  0E0A               	movlw	10
  9782  00E316  D144               	goto	L104
  9783  00E318                     l549:
  9784                           
  9785                           ;standbyMode.c: 1255: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
  9786  00E318  0E03               	movlw	3
  9787  00E31A  1834               	xorwf	diet_press@dietTable,w,c
  9788  00E31C  1035               	iorwf	diet_press@dietTable+1,w,c
  9789  00E31E  A4D8               	btfss	status,2,c
  9790  00E320  D011               	goto	l551
  9791  00E322  0E0C               	movlw	12
  9792  00E324  1836               	xorwf	diet_press@dietTable+2,w,c
  9793  00E326  1037               	iorwf	diet_press@dietTable+3,w,c
  9794  00E328  A4D8               	btfss	status,2,c
  9795  00E32A  D00C               	goto	l551
  9796  00E32C  5038               	movf	diet_press@dietTable+4,w,c
  9797  00E32E  1039               	iorwf	diet_press@dietTable+5,w,c
  9798  00E330  A4D8               	btfss	status,2,c
  9799  00E332  D008               	goto	l551
  9800  00E334  503A               	movf	diet_press@dietTable+6,w,c
  9801  00E336  103B               	iorwf	diet_press@dietTable+7,w,c
  9802  00E338  A4D8               	btfss	status,2,c
  9803  00E33A  D004               	goto	l551
  9804                           
  9805                           ;standbyMode.c: 1256: sum = 15;
  9806  00E33C  0E00               	movlw	0
  9807  00E33E  6E32               	movwf	diet_press@sum+1,c
  9808  00E340  0E0F               	movlw	15
  9809  00E342  D12E               	goto	L104
  9810  00E344                     l551:
  9811                           
  9812                           ;standbyMode.c: 1260: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
  9813  00E344  0E07               	movlw	7
  9814  00E346  1834               	xorwf	diet_press@dietTable,w,c
  9815  00E348  1035               	iorwf	diet_press@dietTable+1,w,c
  9816  00E34A  A4D8               	btfss	status,2,c
  9817  00E34C  D011               	goto	l553
  9818  00E34E  0E0C               	movlw	12
  9819  00E350  1836               	xorwf	diet_press@dietTable+2,w,c
  9820  00E352  1037               	iorwf	diet_press@dietTable+3,w,c
  9821  00E354  A4D8               	btfss	status,2,c
  9822  00E356  D00C               	goto	l553
  9823  00E358  5038               	movf	diet_press@dietTable+4,w,c
  9824  00E35A  1039               	iorwf	diet_press@dietTable+5,w,c
  9825  00E35C  A4D8               	btfss	status,2,c
  9826  00E35E  D008               	goto	l553
  9827  00E360  503A               	movf	diet_press@dietTable+6,w,c
  9828  00E362  103B               	iorwf	diet_press@dietTable+7,w,c
  9829  00E364  A4D8               	btfss	status,2,c
  9830  00E366  D004               	goto	l553
  9831                           
  9832                           ;standbyMode.c: 1261: sum = 19;
  9833  00E368  0E00               	movlw	0
  9834  00E36A  6E32               	movwf	diet_press@sum+1,c
  9835  00E36C  0E13               	movlw	19
  9836  00E36E  D118               	goto	L104
  9837  00E370                     l553:
  9838                           
  9839                           ;standbyMode.c: 1265: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
  9840  00E370  0E03               	movlw	3
  9841  00E372  1834               	xorwf	diet_press@dietTable,w,c
  9842  00E374  1035               	iorwf	diet_press@dietTable+1,w,c
  9843  00E376  A4D8               	btfss	status,2,c
  9844  00E378  D012               	goto	l555
  9845  00E37A  0E03               	movlw	3
  9846  00E37C  1836               	xorwf	diet_press@dietTable+2,w,c
  9847  00E37E  1037               	iorwf	diet_press@dietTable+3,w,c
  9848  00E380  A4D8               	btfss	status,2,c
  9849  00E382  D00D               	goto	l555
  9850  00E384  0E07               	movlw	7
  9851  00E386  1838               	xorwf	diet_press@dietTable+4,w,c
  9852  00E388  1039               	iorwf	diet_press@dietTable+5,w,c
  9853  00E38A  A4D8               	btfss	status,2,c
  9854  00E38C  D008               	goto	l555
  9855  00E38E  503A               	movf	diet_press@dietTable+6,w,c
  9856  00E390  103B               	iorwf	diet_press@dietTable+7,w,c
  9857  00E392  A4D8               	btfss	status,2,c
  9858  00E394  D004               	goto	l555
  9859                           
  9860                           ;standbyMode.c: 1266: sum = 13;
  9861  00E396  0E00               	movlw	0
  9862  00E398  6E32               	movwf	diet_press@sum+1,c
  9863  00E39A  0E0D               	movlw	13
  9864  00E39C  D101               	goto	L104
  9865  00E39E                     l555:
  9866                           
  9867                           ;standbyMode.c: 1270: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  9868  00E39E  0E03               	movlw	3
  9869  00E3A0  1834               	xorwf	diet_press@dietTable,w,c
  9870  00E3A2  1035               	iorwf	diet_press@dietTable+1,w,c
  9871  00E3A4  A4D8               	btfss	status,2,c
  9872  00E3A6  D012               	goto	l557
  9873  00E3A8  0E03               	movlw	3
  9874  00E3AA  1836               	xorwf	diet_press@dietTable+2,w,c
  9875  00E3AC  1037               	iorwf	diet_press@dietTable+3,w,c
  9876  00E3AE  A4D8               	btfss	status,2,c
  9877  00E3B0  D00D               	goto	l557
  9878  00E3B2  0E0C               	movlw	12
  9879  00E3B4  1838               	xorwf	diet_press@dietTable+4,w,c
  9880  00E3B6  1039               	iorwf	diet_press@dietTable+5,w,c
  9881  00E3B8  A4D8               	btfss	status,2,c
  9882  00E3BA  D008               	goto	l557
  9883  00E3BC  503A               	movf	diet_press@dietTable+6,w,c
  9884  00E3BE  103B               	iorwf	diet_press@dietTable+7,w,c
  9885  00E3C0  A4D8               	btfss	status,2,c
  9886  00E3C2  D004               	goto	l557
  9887                           
  9888                           ;standbyMode.c: 1271: sum = 18;
  9889  00E3C4  0E00               	movlw	0
  9890  00E3C6  6E32               	movwf	diet_press@sum+1,c
  9891  00E3C8  0E12               	movlw	18
  9892  00E3CA  D0EA               	goto	L104
  9893  00E3CC                     l557:
  9894                           
  9895                           ;standbyMode.c: 1275: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
  9896  00E3CC  0E03               	movlw	3
  9897  00E3CE  1834               	xorwf	diet_press@dietTable,w,c
  9898  00E3D0  1035               	iorwf	diet_press@dietTable+1,w,c
  9899  00E3D2  A4D8               	btfss	status,2,c
  9900  00E3D4  D012               	goto	l559
  9901  00E3D6  0E07               	movlw	7
  9902  00E3D8  1836               	xorwf	diet_press@dietTable+2,w,c
  9903  00E3DA  1037               	iorwf	diet_press@dietTable+3,w,c
  9904  00E3DC  A4D8               	btfss	status,2,c
  9905  00E3DE  D00D               	goto	l559
  9906  00E3E0  0E07               	movlw	7
  9907  00E3E2  1838               	xorwf	diet_press@dietTable+4,w,c
  9908  00E3E4  1039               	iorwf	diet_press@dietTable+5,w,c
  9909  00E3E6  A4D8               	btfss	status,2,c
  9910  00E3E8  D008               	goto	l559
  9911  00E3EA  503A               	movf	diet_press@dietTable+6,w,c
  9912  00E3EC  103B               	iorwf	diet_press@dietTable+7,w,c
  9913  00E3EE  A4D8               	btfss	status,2,c
  9914  00E3F0  D004               	goto	l559
  9915                           
  9916                           ;standbyMode.c: 1276: sum = 17;
  9917  00E3F2  0E00               	movlw	0
  9918  00E3F4  6E32               	movwf	diet_press@sum+1,c
  9919  00E3F6  0E11               	movlw	17
  9920  00E3F8  D0D3               	goto	L104
  9921  00E3FA                     l559:
  9922                           
  9923                           ;standbyMode.c: 1280: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
  9924  00E3FA  0E03               	movlw	3
  9925  00E3FC  1834               	xorwf	diet_press@dietTable,w,c
  9926  00E3FE  1035               	iorwf	diet_press@dietTable+1,w,c
  9927  00E400  A4D8               	btfss	status,2,c
  9928  00E402  D012               	goto	l561
  9929  00E404  0E0C               	movlw	12
  9930  00E406  1836               	xorwf	diet_press@dietTable+2,w,c
  9931  00E408  1037               	iorwf	diet_press@dietTable+3,w,c
  9932  00E40A  A4D8               	btfss	status,2,c
  9933  00E40C  D00D               	goto	l561
  9934  00E40E  0E0C               	movlw	12
  9935  00E410  1838               	xorwf	diet_press@dietTable+4,w,c
  9936  00E412  1039               	iorwf	diet_press@dietTable+5,w,c
  9937  00E414  A4D8               	btfss	status,2,c
  9938  00E416  D008               	goto	l561
  9939  00E418  503A               	movf	diet_press@dietTable+6,w,c
  9940  00E41A  103B               	iorwf	diet_press@dietTable+7,w,c
  9941  00E41C  A4D8               	btfss	status,2,c
  9942  00E41E  D004               	goto	l561
  9943                           
  9944                           ;standbyMode.c: 1281: sum = 27;
  9945  00E420  0E00               	movlw	0
  9946  00E422  6E32               	movwf	diet_press@sum+1,c
  9947  00E424  0E1B               	movlw	27
  9948  00E426  D0BC               	goto	L104
  9949  00E428                     l561:
  9950                           
  9951                           ;standbyMode.c: 1285: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  9952  00E428  0E03               	movlw	3
  9953  00E42A  1834               	xorwf	diet_press@dietTable,w,c
  9954  00E42C  1035               	iorwf	diet_press@dietTable+1,w,c
  9955  00E42E  A4D8               	btfss	status,2,c
  9956  00E430  D012               	goto	l563
  9957  00E432  0E07               	movlw	7
  9958  00E434  1836               	xorwf	diet_press@dietTable+2,w,c
  9959  00E436  1037               	iorwf	diet_press@dietTable+3,w,c
  9960  00E438  A4D8               	btfss	status,2,c
  9961  00E43A  D00D               	goto	l563
  9962  00E43C  0E0C               	movlw	12
  9963  00E43E  1838               	xorwf	diet_press@dietTable+4,w,c
  9964  00E440  1039               	iorwf	diet_press@dietTable+5,w,c
  9965  00E442  A4D8               	btfss	status,2,c
  9966  00E444  D008               	goto	l563
  9967  00E446  503A               	movf	diet_press@dietTable+6,w,c
  9968  00E448  103B               	iorwf	diet_press@dietTable+7,w,c
  9969  00E44A  A4D8               	btfss	status,2,c
  9970  00E44C  D004               	goto	l563
  9971                           
  9972                           ;standbyMode.c: 1286: sum = 22;
  9973  00E44E  0E00               	movlw	0
  9974  00E450  6E32               	movwf	diet_press@sum+1,c
  9975  00E452  0E16               	movlw	22
  9976  00E454  D0A5               	goto	L104
  9977  00E456                     l563:
  9978                           
  9979                           ;standbyMode.c: 1290: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  9980  00E456  0E07               	movlw	7
  9981  00E458  1834               	xorwf	diet_press@dietTable,w,c
  9982  00E45A  1035               	iorwf	diet_press@dietTable+1,w,c
  9983  00E45C  A4D8               	btfss	status,2,c
  9984  00E45E  D012               	goto	l565
  9985  00E460  0E07               	movlw	7
  9986  00E462  1836               	xorwf	diet_press@dietTable+2,w,c
  9987  00E464  1037               	iorwf	diet_press@dietTable+3,w,c
  9988  00E466  A4D8               	btfss	status,2,c
  9989  00E468  D00D               	goto	l565
  9990  00E46A  0E0C               	movlw	12
  9991  00E46C  1838               	xorwf	diet_press@dietTable+4,w,c
  9992  00E46E  1039               	iorwf	diet_press@dietTable+5,w,c
  9993  00E470  A4D8               	btfss	status,2,c
  9994  00E472  D008               	goto	l565
  9995  00E474  503A               	movf	diet_press@dietTable+6,w,c
  9996  00E476  103B               	iorwf	diet_press@dietTable+7,w,c
  9997  00E478  A4D8               	btfss	status,2,c
  9998  00E47A  D004               	goto	l565
  9999                           
 10000                           ;standbyMode.c: 1291: sum = 26;
 10001  00E47C  0E00               	movlw	0
 10002  00E47E  6E32               	movwf	diet_press@sum+1,c
 10003  00E480  0E1A               	movlw	26
 10004  00E482  D08E               	goto	L104
 10005  00E484                     l565:
 10006                           
 10007                           ;standbyMode.c: 1295: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10008  00E484  0E07               	movlw	7
 10009  00E486  1834               	xorwf	diet_press@dietTable,w,c
 10010  00E488  1035               	iorwf	diet_press@dietTable+1,w,c
 10011  00E48A  A4D8               	btfss	status,2,c
 10012  00E48C  D012               	goto	l567
 10013  00E48E  0E0C               	movlw	12
 10014  00E490  1836               	xorwf	diet_press@dietTable+2,w,c
 10015  00E492  1037               	iorwf	diet_press@dietTable+3,w,c
 10016  00E494  A4D8               	btfss	status,2,c
 10017  00E496  D00D               	goto	l567
 10018  00E498  0E0C               	movlw	12
 10019  00E49A  1838               	xorwf	diet_press@dietTable+4,w,c
 10020  00E49C  1039               	iorwf	diet_press@dietTable+5,w,c
 10021  00E49E  A4D8               	btfss	status,2,c
 10022  00E4A0  D008               	goto	l567
 10023  00E4A2  503A               	movf	diet_press@dietTable+6,w,c
 10024  00E4A4  103B               	iorwf	diet_press@dietTable+7,w,c
 10025  00E4A6  A4D8               	btfss	status,2,c
 10026  00E4A8  D004               	goto	l567
 10027                           
 10028                           ;standbyMode.c: 1296: sum = 31;
 10029  00E4AA  0E00               	movlw	0
 10030  00E4AC  6E32               	movwf	diet_press@sum+1,c
 10031  00E4AE  0E1F               	movlw	31
 10032  00E4B0  D077               	goto	L104
 10033  00E4B2                     l567:
 10034                           
 10035                           ;standbyMode.c: 1300: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10036  00E4B2  0E03               	movlw	3
 10037  00E4B4  1834               	xorwf	diet_press@dietTable,w,c
 10038  00E4B6  1035               	iorwf	diet_press@dietTable+1,w,c
 10039  00E4B8  A4D8               	btfss	status,2,c
 10040  00E4BA  D013               	goto	l569
 10041  00E4BC  0E03               	movlw	3
 10042  00E4BE  1836               	xorwf	diet_press@dietTable+2,w,c
 10043  00E4C0  1037               	iorwf	diet_press@dietTable+3,w,c
 10044  00E4C2  A4D8               	btfss	status,2,c
 10045  00E4C4  D00E               	goto	l569
 10046  00E4C6  0E07               	movlw	7
 10047  00E4C8  1838               	xorwf	diet_press@dietTable+4,w,c
 10048  00E4CA  1039               	iorwf	diet_press@dietTable+5,w,c
 10049  00E4CC  A4D8               	btfss	status,2,c
 10050  00E4CE  D009               	goto	l569
 10051  00E4D0  0E0C               	movlw	12
 10052  00E4D2  183A               	xorwf	diet_press@dietTable+6,w,c
 10053  00E4D4  103B               	iorwf	diet_press@dietTable+7,w,c
 10054  00E4D6  A4D8               	btfss	status,2,c
 10055  00E4D8  D004               	goto	l569
 10056                           
 10057                           ;standbyMode.c: 1301: sum = 25;
 10058  00E4DA  0E00               	movlw	0
 10059  00E4DC  6E32               	movwf	diet_press@sum+1,c
 10060  00E4DE  0E19               	movlw	25
 10061  00E4E0  D05F               	goto	L104
 10062  00E4E2                     l569:
 10063                           
 10064                           ;standbyMode.c: 1305: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10065  00E4E2  0E03               	movlw	3
 10066  00E4E4  1834               	xorwf	diet_press@dietTable,w,c
 10067  00E4E6  1035               	iorwf	diet_press@dietTable+1,w,c
 10068  00E4E8  A4D8               	btfss	status,2,c
 10069  00E4EA  D013               	goto	l571
 10070  00E4EC  0E07               	movlw	7
 10071  00E4EE  1836               	xorwf	diet_press@dietTable+2,w,c
 10072  00E4F0  1037               	iorwf	diet_press@dietTable+3,w,c
 10073  00E4F2  A4D8               	btfss	status,2,c
 10074  00E4F4  D00E               	goto	l571
 10075  00E4F6  0E07               	movlw	7
 10076  00E4F8  1838               	xorwf	diet_press@dietTable+4,w,c
 10077  00E4FA  1039               	iorwf	diet_press@dietTable+5,w,c
 10078  00E4FC  A4D8               	btfss	status,2,c
 10079  00E4FE  D009               	goto	l571
 10080  00E500  0E0C               	movlw	12
 10081  00E502  183A               	xorwf	diet_press@dietTable+6,w,c
 10082  00E504  103B               	iorwf	diet_press@dietTable+7,w,c
 10083  00E506  A4D8               	btfss	status,2,c
 10084  00E508  D004               	goto	l571
 10085                           
 10086                           ;standbyMode.c: 1306: sum = 29;
 10087  00E50A  0E00               	movlw	0
 10088  00E50C  6E32               	movwf	diet_press@sum+1,c
 10089  00E50E  0E1D               	movlw	29
 10090  00E510  D047               	goto	L104
 10091  00E512                     l571:
 10092                           
 10093                           ;standbyMode.c: 1310: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 10094  00E512  0E03               	movlw	3
 10095  00E514  1834               	xorwf	diet_press@dietTable,w,c
 10096  00E516  1035               	iorwf	diet_press@dietTable+1,w,c
 10097  00E518  A4D8               	btfss	status,2,c
 10098  00E51A  D013               	goto	l573
 10099  00E51C  0E07               	movlw	7
 10100  00E51E  1836               	xorwf	diet_press@dietTable+2,w,c
 10101  00E520  1037               	iorwf	diet_press@dietTable+3,w,c
 10102  00E522  A4D8               	btfss	status,2,c
 10103  00E524  D00E               	goto	l573
 10104  00E526  0E0C               	movlw	12
 10105  00E528  1838               	xorwf	diet_press@dietTable+4,w,c
 10106  00E52A  1039               	iorwf	diet_press@dietTable+5,w,c
 10107  00E52C  A4D8               	btfss	status,2,c
 10108  00E52E  D009               	goto	l573
 10109  00E530  0E0C               	movlw	12
 10110  00E532  183A               	xorwf	diet_press@dietTable+6,w,c
 10111  00E534  103B               	iorwf	diet_press@dietTable+7,w,c
 10112  00E536  A4D8               	btfss	status,2,c
 10113  00E538  D004               	goto	l573
 10114                           
 10115                           ;standbyMode.c: 1311: sum = 34;
 10116  00E53A  0E00               	movlw	0
 10117  00E53C  6E32               	movwf	diet_press@sum+1,c
 10118  00E53E  0E22               	movlw	34
 10119  00E540  D02F               	goto	L104
 10120  00E542                     l573:
 10121                           
 10122                           ;standbyMode.c: 1315: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 10123  00E542  0E03               	movlw	3
 10124  00E544  1834               	xorwf	diet_press@dietTable,w,c
 10125  00E546  1035               	iorwf	diet_press@dietTable+1,w,c
 10126  00E548  A4D8               	btfss	status,2,c
 10127  00E54A  D013               	goto	l575
 10128  00E54C  0E0C               	movlw	12
 10129  00E54E  1836               	xorwf	diet_press@dietTable+2,w,c
 10130  00E550  1037               	iorwf	diet_press@dietTable+3,w,c
 10131  00E552  A4D8               	btfss	status,2,c
 10132  00E554  D00E               	goto	l575
 10133  00E556  0E0C               	movlw	12
 10134  00E558  1838               	xorwf	diet_press@dietTable+4,w,c
 10135  00E55A  1039               	iorwf	diet_press@dietTable+5,w,c
 10136  00E55C  A4D8               	btfss	status,2,c
 10137  00E55E  D009               	goto	l575
 10138  00E560  0E0C               	movlw	12
 10139  00E562  183A               	xorwf	diet_press@dietTable+6,w,c
 10140  00E564  103B               	iorwf	diet_press@dietTable+7,w,c
 10141  00E566  A4D8               	btfss	status,2,c
 10142  00E568  D004               	goto	l575
 10143                           
 10144                           ;standbyMode.c: 1316: sum = 39;
 10145  00E56A  0E00               	movlw	0
 10146  00E56C  6E32               	movwf	diet_press@sum+1,c
 10147  00E56E  0E27               	movlw	39
 10148  00E570  D017               	goto	L104
 10149  00E572                     l575:
 10150                           
 10151                           ;standbyMode.c: 1320: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 10152  00E572  0E07               	movlw	7
 10153  00E574  1834               	xorwf	diet_press@dietTable,w,c
 10154  00E576  1035               	iorwf	diet_press@dietTable+1,w,c
 10155  00E578  A4D8               	btfss	status,2,c
 10156  00E57A  D014               	goto	l577
 10157  00E57C  0E0C               	movlw	12
 10158  00E57E  1836               	xorwf	diet_press@dietTable+2,w,c
 10159  00E580  1037               	iorwf	diet_press@dietTable+3,w,c
 10160  00E582  A4D8               	btfss	status,2,c
 10161  00E584  D00F               	goto	l577
 10162  00E586  0E0C               	movlw	12
 10163  00E588  1838               	xorwf	diet_press@dietTable+4,w,c
 10164  00E58A  1039               	iorwf	diet_press@dietTable+5,w,c
 10165  00E58C  A4D8               	btfss	status,2,c
 10166  00E58E  D00A               	goto	l577
 10167  00E590  0E0C               	movlw	12
 10168  00E592  183A               	xorwf	diet_press@dietTable+6,w,c
 10169  00E594  103B               	iorwf	diet_press@dietTable+7,w,c
 10170  00E596  A4D8               	btfss	status,2,c
 10171  00E598  D005               	goto	l577
 10172                           
 10173                           ;standbyMode.c: 1321: sum = 43;
 10174  00E59A  0E00               	movlw	0
 10175  00E59C  6E32               	movwf	diet_press@sum+1,c
 10176  00E59E  0E2B               	movlw	43
 10177  00E5A0                     L104:
 10178  00E5A0  6E31               	movwf	diet_press@sum,c
 10179                           
 10180                           ;standbyMode.c: 1322: }
 10181  00E5A2  D02A               	goto	l578
 10182  00E5A4                     l577:
 10183                           
 10184                           ;standbyMode.c: 1325: else{
 10185                           ;standbyMode.c: 1326: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10186  00E5A4  0E01               	movlw	1
 10187  00E5A6  ECE1  F063         	call	_lcdInst
 10188  00E5AA  0EC3               	movlw	195
 10189  00E5AC  6E27               	movwf	??_diet_press& (0+255),c
 10190  00E5AE  0ECD               	movlw	205
 10191  00E5B0                     u8577:
 10192  00E5B0  2EE8               	decfsz	wreg,f,c
 10193  00E5B2  D7FE               	bra	u8577
 10194  00E5B4  2E27               	decfsz	??_diet_press& (0+255),f,c
 10195  00E5B6  D7FC               	bra	u8577
 10196  00E5B8  F000               	nop	
 10197                           
 10198                           ;standbyMode.c: 1327: printf("Invalid diet!");
 10199  00E5BA  0E12               	movlw	low STR_37
 10200  00E5BC  6E0D               	movwf	printf@f,c
 10201  00E5BE  0EFF               	movlw	high STR_37
 10202  00E5C0  6E0E               	movwf	printf@f+1,c
 10203  00E5C2  ECC5  F06C         	call	_printf	;wreg free
 10204                           
 10205                           ;standbyMode.c: 1328: lcdInst(0xC0);;
 10206  00E5C6  0EC0               	movlw	192
 10207  00E5C8  ECE1  F063         	call	_lcdInst
 10208                           
 10209                           ;standbyMode.c: 1329: printf("Try again.");
 10210  00E5CC  0E9E               	movlw	low STR_34
 10211  00E5CE  6E0D               	movwf	printf@f,c
 10212  00E5D0  0EFF               	movlw	high STR_34
 10213  00E5D2  6E0E               	movwf	printf@f+1,c
 10214  00E5D4  ECC5  F06C         	call	_printf	;wreg free
 10215                           
 10216                           ;standbyMode.c: 1330: _delay((unsigned long)((1000)*(40000000/4000.0)));
 10217  00E5D8  0E33               	movlw	51
 10218  00E5DA  6E28               	movwf	(??_diet_press+1)& (0+255),c
 10219  00E5DC  0EBB               	movlw	187
 10220  00E5DE  6E27               	movwf	??_diet_press& (0+255),c
 10221  00E5E0  0EE0               	movlw	224
 10222  00E5E2                     u8587:
 10223  00E5E2  2EE8               	decfsz	wreg,f,c
 10224  00E5E4  D7FE               	bra	u8587
 10225  00E5E6  2E27               	decfsz	??_diet_press& (0+255),f,c
 10226  00E5E8  D7FC               	bra	u8587
 10227  00E5EA  2E28               	decfsz	(??_diet_press+1)& (0+255),f,c
 10228  00E5EC  D7FA               	bra	u8587
 10229                           
 10230                           ;standbyMode.c: 1331: sum = 0;
 10231  00E5EE  0E00               	movlw	0
 10232  00E5F0  6E32               	movwf	diet_press@sum+1,c
 10233  00E5F2  0E00               	movlw	0
 10234  00E5F4  6E31               	movwf	diet_press@sum,c
 10235                           
 10236                           ;standbyMode.c: 1332: goto START;
 10237  00E5F6  D572               	goto	_diet_press
 10238  00E5F8                     l578:
 10239                           
 10240                           ;standbyMode.c: 1333: }
 10241                           ;standbyMode.c: 1334: return sum;
 10242  00E5F8  C031  F025         	movff	diet_press@sum,?_diet_press
 10243  00E5FC  C032  F026         	movff	diet_press@sum+1,?_diet_press+1
 10244  00E600  0012               	return		;funcret
 10245  00E602                     __end_of_diet_press:
 10246                           	opt stack 0
 10247                           tblptru	equ	0xFF8
 10248                           tblptrh	equ	0xFF7
 10249                           tblptrl	equ	0xFF6
 10250                           tablat	equ	0xFF5
 10251                           prodh	equ	0xFF4
 10252                           prodl	equ	0xFF3
 10253                           intcon	equ	0xFF2
 10254                           postinc0	equ	0xFEE
 10255                           wreg	equ	0xFE8
 10256                           postdec1	equ	0xFE5
 10257                           plusw1	equ	0xFE3
 10258                           fsr1l	equ	0xFE1
 10259                           indf2	equ	0xFDF
 10260                           postinc2	equ	0xFDE
 10261                           postdec2	equ	0xFDD
 10262                           plusw2	equ	0xFDB
 10263                           fsr2h	equ	0xFDA
 10264                           fsr2l	equ	0xFD9
 10265                           status	equ	0xFD8
 10266                           
 10267 ;; *************** function _printf *****************
 10268 ;; Defined at:
 10269 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10272 ;;		 -> STR_70(11), STR_69(13), STR_68(11), STR_67(13), 
 10273 ;;		 -> STR_66(11), STR_65(8), STR_64(15), STR_63(16), 
 10274 ;;		 -> STR_62(10), STR_61(8), STR_60(15), STR_59(16), 
 10275 ;;		 -> STR_58(10), STR_57(16), STR_56(16), STR_55(17), 
 10276 ;;		 -> STR_54(13), STR_53(17), STR_52(14), STR_51(11), 
 10277 ;;		 -> STR_50(11), STR_49(15), STR_48(15), STR_47(10), 
 10278 ;;		 -> STR_46(13), STR_45(16), STR_44(16), STR_43(17), 
 10279 ;;		 -> STR_42(17), STR_41(8), STR_40(15), STR_39(15), 
 10280 ;;		 -> STR_38(11), STR_37(14), STR_36(16), STR_35(16), 
 10281 ;;		 -> STR_34(11), STR_33(14), STR_32(16), STR_31(16), 
 10282 ;;		 -> STR_30(16), STR_29(13), STR_28(13), STR_27(15), 
 10283 ;;		 -> STR_26(15), STR_25(17), STR_24(18), STR_23(15), 
 10284 ;;		 -> STR_22(11), STR_21(7), STR_20(3), STR_19(16), 
 10285 ;;		 -> STR_18(8), STR_17(16), STR_16(15), STR_15(6), 
 10286 ;;		 -> STR_14(14), STR_13(17), STR_12(7), STR_11(9), 
 10287 ;;		 -> STR_10(17), STR_9(11), STR_8(17), STR_7(14), 
 10288 ;;		 -> STR_6(17), STR_5(11), STR_4(15), STR_3(11), 
 10289 ;;		 -> STR_2(8), STR_1(8), 
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;  idx             1   26[COMRAM] unsigned char 
 10292 ;;  tmpval          4    0        struct .
 10293 ;;  cp              3    0        PTR const unsigned char 
 10294 ;;  width           2   33[COMRAM] int 
 10295 ;;  val             2   30[COMRAM] unsigned int 
 10296 ;;  ap              2   27[COMRAM] PTR void [1]
 10297 ;;		 -> ?_printf(2), 
 10298 ;;  len             2    0        unsigned int 
 10299 ;;  c               1   35[COMRAM] char 
 10300 ;;  flag            1   32[COMRAM] unsigned char 
 10301 ;;  prec            1   29[COMRAM] char 
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  2   12[COMRAM] int 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10311 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;Total ram usage:       24 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    2
 10318 ;; This function calls:
 10319 ;;		___lwdiv
 10320 ;;		___lwmod
 10321 ;;		___wmul
 10322 ;;		_isdigit
 10323 ;;		_putch
 10324 ;; This function is called by:
 10325 ;;		_main
 10326 ;;		_viewLogs
 10327 ;;		_displayLogs
 10328 ;;		_food_press
 10329 ;;		_diet_press
 10330 ;;		_which_drawer
 10331 ;;		_standbyMode
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           	psect	text18
 10336  00D98A                     __ptext18:
 10337                           	opt stack 0
 10338  00D98A                     _printf:
 10339                           	opt stack 26
 10340                           
 10341                           ;doprnt.c: 466: va_list ap;
 10342                           ;doprnt.c: 499: signed char c;
 10343                           ;doprnt.c: 501: int width;
 10344                           ;doprnt.c: 506: signed char prec;
 10345                           ;doprnt.c: 508: unsigned char flag;
 10346                           ;doprnt.c: 523: union {
 10347                           ;doprnt.c: 524: unsigned long vd;
 10348                           ;doprnt.c: 525: double integ;
 10349                           ;doprnt.c: 526: } tmpval;
 10350                           ;doprnt.c: 528: unsigned int val;
 10351                           ;doprnt.c: 529: unsigned len;
 10352                           ;doprnt.c: 530: const char * cp;
 10353                           ;doprnt.c: 533: *ap = __va_start();
 10354                           
 10355                           ;incstack = 0
 10356  00D98A  0E0F               	movlw	low (?_printf+2)
 10357  00D98C  6E1C               	movwf	printf@ap,c
 10358  00D98E  0E00               	movlw	high (?_printf+2)
 10359  00D990  6E1D               	movwf	printf@ap+1,c
 10360                           
 10361                           ;doprnt.c: 536: while(c = *f++) {
 10362  00D992  D174               	goto	u4320
 10363  00D994                     
 10364                           ;doprnt.c: 538: if(c != '%')
 10365  00D994  0E25               	movlw	37
 10366  00D996  1824               	xorwf	printf@c,w,c
 10367  00D998  B4D8               	btfsc	status,2,c
 10368  00D99A  D004               	goto	l951
 10369                           
 10370                           ;doprnt.c: 540: {
 10371                           ;doprnt.c: 541: (putch(c) );
 10372  00D99C  5024               	movf	printf@c,w,c
 10373  00D99E  ECEB  F063         	call	_putch
 10374                           
 10375                           ;doprnt.c: 542: continue;
 10376  00D9A2  D16C               	goto	u4320
 10377  00D9A4                     l951:
 10378                           
 10379                           ;doprnt.c: 543: }
 10380                           ;doprnt.c: 546: width = 0;
 10381  00D9A4  0E00               	movlw	0
 10382  00D9A6  6E23               	movwf	printf@width+1,c
 10383  00D9A8  0E00               	movlw	0
 10384  00D9AA  6E22               	movwf	printf@width,c
 10385                           
 10386                           ;doprnt.c: 548: flag = 0;
 10387  00D9AC  0E00               	movlw	0
 10388  00D9AE  6E21               	movwf	printf@flag,c
 10389                           
 10390                           ;doprnt.c: 551: switch(*f) {
 10391                           
 10392                           ;doprnt.c: 550: for(;;) {
 10393  00D9B0  D003               	goto	l953
 10394  00D9B2                     
 10395                           ;doprnt.c: 580: flag |= 0x04;
 10396  00D9B2  8421               	bsf	printf@flag,2,c
 10397                           
 10398                           ;doprnt.c: 581: f++;
 10399  00D9B4  4A0D               	infsnz	printf@f,f,c
 10400  00D9B6  2A0E               	incf	printf@f+1,f,c
 10401  00D9B8                     l953:
 10402  00D9B8  C00D  FFF6         	movff	printf@f,tblptrl
 10403  00D9BC  C00E  FFF7         	movff	printf@f+1,tblptrh
 10404  00D9C0                     	if	0	;tblptru may be non-zero
 10405  00D9C0                     	endif
 10406  00D9C0                     	if	0	;tblptru may be non-zero
 10407  00D9C0                     	endif
 10408  00D9C0  0008               	tblrd		*
 10409  00D9C2  50F5               	movf	tablat,w,c
 10410                           
 10411                           ; Switch size 1, requested type "space"
 10412                           ; Number of cases is 1, Range of values is 48 to 48
 10413                           ; switch strategies available:
 10414                           ; Name         Instructions Cycles
 10415                           ; simple_byte            4     3 (average)
 10416                           ;	Chosen strategy is simple_byte
 10417  00D9C4  0A30               	xorlw	48	; case 48
 10418  00D9C6  B4D8               	btfsc	status,2,c
 10419  00D9C8  D7F4               	goto	l954
 10420                           
 10421                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10422                           
 10423                           ;doprnt.c: 586: }
 10424                           
 10425                           ;doprnt.c: 585: break;
 10426  00D9CA  C00D  FFF6         	movff	printf@f,tblptrl
 10427  00D9CE  C00E  FFF7         	movff	printf@f+1,tblptrh
 10428  00D9D2                     	if	0	;tblptru may be non-zero
 10429  00D9D2                     	endif
 10430  00D9D2                     	if	0	;tblptru may be non-zero
 10431  00D9D2                     	endif
 10432  00D9D2  0008               	tblrd		*
 10433  00D9D4  50F5               	movf	tablat,w,c
 10434  00D9D6  EC0A  F064         	call	_isdigit
 10435  00D9DA  A0D8               	btfss	status,0,c
 10436  00D9DC  D035               	goto	l961
 10437                           
 10438                           ;doprnt.c: 598: width = 0;
 10439  00D9DE  0E00               	movlw	0
 10440  00D9E0  6E23               	movwf	printf@width+1,c
 10441  00D9E2  0E00               	movlw	0
 10442  00D9E4  6E22               	movwf	printf@width,c
 10443  00D9E6                     
 10444                           ;doprnt.c: 600: width *= 10;
 10445  00D9E6  C022  F001         	movff	printf@width,___wmul@multiplier
 10446  00D9EA  C023  F002         	movff	printf@width+1,___wmul@multiplier+1
 10447  00D9EE  0E00               	movlw	0
 10448  00D9F0  6E04               	movwf	___wmul@multiplicand+1,c
 10449  00D9F2  0E0A               	movlw	10
 10450  00D9F4  6E03               	movwf	___wmul@multiplicand,c
 10451  00D9F6  EC2B  F064         	call	___wmul	;wreg free
 10452  00D9FA  C001  F022         	movff	?___wmul,printf@width
 10453  00D9FE  C002  F023         	movff	?___wmul+1,printf@width+1
 10454                           
 10455                           ;doprnt.c: 601: width += *f++ - '0';
 10456  00DA02  0ED0               	movlw	208
 10457  00DA04  6E17               	movwf	??_printf& (0+255),c
 10458  00DA06  0EFF               	movlw	255
 10459  00DA08  6E18               	movwf	(??_printf+1)& (0+255),c
 10460  00DA0A  C00D  FFF6         	movff	printf@f,tblptrl
 10461  00DA0E  C00E  FFF7         	movff	printf@f+1,tblptrh
 10462  00DA12                     	if	0	;tblptru may be non-zero
 10463  00DA12                     	endif
 10464  00DA12                     	if	0	;tblptru may be non-zero
 10465  00DA12                     	endif
 10466  00DA12  0008               	tblrd		*
 10467  00DA14  50F5               	movf	tablat,w,c
 10468  00DA16  6E19               	movwf	(??_printf+2)& (0+255),c
 10469  00DA18  6A1A               	clrf	(??_printf+3)& (0+255),c
 10470  00DA1A  5017               	movf	??_printf,w,c
 10471  00DA1C  2619               	addwf	??_printf+2,f,c
 10472  00DA1E  5018               	movf	??_printf+1,w,c
 10473  00DA20  221A               	addwfc	??_printf+3,f,c
 10474  00DA22  5019               	movf	??_printf+2,w,c
 10475  00DA24  2622               	addwf	printf@width,f,c
 10476  00DA26  501A               	movf	??_printf+3,w,c
 10477  00DA28  2223               	addwfc	printf@width+1,f,c
 10478  00DA2A  4A0D               	infsnz	printf@f,f,c
 10479  00DA2C  2A0E               	incf	printf@f+1,f,c
 10480                           
 10481                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10482  00DA2E  C00D  FFF6         	movff	printf@f,tblptrl
 10483  00DA32  C00E  FFF7         	movff	printf@f+1,tblptrh
 10484  00DA36                     	if	0	;tblptru may be non-zero
 10485  00DA36                     	endif
 10486  00DA36                     	if	0	;tblptru may be non-zero
 10487  00DA36                     	endif
 10488  00DA36  0008               	tblrd		*
 10489  00DA38  50F5               	movf	tablat,w,c
 10490  00DA3A  EC0A  F064         	call	_isdigit
 10491  00DA3E  A0D8               	btfss	status,0,c
 10492  00DA40  D003               	goto	l961
 10493  00DA42  D7D1               	goto	l959
 10494  00DA44                     
 10495                           ;doprnt.c: 721: flag |= 0x80;
 10496  00DA44  8E21               	bsf	printf@flag,7,c
 10497                           
 10498                           ;doprnt.c: 723: break;
 10499  00DA46  D017               	goto	l966
 10500  00DA48                     l961:
 10501  00DA48  C00D  FFF6         	movff	printf@f,tblptrl
 10502  00DA4C  C00E  FFF7         	movff	printf@f+1,tblptrh
 10503  00DA50  4A0D               	infsnz	printf@f,f,c
 10504  00DA52  2A0E               	incf	printf@f+1,f,c
 10505  00DA54                     	if	0	;tblptru may be non-zero
 10506  00DA54                     	endif
 10507  00DA54                     	if	0	;tblptru may be non-zero
 10508  00DA54                     	endif
 10509  00DA54  0008               	tblrd		*
 10510  00DA56  CFF5 F024          	movff	tablat,printf@c
 10511  00DA5A  5024               	movf	printf@c,w,c
 10512                           
 10513                           ; Switch size 1, requested type "space"
 10514                           ; Number of cases is 4, Range of values is 0 to 120
 10515                           ; switch strategies available:
 10516                           ; Name         Instructions Cycles
 10517                           ; simple_byte           13     7 (average)
 10518                           ;	Chosen strategy is simple_byte
 10519  00DA5C  0A00               	xorlw	0	; case 0
 10520  00DA5E  B4D8               	btfsc	status,2,c
 10521  00DA60  0012               	return	
 10522  00DA62  0A64               	xorlw	100	; case 100
 10523  00DA64  B4D8               	btfsc	status,2,c
 10524  00DA66  D007               	goto	l966
 10525  00DA68  0A0D               	xorlw	13	; case 105
 10526  00DA6A  B4D8               	btfsc	status,2,c
 10527  00DA6C  D004               	goto	l966
 10528  00DA6E  0A11               	xorlw	17	; case 120
 10529  00DA70  B4D8               	btfsc	status,2,c
 10530  00DA72  D7E8               	goto	l967
 10531  00DA74  D103               	goto	u4320
 10532  00DA76                     l966:
 10533                           
 10534                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10535  00DA76  BE21               	btfsc	printf@flag,7,c
 10536  00DA78  D015               	goto	l969
 10537                           
 10538                           ;doprnt.c: 1253: {
 10539                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10540  00DA7A  C01C  FFD9         	movff	printf@ap,fsr2l
 10541  00DA7E  C01D  FFDA         	movff	printf@ap+1,fsr2h
 10542  00DA82  CFDE F01F          	movff	postinc2,printf@val
 10543  00DA86  CFDD F020          	movff	postdec2,printf@val+1
 10544  00DA8A  0E02               	movlw	2
 10545  00DA8C  261C               	addwf	printf@ap,f,c
 10546  00DA8E  0E00               	movlw	0
 10547  00DA90  221D               	addwfc	printf@ap+1,f,c
 10548                           
 10549                           ;doprnt.c: 1261: if((int)val < 0) {
 10550  00DA92  AE20               	btfss	printf@val+1,7,c
 10551  00DA94  D044               	goto	l972
 10552                           
 10553                           ;doprnt.c: 1262: flag |= 0x03;
 10554  00DA96  0E03               	movlw	3
 10555  00DA98  1221               	iorwf	printf@flag,f,c
 10556                           
 10557                           ;doprnt.c: 1263: val = -val;
 10558  00DA9A  6C1F               	negf	printf@val,c
 10559  00DA9C  1E20               	comf	printf@val+1,f,c
 10560  00DA9E  B0D8               	btfsc	status,0,c
 10561  00DAA0  2A20               	incf	printf@val+1,f,c
 10562                           
 10563                           ;doprnt.c: 1264: }
 10564                           ;doprnt.c: 1266: }
 10565  00DAA2  D03D               	goto	l972
 10566  00DAA4                     l969:
 10567                           
 10568                           ;doprnt.c: 1268: else
 10569                           ;doprnt.c: 1273: {
 10570                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10571  00DAA4  C01C  FFD9         	movff	printf@ap,fsr2l
 10572  00DAA8  C01D  FFDA         	movff	printf@ap+1,fsr2h
 10573  00DAAC  CFDE F01F          	movff	postinc2,printf@val
 10574  00DAB0  CFDD F020          	movff	postdec2,printf@val+1
 10575  00DAB4  0E02               	movlw	2
 10576  00DAB6  261C               	addwf	printf@ap,f,c
 10577  00DAB8  0E00               	movlw	0
 10578  00DABA  221D               	addwfc	printf@ap+1,f,c
 10579                           
 10580                           ;doprnt.c: 1287: }
 10581                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10582  00DABC  D030               	goto	l972
 10583  00DABE                     
 10584                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10585  00DABE  0E01               	movlw	1
 10586  00DAC0  6E24               	movwf	printf@c,c
 10587  00DAC2                     l4472:
 10588  00DAC2  0E05               	movlw	5
 10589  00DAC4  1824               	xorwf	printf@c,w,c
 10590  00DAC6  B4D8               	btfsc	status,2,c
 10591  00DAC8  D032               	goto	l977
 10592                           
 10593                           ;doprnt.c: 1306: if(val < dpowers[c])
 10594  00DACA  5024               	movf	printf@c,w,c
 10595  00DACC  0D02               	mullw	2
 10596  00DACE  0E45               	movlw	low _dpowers
 10597  00DAD0  24F3               	addwf	prodl,w,c
 10598  00DAD2  6EF6               	movwf	tblptrl,c
 10599  00DAD4  0EFD               	movlw	high _dpowers
 10600  00DAD6  20F4               	addwfc	prodh,w,c
 10601  00DAD8  6EF7               	movwf	tblptrh,c
 10602  00DADA                     	if	0	;There are less than 3 active tblptr bytes
 10603  00DADA                     	endif
 10604  00DADA  0009               	tblrd		*+
 10605  00DADC  50F5               	movf	tablat,w,c
 10606  00DADE  5C1F               	subwf	printf@val,w,c
 10607  00DAE0  0009               	tblrd		*+
 10608  00DAE2  50F5               	movf	tablat,w,c
 10609  00DAE4  5820               	subwfb	printf@val+1,w,c
 10610  00DAE6  A0D8               	btfss	status,0,c
 10611  00DAE8  D022               	goto	l977
 10612                           
 10613                           ;doprnt.c: 1307: break;
 10614  00DAEA  2A24               	incf	printf@c,f,c
 10615  00DAEC  D7EA               	goto	l4472
 10616  00DAEE                     
 10617                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10618  00DAEE  0E01               	movlw	1
 10619  00DAF0  6E24               	movwf	printf@c,c
 10620  00DAF2                     l4486:
 10621  00DAF2  0E04               	movlw	4
 10622  00DAF4  1824               	xorwf	printf@c,w,c
 10623  00DAF6  B4D8               	btfsc	status,2,c
 10624  00DAF8  D01A               	goto	l977
 10625                           
 10626                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10627  00DAFA  5024               	movf	printf@c,w,c
 10628  00DAFC  0D02               	mullw	2
 10629  00DAFE  0E4F               	movlw	low _hexpowers
 10630  00DB00  24F3               	addwf	prodl,w,c
 10631  00DB02  6EF6               	movwf	tblptrl,c
 10632  00DB04  0EFD               	movlw	high _hexpowers
 10633  00DB06  20F4               	addwfc	prodh,w,c
 10634  00DB08  6EF7               	movwf	tblptrh,c
 10635  00DB0A                     	if	0	;There are less than 3 active tblptr bytes
 10636  00DB0A                     	endif
 10637  00DB0A  0009               	tblrd		*+
 10638  00DB0C  50F5               	movf	tablat,w,c
 10639  00DB0E  5C1F               	subwf	printf@val,w,c
 10640  00DB10  0009               	tblrd		*+
 10641  00DB12  50F5               	movf	tablat,w,c
 10642  00DB14  5820               	subwfb	printf@val+1,w,c
 10643  00DB16  A0D8               	btfss	status,0,c
 10644  00DB18  D00A               	goto	l977
 10645                           
 10646                           ;doprnt.c: 1318: break;
 10647  00DB1A  2A24               	incf	printf@c,f,c
 10648  00DB1C  D7EA               	goto	l4486
 10649  00DB1E                     l972:
 10650  00DB1E  5021               	movf	printf@flag,w,c
 10651  00DB20  0B80               	andlw	128
 10652                           
 10653                           ; Switch size 1, requested type "space"
 10654                           ; Number of cases is 2, Range of values is 0 to 128
 10655                           ; switch strategies available:
 10656                           ; Name         Instructions Cycles
 10657                           ; simple_byte            7     4 (average)
 10658                           ;	Chosen strategy is simple_byte
 10659  00DB22  0A00               	xorlw	0	; case 0
 10660  00DB24  B4D8               	btfsc	status,2,c
 10661  00DB26  D7CB               	goto	l973
 10662  00DB28  0A80               	xorlw	128	; case 128
 10663  00DB2A  B4D8               	btfsc	status,2,c
 10664  00DB2C  D7E0               	goto	l978
 10665  00DB2E                     l977:
 10666                           
 10667                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10668  00DB2E  5022               	movf	printf@width,w,c
 10669  00DB30  1023               	iorwf	printf@width+1,w,c
 10670  00DB32  B4D8               	btfsc	status,2,c
 10671  00DB34  D009               	goto	l982
 10672  00DB36  C021  F017         	movff	printf@flag,??_printf
 10673  00DB3A  0E03               	movlw	3
 10674  00DB3C  1617               	andwf	??_printf,f,c
 10675  00DB3E  B4D8               	btfsc	status,2,c
 10676  00DB40  D003               	goto	l982
 10677                           
 10678                           ;doprnt.c: 1346: width--;
 10679  00DB42  0622               	decf	printf@width,f,c
 10680  00DB44  A0D8               	btfss	status,0,c
 10681  00DB46  0623               	decf	printf@width+1,f,c
 10682  00DB48                     l982:
 10683                           
 10684                           ;doprnt.c: 1381: if(width > c)
 10685  00DB48  0E80               	movlw	128
 10686  00DB4A  BE24               	btfsc	printf@c,7,c
 10687  00DB4C  0E7F               	movlw	127
 10688  00DB4E  6E17               	movwf	??_printf& (0+255),c
 10689  00DB50  5022               	movf	printf@width,w,c
 10690  00DB52  5C24               	subwf	printf@c,w,c
 10691  00DB54  5023               	movf	printf@width+1,w,c
 10692  00DB56  0A80               	xorlw	128
 10693  00DB58  5817               	subwfb	??_printf& (0+255),w,c
 10694  00DB5A  B0D8               	btfsc	status,0,c
 10695  00DB5C  D007               	goto	l983
 10696                           
 10697                           ;doprnt.c: 1382: width -= c;
 10698  00DB5E  5024               	movf	printf@c,w,c
 10699  00DB60  5E22               	subwf	printf@width,f,c
 10700  00DB62  0E00               	movlw	0
 10701  00DB64  BE24               	btfsc	printf@c,7,c
 10702  00DB66  0EFF               	movlw	255
 10703  00DB68  5A23               	subwfb	printf@width+1,f,c
 10704  00DB6A  D004               	goto	l984
 10705  00DB6C                     l983:
 10706                           
 10707                           ;doprnt.c: 1383: else
 10708                           ;doprnt.c: 1384: width = 0;
 10709  00DB6C  0E00               	movlw	0
 10710  00DB6E  6E23               	movwf	printf@width+1,c
 10711  00DB70  0E00               	movlw	0
 10712  00DB72  6E22               	movwf	printf@width,c
 10713  00DB74                     l984:
 10714                           
 10715                           ;doprnt.c: 1387: if(flag & 0x04) {
 10716  00DB74  A421               	btfss	printf@flag,2,c
 10717  00DB76  D014               	goto	l985
 10718                           
 10719                           ;doprnt.c: 1392: if(flag & 0x03)
 10720  00DB78  C021  F017         	movff	printf@flag,??_printf
 10721  00DB7C  0E03               	movlw	3
 10722  00DB7E  1617               	andwf	??_printf,f,c
 10723  00DB80  B4D8               	btfsc	status,2,c
 10724  00DB82  D003               	goto	l986
 10725                           
 10726                           ;doprnt.c: 1393: (putch('-') );
 10727  00DB84  0E2D               	movlw	45
 10728  00DB86  ECEB  F063         	call	_putch
 10729  00DB8A                     l986:
 10730                           
 10731                           ;doprnt.c: 1415: if(width)
 10732  00DB8A  5022               	movf	printf@width,w,c
 10733  00DB8C  1023               	iorwf	printf@width+1,w,c
 10734  00DB8E  B4D8               	btfsc	status,2,c
 10735  00DB90  D01E               	goto	l994
 10736                           
 10737                           ;doprnt.c: 1417: (putch('0') );
 10738                           
 10739                           ;doprnt.c: 1416: do
 10740  00DB92  0E30               	movlw	48
 10741  00DB94  ECEB  F063         	call	_putch
 10742                           
 10743                           ;doprnt.c: 1418: while(--width);
 10744  00DB98  0622               	decf	printf@width,f,c
 10745  00DB9A  A0D8               	btfss	status,0,c
 10746  00DB9C  0623               	decf	printf@width+1,f,c
 10747  00DB9E  D7F5               	goto	l986
 10748  00DBA0                     l985:
 10749                           
 10750                           ;doprnt.c: 1422: {
 10751                           ;doprnt.c: 1424: if(width
 10752                           ;doprnt.c: 1428: )
 10753  00DBA0  5022               	movf	printf@width,w,c
 10754  00DBA2  1023               	iorwf	printf@width+1,w,c
 10755  00DBA4  B4D8               	btfsc	status,2,c
 10756  00DBA6  D00A               	goto	u4300
 10757  00DBA8                     u4290:
 10758                           
 10759                           ;doprnt.c: 1430: (putch(' ') );
 10760                           
 10761                           ;doprnt.c: 1429: do
 10762  00DBA8  0E20               	movlw	32
 10763  00DBAA  ECEB  F063         	call	_putch
 10764                           
 10765                           ;doprnt.c: 1431: while(--width);
 10766  00DBAE  0622               	decf	printf@width,f,c
 10767  00DBB0  A0D8               	btfss	status,0,c
 10768  00DBB2  0623               	decf	printf@width+1,f,c
 10769  00DBB4  5022               	movf	printf@width,w,c
 10770  00DBB6  1023               	iorwf	printf@width+1,w,c
 10771  00DBB8  A4D8               	btfss	status,2,c
 10772  00DBBA  D7F6               	goto	u4290
 10773  00DBBC                     u4300:
 10774                           
 10775                           ;doprnt.c: 1438: if(flag & 0x03)
 10776  00DBBC  C021  F017         	movff	printf@flag,??_printf
 10777  00DBC0  0E03               	movlw	3
 10778  00DBC2  1617               	andwf	??_printf,f,c
 10779  00DBC4  B4D8               	btfsc	status,2,c
 10780  00DBC6  D003               	goto	l994
 10781                           
 10782                           ;doprnt.c: 1439: (putch('-') );
 10783  00DBC8  0E2D               	movlw	45
 10784  00DBCA  ECEB  F063         	call	_putch
 10785  00DBCE                     l994:
 10786                           
 10787                           ;doprnt.c: 1469: }
 10788                           ;doprnt.c: 1472: prec = c;
 10789  00DBCE  C024  F01E         	movff	printf@c,printf@prec
 10790                           
 10791                           ;doprnt.c: 1474: while(prec--) {
 10792  00DBD2  D050               	goto	l995
 10793  00DBD4                     
 10794                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10795  00DBD4  501E               	movf	printf@prec,w,c
 10796  00DBD6  0D02               	mullw	2
 10797  00DBD8  0E45               	movlw	low _dpowers
 10798  00DBDA  24F3               	addwf	prodl,w,c
 10799  00DBDC  6EF6               	movwf	tblptrl,c
 10800  00DBDE  0EFD               	movlw	high _dpowers
 10801  00DBE0  20F4               	addwfc	prodh,w,c
 10802  00DBE2  6EF7               	movwf	tblptrh,c
 10803  00DBE4                     	if	0	;There are less than 3 active tblptr bytes
 10804  00DBE4                     	endif
 10805  00DBE4  0009               	tblrd		*+
 10806  00DBE6  CFF5 F003          	movff	tablat,___lwdiv@divisor
 10807  00DBEA  000A               	tblrd		*-
 10808  00DBEC  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 10809  00DBF0  C01F  F001         	movff	printf@val,___lwdiv@dividend
 10810  00DBF4  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
 10811  00DBF8  ECCE  F064         	call	___lwdiv	;wreg free
 10812  00DBFC  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 10813  00DC00  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 10814  00DC04  0E00               	movlw	0
 10815  00DC06  6E0B               	movwf	___lwmod@divisor+1,c
 10816  00DC08  0E0A               	movlw	10
 10817  00DC0A  6E0A               	movwf	___lwmod@divisor,c
 10818  00DC0C  EC66  F064         	call	___lwmod	;wreg free
 10819  00DC10  5008               	movf	?___lwmod,w,c
 10820  00DC12  0F30               	addlw	48
 10821  00DC14  6E24               	movwf	printf@c,c
 10822                           
 10823                           ;doprnt.c: 1491: break;
 10824  00DC16  D02B               	goto	l999
 10825  00DC18                     
 10826                           ;doprnt.c: 1499: {
 10827                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10828  00DC18  C01F  F001         	movff	printf@val,___lwdiv@dividend
 10829  00DC1C  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
 10830  00DC20  501E               	movf	printf@prec,w,c
 10831  00DC22  0D02               	mullw	2
 10832  00DC24  0E4F               	movlw	low _hexpowers
 10833  00DC26  24F3               	addwf	prodl,w,c
 10834  00DC28  6EF6               	movwf	tblptrl,c
 10835  00DC2A  0EFD               	movlw	high _hexpowers
 10836  00DC2C  20F4               	addwfc	prodh,w,c
 10837  00DC2E  6EF7               	movwf	tblptrh,c
 10838  00DC30                     	if	0	;There are less than 3 active tblptr bytes
 10839  00DC30                     	endif
 10840  00DC30  0009               	tblrd		*+
 10841  00DC32  CFF5 F003          	movff	tablat,___lwdiv@divisor
 10842  00DC36  000A               	tblrd		*-
 10843  00DC38  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 10844  00DC3C  ECCE  F064         	call	___lwdiv	;wreg free
 10845  00DC40  5001               	movf	?___lwdiv,w,c
 10846  00DC42  0B0F               	andlw	15
 10847  00DC44  6E1B               	movwf	printf@idx,c
 10848                           
 10849                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10850  00DC46  501B               	movf	printf@idx,w,c
 10851  00DC48  0D01               	mullw	1
 10852  00DC4A  0E76               	movlw	low STR_71
 10853  00DC4C  24F3               	addwf	prodl,w,c
 10854  00DC4E  6EF6               	movwf	tblptrl,c
 10855  00DC50  0EFD               	movlw	high STR_71
 10856  00DC52  20F4               	addwfc	prodh,w,c
 10857  00DC54  6EF7               	movwf	tblptrh,c
 10858  00DC56                     	if	0	;There are less than 3 active tblptr bytes
 10859  00DC56                     	endif
 10860  00DC56  0008               	tblrd		*
 10861  00DC58  CFF5 F024          	movff	tablat,printf@c
 10862                           
 10863                           ;doprnt.c: 1523: }
 10864                           
 10865                           ;doprnt.c: 1508: }
 10866                           ;doprnt.c: 1510: break;
 10867  00DC5C  D008               	goto	l999
 10868  00DC5E  5021               	movf	printf@flag,w,c
 10869  00DC60  0B80               	andlw	128
 10870                           
 10871                           ; Switch size 1, requested type "space"
 10872                           ; Number of cases is 2, Range of values is 0 to 128
 10873                           ; switch strategies available:
 10874                           ; Name         Instructions Cycles
 10875                           ; simple_byte            7     4 (average)
 10876                           ;	Chosen strategy is simple_byte
 10877  00DC62  0A00               	xorlw	0	; case 0
 10878  00DC64  B4D8               	btfsc	status,2,c
 10879  00DC66  D7B6               	goto	l998
 10880  00DC68  0A80               	xorlw	128	; case 128
 10881  00DC6A  B4D8               	btfsc	status,2,c
 10882  00DC6C  D7D5               	goto	l1000
 10883  00DC6E                     l999:
 10884                           
 10885                           ;doprnt.c: 1524: (putch(c) );
 10886  00DC6E  5024               	movf	printf@c,w,c
 10887  00DC70  ECEB  F063         	call	_putch
 10888  00DC74                     l995:
 10889  00DC74  061E               	decf	printf@prec,f,c
 10890  00DC76  281E               	incf	printf@prec,w,c
 10891  00DC78  A4D8               	btfss	status,2,c
 10892  00DC7A  D7F1               	goto	l997
 10893  00DC7C                     u4320:
 10894  00DC7C  C00D  FFF6         	movff	printf@f,tblptrl
 10895  00DC80  C00E  FFF7         	movff	printf@f+1,tblptrh
 10896  00DC84  4A0D               	infsnz	printf@f,f,c
 10897  00DC86  2A0E               	incf	printf@f+1,f,c
 10898  00DC88                     	if	0	;tblptru may be non-zero
 10899  00DC88                     	endif
 10900  00DC88                     	if	0	;tblptru may be non-zero
 10901  00DC88                     	endif
 10902  00DC88  0008               	tblrd		*
 10903  00DC8A  CFF5 F024          	movff	tablat,printf@c
 10904  00DC8E  5024               	movf	printf@c,w,c
 10905  00DC90  B4D8               	btfsc	status,2,c
 10906  00DC92  0012               	return	
 10907  00DC94  D67F               	goto	l950
 10908  00DC96                     __end_of_printf:
 10909                           	opt stack 0
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           postinc0	equ	0xFEE
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           plusw1	equ	0xFE3
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           plusw2	equ	0xFDB
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8
 10929                           
 10930 ;; *************** function _putch *****************
 10931 ;; Defined at:
 10932 ;;		line 76 in file "standbyMode.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;  data            1    wreg     unsigned char 
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  data            1    2[COMRAM] unsigned char 
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      void 
 10939 ;; Registers used:
 10940 ;;		wreg, status,2, status,0, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;Total ram usage:        1 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    1
 10953 ;; This function calls:
 10954 ;;		_lcdNibble
 10955 ;; This function is called by:
 10956 ;;		_viewLogs
 10957 ;;		_food_press
 10958 ;;		_diet_press
 10959 ;;		_which_drawer
 10960 ;;		_printf
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           	psect	text19
 10965  00C7D6                     __ptext19:
 10966                           	opt stack 0
 10967  00C7D6                     _putch:
 10968                           	opt stack 27
 10969                           
 10970                           ;incstack = 0
 10971                           ;putch@data stored from wreg
 10972  00C7D6  6E03               	movwf	putch@data,c
 10973                           
 10974                           ;standbyMode.c: 84: LATDbits.LATD2 = 1;
 10975  00C7D8  848C               	bsf	3980,2,c	;volatile
 10976                           
 10977                           ;standbyMode.c: 85: lcdNibble(data);
 10978  00C7DA  5003               	movf	putch@data,w,c
 10979  00C7DC  EC4E  F065         	call	_lcdNibble
 10980                           
 10981                           ;standbyMode.c: 86: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10982  00C7E0  0EC8               	movlw	200
 10983  00C7E2                     u8597:
 10984  00C7E2  D000               	nop2	
 10985  00C7E4  2EE8               	decfsz	wreg,f,c
 10986  00C7E6  D7FD               	bra	u8597
 10987  00C7E8  0012               	return		;funcret
 10988  00C7EA                     __end_of_putch:
 10989                           	opt stack 0
 10990                           tblptru	equ	0xFF8
 10991                           tblptrh	equ	0xFF7
 10992                           tblptrl	equ	0xFF6
 10993                           tablat	equ	0xFF5
 10994                           prodh	equ	0xFF4
 10995                           prodl	equ	0xFF3
 10996                           intcon	equ	0xFF2
 10997                           postinc0	equ	0xFEE
 10998                           wreg	equ	0xFE8
 10999                           postdec1	equ	0xFE5
 11000                           plusw1	equ	0xFE3
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           plusw2	equ	0xFDB
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _isdigit *****************
 11011 ;; Defined at:
 11012 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  c               1    wreg     unsigned char 
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;  c               1    2[COMRAM] unsigned char 
 11017 ;; Return value:  Size  Location     Type
 11018 ;;		None               void
 11019 ;; Registers used:
 11020 ;;		wreg, status,2, status,0
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;Total ram usage:        3 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; This function calls:
 11033 ;;		Nothing
 11034 ;; This function is called by:
 11035 ;;		_printf
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           	psect	text20
 11040  00C814                     __ptext20:
 11041                           	opt stack 0
 11042  00C814                     _isdigit:
 11043                           	opt stack 27
 11044                           
 11045                           ;incstack = 0
 11046                           ;isdigit@c stored from wreg
 11047  00C814  6E03               	movwf	isdigit@c,c
 11048  00C816  0E00               	movlw	0
 11049  00C818  6E02               	movwf	_isdigit$1349,c
 11050  00C81A  0E3A               	movlw	58
 11051  00C81C  6003               	cpfslt	isdigit@c,c
 11052  00C81E  D005               	goto	l1333
 11053  00C820  0E2F               	movlw	47
 11054  00C822  6403               	cpfsgt	isdigit@c,c
 11055  00C824  D002               	goto	l1333
 11056  00C826  0E01               	movlw	1
 11057  00C828  6E02               	movwf	_isdigit$1349,c
 11058  00C82A                     l1333:
 11059  00C82A  C002  F001         	movff	_isdigit$1349,??_isdigit
 11060  00C82E  3001               	rrcf	??_isdigit,w,c
 11061  00C830  0012               	return	
 11062  00C832                     __end_of_isdigit:
 11063                           	opt stack 0
 11064                           tblptru	equ	0xFF8
 11065                           tblptrh	equ	0xFF7
 11066                           tblptrl	equ	0xFF6
 11067                           tablat	equ	0xFF5
 11068                           prodh	equ	0xFF4
 11069                           prodl	equ	0xFF3
 11070                           intcon	equ	0xFF2
 11071                           postinc0	equ	0xFEE
 11072                           wreg	equ	0xFE8
 11073                           postdec1	equ	0xFE5
 11074                           plusw1	equ	0xFE3
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function ___wmul *****************
 11085 ;; Defined at:
 11086 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  multiplier      2    0[COMRAM] unsigned int 
 11089 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  product         2    4[COMRAM] unsigned int 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  2    0[COMRAM] unsigned int 
 11094 ;; Registers used:
 11095 ;;		wreg, status,2, status,0, prodl, prodh
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;Total ram usage:        6 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; This function calls:
 11108 ;;		Nothing
 11109 ;; This function is called by:
 11110 ;;		_displayLogs
 11111 ;;		_standbyMode
 11112 ;;		_printf
 11113 ;;		_tock
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text21
 11118  00C856                     __ptext21:
 11119                           	opt stack 0
 11120  00C856                     ___wmul:
 11121                           	opt stack 27
 11122                           
 11123                           ;incstack = 0
 11124  00C856  5001               	movf	___wmul@multiplier,w,c
 11125  00C858  0203               	mulwf	___wmul@multiplicand,c
 11126  00C85A  CFF3 F005          	movff	prodl,___wmul@product
 11127  00C85E  CFF4 F006          	movff	prodh,___wmul@product+1
 11128  00C862  5001               	movf	___wmul@multiplier,w,c
 11129  00C864  0204               	mulwf	___wmul@multiplicand+1,c
 11130  00C866  50F3               	movf	prodl,w,c
 11131  00C868  2606               	addwf	___wmul@product+1,f,c
 11132  00C86A  5002               	movf	___wmul@multiplier+1,w,c
 11133  00C86C  0203               	mulwf	___wmul@multiplicand,c
 11134  00C86E  50F3               	movf	prodl,w,c
 11135  00C870  2606               	addwf	___wmul@product+1,f,c
 11136  00C872  C005  F001         	movff	___wmul@product,?___wmul
 11137  00C876  C006  F002         	movff	___wmul@product+1,?___wmul+1
 11138  00C87A  0012               	return	
 11139  00C87C                     __end_of___wmul:
 11140                           	opt stack 0
 11141                           tblptru	equ	0xFF8
 11142                           tblptrh	equ	0xFF7
 11143                           tblptrl	equ	0xFF6
 11144                           tablat	equ	0xFF5
 11145                           prodh	equ	0xFF4
 11146                           prodl	equ	0xFF3
 11147                           intcon	equ	0xFF2
 11148                           postinc0	equ	0xFEE
 11149                           wreg	equ	0xFE8
 11150                           postdec1	equ	0xFE5
 11151                           plusw1	equ	0xFE3
 11152                           fsr1l	equ	0xFE1
 11153                           indf2	equ	0xFDF
 11154                           postinc2	equ	0xFDE
 11155                           postdec2	equ	0xFDD
 11156                           plusw2	equ	0xFDB
 11157                           fsr2h	equ	0xFDA
 11158                           fsr2l	equ	0xFD9
 11159                           status	equ	0xFD8
 11160                           
 11161 ;; *************** function ___lwmod *****************
 11162 ;; Defined at:
 11163 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  dividend        2    7[COMRAM] unsigned int 
 11166 ;;  divisor         2    9[COMRAM] unsigned int 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;  counter         1   11[COMRAM] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  2    7[COMRAM] unsigned int 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11181 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;Total ram usage:        5 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; This function calls:
 11185 ;;		Nothing
 11186 ;; This function is called by:
 11187 ;;		_displayLogs
 11188 ;;		_printf
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text22
 11193  00C8CC                     __ptext22:
 11194                           	opt stack 0
 11195  00C8CC                     ___lwmod:
 11196                           	opt stack 27
 11197                           
 11198                           ;incstack = 0
 11199  00C8CC  500A               	movf	___lwmod@divisor,w,c
 11200  00C8CE  100B               	iorwf	___lwmod@divisor+1,w,c
 11201  00C8D0  B4D8               	btfsc	status,2,c
 11202  00C8D2  D018               	goto	l1427
 11203  00C8D4  0E01               	movlw	1
 11204  00C8D6  6E0C               	movwf	___lwmod@counter,c
 11205  00C8D8  D004               	goto	l1422
 11206  00C8DA  90D8               	bcf	status,0,c
 11207  00C8DC  360A               	rlcf	___lwmod@divisor,f,c
 11208  00C8DE  360B               	rlcf	___lwmod@divisor+1,f,c
 11209  00C8E0  2A0C               	incf	___lwmod@counter,f,c
 11210  00C8E2                     l1422:
 11211  00C8E2  AE0B               	btfss	___lwmod@divisor+1,7,c
 11212  00C8E4  D7FA               	goto	l1423
 11213  00C8E6                     u4090:
 11214  00C8E6  500A               	movf	___lwmod@divisor,w,c
 11215  00C8E8  5C08               	subwf	___lwmod@dividend,w,c
 11216  00C8EA  500B               	movf	___lwmod@divisor+1,w,c
 11217  00C8EC  5809               	subwfb	___lwmod@dividend+1,w,c
 11218  00C8EE  A0D8               	btfss	status,0,c
 11219  00C8F0  D004               	goto	l1426
 11220  00C8F2  500A               	movf	___lwmod@divisor,w,c
 11221  00C8F4  5E08               	subwf	___lwmod@dividend,f,c
 11222  00C8F6  500B               	movf	___lwmod@divisor+1,w,c
 11223  00C8F8  5A09               	subwfb	___lwmod@dividend+1,f,c
 11224  00C8FA                     l1426:
 11225  00C8FA  90D8               	bcf	status,0,c
 11226  00C8FC  320B               	rrcf	___lwmod@divisor+1,f,c
 11227  00C8FE  320A               	rrcf	___lwmod@divisor,f,c
 11228  00C900  2E0C               	decfsz	___lwmod@counter,f,c
 11229  00C902  D7F1               	goto	u4090
 11230  00C904                     l1427:
 11231  00C904  C008  F008         	movff	___lwmod@dividend,?___lwmod
 11232  00C908  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 11233  00C90C  0012               	return		;funcret
 11234  00C90E                     __end_of___lwmod:
 11235                           	opt stack 0
 11236                           tblptru	equ	0xFF8
 11237                           tblptrh	equ	0xFF7
 11238                           tblptrl	equ	0xFF6
 11239                           tablat	equ	0xFF5
 11240                           prodh	equ	0xFF4
 11241                           prodl	equ	0xFF3
 11242                           intcon	equ	0xFF2
 11243                           postinc0	equ	0xFEE
 11244                           wreg	equ	0xFE8
 11245                           postdec1	equ	0xFE5
 11246                           plusw1	equ	0xFE3
 11247                           fsr1l	equ	0xFE1
 11248                           indf2	equ	0xFDF
 11249                           postinc2	equ	0xFDE
 11250                           postdec2	equ	0xFDD
 11251                           plusw2	equ	0xFDB
 11252                           fsr2h	equ	0xFDA
 11253                           fsr2l	equ	0xFD9
 11254                           status	equ	0xFD8
 11255                           
 11256 ;; *************** function ___lwdiv *****************
 11257 ;; Defined at:
 11258 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  dividend        2    0[COMRAM] unsigned int 
 11261 ;;  divisor         2    2[COMRAM] unsigned int 
 11262 ;; Auto vars:     Size  Location     Type
 11263 ;;  quotient        2    4[COMRAM] unsigned int 
 11264 ;;  counter         1    6[COMRAM] unsigned char 
 11265 ;; Return value:  Size  Location     Type
 11266 ;;                  2    0[COMRAM] unsigned int 
 11267 ;; Registers used:
 11268 ;;		wreg, status,2, status,0
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11274 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11278 ;;Total ram usage:        7 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; This function calls:
 11281 ;;		Nothing
 11282 ;; This function is called by:
 11283 ;;		_displayLogs
 11284 ;;		_printf
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text23
 11289  00C99C                     __ptext23:
 11290                           	opt stack 0
 11291  00C99C                     ___lwdiv:
 11292                           	opt stack 27
 11293                           
 11294                           ;incstack = 0
 11295  00C99C  0E00               	movlw	0
 11296  00C99E  6E06               	movwf	___lwdiv@quotient+1,c
 11297  00C9A0  0E00               	movlw	0
 11298  00C9A2  6E05               	movwf	___lwdiv@quotient,c
 11299  00C9A4  5003               	movf	___lwdiv@divisor,w,c
 11300  00C9A6  1004               	iorwf	___lwdiv@divisor+1,w,c
 11301  00C9A8  B4D8               	btfsc	status,2,c
 11302  00C9AA  D01C               	goto	l1417
 11303  00C9AC  0E01               	movlw	1
 11304  00C9AE  6E07               	movwf	___lwdiv@counter,c
 11305  00C9B0  D004               	goto	l1412
 11306  00C9B2  90D8               	bcf	status,0,c
 11307  00C9B4  3603               	rlcf	___lwdiv@divisor,f,c
 11308  00C9B6  3604               	rlcf	___lwdiv@divisor+1,f,c
 11309  00C9B8  2A07               	incf	___lwdiv@counter,f,c
 11310  00C9BA                     l1412:
 11311  00C9BA  AE04               	btfss	___lwdiv@divisor+1,7,c
 11312  00C9BC  D7FA               	goto	l1413
 11313  00C9BE                     u4060:
 11314  00C9BE  90D8               	bcf	status,0,c
 11315  00C9C0  3605               	rlcf	___lwdiv@quotient,f,c
 11316  00C9C2  3606               	rlcf	___lwdiv@quotient+1,f,c
 11317  00C9C4  5003               	movf	___lwdiv@divisor,w,c
 11318  00C9C6  5C01               	subwf	___lwdiv@dividend,w,c
 11319  00C9C8  5004               	movf	___lwdiv@divisor+1,w,c
 11320  00C9CA  5802               	subwfb	___lwdiv@dividend+1,w,c
 11321  00C9CC  A0D8               	btfss	status,0,c
 11322  00C9CE  D005               	goto	l1416
 11323  00C9D0  5003               	movf	___lwdiv@divisor,w,c
 11324  00C9D2  5E01               	subwf	___lwdiv@dividend,f,c
 11325  00C9D4  5004               	movf	___lwdiv@divisor+1,w,c
 11326  00C9D6  5A02               	subwfb	___lwdiv@dividend+1,f,c
 11327  00C9D8  8005               	bsf	___lwdiv@quotient,0,c
 11328  00C9DA                     l1416:
 11329  00C9DA  90D8               	bcf	status,0,c
 11330  00C9DC  3204               	rrcf	___lwdiv@divisor+1,f,c
 11331  00C9DE  3203               	rrcf	___lwdiv@divisor,f,c
 11332  00C9E0  2E07               	decfsz	___lwdiv@counter,f,c
 11333  00C9E2  D7ED               	goto	u4060
 11334  00C9E4                     l1417:
 11335  00C9E4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 11336  00C9E8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11337  00C9EC  0012               	return		;funcret
 11338  00C9EE                     __end_of___lwdiv:
 11339                           	opt stack 0
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           postinc0	equ	0xFEE
 11348                           wreg	equ	0xFE8
 11349                           postdec1	equ	0xFE5
 11350                           plusw1	equ	0xFE3
 11351                           fsr1l	equ	0xFE1
 11352                           indf2	equ	0xFDF
 11353                           postinc2	equ	0xFDE
 11354                           postdec2	equ	0xFDD
 11355                           plusw2	equ	0xFDB
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function _I2C_Master_Write *****************
 11361 ;; Defined at:
 11362 ;;		line 108 in file "I2C.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  1    wreg      void 
 11369 ;; Registers used:
 11370 ;;		wreg, status,2, status,0, cstack
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;Total ram usage:        2 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    1
 11383 ;; This function calls:
 11384 ;;		_I2C_Master_Wait
 11385 ;; This function is called by:
 11386 ;;		_standbyMode
 11387 ;;		_RTC_setTime
 11388 ;;		_tick
 11389 ;;		_tock
 11390 ;;		_sendByteToArduino
 11391 ;; This function uses a non-reentrant model
 11392 ;;
 11393                           
 11394                           	psect	text24
 11395  00C7A6                     __ptext24:
 11396                           	opt stack 0
 11397  00C7A6                     _I2C_Master_Write:
 11398                           	opt stack 28
 11399                           
 11400                           ;I2C.c: 116: I2C_Master_Wait();
 11401                           
 11402                           ;incstack = 0
 11403  00C7A6  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11404                           
 11405                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11406  00C7AA  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11407  00C7AE  0012               	return		;funcret
 11408  00C7B0                     __end_of_I2C_Master_Write:
 11409                           	opt stack 0
 11410                           tblptru	equ	0xFF8
 11411                           tblptrh	equ	0xFF7
 11412                           tblptrl	equ	0xFF6
 11413                           tablat	equ	0xFF5
 11414                           prodh	equ	0xFF4
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           postdec1	equ	0xFE5
 11420                           plusw1	equ	0xFE3
 11421                           fsr1l	equ	0xFE1
 11422                           indf2	equ	0xFDF
 11423                           postinc2	equ	0xFDE
 11424                           postdec2	equ	0xFDD
 11425                           plusw2	equ	0xFDB
 11426                           fsr2h	equ	0xFDA
 11427                           fsr2l	equ	0xFD9
 11428                           status	equ	0xFD8
 11429                           
 11430 ;; *************** function _I2C_Master_Stop *****************
 11431 ;; Defined at:
 11432 ;;		line 95 in file "I2C.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;		None
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;		None
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      void 
 11439 ;; Registers used:
 11440 ;;		wreg, status,2, status,0, cstack
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;Total ram usage:        0 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    1
 11453 ;; This function calls:
 11454 ;;		_I2C_Master_Wait
 11455 ;; This function is called by:
 11456 ;;		_standbyMode
 11457 ;;		_RTC_setTime
 11458 ;;		_tick
 11459 ;;		_tock
 11460 ;;		_sendByteToArduino
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           	psect	text25
 11465  00C79E                     __ptext25:
 11466                           	opt stack 0
 11467  00C79E                     _I2C_Master_Stop:
 11468                           	opt stack 28
 11469                           
 11470                           ;I2C.c: 104: I2C_Master_Wait();
 11471                           
 11472                           ;incstack = 0
 11473  00C79E  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11474                           
 11475                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11476  00C7A2  84C5               	bsf	4037,2,c	;volatile
 11477  00C7A4  0012               	return		;funcret
 11478  00C7A6                     __end_of_I2C_Master_Stop:
 11479                           	opt stack 0
 11480                           tblptru	equ	0xFF8
 11481                           tblptrh	equ	0xFF7
 11482                           tblptrl	equ	0xFF6
 11483                           tablat	equ	0xFF5
 11484                           prodh	equ	0xFF4
 11485                           prodl	equ	0xFF3
 11486                           intcon	equ	0xFF2
 11487                           postinc0	equ	0xFEE
 11488                           wreg	equ	0xFE8
 11489                           postdec1	equ	0xFE5
 11490                           plusw1	equ	0xFE3
 11491                           fsr1l	equ	0xFE1
 11492                           indf2	equ	0xFDF
 11493                           postinc2	equ	0xFDE
 11494                           postdec2	equ	0xFDD
 11495                           plusw2	equ	0xFDB
 11496                           fsr2h	equ	0xFDA
 11497                           fsr2l	equ	0xFD9
 11498                           status	equ	0xFD8
 11499                           
 11500 ;; *************** function _I2C_Master_Start *****************
 11501 ;; Defined at:
 11502 ;;		line 69 in file "I2C.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;		None
 11507 ;; Return value:  Size  Location     Type
 11508 ;;                  1    wreg      void 
 11509 ;; Registers used:
 11510 ;;		wreg, status,2, status,0, cstack
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;Total ram usage:        0 bytes
 11521 ;; Hardware stack levels used:    1
 11522 ;; Hardware stack levels required when called:    1
 11523 ;; This function calls:
 11524 ;;		_I2C_Master_Wait
 11525 ;; This function is called by:
 11526 ;;		_standbyMode
 11527 ;;		_RTC_setTime
 11528 ;;		_tick
 11529 ;;		_tock
 11530 ;;		_sendByteToArduino
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           	psect	text26
 11535  00C796                     __ptext26:
 11536                           	opt stack 0
 11537  00C796                     _I2C_Master_Start:
 11538                           	opt stack 28
 11539                           
 11540                           ;I2C.c: 78: I2C_Master_Wait();
 11541                           
 11542                           ;incstack = 0
 11543  00C796  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11544                           
 11545                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11546  00C79A  80C5               	bsf	4037,0,c	;volatile
 11547  00C79C  0012               	return		;funcret
 11548  00C79E                     __end_of_I2C_Master_Start:
 11549                           	opt stack 0
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           postinc0	equ	0xFEE
 11558                           wreg	equ	0xFE8
 11559                           postdec1	equ	0xFE5
 11560                           plusw1	equ	0xFE3
 11561                           fsr1l	equ	0xFE1
 11562                           indf2	equ	0xFDF
 11563                           postinc2	equ	0xFDE
 11564                           postdec2	equ	0xFDD
 11565                           plusw2	equ	0xFDB
 11566                           fsr2h	equ	0xFDA
 11567                           fsr2l	equ	0xFD9
 11568                           status	equ	0xFD8
 11569                           
 11570 ;; *************** function _I2C_Master_Read *****************
 11571 ;; Defined at:
 11572 ;;		line 120 in file "I2C.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;  ackBit          1    wreg     unsigned char 
 11575 ;; Auto vars:     Size  Location     Type
 11576 ;;  ackBit          1    1[COMRAM] unsigned char 
 11577 ;;  receivedByte    1    2[COMRAM] unsigned char 
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      unsigned char 
 11580 ;; Registers used:
 11581 ;;		wreg, status,2, status,0, cstack
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;Total ram usage:        2 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    1
 11594 ;; This function calls:
 11595 ;;		_I2C_Master_Wait
 11596 ;; This function is called by:
 11597 ;;		_standbyMode
 11598 ;;		_tick
 11599 ;;		_tock
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text27
 11604  00C832                     __ptext27:
 11605                           	opt stack 0
 11606  00C832                     _I2C_Master_Read:
 11607                           	opt stack 28
 11608                           
 11609                           ;incstack = 0
 11610                           ;I2C_Master_Read@ackBit stored from wreg
 11611  00C832  6E02               	movwf	I2C_Master_Read@ackBit,c
 11612                           
 11613                           ;I2C.c: 130: unsigned char receivedByte;
 11614                           ;I2C.c: 132: I2C_Master_Wait();
 11615  00C834  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11616                           
 11617                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 11618  00C838  86C5               	bsf	4037,3,c	;volatile
 11619                           
 11620                           ;I2C.c: 135: I2C_Master_Wait();
 11621  00C83A  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11622                           
 11623                           ;I2C.c: 136: receivedByte = SSPBUF;
 11624  00C83E  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 11625                           
 11626                           ;I2C.c: 138: I2C_Master_Wait();
 11627  00C842  ECD8  F063         	call	_I2C_Master_Wait	;wreg free
 11628                           
 11629                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 11630  00C846  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 11631  00C848  D002               	bra	u7255
 11632  00C84A  9AC5               	bcf	4037,5,c	;volatile
 11633  00C84C  D001               	bra	u7256
 11634  00C84E                     u7255:
 11635  00C84E  8AC5               	bsf	4037,5,c	;volatile
 11636  00C850                     u7256:
 11637                           
 11638                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 11639  00C850  88C5               	bsf	4037,4,c	;volatile
 11640                           
 11641                           ;I2C.c: 142: return receivedByte;
 11642  00C852  5003               	movf	I2C_Master_Read@receivedByte,w,c
 11643  00C854  0012               	return	
 11644  00C856                     __end_of_I2C_Master_Read:
 11645                           	opt stack 0
 11646                           tblptru	equ	0xFF8
 11647                           tblptrh	equ	0xFF7
 11648                           tblptrl	equ	0xFF6
 11649                           tablat	equ	0xFF5
 11650                           prodh	equ	0xFF4
 11651                           prodl	equ	0xFF3
 11652                           intcon	equ	0xFF2
 11653                           postinc0	equ	0xFEE
 11654                           wreg	equ	0xFE8
 11655                           postdec1	equ	0xFE5
 11656                           plusw1	equ	0xFE3
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           plusw2	equ	0xFDB
 11662                           fsr2h	equ	0xFDA
 11663                           fsr2l	equ	0xFD9
 11664                           status	equ	0xFD8
 11665                           
 11666 ;; *************** function _I2C_Master_Wait *****************
 11667 ;; Defined at:
 11668 ;;		line 51 in file "I2C.c"
 11669 ;; Parameters:    Size  Location     Type
 11670 ;;		None
 11671 ;; Auto vars:     Size  Location     Type
 11672 ;;		None
 11673 ;; Return value:  Size  Location     Type
 11674 ;;                  1    wreg      void 
 11675 ;; Registers used:
 11676 ;;		wreg, status,2, status,0
 11677 ;; Tracked objects:
 11678 ;;		On entry : 0/0
 11679 ;;		On exit  : 0/0
 11680 ;;		Unchanged: 0/0
 11681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;Total ram usage:        1 bytes
 11687 ;; Hardware stack levels used:    1
 11688 ;; This function calls:
 11689 ;;		Nothing
 11690 ;; This function is called by:
 11691 ;;		_I2C_Master_Start
 11692 ;;		_I2C_Master_Stop
 11693 ;;		_I2C_Master_Write
 11694 ;;		_I2C_Master_Read
 11695 ;;		_I2C_Master_RepeatedStart
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text28
 11700  00C7B0                     __ptext28:
 11701                           	opt stack 0
 11702  00C7B0                     _I2C_Master_Wait:
 11703                           	opt stack 28
 11704                           
 11705                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 11706                           
 11707                           ;incstack = 0
 11708  00C7B0  B4C7               	btfsc	4039,2,c	;volatile
 11709  00C7B2  D7FE               	goto	_I2C_Master_Wait
 11710  00C7B4  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 11711  00C7B8  0E1F               	movlw	31
 11712  00C7BA  1601               	andwf	??_I2C_Master_Wait,f,c
 11713  00C7BC  B4D8               	btfsc	status,2,c
 11714  00C7BE  0012               	return	
 11715  00C7C0  D7F7               	goto	_I2C_Master_Wait
 11716  00C7C2                     __end_of_I2C_Master_Wait:
 11717                           	opt stack 0
 11718                           tblptru	equ	0xFF8
 11719                           tblptrh	equ	0xFF7
 11720                           tblptrl	equ	0xFF6
 11721                           tablat	equ	0xFF5
 11722                           prodh	equ	0xFF4
 11723                           prodl	equ	0xFF3
 11724                           intcon	equ	0xFF2
 11725                           postinc0	equ	0xFEE
 11726                           wreg	equ	0xFE8
 11727                           postdec1	equ	0xFE5
 11728                           plusw1	equ	0xFE3
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           plusw2	equ	0xFDB
 11734                           fsr2h	equ	0xFDA
 11735                           fsr2l	equ	0xFD9
 11736                           status	equ	0xFD8
 11737                           
 11738 ;; *************** function _I2C_Master_Init *****************
 11739 ;; Defined at:
 11740 ;;		line 14 in file "I2C.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;		None
 11745 ;; Return value:  Size  Location     Type
 11746 ;;                  1    wreg      void 
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0, cstack
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;Total ram usage:        8 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    1
 11761 ;; This function calls:
 11762 ;;		___lldiv
 11763 ;; This function is called by:
 11764 ;;		_standbyMode
 11765 ;;		_tick
 11766 ;;		_tock
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           	psect	text29
 11771  00CA40                     __ptext29:
 11772                           	opt stack 0
 11773  00CA40                     _I2C_Master_Init:
 11774                           	opt stack 28
 11775                           
 11776                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 11777                           
 11778                           ;incstack = 0
 11779  00CA40  9AC6               	bcf	4038,5,c	;volatile
 11780                           
 11781                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 11782  00CA42  8694               	bsf	3988,3,c	;volatile
 11783                           
 11784                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 11785  00CA44  8894               	bsf	3988,4,c	;volatile
 11786                           
 11787                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 11788  00CA46  0E80               	movlw	128
 11789  00CA48  6EC7               	movwf	4039,c	;volatile
 11790                           
 11791                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 11792  00CA4A  0E28               	movlw	40
 11793  00CA4C  6EC6               	movwf	4038,c	;volatile
 11794                           
 11795                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 11796  00CA4E  0E00               	movlw	0
 11797  00CA50  6EC5               	movwf	4037,c	;volatile
 11798                           
 11799                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 11800  00CA52  0E00               	movlw	0
 11801  00CA54  6E01               	movwf	___lldiv@dividend,c
 11802  00CA56  0E5A               	movlw	90
 11803  00CA58  6E02               	movwf	___lldiv@dividend+1,c
 11804  00CA5A  0E62               	movlw	98
 11805  00CA5C  6E03               	movwf	___lldiv@dividend+2,c
 11806  00CA5E  0E02               	movlw	2
 11807  00CA60  6E04               	movwf	___lldiv@dividend+3,c
 11808  00CA62  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 11809  00CA66  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 11810  00CA6A  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 11811  00CA6E  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 11812  00CA72  0E02               	movlw	2
 11813  00CA74                     u7245:
 11814  00CA74  90D8               	bcf	status,0,c
 11815  00CA76  3612               	rlcf	??_I2C_Master_Init,f,c
 11816  00CA78  3613               	rlcf	??_I2C_Master_Init+1,f,c
 11817  00CA7A  3614               	rlcf	??_I2C_Master_Init+2,f,c
 11818  00CA7C  3615               	rlcf	??_I2C_Master_Init+3,f,c
 11819  00CA7E  2EE8               	decfsz	wreg,f,c
 11820  00CA80  D7F9               	goto	u7245
 11821  00CA82  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 11822  00CA86  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11823  00CA8A  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11824  00CA8E  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11825  00CA92  EC0D  F066         	call	___lldiv	;wreg free
 11826  00CA96  0401               	decf	?___lldiv,w,c
 11827  00CA98  6EC8               	movwf	4040,c	;volatile
 11828  00CA9A  0012               	return		;funcret
 11829  00CA9C                     __end_of_I2C_Master_Init:
 11830                           	opt stack 0
 11831                           tblptru	equ	0xFF8
 11832                           tblptrh	equ	0xFF7
 11833                           tblptrl	equ	0xFF6
 11834                           tablat	equ	0xFF5
 11835                           prodh	equ	0xFF4
 11836                           prodl	equ	0xFF3
 11837                           intcon	equ	0xFF2
 11838                           postinc0	equ	0xFEE
 11839                           wreg	equ	0xFE8
 11840                           postdec1	equ	0xFE5
 11841                           plusw1	equ	0xFE3
 11842                           fsr1l	equ	0xFE1
 11843                           indf2	equ	0xFDF
 11844                           postinc2	equ	0xFDE
 11845                           postdec2	equ	0xFDD
 11846                           plusw2	equ	0xFDB
 11847                           fsr2h	equ	0xFDA
 11848                           fsr2l	equ	0xFD9
 11849                           status	equ	0xFD8
 11850                           
 11851 ;; *************** function ___lldiv *****************
 11852 ;; Defined at:
 11853 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  dividend        4    0[COMRAM] unsigned long 
 11856 ;;  divisor         4    4[COMRAM] unsigned long 
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  quotient        4    8[COMRAM] unsigned long 
 11859 ;;  counter         1   12[COMRAM] unsigned char 
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  4    0[COMRAM] unsigned long 
 11862 ;; Registers used:
 11863 ;;		wreg, status,2, status,0
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11869 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;Total ram usage:       13 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; This function calls:
 11876 ;;		Nothing
 11877 ;; This function is called by:
 11878 ;;		_I2C_Master_Init
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           	psect	text30
 11883  00CC1A                     __ptext30:
 11884                           	opt stack 0
 11885  00CC1A                     ___lldiv:
 11886                           	opt stack 28
 11887                           
 11888                           ;incstack = 0
 11889  00CC1A  0E00               	movlw	0
 11890  00CC1C  6E09               	movwf	___lldiv@quotient,c
 11891  00CC1E  0E00               	movlw	0
 11892  00CC20  6E0A               	movwf	___lldiv@quotient+1,c
 11893  00CC22  0E00               	movlw	0
 11894  00CC24  6E0B               	movwf	___lldiv@quotient+2,c
 11895  00CC26  0E00               	movlw	0
 11896  00CC28  6E0C               	movwf	___lldiv@quotient+3,c
 11897  00CC2A  5005               	movf	___lldiv@divisor,w,c
 11898  00CC2C  1006               	iorwf	___lldiv@divisor+1,w,c
 11899  00CC2E  1007               	iorwf	___lldiv@divisor+2,w,c
 11900  00CC30  1008               	iorwf	___lldiv@divisor+3,w,c
 11901  00CC32  B4D8               	btfsc	status,2,c
 11902  00CC34  D02A               	goto	l1364
 11903  00CC36  0E01               	movlw	1
 11904  00CC38  6E0D               	movwf	___lldiv@counter,c
 11905  00CC3A  D006               	goto	l1359
 11906  00CC3C  90D8               	bcf	status,0,c
 11907  00CC3E  3605               	rlcf	___lldiv@divisor,f,c
 11908  00CC40  3606               	rlcf	___lldiv@divisor+1,f,c
 11909  00CC42  3607               	rlcf	___lldiv@divisor+2,f,c
 11910  00CC44  3608               	rlcf	___lldiv@divisor+3,f,c
 11911  00CC46  2A0D               	incf	___lldiv@counter,f,c
 11912  00CC48                     l1359:
 11913  00CC48  AE08               	btfss	___lldiv@divisor+3,7,c
 11914  00CC4A  D7F8               	goto	l1360
 11915  00CC4C                     u5760:
 11916  00CC4C  90D8               	bcf	status,0,c
 11917  00CC4E  3609               	rlcf	___lldiv@quotient,f,c
 11918  00CC50  360A               	rlcf	___lldiv@quotient+1,f,c
 11919  00CC52  360B               	rlcf	___lldiv@quotient+2,f,c
 11920  00CC54  360C               	rlcf	___lldiv@quotient+3,f,c
 11921  00CC56  5005               	movf	___lldiv@divisor,w,c
 11922  00CC58  5C01               	subwf	___lldiv@dividend,w,c
 11923  00CC5A  5006               	movf	___lldiv@divisor+1,w,c
 11924  00CC5C  5802               	subwfb	___lldiv@dividend+1,w,c
 11925  00CC5E  5007               	movf	___lldiv@divisor+2,w,c
 11926  00CC60  5803               	subwfb	___lldiv@dividend+2,w,c
 11927  00CC62  5008               	movf	___lldiv@divisor+3,w,c
 11928  00CC64  5804               	subwfb	___lldiv@dividend+3,w,c
 11929  00CC66  A0D8               	btfss	status,0,c
 11930  00CC68  D009               	goto	l1363
 11931  00CC6A  5005               	movf	___lldiv@divisor,w,c
 11932  00CC6C  5E01               	subwf	___lldiv@dividend,f,c
 11933  00CC6E  5006               	movf	___lldiv@divisor+1,w,c
 11934  00CC70  5A02               	subwfb	___lldiv@dividend+1,f,c
 11935  00CC72  5007               	movf	___lldiv@divisor+2,w,c
 11936  00CC74  5A03               	subwfb	___lldiv@dividend+2,f,c
 11937  00CC76  5008               	movf	___lldiv@divisor+3,w,c
 11938  00CC78  5A04               	subwfb	___lldiv@dividend+3,f,c
 11939  00CC7A  8009               	bsf	___lldiv@quotient,0,c
 11940  00CC7C                     l1363:
 11941  00CC7C  90D8               	bcf	status,0,c
 11942  00CC7E  3208               	rrcf	___lldiv@divisor+3,f,c
 11943  00CC80  3207               	rrcf	___lldiv@divisor+2,f,c
 11944  00CC82  3206               	rrcf	___lldiv@divisor+1,f,c
 11945  00CC84  3205               	rrcf	___lldiv@divisor,f,c
 11946  00CC86  2E0D               	decfsz	___lldiv@counter,f,c
 11947  00CC88  D7E1               	goto	u5760
 11948  00CC8A                     l1364:
 11949  00CC8A  C009  F001         	movff	___lldiv@quotient,?___lldiv
 11950  00CC8E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11951  00CC92  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11952  00CC96  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11953  00CC9A  0012               	return		;funcret
 11954  00CC9C                     __end_of___lldiv:
 11955                           	opt stack 0
 11956                           tblptru	equ	0xFF8
 11957                           tblptrh	equ	0xFF7
 11958                           tblptrl	equ	0xFF6
 11959                           tablat	equ	0xFF5
 11960                           prodh	equ	0xFF4
 11961                           prodl	equ	0xFF3
 11962                           intcon	equ	0xFF2
 11963                           postinc0	equ	0xFEE
 11964                           wreg	equ	0xFE8
 11965                           postdec1	equ	0xFE5
 11966                           plusw1	equ	0xFE3
 11967                           fsr1l	equ	0xFE1
 11968                           indf2	equ	0xFDF
 11969                           postinc2	equ	0xFDE
 11970                           postdec2	equ	0xFDD
 11971                           plusw2	equ	0xFDB
 11972                           fsr2h	equ	0xFDA
 11973                           fsr2l	equ	0xFD9
 11974                           status	equ	0xFD8
 11975                           
 11976 ;; *************** function _mainOperation *****************
 11977 ;; Defined at:
 11978 ;;		line 111 in file "operationMode.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;		None
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  1    wreg      void 
 11985 ;; Registers used:
 11986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;Total ram usage:        0 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    2
 11999 ;; This function calls:
 12000 ;;		_UART_Init
 12001 ;; This function is called by:
 12002 ;;		_main
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           	psect	text31
 12007  00C7FE                     __ptext31:
 12008                           	opt stack 0
 12009  00C7FE                     _mainOperation:
 12010                           	opt stack 28
 12011                           
 12012                           ;operationMode.c: 113: UART_Init(9600);
 12013                           
 12014                           ;incstack = 0
 12015  00C7FE  0E80               	movlw	128
 12016  00C800  6E0F               	movwf	UART_Init@baud,c
 12017  00C802  0E25               	movlw	37
 12018  00C804  6E10               	movwf	UART_Init@baud+1,c
 12019  00C806  0E00               	movlw	0
 12020  00C808  6E11               	movwf	UART_Init@baud+2,c
 12021  00C80A  0E00               	movlw	0
 12022  00C80C  6E12               	movwf	UART_Init@baud+3,c
 12023  00C80E  ECCC  F065         	call	_UART_Init	;wreg free
 12024  00C812  0012               	return		;funcret
 12025  00C814                     __end_of_mainOperation:
 12026                           	opt stack 0
 12027                           tblptru	equ	0xFF8
 12028                           tblptrh	equ	0xFF7
 12029                           tblptrl	equ	0xFF6
 12030                           tablat	equ	0xFF5
 12031                           prodh	equ	0xFF4
 12032                           prodl	equ	0xFF3
 12033                           intcon	equ	0xFF2
 12034                           postinc0	equ	0xFEE
 12035                           wreg	equ	0xFE8
 12036                           postdec1	equ	0xFE5
 12037                           plusw1	equ	0xFE3
 12038                           fsr1l	equ	0xFE1
 12039                           indf2	equ	0xFDF
 12040                           postinc2	equ	0xFDE
 12041                           postdec2	equ	0xFDD
 12042                           plusw2	equ	0xFDB
 12043                           fsr2h	equ	0xFDA
 12044                           fsr2l	equ	0xFD9
 12045                           status	equ	0xFD8
 12046                           
 12047 ;; *************** function _UART_Init *****************
 12048 ;; Defined at:
 12049 ;;		line 197 in file "UART_PIC.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;  baud            4   14[COMRAM] long 
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      void 
 12056 ;; Registers used:
 12057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;Total ram usage:        8 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    1
 12070 ;; This function calls:
 12071 ;;		___aldiv
 12072 ;; This function is called by:
 12073 ;;		_mainOperation
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text32
 12078  00CB98                     __ptext32:
 12079                           	opt stack 0
 12080  00CB98                     _UART_Init:
 12081                           	opt stack 28
 12082                           
 12083                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 12084                           
 12085                           ;incstack = 0
 12086  00CB98  0E00               	movlw	0
 12087  00CB9A  6E01               	movwf	___aldiv@dividend,c
 12088  00CB9C  0E5A               	movlw	90
 12089  00CB9E  6E02               	movwf	___aldiv@dividend+1,c
 12090  00CBA0  0E62               	movlw	98
 12091  00CBA2  6E03               	movwf	___aldiv@dividend+2,c
 12092  00CBA4  0E02               	movlw	2
 12093  00CBA6  6E04               	movwf	___aldiv@dividend+3,c
 12094  00CBA8  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 12095  00CBAC  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 12096  00CBB0  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 12097  00CBB4  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 12098  00CBB8  0E06               	movlw	6
 12099  00CBBA                     u5785:
 12100  00CBBA  90D8               	bcf	status,0,c
 12101  00CBBC  3613               	rlcf	??_UART_Init,f,c
 12102  00CBBE  3614               	rlcf	??_UART_Init+1,f,c
 12103  00CBC0  3615               	rlcf	??_UART_Init+2,f,c
 12104  00CBC2  3616               	rlcf	??_UART_Init+3,f,c
 12105  00CBC4  2EE8               	decfsz	wreg,f,c
 12106  00CBC6  D7F9               	goto	u5785
 12107  00CBC8  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 12108  00CBCC  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 12109  00CBD0  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 12110  00CBD4  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 12111  00CBD8  EC04  F067         	call	___aldiv	;wreg free
 12112  00CBDC  0401               	decf	?___aldiv,w,c
 12113  00CBDE  6EAF               	movwf	4015,c	;volatile
 12114                           
 12115                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 12116  00CBE0  9CAC               	bcf	4012,6,c	;volatile
 12117                           
 12118                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 12119  00CBE2  98AC               	bcf	4012,4,c	;volatile
 12120                           
 12121                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 12122  00CBE4  8AAC               	bsf	4012,5,c	;volatile
 12123                           
 12124                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 12125  00CBE6  9CAB               	bcf	4011,6,c	;volatile
 12126                           
 12127                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 12128  00CBE8  88AB               	bsf	4011,4,c	;volatile
 12129                           
 12130                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 12131  00CBEA  EE20 F008          	lfsr	2,8
 12132  00CBEE  5078               	movf	_UART,w,c
 12133  00CBF0  26D9               	addwf	fsr2l,f,c
 12134  00CBF2  5079               	movf	_UART+1,w,c
 12135  00CBF4  22DA               	addwfc	fsr2h,f,c
 12136  00CBF6  0E01               	movlw	1
 12137  00CBF8  6EDF               	movwf	indf2,c
 12138                           
 12139                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 12140  00CBFA  EE20 F009          	lfsr	2,9
 12141  00CBFE  5078               	movf	_UART,w,c
 12142  00CC00  26D9               	addwf	fsr2l,f,c
 12143  00CC02  5079               	movf	_UART+1,w,c
 12144  00CC04  22DA               	addwfc	fsr2h,f,c
 12145  00CC06  0E01               	movlw	1
 12146  00CC08  6EDF               	movwf	indf2,c
 12147                           
 12148                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 12149  00CC0A  0E50               	movlw	low _arr_dataRX
 12150  00CC0C  6E70               	movwf	_uart+4,c	;volatile
 12151  00CC0E  0E01               	movlw	high _arr_dataRX
 12152  00CC10  6E71               	movwf	_uart+5,c	;volatile
 12153                           
 12154                           ;UART_PIC.c: 229: TRISC6 = 0;
 12155  00CC12  9C94               	bcf	3988,6,c	;volatile
 12156                           
 12157                           ;UART_PIC.c: 230: TRISC7 = 1;
 12158  00CC14  8E94               	bsf	3988,7,c	;volatile
 12159                           
 12160                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 12161  00CC16  8EAB               	bsf	4011,7,c	;volatile
 12162  00CC18  0012               	return		;funcret
 12163  00CC1A                     __end_of_UART_Init:
 12164                           	opt stack 0
 12165                           tblptru	equ	0xFF8
 12166                           tblptrh	equ	0xFF7
 12167                           tblptrl	equ	0xFF6
 12168                           tablat	equ	0xFF5
 12169                           prodh	equ	0xFF4
 12170                           prodl	equ	0xFF3
 12171                           intcon	equ	0xFF2
 12172                           postinc0	equ	0xFEE
 12173                           wreg	equ	0xFE8
 12174                           postdec1	equ	0xFE5
 12175                           plusw1	equ	0xFE3
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           plusw2	equ	0xFDB
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function ___aldiv *****************
 12186 ;; Defined at:
 12187 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;  dividend        4    0[COMRAM] long 
 12190 ;;  divisor         4    4[COMRAM] long 
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;  quotient        4   10[COMRAM] long 
 12193 ;;  sign            1    9[COMRAM] unsigned char 
 12194 ;;  counter         1    8[COMRAM] unsigned char 
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  4    0[COMRAM] long 
 12197 ;; Registers used:
 12198 ;;		wreg, status,2, status,0
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12204 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12207 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12208 ;;Total ram usage:       14 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; This function calls:
 12211 ;;		Nothing
 12212 ;; This function is called by:
 12213 ;;		_UART_Init
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           	psect	text33
 12218  00CE08                     __ptext33:
 12219                           	opt stack 0
 12220  00CE08                     ___aldiv:
 12221                           	opt stack 28
 12222                           
 12223                           ;incstack = 0
 12224  00CE08  0E00               	movlw	0
 12225  00CE0A  6E0A               	movwf	___aldiv@sign,c
 12226  00CE0C  AE08               	btfss	___aldiv@divisor+3,7,c
 12227  00CE0E  D00A               	goto	l1059
 12228  00CE10  1E08               	comf	___aldiv@divisor+3,f,c
 12229  00CE12  1E07               	comf	___aldiv@divisor+2,f,c
 12230  00CE14  1E06               	comf	___aldiv@divisor+1,f,c
 12231  00CE16  6C05               	negf	___aldiv@divisor,c
 12232  00CE18  0E00               	movlw	0
 12233  00CE1A  2206               	addwfc	___aldiv@divisor+1,f,c
 12234  00CE1C  2207               	addwfc	___aldiv@divisor+2,f,c
 12235  00CE1E  2208               	addwfc	___aldiv@divisor+3,f,c
 12236  00CE20  0E01               	movlw	1
 12237  00CE22  6E0A               	movwf	___aldiv@sign,c
 12238  00CE24                     l1059:
 12239  00CE24  AE04               	btfss	___aldiv@dividend+3,7,c
 12240  00CE26  D00A               	goto	l1060
 12241  00CE28  1E04               	comf	___aldiv@dividend+3,f,c
 12242  00CE2A  1E03               	comf	___aldiv@dividend+2,f,c
 12243  00CE2C  1E02               	comf	___aldiv@dividend+1,f,c
 12244  00CE2E  6C01               	negf	___aldiv@dividend,c
 12245  00CE30  0E00               	movlw	0
 12246  00CE32  2202               	addwfc	___aldiv@dividend+1,f,c
 12247  00CE34  2203               	addwfc	___aldiv@dividend+2,f,c
 12248  00CE36  2204               	addwfc	___aldiv@dividend+3,f,c
 12249  00CE38  0E01               	movlw	1
 12250  00CE3A  1A0A               	xorwf	___aldiv@sign,f,c
 12251  00CE3C                     l1060:
 12252  00CE3C  0E00               	movlw	0
 12253  00CE3E  6E0B               	movwf	___aldiv@quotient,c
 12254  00CE40  0E00               	movlw	0
 12255  00CE42  6E0C               	movwf	___aldiv@quotient+1,c
 12256  00CE44  0E00               	movlw	0
 12257  00CE46  6E0D               	movwf	___aldiv@quotient+2,c
 12258  00CE48  0E00               	movlw	0
 12259  00CE4A  6E0E               	movwf	___aldiv@quotient+3,c
 12260  00CE4C  5005               	movf	___aldiv@divisor,w,c
 12261  00CE4E  1006               	iorwf	___aldiv@divisor+1,w,c
 12262  00CE50  1007               	iorwf	___aldiv@divisor+2,w,c
 12263  00CE52  1008               	iorwf	___aldiv@divisor+3,w,c
 12264  00CE54  B4D8               	btfsc	status,2,c
 12265  00CE56  D02A               	goto	l1067
 12266  00CE58  0E01               	movlw	1
 12267  00CE5A  6E09               	movwf	___aldiv@counter,c
 12268  00CE5C  D006               	goto	l1062
 12269  00CE5E  90D8               	bcf	status,0,c
 12270  00CE60  3605               	rlcf	___aldiv@divisor,f,c
 12271  00CE62  3606               	rlcf	___aldiv@divisor+1,f,c
 12272  00CE64  3607               	rlcf	___aldiv@divisor+2,f,c
 12273  00CE66  3608               	rlcf	___aldiv@divisor+3,f,c
 12274  00CE68  2A09               	incf	___aldiv@counter,f,c
 12275  00CE6A                     l1062:
 12276  00CE6A  AE08               	btfss	___aldiv@divisor+3,7,c
 12277  00CE6C  D7F8               	goto	l1063
 12278  00CE6E                     u5720:
 12279  00CE6E  90D8               	bcf	status,0,c
 12280  00CE70  360B               	rlcf	___aldiv@quotient,f,c
 12281  00CE72  360C               	rlcf	___aldiv@quotient+1,f,c
 12282  00CE74  360D               	rlcf	___aldiv@quotient+2,f,c
 12283  00CE76  360E               	rlcf	___aldiv@quotient+3,f,c
 12284  00CE78  5005               	movf	___aldiv@divisor,w,c
 12285  00CE7A  5C01               	subwf	___aldiv@dividend,w,c
 12286  00CE7C  5006               	movf	___aldiv@divisor+1,w,c
 12287  00CE7E  5802               	subwfb	___aldiv@dividend+1,w,c
 12288  00CE80  5007               	movf	___aldiv@divisor+2,w,c
 12289  00CE82  5803               	subwfb	___aldiv@dividend+2,w,c
 12290  00CE84  5008               	movf	___aldiv@divisor+3,w,c
 12291  00CE86  5804               	subwfb	___aldiv@dividend+3,w,c
 12292  00CE88  A0D8               	btfss	status,0,c
 12293  00CE8A  D009               	goto	l1066
 12294  00CE8C  5005               	movf	___aldiv@divisor,w,c
 12295  00CE8E  5E01               	subwf	___aldiv@dividend,f,c
 12296  00CE90  5006               	movf	___aldiv@divisor+1,w,c
 12297  00CE92  5A02               	subwfb	___aldiv@dividend+1,f,c
 12298  00CE94  5007               	movf	___aldiv@divisor+2,w,c
 12299  00CE96  5A03               	subwfb	___aldiv@dividend+2,f,c
 12300  00CE98  5008               	movf	___aldiv@divisor+3,w,c
 12301  00CE9A  5A04               	subwfb	___aldiv@dividend+3,f,c
 12302  00CE9C  800B               	bsf	___aldiv@quotient,0,c
 12303  00CE9E                     l1066:
 12304  00CE9E  90D8               	bcf	status,0,c
 12305  00CEA0  3208               	rrcf	___aldiv@divisor+3,f,c
 12306  00CEA2  3207               	rrcf	___aldiv@divisor+2,f,c
 12307  00CEA4  3206               	rrcf	___aldiv@divisor+1,f,c
 12308  00CEA6  3205               	rrcf	___aldiv@divisor,f,c
 12309  00CEA8  2E09               	decfsz	___aldiv@counter,f,c
 12310  00CEAA  D7E1               	goto	u5720
 12311  00CEAC                     l1067:
 12312  00CEAC  500A               	movf	___aldiv@sign,w,c
 12313  00CEAE  B4D8               	btfsc	status,2,c
 12314  00CEB0  D008               	goto	l1068
 12315  00CEB2  1E0E               	comf	___aldiv@quotient+3,f,c
 12316  00CEB4  1E0D               	comf	___aldiv@quotient+2,f,c
 12317  00CEB6  1E0C               	comf	___aldiv@quotient+1,f,c
 12318  00CEB8  6C0B               	negf	___aldiv@quotient,c
 12319  00CEBA  0E00               	movlw	0
 12320  00CEBC  220C               	addwfc	___aldiv@quotient+1,f,c
 12321  00CEBE  220D               	addwfc	___aldiv@quotient+2,f,c
 12322  00CEC0  220E               	addwfc	___aldiv@quotient+3,f,c
 12323  00CEC2                     l1068:
 12324  00CEC2  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 12325  00CEC6  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 12326  00CECA  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 12327  00CECE  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 12328  00CED2  0012               	return	
 12329  00CED4                     __end_of___aldiv:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           postinc0	equ	0xFEE
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           plusw1	equ	0xFE3
 12342                           fsr1l	equ	0xFE1
 12343                           indf2	equ	0xFDF
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           plusw2	equ	0xFDB
 12347                           fsr2h	equ	0xFDA
 12348                           fsr2l	equ	0xFD9
 12349                           status	equ	0xFD8
 12350                           
 12351 ;; *************** function _initLCD *****************
 12352 ;; Defined at:
 12353 ;;		line 31 in file "standbyMode.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;		None
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;		None
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  1    wreg      void 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0, cstack
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;Total ram usage:        1 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; Hardware stack levels required when called:    2
 12374 ;; This function calls:
 12375 ;;		_lcdInst
 12376 ;; This function is called by:
 12377 ;;		_main
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381                           	psect	text34
 12382  00C950                     __ptext34:
 12383                           	opt stack 0
 12384  00C950                     _initLCD:
 12385                           	opt stack 28
 12386                           
 12387                           ;standbyMode.c: 39: _delay((unsigned long)((15)*(40000000/4000.0)));
 12388                           
 12389                           ;incstack = 0
 12390  00C950  0EC3               	movlw	195
 12391  00C952  6E04               	movwf	??_initLCD& (0+255),c
 12392  00C954  0ECD               	movlw	205
 12393  00C956                     u8607:
 12394  00C956  2EE8               	decfsz	wreg,f,c
 12395  00C958  D7FE               	bra	u8607
 12396  00C95A  2E04               	decfsz	??_initLCD& (0+255),f,c
 12397  00C95C  D7FC               	bra	u8607
 12398  00C95E  F000               	nop	
 12399                           
 12400                           ;standbyMode.c: 40: lcdInst(0b00110011);
 12401  00C960  0E33               	movlw	51
 12402  00C962  ECE1  F063         	call	_lcdInst
 12403                           
 12404                           ;standbyMode.c: 41: lcdInst(0b00110010);
 12405  00C966  0E32               	movlw	50
 12406  00C968  ECE1  F063         	call	_lcdInst
 12407                           
 12408                           ;standbyMode.c: 42: lcdInst(0b00101000);
 12409  00C96C  0E28               	movlw	40
 12410  00C96E  ECE1  F063         	call	_lcdInst
 12411                           
 12412                           ;standbyMode.c: 43: lcdInst(0b00001111);
 12413  00C972  0E0F               	movlw	15
 12414  00C974  ECE1  F063         	call	_lcdInst
 12415                           
 12416                           ;standbyMode.c: 44: lcdInst(0b00000110);
 12417  00C978  0E06               	movlw	6
 12418  00C97A  ECE1  F063         	call	_lcdInst
 12419                           
 12420                           ;standbyMode.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12421  00C97E  0E01               	movlw	1
 12422  00C980  ECE1  F063         	call	_lcdInst
 12423  00C984  0EC3               	movlw	195
 12424  00C986  6E04               	movwf	??_initLCD& (0+255),c
 12425  00C988  0ECD               	movlw	205
 12426  00C98A                     u8617:
 12427  00C98A  2EE8               	decfsz	wreg,f,c
 12428  00C98C  D7FE               	bra	u8617
 12429  00C98E  2E04               	decfsz	??_initLCD& (0+255),f,c
 12430  00C990  D7FC               	bra	u8617
 12431  00C992  F000               	nop	
 12432                           
 12433                           ;standbyMode.c: 48: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 12434  00C994  0E0F               	movlw	15
 12435  00C996  ECE1  F063         	call	_lcdInst
 12436  00C99A  0012               	return		;funcret
 12437  00C99C                     __end_of_initLCD:
 12438                           	opt stack 0
 12439                           tblptru	equ	0xFF8
 12440                           tblptrh	equ	0xFF7
 12441                           tblptrl	equ	0xFF6
 12442                           tablat	equ	0xFF5
 12443                           prodh	equ	0xFF4
 12444                           prodl	equ	0xFF3
 12445                           intcon	equ	0xFF2
 12446                           postinc0	equ	0xFEE
 12447                           wreg	equ	0xFE8
 12448                           postdec1	equ	0xFE5
 12449                           plusw1	equ	0xFE3
 12450                           fsr1l	equ	0xFE1
 12451                           indf2	equ	0xFDF
 12452                           postinc2	equ	0xFDE
 12453                           postdec2	equ	0xFDD
 12454                           plusw2	equ	0xFDB
 12455                           fsr2h	equ	0xFDA
 12456                           fsr2l	equ	0xFD9
 12457                           status	equ	0xFD8
 12458                           
 12459 ;; *************** function _lcdInst *****************
 12460 ;; Defined at:
 12461 ;;		line 17 in file "standbyMode.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;  data            1    wreg     unsigned char 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  data            1    2[COMRAM] unsigned char 
 12466 ;; Return value:  Size  Location     Type
 12467 ;;                  1    wreg      void 
 12468 ;; Registers used:
 12469 ;;		wreg, status,2, status,0, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;Total ram usage:        1 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    1
 12482 ;; This function calls:
 12483 ;;		_lcdNibble
 12484 ;; This function is called by:
 12485 ;;		_main
 12486 ;;		_initLCD
 12487 ;;		_viewLogs
 12488 ;;		_displayLogs
 12489 ;;		_food_press
 12490 ;;		_diet_press
 12491 ;;		_which_drawer
 12492 ;;		_standbyMode
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text35
 12497  00C7C2                     __ptext35:
 12498                           	opt stack 0
 12499  00C7C2                     _lcdInst:
 12500                           	opt stack 27
 12501                           
 12502                           ;incstack = 0
 12503                           ;lcdInst@data stored from wreg
 12504  00C7C2  6E03               	movwf	lcdInst@data,c
 12505                           
 12506                           ;standbyMode.c: 25: LATDbits.LATD2 = 0;
 12507  00C7C4  948C               	bcf	3980,2,c	;volatile
 12508                           
 12509                           ;standbyMode.c: 26: lcdNibble(data);
 12510  00C7C6  5003               	movf	lcdInst@data,w,c
 12511  00C7C8  EC4E  F065         	call	_lcdNibble
 12512                           
 12513                           ;standbyMode.c: 27: _delay((unsigned long)((100)*(40000000/4000000.0)));
 12514  00C7CC  0EC8               	movlw	200
 12515  00C7CE                     u8627:
 12516  00C7CE  D000               	nop2	
 12517  00C7D0  2EE8               	decfsz	wreg,f,c
 12518  00C7D2  D7FD               	bra	u8627
 12519  00C7D4  0012               	return		;funcret
 12520  00C7D6                     __end_of_lcdInst:
 12521                           	opt stack 0
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           prodh	equ	0xFF4
 12527                           prodl	equ	0xFF3
 12528                           intcon	equ	0xFF2
 12529                           postinc0	equ	0xFEE
 12530                           wreg	equ	0xFE8
 12531                           postdec1	equ	0xFE5
 12532                           plusw1	equ	0xFE3
 12533                           fsr1l	equ	0xFE1
 12534                           indf2	equ	0xFDF
 12535                           postinc2	equ	0xFDE
 12536                           postdec2	equ	0xFDD
 12537                           plusw2	equ	0xFDB
 12538                           fsr2h	equ	0xFDA
 12539                           fsr2l	equ	0xFD9
 12540                           status	equ	0xFD8
 12541                           
 12542 ;; *************** function _lcdNibble *****************
 12543 ;; Defined at:
 12544 ;;		line 52 in file "standbyMode.c"
 12545 ;; Parameters:    Size  Location     Type
 12546 ;;  data            1    wreg     unsigned char 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  data            1    1[COMRAM] unsigned char 
 12549 ;;  temp            1    0[COMRAM] unsigned char 
 12550 ;; Return value:  Size  Location     Type
 12551 ;;                  1    wreg      void 
 12552 ;; Registers used:
 12553 ;;		wreg, status,2, status,0
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12563 ;;Total ram usage:        2 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; This function calls:
 12566 ;;		Nothing
 12567 ;; This function is called by:
 12568 ;;		_lcdInst
 12569 ;;		_putch
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           	psect	text36
 12574  00CA9C                     __ptext36:
 12575                           	opt stack 0
 12576  00CA9C                     _lcdNibble:
 12577                           	opt stack 27
 12578                           
 12579                           ;incstack = 0
 12580                           ;lcdNibble@data stored from wreg
 12581  00CA9C  6E02               	movwf	lcdNibble@data,c
 12582                           
 12583                           ;standbyMode.c: 60: char temp = (unsigned char) (data & 0xF0);
 12584  00CA9E  5002               	movf	lcdNibble@data,w,c
 12585  00CAA0  0BF0               	andlw	240
 12586  00CAA2  6E01               	movwf	lcdNibble@temp,c
 12587                           
 12588                           ;standbyMode.c: 61: LATD = (unsigned char) (LATD & 0x0F);
 12589  00CAA4  508C               	movf	3980,w,c	;volatile
 12590  00CAA6  0B0F               	andlw	15
 12591  00CAA8  6E8C               	movwf	3980,c	;volatile
 12592                           
 12593                           ;standbyMode.c: 62: LATD = (unsigned char) (temp | LATD);
 12594  00CAAA  5001               	movf	lcdNibble@temp,w,c
 12595  00CAAC  108C               	iorwf	3980,w,c	;volatile
 12596  00CAAE  6E8C               	movwf	3980,c	;volatile
 12597                           
 12598                           ;standbyMode.c: 64: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12599  00CAB0  0E00               	movlw	0
 12600  00CAB2  BEF2               	btfsc	intcon,7,c	;volatile
 12601  00CAB4  0E01               	movlw	1
 12602  00CAB6  6E69               	movwf	standbyMode@LCDinterruptState,c
 12603  00CAB8  9EF2               	bcf	intcon,7,c	;volatile
 12604  00CABA  868C               	bsf	3980,3,c	;volatile
 12605  00CABC  0E53               	movlw	83
 12606  00CABE                     u8637:
 12607  00CABE  2EE8               	decfsz	wreg,f,c
 12608  00CAC0  D7FE               	bra	u8637
 12609  00CAC2  F000               	nop	
 12610  00CAC4  968C               	bcf	3980,3,c	;volatile
 12611  00CAC6  0EC8               	movlw	200
 12612  00CAC8                     u8647:
 12613  00CAC8  D000               	nop2	
 12614  00CACA  2EE8               	decfsz	wreg,f,c
 12615  00CACC  D7FD               	bra	u8647
 12616  00CACE  B069               	btfsc	standbyMode@LCDinterruptState,0,c
 12617  00CAD0  D002               	bra	u4015
 12618  00CAD2  9EF2               	bcf	intcon,7,c	;volatile
 12619  00CAD4  D001               	bra	u4016
 12620  00CAD6                     u4015:
 12621  00CAD6  8EF2               	bsf	intcon,7,c	;volatile
 12622  00CAD8                     u4016:
 12623                           
 12624                           ;standbyMode.c: 67: data = (unsigned char) (data << 4);
 12625  00CAD8  3802               	swapf	lcdNibble@data,w,c
 12626  00CADA  0BF0               	andlw	240
 12627  00CADC  6E02               	movwf	lcdNibble@data,c
 12628                           
 12629                           ;standbyMode.c: 68: temp = (unsigned char) (data & 0xF0);
 12630  00CADE  5002               	movf	lcdNibble@data,w,c
 12631  00CAE0  0BF0               	andlw	240
 12632  00CAE2  6E01               	movwf	lcdNibble@temp,c
 12633                           
 12634                           ;standbyMode.c: 69: LATD = (unsigned char) (LATD & 0x0F);
 12635  00CAE4  508C               	movf	3980,w,c	;volatile
 12636  00CAE6  0B0F               	andlw	15
 12637  00CAE8  6E8C               	movwf	3980,c	;volatile
 12638                           
 12639                           ;standbyMode.c: 70: LATD = (unsigned char) (temp | LATD);
 12640  00CAEA  5001               	movf	lcdNibble@temp,w,c
 12641  00CAEC  108C               	iorwf	3980,w,c	;volatile
 12642  00CAEE  6E8C               	movwf	3980,c	;volatile
 12643                           
 12644                           ;standbyMode.c: 72: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 12645  00CAF0  0E00               	movlw	0
 12646  00CAF2  BEF2               	btfsc	intcon,7,c	;volatile
 12647  00CAF4  0E01               	movlw	1
 12648  00CAF6  6E69               	movwf	standbyMode@LCDinterruptState,c
 12649  00CAF8  9EF2               	bcf	intcon,7,c	;volatile
 12650  00CAFA  868C               	bsf	3980,3,c	;volatile
 12651  00CAFC  0E53               	movlw	83
 12652  00CAFE                     u8657:
 12653  00CAFE  2EE8               	decfsz	wreg,f,c
 12654  00CB00  D7FE               	bra	u8657
 12655  00CB02  F000               	nop	
 12656  00CB04  968C               	bcf	3980,3,c	;volatile
 12657  00CB06  0EC8               	movlw	200
 12658  00CB08                     u8667:
 12659  00CB08  D000               	nop2	
 12660  00CB0A  2EE8               	decfsz	wreg,f,c
 12661  00CB0C  D7FD               	bra	u8667
 12662  00CB0E  B069               	btfsc	standbyMode@LCDinterruptState,0,c
 12663  00CB10  D002               	bra	u4025
 12664  00CB12  9EF2               	bcf	intcon,7,c	;volatile
 12665  00CB14  D001               	bra	u4026
 12666  00CB16                     u4025:
 12667  00CB16  8EF2               	bsf	intcon,7,c	;volatile
 12668  00CB18                     u4026:
 12669  00CB18  0012               	return		;funcret
 12670  00CB1A                     __end_of_lcdNibble:
 12671                           	opt stack 0
 12672                           tblptru	equ	0xFF8
 12673                           tblptrh	equ	0xFF7
 12674                           tblptrl	equ	0xFF6
 12675                           tablat	equ	0xFF5
 12676                           prodh	equ	0xFF4
 12677                           prodl	equ	0xFF3
 12678                           intcon	equ	0xFF2
 12679                           postinc0	equ	0xFEE
 12680                           wreg	equ	0xFE8
 12681                           postdec1	equ	0xFE5
 12682                           plusw1	equ	0xFE3
 12683                           fsr1l	equ	0xFE1
 12684                           indf2	equ	0xFDF
 12685                           postinc2	equ	0xFDE
 12686                           postdec2	equ	0xFDD
 12687                           plusw2	equ	0xFDB
 12688                           fsr2h	equ	0xFDA
 12689                           fsr2l	equ	0xFD9
 12690                           status	equ	0xFD8
 12691                           tblptru	equ	0xFF8
 12692                           tblptrh	equ	0xFF7
 12693                           tblptrl	equ	0xFF6
 12694                           tablat	equ	0xFF5
 12695                           prodh	equ	0xFF4
 12696                           prodl	equ	0xFF3
 12697                           intcon	equ	0xFF2
 12698                           postinc0	equ	0xFEE
 12699                           wreg	equ	0xFE8
 12700                           postdec1	equ	0xFE5
 12701                           plusw1	equ	0xFE3
 12702                           fsr1l	equ	0xFE1
 12703                           indf2	equ	0xFDF
 12704                           postinc2	equ	0xFDE
 12705                           postdec2	equ	0xFDD
 12706                           plusw2	equ	0xFDB
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711                           	psect	rparam
 12712  0000                     tblptru	equ	0xFF8
 12713                           tblptrh	equ	0xFF7
 12714                           tblptrl	equ	0xFF6
 12715                           tablat	equ	0xFF5
 12716                           prodh	equ	0xFF4
 12717                           prodl	equ	0xFF3
 12718                           intcon	equ	0xFF2
 12719                           postinc0	equ	0xFEE
 12720                           wreg	equ	0xFE8
 12721                           postdec1	equ	0xFE5
 12722                           plusw1	equ	0xFE3
 12723                           fsr1l	equ	0xFE1
 12724                           indf2	equ	0xFDF
 12725                           postinc2	equ	0xFDE
 12726                           postdec2	equ	0xFDD
 12727                           plusw2	equ	0xFDB
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8


Data Sizes:
    Strings     666
    Constant    65
    Data        6
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     88     125
    BANK0           128    118     118
    BANK1           256      0      96
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_70(CODE[11]), STR_69(CODE[13]), STR_68(CODE[11]), STR_67(CODE[13]), 
		 -> STR_66(CODE[11]), STR_65(CODE[8]), STR_64(CODE[15]), STR_63(CODE[16]), 
		 -> STR_62(CODE[10]), STR_61(CODE[8]), STR_60(CODE[15]), STR_59(CODE[16]), 
		 -> STR_58(CODE[10]), STR_57(CODE[16]), STR_56(CODE[16]), STR_55(CODE[17]), 
		 -> STR_54(CODE[13]), STR_53(CODE[17]), STR_52(CODE[14]), STR_51(CODE[11]), 
		 -> STR_50(CODE[11]), STR_49(CODE[15]), STR_48(CODE[15]), STR_47(CODE[10]), 
		 -> STR_46(CODE[13]), STR_45(CODE[16]), STR_44(CODE[16]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[8]), STR_40(CODE[15]), STR_39(CODE[15]), 
		 -> STR_38(CODE[11]), STR_37(CODE[14]), STR_36(CODE[16]), STR_35(CODE[16]), 
		 -> STR_34(CODE[11]), STR_33(CODE[14]), STR_32(CODE[16]), STR_31(CODE[16]), 
		 -> STR_30(CODE[16]), STR_29(CODE[13]), STR_28(CODE[13]), STR_27(CODE[15]), 
		 -> STR_26(CODE[15]), STR_25(CODE[17]), STR_24(CODE[18]), STR_23(CODE[15]), 
		 -> STR_22(CODE[11]), STR_21(CODE[7]), STR_20(CODE[3]), STR_19(CODE[16]), 
		 -> STR_18(CODE[8]), STR_17(CODE[16]), STR_16(CODE[15]), STR_15(CODE[6]), 
		 -> STR_14(CODE[14]), STR_13(CODE[17]), STR_12(CODE[7]), STR_11(CODE[9]), 
		 -> STR_10(CODE[17]), STR_9(CODE[11]), STR_8(CODE[17]), STR_7(CODE[14]), 
		 -> STR_6(CODE[17]), STR_5(CODE[11]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 

    S75$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK1[16]), 

    S75$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _initEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_UART_Init
    _UART_Init->___aldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    _main->_standbyMode

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   93117
                                             85 COMRAM     3     3      0
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        122   120      2   82689
                                             81 COMRAM     4     2      2
                                              0 BANK0    118   118      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                         _initEEPROM
                            _lcdInst
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   10817
                                             36 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   24183
                                             69 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         33    31      2   13754
                                             36 COMRAM    33    31      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    2003
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEEPROM                                           2     2      0    1709
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1640
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   13712
                                             36 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   12170
                                             36 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    9584
                                             12 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1983
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                        0     0      0     550
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _UART_Init
       ___aldiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _initEEPROM
       _writeEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      60       7       37.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     76      76       5       92.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     58      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     153      34        0.0%
DATA                 0      0     153       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar  5 22:30:44 2018

                 _standbyMode F0BE        __end_of_verifyKeypress CA40                  ?_displayLogs 0025  
                 __CFG_CPD$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l201 E67E                           l210 E730  
                         l202 E698                           l220 E824                           l212 E760  
                         l204 E6B4                           l230 E90E                           l222 E852  
                         l215 E796                           l207 E6D2                           l240 EA2E  
                         l232 E93C                           l216 E7C4                           l208 E700  
                         l320 D0C2                           l400 CA0A                           l225 E886  
                         l401 CA20                           l250 EB74                           l226 E8B2  
                         l218 E7F4                           l243 EA70                           l235 E96C  
                         l411 D7C6                           l260 ECBC                           l252 EBB6  
                         l244 EAB0                           l236 E9AC                           l228 E8E0  
                         l324 CFDA                           l501 D34C                           l325 CFC0  
                         l317 D0BA                           l270 EE02                           l510 D426  
                         l326 D09C                           l430 D968                           l414 D852  
                         l406 D720                           l191 F02C                           l263 ECFE  
                         l255 EBF8                           l247 EAF2                           l239 E9EE  
                         l503 D3B2                           l327 CFC8                           l520 E146  
                         l272 EE44                           l264 ED3E                           l256 EC38  
                         l248 EB32                           l192 E60E                           l440 DECE  
                         l521 E146                           l281 EF82                           l193 E628  
                         l513 D496                           l361 D2A2                           l425 D8C2  
                         l409 D7CC                           l601 D4E6                           l530 E170  
                         l258 EC7A                           l450 E002                           l442 DF12  
                         l426 D8CE                           l283 EFD6                           l275 EE86  
                         l267 ED80                           l355 CFD2                           l371 D1B0  
                         l291 D18C                           l435 DDC6                           l419 D85E  
                         l611 D510                           l532 E1D2                           l268 EDC0  
                         l196 F0B4                           l364 D1A0                           l292 D0B0  
                         l444 DF56                           l541 E26E                           l525 E152  
                         l277 EEDA                           l197 E646                           l453 E040  
                         l445 DF9A                           l613 D630                           l198 E660  
                         l470 CD5E                           l438 DE5E                           l606 D4F2  
                         l710 FB24                           l702 F9B6                           l551 E344  
                         l543 E298                           l535 E214                           l279 EF2E  
                         l359 D1C2                           l703 F9F0                           l528 E25E  
                         l464 CD7E                           l472 CD66                           l368 D1A8  
                         l456 E0C4                           l632 D686                           l616 D5F0  
                         l720 FC6A                           l704 FACA                           l561 E428  
                         l553 E370                           l545 E2C2                           l465 CD54  
                         l289 D0CA                           l609 D672                           l617 D5C4  
                         l713 FB4A                           l466 CDFE                           l571 E512  
                         l563 E456                           l555 E39E                           l547 E2EC  
                         l491 D322                           l395 D1BA                           l459 E0D0  
                         l627 D62C                           l715 FCC6                           l484 CD76  
                         l740 C8C4                           l708 FAF8                           l660 F7FE  
                         l573 E542                           l565 E484                           l557 E3CC  
                         l549 E318                           l653 F46E                           l582 CF4A  
                         l590 CF06                           l662 F4F2                           l575 E572  
                         l567 E4B2                           l559 E3FA                           l479 CD6E  
                         l399 CA24                           l591 CF0E                           l583 CED6  
                         l671 F7F0                           l496 D32E                           l592 CF16  
                         l584 CFAC                           l680 F6A4                           l656 F47C  
                         l648 F1FE                           l577 E5A4                           l569 E4E2  
                         l593 CF1E                           l585 CEDE                           l673 F580  
                         l578 E5F8                           l762 CD48                           l594 CF26  
                         l586 CEE6                           l658 FC00                           l666 F52C  
                         l499 D414                           l595 CF2E                           l587 CEEE  
                         l691 F83E                           l596 CF36                           l588 CEF6  
                         l684 F6F0                           l597 CF40                           l589 CEFE  
                         l685 F72A                           l677 F5DE                           l669 F53A  
                         l950 D994                           l678 F6B0                           l951 D9A4  
                         l695 F8A4                           l687 F7F8                           l679 F652  
                         l688 FAB6                           l696 F976                           l961 DA48  
                         l953 D9B8                           l697 F918                           l954 D9B2  
                         l698 F96A                           l972 DB1E                           l973 DABE  
                         l982 DB48                           l966 DA76                           l983 DB6C  
                         l967 DA44                           l959 D9E6                           l984 DB74  
                         l985 DBA0                           l977 DB2E                           l969 DAA4  
                         l994 DBCE                           l986 DB8A                           l978 DAEE  
                         l995 DC74                           l997 DC5E                           l998 DBD4  
                         l999 DC6E                  __CFG_CPB$OFF 000000                           wreg 000FE8  
               _mainOperation C7FE                  __CFG_LVP$OFF 000000           standbyMode@dietType 00B0  
                __CFG_WDT$OFF 000000                          l1000 DC18                          l1060 CE3C  
                        l1062 CE6A                          l1063 CE5E                          l1066 CE9E  
                        l1067 CEAC                          l1059 CE24                          l1068 CEC2  
                        l1412 C9BA                          l1413 C9B2                          l1333 C82A  
                        l1422 C8E2                          l1423 C8DA                          l1360 CC3C  
                        l1416 C9DA                          l1417 C9E4                          l1426 C8FA  
                        l1363 CC7C                          l1427 C904                          l1364 CC8A  
                        l1359 CC48                          l5114 C8A4                          l4472 DAC2  
                        l6056 C88C                          l6080 CCE8                          l4554 C7EC  
                        l6090 CD14                          l6242 F2FC                          l6092 CD1C  
                        l6068 CCB4                          l6340 F588                          l6252 F324  
                        l4486 DAF2                          l6078 CCE0                          l6352 F5DE  
                        l4906 CA20                          l6356 F5E4                          l5726 E20E  
                        l6462 F8AA                          l6446 F84E                          l6458 F8A4  
                        l6574 FBF6                          _ADON 007E10                          STR_1 FFE9  
                        STR_2 FFE1                          STR_3 FF88                          STR_4 FEAA  
                        STR_5 FF88                          STR_6 FDCB                          STR_7 FF20  
                        STR_8 FDDC                          STR_9 FF88                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4015 CAD6                          u4016 CAD8  
                        u4025 CB16                          u4026 CB18                          u4060 C9BE  
                        u4300 DBBC                          u4320 DC7C                          u4090 C8E6  
                        u6110 E1EE                          u6031 E136                          u4290 DBA8  
                        u7120 D606                          u7210 CD14                          u7130 D628  
                        _RCIE 007CED                          _RCIF 007CF5                          u7301 F110  
                        u8007 F4FE                          u5720 CE6E                          u7080 D5A2  
                        u8017 F554                          u7410 F548                          u7330 F324  
                        u8107 F924                          u8027 F600                          u5900 D96C  
                        u7245 CA74                          u8117 F95C                          u8037 F638  
                        u7261 F0C8                          u7190 CCE0                          u7255 C84E  
                        u5911 D2F6                          u8207 D644                          u8127 F982  
                        u8047 F65E                          u7271 F0DA                          u5760 CC4C  
                        u7256 C850                          u7360 F48A                          u8217 D6D6  
                        u8137 FC36                          u8057 F696                          u7281 F0EC  
                        u7370 F492                          u8307 D8D8                          u8227 D708  
                        u8147 FC5C                          u8067 F6BC                          u7291 F0FE  
                        u7460 F5E4                          u7380 F49E                          u8317 D8F0  
                        u8237 D73A                          u8157 FC76                          u8077 F80A  
                        u5870 D87E                          u7630 FAF6                          u8407 DEC0  
                        u8327 D910                          u8247 D76C                          u8167 FCAE  
                        u8087 F8C6                          u7560 F8AA                          u5785 CBBA  
                        u8417 DF04                          u8337 D928                          u8257 D786  
                        u8177 FCD2                          u8097 F8FE                          u7650 FB06  
                        u8507 E09C                          u8427 DF48                          u8347 D95A  
                        u8267 D7B8                          u8187 FD0A                          u5980 D360  
                        u7660 FBF6                          u8517 D2B8                          u8437 DF8C  
                        u8357 DD6E                          u8277 D7D8                          u8197 D4B2  
                        u7670 FC08                          u8607 C956                          u8527 D3C6  
                        u8447 DFAA                          u8367 DDB8                          u8287 D810  
                        u8617 C98A                          u8537 D456                          u8457 DFF4  
                        u8377 DE0E                          u8297 D82A                          u8627 C7CE  
                        u8547 D488                          u8467 E012                          u8387 DE50  
                        u7907 F246                          u8637 CABE                          u8557 E0E8  
                        u8477 E032                          u8397 DE6E                          u7917 F33E  
                        u6990 D55C                          u8647 CAC8                          u8567 E184  
                        u8487 E050                          u7927 F370                          u8657 CAFE  
                        u8577 E5B0                          u8497 E082                          u7937 F38A  
                        u7857 CB56                          u8667 CB08                          u8587 E5E2  
                        u7947 F3E0                          u7867 F196                          u8597 C7E2  
                        u7957 F3FA                          u7877 F1BC                          u7967 F42C  
                        u7887 F1D6                          u7977 F446                          u7897 F20E  
                        u7987 F4AA                          _UART 0078                          u7997 F4E2  
                        _TRMT 007D61                          _TXIE 007CEC                          _TXIF 007CF4  
       __end_of_decode_drawer CFB6             viewLogs@logNumber 0050                          _main CB1A  
                        _keys FD23               food_press@F3126 0061                          _uart 006C  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 0051           standbyMode@keypress 00DB                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM C8A2               diet_press@F3141 0059  
             ?_verifyKeypress 0001              __end_of_LCD_LEFT FD5F           standbyMode@whichKey 00D9  
             food_press@count 0031               food_press@tally 002B         I2C_Master_Read@ackBit 0002  
            ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001               __end_of___aldiv CED4            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FDA9  
                       STR_11 FFC8                         STR_20 FEC5                         STR_12 FFF1  
                       STR_21 FEC1                         STR_13 FDCB                         STR_14 FF20  
                       STR_22 FEBD                         STR_30 FE6D                         STR_15 FFF8  
                       STR_23 FEB9                         STR_31 FE0D                         STR_32 FE0D  
                       STR_40 FE8C                         STR_16 FEC8                         STR_24 FD64  
                       STR_41 FFE9                         STR_33 FF04                         STR_17 FE1D  
                       STR_25 FDBA                         STR_42 FDCB                         STR_18 FFD9  
                       STR_50 FFA9                         STR_34 FF9E                         STR_26 FE9B  
                       STR_51 FF7D                         STR_27 FE7D                         STR_35 FE3D  
                       STR_19 FE2D                         STR_43 FD98                         STR_36 FE3D  
                       STR_28 FF49                         STR_52 FF2E                         STR_60 FEF5  
                       STR_44 FE5D                         STR_53 FD98                         STR_61 FFD1  
                       STR_29 FF63                         STR_37 FF12                         STR_45 FDED  
                       STR_70 FF93                         STR_38 FF9E                         STR_62 FFBE  
                       STR_46 FF70                         STR_54 FF56                         STR_63 FDFD  
                       STR_47 FFB4                         STR_39 FE8C                         STR_55 FD87  
                       STR_71 FD76                         STR_64 FEF5                         STR_48 FED7  
                       STR_56 FE4D                         STR_65 FFD1                         STR_57 FE6D  
                       STR_49 FEE6                         STR_58 FFBE                         STR_66 FF93  
                       STR_67 FF3C                         STR_59 FDFD                         STR_68 FF93  
                       STR_69 FF3C               __end_of___lldiv CC9C             viewLogs@returnVal 004C  
             __end_of___lwdiv C9EE               __end_of___lwmod C90E                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                ?_mainOperation 0001                         _TXREG 000FAD  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000               __end_of_getFlat D0A6                 __CFG_WRT3$OFF 000000  
             diet_press@count 002F               __end_of_lcdInst C7D6               __end_of_getLong D2AC  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000            __size_of_UART_Init 0082  
                 initEEPROM@i 0003                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD C99C                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FD4F                  displayLogs@n 0044               __end_of_isdigit C832  
                       _input FD34                         _rowUp 007D                         _putch C7D6  
                       tablat 000FF5          standbyMode@logNumber 00E9             _LCDinterruptState 006B  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
 I2C_Master_Read@receivedByte 0003          standbyMode@keypress1 00E2                __CFG_PBADEN$ON 000000  
             standbyMode@diet 00EC               standbyMode@flat 00DE               standbyMode@food 00EE  
             standbyMode@time 00D0               standbyMode@zero 00E5               __initialization C90E  
                __end_of_main CB98                  __end_of_keys FD34                  standbyMode@i 00F4  
                standbyMode@n 00EA                  standbyMode@x 00E7                __CFG_OSC$HSPLL 000000  
           __end_of_LCD_RIGHT FD60              food_press@drawer 0027                        ??_main 0056  
               __activetblptr 000002           food_press@backCheck 002D             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0002                  ?_shiftEEPROM 0001            ??_I2C_Master_Start 0002  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0004  
       standbyMode@flatPieces 0090                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _EEDATA 000FA8                        _EECON2 000FA7                        ?_putch 0001  
                      _SSPADD 000FC8                        _TRISC6 007CA6                        _TRISC7 007CA7  
                      _SSPBUF 000FC9              diet_press@drawer 0025                __CFG_XINST$OFF 000000  
            __end_of_getRound D196             __end_of_UART_Init CC1A                     ??___aldiv 0009  
                      ___wmul C856                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 C934  
                      clear_1 C940                     ??_getFlat 0003                     ??_lcdInst 0003  
                      _printf D98A                     ??_getLong 0003          __size_of_displayLogs 0446  
             ??_mainOperation 0017           food_press@foodTable 0034                     ??_initLCD 0004  
             get_digits@count 0005                  __pdataCOMRAM 0078                     ??_isdigit 0001  
                __mediumconst FD22              __end_of_viewLogs D98A                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              standbyMode@F3161 0130  
            standbyMode@F3163 0120              standbyMode@F3165 0110              standbyMode@F3159 0140  
            standbyMode@F3167 0100         standbyMode@longPieces 00A0                    __accesstop 0080  
     __end_of__initialization C946          which_drawer@keypress 0030                 ___rparam_used 000001  
            standbyMode@round 00DC               writeEEPROM@data 0001               viewLogs@logView 004E  
                ?_standbyMode 0052          __end_of_happynewyear FD5E                __pcstackCOMRAM 0001  
               __end_of_input FD45                 __end_of_putch C7EA            __size_of_lcdNibble 007E  
               check_food@sum 0001             food_press@dietSum 0025             food_press@isValid 002F  
                     ??_putch 0003                    __pbssBANK1 0100                    _check_food E602  
            ??_verifyKeypress 0003                  ?_writeEEPROM 0001                       ?___wmul 0001  
                  _diet_press E0DC                       ?_printf 000D                    _arr_dataRX 0150  
                  _get_digits CD4A                     ?_getRound 0001                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7          __size_of_shiftEEPROM 00AE  
                  _columnLeft 007B                    _initEEPROM C87C                    _readEEPROM C7EA  
      standbyMode@drawerCount 00F2                    _food_press D2AC             __end_of_lcdNibble CB1A  
                     __Hparam 0000                       __Lparam 0000                     ?_viewLogs 0046  
                     ___aldiv CE08      displayLogs@operationTime 003A                       ___lldiv CC1A  
             __size_of___wmul 0026                       ___lwdiv C99C                       ___lwmod C8CC  
                     __pcinit C90E                       __ramtop 1000                       _getFlat CFB6  
                     _lcdInst C7C2                       _getLong D196                       __ptext0 CB1A  
                     __ptext1 F0BE                       __ptext2 D4A0                       __ptext3 CED4  
                     __ptext4 D6A4                       __ptext5 C9EE                       __ptext6 DC96  
                     __ptext7 CC9C                       __ptext8 C7EA                       __ptext9 C87C  
      __size_of_decode_drawer 00E2               __size_of_printf 030C                       _initLCD C950  
           __end_of_hexpowers FD57                       _dpowers FD45         which_drawer@backCheck 002C  
                     _isdigit C814                displayLogs@day 002D              ___aldiv@dividend 0001  
                   _LCD_RIGHT FD5F      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0025      __size_of_I2C_Master_Stop 0008  
                     _rowDown 007C                    ??_getRound 0003          end_of_initialization C946  
        displayLogs@keypress3 0039               which_drawer@sum 002A         __end_of_LCD_SIZE_HORZ FD62  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FD61                 __Lmediumconst FD22  
           main@operationMode 0057     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                     _RCSTAbits 000FAB  
                     printf@c 0024                       printf@f 000D              ___aldiv@quotient 000B  
                     postdec1 000FE5                       postdec2 000FDD                    ??_viewLogs 0048  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 0C64  
                 ?_diet_press 0025                     _UART_Init CB98                     _PORTBbits 000F81  
               ?_which_drawer 0025           diet_press@backCheck 002D                   ?_get_digits 0001  
                   _TRISCbits 000F94              viewLogs@checkLog 004A                  _happynewyear FD57  
           readEEPROM@address 0001             standbyMode@drawer 00F0                   ?_initEEPROM 0001  
               _decode_drawer CED4                   ?_readEEPROM 0001                   printf@width 0022  
                   _TXSTAbits 000FAC                   ?_food_press 0025           diet_press@dietTable 0034  
               ??_displayLogs 0027          __size_of_writeEEPROM 002A                __end_of___wmul C87C  
                  ?_UART_Init 000F                 __pidataCOMRAM C790        standbyMode@validDrawer 00E3  
         __size_of_check_food 0ABC                ??_which_drawer 0027                __end_of_printf DC96  
       __end_of_mainOperation C814           start_initialization C90E                standbyMode@lng 00E0  
              ?_decode_drawer 0001           __size_of_diet_press 0526             ??_I2C_Master_Init 0012  
           ??_I2C_Master_Read 0002             ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002  
standbyMode@drawerInformation 00C0           __size_of_get_digits 00BE                      ??___wmul 0005  
    I2C_Master_Init@clockFreq 000E              __CFG_LPT1OSC$OFF 000000                      ??_printf 0017  
         __size_of_initEEPROM 0026            food_press@keypress 0033           __size_of_readEEPROM 0014  
         __end_of_displayLogs E0DC           __size_of_food_press 01F4  standbyMode@LCDinterruptState 0069  
                 __pbssCOMRAM 0059                 __pcstackBANK0 0080                  _isdigit$1349 0002  
         decode_drawer@drawer 0001             __size_of_getRound 00F0        standbyMode@roundPieces 0080  
            _I2C_Master_Start C796              _I2C_Master_Write C7A6              ___lwdiv@dividend 0001  
           __CFG_CCP2MX$PORTC 000000            _UARTinterruptState 006A                 __pmediumconst FD22  
               UART_Init@baud 000F                     _lcdNibble CA9C                      ?___aldiv 0001  
                    ?___lldiv 0001                      ?___lwdiv 0001                      ?___lwmod 0008  
                 ??_UART_Init 0013             __size_of_viewLogs 02E6                      ?_getFlat 0001  
                    ?_lcdInst 0001                      ?_getLong 0001                      ?_initLCD 0001  
                    ?_isdigit 0001           check_food@foodInput 0003                 ??_shiftEEPROM 0003  
                   _hexpowers FD4F              ___lwdiv@quotient 0005               ??_decode_drawer 0003  
              __size_of_putch 0014                  ??_check_food 0005                      _LCD_LEFT FD5E  
            displayLogs@month 002B               ___aldiv@divisor 0005               ___aldiv@counter 0009  
              ___wmul@product 0005                      _LATDbits 000F8C          __end_of_which_drawer D6A4  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 0027  
                shiftEEPROM@i 0006                   _displayLogs DC96       __size_of_verifyKeypress 0052  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0001            __end_of_check_food F0BE  
               lcdNibble@data 0002                    printf@flag 0021                   _columnRight 007A  
               lcdNibble@temp 0001                    printf@prec 001E                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FD63                 diet_press@sum 0031                     copy_data0 C922  
           which_drawer@count 002E                  ??_initEEPROM 0003           __end_of_shiftEEPROM CD4A  
          __end_of_diet_press E602                  ??_readEEPROM 0001                  ??_food_press 0029  
          diet_press@keypress 0033                    _EECON1bits 000FA6                      __Hrparam 0000  
               ??_standbyMode 0054                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
          __end_of_get_digits CE08            diet_press@previous 0029              __size_of___aldiv 00CC  
            __size_of___lldiv 0082         displayLogs@flatPieces 0031              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              __size_of_getFlat 00F0              __size_of_lcdInst 0014  
            __size_of_getLong 0116            __end_of_initEEPROM C8A2               _I2C_Master_Init CA40  
             _I2C_Master_Read C832              __size_of_initLCD 004C               _I2C_Master_Wait C7B0  
          __end_of_readEEPROM C7FE               _I2C_Master_Stop C79E        __end_of_LCD_HORZ_LIMIT FD64  
            __size_of_isdigit 001E            __end_of_food_press D4A0               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                      __ptext10 C8A2                      __ptext11 D0A6  
                    __ptext20 C814                      __ptext12 D196                      __ptext21 C856  
                    __ptext13 CFB6                      __ptext30 CC1A                      __ptext22 C8CC  
                    __ptext14 D2AC                      __ptext31 C7FE                      __ptext23 C99C  
                    __ptext15 CD4A                      __ptext32 CB98                      __ptext24 C7A6  
                    __ptext16 E602                      __ptext33 CE08                      __ptext25 C79E  
                    __ptext17 E0DC                      __ptext34 C950                      __ptext26 C796  
                    __ptext18 D98A                      __ptext35 C7C2                      __ptext27 C832  
                    __ptext19 C7D6                      __ptext36 CA9C                      __ptext28 C7B0  
                    __ptext29 CA40                      _getRound D0A6                _LCD_VERT_LIMIT FD62  
               __size_of_main 007E               displayLogs@year 0029            displayLogs@minutes 0035  
          displayLogs@seconds 0037                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 003C  
    displayLogs@markedDrawer2 003E      displayLogs@markedDrawer3 0040      displayLogs@markedDrawer4 0042  
                 ??_lcdNibble 0001                      _viewLogs D6A4               verifyKeypress@i 0008  
          getLong@returnValue 0005                     printf@idx 001B                     printf@val 001F  
         __end_of_standbyMode FD22   I2C_Master_Write@byteToWrite 0002      decode_drawer@returnValue 0005  
       displayLogs@longPieces 0033              which_drawer@rand 0028                     putch@data 0003  
    __end_of_I2C_Master_Start C79E      __end_of_I2C_Master_Write C7B0                    _INTCONbits 000FF2  
      __end_of_LCD_VERT_LIMIT FD63                   _shiftEEPROM CC9C                      isdigit@c 0003  
       __size_of_which_drawer 0204                   getFlat@code 0001     standbyMode@firstIteration 00D7  
               _LCD_SIZE_HORZ FD61              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FD60  
            ___lldiv@dividend 0001       verifyKeypress@logNumber 0005        __size_of_mainOperation 0016  
          getFlat@returnValue 0005        displayLogs@roundPieces 002F                      printf@ap 001C  
                 diet_press@i 002B       __end_of_I2C_Master_Init CA9C       __end_of_I2C_Master_Read C856  
     __end_of_I2C_Master_Wait C7C2       __end_of_I2C_Master_Stop C7A6                   lcdInst@data 0003  
             shiftEEPROM@temp 0004                _verifyKeypress C9EE           getRound@returnValue 0005  
                 getLong@code 0001           __end_of_writeEEPROM C8CC       verifyKeypress@returnVal 0006  
            ___lldiv@quotient 0009                  _which_drawer D4A0               ___lwmod@divisor 000A  
             ___lwmod@counter 000C                  ___aldiv@sign 000A        verifyKeypress@keypress 0001  
                 _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5                  getRound@code 0001  
       check_food@returnValue 0007  
