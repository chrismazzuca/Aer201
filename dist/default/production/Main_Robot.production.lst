

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 19 23:46:11 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32  0000                     
    33                           ; Version 1.45
    34                           ; Generated 16/11/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4620 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	mediumconst
    69  00FD78                     __pmediumconst:
    70                           	opt stack 0
    71  00FD78  00                 	db	0
    72  00FD79                     _keys:
    73                           	opt stack 0
    74  00FD79  31                 	db	49
    75  00FD7A  32                 	db	50
    76  00FD7B  33                 	db	51
    77  00FD7C  41                 	db	65
    78  00FD7D  34                 	db	52
    79  00FD7E  35                 	db	53
    80  00FD7F  36                 	db	54
    81  00FD80  42                 	db	66
    82  00FD81  37                 	db	55
    83  00FD82  38                 	db	56
    84  00FD83  39                 	db	57
    85  00FD84  43                 	db	67
    86  00FD85  2A                 	db	42
    87  00FD86  30                 	db	48
    88  00FD87  23                 	db	35
    89  00FD88  44                 	db	68
    90  00FD89  00                 	db	0
    91  00FD8A                     __end_of_keys:
    92                           	opt stack 0
    93  00FD8A                     _input:
    94                           	opt stack 0
    95  00FD8A  31                 	db	49
    96  00FD8B  32                 	db	50
    97  00FD8C  33                 	db	51
    98  00FD8D  52                 	db	82
    99  00FD8E  34                 	db	52
   100  00FD8F  35                 	db	53
   101  00FD90  36                 	db	54
   102  00FD91  46                 	db	70
   103  00FD92  37                 	db	55
   104  00FD93  38                 	db	56
   105  00FD94  39                 	db	57
   106  00FD95  4C                 	db	76
   107  00FD96  2A                 	db	42
   108  00FD97  30                 	db	48
   109  00FD98  23                 	db	35
   110  00FD99  44                 	db	68
   111  00FD9A  00                 	db	0
   112  00FD9B                     __end_of_input:
   113                           	opt stack 0
   114  00FD9B                     _dpowers:
   115                           	opt stack 0
   116  00FD9B  0001               	dw	1
   117  00FD9D  000A               	dw	10
   118  00FD9F  0064               	dw	100
   119  00FDA1  03E8               	dw	1000
   120  00FDA3  2710               	dw	10000
   121  00FDA5                     __end_of_dpowers:
   122                           	opt stack 0
   123  00FDA5                     _LCD_LEFT:
   124                           	opt stack 0
   125  00FDA5  00                 	db	0
   126  00FDA6                     __end_of_LCD_LEFT:
   127                           	opt stack 0
   128  00FDA6                     _LCD_RIGHT:
   129                           	opt stack 0
   130  00FDA6  01                 	db	1
   131  00FDA7                     __end_of_LCD_RIGHT:
   132                           	opt stack 0
   133  00FDA7                     _LCD_SIZE_VERT:
   134                           	opt stack 0
   135  00FDA7  02                 	db	2
   136  00FDA8                     __end_of_LCD_SIZE_VERT:
   137                           	opt stack 0
   138  00FDA8                     _LCD_SIZE_HORZ:
   139                           	opt stack 0
   140  00FDA8  10                 	db	16
   141  00FDA9                     __end_of_LCD_SIZE_HORZ:
   142                           	opt stack 0
   143  00FDA9                     _LCD_VERT_LIMIT:
   144                           	opt stack 0
   145  00FDA9  02                 	db	2
   146  00FDAA                     __end_of_LCD_VERT_LIMIT:
   147                           	opt stack 0
   148  00FDAA                     _LCD_HORZ_LIMIT:
   149                           	opt stack 0
   150  00FDAA  28                 	db	40
   151  00FDAB                     __end_of_LCD_HORZ_LIMIT:
   152                           	opt stack 0
   153  0000                     _EECON2	set	4007
   154  0000                     _EEDATA	set	4008
   155  0000                     _EEADR	set	4009
   156  0000                     _EECON1bits	set	4006
   157  0000                     _PORTB	set	3969
   158  0000                     _PORTBbits	set	3969
   159  0000                     _INTCONbits	set	4082
   160  0000                     _LATDbits	set	3980
   161  0000                     _ADCON1	set	4033
   162  0000                     _ADCON0	set	4034
   163  0000                     _TRISE	set	3990
   164  0000                     _TRISD	set	3989
   165  0000                     _TRISC	set	3988
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISA	set	3986
   168  0000                     _LATE	set	3981
   169  0000                     _LATD	set	3980
   170  0000                     _LATC	set	3979
   171  0000                     _LATB	set	3978
   172  0000                     _LATA	set	3977
   173  00FDAB                     STR_22:
   174  00FDAB  52                 	db	82	;'R'
   175  00FDAC  65                 	db	101	;'e'
   176  00FDAD  6D                 	db	109	;'m'
   177  00FDAE  61                 	db	97	;'a'
   178  00FDAF  69                 	db	105	;'i'
   179  00FDB0  6E                 	db	110	;'n'
   180  00FDB1  69                 	db	105	;'i'
   181  00FDB2  6E                 	db	110	;'n'
   182  00FDB3  67                 	db	103	;'g'
   183  00FDB4  20                 	db	32
   184  00FDB5  70                 	db	112	;'p'
   185  00FDB6  69                 	db	105	;'i'
   186  00FDB7  65                 	db	101	;'e'
   187  00FDB8  63                 	db	99	;'c'
   188  00FDB9  65                 	db	101	;'e'
   189  00FDBA  73                 	db	115	;'s'
   190  00FDBB  3A                 	db	58	;':'
   191  00FDBC  00                 	db	0
   192  00FDBD                     STR_51:
   193  00FDBD  64                 	db	100	;'d'
   194  00FDBE  72                 	db	114	;'r'
   195  00FDBF  61                 	db	97	;'a'
   196  00FDC0  77                 	db	119	;'w'
   197  00FDC1  65                 	db	101	;'e'
   198  00FDC2  72                 	db	114	;'r'
   199  00FDC3  73                 	db	115	;'s'
   200  00FDC4  20                 	db	32
   201  00FDC5  72                 	db	114	;'r'
   202  00FDC6  65                 	db	101	;'e'
   203  00FDC7  61                 	db	97	;'a'
   204  00FDC8  63                 	db	99	;'c'
   205  00FDC9  68                 	db	104	;'h'
   206  00FDCA  65                 	db	101	;'e'
   207  00FDCB  64                 	db	100	;'d'
   208  00FDCC  21                 	db	33
   209  00FDCD  00                 	db	0
   210  00FDCE                     STR_41:
   211  00FDCE  62                 	db	98	;'b'
   212  00FDCF  65                 	db	101	;'e'
   213  00FDD0  67                 	db	103	;'g'
   214  00FDD1  69                 	db	105	;'i'
   215  00FDD2  6E                 	db	110	;'n'
   216  00FDD3  20                 	db	32
   217  00FDD4  6F                 	db	111	;'o'
   218  00FDD5  70                 	db	112	;'p'
   219  00FDD6  65                 	db	101	;'e'
   220  00FDD7  72                 	db	114	;'r'
   221  00FDD8  61                 	db	97	;'a'
   222  00FDD9  74                 	db	116	;'t'
   223  00FDDA  69                 	db	105	;'i'
   224  00FDDB  6F                 	db	111	;'o'
   225  00FDDC  6E                 	db	110	;'n'
   226  00FDDD  2E                 	db	46
   227  00FDDE  00                 	db	0
   228  00FDDF                     STR_9:
   229  00FDDF  50                 	db	80	;'P'
   230  00FDE0  6C                 	db	108	;'l'
   231  00FDE1  65                 	db	101	;'e'
   232  00FDE2  61                 	db	97	;'a'
   233  00FDE3  73                 	db	115	;'s'
   234  00FDE4  65                 	db	101	;'e'
   235  00FDE5  20                 	db	32
   236  00FDE6  69                 	db	105	;'i'
   237  00FDE7  6E                 	db	110	;'n'
   238  00FDE8  70                 	db	112	;'p'
   239  00FDE9  75                 	db	117	;'u'
   240  00FDEA  74                 	db	116	;'t'
   241  00FDEB  20                 	db	32
   242  00FDEC  6C                 	db	108	;'l'
   243  00FDED  6F                 	db	111	;'o'
   244  00FDEE  67                 	db	103	;'g'
   245  00FDEF  00                 	db	0
   246  00FDF0                     STR_23:
   247  00FDF0  52                 	db	82	;'R'
   248  00FDF1  3A                 	db	58	;':'
   249  00FDF2  25                 	db	37
   250  00FDF3  69                 	db	105	;'i'
   251  00FDF4  20                 	db	32
   252  00FDF5  20                 	db	32
   253  00FDF6  46                 	db	70	;'F'
   254  00FDF7  3A                 	db	58	;':'
   255  00FDF8  25                 	db	37
   256  00FDF9  69                 	db	105	;'i'
   257  00FDFA  20                 	db	32
   258  00FDFB  20                 	db	32
   259  00FDFC  4C                 	db	76	;'L'
   260  00FDFD  3A                 	db	58	;':'
   261  00FDFE  25                 	db	37
   262  00FDFF  69                 	db	105	;'i'
   263  00FE00  00                 	db	0
   264  00FE01                     STR_5:
   265  00FE01  50                 	db	80	;'P'
   266  00FE02  72                 	db	114	;'r'
   267  00FE03  65                 	db	101	;'e'
   268  00FE04  73                 	db	115	;'s'
   269  00FE05  73                 	db	115	;'s'
   270  00FE06  20                 	db	32
   271  00FE07  61                 	db	97	;'a'
   272  00FE08  6E                 	db	110	;'n'
   273  00FE09  79                 	db	121	;'y'
   274  00FE0A  20                 	db	32
   275  00FE0B  6B                 	db	107	;'k'
   276  00FE0C  65                 	db	101	;'e'
   277  00FE0D  79                 	db	121	;'y'
   278  00FE0E  20                 	db	32
   279  00FE0F  74                 	db	116	;'t'
   280  00FE10  6F                 	db	111	;'o'
   281  00FE11  00                 	db	0
   282  00FE12                     STR_7:
   283  00FE12  25                 	db	37
   284  00FE13  69                 	db	105	;'i'
   285  00FE14  20                 	db	32
   286  00FE15  70                 	db	112	;'p'
   287  00FE16  72                 	db	114	;'r'
   288  00FE17  65                 	db	101	;'e'
   289  00FE18  76                 	db	118	;'v'
   290  00FE19  69                 	db	105	;'i'
   291  00FE1A  6F                 	db	111	;'o'
   292  00FE1B  75                 	db	117	;'u'
   293  00FE1C  73                 	db	115	;'s'
   294  00FE1D  20                 	db	32
   295  00FE1E  6C                 	db	108	;'l'
   296  00FE1F  6F                 	db	111	;'o'
   297  00FE20  67                 	db	103	;'g'
   298  00FE21  73                 	db	115	;'s'
   299  00FE22  00                 	db	0
   300  00FE23                     STR_45:
   301  00FE23  63                 	db	99	;'c'
   302  00FE24  61                 	db	97	;'a'
   303  00FE25  62                 	db	98	;'b'
   304  00FE26  69                 	db	105	;'i'
   305  00FE27  6E                 	db	110	;'n'
   306  00FE28  65                 	db	101	;'e'
   307  00FE29  74                 	db	116	;'t'
   308  00FE2A  20                 	db	32
   309  00FE2B  73                 	db	115	;'s'
   310  00FE2C  6F                 	db	111	;'o'
   311  00FE2D  72                 	db	114	;'r'
   312  00FE2E  74                 	db	116	;'t'
   313  00FE2F  65                 	db	101	;'e'
   314  00FE30  72                 	db	114	;'r'
   315  00FE31  21                 	db	33
   316  00FE32  00                 	db	0
   317  00FE33                     STR_55:
   318  00FE33  6E                 	db	110	;'n'
   319  00FE34  75                 	db	117	;'u'
   320  00FE35  6D                 	db	109	;'m'
   321  00FE36  62                 	db	98	;'b'
   322  00FE37  65                 	db	101	;'e'
   323  00FE38  72                 	db	114	;'r'
   324  00FE39  20                 	db	32
   325  00FE3A  70                 	db	112	;'p'
   326  00FE3B  72                 	db	114	;'r'
   327  00FE3C  65                 	db	101	;'e'
   328  00FE3D  73                 	db	115	;'s'
   329  00FE3E  73                 	db	115	;'s'
   330  00FE3F  65                 	db	101	;'e'
   331  00FE40  64                 	db	100	;'d'
   332  00FE41  2E                 	db	46
   333  00FE42  00                 	db	0
   334  00FE43                     STR_29:
   335  00FE43  44                 	db	68	;'D'
   336  00FE44  72                 	db	114	;'r'
   337  00FE45  61                 	db	97	;'a'
   338  00FE46  77                 	db	119	;'w'
   339  00FE47  65                 	db	101	;'e'
   340  00FE48  72                 	db	114	;'r'
   341  00FE49  20                 	db	32
   342  00FE4A  25                 	db	37
   343  00FE4B  69                 	db	105	;'i'
   344  00FE4C  20                 	db	32
   345  00FE4D  66                 	db	102	;'f'
   346  00FE4E  6F                 	db	111	;'o'
   347  00FE4F  6F                 	db	111	;'o'
   348  00FE50  64                 	db	100	;'d'
   349  00FE51  3A                 	db	58	;':'
   350  00FE52  00                 	db	0
   351  00FE53                     STR_14:
   352  00FE53  4F                 	db	79	;'O'
   353  00FE54  70                 	db	112	;'p'
   354  00FE55  65                 	db	101	;'e'
   355  00FE56  72                 	db	114	;'r'
   356  00FE57  61                 	db	97	;'a'
   357  00FE58  74                 	db	116	;'t'
   358  00FE59  69                 	db	105	;'i'
   359  00FE5A  6F                 	db	111	;'o'
   360  00FE5B  6E                 	db	110	;'n'
   361  00FE5C  20                 	db	32
   362  00FE5D  74                 	db	116	;'t'
   363  00FE5E  69                 	db	105	;'i'
   364  00FE5F  6D                 	db	109	;'m'
   365  00FE60  65                 	db	101	;'e'
   366  00FE61  3A                 	db	58	;':'
   367  00FE62  00                 	db	0
   368  00FE63                     STR_17:
   369  00FE63  4D                 	db	77	;'M'
   370  00FE64  61                 	db	97	;'a'
   371  00FE65  72                 	db	114	;'r'
   372  00FE66  6B                 	db	107	;'k'
   373  00FE67  65                 	db	101	;'e'
   374  00FE68  64                 	db	100	;'d'
   375  00FE69  20                 	db	32
   376  00FE6A  64                 	db	100	;'d'
   377  00FE6B  72                 	db	114	;'r'
   378  00FE6C  61                 	db	97	;'a'
   379  00FE6D  77                 	db	119	;'w'
   380  00FE6E  65                 	db	101	;'e'
   381  00FE6F  72                 	db	114	;'r'
   382  00FE70  73                 	db	115	;'s'
   383  00FE71  3A                 	db	58	;':'
   384  00FE72  00                 	db	0
   385  00FE73                     STR_33:
   386  00FE73  44                 	db	68	;'D'
   387  00FE74  72                 	db	114	;'r'
   388  00FE75  61                 	db	97	;'a'
   389  00FE76  77                 	db	119	;'w'
   390  00FE77  65                 	db	101	;'e'
   391  00FE78  72                 	db	114	;'r'
   392  00FE79  20                 	db	32
   393  00FE7A  25                 	db	37
   394  00FE7B  69                 	db	105	;'i'
   395  00FE7C  20                 	db	32
   396  00FE7D  64                 	db	100	;'d'
   397  00FE7E  69                 	db	105	;'i'
   398  00FE7F  65                 	db	101	;'e'
   399  00FE80  74                 	db	116	;'t'
   400  00FE81  3A                 	db	58	;':'
   401  00FE82  00                 	db	0
   402  00FE83                     STR_24:
   403  00FE83  44                 	db	68	;'D'
   404  00FE84  72                 	db	114	;'r'
   405  00FE85  61                 	db	97	;'a'
   406  00FE86  77                 	db	119	;'w'
   407  00FE87  65                 	db	101	;'e'
   408  00FE88  72                 	db	114	;'r'
   409  00FE89  20                 	db	32
   410  00FE8A  53                 	db	83	;'S'
   411  00FE8B  75                 	db	117	;'u'
   412  00FE8C  6D                 	db	109	;'m'
   413  00FE8D  6D                 	db	109	;'m'
   414  00FE8E  61                 	db	97	;'a'
   415  00FE8F  72                 	db	114	;'r'
   416  00FE90  79                 	db	121	;'y'
   417  00FE91  3A                 	db	58	;':'
   418  00FE92  00                 	db	0
   419  00FE93                     STR_52:
   420  00FE93  41                 	db	65	;'A'
   421  00FE94  6E                 	db	110	;'n'
   422  00FE95  6F                 	db	111	;'o'
   423  00FE96  74                 	db	116	;'t'
   424  00FE97  68                 	db	104	;'h'
   425  00FE98  65                 	db	101	;'e'
   426  00FE99  72                 	db	114	;'r'
   427  00FE9A  20                 	db	32
   428  00FE9B  64                 	db	100	;'d'
   429  00FE9C  72                 	db	114	;'r'
   430  00FE9D  61                 	db	97	;'a'
   431  00FE9E  77                 	db	119	;'w'
   432  00FE9F  65                 	db	101	;'e'
   433  00FEA0  72                 	db	114	;'r'
   434  00FEA1  3F                 	db	63	;'?'
   435  00FEA2  00                 	db	0
   436  00FEA3                     STR_44:
   437  00FEA3  57                 	db	87	;'W'
   438  00FEA4  65                 	db	101	;'e'
   439  00FEA5  6C                 	db	108	;'l'
   440  00FEA6  63                 	db	99	;'c'
   441  00FEA7  6F                 	db	111	;'o'
   442  00FEA8  6D                 	db	109	;'m'
   443  00FEA9  65                 	db	101	;'e'
   444  00FEAA  20                 	db	32
   445  00FEAB  74                 	db	116	;'t'
   446  00FEAC  6F                 	db	111	;'o'
   447  00FEAD  20                 	db	32
   448  00FEAE  79                 	db	121	;'y'
   449  00FEAF  6F                 	db	111	;'o'
   450  00FEB0  75                 	db	117	;'u'
   451  00FEB1  72                 	db	114	;'r'
   452  00FEB2  00                 	db	0
   453  00FEB3                     STR_28:
   454  00FEB3  23                 	db	35
   455  00FEB4  20                 	db	32
   456  00FEB5  3D                 	db	61	;'='
   457  00FEB6  20                 	db	32
   458  00FEB7  4E                 	db	78	;'N'
   459  00FEB8  6F                 	db	111	;'o'
   460  00FEB9  2C                 	db	44
   461  00FEBA  20                 	db	32
   462  00FEBB  44                 	db	68	;'D'
   463  00FEBC  20                 	db	32
   464  00FEBD  3D                 	db	61	;'='
   465  00FEBE  20                 	db	32
   466  00FEBF  59                 	db	89	;'Y'
   467  00FEC0  65                 	db	101	;'e'
   468  00FEC1  73                 	db	115	;'s'
   469  00FEC2  00                 	db	0
   470  00FEC3                     STR_42:
   471  00FEC3  53                 	db	83	;'S'
   472  00FEC4  74                 	db	116	;'t'
   473  00FEC5  6F                 	db	111	;'o'
   474  00FEC6  72                 	db	114	;'r'
   475  00FEC7  65                 	db	101	;'e'
   476  00FEC8  64                 	db	100	;'d'
   477  00FEC9  20                 	db	32
   478  00FECA  76                 	db	118	;'v'
   479  00FECB  61                 	db	97	;'a'
   480  00FECC  6C                 	db	108	;'l'
   481  00FECD  75                 	db	117	;'u'
   482  00FECE  65                 	db	101	;'e'
   483  00FECF  3A                 	db	58	;':'
   484  00FED0  20                 	db	32
   485  00FED1  00                 	db	0
   486  00FED2                     STR_25:
   487  00FED2  44                 	db	68	;'D'
   488  00FED3  72                 	db	114	;'r'
   489  00FED4  61                 	db	97	;'a'
   490  00FED5  77                 	db	119	;'w'
   491  00FED6  65                 	db	101	;'e'
   492  00FED7  72                 	db	114	;'r'
   493  00FED8  20                 	db	32
   494  00FED9  31                 	db	49	;'1'
   495  00FEDA  3A                 	db	58	;':'
   496  00FEDB  20                 	db	32
   497  00FEDC  52                 	db	82	;'R'
   498  00FEDD  46                 	db	70	;'F'
   499  00FEDE  31                 	db	49	;'1'
   500  00FEDF  32                 	db	50	;'2'
   501  00FEE0  00                 	db	0
   502  00FEE1                     STR_37:
   503  00FEE1  44                 	db	68	;'D'
   504  00FEE2  72                 	db	114	;'r'
   505  00FEE3  61                 	db	97	;'a'
   506  00FEE4  77                 	db	119	;'w'
   507  00FEE5  65                 	db	101	;'e'
   508  00FEE6  72                 	db	114	;'r'
   509  00FEE7  20                 	db	32
   510  00FEE8  6E                 	db	110	;'n'
   511  00FEE9  75                 	db	117	;'u'
   512  00FEEA  6D                 	db	109	;'m'
   513  00FEEB  62                 	db	98	;'b'
   514  00FEEC  65                 	db	101	;'e'
   515  00FEED  72                 	db	114	;'r'
   516  00FEEE  3A                 	db	58	;':'
   517  00FEEF  00                 	db	0
   518  00FEF0                     STR_3:
   519  00FEF0  31                 	db	49	;'1'
   520  00FEF1  20                 	db	32
   521  00FEF2  70                 	db	112	;'p'
   522  00FEF3  72                 	db	114	;'r'
   523  00FEF4  65                 	db	101	;'e'
   524  00FEF5  76                 	db	118	;'v'
   525  00FEF6  69                 	db	105	;'i'
   526  00FEF7  6F                 	db	111	;'o'
   527  00FEF8  75                 	db	117	;'u'
   528  00FEF9  73                 	db	115	;'s'
   529  00FEFA  20                 	db	32
   530  00FEFB  6C                 	db	108	;'l'
   531  00FEFC  6F                 	db	111	;'o'
   532  00FEFD  67                 	db	103	;'g'
   533  00FEFE  00                 	db	0
   534  00FEFF                     STR_21:
   535  00FEFF  25                 	db	37
   536  00FF00  69                 	db	105	;'i'
   537  00FF01  2C                 	db	44
   538  00FF02  20                 	db	32
   539  00FF03  25                 	db	37
   540  00FF04  69                 	db	105	;'i'
   541  00FF05  2C                 	db	44
   542  00FF06  20                 	db	32
   543  00FF07  25                 	db	37
   544  00FF08  69                 	db	105	;'i'
   545  00FF09  2C                 	db	44
   546  00FF0A  20                 	db	32
   547  00FF0B  25                 	db	37
   548  00FF0C  69                 	db	105	;'i'
   549  00FF0D  00                 	db	0
   550  00FF0E                     STR_56:
   551  00FF0E  44                 	db	68	;'D'
   552  00FF0F  72                 	db	114	;'r'
   553  00FF10  61                 	db	97	;'a'
   554  00FF11  77                 	db	119	;'w'
   555  00FF12  65                 	db	101	;'e'
   556  00FF13  72                 	db	114	;'r'
   557  00FF14  20                 	db	32
   558  00FF15  61                 	db	97	;'a'
   559  00FF16  6C                 	db	108	;'l'
   560  00FF17  72                 	db	114	;'r'
   561  00FF18  65                 	db	101	;'e'
   562  00FF19  61                 	db	97	;'a'
   563  00FF1A  64                 	db	100	;'d'
   564  00FF1B  79                 	db	121	;'y'
   565  00FF1C  00                 	db	0
   566  00FF1D                     STR_31:
   567  00FF1D  49                 	db	73	;'I'
   568  00FF1E  6E                 	db	110	;'n'
   569  00FF1F  76                 	db	118	;'v'
   570  00FF20  61                 	db	97	;'a'
   571  00FF21  6C                 	db	108	;'l'
   572  00FF22  69                 	db	105	;'i'
   573  00FF23  64                 	db	100	;'d'
   574  00FF24  20                 	db	32
   575  00FF25  66                 	db	102	;'f'
   576  00FF26  6F                 	db	111	;'o'
   577  00FF27  6F                 	db	111	;'o'
   578  00FF28  64                 	db	100	;'d'
   579  00FF29  21                 	db	33
   580  00FF2A  00                 	db	0
   581  00FF2B                     STR_35:
   582  00FF2B  49                 	db	73	;'I'
   583  00FF2C  6E                 	db	110	;'n'
   584  00FF2D  76                 	db	118	;'v'
   585  00FF2E  61                 	db	97	;'a'
   586  00FF2F  6C                 	db	108	;'l'
   587  00FF30  69                 	db	105	;'i'
   588  00FF31  64                 	db	100	;'d'
   589  00FF32  20                 	db	32
   590  00FF33  64                 	db	100	;'d'
   591  00FF34  69                 	db	105	;'i'
   592  00FF35  65                 	db	101	;'e'
   593  00FF36  74                 	db	116	;'t'
   594  00FF37  21                 	db	33
   595  00FF38  00                 	db	0
   596  00FF39                     STR_6:
   597  00FF39  6D                 	db	109	;'m'
   598  00FF3A  6F                 	db	111	;'o'
   599  00FF3B  76                 	db	118	;'v'
   600  00FF3C  65                 	db	101	;'e'
   601  00FF3D  20                 	db	32
   602  00FF3E  66                 	db	102	;'f'
   603  00FF3F  6F                 	db	111	;'o'
   604  00FF40  72                 	db	114	;'r'
   605  00FF41  77                 	db	119	;'w'
   606  00FF42  61                 	db	97	;'a'
   607  00FF43  72                 	db	114	;'r'
   608  00FF44  64                 	db	100	;'d'
   609  00FF45  2E                 	db	46
   610  00FF46  00                 	db	0
   611  00FF47                     STR_48:
   612  00FF47  6F                 	db	111	;'o'
   613  00FF48  72                 	db	114	;'r'
   614  00FF49  20                 	db	32
   615  00FF4A  70                 	db	112	;'p'
   616  00FF4B  72                 	db	114	;'r'
   617  00FF4C  65                 	db	101	;'e'
   618  00FF4D  73                 	db	115	;'s'
   619  00FF4E  73                 	db	115	;'s'
   620  00FF4F  20                 	db	32
   621  00FF50  44                 	db	68	;'D'
   622  00FF51  20                 	db	32
   623  00FF52  74                 	db	116	;'t'
   624  00FF53  6F                 	db	111	;'o'
   625  00FF54  00                 	db	0
   626  00FF55                     STR_63:
   627  00FF55  49                 	db	73	;'I'
   628  00FF56  6E                 	db	110	;'n'
   629  00FF57  76                 	db	118	;'v'
   630  00FF58  61                 	db	97	;'a'
   631  00FF59  6C                 	db	108	;'l'
   632  00FF5A  69                 	db	105	;'i'
   633  00FF5B  64                 	db	100	;'d'
   634  00FF5C  20                 	db	32
   635  00FF5D  6B                 	db	107	;'k'
   636  00FF5E  65                 	db	101	;'e'
   637  00FF5F  79                 	db	121	;'y'
   638  00FF60  21                 	db	33
   639  00FF61  00                 	db	0
   640  00FF62                     STR_26:
   641  00FF62  44                 	db	68	;'D'
   642  00FF63  72                 	db	114	;'r'
   643  00FF64  61                 	db	97	;'a'
   644  00FF65  77                 	db	119	;'w'
   645  00FF66  65                 	db	101	;'e'
   646  00FF67  72                 	db	114	;'r'
   647  00FF68  20                 	db	32
   648  00FF69  32                 	db	50	;'2'
   649  00FF6A  3A                 	db	58	;':'
   650  00FF6B  20                 	db	32
   651  00FF6C  4C                 	db	76	;'L'
   652  00FF6D  31                 	db	49	;'1'
   653  00FF6E  00                 	db	0
   654  00FF6F                     STR_50:
   655  00FF6F  4D                 	db	77	;'M'
   656  00FF70  61                 	db	97	;'a'
   657  00FF71  78                 	db	120	;'x'
   658  00FF72  69                 	db	105	;'i'
   659  00FF73  6D                 	db	109	;'m'
   660  00FF74  75                 	db	117	;'u'
   661  00FF75  6D                 	db	109	;'m'
   662  00FF76  20                 	db	32
   663  00FF77  6F                 	db	111	;'o'
   664  00FF78  66                 	db	102	;'f'
   665  00FF79  20                 	db	32
   666  00FF7A  38                 	db	56	;'8'
   667  00FF7B  00                 	db	0
   668  00FF7C                     STR_27:
   669  00FF7C  41                 	db	65	;'A'
   670  00FF7D  6E                 	db	110	;'n'
   671  00FF7E  6F                 	db	111	;'o'
   672  00FF7F  74                 	db	116	;'t'
   673  00FF80  68                 	db	104	;'h'
   674  00FF81  65                 	db	101	;'e'
   675  00FF82  72                 	db	114	;'r'
   676  00FF83  20                 	db	32
   677  00FF84  6C                 	db	108	;'l'
   678  00FF85  6F                 	db	111	;'o'
   679  00FF86  67                 	db	103	;'g'
   680  00FF87  3F                 	db	63	;'?'
   681  00FF88  00                 	db	0
   682  00FF89                     STR_47:
   683  00FF89  76                 	db	118	;'v'
   684  00FF8A  69                 	db	105	;'i'
   685  00FF8B  65                 	db	101	;'e'
   686  00FF8C  77                 	db	119	;'w'
   687  00FF8D  20                 	db	32
   688  00FF8E  6C                 	db	108	;'l'
   689  00FF8F  6F                 	db	111	;'o'
   690  00FF90  67                 	db	103	;'g'
   691  00FF91  73                 	db	115	;'s'
   692  00FF92  2C                 	db	44
   693  00FF93  00                 	db	0
   694  00FF94                     STR_2:
   695  00FF94  61                 	db	97	;'a'
   696  00FF95  76                 	db	118	;'v'
   697  00FF96  61                 	db	97	;'a'
   698  00FF97  69                 	db	105	;'i'
   699  00FF98  6C                 	db	108	;'l'
   700  00FF99  61                 	db	97	;'a'
   701  00FF9A  62                 	db	98	;'b'
   702  00FF9B  6C                 	db	108	;'l'
   703  00FF9C  65                 	db	101	;'e'
   704  00FF9D  2E                 	db	46
   705  00FF9E  00                 	db	0
   706  00FF9F                     STR_62:
   707  00FF9F  52                 	db	82	;'R'
   708  00FFA0  65                 	db	101	;'e'
   709  00FFA1  62                 	db	98	;'b'
   710  00FFA2  6F                 	db	111	;'o'
   711  00FFA3  6F                 	db	111	;'o'
   712  00FFA4  74                 	db	116	;'t'
   713  00FFA5  69                 	db	105	;'i'
   714  00FFA6  6E                 	db	110	;'n'
   715  00FFA7  67                 	db	103	;'g'
   716  00FFA8  2E                 	db	46
   717  00FFA9  00                 	db	0
   718  00FFAA                     STR_32:
   719  00FFAA  54                 	db	84	;'T'
   720  00FFAB  72                 	db	114	;'r'
   721  00FFAC  79                 	db	121	;'y'
   722  00FFAD  20                 	db	32
   723  00FFAE  61                 	db	97	;'a'
   724  00FFAF  67                 	db	103	;'g'
   725  00FFB0  61                 	db	97	;'a'
   726  00FFB1  69                 	db	105	;'i'
   727  00FFB2  6E                 	db	110	;'n'
   728  00FFB3  2E                 	db	46
   729  00FFB4  00                 	db	0
   730  00FFB5                     STR_46:
   731  00FFB5  50                 	db	80	;'P'
   732  00FFB6  72                 	db	114	;'r'
   733  00FFB7  65                 	db	101	;'e'
   734  00FFB8  73                 	db	115	;'s'
   735  00FFB9  73                 	db	115	;'s'
   736  00FFBA  20                 	db	32
   737  00FFBB  23                 	db	35
   738  00FFBC  20                 	db	32
   739  00FFBD  74                 	db	116	;'t'
   740  00FFBE  6F                 	db	111	;'o'
   741  00FFBF  00                 	db	0
   742  00FFC0                     STR_54:
   743  00FFC0  4E                 	db	78	;'N'
   744  00FFC1  6F                 	db	111	;'o'
   745  00FFC2  20                 	db	32
   746  00FFC3  64                 	db	100	;'d'
   747  00FFC4  72                 	db	114	;'r'
   748  00FFC5  61                 	db	97	;'a'
   749  00FFC6  77                 	db	119	;'w'
   750  00FFC7  65                 	db	101	;'e'
   751  00FFC8  72                 	db	114	;'r'
   752  00FFC9  00                 	db	0
   753  00FFCA                     STR_10:
   754  00FFCA  6E                 	db	110	;'n'
   755  00FFCB  75                 	db	117	;'u'
   756  00FFCC  6D                 	db	109	;'m'
   757  00FFCD  62                 	db	98	;'b'
   758  00FFCE  65                 	db	101	;'e'
   759  00FFCF  72                 	db	114	;'r'
   760  00FFD0  3A                 	db	58	;':'
   761  00FFD1  20                 	db	32
   762  00FFD2  00                 	db	0
   763  00FFD3                     STR_57:
   764  00FFD3  69                 	db	105	;'i'
   765  00FFD4  6E                 	db	110	;'n'
   766  00FFD5  20                 	db	32
   767  00FFD6  75                 	db	117	;'u'
   768  00FFD7  73                 	db	115	;'s'
   769  00FFD8  65                 	db	101	;'e'
   770  00FFD9  21                 	db	33
   771  00FFDA  00                 	db	0
   772  00FFDB                     STR_1:
   773  00FFDB  4E                 	db	78	;'N'
   774  00FFDC  6F                 	db	111	;'o'
   775  00FFDD  20                 	db	32
   776  00FFDE  6C                 	db	108	;'l'
   777  00FFDF  6F                 	db	111	;'o'
   778  00FFE0  67                 	db	103	;'g'
   779  00FFE1  73                 	db	115	;'s'
   780  00FFE2  00                 	db	0
   781  00FFE3                     STR_39:
   782  00FFE3  53                 	db	83	;'S'
   783  00FFE4  74                 	db	116	;'t'
   784  00FFE5  61                 	db	97	;'a'
   785  00FFE6  6E                 	db	110	;'n'
   786  00FFE7  64                 	db	100	;'d'
   787  00FFE8  62                 	db	98	;'b'
   788  00FFE9  79                 	db	121	;'y'
   789  00FFEA  00                 	db	0
   790  00FFEB                     STR_11:
   791  00FFEB  47                 	db	71	;'G'
   792  00FFEC  72                 	db	114	;'r'
   793  00FFED  65                 	db	101	;'e'
   794  00FFEE  61                 	db	97	;'a'
   795  00FFEF  74                 	db	116	;'t'
   796  00FFF0  21                 	db	33
   797  00FFF1  00                 	db	0
   798  00FFF2                     STR_15:
   799  00FFF2  25                 	db	37
   800  00FFF3  69                 	db	105	;'i'
   801  00FFF4  3A                 	db	58	;':'
   802  00FFF5  25                 	db	37
   803  00FFF6  69                 	db	105	;'i'
   804  00FFF7  30                 	db	48	;'0'
   805  00FFF8  00                 	db	0
   806  00FFF9                     STR_16:
   807  00FFF9  25                 	db	37
   808  00FFFA  69                 	db	105	;'i'
   809  00FFFB  3A                 	db	58	;':'
   810  00FFFC  25                 	db	37
   811  00FFFD  69                 	db	105	;'i'
   812  00FFFE  00                 	db	0
   813  0000                     
   814                           ; #config settings
   815  00FFFF  00                 	db	0	; dummy byte at the end
   816  0000                     
   817                           	psect	cinit
   818  00D7C4                     __pcinit:
   819                           	opt stack 0
   820  00D7C4                     start_initialization:
   821                           	opt stack 0
   822  00D7C4                     __initialization:
   823                           	opt stack 0
   824                           
   825                           ; Clear objects allocated to COMRAM (34 bytes)
   826  00D7C4  EE00  F05D         	lfsr	0,__pbssCOMRAM
   827  00D7C8  0E22               	movlw	34
   828  00D7CA                     clear_0:
   829  00D7CA  6AEE               	clrf	postinc0,c
   830  00D7CC  06E8               	decf	wreg,f,c
   831  00D7CE  E1FD               	bnz	clear_0
   832  00D7D0                     end_of_initialization:
   833                           	opt stack 0
   834  00D7D0                     __end_of__initialization:
   835                           	opt stack 0
   836  00D7D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   837  00D7D2  6EF8               	movwf	tblptru,c
   838  00D7D4  0100               	movlb	0
   839  00D7D6  EF15  F06C         	goto	_main	;jump to C main() function
   840                           tblptru	equ	0xFF8
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           
   844                           	psect	bssCOMRAM
   845  00005D                     __pbssCOMRAM:
   846                           	opt stack 0
   847  00005D                     _drawerInformation:
   848                           	opt stack 0
   849  00005D                     	ds	16
   850  00006D                     diet_press@F3095:
   851                           	opt stack 0
   852  00006D                     	ds	8
   853  000075                     food_press@F3080:
   854                           	opt stack 0
   855  000075                     	ds	8
   856  00007D                     standbyMode@LCDinterruptState:
   857                           	opt stack 0
   858  00007D                     	ds	1
   859  00007E                     	ds	1
   860                           tblptru	equ	0xFF8
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           
   864                           	psect	cstackCOMRAM
   865  000001                     __pcstackCOMRAM:
   866                           	opt stack 0
   867  000001                     ?_check_food:
   868                           	opt stack 0
   869  000001                     ?_verifyKeypress:
   870                           	opt stack 0
   871  000001                     ?_get_digits:
   872                           	opt stack 0
   873  000001                     ?_decode_drawer:
   874                           	opt stack 0
   875  000001                     ?___wmul:
   876                           	opt stack 0
   877  000001                     ?___lwdiv:
   878                           	opt stack 0
   879  000001                     lcdNibble@temp:
   880                           	opt stack 0
   881  000001                     writeEEPROM@data:
   882                           	opt stack 0
   883  000001                     readEEPROM@address:
   884                           	opt stack 0
   885  000001                     check_food@sum:
   886                           	opt stack 0
   887  000001                     verifyKeypress@keypress:
   888                           	opt stack 0
   889  000001                     get_digits@sum:
   890                           	opt stack 0
   891  000001                     decode_drawer@drawer:
   892                           	opt stack 0
   893  000001                     ___wmul@multiplier:
   894                           	opt stack 0
   895  000001                     ___lwdiv@dividend:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x0
   899  000001                     	ds	1
   900  000002                     lcdNibble@data:
   901                           	opt stack 0
   902  000002                     writeEEPROM@address:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x1
   906  000002                     	ds	1
   907  000003                     ??_verifyKeypress:
   908  000003                     ??_get_digits:
   909  000003                     ??_decode_drawer:
   910  000003                     lcdInst@data:
   911                           	opt stack 0
   912  000003                     putch@data:
   913                           	opt stack 0
   914  000003                     check_food@foodInput:
   915                           	opt stack 0
   916  000003                     ___wmul@multiplicand:
   917                           	opt stack 0
   918  000003                     ___lwdiv@divisor:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x2
   922  000003                     	ds	1
   923  000004                     ??_initLCD:
   924                           
   925                           ; 1 bytes @ 0x3
   926  000004                     	ds	1
   927  000005                     ??_check_food:
   928  000005                     verifyKeypress@logNumber:
   929                           	opt stack 0
   930  000005                     get_digits@count:
   931                           	opt stack 0
   932  000005                     decode_drawer@returnValue:
   933                           	opt stack 0
   934  000005                     ___wmul@product:
   935                           	opt stack 0
   936  000005                     ___lwdiv@quotient:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x4
   940  000005                     	ds	1
   941  000006                     verifyKeypress@returnVal:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x5
   945  000006                     	ds	1
   946  000007                     ___lwdiv@counter:
   947                           	opt stack 0
   948  000007                     check_food@returnValue:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x6
   952  000007                     	ds	1
   953  000008                     ?___lwmod:
   954                           	opt stack 0
   955  000008                     verifyKeypress@i:
   956                           	opt stack 0
   957  000008                     ___lwmod@dividend:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x7
   961  000008                     	ds	2
   962  00000A                     ___lwmod@divisor:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x9
   966  00000A                     	ds	2
   967  00000C                     ___lwmod@counter:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0xB
   971  00000C                     	ds	1
   972  00000D                     ?_printf:
   973                           	opt stack 0
   974  00000D                     printf@f:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0xC
   978  00000D                     	ds	10
   979  000017                     ??_printf:
   980                           
   981                           ; 1 bytes @ 0x16
   982  000017                     	ds	1
   983  000018                     printf@ap:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x17
   987  000018                     	ds	2
   988  00001A                     printf@flag:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x19
   992  00001A                     	ds	1
   993  00001B                     printf@prec:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x1A
   997  00001B                     	ds	1
   998  00001C                     printf@val:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x1B
  1002  00001C                     	ds	2
  1003  00001E                     printf@c:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x1D
  1007  00001E                     	ds	1
  1008  00001F                     ?_displayLogs:
  1009                           	opt stack 0
  1010  00001F                     ?_food_press:
  1011                           	opt stack 0
  1012  00001F                     ?_diet_press:
  1013                           	opt stack 0
  1014  00001F                     ?_which_drawer:
  1015                           	opt stack 0
  1016  00001F                     displayLogs@logNumber:
  1017                           	opt stack 0
  1018  00001F                     food_press@dietSum:
  1019                           	opt stack 0
  1020  00001F                     diet_press@drawer:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x1E
  1024  00001F                     	ds	2
  1025  000021                     ??_displayLogs:
  1026  000021                     ??_diet_press:
  1027  000021                     ??_which_drawer:
  1028  000021                     food_press@drawer:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x20
  1032  000021                     	ds	1
  1033  000022                     which_drawer@rand:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x21
  1037  000022                     	ds	1
  1038  000023                     ??_food_press:
  1039  000023                     displayLogs@roundPieces:
  1040                           	opt stack 0
  1041  000023                     diet_press@previous:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x22
  1045  000023                     	ds	1
  1046  000024                     which_drawer@sum:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x23
  1050  000024                     	ds	1
  1051  000025                     displayLogs@flatPieces:
  1052                           	opt stack 0
  1053  000025                     food_press@tally:
  1054                           	opt stack 0
  1055  000025                     diet_press@i:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x24
  1059  000025                     	ds	1
  1060  000026                     which_drawer@backCheck:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x25
  1064  000026                     	ds	1
  1065  000027                     displayLogs@longPieces:
  1066                           	opt stack 0
  1067  000027                     food_press@backCheck:
  1068                           	opt stack 0
  1069  000027                     diet_press@backCheck:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x26
  1073  000027                     	ds	1
  1074  000028                     which_drawer@count:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x27
  1078  000028                     	ds	1
  1079  000029                     displayLogs@keypress3:
  1080                           	opt stack 0
  1081  000029                     food_press@isValid:
  1082                           	opt stack 0
  1083  000029                     diet_press@count:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x28
  1087  000029                     	ds	1
  1088  00002A                     which_drawer@keypress:
  1089                           	opt stack 0
  1090  00002A                     displayLogs@operationTime:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x29
  1094  00002A                     	ds	1
  1095  00002B                     food_press@count:
  1096                           	opt stack 0
  1097  00002B                     diet_press@sum:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x2A
  1101  00002B                     	ds	1
  1102  00002C                     displayLogs@minutes:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2B
  1106  00002C                     	ds	1
  1107  00002D                     diet_press@keypress:
  1108                           	opt stack 0
  1109  00002D                     food_press@foodTable:
  1110                           	opt stack 0
  1111                           
  1112                           ; 8 bytes @ 0x2C
  1113  00002D                     	ds	1
  1114  00002E                     displayLogs@seconds:
  1115                           	opt stack 0
  1116  00002E                     diet_press@dietTable:
  1117                           	opt stack 0
  1118                           
  1119                           ; 8 bytes @ 0x2D
  1120  00002E                     	ds	2
  1121  000030                     displayLogs@markedDrawer1:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x2F
  1125  000030                     	ds	2
  1126  000032                     displayLogs@markedDrawer2:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x31
  1130  000032                     	ds	2
  1131  000034                     displayLogs@markedDrawer3:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x33
  1135  000034                     	ds	1
  1136  000035                     food_press@keypress:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x34
  1140  000035                     	ds	1
  1141  000036                     displayLogs@markedDrawer4:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x35
  1145  000036                     	ds	2
  1146  000038                     displayLogs@n:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x37
  1150  000038                     	ds	2
  1151  00003A                     ?_viewLogs:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x39
  1155  00003A                     	ds	2
  1156  00003C                     ??_viewLogs:
  1157                           
  1158                           ; 1 bytes @ 0x3B
  1159  00003C                     	ds	2
  1160  00003E                     viewLogs@logView:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x3D
  1164  00003E                     	ds	2
  1165  000040                     viewLogs@checkLog:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x3F
  1169  000040                     	ds	2
  1170  000042                     viewLogs@returnVal:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x41
  1174  000042                     	ds	2
  1175  000044                     viewLogs@logNumber:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x43
  1179  000044                     	ds	1
  1180  000045                     viewLogs@keypress2:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x44
  1184  000045                     	ds	1
  1185  000046                     ??_standbyMode:
  1186                           
  1187                           ; 1 bytes @ 0x45
  1188  000046                     	ds	2
  1189  000048                     standbyMode@firstIteration:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x47
  1193  000048                     	ds	2
  1194  00004A                     standbyMode@whichKey:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x49
  1198  00004A                     	ds	2
  1199  00004C                     standbyMode@keypress:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x4B
  1203  00004C                     	ds	1
  1204  00004D                     standbyMode@display:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x4C
  1208  00004D                     	ds	1
  1209  00004E                     standbyMode@keypress1:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x4D
  1213  00004E                     	ds	1
  1214  00004F                     standbyMode@validDrawer:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x4E
  1218  00004F                     	ds	2
  1219  000051                     standbyMode@zero:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x50
  1223  000051                     	ds	2
  1224  000053                     standbyMode@food:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x52
  1228  000053                     	ds	2
  1229  000055                     standbyMode@drawerCount:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x54
  1233  000055                     	ds	2
  1234  000057                     standbyMode@diet:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x56
  1238  000057                     	ds	2
  1239  000059                     standbyMode@i:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x58
  1243  000059                     	ds	2
  1244  00005B                     standbyMode@drawer:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x5A
  1248  00005B                     	ds	2
  1249  00005D                     tblptru	equ	0xFF8
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           
  1253                           ; 1 bytes @ 0x5C
  1254 ;;
  1255 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1256 ;;
  1257 ;; *************** function _main *****************
  1258 ;; Defined at:
  1259 ;;		line 13 in file "main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;Total ram usage:        0 bytes
  1278 ;; Hardware stack levels required when called:    6
  1279 ;; This function calls:
  1280 ;;		_initLCD
  1281 ;;		_standbyMode
  1282 ;; This function is called by:
  1283 ;;		Startup code after reset
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text0
  1288  00D82A                     __ptext0:
  1289                           	opt stack 0
  1290  00D82A                     _main:
  1291                           	opt stack 25
  1292                           
  1293                           ;main.c: 19: LATA = 0x00;
  1294                           
  1295                           ;incstack = 0
  1296  00D82A  0E00               	movlw	0
  1297  00D82C  6E89               	movwf	3977,c	;volatile
  1298                           
  1299                           ;main.c: 20: LATB = 0x00;
  1300  00D82E  0E00               	movlw	0
  1301  00D830  6E8A               	movwf	3978,c	;volatile
  1302                           
  1303                           ;main.c: 21: LATC = 0x00;
  1304  00D832  0E00               	movlw	0
  1305  00D834  6E8B               	movwf	3979,c	;volatile
  1306                           
  1307                           ;main.c: 22: LATD = 0x00;
  1308  00D836  0E00               	movlw	0
  1309  00D838  6E8C               	movwf	3980,c	;volatile
  1310                           
  1311                           ;main.c: 23: LATE = 0x00;
  1312  00D83A  0E00               	movlw	0
  1313  00D83C  6E8D               	movwf	3981,c	;volatile
  1314                           
  1315                           ;main.c: 27: TRISA = 0xFF;
  1316  00D83E  6892               	setf	3986,c	;volatile
  1317                           
  1318                           ;main.c: 28: TRISB = 0xFF;
  1319  00D840  6893               	setf	3987,c	;volatile
  1320                           
  1321                           ;main.c: 29: TRISC = 0x00;
  1322  00D842  0E00               	movlw	0
  1323  00D844  6E94               	movwf	3988,c	;volatile
  1324                           
  1325                           ;main.c: 30: TRISD = 0x00;
  1326  00D846  0E00               	movlw	0
  1327  00D848  6E95               	movwf	3989,c	;volatile
  1328                           
  1329                           ;main.c: 31: TRISE = 0x00;
  1330  00D84A  0E00               	movlw	0
  1331  00D84C  6E96               	movwf	3990,c	;volatile
  1332                           
  1333                           ;main.c: 34: ADCON0 = 0x00;
  1334  00D84E  0E00               	movlw	0
  1335  00D850  6EC2               	movwf	4034,c	;volatile
  1336                           
  1337                           ;main.c: 35: ADCON1 = 0b00001111;
  1338  00D852  0E0F               	movlw	15
  1339  00D854  6EC1               	movwf	4033,c	;volatile
  1340                           
  1341                           ;main.c: 38: initLCD();
  1342  00D856  EC52  F06C         	call	_initLCD	;wreg free
  1343                           
  1344                           ;main.c: 56: standbyMode();
  1345  00D85A  EC6E  F07A         	call	_standbyMode	;wreg free
  1346                           
  1347                           ;main.c: 57: return;
  1348  00D85E  EF00  F000         	goto	start
  1349  00D862                     __end_of_main:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           
  1355 ;; *************** function _standbyMode *****************
  1356 ;; Defined at:
  1357 ;;		line 937 in file "standbyMode.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  keypress1       1   77[COMRAM] unsigned char 
  1362 ;;  whichKey        2   73[COMRAM] unsigned int 
  1363 ;;  drawer          2   90[COMRAM] unsigned int 
  1364 ;;  i               2   88[COMRAM] unsigned int 
  1365 ;;  diet            2   86[COMRAM] unsigned int 
  1366 ;;  drawerCount     2   84[COMRAM] unsigned int 
  1367 ;;  food            2   82[COMRAM] unsigned int 
  1368 ;;  zero            2   80[COMRAM] unsigned int 
  1369 ;;  validDrawer     2   78[COMRAM] unsigned int 
  1370 ;;  firstIterati    2   71[COMRAM] unsigned int 
  1371 ;;  display         1   76[COMRAM] unsigned char 
  1372 ;;  keypress        1   75[COMRAM] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:       23 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    5
  1389 ;; This function calls:
  1390 ;;		_diet_press
  1391 ;;		_food_press
  1392 ;;		_lcdInst
  1393 ;;		_printf
  1394 ;;		_putch
  1395 ;;		_readEEPROM
  1396 ;;		_viewLogs
  1397 ;;		_which_drawer
  1398 ;;		_writeEEPROM
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text1
  1405  00F4DC                     __ptext1:
  1406                           	opt stack 0
  1407  00F4DC                     _standbyMode:
  1408                           	opt stack 25
  1409                           
  1410                           ;standbyMode.c: 938: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1411                           
  1412                           ;incstack = 0
  1413  00F4DC  0E01               	movlw	1
  1414  00F4DE  ECC4  F06B         	call	_lcdInst
  1415  00F4E2  0EC3               	movlw	195
  1416  00F4E4  6E46               	movwf	??_standbyMode& (0+255),c
  1417  00F4E6  0ECD               	movlw	205
  1418  00F4E8                     u5827:
  1419  00F4E8  2EE8               	decfsz	wreg,f,c
  1420  00F4EA  D7FE               	bra	u5827
  1421  00F4EC  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1422  00F4EE  D7FC               	bra	u5827
  1423  00F4F0  F000               	nop	
  1424                           
  1425                           ;standbyMode.c: 939: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1426  00F4F2  0E0C               	movlw	12
  1427  00F4F4  ECC4  F06B         	call	_lcdInst
  1428                           
  1429                           ;standbyMode.c: 940: printf("Standby");
  1430  00F4F8  0EE3               	movlw	low STR_39
  1431  00F4FA  6E0D               	movwf	printf@f,c
  1432  00F4FC  0EFF               	movlw	high STR_39
  1433  00F4FE  6E0E               	movwf	printf@f+1,c
  1434  00F500  ECD9  F06D         	call	_printf	;wreg free
  1435                           
  1436                           ;standbyMode.c: 941: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1437  00F504  0E66               	movlw	102
  1438  00F506  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1439  00F508  0E76               	movlw	118
  1440  00F50A  6E46               	movwf	??_standbyMode& (0+255),c
  1441  00F50C  0EC1               	movlw	193
  1442  00F50E                     u5837:
  1443  00F50E  2EE8               	decfsz	wreg,f,c
  1444  00F510  D7FE               	bra	u5837
  1445  00F512  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1446  00F514  D7FC               	bra	u5837
  1447  00F516  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1448  00F518  D7FA               	bra	u5837
  1449  00F51A  F000               	nop	
  1450                           
  1451                           ;standbyMode.c: 942: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1452  00F51C  0E01               	movlw	1
  1453  00F51E  ECC4  F06B         	call	_lcdInst
  1454  00F522  0EC3               	movlw	195
  1455  00F524  6E46               	movwf	??_standbyMode& (0+255),c
  1456  00F526  0ECD               	movlw	205
  1457  00F528                     u5847:
  1458  00F528  2EE8               	decfsz	wreg,f,c
  1459  00F52A  D7FE               	bra	u5847
  1460  00F52C  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1461  00F52E  D7FC               	bra	u5847
  1462  00F530  F000               	nop	
  1463                           
  1464                           ;standbyMode.c: 943: printf("Press any key to");
  1465  00F532  0E01               	movlw	low STR_5
  1466  00F534  6E0D               	movwf	printf@f,c
  1467  00F536  0EFE               	movlw	high STR_5
  1468  00F538  6E0E               	movwf	printf@f+1,c
  1469  00F53A  ECD9  F06D         	call	_printf	;wreg free
  1470                           
  1471                           ;standbyMode.c: 944: lcdInst(0xC0);;
  1472  00F53E  0EC0               	movlw	192
  1473  00F540  ECC4  F06B         	call	_lcdInst
  1474                           
  1475                           ;standbyMode.c: 945: printf("begin operation.");
  1476  00F544  0ECE               	movlw	low STR_41
  1477  00F546  6E0D               	movwf	printf@f,c
  1478  00F548  0EFD               	movlw	high STR_41
  1479  00F54A  6E0E               	movwf	printf@f+1,c
  1480  00F54C  ECD9  F06D         	call	_printf	;wreg free
  1481  00F550                     
  1482                           ;standbyMode.c: 948: continue;
  1483  00F550  A281               	btfss	3969,1,c	;volatile
  1484  00F552  D7FE               	goto	l451
  1485                           
  1486                           ;standbyMode.c: 949: }
  1487                           ;standbyMode.c: 951: writeEEPROM(250, 1);
  1488  00F554  0E01               	movlw	1
  1489  00F556  6E01               	movwf	writeEEPROM@data,c
  1490  00F558  0EFA               	movlw	250
  1491  00F55A  EC00  F06C         	call	_writeEEPROM
  1492                           
  1493                           ;standbyMode.c: 952: writeEEPROM(3, 91);
  1494  00F55E  0E5B               	movlw	91
  1495  00F560  6E01               	movwf	writeEEPROM@data,c
  1496  00F562  0E03               	movlw	3
  1497  00F564  EC00  F06C         	call	_writeEEPROM
  1498                           
  1499                           ;standbyMode.c: 953: writeEEPROM(4, 3);
  1500  00F568  0E03               	movlw	3
  1501  00F56A  6E01               	movwf	writeEEPROM@data,c
  1502  00F56C  0E04               	movlw	4
  1503  00F56E  EC00  F06C         	call	_writeEEPROM
  1504                           
  1505                           ;standbyMode.c: 954: writeEEPROM(5, 15);
  1506  00F572  0E0F               	movlw	15
  1507  00F574  6E01               	movwf	writeEEPROM@data,c
  1508  00F576  0E05               	movlw	5
  1509  00F578  EC00  F06C         	call	_writeEEPROM
  1510                           
  1511                           ;standbyMode.c: 955: writeEEPROM(6, 8);
  1512  00F57C  0E08               	movlw	8
  1513  00F57E  6E01               	movwf	writeEEPROM@data,c
  1514  00F580  0E06               	movlw	6
  1515  00F582  EC00  F06C         	call	_writeEEPROM
  1516                           
  1517                           ;standbyMode.c: 956: writeEEPROM(7, 12);
  1518  00F586  0E0C               	movlw	12
  1519  00F588  6E01               	movwf	writeEEPROM@data,c
  1520  00F58A  0E07               	movlw	7
  1521  00F58C  EC00  F06C         	call	_writeEEPROM
  1522                           
  1523                           ;standbyMode.c: 957: writeEEPROM(8, 1);
  1524  00F590  0E01               	movlw	1
  1525  00F592  6E01               	movwf	writeEEPROM@data,c
  1526  00F594  0E08               	movlw	8
  1527  00F596  EC00  F06C         	call	_writeEEPROM
  1528                           
  1529                           ;standbyMode.c: 958: writeEEPROM(9, 13);
  1530  00F59A  0E0D               	movlw	13
  1531  00F59C  6E01               	movwf	writeEEPROM@data,c
  1532  00F59E  0E09               	movlw	9
  1533  00F5A0  EC00  F06C         	call	_writeEEPROM
  1534                           
  1535                           ;standbyMode.c: 959: writeEEPROM(10, 0);
  1536  00F5A4  0E00               	movlw	0
  1537  00F5A6  6E01               	movwf	writeEEPROM@data,c
  1538  00F5A8  0E0A               	movlw	10
  1539  00F5AA  EC00  F06C         	call	_writeEEPROM
  1540                           
  1541                           ;standbyMode.c: 960: writeEEPROM(0x0, 0x1);
  1542  00F5AE  0E01               	movlw	1
  1543  00F5B0  6E01               	movwf	writeEEPROM@data,c
  1544  00F5B2  0E00               	movlw	0
  1545  00F5B4  EC00  F06C         	call	_writeEEPROM
  1546                           
  1547                           ;standbyMode.c: 961: unsigned char display = readEEPROM(0x0);
  1548  00F5B8  0E00               	movlw	0
  1549  00F5BA  ECD8  F06B         	call	_readEEPROM
  1550  00F5BE  6E4D               	movwf	standbyMode@display,c
  1551                           
  1552                           ;standbyMode.c: 962: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1553  00F5C0  0E01               	movlw	1
  1554  00F5C2  ECC4  F06B         	call	_lcdInst
  1555  00F5C6  0EC3               	movlw	195
  1556  00F5C8  6E46               	movwf	??_standbyMode& (0+255),c
  1557  00F5CA  0ECD               	movlw	205
  1558  00F5CC                     u5857:
  1559  00F5CC  2EE8               	decfsz	wreg,f,c
  1560  00F5CE  D7FE               	bra	u5857
  1561  00F5D0  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1562  00F5D2  D7FC               	bra	u5857
  1563  00F5D4  F000               	nop	
  1564                           
  1565                           ;standbyMode.c: 963: printf("Stored value: ");
  1566  00F5D6  0EC3               	movlw	low STR_42
  1567  00F5D8  6E0D               	movwf	printf@f,c
  1568  00F5DA  0EFE               	movlw	high STR_42
  1569  00F5DC  6E0E               	movwf	printf@f+1,c
  1570  00F5DE  ECD9  F06D         	call	_printf	;wreg free
  1571                           
  1572                           ;standbyMode.c: 964: putch(input[display]);
  1573  00F5E2  504D               	movf	standbyMode@display,w,c
  1574  00F5E4  0D01               	mullw	1
  1575  00F5E6  0E8A               	movlw	low _input
  1576  00F5E8  24F3               	addwf	prodl,w,c
  1577  00F5EA  6EF6               	movwf	tblptrl,c
  1578  00F5EC  0EFD               	movlw	high _input
  1579  00F5EE  20F4               	addwfc	prodh,w,c
  1580  00F5F0  6EF7               	movwf	tblptrh,c
  1581  00F5F2                     	if	0	;There are less than 3 active tblptr bytes
  1582  00F5F2                     	endif
  1583  00F5F2  0008               	tblrd		*
  1584  00F5F4  50F5               	movf	tablat,w,c
  1585  00F5F6  ECCE  F06B         	call	_putch
  1586                           
  1587                           ;standbyMode.c: 965: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1588  00F5FA  0E66               	movlw	102
  1589  00F5FC  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1590  00F5FE  0E76               	movlw	118
  1591  00F600  6E46               	movwf	??_standbyMode& (0+255),c
  1592  00F602  0EC1               	movlw	193
  1593  00F604                     u5867:
  1594  00F604  2EE8               	decfsz	wreg,f,c
  1595  00F606  D7FE               	bra	u5867
  1596  00F608  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1597  00F60A  D7FC               	bra	u5867
  1598  00F60C  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1599  00F60E  D7FA               	bra	u5867
  1600  00F610  F000               	nop	
  1601                           
  1602                           ;standbyMode.c: 967: writeEEPROM(0x0, 0x3);
  1603  00F612  0E03               	movlw	3
  1604  00F614  6E01               	movwf	writeEEPROM@data,c
  1605  00F616  0E00               	movlw	0
  1606  00F618  EC00  F06C         	call	_writeEEPROM
  1607                           
  1608                           ;standbyMode.c: 968: unsigned char display = readEEPROM(0x0);
  1609  00F61C  0E00               	movlw	0
  1610  00F61E  ECD8  F06B         	call	_readEEPROM
  1611  00F622  6E4D               	movwf	standbyMode@display,c
  1612                           
  1613                           ;standbyMode.c: 969: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1614  00F624  0E01               	movlw	1
  1615  00F626  ECC4  F06B         	call	_lcdInst
  1616  00F62A  0EC3               	movlw	195
  1617  00F62C  6E46               	movwf	??_standbyMode& (0+255),c
  1618  00F62E  0ECD               	movlw	205
  1619  00F630                     u5877:
  1620  00F630  2EE8               	decfsz	wreg,f,c
  1621  00F632  D7FE               	bra	u5877
  1622  00F634  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1623  00F636  D7FC               	bra	u5877
  1624  00F638  F000               	nop	
  1625                           
  1626                           ;standbyMode.c: 970: printf("Stored value: ");
  1627  00F63A  0EC3               	movlw	low STR_42
  1628  00F63C  6E0D               	movwf	printf@f,c
  1629  00F63E  0EFE               	movlw	high STR_42
  1630  00F640  6E0E               	movwf	printf@f+1,c
  1631  00F642  ECD9  F06D         	call	_printf	;wreg free
  1632                           
  1633                           ;standbyMode.c: 971: putch(input[display]);
  1634  00F646  504D               	movf	standbyMode@display,w,c
  1635  00F648  0D01               	mullw	1
  1636  00F64A  0E8A               	movlw	low _input
  1637  00F64C  24F3               	addwf	prodl,w,c
  1638  00F64E  6EF6               	movwf	tblptrl,c
  1639  00F650  0EFD               	movlw	high _input
  1640  00F652  20F4               	addwfc	prodh,w,c
  1641  00F654  6EF7               	movwf	tblptrh,c
  1642  00F656                     	if	0	;There are less than 3 active tblptr bytes
  1643  00F656                     	endif
  1644  00F656  0008               	tblrd		*
  1645  00F658  50F5               	movf	tablat,w,c
  1646  00F65A  ECCE  F06B         	call	_putch
  1647                           
  1648                           ;standbyMode.c: 972: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1649  00F65E  0E66               	movlw	102
  1650  00F660  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1651  00F662  0E76               	movlw	118
  1652  00F664  6E46               	movwf	??_standbyMode& (0+255),c
  1653  00F666  0EC1               	movlw	193
  1654  00F668                     u5887:
  1655  00F668  2EE8               	decfsz	wreg,f,c
  1656  00F66A  D7FE               	bra	u5887
  1657  00F66C  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1658  00F66E  D7FC               	bra	u5887
  1659  00F670  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1660  00F672  D7FA               	bra	u5887
  1661  00F674  F000               	nop	
  1662                           
  1663                           ;standbyMode.c: 975: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1664  00F676  0E01               	movlw	1
  1665  00F678  ECC4  F06B         	call	_lcdInst
  1666  00F67C  0EC3               	movlw	195
  1667  00F67E  6E46               	movwf	??_standbyMode& (0+255),c
  1668  00F680  0ECD               	movlw	205
  1669  00F682                     u5897:
  1670  00F682  2EE8               	decfsz	wreg,f,c
  1671  00F684  D7FE               	bra	u5897
  1672  00F686  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1673  00F688  D7FC               	bra	u5897
  1674  00F68A  F000               	nop	
  1675                           
  1676                           ;standbyMode.c: 976: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1677  00F68C  0E0C               	movlw	12
  1678  00F68E  ECC4  F06B         	call	_lcdInst
  1679                           
  1680                           ;standbyMode.c: 977: printf("Welcome to your");
  1681  00F692  0EA3               	movlw	low STR_44
  1682  00F694  6E0D               	movwf	printf@f,c
  1683  00F696  0EFE               	movlw	high STR_44
  1684  00F698  6E0E               	movwf	printf@f+1,c
  1685  00F69A  ECD9  F06D         	call	_printf	;wreg free
  1686                           
  1687                           ;standbyMode.c: 978: lcdInst(0xC0);;
  1688  00F69E  0EC0               	movlw	192
  1689  00F6A0  ECC4  F06B         	call	_lcdInst
  1690                           
  1691                           ;standbyMode.c: 979: printf("cabinet sorter!");
  1692  00F6A4  0E23               	movlw	low STR_45
  1693  00F6A6  6E0D               	movwf	printf@f,c
  1694  00F6A8  0EFE               	movlw	high STR_45
  1695  00F6AA  6E0E               	movwf	printf@f+1,c
  1696  00F6AC  ECD9  F06D         	call	_printf	;wreg free
  1697                           
  1698                           ;standbyMode.c: 980: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1699  00F6B0  0E66               	movlw	102
  1700  00F6B2  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1701  00F6B4  0E76               	movlw	118
  1702  00F6B6  6E46               	movwf	??_standbyMode& (0+255),c
  1703  00F6B8  0EC1               	movlw	193
  1704  00F6BA                     u5907:
  1705  00F6BA  2EE8               	decfsz	wreg,f,c
  1706  00F6BC  D7FE               	bra	u5907
  1707  00F6BE  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1708  00F6C0  D7FC               	bra	u5907
  1709  00F6C2  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1710  00F6C4  D7FA               	bra	u5907
  1711  00F6C6  F000               	nop	
  1712                           
  1713                           ;standbyMode.c: 983: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1714  00F6C8  0E01               	movlw	1
  1715  00F6CA  ECC4  F06B         	call	_lcdInst
  1716  00F6CE  0EC3               	movlw	195
  1717  00F6D0  6E46               	movwf	??_standbyMode& (0+255),c
  1718  00F6D2  0ECD               	movlw	205
  1719  00F6D4                     u5917:
  1720  00F6D4  2EE8               	decfsz	wreg,f,c
  1721  00F6D6  D7FE               	bra	u5917
  1722  00F6D8  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1723  00F6DA  D7FC               	bra	u5917
  1724  00F6DC  F000               	nop	
  1725                           
  1726                           ;standbyMode.c: 984: printf("Press # to");
  1727  00F6DE  0EB5               	movlw	low STR_46
  1728  00F6E0  6E0D               	movwf	printf@f,c
  1729  00F6E2  0EFF               	movlw	high STR_46
  1730  00F6E4  6E0E               	movwf	printf@f+1,c
  1731  00F6E6  ECD9  F06D         	call	_printf	;wreg free
  1732                           
  1733                           ;standbyMode.c: 985: lcdInst(0xC0);;
  1734  00F6EA  0EC0               	movlw	192
  1735  00F6EC  ECC4  F06B         	call	_lcdInst
  1736                           
  1737                           ;standbyMode.c: 986: printf("view logs,");
  1738  00F6F0  0E89               	movlw	low STR_47
  1739  00F6F2  6E0D               	movwf	printf@f,c
  1740  00F6F4  0EFF               	movlw	high STR_47
  1741  00F6F6  6E0E               	movwf	printf@f+1,c
  1742  00F6F8  ECD9  F06D         	call	_printf	;wreg free
  1743                           
  1744                           ;standbyMode.c: 987: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1745  00F6FC  0E66               	movlw	102
  1746  00F6FE  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1747  00F700  0E76               	movlw	118
  1748  00F702  6E46               	movwf	??_standbyMode& (0+255),c
  1749  00F704  0EC1               	movlw	193
  1750  00F706                     u5927:
  1751  00F706  2EE8               	decfsz	wreg,f,c
  1752  00F708  D7FE               	bra	u5927
  1753  00F70A  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1754  00F70C  D7FC               	bra	u5927
  1755  00F70E  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1756  00F710  D7FA               	bra	u5927
  1757  00F712  F000               	nop	
  1758                           
  1759                           ;standbyMode.c: 988: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1760  00F714  0E01               	movlw	1
  1761  00F716  ECC4  F06B         	call	_lcdInst
  1762  00F71A  0EC3               	movlw	195
  1763  00F71C  6E46               	movwf	??_standbyMode& (0+255),c
  1764  00F71E  0ECD               	movlw	205
  1765  00F720                     u5937:
  1766  00F720  2EE8               	decfsz	wreg,f,c
  1767  00F722  D7FE               	bra	u5937
  1768  00F724  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1769  00F726  D7FC               	bra	u5937
  1770  00F728  F000               	nop	
  1771                           
  1772                           ;standbyMode.c: 989: printf("or press D to");
  1773  00F72A  0E47               	movlw	low STR_48
  1774  00F72C  6E0D               	movwf	printf@f,c
  1775  00F72E  0EFF               	movlw	high STR_48
  1776  00F730  6E0E               	movwf	printf@f+1,c
  1777  00F732  ECD9  F06D         	call	_printf	;wreg free
  1778                           
  1779                           ;standbyMode.c: 990: lcdInst(0xC0);;
  1780  00F736  0EC0               	movlw	192
  1781  00F738  ECC4  F06B         	call	_lcdInst
  1782                           
  1783                           ;standbyMode.c: 991: printf("begin operation.");
  1784  00F73C  0ECE               	movlw	low STR_41
  1785  00F73E  6E0D               	movwf	printf@f,c
  1786  00F740  0EFD               	movlw	high STR_41
  1787  00F742  6E0E               	movwf	printf@f+1,c
  1788  00F744  ECD9  F06D         	call	_printf	;wreg free
  1789  00F748  A281               	btfss	3969,1,c	;volatile
  1790  00F74A  D7FE               	goto	l454
  1791                           
  1792                           ;standbyMode.c: 994: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1793  00F74C  3881               	swapf	3969,w,c	;volatile
  1794  00F74E  0B0F               	andlw	15
  1795  00F750  0B0F               	andlw	15
  1796  00F752  6E4C               	movwf	standbyMode@keypress,c
  1797  00F754  B281               	btfsc	3969,1,c	;volatile
  1798  00F756  D7FE               	goto	l457
  1799                           
  1800                           ;standbyMode.c: 997: if (keypress == 15){
  1801  00F758  0E0F               	movlw	15
  1802  00F75A  184C               	xorwf	standbyMode@keypress,w,c
  1803  00F75C  A4D8               	btfss	status,2,c
  1804  00F75E  D284               	goto	l459
  1805                           
  1806                           ;standbyMode.c: 1039: unsigned int drawerCount = 0;
  1807  00F760  0E00               	movlw	0
  1808  00F762  6E56               	movwf	standbyMode@drawerCount+1,c
  1809  00F764  0E00               	movlw	0
  1810  00F766  6E55               	movwf	standbyMode@drawerCount,c
  1811                           
  1812                           ;standbyMode.c: 1040: unsigned int i = 0;
  1813  00F768  0E00               	movlw	0
  1814  00F76A  6E5A               	movwf	standbyMode@i+1,c
  1815  00F76C  0E00               	movlw	0
  1816  00F76E  6E59               	movwf	standbyMode@i,c
  1817                           
  1818                           ;standbyMode.c: 1041: unsigned int validDrawer = 0;
  1819  00F770  0E00               	movlw	0
  1820  00F772  6E50               	movwf	standbyMode@validDrawer+1,c
  1821  00F774  0E00               	movlw	0
  1822  00F776  6E4F               	movwf	standbyMode@validDrawer,c
  1823                           
  1824                           ;standbyMode.c: 1042: unsigned int zero = 0;
  1825  00F778  0E00               	movlw	0
  1826  00F77A  6E52               	movwf	standbyMode@zero+1,c
  1827  00F77C  0E00               	movlw	0
  1828  00F77E  6E51               	movwf	standbyMode@zero,c
  1829                           
  1830                           ;standbyMode.c: 1043: unsigned int firstIteration = 0;
  1831  00F780  0E00               	movlw	0
  1832  00F782  6E49               	movwf	standbyMode@firstIteration+1,c
  1833  00F784  0E00               	movlw	0
  1834  00F786  6E48               	movwf	standbyMode@firstIteration,c
  1835                           
  1836                           ;standbyMode.c: 1044: unsigned int drawer = 0;
  1837  00F788  0E00               	movlw	0
  1838  00F78A  6E5C               	movwf	standbyMode@drawer+1,c
  1839  00F78C  0E00               	movlw	0
  1840  00F78E  6E5B               	movwf	standbyMode@drawer,c
  1841                           
  1842                           ;standbyMode.c: 1045: unsigned int diet = 0;
  1843  00F790  0E00               	movlw	0
  1844  00F792  6E58               	movwf	standbyMode@diet+1,c
  1845  00F794  0E00               	movlw	0
  1846  00F796  6E57               	movwf	standbyMode@diet,c
  1847                           
  1848                           ;standbyMode.c: 1046: unsigned int food = 0;
  1849  00F798  0E00               	movlw	0
  1850  00F79A  6E54               	movwf	standbyMode@food+1,c
  1851  00F79C  0E00               	movlw	0
  1852  00F79E  6E53               	movwf	standbyMode@food,c
  1853  00F7A0                     
  1854                           ;standbyMode.c: 1049: if (firstIteration == 1){
  1855  00F7A0  0448               	decf	standbyMode@firstIteration,w,c
  1856  00F7A2  1049               	iorwf	standbyMode@firstIteration+1,w,c
  1857  00F7A4  A4D8               	btfss	status,2,c
  1858  00F7A6  D15C               	goto	l461
  1859  00F7A8                     u5550:
  1860                           
  1861                           ;standbyMode.c: 1052: if(drawerCount >= 8){
  1862                           
  1863                           ;standbyMode.c: 1050: while (1){
  1864  00F7A8  5056               	movf	standbyMode@drawerCount+1,w,c
  1865  00F7AA  E104               	bnz	u5560
  1866  00F7AC  0E08               	movlw	8
  1867  00F7AE  5C55               	subwf	standbyMode@drawerCount,w,c
  1868  00F7B0  A0D8               	btfss	status,0,c
  1869  00F7B2  D02A               	goto	l463
  1870  00F7B4                     u5560:
  1871                           
  1872                           ;standbyMode.c: 1053: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1873  00F7B4  0E01               	movlw	1
  1874  00F7B6  ECC4  F06B         	call	_lcdInst
  1875  00F7BA  0EC3               	movlw	195
  1876  00F7BC  6E46               	movwf	??_standbyMode& (0+255),c
  1877  00F7BE  0ECD               	movlw	205
  1878  00F7C0                     u5947:
  1879  00F7C0  2EE8               	decfsz	wreg,f,c
  1880  00F7C2  D7FE               	bra	u5947
  1881  00F7C4  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1882  00F7C6  D7FC               	bra	u5947
  1883  00F7C8  F000               	nop	
  1884                           
  1885                           ;standbyMode.c: 1054: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1886  00F7CA  0E0C               	movlw	12
  1887  00F7CC  ECC4  F06B         	call	_lcdInst
  1888                           
  1889                           ;standbyMode.c: 1055: printf("Maximum of 8");
  1890  00F7D0  0E6F               	movlw	low STR_50
  1891  00F7D2  6E0D               	movwf	printf@f,c
  1892  00F7D4  0EFF               	movlw	high STR_50
  1893  00F7D6  6E0E               	movwf	printf@f+1,c
  1894  00F7D8  ECD9  F06D         	call	_printf	;wreg free
  1895                           
  1896                           ;standbyMode.c: 1056: lcdInst(0xC0);;
  1897  00F7DC  0EC0               	movlw	192
  1898  00F7DE  ECC4  F06B         	call	_lcdInst
  1899                           
  1900                           ;standbyMode.c: 1057: printf("drawers reached!");
  1901  00F7E2  0EBD               	movlw	low STR_51
  1902  00F7E4  6E0D               	movwf	printf@f,c
  1903  00F7E6  0EFD               	movlw	high STR_51
  1904  00F7E8  6E0E               	movwf	printf@f+1,c
  1905  00F7EA  ECD9  F06D         	call	_printf	;wreg free
  1906                           
  1907                           ;standbyMode.c: 1058: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1908  00F7EE  0E66               	movlw	102
  1909  00F7F0  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  1910  00F7F2  0E76               	movlw	118
  1911  00F7F4  6E46               	movwf	??_standbyMode& (0+255),c
  1912  00F7F6  0EC1               	movlw	193
  1913  00F7F8                     u5957:
  1914  00F7F8  2EE8               	decfsz	wreg,f,c
  1915  00F7FA  D7FE               	bra	u5957
  1916  00F7FC  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1917  00F7FE  D7FC               	bra	u5957
  1918  00F800  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1919  00F802  D7FA               	bra	u5957
  1920  00F804  F000               	nop	
  1921                           
  1922                           ;standbyMode.c: 1059: break;
  1923  00F806  0012               	return	
  1924  00F808                     l463:
  1925                           
  1926                           ;standbyMode.c: 1060: }
  1927                           ;standbyMode.c: 1062: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  1928  00F808  0E01               	movlw	1
  1929  00F80A  ECC4  F06B         	call	_lcdInst
  1930  00F80E  0EC3               	movlw	195
  1931  00F810  6E46               	movwf	??_standbyMode& (0+255),c
  1932  00F812  0ECD               	movlw	205
  1933  00F814                     u5967:
  1934  00F814  2EE8               	decfsz	wreg,f,c
  1935  00F816  D7FE               	bra	u5967
  1936  00F818  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1937  00F81A  D7FC               	bra	u5967
  1938  00F81C  F000               	nop	
  1939                           
  1940                           ;standbyMode.c: 1063: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1941  00F81E  0E0C               	movlw	12
  1942  00F820  ECC4  F06B         	call	_lcdInst
  1943                           
  1944                           ;standbyMode.c: 1064: printf("Another drawer?");
  1945  00F824  0E93               	movlw	low STR_52
  1946  00F826  6E0D               	movwf	printf@f,c
  1947  00F828  0EFE               	movlw	high STR_52
  1948  00F82A  6E0E               	movwf	printf@f+1,c
  1949  00F82C  ECD9  F06D         	call	_printf	;wreg free
  1950                           
  1951                           ;standbyMode.c: 1065: lcdInst(0xC0);;
  1952  00F830  0EC0               	movlw	192
  1953  00F832  ECC4  F06B         	call	_lcdInst
  1954                           
  1955                           ;standbyMode.c: 1066: printf("# = No, D = Yes");
  1956  00F836  0EB3               	movlw	low STR_28
  1957  00F838  6E0D               	movwf	printf@f,c
  1958  00F83A  0EFE               	movlw	high STR_28
  1959  00F83C  6E0E               	movwf	printf@f+1,c
  1960  00F83E  ECD9  F06D         	call	_printf	;wreg free
  1961  00F842  A281               	btfss	3969,1,c	;volatile
  1962  00F844  D7FE               	goto	l467
  1963                           
  1964                           ;standbyMode.c: 1069: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  1965  00F846  3881               	swapf	3969,w,c	;volatile
  1966  00F848  0B0F               	andlw	15
  1967  00F84A  0B0F               	andlw	15
  1968  00F84C  6E4E               	movwf	standbyMode@keypress1,c
  1969  00F84E  B281               	btfsc	3969,1,c	;volatile
  1970  00F850  D7FE               	goto	l470
  1971                           
  1972                           ;standbyMode.c: 1072: if (keypress1 == 15){
  1973  00F852  0E0F               	movlw	15
  1974  00F854  184E               	xorwf	standbyMode@keypress1,w,c
  1975  00F856  A4D8               	btfss	status,2,c
  1976  00F858  D0FC               	goto	l472
  1977  00F85A                     u5590:
  1978                           
  1979                           ;standbyMode.c: 1073: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1980  00F85A  0E01               	movlw	1
  1981  00F85C  ECC4  F06B         	call	_lcdInst
  1982  00F860  0EC3               	movlw	195
  1983  00F862  6E46               	movwf	??_standbyMode& (0+255),c
  1984  00F864  0ECD               	movlw	205
  1985  00F866                     u5977:
  1986  00F866  2EE8               	decfsz	wreg,f,c
  1987  00F868  D7FE               	bra	u5977
  1988  00F86A  2E46               	decfsz	??_standbyMode& (0+255),f,c
  1989  00F86C  D7FC               	bra	u5977
  1990  00F86E  F000               	nop	
  1991                           
  1992                           ;standbyMode.c: 1074: drawer = which_drawer();
  1993  00F870  EC62  F06F         	call	_which_drawer	;wreg free
  1994  00F874  C01F  F05B         	movff	?_which_drawer,standbyMode@drawer
  1995  00F878  C020  F05C         	movff	?_which_drawer+1,standbyMode@drawer+1
  1996                           
  1997                           ;standbyMode.c: 1076: if (drawer == 100){
  1998  00F87C  0E64               	movlw	100
  1999  00F87E  185B               	xorwf	standbyMode@drawer,w,c
  2000  00F880  105C               	iorwf	standbyMode@drawer+1,w,c
  2001  00F882  A4D8               	btfss	status,2,c
  2002  00F884  D005               	goto	l474
  2003                           
  2004                           ;standbyMode.c: 1077: drawer = 0;
  2005  00F886  0E00               	movlw	0
  2006  00F888  6E5C               	movwf	standbyMode@drawer+1,c
  2007  00F88A  0E00               	movlw	0
  2008  00F88C  6E5B               	movwf	standbyMode@drawer,c
  2009                           
  2010                           ;standbyMode.c: 1078: goto DRAWER_BACK;
  2011  00F88E  D7BC               	goto	l463
  2012  00F890                     l474:
  2013                           
  2014                           ;standbyMode.c: 1079: }
  2015                           ;standbyMode.c: 1081: for (i=0; i<8; i++){
  2016  00F890  0E00               	movlw	0
  2017  00F892  6E5A               	movwf	standbyMode@i+1,c
  2018  00F894  0E00               	movlw	0
  2019  00F896  6E59               	movwf	standbyMode@i,c
  2020  00F898                     l4144:
  2021  00F898  505A               	movf	standbyMode@i+1,w,c
  2022  00F89A  E12C               	bnz	l4160
  2023  00F89C  0E08               	movlw	8
  2024  00F89E  5C59               	subwf	standbyMode@i,w,c
  2025  00F8A0  B0D8               	btfsc	status,0,c
  2026  00F8A2  D028               	goto	u5640
  2027                           
  2028                           ;standbyMode.c: 1082: if (drawerInformation[i] == drawer){
  2029  00F8A4  90D8               	bcf	status,0,c
  2030  00F8A6  3459               	rlcf	standbyMode@i,w,c
  2031  00F8A8  6ED9               	movwf	fsr2l,c
  2032  00F8AA  345A               	rlcf	standbyMode@i+1,w,c
  2033  00F8AC  6EDA               	movwf	fsr2h,c
  2034  00F8AE  0E5D               	movlw	low _drawerInformation
  2035  00F8B0  26D9               	addwf	fsr2l,f,c
  2036  00F8B2  0E00               	movlw	high _drawerInformation
  2037  00F8B4  22DA               	addwfc	fsr2h,f,c
  2038  00F8B6  505B               	movf	standbyMode@drawer,w,c
  2039  00F8B8  18DE               	xorwf	postinc2,w,c
  2040  00F8BA  E119               	bnz	l4156
  2041  00F8BC  505C               	movf	standbyMode@drawer+1,w,c
  2042  00F8BE  18DE               	xorwf	postinc2,w,c
  2043  00F8C0  A4D8               	btfss	status,2,c
  2044  00F8C2  D015               	goto	l478
  2045                           
  2046                           ;standbyMode.c: 1083: validDrawer = 1;
  2047  00F8C4  0E00               	movlw	0
  2048  00F8C6  6E50               	movwf	standbyMode@validDrawer+1,c
  2049  00F8C8  0E01               	movlw	1
  2050  00F8CA  6E4F               	movwf	standbyMode@validDrawer,c
  2051                           
  2052                           ;standbyMode.c: 1084: if (drawerInformation[i] == 0){
  2053  00F8CC  90D8               	bcf	status,0,c
  2054  00F8CE  3459               	rlcf	standbyMode@i,w,c
  2055  00F8D0  6ED9               	movwf	fsr2l,c
  2056  00F8D2  345A               	rlcf	standbyMode@i+1,w,c
  2057  00F8D4  6EDA               	movwf	fsr2h,c
  2058  00F8D6  0E5D               	movlw	low _drawerInformation
  2059  00F8D8  26D9               	addwf	fsr2l,f,c
  2060  00F8DA  0E00               	movlw	high _drawerInformation
  2061  00F8DC  22DA               	addwfc	fsr2h,f,c
  2062  00F8DE  50DE               	movf	postinc2,w,c
  2063  00F8E0  10DE               	iorwf	postinc2,w,c
  2064  00F8E2  A4D8               	btfss	status,2,c
  2065  00F8E4  D004               	goto	l478
  2066                           
  2067                           ;standbyMode.c: 1085: zero = 1;
  2068  00F8E6  0E00               	movlw	0
  2069  00F8E8  6E52               	movwf	standbyMode@zero+1,c
  2070  00F8EA  0E01               	movlw	1
  2071  00F8EC  6E51               	movwf	standbyMode@zero,c
  2072  00F8EE                     l478:
  2073  00F8EE                     l4156:
  2074  00F8EE  4A59               	infsnz	standbyMode@i,f,c
  2075  00F8F0  2A5A               	incf	standbyMode@i+1,f,c
  2076  00F8F2  D7D2               	goto	l4144
  2077  00F8F4                     u5640:
  2078  00F8F4                     l4160:
  2079                           
  2080                           ;standbyMode.c: 1086: }
  2081                           ;standbyMode.c: 1087: }
  2082                           ;standbyMode.c: 1088: }
  2083                           ;standbyMode.c: 1089: if (validDrawer == 1){
  2084  00F8F4  044F               	decf	standbyMode@validDrawer,w,c
  2085  00F8F6  1050               	iorwf	standbyMode@validDrawer+1,w,c
  2086  00F8F8  A4D8               	btfss	status,2,c
  2087  00F8FA  D060               	goto	l479
  2088                           
  2089                           ;standbyMode.c: 1090: if (zero == 1){
  2090  00F8FC  0451               	decf	standbyMode@zero,w,c
  2091  00F8FE  1052               	iorwf	standbyMode@zero+1,w,c
  2092  00F900  A4D8               	btfss	status,2,c
  2093  00F902  D02E               	goto	l480
  2094                           
  2095                           ;standbyMode.c: 1091: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2096  00F904  0E01               	movlw	1
  2097  00F906  ECC4  F06B         	call	_lcdInst
  2098  00F90A  0EC3               	movlw	195
  2099  00F90C  6E46               	movwf	??_standbyMode& (0+255),c
  2100  00F90E  0ECD               	movlw	205
  2101  00F910                     u5987:
  2102  00F910  2EE8               	decfsz	wreg,f,c
  2103  00F912  D7FE               	bra	u5987
  2104  00F914  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2105  00F916  D7FC               	bra	u5987
  2106  00F918  F000               	nop	
  2107                           
  2108                           ;standbyMode.c: 1092: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2109  00F91A  0E0C               	movlw	12
  2110  00F91C  ECC4  F06B         	call	_lcdInst
  2111                           
  2112                           ;standbyMode.c: 1093: printf("No drawer");
  2113  00F920  0EC0               	movlw	low STR_54
  2114  00F922  6E0D               	movwf	printf@f,c
  2115  00F924  0EFF               	movlw	high STR_54
  2116  00F926  6E0E               	movwf	printf@f+1,c
  2117  00F928  ECD9  F06D         	call	_printf	;wreg free
  2118                           
  2119                           ;standbyMode.c: 1094: lcdInst(0xC0);;
  2120  00F92C  0EC0               	movlw	192
  2121  00F92E  ECC4  F06B         	call	_lcdInst
  2122                           
  2123                           ;standbyMode.c: 1095: printf("number pressed.");
  2124  00F932  0E33               	movlw	low STR_55
  2125  00F934  6E0D               	movwf	printf@f,c
  2126  00F936  0EFE               	movlw	high STR_55
  2127  00F938  6E0E               	movwf	printf@f+1,c
  2128  00F93A  ECD9  F06D         	call	_printf	;wreg free
  2129                           
  2130                           ;standbyMode.c: 1096: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2131  00F93E  0E66               	movlw	102
  2132  00F940  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2133  00F942  0E76               	movlw	118
  2134  00F944  6E46               	movwf	??_standbyMode& (0+255),c
  2135  00F946  0EC1               	movlw	193
  2136  00F948                     u5997:
  2137  00F948  2EE8               	decfsz	wreg,f,c
  2138  00F94A  D7FE               	bra	u5997
  2139  00F94C  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2140  00F94E  D7FC               	bra	u5997
  2141  00F950  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2142  00F952  D7FA               	bra	u5997
  2143  00F954  F000               	nop	
  2144                           
  2145                           ;standbyMode.c: 1097: zero = 0;
  2146  00F956  0E00               	movlw	0
  2147  00F958  6E52               	movwf	standbyMode@zero+1,c
  2148  00F95A  0E00               	movlw	0
  2149  00F95C  6E51               	movwf	standbyMode@zero,c
  2150                           
  2151                           ;standbyMode.c: 1098: }
  2152  00F95E  D029               	goto	l481
  2153  00F960                     l480:
  2154                           
  2155                           ;standbyMode.c: 1099: else{
  2156                           ;standbyMode.c: 1100: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2157  00F960  0E01               	movlw	1
  2158  00F962  ECC4  F06B         	call	_lcdInst
  2159  00F966  0EC3               	movlw	195
  2160  00F968  6E46               	movwf	??_standbyMode& (0+255),c
  2161  00F96A  0ECD               	movlw	205
  2162  00F96C                     u6007:
  2163  00F96C  2EE8               	decfsz	wreg,f,c
  2164  00F96E  D7FE               	bra	u6007
  2165  00F970  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2166  00F972  D7FC               	bra	u6007
  2167  00F974  F000               	nop	
  2168                           
  2169                           ;standbyMode.c: 1101: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2170  00F976  0E0C               	movlw	12
  2171  00F978  ECC4  F06B         	call	_lcdInst
  2172                           
  2173                           ;standbyMode.c: 1102: printf("Drawer already");
  2174  00F97C  0E0E               	movlw	low STR_56
  2175  00F97E  6E0D               	movwf	printf@f,c
  2176  00F980  0EFF               	movlw	high STR_56
  2177  00F982  6E0E               	movwf	printf@f+1,c
  2178  00F984  ECD9  F06D         	call	_printf	;wreg free
  2179                           
  2180                           ;standbyMode.c: 1103: lcdInst(0xC0);;
  2181  00F988  0EC0               	movlw	192
  2182  00F98A  ECC4  F06B         	call	_lcdInst
  2183                           
  2184                           ;standbyMode.c: 1104: printf("in use!");
  2185  00F98E  0ED3               	movlw	low STR_57
  2186  00F990  6E0D               	movwf	printf@f,c
  2187  00F992  0EFF               	movlw	high STR_57
  2188  00F994  6E0E               	movwf	printf@f+1,c
  2189  00F996  ECD9  F06D         	call	_printf	;wreg free
  2190                           
  2191                           ;standbyMode.c: 1105: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2192  00F99A  0E66               	movlw	102
  2193  00F99C  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2194  00F99E  0E76               	movlw	118
  2195  00F9A0  6E46               	movwf	??_standbyMode& (0+255),c
  2196  00F9A2  0EC1               	movlw	193
  2197  00F9A4                     u6017:
  2198  00F9A4  2EE8               	decfsz	wreg,f,c
  2199  00F9A6  D7FE               	bra	u6017
  2200  00F9A8  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2201  00F9AA  D7FC               	bra	u6017
  2202  00F9AC  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2203  00F9AE  D7FA               	bra	u6017
  2204  00F9B0  F000               	nop	
  2205  00F9B2                     l481:
  2206                           
  2207                           ;standbyMode.c: 1106: }
  2208                           ;standbyMode.c: 1107: validDrawer = 0;
  2209  00F9B2  0E00               	movlw	0
  2210  00F9B4  6E50               	movwf	standbyMode@validDrawer+1,c
  2211  00F9B6  0E00               	movlw	0
  2212  00F9B8  6E4F               	movwf	standbyMode@validDrawer,c
  2213                           
  2214                           ;standbyMode.c: 1108: continue;
  2215  00F9BA  D6F6               	goto	u5550
  2216  00F9BC                     l479:
  2217                           
  2218                           ;standbyMode.c: 1110: else{
  2219                           ;standbyMode.c: 1111: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2220  00F9BC  0E01               	movlw	1
  2221  00F9BE  ECC4  F06B         	call	_lcdInst
  2222  00F9C2  0EC3               	movlw	195
  2223  00F9C4  6E46               	movwf	??_standbyMode& (0+255),c
  2224  00F9C6  0ECD               	movlw	205
  2225  00F9C8                     u6027:
  2226  00F9C8  2EE8               	decfsz	wreg,f,c
  2227  00F9CA  D7FE               	bra	u6027
  2228  00F9CC  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2229  00F9CE  D7FC               	bra	u6027
  2230  00F9D0  F000               	nop	
  2231                           
  2232                           ;standbyMode.c: 1112: diet = diet_press(drawer);
  2233  00F9D2  C05B  F01F         	movff	standbyMode@drawer,diet_press@drawer
  2234  00F9D6  C05C  F020         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2235  00F9DA  ECC2  F073         	call	_diet_press	;wreg free
  2236  00F9DE  C01F  F057         	movff	?_diet_press,standbyMode@diet
  2237  00F9E2  C020  F058         	movff	?_diet_press+1,standbyMode@diet+1
  2238                           
  2239                           ;standbyMode.c: 1113: if (diet == 100){
  2240  00F9E6  0E64               	movlw	100
  2241  00F9E8  1857               	xorwf	standbyMode@diet,w,c
  2242  00F9EA  1058               	iorwf	standbyMode@diet+1,w,c
  2243  00F9EC  A4D8               	btfss	status,2,c
  2244  00F9EE  D005               	goto	l485
  2245                           
  2246                           ;standbyMode.c: 1114: diet = 0;
  2247  00F9F0  0E00               	movlw	0
  2248  00F9F2  6E58               	movwf	standbyMode@diet+1,c
  2249  00F9F4  0E00               	movlw	0
  2250  00F9F6  6E57               	movwf	standbyMode@diet,c
  2251                           
  2252                           ;standbyMode.c: 1115: goto DIET_BACK1;
  2253  00F9F8  D730               	goto	u5590
  2254  00F9FA                     l485:
  2255                           
  2256                           ;standbyMode.c: 1116: }
  2257                           ;standbyMode.c: 1118: food = food_press(diet, drawer);
  2258  00F9FA  C057  F01F         	movff	standbyMode@diet,food_press@dietSum
  2259  00F9FE  C058  F020         	movff	standbyMode@diet+1,food_press@dietSum+1
  2260  00FA02  C05B  F021         	movff	standbyMode@drawer,food_press@drawer
  2261  00FA06  C05C  F022         	movff	standbyMode@drawer+1,food_press@drawer+1
  2262  00FA0A  EC68  F06E         	call	_food_press	;wreg free
  2263  00FA0E  C01F  F053         	movff	?_food_press,standbyMode@food
  2264  00FA12  C020  F054         	movff	?_food_press+1,standbyMode@food+1
  2265                           
  2266                           ;standbyMode.c: 1119: if (food == 100){
  2267  00FA16  0E64               	movlw	100
  2268  00FA18  1853               	xorwf	standbyMode@food,w,c
  2269  00FA1A  1054               	iorwf	standbyMode@food+1,w,c
  2270  00FA1C  A4D8               	btfss	status,2,c
  2271  00FA1E  D009               	goto	l486
  2272                           
  2273                           ;standbyMode.c: 1120: diet = 0;
  2274  00FA20  0E00               	movlw	0
  2275  00FA22  6E58               	movwf	standbyMode@diet+1,c
  2276  00FA24  0E00               	movlw	0
  2277  00FA26  6E57               	movwf	standbyMode@diet,c
  2278                           
  2279                           ;standbyMode.c: 1121: food = 0;
  2280  00FA28  0E00               	movlw	0
  2281  00FA2A  6E54               	movwf	standbyMode@food+1,c
  2282  00FA2C  0E00               	movlw	0
  2283  00FA2E  6E53               	movwf	standbyMode@food,c
  2284                           
  2285                           ;standbyMode.c: 1122: goto FOOD_BACK1;
  2286  00FA30  D7C5               	goto	l479
  2287  00FA32                     l486:
  2288                           
  2289                           ;standbyMode.c: 1123: }
  2290                           ;standbyMode.c: 1124: drawerInformation[drawerCount] = drawer;
  2291  00FA32  90D8               	bcf	status,0,c
  2292  00FA34  3455               	rlcf	standbyMode@drawerCount,w,c
  2293  00FA36  6ED9               	movwf	fsr2l,c
  2294  00FA38  3456               	rlcf	standbyMode@drawerCount+1,w,c
  2295  00FA3A  6EDA               	movwf	fsr2h,c
  2296  00FA3C  0E5D               	movlw	low _drawerInformation
  2297  00FA3E  26D9               	addwf	fsr2l,f,c
  2298  00FA40  0E00               	movlw	high _drawerInformation
  2299  00FA42  22DA               	addwfc	fsr2h,f,c
  2300  00FA44  C05B  FFDE         	movff	standbyMode@drawer,postinc2
  2301  00FA48  C05C  FFDD         	movff	standbyMode@drawer+1,postdec2
  2302                           
  2303                           ;standbyMode.c: 1125: drawerCount += 1;
  2304  00FA4C  4A55               	infsnz	standbyMode@drawerCount,f,c
  2305  00FA4E  2A56               	incf	standbyMode@drawerCount+1,f,c
  2306                           
  2307                           ;standbyMode.c: 1126: }
  2308                           ;standbyMode.c: 1127: }
  2309  00FA50  D004               	goto	l488
  2310  00FA52                     l472:
  2311                           
  2312                           ;standbyMode.c: 1128: else if (keypress1 == 14){
  2313  00FA52  0E0E               	movlw	14
  2314  00FA54  184E               	xorwf	standbyMode@keypress1,w,c
  2315  00FA56  B4D8               	btfsc	status,2,c
  2316  00FA58  0012               	return	
  2317  00FA5A                     l488:
  2318                           
  2319                           ;standbyMode.c: 1130: }
  2320                           ;standbyMode.c: 1131: keypress1 = 0;
  2321  00FA5A  0E00               	movlw	0
  2322  00FA5C  6E4E               	movwf	standbyMode@keypress1,c
  2323  00FA5E  D6A4               	goto	u5550
  2324  00FA60                     l461:
  2325                           
  2326                           ;standbyMode.c: 1135: else{
  2327                           ;standbyMode.c: 1136: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2328  00FA60  0E01               	movlw	1
  2329  00FA62  ECC4  F06B         	call	_lcdInst
  2330  00FA66  0EC3               	movlw	195
  2331  00FA68  6E46               	movwf	??_standbyMode& (0+255),c
  2332  00FA6A  0ECD               	movlw	205
  2333  00FA6C                     u6037:
  2334  00FA6C  2EE8               	decfsz	wreg,f,c
  2335  00FA6E  D7FE               	bra	u6037
  2336  00FA70  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2337  00FA72  D7FC               	bra	u6037
  2338  00FA74  F000               	nop	
  2339                           
  2340                           ;standbyMode.c: 1137: drawer = which_drawer();
  2341  00FA76  EC62  F06F         	call	_which_drawer	;wreg free
  2342  00FA7A  C01F  F05B         	movff	?_which_drawer,standbyMode@drawer
  2343  00FA7E  C020  F05C         	movff	?_which_drawer+1,standbyMode@drawer+1
  2344                           
  2345                           ;standbyMode.c: 1139: if (drawer == 100){
  2346  00FA82  0E64               	movlw	100
  2347  00FA84  185B               	xorwf	standbyMode@drawer,w,c
  2348  00FA86  105C               	iorwf	standbyMode@drawer+1,w,c
  2349  00FA88  A4D8               	btfss	status,2,c
  2350  00FA8A  D009               	goto	l492
  2351                           
  2352                           ;standbyMode.c: 1140: drawer = 0;
  2353  00FA8C  0E00               	movlw	0
  2354  00FA8E  6E5C               	movwf	standbyMode@drawer+1,c
  2355  00FA90  0E00               	movlw	0
  2356  00FA92  6E5B               	movwf	standbyMode@drawer,c
  2357                           
  2358                           ;standbyMode.c: 1141: firstIteration = 1;
  2359  00FA94  0E00               	movlw	0
  2360  00FA96  6E49               	movwf	standbyMode@firstIteration+1,c
  2361  00FA98  0E01               	movlw	1
  2362  00FA9A  6E48               	movwf	standbyMode@firstIteration,c
  2363                           
  2364                           ;standbyMode.c: 1142: goto DRAWER_BACK;
  2365  00FA9C  D6B5               	goto	l463
  2366  00FA9E                     l492:
  2367                           
  2368                           ;standbyMode.c: 1143: }
  2369                           ;standbyMode.c: 1145: firstIteration = 1;
  2370  00FA9E  0E00               	movlw	0
  2371  00FAA0  6E49               	movwf	standbyMode@firstIteration+1,c
  2372  00FAA2  0E01               	movlw	1
  2373  00FAA4  6E48               	movwf	standbyMode@firstIteration,c
  2374                           
  2375                           ;standbyMode.c: 1146: for (i=0; i<8; i++){
  2376  00FAA6  0E00               	movlw	0
  2377  00FAA8  6E5A               	movwf	standbyMode@i+1,c
  2378  00FAAA  0E00               	movlw	0
  2379  00FAAC  6E59               	movwf	standbyMode@i,c
  2380  00FAAE                     l4238:
  2381  00FAAE  505A               	movf	standbyMode@i+1,w,c
  2382  00FAB0  E12C               	bnz	l4254
  2383  00FAB2  0E08               	movlw	8
  2384  00FAB4  5C59               	subwf	standbyMode@i,w,c
  2385  00FAB6  B0D8               	btfsc	status,0,c
  2386  00FAB8  D028               	goto	u5740
  2387                           
  2388                           ;standbyMode.c: 1147: if (drawerInformation[i] == drawer){
  2389  00FABA  90D8               	bcf	status,0,c
  2390  00FABC  3459               	rlcf	standbyMode@i,w,c
  2391  00FABE  6ED9               	movwf	fsr2l,c
  2392  00FAC0  345A               	rlcf	standbyMode@i+1,w,c
  2393  00FAC2  6EDA               	movwf	fsr2h,c
  2394  00FAC4  0E5D               	movlw	low _drawerInformation
  2395  00FAC6  26D9               	addwf	fsr2l,f,c
  2396  00FAC8  0E00               	movlw	high _drawerInformation
  2397  00FACA  22DA               	addwfc	fsr2h,f,c
  2398  00FACC  505B               	movf	standbyMode@drawer,w,c
  2399  00FACE  18DE               	xorwf	postinc2,w,c
  2400  00FAD0  E119               	bnz	l4250
  2401  00FAD2  505C               	movf	standbyMode@drawer+1,w,c
  2402  00FAD4  18DE               	xorwf	postinc2,w,c
  2403  00FAD6  A4D8               	btfss	status,2,c
  2404  00FAD8  D015               	goto	l496
  2405                           
  2406                           ;standbyMode.c: 1148: validDrawer = 1;
  2407  00FADA  0E00               	movlw	0
  2408  00FADC  6E50               	movwf	standbyMode@validDrawer+1,c
  2409  00FADE  0E01               	movlw	1
  2410  00FAE0  6E4F               	movwf	standbyMode@validDrawer,c
  2411                           
  2412                           ;standbyMode.c: 1149: if (drawerInformation[i] == 0){
  2413  00FAE2  90D8               	bcf	status,0,c
  2414  00FAE4  3459               	rlcf	standbyMode@i,w,c
  2415  00FAE6  6ED9               	movwf	fsr2l,c
  2416  00FAE8  345A               	rlcf	standbyMode@i+1,w,c
  2417  00FAEA  6EDA               	movwf	fsr2h,c
  2418  00FAEC  0E5D               	movlw	low _drawerInformation
  2419  00FAEE  26D9               	addwf	fsr2l,f,c
  2420  00FAF0  0E00               	movlw	high _drawerInformation
  2421  00FAF2  22DA               	addwfc	fsr2h,f,c
  2422  00FAF4  50DE               	movf	postinc2,w,c
  2423  00FAF6  10DE               	iorwf	postinc2,w,c
  2424  00FAF8  A4D8               	btfss	status,2,c
  2425  00FAFA  D004               	goto	l496
  2426                           
  2427                           ;standbyMode.c: 1150: zero = 1;
  2428  00FAFC  0E00               	movlw	0
  2429  00FAFE  6E52               	movwf	standbyMode@zero+1,c
  2430  00FB00  0E01               	movlw	1
  2431  00FB02  6E51               	movwf	standbyMode@zero,c
  2432  00FB04                     l496:
  2433  00FB04                     l4250:
  2434  00FB04  4A59               	infsnz	standbyMode@i,f,c
  2435  00FB06  2A5A               	incf	standbyMode@i+1,f,c
  2436  00FB08  D7D2               	goto	l4238
  2437  00FB0A                     u5740:
  2438  00FB0A                     l4254:
  2439                           
  2440                           ;standbyMode.c: 1151: }
  2441                           ;standbyMode.c: 1152: }
  2442                           ;standbyMode.c: 1153: }
  2443                           ;standbyMode.c: 1154: if (validDrawer == 1){
  2444  00FB0A  044F               	decf	standbyMode@validDrawer,w,c
  2445  00FB0C  1050               	iorwf	standbyMode@validDrawer+1,w,c
  2446  00FB0E  A4D8               	btfss	status,2,c
  2447  00FB10  D060               	goto	l497
  2448                           
  2449                           ;standbyMode.c: 1155: if (zero == 1){
  2450  00FB12  0451               	decf	standbyMode@zero,w,c
  2451  00FB14  1052               	iorwf	standbyMode@zero+1,w,c
  2452  00FB16  A4D8               	btfss	status,2,c
  2453  00FB18  D02E               	goto	l498
  2454                           
  2455                           ;standbyMode.c: 1156: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2456  00FB1A  0E01               	movlw	1
  2457  00FB1C  ECC4  F06B         	call	_lcdInst
  2458  00FB20  0EC3               	movlw	195
  2459  00FB22  6E46               	movwf	??_standbyMode& (0+255),c
  2460  00FB24  0ECD               	movlw	205
  2461  00FB26                     u6047:
  2462  00FB26  2EE8               	decfsz	wreg,f,c
  2463  00FB28  D7FE               	bra	u6047
  2464  00FB2A  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2465  00FB2C  D7FC               	bra	u6047
  2466  00FB2E  F000               	nop	
  2467                           
  2468                           ;standbyMode.c: 1157: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2469  00FB30  0E0C               	movlw	12
  2470  00FB32  ECC4  F06B         	call	_lcdInst
  2471                           
  2472                           ;standbyMode.c: 1158: printf("No drawer");
  2473  00FB36  0EC0               	movlw	low STR_54
  2474  00FB38  6E0D               	movwf	printf@f,c
  2475  00FB3A  0EFF               	movlw	high STR_54
  2476  00FB3C  6E0E               	movwf	printf@f+1,c
  2477  00FB3E  ECD9  F06D         	call	_printf	;wreg free
  2478                           
  2479                           ;standbyMode.c: 1159: lcdInst(0xC0);;
  2480  00FB42  0EC0               	movlw	192
  2481  00FB44  ECC4  F06B         	call	_lcdInst
  2482                           
  2483                           ;standbyMode.c: 1160: printf("number pressed.");
  2484  00FB48  0E33               	movlw	low STR_55
  2485  00FB4A  6E0D               	movwf	printf@f,c
  2486  00FB4C  0EFE               	movlw	high STR_55
  2487  00FB4E  6E0E               	movwf	printf@f+1,c
  2488  00FB50  ECD9  F06D         	call	_printf	;wreg free
  2489                           
  2490                           ;standbyMode.c: 1161: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2491  00FB54  0E66               	movlw	102
  2492  00FB56  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2493  00FB58  0E76               	movlw	118
  2494  00FB5A  6E46               	movwf	??_standbyMode& (0+255),c
  2495  00FB5C  0EC1               	movlw	193
  2496  00FB5E                     u6057:
  2497  00FB5E  2EE8               	decfsz	wreg,f,c
  2498  00FB60  D7FE               	bra	u6057
  2499  00FB62  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2500  00FB64  D7FC               	bra	u6057
  2501  00FB66  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2502  00FB68  D7FA               	bra	u6057
  2503  00FB6A  F000               	nop	
  2504                           
  2505                           ;standbyMode.c: 1162: zero = 0;
  2506  00FB6C  0E00               	movlw	0
  2507  00FB6E  6E52               	movwf	standbyMode@zero+1,c
  2508  00FB70  0E00               	movlw	0
  2509  00FB72  6E51               	movwf	standbyMode@zero,c
  2510                           
  2511                           ;standbyMode.c: 1163: }
  2512  00FB74  D029               	goto	l499
  2513  00FB76                     l498:
  2514                           
  2515                           ;standbyMode.c: 1164: else{
  2516                           ;standbyMode.c: 1165: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2517  00FB76  0E01               	movlw	1
  2518  00FB78  ECC4  F06B         	call	_lcdInst
  2519  00FB7C  0EC3               	movlw	195
  2520  00FB7E  6E46               	movwf	??_standbyMode& (0+255),c
  2521  00FB80  0ECD               	movlw	205
  2522  00FB82                     u6067:
  2523  00FB82  2EE8               	decfsz	wreg,f,c
  2524  00FB84  D7FE               	bra	u6067
  2525  00FB86  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2526  00FB88  D7FC               	bra	u6067
  2527  00FB8A  F000               	nop	
  2528                           
  2529                           ;standbyMode.c: 1166: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2530  00FB8C  0E0C               	movlw	12
  2531  00FB8E  ECC4  F06B         	call	_lcdInst
  2532                           
  2533                           ;standbyMode.c: 1167: printf("Drawer already");
  2534  00FB92  0E0E               	movlw	low STR_56
  2535  00FB94  6E0D               	movwf	printf@f,c
  2536  00FB96  0EFF               	movlw	high STR_56
  2537  00FB98  6E0E               	movwf	printf@f+1,c
  2538  00FB9A  ECD9  F06D         	call	_printf	;wreg free
  2539                           
  2540                           ;standbyMode.c: 1168: lcdInst(0xC0);;
  2541  00FB9E  0EC0               	movlw	192
  2542  00FBA0  ECC4  F06B         	call	_lcdInst
  2543                           
  2544                           ;standbyMode.c: 1169: printf("in use!");
  2545  00FBA4  0ED3               	movlw	low STR_57
  2546  00FBA6  6E0D               	movwf	printf@f,c
  2547  00FBA8  0EFF               	movlw	high STR_57
  2548  00FBAA  6E0E               	movwf	printf@f+1,c
  2549  00FBAC  ECD9  F06D         	call	_printf	;wreg free
  2550                           
  2551                           ;standbyMode.c: 1170: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2552  00FBB0  0E66               	movlw	102
  2553  00FBB2  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2554  00FBB4  0E76               	movlw	118
  2555  00FBB6  6E46               	movwf	??_standbyMode& (0+255),c
  2556  00FBB8  0EC1               	movlw	193
  2557  00FBBA                     u6077:
  2558  00FBBA  2EE8               	decfsz	wreg,f,c
  2559  00FBBC  D7FE               	bra	u6077
  2560  00FBBE  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2561  00FBC0  D7FC               	bra	u6077
  2562  00FBC2  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2563  00FBC4  D7FA               	bra	u6077
  2564  00FBC6  F000               	nop	
  2565  00FBC8                     l499:
  2566                           
  2567                           ;standbyMode.c: 1171: }
  2568                           ;standbyMode.c: 1172: validDrawer = 0;
  2569  00FBC8  0E00               	movlw	0
  2570  00FBCA  6E50               	movwf	standbyMode@validDrawer+1,c
  2571  00FBCC  0E00               	movlw	0
  2572  00FBCE  6E4F               	movwf	standbyMode@validDrawer,c
  2573                           
  2574                           ;standbyMode.c: 1174: }
  2575                           
  2576                           ;standbyMode.c: 1173: continue;
  2577  00FBD0  D5E7               	goto	l460
  2578  00FBD2                     l497:
  2579                           
  2580                           ;standbyMode.c: 1175: else{
  2581                           ;standbyMode.c: 1176: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2582  00FBD2  0E01               	movlw	1
  2583  00FBD4  ECC4  F06B         	call	_lcdInst
  2584  00FBD8  0EC3               	movlw	195
  2585  00FBDA  6E46               	movwf	??_standbyMode& (0+255),c
  2586  00FBDC  0ECD               	movlw	205
  2587  00FBDE                     u6087:
  2588  00FBDE  2EE8               	decfsz	wreg,f,c
  2589  00FBE0  D7FE               	bra	u6087
  2590  00FBE2  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2591  00FBE4  D7FC               	bra	u6087
  2592  00FBE6  F000               	nop	
  2593                           
  2594                           ;standbyMode.c: 1177: diet = diet_press(drawer);
  2595  00FBE8  C05B  F01F         	movff	standbyMode@drawer,diet_press@drawer
  2596  00FBEC  C05C  F020         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2597  00FBF0  ECC2  F073         	call	_diet_press	;wreg free
  2598  00FBF4  C01F  F057         	movff	?_diet_press,standbyMode@diet
  2599  00FBF8  C020  F058         	movff	?_diet_press+1,standbyMode@diet+1
  2600                           
  2601                           ;standbyMode.c: 1178: if (diet == 100){
  2602  00FBFC  0E64               	movlw	100
  2603  00FBFE  1857               	xorwf	standbyMode@diet,w,c
  2604  00FC00  1058               	iorwf	standbyMode@diet+1,w,c
  2605  00FC02  A4D8               	btfss	status,2,c
  2606  00FC04  D005               	goto	l503
  2607                           
  2608                           ;standbyMode.c: 1179: diet = 0;
  2609  00FC06  0E00               	movlw	0
  2610  00FC08  6E58               	movwf	standbyMode@diet+1,c
  2611  00FC0A  0E00               	movlw	0
  2612  00FC0C  6E57               	movwf	standbyMode@diet,c
  2613                           
  2614                           ;standbyMode.c: 1180: goto DIET_BACK2;
  2615  00FC0E  D728               	goto	l461
  2616  00FC10                     l503:
  2617                           
  2618                           ;standbyMode.c: 1181: }
  2619                           ;standbyMode.c: 1183: food = food_press(diet, drawer);
  2620  00FC10  C057  F01F         	movff	standbyMode@diet,food_press@dietSum
  2621  00FC14  C058  F020         	movff	standbyMode@diet+1,food_press@dietSum+1
  2622  00FC18  C05B  F021         	movff	standbyMode@drawer,food_press@drawer
  2623  00FC1C  C05C  F022         	movff	standbyMode@drawer+1,food_press@drawer+1
  2624  00FC20  EC68  F06E         	call	_food_press	;wreg free
  2625  00FC24  C01F  F053         	movff	?_food_press,standbyMode@food
  2626  00FC28  C020  F054         	movff	?_food_press+1,standbyMode@food+1
  2627                           
  2628                           ;standbyMode.c: 1184: if (food == 100){
  2629  00FC2C  0E64               	movlw	100
  2630  00FC2E  1853               	xorwf	standbyMode@food,w,c
  2631  00FC30  1054               	iorwf	standbyMode@food+1,w,c
  2632  00FC32  A4D8               	btfss	status,2,c
  2633  00FC34  D009               	goto	l504
  2634                           
  2635                           ;standbyMode.c: 1185: diet = 0;
  2636  00FC36  0E00               	movlw	0
  2637  00FC38  6E58               	movwf	standbyMode@diet+1,c
  2638  00FC3A  0E00               	movlw	0
  2639  00FC3C  6E57               	movwf	standbyMode@diet,c
  2640                           
  2641                           ;standbyMode.c: 1186: food = 0;
  2642  00FC3E  0E00               	movlw	0
  2643  00FC40  6E54               	movwf	standbyMode@food+1,c
  2644  00FC42  0E00               	movlw	0
  2645  00FC44  6E53               	movwf	standbyMode@food,c
  2646                           
  2647                           ;standbyMode.c: 1187: goto FOOD_BACK2;
  2648  00FC46  D7C5               	goto	l497
  2649  00FC48                     l504:
  2650                           
  2651                           ;standbyMode.c: 1188: }
  2652                           ;standbyMode.c: 1189: drawerInformation[drawerCount] = drawer;
  2653  00FC48  90D8               	bcf	status,0,c
  2654  00FC4A  3455               	rlcf	standbyMode@drawerCount,w,c
  2655  00FC4C  6ED9               	movwf	fsr2l,c
  2656  00FC4E  3456               	rlcf	standbyMode@drawerCount+1,w,c
  2657  00FC50  6EDA               	movwf	fsr2h,c
  2658  00FC52  0E5D               	movlw	low _drawerInformation
  2659  00FC54  26D9               	addwf	fsr2l,f,c
  2660  00FC56  0E00               	movlw	high _drawerInformation
  2661  00FC58  22DA               	addwfc	fsr2h,f,c
  2662  00FC5A  C05B  FFDE         	movff	standbyMode@drawer,postinc2
  2663  00FC5E  C05C  FFDD         	movff	standbyMode@drawer+1,postdec2
  2664                           
  2665                           ;standbyMode.c: 1190: drawerCount += 1;
  2666  00FC62  4A55               	infsnz	standbyMode@drawerCount,f,c
  2667  00FC64  2A56               	incf	standbyMode@drawerCount+1,f,c
  2668  00FC66  D59C               	goto	l460
  2669  00FC68                     l459:
  2670                           
  2671                           ;standbyMode.c: 1195: else if (keypress == 14){
  2672  00FC68  0E0E               	movlw	14
  2673  00FC6A  184C               	xorwf	standbyMode@keypress,w,c
  2674  00FC6C  A4D8               	btfss	status,2,c
  2675  00FC6E  D05A               	goto	l506
  2676  00FC70                     u5790:
  2677                           
  2678                           ;standbyMode.c: 1197: unsigned int whichKey = viewLogs();
  2679                           
  2680                           ;standbyMode.c: 1196: while (1){
  2681  00FC70  EC64  F070         	call	_viewLogs	;wreg free
  2682  00FC74  C03A  F04A         	movff	?_viewLogs,standbyMode@whichKey
  2683  00FC78  C03B  F04B         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2684                           
  2685                           ;standbyMode.c: 1198: if (whichKey == 15){
  2686  00FC7C  0E0F               	movlw	15
  2687  00FC7E  184A               	xorwf	standbyMode@whichKey,w,c
  2688  00FC80  104B               	iorwf	standbyMode@whichKey+1,w,c
  2689  00FC82  B4D8               	btfsc	status,2,c
  2690  00FC84  D7F5               	goto	u5790
  2691                           
  2692                           ;standbyMode.c: 1201: else if (whichKey == 14){
  2693                           
  2694                           ;standbyMode.c: 1200: }
  2695                           
  2696                           ;standbyMode.c: 1199: continue;
  2697  00FC86  0E0E               	movlw	14
  2698  00FC88  184A               	xorwf	standbyMode@whichKey,w,c
  2699  00FC8A  104B               	iorwf	standbyMode@whichKey+1,w,c
  2700  00FC8C  A4D8               	btfss	status,2,c
  2701  00FC8E  D020               	goto	l511
  2702                           
  2703                           ;standbyMode.c: 1202: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2704  00FC90  0E01               	movlw	1
  2705  00FC92  ECC4  F06B         	call	_lcdInst
  2706  00FC96  0EC3               	movlw	195
  2707  00FC98  6E46               	movwf	??_standbyMode& (0+255),c
  2708  00FC9A  0ECD               	movlw	205
  2709  00FC9C                     u6097:
  2710  00FC9C  2EE8               	decfsz	wreg,f,c
  2711  00FC9E  D7FE               	bra	u6097
  2712  00FCA0  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2713  00FCA2  D7FC               	bra	u6097
  2714  00FCA4  F000               	nop	
  2715                           
  2716                           ;standbyMode.c: 1203: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2717  00FCA6  0E0C               	movlw	12
  2718  00FCA8  ECC4  F06B         	call	_lcdInst
  2719                           
  2720                           ;standbyMode.c: 1204: printf("Rebooting.");
  2721  00FCAC  0E9F               	movlw	low STR_62
  2722  00FCAE  6E0D               	movwf	printf@f,c
  2723  00FCB0  0EFF               	movlw	high STR_62
  2724  00FCB2  6E0E               	movwf	printf@f+1,c
  2725  00FCB4  ECD9  F06D         	call	_printf	;wreg free
  2726                           
  2727                           ;standbyMode.c: 1205: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2728  00FCB8  0E66               	movlw	102
  2729  00FCBA  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2730  00FCBC  0E76               	movlw	118
  2731  00FCBE  6E46               	movwf	??_standbyMode& (0+255),c
  2732  00FCC0  0EC1               	movlw	193
  2733  00FCC2                     u6107:
  2734  00FCC2  2EE8               	decfsz	wreg,f,c
  2735  00FCC4  D7FE               	bra	u6107
  2736  00FCC6  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2737  00FCC8  D7FC               	bra	u6107
  2738  00FCCA  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2739  00FCCC  D7FA               	bra	u6107
  2740  00FCCE  D028               	goto	L1
  2741  00FCD0                     l511:
  2742                           
  2743                           ;standbyMode.c: 1208: else{
  2744                           ;standbyMode.c: 1209: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2745  00FCD0  0E01               	movlw	1
  2746  00FCD2  ECC4  F06B         	call	_lcdInst
  2747  00FCD6  0EC3               	movlw	195
  2748  00FCD8  6E46               	movwf	??_standbyMode& (0+255),c
  2749  00FCDA  0ECD               	movlw	205
  2750  00FCDC                     u6117:
  2751  00FCDC  2EE8               	decfsz	wreg,f,c
  2752  00FCDE  D7FE               	bra	u6117
  2753  00FCE0  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2754  00FCE2  D7FC               	bra	u6117
  2755  00FCE4  F000               	nop	
  2756                           
  2757                           ;standbyMode.c: 1210: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2758  00FCE6  0E0C               	movlw	12
  2759  00FCE8  ECC4  F06B         	call	_lcdInst
  2760                           
  2761                           ;standbyMode.c: 1211: printf("Invalid key!");
  2762  00FCEC  0E55               	movlw	low STR_63
  2763  00FCEE  6E0D               	movwf	printf@f,c
  2764  00FCF0  0EFF               	movlw	high STR_63
  2765  00FCF2  6E0E               	movwf	printf@f+1,c
  2766  00FCF4  ECD9  F06D         	call	_printf	;wreg free
  2767                           
  2768                           ;standbyMode.c: 1212: lcdInst(0xC0);;
  2769  00FCF8  0EC0               	movlw	192
  2770  00FCFA  ECC4  F06B         	call	_lcdInst
  2771                           
  2772                           ;standbyMode.c: 1213: printf("Rebooting.");
  2773  00FCFE  0E9F               	movlw	low STR_62
  2774  00FD00  6E0D               	movwf	printf@f,c
  2775  00FD02  0EFF               	movlw	high STR_62
  2776  00FD04  6E0E               	movwf	printf@f+1,c
  2777  00FD06  ECD9  F06D         	call	_printf	;wreg free
  2778                           
  2779                           ;standbyMode.c: 1214: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2780  00FD0A  0E66               	movlw	102
  2781  00FD0C  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2782  00FD0E  0E76               	movlw	118
  2783  00FD10  6E46               	movwf	??_standbyMode& (0+255),c
  2784  00FD12  0EC1               	movlw	193
  2785  00FD14                     u6127:
  2786  00FD14  2EE8               	decfsz	wreg,f,c
  2787  00FD16  D7FE               	bra	u6127
  2788  00FD18  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2789  00FD1A  D7FC               	bra	u6127
  2790  00FD1C  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2791  00FD1E  D7FA               	bra	u6127
  2792  00FD20                     L1:
  2793  00FD20  F000               	nop	
  2794                           
  2795                           ;standbyMode.c: 1215: break;
  2796  00FD22  0012               	return	
  2797  00FD24                     l506:
  2798                           
  2799                           ;standbyMode.c: 1220: else {
  2800                           ;standbyMode.c: 1221: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2801  00FD24  0E01               	movlw	1
  2802  00FD26  ECC4  F06B         	call	_lcdInst
  2803  00FD2A  0EC3               	movlw	195
  2804  00FD2C  6E46               	movwf	??_standbyMode& (0+255),c
  2805  00FD2E  0ECD               	movlw	205
  2806  00FD30                     u6137:
  2807  00FD30  2EE8               	decfsz	wreg,f,c
  2808  00FD32  D7FE               	bra	u6137
  2809  00FD34  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2810  00FD36  D7FC               	bra	u6137
  2811  00FD38  F000               	nop	
  2812                           
  2813                           ;standbyMode.c: 1222: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2814  00FD3A  0E0C               	movlw	12
  2815  00FD3C  ECC4  F06B         	call	_lcdInst
  2816                           
  2817                           ;standbyMode.c: 1223: printf("Invalid key!");
  2818  00FD40  0E55               	movlw	low STR_63
  2819  00FD42  6E0D               	movwf	printf@f,c
  2820  00FD44  0EFF               	movlw	high STR_63
  2821  00FD46  6E0E               	movwf	printf@f+1,c
  2822  00FD48  ECD9  F06D         	call	_printf	;wreg free
  2823                           
  2824                           ;standbyMode.c: 1224: lcdInst(0xC0);;
  2825  00FD4C  0EC0               	movlw	192
  2826  00FD4E  ECC4  F06B         	call	_lcdInst
  2827                           
  2828                           ;standbyMode.c: 1225: printf("Rebooting.");
  2829  00FD52  0E9F               	movlw	low STR_62
  2830  00FD54  6E0D               	movwf	printf@f,c
  2831  00FD56  0EFF               	movlw	high STR_62
  2832  00FD58  6E0E               	movwf	printf@f+1,c
  2833  00FD5A  ECD9  F06D         	call	_printf	;wreg free
  2834                           
  2835                           ;standbyMode.c: 1226: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2836  00FD5E  0E66               	movlw	102
  2837  00FD60  6E47               	movwf	(??_standbyMode+1)& (0+255),c
  2838  00FD62  0E76               	movlw	118
  2839  00FD64  6E46               	movwf	??_standbyMode& (0+255),c
  2840  00FD66  0EC1               	movlw	193
  2841  00FD68                     u6147:
  2842  00FD68  2EE8               	decfsz	wreg,f,c
  2843  00FD6A  D7FE               	bra	u6147
  2844  00FD6C  2E46               	decfsz	??_standbyMode& (0+255),f,c
  2845  00FD6E  D7FC               	bra	u6147
  2846  00FD70  2E47               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2847  00FD72  D7FA               	bra	u6147
  2848  00FD74  F000               	nop	
  2849  00FD76  0012               	return	
  2850  00FD78                     __end_of_standbyMode:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _writeEEPROM *****************
  2867 ;; Defined at:
  2868 ;;		line 10 in file "EEPROMstorage.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  address         1    wreg     unsigned char 
  2871 ;;  data            1    0[COMRAM] unsigned char 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  address         1    1[COMRAM] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2883 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;Total ram usage:        2 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_standbyMode
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text2
  2897  00D800                     __ptext2:
  2898                           	opt stack 0
  2899  00D800                     _writeEEPROM:
  2900                           	opt stack 29
  2901                           
  2902                           ;incstack = 0
  2903                           ;writeEEPROM@address stored from wreg
  2904  00D800  6E02               	movwf	writeEEPROM@address,c
  2905  00D802                     
  2906                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  2907  00D802  B2A6               	btfsc	4006,1,c	;volsfr
  2908  00D804  D7FE               	goto	l3990
  2909                           
  2910                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  2911  00D806  84A6               	bsf	4006,2,c	;volsfr
  2912                           
  2913                           ;EEPROMstorage.c: 14: EEADR=address;
  2914  00D808  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  2915                           
  2916                           ;EEPROMstorage.c: 15: EEDATA=data;
  2917  00D80C  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  2918                           
  2919                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  2920  00D810  9EA6               	bcf	4006,7,c	;volsfr
  2921                           
  2922                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  2923  00D812  9CA6               	bcf	4006,6,c	;volsfr
  2924                           
  2925                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  2926  00D814  9EF2               	bcf	intcon,7,c	;volatile
  2927                           
  2928                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  2929  00D816  0E55               	movlw	85
  2930  00D818  6EA7               	movwf	4007,c	;volsfr
  2931                           
  2932                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  2933  00D81A  0EAA               	movlw	170
  2934  00D81C  6EA7               	movwf	4007,c	;volsfr
  2935                           
  2936                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  2937  00D81E  82A6               	bsf	4006,1,c	;volsfr
  2938                           
  2939                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  2940  00D820  8EF2               	bsf	intcon,7,c	;volatile
  2941  00D822  B2A6               	btfsc	4006,1,c	;volsfr
  2942  00D824  D7FE               	goto	l532
  2943                           
  2944                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  2945  00D826  94A6               	bcf	4006,2,c	;volsfr
  2946  00D828  0012               	return		;funcret
  2947  00D82A                     __end_of_writeEEPROM:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function _which_drawer *****************
  2965 ;; Defined at:
  2966 ;;		line 871 in file "standbyMode.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  rand            2   33[COMRAM] unsigned int 
  2971 ;;  keypress        1   41[COMRAM] unsigned char 
  2972 ;;  count           2   39[COMRAM] unsigned int 
  2973 ;;  backCheck       2   37[COMRAM] unsigned int 
  2974 ;;  sum             2   35[COMRAM] unsigned int 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  2   30[COMRAM] unsigned int 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:       12 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		_decode_drawer
  2993 ;;		_lcdInst
  2994 ;;		_printf
  2995 ;;		_putch
  2996 ;; This function is called by:
  2997 ;;		_standbyMode
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text3
  3002  00DEC4                     __ptext3:
  3003                           	opt stack 0
  3004  00DEC4                     _which_drawer:
  3005                           	opt stack 26
  3006                           
  3007                           ;standbyMode.c: 872: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3008                           
  3009                           ;incstack = 0
  3010  00DEC4  0E0C               	movlw	12
  3011  00DEC6  ECC4  F06B         	call	_lcdInst
  3012                           
  3013                           ;standbyMode.c: 873: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3014  00DECA  0E01               	movlw	1
  3015  00DECC  ECC4  F06B         	call	_lcdInst
  3016  00DED0  0EC3               	movlw	195
  3017  00DED2  6E21               	movwf	??_which_drawer& (0+255),c
  3018  00DED4  0ECD               	movlw	205
  3019  00DED6                     u6157:
  3020  00DED6  2EE8               	decfsz	wreg,f,c
  3021  00DED8  D7FE               	bra	u6157
  3022  00DEDA  2E21               	decfsz	??_which_drawer& (0+255),f,c
  3023  00DEDC  D7FC               	bra	u6157
  3024  00DEDE  F000               	nop	
  3025                           
  3026                           ;standbyMode.c: 874: printf("Drawer number:");
  3027  00DEE0  0EE1               	movlw	low STR_37
  3028  00DEE2  6E0D               	movwf	printf@f,c
  3029  00DEE4  0EFE               	movlw	high STR_37
  3030  00DEE6  6E0E               	movwf	printf@f+1,c
  3031  00DEE8  ECD9  F06D         	call	_printf	;wreg free
  3032                           
  3033                           ;standbyMode.c: 875: lcdInst(0xC0);;
  3034  00DEEC  0EC0               	movlw	192
  3035  00DEEE  ECC4  F06B         	call	_lcdInst
  3036                           
  3037                           ;standbyMode.c: 877: unsigned int count = 0;
  3038  00DEF2  0E00               	movlw	0
  3039  00DEF4  6E29               	movwf	which_drawer@count+1,c
  3040  00DEF6  0E00               	movlw	0
  3041  00DEF8  6E28               	movwf	which_drawer@count,c
  3042                           
  3043                           ;standbyMode.c: 878: unsigned int sum = 0;
  3044  00DEFA  0E00               	movlw	0
  3045  00DEFC  6E25               	movwf	which_drawer@sum+1,c
  3046  00DEFE  0E00               	movlw	0
  3047  00DF00  6E24               	movwf	which_drawer@sum,c
  3048                           
  3049                           ;standbyMode.c: 879: unsigned int backCheck = 0;
  3050  00DF02  0E00               	movlw	0
  3051  00DF04  6E27               	movwf	which_drawer@backCheck+1,c
  3052  00DF06  0E00               	movlw	0
  3053  00DF08  6E26               	movwf	which_drawer@backCheck,c
  3054  00DF0A                     
  3055                           ;standbyMode.c: 882: while(PORTBbits.RB1 == 0){ continue; }
  3056  00DF0A  A281               	btfss	3969,1,c	;volatile
  3057  00DF0C  D7FE               	goto	l414
  3058                           
  3059                           ;standbyMode.c: 883: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3060  00DF0E  3881               	swapf	3969,w,c	;volatile
  3061  00DF10  0B0F               	andlw	15
  3062  00DF12  0B0F               	andlw	15
  3063  00DF14  6E2A               	movwf	which_drawer@keypress,c
  3064  00DF16  B281               	btfsc	3969,1,c	;volatile
  3065  00DF18  D7FE               	goto	l419
  3066                           
  3067                           ;standbyMode.c: 886: if(keypress == 15){
  3068  00DF1A  0E0F               	movlw	15
  3069  00DF1C  182A               	xorwf	which_drawer@keypress,w,c
  3070  00DF1E  B4D8               	btfsc	status,2,c
  3071  00DF20  D0BA               	goto	l422
  3072                           
  3073                           ;standbyMode.c: 889: else if (keypress == 14){
  3074                           
  3075                           ;standbyMode.c: 888: }
  3076                           
  3077                           ;standbyMode.c: 887: break;
  3078  00DF22  0E0E               	movlw	14
  3079  00DF24  182A               	xorwf	which_drawer@keypress,w,c
  3080  00DF26  A4D8               	btfss	status,2,c
  3081  00DF28  D005               	goto	l424
  3082                           
  3083                           ;standbyMode.c: 890: backCheck = 100;
  3084  00DF2A  0E00               	movlw	0
  3085  00DF2C  6E27               	movwf	which_drawer@backCheck+1,c
  3086  00DF2E  0E64               	movlw	100
  3087  00DF30  6E26               	movwf	which_drawer@backCheck,c
  3088                           
  3089                           ;standbyMode.c: 891: break;
  3090  00DF32  D0B1               	goto	l422
  3091  00DF34                     l424:
  3092                           
  3093                           ;standbyMode.c: 893: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  3094  00DF34  502A               	movf	which_drawer@keypress,w,c
  3095  00DF36  B4D8               	btfsc	status,2,c
  3096  00DF38  D023               	goto	u5320
  3097  00DF3A  042A               	decf	which_drawer@keypress,w,c
  3098  00DF3C  B4D8               	btfsc	status,2,c
  3099  00DF3E  D020               	goto	u5320
  3100  00DF40  0E02               	movlw	2
  3101  00DF42  182A               	xorwf	which_drawer@keypress,w,c
  3102  00DF44  B4D8               	btfsc	status,2,c
  3103  00DF46  D01C               	goto	u5320
  3104  00DF48  0E04               	movlw	4
  3105  00DF4A  182A               	xorwf	which_drawer@keypress,w,c
  3106  00DF4C  B4D8               	btfsc	status,2,c
  3107  00DF4E  D018               	goto	u5320
  3108  00DF50  0E05               	movlw	5
  3109  00DF52  182A               	xorwf	which_drawer@keypress,w,c
  3110  00DF54  B4D8               	btfsc	status,2,c
  3111  00DF56  D014               	goto	u5320
  3112  00DF58  0E06               	movlw	6
  3113  00DF5A  182A               	xorwf	which_drawer@keypress,w,c
  3114  00DF5C  B4D8               	btfsc	status,2,c
  3115  00DF5E  D010               	goto	u5320
  3116  00DF60  0E08               	movlw	8
  3117  00DF62  182A               	xorwf	which_drawer@keypress,w,c
  3118  00DF64  B4D8               	btfsc	status,2,c
  3119  00DF66  D00C               	goto	u5320
  3120  00DF68  0E09               	movlw	9
  3121  00DF6A  182A               	xorwf	which_drawer@keypress,w,c
  3122  00DF6C  B4D8               	btfsc	status,2,c
  3123  00DF6E  D008               	goto	u5320
  3124  00DF70  0E0A               	movlw	10
  3125  00DF72  182A               	xorwf	which_drawer@keypress,w,c
  3126  00DF74  B4D8               	btfsc	status,2,c
  3127  00DF76  D004               	goto	u5320
  3128  00DF78  0E0D               	movlw	13
  3129  00DF7A  182A               	xorwf	which_drawer@keypress,w,c
  3130  00DF7C  A4D8               	btfss	status,2,c
  3131  00DF7E  D06A               	goto	l426
  3132  00DF80                     u5320:
  3133                           
  3134                           ;standbyMode.c: 894: if (count == 0){
  3135  00DF80  5028               	movf	which_drawer@count,w,c
  3136  00DF82  1029               	iorwf	which_drawer@count+1,w,c
  3137  00DF84  A4D8               	btfss	status,2,c
  3138  00DF86  D046               	goto	l429
  3139                           
  3140                           ;standbyMode.c: 895: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  3141  00DF88  042A               	decf	which_drawer@keypress,w,c
  3142  00DF8A  B4D8               	btfsc	status,2,c
  3143  00DF8C  D01C               	goto	u5410
  3144  00DF8E  0E02               	movlw	2
  3145  00DF90  182A               	xorwf	which_drawer@keypress,w,c
  3146  00DF92  B4D8               	btfsc	status,2,c
  3147  00DF94  D018               	goto	u5410
  3148  00DF96  0E04               	movlw	4
  3149  00DF98  182A               	xorwf	which_drawer@keypress,w,c
  3150  00DF9A  B4D8               	btfsc	status,2,c
  3151  00DF9C  D014               	goto	u5410
  3152  00DF9E  0E05               	movlw	5
  3153  00DFA0  182A               	xorwf	which_drawer@keypress,w,c
  3154  00DFA2  B4D8               	btfsc	status,2,c
  3155  00DFA4  D010               	goto	u5410
  3156  00DFA6  0E06               	movlw	6
  3157  00DFA8  182A               	xorwf	which_drawer@keypress,w,c
  3158  00DFAA  B4D8               	btfsc	status,2,c
  3159  00DFAC  D00C               	goto	u5410
  3160  00DFAE  0E08               	movlw	8
  3161  00DFB0  182A               	xorwf	which_drawer@keypress,w,c
  3162  00DFB2  B4D8               	btfsc	status,2,c
  3163  00DFB4  D008               	goto	u5410
  3164  00DFB6  0E09               	movlw	9
  3165  00DFB8  182A               	xorwf	which_drawer@keypress,w,c
  3166  00DFBA  B4D8               	btfsc	status,2,c
  3167  00DFBC  D004               	goto	u5410
  3168  00DFBE  0E0A               	movlw	10
  3169  00DFC0  182A               	xorwf	which_drawer@keypress,w,c
  3170  00DFC2  A4D8               	btfss	status,2,c
  3171  00DFC4  D011               	goto	l430
  3172  00DFC6                     u5410:
  3173                           
  3174                           ;standbyMode.c: 896: count += 2;
  3175  00DFC6  0E02               	movlw	2
  3176  00DFC8  2628               	addwf	which_drawer@count,f,c
  3177  00DFCA  0E00               	movlw	0
  3178  00DFCC  2229               	addwfc	which_drawer@count+1,f,c
  3179                           
  3180                           ;standbyMode.c: 897: putch(input[keypress]);
  3181  00DFCE  502A               	movf	which_drawer@keypress,w,c
  3182  00DFD0  0D01               	mullw	1
  3183  00DFD2  0E8A               	movlw	low _input
  3184  00DFD4  24F3               	addwf	prodl,w,c
  3185  00DFD6  6EF6               	movwf	tblptrl,c
  3186  00DFD8  0EFD               	movlw	high _input
  3187  00DFDA  20F4               	addwfc	prodh,w,c
  3188  00DFDC  6EF7               	movwf	tblptrh,c
  3189  00DFDE                     	if	0	;There are less than 3 active tblptr bytes
  3190  00DFDE                     	endif
  3191  00DFDE  0008               	tblrd		*
  3192  00DFE0  50F5               	movf	tablat,w,c
  3193  00DFE2  ECCE  F06B         	call	_putch
  3194  00DFE6  D034               	goto	l440
  3195  00DFE8                     l430:
  3196                           
  3197                           ;standbyMode.c: 900: else if (keypress == 0){
  3198  00DFE8  502A               	movf	which_drawer@keypress,w,c
  3199  00DFEA  A4D8               	btfss	status,2,c
  3200  00DFEC  D78E               	goto	l414
  3201                           
  3202                           ;standbyMode.c: 901: putch(input[keypress]);
  3203  00DFEE  502A               	movf	which_drawer@keypress,w,c
  3204  00DFF0  0D01               	mullw	1
  3205  00DFF2  0E8A               	movlw	low _input
  3206  00DFF4  24F3               	addwf	prodl,w,c
  3207  00DFF6  6EF6               	movwf	tblptrl,c
  3208  00DFF8  0EFD               	movlw	high _input
  3209  00DFFA  20F4               	addwfc	prodh,w,c
  3210  00DFFC  6EF7               	movwf	tblptrh,c
  3211  00DFFE                     	if	0	;There are less than 3 active tblptr bytes
  3212  00DFFE                     	endif
  3213  00DFFE  0008               	tblrd		*
  3214  00E000  50F5               	movf	tablat,w,c
  3215  00E002  ECCE  F06B         	call	_putch
  3216                           
  3217                           ;standbyMode.c: 902: count += 1;
  3218  00E006  4A28               	infsnz	which_drawer@count,f,c
  3219  00E008  2A29               	incf	which_drawer@count+1,f,c
  3220  00E00A  D020               	goto	u5460
  3221  00E00C                     L2:
  3222  00E00C  2624               	addwf	which_drawer@sum,f,c
  3223  00E00E  0E00               	movlw	0
  3224  00E010  2225               	addwfc	which_drawer@sum+1,f,c
  3225                           
  3226                           ;standbyMode.c: 904: }
  3227                           ;standbyMode.c: 905: }
  3228  00E012  D77B               	goto	l414
  3229  00E014                     l429:
  3230                           
  3231                           ;standbyMode.c: 906: else if (count == 1){
  3232  00E014  0428               	decf	which_drawer@count,w,c
  3233  00E016  1029               	iorwf	which_drawer@count+1,w,c
  3234  00E018  A4D8               	btfss	status,2,c
  3235  00E01A  D777               	goto	l414
  3236                           
  3237                           ;standbyMode.c: 907: if (keypress < 8 || keypress == 13){
  3238  00E01C  0E07               	movlw	7
  3239  00E01E  642A               	cpfsgt	which_drawer@keypress,c
  3240  00E020  D004               	goto	u5450
  3241  00E022  0E0D               	movlw	13
  3242  00E024  182A               	xorwf	which_drawer@keypress,w,c
  3243  00E026  A4D8               	btfss	status,2,c
  3244  00E028  D770               	goto	l414
  3245  00E02A                     u5450:
  3246                           
  3247                           ;standbyMode.c: 908: putch(input[keypress]);
  3248  00E02A  502A               	movf	which_drawer@keypress,w,c
  3249  00E02C  0D01               	mullw	1
  3250  00E02E  0E8A               	movlw	low _input
  3251  00E030  24F3               	addwf	prodl,w,c
  3252  00E032  6EF6               	movwf	tblptrl,c
  3253  00E034  0EFD               	movlw	high _input
  3254  00E036  20F4               	addwfc	prodh,w,c
  3255  00E038  6EF7               	movwf	tblptrh,c
  3256  00E03A                     	if	0	;There are less than 3 active tblptr bytes
  3257  00E03A                     	endif
  3258  00E03A  0008               	tblrd		*
  3259  00E03C  50F5               	movf	tablat,w,c
  3260  00E03E  ECCE  F06B         	call	_putch
  3261                           
  3262                           ;standbyMode.c: 909: count += 1;
  3263  00E042  4A28               	infsnz	which_drawer@count,f,c
  3264  00E044  2A29               	incf	which_drawer@count+1,f,c
  3265                           
  3266                           ;standbyMode.c: 910: if(keypress == 0){
  3267  00E046  502A               	movf	which_drawer@keypress,w,c
  3268  00E048  A4D8               	btfss	status,2,c
  3269  00E04A  D002               	goto	l440
  3270  00E04C                     u5460:
  3271                           
  3272                           ;standbyMode.c: 911: sum += 20;
  3273  00E04C  0E14               	movlw	20
  3274  00E04E  D7DE               	goto	L2
  3275  00E050                     l440:
  3276                           
  3277                           ;standbyMode.c: 913: else {
  3278                           ;standbyMode.c: 914: sum += keypress;
  3279  00E050  502A               	movf	which_drawer@keypress,w,c
  3280  00E052  D7DC               	goto	L2
  3281  00E054                     l426:
  3282                           
  3283                           ;standbyMode.c: 919: else if (keypress == 12){
  3284  00E054  0E0C               	movlw	12
  3285  00E056  182A               	xorwf	which_drawer@keypress,w,c
  3286  00E058  A4D8               	btfss	status,2,c
  3287  00E05A  D757               	goto	l414
  3288                           
  3289                           ;standbyMode.c: 920: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3290  00E05C  0E01               	movlw	1
  3291  00E05E  ECC4  F06B         	call	_lcdInst
  3292  00E062  0EC3               	movlw	195
  3293  00E064  6E21               	movwf	??_which_drawer& (0+255),c
  3294  00E066  0ECD               	movlw	205
  3295  00E068                     u6167:
  3296  00E068  2EE8               	decfsz	wreg,f,c
  3297  00E06A  D7FE               	bra	u6167
  3298  00E06C  2E21               	decfsz	??_which_drawer& (0+255),f,c
  3299  00E06E  D7FC               	bra	u6167
  3300  00E070  F000               	nop	
  3301                           
  3302                           ;standbyMode.c: 921: printf("Drawer number:");
  3303  00E072  0EE1               	movlw	low STR_37
  3304  00E074  6E0D               	movwf	printf@f,c
  3305  00E076  0EFE               	movlw	high STR_37
  3306  00E078  6E0E               	movwf	printf@f+1,c
  3307  00E07A  ECD9  F06D         	call	_printf	;wreg free
  3308                           
  3309                           ;standbyMode.c: 922: lcdInst(0xC0);;
  3310  00E07E  0EC0               	movlw	192
  3311  00E080  ECC4  F06B         	call	_lcdInst
  3312                           
  3313                           ;standbyMode.c: 923: count = 0;
  3314  00E084  0E00               	movlw	0
  3315  00E086  6E29               	movwf	which_drawer@count+1,c
  3316  00E088  0E00               	movlw	0
  3317  00E08A  6E28               	movwf	which_drawer@count,c
  3318                           
  3319                           ;standbyMode.c: 924: sum = 0;
  3320  00E08C  0E00               	movlw	0
  3321  00E08E  6E25               	movwf	which_drawer@sum+1,c
  3322  00E090  0E00               	movlw	0
  3323  00E092  6E24               	movwf	which_drawer@sum,c
  3324  00E094  D73A               	goto	l414
  3325  00E096                     l422:
  3326                           
  3327                           ;standbyMode.c: 925: }
  3328                           ;standbyMode.c: 926: }
  3329                           ;standbyMode.c: 928: if (backCheck == 100){
  3330  00E096  0E64               	movlw	100
  3331  00E098  1826               	xorwf	which_drawer@backCheck,w,c
  3332  00E09A  1027               	iorwf	which_drawer@backCheck+1,w,c
  3333  00E09C  A4D8               	btfss	status,2,c
  3334  00E09E  D005               	goto	l445
  3335                           
  3336                           ;standbyMode.c: 929: return backCheck;
  3337  00E0A0  C026  F01F         	movff	which_drawer@backCheck,?_which_drawer
  3338  00E0A4  C027  F020         	movff	which_drawer@backCheck+1,?_which_drawer+1
  3339                           
  3340                           ;standbyMode.c: 930: }
  3341  00E0A8  0012               	return	
  3342  00E0AA                     l445:
  3343                           
  3344                           ;standbyMode.c: 931: else{
  3345                           ;standbyMode.c: 932: unsigned int rand = decode_drawer(sum);
  3346  00E0AA  C024  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3347  00E0AE  C025  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3348  00E0B2  EC68  F06D         	call	_decode_drawer	;wreg free
  3349  00E0B6  C001  F022         	movff	?_decode_drawer,which_drawer@rand
  3350  00E0BA  C002  F023         	movff	?_decode_drawer+1,which_drawer@rand+1
  3351                           
  3352                           ;standbyMode.c: 933: return rand;
  3353  00E0BE  C022  F01F         	movff	which_drawer@rand,?_which_drawer
  3354  00E0C2  C023  F020         	movff	which_drawer@rand+1,?_which_drawer+1
  3355  00E0C6  0012               	return	
  3356  00E0C8                     __end_of_which_drawer:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _decode_drawer *****************
  3374 ;; Defined at:
  3375 ;;		line 793 in file "standbyMode.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  drawer          2    0[COMRAM] unsigned int 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  returnValue     2    4[COMRAM] unsigned int 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  2    0[COMRAM] unsigned int 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3389 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;Total ram usage:        6 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_which_drawer
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text4
  3403  00DAD0                     __ptext4:
  3404                           	opt stack 0
  3405  00DAD0                     _decode_drawer:
  3406                           	opt stack 28
  3407                           
  3408                           ;standbyMode.c: 794: unsigned int returnValue;
  3409                           ;standbyMode.c: 796: switch(drawer){
  3410                           
  3411                           ;incstack = 0
  3412  00DAD0  D03A               	goto	l395
  3413  00DAD2                     
  3414                           ;standbyMode.c: 799: returnValue = 1;
  3415  00DAD2  0E00               	movlw	0
  3416  00DAD4  6E06               	movwf	decode_drawer@returnValue+1,c
  3417  00DAD6  0E01               	movlw	1
  3418  00DAD8  D02F               	goto	L14
  3419  00DADA                     
  3420                           ;standbyMode.c: 804: returnValue = 2;
  3421  00DADA  0E00               	movlw	0
  3422  00DADC  6E06               	movwf	decode_drawer@returnValue+1,c
  3423  00DADE  0E02               	movlw	2
  3424  00DAE0  D02B               	goto	L14
  3425  00DAE2                     
  3426                           ;standbyMode.c: 809: returnValue = 3;
  3427  00DAE2  0E00               	movlw	0
  3428  00DAE4  6E06               	movwf	decode_drawer@returnValue+1,c
  3429  00DAE6  0E03               	movlw	3
  3430  00DAE8  D027               	goto	L14
  3431  00DAEA                     
  3432                           ;standbyMode.c: 814: returnValue = 7;
  3433  00DAEA  0E00               	movlw	0
  3434  00DAEC  6E06               	movwf	decode_drawer@returnValue+1,c
  3435  00DAEE  0E07               	movlw	7
  3436  00DAF0  D023               	goto	L14
  3437  00DAF2                     
  3438                           ;standbyMode.c: 819: returnValue = 8;
  3439  00DAF2  0E00               	movlw	0
  3440  00DAF4  6E06               	movwf	decode_drawer@returnValue+1,c
  3441  00DAF6  0E08               	movlw	8
  3442  00DAF8  D01F               	goto	L14
  3443  00DAFA                     
  3444                           ;standbyMode.c: 824: returnValue = 9;
  3445  00DAFA  0E00               	movlw	0
  3446  00DAFC  6E06               	movwf	decode_drawer@returnValue+1,c
  3447  00DAFE  0E09               	movlw	9
  3448  00DB00  D01B               	goto	L14
  3449  00DB02                     
  3450                           ;standbyMode.c: 829: returnValue = 10;
  3451  00DB02  0E00               	movlw	0
  3452  00DB04  6E06               	movwf	decode_drawer@returnValue+1,c
  3453  00DB06  0E0A               	movlw	10
  3454  00DB08  D017               	goto	L14
  3455  00DB0A                     
  3456                           ;standbyMode.c: 834: returnValue = 11;
  3457  00DB0A  0E00               	movlw	0
  3458  00DB0C  6E06               	movwf	decode_drawer@returnValue+1,c
  3459  00DB0E  0E0B               	movlw	11
  3460  00DB10  D013               	goto	L14
  3461  00DB12                     
  3462                           ;standbyMode.c: 839: returnValue = 12;
  3463  00DB12  0E00               	movlw	0
  3464  00DB14  6E06               	movwf	decode_drawer@returnValue+1,c
  3465  00DB16  0E0C               	movlw	12
  3466  00DB18  D00F               	goto	L14
  3467  00DB1A                     
  3468                           ;standbyMode.c: 844: returnValue = 13;
  3469  00DB1A  0E00               	movlw	0
  3470  00DB1C  6E06               	movwf	decode_drawer@returnValue+1,c
  3471  00DB1E  0E0D               	movlw	13
  3472  00DB20  D00B               	goto	L14
  3473  00DB22                     
  3474                           ;standbyMode.c: 849: returnValue = 14;
  3475  00DB22  0E00               	movlw	0
  3476  00DB24  6E06               	movwf	decode_drawer@returnValue+1,c
  3477  00DB26  0E0E               	movlw	14
  3478  00DB28  D007               	goto	L14
  3479  00DB2A                     
  3480                           ;standbyMode.c: 854: returnValue = 15;
  3481  00DB2A  0E00               	movlw	0
  3482  00DB2C  6E06               	movwf	decode_drawer@returnValue+1,c
  3483  00DB2E  0E0F               	movlw	15
  3484  00DB30  D003               	goto	L14
  3485  00DB32                     
  3486                           ;standbyMode.c: 859: returnValue = 16;
  3487  00DB32  0E00               	movlw	0
  3488  00DB34  6E06               	movwf	decode_drawer@returnValue+1,c
  3489  00DB36  0E10               	movlw	16
  3490  00DB38                     L14:
  3491  00DB38  6E05               	movwf	decode_drawer@returnValue,c
  3492                           
  3493                           ;standbyMode.c: 860: break;
  3494  00DB3A  D036               	goto	l397
  3495  00DB3C                     l410:
  3496                           
  3497                           ;standbyMode.c: 863: returnValue = drawer;
  3498  00DB3C  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3499  00DB40  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3500                           
  3501                           ;standbyMode.c: 865: }
  3502                           
  3503                           ;standbyMode.c: 864: break;
  3504  00DB44  D031               	goto	l397
  3505  00DB46                     l395:
  3506  00DB46  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3507  00DB4A  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3508                           
  3509                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3510                           ; Switch size 1, requested type "space"
  3511                           ; Number of cases is 1, Range of values is 0 to 0
  3512                           ; switch strategies available:
  3513                           ; Name         Instructions Cycles
  3514                           ; simple_byte            4     3 (average)
  3515                           ;	Chosen strategy is simple_byte
  3516  00DB4E  5004               	movf	??_decode_drawer+1,w,c
  3517  00DB50  0A00               	xorlw	0	; case 0
  3518  00DB52  A4D8               	btfss	status,2,c
  3519  00DB54  D7F3               	goto	l410
  3520                           
  3521                           ; Switch size 1, requested type "space"
  3522                           ; Number of cases is 13, Range of values is 1 to 40
  3523                           ; switch strategies available:
  3524                           ; Name         Instructions Cycles
  3525                           ; simple_byte           40    21 (average)
  3526                           ;	Chosen strategy is simple_byte
  3527  00DB56  5003               	movf	??_decode_drawer,w,c
  3528  00DB58  0A01               	xorlw	1	; case 1
  3529  00DB5A  B4D8               	btfsc	status,2,c
  3530  00DB5C  D7BE               	goto	l398
  3531  00DB5E  0A03               	xorlw	3	; case 2
  3532  00DB60  B4D8               	btfsc	status,2,c
  3533  00DB62  D7BF               	goto	l399
  3534  00DB64  0A0A               	xorlw	10	; case 8
  3535  00DB66  B4D8               	btfsc	status,2,c
  3536  00DB68  D7C0               	goto	l400
  3537  00DB6A  0A01               	xorlw	1	; case 9
  3538  00DB6C  B4D8               	btfsc	status,2,c
  3539  00DB6E  D7C1               	goto	l401
  3540  00DB70  0A03               	xorlw	3	; case 10
  3541  00DB72  B4D8               	btfsc	status,2,c
  3542  00DB74  D7C2               	goto	l402
  3543  00DB76  0A1E               	xorlw	30	; case 20
  3544  00DB78  B4D8               	btfsc	status,2,c
  3545  00DB7A  D7AB               	goto	l396
  3546  00DB7C  0A01               	xorlw	1	; case 21
  3547  00DB7E  B4D8               	btfsc	status,2,c
  3548  00DB80  D7C8               	goto	l405
  3549  00DB82  0A03               	xorlw	3	; case 22
  3550  00DB84  B4D8               	btfsc	status,2,c
  3551  00DB86  D7C9               	goto	l406
  3552  00DB88  0A0E               	xorlw	14	; case 24
  3553  00DB8A  B4D8               	btfsc	status,2,c
  3554  00DB8C  D7CA               	goto	l407
  3555  00DB8E  0A01               	xorlw	1	; case 25
  3556  00DB90  B4D8               	btfsc	status,2,c
  3557  00DB92  D7CB               	goto	l408
  3558  00DB94  0A03               	xorlw	3	; case 26
  3559  00DB96  B4D8               	btfsc	status,2,c
  3560  00DB98  D7CC               	goto	l409
  3561  00DB9A  0A3B               	xorlw	59	; case 33
  3562  00DB9C  B4D8               	btfsc	status,2,c
  3563  00DB9E  D7B1               	goto	l403
  3564  00DBA0  0A09               	xorlw	9	; case 40
  3565  00DBA2  B4D8               	btfsc	status,2,c
  3566  00DBA4  D7B2               	goto	l404
  3567  00DBA6  D7CA               	goto	l410
  3568  00DBA8                     l397:
  3569                           
  3570                           ;standbyMode.c: 866: return returnValue;
  3571  00DBA8  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3572  00DBAC  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3573  00DBB0  0012               	return		;funcret
  3574  00DBB2                     __end_of_decode_drawer:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _viewLogs *****************
  3592 ;; Defined at:
  3593 ;;		line 287 in file "standbyMode.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  keypress2       1   68[COMRAM] unsigned char 
  3598 ;;  returnVal       2   65[COMRAM] unsigned int 
  3599 ;;  checkLog        2   63[COMRAM] unsigned int 
  3600 ;;  logView         2   61[COMRAM] unsigned int 
  3601 ;;  logNumber       1   67[COMRAM] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  2   57[COMRAM] unsigned int 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:       12 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		_displayLogs
  3620 ;;		_lcdInst
  3621 ;;		_printf
  3622 ;;		_putch
  3623 ;;		_readEEPROM
  3624 ;;		_verifyKeypress
  3625 ;; This function is called by:
  3626 ;;		_standbyMode
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text5
  3631  00E0C8                     __ptext5:
  3632                           	opt stack 0
  3633  00E0C8                     _viewLogs:
  3634                           	opt stack 25
  3635                           
  3636                           ;standbyMode.c: 289: unsigned char logNumber = readEEPROM(250);
  3637                           
  3638                           ;incstack = 0
  3639  00E0C8  0EFA               	movlw	250
  3640  00E0CA  ECD8  F06B         	call	_readEEPROM
  3641  00E0CE  6E44               	movwf	viewLogs@logNumber,c
  3642                           
  3643                           ;standbyMode.c: 290: unsigned int logView = 0;
  3644  00E0D0  0E00               	movlw	0
  3645  00E0D2  6E3F               	movwf	viewLogs@logView+1,c
  3646  00E0D4  0E00               	movlw	0
  3647  00E0D6  6E3E               	movwf	viewLogs@logView,c
  3648                           
  3649                           ;standbyMode.c: 291: unsigned int checkLog = 0;
  3650  00E0D8  0E00               	movlw	0
  3651  00E0DA  6E41               	movwf	viewLogs@checkLog+1,c
  3652  00E0DC  0E00               	movlw	0
  3653  00E0DE  6E40               	movwf	viewLogs@checkLog,c
  3654                           
  3655                           ;standbyMode.c: 292: unsigned int returnVal = 0;
  3656  00E0E0  0E00               	movlw	0
  3657  00E0E2  6E43               	movwf	viewLogs@returnVal+1,c
  3658  00E0E4  0E00               	movlw	0
  3659  00E0E6  6E42               	movwf	viewLogs@returnVal,c
  3660                           
  3661                           ;standbyMode.c: 294: if (logNumber == 0){
  3662  00E0E8  5044               	movf	viewLogs@logNumber,w,c
  3663  00E0EA  A4D8               	btfss	status,2,c
  3664  00E0EC  D02B               	goto	l222
  3665                           
  3666                           ;standbyMode.c: 295: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3667  00E0EE  0E01               	movlw	1
  3668  00E0F0  ECC4  F06B         	call	_lcdInst
  3669  00E0F4  0EC3               	movlw	195
  3670  00E0F6  6E3C               	movwf	??_viewLogs& (0+255),c
  3671  00E0F8  0ECD               	movlw	205
  3672  00E0FA                     u6177:
  3673  00E0FA  2EE8               	decfsz	wreg,f,c
  3674  00E0FC  D7FE               	bra	u6177
  3675  00E0FE  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3676  00E100  D7FC               	bra	u6177
  3677  00E102  F000               	nop	
  3678                           
  3679                           ;standbyMode.c: 296: printf("No logs");
  3680  00E104  0EDB               	movlw	low STR_1
  3681  00E106  6E0D               	movwf	printf@f,c
  3682  00E108  0EFF               	movlw	high STR_1
  3683  00E10A  6E0E               	movwf	printf@f+1,c
  3684  00E10C  ECD9  F06D         	call	_printf	;wreg free
  3685                           
  3686                           ;standbyMode.c: 297: lcdInst(0xC0);;
  3687  00E110  0EC0               	movlw	192
  3688  00E112  ECC4  F06B         	call	_lcdInst
  3689                           
  3690                           ;standbyMode.c: 298: printf("available.");
  3691  00E116  0E94               	movlw	low STR_2
  3692  00E118  6E0D               	movwf	printf@f,c
  3693  00E11A  0EFF               	movlw	high STR_2
  3694  00E11C  6E0E               	movwf	printf@f+1,c
  3695  00E11E  ECD9  F06D         	call	_printf	;wreg free
  3696                           
  3697                           ;standbyMode.c: 299: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3698  00E122  0E66               	movlw	102
  3699  00E124  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  3700  00E126  0E76               	movlw	118
  3701  00E128  6E3C               	movwf	??_viewLogs& (0+255),c
  3702  00E12A  0EC1               	movlw	193
  3703  00E12C                     u6187:
  3704  00E12C  2EE8               	decfsz	wreg,f,c
  3705  00E12E  D7FE               	bra	u6187
  3706  00E130  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3707  00E132  D7FC               	bra	u6187
  3708  00E134  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3709  00E136  D7FA               	bra	u6187
  3710  00E138  F000               	nop	
  3711                           
  3712                           ;standbyMode.c: 300: return 14;
  3713  00E13A  0E00               	movlw	0
  3714  00E13C  6E3B               	movwf	?_viewLogs+1,c
  3715  00E13E  0E0E               	movlw	14
  3716  00E140  6E3A               	movwf	?_viewLogs,c
  3717                           
  3718                           ;standbyMode.c: 301: }
  3719  00E142  0012               	return	
  3720  00E144                     l222:
  3721                           
  3722                           ;standbyMode.c: 302: else {
  3723                           ;standbyMode.c: 303: if (logNumber == 1){
  3724  00E144  0444               	decf	viewLogs@logNumber,w,c
  3725  00E146  A4D8               	btfss	status,2,c
  3726  00E148  D053               	goto	l225
  3727                           
  3728                           ;standbyMode.c: 304: logView = 1;
  3729  00E14A  0E00               	movlw	0
  3730  00E14C  6E3F               	movwf	viewLogs@logView+1,c
  3731  00E14E  0E01               	movlw	1
  3732  00E150  6E3E               	movwf	viewLogs@logView,c
  3733                           
  3734                           ;standbyMode.c: 306: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3735  00E152  0E01               	movlw	1
  3736  00E154  ECC4  F06B         	call	_lcdInst
  3737  00E158  0EC3               	movlw	195
  3738  00E15A  6E3C               	movwf	??_viewLogs& (0+255),c
  3739  00E15C  0ECD               	movlw	205
  3740  00E15E                     u6197:
  3741  00E15E  2EE8               	decfsz	wreg,f,c
  3742  00E160  D7FE               	bra	u6197
  3743  00E162  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3744  00E164  D7FC               	bra	u6197
  3745  00E166  F000               	nop	
  3746                           
  3747                           ;standbyMode.c: 307: printf("1 previous log");
  3748  00E168  0EF0               	movlw	low STR_3
  3749  00E16A  6E0D               	movwf	printf@f,c
  3750  00E16C  0EFE               	movlw	high STR_3
  3751  00E16E  6E0E               	movwf	printf@f+1,c
  3752  00E170  ECD9  F06D         	call	_printf	;wreg free
  3753                           
  3754                           ;standbyMode.c: 308: lcdInst(0xC0);;
  3755  00E174  0EC0               	movlw	192
  3756  00E176  ECC4  F06B         	call	_lcdInst
  3757                           
  3758                           ;standbyMode.c: 309: printf("available.");
  3759  00E17A  0E94               	movlw	low STR_2
  3760  00E17C  6E0D               	movwf	printf@f,c
  3761  00E17E  0EFF               	movlw	high STR_2
  3762  00E180  6E0E               	movwf	printf@f+1,c
  3763  00E182  ECD9  F06D         	call	_printf	;wreg free
  3764                           
  3765                           ;standbyMode.c: 310: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3766  00E186  0E66               	movlw	102
  3767  00E188  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  3768  00E18A  0E76               	movlw	118
  3769  00E18C  6E3C               	movwf	??_viewLogs& (0+255),c
  3770  00E18E  0EC1               	movlw	193
  3771  00E190                     u6207:
  3772  00E190  2EE8               	decfsz	wreg,f,c
  3773  00E192  D7FE               	bra	u6207
  3774  00E194  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3775  00E196  D7FC               	bra	u6207
  3776  00E198  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3777  00E19A  D7FA               	bra	u6207
  3778  00E19C  F000               	nop	
  3779                           
  3780                           ;standbyMode.c: 312: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3781  00E19E  0E01               	movlw	1
  3782  00E1A0  ECC4  F06B         	call	_lcdInst
  3783  00E1A4  0EC3               	movlw	195
  3784  00E1A6  6E3C               	movwf	??_viewLogs& (0+255),c
  3785  00E1A8  0ECD               	movlw	205
  3786  00E1AA                     u6217:
  3787  00E1AA  2EE8               	decfsz	wreg,f,c
  3788  00E1AC  D7FE               	bra	u6217
  3789  00E1AE  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3790  00E1B0  D7FC               	bra	u6217
  3791  00E1B2  F000               	nop	
  3792                           
  3793                           ;standbyMode.c: 313: printf("Press any key to");
  3794  00E1B4  0E01               	movlw	low STR_5
  3795  00E1B6  6E0D               	movwf	printf@f,c
  3796  00E1B8  0EFE               	movlw	high STR_5
  3797  00E1BA  6E0E               	movwf	printf@f+1,c
  3798  00E1BC  ECD9  F06D         	call	_printf	;wreg free
  3799                           
  3800                           ;standbyMode.c: 314: lcdInst(0xC0);;
  3801  00E1C0  0EC0               	movlw	192
  3802  00E1C2  ECC4  F06B         	call	_lcdInst
  3803                           
  3804                           ;standbyMode.c: 315: printf("move forward.");
  3805  00E1C6  0E39               	movlw	low STR_6
  3806  00E1C8  6E0D               	movwf	printf@f,c
  3807  00E1CA  0EFF               	movlw	high STR_6
  3808  00E1CC  6E0E               	movwf	printf@f+1,c
  3809  00E1CE  ECD9  F06D         	call	_printf	;wreg free
  3810                           
  3811                           ;standbyMode.c: 316: _delay((unsigned long)((500)*(40000000/4000.0)));
  3812  00E1D2  0E1A               	movlw	26
  3813  00E1D4  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  3814  00E1D6  0E5E               	movlw	94
  3815  00E1D8  6E3C               	movwf	??_viewLogs& (0+255),c
  3816  00E1DA  0E6E               	movlw	110
  3817  00E1DC                     u6227:
  3818  00E1DC  2EE8               	decfsz	wreg,f,c
  3819  00E1DE  D7FE               	bra	u6227
  3820  00E1E0  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3821  00E1E2  D7FC               	bra	u6227
  3822  00E1E4  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3823  00E1E6  D7FA               	bra	u6227
  3824  00E1E8  D000               	nop2	
  3825  00E1EA                     
  3826                           ;standbyMode.c: 319: continue;
  3827  00E1EA  B281               	btfsc	3969,1,c	;volatile
  3828  00E1EC  D0C6               	goto	u4230
  3829  00E1EE  D7FD               	goto	l227
  3830  00E1F0                     l225:
  3831                           
  3832                           ;standbyMode.c: 322: else {
  3833                           ;standbyMode.c: 323: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3834  00E1F0  0E01               	movlw	1
  3835  00E1F2  ECC4  F06B         	call	_lcdInst
  3836  00E1F6  0EC3               	movlw	195
  3837  00E1F8  6E3C               	movwf	??_viewLogs& (0+255),c
  3838  00E1FA  0ECD               	movlw	205
  3839  00E1FC                     u6237:
  3840  00E1FC  2EE8               	decfsz	wreg,f,c
  3841  00E1FE  D7FE               	bra	u6237
  3842  00E200  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3843  00E202  D7FC               	bra	u6237
  3844  00E204  F000               	nop	
  3845                           
  3846                           ;standbyMode.c: 324: printf("%i previous logs", logNumber);
  3847  00E206  0E12               	movlw	low STR_7
  3848  00E208  6E0D               	movwf	printf@f,c
  3849  00E20A  0EFE               	movlw	high STR_7
  3850  00E20C  6E0E               	movwf	printf@f+1,c
  3851  00E20E  C044  F00F         	movff	viewLogs@logNumber,?_printf+2
  3852  00E212  6A10               	clrf	?_printf+3,c
  3853  00E214  ECD9  F06D         	call	_printf	;wreg free
  3854                           
  3855                           ;standbyMode.c: 325: lcdInst(0xC0);;
  3856  00E218  0EC0               	movlw	192
  3857  00E21A  ECC4  F06B         	call	_lcdInst
  3858                           
  3859                           ;standbyMode.c: 326: printf("available.");
  3860  00E21E  0E94               	movlw	low STR_2
  3861  00E220  6E0D               	movwf	printf@f,c
  3862  00E222  0EFF               	movlw	high STR_2
  3863  00E224  6E0E               	movwf	printf@f+1,c
  3864  00E226  ECD9  F06D         	call	_printf	;wreg free
  3865                           
  3866                           ;standbyMode.c: 327: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3867  00E22A  0E66               	movlw	102
  3868  00E22C  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  3869  00E22E  0E76               	movlw	118
  3870  00E230  6E3C               	movwf	??_viewLogs& (0+255),c
  3871  00E232  0EC1               	movlw	193
  3872  00E234                     u6247:
  3873  00E234  2EE8               	decfsz	wreg,f,c
  3874  00E236  D7FE               	bra	u6247
  3875  00E238  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3876  00E23A  D7FC               	bra	u6247
  3877  00E23C  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3878  00E23E  D7FA               	bra	u6247
  3879  00E240  F000               	nop	
  3880                           
  3881                           ;standbyMode.c: 328: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3882  00E242  0E01               	movlw	1
  3883  00E244  ECC4  F06B         	call	_lcdInst
  3884  00E248  0EC3               	movlw	195
  3885  00E24A  6E3C               	movwf	??_viewLogs& (0+255),c
  3886  00E24C  0ECD               	movlw	205
  3887  00E24E                     u6257:
  3888  00E24E  2EE8               	decfsz	wreg,f,c
  3889  00E250  D7FE               	bra	u6257
  3890  00E252  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3891  00E254  D7FC               	bra	u6257
  3892  00E256  F000               	nop	
  3893                           
  3894                           ;standbyMode.c: 329: printf("Please input log");
  3895  00E258  0EDF               	movlw	low STR_9
  3896  00E25A  6E0D               	movwf	printf@f,c
  3897  00E25C  0EFD               	movlw	high STR_9
  3898  00E25E  6E0E               	movwf	printf@f+1,c
  3899  00E260  ECD9  F06D         	call	_printf	;wreg free
  3900                           
  3901                           ;standbyMode.c: 330: lcdInst(0xC0);;
  3902  00E264  0EC0               	movlw	192
  3903  00E266  ECC4  F06B         	call	_lcdInst
  3904                           
  3905                           ;standbyMode.c: 331: printf("number: ");
  3906  00E26A  0ECA               	movlw	low STR_10
  3907  00E26C  6E0D               	movwf	printf@f,c
  3908  00E26E  0EFF               	movlw	high STR_10
  3909  00E270  6E0E               	movwf	printf@f+1,c
  3910  00E272  ECD9  F06D         	call	_printf	;wreg free
  3911  00E276                     
  3912                           ;standbyMode.c: 334: while(PORTBbits.RB1 == 0){ continue; }
  3913  00E276  A281               	btfss	3969,1,c	;volatile
  3914  00E278  D7FE               	goto	l230
  3915                           
  3916                           ;standbyMode.c: 335: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3917  00E27A  3881               	swapf	3969,w,c	;volatile
  3918  00E27C  0B0F               	andlw	15
  3919  00E27E  0B0F               	andlw	15
  3920  00E280  6E45               	movwf	viewLogs@keypress2,c
  3921  00E282  B281               	btfsc	3969,1,c	;volatile
  3922  00E284  D7FE               	goto	l235
  3923                           
  3924                           ;standbyMode.c: 338: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  3925  00E286  5045               	movf	viewLogs@keypress2,w,c
  3926  00E288  B4D8               	btfsc	status,2,c
  3927  00E28A  D00B               	goto	u4210
  3928  00E28C  0445               	decf	viewLogs@keypress2,w,c
  3929  00E28E  B4D8               	btfsc	status,2,c
  3930  00E290  D008               	goto	u4210
  3931  00E292  0E02               	movlw	2
  3932  00E294  1845               	xorwf	viewLogs@keypress2,w,c
  3933  00E296  B4D8               	btfsc	status,2,c
  3934  00E298  D004               	goto	u4210
  3935  00E29A  0E04               	movlw	4
  3936  00E29C  1845               	xorwf	viewLogs@keypress2,w,c
  3937  00E29E  A4D8               	btfss	status,2,c
  3938  00E2A0  D7EA               	goto	l230
  3939  00E2A2                     u4210:
  3940                           
  3941                           ;standbyMode.c: 339: checkLog = verifyKeypress(logNumber, keypress2);
  3942  00E2A2  C045  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  3943  00E2A6  6A02               	clrf	verifyKeypress@keypress+1,c
  3944  00E2A8  5044               	movf	viewLogs@logNumber,w,c
  3945  00E2AA  ECA1  F06C         	call	_verifyKeypress
  3946  00E2AE  C001  F040         	movff	?_verifyKeypress,viewLogs@checkLog
  3947  00E2B2  C002  F041         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  3948                           
  3949                           ;standbyMode.c: 340: if (checkLog == 1){
  3950  00E2B6  0440               	decf	viewLogs@checkLog,w,c
  3951  00E2B8  1041               	iorwf	viewLogs@checkLog+1,w,c
  3952  00E2BA  A4D8               	btfss	status,2,c
  3953  00E2BC  D7DC               	goto	l230
  3954                           
  3955                           ;standbyMode.c: 341: putch(keys[keypress2]);
  3956  00E2BE  5045               	movf	viewLogs@keypress2,w,c
  3957  00E2C0  0D01               	mullw	1
  3958  00E2C2  0E79               	movlw	low _keys
  3959  00E2C4  24F3               	addwf	prodl,w,c
  3960  00E2C6  6EF6               	movwf	tblptrl,c
  3961  00E2C8  0EFD               	movlw	high _keys
  3962  00E2CA  20F4               	addwfc	prodh,w,c
  3963  00E2CC  6EF7               	movwf	tblptrh,c
  3964  00E2CE                     	if	0	;There are less than 3 active tblptr bytes
  3965  00E2CE                     	endif
  3966  00E2CE  0008               	tblrd		*
  3967  00E2D0  50F5               	movf	tablat,w,c
  3968  00E2D2  ECCE  F06B         	call	_putch
  3969                           
  3970                           ;standbyMode.c: 342: logView = keypress2;
  3971  00E2D6  C045  F03E         	movff	viewLogs@keypress2,viewLogs@logView
  3972  00E2DA  6A3F               	clrf	viewLogs@logView+1,c
  3973                           
  3974                           ;standbyMode.c: 343: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3975  00E2DC  0E33               	movlw	51
  3976  00E2DE  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  3977  00E2E0  0EBB               	movlw	187
  3978  00E2E2  6E3C               	movwf	??_viewLogs& (0+255),c
  3979  00E2E4  0EE0               	movlw	224
  3980  00E2E6                     u6267:
  3981  00E2E6  2EE8               	decfsz	wreg,f,c
  3982  00E2E8  D7FE               	bra	u6267
  3983  00E2EA  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  3984  00E2EC  D7FC               	bra	u6267
  3985  00E2EE  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3986  00E2F0  D7FA               	bra	u6267
  3987                           
  3988                           ;standbyMode.c: 345: }
  3989                           ;standbyMode.c: 346: }
  3990                           ;standbyMode.c: 347: }
  3991                           ;standbyMode.c: 349: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3992                           
  3993                           ;standbyMode.c: 344: break;
  3994  00E2F2  0E01               	movlw	1
  3995  00E2F4  ECC4  F06B         	call	_lcdInst
  3996  00E2F8  0EC3               	movlw	195
  3997  00E2FA  6E3C               	movwf	??_viewLogs& (0+255),c
  3998  00E2FC  0ECD               	movlw	205
  3999  00E2FE                     u6277:
  4000  00E2FE  2EE8               	decfsz	wreg,f,c
  4001  00E300  D7FE               	bra	u6277
  4002  00E302  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  4003  00E304  D7FC               	bra	u6277
  4004  00E306  F000               	nop	
  4005                           
  4006                           ;standbyMode.c: 350: printf("Great!");
  4007  00E308  0EEB               	movlw	low STR_11
  4008  00E30A  6E0D               	movwf	printf@f,c
  4009  00E30C  0EFF               	movlw	high STR_11
  4010  00E30E  6E0E               	movwf	printf@f+1,c
  4011  00E310  ECD9  F06D         	call	_printf	;wreg free
  4012                           
  4013                           ;standbyMode.c: 351: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4014  00E314  0E33               	movlw	51
  4015  00E316  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  4016  00E318  0EBB               	movlw	187
  4017  00E31A  6E3C               	movwf	??_viewLogs& (0+255),c
  4018  00E31C  0EE0               	movlw	224
  4019  00E31E                     u6287:
  4020  00E31E  2EE8               	decfsz	wreg,f,c
  4021  00E320  D7FE               	bra	u6287
  4022  00E322  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  4023  00E324  D7FC               	bra	u6287
  4024  00E326  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4025  00E328  D7FA               	bra	u6287
  4026                           
  4027                           ;standbyMode.c: 352: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4028  00E32A  0E01               	movlw	1
  4029  00E32C  ECC4  F06B         	call	_lcdInst
  4030  00E330  0EC3               	movlw	195
  4031  00E332  6E3C               	movwf	??_viewLogs& (0+255),c
  4032  00E334  0ECD               	movlw	205
  4033  00E336                     u6297:
  4034  00E336  2EE8               	decfsz	wreg,f,c
  4035  00E338  D7FE               	bra	u6297
  4036  00E33A  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  4037  00E33C  D7FC               	bra	u6297
  4038  00E33E  F000               	nop	
  4039                           
  4040                           ;standbyMode.c: 353: printf("Press any key to");
  4041  00E340  0E01               	movlw	low STR_5
  4042  00E342  6E0D               	movwf	printf@f,c
  4043  00E344  0EFE               	movlw	high STR_5
  4044  00E346  6E0E               	movwf	printf@f+1,c
  4045  00E348  ECD9  F06D         	call	_printf	;wreg free
  4046                           
  4047                           ;standbyMode.c: 354: lcdInst(0xC0);;
  4048  00E34C  0EC0               	movlw	192
  4049  00E34E  ECC4  F06B         	call	_lcdInst
  4050                           
  4051                           ;standbyMode.c: 355: printf("move forward.");
  4052  00E352  0E39               	movlw	low STR_6
  4053  00E354  6E0D               	movwf	printf@f,c
  4054  00E356  0EFF               	movlw	high STR_6
  4055  00E358  6E0E               	movwf	printf@f+1,c
  4056  00E35A  ECD9  F06D         	call	_printf	;wreg free
  4057                           
  4058                           ;standbyMode.c: 356: _delay((unsigned long)((500)*(40000000/4000.0)));
  4059  00E35E  0E1A               	movlw	26
  4060  00E360  6E3D               	movwf	(??_viewLogs+1)& (0+255),c
  4061  00E362  0E5E               	movlw	94
  4062  00E364  6E3C               	movwf	??_viewLogs& (0+255),c
  4063  00E366  0E6E               	movlw	110
  4064  00E368                     u6307:
  4065  00E368  2EE8               	decfsz	wreg,f,c
  4066  00E36A  D7FE               	bra	u6307
  4067  00E36C  2E3C               	decfsz	??_viewLogs& (0+255),f,c
  4068  00E36E  D7FC               	bra	u6307
  4069  00E370  2E3D               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4070  00E372  D7FA               	bra	u6307
  4071  00E374  D000               	nop2	
  4072  00E376                     
  4073                           ;standbyMode.c: 359: continue;
  4074  00E376  A281               	btfss	3969,1,c	;volatile
  4075  00E378  D7FE               	goto	l244
  4076  00E37A                     u4230:
  4077                           
  4078                           ;standbyMode.c: 360: }
  4079                           ;standbyMode.c: 361: }
  4080                           ;standbyMode.c: 362: returnVal = displayLogs(logNumber);
  4081  00E37A  C044  F01F         	movff	viewLogs@logNumber,displayLogs@logNumber
  4082  00E37E  6A20               	clrf	displayLogs@logNumber+1,c
  4083  00E380  ECCB  F071         	call	_displayLogs	;wreg free
  4084  00E384  C01F  F042         	movff	?_displayLogs,viewLogs@returnVal
  4085  00E388  C020  F043         	movff	?_displayLogs+1,viewLogs@returnVal+1
  4086                           
  4087                           ;standbyMode.c: 363: return returnVal;
  4088  00E38C  C042  F03A         	movff	viewLogs@returnVal,?_viewLogs
  4089  00E390  C043  F03B         	movff	viewLogs@returnVal+1,?_viewLogs+1
  4090  00E394  0012               	return	
  4091  00E396                     __end_of_viewLogs:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           postinc2	equ	0xFDE
  4103                           postdec2	equ	0xFDD
  4104                           fsr2h	equ	0xFDA
  4105                           fsr2l	equ	0xFD9
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _verifyKeypress *****************
  4109 ;; Defined at:
  4110 ;;		line 273 in file "standbyMode.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  logNumber       1    wreg     unsigned char 
  4113 ;;  keypress        2    0[COMRAM] unsigned int 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  logNumber       1    4[COMRAM] unsigned char 
  4116 ;;  i               2    7[COMRAM] unsigned int 
  4117 ;;  returnVal       2    5[COMRAM] unsigned int 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  2    0[COMRAM] unsigned int 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;Total ram usage:        9 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_viewLogs
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text6
  4141  00D942                     __ptext6:
  4142                           	opt stack 0
  4143  00D942                     _verifyKeypress:
  4144                           	opt stack 28
  4145                           
  4146                           ;incstack = 0
  4147                           ;verifyKeypress@logNumber stored from wreg
  4148  00D942  6E05               	movwf	verifyKeypress@logNumber,c
  4149                           
  4150                           ;standbyMode.c: 274: unsigned int i = 0;
  4151  00D944  0E00               	movlw	0
  4152  00D946  6E09               	movwf	verifyKeypress@i+1,c
  4153  00D948  0E00               	movlw	0
  4154  00D94A  6E08               	movwf	verifyKeypress@i,c
  4155                           
  4156                           ;standbyMode.c: 275: unsigned int returnVal = 0;
  4157  00D94C  0E00               	movlw	0
  4158  00D94E  6E07               	movwf	verifyKeypress@returnVal+1,c
  4159  00D950  0E00               	movlw	0
  4160  00D952  6E06               	movwf	verifyKeypress@returnVal,c
  4161                           
  4162                           ;standbyMode.c: 277: for (i=0; i<logNumber; i++){
  4163  00D954  0E00               	movlw	0
  4164  00D956  6E09               	movwf	verifyKeypress@i+1,c
  4165  00D958  0E00               	movlw	0
  4166  00D95A  6E08               	movwf	verifyKeypress@i,c
  4167  00D95C  D00D               	goto	l215
  4168  00D95E                     
  4169                           ;standbyMode.c: 278: if (keypress == i){
  4170  00D95E  5008               	movf	verifyKeypress@i,w,c
  4171  00D960  1801               	xorwf	verifyKeypress@keypress,w,c
  4172  00D962  E108               	bnz	l3186
  4173  00D964  5009               	movf	verifyKeypress@i+1,w,c
  4174  00D966  1802               	xorwf	verifyKeypress@keypress+1,w,c
  4175  00D968  A4D8               	btfss	status,2,c
  4176  00D96A  D004               	goto	l217
  4177                           
  4178                           ;standbyMode.c: 279: returnVal = 1;
  4179  00D96C  0E00               	movlw	0
  4180  00D96E  6E07               	movwf	verifyKeypress@returnVal+1,c
  4181  00D970  0E01               	movlw	1
  4182  00D972  6E06               	movwf	verifyKeypress@returnVal,c
  4183  00D974                     l217:
  4184  00D974                     l3186:
  4185  00D974  4A08               	infsnz	verifyKeypress@i,f,c
  4186  00D976  2A09               	incf	verifyKeypress@i+1,f,c
  4187  00D978                     l215:
  4188  00D978  5005               	movf	verifyKeypress@logNumber,w,c
  4189  00D97A  6E03               	movwf	??_verifyKeypress& (0+255),c
  4190  00D97C  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  4191  00D97E  5003               	movf	??_verifyKeypress,w,c
  4192  00D980  5C08               	subwf	verifyKeypress@i,w,c
  4193  00D982  5004               	movf	??_verifyKeypress+1,w,c
  4194  00D984  5809               	subwfb	verifyKeypress@i+1,w,c
  4195  00D986  A0D8               	btfss	status,0,c
  4196  00D988  D7EA               	goto	l216
  4197                           
  4198                           ;standbyMode.c: 280: }
  4199                           ;standbyMode.c: 281: }
  4200                           ;standbyMode.c: 282: return returnVal;
  4201  00D98A  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  4202  00D98E  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  4203  00D992  0012               	return		;funcret
  4204  00D994                     __end_of_verifyKeypress:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           intcon	equ	0xFF2
  4213                           postinc0	equ	0xFEE
  4214                           wreg	equ	0xFE8
  4215                           postinc2	equ	0xFDE
  4216                           postdec2	equ	0xFDD
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _displayLogs *****************
  4222 ;; Defined at:
  4223 ;;		line 369 in file "standbyMode.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  logNumber       2   30[COMRAM] unsigned int 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  n               2   55[COMRAM] unsigned int 
  4228 ;;  markedDrawer    2   53[COMRAM] unsigned int 
  4229 ;;  markedDrawer    2   51[COMRAM] unsigned int 
  4230 ;;  markedDrawer    2   49[COMRAM] unsigned int 
  4231 ;;  markedDrawer    2   47[COMRAM] unsigned int 
  4232 ;;  seconds         2   45[COMRAM] unsigned int 
  4233 ;;  minutes         2   43[COMRAM] unsigned int 
  4234 ;;  operationTim    2   41[COMRAM] unsigned int 
  4235 ;;  longPieces      2   38[COMRAM] unsigned int 
  4236 ;;  flatPieces      2   36[COMRAM] unsigned int 
  4237 ;;  roundPieces     2   34[COMRAM] unsigned int 
  4238 ;;  keypress3       1   40[COMRAM] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  2   30[COMRAM] unsigned int 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4248 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;Total ram usage:       27 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    3
  4255 ;; This function calls:
  4256 ;;		___lwdiv
  4257 ;;		___lwmod
  4258 ;;		___wmul
  4259 ;;		_lcdInst
  4260 ;;		_printf
  4261 ;;		_readEEPROM
  4262 ;; This function is called by:
  4263 ;;		_viewLogs
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text7
  4268  00E396                     __ptext7:
  4269                           	opt stack 0
  4270  00E396                     _displayLogs:
  4271                           	opt stack 25
  4272                           
  4273                           ;standbyMode.c: 370: unsigned int n = (logNumber - 1)* 54;
  4274                           
  4275                           ;incstack = 0
  4276  00E396  0EFF               	movlw	255
  4277  00E398  241F               	addwf	displayLogs@logNumber,w,c
  4278  00E39A  6E01               	movwf	___wmul@multiplier,c
  4279  00E39C  0EFF               	movlw	255
  4280  00E39E  2020               	addwfc	displayLogs@logNumber+1,w,c
  4281  00E3A0  6E02               	movwf	___wmul@multiplier+1,c
  4282  00E3A2  0E00               	movlw	0
  4283  00E3A4  6E04               	movwf	___wmul@multiplicand+1,c
  4284  00E3A6  0E36               	movlw	54
  4285  00E3A8  6E03               	movwf	___wmul@multiplicand,c
  4286  00E3AA  ECED  F06B         	call	___wmul	;wreg free
  4287  00E3AE  C001  F038         	movff	?___wmul,displayLogs@n
  4288  00E3B2  C002  F039         	movff	?___wmul+1,displayLogs@n+1
  4289                           
  4290                           ;standbyMode.c: 371: unsigned int operationTime = readEEPROM(3+n);
  4291  00E3B6  5038               	movf	displayLogs@n,w,c
  4292  00E3B8  0F03               	addlw	3
  4293  00E3BA  ECD8  F06B         	call	_readEEPROM
  4294  00E3BE  6E21               	movwf	??_displayLogs& (0+255),c
  4295  00E3C0  5021               	movf	??_displayLogs,w,c
  4296  00E3C2  6E2A               	movwf	displayLogs@operationTime,c
  4297  00E3C4  6A2B               	clrf	displayLogs@operationTime+1,c
  4298                           
  4299                           ;standbyMode.c: 372: unsigned int roundPieces = readEEPROM(4+n);
  4300  00E3C6  5038               	movf	displayLogs@n,w,c
  4301  00E3C8  0F04               	addlw	4
  4302  00E3CA  ECD8  F06B         	call	_readEEPROM
  4303  00E3CE  6E21               	movwf	??_displayLogs& (0+255),c
  4304  00E3D0  5021               	movf	??_displayLogs,w,c
  4305  00E3D2  6E23               	movwf	displayLogs@roundPieces,c
  4306  00E3D4  6A24               	clrf	displayLogs@roundPieces+1,c
  4307                           
  4308                           ;standbyMode.c: 373: unsigned int flatPieces = readEEPROM(5+n);
  4309  00E3D6  5038               	movf	displayLogs@n,w,c
  4310  00E3D8  0F05               	addlw	5
  4311  00E3DA  ECD8  F06B         	call	_readEEPROM
  4312  00E3DE  6E21               	movwf	??_displayLogs& (0+255),c
  4313  00E3E0  5021               	movf	??_displayLogs,w,c
  4314  00E3E2  6E25               	movwf	displayLogs@flatPieces,c
  4315  00E3E4  6A26               	clrf	displayLogs@flatPieces+1,c
  4316                           
  4317                           ;standbyMode.c: 374: unsigned int longPieces = readEEPROM(6+n);
  4318  00E3E6  5038               	movf	displayLogs@n,w,c
  4319  00E3E8  0F06               	addlw	6
  4320  00E3EA  ECD8  F06B         	call	_readEEPROM
  4321  00E3EE  6E21               	movwf	??_displayLogs& (0+255),c
  4322  00E3F0  5021               	movf	??_displayLogs,w,c
  4323  00E3F2  6E27               	movwf	displayLogs@longPieces,c
  4324  00E3F4  6A28               	clrf	displayLogs@longPieces+1,c
  4325                           
  4326                           ;standbyMode.c: 375: unsigned int markedDrawer1 = readEEPROM(7+n);
  4327  00E3F6  5038               	movf	displayLogs@n,w,c
  4328  00E3F8  0F07               	addlw	7
  4329  00E3FA  ECD8  F06B         	call	_readEEPROM
  4330  00E3FE  6E21               	movwf	??_displayLogs& (0+255),c
  4331  00E400  5021               	movf	??_displayLogs,w,c
  4332  00E402  6E30               	movwf	displayLogs@markedDrawer1,c
  4333  00E404  6A31               	clrf	displayLogs@markedDrawer1+1,c
  4334                           
  4335                           ;standbyMode.c: 376: unsigned int markedDrawer2 = readEEPROM(8+n);
  4336  00E406  5038               	movf	displayLogs@n,w,c
  4337  00E408  0F08               	addlw	8
  4338  00E40A  ECD8  F06B         	call	_readEEPROM
  4339  00E40E  6E21               	movwf	??_displayLogs& (0+255),c
  4340  00E410  5021               	movf	??_displayLogs,w,c
  4341  00E412  6E32               	movwf	displayLogs@markedDrawer2,c
  4342  00E414  6A33               	clrf	displayLogs@markedDrawer2+1,c
  4343                           
  4344                           ;standbyMode.c: 377: unsigned int markedDrawer3 = readEEPROM(9+n);
  4345  00E416  5038               	movf	displayLogs@n,w,c
  4346  00E418  0F09               	addlw	9
  4347  00E41A  ECD8  F06B         	call	_readEEPROM
  4348  00E41E  6E21               	movwf	??_displayLogs& (0+255),c
  4349  00E420  5021               	movf	??_displayLogs,w,c
  4350  00E422  6E34               	movwf	displayLogs@markedDrawer3,c
  4351  00E424  6A35               	clrf	displayLogs@markedDrawer3+1,c
  4352                           
  4353                           ;standbyMode.c: 378: unsigned int markedDrawer4 = readEEPROM(10+n);
  4354  00E426  5038               	movf	displayLogs@n,w,c
  4355  00E428  0F0A               	addlw	10
  4356  00E42A  ECD8  F06B         	call	_readEEPROM
  4357  00E42E  6E21               	movwf	??_displayLogs& (0+255),c
  4358  00E430  5021               	movf	??_displayLogs,w,c
  4359  00E432  6E36               	movwf	displayLogs@markedDrawer4,c
  4360  00E434  6A37               	clrf	displayLogs@markedDrawer4+1,c
  4361                           
  4362                           ;standbyMode.c: 380: unsigned int minutes = operationTime/60;
  4363  00E436  C02A  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  4364  00E43A  C02B  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  4365  00E43E  0E00               	movlw	0
  4366  00E440  6E04               	movwf	___lwdiv@divisor+1,c
  4367  00E442  0E3C               	movlw	60
  4368  00E444  6E03               	movwf	___lwdiv@divisor,c
  4369  00E446  EC78  F06C         	call	___lwdiv	;wreg free
  4370  00E44A  C001  F02C         	movff	?___lwdiv,displayLogs@minutes
  4371  00E44E  C002  F02D         	movff	?___lwdiv+1,displayLogs@minutes+1
  4372                           
  4373                           ;standbyMode.c: 381: unsigned int seconds = operationTime%60;
  4374  00E452  C02A  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  4375  00E456  C02B  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  4376  00E45A  0E00               	movlw	0
  4377  00E45C  6E0B               	movwf	___lwmod@divisor+1,c
  4378  00E45E  0E3C               	movlw	60
  4379  00E460  6E0A               	movwf	___lwmod@divisor,c
  4380  00E462  EC31  F06C         	call	___lwmod	;wreg free
  4381  00E466  C008  F02E         	movff	?___lwmod,displayLogs@seconds
  4382  00E46A  C009  F02F         	movff	?___lwmod+1,displayLogs@seconds+1
  4383                           
  4384                           ;standbyMode.c: 382: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4385  00E46E  0E01               	movlw	1
  4386  00E470  ECC4  F06B         	call	_lcdInst
  4387  00E474  0EC3               	movlw	195
  4388  00E476  6E21               	movwf	??_displayLogs& (0+255),c
  4389  00E478  0ECD               	movlw	205
  4390  00E47A                     u6317:
  4391  00E47A  2EE8               	decfsz	wreg,f,c
  4392  00E47C  D7FE               	bra	u6317
  4393  00E47E  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4394  00E480  D7FC               	bra	u6317
  4395  00E482  F000               	nop	
  4396                           
  4397                           ;standbyMode.c: 383: printf("Operation time:");
  4398  00E484  0E53               	movlw	low STR_14
  4399  00E486  6E0D               	movwf	printf@f,c
  4400  00E488  0EFE               	movlw	high STR_14
  4401  00E48A  6E0E               	movwf	printf@f+1,c
  4402  00E48C  ECD9  F06D         	call	_printf	;wreg free
  4403                           
  4404                           ;standbyMode.c: 384: lcdInst(0xC0);;
  4405  00E490  0EC0               	movlw	192
  4406  00E492  ECC4  F06B         	call	_lcdInst
  4407                           
  4408                           ;standbyMode.c: 385: if (seconds == 0){
  4409  00E496  502E               	movf	displayLogs@seconds,w,c
  4410  00E498  102F               	iorwf	displayLogs@seconds+1,w,c
  4411  00E49A  A4D8               	btfss	status,2,c
  4412  00E49C  D01A               	goto	l248
  4413                           
  4414                           ;standbyMode.c: 386: printf("%i:%i0", minutes, seconds);
  4415  00E49E  0EF2               	movlw	low STR_15
  4416  00E4A0  6E0D               	movwf	printf@f,c
  4417  00E4A2  0EFF               	movlw	high STR_15
  4418  00E4A4  6E0E               	movwf	printf@f+1,c
  4419  00E4A6  C02C  F00F         	movff	displayLogs@minutes,?_printf+2
  4420  00E4AA  C02D  F010         	movff	displayLogs@minutes+1,?_printf+3
  4421  00E4AE  C02E  F011         	movff	displayLogs@seconds,?_printf+4
  4422  00E4B2  C02F  F012         	movff	displayLogs@seconds+1,?_printf+5
  4423  00E4B6  ECD9  F06D         	call	_printf	;wreg free
  4424                           
  4425                           ;standbyMode.c: 387: _delay((unsigned long)((500)*(40000000/4000.0)));
  4426  00E4BA  0E1A               	movlw	26
  4427  00E4BC  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4428  00E4BE  0E5E               	movlw	94
  4429  00E4C0  6E21               	movwf	??_displayLogs& (0+255),c
  4430  00E4C2  0E6E               	movlw	110
  4431  00E4C4                     u6327:
  4432  00E4C4  2EE8               	decfsz	wreg,f,c
  4433  00E4C6  D7FE               	bra	u6327
  4434  00E4C8  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4435  00E4CA  D7FC               	bra	u6327
  4436  00E4CC  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4437  00E4CE  D7FA               	bra	u6327
  4438  00E4D0  D019               	goto	L15
  4439  00E4D2                     l248:
  4440                           
  4441                           ;standbyMode.c: 389: else{
  4442                           ;standbyMode.c: 390: printf("%i:%i", minutes, seconds);
  4443  00E4D2  0EF9               	movlw	low STR_16
  4444  00E4D4  6E0D               	movwf	printf@f,c
  4445  00E4D6  0EFF               	movlw	high STR_16
  4446  00E4D8  6E0E               	movwf	printf@f+1,c
  4447  00E4DA  C02C  F00F         	movff	displayLogs@minutes,?_printf+2
  4448  00E4DE  C02D  F010         	movff	displayLogs@minutes+1,?_printf+3
  4449  00E4E2  C02E  F011         	movff	displayLogs@seconds,?_printf+4
  4450  00E4E6  C02F  F012         	movff	displayLogs@seconds+1,?_printf+5
  4451  00E4EA  ECD9  F06D         	call	_printf	;wreg free
  4452                           
  4453                           ;standbyMode.c: 391: _delay((unsigned long)((500)*(40000000/4000.0)));
  4454  00E4EE  0E1A               	movlw	26
  4455  00E4F0  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4456  00E4F2  0E5E               	movlw	94
  4457  00E4F4  6E21               	movwf	??_displayLogs& (0+255),c
  4458  00E4F6  0E6E               	movlw	110
  4459  00E4F8                     u6337:
  4460  00E4F8  2EE8               	decfsz	wreg,f,c
  4461  00E4FA  D7FE               	bra	u6337
  4462  00E4FC  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4463  00E4FE  D7FC               	bra	u6337
  4464  00E500  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4465  00E502  D7FA               	bra	u6337
  4466  00E504                     L15:
  4467  00E504  D000               	nop2	
  4468  00E506                     
  4469                           ;standbyMode.c: 395: continue;
  4470                           
  4471                           ;standbyMode.c: 392: }
  4472                           ;standbyMode.c: 394: while(PORTBbits.RB1 == 0){
  4473  00E506  A281               	btfss	3969,1,c	;volatile
  4474  00E508  D7FE               	goto	l249
  4475                           
  4476                           ;standbyMode.c: 396: }
  4477                           ;standbyMode.c: 398: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4478  00E50A  0E01               	movlw	1
  4479  00E50C  ECC4  F06B         	call	_lcdInst
  4480  00E510  0EC3               	movlw	195
  4481  00E512  6E21               	movwf	??_displayLogs& (0+255),c
  4482  00E514  0ECD               	movlw	205
  4483  00E516                     u6347:
  4484  00E516  2EE8               	decfsz	wreg,f,c
  4485  00E518  D7FE               	bra	u6347
  4486  00E51A  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4487  00E51C  D7FC               	bra	u6347
  4488  00E51E  F000               	nop	
  4489                           
  4490                           ;standbyMode.c: 399: printf("Marked drawers:");
  4491  00E520  0E63               	movlw	low STR_17
  4492  00E522  6E0D               	movwf	printf@f,c
  4493  00E524  0EFE               	movlw	high STR_17
  4494  00E526  6E0E               	movwf	printf@f+1,c
  4495  00E528  ECD9  F06D         	call	_printf	;wreg free
  4496                           
  4497                           ;standbyMode.c: 400: lcdInst(0xC0);;
  4498  00E52C  0EC0               	movlw	192
  4499  00E52E  ECC4  F06B         	call	_lcdInst
  4500                           
  4501                           ;standbyMode.c: 402: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  4502  00E532  5036               	movf	displayLogs@markedDrawer4,w,c
  4503  00E534  1037               	iorwf	displayLogs@markedDrawer4+1,w,c
  4504  00E536  A4D8               	btfss	status,2,c
  4505  00E538  D01E               	goto	l253
  4506  00E53A  5034               	movf	displayLogs@markedDrawer3,w,c
  4507  00E53C  1035               	iorwf	displayLogs@markedDrawer3+1,w,c
  4508  00E53E  A4D8               	btfss	status,2,c
  4509  00E540  D01A               	goto	l253
  4510  00E542  5032               	movf	displayLogs@markedDrawer2,w,c
  4511  00E544  1033               	iorwf	displayLogs@markedDrawer2+1,w,c
  4512  00E546  A4D8               	btfss	status,2,c
  4513  00E548  D016               	goto	l253
  4514                           
  4515                           ;standbyMode.c: 403: printf("%i", markedDrawer1);
  4516  00E54A  0E0B               	movlw	low (STR_21+12)
  4517  00E54C  6E0D               	movwf	printf@f,c
  4518  00E54E  0EFF               	movlw	high (STR_21+12)
  4519  00E550  6E0E               	movwf	printf@f+1,c
  4520  00E552  C030  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4521  00E556  C031  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4522  00E55A  ECD9  F06D         	call	_printf	;wreg free
  4523                           
  4524                           ;standbyMode.c: 404: _delay((unsigned long)((500)*(40000000/4000.0)));
  4525  00E55E  0E1A               	movlw	26
  4526  00E560  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4527  00E562  0E5E               	movlw	94
  4528  00E564  6E21               	movwf	??_displayLogs& (0+255),c
  4529  00E566  0E6E               	movlw	110
  4530  00E568                     u6357:
  4531  00E568  2EE8               	decfsz	wreg,f,c
  4532  00E56A  D7FE               	bra	u6357
  4533  00E56C  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4534  00E56E  D7FC               	bra	u6357
  4535  00E570  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4536  00E572  D7FA               	bra	u6357
  4537  00E574  D065               	goto	L18
  4538  00E576                     l253:
  4539                           
  4540                           ;standbyMode.c: 407: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  4541  00E576  5036               	movf	displayLogs@markedDrawer4,w,c
  4542  00E578  1037               	iorwf	displayLogs@markedDrawer4+1,w,c
  4543  00E57A  A4D8               	btfss	status,2,c
  4544  00E57C  D01E               	goto	l255
  4545  00E57E  5034               	movf	displayLogs@markedDrawer3,w,c
  4546  00E580  1035               	iorwf	displayLogs@markedDrawer3+1,w,c
  4547  00E582  A4D8               	btfss	status,2,c
  4548  00E584  D01A               	goto	l255
  4549                           
  4550                           ;standbyMode.c: 408: printf("%i, %i", markedDrawer1, markedDrawer2);
  4551  00E586  0E07               	movlw	low (STR_21+8)
  4552  00E588  6E0D               	movwf	printf@f,c
  4553  00E58A  0EFF               	movlw	high (STR_21+8)
  4554  00E58C  6E0E               	movwf	printf@f+1,c
  4555  00E58E  C030  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4556  00E592  C031  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4557  00E596  C032  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4558  00E59A  C033  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4559  00E59E  ECD9  F06D         	call	_printf	;wreg free
  4560                           
  4561                           ;standbyMode.c: 409: _delay((unsigned long)((500)*(40000000/4000.0)));
  4562  00E5A2  0E1A               	movlw	26
  4563  00E5A4  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4564  00E5A6  0E5E               	movlw	94
  4565  00E5A8  6E21               	movwf	??_displayLogs& (0+255),c
  4566  00E5AA  0E6E               	movlw	110
  4567  00E5AC                     u6367:
  4568  00E5AC  2EE8               	decfsz	wreg,f,c
  4569  00E5AE  D7FE               	bra	u6367
  4570  00E5B0  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4571  00E5B2  D7FC               	bra	u6367
  4572  00E5B4  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4573  00E5B6  D7FA               	bra	u6367
  4574  00E5B8  D043               	goto	L18
  4575  00E5BA                     l255:
  4576                           
  4577                           ;standbyMode.c: 412: else if (markedDrawer4 == 0){
  4578  00E5BA  5036               	movf	displayLogs@markedDrawer4,w,c
  4579  00E5BC  1037               	iorwf	displayLogs@markedDrawer4+1,w,c
  4580  00E5BE  A4D8               	btfss	status,2,c
  4581  00E5C0  D01E               	goto	l257
  4582                           
  4583                           ;standbyMode.c: 413: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  4584  00E5C2  0E03               	movlw	low (STR_21+4)
  4585  00E5C4  6E0D               	movwf	printf@f,c
  4586  00E5C6  0EFF               	movlw	high (STR_21+4)
  4587  00E5C8  6E0E               	movwf	printf@f+1,c
  4588  00E5CA  C030  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4589  00E5CE  C031  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4590  00E5D2  C032  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4591  00E5D6  C033  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4592  00E5DA  C034  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4593  00E5DE  C035  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4594  00E5E2  ECD9  F06D         	call	_printf	;wreg free
  4595                           
  4596                           ;standbyMode.c: 414: _delay((unsigned long)((500)*(40000000/4000.0)));
  4597  00E5E6  0E1A               	movlw	26
  4598  00E5E8  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4599  00E5EA  0E5E               	movlw	94
  4600  00E5EC  6E21               	movwf	??_displayLogs& (0+255),c
  4601  00E5EE  0E6E               	movlw	110
  4602  00E5F0                     u6377:
  4603  00E5F0  2EE8               	decfsz	wreg,f,c
  4604  00E5F2  D7FE               	bra	u6377
  4605  00E5F4  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4606  00E5F6  D7FC               	bra	u6377
  4607  00E5F8  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4608  00E5FA  D7FA               	bra	u6377
  4609  00E5FC  D021               	goto	L18
  4610  00E5FE                     l257:
  4611                           
  4612                           ;standbyMode.c: 417: else {
  4613                           ;standbyMode.c: 418: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  4614  00E5FE  0EFF               	movlw	low STR_21
  4615  00E600  6E0D               	movwf	printf@f,c
  4616  00E602  0EFE               	movlw	high STR_21
  4617  00E604  6E0E               	movwf	printf@f+1,c
  4618  00E606  C030  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4619  00E60A  C031  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4620  00E60E  C032  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4621  00E612  C033  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4622  00E616  C034  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4623  00E61A  C035  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4624  00E61E  C036  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  4625  00E622  C037  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  4626  00E626  ECD9  F06D         	call	_printf	;wreg free
  4627                           
  4628                           ;standbyMode.c: 419: _delay((unsigned long)((500)*(40000000/4000.0)));
  4629  00E62A  0E1A               	movlw	26
  4630  00E62C  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4631  00E62E  0E5E               	movlw	94
  4632  00E630  6E21               	movwf	??_displayLogs& (0+255),c
  4633  00E632  0E6E               	movlw	110
  4634  00E634                     u6387:
  4635  00E634  2EE8               	decfsz	wreg,f,c
  4636  00E636  D7FE               	bra	u6387
  4637  00E638  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4638  00E63A  D7FC               	bra	u6387
  4639  00E63C  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4640  00E63E  D7FA               	bra	u6387
  4641  00E640                     L18:
  4642  00E640  D000               	nop2	
  4643  00E642                     
  4644                           ;standbyMode.c: 423: continue;
  4645                           
  4646                           ;standbyMode.c: 420: }
  4647                           ;standbyMode.c: 422: while(PORTBbits.RB1 == 0){
  4648  00E642  A281               	btfss	3969,1,c	;volatile
  4649  00E644  D7FE               	goto	l258
  4650                           
  4651                           ;standbyMode.c: 424: }
  4652                           ;standbyMode.c: 426: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4653  00E646  0E01               	movlw	1
  4654  00E648  ECC4  F06B         	call	_lcdInst
  4655  00E64C  0EC3               	movlw	195
  4656  00E64E  6E21               	movwf	??_displayLogs& (0+255),c
  4657  00E650  0ECD               	movlw	205
  4658  00E652                     u6397:
  4659  00E652  2EE8               	decfsz	wreg,f,c
  4660  00E654  D7FE               	bra	u6397
  4661  00E656  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4662  00E658  D7FC               	bra	u6397
  4663  00E65A  F000               	nop	
  4664                           
  4665                           ;standbyMode.c: 427: printf("Remaining pieces:");
  4666  00E65C  0EAB               	movlw	low STR_22
  4667  00E65E  6E0D               	movwf	printf@f,c
  4668  00E660  0EFD               	movlw	high STR_22
  4669  00E662  6E0E               	movwf	printf@f+1,c
  4670  00E664  ECD9  F06D         	call	_printf	;wreg free
  4671                           
  4672                           ;standbyMode.c: 428: lcdInst(0xC0);;
  4673  00E668  0EC0               	movlw	192
  4674  00E66A  ECC4  F06B         	call	_lcdInst
  4675                           
  4676                           ;standbyMode.c: 429: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  4677  00E66E  0EF0               	movlw	low STR_23
  4678  00E670  6E0D               	movwf	printf@f,c
  4679  00E672  0EFD               	movlw	high STR_23
  4680  00E674  6E0E               	movwf	printf@f+1,c
  4681  00E676  C023  F00F         	movff	displayLogs@roundPieces,?_printf+2
  4682  00E67A  C024  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  4683  00E67E  C025  F011         	movff	displayLogs@flatPieces,?_printf+4
  4684  00E682  C026  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  4685  00E686  C027  F013         	movff	displayLogs@longPieces,?_printf+6
  4686  00E68A  C028  F014         	movff	displayLogs@longPieces+1,?_printf+7
  4687  00E68E  ECD9  F06D         	call	_printf	;wreg free
  4688                           
  4689                           ;standbyMode.c: 430: _delay((unsigned long)((500)*(40000000/4000.0)));
  4690  00E692  0E1A               	movlw	26
  4691  00E694  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4692  00E696  0E5E               	movlw	94
  4693  00E698  6E21               	movwf	??_displayLogs& (0+255),c
  4694  00E69A  0E6E               	movlw	110
  4695  00E69C                     u6407:
  4696  00E69C  2EE8               	decfsz	wreg,f,c
  4697  00E69E  D7FE               	bra	u6407
  4698  00E6A0  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4699  00E6A2  D7FC               	bra	u6407
  4700  00E6A4  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4701  00E6A6  D7FA               	bra	u6407
  4702  00E6A8  D000               	nop2	
  4703  00E6AA                     
  4704                           ;standbyMode.c: 433: continue;
  4705  00E6AA  A281               	btfss	3969,1,c	;volatile
  4706  00E6AC  D7FE               	goto	l263
  4707                           
  4708                           ;standbyMode.c: 434: }
  4709                           ;standbyMode.c: 436: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4710  00E6AE  0E01               	movlw	1
  4711  00E6B0  ECC4  F06B         	call	_lcdInst
  4712  00E6B4  0EC3               	movlw	195
  4713  00E6B6  6E21               	movwf	??_displayLogs& (0+255),c
  4714  00E6B8  0ECD               	movlw	205
  4715  00E6BA                     u6417:
  4716  00E6BA  2EE8               	decfsz	wreg,f,c
  4717  00E6BC  D7FE               	bra	u6417
  4718  00E6BE  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4719  00E6C0  D7FC               	bra	u6417
  4720  00E6C2  F000               	nop	
  4721                           
  4722                           ;standbyMode.c: 437: printf("Drawer Summary:");
  4723  00E6C4  0E83               	movlw	low STR_24
  4724  00E6C6  6E0D               	movwf	printf@f,c
  4725  00E6C8  0EFE               	movlw	high STR_24
  4726  00E6CA  6E0E               	movwf	printf@f+1,c
  4727  00E6CC  ECD9  F06D         	call	_printf	;wreg free
  4728                           
  4729                           ;standbyMode.c: 438: _delay((unsigned long)((500)*(40000000/4000.0)));
  4730  00E6D0  0E1A               	movlw	26
  4731  00E6D2  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4732  00E6D4  0E5E               	movlw	94
  4733  00E6D6  6E21               	movwf	??_displayLogs& (0+255),c
  4734  00E6D8  0E6E               	movlw	110
  4735  00E6DA                     u6427:
  4736  00E6DA  2EE8               	decfsz	wreg,f,c
  4737  00E6DC  D7FE               	bra	u6427
  4738  00E6DE  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4739  00E6E0  D7FC               	bra	u6427
  4740  00E6E2  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4741  00E6E4  D7FA               	bra	u6427
  4742  00E6E6  D000               	nop2	
  4743  00E6E8                     
  4744                           ;standbyMode.c: 441: continue;
  4745  00E6E8  A281               	btfss	3969,1,c	;volatile
  4746  00E6EA  D7FE               	goto	l266
  4747                           
  4748                           ;standbyMode.c: 442: }
  4749                           ;standbyMode.c: 444: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4750  00E6EC  0E01               	movlw	1
  4751  00E6EE  ECC4  F06B         	call	_lcdInst
  4752  00E6F2  0EC3               	movlw	195
  4753  00E6F4  6E21               	movwf	??_displayLogs& (0+255),c
  4754  00E6F6  0ECD               	movlw	205
  4755  00E6F8                     u6437:
  4756  00E6F8  2EE8               	decfsz	wreg,f,c
  4757  00E6FA  D7FE               	bra	u6437
  4758  00E6FC  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4759  00E6FE  D7FC               	bra	u6437
  4760  00E700  F000               	nop	
  4761                           
  4762                           ;standbyMode.c: 445: printf("Drawer 1: RF12");
  4763  00E702  0ED2               	movlw	low STR_25
  4764  00E704  6E0D               	movwf	printf@f,c
  4765  00E706  0EFE               	movlw	high STR_25
  4766  00E708  6E0E               	movwf	printf@f+1,c
  4767  00E70A  ECD9  F06D         	call	_printf	;wreg free
  4768                           
  4769                           ;standbyMode.c: 446: lcdInst(0xC0);;
  4770  00E70E  0EC0               	movlw	192
  4771  00E710  ECC4  F06B         	call	_lcdInst
  4772                           
  4773                           ;standbyMode.c: 447: printf("Drawer 2: L1");
  4774  00E714  0E62               	movlw	low STR_26
  4775  00E716  6E0D               	movwf	printf@f,c
  4776  00E718  0EFF               	movlw	high STR_26
  4777  00E71A  6E0E               	movwf	printf@f+1,c
  4778  00E71C  ECD9  F06D         	call	_printf	;wreg free
  4779                           
  4780                           ;standbyMode.c: 448: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4781  00E720  0E66               	movlw	102
  4782  00E722  6E22               	movwf	(??_displayLogs+1)& (0+255),c
  4783  00E724  0E76               	movlw	118
  4784  00E726  6E21               	movwf	??_displayLogs& (0+255),c
  4785  00E728  0EC1               	movlw	193
  4786  00E72A                     u6447:
  4787  00E72A  2EE8               	decfsz	wreg,f,c
  4788  00E72C  D7FE               	bra	u6447
  4789  00E72E  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4790  00E730  D7FC               	bra	u6447
  4791  00E732  2E22               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4792  00E734  D7FA               	bra	u6447
  4793  00E736  F000               	nop	
  4794                           
  4795                           ;standbyMode.c: 450: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4796  00E738  0E01               	movlw	1
  4797  00E73A  ECC4  F06B         	call	_lcdInst
  4798  00E73E  0EC3               	movlw	195
  4799  00E740  6E21               	movwf	??_displayLogs& (0+255),c
  4800  00E742  0ECD               	movlw	205
  4801  00E744                     u6457:
  4802  00E744  2EE8               	decfsz	wreg,f,c
  4803  00E746  D7FE               	bra	u6457
  4804  00E748  2E21               	decfsz	??_displayLogs& (0+255),f,c
  4805  00E74A  D7FC               	bra	u6457
  4806  00E74C  F000               	nop	
  4807                           
  4808                           ;standbyMode.c: 451: printf("Another log?");
  4809  00E74E  0E7C               	movlw	low STR_27
  4810  00E750  6E0D               	movwf	printf@f,c
  4811  00E752  0EFF               	movlw	high STR_27
  4812  00E754  6E0E               	movwf	printf@f+1,c
  4813  00E756  ECD9  F06D         	call	_printf	;wreg free
  4814                           
  4815                           ;standbyMode.c: 452: lcdInst(0xC0);;
  4816  00E75A  0EC0               	movlw	192
  4817  00E75C  ECC4  F06B         	call	_lcdInst
  4818                           
  4819                           ;standbyMode.c: 453: printf("# = No, D = Yes");
  4820  00E760  0EB3               	movlw	low STR_28
  4821  00E762  6E0D               	movwf	printf@f,c
  4822  00E764  0EFE               	movlw	high STR_28
  4823  00E766  6E0E               	movwf	printf@f+1,c
  4824  00E768  ECD9  F06D         	call	_printf	;wreg free
  4825  00E76C  A281               	btfss	3969,1,c	;volatile
  4826  00E76E  D7FE               	goto	l269
  4827                           
  4828                           ;standbyMode.c: 456: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  4829  00E770  3881               	swapf	3969,w,c	;volatile
  4830  00E772  0B0F               	andlw	15
  4831  00E774  0B0F               	andlw	15
  4832  00E776  6E29               	movwf	displayLogs@keypress3,c
  4833  00E778  B281               	btfsc	3969,1,c	;volatile
  4834  00E77A  D7FE               	goto	l272
  4835                           
  4836                           ;standbyMode.c: 458: return keypress3;
  4837  00E77C  C029  F01F         	movff	displayLogs@keypress3,?_displayLogs
  4838  00E780  6A20               	clrf	?_displayLogs+1,c
  4839  00E782  0012               	return		;funcret
  4840  00E784                     __end_of_displayLogs:
  4841                           	opt stack 0
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _readEEPROM *****************
  4858 ;; Defined at:
  4859 ;;		line 29 in file "EEPROMstorage.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  address         1    wreg     unsigned char 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  address         1    0[COMRAM] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      unsigned char 
  4866 ;; Registers used:
  4867 ;;		wreg, status,2
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;Total ram usage:        1 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; This function calls:
  4880 ;;		Nothing
  4881 ;; This function is called by:
  4882 ;;		_viewLogs
  4883 ;;		_displayLogs
  4884 ;;		_standbyMode
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text8
  4889  00D7B0                     __ptext8:
  4890                           	opt stack 0
  4891  00D7B0                     _readEEPROM:
  4892                           	opt stack 28
  4893                           
  4894                           ;incstack = 0
  4895                           ;readEEPROM@address stored from wreg
  4896  00D7B0  6E01               	movwf	readEEPROM@address,c
  4897  00D7B2                     
  4898                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  4899  00D7B2  B2A6               	btfsc	4006,1,c	;volsfr
  4900  00D7B4  D7FE               	goto	l1280
  4901                           
  4902                           ;EEPROMstorage.c: 32: EEADR = address;
  4903  00D7B6  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  4904                           
  4905                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  4906  00D7BA  9EA6               	bcf	4006,7,c	;volsfr
  4907                           
  4908                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  4909  00D7BC  9CA6               	bcf	4006,6,c	;volsfr
  4910                           
  4911                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  4912  00D7BE  80A6               	bsf	4006,0,c	;volsfr
  4913                           
  4914                           ;EEPROMstorage.c: 36: return( EEDATA );
  4915  00D7C0  50A8               	movf	4008,w,c	;volatile
  4916  00D7C2  0012               	return	
  4917  00D7C4                     __end_of_readEEPROM:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           intcon	equ	0xFF2
  4926                           postinc0	equ	0xFEE
  4927                           wreg	equ	0xFE8
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function ___wmul *****************
  4935 ;; Defined at:
  4936 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  multiplier      2    0[COMRAM] unsigned int 
  4939 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  product         2    4[COMRAM] unsigned int 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  2    0[COMRAM] unsigned int 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0, prodl, prodh
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        6 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_displayLogs
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text9
  4965  00D7DA                     __ptext9:
  4966                           	opt stack 0
  4967  00D7DA                     ___wmul:
  4968                           	opt stack 27
  4969                           
  4970                           ;incstack = 0
  4971  00D7DA  5001               	movf	___wmul@multiplier,w,c
  4972  00D7DC  0203               	mulwf	___wmul@multiplicand,c
  4973  00D7DE  CFF3 F005          	movff	prodl,___wmul@product
  4974  00D7E2  CFF4 F006          	movff	prodh,___wmul@product+1
  4975  00D7E6  5001               	movf	___wmul@multiplier,w,c
  4976  00D7E8  0204               	mulwf	___wmul@multiplicand+1,c
  4977  00D7EA  50F3               	movf	prodl,w,c
  4978  00D7EC  2606               	addwf	___wmul@product+1,f,c
  4979  00D7EE  5002               	movf	___wmul@multiplier+1,w,c
  4980  00D7F0  0203               	mulwf	___wmul@multiplicand,c
  4981  00D7F2  50F3               	movf	prodl,w,c
  4982  00D7F4  2606               	addwf	___wmul@product+1,f,c
  4983  00D7F6  C005  F001         	movff	___wmul@product,?___wmul
  4984  00D7FA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4985  00D7FE  0012               	return	
  4986  00D800                     __end_of___wmul:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           postinc0	equ	0xFEE
  4996                           wreg	equ	0xFE8
  4997                           postinc2	equ	0xFDE
  4998                           postdec2	equ	0xFDD
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function _food_press *****************
  5004 ;; Defined at:
  5005 ;;		line 568 in file "standbyMode.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  dietSum         2   30[COMRAM] unsigned int 
  5008 ;;  drawer          2   32[COMRAM] unsigned int 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  keypress        1   52[COMRAM] unsigned char 
  5011 ;;  foodTable       8   44[COMRAM] unsigned int [4]
  5012 ;;  count           2   42[COMRAM] unsigned int 
  5013 ;;  isValid         2   40[COMRAM] unsigned int 
  5014 ;;  backCheck       2   38[COMRAM] unsigned int 
  5015 ;;  tally           2   36[COMRAM] unsigned int 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  2   30[COMRAM] unsigned int 
  5018 ;; Registers used:
  5019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5025 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;Total ram usage:       23 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    3
  5032 ;; This function calls:
  5033 ;;		_check_food
  5034 ;;		_get_digits
  5035 ;;		_lcdInst
  5036 ;;		_printf
  5037 ;;		_putch
  5038 ;; This function is called by:
  5039 ;;		_standbyMode
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text10
  5044  00DCD0                     __ptext10:
  5045                           	opt stack 0
  5046  00DCD0                     _food_press:
  5047                           	opt stack 26
  5048                           
  5049                           ;incstack = 0
  5050                           ;standbyMode.c: 570: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5051  00DCD0  0E01               	movlw	1
  5052  00DCD2  ECC4  F06B         	call	_lcdInst
  5053  00DCD6  0EC3               	movlw	195
  5054  00DCD8  6E23               	movwf	??_food_press& (0+255),c
  5055  00DCDA  0ECD               	movlw	205
  5056  00DCDC                     u6467:
  5057  00DCDC  2EE8               	decfsz	wreg,f,c
  5058  00DCDE  D7FE               	bra	u6467
  5059  00DCE0  2E23               	decfsz	??_food_press& (0+255),f,c
  5060  00DCE2  D7FC               	bra	u6467
  5061  00DCE4  F000               	nop	
  5062                           
  5063                           ;standbyMode.c: 571: printf("Drawer %i food:", drawer);
  5064  00DCE6  0E43               	movlw	low STR_29
  5065  00DCE8  6E0D               	movwf	printf@f,c
  5066  00DCEA  0EFE               	movlw	high STR_29
  5067  00DCEC  6E0E               	movwf	printf@f+1,c
  5068  00DCEE  C021  F00F         	movff	food_press@drawer,?_printf+2
  5069  00DCF2  C022  F010         	movff	food_press@drawer+1,?_printf+3
  5070  00DCF6  ECD9  F06D         	call	_printf	;wreg free
  5071                           
  5072                           ;standbyMode.c: 572: lcdInst(0xC0);;
  5073  00DCFA  0EC0               	movlw	192
  5074  00DCFC  ECC4  F06B         	call	_lcdInst
  5075                           
  5076                           ;standbyMode.c: 574: unsigned int tally = 0;
  5077  00DD00  0E00               	movlw	0
  5078  00DD02  6E26               	movwf	food_press@tally+1,c
  5079  00DD04  0E00               	movlw	0
  5080  00DD06  6E25               	movwf	food_press@tally,c
  5081                           
  5082                           ;standbyMode.c: 575: unsigned int count = 0;
  5083  00DD08  0E00               	movlw	0
  5084  00DD0A  6E2C               	movwf	food_press@count+1,c
  5085  00DD0C  0E00               	movlw	0
  5086  00DD0E  6E2B               	movwf	food_press@count,c
  5087                           
  5088                           ;standbyMode.c: 576: unsigned int foodTable[4] = {0, 0, 0, 0};
  5089  00DD10  EE20  F075         	lfsr	2,food_press@F3080
  5090  00DD14  EE10  F02D         	lfsr	1,food_press@foodTable
  5091  00DD18  0E07               	movlw	7
  5092  00DD1A                     u4241:
  5093  00DD1A  CFDB FFE3          	movff	plusw2,plusw1
  5094  00DD1E  06E8               	decf	wreg,f,c
  5095  00DD20  E2FC               	bc	u4241
  5096                           
  5097                           ;standbyMode.c: 577: unsigned int isValid = 0;
  5098  00DD22  0E00               	movlw	0
  5099  00DD24  6E2A               	movwf	food_press@isValid+1,c
  5100  00DD26  0E00               	movlw	0
  5101  00DD28  6E29               	movwf	food_press@isValid,c
  5102                           
  5103                           ;standbyMode.c: 578: unsigned int backCheck = 0;
  5104  00DD2A  0E00               	movlw	0
  5105  00DD2C  6E28               	movwf	food_press@backCheck+1,c
  5106  00DD2E  0E00               	movlw	0
  5107  00DD30  6E27               	movwf	food_press@backCheck,c
  5108                           
  5109                           ;standbyMode.c: 579: tally = get_digits(dietSum);
  5110  00DD32  C01F  F001         	movff	food_press@dietSum,get_digits@sum
  5111  00DD36  C020  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  5112  00DD3A  EC09  F06D         	call	_get_digits	;wreg free
  5113  00DD3E  C001  F025         	movff	?_get_digits,food_press@tally
  5114  00DD42  C002  F026         	movff	?_get_digits+1,food_press@tally+1
  5115  00DD46                     
  5116                           ;standbyMode.c: 582: while(PORTBbits.RB1 == 0){ continue; }
  5117  00DD46  A281               	btfss	3969,1,c	;volatile
  5118  00DD48  D7FE               	goto	l304
  5119                           
  5120                           ;standbyMode.c: 583: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5121  00DD4A  3881               	swapf	3969,w,c	;volatile
  5122  00DD4C  0B0F               	andlw	15
  5123  00DD4E  0B0F               	andlw	15
  5124  00DD50  6E35               	movwf	food_press@keypress,c
  5125  00DD52  B281               	btfsc	3969,1,c	;volatile
  5126  00DD54  D7FE               	goto	l309
  5127                           
  5128                           ;standbyMode.c: 586: if(keypress == 15){
  5129  00DD56  0E0F               	movlw	15
  5130  00DD58  1835               	xorwf	food_press@keypress,w,c
  5131  00DD5A  B4D8               	btfsc	status,2,c
  5132  00DD5C  D06D               	goto	l312
  5133                           
  5134                           ;standbyMode.c: 589: else if (keypress == 14){
  5135                           
  5136                           ;standbyMode.c: 588: }
  5137                           
  5138                           ;standbyMode.c: 587: break;
  5139  00DD5E  0E0E               	movlw	14
  5140  00DD60  1835               	xorwf	food_press@keypress,w,c
  5141  00DD62  A4D8               	btfss	status,2,c
  5142  00DD64  D005               	goto	l314
  5143                           
  5144                           ;standbyMode.c: 590: backCheck = 1;
  5145  00DD66  0E00               	movlw	0
  5146  00DD68  6E28               	movwf	food_press@backCheck+1,c
  5147  00DD6A  0E01               	movlw	1
  5148  00DD6C  6E27               	movwf	food_press@backCheck,c
  5149                           
  5150                           ;standbyMode.c: 591: break;
  5151  00DD6E  D064               	goto	l312
  5152  00DD70                     l314:
  5153                           
  5154                           ;standbyMode.c: 593: else if (keypress == 0 || keypress == 1 || keypress == 2){
  5155  00DD70  5035               	movf	food_press@keypress,w,c
  5156  00DD72  B4D8               	btfsc	status,2,c
  5157  00DD74  D007               	goto	u4310
  5158  00DD76  0435               	decf	food_press@keypress,w,c
  5159  00DD78  B4D8               	btfsc	status,2,c
  5160  00DD7A  D004               	goto	u4310
  5161  00DD7C  0E02               	movlw	2
  5162  00DD7E  1835               	xorwf	food_press@keypress,w,c
  5163  00DD80  A4D8               	btfss	status,2,c
  5164  00DD82  D029               	goto	l316
  5165  00DD84                     u4310:
  5166                           
  5167                           ;standbyMode.c: 594: if (count < tally){
  5168  00DD84  5025               	movf	food_press@tally,w,c
  5169  00DD86  5C2B               	subwf	food_press@count,w,c
  5170  00DD88  5026               	movf	food_press@tally+1,w,c
  5171  00DD8A  582C               	subwfb	food_press@count+1,w,c
  5172  00DD8C  B0D8               	btfsc	status,0,c
  5173  00DD8E  D7DB               	goto	l304
  5174                           
  5175                           ;standbyMode.c: 595: putch(input[keypress]);
  5176  00DD90  5035               	movf	food_press@keypress,w,c
  5177  00DD92  0D01               	mullw	1
  5178  00DD94  0E8A               	movlw	low _input
  5179  00DD96  24F3               	addwf	prodl,w,c
  5180  00DD98  6EF6               	movwf	tblptrl,c
  5181  00DD9A  0EFD               	movlw	high _input
  5182  00DD9C  20F4               	addwfc	prodh,w,c
  5183  00DD9E  6EF7               	movwf	tblptrh,c
  5184  00DDA0                     	if	0	;There are less than 3 active tblptr bytes
  5185  00DDA0                     	endif
  5186  00DDA0  0008               	tblrd		*
  5187  00DDA2  50F5               	movf	tablat,w,c
  5188  00DDA4  ECCE  F06B         	call	_putch
  5189                           
  5190                           ;standbyMode.c: 596: foodTable[count] = keypress + 1;
  5191  00DDA8  5035               	movf	food_press@keypress,w,c
  5192  00DDAA  6E23               	movwf	??_food_press& (0+255),c
  5193  00DDAC  6A24               	clrf	(??_food_press+1)& (0+255),c
  5194  00DDAE  0E01               	movlw	1
  5195  00DDB0  2623               	addwf	??_food_press,f,c
  5196  00DDB2  0E00               	movlw	0
  5197  00DDB4  2224               	addwfc	??_food_press+1,f,c
  5198  00DDB6  90D8               	bcf	status,0,c
  5199  00DDB8  342B               	rlcf	food_press@count,w,c
  5200  00DDBA  6ED9               	movwf	fsr2l,c
  5201  00DDBC  342C               	rlcf	food_press@count+1,w,c
  5202  00DDBE  6EDA               	movwf	fsr2h,c
  5203  00DDC0  0E2D               	movlw	low food_press@foodTable
  5204  00DDC2  26D9               	addwf	fsr2l,f,c
  5205  00DDC4  0E00               	movlw	high food_press@foodTable
  5206  00DDC6  22DA               	addwfc	fsr2h,f,c
  5207  00DDC8  C023  FFDE         	movff	??_food_press,postinc2
  5208  00DDCC  C024  FFDD         	movff	??_food_press+1,postdec2
  5209                           
  5210                           ;standbyMode.c: 597: count += 1;
  5211  00DDD0  4A2B               	infsnz	food_press@count,f,c
  5212  00DDD2  2A2C               	incf	food_press@count+1,f,c
  5213                           
  5214                           ;standbyMode.c: 598: }
  5215                           ;standbyMode.c: 599: }
  5216  00DDD4  D7B8               	goto	l304
  5217  00DDD6                     l316:
  5218                           
  5219                           ;standbyMode.c: 600: else if (keypress == 12){
  5220  00DDD6  0E0C               	movlw	12
  5221  00DDD8  1835               	xorwf	food_press@keypress,w,c
  5222  00DDDA  A4D8               	btfss	status,2,c
  5223  00DDDC  D7B4               	goto	l304
  5224                           
  5225                           ;standbyMode.c: 601: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5226  00DDDE  0E01               	movlw	1
  5227  00DDE0  ECC4  F06B         	call	_lcdInst
  5228  00DDE4  0EC3               	movlw	195
  5229  00DDE6  6E23               	movwf	??_food_press& (0+255),c
  5230  00DDE8  0ECD               	movlw	205
  5231  00DDEA                     u6477:
  5232  00DDEA  2EE8               	decfsz	wreg,f,c
  5233  00DDEC  D7FE               	bra	u6477
  5234  00DDEE  2E23               	decfsz	??_food_press& (0+255),f,c
  5235  00DDF0  D7FC               	bra	u6477
  5236  00DDF2  F000               	nop	
  5237                           
  5238                           ;standbyMode.c: 602: printf("Drawer %i food:", drawer);
  5239  00DDF4  0E43               	movlw	low STR_29
  5240  00DDF6  6E0D               	movwf	printf@f,c
  5241  00DDF8  0EFE               	movlw	high STR_29
  5242  00DDFA  6E0E               	movwf	printf@f+1,c
  5243  00DDFC  C021  F00F         	movff	food_press@drawer,?_printf+2
  5244  00DE00  C022  F010         	movff	food_press@drawer+1,?_printf+3
  5245  00DE04  ECD9  F06D         	call	_printf	;wreg free
  5246                           
  5247                           ;standbyMode.c: 603: lcdInst(0xC0);;
  5248  00DE08  0EC0               	movlw	192
  5249  00DE0A  ECC4  F06B         	call	_lcdInst
  5250                           
  5251                           ;standbyMode.c: 604: count = 0;
  5252  00DE0E  0E00               	movlw	0
  5253  00DE10  6E2C               	movwf	food_press@count+1,c
  5254  00DE12  0E00               	movlw	0
  5255  00DE14  6E2B               	movwf	food_press@count,c
  5256                           
  5257                           ;standbyMode.c: 605: foodTable[0] = 0;
  5258  00DE16  0E00               	movlw	0
  5259  00DE18  6E2E               	movwf	food_press@foodTable+1,c
  5260  00DE1A  0E00               	movlw	0
  5261  00DE1C  6E2D               	movwf	food_press@foodTable,c
  5262                           
  5263                           ;standbyMode.c: 606: foodTable[1] = 0;
  5264  00DE1E  0E00               	movlw	0
  5265  00DE20  6E30               	movwf	food_press@foodTable+3,c
  5266  00DE22  0E00               	movlw	0
  5267  00DE24  6E2F               	movwf	food_press@foodTable+2,c
  5268                           
  5269                           ;standbyMode.c: 607: foodTable[2] = 0;
  5270  00DE26  0E00               	movlw	0
  5271  00DE28  6E32               	movwf	food_press@foodTable+5,c
  5272  00DE2A  0E00               	movlw	0
  5273  00DE2C  6E31               	movwf	food_press@foodTable+4,c
  5274                           
  5275                           ;standbyMode.c: 608: foodTable[3] = 0;
  5276  00DE2E  0E00               	movlw	0
  5277  00DE30  6E34               	movwf	food_press@foodTable+7,c
  5278  00DE32  0E00               	movlw	0
  5279  00DE34  6E33               	movwf	food_press@foodTable+6,c
  5280  00DE36  D787               	goto	l304
  5281  00DE38                     l312:
  5282                           
  5283                           ;standbyMode.c: 609: }
  5284                           ;standbyMode.c: 610: }
  5285                           ;standbyMode.c: 612: if (backCheck == 1){
  5286  00DE38  0427               	decf	food_press@backCheck,w,c
  5287  00DE3A  1028               	iorwf	food_press@backCheck+1,w,c
  5288  00DE3C  A4D8               	btfss	status,2,c
  5289  00DE3E  D005               	goto	l323
  5290                           
  5291                           ;standbyMode.c: 613: return 100;
  5292  00DE40  0E00               	movlw	0
  5293  00DE42  6E20               	movwf	?_food_press+1,c
  5294  00DE44  0E64               	movlw	100
  5295  00DE46  6E1F               	movwf	?_food_press,c
  5296                           
  5297                           ;standbyMode.c: 614: }
  5298  00DE48  0012               	return	
  5299  00DE4A                     l323:
  5300                           
  5301                           ;standbyMode.c: 615: else {
  5302                           ;standbyMode.c: 616: isValid = check_food(dietSum, foodTable);
  5303  00DE4A  C01F  F001         	movff	food_press@dietSum,check_food@sum
  5304  00DE4E  C020  F002         	movff	food_press@dietSum+1,check_food@sum+1
  5305  00DE52  0E2D               	movlw	low food_press@foodTable
  5306  00DE54  6E03               	movwf	check_food@foodInput,c
  5307  00DE56  0E00               	movlw	high food_press@foodTable
  5308  00DE58  6E04               	movwf	check_food@foodInput+1,c
  5309  00DE5A  EC55  F076         	call	_check_food	;wreg free
  5310  00DE5E  C001  F029         	movff	?_check_food,food_press@isValid
  5311  00DE62  C002  F02A         	movff	?_check_food+1,food_press@isValid+1
  5312                           
  5313                           ;standbyMode.c: 618: if (isValid == 0){
  5314  00DE66  5029               	movf	food_press@isValid,w,c
  5315  00DE68  102A               	iorwf	food_press@isValid+1,w,c
  5316  00DE6A  A4D8               	btfss	status,2,c
  5317  00DE6C  D026               	goto	l326
  5318                           
  5319                           ;standbyMode.c: 619: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5320  00DE6E  0E01               	movlw	1
  5321  00DE70  ECC4  F06B         	call	_lcdInst
  5322  00DE74  0EC3               	movlw	195
  5323  00DE76  6E23               	movwf	??_food_press& (0+255),c
  5324  00DE78  0ECD               	movlw	205
  5325  00DE7A                     u6487:
  5326  00DE7A  2EE8               	decfsz	wreg,f,c
  5327  00DE7C  D7FE               	bra	u6487
  5328  00DE7E  2E23               	decfsz	??_food_press& (0+255),f,c
  5329  00DE80  D7FC               	bra	u6487
  5330  00DE82  F000               	nop	
  5331                           
  5332                           ;standbyMode.c: 620: printf("Invalid food!");
  5333  00DE84  0E1D               	movlw	low STR_31
  5334  00DE86  6E0D               	movwf	printf@f,c
  5335  00DE88  0EFF               	movlw	high STR_31
  5336  00DE8A  6E0E               	movwf	printf@f+1,c
  5337  00DE8C  ECD9  F06D         	call	_printf	;wreg free
  5338                           
  5339                           ;standbyMode.c: 621: lcdInst(0xC0);;
  5340  00DE90  0EC0               	movlw	192
  5341  00DE92  ECC4  F06B         	call	_lcdInst
  5342                           
  5343                           ;standbyMode.c: 622: printf("Try again.");
  5344  00DE96  0EAA               	movlw	low STR_32
  5345  00DE98  6E0D               	movwf	printf@f,c
  5346  00DE9A  0EFF               	movlw	high STR_32
  5347  00DE9C  6E0E               	movwf	printf@f+1,c
  5348  00DE9E  ECD9  F06D         	call	_printf	;wreg free
  5349                           
  5350                           ;standbyMode.c: 623: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5351  00DEA2  0E33               	movlw	51
  5352  00DEA4  6E24               	movwf	(??_food_press+1)& (0+255),c
  5353  00DEA6  0EBB               	movlw	187
  5354  00DEA8  6E23               	movwf	??_food_press& (0+255),c
  5355  00DEAA  0EE0               	movlw	224
  5356  00DEAC                     u6497:
  5357  00DEAC  2EE8               	decfsz	wreg,f,c
  5358  00DEAE  D7FE               	bra	u6497
  5359  00DEB0  2E23               	decfsz	??_food_press& (0+255),f,c
  5360  00DEB2  D7FC               	bra	u6497
  5361  00DEB4  2E24               	decfsz	(??_food_press+1)& (0+255),f,c
  5362  00DEB6  D7FA               	bra	u6497
  5363                           
  5364                           ;standbyMode.c: 624: goto START;
  5365  00DEB8  D70B               	goto	_food_press
  5366  00DEBA                     l326:
  5367                           
  5368                           ;standbyMode.c: 626: else {
  5369                           ;standbyMode.c: 627: return isValid;
  5370  00DEBA  C029  F01F         	movff	food_press@isValid,?_food_press
  5371  00DEBE  C02A  F020         	movff	food_press@isValid+1,?_food_press+1
  5372  00DEC2  0012               	return	
  5373  00DEC4                     __end_of_food_press:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           plusw1	equ	0xFE3
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           plusw2	equ	0xFDB
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _get_digits *****************
  5393 ;; Defined at:
  5394 ;;		line 463 in file "standbyMode.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  sum             2    0[COMRAM] unsigned int 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  count           2    4[COMRAM] unsigned int 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  2    0[COMRAM] unsigned int 
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5408 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;Total ram usage:        6 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_food_press
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text11
  5422  00DA12                     __ptext11:
  5423                           	opt stack 0
  5424  00DA12                     _get_digits:
  5425                           	opt stack 28
  5426                           
  5427                           ;standbyMode.c: 465: unsigned int count = 0;
  5428                           
  5429                           ;incstack = 0
  5430  00DA12  0E00               	movlw	0
  5431  00DA14  6E06               	movwf	get_digits@count+1,c
  5432  00DA16  0E00               	movlw	0
  5433  00DA18  6E05               	movwf	get_digits@count,c
  5434                           
  5435                           ;standbyMode.c: 467: switch(sum){
  5436  00DA1A  D015               	goto	l277
  5437  00DA1C                     
  5438                           ;standbyMode.c: 480: count = 1;
  5439                           
  5440                           ;standbyMode.c: 479: case 12:
  5441                           
  5442                           ;standbyMode.c: 476: break;
  5443                           
  5444                           ;standbyMode.c: 475: count = 1;
  5445                           
  5446                           ;standbyMode.c: 474: case 7:
  5447                           
  5448                           ;standbyMode.c: 471: break;
  5449                           
  5450                           ;standbyMode.c: 470: count = 1;
  5451  00DA1C  0E00               	movlw	0
  5452  00DA1E  6E06               	movwf	get_digits@count+1,c
  5453  00DA20  0E01               	movlw	1
  5454  00DA22                     L19:
  5455  00DA22  6E05               	movwf	get_digits@count,c
  5456                           
  5457                           ;standbyMode.c: 486: break;
  5458  00DA24  D050               	goto	l279
  5459  00DA26                     
  5460                           ;standbyMode.c: 495: count = 2;
  5461                           
  5462                           ;standbyMode.c: 494: case 19:
  5463                           
  5464                           ;standbyMode.c: 491: break;
  5465                           
  5466                           ;standbyMode.c: 490: count = 2;
  5467  00DA26  0E00               	movlw	0
  5468  00DA28  6E06               	movwf	get_digits@count+1,c
  5469  00DA2A  0E02               	movlw	2
  5470  00DA2C  D7FA               	goto	L19
  5471  00DA2E                     
  5472                           ;standbyMode.c: 530: count = 3;
  5473                           
  5474                           ;standbyMode.c: 529: case 31:
  5475                           
  5476                           ;standbyMode.c: 526: break;
  5477                           
  5478                           ;standbyMode.c: 525: count = 3;
  5479                           
  5480                           ;standbyMode.c: 524: case 26:
  5481                           
  5482                           ;standbyMode.c: 521: break;
  5483                           
  5484                           ;standbyMode.c: 520: count = 3;
  5485                           
  5486                           ;standbyMode.c: 519: case 22:
  5487                           
  5488                           ;standbyMode.c: 516: break;
  5489                           
  5490                           ;standbyMode.c: 515: count = 3;
  5491                           
  5492                           ;standbyMode.c: 514: case 27:
  5493                           
  5494                           ;standbyMode.c: 511: break;
  5495                           
  5496                           ;standbyMode.c: 510: count = 3;
  5497                           
  5498                           ;standbyMode.c: 509: case 17:
  5499                           
  5500                           ;standbyMode.c: 506: break;
  5501                           
  5502                           ;standbyMode.c: 505: count = 3;
  5503                           
  5504                           ;standbyMode.c: 504: case 18:
  5505                           
  5506                           ;standbyMode.c: 501: break;
  5507                           
  5508                           ;standbyMode.c: 500: count = 3;
  5509  00DA2E  0E00               	movlw	0
  5510  00DA30  6E06               	movwf	get_digits@count+1,c
  5511  00DA32  0E03               	movlw	3
  5512  00DA34  D7F6               	goto	L19
  5513  00DA36                     
  5514                           ;standbyMode.c: 555: count = 4;
  5515                           
  5516                           ;standbyMode.c: 554: case 43:
  5517                           
  5518                           ;standbyMode.c: 551: break;
  5519                           
  5520                           ;standbyMode.c: 550: count = 4;
  5521                           
  5522                           ;standbyMode.c: 549: case 39:
  5523                           
  5524                           ;standbyMode.c: 546: break;
  5525                           
  5526                           ;standbyMode.c: 545: count = 4;
  5527                           
  5528                           ;standbyMode.c: 544: case 34:
  5529                           
  5530                           ;standbyMode.c: 541: break;
  5531                           
  5532                           ;standbyMode.c: 540: count = 4;
  5533                           
  5534                           ;standbyMode.c: 539: case 29:
  5535                           
  5536                           ;standbyMode.c: 536: break;
  5537                           
  5538                           ;standbyMode.c: 535: count = 4;
  5539  00DA36  0E00               	movlw	0
  5540  00DA38  6E06               	movwf	get_digits@count+1,c
  5541  00DA3A  0E04               	movlw	4
  5542  00DA3C  D7F2               	goto	L19
  5543  00DA3E                     
  5544                           ;standbyMode.c: 560: count = 0;
  5545  00DA3E  0E00               	movlw	0
  5546  00DA40  6E06               	movwf	get_digits@count+1,c
  5547  00DA42  0E00               	movlw	0
  5548  00DA44  D7EE               	goto	L19
  5549  00DA46                     l277:
  5550  00DA46  C001  F003         	movff	get_digits@sum,??_get_digits
  5551  00DA4A  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  5552                           
  5553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5554                           ; Switch size 1, requested type "space"
  5555                           ; Number of cases is 1, Range of values is 0 to 0
  5556                           ; switch strategies available:
  5557                           ; Name         Instructions Cycles
  5558                           ; simple_byte            4     3 (average)
  5559                           ;	Chosen strategy is simple_byte
  5560  00DA4E  5004               	movf	??_get_digits+1,w,c
  5561  00DA50  0A00               	xorlw	0	; case 0
  5562  00DA52  A4D8               	btfss	status,2,c
  5563  00DA54  D7F4               	goto	l297
  5564                           
  5565                           ; Switch size 1, requested type "space"
  5566                           ; Number of cases is 18, Range of values is 3 to 43
  5567                           ; switch strategies available:
  5568                           ; Name         Instructions Cycles
  5569                           ; simple_byte           55    28 (average)
  5570                           ;	Chosen strategy is simple_byte
  5571  00DA56  5003               	movf	??_get_digits,w,c
  5572  00DA58  0A03               	xorlw	3	; case 3
  5573  00DA5A  B4D8               	btfsc	status,2,c
  5574  00DA5C  D7DF               	goto	l278
  5575  00DA5E  0A04               	xorlw	4	; case 7
  5576  00DA60  B4D8               	btfsc	status,2,c
  5577  00DA62  D7DC               	goto	l278
  5578  00DA64  0A0D               	xorlw	13	; case 10
  5579  00DA66  B4D8               	btfsc	status,2,c
  5580  00DA68  D7DE               	goto	l283
  5581  00DA6A  0A06               	xorlw	6	; case 12
  5582  00DA6C  B4D8               	btfsc	status,2,c
  5583  00DA6E  D7D6               	goto	l278
  5584  00DA70  0A01               	xorlw	1	; case 13
  5585  00DA72  B4D8               	btfsc	status,2,c
  5586  00DA74  D7DC               	goto	l285
  5587  00DA76  0A02               	xorlw	2	; case 15
  5588  00DA78  B4D8               	btfsc	status,2,c
  5589  00DA7A  D7D5               	goto	l283
  5590  00DA7C  0A1E               	xorlw	30	; case 17
  5591  00DA7E  B4D8               	btfsc	status,2,c
  5592  00DA80  D7D6               	goto	l285
  5593  00DA82  0A03               	xorlw	3	; case 18
  5594  00DA84  B4D8               	btfsc	status,2,c
  5595  00DA86  D7D3               	goto	l285
  5596  00DA88  0A01               	xorlw	1	; case 19
  5597  00DA8A  B4D8               	btfsc	status,2,c
  5598  00DA8C  D7CC               	goto	l283
  5599  00DA8E  0A05               	xorlw	5	; case 22
  5600  00DA90  B4D8               	btfsc	status,2,c
  5601  00DA92  D7CD               	goto	l285
  5602  00DA94  0A0F               	xorlw	15	; case 25
  5603  00DA96  B4D8               	btfsc	status,2,c
  5604  00DA98  D7CE               	goto	l292
  5605  00DA9A  0A03               	xorlw	3	; case 26
  5606  00DA9C  B4D8               	btfsc	status,2,c
  5607  00DA9E  D7C7               	goto	l285
  5608  00DAA0  0A01               	xorlw	1	; case 27
  5609  00DAA2  B4D8               	btfsc	status,2,c
  5610  00DAA4  D7C4               	goto	l285
  5611  00DAA6  0A06               	xorlw	6	; case 29
  5612  00DAA8  B4D8               	btfsc	status,2,c
  5613  00DAAA  D7C5               	goto	l292
  5614  00DAAC  0A02               	xorlw	2	; case 31
  5615  00DAAE  B4D8               	btfsc	status,2,c
  5616  00DAB0  D7BE               	goto	l285
  5617  00DAB2  0A3D               	xorlw	61	; case 34
  5618  00DAB4  B4D8               	btfsc	status,2,c
  5619  00DAB6  D7BF               	goto	l292
  5620  00DAB8  0A05               	xorlw	5	; case 39
  5621  00DABA  B4D8               	btfsc	status,2,c
  5622  00DABC  D7BC               	goto	l292
  5623  00DABE  0A0C               	xorlw	12	; case 43
  5624  00DAC0  B4D8               	btfsc	status,2,c
  5625  00DAC2  D7B9               	goto	l292
  5626  00DAC4  D7BC               	goto	l297
  5627  00DAC6                     l279:
  5628                           
  5629                           ;standbyMode.c: 563: return count;
  5630  00DAC6  C005  F001         	movff	get_digits@count,?_get_digits
  5631  00DACA  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  5632  00DACE  0012               	return		;funcret
  5633  00DAD0                     __end_of_get_digits:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           plusw1	equ	0xFE3
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           plusw2	equ	0xFDB
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _check_food *****************
  5653 ;; Defined at:
  5654 ;;		line 88 in file "standbyMode.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  sum             2    0[COMRAM] unsigned int 
  5657 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  5658 ;;		 -> food_press@foodTable(8), 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  returnValue     2    6[COMRAM] unsigned int 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  2    0[COMRAM] unsigned int 
  5663 ;; Registers used:
  5664 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;Total ram usage:        8 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_food_press
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text12
  5684  00ECAA                     __ptext12:
  5685                           	opt stack 0
  5686  00ECAA                     _check_food:
  5687                           	opt stack 28
  5688                           
  5689                           ;standbyMode.c: 90: unsigned int returnValue = 0;
  5690                           
  5691                           ;incstack = 0
  5692  00ECAA  0E00               	movlw	0
  5693  00ECAC  6E08               	movwf	check_food@returnValue+1,c
  5694  00ECAE  0E00               	movlw	0
  5695  00ECB0  6E07               	movwf	check_food@returnValue,c
  5696                           
  5697                           ;standbyMode.c: 92: switch(sum){
  5698  00ECB2  D3D0               	goto	l131
  5699  00ECB4                     
  5700                           ;standbyMode.c: 95: if (foodInput[0] == 1 || foodInput[0] == 2){
  5701  00ECB4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5702  00ECB8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5703  00ECBC  04DE               	decf	postinc2,w,c
  5704  00ECBE  10DE               	iorwf	postinc2,w,c
  5705  00ECC0  B4D8               	btfsc	status,2,c
  5706  00ECC2  D009               	goto	u3080
  5707  00ECC4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5708  00ECC8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5709  00ECCC  0E02               	movlw	2
  5710  00ECCE  18DE               	xorwf	postinc2,w,c
  5711  00ECD0  10DE               	iorwf	postinc2,w,c
  5712  00ECD2  A4D8               	btfss	status,2,c
  5713  00ECD4  D3FE               	goto	l136
  5714  00ECD6                     u3080:
  5715                           
  5716                           ;standbyMode.c: 96: returnValue = 1;
  5717  00ECD6  0E00               	movlw	0
  5718  00ECD8  6E08               	movwf	check_food@returnValue+1,c
  5719  00ECDA  0E01               	movlw	1
  5720  00ECDC  D3B9               	goto	L47
  5721  00ECDE                     
  5722                           ;standbyMode.c: 102: if (foodInput[0] == 1 || foodInput[0] == 2){
  5723  00ECDE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5724  00ECE2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5725  00ECE6  04DE               	decf	postinc2,w,c
  5726  00ECE8  10DE               	iorwf	postinc2,w,c
  5727  00ECEA  B4D8               	btfsc	status,2,c
  5728  00ECEC  D009               	goto	u3100
  5729  00ECEE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5730  00ECF2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5731  00ECF6  0E02               	movlw	2
  5732  00ECF8  18DE               	xorwf	postinc2,w,c
  5733  00ECFA  10DE               	iorwf	postinc2,w,c
  5734  00ECFC  A4D8               	btfss	status,2,c
  5735  00ECFE  D3E9               	goto	l136
  5736  00ED00                     u3100:
  5737                           
  5738                           ;standbyMode.c: 103: returnValue = 2;
  5739  00ED00  0E00               	movlw	0
  5740  00ED02  6E08               	movwf	check_food@returnValue+1,c
  5741  00ED04  0E02               	movlw	2
  5742  00ED06  D3A4               	goto	L47
  5743  00ED08                     
  5744                           ;standbyMode.c: 109: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  5745  00ED08  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5746  00ED0C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5747  00ED10  04DE               	decf	postinc2,w,c
  5748  00ED12  10DE               	iorwf	postinc2,w,c
  5749  00ED14  B4D8               	btfsc	status,2,c
  5750  00ED16  D012               	goto	u3130
  5751  00ED18  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5752  00ED1C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5753  00ED20  0E02               	movlw	2
  5754  00ED22  18DE               	xorwf	postinc2,w,c
  5755  00ED24  10DE               	iorwf	postinc2,w,c
  5756  00ED26  B4D8               	btfsc	status,2,c
  5757  00ED28  D009               	goto	u3130
  5758  00ED2A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5759  00ED2E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5760  00ED32  0E03               	movlw	3
  5761  00ED34  18DE               	xorwf	postinc2,w,c
  5762  00ED36  10DE               	iorwf	postinc2,w,c
  5763  00ED38  A4D8               	btfss	status,2,c
  5764  00ED3A  D3CB               	goto	l136
  5765  00ED3C                     u3130:
  5766                           
  5767                           ;standbyMode.c: 110: returnValue = 3;
  5768  00ED3C  0E00               	movlw	0
  5769  00ED3E  6E08               	movwf	check_food@returnValue+1,c
  5770  00ED40  0E03               	movlw	3
  5771  00ED42  D386               	goto	L47
  5772  00ED44                     
  5773                           ;standbyMode.c: 116: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  5774  00ED44  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5775  00ED48  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5776  00ED4C  0E03               	movlw	3
  5777  00ED4E  18DE               	xorwf	postinc2,w,c
  5778  00ED50  10DE               	iorwf	postinc2,w,c
  5779  00ED52  B4D8               	btfsc	status,2,c
  5780  00ED54  D3BE               	goto	l136
  5781  00ED56  EE20 F002          	lfsr	2,2
  5782  00ED5A  5003               	movf	check_food@foodInput,w,c
  5783  00ED5C  26D9               	addwf	fsr2l,f,c
  5784  00ED5E  5004               	movf	check_food@foodInput+1,w,c
  5785  00ED60  22DA               	addwfc	fsr2h,f,c
  5786  00ED62  0E03               	movlw	3
  5787  00ED64  18DE               	xorwf	postinc2,w,c
  5788  00ED66  10DE               	iorwf	postinc2,w,c
  5789  00ED68  B4D8               	btfsc	status,2,c
  5790  00ED6A  D3B3               	goto	l136
  5791  00ED6C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5792  00ED70  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5793  00ED74  50DE               	movf	postinc2,w,c
  5794  00ED76  10DE               	iorwf	postinc2,w,c
  5795  00ED78  B4D8               	btfsc	status,2,c
  5796  00ED7A  D3AB               	goto	l136
  5797  00ED7C  EE20 F002          	lfsr	2,2
  5798  00ED80  5003               	movf	check_food@foodInput,w,c
  5799  00ED82  26D9               	addwf	fsr2l,f,c
  5800  00ED84  5004               	movf	check_food@foodInput+1,w,c
  5801  00ED86  22DA               	addwfc	fsr2h,f,c
  5802  00ED88  50DE               	movf	postinc2,w,c
  5803  00ED8A  10DE               	iorwf	postinc2,w,c
  5804  00ED8C  B4D8               	btfsc	status,2,c
  5805  00ED8E  D3A1               	goto	l136
  5806                           
  5807                           ;standbyMode.c: 117: returnValue = 4;
  5808  00ED90  0E00               	movlw	0
  5809  00ED92  6E08               	movwf	check_food@returnValue+1,c
  5810  00ED94  0E04               	movlw	4
  5811  00ED96  D35C               	goto	L47
  5812  00ED98                     
  5813                           ;standbyMode.c: 123: if (foodInput[1] == 3){
  5814  00ED98  EE20 F002          	lfsr	2,2
  5815  00ED9C  5003               	movf	check_food@foodInput,w,c
  5816  00ED9E  26D9               	addwf	fsr2l,f,c
  5817  00EDA0  5004               	movf	check_food@foodInput+1,w,c
  5818  00EDA2  22DA               	addwfc	fsr2h,f,c
  5819  00EDA4  0E03               	movlw	3
  5820  00EDA6  18DE               	xorwf	postinc2,w,c
  5821  00EDA8  10DE               	iorwf	postinc2,w,c
  5822  00EDAA  A4D8               	btfss	status,2,c
  5823  00EDAC  D00C               	goto	l148
  5824                           
  5825                           ;standbyMode.c: 124: if (foodInput[0] == 1){
  5826  00EDAE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5827  00EDB2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5828  00EDB6  04DE               	decf	postinc2,w,c
  5829  00EDB8  10DE               	iorwf	postinc2,w,c
  5830  00EDBA  A4D8               	btfss	status,2,c
  5831  00EDBC  D38A               	goto	l136
  5832                           
  5833                           ;standbyMode.c: 125: returnValue = 5;
  5834  00EDBE  0E00               	movlw	0
  5835  00EDC0  6E08               	movwf	check_food@returnValue+1,c
  5836  00EDC2  0E05               	movlw	5
  5837  00EDC4  D345               	goto	L47
  5838  00EDC6                     l148:
  5839                           
  5840                           ;standbyMode.c: 128: else if (foodInput[0] != 3 && foodInput[0] != 0){
  5841  00EDC6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5842  00EDCA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5843  00EDCE  0E03               	movlw	3
  5844  00EDD0  18DE               	xorwf	postinc2,w,c
  5845  00EDD2  10DE               	iorwf	postinc2,w,c
  5846  00EDD4  B4D8               	btfsc	status,2,c
  5847  00EDD6  D37D               	goto	l136
  5848  00EDD8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5849  00EDDC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5850  00EDE0  50DE               	movf	postinc2,w,c
  5851  00EDE2  10DE               	iorwf	postinc2,w,c
  5852  00EDE4  B4D8               	btfsc	status,2,c
  5853  00EDE6  D375               	goto	l136
  5854                           
  5855                           ;standbyMode.c: 129: returnValue = 6;
  5856  00EDE8  0E00               	movlw	0
  5857  00EDEA  6E08               	movwf	check_food@returnValue+1,c
  5858  00EDEC  0E06               	movlw	6
  5859  00EDEE  D330               	goto	L47
  5860  00EDF0                     
  5861                           ;standbyMode.c: 135: if (foodInput[1] == 3){
  5862  00EDF0  EE20 F002          	lfsr	2,2
  5863  00EDF4  5003               	movf	check_food@foodInput,w,c
  5864  00EDF6  26D9               	addwf	fsr2l,f,c
  5865  00EDF8  5004               	movf	check_food@foodInput+1,w,c
  5866  00EDFA  22DA               	addwfc	fsr2h,f,c
  5867  00EDFC  0E03               	movlw	3
  5868  00EDFE  18DE               	xorwf	postinc2,w,c
  5869  00EE00  10DE               	iorwf	postinc2,w,c
  5870  00EE02  A4D8               	btfss	status,2,c
  5871  00EE04  D00C               	goto	l153
  5872                           
  5873                           ;standbyMode.c: 136: if (foodInput[0] == 1){
  5874  00EE06  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5875  00EE0A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5876  00EE0E  04DE               	decf	postinc2,w,c
  5877  00EE10  10DE               	iorwf	postinc2,w,c
  5878  00EE12  A4D8               	btfss	status,2,c
  5879  00EE14  D35E               	goto	l136
  5880                           
  5881                           ;standbyMode.c: 137: returnValue = 7;
  5882  00EE16  0E00               	movlw	0
  5883  00EE18  6E08               	movwf	check_food@returnValue+1,c
  5884  00EE1A  0E07               	movlw	7
  5885  00EE1C  D319               	goto	L47
  5886  00EE1E                     l153:
  5887                           
  5888                           ;standbyMode.c: 140: else if (foodInput[0] != 3 && foodInput[0] != 0){
  5889  00EE1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5890  00EE22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5891  00EE26  0E03               	movlw	3
  5892  00EE28  18DE               	xorwf	postinc2,w,c
  5893  00EE2A  10DE               	iorwf	postinc2,w,c
  5894  00EE2C  B4D8               	btfsc	status,2,c
  5895  00EE2E  D351               	goto	l136
  5896  00EE30  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5897  00EE34  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5898  00EE38  50DE               	movf	postinc2,w,c
  5899  00EE3A  10DE               	iorwf	postinc2,w,c
  5900  00EE3C  B4D8               	btfsc	status,2,c
  5901  00EE3E  D349               	goto	l136
  5902                           
  5903                           ;standbyMode.c: 141: returnValue = 8;
  5904  00EE40  0E00               	movlw	0
  5905  00EE42  6E08               	movwf	check_food@returnValue+1,c
  5906  00EE44  0E08               	movlw	8
  5907  00EE46  D304               	goto	L47
  5908  00EE48                     
  5909                           ;standbyMode.c: 147: if (foodInput[0] == 1 && foodInput[1] == 1){
  5910  00EE48  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5911  00EE4C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5912  00EE50  04DE               	decf	postinc2,w,c
  5913  00EE52  10DE               	iorwf	postinc2,w,c
  5914  00EE54  A4D8               	btfss	status,2,c
  5915  00EE56  D33D               	goto	l136
  5916  00EE58  EE20 F002          	lfsr	2,2
  5917  00EE5C  5003               	movf	check_food@foodInput,w,c
  5918  00EE5E  26D9               	addwf	fsr2l,f,c
  5919  00EE60  5004               	movf	check_food@foodInput+1,w,c
  5920  00EE62  22DA               	addwfc	fsr2h,f,c
  5921  00EE64  04DE               	decf	postinc2,w,c
  5922  00EE66  10DE               	iorwf	postinc2,w,c
  5923  00EE68  A4D8               	btfss	status,2,c
  5924  00EE6A  D333               	goto	l136
  5925                           
  5926                           ;standbyMode.c: 148: if (foodInput[2] == 1 || foodInput[2] == 2){
  5927  00EE6C  EE20 F004          	lfsr	2,4
  5928  00EE70  5003               	movf	check_food@foodInput,w,c
  5929  00EE72  26D9               	addwf	fsr2l,f,c
  5930  00EE74  5004               	movf	check_food@foodInput+1,w,c
  5931  00EE76  22DA               	addwfc	fsr2h,f,c
  5932  00EE78  04DE               	decf	postinc2,w,c
  5933  00EE7A  10DE               	iorwf	postinc2,w,c
  5934  00EE7C  B4D8               	btfsc	status,2,c
  5935  00EE7E  D00B               	goto	u3290
  5936  00EE80  EE20 F004          	lfsr	2,4
  5937  00EE84  5003               	movf	check_food@foodInput,w,c
  5938  00EE86  26D9               	addwf	fsr2l,f,c
  5939  00EE88  5004               	movf	check_food@foodInput+1,w,c
  5940  00EE8A  22DA               	addwfc	fsr2h,f,c
  5941  00EE8C  0E02               	movlw	2
  5942  00EE8E  18DE               	xorwf	postinc2,w,c
  5943  00EE90  10DE               	iorwf	postinc2,w,c
  5944  00EE92  A4D8               	btfss	status,2,c
  5945  00EE94  D31E               	goto	l136
  5946  00EE96                     u3290:
  5947                           
  5948                           ;standbyMode.c: 149: returnValue = 9;
  5949  00EE96  0E00               	movlw	0
  5950  00EE98  6E08               	movwf	check_food@returnValue+1,c
  5951  00EE9A  0E09               	movlw	9
  5952  00EE9C  D2D9               	goto	L47
  5953  00EE9E                     
  5954                           ;standbyMode.c: 156: if (foodInput[0] == 1 && foodInput[1] == 1){
  5955  00EE9E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5956  00EEA2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5957  00EEA6  04DE               	decf	postinc2,w,c
  5958  00EEA8  10DE               	iorwf	postinc2,w,c
  5959  00EEAA  A4D8               	btfss	status,2,c
  5960  00EEAC  D312               	goto	l136
  5961  00EEAE  EE20 F002          	lfsr	2,2
  5962  00EEB2  5003               	movf	check_food@foodInput,w,c
  5963  00EEB4  26D9               	addwf	fsr2l,f,c
  5964  00EEB6  5004               	movf	check_food@foodInput+1,w,c
  5965  00EEB8  22DA               	addwfc	fsr2h,f,c
  5966  00EEBA  04DE               	decf	postinc2,w,c
  5967  00EEBC  10DE               	iorwf	postinc2,w,c
  5968  00EEBE  A4D8               	btfss	status,2,c
  5969  00EEC0  D308               	goto	l136
  5970                           
  5971                           ;standbyMode.c: 157: if (foodInput[2] == 1 || foodInput[2] == 2){
  5972  00EEC2  EE20 F004          	lfsr	2,4
  5973  00EEC6  5003               	movf	check_food@foodInput,w,c
  5974  00EEC8  26D9               	addwf	fsr2l,f,c
  5975  00EECA  5004               	movf	check_food@foodInput+1,w,c
  5976  00EECC  22DA               	addwfc	fsr2h,f,c
  5977  00EECE  04DE               	decf	postinc2,w,c
  5978  00EED0  10DE               	iorwf	postinc2,w,c
  5979  00EED2  B4D8               	btfsc	status,2,c
  5980  00EED4  D00B               	goto	u3330
  5981  00EED6  EE20 F004          	lfsr	2,4
  5982  00EEDA  5003               	movf	check_food@foodInput,w,c
  5983  00EEDC  26D9               	addwf	fsr2l,f,c
  5984  00EEDE  5004               	movf	check_food@foodInput+1,w,c
  5985  00EEE0  22DA               	addwfc	fsr2h,f,c
  5986  00EEE2  0E02               	movlw	2
  5987  00EEE4  18DE               	xorwf	postinc2,w,c
  5988  00EEE6  10DE               	iorwf	postinc2,w,c
  5989  00EEE8  A4D8               	btfss	status,2,c
  5990  00EEEA  D2F3               	goto	l136
  5991  00EEEC                     u3330:
  5992                           
  5993                           ;standbyMode.c: 158: returnValue = 10;
  5994  00EEEC  0E00               	movlw	0
  5995  00EEEE  6E08               	movwf	check_food@returnValue+1,c
  5996  00EEF0  0E0A               	movlw	10
  5997  00EEF2  D2AE               	goto	L47
  5998  00EEF4                     
  5999                           ;standbyMode.c: 165: if (foodInput[1] == 1 && foodInput[2] == 1){
  6000  00EEF4  EE20 F002          	lfsr	2,2
  6001  00EEF8  5003               	movf	check_food@foodInput,w,c
  6002  00EEFA  26D9               	addwf	fsr2l,f,c
  6003  00EEFC  5004               	movf	check_food@foodInput+1,w,c
  6004  00EEFE  22DA               	addwfc	fsr2h,f,c
  6005  00EF00  04DE               	decf	postinc2,w,c
  6006  00EF02  10DE               	iorwf	postinc2,w,c
  6007  00EF04  A4D8               	btfss	status,2,c
  6008  00EF06  D2E5               	goto	l136
  6009  00EF08  EE20 F004          	lfsr	2,4
  6010  00EF0C  5003               	movf	check_food@foodInput,w,c
  6011  00EF0E  26D9               	addwf	fsr2l,f,c
  6012  00EF10  5004               	movf	check_food@foodInput+1,w,c
  6013  00EF12  22DA               	addwfc	fsr2h,f,c
  6014  00EF14  04DE               	decf	postinc2,w,c
  6015  00EF16  10DE               	iorwf	postinc2,w,c
  6016  00EF18  A4D8               	btfss	status,2,c
  6017  00EF1A  D2DB               	goto	l136
  6018                           
  6019                           ;standbyMode.c: 166: if (foodInput[0] == 1 || foodInput[0] == 2){
  6020  00EF1C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6021  00EF20  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6022  00EF24  04DE               	decf	postinc2,w,c
  6023  00EF26  10DE               	iorwf	postinc2,w,c
  6024  00EF28  B4D8               	btfsc	status,2,c
  6025  00EF2A  D009               	goto	u3370
  6026  00EF2C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6027  00EF30  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6028  00EF34  0E02               	movlw	2
  6029  00EF36  18DE               	xorwf	postinc2,w,c
  6030  00EF38  10DE               	iorwf	postinc2,w,c
  6031  00EF3A  A4D8               	btfss	status,2,c
  6032  00EF3C  D2CA               	goto	l136
  6033  00EF3E                     u3370:
  6034                           
  6035                           ;standbyMode.c: 167: returnValue = 11;
  6036  00EF3E  0E00               	movlw	0
  6037  00EF40  6E08               	movwf	check_food@returnValue+1,c
  6038  00EF42  0E0B               	movlw	11
  6039  00EF44  D285               	goto	L47
  6040  00EF46                     
  6041                           ;standbyMode.c: 174: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6042  00EF46  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6043  00EF4A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6044  00EF4E  04DE               	decf	postinc2,w,c
  6045  00EF50  10DE               	iorwf	postinc2,w,c
  6046  00EF52  A4D8               	btfss	status,2,c
  6047  00EF54  D018               	goto	l173
  6048  00EF56  EE20 F002          	lfsr	2,2
  6049  00EF5A  5003               	movf	check_food@foodInput,w,c
  6050  00EF5C  26D9               	addwf	fsr2l,f,c
  6051  00EF5E  5004               	movf	check_food@foodInput+1,w,c
  6052  00EF60  22DA               	addwfc	fsr2h,f,c
  6053  00EF62  04DE               	decf	postinc2,w,c
  6054  00EF64  10DE               	iorwf	postinc2,w,c
  6055  00EF66  A4D8               	btfss	status,2,c
  6056  00EF68  D00E               	goto	l173
  6057  00EF6A  EE20 F004          	lfsr	2,4
  6058  00EF6E  5003               	movf	check_food@foodInput,w,c
  6059  00EF70  26D9               	addwf	fsr2l,f,c
  6060  00EF72  5004               	movf	check_food@foodInput+1,w,c
  6061  00EF74  22DA               	addwfc	fsr2h,f,c
  6062  00EF76  04DE               	decf	postinc2,w,c
  6063  00EF78  10DE               	iorwf	postinc2,w,c
  6064  00EF7A  A4D8               	btfss	status,2,c
  6065  00EF7C  D004               	goto	l173
  6066                           
  6067                           ;standbyMode.c: 175: returnValue = 12;
  6068  00EF7E  0E00               	movlw	0
  6069  00EF80  6E08               	movwf	check_food@returnValue+1,c
  6070  00EF82  0E0C               	movlw	12
  6071  00EF84  D265               	goto	L47
  6072  00EF86                     l173:
  6073                           
  6074                           ;standbyMode.c: 177: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6075  00EF86  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6076  00EF8A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6077  00EF8E  0E02               	movlw	2
  6078  00EF90  18DE               	xorwf	postinc2,w,c
  6079  00EF92  10DE               	iorwf	postinc2,w,c
  6080  00EF94  A4D8               	btfss	status,2,c
  6081  00EF96  D018               	goto	l175
  6082  00EF98  EE20 F002          	lfsr	2,2
  6083  00EF9C  5003               	movf	check_food@foodInput,w,c
  6084  00EF9E  26D9               	addwf	fsr2l,f,c
  6085  00EFA0  5004               	movf	check_food@foodInput+1,w,c
  6086  00EFA2  22DA               	addwfc	fsr2h,f,c
  6087  00EFA4  04DE               	decf	postinc2,w,c
  6088  00EFA6  10DE               	iorwf	postinc2,w,c
  6089  00EFA8  A4D8               	btfss	status,2,c
  6090  00EFAA  D00E               	goto	l175
  6091  00EFAC  EE20 F004          	lfsr	2,4
  6092  00EFB0  5003               	movf	check_food@foodInput,w,c
  6093  00EFB2  26D9               	addwf	fsr2l,f,c
  6094  00EFB4  5004               	movf	check_food@foodInput+1,w,c
  6095  00EFB6  22DA               	addwfc	fsr2h,f,c
  6096  00EFB8  04DE               	decf	postinc2,w,c
  6097  00EFBA  10DE               	iorwf	postinc2,w,c
  6098  00EFBC  A4D8               	btfss	status,2,c
  6099  00EFBE  D004               	goto	l175
  6100                           
  6101                           ;standbyMode.c: 178: returnValue = 13;
  6102  00EFC0  0E00               	movlw	0
  6103  00EFC2  6E08               	movwf	check_food@returnValue+1,c
  6104  00EFC4  0E0D               	movlw	13
  6105  00EFC6  D244               	goto	L47
  6106  00EFC8                     l175:
  6107                           
  6108                           ;standbyMode.c: 180: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6109  00EFC8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6110  00EFCC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6111  00EFD0  04DE               	decf	postinc2,w,c
  6112  00EFD2  10DE               	iorwf	postinc2,w,c
  6113  00EFD4  A4D8               	btfss	status,2,c
  6114  00EFD6  D019               	goto	l177
  6115  00EFD8  EE20 F002          	lfsr	2,2
  6116  00EFDC  5003               	movf	check_food@foodInput,w,c
  6117  00EFDE  26D9               	addwf	fsr2l,f,c
  6118  00EFE0  5004               	movf	check_food@foodInput+1,w,c
  6119  00EFE2  22DA               	addwfc	fsr2h,f,c
  6120  00EFE4  0E02               	movlw	2
  6121  00EFE6  18DE               	xorwf	postinc2,w,c
  6122  00EFE8  10DE               	iorwf	postinc2,w,c
  6123  00EFEA  A4D8               	btfss	status,2,c
  6124  00EFEC  D00E               	goto	l177
  6125  00EFEE  EE20 F004          	lfsr	2,4
  6126  00EFF2  5003               	movf	check_food@foodInput,w,c
  6127  00EFF4  26D9               	addwf	fsr2l,f,c
  6128  00EFF6  5004               	movf	check_food@foodInput+1,w,c
  6129  00EFF8  22DA               	addwfc	fsr2h,f,c
  6130  00EFFA  04DE               	decf	postinc2,w,c
  6131  00EFFC  10DE               	iorwf	postinc2,w,c
  6132  00EFFE  A4D8               	btfss	status,2,c
  6133  00F000  D004               	goto	l177
  6134                           
  6135                           ;standbyMode.c: 181: returnValue = 14;
  6136  00F002  0E00               	movlw	0
  6137  00F004  6E08               	movwf	check_food@returnValue+1,c
  6138  00F006  0E0E               	movlw	14
  6139  00F008  D223               	goto	L47
  6140  00F00A                     l177:
  6141                           
  6142                           ;standbyMode.c: 183: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6143  00F00A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6144  00F00E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6145  00F012  04DE               	decf	postinc2,w,c
  6146  00F014  10DE               	iorwf	postinc2,w,c
  6147  00F016  A4D8               	btfss	status,2,c
  6148  00F018  D25C               	goto	l136
  6149  00F01A  EE20 F002          	lfsr	2,2
  6150  00F01E  5003               	movf	check_food@foodInput,w,c
  6151  00F020  26D9               	addwf	fsr2l,f,c
  6152  00F022  5004               	movf	check_food@foodInput+1,w,c
  6153  00F024  22DA               	addwfc	fsr2h,f,c
  6154  00F026  04DE               	decf	postinc2,w,c
  6155  00F028  10DE               	iorwf	postinc2,w,c
  6156  00F02A  A4D8               	btfss	status,2,c
  6157  00F02C  D252               	goto	l136
  6158  00F02E  EE20 F004          	lfsr	2,4
  6159  00F032  5003               	movf	check_food@foodInput,w,c
  6160  00F034  26D9               	addwf	fsr2l,f,c
  6161  00F036  5004               	movf	check_food@foodInput+1,w,c
  6162  00F038  22DA               	addwfc	fsr2h,f,c
  6163  00F03A  0E02               	movlw	2
  6164  00F03C  18DE               	xorwf	postinc2,w,c
  6165  00F03E  10DE               	iorwf	postinc2,w,c
  6166  00F040  A4D8               	btfss	status,2,c
  6167  00F042  D247               	goto	l136
  6168                           
  6169                           ;standbyMode.c: 184: returnValue = 15;
  6170  00F044  0E00               	movlw	0
  6171  00F046  6E08               	movwf	check_food@returnValue+1,c
  6172  00F048  0E0F               	movlw	15
  6173  00F04A  D202               	goto	L47
  6174  00F04C                     
  6175                           ;standbyMode.c: 190: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6176  00F04C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6177  00F050  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6178  00F054  04DE               	decf	postinc2,w,c
  6179  00F056  10DE               	iorwf	postinc2,w,c
  6180  00F058  A4D8               	btfss	status,2,c
  6181  00F05A  D018               	goto	l181
  6182  00F05C  EE20 F002          	lfsr	2,2
  6183  00F060  5003               	movf	check_food@foodInput,w,c
  6184  00F062  26D9               	addwf	fsr2l,f,c
  6185  00F064  5004               	movf	check_food@foodInput+1,w,c
  6186  00F066  22DA               	addwfc	fsr2h,f,c
  6187  00F068  04DE               	decf	postinc2,w,c
  6188  00F06A  10DE               	iorwf	postinc2,w,c
  6189  00F06C  A4D8               	btfss	status,2,c
  6190  00F06E  D00E               	goto	l181
  6191  00F070  EE20 F004          	lfsr	2,4
  6192  00F074  5003               	movf	check_food@foodInput,w,c
  6193  00F076  26D9               	addwf	fsr2l,f,c
  6194  00F078  5004               	movf	check_food@foodInput+1,w,c
  6195  00F07A  22DA               	addwfc	fsr2h,f,c
  6196  00F07C  04DE               	decf	postinc2,w,c
  6197  00F07E  10DE               	iorwf	postinc2,w,c
  6198  00F080  A4D8               	btfss	status,2,c
  6199  00F082  D004               	goto	l181
  6200                           
  6201                           ;standbyMode.c: 191: returnValue = 16;
  6202  00F084  0E00               	movlw	0
  6203  00F086  6E08               	movwf	check_food@returnValue+1,c
  6204  00F088  0E10               	movlw	16
  6205  00F08A  D1E2               	goto	L47
  6206  00F08C                     l181:
  6207                           
  6208                           ;standbyMode.c: 193: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6209  00F08C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6210  00F090  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6211  00F094  0E02               	movlw	2
  6212  00F096  18DE               	xorwf	postinc2,w,c
  6213  00F098  10DE               	iorwf	postinc2,w,c
  6214  00F09A  A4D8               	btfss	status,2,c
  6215  00F09C  D018               	goto	l183
  6216  00F09E  EE20 F002          	lfsr	2,2
  6217  00F0A2  5003               	movf	check_food@foodInput,w,c
  6218  00F0A4  26D9               	addwf	fsr2l,f,c
  6219  00F0A6  5004               	movf	check_food@foodInput+1,w,c
  6220  00F0A8  22DA               	addwfc	fsr2h,f,c
  6221  00F0AA  04DE               	decf	postinc2,w,c
  6222  00F0AC  10DE               	iorwf	postinc2,w,c
  6223  00F0AE  A4D8               	btfss	status,2,c
  6224  00F0B0  D00E               	goto	l183
  6225  00F0B2  EE20 F004          	lfsr	2,4
  6226  00F0B6  5003               	movf	check_food@foodInput,w,c
  6227  00F0B8  26D9               	addwf	fsr2l,f,c
  6228  00F0BA  5004               	movf	check_food@foodInput+1,w,c
  6229  00F0BC  22DA               	addwfc	fsr2h,f,c
  6230  00F0BE  04DE               	decf	postinc2,w,c
  6231  00F0C0  10DE               	iorwf	postinc2,w,c
  6232  00F0C2  A4D8               	btfss	status,2,c
  6233  00F0C4  D004               	goto	l183
  6234                           
  6235                           ;standbyMode.c: 194: returnValue = 17;
  6236  00F0C6  0E00               	movlw	0
  6237  00F0C8  6E08               	movwf	check_food@returnValue+1,c
  6238  00F0CA  0E11               	movlw	17
  6239  00F0CC  D1C1               	goto	L47
  6240  00F0CE                     l183:
  6241                           
  6242                           ;standbyMode.c: 196: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6243  00F0CE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6244  00F0D2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6245  00F0D6  04DE               	decf	postinc2,w,c
  6246  00F0D8  10DE               	iorwf	postinc2,w,c
  6247  00F0DA  A4D8               	btfss	status,2,c
  6248  00F0DC  D019               	goto	l185
  6249  00F0DE  EE20 F002          	lfsr	2,2
  6250  00F0E2  5003               	movf	check_food@foodInput,w,c
  6251  00F0E4  26D9               	addwf	fsr2l,f,c
  6252  00F0E6  5004               	movf	check_food@foodInput+1,w,c
  6253  00F0E8  22DA               	addwfc	fsr2h,f,c
  6254  00F0EA  0E02               	movlw	2
  6255  00F0EC  18DE               	xorwf	postinc2,w,c
  6256  00F0EE  10DE               	iorwf	postinc2,w,c
  6257  00F0F0  A4D8               	btfss	status,2,c
  6258  00F0F2  D00E               	goto	l185
  6259  00F0F4  EE20 F004          	lfsr	2,4
  6260  00F0F8  5003               	movf	check_food@foodInput,w,c
  6261  00F0FA  26D9               	addwf	fsr2l,f,c
  6262  00F0FC  5004               	movf	check_food@foodInput+1,w,c
  6263  00F0FE  22DA               	addwfc	fsr2h,f,c
  6264  00F100  04DE               	decf	postinc2,w,c
  6265  00F102  10DE               	iorwf	postinc2,w,c
  6266  00F104  A4D8               	btfss	status,2,c
  6267  00F106  D004               	goto	l185
  6268                           
  6269                           ;standbyMode.c: 197: returnValue = 18;
  6270  00F108  0E00               	movlw	0
  6271  00F10A  6E08               	movwf	check_food@returnValue+1,c
  6272  00F10C  0E12               	movlw	18
  6273  00F10E  D1A0               	goto	L47
  6274  00F110                     l185:
  6275                           
  6276                           ;standbyMode.c: 199: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6277  00F110  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6278  00F114  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6279  00F118  04DE               	decf	postinc2,w,c
  6280  00F11A  10DE               	iorwf	postinc2,w,c
  6281  00F11C  A4D8               	btfss	status,2,c
  6282  00F11E  D1D9               	goto	l136
  6283  00F120  EE20 F002          	lfsr	2,2
  6284  00F124  5003               	movf	check_food@foodInput,w,c
  6285  00F126  26D9               	addwf	fsr2l,f,c
  6286  00F128  5004               	movf	check_food@foodInput+1,w,c
  6287  00F12A  22DA               	addwfc	fsr2h,f,c
  6288  00F12C  04DE               	decf	postinc2,w,c
  6289  00F12E  10DE               	iorwf	postinc2,w,c
  6290  00F130  A4D8               	btfss	status,2,c
  6291  00F132  D1CF               	goto	l136
  6292  00F134  EE20 F004          	lfsr	2,4
  6293  00F138  5003               	movf	check_food@foodInput,w,c
  6294  00F13A  26D9               	addwf	fsr2l,f,c
  6295  00F13C  5004               	movf	check_food@foodInput+1,w,c
  6296  00F13E  22DA               	addwfc	fsr2h,f,c
  6297  00F140  0E02               	movlw	2
  6298  00F142  18DE               	xorwf	postinc2,w,c
  6299  00F144  10DE               	iorwf	postinc2,w,c
  6300  00F146  A4D8               	btfss	status,2,c
  6301  00F148  D1C4               	goto	l136
  6302                           
  6303                           ;standbyMode.c: 200: returnValue = 19;
  6304  00F14A  0E00               	movlw	0
  6305  00F14C  6E08               	movwf	check_food@returnValue+1,c
  6306  00F14E  0E13               	movlw	19
  6307  00F150  D17F               	goto	L47
  6308  00F152                     
  6309                           ;standbyMode.c: 206: if (foodInput[0] == 1 && foodInput[1] == 1){
  6310  00F152  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6311  00F156  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6312  00F15A  04DE               	decf	postinc2,w,c
  6313  00F15C  10DE               	iorwf	postinc2,w,c
  6314  00F15E  A4D8               	btfss	status,2,c
  6315  00F160  D1B8               	goto	l136
  6316  00F162  EE20 F002          	lfsr	2,2
  6317  00F166  5003               	movf	check_food@foodInput,w,c
  6318  00F168  26D9               	addwf	fsr2l,f,c
  6319  00F16A  5004               	movf	check_food@foodInput+1,w,c
  6320  00F16C  22DA               	addwfc	fsr2h,f,c
  6321  00F16E  04DE               	decf	postinc2,w,c
  6322  00F170  10DE               	iorwf	postinc2,w,c
  6323  00F172  A4D8               	btfss	status,2,c
  6324  00F174  D1AE               	goto	l136
  6325                           
  6326                           ;standbyMode.c: 207: if (foodInput[2] == 1 || foodInput[2] == 2){
  6327  00F176  EE20 F004          	lfsr	2,4
  6328  00F17A  5003               	movf	check_food@foodInput,w,c
  6329  00F17C  26D9               	addwf	fsr2l,f,c
  6330  00F17E  5004               	movf	check_food@foodInput+1,w,c
  6331  00F180  22DA               	addwfc	fsr2h,f,c
  6332  00F182  04DE               	decf	postinc2,w,c
  6333  00F184  10DE               	iorwf	postinc2,w,c
  6334  00F186  B4D8               	btfsc	status,2,c
  6335  00F188  D00B               	goto	u3650
  6336  00F18A  EE20 F004          	lfsr	2,4
  6337  00F18E  5003               	movf	check_food@foodInput,w,c
  6338  00F190  26D9               	addwf	fsr2l,f,c
  6339  00F192  5004               	movf	check_food@foodInput+1,w,c
  6340  00F194  22DA               	addwfc	fsr2h,f,c
  6341  00F196  0E02               	movlw	2
  6342  00F198  18DE               	xorwf	postinc2,w,c
  6343  00F19A  10DE               	iorwf	postinc2,w,c
  6344  00F19C  A4D8               	btfss	status,2,c
  6345  00F19E  D199               	goto	l136
  6346  00F1A0                     u3650:
  6347                           
  6348                           ;standbyMode.c: 208: returnValue = 20;
  6349  00F1A0  0E00               	movlw	0
  6350  00F1A2  6E08               	movwf	check_food@returnValue+1,c
  6351  00F1A4  0E14               	movlw	20
  6352  00F1A6  D154               	goto	L47
  6353  00F1A8                     
  6354                           ;standbyMode.c: 215: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6355  00F1A8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6356  00F1AC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6357  00F1B0  04DE               	decf	postinc2,w,c
  6358  00F1B2  10DE               	iorwf	postinc2,w,c
  6359  00F1B4  A4D8               	btfss	status,2,c
  6360  00F1B6  D018               	goto	l194
  6361  00F1B8  EE20 F002          	lfsr	2,2
  6362  00F1BC  5003               	movf	check_food@foodInput,w,c
  6363  00F1BE  26D9               	addwf	fsr2l,f,c
  6364  00F1C0  5004               	movf	check_food@foodInput+1,w,c
  6365  00F1C2  22DA               	addwfc	fsr2h,f,c
  6366  00F1C4  04DE               	decf	postinc2,w,c
  6367  00F1C6  10DE               	iorwf	postinc2,w,c
  6368  00F1C8  A4D8               	btfss	status,2,c
  6369  00F1CA  D00E               	goto	l194
  6370  00F1CC  EE20 F004          	lfsr	2,4
  6371  00F1D0  5003               	movf	check_food@foodInput,w,c
  6372  00F1D2  26D9               	addwf	fsr2l,f,c
  6373  00F1D4  5004               	movf	check_food@foodInput+1,w,c
  6374  00F1D6  22DA               	addwfc	fsr2h,f,c
  6375  00F1D8  04DE               	decf	postinc2,w,c
  6376  00F1DA  10DE               	iorwf	postinc2,w,c
  6377  00F1DC  A4D8               	btfss	status,2,c
  6378  00F1DE  D004               	goto	l194
  6379                           
  6380                           ;standbyMode.c: 216: returnValue = 21;
  6381  00F1E0  0E00               	movlw	0
  6382  00F1E2  6E08               	movwf	check_food@returnValue+1,c
  6383  00F1E4  0E15               	movlw	21
  6384  00F1E6  D134               	goto	L47
  6385  00F1E8                     l194:
  6386                           
  6387                           ;standbyMode.c: 218: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6388  00F1E8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6389  00F1EC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6390  00F1F0  0E02               	movlw	2
  6391  00F1F2  18DE               	xorwf	postinc2,w,c
  6392  00F1F4  10DE               	iorwf	postinc2,w,c
  6393  00F1F6  A4D8               	btfss	status,2,c
  6394  00F1F8  D018               	goto	l196
  6395  00F1FA  EE20 F002          	lfsr	2,2
  6396  00F1FE  5003               	movf	check_food@foodInput,w,c
  6397  00F200  26D9               	addwf	fsr2l,f,c
  6398  00F202  5004               	movf	check_food@foodInput+1,w,c
  6399  00F204  22DA               	addwfc	fsr2h,f,c
  6400  00F206  04DE               	decf	postinc2,w,c
  6401  00F208  10DE               	iorwf	postinc2,w,c
  6402  00F20A  A4D8               	btfss	status,2,c
  6403  00F20C  D00E               	goto	l196
  6404  00F20E  EE20 F004          	lfsr	2,4
  6405  00F212  5003               	movf	check_food@foodInput,w,c
  6406  00F214  26D9               	addwf	fsr2l,f,c
  6407  00F216  5004               	movf	check_food@foodInput+1,w,c
  6408  00F218  22DA               	addwfc	fsr2h,f,c
  6409  00F21A  04DE               	decf	postinc2,w,c
  6410  00F21C  10DE               	iorwf	postinc2,w,c
  6411  00F21E  A4D8               	btfss	status,2,c
  6412  00F220  D004               	goto	l196
  6413                           
  6414                           ;standbyMode.c: 219: returnValue = 22;
  6415  00F222  0E00               	movlw	0
  6416  00F224  6E08               	movwf	check_food@returnValue+1,c
  6417  00F226  0E16               	movlw	22
  6418  00F228  D113               	goto	L47
  6419  00F22A                     l196:
  6420                           
  6421                           ;standbyMode.c: 221: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6422  00F22A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6423  00F22E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6424  00F232  04DE               	decf	postinc2,w,c
  6425  00F234  10DE               	iorwf	postinc2,w,c
  6426  00F236  A4D8               	btfss	status,2,c
  6427  00F238  D019               	goto	l198
  6428  00F23A  EE20 F002          	lfsr	2,2
  6429  00F23E  5003               	movf	check_food@foodInput,w,c
  6430  00F240  26D9               	addwf	fsr2l,f,c
  6431  00F242  5004               	movf	check_food@foodInput+1,w,c
  6432  00F244  22DA               	addwfc	fsr2h,f,c
  6433  00F246  0E02               	movlw	2
  6434  00F248  18DE               	xorwf	postinc2,w,c
  6435  00F24A  10DE               	iorwf	postinc2,w,c
  6436  00F24C  A4D8               	btfss	status,2,c
  6437  00F24E  D00E               	goto	l198
  6438  00F250  EE20 F004          	lfsr	2,4
  6439  00F254  5003               	movf	check_food@foodInput,w,c
  6440  00F256  26D9               	addwf	fsr2l,f,c
  6441  00F258  5004               	movf	check_food@foodInput+1,w,c
  6442  00F25A  22DA               	addwfc	fsr2h,f,c
  6443  00F25C  04DE               	decf	postinc2,w,c
  6444  00F25E  10DE               	iorwf	postinc2,w,c
  6445  00F260  A4D8               	btfss	status,2,c
  6446  00F262  D004               	goto	l198
  6447                           
  6448                           ;standbyMode.c: 222: returnValue = 23;
  6449  00F264  0E00               	movlw	0
  6450  00F266  6E08               	movwf	check_food@returnValue+1,c
  6451  00F268  0E17               	movlw	23
  6452  00F26A  D0F2               	goto	L47
  6453  00F26C                     l198:
  6454                           
  6455                           ;standbyMode.c: 224: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6456  00F26C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6457  00F270  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6458  00F274  04DE               	decf	postinc2,w,c
  6459  00F276  10DE               	iorwf	postinc2,w,c
  6460  00F278  A4D8               	btfss	status,2,c
  6461  00F27A  D12B               	goto	l136
  6462  00F27C  EE20 F002          	lfsr	2,2
  6463  00F280  5003               	movf	check_food@foodInput,w,c
  6464  00F282  26D9               	addwf	fsr2l,f,c
  6465  00F284  5004               	movf	check_food@foodInput+1,w,c
  6466  00F286  22DA               	addwfc	fsr2h,f,c
  6467  00F288  04DE               	decf	postinc2,w,c
  6468  00F28A  10DE               	iorwf	postinc2,w,c
  6469  00F28C  A4D8               	btfss	status,2,c
  6470  00F28E  D121               	goto	l136
  6471  00F290  EE20 F004          	lfsr	2,4
  6472  00F294  5003               	movf	check_food@foodInput,w,c
  6473  00F296  26D9               	addwf	fsr2l,f,c
  6474  00F298  5004               	movf	check_food@foodInput+1,w,c
  6475  00F29A  22DA               	addwfc	fsr2h,f,c
  6476  00F29C  0E02               	movlw	2
  6477  00F29E  18DE               	xorwf	postinc2,w,c
  6478  00F2A0  10DE               	iorwf	postinc2,w,c
  6479  00F2A2  A4D8               	btfss	status,2,c
  6480  00F2A4  D116               	goto	l136
  6481                           
  6482                           ;standbyMode.c: 225: returnValue = 24;
  6483  00F2A6  0E00               	movlw	0
  6484  00F2A8  6E08               	movwf	check_food@returnValue+1,c
  6485  00F2AA  0E18               	movlw	24
  6486  00F2AC  D0D1               	goto	L47
  6487  00F2AE                     
  6488                           ;standbyMode.c: 231: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6489  00F2AE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6490  00F2B2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6491  00F2B6  04DE               	decf	postinc2,w,c
  6492  00F2B8  10DE               	iorwf	postinc2,w,c
  6493  00F2BA  A4D8               	btfss	status,2,c
  6494  00F2BC  D10A               	goto	l136
  6495  00F2BE  EE20 F002          	lfsr	2,2
  6496  00F2C2  5003               	movf	check_food@foodInput,w,c
  6497  00F2C4  26D9               	addwf	fsr2l,f,c
  6498  00F2C6  5004               	movf	check_food@foodInput+1,w,c
  6499  00F2C8  22DA               	addwfc	fsr2h,f,c
  6500  00F2CA  04DE               	decf	postinc2,w,c
  6501  00F2CC  10DE               	iorwf	postinc2,w,c
  6502  00F2CE  A4D8               	btfss	status,2,c
  6503  00F2D0  D100               	goto	l136
  6504  00F2D2  EE20 F004          	lfsr	2,4
  6505  00F2D6  5003               	movf	check_food@foodInput,w,c
  6506  00F2D8  26D9               	addwf	fsr2l,f,c
  6507  00F2DA  5004               	movf	check_food@foodInput+1,w,c
  6508  00F2DC  22DA               	addwfc	fsr2h,f,c
  6509  00F2DE  04DE               	decf	postinc2,w,c
  6510  00F2E0  10DE               	iorwf	postinc2,w,c
  6511  00F2E2  A4D8               	btfss	status,2,c
  6512  00F2E4  D0F6               	goto	l136
  6513  00F2E6  EE20 F006          	lfsr	2,6
  6514  00F2EA  5003               	movf	check_food@foodInput,w,c
  6515  00F2EC  26D9               	addwf	fsr2l,f,c
  6516  00F2EE  5004               	movf	check_food@foodInput+1,w,c
  6517  00F2F0  22DA               	addwfc	fsr2h,f,c
  6518  00F2F2  04DE               	decf	postinc2,w,c
  6519  00F2F4  10DE               	iorwf	postinc2,w,c
  6520  00F2F6  A4D8               	btfss	status,2,c
  6521  00F2F8  D0EC               	goto	l136
  6522                           
  6523                           ;standbyMode.c: 232: returnValue = 25;
  6524  00F2FA  0E00               	movlw	0
  6525  00F2FC  6E08               	movwf	check_food@returnValue+1,c
  6526  00F2FE  0E19               	movlw	25
  6527  00F300  D0A7               	goto	L47
  6528  00F302                     
  6529                           ;standbyMode.c: 238: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6530  00F302  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6531  00F306  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6532  00F30A  04DE               	decf	postinc2,w,c
  6533  00F30C  10DE               	iorwf	postinc2,w,c
  6534  00F30E  A4D8               	btfss	status,2,c
  6535  00F310  D0E0               	goto	l136
  6536  00F312  EE20 F002          	lfsr	2,2
  6537  00F316  5003               	movf	check_food@foodInput,w,c
  6538  00F318  26D9               	addwf	fsr2l,f,c
  6539  00F31A  5004               	movf	check_food@foodInput+1,w,c
  6540  00F31C  22DA               	addwfc	fsr2h,f,c
  6541  00F31E  04DE               	decf	postinc2,w,c
  6542  00F320  10DE               	iorwf	postinc2,w,c
  6543  00F322  A4D8               	btfss	status,2,c
  6544  00F324  D0D6               	goto	l136
  6545  00F326  EE20 F004          	lfsr	2,4
  6546  00F32A  5003               	movf	check_food@foodInput,w,c
  6547  00F32C  26D9               	addwf	fsr2l,f,c
  6548  00F32E  5004               	movf	check_food@foodInput+1,w,c
  6549  00F330  22DA               	addwfc	fsr2h,f,c
  6550  00F332  04DE               	decf	postinc2,w,c
  6551  00F334  10DE               	iorwf	postinc2,w,c
  6552  00F336  A4D8               	btfss	status,2,c
  6553  00F338  D0CC               	goto	l136
  6554  00F33A  EE20 F006          	lfsr	2,6
  6555  00F33E  5003               	movf	check_food@foodInput,w,c
  6556  00F340  26D9               	addwf	fsr2l,f,c
  6557  00F342  5004               	movf	check_food@foodInput+1,w,c
  6558  00F344  22DA               	addwfc	fsr2h,f,c
  6559  00F346  04DE               	decf	postinc2,w,c
  6560  00F348  10DE               	iorwf	postinc2,w,c
  6561  00F34A  A4D8               	btfss	status,2,c
  6562  00F34C  D0C2               	goto	l136
  6563                           
  6564                           ;standbyMode.c: 239: returnValue = 26;
  6565  00F34E  0E00               	movlw	0
  6566  00F350  6E08               	movwf	check_food@returnValue+1,c
  6567  00F352  0E1A               	movlw	26
  6568  00F354  D07D               	goto	L47
  6569  00F356                     
  6570                           ;standbyMode.c: 245: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6571  00F356  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6572  00F35A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6573  00F35E  04DE               	decf	postinc2,w,c
  6574  00F360  10DE               	iorwf	postinc2,w,c
  6575  00F362  A4D8               	btfss	status,2,c
  6576  00F364  D0B6               	goto	l136
  6577  00F366  EE20 F002          	lfsr	2,2
  6578  00F36A  5003               	movf	check_food@foodInput,w,c
  6579  00F36C  26D9               	addwf	fsr2l,f,c
  6580  00F36E  5004               	movf	check_food@foodInput+1,w,c
  6581  00F370  22DA               	addwfc	fsr2h,f,c
  6582  00F372  04DE               	decf	postinc2,w,c
  6583  00F374  10DE               	iorwf	postinc2,w,c
  6584  00F376  A4D8               	btfss	status,2,c
  6585  00F378  D0AC               	goto	l136
  6586  00F37A  EE20 F004          	lfsr	2,4
  6587  00F37E  5003               	movf	check_food@foodInput,w,c
  6588  00F380  26D9               	addwf	fsr2l,f,c
  6589  00F382  5004               	movf	check_food@foodInput+1,w,c
  6590  00F384  22DA               	addwfc	fsr2h,f,c
  6591  00F386  04DE               	decf	postinc2,w,c
  6592  00F388  10DE               	iorwf	postinc2,w,c
  6593  00F38A  A4D8               	btfss	status,2,c
  6594  00F38C  D0A2               	goto	l136
  6595  00F38E  EE20 F006          	lfsr	2,6
  6596  00F392  5003               	movf	check_food@foodInput,w,c
  6597  00F394  26D9               	addwf	fsr2l,f,c
  6598  00F396  5004               	movf	check_food@foodInput+1,w,c
  6599  00F398  22DA               	addwfc	fsr2h,f,c
  6600  00F39A  04DE               	decf	postinc2,w,c
  6601  00F39C  10DE               	iorwf	postinc2,w,c
  6602  00F39E  A4D8               	btfss	status,2,c
  6603  00F3A0  D098               	goto	l136
  6604                           
  6605                           ;standbyMode.c: 246: returnValue = 27;
  6606  00F3A2  0E00               	movlw	0
  6607  00F3A4  6E08               	movwf	check_food@returnValue+1,c
  6608  00F3A6  0E1B               	movlw	27
  6609  00F3A8  D053               	goto	L47
  6610  00F3AA                     
  6611                           ;standbyMode.c: 252: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6612  00F3AA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6613  00F3AE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6614  00F3B2  04DE               	decf	postinc2,w,c
  6615  00F3B4  10DE               	iorwf	postinc2,w,c
  6616  00F3B6  A4D8               	btfss	status,2,c
  6617  00F3B8  D08C               	goto	l136
  6618  00F3BA  EE20 F002          	lfsr	2,2
  6619  00F3BE  5003               	movf	check_food@foodInput,w,c
  6620  00F3C0  26D9               	addwf	fsr2l,f,c
  6621  00F3C2  5004               	movf	check_food@foodInput+1,w,c
  6622  00F3C4  22DA               	addwfc	fsr2h,f,c
  6623  00F3C6  04DE               	decf	postinc2,w,c
  6624  00F3C8  10DE               	iorwf	postinc2,w,c
  6625  00F3CA  A4D8               	btfss	status,2,c
  6626  00F3CC  D082               	goto	l136
  6627  00F3CE  EE20 F004          	lfsr	2,4
  6628  00F3D2  5003               	movf	check_food@foodInput,w,c
  6629  00F3D4  26D9               	addwf	fsr2l,f,c
  6630  00F3D6  5004               	movf	check_food@foodInput+1,w,c
  6631  00F3D8  22DA               	addwfc	fsr2h,f,c
  6632  00F3DA  04DE               	decf	postinc2,w,c
  6633  00F3DC  10DE               	iorwf	postinc2,w,c
  6634  00F3DE  A4D8               	btfss	status,2,c
  6635  00F3E0  D078               	goto	l136
  6636  00F3E2  EE20 F006          	lfsr	2,6
  6637  00F3E6  5003               	movf	check_food@foodInput,w,c
  6638  00F3E8  26D9               	addwf	fsr2l,f,c
  6639  00F3EA  5004               	movf	check_food@foodInput+1,w,c
  6640  00F3EC  22DA               	addwfc	fsr2h,f,c
  6641  00F3EE  04DE               	decf	postinc2,w,c
  6642  00F3F0  10DE               	iorwf	postinc2,w,c
  6643  00F3F2  A4D8               	btfss	status,2,c
  6644  00F3F4  D06E               	goto	l136
  6645                           
  6646                           ;standbyMode.c: 253: returnValue = 28;
  6647  00F3F6  0E00               	movlw	0
  6648  00F3F8  6E08               	movwf	check_food@returnValue+1,c
  6649  00F3FA  0E1C               	movlw	28
  6650  00F3FC  D029               	goto	L47
  6651  00F3FE                     
  6652                           ;standbyMode.c: 259: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  6653  00F3FE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6654  00F402  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6655  00F406  04DE               	decf	postinc2,w,c
  6656  00F408  10DE               	iorwf	postinc2,w,c
  6657  00F40A  A4D8               	btfss	status,2,c
  6658  00F40C  D062               	goto	l136
  6659  00F40E  EE20 F002          	lfsr	2,2
  6660  00F412  5003               	movf	check_food@foodInput,w,c
  6661  00F414  26D9               	addwf	fsr2l,f,c
  6662  00F416  5004               	movf	check_food@foodInput+1,w,c
  6663  00F418  22DA               	addwfc	fsr2h,f,c
  6664  00F41A  04DE               	decf	postinc2,w,c
  6665  00F41C  10DE               	iorwf	postinc2,w,c
  6666  00F41E  A4D8               	btfss	status,2,c
  6667  00F420  D058               	goto	l136
  6668  00F422  EE20 F004          	lfsr	2,4
  6669  00F426  5003               	movf	check_food@foodInput,w,c
  6670  00F428  26D9               	addwf	fsr2l,f,c
  6671  00F42A  5004               	movf	check_food@foodInput+1,w,c
  6672  00F42C  22DA               	addwfc	fsr2h,f,c
  6673  00F42E  04DE               	decf	postinc2,w,c
  6674  00F430  10DE               	iorwf	postinc2,w,c
  6675  00F432  A4D8               	btfss	status,2,c
  6676  00F434  D04E               	goto	l136
  6677  00F436  EE20 F006          	lfsr	2,6
  6678  00F43A  5003               	movf	check_food@foodInput,w,c
  6679  00F43C  26D9               	addwf	fsr2l,f,c
  6680  00F43E  5004               	movf	check_food@foodInput+1,w,c
  6681  00F440  22DA               	addwfc	fsr2h,f,c
  6682  00F442  04DE               	decf	postinc2,w,c
  6683  00F444  10DE               	iorwf	postinc2,w,c
  6684  00F446  A4D8               	btfss	status,2,c
  6685  00F448  D044               	goto	l136
  6686                           
  6687                           ;standbyMode.c: 260: returnValue = 29;
  6688  00F44A  0E00               	movlw	0
  6689  00F44C  6E08               	movwf	check_food@returnValue+1,c
  6690  00F44E  0E1D               	movlw	29
  6691  00F450                     L47:
  6692  00F450  6E07               	movwf	check_food@returnValue,c
  6693                           
  6694                           ;standbyMode.c: 267: }
  6695                           
  6696                           ;standbyMode.c: 266: break;
  6697                           
  6698                           ;standbyMode.c: 265: default:
  6699                           
  6700                           ;standbyMode.c: 261: }
  6701                           ;standbyMode.c: 262: break;
  6702  00F452  D03F               	goto	l136
  6703  00F454                     l131:
  6704  00F454  C001  F005         	movff	check_food@sum,??_check_food
  6705  00F458  C002  F006         	movff	check_food@sum+1,??_check_food+1
  6706                           
  6707                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6708                           ; Switch size 1, requested type "space"
  6709                           ; Number of cases is 1, Range of values is 0 to 0
  6710                           ; switch strategies available:
  6711                           ; Name         Instructions Cycles
  6712                           ; simple_byte            4     3 (average)
  6713                           ;	Chosen strategy is simple_byte
  6714  00F45C  5006               	movf	??_check_food+1,w,c
  6715  00F45E  0A00               	xorlw	0	; case 0
  6716  00F460  A4D8               	btfss	status,2,c
  6717  00F462  D037               	goto	l136
  6718                           
  6719                           ; Switch size 1, requested type "space"
  6720                           ; Number of cases is 18, Range of values is 3 to 43
  6721                           ; switch strategies available:
  6722                           ; Name         Instructions Cycles
  6723                           ; simple_byte           55    28 (average)
  6724                           ;	Chosen strategy is simple_byte
  6725  00F464  5005               	movf	??_check_food,w,c
  6726  00F466  0A03               	xorlw	3	; case 3
  6727  00F468  B4D8               	btfsc	status,2,c
  6728  00F46A  D424               	goto	l132
  6729  00F46C  0A04               	xorlw	4	; case 7
  6730  00F46E  B4D8               	btfsc	status,2,c
  6731  00F470  D436               	goto	l137
  6732  00F472  0A0D               	xorlw	13	; case 10
  6733  00F474  B4D8               	btfsc	status,2,c
  6734  00F476  D466               	goto	l145
  6735  00F478  0A06               	xorlw	6	; case 12
  6736  00F47A  B4D8               	btfsc	status,2,c
  6737  00F47C  D445               	goto	l141
  6738  00F47E  0A01               	xorlw	1	; case 13
  6739  00F480  B4D8               	btfsc	status,2,c
  6740  00F482  D4E2               	goto	l157
  6741  00F484  0A02               	xorlw	2	; case 15
  6742  00F486  B4D8               	btfsc	status,2,c
  6743  00F488  D487               	goto	l147
  6744  00F48A  0A1E               	xorlw	30	; case 17
  6745  00F48C  B4D8               	btfsc	status,2,c
  6746  00F48E  D532               	goto	l167
  6747  00F490  0A03               	xorlw	3	; case 18
  6748  00F492  B4D8               	btfsc	status,2,c
  6749  00F494  D504               	goto	l162
  6750  00F496  0A01               	xorlw	1	; case 19
  6751  00F498  B4D8               	btfsc	status,2,c
  6752  00F49A  D4AA               	goto	l152
  6753  00F49C  0A05               	xorlw	5	; case 22
  6754  00F49E  B4D8               	btfsc	status,2,c
  6755  00F4A0  D5D5               	goto	l180
  6756  00F4A2  0A0F               	xorlw	15	; case 25
  6757  00F4A4  B4D8               	btfsc	status,2,c
  6758  00F4A6  D703               	goto	l201
  6759  00F4A8  0A03               	xorlw	3	; case 26
  6760  00F4AA  B4D8               	btfsc	status,2,c
  6761  00F4AC  D652               	goto	l188
  6762  00F4AE  0A01               	xorlw	1	; case 27
  6763  00F4B0  B4D8               	btfsc	status,2,c
  6764  00F4B2  D549               	goto	l172
  6765  00F4B4  0A06               	xorlw	6	; case 29
  6766  00F4B6  B4D8               	btfsc	status,2,c
  6767  00F4B8  D724               	goto	l203
  6768  00F4BA  0A02               	xorlw	2	; case 31
  6769  00F4BC  B4D8               	btfsc	status,2,c
  6770  00F4BE  D674               	goto	l193
  6771  00F4C0  0A3D               	xorlw	61	; case 34
  6772  00F4C2  B4D8               	btfsc	status,2,c
  6773  00F4C4  D748               	goto	l205
  6774  00F4C6  0A05               	xorlw	5	; case 39
  6775  00F4C8  B4D8               	btfsc	status,2,c
  6776  00F4CA  D76F               	goto	l207
  6777  00F4CC  0A0C               	xorlw	12	; case 43
  6778  00F4CE  B4D8               	btfsc	status,2,c
  6779  00F4D0  D796               	goto	l209
  6780  00F4D2                     l136:
  6781                           
  6782                           ;standbyMode.c: 268: return returnValue;
  6783  00F4D2  C007  F001         	movff	check_food@returnValue,?_check_food
  6784  00F4D6  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  6785  00F4DA  0012               	return		;funcret
  6786  00F4DC                     __end_of_check_food:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           intcon	equ	0xFF2
  6795                           postinc0	equ	0xFEE
  6796                           wreg	equ	0xFE8
  6797                           plusw1	equ	0xFE3
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           plusw2	equ	0xFDB
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _diet_press *****************
  6806 ;; Defined at:
  6807 ;;		line 634 in file "standbyMode.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  drawer          2   30[COMRAM] unsigned int 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  keypress        1   44[COMRAM] unsigned char 
  6812 ;;  dietTable       8   45[COMRAM] unsigned int [4]
  6813 ;;  sum             2   42[COMRAM] unsigned int 
  6814 ;;  count           2   40[COMRAM] unsigned int 
  6815 ;;  backCheck       2   38[COMRAM] unsigned int 
  6816 ;;  i               2   36[COMRAM] unsigned int 
  6817 ;;  previous        2   34[COMRAM] unsigned int 
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  2   30[COMRAM] unsigned int 
  6820 ;; Registers used:
  6821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;Total ram usage:       23 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    3
  6834 ;; This function calls:
  6835 ;;		_lcdInst
  6836 ;;		_printf
  6837 ;;		_putch
  6838 ;; This function is called by:
  6839 ;;		_standbyMode
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text13
  6844  00E784                     __ptext13:
  6845                           	opt stack 0
  6846  00E784                     _diet_press:
  6847                           	opt stack 26
  6848                           
  6849                           ;incstack = 0
  6850                           ;standbyMode.c: 637: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  6851  00E784  0E01               	movlw	1
  6852  00E786  ECC4  F06B         	call	_lcdInst
  6853  00E78A  0EC3               	movlw	195
  6854  00E78C  6E21               	movwf	??_diet_press& (0+255),c
  6855  00E78E  0ECD               	movlw	205
  6856  00E790                     u6507:
  6857  00E790  2EE8               	decfsz	wreg,f,c
  6858  00E792  D7FE               	bra	u6507
  6859  00E794  2E21               	decfsz	??_diet_press& (0+255),f,c
  6860  00E796  D7FC               	bra	u6507
  6861  00E798  F000               	nop	
  6862                           
  6863                           ;standbyMode.c: 638: printf("Drawer %i diet:", drawer);
  6864  00E79A  0E73               	movlw	low STR_33
  6865  00E79C  6E0D               	movwf	printf@f,c
  6866  00E79E  0EFE               	movlw	high STR_33
  6867  00E7A0  6E0E               	movwf	printf@f+1,c
  6868  00E7A2  C01F  F00F         	movff	diet_press@drawer,?_printf+2
  6869  00E7A6  C020  F010         	movff	diet_press@drawer+1,?_printf+3
  6870  00E7AA  ECD9  F06D         	call	_printf	;wreg free
  6871                           
  6872                           ;standbyMode.c: 639: lcdInst(0xC0);;
  6873  00E7AE  0EC0               	movlw	192
  6874  00E7B0  ECC4  F06B         	call	_lcdInst
  6875                           
  6876                           ;standbyMode.c: 641: unsigned int count = 0;
  6877  00E7B4  0E00               	movlw	0
  6878  00E7B6  6E2A               	movwf	diet_press@count+1,c
  6879  00E7B8  0E00               	movlw	0
  6880  00E7BA  6E29               	movwf	diet_press@count,c
  6881                           
  6882                           ;standbyMode.c: 642: unsigned int previous = 0;
  6883  00E7BC  0E00               	movlw	0
  6884  00E7BE  6E24               	movwf	diet_press@previous+1,c
  6885  00E7C0  0E00               	movlw	0
  6886  00E7C2  6E23               	movwf	diet_press@previous,c
  6887                           
  6888                           ;standbyMode.c: 643: unsigned int sum = 0;
  6889  00E7C4  0E00               	movlw	0
  6890  00E7C6  6E2C               	movwf	diet_press@sum+1,c
  6891  00E7C8  0E00               	movlw	0
  6892  00E7CA  6E2B               	movwf	diet_press@sum,c
  6893                           
  6894                           ;standbyMode.c: 644: unsigned int i = 0;
  6895  00E7CC  0E00               	movlw	0
  6896  00E7CE  6E26               	movwf	diet_press@i+1,c
  6897  00E7D0  0E00               	movlw	0
  6898  00E7D2  6E25               	movwf	diet_press@i,c
  6899                           
  6900                           ;standbyMode.c: 645: unsigned int dietTable[4] = {0, 0, 0, 0};
  6901  00E7D4  EE20  F06D         	lfsr	2,diet_press@F3095
  6902  00E7D8  EE10  F02E         	lfsr	1,diet_press@dietTable
  6903  00E7DC  0E07               	movlw	7
  6904  00E7DE                     u4361:
  6905  00E7DE  CFDB FFE3          	movff	plusw2,plusw1
  6906  00E7E2  06E8               	decf	wreg,f,c
  6907  00E7E4  E2FC               	bc	u4361
  6908                           
  6909                           ;standbyMode.c: 646: unsigned int backCheck = 0;
  6910  00E7E6  0E00               	movlw	0
  6911  00E7E8  6E28               	movwf	diet_press@backCheck+1,c
  6912  00E7EA  0E00               	movlw	0
  6913  00E7EC  6E27               	movwf	diet_press@backCheck,c
  6914  00E7EE                     l334:
  6915  00E7EE  A281               	btfss	3969,1,c	;volatile
  6916  00E7F0  D7FE               	goto	l333
  6917                           
  6918                           ;standbyMode.c: 650: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6919  00E7F2  3881               	swapf	3969,w,c	;volatile
  6920  00E7F4  0B0F               	andlw	15
  6921  00E7F6  0B0F               	andlw	15
  6922  00E7F8  6E2D               	movwf	diet_press@keypress,c
  6923  00E7FA  B281               	btfsc	3969,1,c	;volatile
  6924  00E7FC  D7FE               	goto	l338
  6925                           
  6926                           ;standbyMode.c: 653: if(keypress == 15){
  6927  00E7FE  0E0F               	movlw	15
  6928  00E800  182D               	xorwf	diet_press@keypress,w,c
  6929  00E802  B4D8               	btfsc	status,2,c
  6930  00E804  D080               	goto	l341
  6931                           
  6932                           ;standbyMode.c: 656: else if (keypress == 14){
  6933                           
  6934                           ;standbyMode.c: 655: }
  6935                           
  6936                           ;standbyMode.c: 654: break;
  6937  00E806  0E0E               	movlw	14
  6938  00E808  182D               	xorwf	diet_press@keypress,w,c
  6939  00E80A  A4D8               	btfss	status,2,c
  6940  00E80C  D005               	goto	l343
  6941                           
  6942                           ;standbyMode.c: 657: backCheck = 1;
  6943  00E80E  0E00               	movlw	0
  6944  00E810  6E28               	movwf	diet_press@backCheck+1,c
  6945  00E812  0E01               	movlw	1
  6946  00E814  6E27               	movwf	diet_press@backCheck,c
  6947                           
  6948                           ;standbyMode.c: 658: break;
  6949  00E816  D077               	goto	l341
  6950  00E818                     l343:
  6951                           
  6952                           ;standbyMode.c: 660: else if (keypress == 12){
  6953  00E818  0E0C               	movlw	12
  6954  00E81A  182D               	xorwf	diet_press@keypress,w,c
  6955  00E81C  A4D8               	btfss	status,2,c
  6956  00E81E  D02D               	goto	l345
  6957                           
  6958                           ;standbyMode.c: 661: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6959  00E820  0E01               	movlw	1
  6960  00E822  ECC4  F06B         	call	_lcdInst
  6961  00E826  0EC3               	movlw	195
  6962  00E828  6E21               	movwf	??_diet_press& (0+255),c
  6963  00E82A  0ECD               	movlw	205
  6964  00E82C                     u6517:
  6965  00E82C  2EE8               	decfsz	wreg,f,c
  6966  00E82E  D7FE               	bra	u6517
  6967  00E830  2E21               	decfsz	??_diet_press& (0+255),f,c
  6968  00E832  D7FC               	bra	u6517
  6969  00E834  F000               	nop	
  6970                           
  6971                           ;standbyMode.c: 662: printf("Drawer %i diet:", drawer);
  6972  00E836  0E73               	movlw	low STR_33
  6973  00E838  6E0D               	movwf	printf@f,c
  6974  00E83A  0EFE               	movlw	high STR_33
  6975  00E83C  6E0E               	movwf	printf@f+1,c
  6976  00E83E  C01F  F00F         	movff	diet_press@drawer,?_printf+2
  6977  00E842  C020  F010         	movff	diet_press@drawer+1,?_printf+3
  6978  00E846  ECD9  F06D         	call	_printf	;wreg free
  6979                           
  6980                           ;standbyMode.c: 663: lcdInst(0xC0);;
  6981  00E84A  0EC0               	movlw	192
  6982  00E84C  ECC4  F06B         	call	_lcdInst
  6983                           
  6984                           ;standbyMode.c: 664: count = 0;
  6985  00E850  0E00               	movlw	0
  6986  00E852  6E2A               	movwf	diet_press@count+1,c
  6987  00E854  0E00               	movlw	0
  6988  00E856  6E29               	movwf	diet_press@count,c
  6989                           
  6990                           ;standbyMode.c: 665: dietTable[0] = 0;
  6991  00E858  0E00               	movlw	0
  6992  00E85A  6E2F               	movwf	diet_press@dietTable+1,c
  6993  00E85C  0E00               	movlw	0
  6994  00E85E  6E2E               	movwf	diet_press@dietTable,c
  6995                           
  6996                           ;standbyMode.c: 666: dietTable[1] = 0;
  6997  00E860  0E00               	movlw	0
  6998  00E862  6E31               	movwf	diet_press@dietTable+3,c
  6999  00E864  0E00               	movlw	0
  7000  00E866  6E30               	movwf	diet_press@dietTable+2,c
  7001                           
  7002                           ;standbyMode.c: 667: dietTable[2] = 0;
  7003  00E868  0E00               	movlw	0
  7004  00E86A  6E33               	movwf	diet_press@dietTable+5,c
  7005  00E86C  0E00               	movlw	0
  7006  00E86E  6E32               	movwf	diet_press@dietTable+4,c
  7007                           
  7008                           ;standbyMode.c: 668: dietTable[3] = 0;
  7009  00E870  0E00               	movlw	0
  7010  00E872  6E35               	movwf	diet_press@dietTable+7,c
  7011  00E874  0E00               	movlw	0
  7012  00E876  6E34               	movwf	diet_press@dietTable+6,c
  7013                           
  7014                           ;standbyMode.c: 669: }
  7015  00E878  D7BA               	goto	l333
  7016  00E87A                     l345:
  7017                           
  7018                           ;standbyMode.c: 670: else if (count <= 3){
  7019  00E87A  502A               	movf	diet_press@count+1,w,c
  7020  00E87C  E1B8               	bnz	l334
  7021  00E87E  0E04               	movlw	4
  7022  00E880  5C29               	subwf	diet_press@count,w,c
  7023  00E882  B0D8               	btfsc	status,0,c
  7024  00E884  D7B4               	goto	l333
  7025                           
  7026                           ;standbyMode.c: 671: if (keypress == 3 || keypress == 7){
  7027  00E886  0E03               	movlw	3
  7028  00E888  182D               	xorwf	diet_press@keypress,w,c
  7029  00E88A  B4D8               	btfsc	status,2,c
  7030  00E88C  D004               	goto	u4440
  7031  00E88E  0E07               	movlw	7
  7032  00E890  182D               	xorwf	diet_press@keypress,w,c
  7033  00E892  A4D8               	btfss	status,2,c
  7034  00E894  D013               	goto	l348
  7035  00E896                     u4440:
  7036                           
  7037                           ;standbyMode.c: 672: putch(input[keypress]);
  7038  00E896  502D               	movf	diet_press@keypress,w,c
  7039  00E898  0D01               	mullw	1
  7040  00E89A  0E8A               	movlw	low _input
  7041  00E89C  24F3               	addwf	prodl,w,c
  7042  00E89E  6EF6               	movwf	tblptrl,c
  7043  00E8A0  0EFD               	movlw	high _input
  7044  00E8A2  20F4               	addwfc	prodh,w,c
  7045  00E8A4  6EF7               	movwf	tblptrh,c
  7046  00E8A6                     	if	0	;There are less than 3 active tblptr bytes
  7047  00E8A6                     	endif
  7048  00E8A6  0008               	tblrd		*
  7049  00E8A8  50F5               	movf	tablat,w,c
  7050  00E8AA  ECCE  F06B         	call	_putch
  7051                           
  7052                           ;standbyMode.c: 673: dietTable[count] = keypress;
  7053  00E8AE  502D               	movf	diet_press@keypress,w,c
  7054  00E8B0  6E21               	movwf	??_diet_press& (0+255),c
  7055  00E8B2  6A22               	clrf	(??_diet_press+1)& (0+255),c
  7056  00E8B4  D01A               	goto	L66
  7057  00E8B6                     l3662:
  7058                           
  7059                           ;standbyMode.c: 674: count += 1;
  7060  00E8B6  4A29               	infsnz	diet_press@count,f,c
  7061  00E8B8  2A2A               	incf	diet_press@count+1,f,c
  7062                           
  7063                           ;standbyMode.c: 675: }
  7064  00E8BA  D799               	goto	l333
  7065  00E8BC                     l348:
  7066                           
  7067                           ;standbyMode.c: 676: else if (keypress == 11){
  7068  00E8BC  0E0B               	movlw	11
  7069  00E8BE  182D               	xorwf	diet_press@keypress,w,c
  7070  00E8C0  A4D8               	btfss	status,2,c
  7071  00E8C2  D795               	goto	l333
  7072                           
  7073                           ;standbyMode.c: 677: putch(input[keypress]);
  7074  00E8C4  502D               	movf	diet_press@keypress,w,c
  7075  00E8C6  0D01               	mullw	1
  7076  00E8C8  0E8A               	movlw	low _input
  7077  00E8CA  24F3               	addwf	prodl,w,c
  7078  00E8CC  6EF6               	movwf	tblptrl,c
  7079  00E8CE  0EFD               	movlw	high _input
  7080  00E8D0  20F4               	addwfc	prodh,w,c
  7081  00E8D2  6EF7               	movwf	tblptrh,c
  7082  00E8D4                     	if	0	;There are less than 3 active tblptr bytes
  7083  00E8D4                     	endif
  7084  00E8D4  0008               	tblrd		*
  7085  00E8D6  50F5               	movf	tablat,w,c
  7086  00E8D8  ECCE  F06B         	call	_putch
  7087                           
  7088                           ;standbyMode.c: 678: dietTable[count] = keypress + 1;
  7089  00E8DC  502D               	movf	diet_press@keypress,w,c
  7090  00E8DE  6E21               	movwf	??_diet_press& (0+255),c
  7091  00E8E0  6A22               	clrf	(??_diet_press+1)& (0+255),c
  7092  00E8E2  0E01               	movlw	1
  7093  00E8E4  2621               	addwf	??_diet_press,f,c
  7094  00E8E6  0E00               	movlw	0
  7095  00E8E8  2222               	addwfc	??_diet_press+1,f,c
  7096  00E8EA                     L66:
  7097  00E8EA  90D8               	bcf	status,0,c
  7098  00E8EC  3429               	rlcf	diet_press@count,w,c
  7099  00E8EE  6ED9               	movwf	fsr2l,c
  7100  00E8F0  342A               	rlcf	diet_press@count+1,w,c
  7101  00E8F2  6EDA               	movwf	fsr2h,c
  7102  00E8F4  0E2E               	movlw	low diet_press@dietTable
  7103  00E8F6  26D9               	addwf	fsr2l,f,c
  7104  00E8F8  0E00               	movlw	high diet_press@dietTable
  7105  00E8FA  22DA               	addwfc	fsr2h,f,c
  7106  00E8FC  C021  FFDE         	movff	??_diet_press,postinc2
  7107  00E900  C022  FFDD         	movff	??_diet_press+1,postdec2
  7108  00E904  D7D8               	goto	l3662
  7109  00E906                     l341:
  7110                           
  7111                           ;standbyMode.c: 680: }
  7112                           ;standbyMode.c: 681: }
  7113                           ;standbyMode.c: 682: }
  7114                           ;standbyMode.c: 684: if (backCheck == 1){
  7115  00E906  0427               	decf	diet_press@backCheck,w,c
  7116  00E908  1028               	iorwf	diet_press@backCheck+1,w,c
  7117  00E90A  A4D8               	btfss	status,2,c
  7118  00E90C  D004               	goto	l354
  7119                           
  7120                           ;standbyMode.c: 685: sum = 100;
  7121  00E90E  0E00               	movlw	0
  7122  00E910  6E2C               	movwf	diet_press@sum+1,c
  7123  00E912  0E64               	movlw	100
  7124  00E914  D199               	goto	L65
  7125  00E916                     l354:
  7126                           
  7127                           ;standbyMode.c: 689: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7128  00E916  0E0C               	movlw	12
  7129  00E918  182E               	xorwf	diet_press@dietTable,w,c
  7130  00E91A  102F               	iorwf	diet_press@dietTable+1,w,c
  7131  00E91C  A4D8               	btfss	status,2,c
  7132  00E91E  D010               	goto	l356
  7133  00E920  5030               	movf	diet_press@dietTable+2,w,c
  7134  00E922  1031               	iorwf	diet_press@dietTable+3,w,c
  7135  00E924  A4D8               	btfss	status,2,c
  7136  00E926  D00C               	goto	l356
  7137  00E928  5032               	movf	diet_press@dietTable+4,w,c
  7138  00E92A  1033               	iorwf	diet_press@dietTable+5,w,c
  7139  00E92C  A4D8               	btfss	status,2,c
  7140  00E92E  D008               	goto	l356
  7141  00E930  5034               	movf	diet_press@dietTable+6,w,c
  7142  00E932  1035               	iorwf	diet_press@dietTable+7,w,c
  7143  00E934  A4D8               	btfss	status,2,c
  7144  00E936  D004               	goto	l356
  7145                           
  7146                           ;standbyMode.c: 690: sum = 12;
  7147  00E938  0E00               	movlw	0
  7148  00E93A  6E2C               	movwf	diet_press@sum+1,c
  7149  00E93C  0E0C               	movlw	12
  7150  00E93E  D184               	goto	L65
  7151  00E940                     l356:
  7152                           
  7153                           ;standbyMode.c: 694: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7154  00E940  0E03               	movlw	3
  7155  00E942  182E               	xorwf	diet_press@dietTable,w,c
  7156  00E944  102F               	iorwf	diet_press@dietTable+1,w,c
  7157  00E946  A4D8               	btfss	status,2,c
  7158  00E948  D010               	goto	l358
  7159  00E94A  5030               	movf	diet_press@dietTable+2,w,c
  7160  00E94C  1031               	iorwf	diet_press@dietTable+3,w,c
  7161  00E94E  A4D8               	btfss	status,2,c
  7162  00E950  D00C               	goto	l358
  7163  00E952  5032               	movf	diet_press@dietTable+4,w,c
  7164  00E954  1033               	iorwf	diet_press@dietTable+5,w,c
  7165  00E956  A4D8               	btfss	status,2,c
  7166  00E958  D008               	goto	l358
  7167  00E95A  5034               	movf	diet_press@dietTable+6,w,c
  7168  00E95C  1035               	iorwf	diet_press@dietTable+7,w,c
  7169  00E95E  A4D8               	btfss	status,2,c
  7170  00E960  D004               	goto	l358
  7171                           
  7172                           ;standbyMode.c: 695: sum = 3;
  7173  00E962  0E00               	movlw	0
  7174  00E964  6E2C               	movwf	diet_press@sum+1,c
  7175  00E966  0E03               	movlw	3
  7176  00E968  D16F               	goto	L65
  7177  00E96A                     l358:
  7178                           
  7179                           ;standbyMode.c: 699: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7180  00E96A  0E07               	movlw	7
  7181  00E96C  182E               	xorwf	diet_press@dietTable,w,c
  7182  00E96E  102F               	iorwf	diet_press@dietTable+1,w,c
  7183  00E970  A4D8               	btfss	status,2,c
  7184  00E972  D010               	goto	l360
  7185  00E974  5030               	movf	diet_press@dietTable+2,w,c
  7186  00E976  1031               	iorwf	diet_press@dietTable+3,w,c
  7187  00E978  A4D8               	btfss	status,2,c
  7188  00E97A  D00C               	goto	l360
  7189  00E97C  5032               	movf	diet_press@dietTable+4,w,c
  7190  00E97E  1033               	iorwf	diet_press@dietTable+5,w,c
  7191  00E980  A4D8               	btfss	status,2,c
  7192  00E982  D008               	goto	l360
  7193  00E984  5034               	movf	diet_press@dietTable+6,w,c
  7194  00E986  1035               	iorwf	diet_press@dietTable+7,w,c
  7195  00E988  A4D8               	btfss	status,2,c
  7196  00E98A  D004               	goto	l360
  7197                           
  7198                           ;standbyMode.c: 700: sum = 7;
  7199  00E98C  0E00               	movlw	0
  7200  00E98E  6E2C               	movwf	diet_press@sum+1,c
  7201  00E990  0E07               	movlw	7
  7202  00E992  D15A               	goto	L65
  7203  00E994                     l360:
  7204                           
  7205                           ;standbyMode.c: 704: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7206  00E994  0E03               	movlw	3
  7207  00E996  182E               	xorwf	diet_press@dietTable,w,c
  7208  00E998  102F               	iorwf	diet_press@dietTable+1,w,c
  7209  00E99A  A4D8               	btfss	status,2,c
  7210  00E99C  D011               	goto	l362
  7211  00E99E  0E07               	movlw	7
  7212  00E9A0  1830               	xorwf	diet_press@dietTable+2,w,c
  7213  00E9A2  1031               	iorwf	diet_press@dietTable+3,w,c
  7214  00E9A4  A4D8               	btfss	status,2,c
  7215  00E9A6  D00C               	goto	l362
  7216  00E9A8  5032               	movf	diet_press@dietTable+4,w,c
  7217  00E9AA  1033               	iorwf	diet_press@dietTable+5,w,c
  7218  00E9AC  A4D8               	btfss	status,2,c
  7219  00E9AE  D008               	goto	l362
  7220  00E9B0  5034               	movf	diet_press@dietTable+6,w,c
  7221  00E9B2  1035               	iorwf	diet_press@dietTable+7,w,c
  7222  00E9B4  A4D8               	btfss	status,2,c
  7223  00E9B6  D004               	goto	l362
  7224                           
  7225                           ;standbyMode.c: 705: sum = 10;
  7226  00E9B8  0E00               	movlw	0
  7227  00E9BA  6E2C               	movwf	diet_press@sum+1,c
  7228  00E9BC  0E0A               	movlw	10
  7229  00E9BE  D144               	goto	L65
  7230  00E9C0                     l362:
  7231                           
  7232                           ;standbyMode.c: 709: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7233  00E9C0  0E03               	movlw	3
  7234  00E9C2  182E               	xorwf	diet_press@dietTable,w,c
  7235  00E9C4  102F               	iorwf	diet_press@dietTable+1,w,c
  7236  00E9C6  A4D8               	btfss	status,2,c
  7237  00E9C8  D011               	goto	l364
  7238  00E9CA  0E0C               	movlw	12
  7239  00E9CC  1830               	xorwf	diet_press@dietTable+2,w,c
  7240  00E9CE  1031               	iorwf	diet_press@dietTable+3,w,c
  7241  00E9D0  A4D8               	btfss	status,2,c
  7242  00E9D2  D00C               	goto	l364
  7243  00E9D4  5032               	movf	diet_press@dietTable+4,w,c
  7244  00E9D6  1033               	iorwf	diet_press@dietTable+5,w,c
  7245  00E9D8  A4D8               	btfss	status,2,c
  7246  00E9DA  D008               	goto	l364
  7247  00E9DC  5034               	movf	diet_press@dietTable+6,w,c
  7248  00E9DE  1035               	iorwf	diet_press@dietTable+7,w,c
  7249  00E9E0  A4D8               	btfss	status,2,c
  7250  00E9E2  D004               	goto	l364
  7251                           
  7252                           ;standbyMode.c: 710: sum = 15;
  7253  00E9E4  0E00               	movlw	0
  7254  00E9E6  6E2C               	movwf	diet_press@sum+1,c
  7255  00E9E8  0E0F               	movlw	15
  7256  00E9EA  D12E               	goto	L65
  7257  00E9EC                     l364:
  7258                           
  7259                           ;standbyMode.c: 714: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7260  00E9EC  0E07               	movlw	7
  7261  00E9EE  182E               	xorwf	diet_press@dietTable,w,c
  7262  00E9F0  102F               	iorwf	diet_press@dietTable+1,w,c
  7263  00E9F2  A4D8               	btfss	status,2,c
  7264  00E9F4  D011               	goto	l366
  7265  00E9F6  0E0C               	movlw	12
  7266  00E9F8  1830               	xorwf	diet_press@dietTable+2,w,c
  7267  00E9FA  1031               	iorwf	diet_press@dietTable+3,w,c
  7268  00E9FC  A4D8               	btfss	status,2,c
  7269  00E9FE  D00C               	goto	l366
  7270  00EA00  5032               	movf	diet_press@dietTable+4,w,c
  7271  00EA02  1033               	iorwf	diet_press@dietTable+5,w,c
  7272  00EA04  A4D8               	btfss	status,2,c
  7273  00EA06  D008               	goto	l366
  7274  00EA08  5034               	movf	diet_press@dietTable+6,w,c
  7275  00EA0A  1035               	iorwf	diet_press@dietTable+7,w,c
  7276  00EA0C  A4D8               	btfss	status,2,c
  7277  00EA0E  D004               	goto	l366
  7278                           
  7279                           ;standbyMode.c: 715: sum = 19;
  7280  00EA10  0E00               	movlw	0
  7281  00EA12  6E2C               	movwf	diet_press@sum+1,c
  7282  00EA14  0E13               	movlw	19
  7283  00EA16  D118               	goto	L65
  7284  00EA18                     l366:
  7285                           
  7286                           ;standbyMode.c: 719: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7287  00EA18  0E03               	movlw	3
  7288  00EA1A  182E               	xorwf	diet_press@dietTable,w,c
  7289  00EA1C  102F               	iorwf	diet_press@dietTable+1,w,c
  7290  00EA1E  A4D8               	btfss	status,2,c
  7291  00EA20  D012               	goto	l368
  7292  00EA22  0E03               	movlw	3
  7293  00EA24  1830               	xorwf	diet_press@dietTable+2,w,c
  7294  00EA26  1031               	iorwf	diet_press@dietTable+3,w,c
  7295  00EA28  A4D8               	btfss	status,2,c
  7296  00EA2A  D00D               	goto	l368
  7297  00EA2C  0E07               	movlw	7
  7298  00EA2E  1832               	xorwf	diet_press@dietTable+4,w,c
  7299  00EA30  1033               	iorwf	diet_press@dietTable+5,w,c
  7300  00EA32  A4D8               	btfss	status,2,c
  7301  00EA34  D008               	goto	l368
  7302  00EA36  5034               	movf	diet_press@dietTable+6,w,c
  7303  00EA38  1035               	iorwf	diet_press@dietTable+7,w,c
  7304  00EA3A  A4D8               	btfss	status,2,c
  7305  00EA3C  D004               	goto	l368
  7306                           
  7307                           ;standbyMode.c: 720: sum = 13;
  7308  00EA3E  0E00               	movlw	0
  7309  00EA40  6E2C               	movwf	diet_press@sum+1,c
  7310  00EA42  0E0D               	movlw	13
  7311  00EA44  D101               	goto	L65
  7312  00EA46                     l368:
  7313                           
  7314                           ;standbyMode.c: 724: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7315  00EA46  0E03               	movlw	3
  7316  00EA48  182E               	xorwf	diet_press@dietTable,w,c
  7317  00EA4A  102F               	iorwf	diet_press@dietTable+1,w,c
  7318  00EA4C  A4D8               	btfss	status,2,c
  7319  00EA4E  D012               	goto	l370
  7320  00EA50  0E03               	movlw	3
  7321  00EA52  1830               	xorwf	diet_press@dietTable+2,w,c
  7322  00EA54  1031               	iorwf	diet_press@dietTable+3,w,c
  7323  00EA56  A4D8               	btfss	status,2,c
  7324  00EA58  D00D               	goto	l370
  7325  00EA5A  0E0C               	movlw	12
  7326  00EA5C  1832               	xorwf	diet_press@dietTable+4,w,c
  7327  00EA5E  1033               	iorwf	diet_press@dietTable+5,w,c
  7328  00EA60  A4D8               	btfss	status,2,c
  7329  00EA62  D008               	goto	l370
  7330  00EA64  5034               	movf	diet_press@dietTable+6,w,c
  7331  00EA66  1035               	iorwf	diet_press@dietTable+7,w,c
  7332  00EA68  A4D8               	btfss	status,2,c
  7333  00EA6A  D004               	goto	l370
  7334                           
  7335                           ;standbyMode.c: 725: sum = 18;
  7336  00EA6C  0E00               	movlw	0
  7337  00EA6E  6E2C               	movwf	diet_press@sum+1,c
  7338  00EA70  0E12               	movlw	18
  7339  00EA72  D0EA               	goto	L65
  7340  00EA74                     l370:
  7341                           
  7342                           ;standbyMode.c: 729: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7343  00EA74  0E03               	movlw	3
  7344  00EA76  182E               	xorwf	diet_press@dietTable,w,c
  7345  00EA78  102F               	iorwf	diet_press@dietTable+1,w,c
  7346  00EA7A  A4D8               	btfss	status,2,c
  7347  00EA7C  D012               	goto	l372
  7348  00EA7E  0E07               	movlw	7
  7349  00EA80  1830               	xorwf	diet_press@dietTable+2,w,c
  7350  00EA82  1031               	iorwf	diet_press@dietTable+3,w,c
  7351  00EA84  A4D8               	btfss	status,2,c
  7352  00EA86  D00D               	goto	l372
  7353  00EA88  0E07               	movlw	7
  7354  00EA8A  1832               	xorwf	diet_press@dietTable+4,w,c
  7355  00EA8C  1033               	iorwf	diet_press@dietTable+5,w,c
  7356  00EA8E  A4D8               	btfss	status,2,c
  7357  00EA90  D008               	goto	l372
  7358  00EA92  5034               	movf	diet_press@dietTable+6,w,c
  7359  00EA94  1035               	iorwf	diet_press@dietTable+7,w,c
  7360  00EA96  A4D8               	btfss	status,2,c
  7361  00EA98  D004               	goto	l372
  7362                           
  7363                           ;standbyMode.c: 730: sum = 17;
  7364  00EA9A  0E00               	movlw	0
  7365  00EA9C  6E2C               	movwf	diet_press@sum+1,c
  7366  00EA9E  0E11               	movlw	17
  7367  00EAA0  D0D3               	goto	L65
  7368  00EAA2                     l372:
  7369                           
  7370                           ;standbyMode.c: 734: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7371  00EAA2  0E03               	movlw	3
  7372  00EAA4  182E               	xorwf	diet_press@dietTable,w,c
  7373  00EAA6  102F               	iorwf	diet_press@dietTable+1,w,c
  7374  00EAA8  A4D8               	btfss	status,2,c
  7375  00EAAA  D012               	goto	l374
  7376  00EAAC  0E0C               	movlw	12
  7377  00EAAE  1830               	xorwf	diet_press@dietTable+2,w,c
  7378  00EAB0  1031               	iorwf	diet_press@dietTable+3,w,c
  7379  00EAB2  A4D8               	btfss	status,2,c
  7380  00EAB4  D00D               	goto	l374
  7381  00EAB6  0E0C               	movlw	12
  7382  00EAB8  1832               	xorwf	diet_press@dietTable+4,w,c
  7383  00EABA  1033               	iorwf	diet_press@dietTable+5,w,c
  7384  00EABC  A4D8               	btfss	status,2,c
  7385  00EABE  D008               	goto	l374
  7386  00EAC0  5034               	movf	diet_press@dietTable+6,w,c
  7387  00EAC2  1035               	iorwf	diet_press@dietTable+7,w,c
  7388  00EAC4  A4D8               	btfss	status,2,c
  7389  00EAC6  D004               	goto	l374
  7390                           
  7391                           ;standbyMode.c: 735: sum = 27;
  7392  00EAC8  0E00               	movlw	0
  7393  00EACA  6E2C               	movwf	diet_press@sum+1,c
  7394  00EACC  0E1B               	movlw	27
  7395  00EACE  D0BC               	goto	L65
  7396  00EAD0                     l374:
  7397                           
  7398                           ;standbyMode.c: 739: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7399  00EAD0  0E03               	movlw	3
  7400  00EAD2  182E               	xorwf	diet_press@dietTable,w,c
  7401  00EAD4  102F               	iorwf	diet_press@dietTable+1,w,c
  7402  00EAD6  A4D8               	btfss	status,2,c
  7403  00EAD8  D012               	goto	l376
  7404  00EADA  0E07               	movlw	7
  7405  00EADC  1830               	xorwf	diet_press@dietTable+2,w,c
  7406  00EADE  1031               	iorwf	diet_press@dietTable+3,w,c
  7407  00EAE0  A4D8               	btfss	status,2,c
  7408  00EAE2  D00D               	goto	l376
  7409  00EAE4  0E0C               	movlw	12
  7410  00EAE6  1832               	xorwf	diet_press@dietTable+4,w,c
  7411  00EAE8  1033               	iorwf	diet_press@dietTable+5,w,c
  7412  00EAEA  A4D8               	btfss	status,2,c
  7413  00EAEC  D008               	goto	l376
  7414  00EAEE  5034               	movf	diet_press@dietTable+6,w,c
  7415  00EAF0  1035               	iorwf	diet_press@dietTable+7,w,c
  7416  00EAF2  A4D8               	btfss	status,2,c
  7417  00EAF4  D004               	goto	l376
  7418                           
  7419                           ;standbyMode.c: 740: sum = 22;
  7420  00EAF6  0E00               	movlw	0
  7421  00EAF8  6E2C               	movwf	diet_press@sum+1,c
  7422  00EAFA  0E16               	movlw	22
  7423  00EAFC  D0A5               	goto	L65
  7424  00EAFE                     l376:
  7425                           
  7426                           ;standbyMode.c: 744: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7427  00EAFE  0E07               	movlw	7
  7428  00EB00  182E               	xorwf	diet_press@dietTable,w,c
  7429  00EB02  102F               	iorwf	diet_press@dietTable+1,w,c
  7430  00EB04  A4D8               	btfss	status,2,c
  7431  00EB06  D012               	goto	l378
  7432  00EB08  0E07               	movlw	7
  7433  00EB0A  1830               	xorwf	diet_press@dietTable+2,w,c
  7434  00EB0C  1031               	iorwf	diet_press@dietTable+3,w,c
  7435  00EB0E  A4D8               	btfss	status,2,c
  7436  00EB10  D00D               	goto	l378
  7437  00EB12  0E0C               	movlw	12
  7438  00EB14  1832               	xorwf	diet_press@dietTable+4,w,c
  7439  00EB16  1033               	iorwf	diet_press@dietTable+5,w,c
  7440  00EB18  A4D8               	btfss	status,2,c
  7441  00EB1A  D008               	goto	l378
  7442  00EB1C  5034               	movf	diet_press@dietTable+6,w,c
  7443  00EB1E  1035               	iorwf	diet_press@dietTable+7,w,c
  7444  00EB20  A4D8               	btfss	status,2,c
  7445  00EB22  D004               	goto	l378
  7446                           
  7447                           ;standbyMode.c: 745: sum = 26;
  7448  00EB24  0E00               	movlw	0
  7449  00EB26  6E2C               	movwf	diet_press@sum+1,c
  7450  00EB28  0E1A               	movlw	26
  7451  00EB2A  D08E               	goto	L65
  7452  00EB2C                     l378:
  7453                           
  7454                           ;standbyMode.c: 749: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7455  00EB2C  0E07               	movlw	7
  7456  00EB2E  182E               	xorwf	diet_press@dietTable,w,c
  7457  00EB30  102F               	iorwf	diet_press@dietTable+1,w,c
  7458  00EB32  A4D8               	btfss	status,2,c
  7459  00EB34  D012               	goto	l380
  7460  00EB36  0E0C               	movlw	12
  7461  00EB38  1830               	xorwf	diet_press@dietTable+2,w,c
  7462  00EB3A  1031               	iorwf	diet_press@dietTable+3,w,c
  7463  00EB3C  A4D8               	btfss	status,2,c
  7464  00EB3E  D00D               	goto	l380
  7465  00EB40  0E0C               	movlw	12
  7466  00EB42  1832               	xorwf	diet_press@dietTable+4,w,c
  7467  00EB44  1033               	iorwf	diet_press@dietTable+5,w,c
  7468  00EB46  A4D8               	btfss	status,2,c
  7469  00EB48  D008               	goto	l380
  7470  00EB4A  5034               	movf	diet_press@dietTable+6,w,c
  7471  00EB4C  1035               	iorwf	diet_press@dietTable+7,w,c
  7472  00EB4E  A4D8               	btfss	status,2,c
  7473  00EB50  D004               	goto	l380
  7474                           
  7475                           ;standbyMode.c: 750: sum = 31;
  7476  00EB52  0E00               	movlw	0
  7477  00EB54  6E2C               	movwf	diet_press@sum+1,c
  7478  00EB56  0E1F               	movlw	31
  7479  00EB58  D077               	goto	L65
  7480  00EB5A                     l380:
  7481                           
  7482                           ;standbyMode.c: 754: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  7483  00EB5A  0E03               	movlw	3
  7484  00EB5C  182E               	xorwf	diet_press@dietTable,w,c
  7485  00EB5E  102F               	iorwf	diet_press@dietTable+1,w,c
  7486  00EB60  A4D8               	btfss	status,2,c
  7487  00EB62  D013               	goto	l382
  7488  00EB64  0E03               	movlw	3
  7489  00EB66  1830               	xorwf	diet_press@dietTable+2,w,c
  7490  00EB68  1031               	iorwf	diet_press@dietTable+3,w,c
  7491  00EB6A  A4D8               	btfss	status,2,c
  7492  00EB6C  D00E               	goto	l382
  7493  00EB6E  0E07               	movlw	7
  7494  00EB70  1832               	xorwf	diet_press@dietTable+4,w,c
  7495  00EB72  1033               	iorwf	diet_press@dietTable+5,w,c
  7496  00EB74  A4D8               	btfss	status,2,c
  7497  00EB76  D009               	goto	l382
  7498  00EB78  0E0C               	movlw	12
  7499  00EB7A  1834               	xorwf	diet_press@dietTable+6,w,c
  7500  00EB7C  1035               	iorwf	diet_press@dietTable+7,w,c
  7501  00EB7E  A4D8               	btfss	status,2,c
  7502  00EB80  D004               	goto	l382
  7503                           
  7504                           ;standbyMode.c: 755: sum = 25;
  7505  00EB82  0E00               	movlw	0
  7506  00EB84  6E2C               	movwf	diet_press@sum+1,c
  7507  00EB86  0E19               	movlw	25
  7508  00EB88  D05F               	goto	L65
  7509  00EB8A                     l382:
  7510                           
  7511                           ;standbyMode.c: 759: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  7512  00EB8A  0E03               	movlw	3
  7513  00EB8C  182E               	xorwf	diet_press@dietTable,w,c
  7514  00EB8E  102F               	iorwf	diet_press@dietTable+1,w,c
  7515  00EB90  A4D8               	btfss	status,2,c
  7516  00EB92  D013               	goto	l384
  7517  00EB94  0E07               	movlw	7
  7518  00EB96  1830               	xorwf	diet_press@dietTable+2,w,c
  7519  00EB98  1031               	iorwf	diet_press@dietTable+3,w,c
  7520  00EB9A  A4D8               	btfss	status,2,c
  7521  00EB9C  D00E               	goto	l384
  7522  00EB9E  0E07               	movlw	7
  7523  00EBA0  1832               	xorwf	diet_press@dietTable+4,w,c
  7524  00EBA2  1033               	iorwf	diet_press@dietTable+5,w,c
  7525  00EBA4  A4D8               	btfss	status,2,c
  7526  00EBA6  D009               	goto	l384
  7527  00EBA8  0E0C               	movlw	12
  7528  00EBAA  1834               	xorwf	diet_press@dietTable+6,w,c
  7529  00EBAC  1035               	iorwf	diet_press@dietTable+7,w,c
  7530  00EBAE  A4D8               	btfss	status,2,c
  7531  00EBB0  D004               	goto	l384
  7532                           
  7533                           ;standbyMode.c: 760: sum = 29;
  7534  00EBB2  0E00               	movlw	0
  7535  00EBB4  6E2C               	movwf	diet_press@sum+1,c
  7536  00EBB6  0E1D               	movlw	29
  7537  00EBB8  D047               	goto	L65
  7538  00EBBA                     l384:
  7539                           
  7540                           ;standbyMode.c: 764: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  7541  00EBBA  0E03               	movlw	3
  7542  00EBBC  182E               	xorwf	diet_press@dietTable,w,c
  7543  00EBBE  102F               	iorwf	diet_press@dietTable+1,w,c
  7544  00EBC0  A4D8               	btfss	status,2,c
  7545  00EBC2  D013               	goto	l386
  7546  00EBC4  0E07               	movlw	7
  7547  00EBC6  1830               	xorwf	diet_press@dietTable+2,w,c
  7548  00EBC8  1031               	iorwf	diet_press@dietTable+3,w,c
  7549  00EBCA  A4D8               	btfss	status,2,c
  7550  00EBCC  D00E               	goto	l386
  7551  00EBCE  0E0C               	movlw	12
  7552  00EBD0  1832               	xorwf	diet_press@dietTable+4,w,c
  7553  00EBD2  1033               	iorwf	diet_press@dietTable+5,w,c
  7554  00EBD4  A4D8               	btfss	status,2,c
  7555  00EBD6  D009               	goto	l386
  7556  00EBD8  0E0C               	movlw	12
  7557  00EBDA  1834               	xorwf	diet_press@dietTable+6,w,c
  7558  00EBDC  1035               	iorwf	diet_press@dietTable+7,w,c
  7559  00EBDE  A4D8               	btfss	status,2,c
  7560  00EBE0  D004               	goto	l386
  7561                           
  7562                           ;standbyMode.c: 765: sum = 34;
  7563  00EBE2  0E00               	movlw	0
  7564  00EBE4  6E2C               	movwf	diet_press@sum+1,c
  7565  00EBE6  0E22               	movlw	34
  7566  00EBE8  D02F               	goto	L65
  7567  00EBEA                     l386:
  7568                           
  7569                           ;standbyMode.c: 769: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  7570  00EBEA  0E03               	movlw	3
  7571  00EBEC  182E               	xorwf	diet_press@dietTable,w,c
  7572  00EBEE  102F               	iorwf	diet_press@dietTable+1,w,c
  7573  00EBF0  A4D8               	btfss	status,2,c
  7574  00EBF2  D013               	goto	l388
  7575  00EBF4  0E0C               	movlw	12
  7576  00EBF6  1830               	xorwf	diet_press@dietTable+2,w,c
  7577  00EBF8  1031               	iorwf	diet_press@dietTable+3,w,c
  7578  00EBFA  A4D8               	btfss	status,2,c
  7579  00EBFC  D00E               	goto	l388
  7580  00EBFE  0E0C               	movlw	12
  7581  00EC00  1832               	xorwf	diet_press@dietTable+4,w,c
  7582  00EC02  1033               	iorwf	diet_press@dietTable+5,w,c
  7583  00EC04  A4D8               	btfss	status,2,c
  7584  00EC06  D009               	goto	l388
  7585  00EC08  0E0C               	movlw	12
  7586  00EC0A  1834               	xorwf	diet_press@dietTable+6,w,c
  7587  00EC0C  1035               	iorwf	diet_press@dietTable+7,w,c
  7588  00EC0E  A4D8               	btfss	status,2,c
  7589  00EC10  D004               	goto	l388
  7590                           
  7591                           ;standbyMode.c: 770: sum = 39;
  7592  00EC12  0E00               	movlw	0
  7593  00EC14  6E2C               	movwf	diet_press@sum+1,c
  7594  00EC16  0E27               	movlw	39
  7595  00EC18  D017               	goto	L65
  7596  00EC1A                     l388:
  7597                           
  7598                           ;standbyMode.c: 774: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  7599  00EC1A  0E07               	movlw	7
  7600  00EC1C  182E               	xorwf	diet_press@dietTable,w,c
  7601  00EC1E  102F               	iorwf	diet_press@dietTable+1,w,c
  7602  00EC20  A4D8               	btfss	status,2,c
  7603  00EC22  D014               	goto	l390
  7604  00EC24  0E0C               	movlw	12
  7605  00EC26  1830               	xorwf	diet_press@dietTable+2,w,c
  7606  00EC28  1031               	iorwf	diet_press@dietTable+3,w,c
  7607  00EC2A  A4D8               	btfss	status,2,c
  7608  00EC2C  D00F               	goto	l390
  7609  00EC2E  0E0C               	movlw	12
  7610  00EC30  1832               	xorwf	diet_press@dietTable+4,w,c
  7611  00EC32  1033               	iorwf	diet_press@dietTable+5,w,c
  7612  00EC34  A4D8               	btfss	status,2,c
  7613  00EC36  D00A               	goto	l390
  7614  00EC38  0E0C               	movlw	12
  7615  00EC3A  1834               	xorwf	diet_press@dietTable+6,w,c
  7616  00EC3C  1035               	iorwf	diet_press@dietTable+7,w,c
  7617  00EC3E  A4D8               	btfss	status,2,c
  7618  00EC40  D005               	goto	l390
  7619                           
  7620                           ;standbyMode.c: 775: sum = 43;
  7621  00EC42  0E00               	movlw	0
  7622  00EC44  6E2C               	movwf	diet_press@sum+1,c
  7623  00EC46  0E2B               	movlw	43
  7624  00EC48                     L65:
  7625  00EC48  6E2B               	movwf	diet_press@sum,c
  7626                           
  7627                           ;standbyMode.c: 776: }
  7628  00EC4A  D02A               	goto	l391
  7629  00EC4C                     l390:
  7630                           
  7631                           ;standbyMode.c: 779: else{
  7632                           ;standbyMode.c: 780: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7633  00EC4C  0E01               	movlw	1
  7634  00EC4E  ECC4  F06B         	call	_lcdInst
  7635  00EC52  0EC3               	movlw	195
  7636  00EC54  6E21               	movwf	??_diet_press& (0+255),c
  7637  00EC56  0ECD               	movlw	205
  7638  00EC58                     u6527:
  7639  00EC58  2EE8               	decfsz	wreg,f,c
  7640  00EC5A  D7FE               	bra	u6527
  7641  00EC5C  2E21               	decfsz	??_diet_press& (0+255),f,c
  7642  00EC5E  D7FC               	bra	u6527
  7643  00EC60  F000               	nop	
  7644                           
  7645                           ;standbyMode.c: 781: printf("Invalid diet!");
  7646  00EC62  0E2B               	movlw	low STR_35
  7647  00EC64  6E0D               	movwf	printf@f,c
  7648  00EC66  0EFF               	movlw	high STR_35
  7649  00EC68  6E0E               	movwf	printf@f+1,c
  7650  00EC6A  ECD9  F06D         	call	_printf	;wreg free
  7651                           
  7652                           ;standbyMode.c: 782: lcdInst(0xC0);;
  7653  00EC6E  0EC0               	movlw	192
  7654  00EC70  ECC4  F06B         	call	_lcdInst
  7655                           
  7656                           ;standbyMode.c: 783: printf("Try again.");
  7657  00EC74  0EAA               	movlw	low STR_32
  7658  00EC76  6E0D               	movwf	printf@f,c
  7659  00EC78  0EFF               	movlw	high STR_32
  7660  00EC7A  6E0E               	movwf	printf@f+1,c
  7661  00EC7C  ECD9  F06D         	call	_printf	;wreg free
  7662                           
  7663                           ;standbyMode.c: 784: _delay((unsigned long)((1000)*(40000000/4000.0)));
  7664  00EC80  0E33               	movlw	51
  7665  00EC82  6E22               	movwf	(??_diet_press+1)& (0+255),c
  7666  00EC84  0EBB               	movlw	187
  7667  00EC86  6E21               	movwf	??_diet_press& (0+255),c
  7668  00EC88  0EE0               	movlw	224
  7669  00EC8A                     u6537:
  7670  00EC8A  2EE8               	decfsz	wreg,f,c
  7671  00EC8C  D7FE               	bra	u6537
  7672  00EC8E  2E21               	decfsz	??_diet_press& (0+255),f,c
  7673  00EC90  D7FC               	bra	u6537
  7674  00EC92  2E22               	decfsz	(??_diet_press+1)& (0+255),f,c
  7675  00EC94  D7FA               	bra	u6537
  7676                           
  7677                           ;standbyMode.c: 785: sum = 0;
  7678  00EC96  0E00               	movlw	0
  7679  00EC98  6E2C               	movwf	diet_press@sum+1,c
  7680  00EC9A  0E00               	movlw	0
  7681  00EC9C  6E2B               	movwf	diet_press@sum,c
  7682                           
  7683                           ;standbyMode.c: 786: goto START;
  7684  00EC9E  D572               	goto	_diet_press
  7685  00ECA0                     l391:
  7686                           
  7687                           ;standbyMode.c: 787: }
  7688                           ;standbyMode.c: 788: return sum;
  7689  00ECA0  C02B  F01F         	movff	diet_press@sum,?_diet_press
  7690  00ECA4  C02C  F020         	movff	diet_press@sum+1,?_diet_press+1
  7691  00ECA8  0012               	return		;funcret
  7692  00ECAA                     __end_of_diet_press:
  7693                           	opt stack 0
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           plusw1	equ	0xFE3
  7704                           postinc2	equ	0xFDE
  7705                           postdec2	equ	0xFDD
  7706                           plusw2	equ	0xFDB
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _printf *****************
  7712 ;; Defined at:
  7713 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7716 ;;		 -> STR_66(11), STR_65(13), STR_64(11), STR_63(13), 
  7717 ;;		 -> STR_62(11), STR_61(8), STR_60(15), STR_59(16), 
  7718 ;;		 -> STR_58(10), STR_57(8), STR_56(15), STR_55(16), 
  7719 ;;		 -> STR_54(10), STR_53(16), STR_52(16), STR_51(17), 
  7720 ;;		 -> STR_50(13), STR_49(17), STR_48(14), STR_47(11), 
  7721 ;;		 -> STR_46(11), STR_45(16), STR_44(16), STR_43(15), 
  7722 ;;		 -> STR_42(15), STR_41(17), STR_40(17), STR_39(8), 
  7723 ;;		 -> STR_38(15), STR_37(15), STR_36(11), STR_35(14), 
  7724 ;;		 -> STR_34(16), STR_33(16), STR_32(11), STR_31(14), 
  7725 ;;		 -> STR_30(16), STR_29(16), STR_28(16), STR_27(13), 
  7726 ;;		 -> STR_26(13), STR_25(15), STR_24(16), STR_23(17), 
  7727 ;;		 -> STR_22(18), STR_21(15), STR_20(11), STR_19(7), 
  7728 ;;		 -> STR_18(3), STR_17(16), STR_16(6), STR_15(7), 
  7729 ;;		 -> STR_14(16), STR_13(14), STR_12(17), STR_11(7), 
  7730 ;;		 -> STR_10(9), STR_9(17), STR_8(11), STR_7(17), 
  7731 ;;		 -> STR_6(14), STR_5(17), STR_4(11), STR_3(15), 
  7732 ;;		 -> STR_2(11), STR_1(8), 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  tmpval          4    0        struct .
  7735 ;;  cp              3    0        PTR const unsigned char 
  7736 ;;  val             2   27[COMRAM] unsigned int 
  7737 ;;  ap              2   23[COMRAM] PTR void [1]
  7738 ;;		 -> ?_printf(2), 
  7739 ;;  len             2    0        unsigned int 
  7740 ;;  c               1   29[COMRAM] char 
  7741 ;;  prec            1   26[COMRAM] char 
  7742 ;;  flag            1   25[COMRAM] unsigned char 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  2   12[COMRAM] int 
  7745 ;; Registers used:
  7746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:       18 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    2
  7759 ;; This function calls:
  7760 ;;		___lwdiv
  7761 ;;		___lwmod
  7762 ;;		_putch
  7763 ;; This function is called by:
  7764 ;;		_viewLogs
  7765 ;;		_displayLogs
  7766 ;;		_food_press
  7767 ;;		_diet_press
  7768 ;;		_which_drawer
  7769 ;;		_standbyMode
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text14
  7774  00DBB2                     __ptext14:
  7775                           	opt stack 0
  7776  00DBB2                     _printf:
  7777                           	opt stack 26
  7778                           
  7779                           ;doprnt.c: 466: va_list ap;
  7780                           ;doprnt.c: 499: signed char c;
  7781                           ;doprnt.c: 506: signed char prec;
  7782                           ;doprnt.c: 508: unsigned char flag;
  7783                           ;doprnt.c: 523: union {
  7784                           ;doprnt.c: 524: unsigned long vd;
  7785                           ;doprnt.c: 525: double integ;
  7786                           ;doprnt.c: 526: } tmpval;
  7787                           ;doprnt.c: 528: unsigned int val;
  7788                           ;doprnt.c: 529: unsigned len;
  7789                           ;doprnt.c: 530: const char * cp;
  7790                           ;doprnt.c: 533: *ap = __va_start();
  7791                           
  7792                           ;incstack = 0
  7793  00DBB2  0E0F               	movlw	low (?_printf+2)
  7794  00DBB4  6E18               	movwf	printf@ap,c
  7795  00DBB6  0E00               	movlw	high (?_printf+2)
  7796  00DBB8  6E19               	movwf	printf@ap+1,c
  7797                           
  7798                           ;doprnt.c: 536: while(c = *f++) {
  7799  00DBBA  D07D               	goto	u3050
  7800  00DBBC                     
  7801                           ;doprnt.c: 538: if(c != '%')
  7802  00DBBC  0E25               	movlw	37
  7803  00DBBE  181E               	xorwf	printf@c,w,c
  7804  00DBC0  B4D8               	btfsc	status,2,c
  7805  00DBC2  D004               	goto	l553
  7806                           
  7807                           ;doprnt.c: 540: {
  7808                           ;doprnt.c: 541: (putch(c) );
  7809  00DBC4  501E               	movf	printf@c,w,c
  7810  00DBC6  ECCE  F06B         	call	_putch
  7811                           
  7812                           ;doprnt.c: 542: continue;
  7813  00DBCA  D075               	goto	u3050
  7814  00DBCC                     l553:
  7815                           
  7816                           ;doprnt.c: 543: }
  7817                           ;doprnt.c: 548: flag = 0;
  7818  00DBCC  0E00               	movlw	0
  7819  00DBCE  6E1A               	movwf	printf@flag,c
  7820                           
  7821                           ;doprnt.c: 822: }
  7822                           
  7823                           ;doprnt.c: 813: continue;
  7824                           
  7825                           ;doprnt.c: 802: default:
  7826                           
  7827                           ;doprnt.c: 698: case 'i':
  7828                           ;doprnt.c: 699: break;
  7829                           
  7830                           ;doprnt.c: 697: case 'd':
  7831                           
  7832                           ;doprnt.c: 638: goto alldone;
  7833                           
  7834                           ;doprnt.c: 637: case 0:
  7835                           
  7836                           ;doprnt.c: 635: switch(c = *f++) {
  7837  00DBD0  C00D  FFF6         	movff	printf@f,tblptrl
  7838  00DBD4  C00E  FFF7         	movff	printf@f+1,tblptrh
  7839  00DBD8  4A0D               	infsnz	printf@f,f,c
  7840  00DBDA  2A0E               	incf	printf@f+1,f,c
  7841  00DBDC                     	if	0	;tblptru may be non-zero
  7842  00DBDC                     	endif
  7843  00DBDC                     	if	0	;tblptru may be non-zero
  7844  00DBDC                     	endif
  7845  00DBDC  0008               	tblrd		*
  7846  00DBDE  CFF5 F01E          	movff	tablat,printf@c
  7847  00DBE2  501E               	movf	printf@c,w,c
  7848                           
  7849                           ; Switch size 1, requested type "space"
  7850                           ; Number of cases is 3, Range of values is 0 to 105
  7851                           ; switch strategies available:
  7852                           ; Name         Instructions Cycles
  7853                           ; simple_byte           10     6 (average)
  7854                           ;	Chosen strategy is simple_byte
  7855  00DBE4  0A00               	xorlw	0	; case 0
  7856  00DBE6  B4D8               	btfsc	status,2,c
  7857  00DBE8  0012               	return	
  7858  00DBEA  0A64               	xorlw	100	; case 100
  7859  00DBEC  B4D8               	btfsc	status,2,c
  7860  00DBEE  D003               	goto	l559
  7861  00DBF0  0A0D               	xorlw	13	; case 105
  7862  00DBF2  A4D8               	btfss	status,2,c
  7863  00DBF4  D060               	goto	u3050
  7864  00DBF6                     l559:
  7865                           
  7866                           ;doprnt.c: 1253: {
  7867                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7868  00DBF6  C018  FFD9         	movff	printf@ap,fsr2l
  7869  00DBFA  C019  FFDA         	movff	printf@ap+1,fsr2h
  7870  00DBFE  CFDE F01C          	movff	postinc2,printf@val
  7871  00DC02  CFDD F01D          	movff	postdec2,printf@val+1
  7872  00DC06  0E02               	movlw	2
  7873  00DC08  2618               	addwf	printf@ap,f,c
  7874  00DC0A  0E00               	movlw	0
  7875  00DC0C  2219               	addwfc	printf@ap+1,f,c
  7876                           
  7877                           ;doprnt.c: 1261: if((int)val < 0) {
  7878  00DC0E  AE1D               	btfss	printf@val+1,7,c
  7879  00DC10  D006               	goto	l561
  7880                           
  7881                           ;doprnt.c: 1262: flag |= 0x03;
  7882  00DC12  0E03               	movlw	3
  7883  00DC14  121A               	iorwf	printf@flag,f,c
  7884                           
  7885                           ;doprnt.c: 1263: val = -val;
  7886  00DC16  6C1C               	negf	printf@val,c
  7887  00DC18  1E1D               	comf	printf@val+1,f,c
  7888  00DC1A  B0D8               	btfsc	status,0,c
  7889  00DC1C  2A1D               	incf	printf@val+1,f,c
  7890  00DC1E                     l561:
  7891                           
  7892                           ;doprnt.c: 1264: }
  7893                           ;doprnt.c: 1266: }
  7894                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7895  00DC1E  0E01               	movlw	1
  7896  00DC20  6E1E               	movwf	printf@c,c
  7897  00DC22                     l2898:
  7898  00DC22  0E05               	movlw	5
  7899  00DC24  181E               	xorwf	printf@c,w,c
  7900  00DC26  B4D8               	btfsc	status,2,c
  7901  00DC28  D012               	goto	u3030
  7902                           
  7903                           ;doprnt.c: 1306: if(val < dpowers[c])
  7904  00DC2A  501E               	movf	printf@c,w,c
  7905  00DC2C  0D02               	mullw	2
  7906  00DC2E  0E9B               	movlw	low _dpowers
  7907  00DC30  24F3               	addwf	prodl,w,c
  7908  00DC32  6EF6               	movwf	tblptrl,c
  7909  00DC34  0EFD               	movlw	high _dpowers
  7910  00DC36  20F4               	addwfc	prodh,w,c
  7911  00DC38  6EF7               	movwf	tblptrh,c
  7912  00DC3A                     	if	0	;There are less than 3 active tblptr bytes
  7913  00DC3A                     	endif
  7914  00DC3A  0009               	tblrd		*+
  7915  00DC3C  50F5               	movf	tablat,w,c
  7916  00DC3E  5C1C               	subwf	printf@val,w,c
  7917  00DC40  0009               	tblrd		*+
  7918  00DC42  50F5               	movf	tablat,w,c
  7919  00DC44  581D               	subwfb	printf@val+1,w,c
  7920  00DC46  A0D8               	btfss	status,0,c
  7921  00DC48  D002               	goto	u3030
  7922                           
  7923                           ;doprnt.c: 1307: break;
  7924  00DC4A  2A1E               	incf	printf@c,f,c
  7925  00DC4C  D7EA               	goto	l2898
  7926  00DC4E                     u3030:
  7927                           
  7928                           ;doprnt.c: 1422: {
  7929                           ;doprnt.c: 1438: if(flag & 0x03)
  7930  00DC4E  C01A  F017         	movff	printf@flag,??_printf
  7931  00DC52  0E03               	movlw	3
  7932  00DC54  1617               	andwf	??_printf,f,c
  7933  00DC56  B4D8               	btfsc	status,2,c
  7934  00DC58  D003               	goto	l565
  7935                           
  7936                           ;doprnt.c: 1439: (putch('-') );
  7937  00DC5A  0E2D               	movlw	45
  7938  00DC5C  ECCE  F06B         	call	_putch
  7939  00DC60                     l565:
  7940                           
  7941                           ;doprnt.c: 1469: }
  7942                           ;doprnt.c: 1472: prec = c;
  7943  00DC60  C01E  F01B         	movff	printf@c,printf@prec
  7944                           
  7945                           ;doprnt.c: 1474: while(prec--) {
  7946  00DC64  D024               	goto	l566
  7947  00DC66                     
  7948                           ;doprnt.c: 1478: {
  7949                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7950  00DC66  501B               	movf	printf@prec,w,c
  7951  00DC68  0D02               	mullw	2
  7952  00DC6A  0E9B               	movlw	low _dpowers
  7953  00DC6C  24F3               	addwf	prodl,w,c
  7954  00DC6E  6EF6               	movwf	tblptrl,c
  7955  00DC70  0EFD               	movlw	high _dpowers
  7956  00DC72  20F4               	addwfc	prodh,w,c
  7957  00DC74  6EF7               	movwf	tblptrh,c
  7958  00DC76                     	if	0	;There are less than 3 active tblptr bytes
  7959  00DC76                     	endif
  7960  00DC76  0009               	tblrd		*+
  7961  00DC78  CFF5 F003          	movff	tablat,___lwdiv@divisor
  7962  00DC7C  000A               	tblrd		*-
  7963  00DC7E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  7964  00DC82  C01C  F001         	movff	printf@val,___lwdiv@dividend
  7965  00DC86  C01D  F002         	movff	printf@val+1,___lwdiv@dividend+1
  7966  00DC8A  EC78  F06C         	call	___lwdiv	;wreg free
  7967  00DC8E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  7968  00DC92  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  7969  00DC96  0E00               	movlw	0
  7970  00DC98  6E0B               	movwf	___lwmod@divisor+1,c
  7971  00DC9A  0E0A               	movlw	10
  7972  00DC9C  6E0A               	movwf	___lwmod@divisor,c
  7973  00DC9E  EC31  F06C         	call	___lwmod	;wreg free
  7974  00DCA2  5008               	movf	?___lwmod,w,c
  7975  00DCA4  0F30               	addlw	48
  7976  00DCA6  6E1E               	movwf	printf@c,c
  7977                           
  7978                           ;doprnt.c: 1523: }
  7979                           ;doprnt.c: 1524: (putch(c) );
  7980  00DCA8  501E               	movf	printf@c,w,c
  7981  00DCAA  ECCE  F06B         	call	_putch
  7982  00DCAE                     l566:
  7983  00DCAE  061B               	decf	printf@prec,f,c
  7984  00DCB0  281B               	incf	printf@prec,w,c
  7985  00DCB2  A4D8               	btfss	status,2,c
  7986  00DCB4  D7D8               	goto	l567
  7987  00DCB6                     u3050:
  7988  00DCB6  C00D  FFF6         	movff	printf@f,tblptrl
  7989  00DCBA  C00E  FFF7         	movff	printf@f+1,tblptrh
  7990  00DCBE  4A0D               	infsnz	printf@f,f,c
  7991  00DCC0  2A0E               	incf	printf@f+1,f,c
  7992  00DCC2                     	if	0	;tblptru may be non-zero
  7993  00DCC2                     	endif
  7994  00DCC2                     	if	0	;tblptru may be non-zero
  7995  00DCC2                     	endif
  7996  00DCC2  0008               	tblrd		*
  7997  00DCC4  CFF5 F01E          	movff	tablat,printf@c
  7998  00DCC8  501E               	movf	printf@c,w,c
  7999  00DCCA  B4D8               	btfsc	status,2,c
  8000  00DCCC  0012               	return	
  8001  00DCCE  D776               	goto	l552
  8002  00DCD0                     __end_of_printf:
  8003                           	opt stack 0
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodh	equ	0xFF4
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           postinc0	equ	0xFEE
  8012                           wreg	equ	0xFE8
  8013                           plusw1	equ	0xFE3
  8014                           postinc2	equ	0xFDE
  8015                           postdec2	equ	0xFDD
  8016                           plusw2	equ	0xFDB
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _putch *****************
  8022 ;; Defined at:
  8023 ;;		line 74 in file "standbyMode.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  data            1    wreg     unsigned char 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  data            1    2[COMRAM] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;Total ram usage:        1 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    1
  8044 ;; This function calls:
  8045 ;;		_lcdNibble
  8046 ;; This function is called by:
  8047 ;;		_viewLogs
  8048 ;;		_food_press
  8049 ;;		_diet_press
  8050 ;;		_which_drawer
  8051 ;;		_standbyMode
  8052 ;;		_printf
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text15
  8057  00D79C                     __ptext15:
  8058                           	opt stack 0
  8059  00D79C                     _putch:
  8060                           	opt stack 27
  8061                           
  8062                           ;incstack = 0
  8063                           ;putch@data stored from wreg
  8064  00D79C  6E03               	movwf	putch@data,c
  8065                           
  8066                           ;standbyMode.c: 82: LATDbits.LATD2 = 1;
  8067  00D79E  848C               	bsf	3980,2,c	;volatile
  8068                           
  8069                           ;standbyMode.c: 83: lcdNibble(data);
  8070  00D7A0  5003               	movf	putch@data,w,c
  8071  00D7A2  ECCA  F06C         	call	_lcdNibble
  8072                           
  8073                           ;standbyMode.c: 84: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8074  00D7A6  0EC8               	movlw	200
  8075  00D7A8                     u6547:
  8076  00D7A8  D000               	nop2	
  8077  00D7AA  2EE8               	decfsz	wreg,f,c
  8078  00D7AC  D7FD               	bra	u6547
  8079  00D7AE  0012               	return		;funcret
  8080  00D7B0                     __end_of_putch:
  8081                           	opt stack 0
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           postinc0	equ	0xFEE
  8090                           wreg	equ	0xFE8
  8091                           plusw1	equ	0xFE3
  8092                           postinc2	equ	0xFDE
  8093                           postdec2	equ	0xFDD
  8094                           plusw2	equ	0xFDB
  8095                           fsr2h	equ	0xFDA
  8096                           fsr2l	equ	0xFD9
  8097                           status	equ	0xFD8
  8098                           
  8099 ;; *************** function ___lwmod *****************
  8100 ;; Defined at:
  8101 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  dividend        2    7[COMRAM] unsigned int 
  8104 ;;  divisor         2    9[COMRAM] unsigned int 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  counter         1   11[COMRAM] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  2    7[COMRAM] unsigned int 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;Total ram usage:        5 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; This function calls:
  8123 ;;		Nothing
  8124 ;; This function is called by:
  8125 ;;		_displayLogs
  8126 ;;		_printf
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text16
  8131  00D862                     __ptext16:
  8132                           	opt stack 0
  8133  00D862                     ___lwmod:
  8134                           	opt stack 27
  8135                           
  8136                           ;incstack = 0
  8137  00D862  500A               	movf	___lwmod@divisor,w,c
  8138  00D864  100B               	iorwf	___lwmod@divisor+1,w,c
  8139  00D866  B4D8               	btfsc	status,2,c
  8140  00D868  D018               	goto	l989
  8141  00D86A  0E01               	movlw	1
  8142  00D86C  6E0C               	movwf	___lwmod@counter,c
  8143  00D86E  D004               	goto	l984
  8144  00D870  90D8               	bcf	status,0,c
  8145  00D872  360A               	rlcf	___lwmod@divisor,f,c
  8146  00D874  360B               	rlcf	___lwmod@divisor+1,f,c
  8147  00D876  2A0C               	incf	___lwmod@counter,f,c
  8148  00D878                     l984:
  8149  00D878  AE0B               	btfss	___lwmod@divisor+1,7,c
  8150  00D87A  D7FA               	goto	l985
  8151  00D87C                     u2970:
  8152  00D87C  500A               	movf	___lwmod@divisor,w,c
  8153  00D87E  5C08               	subwf	___lwmod@dividend,w,c
  8154  00D880  500B               	movf	___lwmod@divisor+1,w,c
  8155  00D882  5809               	subwfb	___lwmod@dividend+1,w,c
  8156  00D884  A0D8               	btfss	status,0,c
  8157  00D886  D004               	goto	l988
  8158  00D888  500A               	movf	___lwmod@divisor,w,c
  8159  00D88A  5E08               	subwf	___lwmod@dividend,f,c
  8160  00D88C  500B               	movf	___lwmod@divisor+1,w,c
  8161  00D88E  5A09               	subwfb	___lwmod@dividend+1,f,c
  8162  00D890                     l988:
  8163  00D890  90D8               	bcf	status,0,c
  8164  00D892  320B               	rrcf	___lwmod@divisor+1,f,c
  8165  00D894  320A               	rrcf	___lwmod@divisor,f,c
  8166  00D896  2E0C               	decfsz	___lwmod@counter,f,c
  8167  00D898  D7F1               	goto	u2970
  8168  00D89A                     l989:
  8169  00D89A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  8170  00D89E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  8171  00D8A2  0012               	return		;funcret
  8172  00D8A4                     __end_of___lwmod:
  8173                           	opt stack 0
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           plusw1	equ	0xFE3
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           plusw2	equ	0xFDB
  8187                           fsr2h	equ	0xFDA
  8188                           fsr2l	equ	0xFD9
  8189                           status	equ	0xFD8
  8190                           
  8191 ;; *************** function ___lwdiv *****************
  8192 ;; Defined at:
  8193 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  dividend        2    0[COMRAM] unsigned int 
  8196 ;;  divisor         2    2[COMRAM] unsigned int 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  quotient        2    4[COMRAM] unsigned int 
  8199 ;;  counter         1    6[COMRAM] unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  2    0[COMRAM] unsigned int 
  8202 ;; Registers used:
  8203 ;;		wreg, status,2, status,0
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8209 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;Total ram usage:        7 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; This function calls:
  8216 ;;		Nothing
  8217 ;; This function is called by:
  8218 ;;		_displayLogs
  8219 ;;		_printf
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text17
  8224  00D8F0                     __ptext17:
  8225                           	opt stack 0
  8226  00D8F0                     ___lwdiv:
  8227                           	opt stack 27
  8228                           
  8229                           ;incstack = 0
  8230  00D8F0  0E00               	movlw	0
  8231  00D8F2  6E06               	movwf	___lwdiv@quotient+1,c
  8232  00D8F4  0E00               	movlw	0
  8233  00D8F6  6E05               	movwf	___lwdiv@quotient,c
  8234  00D8F8  5003               	movf	___lwdiv@divisor,w,c
  8235  00D8FA  1004               	iorwf	___lwdiv@divisor+1,w,c
  8236  00D8FC  B4D8               	btfsc	status,2,c
  8237  00D8FE  D01C               	goto	l979
  8238  00D900  0E01               	movlw	1
  8239  00D902  6E07               	movwf	___lwdiv@counter,c
  8240  00D904  D004               	goto	l974
  8241  00D906  90D8               	bcf	status,0,c
  8242  00D908  3603               	rlcf	___lwdiv@divisor,f,c
  8243  00D90A  3604               	rlcf	___lwdiv@divisor+1,f,c
  8244  00D90C  2A07               	incf	___lwdiv@counter,f,c
  8245  00D90E                     l974:
  8246  00D90E  AE04               	btfss	___lwdiv@divisor+1,7,c
  8247  00D910  D7FA               	goto	l975
  8248  00D912                     u2940:
  8249  00D912  90D8               	bcf	status,0,c
  8250  00D914  3605               	rlcf	___lwdiv@quotient,f,c
  8251  00D916  3606               	rlcf	___lwdiv@quotient+1,f,c
  8252  00D918  5003               	movf	___lwdiv@divisor,w,c
  8253  00D91A  5C01               	subwf	___lwdiv@dividend,w,c
  8254  00D91C  5004               	movf	___lwdiv@divisor+1,w,c
  8255  00D91E  5802               	subwfb	___lwdiv@dividend+1,w,c
  8256  00D920  A0D8               	btfss	status,0,c
  8257  00D922  D005               	goto	l978
  8258  00D924  5003               	movf	___lwdiv@divisor,w,c
  8259  00D926  5E01               	subwf	___lwdiv@dividend,f,c
  8260  00D928  5004               	movf	___lwdiv@divisor+1,w,c
  8261  00D92A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  8262  00D92C  8005               	bsf	___lwdiv@quotient,0,c
  8263  00D92E                     l978:
  8264  00D92E  90D8               	bcf	status,0,c
  8265  00D930  3204               	rrcf	___lwdiv@divisor+1,f,c
  8266  00D932  3203               	rrcf	___lwdiv@divisor,f,c
  8267  00D934  2E07               	decfsz	___lwdiv@counter,f,c
  8268  00D936  D7ED               	goto	u2940
  8269  00D938                     l979:
  8270  00D938  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  8271  00D93C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8272  00D940  0012               	return		;funcret
  8273  00D942                     __end_of___lwdiv:
  8274                           	opt stack 0
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           postinc0	equ	0xFEE
  8283                           wreg	equ	0xFE8
  8284                           plusw1	equ	0xFE3
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function _initLCD *****************
  8293 ;; Defined at:
  8294 ;;		line 29 in file "standbyMode.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;		None
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;		None
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      void 
  8301 ;; Registers used:
  8302 ;;		wreg, status,2, status,0, cstack
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;Total ram usage:        1 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    2
  8315 ;; This function calls:
  8316 ;;		_lcdInst
  8317 ;; This function is called by:
  8318 ;;		_main
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text18
  8323  00D8A4                     __ptext18:
  8324                           	opt stack 0
  8325  00D8A4                     _initLCD:
  8326                           	opt stack 28
  8327                           
  8328                           ;standbyMode.c: 37: _delay((unsigned long)((15)*(40000000/4000.0)));
  8329                           
  8330                           ;incstack = 0
  8331  00D8A4  0EC3               	movlw	195
  8332  00D8A6  6E04               	movwf	??_initLCD& (0+255),c
  8333  00D8A8  0ECD               	movlw	205
  8334  00D8AA                     u6557:
  8335  00D8AA  2EE8               	decfsz	wreg,f,c
  8336  00D8AC  D7FE               	bra	u6557
  8337  00D8AE  2E04               	decfsz	??_initLCD& (0+255),f,c
  8338  00D8B0  D7FC               	bra	u6557
  8339  00D8B2  F000               	nop	
  8340                           
  8341                           ;standbyMode.c: 38: lcdInst(0b00110011);
  8342  00D8B4  0E33               	movlw	51
  8343  00D8B6  ECC4  F06B         	call	_lcdInst
  8344                           
  8345                           ;standbyMode.c: 39: lcdInst(0b00110010);
  8346  00D8BA  0E32               	movlw	50
  8347  00D8BC  ECC4  F06B         	call	_lcdInst
  8348                           
  8349                           ;standbyMode.c: 40: lcdInst(0b00101000);
  8350  00D8C0  0E28               	movlw	40
  8351  00D8C2  ECC4  F06B         	call	_lcdInst
  8352                           
  8353                           ;standbyMode.c: 41: lcdInst(0b00001111);
  8354  00D8C6  0E0F               	movlw	15
  8355  00D8C8  ECC4  F06B         	call	_lcdInst
  8356                           
  8357                           ;standbyMode.c: 42: lcdInst(0b00000110);
  8358  00D8CC  0E06               	movlw	6
  8359  00D8CE  ECC4  F06B         	call	_lcdInst
  8360                           
  8361                           ;standbyMode.c: 43: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8362  00D8D2  0E01               	movlw	1
  8363  00D8D4  ECC4  F06B         	call	_lcdInst
  8364  00D8D8  0EC3               	movlw	195
  8365  00D8DA  6E04               	movwf	??_initLCD& (0+255),c
  8366  00D8DC  0ECD               	movlw	205
  8367  00D8DE                     u6567:
  8368  00D8DE  2EE8               	decfsz	wreg,f,c
  8369  00D8E0  D7FE               	bra	u6567
  8370  00D8E2  2E04               	decfsz	??_initLCD& (0+255),f,c
  8371  00D8E4  D7FC               	bra	u6567
  8372  00D8E6  F000               	nop	
  8373                           
  8374                           ;standbyMode.c: 46: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8375  00D8E8  0E0F               	movlw	15
  8376  00D8EA  ECC4  F06B         	call	_lcdInst
  8377  00D8EE  0012               	return		;funcret
  8378  00D8F0                     __end_of_initLCD:
  8379                           	opt stack 0
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           intcon	equ	0xFF2
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           plusw1	equ	0xFE3
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           plusw2	equ	0xFDB
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _lcdInst *****************
  8398 ;; Defined at:
  8399 ;;		line 15 in file "standbyMode.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  data            1    wreg     unsigned char 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  data            1    2[COMRAM] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        1 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    1
  8420 ;; This function calls:
  8421 ;;		_lcdNibble
  8422 ;; This function is called by:
  8423 ;;		_initLCD
  8424 ;;		_viewLogs
  8425 ;;		_displayLogs
  8426 ;;		_food_press
  8427 ;;		_diet_press
  8428 ;;		_which_drawer
  8429 ;;		_standbyMode
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           	psect	text19
  8434  00D788                     __ptext19:
  8435                           	opt stack 0
  8436  00D788                     _lcdInst:
  8437                           	opt stack 27
  8438                           
  8439                           ;incstack = 0
  8440                           ;lcdInst@data stored from wreg
  8441  00D788  6E03               	movwf	lcdInst@data,c
  8442                           
  8443                           ;standbyMode.c: 23: LATDbits.LATD2 = 0;
  8444  00D78A  948C               	bcf	3980,2,c	;volatile
  8445                           
  8446                           ;standbyMode.c: 24: lcdNibble(data);
  8447  00D78C  5003               	movf	lcdInst@data,w,c
  8448  00D78E  ECCA  F06C         	call	_lcdNibble
  8449                           
  8450                           ;standbyMode.c: 25: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8451  00D792  0EC8               	movlw	200
  8452  00D794                     u6577:
  8453  00D794  D000               	nop2	
  8454  00D796  2EE8               	decfsz	wreg,f,c
  8455  00D798  D7FD               	bra	u6577
  8456  00D79A  0012               	return		;funcret
  8457  00D79C                     __end_of_lcdInst:
  8458                           	opt stack 0
  8459                           tblptru	equ	0xFF8
  8460                           tblptrh	equ	0xFF7
  8461                           tblptrl	equ	0xFF6
  8462                           tablat	equ	0xFF5
  8463                           prodh	equ	0xFF4
  8464                           prodl	equ	0xFF3
  8465                           intcon	equ	0xFF2
  8466                           postinc0	equ	0xFEE
  8467                           wreg	equ	0xFE8
  8468                           plusw1	equ	0xFE3
  8469                           postinc2	equ	0xFDE
  8470                           postdec2	equ	0xFDD
  8471                           plusw2	equ	0xFDB
  8472                           fsr2h	equ	0xFDA
  8473                           fsr2l	equ	0xFD9
  8474                           status	equ	0xFD8
  8475                           
  8476 ;; *************** function _lcdNibble *****************
  8477 ;; Defined at:
  8478 ;;		line 50 in file "standbyMode.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  data            1    wreg     unsigned char 
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;  data            1    1[COMRAM] unsigned char 
  8483 ;;  temp            1    0[COMRAM] unsigned char 
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  1    wreg      void 
  8486 ;; Registers used:
  8487 ;;		wreg, status,2, status,0
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;Total ram usage:        2 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_lcdInst
  8503 ;;		_putch
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text20
  8508  00D994                     __ptext20:
  8509                           	opt stack 0
  8510  00D994                     _lcdNibble:
  8511                           	opt stack 27
  8512                           
  8513                           ;incstack = 0
  8514                           ;lcdNibble@data stored from wreg
  8515  00D994  6E02               	movwf	lcdNibble@data,c
  8516                           
  8517                           ;standbyMode.c: 58: char temp = (unsigned char) (data & 0xF0);
  8518  00D996  5002               	movf	lcdNibble@data,w,c
  8519  00D998  0BF0               	andlw	240
  8520  00D99A  6E01               	movwf	lcdNibble@temp,c
  8521                           
  8522                           ;standbyMode.c: 59: LATD = (unsigned char) (LATD & 0x0F);
  8523  00D99C  508C               	movf	3980,w,c	;volatile
  8524  00D99E  0B0F               	andlw	15
  8525  00D9A0  6E8C               	movwf	3980,c	;volatile
  8526                           
  8527                           ;standbyMode.c: 60: LATD = (unsigned char) (temp | LATD);
  8528  00D9A2  5001               	movf	lcdNibble@temp,w,c
  8529  00D9A4  108C               	iorwf	3980,w,c	;volatile
  8530  00D9A6  6E8C               	movwf	3980,c	;volatile
  8531                           
  8532                           ;standbyMode.c: 62: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8533  00D9A8  0E00               	movlw	0
  8534  00D9AA  BEF2               	btfsc	intcon,7,c	;volatile
  8535  00D9AC  0E01               	movlw	1
  8536  00D9AE  6E7D               	movwf	standbyMode@LCDinterruptState,c
  8537  00D9B0  9EF2               	bcf	intcon,7,c	;volatile
  8538  00D9B2  868C               	bsf	3980,3,c	;volatile
  8539  00D9B4  0E53               	movlw	83
  8540  00D9B6                     u6587:
  8541  00D9B6  2EE8               	decfsz	wreg,f,c
  8542  00D9B8  D7FE               	bra	u6587
  8543  00D9BA  F000               	nop	
  8544  00D9BC  968C               	bcf	3980,3,c	;volatile
  8545  00D9BE  0EC8               	movlw	200
  8546  00D9C0                     u6597:
  8547  00D9C0  D000               	nop2	
  8548  00D9C2  2EE8               	decfsz	wreg,f,c
  8549  00D9C4  D7FD               	bra	u6597
  8550  00D9C6  B07D               	btfsc	standbyMode@LCDinterruptState,0,c
  8551  00D9C8  D002               	bra	u15
  8552  00D9CA  9EF2               	bcf	intcon,7,c	;volatile
  8553  00D9CC  D001               	bra	u16
  8554  00D9CE                     u15:
  8555  00D9CE  8EF2               	bsf	intcon,7,c	;volatile
  8556  00D9D0                     u16:
  8557                           
  8558                           ;standbyMode.c: 65: data = (unsigned char) (data << 4);
  8559  00D9D0  3802               	swapf	lcdNibble@data,w,c
  8560  00D9D2  0BF0               	andlw	240
  8561  00D9D4  6E02               	movwf	lcdNibble@data,c
  8562                           
  8563                           ;standbyMode.c: 66: temp = (unsigned char) (data & 0xF0);
  8564  00D9D6  5002               	movf	lcdNibble@data,w,c
  8565  00D9D8  0BF0               	andlw	240
  8566  00D9DA  6E01               	movwf	lcdNibble@temp,c
  8567                           
  8568                           ;standbyMode.c: 67: LATD = (unsigned char) (LATD & 0x0F);
  8569  00D9DC  508C               	movf	3980,w,c	;volatile
  8570  00D9DE  0B0F               	andlw	15
  8571  00D9E0  6E8C               	movwf	3980,c	;volatile
  8572                           
  8573                           ;standbyMode.c: 68: LATD = (unsigned char) (temp | LATD);
  8574  00D9E2  5001               	movf	lcdNibble@temp,w,c
  8575  00D9E4  108C               	iorwf	3980,w,c	;volatile
  8576  00D9E6  6E8C               	movwf	3980,c	;volatile
  8577                           
  8578                           ;standbyMode.c: 70: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8579  00D9E8  0E00               	movlw	0
  8580  00D9EA  BEF2               	btfsc	intcon,7,c	;volatile
  8581  00D9EC  0E01               	movlw	1
  8582  00D9EE  6E7D               	movwf	standbyMode@LCDinterruptState,c
  8583  00D9F0  9EF2               	bcf	intcon,7,c	;volatile
  8584  00D9F2  868C               	bsf	3980,3,c	;volatile
  8585  00D9F4  0E53               	movlw	83
  8586  00D9F6                     u6607:
  8587  00D9F6  2EE8               	decfsz	wreg,f,c
  8588  00D9F8  D7FE               	bra	u6607
  8589  00D9FA  F000               	nop	
  8590  00D9FC  968C               	bcf	3980,3,c	;volatile
  8591  00D9FE  0EC8               	movlw	200
  8592  00DA00                     u6617:
  8593  00DA00  D000               	nop2	
  8594  00DA02  2EE8               	decfsz	wreg,f,c
  8595  00DA04  D7FD               	bra	u6617
  8596  00DA06  B07D               	btfsc	standbyMode@LCDinterruptState,0,c
  8597  00DA08  D002               	bra	u25
  8598  00DA0A  9EF2               	bcf	intcon,7,c	;volatile
  8599  00DA0C  D001               	bra	u26
  8600  00DA0E                     u25:
  8601  00DA0E  8EF2               	bsf	intcon,7,c	;volatile
  8602  00DA10                     u26:
  8603  00DA10  0012               	return		;funcret
  8604  00DA12                     __end_of_lcdNibble:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           intcon	equ	0xFF2
  8613                           postinc0	equ	0xFEE
  8614                           wreg	equ	0xFE8
  8615                           plusw1	equ	0xFE3
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           plusw2	equ	0xFDB
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           tblptru	equ	0xFF8
  8623                           tblptrh	equ	0xFF7
  8624                           tblptrl	equ	0xFF6
  8625                           tablat	equ	0xFF5
  8626                           prodh	equ	0xFF4
  8627                           prodl	equ	0xFF3
  8628                           intcon	equ	0xFF2
  8629                           postinc0	equ	0xFEE
  8630                           wreg	equ	0xFE8
  8631                           plusw1	equ	0xFE3
  8632                           postinc2	equ	0xFDE
  8633                           postdec2	equ	0xFDD
  8634                           plusw2	equ	0xFDB
  8635                           fsr2h	equ	0xFDA
  8636                           fsr2l	equ	0xFD9
  8637                           status	equ	0xFD8
  8638                           
  8639                           	psect	rparam
  8640  0000                     tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           postinc0	equ	0xFEE
  8648                           wreg	equ	0xFE8
  8649                           plusw1	equ	0xFE3
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           plusw2	equ	0xFDB
  8653                           fsr2h	equ	0xFDA
  8654                           fsr2l	equ	0xFD9
  8655                           status	equ	0xFD8


Data Sizes:
    Strings     596
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     92     126
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_66(CODE[11]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[13]), 
		 -> STR_62(CODE[11]), STR_61(CODE[8]), STR_60(CODE[15]), STR_59(CODE[16]), 
		 -> STR_58(CODE[10]), STR_57(CODE[8]), STR_56(CODE[15]), STR_55(CODE[16]), 
		 -> STR_54(CODE[10]), STR_53(CODE[16]), STR_52(CODE[16]), STR_51(CODE[17]), 
		 -> STR_50(CODE[13]), STR_49(CODE[17]), STR_48(CODE[14]), STR_47(CODE[11]), 
		 -> STR_46(CODE[11]), STR_45(CODE[16]), STR_44(CODE[16]), STR_43(CODE[15]), 
		 -> STR_42(CODE[15]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[8]), 
		 -> STR_38(CODE[15]), STR_37(CODE[15]), STR_36(CODE[11]), STR_35(CODE[14]), 
		 -> STR_34(CODE[16]), STR_33(CODE[16]), STR_32(CODE[11]), STR_31(CODE[14]), 
		 -> STR_30(CODE[16]), STR_29(CODE[16]), STR_28(CODE[16]), STR_27(CODE[13]), 
		 -> STR_26(CODE[13]), STR_25(CODE[15]), STR_24(CODE[16]), STR_23(CODE[17]), 
		 -> STR_22(CODE[18]), STR_21(CODE[15]), STR_20(CODE[11]), STR_19(CODE[7]), 
		 -> STR_18(CODE[3]), STR_17(CODE[16]), STR_16(CODE[6]), STR_15(CODE[7]), 
		 -> STR_14(CODE[16]), STR_13(CODE[14]), STR_12(CODE[17]), STR_11(CODE[7]), 
		 -> STR_10(CODE[9]), STR_9(CODE[17]), STR_8(CODE[11]), STR_7(CODE[17]), 
		 -> STR_6(CODE[14]), STR_5(CODE[17]), STR_4(CODE[11]), STR_3(CODE[15]), 
		 -> STR_2(CODE[11]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   50651
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         23    23      0   50561
                                             69 COMRAM    23    23      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1     880
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    7564
                                             30 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   15770
                                             57 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         27    25      2    8646
                                             30 COMRAM    27    25      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4    9890
                                             30 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2    8917
                                             30 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              27    17     10    6421
                                             12 COMRAM    18     8     10
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _readEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5C      7E       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E      34        0.0%
DATA                 0      0      7E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 19 23:46:11 2018

                 _standbyMode F4DC        __end_of_verifyKeypress D994                  ?_displayLogs 001F  
                          u15 D9CE                            u16 D9D0                            u25 DA0E  
                          u26 DA10                   __CFG_CPD$ON 000000           ___wmul@multiplicand 0003  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 F2AE  
                         l131 F454                           l203 F302                           l132 ECB4  
                         l205 F356                           l141 ED08                           l230 E276  
                         l222 E144                           l207 F3AA                           l215 D978  
                         l152 EDF0                           l136 F4D2                           l312 DE38  
                         l304 DD46                           l216 D95E                           l400 DAEA  
                         l209 F3FE                           l153 EE1E                           l145 ED44  
                         l137 ECDE                           l217 D974                           l225 E1F0  
                         l401 DAF2                           l162 EE9E                           l314 DD70  
                         l410 DB3C                           l402 DAFA                           l147 ED98  
                         l323 DE4A                           l235 E282                           l227 E1EA  
                         l403 DB02                           l180 F04C                           l172 EF46  
                         l148 EDC6                           l316 DDD6                           l244 E376  
                         l404 DB0A                           l341 E906                           l333 E7EE  
                         l181 F08C                           l173 EF86                           l157 EE48  
                         l309 DD52                           l253 E576                           l405 DB12  
                         l334 E7EE                           l326 DEBA                           l406 DB1A  
                         l422 E096                           l430 DFE8                           l414 DF0A  
                         l343 E818                           l183 F0CE                           l175 EFC8  
                         l167 EEF4                           l263 E6AA                           l255 E5BA  
                         l407 DB22                           l511 FCD0                           l503 FC10  
                         l360 E994                           l272 E778                           l248 E4D2  
                         l408 DB2A                           l440 E050                           l424 DF34  
                         l504 FC48                           l345 E87A                           l193 F1A8  
                         l185 F110                           l177 F00A                           l257 E5FE  
                         l249 E506                           l409 DB32                           l370 EA74  
                         l362 E9C0                           l354 E916                           l338 E7FA  
                         l194 F1E8                           l266 E6E8                           l258 E642  
                         l426 E054                           l506 FD24                           l283 DA26  
                         l419 DF16                           l451 F550                           l380 EB5A  
                         l372 EAA2                           l364 E9EC                           l356 E940  
                         l348 E8BC                           l196 F22A                           l188 F152  
                         l292 DA36                           l532 D822                           l460 F7A0  
                         l277 DA46                           l285 DA2E                           l269 E76C  
                         l445 E0AA                           l429 E014                           l461 FA60  
                         l390 EC4C                           l382 EB8A                           l374 EAD0  
                         l366 EA18                           l358 E96A                           l198 F26C  
                         l278 DA1C                           l470 F84E                           l454 F748  
                         l391 ECA0                           l279 DAC6                           l463 F808  
                         l552 DBBC                           l384 EBBA                           l376 EAFE  
                         l368 EA46                           l472 FA52                           l480 F960  
                         l561 DC1E                           l553 DBCC                           l297 DA3E  
                         l481 F9B2                           l457 F754                           l386 EBEA  
                         l378 EB2C                           l474 F890                           l395 DB46  
                         l459 FC68                           l467 F842                           l388 EC1A  
                         l396 DAD2                           l492 FA9E                           l565 DC60  
                         l397 DBA8                           l485 F9FA                           l566 DCAE  
                         l398 DADA                           l486 FA32                           l478 F8EE  
                         l567 DC66                           l559 DBF6                           l399 DAE2  
                         l479 F9BC                           l496 FB04                           l488 FA5A  
                         l497 FBD2                           l498 FB76                           l499 FBC8  
                         l974 D90E                           l975 D906                           l984 D878  
                         l985 D870                           l978 D92E                           l979 D938  
                         l988 D890                           l989 D89A                  __CFG_CPB$OFF 000000  
          standbyMode@display 004D                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l1280 D7B2                          l4160 F8F4  
                        l4144 F898                          l3186 D974                          l4250 FB04  
                        l4156 F8EE                          l4254 FB0A                          l4238 FAAE  
                        l3662 E8B6                          l2898 DC22                          l3990 D802  
                        STR_1 FFDB                          STR_2 FF94                          STR_3 FEF0  
                        STR_4 FF94                          STR_5 FE01                          STR_6 FF39  
                        STR_7 FE12                          STR_8 FF94                          STR_9 FDDF  
                        u3100 ED00                          _LATA 000F89                          u3030 DC4E  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u3050 DCB6                          u3130 ED3C  
                        u3080 ECD6                          u3330 EEEC                          u4210 E2A2  
                        u4310 DD84                          u4230 E37A                          u4241 DD1A  
                        u3370 EF3E                          u3290 EE96                          u6007 F96C  
                        u4440 E896                          u5320 DF80                          u4361 E7DE  
                        u6017 F9A4                          u3650 F1A0                          u5410 DFC6  
                        u6107 FCC2                          u6027 F9C8                          u2940 D912  
                        u6117 FCDC                          u6037 FA6C                          u6207 E190  
                        u6127 FD14                          u6047 FB26                          u6217 E1AA  
                        u6137 FD30                          u6057 FB5E                          u2970 D87C  
                        u5450 E02A                          u6307 E368                          u6227 E1DC  
                        u6147 FD68                          u6067 FB82                          u5460 E04C  
                        u6317 E47A                          u6237 E1FC                          u6157 DED6  
                        u6077 FBBA                          u5550 F7A8                          u6407 E69C  
                        u6327 E4C4                          u6247 E234                          u6167 E068  
                        u6087 FBDE                          u5640 F8F4                          u5560 F7B4  
                        u6417 E6BA                          u6337 E4F8                          u6257 E24E  
                        u6177 E0FA                          u6097 FC9C                          u6507 E790  
                        u6427 E6DA                          u6347 E516                          u6267 E2E6  
                        u6187 E12C                          u5740 FB0A                          u6517 E82C  
                        u6437 E6F8                          u6357 E568                          u6277 E2FE  
                        u6197 E15E                          u5590 F85A                          u6607 D9F6  
                        u6527 EC58                          u6447 E72A                          u6367 E5AC  
                        u6287 E31E                          u6617 DA00                          u6537 EC8A  
                        u6457 E744                          u6377 E5F0                          u6297 E336  
                        u6547 D7A8                          u6467 DCDC                          u6387 E634  
                        u5907 F6BA                          u5827 F4E8                          u6557 D8AA  
                        u6477 DDEA                          u6397 E652                          u5917 F6D4  
                        u5837 F50E                          u5790 FC70                          u6567 D8DE  
                        u6487 DE7A                          u5927 F706                          u5847 F528  
                        u6577 D794                          u6497 DEAC                          u5937 F720  
                        u5857 F5CC                          u6587 D9B6                          u5947 F7C0  
                        u5867 F604                          u6597 D9C0                          u5957 F7F8  
                        u5877 F630                          u5967 F814                          u5887 F668  
                        u5977 F866                          u5897 F682                          u5987 F910  
                        u5997 F948         __end_of_decode_drawer DBB2             viewLogs@logNumber 0044  
                        _main D82A                          _keys FD79               food_press@F3080 0075  
                        fsr2h 000FDA                          fsr2l 000FD9                 get_digits@sum 0001  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000             viewLogs@keypress2 0045           standbyMode@keypress 004C  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000                   _writeEEPROM D800  
             diet_press@F3095 006D               ?_verifyKeypress 0001              __end_of_LCD_LEFT FDA6  
         standbyMode@whichKey 004A               food_press@count 002B               food_press@tally 0025  
           _drawerInformation 005D            writeEEPROM@address 0002                         ?_main 0001  
                       _EEADR 000FA9                         STR_10 FFCA                         STR_11 FFEB  
                       STR_20 FF03                         STR_12 FE01                         STR_13 FF39  
                       STR_21 FEFF                         STR_30 FE43                         STR_14 FE53  
                       STR_22 FDAB                         STR_15 FFF2                         STR_31 FF1D  
                       STR_23 FDF0                         STR_40 FE01                         STR_16 FFF9  
                       STR_32 FFAA                         STR_24 FE83                         STR_25 FED2  
                       STR_33 FE73                         STR_17 FE63                         STR_41 FDCE  
                       STR_34 FE73                         STR_18 FF0B                         STR_50 FF6F  
                       STR_26 FF62                         STR_42 FEC3                         STR_43 FEC3  
                       STR_19 FF07                         STR_27 FF7C                         STR_35 FF2B  
                       STR_51 FDBD                         STR_36 FFAA                         STR_60 FF0E  
                       STR_28 FEB3                         STR_44 FEA3                         STR_52 FE93  
                       STR_61 FFD3                         STR_53 FEB3                         STR_37 FEE1  
                       STR_29 FE43                         STR_45 FE23                         STR_38 FEE1  
                       STR_54 FFC0                         STR_46 FFB5                         STR_62 FF9F  
                       STR_39 FFE3                         STR_47 FF89                         STR_63 FF55  
                       STR_55 FE33                         STR_64 FF9F                         STR_48 FF47  
                       STR_56 FF0E                         STR_65 FF55                         STR_49 FDCE  
                       STR_57 FFD3                         STR_66 FF9F                         STR_58 FFC0  
                       STR_59 FE33             viewLogs@returnVal 0042               __end_of___lwdiv D942  
             __end_of___lwmod D8A4                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
             diet_press@count 0029               __end_of_lcdInst D79C                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD D8F0                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FDA5                  displayLogs@n 0038                         _input FD8A  
                       _putch D79C                         tablat 000FF5             _LCDinterruptState 007E  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
        standbyMode@keypress1 004E                __CFG_PBADEN$ON 000000               standbyMode@diet 0057  
             standbyMode@food 0053               standbyMode@zero 0051               __initialization D7C4  
                __end_of_main D862                  __end_of_keys FD8A                  standbyMode@i 0059  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FDA7              food_press@drawer 0021  
                      ??_main 005D                 __activetblptr 000002           food_press@backCheck 0027  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _EEDATA 000FA8  
                      _EECON2 000FA7                        ?_putch 0001              diet_press@drawer 001F  
              __CFG_XINST$OFF 000000                        ___wmul D7DA                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 D7CA  
                   ??_lcdInst 0003                        _printf DBB2          __size_of_displayLogs 03EE  
         food_press@foodTable 002D                     ??_initLCD 0004               get_digits@count 0005  
                __mediumconst FD78              __end_of_viewLogs E396                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization D7D0          which_drawer@keypress 002A                 ___rparam_used 000001  
             writeEEPROM@data 0001               viewLogs@logView 003E                  ?_standbyMode 0001  
              __pcstackCOMRAM 0001                 __end_of_input FD9B                 __end_of_putch D7B0  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 001F  
           food_press@isValid 0029                       ??_putch 0003                    _check_food ECAA  
            ??_verifyKeypress 0003                  ?_writeEEPROM 0001                       ?___wmul 0001  
                  _diet_press E784                       ?_printf 000D                    _get_digits DA12  
                  _readEEPROM D7B0        standbyMode@drawerCount 0055                    _food_press DCD0  
           __end_of_lcdNibble DA12                       __Hparam 0000                       __Lparam 0000  
                   ?_viewLogs 003A      displayLogs@operationTime 002A               __size_of___wmul 0026  
                     ___lwdiv D8F0                       ___lwmod D862                       __pcinit D7C4  
                     __ramtop 1000                       _lcdInst D788                       __ptext0 D82A  
                     __ptext1 F4DC                       __ptext2 D800                       __ptext3 DEC4  
                     __ptext4 DAD0                       __ptext5 E0C8                       __ptext6 D942  
                     __ptext7 E396                       __ptext8 D7B0                       __ptext9 D7DA  
      __size_of_decode_drawer 00E2               __size_of_printf 011E                       _initLCD D8A4  
                     _dpowers FD9B         which_drawer@backCheck 0026                     _LCD_RIGHT FDA6  
        displayLogs@logNumber 001F          end_of_initialization D7D0          displayLogs@keypress3 0029  
             which_drawer@sum 0024         __end_of_LCD_SIZE_HORZ FDA9                   ?_check_food 0001  
       __end_of_LCD_SIZE_VERT FDA8                 __Lmediumconst FD78                       printf@c 001E  
                     printf@f 000D                       postdec2 000FDD                    ??_viewLogs 003C  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 089C  
                 ?_diet_press 001F                     _PORTBbits 000F81                 ?_which_drawer 001F  
         diet_press@backCheck 0027                   ?_get_digits 0001              viewLogs@checkLog 0040  
           readEEPROM@address 0001             standbyMode@drawer 005B                 _decode_drawer DAD0  
                 ?_readEEPROM 0001                   ?_food_press 001F           diet_press@dietTable 002E  
               ??_displayLogs 0021          __size_of_writeEEPROM 002A                __end_of___wmul D800  
      standbyMode@validDrawer 004F           __size_of_check_food 0832                ??_which_drawer 0021  
              __end_of_printf DCD0           start_initialization D7C4                ?_decode_drawer 0001  
         __size_of_diet_press 0526           __size_of_get_digits 00BE                      ??___wmul 0005  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0017            food_press@keypress 0035  
         __size_of_readEEPROM 0014           __end_of_displayLogs E784           __size_of_food_press 01F4  
standbyMode@LCDinterruptState 007D                   __pbssCOMRAM 005D           decode_drawer@drawer 0001  
            ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000                 __pmediumconst FD78  
                   _lcdNibble D994                      ?___lwdiv 0001                      ?___lwmod 0008  
           __size_of_viewLogs 02CE                      ?_lcdInst 0001                      ?_initLCD 0001  
         check_food@foodInput 0003              ___lwdiv@quotient 0005               ??_decode_drawer 0003  
              __size_of_putch 0014                  ??_check_food 0005                      _LCD_LEFT FDA5  
              ___wmul@product 0005                      _LATDbits 000F8C          __end_of_which_drawer E0C8  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 0021  
                 _displayLogs E396       __size_of_verifyKeypress 0052             ___wmul@multiplier 0001  
          __end_of_check_food F4DC                 lcdNibble@data 0002                    printf@flag 001A  
               lcdNibble@temp 0001                    printf@prec 001B                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FDAA                 diet_press@sum 002B             which_drawer@count 0028  
          __end_of_diet_press ECAA                  ??_readEEPROM 0001                  ??_food_press 0023  
          diet_press@keypress 002D                    _EECON1bits 000FA6                      __Hrparam 0000  
               ??_standbyMode 0046                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
          __end_of_get_digits DAD0            diet_press@previous 0023         displayLogs@flatPieces 0025  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_lcdInst 0014  
            __size_of_initLCD 004C            __end_of_readEEPROM D7C4        __end_of_LCD_HORZ_LIMIT FDAB  
          __end_of_food_press DEC4               ___lwdiv@divisor 0003               ___lwdiv@counter 0007  
                    __ptext10 DCD0                      __ptext11 DA12                      __ptext20 D994  
                    __ptext12 ECAA                      __ptext13 E784                      __ptext14 DBB2  
                    __ptext15 D79C                      __ptext16 D862                      __ptext17 D8F0  
                    __ptext18 D8A4                      __ptext19 D788                _LCD_VERT_LIMIT FDA9  
               __size_of_main 0038            displayLogs@minutes 002C            displayLogs@seconds 002E  
               ??_writeEEPROM 0002      displayLogs@markedDrawer1 0030      displayLogs@markedDrawer2 0032  
    displayLogs@markedDrawer3 0034      displayLogs@markedDrawer4 0036                   ??_lcdNibble 0001  
                    _viewLogs E0C8               verifyKeypress@i 0008                     printf@val 001C  
         __end_of_standbyMode FD78      decode_drawer@returnValue 0005         displayLogs@longPieces 0027  
            which_drawer@rand 0022                     putch@data 0003                    _INTCONbits 000FF2  
      __end_of_LCD_VERT_LIMIT FDAA         __size_of_which_drawer 0204     standbyMode@firstIteration 0048  
               _LCD_SIZE_HORZ FDA8              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FDA7  
     verifyKeypress@logNumber 0005        displayLogs@roundPieces 0023                      printf@ap 0018  
                 diet_press@i 0025                   lcdInst@data 0003                _verifyKeypress D942  
         __end_of_writeEEPROM D82A       verifyKeypress@returnVal 0006                  _which_drawer DEC4  
             ___lwmod@divisor 000A               ___lwmod@counter 000C        verifyKeypress@keypress 0001  
       check_food@returnValue 0007  
