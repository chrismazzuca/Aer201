

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 18 22:33:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	mediumconst
    64  00FDB6                     __pmediumconst:
    65                           	opt stack 0
    66  00FDB6  00                 	db	0
    67  00FDB7                     _keys:
    68                           	opt stack 0
    69  00FDB7  31                 	db	49
    70  00FDB8  32                 	db	50
    71  00FDB9  33                 	db	51
    72  00FDBA  41                 	db	65
    73  00FDBB  34                 	db	52
    74  00FDBC  35                 	db	53
    75  00FDBD  36                 	db	54
    76  00FDBE  42                 	db	66
    77  00FDBF  37                 	db	55
    78  00FDC0  38                 	db	56
    79  00FDC1  39                 	db	57
    80  00FDC2  43                 	db	67
    81  00FDC3  2A                 	db	42
    82  00FDC4  30                 	db	48
    83  00FDC5  23                 	db	35
    84  00FDC6  44                 	db	68
    85  00FDC7  00                 	db	0
    86  00FDC8                     __end_of_keys:
    87                           	opt stack 0
    88  00FDC8                     _input:
    89                           	opt stack 0
    90  00FDC8  31                 	db	49
    91  00FDC9  32                 	db	50
    92  00FDCA  33                 	db	51
    93  00FDCB  52                 	db	82
    94  00FDCC  34                 	db	52
    95  00FDCD  35                 	db	53
    96  00FDCE  36                 	db	54
    97  00FDCF  46                 	db	70
    98  00FDD0  37                 	db	55
    99  00FDD1  38                 	db	56
   100  00FDD2  39                 	db	57
   101  00FDD3  4C                 	db	76
   102  00FDD4  2A                 	db	42
   103  00FDD5  30                 	db	48
   104  00FDD6  23                 	db	35
   105  00FDD7  44                 	db	68
   106  00FDD8  00                 	db	0
   107  00FDD9                     __end_of_input:
   108                           	opt stack 0
   109  00FDD9                     _dpowers:
   110                           	opt stack 0
   111  00FDD9  0001               	dw	1
   112  00FDDB  000A               	dw	10
   113  00FDDD  0064               	dw	100
   114  00FDDF  03E8               	dw	1000
   115  00FDE1  2710               	dw	10000
   116  00FDE3                     __end_of_dpowers:
   117                           	opt stack 0
   118  00FDE3                     _LCD_LEFT:
   119                           	opt stack 0
   120  00FDE3  00                 	db	0
   121  00FDE4                     __end_of_LCD_LEFT:
   122                           	opt stack 0
   123  00FDE4                     _LCD_RIGHT:
   124                           	opt stack 0
   125  00FDE4  01                 	db	1
   126  00FDE5                     __end_of_LCD_RIGHT:
   127                           	opt stack 0
   128  00FDE5                     _LCD_SIZE_VERT:
   129                           	opt stack 0
   130  00FDE5  02                 	db	2
   131  00FDE6                     __end_of_LCD_SIZE_VERT:
   132                           	opt stack 0
   133  00FDE6                     _LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  00FDE6  10                 	db	16
   136  00FDE7                     __end_of_LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  00FDE7                     _LCD_VERT_LIMIT:
   139                           	opt stack 0
   140  00FDE7  02                 	db	2
   141  00FDE8                     __end_of_LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  00FDE8                     _LCD_HORZ_LIMIT:
   144                           	opt stack 0
   145  00FDE8  28                 	db	40
   146  00FDE9                     __end_of_LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  0000                     _PORTB	set	3969
   149  0000                     _PORTBbits	set	3969
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATDbits	set	3980
   152  0000                     _ADCON1	set	4033
   153  0000                     _ADCON0	set	4034
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISA	set	3986
   159  0000                     _LATE	set	3981
   160  0000                     _LATD	set	3980
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  00FDE9                     STR_12:
   165  00FDE9  52                 	db	82	;'R'
   166  00FDEA  65                 	db	101	;'e'
   167  00FDEB  6D                 	db	109	;'m'
   168  00FDEC  61                 	db	97	;'a'
   169  00FDED  69                 	db	105	;'i'
   170  00FDEE  6E                 	db	110	;'n'
   171  00FDEF  69                 	db	105	;'i'
   172  00FDF0  6E                 	db	110	;'n'
   173  00FDF1  67                 	db	103	;'g'
   174  00FDF2  20                 	db	32
   175  00FDF3  70                 	db	112	;'p'
   176  00FDF4  69                 	db	105	;'i'
   177  00FDF5  65                 	db	101	;'e'
   178  00FDF6  63                 	db	99	;'c'
   179  00FDF7  65                 	db	101	;'e'
   180  00FDF8  73                 	db	115	;'s'
   181  00FDF9  3A                 	db	58	;':'
   182  00FDFA  00                 	db	0
   183  00FDFB                     STR_39:
   184  00FDFB  64                 	db	100	;'d'
   185  00FDFC  72                 	db	114	;'r'
   186  00FDFD  61                 	db	97	;'a'
   187  00FDFE  77                 	db	119	;'w'
   188  00FDFF  65                 	db	101	;'e'
   189  00FE00  72                 	db	114	;'r'
   190  00FE01  73                 	db	115	;'s'
   191  00FE02  20                 	db	32
   192  00FE03  72                 	db	114	;'r'
   193  00FE04  65                 	db	101	;'e'
   194  00FE05  61                 	db	97	;'a'
   195  00FE06  63                 	db	99	;'c'
   196  00FE07  68                 	db	104	;'h'
   197  00FE08  65                 	db	101	;'e'
   198  00FE09  64                 	db	100	;'d'
   199  00FE0A  21                 	db	33
   200  00FE0B  00                 	db	0
   201  00FE0C                     STR_31:
   202  00FE0C  62                 	db	98	;'b'
   203  00FE0D  65                 	db	101	;'e'
   204  00FE0E  67                 	db	103	;'g'
   205  00FE0F  69                 	db	105	;'i'
   206  00FE10  6E                 	db	110	;'n'
   207  00FE11  20                 	db	32
   208  00FE12  6F                 	db	111	;'o'
   209  00FE13  70                 	db	112	;'p'
   210  00FE14  65                 	db	101	;'e'
   211  00FE15  72                 	db	114	;'r'
   212  00FE16  61                 	db	97	;'a'
   213  00FE17  74                 	db	116	;'t'
   214  00FE18  69                 	db	105	;'i'
   215  00FE19  6F                 	db	111	;'o'
   216  00FE1A  6E                 	db	110	;'n'
   217  00FE1B  2E                 	db	46
   218  00FE1C  00                 	db	0
   219  00FE1D                     STR_3:
   220  00FE1D  50                 	db	80	;'P'
   221  00FE1E  6C                 	db	108	;'l'
   222  00FE1F  65                 	db	101	;'e'
   223  00FE20  61                 	db	97	;'a'
   224  00FE21  73                 	db	115	;'s'
   225  00FE22  65                 	db	101	;'e'
   226  00FE23  20                 	db	32
   227  00FE24  69                 	db	105	;'i'
   228  00FE25  6E                 	db	110	;'n'
   229  00FE26  70                 	db	112	;'p'
   230  00FE27  75                 	db	117	;'u'
   231  00FE28  74                 	db	116	;'t'
   232  00FE29  20                 	db	32
   233  00FE2A  6C                 	db	108	;'l'
   234  00FE2B  6F                 	db	111	;'o'
   235  00FE2C  67                 	db	103	;'g'
   236  00FE2D  00                 	db	0
   237  00FE2E                     STR_6:
   238  00FE2E  50                 	db	80	;'P'
   239  00FE2F  72                 	db	114	;'r'
   240  00FE30  65                 	db	101	;'e'
   241  00FE31  73                 	db	115	;'s'
   242  00FE32  73                 	db	115	;'s'
   243  00FE33  20                 	db	32
   244  00FE34  61                 	db	97	;'a'
   245  00FE35  6E                 	db	110	;'n'
   246  00FE36  79                 	db	121	;'y'
   247  00FE37  20                 	db	32
   248  00FE38  6B                 	db	107	;'k'
   249  00FE39  65                 	db	101	;'e'
   250  00FE3A  79                 	db	121	;'y'
   251  00FE3B  20                 	db	32
   252  00FE3C  74                 	db	116	;'t'
   253  00FE3D  6F                 	db	111	;'o'
   254  00FE3E  00                 	db	0
   255  00FE3F                     STR_33:
   256  00FE3F  63                 	db	99	;'c'
   257  00FE40  61                 	db	97	;'a'
   258  00FE41  62                 	db	98	;'b'
   259  00FE42  69                 	db	105	;'i'
   260  00FE43  6E                 	db	110	;'n'
   261  00FE44  65                 	db	101	;'e'
   262  00FE45  74                 	db	116	;'t'
   263  00FE46  20                 	db	32
   264  00FE47  73                 	db	115	;'s'
   265  00FE48  6F                 	db	111	;'o'
   266  00FE49  72                 	db	114	;'r'
   267  00FE4A  74                 	db	116	;'t'
   268  00FE4B  65                 	db	101	;'e'
   269  00FE4C  72                 	db	114	;'r'
   270  00FE4D  21                 	db	33
   271  00FE4E  00                 	db	0
   272  00FE4F                     STR_43:
   273  00FE4F  6E                 	db	110	;'n'
   274  00FE50  75                 	db	117	;'u'
   275  00FE51  6D                 	db	109	;'m'
   276  00FE52  62                 	db	98	;'b'
   277  00FE53  65                 	db	101	;'e'
   278  00FE54  72                 	db	114	;'r'
   279  00FE55  20                 	db	32
   280  00FE56  70                 	db	112	;'p'
   281  00FE57  72                 	db	114	;'r'
   282  00FE58  65                 	db	101	;'e'
   283  00FE59  73                 	db	115	;'s'
   284  00FE5A  73                 	db	115	;'s'
   285  00FE5B  65                 	db	101	;'e'
   286  00FE5C  64                 	db	100	;'d'
   287  00FE5D  2E                 	db	46
   288  00FE5E  00                 	db	0
   289  00FE5F                     STR_13:
   290  00FE5F  52                 	db	82	;'R'
   291  00FE60  3A                 	db	58	;':'
   292  00FE61  33                 	db	51	;'3'
   293  00FE62  20                 	db	32
   294  00FE63  20                 	db	32
   295  00FE64  46                 	db	70	;'F'
   296  00FE65  3A                 	db	58	;':'
   297  00FE66  31                 	db	49	;'1'
   298  00FE67  32                 	db	50	;'2'
   299  00FE68  20                 	db	32
   300  00FE69  20                 	db	32
   301  00FE6A  4C                 	db	76	;'L'
   302  00FE6B  3A                 	db	58	;':'
   303  00FE6C  31                 	db	49	;'1'
   304  00FE6D  30                 	db	48	;'0'
   305  00FE6E  00                 	db	0
   306  00FE6F                     STR_19:
   307  00FE6F  44                 	db	68	;'D'
   308  00FE70  72                 	db	114	;'r'
   309  00FE71  61                 	db	97	;'a'
   310  00FE72  77                 	db	119	;'w'
   311  00FE73  65                 	db	101	;'e'
   312  00FE74  72                 	db	114	;'r'
   313  00FE75  20                 	db	32
   314  00FE76  25                 	db	37
   315  00FE77  69                 	db	105	;'i'
   316  00FE78  20                 	db	32
   317  00FE79  66                 	db	102	;'f'
   318  00FE7A  6F                 	db	111	;'o'
   319  00FE7B  6F                 	db	111	;'o'
   320  00FE7C  64                 	db	100	;'d'
   321  00FE7D  3A                 	db	58	;':'
   322  00FE7E  00                 	db	0
   323  00FE7F                     STR_8:
   324  00FE7F  4F                 	db	79	;'O'
   325  00FE80  70                 	db	112	;'p'
   326  00FE81  65                 	db	101	;'e'
   327  00FE82  72                 	db	114	;'r'
   328  00FE83  61                 	db	97	;'a'
   329  00FE84  74                 	db	116	;'t'
   330  00FE85  69                 	db	105	;'i'
   331  00FE86  6F                 	db	111	;'o'
   332  00FE87  6E                 	db	110	;'n'
   333  00FE88  20                 	db	32
   334  00FE89  74                 	db	116	;'t'
   335  00FE8A  69                 	db	105	;'i'
   336  00FE8B  6D                 	db	109	;'m'
   337  00FE8C  65                 	db	101	;'e'
   338  00FE8D  3A                 	db	58	;':'
   339  00FE8E  00                 	db	0
   340  00FE8F                     STR_10:
   341  00FE8F  4D                 	db	77	;'M'
   342  00FE90  61                 	db	97	;'a'
   343  00FE91  72                 	db	114	;'r'
   344  00FE92  6B                 	db	107	;'k'
   345  00FE93  65                 	db	101	;'e'
   346  00FE94  64                 	db	100	;'d'
   347  00FE95  20                 	db	32
   348  00FE96  64                 	db	100	;'d'
   349  00FE97  72                 	db	114	;'r'
   350  00FE98  61                 	db	97	;'a'
   351  00FE99  77                 	db	119	;'w'
   352  00FE9A  65                 	db	101	;'e'
   353  00FE9B  72                 	db	114	;'r'
   354  00FE9C  73                 	db	115	;'s'
   355  00FE9D  3A                 	db	58	;':'
   356  00FE9E  00                 	db	0
   357  00FE9F                     STR_23:
   358  00FE9F  44                 	db	68	;'D'
   359  00FEA0  72                 	db	114	;'r'
   360  00FEA1  61                 	db	97	;'a'
   361  00FEA2  77                 	db	119	;'w'
   362  00FEA3  65                 	db	101	;'e'
   363  00FEA4  72                 	db	114	;'r'
   364  00FEA5  20                 	db	32
   365  00FEA6  25                 	db	37
   366  00FEA7  69                 	db	105	;'i'
   367  00FEA8  20                 	db	32
   368  00FEA9  64                 	db	100	;'d'
   369  00FEAA  69                 	db	105	;'i'
   370  00FEAB  65                 	db	101	;'e'
   371  00FEAC  74                 	db	116	;'t'
   372  00FEAD  3A                 	db	58	;':'
   373  00FEAE  00                 	db	0
   374  00FEAF                     STR_14:
   375  00FEAF  44                 	db	68	;'D'
   376  00FEB0  72                 	db	114	;'r'
   377  00FEB1  61                 	db	97	;'a'
   378  00FEB2  77                 	db	119	;'w'
   379  00FEB3  65                 	db	101	;'e'
   380  00FEB4  72                 	db	114	;'r'
   381  00FEB5  20                 	db	32
   382  00FEB6  53                 	db	83	;'S'
   383  00FEB7  75                 	db	117	;'u'
   384  00FEB8  6D                 	db	109	;'m'
   385  00FEB9  6D                 	db	109	;'m'
   386  00FEBA  61                 	db	97	;'a'
   387  00FEBB  72                 	db	114	;'r'
   388  00FEBC  79                 	db	121	;'y'
   389  00FEBD  3A                 	db	58	;':'
   390  00FEBE  00                 	db	0
   391  00FEBF                     STR_40:
   392  00FEBF  41                 	db	65	;'A'
   393  00FEC0  6E                 	db	110	;'n'
   394  00FEC1  6F                 	db	111	;'o'
   395  00FEC2  74                 	db	116	;'t'
   396  00FEC3  68                 	db	104	;'h'
   397  00FEC4  65                 	db	101	;'e'
   398  00FEC5  72                 	db	114	;'r'
   399  00FEC6  20                 	db	32
   400  00FEC7  64                 	db	100	;'d'
   401  00FEC8  72                 	db	114	;'r'
   402  00FEC9  61                 	db	97	;'a'
   403  00FECA  77                 	db	119	;'w'
   404  00FECB  65                 	db	101	;'e'
   405  00FECC  72                 	db	114	;'r'
   406  00FECD  3F                 	db	63	;'?'
   407  00FECE  00                 	db	0
   408  00FECF                     STR_18:
   409  00FECF  23                 	db	35
   410  00FED0  20                 	db	32
   411  00FED1  3D                 	db	61	;'='
   412  00FED2  20                 	db	32
   413  00FED3  59                 	db	89	;'Y'
   414  00FED4  65                 	db	101	;'e'
   415  00FED5  73                 	db	115	;'s'
   416  00FED6  2C                 	db	44
   417  00FED7  20                 	db	32
   418  00FED8  44                 	db	68	;'D'
   419  00FED9  20                 	db	32
   420  00FEDA  3D                 	db	61	;'='
   421  00FEDB  20                 	db	32
   422  00FEDC  4E                 	db	78	;'N'
   423  00FEDD  6F                 	db	111	;'o'
   424  00FEDE  00                 	db	0
   425  00FEDF                     STR_32:
   426  00FEDF  57                 	db	87	;'W'
   427  00FEE0  65                 	db	101	;'e'
   428  00FEE1  6C                 	db	108	;'l'
   429  00FEE2  63                 	db	99	;'c'
   430  00FEE3  6F                 	db	111	;'o'
   431  00FEE4  6D                 	db	109	;'m'
   432  00FEE5  65                 	db	101	;'e'
   433  00FEE6  20                 	db	32
   434  00FEE7  74                 	db	116	;'t'
   435  00FEE8  6F                 	db	111	;'o'
   436  00FEE9  20                 	db	32
   437  00FEEA  79                 	db	121	;'y'
   438  00FEEB  6F                 	db	111	;'o'
   439  00FEEC  75                 	db	117	;'u'
   440  00FEED  72                 	db	114	;'r'
   441  00FEEE  00                 	db	0
   442  00FEEF                     STR_1:
   443  00FEEF  35                 	db	53	;'5'
   444  00FEF0  20                 	db	32
   445  00FEF1  70                 	db	112	;'p'
   446  00FEF2  72                 	db	114	;'r'
   447  00FEF3  65                 	db	101	;'e'
   448  00FEF4  76                 	db	118	;'v'
   449  00FEF5  69                 	db	105	;'i'
   450  00FEF6  6F                 	db	111	;'o'
   451  00FEF7  75                 	db	117	;'u'
   452  00FEF8  73                 	db	115	;'s'
   453  00FEF9  20                 	db	32
   454  00FEFA  6C                 	db	108	;'l'
   455  00FEFB  6F                 	db	111	;'o'
   456  00FEFC  67                 	db	103	;'g'
   457  00FEFD  73                 	db	115	;'s'
   458  00FEFE  00                 	db	0
   459  00FEFF                     STR_15:
   460  00FEFF  44                 	db	68	;'D'
   461  00FF00  72                 	db	114	;'r'
   462  00FF01  61                 	db	97	;'a'
   463  00FF02  77                 	db	119	;'w'
   464  00FF03  65                 	db	101	;'e'
   465  00FF04  72                 	db	114	;'r'
   466  00FF05  20                 	db	32
   467  00FF06  31                 	db	49	;'1'
   468  00FF07  3A                 	db	58	;':'
   469  00FF08  20                 	db	32
   470  00FF09  52                 	db	82	;'R'
   471  00FF0A  46                 	db	70	;'F'
   472  00FF0B  31                 	db	49	;'1'
   473  00FF0C  32                 	db	50	;'2'
   474  00FF0D  00                 	db	0
   475  00FF0E                     STR_27:
   476  00FF0E  44                 	db	68	;'D'
   477  00FF0F  72                 	db	114	;'r'
   478  00FF10  61                 	db	97	;'a'
   479  00FF11  77                 	db	119	;'w'
   480  00FF12  65                 	db	101	;'e'
   481  00FF13  72                 	db	114	;'r'
   482  00FF14  20                 	db	32
   483  00FF15  6E                 	db	110	;'n'
   484  00FF16  75                 	db	117	;'u'
   485  00FF17  6D                 	db	109	;'m'
   486  00FF18  62                 	db	98	;'b'
   487  00FF19  65                 	db	101	;'e'
   488  00FF1A  72                 	db	114	;'r'
   489  00FF1B  3A                 	db	58	;':'
   490  00FF1C  00                 	db	0
   491  00FF1D                     STR_44:
   492  00FF1D  44                 	db	68	;'D'
   493  00FF1E  72                 	db	114	;'r'
   494  00FF1F  61                 	db	97	;'a'
   495  00FF20  77                 	db	119	;'w'
   496  00FF21  65                 	db	101	;'e'
   497  00FF22  72                 	db	114	;'r'
   498  00FF23  20                 	db	32
   499  00FF24  61                 	db	97	;'a'
   500  00FF25  6C                 	db	108	;'l'
   501  00FF26  72                 	db	114	;'r'
   502  00FF27  65                 	db	101	;'e'
   503  00FF28  61                 	db	97	;'a'
   504  00FF29  64                 	db	100	;'d'
   505  00FF2A  79                 	db	121	;'y'
   506  00FF2B  00                 	db	0
   507  00FF2C                     STR_21:
   508  00FF2C  49                 	db	73	;'I'
   509  00FF2D  6E                 	db	110	;'n'
   510  00FF2E  76                 	db	118	;'v'
   511  00FF2F  61                 	db	97	;'a'
   512  00FF30  6C                 	db	108	;'l'
   513  00FF31  69                 	db	105	;'i'
   514  00FF32  64                 	db	100	;'d'
   515  00FF33  20                 	db	32
   516  00FF34  66                 	db	102	;'f'
   517  00FF35  6F                 	db	111	;'o'
   518  00FF36  6F                 	db	111	;'o'
   519  00FF37  64                 	db	100	;'d'
   520  00FF38  21                 	db	33
   521  00FF39  00                 	db	0
   522  00FF3A                     STR_25:
   523  00FF3A  49                 	db	73	;'I'
   524  00FF3B  6E                 	db	110	;'n'
   525  00FF3C  76                 	db	118	;'v'
   526  00FF3D  61                 	db	97	;'a'
   527  00FF3E  6C                 	db	108	;'l'
   528  00FF3F  69                 	db	105	;'i'
   529  00FF40  64                 	db	100	;'d'
   530  00FF41  20                 	db	32
   531  00FF42  64                 	db	100	;'d'
   532  00FF43  69                 	db	105	;'i'
   533  00FF44  65                 	db	101	;'e'
   534  00FF45  74                 	db	116	;'t'
   535  00FF46  21                 	db	33
   536  00FF47  00                 	db	0
   537  00FF48                     STR_36:
   538  00FF48  6F                 	db	111	;'o'
   539  00FF49  72                 	db	114	;'r'
   540  00FF4A  20                 	db	32
   541  00FF4B  70                 	db	112	;'p'
   542  00FF4C  72                 	db	114	;'r'
   543  00FF4D  65                 	db	101	;'e'
   544  00FF4E  73                 	db	115	;'s'
   545  00FF4F  73                 	db	115	;'s'
   546  00FF50  20                 	db	32
   547  00FF51  23                 	db	35
   548  00FF52  20                 	db	32
   549  00FF53  74                 	db	116	;'t'
   550  00FF54  6F                 	db	111	;'o'
   551  00FF55  00                 	db	0
   552  00FF56                     STR_51:
   553  00FF56  49                 	db	73	;'I'
   554  00FF57  6E                 	db	110	;'n'
   555  00FF58  76                 	db	118	;'v'
   556  00FF59  61                 	db	97	;'a'
   557  00FF5A  6C                 	db	108	;'l'
   558  00FF5B  69                 	db	105	;'i'
   559  00FF5C  64                 	db	100	;'d'
   560  00FF5D  20                 	db	32
   561  00FF5E  6B                 	db	107	;'k'
   562  00FF5F  65                 	db	101	;'e'
   563  00FF60  79                 	db	121	;'y'
   564  00FF61  21                 	db	33
   565  00FF62  00                 	db	0
   566  00FF63                     STR_16:
   567  00FF63  44                 	db	68	;'D'
   568  00FF64  72                 	db	114	;'r'
   569  00FF65  61                 	db	97	;'a'
   570  00FF66  77                 	db	119	;'w'
   571  00FF67  65                 	db	101	;'e'
   572  00FF68  72                 	db	114	;'r'
   573  00FF69  20                 	db	32
   574  00FF6A  32                 	db	50	;'2'
   575  00FF6B  3A                 	db	58	;':'
   576  00FF6C  20                 	db	32
   577  00FF6D  4C                 	db	76	;'L'
   578  00FF6E  31                 	db	49	;'1'
   579  00FF6F  00                 	db	0
   580  00FF70                     STR_38:
   581  00FF70  4D                 	db	77	;'M'
   582  00FF71  61                 	db	97	;'a'
   583  00FF72  78                 	db	120	;'x'
   584  00FF73  69                 	db	105	;'i'
   585  00FF74  6D                 	db	109	;'m'
   586  00FF75  75                 	db	117	;'u'
   587  00FF76  6D                 	db	109	;'m'
   588  00FF77  20                 	db	32
   589  00FF78  6F                 	db	111	;'o'
   590  00FF79  66                 	db	102	;'f'
   591  00FF7A  20                 	db	32
   592  00FF7B  38                 	db	56	;'8'
   593  00FF7C  00                 	db	0
   594  00FF7D                     STR_17:
   595  00FF7D  41                 	db	65	;'A'
   596  00FF7E  6E                 	db	110	;'n'
   597  00FF7F  6F                 	db	111	;'o'
   598  00FF80  74                 	db	116	;'t'
   599  00FF81  68                 	db	104	;'h'
   600  00FF82  65                 	db	101	;'e'
   601  00FF83  72                 	db	114	;'r'
   602  00FF84  20                 	db	32
   603  00FF85  6C                 	db	108	;'l'
   604  00FF86  6F                 	db	111	;'o'
   605  00FF87  67                 	db	103	;'g'
   606  00FF88  3F                 	db	63	;'?'
   607  00FF89  00                 	db	0
   608  00FF8A                     STR_35:
   609  00FF8A  76                 	db	118	;'v'
   610  00FF8B  69                 	db	105	;'i'
   611  00FF8C  65                 	db	101	;'e'
   612  00FF8D  77                 	db	119	;'w'
   613  00FF8E  20                 	db	32
   614  00FF8F  6C                 	db	108	;'l'
   615  00FF90  6F                 	db	111	;'o'
   616  00FF91  67                 	db	103	;'g'
   617  00FF92  73                 	db	115	;'s'
   618  00FF93  2C                 	db	44
   619  00FF94  00                 	db	0
   620  00FF95                     STR_2:
   621  00FF95  61                 	db	97	;'a'
   622  00FF96  76                 	db	118	;'v'
   623  00FF97  61                 	db	97	;'a'
   624  00FF98  69                 	db	105	;'i'
   625  00FF99  6C                 	db	108	;'l'
   626  00FF9A  61                 	db	97	;'a'
   627  00FF9B  62                 	db	98	;'b'
   628  00FF9C  6C                 	db	108	;'l'
   629  00FF9D  65                 	db	101	;'e'
   630  00FF9E  2E                 	db	46
   631  00FF9F  00                 	db	0
   632  00FFA0                     STR_50:
   633  00FFA0  52                 	db	82	;'R'
   634  00FFA1  65                 	db	101	;'e'
   635  00FFA2  62                 	db	98	;'b'
   636  00FFA3  6F                 	db	111	;'o'
   637  00FFA4  6F                 	db	111	;'o'
   638  00FFA5  74                 	db	116	;'t'
   639  00FFA6  69                 	db	105	;'i'
   640  00FFA7  6E                 	db	110	;'n'
   641  00FFA8  67                 	db	103	;'g'
   642  00FFA9  2E                 	db	46
   643  00FFAA  00                 	db	0
   644  00FFAB                     STR_22:
   645  00FFAB  54                 	db	84	;'T'
   646  00FFAC  72                 	db	114	;'r'
   647  00FFAD  79                 	db	121	;'y'
   648  00FFAE  20                 	db	32
   649  00FFAF  61                 	db	97	;'a'
   650  00FFB0  67                 	db	103	;'g'
   651  00FFB1  61                 	db	97	;'a'
   652  00FFB2  69                 	db	105	;'i'
   653  00FFB3  6E                 	db	110	;'n'
   654  00FFB4  2E                 	db	46
   655  00FFB5  00                 	db	0
   656  00FFB6                     STR_34:
   657  00FFB6  50                 	db	80	;'P'
   658  00FFB7  72                 	db	114	;'r'
   659  00FFB8  65                 	db	101	;'e'
   660  00FFB9  73                 	db	115	;'s'
   661  00FFBA  73                 	db	115	;'s'
   662  00FFBB  20                 	db	32
   663  00FFBC  44                 	db	68	;'D'
   664  00FFBD  20                 	db	32
   665  00FFBE  74                 	db	116	;'t'
   666  00FFBF  6F                 	db	111	;'o'
   667  00FFC0  00                 	db	0
   668  00FFC1                     STR_42:
   669  00FFC1  4E                 	db	78	;'N'
   670  00FFC2  6F                 	db	111	;'o'
   671  00FFC3  20                 	db	32
   672  00FFC4  64                 	db	100	;'d'
   673  00FFC5  72                 	db	114	;'r'
   674  00FFC6  61                 	db	97	;'a'
   675  00FFC7  77                 	db	119	;'w'
   676  00FFC8  65                 	db	101	;'e'
   677  00FFC9  72                 	db	114	;'r'
   678  00FFCA  00                 	db	0
   679  00FFCB                     STR_4:
   680  00FFCB  6E                 	db	110	;'n'
   681  00FFCC  75                 	db	117	;'u'
   682  00FFCD  6D                 	db	109	;'m'
   683  00FFCE  62                 	db	98	;'b'
   684  00FFCF  65                 	db	101	;'e'
   685  00FFD0  72                 	db	114	;'r'
   686  00FFD1  3A                 	db	58	;':'
   687  00FFD2  20                 	db	32
   688  00FFD3  00                 	db	0
   689  00FFD4                     STR_7:
   690  00FFD4  6D                 	db	109	;'m'
   691  00FFD5  6F                 	db	111	;'o'
   692  00FFD6  76                 	db	118	;'v'
   693  00FFD7  65                 	db	101	;'e'
   694  00FFD8  20                 	db	32
   695  00FFD9  6F                 	db	111	;'o'
   696  00FFDA  6E                 	db	110	;'n'
   697  00FFDB  2E                 	db	46
   698  00FFDC  00                 	db	0
   699  00FFDD                     STR_45:
   700  00FFDD  69                 	db	105	;'i'
   701  00FFDE  6E                 	db	110	;'n'
   702  00FFDF  20                 	db	32
   703  00FFE0  75                 	db	117	;'u'
   704  00FFE1  73                 	db	115	;'s'
   705  00FFE2  65                 	db	101	;'e'
   706  00FFE3  21                 	db	33
   707  00FFE4  00                 	db	0
   708  00FFE5                     STR_29:
   709  00FFE5  53                 	db	83	;'S'
   710  00FFE6  74                 	db	116	;'t'
   711  00FFE7  61                 	db	97	;'a'
   712  00FFE8  6E                 	db	110	;'n'
   713  00FFE9  64                 	db	100	;'d'
   714  00FFEA  62                 	db	98	;'b'
   715  00FFEB  79                 	db	121	;'y'
   716  00FFEC  00                 	db	0
   717  00FFED                     STR_5:
   718  00FFED  47                 	db	71	;'G'
   719  00FFEE  72                 	db	114	;'r'
   720  00FFEF  65                 	db	101	;'e'
   721  00FFF0  61                 	db	97	;'a'
   722  00FFF1  74                 	db	116	;'t'
   723  00FFF2  21                 	db	33
   724  00FFF3  00                 	db	0
   725  00FFF4                     STR_11:
   726  00FFF4  31                 	db	49	;'1'
   727  00FFF5  2C                 	db	44
   728  00FFF6  20                 	db	32
   729  00FFF7  31                 	db	49	;'1'
   730  00FFF8  33                 	db	51	;'3'
   731  00FFF9  00                 	db	0
   732  00FFFA                     STR_9:
   733  00FFFA  32                 	db	50	;'2'
   734  00FFFB  3A                 	db	58	;':'
   735  00FFFC  33                 	db	51	;'3'
   736  00FFFD  39                 	db	57	;'9'
   737  00FFFE  00                 	db	0
   738  0000                     
   739                           ; #config settings
   740  00FFFF  00                 	db	0	; dummy byte at the end
   741  0000                     
   742                           	psect	cinit
   743  00DD98                     __pcinit:
   744                           	opt stack 0
   745  00DD98                     start_initialization:
   746                           	opt stack 0
   747  00DD98                     __initialization:
   748                           	opt stack 0
   749                           
   750                           ; Clear objects allocated to COMRAM (34 bytes)
   751  00DD98  EE00  F046         	lfsr	0,__pbssCOMRAM
   752  00DD9C  0E22               	movlw	34
   753  00DD9E                     clear_0:
   754  00DD9E  6AEE               	clrf	postinc0,c
   755  00DDA0  06E8               	decf	wreg,f,c
   756  00DDA2  E1FD               	bnz	clear_0
   757  00DDA4                     end_of_initialization:
   758                           	opt stack 0
   759  00DDA4                     __end_of__initialization:
   760                           	opt stack 0
   761  00DDA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   762  00DDA6  6EF8               	movwf	tblptru,c
   763  00DDA8  0100               	movlb	0
   764  00DDAA  EFD7  F06E         	goto	_main	;jump to C main() function
   765                           tblptru	equ	0xFF8
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           
   769                           	psect	bssCOMRAM
   770  000046                     __pbssCOMRAM:
   771                           	opt stack 0
   772  000046                     _drawerInformation:
   773                           	opt stack 0
   774  000046                     	ds	16
   775  000056                     diet_press@F3055:
   776                           	opt stack 0
   777  000056                     	ds	8
   778  00005E                     food_press@F3040:
   779                           	opt stack 0
   780  00005E                     	ds	8
   781  000066                     standbyMode@LCDinterruptState:
   782                           	opt stack 0
   783  000066                     	ds	1
   784  000067                     	ds	1
   785                           tblptru	equ	0xFF8
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           
   789                           	psect	cstackCOMRAM
   790  000001                     __pcstackCOMRAM:
   791                           	opt stack 0
   792  000001                     ?_check_food:
   793                           	opt stack 0
   794  000001                     ?_get_digits:
   795                           	opt stack 0
   796  000001                     ?_decode_drawer:
   797                           	opt stack 0
   798  000001                     ?___lwdiv:
   799                           	opt stack 0
   800  000001                     lcdNibble@temp:
   801                           	opt stack 0
   802  000001                     check_food@sum:
   803                           	opt stack 0
   804  000001                     get_digits@sum:
   805                           	opt stack 0
   806  000001                     decode_drawer@drawer:
   807                           	opt stack 0
   808  000001                     ___lwdiv@dividend:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x0
   812  000001                     	ds	1
   813  000002                     lcdNibble@data:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x1
   817  000002                     	ds	1
   818  000003                     ??_get_digits:
   819  000003                     ??_decode_drawer:
   820  000003                     lcdInst@data:
   821                           	opt stack 0
   822  000003                     putch@data:
   823                           	opt stack 0
   824  000003                     check_food@foodInput:
   825                           	opt stack 0
   826  000003                     ___lwdiv@divisor:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x2
   830  000003                     	ds	1
   831  000004                     ??_initLCD:
   832                           
   833                           ; 1 bytes @ 0x3
   834  000004                     	ds	1
   835  000005                     ??_check_food:
   836  000005                     get_digits@count:
   837                           	opt stack 0
   838  000005                     decode_drawer@returnValue:
   839                           	opt stack 0
   840  000005                     ___lwdiv@quotient:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x4
   844  000005                     	ds	2
   845  000007                     ___lwdiv@counter:
   846                           	opt stack 0
   847  000007                     check_food@returnValue:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x6
   851  000007                     	ds	1
   852  000008                     ?___lwmod:
   853                           	opt stack 0
   854  000008                     ___lwmod@dividend:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x7
   858  000008                     	ds	2
   859  00000A                     ___lwmod@divisor:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x9
   863  00000A                     	ds	2
   864  00000C                     ___lwmod@counter:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0xB
   868  00000C                     	ds	1
   869  00000D                     ?_printf:
   870                           	opt stack 0
   871  00000D                     printf@f:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0xC
   875  00000D                     	ds	4
   876  000011                     ??_printf:
   877                           
   878                           ; 1 bytes @ 0x10
   879  000011                     	ds	1
   880  000012                     printf@ap:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x11
   884  000012                     	ds	2
   885  000014                     printf@flag:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x13
   889  000014                     	ds	1
   890  000015                     printf@prec:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x14
   894  000015                     	ds	1
   895  000016                     printf@val:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x15
   899  000016                     	ds	2
   900  000018                     printf@c:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x17
   904  000018                     	ds	1
   905  000019                     ?_viewLogs:
   906                           	opt stack 0
   907  000019                     ?_food_press:
   908                           	opt stack 0
   909  000019                     ?_diet_press:
   910                           	opt stack 0
   911  000019                     ?_which_drawer:
   912                           	opt stack 0
   913  000019                     food_press@dietSum:
   914                           	opt stack 0
   915  000019                     diet_press@drawer:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x18
   919  000019                     	ds	2
   920  00001B                     ??_viewLogs:
   921  00001B                     ??_diet_press:
   922  00001B                     ??_which_drawer:
   923  00001B                     food_press@drawer:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x1A
   927  00001B                     	ds	1
   928  00001C                     which_drawer@rand:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1B
   932  00001C                     	ds	1
   933  00001D                     ??_food_press:
   934  00001D                     viewLogs@keypress3:
   935                           	opt stack 0
   936  00001D                     diet_press@previous:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x1C
   940  00001D                     	ds	1
   941  00001E                     viewLogs@keypress2:
   942                           	opt stack 0
   943  00001E                     which_drawer@sum:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x1D
   947  00001E                     	ds	1
   948  00001F                     food_press@tally:
   949                           	opt stack 0
   950  00001F                     diet_press@i:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x1E
   954  00001F                     	ds	1
   955  000020                     which_drawer@backCheck:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x1F
   959  000020                     	ds	1
   960  000021                     food_press@backCheck:
   961                           	opt stack 0
   962  000021                     diet_press@backCheck:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x20
   966  000021                     	ds	1
   967  000022                     which_drawer@count:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x21
   971  000022                     	ds	1
   972  000023                     food_press@isValid:
   973                           	opt stack 0
   974  000023                     diet_press@count:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x22
   978  000023                     	ds	1
   979  000024                     which_drawer@keypress:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x23
   983  000024                     	ds	1
   984  000025                     food_press@count:
   985                           	opt stack 0
   986  000025                     diet_press@sum:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x24
   990  000025                     	ds	2
   991  000027                     diet_press@keypress:
   992                           	opt stack 0
   993  000027                     food_press@foodTable:
   994                           	opt stack 0
   995                           
   996                           ; 8 bytes @ 0x26
   997  000027                     	ds	1
   998  000028                     diet_press@dietTable:
   999                           	opt stack 0
  1000                           
  1001                           ; 8 bytes @ 0x27
  1002  000028                     	ds	7
  1003  00002F                     food_press@keypress:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x2E
  1007  00002F                     	ds	1
  1008  000030                     ??_standbyMode:
  1009                           
  1010                           ; 1 bytes @ 0x2F
  1011  000030                     	ds	2
  1012  000032                     standbyMode@firstIteration:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x31
  1016  000032                     	ds	2
  1017  000034                     standbyMode@whichKey:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x33
  1021  000034                     	ds	2
  1022  000036                     standbyMode@keypress:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x35
  1026  000036                     	ds	1
  1027  000037                     standbyMode@keypress1:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x36
  1031  000037                     	ds	1
  1032  000038                     standbyMode@validDrawer:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x37
  1036  000038                     	ds	2
  1037  00003A                     standbyMode@zero:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0x39
  1041  00003A                     	ds	2
  1042  00003C                     standbyMode@food:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x3B
  1046  00003C                     	ds	2
  1047  00003E                     standbyMode@drawerCount:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x3D
  1051  00003E                     	ds	2
  1052  000040                     standbyMode@diet:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x3F
  1056  000040                     	ds	2
  1057  000042                     standbyMode@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x41
  1061  000042                     	ds	2
  1062  000044                     standbyMode@drawer:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x43
  1066  000044                     	ds	2
  1067  000046                     tblptru	equ	0xFF8
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           
  1071                           ; 1 bytes @ 0x45
  1072 ;;
  1073 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1074 ;;
  1075 ;; *************** function _main *****************
  1076 ;; Defined at:
  1077 ;;		line 13 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels required when called:    5
  1097 ;; This function calls:
  1098 ;;		_initLCD
  1099 ;;		_standbyMode
  1100 ;; This function is called by:
  1101 ;;		Startup code after reset
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text0
  1106  00DDAE                     __ptext0:
  1107                           	opt stack 0
  1108  00DDAE                     _main:
  1109                           	opt stack 26
  1110                           
  1111                           ;main.c: 19: LATA = 0x00;
  1112                           
  1113                           ;incstack = 0
  1114  00DDAE  0E00               	movlw	0
  1115  00DDB0  6E89               	movwf	3977,c	;volatile
  1116                           
  1117                           ;main.c: 20: LATB = 0x00;
  1118  00DDB2  0E00               	movlw	0
  1119  00DDB4  6E8A               	movwf	3978,c	;volatile
  1120                           
  1121                           ;main.c: 21: LATC = 0x00;
  1122  00DDB6  0E00               	movlw	0
  1123  00DDB8  6E8B               	movwf	3979,c	;volatile
  1124                           
  1125                           ;main.c: 22: LATD = 0x00;
  1126  00DDBA  0E00               	movlw	0
  1127  00DDBC  6E8C               	movwf	3980,c	;volatile
  1128                           
  1129                           ;main.c: 23: LATE = 0x00;
  1130  00DDBE  0E00               	movlw	0
  1131  00DDC0  6E8D               	movwf	3981,c	;volatile
  1132                           
  1133                           ;main.c: 27: TRISA = 0xFF;
  1134  00DDC2  6892               	setf	3986,c	;volatile
  1135                           
  1136                           ;main.c: 28: TRISB = 0xFF;
  1137  00DDC4  6893               	setf	3987,c	;volatile
  1138                           
  1139                           ;main.c: 29: TRISC = 0x00;
  1140  00DDC6  0E00               	movlw	0
  1141  00DDC8  6E94               	movwf	3988,c	;volatile
  1142                           
  1143                           ;main.c: 30: TRISD = 0x00;
  1144  00DDCA  0E00               	movlw	0
  1145  00DDCC  6E95               	movwf	3989,c	;volatile
  1146                           
  1147                           ;main.c: 31: TRISE = 0x00;
  1148  00DDCE  0E00               	movlw	0
  1149  00DDD0  6E96               	movwf	3990,c	;volatile
  1150                           
  1151                           ;main.c: 34: ADCON0 = 0x00;
  1152  00DDD2  0E00               	movlw	0
  1153  00DDD4  6EC2               	movwf	4034,c	;volatile
  1154                           
  1155                           ;main.c: 35: ADCON1 = 0b00001111;
  1156  00DDD6  0E0F               	movlw	15
  1157  00DDD8  6EC1               	movwf	4033,c	;volatile
  1158                           
  1159                           ;main.c: 38: initLCD();
  1160  00DDDA  EC14  F06F         	call	_initLCD	;wreg free
  1161                           
  1162                           ;main.c: 56: standbyMode();
  1163  00DDDE  EC27  F077         	call	_standbyMode	;wreg free
  1164                           
  1165                           ;main.c: 57: return;
  1166  00DDE2  EF00  F000         	goto	start
  1167  00DDE6                     __end_of_main:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           
  1173 ;; *************** function _standbyMode *****************
  1174 ;; Defined at:
  1175 ;;		line 838 in file "standbyMode.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  keypress1       1   54[COMRAM] unsigned char 
  1180 ;;  whichKey        2   51[COMRAM] unsigned int 
  1181 ;;  drawer          2   67[COMRAM] unsigned int 
  1182 ;;  i               2   65[COMRAM] unsigned int 
  1183 ;;  diet            2   63[COMRAM] unsigned int 
  1184 ;;  drawerCount     2   61[COMRAM] unsigned int 
  1185 ;;  food            2   59[COMRAM] unsigned int 
  1186 ;;  zero            2   57[COMRAM] unsigned int 
  1187 ;;  validDrawer     2   55[COMRAM] unsigned int 
  1188 ;;  firstIterati    2   49[COMRAM] unsigned int 
  1189 ;;  keypress        1   53[COMRAM] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;Total ram usage:       22 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    4
  1206 ;; This function calls:
  1207 ;;		_diet_press
  1208 ;;		_food_press
  1209 ;;		_lcdInst
  1210 ;;		_printf
  1211 ;;		_viewLogs
  1212 ;;		_which_drawer
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text1
  1219  00EE4E                     __ptext1:
  1220                           	opt stack 0
  1221  00EE4E                     _standbyMode:
  1222                           	opt stack 26
  1223                           
  1224                           ;standbyMode.c: 839: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1225                           
  1226                           ;incstack = 0
  1227  00EE4E  0E01               	movlw	1
  1228  00EE50  ECB8  F06E         	call	_lcdInst
  1229  00EE54  0EC3               	movlw	195
  1230  00EE56  6E30               	movwf	??_standbyMode& (0+255),c
  1231  00EE58  0ECD               	movlw	205
  1232  00EE5A                     u5537:
  1233  00EE5A  2EE8               	decfsz	wreg,f,c
  1234  00EE5C  D7FE               	bra	u5537
  1235  00EE5E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1236  00EE60  D7FC               	bra	u5537
  1237  00EE62  F000               	nop	
  1238                           
  1239                           ;standbyMode.c: 840: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1240  00EE64  0E0C               	movlw	12
  1241  00EE66  ECB8  F06E         	call	_lcdInst
  1242                           
  1243                           ;standbyMode.c: 841: printf("Standby");
  1244  00EE6A  0EE5               	movlw	low STR_29
  1245  00EE6C  6E0D               	movwf	printf@f,c
  1246  00EE6E  0EFF               	movlw	high STR_29
  1247  00EE70  6E0E               	movwf	printf@f+1,c
  1248  00EE72  EC72  F070         	call	_printf	;wreg free
  1249                           
  1250                           ;standbyMode.c: 842: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1251  00EE76  0E66               	movlw	102
  1252  00EE78  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1253  00EE7A  0E76               	movlw	118
  1254  00EE7C  6E30               	movwf	??_standbyMode& (0+255),c
  1255  00EE7E  0EC1               	movlw	193
  1256  00EE80                     u5547:
  1257  00EE80  2EE8               	decfsz	wreg,f,c
  1258  00EE82  D7FE               	bra	u5547
  1259  00EE84  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1260  00EE86  D7FC               	bra	u5547
  1261  00EE88  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1262  00EE8A  D7FA               	bra	u5547
  1263  00EE8C  F000               	nop	
  1264                           
  1265                           ;standbyMode.c: 843: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1266  00EE8E  0E01               	movlw	1
  1267  00EE90  ECB8  F06E         	call	_lcdInst
  1268  00EE94  0EC3               	movlw	195
  1269  00EE96  6E30               	movwf	??_standbyMode& (0+255),c
  1270  00EE98  0ECD               	movlw	205
  1271  00EE9A                     u5557:
  1272  00EE9A  2EE8               	decfsz	wreg,f,c
  1273  00EE9C  D7FE               	bra	u5557
  1274  00EE9E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1275  00EEA0  D7FC               	bra	u5557
  1276  00EEA2  F000               	nop	
  1277                           
  1278                           ;standbyMode.c: 844: printf("Press any key to");
  1279  00EEA4  0E2E               	movlw	low STR_6
  1280  00EEA6  6E0D               	movwf	printf@f,c
  1281  00EEA8  0EFE               	movlw	high STR_6
  1282  00EEAA  6E0E               	movwf	printf@f+1,c
  1283  00EEAC  EC72  F070         	call	_printf	;wreg free
  1284                           
  1285                           ;standbyMode.c: 845: lcdInst(0xC0);;
  1286  00EEB0  0EC0               	movlw	192
  1287  00EEB2  ECB8  F06E         	call	_lcdInst
  1288                           
  1289                           ;standbyMode.c: 846: printf("begin operation.");
  1290  00EEB6  0E0C               	movlw	low STR_31
  1291  00EEB8  6E0D               	movwf	printf@f,c
  1292  00EEBA  0EFE               	movlw	high STR_31
  1293  00EEBC  6E0E               	movwf	printf@f+1,c
  1294  00EEBE  EC72  F070         	call	_printf	;wreg free
  1295  00EEC2                     
  1296                           ;standbyMode.c: 849: continue;
  1297  00EEC2  A281               	btfss	3969,1,c	;volatile
  1298  00EEC4  D7FE               	goto	l425
  1299                           
  1300                           ;standbyMode.c: 850: }
  1301                           ;standbyMode.c: 853: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1302  00EEC6  0E01               	movlw	1
  1303  00EEC8  ECB8  F06E         	call	_lcdInst
  1304  00EECC  0EC3               	movlw	195
  1305  00EECE  6E30               	movwf	??_standbyMode& (0+255),c
  1306  00EED0  0ECD               	movlw	205
  1307  00EED2                     u5567:
  1308  00EED2  2EE8               	decfsz	wreg,f,c
  1309  00EED4  D7FE               	bra	u5567
  1310  00EED6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1311  00EED8  D7FC               	bra	u5567
  1312  00EEDA  F000               	nop	
  1313                           
  1314                           ;standbyMode.c: 854: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1315  00EEDC  0E0C               	movlw	12
  1316  00EEDE  ECB8  F06E         	call	_lcdInst
  1317                           
  1318                           ;standbyMode.c: 855: printf("Welcome to your");
  1319  00EEE2  0EDF               	movlw	low STR_32
  1320  00EEE4  6E0D               	movwf	printf@f,c
  1321  00EEE6  0EFE               	movlw	high STR_32
  1322  00EEE8  6E0E               	movwf	printf@f+1,c
  1323  00EEEA  EC72  F070         	call	_printf	;wreg free
  1324                           
  1325                           ;standbyMode.c: 856: lcdInst(0xC0);;
  1326  00EEEE  0EC0               	movlw	192
  1327  00EEF0  ECB8  F06E         	call	_lcdInst
  1328                           
  1329                           ;standbyMode.c: 857: printf("cabinet sorter!");
  1330  00EEF4  0E3F               	movlw	low STR_33
  1331  00EEF6  6E0D               	movwf	printf@f,c
  1332  00EEF8  0EFE               	movlw	high STR_33
  1333  00EEFA  6E0E               	movwf	printf@f+1,c
  1334  00EEFC  EC72  F070         	call	_printf	;wreg free
  1335                           
  1336                           ;standbyMode.c: 858: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1337  00EF00  0E66               	movlw	102
  1338  00EF02  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1339  00EF04  0E76               	movlw	118
  1340  00EF06  6E30               	movwf	??_standbyMode& (0+255),c
  1341  00EF08  0EC1               	movlw	193
  1342  00EF0A                     u5577:
  1343  00EF0A  2EE8               	decfsz	wreg,f,c
  1344  00EF0C  D7FE               	bra	u5577
  1345  00EF0E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1346  00EF10  D7FC               	bra	u5577
  1347  00EF12  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1348  00EF14  D7FA               	bra	u5577
  1349  00EF16  F000               	nop	
  1350                           
  1351                           ;standbyMode.c: 861: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1352  00EF18  0E01               	movlw	1
  1353  00EF1A  ECB8  F06E         	call	_lcdInst
  1354  00EF1E  0EC3               	movlw	195
  1355  00EF20  6E30               	movwf	??_standbyMode& (0+255),c
  1356  00EF22  0ECD               	movlw	205
  1357  00EF24                     u5587:
  1358  00EF24  2EE8               	decfsz	wreg,f,c
  1359  00EF26  D7FE               	bra	u5587
  1360  00EF28  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1361  00EF2A  D7FC               	bra	u5587
  1362  00EF2C  F000               	nop	
  1363                           
  1364                           ;standbyMode.c: 862: printf("Press D to");
  1365  00EF2E  0EB6               	movlw	low STR_34
  1366  00EF30  6E0D               	movwf	printf@f,c
  1367  00EF32  0EFF               	movlw	high STR_34
  1368  00EF34  6E0E               	movwf	printf@f+1,c
  1369  00EF36  EC72  F070         	call	_printf	;wreg free
  1370                           
  1371                           ;standbyMode.c: 863: lcdInst(0xC0);;
  1372  00EF3A  0EC0               	movlw	192
  1373  00EF3C  ECB8  F06E         	call	_lcdInst
  1374                           
  1375                           ;standbyMode.c: 864: printf("view logs,");
  1376  00EF40  0E8A               	movlw	low STR_35
  1377  00EF42  6E0D               	movwf	printf@f,c
  1378  00EF44  0EFF               	movlw	high STR_35
  1379  00EF46  6E0E               	movwf	printf@f+1,c
  1380  00EF48  EC72  F070         	call	_printf	;wreg free
  1381                           
  1382                           ;standbyMode.c: 865: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1383  00EF4C  0E66               	movlw	102
  1384  00EF4E  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1385  00EF50  0E76               	movlw	118
  1386  00EF52  6E30               	movwf	??_standbyMode& (0+255),c
  1387  00EF54  0EC1               	movlw	193
  1388  00EF56                     u5597:
  1389  00EF56  2EE8               	decfsz	wreg,f,c
  1390  00EF58  D7FE               	bra	u5597
  1391  00EF5A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1392  00EF5C  D7FC               	bra	u5597
  1393  00EF5E  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1394  00EF60  D7FA               	bra	u5597
  1395  00EF62  F000               	nop	
  1396                           
  1397                           ;standbyMode.c: 866: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1398  00EF64  0E01               	movlw	1
  1399  00EF66  ECB8  F06E         	call	_lcdInst
  1400  00EF6A  0EC3               	movlw	195
  1401  00EF6C  6E30               	movwf	??_standbyMode& (0+255),c
  1402  00EF6E  0ECD               	movlw	205
  1403  00EF70                     u5607:
  1404  00EF70  2EE8               	decfsz	wreg,f,c
  1405  00EF72  D7FE               	bra	u5607
  1406  00EF74  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1407  00EF76  D7FC               	bra	u5607
  1408  00EF78  F000               	nop	
  1409                           
  1410                           ;standbyMode.c: 867: printf("or press # to");
  1411  00EF7A  0E48               	movlw	low STR_36
  1412  00EF7C  6E0D               	movwf	printf@f,c
  1413  00EF7E  0EFF               	movlw	high STR_36
  1414  00EF80  6E0E               	movwf	printf@f+1,c
  1415  00EF82  EC72  F070         	call	_printf	;wreg free
  1416                           
  1417                           ;standbyMode.c: 868: lcdInst(0xC0);;
  1418  00EF86  0EC0               	movlw	192
  1419  00EF88  ECB8  F06E         	call	_lcdInst
  1420                           
  1421                           ;standbyMode.c: 869: printf("begin operation.");
  1422  00EF8C  0E0C               	movlw	low STR_31
  1423  00EF8E  6E0D               	movwf	printf@f,c
  1424  00EF90  0EFE               	movlw	high STR_31
  1425  00EF92  6E0E               	movwf	printf@f+1,c
  1426  00EF94  EC72  F070         	call	_printf	;wreg free
  1427  00EF98  A281               	btfss	3969,1,c	;volatile
  1428  00EF9A  D7FE               	goto	l428
  1429                           
  1430                           ;standbyMode.c: 872: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1431  00EF9C  3881               	swapf	3969,w,c	;volatile
  1432  00EF9E  0B0F               	andlw	15
  1433  00EFA0  0B0F               	andlw	15
  1434  00EFA2  6E36               	movwf	standbyMode@keypress,c
  1435  00EFA4  B281               	btfsc	3969,1,c	;volatile
  1436  00EFA6  D7FE               	goto	l431
  1437                           
  1438                           ;standbyMode.c: 875: if (keypress == 14){
  1439  00EFA8  0E0E               	movlw	14
  1440  00EFAA  1836               	xorwf	standbyMode@keypress,w,c
  1441  00EFAC  A4D8               	btfss	status,2,c
  1442  00EFAE  D284               	goto	l433
  1443                           
  1444                           ;standbyMode.c: 912: unsigned int drawerCount = 0;
  1445  00EFB0  0E00               	movlw	0
  1446  00EFB2  6E3F               	movwf	standbyMode@drawerCount+1,c
  1447  00EFB4  0E00               	movlw	0
  1448  00EFB6  6E3E               	movwf	standbyMode@drawerCount,c
  1449                           
  1450                           ;standbyMode.c: 913: unsigned int i = 0;
  1451  00EFB8  0E00               	movlw	0
  1452  00EFBA  6E43               	movwf	standbyMode@i+1,c
  1453  00EFBC  0E00               	movlw	0
  1454  00EFBE  6E42               	movwf	standbyMode@i,c
  1455                           
  1456                           ;standbyMode.c: 914: unsigned int validDrawer = 0;
  1457  00EFC0  0E00               	movlw	0
  1458  00EFC2  6E39               	movwf	standbyMode@validDrawer+1,c
  1459  00EFC4  0E00               	movlw	0
  1460  00EFC6  6E38               	movwf	standbyMode@validDrawer,c
  1461                           
  1462                           ;standbyMode.c: 915: unsigned int zero = 0;
  1463  00EFC8  0E00               	movlw	0
  1464  00EFCA  6E3B               	movwf	standbyMode@zero+1,c
  1465  00EFCC  0E00               	movlw	0
  1466  00EFCE  6E3A               	movwf	standbyMode@zero,c
  1467                           
  1468                           ;standbyMode.c: 916: unsigned int firstIteration = 0;
  1469  00EFD0  0E00               	movlw	0
  1470  00EFD2  6E33               	movwf	standbyMode@firstIteration+1,c
  1471  00EFD4  0E00               	movlw	0
  1472  00EFD6  6E32               	movwf	standbyMode@firstIteration,c
  1473                           
  1474                           ;standbyMode.c: 917: unsigned int drawer = 0;
  1475  00EFD8  0E00               	movlw	0
  1476  00EFDA  6E45               	movwf	standbyMode@drawer+1,c
  1477  00EFDC  0E00               	movlw	0
  1478  00EFDE  6E44               	movwf	standbyMode@drawer,c
  1479                           
  1480                           ;standbyMode.c: 918: unsigned int diet = 0;
  1481  00EFE0  0E00               	movlw	0
  1482  00EFE2  6E41               	movwf	standbyMode@diet+1,c
  1483  00EFE4  0E00               	movlw	0
  1484  00EFE6  6E40               	movwf	standbyMode@diet,c
  1485                           
  1486                           ;standbyMode.c: 919: unsigned int food = 0;
  1487  00EFE8  0E00               	movlw	0
  1488  00EFEA  6E3D               	movwf	standbyMode@food+1,c
  1489  00EFEC  0E00               	movlw	0
  1490  00EFEE  6E3C               	movwf	standbyMode@food,c
  1491  00EFF0                     
  1492                           ;standbyMode.c: 922: if (firstIteration == 1){
  1493  00EFF0  0432               	decf	standbyMode@firstIteration,w,c
  1494  00EFF2  1033               	iorwf	standbyMode@firstIteration+1,w,c
  1495  00EFF4  A4D8               	btfss	status,2,c
  1496  00EFF6  D15C               	goto	l435
  1497  00EFF8                     u5260:
  1498                           
  1499                           ;standbyMode.c: 925: if(drawerCount >= 8){
  1500                           
  1501                           ;standbyMode.c: 923: while (1){
  1502  00EFF8  503F               	movf	standbyMode@drawerCount+1,w,c
  1503  00EFFA  E104               	bnz	u5270
  1504  00EFFC  0E08               	movlw	8
  1505  00EFFE  5C3E               	subwf	standbyMode@drawerCount,w,c
  1506  00F000  A0D8               	btfss	status,0,c
  1507  00F002  D02A               	goto	l437
  1508  00F004                     u5270:
  1509                           
  1510                           ;standbyMode.c: 926: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1511  00F004  0E01               	movlw	1
  1512  00F006  ECB8  F06E         	call	_lcdInst
  1513  00F00A  0EC3               	movlw	195
  1514  00F00C  6E30               	movwf	??_standbyMode& (0+255),c
  1515  00F00E  0ECD               	movlw	205
  1516  00F010                     u5617:
  1517  00F010  2EE8               	decfsz	wreg,f,c
  1518  00F012  D7FE               	bra	u5617
  1519  00F014  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1520  00F016  D7FC               	bra	u5617
  1521  00F018  F000               	nop	
  1522                           
  1523                           ;standbyMode.c: 927: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1524  00F01A  0E0C               	movlw	12
  1525  00F01C  ECB8  F06E         	call	_lcdInst
  1526                           
  1527                           ;standbyMode.c: 928: printf("Maximum of 8");
  1528  00F020  0E70               	movlw	low STR_38
  1529  00F022  6E0D               	movwf	printf@f,c
  1530  00F024  0EFF               	movlw	high STR_38
  1531  00F026  6E0E               	movwf	printf@f+1,c
  1532  00F028  EC72  F070         	call	_printf	;wreg free
  1533                           
  1534                           ;standbyMode.c: 929: lcdInst(0xC0);;
  1535  00F02C  0EC0               	movlw	192
  1536  00F02E  ECB8  F06E         	call	_lcdInst
  1537                           
  1538                           ;standbyMode.c: 930: printf("drawers reached!");
  1539  00F032  0EFB               	movlw	low STR_39
  1540  00F034  6E0D               	movwf	printf@f,c
  1541  00F036  0EFD               	movlw	high STR_39
  1542  00F038  6E0E               	movwf	printf@f+1,c
  1543  00F03A  EC72  F070         	call	_printf	;wreg free
  1544                           
  1545                           ;standbyMode.c: 931: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1546  00F03E  0E66               	movlw	102
  1547  00F040  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1548  00F042  0E76               	movlw	118
  1549  00F044  6E30               	movwf	??_standbyMode& (0+255),c
  1550  00F046  0EC1               	movlw	193
  1551  00F048                     u5627:
  1552  00F048  2EE8               	decfsz	wreg,f,c
  1553  00F04A  D7FE               	bra	u5627
  1554  00F04C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1555  00F04E  D7FC               	bra	u5627
  1556  00F050  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1557  00F052  D7FA               	bra	u5627
  1558  00F054  F000               	nop	
  1559                           
  1560                           ;standbyMode.c: 932: break;
  1561  00F056  0012               	return	
  1562  00F058                     l437:
  1563                           
  1564                           ;standbyMode.c: 933: }
  1565                           ;standbyMode.c: 935: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1566  00F058  0E01               	movlw	1
  1567  00F05A  ECB8  F06E         	call	_lcdInst
  1568  00F05E  0EC3               	movlw	195
  1569  00F060  6E30               	movwf	??_standbyMode& (0+255),c
  1570  00F062  0ECD               	movlw	205
  1571  00F064                     u5637:
  1572  00F064  2EE8               	decfsz	wreg,f,c
  1573  00F066  D7FE               	bra	u5637
  1574  00F068  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1575  00F06A  D7FC               	bra	u5637
  1576  00F06C  F000               	nop	
  1577                           
  1578                           ;standbyMode.c: 936: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1579  00F06E  0E0C               	movlw	12
  1580  00F070  ECB8  F06E         	call	_lcdInst
  1581                           
  1582                           ;standbyMode.c: 937: printf("Another drawer?");
  1583  00F074  0EBF               	movlw	low STR_40
  1584  00F076  6E0D               	movwf	printf@f,c
  1585  00F078  0EFE               	movlw	high STR_40
  1586  00F07A  6E0E               	movwf	printf@f+1,c
  1587  00F07C  EC72  F070         	call	_printf	;wreg free
  1588                           
  1589                           ;standbyMode.c: 938: lcdInst(0xC0);;
  1590  00F080  0EC0               	movlw	192
  1591  00F082  ECB8  F06E         	call	_lcdInst
  1592                           
  1593                           ;standbyMode.c: 939: printf("# = Yes, D = No");
  1594  00F086  0ECF               	movlw	low STR_18
  1595  00F088  6E0D               	movwf	printf@f,c
  1596  00F08A  0EFE               	movlw	high STR_18
  1597  00F08C  6E0E               	movwf	printf@f+1,c
  1598  00F08E  EC72  F070         	call	_printf	;wreg free
  1599  00F092  A281               	btfss	3969,1,c	;volatile
  1600  00F094  D7FE               	goto	l441
  1601                           
  1602                           ;standbyMode.c: 942: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  1603  00F096  3881               	swapf	3969,w,c	;volatile
  1604  00F098  0B0F               	andlw	15
  1605  00F09A  0B0F               	andlw	15
  1606  00F09C  6E37               	movwf	standbyMode@keypress1,c
  1607  00F09E  B281               	btfsc	3969,1,c	;volatile
  1608  00F0A0  D7FE               	goto	l444
  1609                           
  1610                           ;standbyMode.c: 945: if (keypress1 == 14){
  1611  00F0A2  0E0E               	movlw	14
  1612  00F0A4  1837               	xorwf	standbyMode@keypress1,w,c
  1613  00F0A6  A4D8               	btfss	status,2,c
  1614  00F0A8  D0FC               	goto	l446
  1615  00F0AA                     u5300:
  1616                           
  1617                           ;standbyMode.c: 946: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/400
      +                          0.0)));;
  1618  00F0AA  0E01               	movlw	1
  1619  00F0AC  ECB8  F06E         	call	_lcdInst
  1620  00F0B0  0EC3               	movlw	195
  1621  00F0B2  6E30               	movwf	??_standbyMode& (0+255),c
  1622  00F0B4  0ECD               	movlw	205
  1623  00F0B6                     u5647:
  1624  00F0B6  2EE8               	decfsz	wreg,f,c
  1625  00F0B8  D7FE               	bra	u5647
  1626  00F0BA  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1627  00F0BC  D7FC               	bra	u5647
  1628  00F0BE  F000               	nop	
  1629                           
  1630                           ;standbyMode.c: 947: drawer = which_drawer();
  1631  00F0C0  ECFB  F071         	call	_which_drawer	;wreg free
  1632  00F0C4  C019  F044         	movff	?_which_drawer,standbyMode@drawer
  1633  00F0C8  C01A  F045         	movff	?_which_drawer+1,standbyMode@drawer+1
  1634                           
  1635                           ;standbyMode.c: 949: if (drawer == 100){
  1636  00F0CC  0E64               	movlw	100
  1637  00F0CE  1844               	xorwf	standbyMode@drawer,w,c
  1638  00F0D0  1045               	iorwf	standbyMode@drawer+1,w,c
  1639  00F0D2  A4D8               	btfss	status,2,c
  1640  00F0D4  D005               	goto	l448
  1641                           
  1642                           ;standbyMode.c: 950: drawer = 0;
  1643  00F0D6  0E00               	movlw	0
  1644  00F0D8  6E45               	movwf	standbyMode@drawer+1,c
  1645  00F0DA  0E00               	movlw	0
  1646  00F0DC  6E44               	movwf	standbyMode@drawer,c
  1647                           
  1648                           ;standbyMode.c: 951: goto DRAWER_BACK;
  1649  00F0DE  D7BC               	goto	l437
  1650  00F0E0                     l448:
  1651                           
  1652                           ;standbyMode.c: 952: }
  1653                           ;standbyMode.c: 954: for (i=0; i<8; i++){
  1654  00F0E0  0E00               	movlw	0
  1655  00F0E2  6E43               	movwf	standbyMode@i+1,c
  1656  00F0E4  0E00               	movlw	0
  1657  00F0E6  6E42               	movwf	standbyMode@i,c
  1658  00F0E8                     l3701:
  1659  00F0E8  5043               	movf	standbyMode@i+1,w,c
  1660  00F0EA  E12C               	bnz	l3717
  1661  00F0EC  0E08               	movlw	8
  1662  00F0EE  5C42               	subwf	standbyMode@i,w,c
  1663  00F0F0  B0D8               	btfsc	status,0,c
  1664  00F0F2  D028               	goto	u5350
  1665                           
  1666                           ;standbyMode.c: 955: if (drawerInformation[i] == drawer){
  1667  00F0F4  90D8               	bcf	status,0,c
  1668  00F0F6  3442               	rlcf	standbyMode@i,w,c
  1669  00F0F8  6ED9               	movwf	fsr2l,c
  1670  00F0FA  3443               	rlcf	standbyMode@i+1,w,c
  1671  00F0FC  6EDA               	movwf	fsr2h,c
  1672  00F0FE  0E46               	movlw	low _drawerInformation
  1673  00F100  26D9               	addwf	fsr2l,f,c
  1674  00F102  0E00               	movlw	high _drawerInformation
  1675  00F104  22DA               	addwfc	fsr2h,f,c
  1676  00F106  5044               	movf	standbyMode@drawer,w,c
  1677  00F108  18DE               	xorwf	postinc2,w,c
  1678  00F10A  E119               	bnz	l3713
  1679  00F10C  5045               	movf	standbyMode@drawer+1,w,c
  1680  00F10E  18DE               	xorwf	postinc2,w,c
  1681  00F110  A4D8               	btfss	status,2,c
  1682  00F112  D015               	goto	l452
  1683                           
  1684                           ;standbyMode.c: 956: validDrawer = 1;
  1685  00F114  0E00               	movlw	0
  1686  00F116  6E39               	movwf	standbyMode@validDrawer+1,c
  1687  00F118  0E01               	movlw	1
  1688  00F11A  6E38               	movwf	standbyMode@validDrawer,c
  1689                           
  1690                           ;standbyMode.c: 957: if (drawerInformation[i] == 0){
  1691  00F11C  90D8               	bcf	status,0,c
  1692  00F11E  3442               	rlcf	standbyMode@i,w,c
  1693  00F120  6ED9               	movwf	fsr2l,c
  1694  00F122  3443               	rlcf	standbyMode@i+1,w,c
  1695  00F124  6EDA               	movwf	fsr2h,c
  1696  00F126  0E46               	movlw	low _drawerInformation
  1697  00F128  26D9               	addwf	fsr2l,f,c
  1698  00F12A  0E00               	movlw	high _drawerInformation
  1699  00F12C  22DA               	addwfc	fsr2h,f,c
  1700  00F12E  50DE               	movf	postinc2,w,c
  1701  00F130  10DE               	iorwf	postinc2,w,c
  1702  00F132  A4D8               	btfss	status,2,c
  1703  00F134  D004               	goto	l452
  1704                           
  1705                           ;standbyMode.c: 958: zero = 1;
  1706  00F136  0E00               	movlw	0
  1707  00F138  6E3B               	movwf	standbyMode@zero+1,c
  1708  00F13A  0E01               	movlw	1
  1709  00F13C  6E3A               	movwf	standbyMode@zero,c
  1710  00F13E                     l452:
  1711  00F13E                     l3713:
  1712  00F13E  4A42               	infsnz	standbyMode@i,f,c
  1713  00F140  2A43               	incf	standbyMode@i+1,f,c
  1714  00F142  D7D2               	goto	l3701
  1715  00F144                     u5350:
  1716  00F144                     l3717:
  1717                           
  1718                           ;standbyMode.c: 959: }
  1719                           ;standbyMode.c: 960: }
  1720                           ;standbyMode.c: 961: }
  1721                           ;standbyMode.c: 962: if (validDrawer == 1){
  1722  00F144  0438               	decf	standbyMode@validDrawer,w,c
  1723  00F146  1039               	iorwf	standbyMode@validDrawer+1,w,c
  1724  00F148  A4D8               	btfss	status,2,c
  1725  00F14A  D060               	goto	l453
  1726                           
  1727                           ;standbyMode.c: 963: if (zero == 1){
  1728  00F14C  043A               	decf	standbyMode@zero,w,c
  1729  00F14E  103B               	iorwf	standbyMode@zero+1,w,c
  1730  00F150  A4D8               	btfss	status,2,c
  1731  00F152  D02E               	goto	l454
  1732                           
  1733                           ;standbyMode.c: 964: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1734  00F154  0E01               	movlw	1
  1735  00F156  ECB8  F06E         	call	_lcdInst
  1736  00F15A  0EC3               	movlw	195
  1737  00F15C  6E30               	movwf	??_standbyMode& (0+255),c
  1738  00F15E  0ECD               	movlw	205
  1739  00F160                     u5657:
  1740  00F160  2EE8               	decfsz	wreg,f,c
  1741  00F162  D7FE               	bra	u5657
  1742  00F164  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1743  00F166  D7FC               	bra	u5657
  1744  00F168  F000               	nop	
  1745                           
  1746                           ;standbyMode.c: 965: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1747  00F16A  0E0C               	movlw	12
  1748  00F16C  ECB8  F06E         	call	_lcdInst
  1749                           
  1750                           ;standbyMode.c: 966: printf("No drawer");
  1751  00F170  0EC1               	movlw	low STR_42
  1752  00F172  6E0D               	movwf	printf@f,c
  1753  00F174  0EFF               	movlw	high STR_42
  1754  00F176  6E0E               	movwf	printf@f+1,c
  1755  00F178  EC72  F070         	call	_printf	;wreg free
  1756                           
  1757                           ;standbyMode.c: 967: lcdInst(0xC0);;
  1758  00F17C  0EC0               	movlw	192
  1759  00F17E  ECB8  F06E         	call	_lcdInst
  1760                           
  1761                           ;standbyMode.c: 968: printf("number pressed.");
  1762  00F182  0E4F               	movlw	low STR_43
  1763  00F184  6E0D               	movwf	printf@f,c
  1764  00F186  0EFE               	movlw	high STR_43
  1765  00F188  6E0E               	movwf	printf@f+1,c
  1766  00F18A  EC72  F070         	call	_printf	;wreg free
  1767                           
  1768                           ;standbyMode.c: 969: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1769  00F18E  0E66               	movlw	102
  1770  00F190  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1771  00F192  0E76               	movlw	118
  1772  00F194  6E30               	movwf	??_standbyMode& (0+255),c
  1773  00F196  0EC1               	movlw	193
  1774  00F198                     u5667:
  1775  00F198  2EE8               	decfsz	wreg,f,c
  1776  00F19A  D7FE               	bra	u5667
  1777  00F19C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1778  00F19E  D7FC               	bra	u5667
  1779  00F1A0  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1780  00F1A2  D7FA               	bra	u5667
  1781  00F1A4  F000               	nop	
  1782                           
  1783                           ;standbyMode.c: 970: zero = 0;
  1784  00F1A6  0E00               	movlw	0
  1785  00F1A8  6E3B               	movwf	standbyMode@zero+1,c
  1786  00F1AA  0E00               	movlw	0
  1787  00F1AC  6E3A               	movwf	standbyMode@zero,c
  1788                           
  1789                           ;standbyMode.c: 971: }
  1790  00F1AE  D029               	goto	l455
  1791  00F1B0                     l454:
  1792                           
  1793                           ;standbyMode.c: 972: else{
  1794                           ;standbyMode.c: 973: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1795  00F1B0  0E01               	movlw	1
  1796  00F1B2  ECB8  F06E         	call	_lcdInst
  1797  00F1B6  0EC3               	movlw	195
  1798  00F1B8  6E30               	movwf	??_standbyMode& (0+255),c
  1799  00F1BA  0ECD               	movlw	205
  1800  00F1BC                     u5677:
  1801  00F1BC  2EE8               	decfsz	wreg,f,c
  1802  00F1BE  D7FE               	bra	u5677
  1803  00F1C0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1804  00F1C2  D7FC               	bra	u5677
  1805  00F1C4  F000               	nop	
  1806                           
  1807                           ;standbyMode.c: 974: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1808  00F1C6  0E0C               	movlw	12
  1809  00F1C8  ECB8  F06E         	call	_lcdInst
  1810                           
  1811                           ;standbyMode.c: 975: printf("Drawer already");
  1812  00F1CC  0E1D               	movlw	low STR_44
  1813  00F1CE  6E0D               	movwf	printf@f,c
  1814  00F1D0  0EFF               	movlw	high STR_44
  1815  00F1D2  6E0E               	movwf	printf@f+1,c
  1816  00F1D4  EC72  F070         	call	_printf	;wreg free
  1817                           
  1818                           ;standbyMode.c: 976: lcdInst(0xC0);;
  1819  00F1D8  0EC0               	movlw	192
  1820  00F1DA  ECB8  F06E         	call	_lcdInst
  1821                           
  1822                           ;standbyMode.c: 977: printf("in use!");
  1823  00F1DE  0EDD               	movlw	low STR_45
  1824  00F1E0  6E0D               	movwf	printf@f,c
  1825  00F1E2  0EFF               	movlw	high STR_45
  1826  00F1E4  6E0E               	movwf	printf@f+1,c
  1827  00F1E6  EC72  F070         	call	_printf	;wreg free
  1828                           
  1829                           ;standbyMode.c: 978: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1830  00F1EA  0E66               	movlw	102
  1831  00F1EC  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  1832  00F1EE  0E76               	movlw	118
  1833  00F1F0  6E30               	movwf	??_standbyMode& (0+255),c
  1834  00F1F2  0EC1               	movlw	193
  1835  00F1F4                     u5687:
  1836  00F1F4  2EE8               	decfsz	wreg,f,c
  1837  00F1F6  D7FE               	bra	u5687
  1838  00F1F8  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1839  00F1FA  D7FC               	bra	u5687
  1840  00F1FC  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1841  00F1FE  D7FA               	bra	u5687
  1842  00F200  F000               	nop	
  1843  00F202                     l455:
  1844                           
  1845                           ;standbyMode.c: 979: }
  1846                           ;standbyMode.c: 980: validDrawer = 0;
  1847  00F202  0E00               	movlw	0
  1848  00F204  6E39               	movwf	standbyMode@validDrawer+1,c
  1849  00F206  0E00               	movlw	0
  1850  00F208  6E38               	movwf	standbyMode@validDrawer,c
  1851                           
  1852                           ;standbyMode.c: 981: continue;
  1853  00F20A  D6F6               	goto	u5260
  1854  00F20C                     l453:
  1855                           
  1856                           ;standbyMode.c: 983: else{
  1857                           ;standbyMode.c: 984: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/400
      +                          0.0)));;
  1858  00F20C  0E01               	movlw	1
  1859  00F20E  ECB8  F06E         	call	_lcdInst
  1860  00F212  0EC3               	movlw	195
  1861  00F214  6E30               	movwf	??_standbyMode& (0+255),c
  1862  00F216  0ECD               	movlw	205
  1863  00F218                     u5697:
  1864  00F218  2EE8               	decfsz	wreg,f,c
  1865  00F21A  D7FE               	bra	u5697
  1866  00F21C  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1867  00F21E  D7FC               	bra	u5697
  1868  00F220  F000               	nop	
  1869                           
  1870                           ;standbyMode.c: 985: diet = diet_press(drawer);
  1871  00F222  C044  F019         	movff	standbyMode@drawer,diet_press@drawer
  1872  00F226  C045  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  1873  00F22A  EC94  F074         	call	_diet_press	;wreg free
  1874  00F22E  C019  F040         	movff	?_diet_press,standbyMode@diet
  1875  00F232  C01A  F041         	movff	?_diet_press+1,standbyMode@diet+1
  1876                           
  1877                           ;standbyMode.c: 986: if (diet == 100){
  1878  00F236  0E64               	movlw	100
  1879  00F238  1840               	xorwf	standbyMode@diet,w,c
  1880  00F23A  1041               	iorwf	standbyMode@diet+1,w,c
  1881  00F23C  A4D8               	btfss	status,2,c
  1882  00F23E  D005               	goto	l459
  1883                           
  1884                           ;standbyMode.c: 987: diet = 0;
  1885  00F240  0E00               	movlw	0
  1886  00F242  6E41               	movwf	standbyMode@diet+1,c
  1887  00F244  0E00               	movlw	0
  1888  00F246  6E40               	movwf	standbyMode@diet,c
  1889                           
  1890                           ;standbyMode.c: 988: goto DIET_BACK1;
  1891  00F248  D730               	goto	u5300
  1892  00F24A                     l459:
  1893                           
  1894                           ;standbyMode.c: 989: }
  1895                           ;standbyMode.c: 991: food = food_press(diet, drawer);
  1896  00F24A  C040  F019         	movff	standbyMode@diet,food_press@dietSum
  1897  00F24E  C041  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  1898  00F252  C044  F01B         	movff	standbyMode@drawer,food_press@drawer
  1899  00F256  C045  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  1900  00F25A  EC01  F071         	call	_food_press	;wreg free
  1901  00F25E  C019  F03C         	movff	?_food_press,standbyMode@food
  1902  00F262  C01A  F03D         	movff	?_food_press+1,standbyMode@food+1
  1903                           
  1904                           ;standbyMode.c: 992: if (food == 100){
  1905  00F266  0E64               	movlw	100
  1906  00F268  183C               	xorwf	standbyMode@food,w,c
  1907  00F26A  103D               	iorwf	standbyMode@food+1,w,c
  1908  00F26C  A4D8               	btfss	status,2,c
  1909  00F26E  D009               	goto	l460
  1910                           
  1911                           ;standbyMode.c: 993: diet = 0;
  1912  00F270  0E00               	movlw	0
  1913  00F272  6E41               	movwf	standbyMode@diet+1,c
  1914  00F274  0E00               	movlw	0
  1915  00F276  6E40               	movwf	standbyMode@diet,c
  1916                           
  1917                           ;standbyMode.c: 994: food = 0;
  1918  00F278  0E00               	movlw	0
  1919  00F27A  6E3D               	movwf	standbyMode@food+1,c
  1920  00F27C  0E00               	movlw	0
  1921  00F27E  6E3C               	movwf	standbyMode@food,c
  1922                           
  1923                           ;standbyMode.c: 995: goto FOOD_BACK1;
  1924  00F280  D7C5               	goto	l453
  1925  00F282                     l460:
  1926                           
  1927                           ;standbyMode.c: 996: }
  1928                           ;standbyMode.c: 997: drawerInformation[drawerCount] = drawer;
  1929  00F282  90D8               	bcf	status,0,c
  1930  00F284  343E               	rlcf	standbyMode@drawerCount,w,c
  1931  00F286  6ED9               	movwf	fsr2l,c
  1932  00F288  343F               	rlcf	standbyMode@drawerCount+1,w,c
  1933  00F28A  6EDA               	movwf	fsr2h,c
  1934  00F28C  0E46               	movlw	low _drawerInformation
  1935  00F28E  26D9               	addwf	fsr2l,f,c
  1936  00F290  0E00               	movlw	high _drawerInformation
  1937  00F292  22DA               	addwfc	fsr2h,f,c
  1938  00F294  C044  FFDE         	movff	standbyMode@drawer,postinc2
  1939  00F298  C045  FFDD         	movff	standbyMode@drawer+1,postdec2
  1940                           
  1941                           ;standbyMode.c: 998: drawerCount += 1;
  1942  00F29C  4A3E               	infsnz	standbyMode@drawerCount,f,c
  1943  00F29E  2A3F               	incf	standbyMode@drawerCount+1,f,c
  1944                           
  1945                           ;standbyMode.c: 999: }
  1946                           ;standbyMode.c: 1000: }
  1947  00F2A0  D004               	goto	l462
  1948  00F2A2                     l446:
  1949                           
  1950                           ;standbyMode.c: 1001: else if (keypress1 == 15){
  1951  00F2A2  0E0F               	movlw	15
  1952  00F2A4  1837               	xorwf	standbyMode@keypress1,w,c
  1953  00F2A6  B4D8               	btfsc	status,2,c
  1954  00F2A8  0012               	return	
  1955  00F2AA                     l462:
  1956                           
  1957                           ;standbyMode.c: 1003: }
  1958                           ;standbyMode.c: 1004: keypress1 = 0;
  1959  00F2AA  0E00               	movlw	0
  1960  00F2AC  6E37               	movwf	standbyMode@keypress1,c
  1961  00F2AE  D6A4               	goto	u5260
  1962  00F2B0                     l435:
  1963                           
  1964                           ;standbyMode.c: 1008: else{
  1965                           ;standbyMode.c: 1009: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  1966  00F2B0  0E01               	movlw	1
  1967  00F2B2  ECB8  F06E         	call	_lcdInst
  1968  00F2B6  0EC3               	movlw	195
  1969  00F2B8  6E30               	movwf	??_standbyMode& (0+255),c
  1970  00F2BA  0ECD               	movlw	205
  1971  00F2BC                     u5707:
  1972  00F2BC  2EE8               	decfsz	wreg,f,c
  1973  00F2BE  D7FE               	bra	u5707
  1974  00F2C0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  1975  00F2C2  D7FC               	bra	u5707
  1976  00F2C4  F000               	nop	
  1977                           
  1978                           ;standbyMode.c: 1010: drawer = which_drawer();
  1979  00F2C6  ECFB  F071         	call	_which_drawer	;wreg free
  1980  00F2CA  C019  F044         	movff	?_which_drawer,standbyMode@drawer
  1981  00F2CE  C01A  F045         	movff	?_which_drawer+1,standbyMode@drawer+1
  1982                           
  1983                           ;standbyMode.c: 1012: if (drawer == 100){
  1984  00F2D2  0E64               	movlw	100
  1985  00F2D4  1844               	xorwf	standbyMode@drawer,w,c
  1986  00F2D6  1045               	iorwf	standbyMode@drawer+1,w,c
  1987  00F2D8  A4D8               	btfss	status,2,c
  1988  00F2DA  D009               	goto	l466
  1989                           
  1990                           ;standbyMode.c: 1013: drawer = 0;
  1991  00F2DC  0E00               	movlw	0
  1992  00F2DE  6E45               	movwf	standbyMode@drawer+1,c
  1993  00F2E0  0E00               	movlw	0
  1994  00F2E2  6E44               	movwf	standbyMode@drawer,c
  1995                           
  1996                           ;standbyMode.c: 1014: firstIteration = 1;
  1997  00F2E4  0E00               	movlw	0
  1998  00F2E6  6E33               	movwf	standbyMode@firstIteration+1,c
  1999  00F2E8  0E01               	movlw	1
  2000  00F2EA  6E32               	movwf	standbyMode@firstIteration,c
  2001                           
  2002                           ;standbyMode.c: 1015: goto DRAWER_BACK;
  2003  00F2EC  D6B5               	goto	l437
  2004  00F2EE                     l466:
  2005                           
  2006                           ;standbyMode.c: 1016: }
  2007                           ;standbyMode.c: 1018: firstIteration = 1;
  2008  00F2EE  0E00               	movlw	0
  2009  00F2F0  6E33               	movwf	standbyMode@firstIteration+1,c
  2010  00F2F2  0E01               	movlw	1
  2011  00F2F4  6E32               	movwf	standbyMode@firstIteration,c
  2012                           
  2013                           ;standbyMode.c: 1019: for (i=0; i<8; i++){
  2014  00F2F6  0E00               	movlw	0
  2015  00F2F8  6E43               	movwf	standbyMode@i+1,c
  2016  00F2FA  0E00               	movlw	0
  2017  00F2FC  6E42               	movwf	standbyMode@i,c
  2018  00F2FE                     l3795:
  2019  00F2FE  5043               	movf	standbyMode@i+1,w,c
  2020  00F300  E12C               	bnz	l3811
  2021  00F302  0E08               	movlw	8
  2022  00F304  5C42               	subwf	standbyMode@i,w,c
  2023  00F306  B0D8               	btfsc	status,0,c
  2024  00F308  D028               	goto	u5450
  2025                           
  2026                           ;standbyMode.c: 1020: if (drawerInformation[i] == drawer){
  2027  00F30A  90D8               	bcf	status,0,c
  2028  00F30C  3442               	rlcf	standbyMode@i,w,c
  2029  00F30E  6ED9               	movwf	fsr2l,c
  2030  00F310  3443               	rlcf	standbyMode@i+1,w,c
  2031  00F312  6EDA               	movwf	fsr2h,c
  2032  00F314  0E46               	movlw	low _drawerInformation
  2033  00F316  26D9               	addwf	fsr2l,f,c
  2034  00F318  0E00               	movlw	high _drawerInformation
  2035  00F31A  22DA               	addwfc	fsr2h,f,c
  2036  00F31C  5044               	movf	standbyMode@drawer,w,c
  2037  00F31E  18DE               	xorwf	postinc2,w,c
  2038  00F320  E119               	bnz	l3807
  2039  00F322  5045               	movf	standbyMode@drawer+1,w,c
  2040  00F324  18DE               	xorwf	postinc2,w,c
  2041  00F326  A4D8               	btfss	status,2,c
  2042  00F328  D015               	goto	l470
  2043                           
  2044                           ;standbyMode.c: 1021: validDrawer = 1;
  2045  00F32A  0E00               	movlw	0
  2046  00F32C  6E39               	movwf	standbyMode@validDrawer+1,c
  2047  00F32E  0E01               	movlw	1
  2048  00F330  6E38               	movwf	standbyMode@validDrawer,c
  2049                           
  2050                           ;standbyMode.c: 1022: if (drawerInformation[i] == 0){
  2051  00F332  90D8               	bcf	status,0,c
  2052  00F334  3442               	rlcf	standbyMode@i,w,c
  2053  00F336  6ED9               	movwf	fsr2l,c
  2054  00F338  3443               	rlcf	standbyMode@i+1,w,c
  2055  00F33A  6EDA               	movwf	fsr2h,c
  2056  00F33C  0E46               	movlw	low _drawerInformation
  2057  00F33E  26D9               	addwf	fsr2l,f,c
  2058  00F340  0E00               	movlw	high _drawerInformation
  2059  00F342  22DA               	addwfc	fsr2h,f,c
  2060  00F344  50DE               	movf	postinc2,w,c
  2061  00F346  10DE               	iorwf	postinc2,w,c
  2062  00F348  A4D8               	btfss	status,2,c
  2063  00F34A  D004               	goto	l470
  2064                           
  2065                           ;standbyMode.c: 1023: zero = 1;
  2066  00F34C  0E00               	movlw	0
  2067  00F34E  6E3B               	movwf	standbyMode@zero+1,c
  2068  00F350  0E01               	movlw	1
  2069  00F352  6E3A               	movwf	standbyMode@zero,c
  2070  00F354                     l470:
  2071  00F354                     l3807:
  2072  00F354  4A42               	infsnz	standbyMode@i,f,c
  2073  00F356  2A43               	incf	standbyMode@i+1,f,c
  2074  00F358  D7D2               	goto	l3795
  2075  00F35A                     u5450:
  2076  00F35A                     l3811:
  2077                           
  2078                           ;standbyMode.c: 1024: }
  2079                           ;standbyMode.c: 1025: }
  2080                           ;standbyMode.c: 1026: }
  2081                           ;standbyMode.c: 1027: if (validDrawer == 1){
  2082  00F35A  0438               	decf	standbyMode@validDrawer,w,c
  2083  00F35C  1039               	iorwf	standbyMode@validDrawer+1,w,c
  2084  00F35E  A4D8               	btfss	status,2,c
  2085  00F360  D060               	goto	l471
  2086                           
  2087                           ;standbyMode.c: 1028: if (zero == 1){
  2088  00F362  043A               	decf	standbyMode@zero,w,c
  2089  00F364  103B               	iorwf	standbyMode@zero+1,w,c
  2090  00F366  A4D8               	btfss	status,2,c
  2091  00F368  D02E               	goto	l472
  2092                           
  2093                           ;standbyMode.c: 1029: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2094  00F36A  0E01               	movlw	1
  2095  00F36C  ECB8  F06E         	call	_lcdInst
  2096  00F370  0EC3               	movlw	195
  2097  00F372  6E30               	movwf	??_standbyMode& (0+255),c
  2098  00F374  0ECD               	movlw	205
  2099  00F376                     u5717:
  2100  00F376  2EE8               	decfsz	wreg,f,c
  2101  00F378  D7FE               	bra	u5717
  2102  00F37A  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2103  00F37C  D7FC               	bra	u5717
  2104  00F37E  F000               	nop	
  2105                           
  2106                           ;standbyMode.c: 1030: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2107  00F380  0E0C               	movlw	12
  2108  00F382  ECB8  F06E         	call	_lcdInst
  2109                           
  2110                           ;standbyMode.c: 1031: printf("No drawer");
  2111  00F386  0EC1               	movlw	low STR_42
  2112  00F388  6E0D               	movwf	printf@f,c
  2113  00F38A  0EFF               	movlw	high STR_42
  2114  00F38C  6E0E               	movwf	printf@f+1,c
  2115  00F38E  EC72  F070         	call	_printf	;wreg free
  2116                           
  2117                           ;standbyMode.c: 1032: lcdInst(0xC0);;
  2118  00F392  0EC0               	movlw	192
  2119  00F394  ECB8  F06E         	call	_lcdInst
  2120                           
  2121                           ;standbyMode.c: 1033: printf("number pressed.");
  2122  00F398  0E4F               	movlw	low STR_43
  2123  00F39A  6E0D               	movwf	printf@f,c
  2124  00F39C  0EFE               	movlw	high STR_43
  2125  00F39E  6E0E               	movwf	printf@f+1,c
  2126  00F3A0  EC72  F070         	call	_printf	;wreg free
  2127                           
  2128                           ;standbyMode.c: 1034: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2129  00F3A4  0E66               	movlw	102
  2130  00F3A6  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2131  00F3A8  0E76               	movlw	118
  2132  00F3AA  6E30               	movwf	??_standbyMode& (0+255),c
  2133  00F3AC  0EC1               	movlw	193
  2134  00F3AE                     u5727:
  2135  00F3AE  2EE8               	decfsz	wreg,f,c
  2136  00F3B0  D7FE               	bra	u5727
  2137  00F3B2  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2138  00F3B4  D7FC               	bra	u5727
  2139  00F3B6  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2140  00F3B8  D7FA               	bra	u5727
  2141  00F3BA  F000               	nop	
  2142                           
  2143                           ;standbyMode.c: 1035: zero = 0;
  2144  00F3BC  0E00               	movlw	0
  2145  00F3BE  6E3B               	movwf	standbyMode@zero+1,c
  2146  00F3C0  0E00               	movlw	0
  2147  00F3C2  6E3A               	movwf	standbyMode@zero,c
  2148                           
  2149                           ;standbyMode.c: 1036: }
  2150  00F3C4  D029               	goto	l473
  2151  00F3C6                     l472:
  2152                           
  2153                           ;standbyMode.c: 1037: else{
  2154                           ;standbyMode.c: 1038: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2155  00F3C6  0E01               	movlw	1
  2156  00F3C8  ECB8  F06E         	call	_lcdInst
  2157  00F3CC  0EC3               	movlw	195
  2158  00F3CE  6E30               	movwf	??_standbyMode& (0+255),c
  2159  00F3D0  0ECD               	movlw	205
  2160  00F3D2                     u5737:
  2161  00F3D2  2EE8               	decfsz	wreg,f,c
  2162  00F3D4  D7FE               	bra	u5737
  2163  00F3D6  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2164  00F3D8  D7FC               	bra	u5737
  2165  00F3DA  F000               	nop	
  2166                           
  2167                           ;standbyMode.c: 1039: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2168  00F3DC  0E0C               	movlw	12
  2169  00F3DE  ECB8  F06E         	call	_lcdInst
  2170                           
  2171                           ;standbyMode.c: 1040: printf("Drawer already");
  2172  00F3E2  0E1D               	movlw	low STR_44
  2173  00F3E4  6E0D               	movwf	printf@f,c
  2174  00F3E6  0EFF               	movlw	high STR_44
  2175  00F3E8  6E0E               	movwf	printf@f+1,c
  2176  00F3EA  EC72  F070         	call	_printf	;wreg free
  2177                           
  2178                           ;standbyMode.c: 1041: lcdInst(0xC0);;
  2179  00F3EE  0EC0               	movlw	192
  2180  00F3F0  ECB8  F06E         	call	_lcdInst
  2181                           
  2182                           ;standbyMode.c: 1042: printf("in use!");
  2183  00F3F4  0EDD               	movlw	low STR_45
  2184  00F3F6  6E0D               	movwf	printf@f,c
  2185  00F3F8  0EFF               	movlw	high STR_45
  2186  00F3FA  6E0E               	movwf	printf@f+1,c
  2187  00F3FC  EC72  F070         	call	_printf	;wreg free
  2188                           
  2189                           ;standbyMode.c: 1043: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2190  00F400  0E66               	movlw	102
  2191  00F402  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2192  00F404  0E76               	movlw	118
  2193  00F406  6E30               	movwf	??_standbyMode& (0+255),c
  2194  00F408  0EC1               	movlw	193
  2195  00F40A                     u5747:
  2196  00F40A  2EE8               	decfsz	wreg,f,c
  2197  00F40C  D7FE               	bra	u5747
  2198  00F40E  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2199  00F410  D7FC               	bra	u5747
  2200  00F412  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2201  00F414  D7FA               	bra	u5747
  2202  00F416  F000               	nop	
  2203  00F418                     l473:
  2204                           
  2205                           ;standbyMode.c: 1044: }
  2206                           ;standbyMode.c: 1045: validDrawer = 0;
  2207  00F418  0E00               	movlw	0
  2208  00F41A  6E39               	movwf	standbyMode@validDrawer+1,c
  2209  00F41C  0E00               	movlw	0
  2210  00F41E  6E38               	movwf	standbyMode@validDrawer,c
  2211                           
  2212                           ;standbyMode.c: 1047: }
  2213                           
  2214                           ;standbyMode.c: 1046: continue;
  2215  00F420  D5E7               	goto	l434
  2216  00F422                     l471:
  2217                           
  2218                           ;standbyMode.c: 1048: else{
  2219                           ;standbyMode.c: 1049: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2220  00F422  0E01               	movlw	1
  2221  00F424  ECB8  F06E         	call	_lcdInst
  2222  00F428  0EC3               	movlw	195
  2223  00F42A  6E30               	movwf	??_standbyMode& (0+255),c
  2224  00F42C  0ECD               	movlw	205
  2225  00F42E                     u5757:
  2226  00F42E  2EE8               	decfsz	wreg,f,c
  2227  00F430  D7FE               	bra	u5757
  2228  00F432  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2229  00F434  D7FC               	bra	u5757
  2230  00F436  F000               	nop	
  2231                           
  2232                           ;standbyMode.c: 1050: diet = diet_press(drawer);
  2233  00F438  C044  F019         	movff	standbyMode@drawer,diet_press@drawer
  2234  00F43C  C045  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2235  00F440  EC94  F074         	call	_diet_press	;wreg free
  2236  00F444  C019  F040         	movff	?_diet_press,standbyMode@diet
  2237  00F448  C01A  F041         	movff	?_diet_press+1,standbyMode@diet+1
  2238                           
  2239                           ;standbyMode.c: 1051: if (diet == 100){
  2240  00F44C  0E64               	movlw	100
  2241  00F44E  1840               	xorwf	standbyMode@diet,w,c
  2242  00F450  1041               	iorwf	standbyMode@diet+1,w,c
  2243  00F452  A4D8               	btfss	status,2,c
  2244  00F454  D005               	goto	l477
  2245                           
  2246                           ;standbyMode.c: 1052: diet = 0;
  2247  00F456  0E00               	movlw	0
  2248  00F458  6E41               	movwf	standbyMode@diet+1,c
  2249  00F45A  0E00               	movlw	0
  2250  00F45C  6E40               	movwf	standbyMode@diet,c
  2251                           
  2252                           ;standbyMode.c: 1053: goto DIET_BACK2;
  2253  00F45E  D728               	goto	l435
  2254  00F460                     l477:
  2255                           
  2256                           ;standbyMode.c: 1054: }
  2257                           ;standbyMode.c: 1056: food = food_press(diet, drawer);
  2258  00F460  C040  F019         	movff	standbyMode@diet,food_press@dietSum
  2259  00F464  C041  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  2260  00F468  C044  F01B         	movff	standbyMode@drawer,food_press@drawer
  2261  00F46C  C045  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  2262  00F470  EC01  F071         	call	_food_press	;wreg free
  2263  00F474  C019  F03C         	movff	?_food_press,standbyMode@food
  2264  00F478  C01A  F03D         	movff	?_food_press+1,standbyMode@food+1
  2265                           
  2266                           ;standbyMode.c: 1057: if (food == 100){
  2267  00F47C  0E64               	movlw	100
  2268  00F47E  183C               	xorwf	standbyMode@food,w,c
  2269  00F480  103D               	iorwf	standbyMode@food+1,w,c
  2270  00F482  A4D8               	btfss	status,2,c
  2271  00F484  D009               	goto	l478
  2272                           
  2273                           ;standbyMode.c: 1058: diet = 0;
  2274  00F486  0E00               	movlw	0
  2275  00F488  6E41               	movwf	standbyMode@diet+1,c
  2276  00F48A  0E00               	movlw	0
  2277  00F48C  6E40               	movwf	standbyMode@diet,c
  2278                           
  2279                           ;standbyMode.c: 1059: food = 0;
  2280  00F48E  0E00               	movlw	0
  2281  00F490  6E3D               	movwf	standbyMode@food+1,c
  2282  00F492  0E00               	movlw	0
  2283  00F494  6E3C               	movwf	standbyMode@food,c
  2284                           
  2285                           ;standbyMode.c: 1060: goto FOOD_BACK2;
  2286  00F496  D7C5               	goto	l471
  2287  00F498                     l478:
  2288                           
  2289                           ;standbyMode.c: 1061: }
  2290                           ;standbyMode.c: 1062: drawerInformation[drawerCount] = drawer;
  2291  00F498  90D8               	bcf	status,0,c
  2292  00F49A  343E               	rlcf	standbyMode@drawerCount,w,c
  2293  00F49C  6ED9               	movwf	fsr2l,c
  2294  00F49E  343F               	rlcf	standbyMode@drawerCount+1,w,c
  2295  00F4A0  6EDA               	movwf	fsr2h,c
  2296  00F4A2  0E46               	movlw	low _drawerInformation
  2297  00F4A4  26D9               	addwf	fsr2l,f,c
  2298  00F4A6  0E00               	movlw	high _drawerInformation
  2299  00F4A8  22DA               	addwfc	fsr2h,f,c
  2300  00F4AA  C044  FFDE         	movff	standbyMode@drawer,postinc2
  2301  00F4AE  C045  FFDD         	movff	standbyMode@drawer+1,postdec2
  2302                           
  2303                           ;standbyMode.c: 1063: drawerCount += 1;
  2304  00F4B2  4A3E               	infsnz	standbyMode@drawerCount,f,c
  2305  00F4B4  2A3F               	incf	standbyMode@drawerCount+1,f,c
  2306  00F4B6  D59C               	goto	l434
  2307  00F4B8                     l433:
  2308                           
  2309                           ;standbyMode.c: 1068: else if (keypress == 15){
  2310  00F4B8  0E0F               	movlw	15
  2311  00F4BA  1836               	xorwf	standbyMode@keypress,w,c
  2312  00F4BC  A4D8               	btfss	status,2,c
  2313  00F4BE  D05A               	goto	l480
  2314  00F4C0                     u5500:
  2315                           
  2316                           ;standbyMode.c: 1070: unsigned int whichKey = viewLogs();
  2317                           
  2318                           ;standbyMode.c: 1069: while (1){
  2319  00F4C0  ECFC  F072         	call	_viewLogs	;wreg free
  2320  00F4C4  C019  F034         	movff	?_viewLogs,standbyMode@whichKey
  2321  00F4C8  C01A  F035         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2322                           
  2323                           ;standbyMode.c: 1071: if (whichKey == 14){
  2324  00F4CC  0E0E               	movlw	14
  2325  00F4CE  1834               	xorwf	standbyMode@whichKey,w,c
  2326  00F4D0  1035               	iorwf	standbyMode@whichKey+1,w,c
  2327  00F4D2  B4D8               	btfsc	status,2,c
  2328  00F4D4  D7F5               	goto	u5500
  2329                           
  2330                           ;standbyMode.c: 1074: else if (whichKey == 15){
  2331                           
  2332                           ;standbyMode.c: 1073: }
  2333                           
  2334                           ;standbyMode.c: 1072: continue;
  2335  00F4D6  0E0F               	movlw	15
  2336  00F4D8  1834               	xorwf	standbyMode@whichKey,w,c
  2337  00F4DA  1035               	iorwf	standbyMode@whichKey+1,w,c
  2338  00F4DC  A4D8               	btfss	status,2,c
  2339  00F4DE  D020               	goto	l485
  2340                           
  2341                           ;standbyMode.c: 1075: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2342  00F4E0  0E01               	movlw	1
  2343  00F4E2  ECB8  F06E         	call	_lcdInst
  2344  00F4E6  0EC3               	movlw	195
  2345  00F4E8  6E30               	movwf	??_standbyMode& (0+255),c
  2346  00F4EA  0ECD               	movlw	205
  2347  00F4EC                     u5767:
  2348  00F4EC  2EE8               	decfsz	wreg,f,c
  2349  00F4EE  D7FE               	bra	u5767
  2350  00F4F0  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2351  00F4F2  D7FC               	bra	u5767
  2352  00F4F4  F000               	nop	
  2353                           
  2354                           ;standbyMode.c: 1076: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2355  00F4F6  0E0C               	movlw	12
  2356  00F4F8  ECB8  F06E         	call	_lcdInst
  2357                           
  2358                           ;standbyMode.c: 1077: printf("Rebooting.");
  2359  00F4FC  0EA0               	movlw	low STR_50
  2360  00F4FE  6E0D               	movwf	printf@f,c
  2361  00F500  0EFF               	movlw	high STR_50
  2362  00F502  6E0E               	movwf	printf@f+1,c
  2363  00F504  EC72  F070         	call	_printf	;wreg free
  2364                           
  2365                           ;standbyMode.c: 1078: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2366  00F508  0E66               	movlw	102
  2367  00F50A  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2368  00F50C  0E76               	movlw	118
  2369  00F50E  6E30               	movwf	??_standbyMode& (0+255),c
  2370  00F510  0EC1               	movlw	193
  2371  00F512                     u5777:
  2372  00F512  2EE8               	decfsz	wreg,f,c
  2373  00F514  D7FE               	bra	u5777
  2374  00F516  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2375  00F518  D7FC               	bra	u5777
  2376  00F51A  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2377  00F51C  D7FA               	bra	u5777
  2378  00F51E  D028               	goto	L1
  2379  00F520                     l485:
  2380                           
  2381                           ;standbyMode.c: 1081: else{
  2382                           ;standbyMode.c: 1082: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2383  00F520  0E01               	movlw	1
  2384  00F522  ECB8  F06E         	call	_lcdInst
  2385  00F526  0EC3               	movlw	195
  2386  00F528  6E30               	movwf	??_standbyMode& (0+255),c
  2387  00F52A  0ECD               	movlw	205
  2388  00F52C                     u5787:
  2389  00F52C  2EE8               	decfsz	wreg,f,c
  2390  00F52E  D7FE               	bra	u5787
  2391  00F530  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2392  00F532  D7FC               	bra	u5787
  2393  00F534  F000               	nop	
  2394                           
  2395                           ;standbyMode.c: 1083: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2396  00F536  0E0C               	movlw	12
  2397  00F538  ECB8  F06E         	call	_lcdInst
  2398                           
  2399                           ;standbyMode.c: 1084: printf("Invalid key!");
  2400  00F53C  0E56               	movlw	low STR_51
  2401  00F53E  6E0D               	movwf	printf@f,c
  2402  00F540  0EFF               	movlw	high STR_51
  2403  00F542  6E0E               	movwf	printf@f+1,c
  2404  00F544  EC72  F070         	call	_printf	;wreg free
  2405                           
  2406                           ;standbyMode.c: 1085: lcdInst(0xC0);;
  2407  00F548  0EC0               	movlw	192
  2408  00F54A  ECB8  F06E         	call	_lcdInst
  2409                           
  2410                           ;standbyMode.c: 1086: printf("Rebooting.");
  2411  00F54E  0EA0               	movlw	low STR_50
  2412  00F550  6E0D               	movwf	printf@f,c
  2413  00F552  0EFF               	movlw	high STR_50
  2414  00F554  6E0E               	movwf	printf@f+1,c
  2415  00F556  EC72  F070         	call	_printf	;wreg free
  2416                           
  2417                           ;standbyMode.c: 1087: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2418  00F55A  0E66               	movlw	102
  2419  00F55C  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2420  00F55E  0E76               	movlw	118
  2421  00F560  6E30               	movwf	??_standbyMode& (0+255),c
  2422  00F562  0EC1               	movlw	193
  2423  00F564                     u5797:
  2424  00F564  2EE8               	decfsz	wreg,f,c
  2425  00F566  D7FE               	bra	u5797
  2426  00F568  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2427  00F56A  D7FC               	bra	u5797
  2428  00F56C  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2429  00F56E  D7FA               	bra	u5797
  2430  00F570                     L1:
  2431  00F570  F000               	nop	
  2432                           
  2433                           ;standbyMode.c: 1088: break;
  2434  00F572  0012               	return	
  2435  00F574                     l480:
  2436                           
  2437                           ;standbyMode.c: 1094: else {
  2438                           ;standbyMode.c: 1095: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2439  00F574  0E01               	movlw	1
  2440  00F576  ECB8  F06E         	call	_lcdInst
  2441  00F57A  0EC3               	movlw	195
  2442  00F57C  6E30               	movwf	??_standbyMode& (0+255),c
  2443  00F57E  0ECD               	movlw	205
  2444  00F580                     u5807:
  2445  00F580  2EE8               	decfsz	wreg,f,c
  2446  00F582  D7FE               	bra	u5807
  2447  00F584  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2448  00F586  D7FC               	bra	u5807
  2449  00F588  F000               	nop	
  2450                           
  2451                           ;standbyMode.c: 1096: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2452  00F58A  0E0C               	movlw	12
  2453  00F58C  ECB8  F06E         	call	_lcdInst
  2454                           
  2455                           ;standbyMode.c: 1097: printf("Invalid key!");
  2456  00F590  0E56               	movlw	low STR_51
  2457  00F592  6E0D               	movwf	printf@f,c
  2458  00F594  0EFF               	movlw	high STR_51
  2459  00F596  6E0E               	movwf	printf@f+1,c
  2460  00F598  EC72  F070         	call	_printf	;wreg free
  2461                           
  2462                           ;standbyMode.c: 1098: lcdInst(0xC0);;
  2463  00F59C  0EC0               	movlw	192
  2464  00F59E  ECB8  F06E         	call	_lcdInst
  2465                           
  2466                           ;standbyMode.c: 1099: printf("Rebooting.");
  2467  00F5A2  0EA0               	movlw	low STR_50
  2468  00F5A4  6E0D               	movwf	printf@f,c
  2469  00F5A6  0EFF               	movlw	high STR_50
  2470  00F5A8  6E0E               	movwf	printf@f+1,c
  2471  00F5AA  EC72  F070         	call	_printf	;wreg free
  2472                           
  2473                           ;standbyMode.c: 1100: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2474  00F5AE  0E66               	movlw	102
  2475  00F5B0  6E31               	movwf	(??_standbyMode+1)& (0+255),c
  2476  00F5B2  0E76               	movlw	118
  2477  00F5B4  6E30               	movwf	??_standbyMode& (0+255),c
  2478  00F5B6  0EC1               	movlw	193
  2479  00F5B8                     u5817:
  2480  00F5B8  2EE8               	decfsz	wreg,f,c
  2481  00F5BA  D7FE               	bra	u5817
  2482  00F5BC  2E30               	decfsz	??_standbyMode& (0+255),f,c
  2483  00F5BE  D7FC               	bra	u5817
  2484  00F5C0  2E31               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2485  00F5C2  D7FA               	bra	u5817
  2486  00F5C4  F000               	nop	
  2487  00F5C6  0012               	return	
  2488  00F5C8                     __end_of_standbyMode:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           postinc2	equ	0xFDE
  2494                           postdec2	equ	0xFDD
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _which_drawer *****************
  2500 ;; Defined at:
  2501 ;;		line 772 in file "standbyMode.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  rand            2   27[COMRAM] unsigned int 
  2506 ;;  keypress        1   35[COMRAM] unsigned char 
  2507 ;;  count           2   33[COMRAM] unsigned int 
  2508 ;;  backCheck       2   31[COMRAM] unsigned int 
  2509 ;;  sum             2   29[COMRAM] unsigned int 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  2   24[COMRAM] unsigned int 
  2512 ;; Registers used:
  2513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:       12 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    3
  2526 ;; This function calls:
  2527 ;;		_decode_drawer
  2528 ;;		_lcdInst
  2529 ;;		_printf
  2530 ;;		_putch
  2531 ;; This function is called by:
  2532 ;;		_standbyMode
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text2
  2537  00E3F6                     __ptext2:
  2538                           	opt stack 0
  2539  00E3F6                     _which_drawer:
  2540                           	opt stack 26
  2541                           
  2542                           ;standbyMode.c: 773: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2543                           
  2544                           ;incstack = 0
  2545  00E3F6  0E0C               	movlw	12
  2546  00E3F8  ECB8  F06E         	call	_lcdInst
  2547                           
  2548                           ;standbyMode.c: 774: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2549  00E3FC  0E01               	movlw	1
  2550  00E3FE  ECB8  F06E         	call	_lcdInst
  2551  00E402  0EC3               	movlw	195
  2552  00E404  6E1B               	movwf	??_which_drawer& (0+255),c
  2553  00E406  0ECD               	movlw	205
  2554  00E408                     u5827:
  2555  00E408  2EE8               	decfsz	wreg,f,c
  2556  00E40A  D7FE               	bra	u5827
  2557  00E40C  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2558  00E40E  D7FC               	bra	u5827
  2559  00E410  F000               	nop	
  2560                           
  2561                           ;standbyMode.c: 775: printf("Drawer number:");
  2562  00E412  0E0E               	movlw	low STR_27
  2563  00E414  6E0D               	movwf	printf@f,c
  2564  00E416  0EFF               	movlw	high STR_27
  2565  00E418  6E0E               	movwf	printf@f+1,c
  2566  00E41A  EC72  F070         	call	_printf	;wreg free
  2567                           
  2568                           ;standbyMode.c: 776: lcdInst(0xC0);;
  2569  00E41E  0EC0               	movlw	192
  2570  00E420  ECB8  F06E         	call	_lcdInst
  2571                           
  2572                           ;standbyMode.c: 778: unsigned int count = 0;
  2573  00E424  0E00               	movlw	0
  2574  00E426  6E23               	movwf	which_drawer@count+1,c
  2575  00E428  0E00               	movlw	0
  2576  00E42A  6E22               	movwf	which_drawer@count,c
  2577                           
  2578                           ;standbyMode.c: 779: unsigned int sum = 0;
  2579  00E42C  0E00               	movlw	0
  2580  00E42E  6E1F               	movwf	which_drawer@sum+1,c
  2581  00E430  0E00               	movlw	0
  2582  00E432  6E1E               	movwf	which_drawer@sum,c
  2583                           
  2584                           ;standbyMode.c: 780: unsigned int backCheck = 0;
  2585  00E434  0E00               	movlw	0
  2586  00E436  6E21               	movwf	which_drawer@backCheck+1,c
  2587  00E438  0E00               	movlw	0
  2588  00E43A  6E20               	movwf	which_drawer@backCheck,c
  2589  00E43C                     
  2590                           ;standbyMode.c: 783: while(PORTBbits.RB1 == 0){ continue; }
  2591  00E43C  A281               	btfss	3969,1,c	;volatile
  2592  00E43E  D7FE               	goto	l388
  2593                           
  2594                           ;standbyMode.c: 784: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2595  00E440  3881               	swapf	3969,w,c	;volatile
  2596  00E442  0B0F               	andlw	15
  2597  00E444  0B0F               	andlw	15
  2598  00E446  6E24               	movwf	which_drawer@keypress,c
  2599  00E448  B281               	btfsc	3969,1,c	;volatile
  2600  00E44A  D7FE               	goto	l393
  2601                           
  2602                           ;standbyMode.c: 787: if(keypress == 14){
  2603  00E44C  0E0E               	movlw	14
  2604  00E44E  1824               	xorwf	which_drawer@keypress,w,c
  2605  00E450  B4D8               	btfsc	status,2,c
  2606  00E452  D0B9               	goto	l396
  2607                           
  2608                           ;standbyMode.c: 790: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  2609                           
  2610                           ;standbyMode.c: 789: }
  2611                           
  2612                           ;standbyMode.c: 788: break;
  2613  00E454  5024               	movf	which_drawer@keypress,w,c
  2614  00E456  B4D8               	btfsc	status,2,c
  2615  00E458  D023               	goto	u5040
  2616  00E45A  0424               	decf	which_drawer@keypress,w,c
  2617  00E45C  B4D8               	btfsc	status,2,c
  2618  00E45E  D020               	goto	u5040
  2619  00E460  0E02               	movlw	2
  2620  00E462  1824               	xorwf	which_drawer@keypress,w,c
  2621  00E464  B4D8               	btfsc	status,2,c
  2622  00E466  D01C               	goto	u5040
  2623  00E468  0E04               	movlw	4
  2624  00E46A  1824               	xorwf	which_drawer@keypress,w,c
  2625  00E46C  B4D8               	btfsc	status,2,c
  2626  00E46E  D018               	goto	u5040
  2627  00E470  0E05               	movlw	5
  2628  00E472  1824               	xorwf	which_drawer@keypress,w,c
  2629  00E474  B4D8               	btfsc	status,2,c
  2630  00E476  D014               	goto	u5040
  2631  00E478  0E06               	movlw	6
  2632  00E47A  1824               	xorwf	which_drawer@keypress,w,c
  2633  00E47C  B4D8               	btfsc	status,2,c
  2634  00E47E  D010               	goto	u5040
  2635  00E480  0E08               	movlw	8
  2636  00E482  1824               	xorwf	which_drawer@keypress,w,c
  2637  00E484  B4D8               	btfsc	status,2,c
  2638  00E486  D00C               	goto	u5040
  2639  00E488  0E09               	movlw	9
  2640  00E48A  1824               	xorwf	which_drawer@keypress,w,c
  2641  00E48C  B4D8               	btfsc	status,2,c
  2642  00E48E  D008               	goto	u5040
  2643  00E490  0E0A               	movlw	10
  2644  00E492  1824               	xorwf	which_drawer@keypress,w,c
  2645  00E494  B4D8               	btfsc	status,2,c
  2646  00E496  D004               	goto	u5040
  2647  00E498  0E0D               	movlw	13
  2648  00E49A  1824               	xorwf	which_drawer@keypress,w,c
  2649  00E49C  A4D8               	btfss	status,2,c
  2650  00E49E  D06A               	goto	l398
  2651  00E4A0                     u5040:
  2652                           
  2653                           ;standbyMode.c: 791: if (count == 0){
  2654  00E4A0  5022               	movf	which_drawer@count,w,c
  2655  00E4A2  1023               	iorwf	which_drawer@count+1,w,c
  2656  00E4A4  A4D8               	btfss	status,2,c
  2657  00E4A6  D046               	goto	l401
  2658                           
  2659                           ;standbyMode.c: 792: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  2660  00E4A8  0424               	decf	which_drawer@keypress,w,c
  2661  00E4AA  B4D8               	btfsc	status,2,c
  2662  00E4AC  D01C               	goto	u5130
  2663  00E4AE  0E02               	movlw	2
  2664  00E4B0  1824               	xorwf	which_drawer@keypress,w,c
  2665  00E4B2  B4D8               	btfsc	status,2,c
  2666  00E4B4  D018               	goto	u5130
  2667  00E4B6  0E04               	movlw	4
  2668  00E4B8  1824               	xorwf	which_drawer@keypress,w,c
  2669  00E4BA  B4D8               	btfsc	status,2,c
  2670  00E4BC  D014               	goto	u5130
  2671  00E4BE  0E05               	movlw	5
  2672  00E4C0  1824               	xorwf	which_drawer@keypress,w,c
  2673  00E4C2  B4D8               	btfsc	status,2,c
  2674  00E4C4  D010               	goto	u5130
  2675  00E4C6  0E06               	movlw	6
  2676  00E4C8  1824               	xorwf	which_drawer@keypress,w,c
  2677  00E4CA  B4D8               	btfsc	status,2,c
  2678  00E4CC  D00C               	goto	u5130
  2679  00E4CE  0E08               	movlw	8
  2680  00E4D0  1824               	xorwf	which_drawer@keypress,w,c
  2681  00E4D2  B4D8               	btfsc	status,2,c
  2682  00E4D4  D008               	goto	u5130
  2683  00E4D6  0E09               	movlw	9
  2684  00E4D8  1824               	xorwf	which_drawer@keypress,w,c
  2685  00E4DA  B4D8               	btfsc	status,2,c
  2686  00E4DC  D004               	goto	u5130
  2687  00E4DE  0E0A               	movlw	10
  2688  00E4E0  1824               	xorwf	which_drawer@keypress,w,c
  2689  00E4E2  A4D8               	btfss	status,2,c
  2690  00E4E4  D011               	goto	l402
  2691  00E4E6                     u5130:
  2692                           
  2693                           ;standbyMode.c: 793: count += 2;
  2694  00E4E6  0E02               	movlw	2
  2695  00E4E8  2622               	addwf	which_drawer@count,f,c
  2696  00E4EA  0E00               	movlw	0
  2697  00E4EC  2223               	addwfc	which_drawer@count+1,f,c
  2698                           
  2699                           ;standbyMode.c: 794: putch(input[keypress]);
  2700  00E4EE  5024               	movf	which_drawer@keypress,w,c
  2701  00E4F0  0D01               	mullw	1
  2702  00E4F2  0EC8               	movlw	low _input
  2703  00E4F4  24F3               	addwf	prodl,w,c
  2704  00E4F6  6EF6               	movwf	tblptrl,c
  2705  00E4F8  0EFD               	movlw	high _input
  2706  00E4FA  20F4               	addwfc	prodh,w,c
  2707  00E4FC  6EF7               	movwf	tblptrh,c
  2708  00E4FE                     	if	0	;There are less than 3 active tblptr bytes
  2709  00E4FE                     	endif
  2710  00E4FE  0008               	tblrd		*
  2711  00E500  50F5               	movf	tablat,w,c
  2712  00E502  ECC2  F06E         	call	_putch
  2713  00E506  D034               	goto	l412
  2714  00E508                     l402:
  2715                           
  2716                           ;standbyMode.c: 797: else if (keypress == 0){
  2717  00E508  5024               	movf	which_drawer@keypress,w,c
  2718  00E50A  A4D8               	btfss	status,2,c
  2719  00E50C  D797               	goto	l388
  2720                           
  2721                           ;standbyMode.c: 798: putch(input[keypress]);
  2722  00E50E  5024               	movf	which_drawer@keypress,w,c
  2723  00E510  0D01               	mullw	1
  2724  00E512  0EC8               	movlw	low _input
  2725  00E514  24F3               	addwf	prodl,w,c
  2726  00E516  6EF6               	movwf	tblptrl,c
  2727  00E518  0EFD               	movlw	high _input
  2728  00E51A  20F4               	addwfc	prodh,w,c
  2729  00E51C  6EF7               	movwf	tblptrh,c
  2730  00E51E                     	if	0	;There are less than 3 active tblptr bytes
  2731  00E51E                     	endif
  2732  00E51E  0008               	tblrd		*
  2733  00E520  50F5               	movf	tablat,w,c
  2734  00E522  ECC2  F06E         	call	_putch
  2735                           
  2736                           ;standbyMode.c: 799: count += 1;
  2737  00E526  4A22               	infsnz	which_drawer@count,f,c
  2738  00E528  2A23               	incf	which_drawer@count+1,f,c
  2739  00E52A  D020               	goto	u5180
  2740  00E52C                     L2:
  2741  00E52C  261E               	addwf	which_drawer@sum,f,c
  2742  00E52E  0E00               	movlw	0
  2743  00E530  221F               	addwfc	which_drawer@sum+1,f,c
  2744                           
  2745                           ;standbyMode.c: 801: }
  2746                           ;standbyMode.c: 802: }
  2747  00E532  D784               	goto	l388
  2748  00E534                     l401:
  2749                           
  2750                           ;standbyMode.c: 803: else if (count == 1){
  2751  00E534  0422               	decf	which_drawer@count,w,c
  2752  00E536  1023               	iorwf	which_drawer@count+1,w,c
  2753  00E538  A4D8               	btfss	status,2,c
  2754  00E53A  D780               	goto	l388
  2755                           
  2756                           ;standbyMode.c: 804: if (keypress < 8 || keypress == 13){
  2757  00E53C  0E07               	movlw	7
  2758  00E53E  6424               	cpfsgt	which_drawer@keypress,c
  2759  00E540  D004               	goto	u5170
  2760  00E542  0E0D               	movlw	13
  2761  00E544  1824               	xorwf	which_drawer@keypress,w,c
  2762  00E546  A4D8               	btfss	status,2,c
  2763  00E548  D779               	goto	l388
  2764  00E54A                     u5170:
  2765                           
  2766                           ;standbyMode.c: 805: putch(input[keypress]);
  2767  00E54A  5024               	movf	which_drawer@keypress,w,c
  2768  00E54C  0D01               	mullw	1
  2769  00E54E  0EC8               	movlw	low _input
  2770  00E550  24F3               	addwf	prodl,w,c
  2771  00E552  6EF6               	movwf	tblptrl,c
  2772  00E554  0EFD               	movlw	high _input
  2773  00E556  20F4               	addwfc	prodh,w,c
  2774  00E558  6EF7               	movwf	tblptrh,c
  2775  00E55A                     	if	0	;There are less than 3 active tblptr bytes
  2776  00E55A                     	endif
  2777  00E55A  0008               	tblrd		*
  2778  00E55C  50F5               	movf	tablat,w,c
  2779  00E55E  ECC2  F06E         	call	_putch
  2780                           
  2781                           ;standbyMode.c: 806: count += 1;
  2782  00E562  4A22               	infsnz	which_drawer@count,f,c
  2783  00E564  2A23               	incf	which_drawer@count+1,f,c
  2784                           
  2785                           ;standbyMode.c: 807: if(keypress == 0){
  2786  00E566  5024               	movf	which_drawer@keypress,w,c
  2787  00E568  A4D8               	btfss	status,2,c
  2788  00E56A  D002               	goto	l412
  2789  00E56C                     u5180:
  2790                           
  2791                           ;standbyMode.c: 808: sum += 20;
  2792  00E56C  0E14               	movlw	20
  2793  00E56E  D7DE               	goto	L2
  2794  00E570                     l412:
  2795                           
  2796                           ;standbyMode.c: 810: else {
  2797                           ;standbyMode.c: 811: sum += keypress;
  2798  00E570  5024               	movf	which_drawer@keypress,w,c
  2799  00E572  D7DC               	goto	L2
  2800  00E574                     l398:
  2801                           
  2802                           ;standbyMode.c: 816: else if (keypress == 12){
  2803  00E574  0E0C               	movlw	12
  2804  00E576  1824               	xorwf	which_drawer@keypress,w,c
  2805  00E578  A4D8               	btfss	status,2,c
  2806  00E57A  D01D               	goto	l415
  2807                           
  2808                           ;standbyMode.c: 817: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2809  00E57C  0E01               	movlw	1
  2810  00E57E  ECB8  F06E         	call	_lcdInst
  2811  00E582  0EC3               	movlw	195
  2812  00E584  6E1B               	movwf	??_which_drawer& (0+255),c
  2813  00E586  0ECD               	movlw	205
  2814  00E588                     u5837:
  2815  00E588  2EE8               	decfsz	wreg,f,c
  2816  00E58A  D7FE               	bra	u5837
  2817  00E58C  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2818  00E58E  D7FC               	bra	u5837
  2819  00E590  F000               	nop	
  2820                           
  2821                           ;standbyMode.c: 818: printf("Drawer number:");
  2822  00E592  0E0E               	movlw	low STR_27
  2823  00E594  6E0D               	movwf	printf@f,c
  2824  00E596  0EFF               	movlw	high STR_27
  2825  00E598  6E0E               	movwf	printf@f+1,c
  2826  00E59A  EC72  F070         	call	_printf	;wreg free
  2827                           
  2828                           ;standbyMode.c: 819: lcdInst(0xC0);;
  2829  00E59E  0EC0               	movlw	192
  2830  00E5A0  ECB8  F06E         	call	_lcdInst
  2831                           
  2832                           ;standbyMode.c: 820: count = 0;
  2833  00E5A4  0E00               	movlw	0
  2834  00E5A6  6E23               	movwf	which_drawer@count+1,c
  2835  00E5A8  0E00               	movlw	0
  2836  00E5AA  6E22               	movwf	which_drawer@count,c
  2837                           
  2838                           ;standbyMode.c: 821: sum = 0;
  2839  00E5AC  0E00               	movlw	0
  2840  00E5AE  6E1F               	movwf	which_drawer@sum+1,c
  2841  00E5B0  0E00               	movlw	0
  2842  00E5B2  6E1E               	movwf	which_drawer@sum,c
  2843                           
  2844                           ;standbyMode.c: 822: }
  2845  00E5B4  D743               	goto	l388
  2846  00E5B6                     l415:
  2847                           
  2848                           ;standbyMode.c: 823: else if (keypress == 15){
  2849  00E5B6  0E0F               	movlw	15
  2850  00E5B8  1824               	xorwf	which_drawer@keypress,w,c
  2851  00E5BA  A4D8               	btfss	status,2,c
  2852  00E5BC  D73F               	goto	l388
  2853                           
  2854                           ;standbyMode.c: 824: backCheck = 100;
  2855  00E5BE  0E00               	movlw	0
  2856  00E5C0  6E21               	movwf	which_drawer@backCheck+1,c
  2857  00E5C2  0E64               	movlw	100
  2858  00E5C4  6E20               	movwf	which_drawer@backCheck,c
  2859  00E5C6                     l396:
  2860                           
  2861                           ;standbyMode.c: 826: }
  2862                           ;standbyMode.c: 827: }
  2863                           ;standbyMode.c: 829: if (backCheck == 100){
  2864  00E5C6  0E64               	movlw	100
  2865  00E5C8  1820               	xorwf	which_drawer@backCheck,w,c
  2866  00E5CA  1021               	iorwf	which_drawer@backCheck+1,w,c
  2867  00E5CC  A4D8               	btfss	status,2,c
  2868  00E5CE  D005               	goto	l419
  2869                           
  2870                           ;standbyMode.c: 830: return backCheck;
  2871  00E5D0  C020  F019         	movff	which_drawer@backCheck,?_which_drawer
  2872  00E5D4  C021  F01A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  2873                           
  2874                           ;standbyMode.c: 831: }
  2875  00E5D8  0012               	return	
  2876  00E5DA                     l419:
  2877                           
  2878                           ;standbyMode.c: 832: else{
  2879                           ;standbyMode.c: 833: unsigned int rand = decode_drawer(sum);
  2880  00E5DA  C01E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  2881  00E5DE  C01F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  2882  00E5E2  EC01  F070         	call	_decode_drawer	;wreg free
  2883  00E5E6  C001  F01C         	movff	?_decode_drawer,which_drawer@rand
  2884  00E5EA  C002  F01D         	movff	?_decode_drawer+1,which_drawer@rand+1
  2885                           
  2886                           ;standbyMode.c: 834: return rand;
  2887  00E5EE  C01C  F019         	movff	which_drawer@rand,?_which_drawer
  2888  00E5F2  C01D  F01A         	movff	which_drawer@rand+1,?_which_drawer+1
  2889  00E5F6  0012               	return	
  2890  00E5F8                     __end_of_which_drawer:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _decode_drawer *****************
  2907 ;; Defined at:
  2908 ;;		line 694 in file "standbyMode.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  drawer          2    0[COMRAM] unsigned int 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  returnValue     2    4[COMRAM] unsigned int 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  2    0[COMRAM] unsigned int 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2, status,0
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:        6 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; This function calls:
  2929 ;;		Nothing
  2930 ;; This function is called by:
  2931 ;;		_which_drawer
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text3
  2936  00E002                     __ptext3:
  2937                           	opt stack 0
  2938  00E002                     _decode_drawer:
  2939                           	opt stack 28
  2940                           
  2941                           ;standbyMode.c: 695: unsigned int returnValue;
  2942                           ;standbyMode.c: 697: switch(drawer){
  2943                           
  2944                           ;incstack = 0
  2945  00E002  D03A               	goto	l369
  2946  00E004                     
  2947                           ;standbyMode.c: 700: returnValue = 1;
  2948  00E004  0E00               	movlw	0
  2949  00E006  6E06               	movwf	decode_drawer@returnValue+1,c
  2950  00E008  0E01               	movlw	1
  2951  00E00A  D02F               	goto	L14
  2952  00E00C                     
  2953                           ;standbyMode.c: 705: returnValue = 2;
  2954  00E00C  0E00               	movlw	0
  2955  00E00E  6E06               	movwf	decode_drawer@returnValue+1,c
  2956  00E010  0E02               	movlw	2
  2957  00E012  D02B               	goto	L14
  2958  00E014                     
  2959                           ;standbyMode.c: 710: returnValue = 3;
  2960  00E014  0E00               	movlw	0
  2961  00E016  6E06               	movwf	decode_drawer@returnValue+1,c
  2962  00E018  0E03               	movlw	3
  2963  00E01A  D027               	goto	L14
  2964  00E01C                     
  2965                           ;standbyMode.c: 715: returnValue = 7;
  2966  00E01C  0E00               	movlw	0
  2967  00E01E  6E06               	movwf	decode_drawer@returnValue+1,c
  2968  00E020  0E07               	movlw	7
  2969  00E022  D023               	goto	L14
  2970  00E024                     
  2971                           ;standbyMode.c: 720: returnValue = 8;
  2972  00E024  0E00               	movlw	0
  2973  00E026  6E06               	movwf	decode_drawer@returnValue+1,c
  2974  00E028  0E08               	movlw	8
  2975  00E02A  D01F               	goto	L14
  2976  00E02C                     
  2977                           ;standbyMode.c: 725: returnValue = 9;
  2978  00E02C  0E00               	movlw	0
  2979  00E02E  6E06               	movwf	decode_drawer@returnValue+1,c
  2980  00E030  0E09               	movlw	9
  2981  00E032  D01B               	goto	L14
  2982  00E034                     
  2983                           ;standbyMode.c: 730: returnValue = 10;
  2984  00E034  0E00               	movlw	0
  2985  00E036  6E06               	movwf	decode_drawer@returnValue+1,c
  2986  00E038  0E0A               	movlw	10
  2987  00E03A  D017               	goto	L14
  2988  00E03C                     
  2989                           ;standbyMode.c: 735: returnValue = 11;
  2990  00E03C  0E00               	movlw	0
  2991  00E03E  6E06               	movwf	decode_drawer@returnValue+1,c
  2992  00E040  0E0B               	movlw	11
  2993  00E042  D013               	goto	L14
  2994  00E044                     
  2995                           ;standbyMode.c: 740: returnValue = 12;
  2996  00E044  0E00               	movlw	0
  2997  00E046  6E06               	movwf	decode_drawer@returnValue+1,c
  2998  00E048  0E0C               	movlw	12
  2999  00E04A  D00F               	goto	L14
  3000  00E04C                     
  3001                           ;standbyMode.c: 745: returnValue = 13;
  3002  00E04C  0E00               	movlw	0
  3003  00E04E  6E06               	movwf	decode_drawer@returnValue+1,c
  3004  00E050  0E0D               	movlw	13
  3005  00E052  D00B               	goto	L14
  3006  00E054                     
  3007                           ;standbyMode.c: 750: returnValue = 14;
  3008  00E054  0E00               	movlw	0
  3009  00E056  6E06               	movwf	decode_drawer@returnValue+1,c
  3010  00E058  0E0E               	movlw	14
  3011  00E05A  D007               	goto	L14
  3012  00E05C                     
  3013                           ;standbyMode.c: 755: returnValue = 15;
  3014  00E05C  0E00               	movlw	0
  3015  00E05E  6E06               	movwf	decode_drawer@returnValue+1,c
  3016  00E060  0E0F               	movlw	15
  3017  00E062  D003               	goto	L14
  3018  00E064                     
  3019                           ;standbyMode.c: 760: returnValue = 16;
  3020  00E064  0E00               	movlw	0
  3021  00E066  6E06               	movwf	decode_drawer@returnValue+1,c
  3022  00E068  0E10               	movlw	16
  3023  00E06A                     L14:
  3024  00E06A  6E05               	movwf	decode_drawer@returnValue,c
  3025                           
  3026                           ;standbyMode.c: 761: break;
  3027  00E06C  D036               	goto	l371
  3028  00E06E                     l384:
  3029                           
  3030                           ;standbyMode.c: 764: returnValue = drawer;
  3031  00E06E  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3032  00E072  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3033                           
  3034                           ;standbyMode.c: 766: }
  3035                           
  3036                           ;standbyMode.c: 765: break;
  3037  00E076  D031               	goto	l371
  3038  00E078                     l369:
  3039  00E078  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3040  00E07C  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3041                           
  3042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3043                           ; Switch size 1, requested type "space"
  3044                           ; Number of cases is 1, Range of values is 0 to 0
  3045                           ; switch strategies available:
  3046                           ; Name         Instructions Cycles
  3047                           ; simple_byte            4     3 (average)
  3048                           ;	Chosen strategy is simple_byte
  3049  00E080  5004               	movf	??_decode_drawer+1,w,c
  3050  00E082  0A00               	xorlw	0	; case 0
  3051  00E084  A4D8               	btfss	status,2,c
  3052  00E086  D7F3               	goto	l384
  3053                           
  3054                           ; Switch size 1, requested type "space"
  3055                           ; Number of cases is 13, Range of values is 1 to 40
  3056                           ; switch strategies available:
  3057                           ; Name         Instructions Cycles
  3058                           ; simple_byte           40    21 (average)
  3059                           ;	Chosen strategy is simple_byte
  3060  00E088  5003               	movf	??_decode_drawer,w,c
  3061  00E08A  0A01               	xorlw	1	; case 1
  3062  00E08C  B4D8               	btfsc	status,2,c
  3063  00E08E  D7BE               	goto	l372
  3064  00E090  0A03               	xorlw	3	; case 2
  3065  00E092  B4D8               	btfsc	status,2,c
  3066  00E094  D7BF               	goto	l373
  3067  00E096  0A0A               	xorlw	10	; case 8
  3068  00E098  B4D8               	btfsc	status,2,c
  3069  00E09A  D7C0               	goto	l374
  3070  00E09C  0A01               	xorlw	1	; case 9
  3071  00E09E  B4D8               	btfsc	status,2,c
  3072  00E0A0  D7C1               	goto	l375
  3073  00E0A2  0A03               	xorlw	3	; case 10
  3074  00E0A4  B4D8               	btfsc	status,2,c
  3075  00E0A6  D7C2               	goto	l376
  3076  00E0A8  0A1E               	xorlw	30	; case 20
  3077  00E0AA  B4D8               	btfsc	status,2,c
  3078  00E0AC  D7AB               	goto	l370
  3079  00E0AE  0A01               	xorlw	1	; case 21
  3080  00E0B0  B4D8               	btfsc	status,2,c
  3081  00E0B2  D7C8               	goto	l379
  3082  00E0B4  0A03               	xorlw	3	; case 22
  3083  00E0B6  B4D8               	btfsc	status,2,c
  3084  00E0B8  D7C9               	goto	l380
  3085  00E0BA  0A0E               	xorlw	14	; case 24
  3086  00E0BC  B4D8               	btfsc	status,2,c
  3087  00E0BE  D7CA               	goto	l381
  3088  00E0C0  0A01               	xorlw	1	; case 25
  3089  00E0C2  B4D8               	btfsc	status,2,c
  3090  00E0C4  D7CB               	goto	l382
  3091  00E0C6  0A03               	xorlw	3	; case 26
  3092  00E0C8  B4D8               	btfsc	status,2,c
  3093  00E0CA  D7CC               	goto	l383
  3094  00E0CC  0A3B               	xorlw	59	; case 33
  3095  00E0CE  B4D8               	btfsc	status,2,c
  3096  00E0D0  D7B1               	goto	l377
  3097  00E0D2  0A09               	xorlw	9	; case 40
  3098  00E0D4  B4D8               	btfsc	status,2,c
  3099  00E0D6  D7B2               	goto	l378
  3100  00E0D8  D7CA               	goto	l384
  3101  00E0DA                     l371:
  3102                           
  3103                           ;standbyMode.c: 767: return returnValue;
  3104  00E0DA  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3105  00E0DE  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3106  00E0E2  0012               	return		;funcret
  3107  00E0E4                     __end_of_decode_drawer:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _viewLogs *****************
  3124 ;; Defined at:
  3125 ;;		line 271 in file "standbyMode.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  keypress2       1   29[COMRAM] unsigned char 
  3130 ;;  keypress3       1   28[COMRAM] unsigned char 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  2   24[COMRAM] unsigned int 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;Total ram usage:        6 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    3
  3147 ;; This function calls:
  3148 ;;		_lcdInst
  3149 ;;		_printf
  3150 ;;		_putch
  3151 ;; This function is called by:
  3152 ;;		_standbyMode
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text4
  3157  00E5F8                     __ptext4:
  3158                           	opt stack 0
  3159  00E5F8                     _viewLogs:
  3160                           	opt stack 26
  3161                           
  3162                           ;standbyMode.c: 272: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3163                           
  3164                           ;incstack = 0
  3165  00E5F8  0E01               	movlw	1
  3166  00E5FA  ECB8  F06E         	call	_lcdInst
  3167  00E5FE  0EC3               	movlw	195
  3168  00E600  6E1B               	movwf	??_viewLogs& (0+255),c
  3169  00E602  0ECD               	movlw	205
  3170  00E604                     u5847:
  3171  00E604  2EE8               	decfsz	wreg,f,c
  3172  00E606  D7FE               	bra	u5847
  3173  00E608  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3174  00E60A  D7FC               	bra	u5847
  3175  00E60C  F000               	nop	
  3176                           
  3177                           ;standbyMode.c: 273: printf("5 previous logs");
  3178  00E60E  0EEF               	movlw	low STR_1
  3179  00E610  6E0D               	movwf	printf@f,c
  3180  00E612  0EFE               	movlw	high STR_1
  3181  00E614  6E0E               	movwf	printf@f+1,c
  3182  00E616  EC72  F070         	call	_printf	;wreg free
  3183                           
  3184                           ;standbyMode.c: 274: lcdInst(0xC0);;
  3185  00E61A  0EC0               	movlw	192
  3186  00E61C  ECB8  F06E         	call	_lcdInst
  3187                           
  3188                           ;standbyMode.c: 275: printf("available.");
  3189  00E620  0E95               	movlw	low STR_2
  3190  00E622  6E0D               	movwf	printf@f,c
  3191  00E624  0EFF               	movlw	high STR_2
  3192  00E626  6E0E               	movwf	printf@f+1,c
  3193  00E628  EC72  F070         	call	_printf	;wreg free
  3194                           
  3195                           ;standbyMode.c: 276: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3196  00E62C  0E66               	movlw	102
  3197  00E62E  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3198  00E630  0E76               	movlw	118
  3199  00E632  6E1B               	movwf	??_viewLogs& (0+255),c
  3200  00E634  0EC1               	movlw	193
  3201  00E636                     u5857:
  3202  00E636  2EE8               	decfsz	wreg,f,c
  3203  00E638  D7FE               	bra	u5857
  3204  00E63A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3205  00E63C  D7FC               	bra	u5857
  3206  00E63E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3207  00E640  D7FA               	bra	u5857
  3208  00E642  F000               	nop	
  3209                           
  3210                           ;standbyMode.c: 277: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3211  00E644  0E01               	movlw	1
  3212  00E646  ECB8  F06E         	call	_lcdInst
  3213  00E64A  0EC3               	movlw	195
  3214  00E64C  6E1B               	movwf	??_viewLogs& (0+255),c
  3215  00E64E  0ECD               	movlw	205
  3216  00E650                     u5867:
  3217  00E650  2EE8               	decfsz	wreg,f,c
  3218  00E652  D7FE               	bra	u5867
  3219  00E654  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3220  00E656  D7FC               	bra	u5867
  3221  00E658  F000               	nop	
  3222                           
  3223                           ;standbyMode.c: 278: printf("Please input log");
  3224  00E65A  0E1D               	movlw	low STR_3
  3225  00E65C  6E0D               	movwf	printf@f,c
  3226  00E65E  0EFE               	movlw	high STR_3
  3227  00E660  6E0E               	movwf	printf@f+1,c
  3228  00E662  EC72  F070         	call	_printf	;wreg free
  3229                           
  3230                           ;standbyMode.c: 279: lcdInst(0xC0);;
  3231  00E666  0EC0               	movlw	192
  3232  00E668  ECB8  F06E         	call	_lcdInst
  3233                           
  3234                           ;standbyMode.c: 280: printf("number: ");
  3235  00E66C  0ECB               	movlw	low STR_4
  3236  00E66E  6E0D               	movwf	printf@f,c
  3237  00E670  0EFF               	movlw	high STR_4
  3238  00E672  6E0E               	movwf	printf@f+1,c
  3239  00E674  EC72  F070         	call	_printf	;wreg free
  3240  00E678                     
  3241                           ;standbyMode.c: 283: while(PORTBbits.RB1 == 0){ continue; }
  3242  00E678  A281               	btfss	3969,1,c	;volatile
  3243  00E67A  D7FE               	goto	l215
  3244                           
  3245                           ;standbyMode.c: 284: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3246  00E67C  3881               	swapf	3969,w,c	;volatile
  3247  00E67E  0B0F               	andlw	15
  3248  00E680  0B0F               	andlw	15
  3249  00E682  6E1E               	movwf	viewLogs@keypress2,c
  3250  00E684  B281               	btfsc	3969,1,c	;volatile
  3251  00E686  D7FE               	goto	l220
  3252                           
  3253                           ;standbyMode.c: 287: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4 || keypress2 == 5){
  3254  00E688  501E               	movf	viewLogs@keypress2,w,c
  3255  00E68A  B4D8               	btfsc	status,2,c
  3256  00E68C  D00F               	goto	u3890
  3257  00E68E  041E               	decf	viewLogs@keypress2,w,c
  3258  00E690  B4D8               	btfsc	status,2,c
  3259  00E692  D00C               	goto	u3890
  3260  00E694  0E02               	movlw	2
  3261  00E696  181E               	xorwf	viewLogs@keypress2,w,c
  3262  00E698  B4D8               	btfsc	status,2,c
  3263  00E69A  D008               	goto	u3890
  3264  00E69C  0E04               	movlw	4
  3265  00E69E  181E               	xorwf	viewLogs@keypress2,w,c
  3266  00E6A0  B4D8               	btfsc	status,2,c
  3267  00E6A2  D004               	goto	u3890
  3268  00E6A4  0E05               	movlw	5
  3269  00E6A6  181E               	xorwf	viewLogs@keypress2,w,c
  3270  00E6A8  A4D8               	btfss	status,2,c
  3271  00E6AA  D7E6               	goto	l215
  3272  00E6AC                     u3890:
  3273                           
  3274                           ;standbyMode.c: 288: putch(keys[keypress2]);
  3275  00E6AC  501E               	movf	viewLogs@keypress2,w,c
  3276  00E6AE  0D01               	mullw	1
  3277  00E6B0  0EB7               	movlw	low _keys
  3278  00E6B2  24F3               	addwf	prodl,w,c
  3279  00E6B4  6EF6               	movwf	tblptrl,c
  3280  00E6B6  0EFD               	movlw	high _keys
  3281  00E6B8  20F4               	addwfc	prodh,w,c
  3282  00E6BA  6EF7               	movwf	tblptrh,c
  3283  00E6BC                     	if	0	;There are less than 3 active tblptr bytes
  3284  00E6BC                     	endif
  3285  00E6BC  0008               	tblrd		*
  3286  00E6BE  50F5               	movf	tablat,w,c
  3287  00E6C0  ECC2  F06E         	call	_putch
  3288                           
  3289                           ;standbyMode.c: 289: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3290  00E6C4  0E33               	movlw	51
  3291  00E6C6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3292  00E6C8  0EBB               	movlw	187
  3293  00E6CA  6E1B               	movwf	??_viewLogs& (0+255),c
  3294  00E6CC  0EE0               	movlw	224
  3295  00E6CE                     u5877:
  3296  00E6CE  2EE8               	decfsz	wreg,f,c
  3297  00E6D0  D7FE               	bra	u5877
  3298  00E6D2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3299  00E6D4  D7FC               	bra	u5877
  3300  00E6D6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3301  00E6D8  D7FA               	bra	u5877
  3302                           
  3303                           ;standbyMode.c: 291: }
  3304                           ;standbyMode.c: 292: }
  3305                           ;standbyMode.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3306                           
  3307                           ;standbyMode.c: 290: break;
  3308  00E6DA  0E01               	movlw	1
  3309  00E6DC  ECB8  F06E         	call	_lcdInst
  3310  00E6E0  0EC3               	movlw	195
  3311  00E6E2  6E1B               	movwf	??_viewLogs& (0+255),c
  3312  00E6E4  0ECD               	movlw	205
  3313  00E6E6                     u5887:
  3314  00E6E6  2EE8               	decfsz	wreg,f,c
  3315  00E6E8  D7FE               	bra	u5887
  3316  00E6EA  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3317  00E6EC  D7FC               	bra	u5887
  3318  00E6EE  F000               	nop	
  3319                           
  3320                           ;standbyMode.c: 295: printf("Great!");
  3321  00E6F0  0EED               	movlw	low STR_5
  3322  00E6F2  6E0D               	movwf	printf@f,c
  3323  00E6F4  0EFF               	movlw	high STR_5
  3324  00E6F6  6E0E               	movwf	printf@f+1,c
  3325  00E6F8  EC72  F070         	call	_printf	;wreg free
  3326                           
  3327                           ;standbyMode.c: 296: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3328  00E6FC  0E33               	movlw	51
  3329  00E6FE  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3330  00E700  0EBB               	movlw	187
  3331  00E702  6E1B               	movwf	??_viewLogs& (0+255),c
  3332  00E704  0EE0               	movlw	224
  3333  00E706                     u5897:
  3334  00E706  2EE8               	decfsz	wreg,f,c
  3335  00E708  D7FE               	bra	u5897
  3336  00E70A  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3337  00E70C  D7FC               	bra	u5897
  3338  00E70E  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3339  00E710  D7FA               	bra	u5897
  3340                           
  3341                           ;standbyMode.c: 297: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3342  00E712  0E01               	movlw	1
  3343  00E714  ECB8  F06E         	call	_lcdInst
  3344  00E718  0EC3               	movlw	195
  3345  00E71A  6E1B               	movwf	??_viewLogs& (0+255),c
  3346  00E71C  0ECD               	movlw	205
  3347  00E71E                     u5907:
  3348  00E71E  2EE8               	decfsz	wreg,f,c
  3349  00E720  D7FE               	bra	u5907
  3350  00E722  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3351  00E724  D7FC               	bra	u5907
  3352  00E726  F000               	nop	
  3353                           
  3354                           ;standbyMode.c: 298: printf("Press any key to");
  3355  00E728  0E2E               	movlw	low STR_6
  3356  00E72A  6E0D               	movwf	printf@f,c
  3357  00E72C  0EFE               	movlw	high STR_6
  3358  00E72E  6E0E               	movwf	printf@f+1,c
  3359  00E730  EC72  F070         	call	_printf	;wreg free
  3360                           
  3361                           ;standbyMode.c: 299: lcdInst(0xC0);;
  3362  00E734  0EC0               	movlw	192
  3363  00E736  ECB8  F06E         	call	_lcdInst
  3364                           
  3365                           ;standbyMode.c: 300: printf("move on.");
  3366  00E73A  0ED4               	movlw	low STR_7
  3367  00E73C  6E0D               	movwf	printf@f,c
  3368  00E73E  0EFF               	movlw	high STR_7
  3369  00E740  6E0E               	movwf	printf@f+1,c
  3370  00E742  EC72  F070         	call	_printf	;wreg free
  3371                           
  3372                           ;standbyMode.c: 301: _delay((unsigned long)((500)*(40000000/4000.0)));
  3373  00E746  0E1A               	movlw	26
  3374  00E748  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3375  00E74A  0E5E               	movlw	94
  3376  00E74C  6E1B               	movwf	??_viewLogs& (0+255),c
  3377  00E74E  0E6E               	movlw	110
  3378  00E750                     u5917:
  3379  00E750  2EE8               	decfsz	wreg,f,c
  3380  00E752  D7FE               	bra	u5917
  3381  00E754  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3382  00E756  D7FC               	bra	u5917
  3383  00E758  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3384  00E75A  D7FA               	bra	u5917
  3385  00E75C  D000               	nop2	
  3386  00E75E                     
  3387                           ;standbyMode.c: 304: continue;
  3388  00E75E  A281               	btfss	3969,1,c	;volatile
  3389  00E760  D7FE               	goto	l228
  3390                           
  3391                           ;standbyMode.c: 305: }
  3392                           ;standbyMode.c: 307: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3393  00E762  0E01               	movlw	1
  3394  00E764  ECB8  F06E         	call	_lcdInst
  3395  00E768  0EC3               	movlw	195
  3396  00E76A  6E1B               	movwf	??_viewLogs& (0+255),c
  3397  00E76C  0ECD               	movlw	205
  3398  00E76E                     u5927:
  3399  00E76E  2EE8               	decfsz	wreg,f,c
  3400  00E770  D7FE               	bra	u5927
  3401  00E772  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3402  00E774  D7FC               	bra	u5927
  3403  00E776  F000               	nop	
  3404                           
  3405                           ;standbyMode.c: 308: printf("Operation time:");
  3406  00E778  0E7F               	movlw	low STR_8
  3407  00E77A  6E0D               	movwf	printf@f,c
  3408  00E77C  0EFE               	movlw	high STR_8
  3409  00E77E  6E0E               	movwf	printf@f+1,c
  3410  00E780  EC72  F070         	call	_printf	;wreg free
  3411                           
  3412                           ;standbyMode.c: 309: lcdInst(0xC0);;
  3413  00E784  0EC0               	movlw	192
  3414  00E786  ECB8  F06E         	call	_lcdInst
  3415                           
  3416                           ;standbyMode.c: 310: printf("2:39");
  3417  00E78A  0EFA               	movlw	low STR_9
  3418  00E78C  6E0D               	movwf	printf@f,c
  3419  00E78E  0EFF               	movlw	high STR_9
  3420  00E790  6E0E               	movwf	printf@f+1,c
  3421  00E792  EC72  F070         	call	_printf	;wreg free
  3422                           
  3423                           ;standbyMode.c: 311: _delay((unsigned long)((500)*(40000000/4000.0)));
  3424  00E796  0E1A               	movlw	26
  3425  00E798  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3426  00E79A  0E5E               	movlw	94
  3427  00E79C  6E1B               	movwf	??_viewLogs& (0+255),c
  3428  00E79E  0E6E               	movlw	110
  3429  00E7A0                     u5937:
  3430  00E7A0  2EE8               	decfsz	wreg,f,c
  3431  00E7A2  D7FE               	bra	u5937
  3432  00E7A4  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3433  00E7A6  D7FC               	bra	u5937
  3434  00E7A8  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3435  00E7AA  D7FA               	bra	u5937
  3436  00E7AC  D000               	nop2	
  3437  00E7AE                     
  3438                           ;standbyMode.c: 314: continue;
  3439  00E7AE  A281               	btfss	3969,1,c	;volatile
  3440  00E7B0  D7FE               	goto	l231
  3441                           
  3442                           ;standbyMode.c: 315: }
  3443                           ;standbyMode.c: 317: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3444  00E7B2  0E01               	movlw	1
  3445  00E7B4  ECB8  F06E         	call	_lcdInst
  3446  00E7B8  0EC3               	movlw	195
  3447  00E7BA  6E1B               	movwf	??_viewLogs& (0+255),c
  3448  00E7BC  0ECD               	movlw	205
  3449  00E7BE                     u5947:
  3450  00E7BE  2EE8               	decfsz	wreg,f,c
  3451  00E7C0  D7FE               	bra	u5947
  3452  00E7C2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3453  00E7C4  D7FC               	bra	u5947
  3454  00E7C6  F000               	nop	
  3455                           
  3456                           ;standbyMode.c: 318: printf("Marked drawers:");
  3457  00E7C8  0E8F               	movlw	low STR_10
  3458  00E7CA  6E0D               	movwf	printf@f,c
  3459  00E7CC  0EFE               	movlw	high STR_10
  3460  00E7CE  6E0E               	movwf	printf@f+1,c
  3461  00E7D0  EC72  F070         	call	_printf	;wreg free
  3462                           
  3463                           ;standbyMode.c: 319: lcdInst(0xC0);;
  3464  00E7D4  0EC0               	movlw	192
  3465  00E7D6  ECB8  F06E         	call	_lcdInst
  3466                           
  3467                           ;standbyMode.c: 320: printf("1, 13");
  3468  00E7DA  0EF4               	movlw	low STR_11
  3469  00E7DC  6E0D               	movwf	printf@f,c
  3470  00E7DE  0EFF               	movlw	high STR_11
  3471  00E7E0  6E0E               	movwf	printf@f+1,c
  3472  00E7E2  EC72  F070         	call	_printf	;wreg free
  3473                           
  3474                           ;standbyMode.c: 321: _delay((unsigned long)((500)*(40000000/4000.0)));
  3475  00E7E6  0E1A               	movlw	26
  3476  00E7E8  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3477  00E7EA  0E5E               	movlw	94
  3478  00E7EC  6E1B               	movwf	??_viewLogs& (0+255),c
  3479  00E7EE  0E6E               	movlw	110
  3480  00E7F0                     u5957:
  3481  00E7F0  2EE8               	decfsz	wreg,f,c
  3482  00E7F2  D7FE               	bra	u5957
  3483  00E7F4  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3484  00E7F6  D7FC               	bra	u5957
  3485  00E7F8  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3486  00E7FA  D7FA               	bra	u5957
  3487  00E7FC  D000               	nop2	
  3488  00E7FE                     
  3489                           ;standbyMode.c: 324: continue;
  3490  00E7FE  A281               	btfss	3969,1,c	;volatile
  3491  00E800  D7FE               	goto	l234
  3492                           
  3493                           ;standbyMode.c: 325: }
  3494                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3495  00E802  0E01               	movlw	1
  3496  00E804  ECB8  F06E         	call	_lcdInst
  3497  00E808  0EC3               	movlw	195
  3498  00E80A  6E1B               	movwf	??_viewLogs& (0+255),c
  3499  00E80C  0ECD               	movlw	205
  3500  00E80E                     u5967:
  3501  00E80E  2EE8               	decfsz	wreg,f,c
  3502  00E810  D7FE               	bra	u5967
  3503  00E812  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3504  00E814  D7FC               	bra	u5967
  3505  00E816  F000               	nop	
  3506                           
  3507                           ;standbyMode.c: 328: printf("Remaining pieces:");
  3508  00E818  0EE9               	movlw	low STR_12
  3509  00E81A  6E0D               	movwf	printf@f,c
  3510  00E81C  0EFD               	movlw	high STR_12
  3511  00E81E  6E0E               	movwf	printf@f+1,c
  3512  00E820  EC72  F070         	call	_printf	;wreg free
  3513                           
  3514                           ;standbyMode.c: 329: lcdInst(0xC0);;
  3515  00E824  0EC0               	movlw	192
  3516  00E826  ECB8  F06E         	call	_lcdInst
  3517                           
  3518                           ;standbyMode.c: 330: printf("R:3  F:12  L:10");
  3519  00E82A  0E5F               	movlw	low STR_13
  3520  00E82C  6E0D               	movwf	printf@f,c
  3521  00E82E  0EFE               	movlw	high STR_13
  3522  00E830  6E0E               	movwf	printf@f+1,c
  3523  00E832  EC72  F070         	call	_printf	;wreg free
  3524                           
  3525                           ;standbyMode.c: 331: _delay((unsigned long)((500)*(40000000/4000.0)));
  3526  00E836  0E1A               	movlw	26
  3527  00E838  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3528  00E83A  0E5E               	movlw	94
  3529  00E83C  6E1B               	movwf	??_viewLogs& (0+255),c
  3530  00E83E  0E6E               	movlw	110
  3531  00E840                     u5977:
  3532  00E840  2EE8               	decfsz	wreg,f,c
  3533  00E842  D7FE               	bra	u5977
  3534  00E844  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3535  00E846  D7FC               	bra	u5977
  3536  00E848  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3537  00E84A  D7FA               	bra	u5977
  3538  00E84C  D000               	nop2	
  3539  00E84E                     
  3540                           ;standbyMode.c: 334: continue;
  3541  00E84E  A281               	btfss	3969,1,c	;volatile
  3542  00E850  D7FE               	goto	l237
  3543                           
  3544                           ;standbyMode.c: 335: }
  3545                           ;standbyMode.c: 337: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3546  00E852  0E01               	movlw	1
  3547  00E854  ECB8  F06E         	call	_lcdInst
  3548  00E858  0EC3               	movlw	195
  3549  00E85A  6E1B               	movwf	??_viewLogs& (0+255),c
  3550  00E85C  0ECD               	movlw	205
  3551  00E85E                     u5987:
  3552  00E85E  2EE8               	decfsz	wreg,f,c
  3553  00E860  D7FE               	bra	u5987
  3554  00E862  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3555  00E864  D7FC               	bra	u5987
  3556  00E866  F000               	nop	
  3557                           
  3558                           ;standbyMode.c: 338: printf("Drawer Summary:");
  3559  00E868  0EAF               	movlw	low STR_14
  3560  00E86A  6E0D               	movwf	printf@f,c
  3561  00E86C  0EFE               	movlw	high STR_14
  3562  00E86E  6E0E               	movwf	printf@f+1,c
  3563  00E870  EC72  F070         	call	_printf	;wreg free
  3564                           
  3565                           ;standbyMode.c: 339: _delay((unsigned long)((500)*(40000000/4000.0)));
  3566  00E874  0E1A               	movlw	26
  3567  00E876  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3568  00E878  0E5E               	movlw	94
  3569  00E87A  6E1B               	movwf	??_viewLogs& (0+255),c
  3570  00E87C  0E6E               	movlw	110
  3571  00E87E                     u5997:
  3572  00E87E  2EE8               	decfsz	wreg,f,c
  3573  00E880  D7FE               	bra	u5997
  3574  00E882  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3575  00E884  D7FC               	bra	u5997
  3576  00E886  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3577  00E888  D7FA               	bra	u5997
  3578  00E88A  D000               	nop2	
  3579  00E88C                     
  3580                           ;standbyMode.c: 342: continue;
  3581  00E88C  A281               	btfss	3969,1,c	;volatile
  3582  00E88E  D7FE               	goto	l240
  3583                           
  3584                           ;standbyMode.c: 343: }
  3585                           ;standbyMode.c: 345: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3586  00E890  0E01               	movlw	1
  3587  00E892  ECB8  F06E         	call	_lcdInst
  3588  00E896  0EC3               	movlw	195
  3589  00E898  6E1B               	movwf	??_viewLogs& (0+255),c
  3590  00E89A  0ECD               	movlw	205
  3591  00E89C                     u6007:
  3592  00E89C  2EE8               	decfsz	wreg,f,c
  3593  00E89E  D7FE               	bra	u6007
  3594  00E8A0  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3595  00E8A2  D7FC               	bra	u6007
  3596  00E8A4  F000               	nop	
  3597                           
  3598                           ;standbyMode.c: 346: printf("Drawer 1: RF12");
  3599  00E8A6  0EFF               	movlw	low STR_15
  3600  00E8A8  6E0D               	movwf	printf@f,c
  3601  00E8AA  0EFE               	movlw	high STR_15
  3602  00E8AC  6E0E               	movwf	printf@f+1,c
  3603  00E8AE  EC72  F070         	call	_printf	;wreg free
  3604                           
  3605                           ;standbyMode.c: 347: lcdInst(0xC0);;
  3606  00E8B2  0EC0               	movlw	192
  3607  00E8B4  ECB8  F06E         	call	_lcdInst
  3608                           
  3609                           ;standbyMode.c: 348: printf("Drawer 2: L1");
  3610  00E8B8  0E63               	movlw	low STR_16
  3611  00E8BA  6E0D               	movwf	printf@f,c
  3612  00E8BC  0EFF               	movlw	high STR_16
  3613  00E8BE  6E0E               	movwf	printf@f+1,c
  3614  00E8C0  EC72  F070         	call	_printf	;wreg free
  3615                           
  3616                           ;standbyMode.c: 349: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3617  00E8C4  0E66               	movlw	102
  3618  00E8C6  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3619  00E8C8  0E76               	movlw	118
  3620  00E8CA  6E1B               	movwf	??_viewLogs& (0+255),c
  3621  00E8CC  0EC1               	movlw	193
  3622  00E8CE                     u6017:
  3623  00E8CE  2EE8               	decfsz	wreg,f,c
  3624  00E8D0  D7FE               	bra	u6017
  3625  00E8D2  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3626  00E8D4  D7FC               	bra	u6017
  3627  00E8D6  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3628  00E8D8  D7FA               	bra	u6017
  3629  00E8DA  F000               	nop	
  3630                           
  3631                           ;standbyMode.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3632  00E8DC  0E01               	movlw	1
  3633  00E8DE  ECB8  F06E         	call	_lcdInst
  3634  00E8E2  0EC3               	movlw	195
  3635  00E8E4  6E1B               	movwf	??_viewLogs& (0+255),c
  3636  00E8E6  0ECD               	movlw	205
  3637  00E8E8                     u6027:
  3638  00E8E8  2EE8               	decfsz	wreg,f,c
  3639  00E8EA  D7FE               	bra	u6027
  3640  00E8EC  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3641  00E8EE  D7FC               	bra	u6027
  3642  00E8F0  F000               	nop	
  3643                           
  3644                           ;standbyMode.c: 352: printf("Another log?");
  3645  00E8F2  0E7D               	movlw	low STR_17
  3646  00E8F4  6E0D               	movwf	printf@f,c
  3647  00E8F6  0EFF               	movlw	high STR_17
  3648  00E8F8  6E0E               	movwf	printf@f+1,c
  3649  00E8FA  EC72  F070         	call	_printf	;wreg free
  3650                           
  3651                           ;standbyMode.c: 353: lcdInst(0xC0);;
  3652  00E8FE  0EC0               	movlw	192
  3653  00E900  ECB8  F06E         	call	_lcdInst
  3654                           
  3655                           ;standbyMode.c: 354: printf("# = Yes, D = No");
  3656  00E904  0ECF               	movlw	low STR_18
  3657  00E906  6E0D               	movwf	printf@f,c
  3658  00E908  0EFE               	movlw	high STR_18
  3659  00E90A  6E0E               	movwf	printf@f+1,c
  3660  00E90C  EC72  F070         	call	_printf	;wreg free
  3661  00E910  A281               	btfss	3969,1,c	;volatile
  3662  00E912  D7FE               	goto	l243
  3663                           
  3664                           ;standbyMode.c: 357: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  3665  00E914  3881               	swapf	3969,w,c	;volatile
  3666  00E916  0B0F               	andlw	15
  3667  00E918  0B0F               	andlw	15
  3668  00E91A  6E1D               	movwf	viewLogs@keypress3,c
  3669  00E91C  B281               	btfsc	3969,1,c	;volatile
  3670  00E91E  D7FE               	goto	l246
  3671                           
  3672                           ;standbyMode.c: 359: return keypress3;
  3673  00E920  C01D  F019         	movff	viewLogs@keypress3,?_viewLogs
  3674  00E924  6A1A               	clrf	?_viewLogs+1,c
  3675  00E926  0012               	return		;funcret
  3676  00E928                     __end_of_viewLogs:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           postinc0	equ	0xFEE
  3685                           wreg	equ	0xFE8
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _food_press *****************
  3693 ;; Defined at:
  3694 ;;		line 469 in file "standbyMode.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  dietSum         2   24[COMRAM] unsigned int 
  3697 ;;  drawer          2   26[COMRAM] unsigned int 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  keypress        1   46[COMRAM] unsigned char 
  3700 ;;  foodTable       8   38[COMRAM] unsigned int [4]
  3701 ;;  count           2   36[COMRAM] unsigned int 
  3702 ;;  isValid         2   34[COMRAM] unsigned int 
  3703 ;;  backCheck       2   32[COMRAM] unsigned int 
  3704 ;;  tally           2   30[COMRAM] unsigned int 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  2   24[COMRAM] unsigned int 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;Total ram usage:       23 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    3
  3721 ;; This function calls:
  3722 ;;		_check_food
  3723 ;;		_get_digits
  3724 ;;		_lcdInst
  3725 ;;		_printf
  3726 ;;		_putch
  3727 ;; This function is called by:
  3728 ;;		_standbyMode
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text5
  3733  00E202                     __ptext5:
  3734                           	opt stack 0
  3735  00E202                     _food_press:
  3736                           	opt stack 26
  3737                           
  3738                           ;incstack = 0
  3739                           ;standbyMode.c: 471: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  3740  00E202  0E01               	movlw	1
  3741  00E204  ECB8  F06E         	call	_lcdInst
  3742  00E208  0EC3               	movlw	195
  3743  00E20A  6E1D               	movwf	??_food_press& (0+255),c
  3744  00E20C  0ECD               	movlw	205
  3745  00E20E                     u6037:
  3746  00E20E  2EE8               	decfsz	wreg,f,c
  3747  00E210  D7FE               	bra	u6037
  3748  00E212  2E1D               	decfsz	??_food_press& (0+255),f,c
  3749  00E214  D7FC               	bra	u6037
  3750  00E216  F000               	nop	
  3751                           
  3752                           ;standbyMode.c: 472: printf("Drawer %i food:", drawer);
  3753  00E218  0E6F               	movlw	low STR_19
  3754  00E21A  6E0D               	movwf	printf@f,c
  3755  00E21C  0EFE               	movlw	high STR_19
  3756  00E21E  6E0E               	movwf	printf@f+1,c
  3757  00E220  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3758  00E224  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3759  00E228  EC72  F070         	call	_printf	;wreg free
  3760                           
  3761                           ;standbyMode.c: 473: lcdInst(0xC0);;
  3762  00E22C  0EC0               	movlw	192
  3763  00E22E  ECB8  F06E         	call	_lcdInst
  3764                           
  3765                           ;standbyMode.c: 475: unsigned int tally = 0;
  3766  00E232  0E00               	movlw	0
  3767  00E234  6E20               	movwf	food_press@tally+1,c
  3768  00E236  0E00               	movlw	0
  3769  00E238  6E1F               	movwf	food_press@tally,c
  3770                           
  3771                           ;standbyMode.c: 476: unsigned int count = 0;
  3772  00E23A  0E00               	movlw	0
  3773  00E23C  6E26               	movwf	food_press@count+1,c
  3774  00E23E  0E00               	movlw	0
  3775  00E240  6E25               	movwf	food_press@count,c
  3776                           
  3777                           ;standbyMode.c: 477: unsigned int foodTable[4] = {0, 0, 0, 0};
  3778  00E242  EE20  F05E         	lfsr	2,food_press@F3040
  3779  00E246  EE10  F027         	lfsr	1,food_press@foodTable
  3780  00E24A  0E07               	movlw	7
  3781  00E24C                     u3971:
  3782  00E24C  CFDB FFE3          	movff	plusw2,plusw1
  3783  00E250  06E8               	decf	wreg,f,c
  3784  00E252  E2FC               	bc	u3971
  3785                           
  3786                           ;standbyMode.c: 478: unsigned int isValid = 0;
  3787  00E254  0E00               	movlw	0
  3788  00E256  6E24               	movwf	food_press@isValid+1,c
  3789  00E258  0E00               	movlw	0
  3790  00E25A  6E23               	movwf	food_press@isValid,c
  3791                           
  3792                           ;standbyMode.c: 479: unsigned int backCheck = 0;
  3793  00E25C  0E00               	movlw	0
  3794  00E25E  6E22               	movwf	food_press@backCheck+1,c
  3795  00E260  0E00               	movlw	0
  3796  00E262  6E21               	movwf	food_press@backCheck,c
  3797                           
  3798                           ;standbyMode.c: 480: tally = get_digits(dietSum);
  3799  00E264  C019  F001         	movff	food_press@dietSum,get_digits@sum
  3800  00E268  C01A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  3801  00E26C  ECA2  F06F         	call	_get_digits	;wreg free
  3802  00E270  C001  F01F         	movff	?_get_digits,food_press@tally
  3803  00E274  C002  F020         	movff	?_get_digits+1,food_press@tally+1
  3804  00E278                     
  3805                           ;standbyMode.c: 483: while(PORTBbits.RB1 == 0){ continue; }
  3806  00E278  A281               	btfss	3969,1,c	;volatile
  3807  00E27A  D7FE               	goto	l278
  3808                           
  3809                           ;standbyMode.c: 484: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3810  00E27C  3881               	swapf	3969,w,c	;volatile
  3811  00E27E  0B0F               	andlw	15
  3812  00E280  0B0F               	andlw	15
  3813  00E282  6E2F               	movwf	food_press@keypress,c
  3814  00E284  B281               	btfsc	3969,1,c	;volatile
  3815  00E286  D7FE               	goto	l283
  3816                           
  3817                           ;standbyMode.c: 487: if(keypress == 14){
  3818  00E288  0E0E               	movlw	14
  3819  00E28A  182F               	xorwf	food_press@keypress,w,c
  3820  00E28C  B4D8               	btfsc	status,2,c
  3821  00E28E  D06D               	goto	l286
  3822                           
  3823                           ;standbyMode.c: 490: else if (keypress == 15){
  3824                           
  3825                           ;standbyMode.c: 489: }
  3826                           
  3827                           ;standbyMode.c: 488: break;
  3828  00E290  0E0F               	movlw	15
  3829  00E292  182F               	xorwf	food_press@keypress,w,c
  3830  00E294  A4D8               	btfss	status,2,c
  3831  00E296  D005               	goto	l288
  3832                           
  3833                           ;standbyMode.c: 491: backCheck = 1;
  3834  00E298  0E00               	movlw	0
  3835  00E29A  6E22               	movwf	food_press@backCheck+1,c
  3836  00E29C  0E01               	movlw	1
  3837  00E29E  6E21               	movwf	food_press@backCheck,c
  3838                           
  3839                           ;standbyMode.c: 492: break;
  3840  00E2A0  D064               	goto	l286
  3841  00E2A2                     l288:
  3842                           
  3843                           ;standbyMode.c: 494: else if (keypress == 0 || keypress == 1 || keypress == 2){
  3844  00E2A2  502F               	movf	food_press@keypress,w,c
  3845  00E2A4  B4D8               	btfsc	status,2,c
  3846  00E2A6  D007               	goto	u4040
  3847  00E2A8  042F               	decf	food_press@keypress,w,c
  3848  00E2AA  B4D8               	btfsc	status,2,c
  3849  00E2AC  D004               	goto	u4040
  3850  00E2AE  0E02               	movlw	2
  3851  00E2B0  182F               	xorwf	food_press@keypress,w,c
  3852  00E2B2  A4D8               	btfss	status,2,c
  3853  00E2B4  D029               	goto	l290
  3854  00E2B6                     u4040:
  3855                           
  3856                           ;standbyMode.c: 495: if (count < tally){
  3857  00E2B6  501F               	movf	food_press@tally,w,c
  3858  00E2B8  5C25               	subwf	food_press@count,w,c
  3859  00E2BA  5020               	movf	food_press@tally+1,w,c
  3860  00E2BC  5826               	subwfb	food_press@count+1,w,c
  3861  00E2BE  B0D8               	btfsc	status,0,c
  3862  00E2C0  D7DB               	goto	l278
  3863                           
  3864                           ;standbyMode.c: 496: putch(input[keypress]);
  3865  00E2C2  502F               	movf	food_press@keypress,w,c
  3866  00E2C4  0D01               	mullw	1
  3867  00E2C6  0EC8               	movlw	low _input
  3868  00E2C8  24F3               	addwf	prodl,w,c
  3869  00E2CA  6EF6               	movwf	tblptrl,c
  3870  00E2CC  0EFD               	movlw	high _input
  3871  00E2CE  20F4               	addwfc	prodh,w,c
  3872  00E2D0  6EF7               	movwf	tblptrh,c
  3873  00E2D2                     	if	0	;There are less than 3 active tblptr bytes
  3874  00E2D2                     	endif
  3875  00E2D2  0008               	tblrd		*
  3876  00E2D4  50F5               	movf	tablat,w,c
  3877  00E2D6  ECC2  F06E         	call	_putch
  3878                           
  3879                           ;standbyMode.c: 497: foodTable[count] = keypress + 1;
  3880  00E2DA  502F               	movf	food_press@keypress,w,c
  3881  00E2DC  6E1D               	movwf	??_food_press& (0+255),c
  3882  00E2DE  6A1E               	clrf	(??_food_press+1)& (0+255),c
  3883  00E2E0  0E01               	movlw	1
  3884  00E2E2  261D               	addwf	??_food_press,f,c
  3885  00E2E4  0E00               	movlw	0
  3886  00E2E6  221E               	addwfc	??_food_press+1,f,c
  3887  00E2E8  90D8               	bcf	status,0,c
  3888  00E2EA  3425               	rlcf	food_press@count,w,c
  3889  00E2EC  6ED9               	movwf	fsr2l,c
  3890  00E2EE  3426               	rlcf	food_press@count+1,w,c
  3891  00E2F0  6EDA               	movwf	fsr2h,c
  3892  00E2F2  0E27               	movlw	low food_press@foodTable
  3893  00E2F4  26D9               	addwf	fsr2l,f,c
  3894  00E2F6  0E00               	movlw	high food_press@foodTable
  3895  00E2F8  22DA               	addwfc	fsr2h,f,c
  3896  00E2FA  C01D  FFDE         	movff	??_food_press,postinc2
  3897  00E2FE  C01E  FFDD         	movff	??_food_press+1,postdec2
  3898                           
  3899                           ;standbyMode.c: 498: count += 1;
  3900  00E302  4A25               	infsnz	food_press@count,f,c
  3901  00E304  2A26               	incf	food_press@count+1,f,c
  3902                           
  3903                           ;standbyMode.c: 499: }
  3904                           ;standbyMode.c: 500: }
  3905  00E306  D7B8               	goto	l278
  3906  00E308                     l290:
  3907                           
  3908                           ;standbyMode.c: 501: else if (keypress == 12){
  3909  00E308  0E0C               	movlw	12
  3910  00E30A  182F               	xorwf	food_press@keypress,w,c
  3911  00E30C  A4D8               	btfss	status,2,c
  3912  00E30E  D7B4               	goto	l278
  3913                           
  3914                           ;standbyMode.c: 502: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3915  00E310  0E01               	movlw	1
  3916  00E312  ECB8  F06E         	call	_lcdInst
  3917  00E316  0EC3               	movlw	195
  3918  00E318  6E1D               	movwf	??_food_press& (0+255),c
  3919  00E31A  0ECD               	movlw	205
  3920  00E31C                     u6047:
  3921  00E31C  2EE8               	decfsz	wreg,f,c
  3922  00E31E  D7FE               	bra	u6047
  3923  00E320  2E1D               	decfsz	??_food_press& (0+255),f,c
  3924  00E322  D7FC               	bra	u6047
  3925  00E324  F000               	nop	
  3926                           
  3927                           ;standbyMode.c: 503: printf("Drawer %i food:", drawer);
  3928  00E326  0E6F               	movlw	low STR_19
  3929  00E328  6E0D               	movwf	printf@f,c
  3930  00E32A  0EFE               	movlw	high STR_19
  3931  00E32C  6E0E               	movwf	printf@f+1,c
  3932  00E32E  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3933  00E332  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3934  00E336  EC72  F070         	call	_printf	;wreg free
  3935                           
  3936                           ;standbyMode.c: 504: lcdInst(0xC0);;
  3937  00E33A  0EC0               	movlw	192
  3938  00E33C  ECB8  F06E         	call	_lcdInst
  3939                           
  3940                           ;standbyMode.c: 505: count = 0;
  3941  00E340  0E00               	movlw	0
  3942  00E342  6E26               	movwf	food_press@count+1,c
  3943  00E344  0E00               	movlw	0
  3944  00E346  6E25               	movwf	food_press@count,c
  3945                           
  3946                           ;standbyMode.c: 506: foodTable[0] = 0;
  3947  00E348  0E00               	movlw	0
  3948  00E34A  6E28               	movwf	food_press@foodTable+1,c
  3949  00E34C  0E00               	movlw	0
  3950  00E34E  6E27               	movwf	food_press@foodTable,c
  3951                           
  3952                           ;standbyMode.c: 507: foodTable[1] = 0;
  3953  00E350  0E00               	movlw	0
  3954  00E352  6E2A               	movwf	food_press@foodTable+3,c
  3955  00E354  0E00               	movlw	0
  3956  00E356  6E29               	movwf	food_press@foodTable+2,c
  3957                           
  3958                           ;standbyMode.c: 508: foodTable[2] = 0;
  3959  00E358  0E00               	movlw	0
  3960  00E35A  6E2C               	movwf	food_press@foodTable+5,c
  3961  00E35C  0E00               	movlw	0
  3962  00E35E  6E2B               	movwf	food_press@foodTable+4,c
  3963                           
  3964                           ;standbyMode.c: 509: foodTable[3] = 0;
  3965  00E360  0E00               	movlw	0
  3966  00E362  6E2E               	movwf	food_press@foodTable+7,c
  3967  00E364  0E00               	movlw	0
  3968  00E366  6E2D               	movwf	food_press@foodTable+6,c
  3969  00E368  D787               	goto	l278
  3970  00E36A                     l286:
  3971                           
  3972                           ;standbyMode.c: 510: }
  3973                           ;standbyMode.c: 511: }
  3974                           ;standbyMode.c: 513: if (backCheck == 1){
  3975  00E36A  0421               	decf	food_press@backCheck,w,c
  3976  00E36C  1022               	iorwf	food_press@backCheck+1,w,c
  3977  00E36E  A4D8               	btfss	status,2,c
  3978  00E370  D005               	goto	l297
  3979                           
  3980                           ;standbyMode.c: 514: return 100;
  3981  00E372  0E00               	movlw	0
  3982  00E374  6E1A               	movwf	?_food_press+1,c
  3983  00E376  0E64               	movlw	100
  3984  00E378  6E19               	movwf	?_food_press,c
  3985                           
  3986                           ;standbyMode.c: 515: }
  3987  00E37A  0012               	return	
  3988  00E37C                     l297:
  3989                           
  3990                           ;standbyMode.c: 516: else {
  3991                           ;standbyMode.c: 517: isValid = check_food(dietSum, foodTable);
  3992  00E37C  C019  F001         	movff	food_press@dietSum,check_food@sum
  3993  00E380  C01A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  3994  00E384  0E27               	movlw	low food_press@foodTable
  3995  00E386  6E03               	movwf	check_food@foodInput,c
  3996  00E388  0E00               	movlw	high food_press@foodTable
  3997  00E38A  6E04               	movwf	check_food@foodInput+1,c
  3998  00E38C  ECE4  F07A         	call	_check_food	;wreg free
  3999  00E390  C001  F023         	movff	?_check_food,food_press@isValid
  4000  00E394  C002  F024         	movff	?_check_food+1,food_press@isValid+1
  4001                           
  4002                           ;standbyMode.c: 519: if (isValid == 0){
  4003  00E398  5023               	movf	food_press@isValid,w,c
  4004  00E39A  1024               	iorwf	food_press@isValid+1,w,c
  4005  00E39C  A4D8               	btfss	status,2,c
  4006  00E39E  D026               	goto	l300
  4007                           
  4008                           ;standbyMode.c: 520: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4009  00E3A0  0E01               	movlw	1
  4010  00E3A2  ECB8  F06E         	call	_lcdInst
  4011  00E3A6  0EC3               	movlw	195
  4012  00E3A8  6E1D               	movwf	??_food_press& (0+255),c
  4013  00E3AA  0ECD               	movlw	205
  4014  00E3AC                     u6057:
  4015  00E3AC  2EE8               	decfsz	wreg,f,c
  4016  00E3AE  D7FE               	bra	u6057
  4017  00E3B0  2E1D               	decfsz	??_food_press& (0+255),f,c
  4018  00E3B2  D7FC               	bra	u6057
  4019  00E3B4  F000               	nop	
  4020                           
  4021                           ;standbyMode.c: 521: printf("Invalid food!");
  4022  00E3B6  0E2C               	movlw	low STR_21
  4023  00E3B8  6E0D               	movwf	printf@f,c
  4024  00E3BA  0EFF               	movlw	high STR_21
  4025  00E3BC  6E0E               	movwf	printf@f+1,c
  4026  00E3BE  EC72  F070         	call	_printf	;wreg free
  4027                           
  4028                           ;standbyMode.c: 522: lcdInst(0xC0);;
  4029  00E3C2  0EC0               	movlw	192
  4030  00E3C4  ECB8  F06E         	call	_lcdInst
  4031                           
  4032                           ;standbyMode.c: 523: printf("Try again.");
  4033  00E3C8  0EAB               	movlw	low STR_22
  4034  00E3CA  6E0D               	movwf	printf@f,c
  4035  00E3CC  0EFF               	movlw	high STR_22
  4036  00E3CE  6E0E               	movwf	printf@f+1,c
  4037  00E3D0  EC72  F070         	call	_printf	;wreg free
  4038                           
  4039                           ;standbyMode.c: 524: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4040  00E3D4  0E33               	movlw	51
  4041  00E3D6  6E1E               	movwf	(??_food_press+1)& (0+255),c
  4042  00E3D8  0EBB               	movlw	187
  4043  00E3DA  6E1D               	movwf	??_food_press& (0+255),c
  4044  00E3DC  0EE0               	movlw	224
  4045  00E3DE                     u6067:
  4046  00E3DE  2EE8               	decfsz	wreg,f,c
  4047  00E3E0  D7FE               	bra	u6067
  4048  00E3E2  2E1D               	decfsz	??_food_press& (0+255),f,c
  4049  00E3E4  D7FC               	bra	u6067
  4050  00E3E6  2E1E               	decfsz	(??_food_press+1)& (0+255),f,c
  4051  00E3E8  D7FA               	bra	u6067
  4052                           
  4053                           ;standbyMode.c: 525: goto START;
  4054  00E3EA  D70B               	goto	_food_press
  4055  00E3EC                     l300:
  4056                           
  4057                           ;standbyMode.c: 527: else {
  4058                           ;standbyMode.c: 528: return isValid;
  4059  00E3EC  C023  F019         	movff	food_press@isValid,?_food_press
  4060  00E3F0  C024  F01A         	movff	food_press@isValid+1,?_food_press+1
  4061  00E3F4  0012               	return	
  4062  00E3F6                     __end_of_food_press:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           plusw1	equ	0xFE3
  4073                           postinc2	equ	0xFDE
  4074                           postdec2	equ	0xFDD
  4075                           plusw2	equ	0xFDB
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _get_digits *****************
  4081 ;; Defined at:
  4082 ;;		line 364 in file "standbyMode.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  sum             2    0[COMRAM] unsigned int 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  count           2    4[COMRAM] unsigned int 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  2    0[COMRAM] unsigned int 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;Total ram usage:        6 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_food_press
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text6
  4110  00DF44                     __ptext6:
  4111                           	opt stack 0
  4112  00DF44                     _get_digits:
  4113                           	opt stack 28
  4114                           
  4115                           ;standbyMode.c: 366: unsigned int count = 0;
  4116                           
  4117                           ;incstack = 0
  4118  00DF44  0E00               	movlw	0
  4119  00DF46  6E06               	movwf	get_digits@count+1,c
  4120  00DF48  0E00               	movlw	0
  4121  00DF4A  6E05               	movwf	get_digits@count,c
  4122                           
  4123                           ;standbyMode.c: 368: switch(sum){
  4124  00DF4C  D015               	goto	l251
  4125  00DF4E                     
  4126                           ;standbyMode.c: 381: count = 1;
  4127                           
  4128                           ;standbyMode.c: 380: case 12:
  4129                           
  4130                           ;standbyMode.c: 377: break;
  4131                           
  4132                           ;standbyMode.c: 376: count = 1;
  4133                           
  4134                           ;standbyMode.c: 375: case 7:
  4135                           
  4136                           ;standbyMode.c: 372: break;
  4137                           
  4138                           ;standbyMode.c: 371: count = 1;
  4139  00DF4E  0E00               	movlw	0
  4140  00DF50  6E06               	movwf	get_digits@count+1,c
  4141  00DF52  0E01               	movlw	1
  4142  00DF54                     L15:
  4143  00DF54  6E05               	movwf	get_digits@count,c
  4144                           
  4145                           ;standbyMode.c: 387: break;
  4146  00DF56  D050               	goto	l253
  4147  00DF58                     
  4148                           ;standbyMode.c: 396: count = 2;
  4149                           
  4150                           ;standbyMode.c: 395: case 19:
  4151                           
  4152                           ;standbyMode.c: 392: break;
  4153                           
  4154                           ;standbyMode.c: 391: count = 2;
  4155  00DF58  0E00               	movlw	0
  4156  00DF5A  6E06               	movwf	get_digits@count+1,c
  4157  00DF5C  0E02               	movlw	2
  4158  00DF5E  D7FA               	goto	L15
  4159  00DF60                     
  4160                           ;standbyMode.c: 431: count = 3;
  4161                           
  4162                           ;standbyMode.c: 430: case 31:
  4163                           
  4164                           ;standbyMode.c: 427: break;
  4165                           
  4166                           ;standbyMode.c: 426: count = 3;
  4167                           
  4168                           ;standbyMode.c: 425: case 26:
  4169                           
  4170                           ;standbyMode.c: 422: break;
  4171                           
  4172                           ;standbyMode.c: 421: count = 3;
  4173                           
  4174                           ;standbyMode.c: 420: case 22:
  4175                           
  4176                           ;standbyMode.c: 417: break;
  4177                           
  4178                           ;standbyMode.c: 416: count = 3;
  4179                           
  4180                           ;standbyMode.c: 415: case 27:
  4181                           
  4182                           ;standbyMode.c: 412: break;
  4183                           
  4184                           ;standbyMode.c: 411: count = 3;
  4185                           
  4186                           ;standbyMode.c: 410: case 17:
  4187                           
  4188                           ;standbyMode.c: 407: break;
  4189                           
  4190                           ;standbyMode.c: 406: count = 3;
  4191                           
  4192                           ;standbyMode.c: 405: case 18:
  4193                           
  4194                           ;standbyMode.c: 402: break;
  4195                           
  4196                           ;standbyMode.c: 401: count = 3;
  4197  00DF60  0E00               	movlw	0
  4198  00DF62  6E06               	movwf	get_digits@count+1,c
  4199  00DF64  0E03               	movlw	3
  4200  00DF66  D7F6               	goto	L15
  4201  00DF68                     
  4202                           ;standbyMode.c: 456: count = 4;
  4203                           
  4204                           ;standbyMode.c: 455: case 43:
  4205                           
  4206                           ;standbyMode.c: 452: break;
  4207                           
  4208                           ;standbyMode.c: 451: count = 4;
  4209                           
  4210                           ;standbyMode.c: 450: case 39:
  4211                           
  4212                           ;standbyMode.c: 447: break;
  4213                           
  4214                           ;standbyMode.c: 446: count = 4;
  4215                           
  4216                           ;standbyMode.c: 445: case 34:
  4217                           
  4218                           ;standbyMode.c: 442: break;
  4219                           
  4220                           ;standbyMode.c: 441: count = 4;
  4221                           
  4222                           ;standbyMode.c: 440: case 29:
  4223                           
  4224                           ;standbyMode.c: 437: break;
  4225                           
  4226                           ;standbyMode.c: 436: count = 4;
  4227  00DF68  0E00               	movlw	0
  4228  00DF6A  6E06               	movwf	get_digits@count+1,c
  4229  00DF6C  0E04               	movlw	4
  4230  00DF6E  D7F2               	goto	L15
  4231  00DF70                     
  4232                           ;standbyMode.c: 461: count = 0;
  4233  00DF70  0E00               	movlw	0
  4234  00DF72  6E06               	movwf	get_digits@count+1,c
  4235  00DF74  0E00               	movlw	0
  4236  00DF76  D7EE               	goto	L15
  4237  00DF78                     l251:
  4238  00DF78  C001  F003         	movff	get_digits@sum,??_get_digits
  4239  00DF7C  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  4240                           
  4241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 1, Range of values is 0 to 0
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte            4     3 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  00DF80  5004               	movf	??_get_digits+1,w,c
  4249  00DF82  0A00               	xorlw	0	; case 0
  4250  00DF84  A4D8               	btfss	status,2,c
  4251  00DF86  D7F4               	goto	l271
  4252                           
  4253                           ; Switch size 1, requested type "space"
  4254                           ; Number of cases is 18, Range of values is 3 to 43
  4255                           ; switch strategies available:
  4256                           ; Name         Instructions Cycles
  4257                           ; simple_byte           55    28 (average)
  4258                           ;	Chosen strategy is simple_byte
  4259  00DF88  5003               	movf	??_get_digits,w,c
  4260  00DF8A  0A03               	xorlw	3	; case 3
  4261  00DF8C  B4D8               	btfsc	status,2,c
  4262  00DF8E  D7DF               	goto	l252
  4263  00DF90  0A04               	xorlw	4	; case 7
  4264  00DF92  B4D8               	btfsc	status,2,c
  4265  00DF94  D7DC               	goto	l252
  4266  00DF96  0A0D               	xorlw	13	; case 10
  4267  00DF98  B4D8               	btfsc	status,2,c
  4268  00DF9A  D7DE               	goto	l257
  4269  00DF9C  0A06               	xorlw	6	; case 12
  4270  00DF9E  B4D8               	btfsc	status,2,c
  4271  00DFA0  D7D6               	goto	l252
  4272  00DFA2  0A01               	xorlw	1	; case 13
  4273  00DFA4  B4D8               	btfsc	status,2,c
  4274  00DFA6  D7DC               	goto	l259
  4275  00DFA8  0A02               	xorlw	2	; case 15
  4276  00DFAA  B4D8               	btfsc	status,2,c
  4277  00DFAC  D7D5               	goto	l257
  4278  00DFAE  0A1E               	xorlw	30	; case 17
  4279  00DFB0  B4D8               	btfsc	status,2,c
  4280  00DFB2  D7D6               	goto	l259
  4281  00DFB4  0A03               	xorlw	3	; case 18
  4282  00DFB6  B4D8               	btfsc	status,2,c
  4283  00DFB8  D7D3               	goto	l259
  4284  00DFBA  0A01               	xorlw	1	; case 19
  4285  00DFBC  B4D8               	btfsc	status,2,c
  4286  00DFBE  D7CC               	goto	l257
  4287  00DFC0  0A05               	xorlw	5	; case 22
  4288  00DFC2  B4D8               	btfsc	status,2,c
  4289  00DFC4  D7CD               	goto	l259
  4290  00DFC6  0A0F               	xorlw	15	; case 25
  4291  00DFC8  B4D8               	btfsc	status,2,c
  4292  00DFCA  D7CE               	goto	l266
  4293  00DFCC  0A03               	xorlw	3	; case 26
  4294  00DFCE  B4D8               	btfsc	status,2,c
  4295  00DFD0  D7C7               	goto	l259
  4296  00DFD2  0A01               	xorlw	1	; case 27
  4297  00DFD4  B4D8               	btfsc	status,2,c
  4298  00DFD6  D7C4               	goto	l259
  4299  00DFD8  0A06               	xorlw	6	; case 29
  4300  00DFDA  B4D8               	btfsc	status,2,c
  4301  00DFDC  D7C5               	goto	l266
  4302  00DFDE  0A02               	xorlw	2	; case 31
  4303  00DFE0  B4D8               	btfsc	status,2,c
  4304  00DFE2  D7BE               	goto	l259
  4305  00DFE4  0A3D               	xorlw	61	; case 34
  4306  00DFE6  B4D8               	btfsc	status,2,c
  4307  00DFE8  D7BF               	goto	l266
  4308  00DFEA  0A05               	xorlw	5	; case 39
  4309  00DFEC  B4D8               	btfsc	status,2,c
  4310  00DFEE  D7BC               	goto	l266
  4311  00DFF0  0A0C               	xorlw	12	; case 43
  4312  00DFF2  B4D8               	btfsc	status,2,c
  4313  00DFF4  D7B9               	goto	l266
  4314  00DFF6  D7BC               	goto	l271
  4315  00DFF8                     l253:
  4316                           
  4317                           ;standbyMode.c: 464: return count;
  4318  00DFF8  C005  F001         	movff	get_digits@count,?_get_digits
  4319  00DFFC  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  4320  00E000  0012               	return		;funcret
  4321  00E002                     __end_of_get_digits:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           plusw1	equ	0xFE3
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           plusw2	equ	0xFDB
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _check_food *****************
  4340 ;; Defined at:
  4341 ;;		line 87 in file "standbyMode.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  sum             2    0[COMRAM] unsigned int 
  4344 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  4345 ;;		 -> food_press@foodTable(8), 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  returnValue     2    6[COMRAM] unsigned int 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  2    0[COMRAM] unsigned int 
  4350 ;; Registers used:
  4351 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;Total ram usage:        8 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_food_press
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text7
  4371  00F5C8                     __ptext7:
  4372                           	opt stack 0
  4373  00F5C8                     _check_food:
  4374                           	opt stack 28
  4375                           
  4376                           ;standbyMode.c: 89: unsigned int returnValue = 0;
  4377                           
  4378                           ;incstack = 0
  4379  00F5C8  0E00               	movlw	0
  4380  00F5CA  6E08               	movwf	check_food@returnValue+1,c
  4381  00F5CC  0E00               	movlw	0
  4382  00F5CE  6E07               	movwf	check_food@returnValue,c
  4383                           
  4384                           ;standbyMode.c: 91: switch(sum){
  4385  00F5D0  D3AE               	goto	l131
  4386  00F5D2                     
  4387                           ;standbyMode.c: 94: if (foodInput[0] == 1 || foodInput[0] == 2){
  4388  00F5D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4389  00F5D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4390  00F5DA  04DE               	decf	postinc2,w,c
  4391  00F5DC  10DE               	iorwf	postinc2,w,c
  4392  00F5DE  B4D8               	btfsc	status,2,c
  4393  00F5E0  D009               	goto	u2850
  4394  00F5E2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4395  00F5E6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4396  00F5EA  0E02               	movlw	2
  4397  00F5EC  18DE               	xorwf	postinc2,w,c
  4398  00F5EE  10DE               	iorwf	postinc2,w,c
  4399  00F5F0  A4D8               	btfss	status,2,c
  4400  00F5F2  D3DC               	goto	l136
  4401  00F5F4                     u2850:
  4402                           
  4403                           ;standbyMode.c: 95: returnValue = 1;
  4404  00F5F4  0E00               	movlw	0
  4405  00F5F6  6E08               	movwf	check_food@returnValue+1,c
  4406  00F5F8  0E01               	movlw	1
  4407  00F5FA  D151               	goto	L24
  4408  00F5FC                     
  4409                           ;standbyMode.c: 101: if (foodInput[0] == 1 || foodInput[0] == 2){
  4410  00F5FC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4411  00F600  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4412  00F604  04DE               	decf	postinc2,w,c
  4413  00F606  10DE               	iorwf	postinc2,w,c
  4414  00F608  B4D8               	btfsc	status,2,c
  4415  00F60A  D009               	goto	u2870
  4416  00F60C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4417  00F610  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4418  00F614  0E02               	movlw	2
  4419  00F616  18DE               	xorwf	postinc2,w,c
  4420  00F618  10DE               	iorwf	postinc2,w,c
  4421  00F61A  A4D8               	btfss	status,2,c
  4422  00F61C  D3C7               	goto	l136
  4423  00F61E                     u2870:
  4424                           
  4425                           ;standbyMode.c: 102: returnValue = 2;
  4426  00F61E  0E00               	movlw	0
  4427  00F620  6E08               	movwf	check_food@returnValue+1,c
  4428  00F622  0E02               	movlw	2
  4429  00F624  D13C               	goto	L24
  4430  00F626                     
  4431                           ;standbyMode.c: 108: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  4432  00F626  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4433  00F62A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4434  00F62E  04DE               	decf	postinc2,w,c
  4435  00F630  10DE               	iorwf	postinc2,w,c
  4436  00F632  B4D8               	btfsc	status,2,c
  4437  00F634  D012               	goto	u2900
  4438  00F636  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4439  00F63A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4440  00F63E  0E02               	movlw	2
  4441  00F640  18DE               	xorwf	postinc2,w,c
  4442  00F642  10DE               	iorwf	postinc2,w,c
  4443  00F644  B4D8               	btfsc	status,2,c
  4444  00F646  D009               	goto	u2900
  4445  00F648  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4446  00F64C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4447  00F650  0E03               	movlw	3
  4448  00F652  18DE               	xorwf	postinc2,w,c
  4449  00F654  10DE               	iorwf	postinc2,w,c
  4450  00F656  A4D8               	btfss	status,2,c
  4451  00F658  D3A9               	goto	l136
  4452  00F65A                     u2900:
  4453                           
  4454                           ;standbyMode.c: 109: returnValue = 3;
  4455  00F65A  0E00               	movlw	0
  4456  00F65C  6E08               	movwf	check_food@returnValue+1,c
  4457  00F65E  0E03               	movlw	3
  4458  00F660  D11E               	goto	L24
  4459  00F662                     
  4460                           ;standbyMode.c: 115: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  4461  00F662  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4462  00F666  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4463  00F66A  0E03               	movlw	3
  4464  00F66C  18DE               	xorwf	postinc2,w,c
  4465  00F66E  10DE               	iorwf	postinc2,w,c
  4466  00F670  B4D8               	btfsc	status,2,c
  4467  00F672  D39C               	goto	l136
  4468  00F674  EE20 F002          	lfsr	2,2
  4469  00F678  5003               	movf	check_food@foodInput,w,c
  4470  00F67A  26D9               	addwf	fsr2l,f,c
  4471  00F67C  5004               	movf	check_food@foodInput+1,w,c
  4472  00F67E  22DA               	addwfc	fsr2h,f,c
  4473  00F680  0E03               	movlw	3
  4474  00F682  18DE               	xorwf	postinc2,w,c
  4475  00F684  10DE               	iorwf	postinc2,w,c
  4476  00F686  B4D8               	btfsc	status,2,c
  4477  00F688  D391               	goto	l136
  4478  00F68A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4479  00F68E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4480  00F692  50DE               	movf	postinc2,w,c
  4481  00F694  10DE               	iorwf	postinc2,w,c
  4482  00F696  B4D8               	btfsc	status,2,c
  4483  00F698  D389               	goto	l136
  4484  00F69A  EE20 F002          	lfsr	2,2
  4485  00F69E  5003               	movf	check_food@foodInput,w,c
  4486  00F6A0  26D9               	addwf	fsr2l,f,c
  4487  00F6A2  5004               	movf	check_food@foodInput+1,w,c
  4488  00F6A4  22DA               	addwfc	fsr2h,f,c
  4489  00F6A6  50DE               	movf	postinc2,w,c
  4490  00F6A8  10DE               	iorwf	postinc2,w,c
  4491  00F6AA  B4D8               	btfsc	status,2,c
  4492  00F6AC  D37F               	goto	l136
  4493                           
  4494                           ;standbyMode.c: 116: returnValue = 4;
  4495  00F6AE  0E00               	movlw	0
  4496  00F6B0  6E08               	movwf	check_food@returnValue+1,c
  4497  00F6B2  0E04               	movlw	4
  4498  00F6B4  D0F4               	goto	L24
  4499  00F6B6                     
  4500                           ;standbyMode.c: 122: if (foodInput[1] == 3){
  4501  00F6B6  EE20 F002          	lfsr	2,2
  4502  00F6BA  5003               	movf	check_food@foodInput,w,c
  4503  00F6BC  26D9               	addwf	fsr2l,f,c
  4504  00F6BE  5004               	movf	check_food@foodInput+1,w,c
  4505  00F6C0  22DA               	addwfc	fsr2h,f,c
  4506  00F6C2  0E03               	movlw	3
  4507  00F6C4  18DE               	xorwf	postinc2,w,c
  4508  00F6C6  10DE               	iorwf	postinc2,w,c
  4509  00F6C8  A4D8               	btfss	status,2,c
  4510  00F6CA  D00C               	goto	l148
  4511                           
  4512                           ;standbyMode.c: 123: if (foodInput[0] == 1){
  4513  00F6CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4514  00F6D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4515  00F6D4  04DE               	decf	postinc2,w,c
  4516  00F6D6  10DE               	iorwf	postinc2,w,c
  4517  00F6D8  A4D8               	btfss	status,2,c
  4518  00F6DA  D368               	goto	l136
  4519                           
  4520                           ;standbyMode.c: 124: returnValue = 5;
  4521  00F6DC  0E00               	movlw	0
  4522  00F6DE  6E08               	movwf	check_food@returnValue+1,c
  4523  00F6E0  0E05               	movlw	5
  4524  00F6E2  D0DD               	goto	L24
  4525  00F6E4                     l148:
  4526                           
  4527                           ;standbyMode.c: 127: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4528  00F6E4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4529  00F6E8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4530  00F6EC  0E03               	movlw	3
  4531  00F6EE  18DE               	xorwf	postinc2,w,c
  4532  00F6F0  10DE               	iorwf	postinc2,w,c
  4533  00F6F2  B4D8               	btfsc	status,2,c
  4534  00F6F4  D35B               	goto	l136
  4535  00F6F6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4536  00F6FA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4537  00F6FE  50DE               	movf	postinc2,w,c
  4538  00F700  10DE               	iorwf	postinc2,w,c
  4539  00F702  B4D8               	btfsc	status,2,c
  4540  00F704  D353               	goto	l136
  4541                           
  4542                           ;standbyMode.c: 128: returnValue = 5;
  4543  00F706  0E00               	movlw	0
  4544  00F708  6E08               	movwf	check_food@returnValue+1,c
  4545  00F70A  0E05               	movlw	5
  4546  00F70C  D0C8               	goto	L24
  4547  00F70E                     
  4548                           ;standbyMode.c: 134: if (foodInput[1] == 3){
  4549  00F70E  EE20 F002          	lfsr	2,2
  4550  00F712  5003               	movf	check_food@foodInput,w,c
  4551  00F714  26D9               	addwf	fsr2l,f,c
  4552  00F716  5004               	movf	check_food@foodInput+1,w,c
  4553  00F718  22DA               	addwfc	fsr2h,f,c
  4554  00F71A  0E03               	movlw	3
  4555  00F71C  18DE               	xorwf	postinc2,w,c
  4556  00F71E  10DE               	iorwf	postinc2,w,c
  4557  00F720  A4D8               	btfss	status,2,c
  4558  00F722  D00C               	goto	l153
  4559                           
  4560                           ;standbyMode.c: 135: if (foodInput[0] == 1){
  4561  00F724  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4562  00F728  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4563  00F72C  04DE               	decf	postinc2,w,c
  4564  00F72E  10DE               	iorwf	postinc2,w,c
  4565  00F730  A4D8               	btfss	status,2,c
  4566  00F732  D33C               	goto	l136
  4567                           
  4568                           ;standbyMode.c: 136: returnValue = 6;
  4569  00F734  0E00               	movlw	0
  4570  00F736  6E08               	movwf	check_food@returnValue+1,c
  4571  00F738  0E06               	movlw	6
  4572  00F73A  D0B1               	goto	L24
  4573  00F73C                     l153:
  4574                           
  4575                           ;standbyMode.c: 139: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4576  00F73C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4577  00F740  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4578  00F744  0E03               	movlw	3
  4579  00F746  18DE               	xorwf	postinc2,w,c
  4580  00F748  10DE               	iorwf	postinc2,w,c
  4581  00F74A  B4D8               	btfsc	status,2,c
  4582  00F74C  D32F               	goto	l136
  4583  00F74E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4584  00F752  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4585  00F756  50DE               	movf	postinc2,w,c
  4586  00F758  10DE               	iorwf	postinc2,w,c
  4587  00F75A  B4D8               	btfsc	status,2,c
  4588  00F75C  D327               	goto	l136
  4589                           
  4590                           ;standbyMode.c: 140: returnValue = 6;
  4591  00F75E  0E00               	movlw	0
  4592  00F760  6E08               	movwf	check_food@returnValue+1,c
  4593  00F762  0E06               	movlw	6
  4594  00F764  D09C               	goto	L24
  4595  00F766                     
  4596                           ;standbyMode.c: 146: if (foodInput[0] == 1 && foodInput[1] == 1){
  4597  00F766  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4598  00F76A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4599  00F76E  04DE               	decf	postinc2,w,c
  4600  00F770  10DE               	iorwf	postinc2,w,c
  4601  00F772  A4D8               	btfss	status,2,c
  4602  00F774  D31B               	goto	l136
  4603  00F776  EE20 F002          	lfsr	2,2
  4604  00F77A  5003               	movf	check_food@foodInput,w,c
  4605  00F77C  26D9               	addwf	fsr2l,f,c
  4606  00F77E  5004               	movf	check_food@foodInput+1,w,c
  4607  00F780  22DA               	addwfc	fsr2h,f,c
  4608  00F782  04DE               	decf	postinc2,w,c
  4609  00F784  10DE               	iorwf	postinc2,w,c
  4610  00F786  A4D8               	btfss	status,2,c
  4611  00F788  D311               	goto	l136
  4612                           
  4613                           ;standbyMode.c: 147: if (foodInput[2] == 1 || foodInput[2] == 2){
  4614  00F78A  EE20 F004          	lfsr	2,4
  4615  00F78E  5003               	movf	check_food@foodInput,w,c
  4616  00F790  26D9               	addwf	fsr2l,f,c
  4617  00F792  5004               	movf	check_food@foodInput+1,w,c
  4618  00F794  22DA               	addwfc	fsr2h,f,c
  4619  00F796  04DE               	decf	postinc2,w,c
  4620  00F798  10DE               	iorwf	postinc2,w,c
  4621  00F79A  B4D8               	btfsc	status,2,c
  4622  00F79C  D00B               	goto	u3060
  4623  00F79E  EE20 F004          	lfsr	2,4
  4624  00F7A2  5003               	movf	check_food@foodInput,w,c
  4625  00F7A4  26D9               	addwf	fsr2l,f,c
  4626  00F7A6  5004               	movf	check_food@foodInput+1,w,c
  4627  00F7A8  22DA               	addwfc	fsr2h,f,c
  4628  00F7AA  0E02               	movlw	2
  4629  00F7AC  18DE               	xorwf	postinc2,w,c
  4630  00F7AE  10DE               	iorwf	postinc2,w,c
  4631  00F7B0  A4D8               	btfss	status,2,c
  4632  00F7B2  D2FC               	goto	l136
  4633  00F7B4                     u3060:
  4634                           
  4635                           ;standbyMode.c: 148: returnValue = 7;
  4636  00F7B4  0E00               	movlw	0
  4637  00F7B6  6E08               	movwf	check_food@returnValue+1,c
  4638  00F7B8  0E07               	movlw	7
  4639  00F7BA  D071               	goto	L24
  4640  00F7BC                     
  4641                           ;standbyMode.c: 155: if (foodInput[0] == 1 && foodInput[1] == 1){
  4642  00F7BC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4643  00F7C0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4644  00F7C4  04DE               	decf	postinc2,w,c
  4645  00F7C6  10DE               	iorwf	postinc2,w,c
  4646  00F7C8  A4D8               	btfss	status,2,c
  4647  00F7CA  D2F0               	goto	l136
  4648  00F7CC  EE20 F002          	lfsr	2,2
  4649  00F7D0  5003               	movf	check_food@foodInput,w,c
  4650  00F7D2  26D9               	addwf	fsr2l,f,c
  4651  00F7D4  5004               	movf	check_food@foodInput+1,w,c
  4652  00F7D6  22DA               	addwfc	fsr2h,f,c
  4653  00F7D8  04DE               	decf	postinc2,w,c
  4654  00F7DA  10DE               	iorwf	postinc2,w,c
  4655  00F7DC  A4D8               	btfss	status,2,c
  4656  00F7DE  D2E6               	goto	l136
  4657                           
  4658                           ;standbyMode.c: 156: if (foodInput[2] == 1 || foodInput[2] == 2){
  4659  00F7E0  EE20 F004          	lfsr	2,4
  4660  00F7E4  5003               	movf	check_food@foodInput,w,c
  4661  00F7E6  26D9               	addwf	fsr2l,f,c
  4662  00F7E8  5004               	movf	check_food@foodInput+1,w,c
  4663  00F7EA  22DA               	addwfc	fsr2h,f,c
  4664  00F7EC  04DE               	decf	postinc2,w,c
  4665  00F7EE  10DE               	iorwf	postinc2,w,c
  4666  00F7F0  B4D8               	btfsc	status,2,c
  4667  00F7F2  D00B               	goto	u3100
  4668  00F7F4  EE20 F004          	lfsr	2,4
  4669  00F7F8  5003               	movf	check_food@foodInput,w,c
  4670  00F7FA  26D9               	addwf	fsr2l,f,c
  4671  00F7FC  5004               	movf	check_food@foodInput+1,w,c
  4672  00F7FE  22DA               	addwfc	fsr2h,f,c
  4673  00F800  0E02               	movlw	2
  4674  00F802  18DE               	xorwf	postinc2,w,c
  4675  00F804  10DE               	iorwf	postinc2,w,c
  4676  00F806  A4D8               	btfss	status,2,c
  4677  00F808  D2D1               	goto	l136
  4678  00F80A                     u3100:
  4679                           
  4680                           ;standbyMode.c: 157: returnValue = 8;
  4681  00F80A  0E00               	movlw	0
  4682  00F80C  6E08               	movwf	check_food@returnValue+1,c
  4683  00F80E  0E08               	movlw	8
  4684  00F810  D046               	goto	L24
  4685  00F812                     
  4686                           ;standbyMode.c: 164: if (foodInput[1] == 1 && foodInput[2] == 1){
  4687  00F812  EE20 F002          	lfsr	2,2
  4688  00F816  5003               	movf	check_food@foodInput,w,c
  4689  00F818  26D9               	addwf	fsr2l,f,c
  4690  00F81A  5004               	movf	check_food@foodInput+1,w,c
  4691  00F81C  22DA               	addwfc	fsr2h,f,c
  4692  00F81E  04DE               	decf	postinc2,w,c
  4693  00F820  10DE               	iorwf	postinc2,w,c
  4694  00F822  A4D8               	btfss	status,2,c
  4695  00F824  D2C3               	goto	l136
  4696  00F826  EE20 F004          	lfsr	2,4
  4697  00F82A  5003               	movf	check_food@foodInput,w,c
  4698  00F82C  26D9               	addwf	fsr2l,f,c
  4699  00F82E  5004               	movf	check_food@foodInput+1,w,c
  4700  00F830  22DA               	addwfc	fsr2h,f,c
  4701  00F832  04DE               	decf	postinc2,w,c
  4702  00F834  10DE               	iorwf	postinc2,w,c
  4703  00F836  A4D8               	btfss	status,2,c
  4704  00F838  D2B9               	goto	l136
  4705                           
  4706                           ;standbyMode.c: 165: if (foodInput[0] == 1 || foodInput[0] == 2){
  4707  00F83A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4708  00F83E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4709  00F842  04DE               	decf	postinc2,w,c
  4710  00F844  10DE               	iorwf	postinc2,w,c
  4711  00F846  B4D8               	btfsc	status,2,c
  4712  00F848  D009               	goto	u3140
  4713  00F84A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4714  00F84E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4715  00F852  0E02               	movlw	2
  4716  00F854  18DE               	xorwf	postinc2,w,c
  4717  00F856  10DE               	iorwf	postinc2,w,c
  4718  00F858  A4D8               	btfss	status,2,c
  4719  00F85A  D2A8               	goto	l136
  4720  00F85C                     u3140:
  4721                           
  4722                           ;standbyMode.c: 166: returnValue = 9;
  4723  00F85C  0E00               	movlw	0
  4724  00F85E  6E08               	movwf	check_food@returnValue+1,c
  4725  00F860  0E09               	movlw	9
  4726  00F862  D01D               	goto	L24
  4727  00F864                     
  4728                           ;standbyMode.c: 173: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4729  00F864  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4730  00F868  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4731  00F86C  04DE               	decf	postinc2,w,c
  4732  00F86E  10DE               	iorwf	postinc2,w,c
  4733  00F870  A4D8               	btfss	status,2,c
  4734  00F872  D017               	goto	l173
  4735  00F874  EE20 F002          	lfsr	2,2
  4736  00F878  5003               	movf	check_food@foodInput,w,c
  4737  00F87A  26D9               	addwf	fsr2l,f,c
  4738  00F87C  5004               	movf	check_food@foodInput+1,w,c
  4739  00F87E  22DA               	addwfc	fsr2h,f,c
  4740  00F880  04DE               	decf	postinc2,w,c
  4741  00F882  10DE               	iorwf	postinc2,w,c
  4742  00F884  A4D8               	btfss	status,2,c
  4743  00F886  D00D               	goto	l173
  4744  00F888  EE20 F004          	lfsr	2,4
  4745  00F88C  5003               	movf	check_food@foodInput,w,c
  4746  00F88E  26D9               	addwf	fsr2l,f,c
  4747  00F890  5004               	movf	check_food@foodInput+1,w,c
  4748  00F892  22DA               	addwfc	fsr2h,f,c
  4749  00F894  04DE               	decf	postinc2,w,c
  4750  00F896  10DE               	iorwf	postinc2,w,c
  4751  00F898  A4D8               	btfss	status,2,c
  4752  00F89A  D003               	goto	l173
  4753  00F89C  D059               	goto	u3260
  4754  00F89E                     L24:
  4755  00F89E  6E07               	movwf	check_food@returnValue,c
  4756                           
  4757                           ;standbyMode.c: 175: }
  4758  00F8A0  D285               	goto	l136
  4759  00F8A2                     l173:
  4760                           
  4761                           ;standbyMode.c: 176: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4762  00F8A2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4763  00F8A6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4764  00F8AA  0E02               	movlw	2
  4765  00F8AC  18DE               	xorwf	postinc2,w,c
  4766  00F8AE  10DE               	iorwf	postinc2,w,c
  4767  00F8B0  A4D8               	btfss	status,2,c
  4768  00F8B2  D014               	goto	l175
  4769  00F8B4  EE20 F002          	lfsr	2,2
  4770  00F8B8  5003               	movf	check_food@foodInput,w,c
  4771  00F8BA  26D9               	addwf	fsr2l,f,c
  4772  00F8BC  5004               	movf	check_food@foodInput+1,w,c
  4773  00F8BE  22DA               	addwfc	fsr2h,f,c
  4774  00F8C0  04DE               	decf	postinc2,w,c
  4775  00F8C2  10DE               	iorwf	postinc2,w,c
  4776  00F8C4  A4D8               	btfss	status,2,c
  4777  00F8C6  D00A               	goto	l175
  4778  00F8C8  EE20 F004          	lfsr	2,4
  4779  00F8CC  5003               	movf	check_food@foodInput,w,c
  4780  00F8CE  26D9               	addwf	fsr2l,f,c
  4781  00F8D0  5004               	movf	check_food@foodInput+1,w,c
  4782  00F8D2  22DA               	addwfc	fsr2h,f,c
  4783  00F8D4  04DE               	decf	postinc2,w,c
  4784  00F8D6  10DE               	iorwf	postinc2,w,c
  4785  00F8D8  B4D8               	btfsc	status,2,c
  4786  00F8DA  D03A               	goto	u3260
  4787  00F8DC                     l175:
  4788                           
  4789                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4790  00F8DC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4791  00F8E0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4792  00F8E4  04DE               	decf	postinc2,w,c
  4793  00F8E6  10DE               	iorwf	postinc2,w,c
  4794  00F8E8  A4D8               	btfss	status,2,c
  4795  00F8EA  D015               	goto	l177
  4796  00F8EC  EE20 F002          	lfsr	2,2
  4797  00F8F0  5003               	movf	check_food@foodInput,w,c
  4798  00F8F2  26D9               	addwf	fsr2l,f,c
  4799  00F8F4  5004               	movf	check_food@foodInput+1,w,c
  4800  00F8F6  22DA               	addwfc	fsr2h,f,c
  4801  00F8F8  0E02               	movlw	2
  4802  00F8FA  18DE               	xorwf	postinc2,w,c
  4803  00F8FC  10DE               	iorwf	postinc2,w,c
  4804  00F8FE  A4D8               	btfss	status,2,c
  4805  00F900  D00A               	goto	l177
  4806  00F902  EE20 F004          	lfsr	2,4
  4807  00F906  5003               	movf	check_food@foodInput,w,c
  4808  00F908  26D9               	addwf	fsr2l,f,c
  4809  00F90A  5004               	movf	check_food@foodInput+1,w,c
  4810  00F90C  22DA               	addwfc	fsr2h,f,c
  4811  00F90E  04DE               	decf	postinc2,w,c
  4812  00F910  10DE               	iorwf	postinc2,w,c
  4813  00F912  B4D8               	btfsc	status,2,c
  4814  00F914  D01D               	goto	u3260
  4815  00F916                     l177:
  4816                           
  4817                           ;standbyMode.c: 182: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4818  00F916  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4819  00F91A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4820  00F91E  04DE               	decf	postinc2,w,c
  4821  00F920  10DE               	iorwf	postinc2,w,c
  4822  00F922  A4D8               	btfss	status,2,c
  4823  00F924  D243               	goto	l136
  4824  00F926  EE20 F002          	lfsr	2,2
  4825  00F92A  5003               	movf	check_food@foodInput,w,c
  4826  00F92C  26D9               	addwf	fsr2l,f,c
  4827  00F92E  5004               	movf	check_food@foodInput+1,w,c
  4828  00F930  22DA               	addwfc	fsr2h,f,c
  4829  00F932  04DE               	decf	postinc2,w,c
  4830  00F934  10DE               	iorwf	postinc2,w,c
  4831  00F936  A4D8               	btfss	status,2,c
  4832  00F938  D239               	goto	l136
  4833  00F93A  EE20 F004          	lfsr	2,4
  4834  00F93E  5003               	movf	check_food@foodInput,w,c
  4835  00F940  26D9               	addwf	fsr2l,f,c
  4836  00F942  5004               	movf	check_food@foodInput+1,w,c
  4837  00F944  22DA               	addwfc	fsr2h,f,c
  4838  00F946  0E02               	movlw	2
  4839  00F948  18DE               	xorwf	postinc2,w,c
  4840  00F94A  10DE               	iorwf	postinc2,w,c
  4841  00F94C  A4D8               	btfss	status,2,c
  4842  00F94E  D22E               	goto	l136
  4843  00F950                     u3260:
  4844                           
  4845                           ;standbyMode.c: 183: returnValue = 10;
  4846  00F950  0E00               	movlw	0
  4847  00F952  6E08               	movwf	check_food@returnValue+1,c
  4848  00F954  0E0A               	movlw	10
  4849  00F956  D7A3               	goto	L24
  4850  00F958                     
  4851                           ;standbyMode.c: 189: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4852  00F958  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4853  00F95C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4854  00F960  04DE               	decf	postinc2,w,c
  4855  00F962  10DE               	iorwf	postinc2,w,c
  4856  00F964  A4D8               	btfss	status,2,c
  4857  00F966  D014               	goto	l181
  4858  00F968  EE20 F002          	lfsr	2,2
  4859  00F96C  5003               	movf	check_food@foodInput,w,c
  4860  00F96E  26D9               	addwf	fsr2l,f,c
  4861  00F970  5004               	movf	check_food@foodInput+1,w,c
  4862  00F972  22DA               	addwfc	fsr2h,f,c
  4863  00F974  04DE               	decf	postinc2,w,c
  4864  00F976  10DE               	iorwf	postinc2,w,c
  4865  00F978  A4D8               	btfss	status,2,c
  4866  00F97A  D00A               	goto	l181
  4867  00F97C  EE20 F004          	lfsr	2,4
  4868  00F980  5003               	movf	check_food@foodInput,w,c
  4869  00F982  26D9               	addwf	fsr2l,f,c
  4870  00F984  5004               	movf	check_food@foodInput+1,w,c
  4871  00F986  22DA               	addwfc	fsr2h,f,c
  4872  00F988  04DE               	decf	postinc2,w,c
  4873  00F98A  10DE               	iorwf	postinc2,w,c
  4874  00F98C  B4D8               	btfsc	status,2,c
  4875  00F98E  D057               	goto	u3380
  4876  00F990                     l181:
  4877                           
  4878                           ;standbyMode.c: 192: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4879  00F990  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4880  00F994  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4881  00F998  0E02               	movlw	2
  4882  00F99A  18DE               	xorwf	postinc2,w,c
  4883  00F99C  10DE               	iorwf	postinc2,w,c
  4884  00F99E  A4D8               	btfss	status,2,c
  4885  00F9A0  D014               	goto	l183
  4886  00F9A2  EE20 F002          	lfsr	2,2
  4887  00F9A6  5003               	movf	check_food@foodInput,w,c
  4888  00F9A8  26D9               	addwf	fsr2l,f,c
  4889  00F9AA  5004               	movf	check_food@foodInput+1,w,c
  4890  00F9AC  22DA               	addwfc	fsr2h,f,c
  4891  00F9AE  04DE               	decf	postinc2,w,c
  4892  00F9B0  10DE               	iorwf	postinc2,w,c
  4893  00F9B2  A4D8               	btfss	status,2,c
  4894  00F9B4  D00A               	goto	l183
  4895  00F9B6  EE20 F004          	lfsr	2,4
  4896  00F9BA  5003               	movf	check_food@foodInput,w,c
  4897  00F9BC  26D9               	addwf	fsr2l,f,c
  4898  00F9BE  5004               	movf	check_food@foodInput+1,w,c
  4899  00F9C0  22DA               	addwfc	fsr2h,f,c
  4900  00F9C2  04DE               	decf	postinc2,w,c
  4901  00F9C4  10DE               	iorwf	postinc2,w,c
  4902  00F9C6  B4D8               	btfsc	status,2,c
  4903  00F9C8  D03A               	goto	u3380
  4904  00F9CA                     l183:
  4905                           
  4906                           ;standbyMode.c: 195: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4907  00F9CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4908  00F9CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4909  00F9D2  04DE               	decf	postinc2,w,c
  4910  00F9D4  10DE               	iorwf	postinc2,w,c
  4911  00F9D6  A4D8               	btfss	status,2,c
  4912  00F9D8  D015               	goto	l185
  4913  00F9DA  EE20 F002          	lfsr	2,2
  4914  00F9DE  5003               	movf	check_food@foodInput,w,c
  4915  00F9E0  26D9               	addwf	fsr2l,f,c
  4916  00F9E2  5004               	movf	check_food@foodInput+1,w,c
  4917  00F9E4  22DA               	addwfc	fsr2h,f,c
  4918  00F9E6  0E02               	movlw	2
  4919  00F9E8  18DE               	xorwf	postinc2,w,c
  4920  00F9EA  10DE               	iorwf	postinc2,w,c
  4921  00F9EC  A4D8               	btfss	status,2,c
  4922  00F9EE  D00A               	goto	l185
  4923  00F9F0  EE20 F004          	lfsr	2,4
  4924  00F9F4  5003               	movf	check_food@foodInput,w,c
  4925  00F9F6  26D9               	addwf	fsr2l,f,c
  4926  00F9F8  5004               	movf	check_food@foodInput+1,w,c
  4927  00F9FA  22DA               	addwfc	fsr2h,f,c
  4928  00F9FC  04DE               	decf	postinc2,w,c
  4929  00F9FE  10DE               	iorwf	postinc2,w,c
  4930  00FA00  B4D8               	btfsc	status,2,c
  4931  00FA02  D01D               	goto	u3380
  4932  00FA04                     l185:
  4933                           
  4934                           ;standbyMode.c: 198: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4935  00FA04  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4936  00FA08  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4937  00FA0C  04DE               	decf	postinc2,w,c
  4938  00FA0E  10DE               	iorwf	postinc2,w,c
  4939  00FA10  A4D8               	btfss	status,2,c
  4940  00FA12  D1CC               	goto	l136
  4941  00FA14  EE20 F002          	lfsr	2,2
  4942  00FA18  5003               	movf	check_food@foodInput,w,c
  4943  00FA1A  26D9               	addwf	fsr2l,f,c
  4944  00FA1C  5004               	movf	check_food@foodInput+1,w,c
  4945  00FA1E  22DA               	addwfc	fsr2h,f,c
  4946  00FA20  04DE               	decf	postinc2,w,c
  4947  00FA22  10DE               	iorwf	postinc2,w,c
  4948  00FA24  A4D8               	btfss	status,2,c
  4949  00FA26  D1C2               	goto	l136
  4950  00FA28  EE20 F004          	lfsr	2,4
  4951  00FA2C  5003               	movf	check_food@foodInput,w,c
  4952  00FA2E  26D9               	addwf	fsr2l,f,c
  4953  00FA30  5004               	movf	check_food@foodInput+1,w,c
  4954  00FA32  22DA               	addwfc	fsr2h,f,c
  4955  00FA34  0E02               	movlw	2
  4956  00FA36  18DE               	xorwf	postinc2,w,c
  4957  00FA38  10DE               	iorwf	postinc2,w,c
  4958  00FA3A  A4D8               	btfss	status,2,c
  4959  00FA3C  D1B7               	goto	l136
  4960  00FA3E                     u3380:
  4961                           
  4962                           ;standbyMode.c: 199: returnValue = 11;
  4963  00FA3E  0E00               	movlw	0
  4964  00FA40  6E08               	movwf	check_food@returnValue+1,c
  4965  00FA42  0E0B               	movlw	11
  4966  00FA44  D72C               	goto	L24
  4967  00FA46                     
  4968                           ;standbyMode.c: 205: if (foodInput[0] == 1 && foodInput[1] == 1){
  4969  00FA46  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4970  00FA4A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4971  00FA4E  04DE               	decf	postinc2,w,c
  4972  00FA50  10DE               	iorwf	postinc2,w,c
  4973  00FA52  A4D8               	btfss	status,2,c
  4974  00FA54  D1AB               	goto	l136
  4975  00FA56  EE20 F002          	lfsr	2,2
  4976  00FA5A  5003               	movf	check_food@foodInput,w,c
  4977  00FA5C  26D9               	addwf	fsr2l,f,c
  4978  00FA5E  5004               	movf	check_food@foodInput+1,w,c
  4979  00FA60  22DA               	addwfc	fsr2h,f,c
  4980  00FA62  04DE               	decf	postinc2,w,c
  4981  00FA64  10DE               	iorwf	postinc2,w,c
  4982  00FA66  A4D8               	btfss	status,2,c
  4983  00FA68  D1A1               	goto	l136
  4984                           
  4985                           ;standbyMode.c: 206: if (foodInput[2] == 1 || foodInput[2] == 2){
  4986  00FA6A  EE20 F004          	lfsr	2,4
  4987  00FA6E  5003               	movf	check_food@foodInput,w,c
  4988  00FA70  26D9               	addwf	fsr2l,f,c
  4989  00FA72  5004               	movf	check_food@foodInput+1,w,c
  4990  00FA74  22DA               	addwfc	fsr2h,f,c
  4991  00FA76  04DE               	decf	postinc2,w,c
  4992  00FA78  10DE               	iorwf	postinc2,w,c
  4993  00FA7A  B4D8               	btfsc	status,2,c
  4994  00FA7C  D00B               	goto	u3420
  4995  00FA7E  EE20 F004          	lfsr	2,4
  4996  00FA82  5003               	movf	check_food@foodInput,w,c
  4997  00FA84  26D9               	addwf	fsr2l,f,c
  4998  00FA86  5004               	movf	check_food@foodInput+1,w,c
  4999  00FA88  22DA               	addwfc	fsr2h,f,c
  5000  00FA8A  0E02               	movlw	2
  5001  00FA8C  18DE               	xorwf	postinc2,w,c
  5002  00FA8E  10DE               	iorwf	postinc2,w,c
  5003  00FA90  A4D8               	btfss	status,2,c
  5004  00FA92  D18C               	goto	l136
  5005  00FA94                     u3420:
  5006                           
  5007                           ;standbyMode.c: 207: returnValue = 12;
  5008  00FA94  0E00               	movlw	0
  5009  00FA96  6E08               	movwf	check_food@returnValue+1,c
  5010  00FA98  0E0C               	movlw	12
  5011  00FA9A  D701               	goto	L24
  5012  00FA9C                     
  5013                           ;standbyMode.c: 214: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  5014  00FA9C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5015  00FAA0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5016  00FAA4  04DE               	decf	postinc2,w,c
  5017  00FAA6  10DE               	iorwf	postinc2,w,c
  5018  00FAA8  A4D8               	btfss	status,2,c
  5019  00FAAA  D014               	goto	l194
  5020  00FAAC  EE20 F002          	lfsr	2,2
  5021  00FAB0  5003               	movf	check_food@foodInput,w,c
  5022  00FAB2  26D9               	addwf	fsr2l,f,c
  5023  00FAB4  5004               	movf	check_food@foodInput+1,w,c
  5024  00FAB6  22DA               	addwfc	fsr2h,f,c
  5025  00FAB8  04DE               	decf	postinc2,w,c
  5026  00FABA  10DE               	iorwf	postinc2,w,c
  5027  00FABC  A4D8               	btfss	status,2,c
  5028  00FABE  D00A               	goto	l194
  5029  00FAC0  EE20 F004          	lfsr	2,4
  5030  00FAC4  5003               	movf	check_food@foodInput,w,c
  5031  00FAC6  26D9               	addwf	fsr2l,f,c
  5032  00FAC8  5004               	movf	check_food@foodInput+1,w,c
  5033  00FACA  22DA               	addwfc	fsr2h,f,c
  5034  00FACC  04DE               	decf	postinc2,w,c
  5035  00FACE  10DE               	iorwf	postinc2,w,c
  5036  00FAD0  B4D8               	btfsc	status,2,c
  5037  00FAD2  D057               	goto	u3540
  5038  00FAD4                     l194:
  5039                           
  5040                           ;standbyMode.c: 217: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  5041  00FAD4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5042  00FAD8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5043  00FADC  0E02               	movlw	2
  5044  00FADE  18DE               	xorwf	postinc2,w,c
  5045  00FAE0  10DE               	iorwf	postinc2,w,c
  5046  00FAE2  A4D8               	btfss	status,2,c
  5047  00FAE4  D014               	goto	l196
  5048  00FAE6  EE20 F002          	lfsr	2,2
  5049  00FAEA  5003               	movf	check_food@foodInput,w,c
  5050  00FAEC  26D9               	addwf	fsr2l,f,c
  5051  00FAEE  5004               	movf	check_food@foodInput+1,w,c
  5052  00FAF0  22DA               	addwfc	fsr2h,f,c
  5053  00FAF2  04DE               	decf	postinc2,w,c
  5054  00FAF4  10DE               	iorwf	postinc2,w,c
  5055  00FAF6  A4D8               	btfss	status,2,c
  5056  00FAF8  D00A               	goto	l196
  5057  00FAFA  EE20 F004          	lfsr	2,4
  5058  00FAFE  5003               	movf	check_food@foodInput,w,c
  5059  00FB00  26D9               	addwf	fsr2l,f,c
  5060  00FB02  5004               	movf	check_food@foodInput+1,w,c
  5061  00FB04  22DA               	addwfc	fsr2h,f,c
  5062  00FB06  04DE               	decf	postinc2,w,c
  5063  00FB08  10DE               	iorwf	postinc2,w,c
  5064  00FB0A  B4D8               	btfsc	status,2,c
  5065  00FB0C  D03A               	goto	u3540
  5066  00FB0E                     l196:
  5067                           
  5068                           ;standbyMode.c: 220: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  5069  00FB0E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5070  00FB12  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5071  00FB16  04DE               	decf	postinc2,w,c
  5072  00FB18  10DE               	iorwf	postinc2,w,c
  5073  00FB1A  A4D8               	btfss	status,2,c
  5074  00FB1C  D015               	goto	l198
  5075  00FB1E  EE20 F002          	lfsr	2,2
  5076  00FB22  5003               	movf	check_food@foodInput,w,c
  5077  00FB24  26D9               	addwf	fsr2l,f,c
  5078  00FB26  5004               	movf	check_food@foodInput+1,w,c
  5079  00FB28  22DA               	addwfc	fsr2h,f,c
  5080  00FB2A  0E02               	movlw	2
  5081  00FB2C  18DE               	xorwf	postinc2,w,c
  5082  00FB2E  10DE               	iorwf	postinc2,w,c
  5083  00FB30  A4D8               	btfss	status,2,c
  5084  00FB32  D00A               	goto	l198
  5085  00FB34  EE20 F004          	lfsr	2,4
  5086  00FB38  5003               	movf	check_food@foodInput,w,c
  5087  00FB3A  26D9               	addwf	fsr2l,f,c
  5088  00FB3C  5004               	movf	check_food@foodInput+1,w,c
  5089  00FB3E  22DA               	addwfc	fsr2h,f,c
  5090  00FB40  04DE               	decf	postinc2,w,c
  5091  00FB42  10DE               	iorwf	postinc2,w,c
  5092  00FB44  B4D8               	btfsc	status,2,c
  5093  00FB46  D01D               	goto	u3540
  5094  00FB48                     l198:
  5095                           
  5096                           ;standbyMode.c: 223: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  5097  00FB48  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5098  00FB4C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5099  00FB50  04DE               	decf	postinc2,w,c
  5100  00FB52  10DE               	iorwf	postinc2,w,c
  5101  00FB54  A4D8               	btfss	status,2,c
  5102  00FB56  D12A               	goto	l136
  5103  00FB58  EE20 F002          	lfsr	2,2
  5104  00FB5C  5003               	movf	check_food@foodInput,w,c
  5105  00FB5E  26D9               	addwf	fsr2l,f,c
  5106  00FB60  5004               	movf	check_food@foodInput+1,w,c
  5107  00FB62  22DA               	addwfc	fsr2h,f,c
  5108  00FB64  04DE               	decf	postinc2,w,c
  5109  00FB66  10DE               	iorwf	postinc2,w,c
  5110  00FB68  A4D8               	btfss	status,2,c
  5111  00FB6A  D120               	goto	l136
  5112  00FB6C  EE20 F004          	lfsr	2,4
  5113  00FB70  5003               	movf	check_food@foodInput,w,c
  5114  00FB72  26D9               	addwf	fsr2l,f,c
  5115  00FB74  5004               	movf	check_food@foodInput+1,w,c
  5116  00FB76  22DA               	addwfc	fsr2h,f,c
  5117  00FB78  0E02               	movlw	2
  5118  00FB7A  18DE               	xorwf	postinc2,w,c
  5119  00FB7C  10DE               	iorwf	postinc2,w,c
  5120  00FB7E  A4D8               	btfss	status,2,c
  5121  00FB80  D115               	goto	l136
  5122  00FB82                     u3540:
  5123                           
  5124                           ;standbyMode.c: 224: returnValue = 13;
  5125  00FB82  0E00               	movlw	0
  5126  00FB84  6E08               	movwf	check_food@returnValue+1,c
  5127  00FB86  0E0D               	movlw	13
  5128  00FB88  D68A               	goto	L24
  5129  00FB8A                     
  5130                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5131  00FB8A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5132  00FB8E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5133  00FB92  04DE               	decf	postinc2,w,c
  5134  00FB94  10DE               	iorwf	postinc2,w,c
  5135  00FB96  A4D8               	btfss	status,2,c
  5136  00FB98  D109               	goto	l136
  5137  00FB9A  EE20 F002          	lfsr	2,2
  5138  00FB9E  5003               	movf	check_food@foodInput,w,c
  5139  00FBA0  26D9               	addwf	fsr2l,f,c
  5140  00FBA2  5004               	movf	check_food@foodInput+1,w,c
  5141  00FBA4  22DA               	addwfc	fsr2h,f,c
  5142  00FBA6  04DE               	decf	postinc2,w,c
  5143  00FBA8  10DE               	iorwf	postinc2,w,c
  5144  00FBAA  A4D8               	btfss	status,2,c
  5145  00FBAC  D0FF               	goto	l136
  5146  00FBAE  EE20 F004          	lfsr	2,4
  5147  00FBB2  5003               	movf	check_food@foodInput,w,c
  5148  00FBB4  26D9               	addwf	fsr2l,f,c
  5149  00FBB6  5004               	movf	check_food@foodInput+1,w,c
  5150  00FBB8  22DA               	addwfc	fsr2h,f,c
  5151  00FBBA  04DE               	decf	postinc2,w,c
  5152  00FBBC  10DE               	iorwf	postinc2,w,c
  5153  00FBBE  A4D8               	btfss	status,2,c
  5154  00FBC0  D0F5               	goto	l136
  5155  00FBC2  EE20 F006          	lfsr	2,6
  5156  00FBC6  5003               	movf	check_food@foodInput,w,c
  5157  00FBC8  26D9               	addwf	fsr2l,f,c
  5158  00FBCA  5004               	movf	check_food@foodInput+1,w,c
  5159  00FBCC  22DA               	addwfc	fsr2h,f,c
  5160  00FBCE  04DE               	decf	postinc2,w,c
  5161  00FBD0  10DE               	iorwf	postinc2,w,c
  5162  00FBD2  A4D8               	btfss	status,2,c
  5163  00FBD4  D0EB               	goto	l136
  5164                           
  5165                           ;standbyMode.c: 231: returnValue = 14;
  5166  00FBD6  0E00               	movlw	0
  5167  00FBD8  6E08               	movwf	check_food@returnValue+1,c
  5168  00FBDA  0E0E               	movlw	14
  5169  00FBDC  D660               	goto	L24
  5170  00FBDE                     
  5171                           ;standbyMode.c: 237: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5172  00FBDE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5173  00FBE2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5174  00FBE6  04DE               	decf	postinc2,w,c
  5175  00FBE8  10DE               	iorwf	postinc2,w,c
  5176  00FBEA  A4D8               	btfss	status,2,c
  5177  00FBEC  D0DF               	goto	l136
  5178  00FBEE  EE20 F002          	lfsr	2,2
  5179  00FBF2  5003               	movf	check_food@foodInput,w,c
  5180  00FBF4  26D9               	addwf	fsr2l,f,c
  5181  00FBF6  5004               	movf	check_food@foodInput+1,w,c
  5182  00FBF8  22DA               	addwfc	fsr2h,f,c
  5183  00FBFA  04DE               	decf	postinc2,w,c
  5184  00FBFC  10DE               	iorwf	postinc2,w,c
  5185  00FBFE  A4D8               	btfss	status,2,c
  5186  00FC00  D0D5               	goto	l136
  5187  00FC02  EE20 F004          	lfsr	2,4
  5188  00FC06  5003               	movf	check_food@foodInput,w,c
  5189  00FC08  26D9               	addwf	fsr2l,f,c
  5190  00FC0A  5004               	movf	check_food@foodInput+1,w,c
  5191  00FC0C  22DA               	addwfc	fsr2h,f,c
  5192  00FC0E  04DE               	decf	postinc2,w,c
  5193  00FC10  10DE               	iorwf	postinc2,w,c
  5194  00FC12  A4D8               	btfss	status,2,c
  5195  00FC14  D0CB               	goto	l136
  5196  00FC16  EE20 F006          	lfsr	2,6
  5197  00FC1A  5003               	movf	check_food@foodInput,w,c
  5198  00FC1C  26D9               	addwf	fsr2l,f,c
  5199  00FC1E  5004               	movf	check_food@foodInput+1,w,c
  5200  00FC20  22DA               	addwfc	fsr2h,f,c
  5201  00FC22  04DE               	decf	postinc2,w,c
  5202  00FC24  10DE               	iorwf	postinc2,w,c
  5203  00FC26  A4D8               	btfss	status,2,c
  5204  00FC28  D0C1               	goto	l136
  5205                           
  5206                           ;standbyMode.c: 238: returnValue = 15;
  5207  00FC2A  0E00               	movlw	0
  5208  00FC2C  6E08               	movwf	check_food@returnValue+1,c
  5209  00FC2E  0E0F               	movlw	15
  5210  00FC30  D636               	goto	L24
  5211  00FC32                     
  5212                           ;standbyMode.c: 244: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5213  00FC32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5214  00FC36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5215  00FC3A  04DE               	decf	postinc2,w,c
  5216  00FC3C  10DE               	iorwf	postinc2,w,c
  5217  00FC3E  A4D8               	btfss	status,2,c
  5218  00FC40  D0B5               	goto	l136
  5219  00FC42  EE20 F002          	lfsr	2,2
  5220  00FC46  5003               	movf	check_food@foodInput,w,c
  5221  00FC48  26D9               	addwf	fsr2l,f,c
  5222  00FC4A  5004               	movf	check_food@foodInput+1,w,c
  5223  00FC4C  22DA               	addwfc	fsr2h,f,c
  5224  00FC4E  04DE               	decf	postinc2,w,c
  5225  00FC50  10DE               	iorwf	postinc2,w,c
  5226  00FC52  A4D8               	btfss	status,2,c
  5227  00FC54  D0AB               	goto	l136
  5228  00FC56  EE20 F004          	lfsr	2,4
  5229  00FC5A  5003               	movf	check_food@foodInput,w,c
  5230  00FC5C  26D9               	addwf	fsr2l,f,c
  5231  00FC5E  5004               	movf	check_food@foodInput+1,w,c
  5232  00FC60  22DA               	addwfc	fsr2h,f,c
  5233  00FC62  04DE               	decf	postinc2,w,c
  5234  00FC64  10DE               	iorwf	postinc2,w,c
  5235  00FC66  A4D8               	btfss	status,2,c
  5236  00FC68  D0A1               	goto	l136
  5237  00FC6A  EE20 F006          	lfsr	2,6
  5238  00FC6E  5003               	movf	check_food@foodInput,w,c
  5239  00FC70  26D9               	addwf	fsr2l,f,c
  5240  00FC72  5004               	movf	check_food@foodInput+1,w,c
  5241  00FC74  22DA               	addwfc	fsr2h,f,c
  5242  00FC76  04DE               	decf	postinc2,w,c
  5243  00FC78  10DE               	iorwf	postinc2,w,c
  5244  00FC7A  A4D8               	btfss	status,2,c
  5245  00FC7C  D097               	goto	l136
  5246                           
  5247                           ;standbyMode.c: 245: returnValue = 16;
  5248  00FC7E  0E00               	movlw	0
  5249  00FC80  6E08               	movwf	check_food@returnValue+1,c
  5250  00FC82  0E10               	movlw	16
  5251  00FC84  D60C               	goto	L24
  5252  00FC86                     
  5253                           ;standbyMode.c: 251: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5254  00FC86  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5255  00FC8A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5256  00FC8E  04DE               	decf	postinc2,w,c
  5257  00FC90  10DE               	iorwf	postinc2,w,c
  5258  00FC92  A4D8               	btfss	status,2,c
  5259  00FC94  D08B               	goto	l136
  5260  00FC96  EE20 F002          	lfsr	2,2
  5261  00FC9A  5003               	movf	check_food@foodInput,w,c
  5262  00FC9C  26D9               	addwf	fsr2l,f,c
  5263  00FC9E  5004               	movf	check_food@foodInput+1,w,c
  5264  00FCA0  22DA               	addwfc	fsr2h,f,c
  5265  00FCA2  04DE               	decf	postinc2,w,c
  5266  00FCA4  10DE               	iorwf	postinc2,w,c
  5267  00FCA6  A4D8               	btfss	status,2,c
  5268  00FCA8  D081               	goto	l136
  5269  00FCAA  EE20 F004          	lfsr	2,4
  5270  00FCAE  5003               	movf	check_food@foodInput,w,c
  5271  00FCB0  26D9               	addwf	fsr2l,f,c
  5272  00FCB2  5004               	movf	check_food@foodInput+1,w,c
  5273  00FCB4  22DA               	addwfc	fsr2h,f,c
  5274  00FCB6  04DE               	decf	postinc2,w,c
  5275  00FCB8  10DE               	iorwf	postinc2,w,c
  5276  00FCBA  A4D8               	btfss	status,2,c
  5277  00FCBC  D077               	goto	l136
  5278  00FCBE  EE20 F006          	lfsr	2,6
  5279  00FCC2  5003               	movf	check_food@foodInput,w,c
  5280  00FCC4  26D9               	addwf	fsr2l,f,c
  5281  00FCC6  5004               	movf	check_food@foodInput+1,w,c
  5282  00FCC8  22DA               	addwfc	fsr2h,f,c
  5283  00FCCA  04DE               	decf	postinc2,w,c
  5284  00FCCC  10DE               	iorwf	postinc2,w,c
  5285  00FCCE  A4D8               	btfss	status,2,c
  5286  00FCD0  D06D               	goto	l136
  5287                           
  5288                           ;standbyMode.c: 252: returnValue = 17;
  5289  00FCD2  0E00               	movlw	0
  5290  00FCD4  6E08               	movwf	check_food@returnValue+1,c
  5291  00FCD6  0E11               	movlw	17
  5292  00FCD8  D5E2               	goto	L24
  5293  00FCDA                     
  5294                           ;standbyMode.c: 258: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  5295  00FCDA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  5296  00FCDE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  5297  00FCE2  04DE               	decf	postinc2,w,c
  5298  00FCE4  10DE               	iorwf	postinc2,w,c
  5299  00FCE6  A4D8               	btfss	status,2,c
  5300  00FCE8  D061               	goto	l136
  5301  00FCEA  EE20 F002          	lfsr	2,2
  5302  00FCEE  5003               	movf	check_food@foodInput,w,c
  5303  00FCF0  26D9               	addwf	fsr2l,f,c
  5304  00FCF2  5004               	movf	check_food@foodInput+1,w,c
  5305  00FCF4  22DA               	addwfc	fsr2h,f,c
  5306  00FCF6  04DE               	decf	postinc2,w,c
  5307  00FCF8  10DE               	iorwf	postinc2,w,c
  5308  00FCFA  A4D8               	btfss	status,2,c
  5309  00FCFC  D057               	goto	l136
  5310  00FCFE  EE20 F004          	lfsr	2,4
  5311  00FD02  5003               	movf	check_food@foodInput,w,c
  5312  00FD04  26D9               	addwf	fsr2l,f,c
  5313  00FD06  5004               	movf	check_food@foodInput+1,w,c
  5314  00FD08  22DA               	addwfc	fsr2h,f,c
  5315  00FD0A  04DE               	decf	postinc2,w,c
  5316  00FD0C  10DE               	iorwf	postinc2,w,c
  5317  00FD0E  A4D8               	btfss	status,2,c
  5318  00FD10  D04D               	goto	l136
  5319  00FD12  EE20 F006          	lfsr	2,6
  5320  00FD16  5003               	movf	check_food@foodInput,w,c
  5321  00FD18  26D9               	addwf	fsr2l,f,c
  5322  00FD1A  5004               	movf	check_food@foodInput+1,w,c
  5323  00FD1C  22DA               	addwfc	fsr2h,f,c
  5324  00FD1E  04DE               	decf	postinc2,w,c
  5325  00FD20  10DE               	iorwf	postinc2,w,c
  5326  00FD22  A4D8               	btfss	status,2,c
  5327  00FD24  D043               	goto	l136
  5328                           
  5329                           ;standbyMode.c: 259: returnValue = 18;
  5330  00FD26  0E00               	movlw	0
  5331  00FD28  6E08               	movwf	check_food@returnValue+1,c
  5332  00FD2A  0E12               	movlw	18
  5333  00FD2C  D5B8               	goto	L24
  5334  00FD2E                     l131:
  5335  00FD2E  C001  F005         	movff	check_food@sum,??_check_food
  5336  00FD32  C002  F006         	movff	check_food@sum+1,??_check_food+1
  5337                           
  5338                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5339                           ; Switch size 1, requested type "space"
  5340                           ; Number of cases is 1, Range of values is 0 to 0
  5341                           ; switch strategies available:
  5342                           ; Name         Instructions Cycles
  5343                           ; simple_byte            4     3 (average)
  5344                           ;	Chosen strategy is simple_byte
  5345  00FD36  5006               	movf	??_check_food+1,w,c
  5346  00FD38  0A00               	xorlw	0	; case 0
  5347  00FD3A  A4D8               	btfss	status,2,c
  5348  00FD3C  D037               	goto	l136
  5349                           
  5350                           ; Switch size 1, requested type "space"
  5351                           ; Number of cases is 18, Range of values is 3 to 43
  5352                           ; switch strategies available:
  5353                           ; Name         Instructions Cycles
  5354                           ; simple_byte           55    28 (average)
  5355                           ;	Chosen strategy is simple_byte
  5356  00FD3E  5005               	movf	??_check_food,w,c
  5357  00FD40  0A03               	xorlw	3	; case 3
  5358  00FD42  B4D8               	btfsc	status,2,c
  5359  00FD44  D446               	goto	l132
  5360  00FD46  0A04               	xorlw	4	; case 7
  5361  00FD48  B4D8               	btfsc	status,2,c
  5362  00FD4A  D458               	goto	l137
  5363  00FD4C  0A0D               	xorlw	13	; case 10
  5364  00FD4E  B4D8               	btfsc	status,2,c
  5365  00FD50  D488               	goto	l145
  5366  00FD52  0A06               	xorlw	6	; case 12
  5367  00FD54  B4D8               	btfsc	status,2,c
  5368  00FD56  D467               	goto	l141
  5369  00FD58  0A01               	xorlw	1	; case 13
  5370  00FD5A  B4D8               	btfsc	status,2,c
  5371  00FD5C  D504               	goto	l157
  5372  00FD5E  0A02               	xorlw	2	; case 15
  5373  00FD60  B4D8               	btfsc	status,2,c
  5374  00FD62  D4A9               	goto	l147
  5375  00FD64  0A1E               	xorlw	30	; case 17
  5376  00FD66  B4D8               	btfsc	status,2,c
  5377  00FD68  D554               	goto	l167
  5378  00FD6A  0A03               	xorlw	3	; case 18
  5379  00FD6C  B4D8               	btfsc	status,2,c
  5380  00FD6E  D526               	goto	l162
  5381  00FD70  0A01               	xorlw	1	; case 19
  5382  00FD72  B4D8               	btfsc	status,2,c
  5383  00FD74  D4CC               	goto	l152
  5384  00FD76  0A05               	xorlw	5	; case 22
  5385  00FD78  B4D8               	btfsc	status,2,c
  5386  00FD7A  D5EE               	goto	l180
  5387  00FD7C  0A0F               	xorlw	15	; case 25
  5388  00FD7E  B4D8               	btfsc	status,2,c
  5389  00FD80  D704               	goto	l201
  5390  00FD82  0A03               	xorlw	3	; case 26
  5391  00FD84  B4D8               	btfsc	status,2,c
  5392  00FD86  D65F               	goto	l188
  5393  00FD88  0A01               	xorlw	1	; case 27
  5394  00FD8A  B4D8               	btfsc	status,2,c
  5395  00FD8C  D56B               	goto	l172
  5396  00FD8E  0A06               	xorlw	6	; case 29
  5397  00FD90  B4D8               	btfsc	status,2,c
  5398  00FD92  D725               	goto	l203
  5399  00FD94  0A02               	xorlw	2	; case 31
  5400  00FD96  B4D8               	btfsc	status,2,c
  5401  00FD98  D681               	goto	l193
  5402  00FD9A  0A3D               	xorlw	61	; case 34
  5403  00FD9C  B4D8               	btfsc	status,2,c
  5404  00FD9E  D749               	goto	l205
  5405  00FDA0  0A05               	xorlw	5	; case 39
  5406  00FDA2  B4D8               	btfsc	status,2,c
  5407  00FDA4  D770               	goto	l207
  5408  00FDA6  0A0C               	xorlw	12	; case 43
  5409  00FDA8  B4D8               	btfsc	status,2,c
  5410  00FDAA  D797               	goto	l209
  5411  00FDAC                     l136:
  5412                           
  5413                           ;standbyMode.c: 267: return returnValue;
  5414  00FDAC  C007  F001         	movff	check_food@returnValue,?_check_food
  5415  00FDB0  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  5416  00FDB4  0012               	return		;funcret
  5417  00FDB6                     __end_of_check_food:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           postinc0	equ	0xFEE
  5426                           wreg	equ	0xFE8
  5427                           plusw1	equ	0xFE3
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           plusw2	equ	0xFDB
  5431                           fsr2h	equ	0xFDA
  5432                           fsr2l	equ	0xFD9
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _diet_press *****************
  5436 ;; Defined at:
  5437 ;;		line 535 in file "standbyMode.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  drawer          2   24[COMRAM] unsigned int 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  keypress        1   38[COMRAM] unsigned char 
  5442 ;;  dietTable       8   39[COMRAM] unsigned int [4]
  5443 ;;  sum             2   36[COMRAM] unsigned int 
  5444 ;;  count           2   34[COMRAM] unsigned int 
  5445 ;;  backCheck       2   32[COMRAM] unsigned int 
  5446 ;;  i               2   30[COMRAM] unsigned int 
  5447 ;;  previous        2   28[COMRAM] unsigned int 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  2   24[COMRAM] unsigned int 
  5450 ;; Registers used:
  5451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;Total ram usage:       23 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    3
  5464 ;; This function calls:
  5465 ;;		_lcdInst
  5466 ;;		_printf
  5467 ;;		_putch
  5468 ;; This function is called by:
  5469 ;;		_standbyMode
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text8
  5474  00E928                     __ptext8:
  5475                           	opt stack 0
  5476  00E928                     _diet_press:
  5477                           	opt stack 26
  5478                           
  5479                           ;incstack = 0
  5480                           ;standbyMode.c: 538: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5481  00E928  0E01               	movlw	1
  5482  00E92A  ECB8  F06E         	call	_lcdInst
  5483  00E92E  0EC3               	movlw	195
  5484  00E930  6E1B               	movwf	??_diet_press& (0+255),c
  5485  00E932  0ECD               	movlw	205
  5486  00E934                     u6077:
  5487  00E934  2EE8               	decfsz	wreg,f,c
  5488  00E936  D7FE               	bra	u6077
  5489  00E938  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5490  00E93A  D7FC               	bra	u6077
  5491  00E93C  F000               	nop	
  5492                           
  5493                           ;standbyMode.c: 539: printf("Drawer %i diet:", drawer);
  5494  00E93E  0E9F               	movlw	low STR_23
  5495  00E940  6E0D               	movwf	printf@f,c
  5496  00E942  0EFE               	movlw	high STR_23
  5497  00E944  6E0E               	movwf	printf@f+1,c
  5498  00E946  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5499  00E94A  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5500  00E94E  EC72  F070         	call	_printf	;wreg free
  5501                           
  5502                           ;standbyMode.c: 540: lcdInst(0xC0);;
  5503  00E952  0EC0               	movlw	192
  5504  00E954  ECB8  F06E         	call	_lcdInst
  5505                           
  5506                           ;standbyMode.c: 542: unsigned int count = 0;
  5507  00E958  0E00               	movlw	0
  5508  00E95A  6E24               	movwf	diet_press@count+1,c
  5509  00E95C  0E00               	movlw	0
  5510  00E95E  6E23               	movwf	diet_press@count,c
  5511                           
  5512                           ;standbyMode.c: 543: unsigned int previous = 0;
  5513  00E960  0E00               	movlw	0
  5514  00E962  6E1E               	movwf	diet_press@previous+1,c
  5515  00E964  0E00               	movlw	0
  5516  00E966  6E1D               	movwf	diet_press@previous,c
  5517                           
  5518                           ;standbyMode.c: 544: unsigned int sum = 0;
  5519  00E968  0E00               	movlw	0
  5520  00E96A  6E26               	movwf	diet_press@sum+1,c
  5521  00E96C  0E00               	movlw	0
  5522  00E96E  6E25               	movwf	diet_press@sum,c
  5523                           
  5524                           ;standbyMode.c: 545: unsigned int i = 0;
  5525  00E970  0E00               	movlw	0
  5526  00E972  6E20               	movwf	diet_press@i+1,c
  5527  00E974  0E00               	movlw	0
  5528  00E976  6E1F               	movwf	diet_press@i,c
  5529                           
  5530                           ;standbyMode.c: 546: unsigned int dietTable[4] = {0, 0, 0, 0};
  5531  00E978  EE20  F056         	lfsr	2,diet_press@F3055
  5532  00E97C  EE10  F028         	lfsr	1,diet_press@dietTable
  5533  00E980  0E07               	movlw	7
  5534  00E982                     u4091:
  5535  00E982  CFDB FFE3          	movff	plusw2,plusw1
  5536  00E986  06E8               	decf	wreg,f,c
  5537  00E988  E2FC               	bc	u4091
  5538                           
  5539                           ;standbyMode.c: 547: unsigned int backCheck = 0;
  5540  00E98A  0E00               	movlw	0
  5541  00E98C  6E22               	movwf	diet_press@backCheck+1,c
  5542  00E98E  0E00               	movlw	0
  5543  00E990  6E21               	movwf	diet_press@backCheck,c
  5544  00E992                     l308:
  5545  00E992  A281               	btfss	3969,1,c	;volatile
  5546  00E994  D7FE               	goto	l307
  5547                           
  5548                           ;standbyMode.c: 551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5549  00E996  3881               	swapf	3969,w,c	;volatile
  5550  00E998  0B0F               	andlw	15
  5551  00E99A  0B0F               	andlw	15
  5552  00E99C  6E27               	movwf	diet_press@keypress,c
  5553  00E99E  B281               	btfsc	3969,1,c	;volatile
  5554  00E9A0  D7FE               	goto	l312
  5555                           
  5556                           ;standbyMode.c: 554: if(keypress == 14){
  5557  00E9A2  0E0E               	movlw	14
  5558  00E9A4  1827               	xorwf	diet_press@keypress,w,c
  5559  00E9A6  B4D8               	btfsc	status,2,c
  5560  00E9A8  D080               	goto	l315
  5561                           
  5562                           ;standbyMode.c: 557: else if (keypress == 15){
  5563                           
  5564                           ;standbyMode.c: 556: }
  5565                           
  5566                           ;standbyMode.c: 555: break;
  5567  00E9AA  0E0F               	movlw	15
  5568  00E9AC  1827               	xorwf	diet_press@keypress,w,c
  5569  00E9AE  A4D8               	btfss	status,2,c
  5570  00E9B0  D005               	goto	l317
  5571                           
  5572                           ;standbyMode.c: 558: backCheck = 1;
  5573  00E9B2  0E00               	movlw	0
  5574  00E9B4  6E22               	movwf	diet_press@backCheck+1,c
  5575  00E9B6  0E01               	movlw	1
  5576  00E9B8  6E21               	movwf	diet_press@backCheck,c
  5577                           
  5578                           ;standbyMode.c: 559: break;
  5579  00E9BA  D077               	goto	l315
  5580  00E9BC                     l317:
  5581                           
  5582                           ;standbyMode.c: 561: else if (keypress == 12){
  5583  00E9BC  0E0C               	movlw	12
  5584  00E9BE  1827               	xorwf	diet_press@keypress,w,c
  5585  00E9C0  A4D8               	btfss	status,2,c
  5586  00E9C2  D02D               	goto	l319
  5587                           
  5588                           ;standbyMode.c: 562: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5589  00E9C4  0E01               	movlw	1
  5590  00E9C6  ECB8  F06E         	call	_lcdInst
  5591  00E9CA  0EC3               	movlw	195
  5592  00E9CC  6E1B               	movwf	??_diet_press& (0+255),c
  5593  00E9CE  0ECD               	movlw	205
  5594  00E9D0                     u6087:
  5595  00E9D0  2EE8               	decfsz	wreg,f,c
  5596  00E9D2  D7FE               	bra	u6087
  5597  00E9D4  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5598  00E9D6  D7FC               	bra	u6087
  5599  00E9D8  F000               	nop	
  5600                           
  5601                           ;standbyMode.c: 563: printf("Drawer %i diet:", drawer);
  5602  00E9DA  0E9F               	movlw	low STR_23
  5603  00E9DC  6E0D               	movwf	printf@f,c
  5604  00E9DE  0EFE               	movlw	high STR_23
  5605  00E9E0  6E0E               	movwf	printf@f+1,c
  5606  00E9E2  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5607  00E9E6  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5608  00E9EA  EC72  F070         	call	_printf	;wreg free
  5609                           
  5610                           ;standbyMode.c: 564: lcdInst(0xC0);;
  5611  00E9EE  0EC0               	movlw	192
  5612  00E9F0  ECB8  F06E         	call	_lcdInst
  5613                           
  5614                           ;standbyMode.c: 565: count = 0;
  5615  00E9F4  0E00               	movlw	0
  5616  00E9F6  6E24               	movwf	diet_press@count+1,c
  5617  00E9F8  0E00               	movlw	0
  5618  00E9FA  6E23               	movwf	diet_press@count,c
  5619                           
  5620                           ;standbyMode.c: 566: dietTable[0] = 0;
  5621  00E9FC  0E00               	movlw	0
  5622  00E9FE  6E29               	movwf	diet_press@dietTable+1,c
  5623  00EA00  0E00               	movlw	0
  5624  00EA02  6E28               	movwf	diet_press@dietTable,c
  5625                           
  5626                           ;standbyMode.c: 567: dietTable[1] = 0;
  5627  00EA04  0E00               	movlw	0
  5628  00EA06  6E2B               	movwf	diet_press@dietTable+3,c
  5629  00EA08  0E00               	movlw	0
  5630  00EA0A  6E2A               	movwf	diet_press@dietTable+2,c
  5631                           
  5632                           ;standbyMode.c: 568: dietTable[2] = 0;
  5633  00EA0C  0E00               	movlw	0
  5634  00EA0E  6E2D               	movwf	diet_press@dietTable+5,c
  5635  00EA10  0E00               	movlw	0
  5636  00EA12  6E2C               	movwf	diet_press@dietTable+4,c
  5637                           
  5638                           ;standbyMode.c: 569: dietTable[3] = 0;
  5639  00EA14  0E00               	movlw	0
  5640  00EA16  6E2F               	movwf	diet_press@dietTable+7,c
  5641  00EA18  0E00               	movlw	0
  5642  00EA1A  6E2E               	movwf	diet_press@dietTable+6,c
  5643                           
  5644                           ;standbyMode.c: 570: }
  5645  00EA1C  D7BA               	goto	l307
  5646  00EA1E                     l319:
  5647                           
  5648                           ;standbyMode.c: 571: else if (count <= 3){
  5649  00EA1E  5024               	movf	diet_press@count+1,w,c
  5650  00EA20  E1B8               	bnz	l308
  5651  00EA22  0E04               	movlw	4
  5652  00EA24  5C23               	subwf	diet_press@count,w,c
  5653  00EA26  B0D8               	btfsc	status,0,c
  5654  00EA28  D7B4               	goto	l307
  5655                           
  5656                           ;standbyMode.c: 572: if (keypress == 3 || keypress == 7){
  5657  00EA2A  0E03               	movlw	3
  5658  00EA2C  1827               	xorwf	diet_press@keypress,w,c
  5659  00EA2E  B4D8               	btfsc	status,2,c
  5660  00EA30  D004               	goto	u4170
  5661  00EA32  0E07               	movlw	7
  5662  00EA34  1827               	xorwf	diet_press@keypress,w,c
  5663  00EA36  A4D8               	btfss	status,2,c
  5664  00EA38  D013               	goto	l322
  5665  00EA3A                     u4170:
  5666                           
  5667                           ;standbyMode.c: 573: putch(input[keypress]);
  5668  00EA3A  5027               	movf	diet_press@keypress,w,c
  5669  00EA3C  0D01               	mullw	1
  5670  00EA3E  0EC8               	movlw	low _input
  5671  00EA40  24F3               	addwf	prodl,w,c
  5672  00EA42  6EF6               	movwf	tblptrl,c
  5673  00EA44  0EFD               	movlw	high _input
  5674  00EA46  20F4               	addwfc	prodh,w,c
  5675  00EA48  6EF7               	movwf	tblptrh,c
  5676  00EA4A                     	if	0	;There are less than 3 active tblptr bytes
  5677  00EA4A                     	endif
  5678  00EA4A  0008               	tblrd		*
  5679  00EA4C  50F5               	movf	tablat,w,c
  5680  00EA4E  ECC2  F06E         	call	_putch
  5681                           
  5682                           ;standbyMode.c: 574: dietTable[count] = keypress;
  5683  00EA52  5027               	movf	diet_press@keypress,w,c
  5684  00EA54  6E1B               	movwf	??_diet_press& (0+255),c
  5685  00EA56  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5686  00EA58  D01A               	goto	L43
  5687  00EA5A                     l3273:
  5688                           
  5689                           ;standbyMode.c: 575: count += 1;
  5690  00EA5A  4A23               	infsnz	diet_press@count,f,c
  5691  00EA5C  2A24               	incf	diet_press@count+1,f,c
  5692                           
  5693                           ;standbyMode.c: 576: }
  5694  00EA5E  D799               	goto	l307
  5695  00EA60                     l322:
  5696                           
  5697                           ;standbyMode.c: 577: else if (keypress == 11){
  5698  00EA60  0E0B               	movlw	11
  5699  00EA62  1827               	xorwf	diet_press@keypress,w,c
  5700  00EA64  A4D8               	btfss	status,2,c
  5701  00EA66  D795               	goto	l307
  5702                           
  5703                           ;standbyMode.c: 578: putch(input[keypress]);
  5704  00EA68  5027               	movf	diet_press@keypress,w,c
  5705  00EA6A  0D01               	mullw	1
  5706  00EA6C  0EC8               	movlw	low _input
  5707  00EA6E  24F3               	addwf	prodl,w,c
  5708  00EA70  6EF6               	movwf	tblptrl,c
  5709  00EA72  0EFD               	movlw	high _input
  5710  00EA74  20F4               	addwfc	prodh,w,c
  5711  00EA76  6EF7               	movwf	tblptrh,c
  5712  00EA78                     	if	0	;There are less than 3 active tblptr bytes
  5713  00EA78                     	endif
  5714  00EA78  0008               	tblrd		*
  5715  00EA7A  50F5               	movf	tablat,w,c
  5716  00EA7C  ECC2  F06E         	call	_putch
  5717                           
  5718                           ;standbyMode.c: 579: dietTable[count] = keypress + 1;
  5719  00EA80  5027               	movf	diet_press@keypress,w,c
  5720  00EA82  6E1B               	movwf	??_diet_press& (0+255),c
  5721  00EA84  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5722  00EA86  0E01               	movlw	1
  5723  00EA88  261B               	addwf	??_diet_press,f,c
  5724  00EA8A  0E00               	movlw	0
  5725  00EA8C  221C               	addwfc	??_diet_press+1,f,c
  5726  00EA8E                     L43:
  5727  00EA8E  90D8               	bcf	status,0,c
  5728  00EA90  3423               	rlcf	diet_press@count,w,c
  5729  00EA92  6ED9               	movwf	fsr2l,c
  5730  00EA94  3424               	rlcf	diet_press@count+1,w,c
  5731  00EA96  6EDA               	movwf	fsr2h,c
  5732  00EA98  0E28               	movlw	low diet_press@dietTable
  5733  00EA9A  26D9               	addwf	fsr2l,f,c
  5734  00EA9C  0E00               	movlw	high diet_press@dietTable
  5735  00EA9E  22DA               	addwfc	fsr2h,f,c
  5736  00EAA0  C01B  FFDE         	movff	??_diet_press,postinc2
  5737  00EAA4  C01C  FFDD         	movff	??_diet_press+1,postdec2
  5738  00EAA8  D7D8               	goto	l3273
  5739  00EAAA                     l315:
  5740                           
  5741                           ;standbyMode.c: 581: }
  5742                           ;standbyMode.c: 582: }
  5743                           ;standbyMode.c: 583: }
  5744                           ;standbyMode.c: 585: if (backCheck == 1){
  5745  00EAAA  0421               	decf	diet_press@backCheck,w,c
  5746  00EAAC  1022               	iorwf	diet_press@backCheck+1,w,c
  5747  00EAAE  A4D8               	btfss	status,2,c
  5748  00EAB0  D004               	goto	l328
  5749                           
  5750                           ;standbyMode.c: 586: sum = 100;
  5751  00EAB2  0E00               	movlw	0
  5752  00EAB4  6E26               	movwf	diet_press@sum+1,c
  5753  00EAB6  0E64               	movlw	100
  5754  00EAB8  D199               	goto	L42
  5755  00EABA                     l328:
  5756                           
  5757                           ;standbyMode.c: 590: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5758  00EABA  0E0C               	movlw	12
  5759  00EABC  1828               	xorwf	diet_press@dietTable,w,c
  5760  00EABE  1029               	iorwf	diet_press@dietTable+1,w,c
  5761  00EAC0  A4D8               	btfss	status,2,c
  5762  00EAC2  D010               	goto	l330
  5763  00EAC4  502A               	movf	diet_press@dietTable+2,w,c
  5764  00EAC6  102B               	iorwf	diet_press@dietTable+3,w,c
  5765  00EAC8  A4D8               	btfss	status,2,c
  5766  00EACA  D00C               	goto	l330
  5767  00EACC  502C               	movf	diet_press@dietTable+4,w,c
  5768  00EACE  102D               	iorwf	diet_press@dietTable+5,w,c
  5769  00EAD0  A4D8               	btfss	status,2,c
  5770  00EAD2  D008               	goto	l330
  5771  00EAD4  502E               	movf	diet_press@dietTable+6,w,c
  5772  00EAD6  102F               	iorwf	diet_press@dietTable+7,w,c
  5773  00EAD8  A4D8               	btfss	status,2,c
  5774  00EADA  D004               	goto	l330
  5775                           
  5776                           ;standbyMode.c: 591: sum = 12;
  5777  00EADC  0E00               	movlw	0
  5778  00EADE  6E26               	movwf	diet_press@sum+1,c
  5779  00EAE0  0E0C               	movlw	12
  5780  00EAE2  D184               	goto	L42
  5781  00EAE4                     l330:
  5782                           
  5783                           ;standbyMode.c: 595: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5784  00EAE4  0E03               	movlw	3
  5785  00EAE6  1828               	xorwf	diet_press@dietTable,w,c
  5786  00EAE8  1029               	iorwf	diet_press@dietTable+1,w,c
  5787  00EAEA  A4D8               	btfss	status,2,c
  5788  00EAEC  D010               	goto	l332
  5789  00EAEE  502A               	movf	diet_press@dietTable+2,w,c
  5790  00EAF0  102B               	iorwf	diet_press@dietTable+3,w,c
  5791  00EAF2  A4D8               	btfss	status,2,c
  5792  00EAF4  D00C               	goto	l332
  5793  00EAF6  502C               	movf	diet_press@dietTable+4,w,c
  5794  00EAF8  102D               	iorwf	diet_press@dietTable+5,w,c
  5795  00EAFA  A4D8               	btfss	status,2,c
  5796  00EAFC  D008               	goto	l332
  5797  00EAFE  502E               	movf	diet_press@dietTable+6,w,c
  5798  00EB00  102F               	iorwf	diet_press@dietTable+7,w,c
  5799  00EB02  A4D8               	btfss	status,2,c
  5800  00EB04  D004               	goto	l332
  5801                           
  5802                           ;standbyMode.c: 596: sum = 3;
  5803  00EB06  0E00               	movlw	0
  5804  00EB08  6E26               	movwf	diet_press@sum+1,c
  5805  00EB0A  0E03               	movlw	3
  5806  00EB0C  D16F               	goto	L42
  5807  00EB0E                     l332:
  5808                           
  5809                           ;standbyMode.c: 600: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5810  00EB0E  0E07               	movlw	7
  5811  00EB10  1828               	xorwf	diet_press@dietTable,w,c
  5812  00EB12  1029               	iorwf	diet_press@dietTable+1,w,c
  5813  00EB14  A4D8               	btfss	status,2,c
  5814  00EB16  D010               	goto	l334
  5815  00EB18  502A               	movf	diet_press@dietTable+2,w,c
  5816  00EB1A  102B               	iorwf	diet_press@dietTable+3,w,c
  5817  00EB1C  A4D8               	btfss	status,2,c
  5818  00EB1E  D00C               	goto	l334
  5819  00EB20  502C               	movf	diet_press@dietTable+4,w,c
  5820  00EB22  102D               	iorwf	diet_press@dietTable+5,w,c
  5821  00EB24  A4D8               	btfss	status,2,c
  5822  00EB26  D008               	goto	l334
  5823  00EB28  502E               	movf	diet_press@dietTable+6,w,c
  5824  00EB2A  102F               	iorwf	diet_press@dietTable+7,w,c
  5825  00EB2C  A4D8               	btfss	status,2,c
  5826  00EB2E  D004               	goto	l334
  5827                           
  5828                           ;standbyMode.c: 601: sum = 7;
  5829  00EB30  0E00               	movlw	0
  5830  00EB32  6E26               	movwf	diet_press@sum+1,c
  5831  00EB34  0E07               	movlw	7
  5832  00EB36  D15A               	goto	L42
  5833  00EB38                     l334:
  5834                           
  5835                           ;standbyMode.c: 605: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5836  00EB38  0E03               	movlw	3
  5837  00EB3A  1828               	xorwf	diet_press@dietTable,w,c
  5838  00EB3C  1029               	iorwf	diet_press@dietTable+1,w,c
  5839  00EB3E  A4D8               	btfss	status,2,c
  5840  00EB40  D011               	goto	l336
  5841  00EB42  0E07               	movlw	7
  5842  00EB44  182A               	xorwf	diet_press@dietTable+2,w,c
  5843  00EB46  102B               	iorwf	diet_press@dietTable+3,w,c
  5844  00EB48  A4D8               	btfss	status,2,c
  5845  00EB4A  D00C               	goto	l336
  5846  00EB4C  502C               	movf	diet_press@dietTable+4,w,c
  5847  00EB4E  102D               	iorwf	diet_press@dietTable+5,w,c
  5848  00EB50  A4D8               	btfss	status,2,c
  5849  00EB52  D008               	goto	l336
  5850  00EB54  502E               	movf	diet_press@dietTable+6,w,c
  5851  00EB56  102F               	iorwf	diet_press@dietTable+7,w,c
  5852  00EB58  A4D8               	btfss	status,2,c
  5853  00EB5A  D004               	goto	l336
  5854                           
  5855                           ;standbyMode.c: 606: sum = 10;
  5856  00EB5C  0E00               	movlw	0
  5857  00EB5E  6E26               	movwf	diet_press@sum+1,c
  5858  00EB60  0E0A               	movlw	10
  5859  00EB62  D144               	goto	L42
  5860  00EB64                     l336:
  5861                           
  5862                           ;standbyMode.c: 610: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5863  00EB64  0E03               	movlw	3
  5864  00EB66  1828               	xorwf	diet_press@dietTable,w,c
  5865  00EB68  1029               	iorwf	diet_press@dietTable+1,w,c
  5866  00EB6A  A4D8               	btfss	status,2,c
  5867  00EB6C  D011               	goto	l338
  5868  00EB6E  0E0C               	movlw	12
  5869  00EB70  182A               	xorwf	diet_press@dietTable+2,w,c
  5870  00EB72  102B               	iorwf	diet_press@dietTable+3,w,c
  5871  00EB74  A4D8               	btfss	status,2,c
  5872  00EB76  D00C               	goto	l338
  5873  00EB78  502C               	movf	diet_press@dietTable+4,w,c
  5874  00EB7A  102D               	iorwf	diet_press@dietTable+5,w,c
  5875  00EB7C  A4D8               	btfss	status,2,c
  5876  00EB7E  D008               	goto	l338
  5877  00EB80  502E               	movf	diet_press@dietTable+6,w,c
  5878  00EB82  102F               	iorwf	diet_press@dietTable+7,w,c
  5879  00EB84  A4D8               	btfss	status,2,c
  5880  00EB86  D004               	goto	l338
  5881                           
  5882                           ;standbyMode.c: 611: sum = 15;
  5883  00EB88  0E00               	movlw	0
  5884  00EB8A  6E26               	movwf	diet_press@sum+1,c
  5885  00EB8C  0E0F               	movlw	15
  5886  00EB8E  D12E               	goto	L42
  5887  00EB90                     l338:
  5888                           
  5889                           ;standbyMode.c: 615: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5890  00EB90  0E07               	movlw	7
  5891  00EB92  1828               	xorwf	diet_press@dietTable,w,c
  5892  00EB94  1029               	iorwf	diet_press@dietTable+1,w,c
  5893  00EB96  A4D8               	btfss	status,2,c
  5894  00EB98  D011               	goto	l340
  5895  00EB9A  0E0C               	movlw	12
  5896  00EB9C  182A               	xorwf	diet_press@dietTable+2,w,c
  5897  00EB9E  102B               	iorwf	diet_press@dietTable+3,w,c
  5898  00EBA0  A4D8               	btfss	status,2,c
  5899  00EBA2  D00C               	goto	l340
  5900  00EBA4  502C               	movf	diet_press@dietTable+4,w,c
  5901  00EBA6  102D               	iorwf	diet_press@dietTable+5,w,c
  5902  00EBA8  A4D8               	btfss	status,2,c
  5903  00EBAA  D008               	goto	l340
  5904  00EBAC  502E               	movf	diet_press@dietTable+6,w,c
  5905  00EBAE  102F               	iorwf	diet_press@dietTable+7,w,c
  5906  00EBB0  A4D8               	btfss	status,2,c
  5907  00EBB2  D004               	goto	l340
  5908                           
  5909                           ;standbyMode.c: 616: sum = 19;
  5910  00EBB4  0E00               	movlw	0
  5911  00EBB6  6E26               	movwf	diet_press@sum+1,c
  5912  00EBB8  0E13               	movlw	19
  5913  00EBBA  D118               	goto	L42
  5914  00EBBC                     l340:
  5915                           
  5916                           ;standbyMode.c: 620: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5917  00EBBC  0E03               	movlw	3
  5918  00EBBE  1828               	xorwf	diet_press@dietTable,w,c
  5919  00EBC0  1029               	iorwf	diet_press@dietTable+1,w,c
  5920  00EBC2  A4D8               	btfss	status,2,c
  5921  00EBC4  D012               	goto	l342
  5922  00EBC6  0E03               	movlw	3
  5923  00EBC8  182A               	xorwf	diet_press@dietTable+2,w,c
  5924  00EBCA  102B               	iorwf	diet_press@dietTable+3,w,c
  5925  00EBCC  A4D8               	btfss	status,2,c
  5926  00EBCE  D00D               	goto	l342
  5927  00EBD0  0E07               	movlw	7
  5928  00EBD2  182C               	xorwf	diet_press@dietTable+4,w,c
  5929  00EBD4  102D               	iorwf	diet_press@dietTable+5,w,c
  5930  00EBD6  A4D8               	btfss	status,2,c
  5931  00EBD8  D008               	goto	l342
  5932  00EBDA  502E               	movf	diet_press@dietTable+6,w,c
  5933  00EBDC  102F               	iorwf	diet_press@dietTable+7,w,c
  5934  00EBDE  A4D8               	btfss	status,2,c
  5935  00EBE0  D004               	goto	l342
  5936                           
  5937                           ;standbyMode.c: 621: sum = 13;
  5938  00EBE2  0E00               	movlw	0
  5939  00EBE4  6E26               	movwf	diet_press@sum+1,c
  5940  00EBE6  0E0D               	movlw	13
  5941  00EBE8  D101               	goto	L42
  5942  00EBEA                     l342:
  5943                           
  5944                           ;standbyMode.c: 625: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5945  00EBEA  0E03               	movlw	3
  5946  00EBEC  1828               	xorwf	diet_press@dietTable,w,c
  5947  00EBEE  1029               	iorwf	diet_press@dietTable+1,w,c
  5948  00EBF0  A4D8               	btfss	status,2,c
  5949  00EBF2  D012               	goto	l344
  5950  00EBF4  0E03               	movlw	3
  5951  00EBF6  182A               	xorwf	diet_press@dietTable+2,w,c
  5952  00EBF8  102B               	iorwf	diet_press@dietTable+3,w,c
  5953  00EBFA  A4D8               	btfss	status,2,c
  5954  00EBFC  D00D               	goto	l344
  5955  00EBFE  0E0C               	movlw	12
  5956  00EC00  182C               	xorwf	diet_press@dietTable+4,w,c
  5957  00EC02  102D               	iorwf	diet_press@dietTable+5,w,c
  5958  00EC04  A4D8               	btfss	status,2,c
  5959  00EC06  D008               	goto	l344
  5960  00EC08  502E               	movf	diet_press@dietTable+6,w,c
  5961  00EC0A  102F               	iorwf	diet_press@dietTable+7,w,c
  5962  00EC0C  A4D8               	btfss	status,2,c
  5963  00EC0E  D004               	goto	l344
  5964                           
  5965                           ;standbyMode.c: 626: sum = 18;
  5966  00EC10  0E00               	movlw	0
  5967  00EC12  6E26               	movwf	diet_press@sum+1,c
  5968  00EC14  0E12               	movlw	18
  5969  00EC16  D0EA               	goto	L42
  5970  00EC18                     l344:
  5971                           
  5972                           ;standbyMode.c: 630: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5973  00EC18  0E03               	movlw	3
  5974  00EC1A  1828               	xorwf	diet_press@dietTable,w,c
  5975  00EC1C  1029               	iorwf	diet_press@dietTable+1,w,c
  5976  00EC1E  A4D8               	btfss	status,2,c
  5977  00EC20  D012               	goto	l346
  5978  00EC22  0E07               	movlw	7
  5979  00EC24  182A               	xorwf	diet_press@dietTable+2,w,c
  5980  00EC26  102B               	iorwf	diet_press@dietTable+3,w,c
  5981  00EC28  A4D8               	btfss	status,2,c
  5982  00EC2A  D00D               	goto	l346
  5983  00EC2C  0E07               	movlw	7
  5984  00EC2E  182C               	xorwf	diet_press@dietTable+4,w,c
  5985  00EC30  102D               	iorwf	diet_press@dietTable+5,w,c
  5986  00EC32  A4D8               	btfss	status,2,c
  5987  00EC34  D008               	goto	l346
  5988  00EC36  502E               	movf	diet_press@dietTable+6,w,c
  5989  00EC38  102F               	iorwf	diet_press@dietTable+7,w,c
  5990  00EC3A  A4D8               	btfss	status,2,c
  5991  00EC3C  D004               	goto	l346
  5992                           
  5993                           ;standbyMode.c: 631: sum = 17;
  5994  00EC3E  0E00               	movlw	0
  5995  00EC40  6E26               	movwf	diet_press@sum+1,c
  5996  00EC42  0E11               	movlw	17
  5997  00EC44  D0D3               	goto	L42
  5998  00EC46                     l346:
  5999                           
  6000                           ;standbyMode.c: 635: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6001  00EC46  0E03               	movlw	3
  6002  00EC48  1828               	xorwf	diet_press@dietTable,w,c
  6003  00EC4A  1029               	iorwf	diet_press@dietTable+1,w,c
  6004  00EC4C  A4D8               	btfss	status,2,c
  6005  00EC4E  D012               	goto	l348
  6006  00EC50  0E0C               	movlw	12
  6007  00EC52  182A               	xorwf	diet_press@dietTable+2,w,c
  6008  00EC54  102B               	iorwf	diet_press@dietTable+3,w,c
  6009  00EC56  A4D8               	btfss	status,2,c
  6010  00EC58  D00D               	goto	l348
  6011  00EC5A  0E0C               	movlw	12
  6012  00EC5C  182C               	xorwf	diet_press@dietTable+4,w,c
  6013  00EC5E  102D               	iorwf	diet_press@dietTable+5,w,c
  6014  00EC60  A4D8               	btfss	status,2,c
  6015  00EC62  D008               	goto	l348
  6016  00EC64  502E               	movf	diet_press@dietTable+6,w,c
  6017  00EC66  102F               	iorwf	diet_press@dietTable+7,w,c
  6018  00EC68  A4D8               	btfss	status,2,c
  6019  00EC6A  D004               	goto	l348
  6020                           
  6021                           ;standbyMode.c: 636: sum = 27;
  6022  00EC6C  0E00               	movlw	0
  6023  00EC6E  6E26               	movwf	diet_press@sum+1,c
  6024  00EC70  0E1B               	movlw	27
  6025  00EC72  D0BC               	goto	L42
  6026  00EC74                     l348:
  6027                           
  6028                           ;standbyMode.c: 640: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6029  00EC74  0E03               	movlw	3
  6030  00EC76  1828               	xorwf	diet_press@dietTable,w,c
  6031  00EC78  1029               	iorwf	diet_press@dietTable+1,w,c
  6032  00EC7A  A4D8               	btfss	status,2,c
  6033  00EC7C  D012               	goto	l350
  6034  00EC7E  0E07               	movlw	7
  6035  00EC80  182A               	xorwf	diet_press@dietTable+2,w,c
  6036  00EC82  102B               	iorwf	diet_press@dietTable+3,w,c
  6037  00EC84  A4D8               	btfss	status,2,c
  6038  00EC86  D00D               	goto	l350
  6039  00EC88  0E0C               	movlw	12
  6040  00EC8A  182C               	xorwf	diet_press@dietTable+4,w,c
  6041  00EC8C  102D               	iorwf	diet_press@dietTable+5,w,c
  6042  00EC8E  A4D8               	btfss	status,2,c
  6043  00EC90  D008               	goto	l350
  6044  00EC92  502E               	movf	diet_press@dietTable+6,w,c
  6045  00EC94  102F               	iorwf	diet_press@dietTable+7,w,c
  6046  00EC96  A4D8               	btfss	status,2,c
  6047  00EC98  D004               	goto	l350
  6048                           
  6049                           ;standbyMode.c: 641: sum = 22;
  6050  00EC9A  0E00               	movlw	0
  6051  00EC9C  6E26               	movwf	diet_press@sum+1,c
  6052  00EC9E  0E16               	movlw	22
  6053  00ECA0  D0A5               	goto	L42
  6054  00ECA2                     l350:
  6055                           
  6056                           ;standbyMode.c: 645: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  6057  00ECA2  0E07               	movlw	7
  6058  00ECA4  1828               	xorwf	diet_press@dietTable,w,c
  6059  00ECA6  1029               	iorwf	diet_press@dietTable+1,w,c
  6060  00ECA8  A4D8               	btfss	status,2,c
  6061  00ECAA  D012               	goto	l352
  6062  00ECAC  0E07               	movlw	7
  6063  00ECAE  182A               	xorwf	diet_press@dietTable+2,w,c
  6064  00ECB0  102B               	iorwf	diet_press@dietTable+3,w,c
  6065  00ECB2  A4D8               	btfss	status,2,c
  6066  00ECB4  D00D               	goto	l352
  6067  00ECB6  0E0C               	movlw	12
  6068  00ECB8  182C               	xorwf	diet_press@dietTable+4,w,c
  6069  00ECBA  102D               	iorwf	diet_press@dietTable+5,w,c
  6070  00ECBC  A4D8               	btfss	status,2,c
  6071  00ECBE  D008               	goto	l352
  6072  00ECC0  502E               	movf	diet_press@dietTable+6,w,c
  6073  00ECC2  102F               	iorwf	diet_press@dietTable+7,w,c
  6074  00ECC4  A4D8               	btfss	status,2,c
  6075  00ECC6  D004               	goto	l352
  6076                           
  6077                           ;standbyMode.c: 646: sum = 26;
  6078  00ECC8  0E00               	movlw	0
  6079  00ECCA  6E26               	movwf	diet_press@sum+1,c
  6080  00ECCC  0E1A               	movlw	26
  6081  00ECCE  D08E               	goto	L42
  6082  00ECD0                     l352:
  6083                           
  6084                           ;standbyMode.c: 650: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  6085  00ECD0  0E07               	movlw	7
  6086  00ECD2  1828               	xorwf	diet_press@dietTable,w,c
  6087  00ECD4  1029               	iorwf	diet_press@dietTable+1,w,c
  6088  00ECD6  A4D8               	btfss	status,2,c
  6089  00ECD8  D012               	goto	l354
  6090  00ECDA  0E0C               	movlw	12
  6091  00ECDC  182A               	xorwf	diet_press@dietTable+2,w,c
  6092  00ECDE  102B               	iorwf	diet_press@dietTable+3,w,c
  6093  00ECE0  A4D8               	btfss	status,2,c
  6094  00ECE2  D00D               	goto	l354
  6095  00ECE4  0E0C               	movlw	12
  6096  00ECE6  182C               	xorwf	diet_press@dietTable+4,w,c
  6097  00ECE8  102D               	iorwf	diet_press@dietTable+5,w,c
  6098  00ECEA  A4D8               	btfss	status,2,c
  6099  00ECEC  D008               	goto	l354
  6100  00ECEE  502E               	movf	diet_press@dietTable+6,w,c
  6101  00ECF0  102F               	iorwf	diet_press@dietTable+7,w,c
  6102  00ECF2  A4D8               	btfss	status,2,c
  6103  00ECF4  D004               	goto	l354
  6104                           
  6105                           ;standbyMode.c: 651: sum = 31;
  6106  00ECF6  0E00               	movlw	0
  6107  00ECF8  6E26               	movwf	diet_press@sum+1,c
  6108  00ECFA  0E1F               	movlw	31
  6109  00ECFC  D077               	goto	L42
  6110  00ECFE                     l354:
  6111                           
  6112                           ;standbyMode.c: 655: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6113  00ECFE  0E03               	movlw	3
  6114  00ED00  1828               	xorwf	diet_press@dietTable,w,c
  6115  00ED02  1029               	iorwf	diet_press@dietTable+1,w,c
  6116  00ED04  A4D8               	btfss	status,2,c
  6117  00ED06  D013               	goto	l356
  6118  00ED08  0E03               	movlw	3
  6119  00ED0A  182A               	xorwf	diet_press@dietTable+2,w,c
  6120  00ED0C  102B               	iorwf	diet_press@dietTable+3,w,c
  6121  00ED0E  A4D8               	btfss	status,2,c
  6122  00ED10  D00E               	goto	l356
  6123  00ED12  0E07               	movlw	7
  6124  00ED14  182C               	xorwf	diet_press@dietTable+4,w,c
  6125  00ED16  102D               	iorwf	diet_press@dietTable+5,w,c
  6126  00ED18  A4D8               	btfss	status,2,c
  6127  00ED1A  D009               	goto	l356
  6128  00ED1C  0E0C               	movlw	12
  6129  00ED1E  182E               	xorwf	diet_press@dietTable+6,w,c
  6130  00ED20  102F               	iorwf	diet_press@dietTable+7,w,c
  6131  00ED22  A4D8               	btfss	status,2,c
  6132  00ED24  D004               	goto	l356
  6133                           
  6134                           ;standbyMode.c: 656: sum = 25;
  6135  00ED26  0E00               	movlw	0
  6136  00ED28  6E26               	movwf	diet_press@sum+1,c
  6137  00ED2A  0E19               	movlw	25
  6138  00ED2C  D05F               	goto	L42
  6139  00ED2E                     l356:
  6140                           
  6141                           ;standbyMode.c: 660: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  6142  00ED2E  0E03               	movlw	3
  6143  00ED30  1828               	xorwf	diet_press@dietTable,w,c
  6144  00ED32  1029               	iorwf	diet_press@dietTable+1,w,c
  6145  00ED34  A4D8               	btfss	status,2,c
  6146  00ED36  D013               	goto	l358
  6147  00ED38  0E07               	movlw	7
  6148  00ED3A  182A               	xorwf	diet_press@dietTable+2,w,c
  6149  00ED3C  102B               	iorwf	diet_press@dietTable+3,w,c
  6150  00ED3E  A4D8               	btfss	status,2,c
  6151  00ED40  D00E               	goto	l358
  6152  00ED42  0E07               	movlw	7
  6153  00ED44  182C               	xorwf	diet_press@dietTable+4,w,c
  6154  00ED46  102D               	iorwf	diet_press@dietTable+5,w,c
  6155  00ED48  A4D8               	btfss	status,2,c
  6156  00ED4A  D009               	goto	l358
  6157  00ED4C  0E0C               	movlw	12
  6158  00ED4E  182E               	xorwf	diet_press@dietTable+6,w,c
  6159  00ED50  102F               	iorwf	diet_press@dietTable+7,w,c
  6160  00ED52  A4D8               	btfss	status,2,c
  6161  00ED54  D004               	goto	l358
  6162                           
  6163                           ;standbyMode.c: 661: sum = 29;
  6164  00ED56  0E00               	movlw	0
  6165  00ED58  6E26               	movwf	diet_press@sum+1,c
  6166  00ED5A  0E1D               	movlw	29
  6167  00ED5C  D047               	goto	L42
  6168  00ED5E                     l358:
  6169                           
  6170                           ;standbyMode.c: 665: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  6171  00ED5E  0E03               	movlw	3
  6172  00ED60  1828               	xorwf	diet_press@dietTable,w,c
  6173  00ED62  1029               	iorwf	diet_press@dietTable+1,w,c
  6174  00ED64  A4D8               	btfss	status,2,c
  6175  00ED66  D013               	goto	l360
  6176  00ED68  0E07               	movlw	7
  6177  00ED6A  182A               	xorwf	diet_press@dietTable+2,w,c
  6178  00ED6C  102B               	iorwf	diet_press@dietTable+3,w,c
  6179  00ED6E  A4D8               	btfss	status,2,c
  6180  00ED70  D00E               	goto	l360
  6181  00ED72  0E0C               	movlw	12
  6182  00ED74  182C               	xorwf	diet_press@dietTable+4,w,c
  6183  00ED76  102D               	iorwf	diet_press@dietTable+5,w,c
  6184  00ED78  A4D8               	btfss	status,2,c
  6185  00ED7A  D009               	goto	l360
  6186  00ED7C  0E0C               	movlw	12
  6187  00ED7E  182E               	xorwf	diet_press@dietTable+6,w,c
  6188  00ED80  102F               	iorwf	diet_press@dietTable+7,w,c
  6189  00ED82  A4D8               	btfss	status,2,c
  6190  00ED84  D004               	goto	l360
  6191                           
  6192                           ;standbyMode.c: 666: sum = 34;
  6193  00ED86  0E00               	movlw	0
  6194  00ED88  6E26               	movwf	diet_press@sum+1,c
  6195  00ED8A  0E22               	movlw	34
  6196  00ED8C  D02F               	goto	L42
  6197  00ED8E                     l360:
  6198                           
  6199                           ;standbyMode.c: 670: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6200  00ED8E  0E03               	movlw	3
  6201  00ED90  1828               	xorwf	diet_press@dietTable,w,c
  6202  00ED92  1029               	iorwf	diet_press@dietTable+1,w,c
  6203  00ED94  A4D8               	btfss	status,2,c
  6204  00ED96  D013               	goto	l362
  6205  00ED98  0E0C               	movlw	12
  6206  00ED9A  182A               	xorwf	diet_press@dietTable+2,w,c
  6207  00ED9C  102B               	iorwf	diet_press@dietTable+3,w,c
  6208  00ED9E  A4D8               	btfss	status,2,c
  6209  00EDA0  D00E               	goto	l362
  6210  00EDA2  0E0C               	movlw	12
  6211  00EDA4  182C               	xorwf	diet_press@dietTable+4,w,c
  6212  00EDA6  102D               	iorwf	diet_press@dietTable+5,w,c
  6213  00EDA8  A4D8               	btfss	status,2,c
  6214  00EDAA  D009               	goto	l362
  6215  00EDAC  0E0C               	movlw	12
  6216  00EDAE  182E               	xorwf	diet_press@dietTable+6,w,c
  6217  00EDB0  102F               	iorwf	diet_press@dietTable+7,w,c
  6218  00EDB2  A4D8               	btfss	status,2,c
  6219  00EDB4  D004               	goto	l362
  6220                           
  6221                           ;standbyMode.c: 671: sum = 39;
  6222  00EDB6  0E00               	movlw	0
  6223  00EDB8  6E26               	movwf	diet_press@sum+1,c
  6224  00EDBA  0E27               	movlw	39
  6225  00EDBC  D017               	goto	L42
  6226  00EDBE                     l362:
  6227                           
  6228                           ;standbyMode.c: 675: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  6229  00EDBE  0E07               	movlw	7
  6230  00EDC0  1828               	xorwf	diet_press@dietTable,w,c
  6231  00EDC2  1029               	iorwf	diet_press@dietTable+1,w,c
  6232  00EDC4  A4D8               	btfss	status,2,c
  6233  00EDC6  D014               	goto	l364
  6234  00EDC8  0E0C               	movlw	12
  6235  00EDCA  182A               	xorwf	diet_press@dietTable+2,w,c
  6236  00EDCC  102B               	iorwf	diet_press@dietTable+3,w,c
  6237  00EDCE  A4D8               	btfss	status,2,c
  6238  00EDD0  D00F               	goto	l364
  6239  00EDD2  0E0C               	movlw	12
  6240  00EDD4  182C               	xorwf	diet_press@dietTable+4,w,c
  6241  00EDD6  102D               	iorwf	diet_press@dietTable+5,w,c
  6242  00EDD8  A4D8               	btfss	status,2,c
  6243  00EDDA  D00A               	goto	l364
  6244  00EDDC  0E0C               	movlw	12
  6245  00EDDE  182E               	xorwf	diet_press@dietTable+6,w,c
  6246  00EDE0  102F               	iorwf	diet_press@dietTable+7,w,c
  6247  00EDE2  A4D8               	btfss	status,2,c
  6248  00EDE4  D005               	goto	l364
  6249                           
  6250                           ;standbyMode.c: 676: sum = 43;
  6251  00EDE6  0E00               	movlw	0
  6252  00EDE8  6E26               	movwf	diet_press@sum+1,c
  6253  00EDEA  0E2B               	movlw	43
  6254  00EDEC                     L42:
  6255  00EDEC  6E25               	movwf	diet_press@sum,c
  6256                           
  6257                           ;standbyMode.c: 677: }
  6258  00EDEE  D02A               	goto	l365
  6259  00EDF0                     l364:
  6260                           
  6261                           ;standbyMode.c: 680: else{
  6262                           ;standbyMode.c: 681: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6263  00EDF0  0E01               	movlw	1
  6264  00EDF2  ECB8  F06E         	call	_lcdInst
  6265  00EDF6  0EC3               	movlw	195
  6266  00EDF8  6E1B               	movwf	??_diet_press& (0+255),c
  6267  00EDFA  0ECD               	movlw	205
  6268  00EDFC                     u6097:
  6269  00EDFC  2EE8               	decfsz	wreg,f,c
  6270  00EDFE  D7FE               	bra	u6097
  6271  00EE00  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6272  00EE02  D7FC               	bra	u6097
  6273  00EE04  F000               	nop	
  6274                           
  6275                           ;standbyMode.c: 682: printf("Invalid diet!");
  6276  00EE06  0E3A               	movlw	low STR_25
  6277  00EE08  6E0D               	movwf	printf@f,c
  6278  00EE0A  0EFF               	movlw	high STR_25
  6279  00EE0C  6E0E               	movwf	printf@f+1,c
  6280  00EE0E  EC72  F070         	call	_printf	;wreg free
  6281                           
  6282                           ;standbyMode.c: 683: lcdInst(0xC0);;
  6283  00EE12  0EC0               	movlw	192
  6284  00EE14  ECB8  F06E         	call	_lcdInst
  6285                           
  6286                           ;standbyMode.c: 684: printf("Try again.");
  6287  00EE18  0EAB               	movlw	low STR_22
  6288  00EE1A  6E0D               	movwf	printf@f,c
  6289  00EE1C  0EFF               	movlw	high STR_22
  6290  00EE1E  6E0E               	movwf	printf@f+1,c
  6291  00EE20  EC72  F070         	call	_printf	;wreg free
  6292                           
  6293                           ;standbyMode.c: 685: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6294  00EE24  0E33               	movlw	51
  6295  00EE26  6E1C               	movwf	(??_diet_press+1)& (0+255),c
  6296  00EE28  0EBB               	movlw	187
  6297  00EE2A  6E1B               	movwf	??_diet_press& (0+255),c
  6298  00EE2C  0EE0               	movlw	224
  6299  00EE2E                     u6107:
  6300  00EE2E  2EE8               	decfsz	wreg,f,c
  6301  00EE30  D7FE               	bra	u6107
  6302  00EE32  2E1B               	decfsz	??_diet_press& (0+255),f,c
  6303  00EE34  D7FC               	bra	u6107
  6304  00EE36  2E1C               	decfsz	(??_diet_press+1)& (0+255),f,c
  6305  00EE38  D7FA               	bra	u6107
  6306                           
  6307                           ;standbyMode.c: 686: sum = 0;
  6308  00EE3A  0E00               	movlw	0
  6309  00EE3C  6E26               	movwf	diet_press@sum+1,c
  6310  00EE3E  0E00               	movlw	0
  6311  00EE40  6E25               	movwf	diet_press@sum,c
  6312                           
  6313                           ;standbyMode.c: 687: goto START;
  6314  00EE42  D572               	goto	_diet_press
  6315  00EE44                     l365:
  6316                           
  6317                           ;standbyMode.c: 688: }
  6318                           ;standbyMode.c: 689: return sum;
  6319  00EE44  C025  F019         	movff	diet_press@sum,?_diet_press
  6320  00EE48  C026  F01A         	movff	diet_press@sum+1,?_diet_press+1
  6321  00EE4C  0012               	return		;funcret
  6322  00EE4E                     __end_of_diet_press:
  6323                           	opt stack 0
  6324                           tblptru	equ	0xFF8
  6325                           tblptrh	equ	0xFF7
  6326                           tblptrl	equ	0xFF6
  6327                           tablat	equ	0xFF5
  6328                           prodh	equ	0xFF4
  6329                           prodl	equ	0xFF3
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           plusw1	equ	0xFE3
  6333                           postinc2	equ	0xFDE
  6334                           postdec2	equ	0xFDD
  6335                           plusw2	equ	0xFDB
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _printf *****************
  6341 ;; Defined at:
  6342 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6345 ;;		 -> STR_54(11), STR_53(13), STR_52(11), STR_51(13), 
  6346 ;;		 -> STR_50(11), STR_49(8), STR_48(15), STR_47(16), 
  6347 ;;		 -> STR_46(10), STR_45(8), STR_44(15), STR_43(16), 
  6348 ;;		 -> STR_42(10), STR_41(16), STR_40(16), STR_39(17), 
  6349 ;;		 -> STR_38(13), STR_37(17), STR_36(14), STR_35(11), 
  6350 ;;		 -> STR_34(11), STR_33(16), STR_32(16), STR_31(17), 
  6351 ;;		 -> STR_30(17), STR_29(8), STR_28(15), STR_27(15), 
  6352 ;;		 -> STR_26(11), STR_25(14), STR_24(16), STR_23(16), 
  6353 ;;		 -> STR_22(11), STR_21(14), STR_20(16), STR_19(16), 
  6354 ;;		 -> STR_18(16), STR_17(13), STR_16(13), STR_15(15), 
  6355 ;;		 -> STR_14(16), STR_13(16), STR_12(18), STR_11(6), 
  6356 ;;		 -> STR_10(16), STR_9(5), STR_8(16), STR_7(9), 
  6357 ;;		 -> STR_6(17), STR_5(7), STR_4(9), STR_3(17), 
  6358 ;;		 -> STR_2(11), STR_1(16), 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  tmpval          4    0        struct .
  6361 ;;  cp              3    0        PTR const unsigned char 
  6362 ;;  val             2   21[COMRAM] unsigned int 
  6363 ;;  ap              2   17[COMRAM] PTR void [1]
  6364 ;;		 -> ?_printf(2), 
  6365 ;;  len             2    0        unsigned int 
  6366 ;;  c               1   23[COMRAM] char 
  6367 ;;  prec            1   20[COMRAM] char 
  6368 ;;  flag            1   19[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2   12[COMRAM] int 
  6371 ;; Registers used:
  6372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;Total ram usage:       12 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    2
  6385 ;; This function calls:
  6386 ;;		___lwdiv
  6387 ;;		___lwmod
  6388 ;;		_putch
  6389 ;; This function is called by:
  6390 ;;		_viewLogs
  6391 ;;		_food_press
  6392 ;;		_diet_press
  6393 ;;		_which_drawer
  6394 ;;		_standbyMode
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text9
  6399  00E0E4                     __ptext9:
  6400                           	opt stack 0
  6401  00E0E4                     _printf:
  6402                           	opt stack 26
  6403                           
  6404                           ;doprnt.c: 466: va_list ap;
  6405                           ;doprnt.c: 499: signed char c;
  6406                           ;doprnt.c: 506: signed char prec;
  6407                           ;doprnt.c: 508: unsigned char flag;
  6408                           ;doprnt.c: 523: union {
  6409                           ;doprnt.c: 524: unsigned long vd;
  6410                           ;doprnt.c: 525: double integ;
  6411                           ;doprnt.c: 526: } tmpval;
  6412                           ;doprnt.c: 528: unsigned int val;
  6413                           ;doprnt.c: 529: unsigned len;
  6414                           ;doprnt.c: 530: const char * cp;
  6415                           ;doprnt.c: 533: *ap = __va_start();
  6416                           
  6417                           ;incstack = 0
  6418  00E0E4  0E0F               	movlw	low (?_printf+2)
  6419  00E0E6  6E12               	movwf	printf@ap,c
  6420  00E0E8  0E00               	movlw	high (?_printf+2)
  6421  00E0EA  6E13               	movwf	printf@ap+1,c
  6422                           
  6423                           ;doprnt.c: 536: while(c = *f++) {
  6424  00E0EC  D07D               	goto	u3810
  6425  00E0EE                     
  6426                           ;doprnt.c: 538: if(c != '%')
  6427  00E0EE  0E25               	movlw	37
  6428  00E0F0  1818               	xorwf	printf@c,w,c
  6429  00E0F2  B4D8               	btfsc	status,2,c
  6430  00E0F4  D004               	goto	l502
  6431                           
  6432                           ;doprnt.c: 540: {
  6433                           ;doprnt.c: 541: (putch(c) );
  6434  00E0F6  5018               	movf	printf@c,w,c
  6435  00E0F8  ECC2  F06E         	call	_putch
  6436                           
  6437                           ;doprnt.c: 542: continue;
  6438  00E0FC  D075               	goto	u3810
  6439  00E0FE                     l502:
  6440                           
  6441                           ;doprnt.c: 543: }
  6442                           ;doprnt.c: 548: flag = 0;
  6443  00E0FE  0E00               	movlw	0
  6444  00E100  6E14               	movwf	printf@flag,c
  6445                           
  6446                           ;doprnt.c: 822: }
  6447                           
  6448                           ;doprnt.c: 813: continue;
  6449                           
  6450                           ;doprnt.c: 802: default:
  6451                           
  6452                           ;doprnt.c: 698: case 'i':
  6453                           ;doprnt.c: 699: break;
  6454                           
  6455                           ;doprnt.c: 697: case 'd':
  6456                           
  6457                           ;doprnt.c: 638: goto alldone;
  6458                           
  6459                           ;doprnt.c: 637: case 0:
  6460                           
  6461                           ;doprnt.c: 635: switch(c = *f++) {
  6462  00E102  C00D  FFF6         	movff	printf@f,tblptrl
  6463  00E106  C00E  FFF7         	movff	printf@f+1,tblptrh
  6464  00E10A  4A0D               	infsnz	printf@f,f,c
  6465  00E10C  2A0E               	incf	printf@f+1,f,c
  6466  00E10E                     	if	0	;tblptru may be non-zero
  6467  00E10E                     	endif
  6468  00E10E                     	if	0	;tblptru may be non-zero
  6469  00E10E                     	endif
  6470  00E10E  0008               	tblrd		*
  6471  00E110  CFF5 F018          	movff	tablat,printf@c
  6472  00E114  5018               	movf	printf@c,w,c
  6473                           
  6474                           ; Switch size 1, requested type "space"
  6475                           ; Number of cases is 3, Range of values is 0 to 105
  6476                           ; switch strategies available:
  6477                           ; Name         Instructions Cycles
  6478                           ; simple_byte           10     6 (average)
  6479                           ;	Chosen strategy is simple_byte
  6480  00E116  0A00               	xorlw	0	; case 0
  6481  00E118  B4D8               	btfsc	status,2,c
  6482  00E11A  0012               	return	
  6483  00E11C  0A64               	xorlw	100	; case 100
  6484  00E11E  B4D8               	btfsc	status,2,c
  6485  00E120  D003               	goto	l508
  6486  00E122  0A0D               	xorlw	13	; case 105
  6487  00E124  A4D8               	btfss	status,2,c
  6488  00E126  D060               	goto	u3810
  6489  00E128                     l508:
  6490                           
  6491                           ;doprnt.c: 1253: {
  6492                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6493  00E128  C012  FFD9         	movff	printf@ap,fsr2l
  6494  00E12C  C013  FFDA         	movff	printf@ap+1,fsr2h
  6495  00E130  CFDE F016          	movff	postinc2,printf@val
  6496  00E134  CFDD F017          	movff	postdec2,printf@val+1
  6497  00E138  0E02               	movlw	2
  6498  00E13A  2612               	addwf	printf@ap,f,c
  6499  00E13C  0E00               	movlw	0
  6500  00E13E  2213               	addwfc	printf@ap+1,f,c
  6501                           
  6502                           ;doprnt.c: 1261: if((int)val < 0) {
  6503  00E140  AE17               	btfss	printf@val+1,7,c
  6504  00E142  D006               	goto	l510
  6505                           
  6506                           ;doprnt.c: 1262: flag |= 0x03;
  6507  00E144  0E03               	movlw	3
  6508  00E146  1214               	iorwf	printf@flag,f,c
  6509                           
  6510                           ;doprnt.c: 1263: val = -val;
  6511  00E148  6C16               	negf	printf@val,c
  6512  00E14A  1E17               	comf	printf@val+1,f,c
  6513  00E14C  B0D8               	btfsc	status,0,c
  6514  00E14E  2A17               	incf	printf@val+1,f,c
  6515  00E150                     l510:
  6516                           
  6517                           ;doprnt.c: 1264: }
  6518                           ;doprnt.c: 1266: }
  6519                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6520  00E150  0E01               	movlw	1
  6521  00E152  6E18               	movwf	printf@c,c
  6522  00E154                     l2895:
  6523  00E154  0E05               	movlw	5
  6524  00E156  1818               	xorwf	printf@c,w,c
  6525  00E158  B4D8               	btfsc	status,2,c
  6526  00E15A  D012               	goto	u3790
  6527                           
  6528                           ;doprnt.c: 1306: if(val < dpowers[c])
  6529  00E15C  5018               	movf	printf@c,w,c
  6530  00E15E  0D02               	mullw	2
  6531  00E160  0ED9               	movlw	low _dpowers
  6532  00E162  24F3               	addwf	prodl,w,c
  6533  00E164  6EF6               	movwf	tblptrl,c
  6534  00E166  0EFD               	movlw	high _dpowers
  6535  00E168  20F4               	addwfc	prodh,w,c
  6536  00E16A  6EF7               	movwf	tblptrh,c
  6537  00E16C                     	if	0	;There are less than 3 active tblptr bytes
  6538  00E16C                     	endif
  6539  00E16C  0009               	tblrd		*+
  6540  00E16E  50F5               	movf	tablat,w,c
  6541  00E170  5C16               	subwf	printf@val,w,c
  6542  00E172  0009               	tblrd		*+
  6543  00E174  50F5               	movf	tablat,w,c
  6544  00E176  5817               	subwfb	printf@val+1,w,c
  6545  00E178  A0D8               	btfss	status,0,c
  6546  00E17A  D002               	goto	u3790
  6547                           
  6548                           ;doprnt.c: 1307: break;
  6549  00E17C  2A18               	incf	printf@c,f,c
  6550  00E17E  D7EA               	goto	l2895
  6551  00E180                     u3790:
  6552                           
  6553                           ;doprnt.c: 1422: {
  6554                           ;doprnt.c: 1438: if(flag & 0x03)
  6555  00E180  C014  F011         	movff	printf@flag,??_printf
  6556  00E184  0E03               	movlw	3
  6557  00E186  1611               	andwf	??_printf,f,c
  6558  00E188  B4D8               	btfsc	status,2,c
  6559  00E18A  D003               	goto	l514
  6560                           
  6561                           ;doprnt.c: 1439: (putch('-') );
  6562  00E18C  0E2D               	movlw	45
  6563  00E18E  ECC2  F06E         	call	_putch
  6564  00E192                     l514:
  6565                           
  6566                           ;doprnt.c: 1469: }
  6567                           ;doprnt.c: 1472: prec = c;
  6568  00E192  C018  F015         	movff	printf@c,printf@prec
  6569                           
  6570                           ;doprnt.c: 1474: while(prec--) {
  6571  00E196  D024               	goto	l515
  6572  00E198                     
  6573                           ;doprnt.c: 1478: {
  6574                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6575  00E198  5015               	movf	printf@prec,w,c
  6576  00E19A  0D02               	mullw	2
  6577  00E19C  0ED9               	movlw	low _dpowers
  6578  00E19E  24F3               	addwf	prodl,w,c
  6579  00E1A0  6EF6               	movwf	tblptrl,c
  6580  00E1A2  0EFD               	movlw	high _dpowers
  6581  00E1A4  20F4               	addwfc	prodh,w,c
  6582  00E1A6  6EF7               	movwf	tblptrh,c
  6583  00E1A8                     	if	0	;There are less than 3 active tblptr bytes
  6584  00E1A8                     	endif
  6585  00E1A8  0009               	tblrd		*+
  6586  00E1AA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6587  00E1AE  000A               	tblrd		*-
  6588  00E1B0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6589  00E1B4  C016  F001         	movff	printf@val,___lwdiv@dividend
  6590  00E1B8  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  6591  00E1BC  EC3A  F06F         	call	___lwdiv	;wreg free
  6592  00E1C0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6593  00E1C4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6594  00E1C8  0E00               	movlw	0
  6595  00E1CA  6E0B               	movwf	___lwmod@divisor+1,c
  6596  00E1CC  0E0A               	movlw	10
  6597  00E1CE  6E0A               	movwf	___lwmod@divisor,c
  6598  00E1D0  ECF3  F06E         	call	___lwmod	;wreg free
  6599  00E1D4  5008               	movf	?___lwmod,w,c
  6600  00E1D6  0F30               	addlw	48
  6601  00E1D8  6E18               	movwf	printf@c,c
  6602                           
  6603                           ;doprnt.c: 1523: }
  6604                           ;doprnt.c: 1524: (putch(c) );
  6605  00E1DA  5018               	movf	printf@c,w,c
  6606  00E1DC  ECC2  F06E         	call	_putch
  6607  00E1E0                     l515:
  6608  00E1E0  0615               	decf	printf@prec,f,c
  6609  00E1E2  2815               	incf	printf@prec,w,c
  6610  00E1E4  A4D8               	btfss	status,2,c
  6611  00E1E6  D7D8               	goto	l516
  6612  00E1E8                     u3810:
  6613  00E1E8  C00D  FFF6         	movff	printf@f,tblptrl
  6614  00E1EC  C00E  FFF7         	movff	printf@f+1,tblptrh
  6615  00E1F0  4A0D               	infsnz	printf@f,f,c
  6616  00E1F2  2A0E               	incf	printf@f+1,f,c
  6617  00E1F4                     	if	0	;tblptru may be non-zero
  6618  00E1F4                     	endif
  6619  00E1F4                     	if	0	;tblptru may be non-zero
  6620  00E1F4                     	endif
  6621  00E1F4  0008               	tblrd		*
  6622  00E1F6  CFF5 F018          	movff	tablat,printf@c
  6623  00E1FA  5018               	movf	printf@c,w,c
  6624  00E1FC  B4D8               	btfsc	status,2,c
  6625  00E1FE  0012               	return	
  6626  00E200  D776               	goto	l501
  6627  00E202                     __end_of_printf:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           plusw1	equ	0xFE3
  6638                           postinc2	equ	0xFDE
  6639                           postdec2	equ	0xFDD
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _putch *****************
  6646 ;; Defined at:
  6647 ;;		line 73 in file "standbyMode.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  data            1    wreg     unsigned char 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  data            1    2[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;Total ram usage:        1 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    1
  6668 ;; This function calls:
  6669 ;;		_lcdNibble
  6670 ;; This function is called by:
  6671 ;;		_viewLogs
  6672 ;;		_food_press
  6673 ;;		_diet_press
  6674 ;;		_which_drawer
  6675 ;;		_printf
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text10
  6680  00DD84                     __ptext10:
  6681                           	opt stack 0
  6682  00DD84                     _putch:
  6683                           	opt stack 27
  6684                           
  6685                           ;incstack = 0
  6686                           ;putch@data stored from wreg
  6687  00DD84  6E03               	movwf	putch@data,c
  6688                           
  6689                           ;standbyMode.c: 81: LATDbits.LATD2 = 1;
  6690  00DD86  848C               	bsf	3980,2,c	;volatile
  6691                           
  6692                           ;standbyMode.c: 82: lcdNibble(data);
  6693  00DD88  5003               	movf	putch@data,w,c
  6694  00DD8A  EC63  F06F         	call	_lcdNibble
  6695                           
  6696                           ;standbyMode.c: 83: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6697  00DD8E  0EC8               	movlw	200
  6698  00DD90                     u6117:
  6699  00DD90  D000               	nop2	
  6700  00DD92  2EE8               	decfsz	wreg,f,c
  6701  00DD94  D7FD               	bra	u6117
  6702  00DD96  0012               	return		;funcret
  6703  00DD98                     __end_of_putch:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           postinc0	equ	0xFEE
  6712                           wreg	equ	0xFE8
  6713                           plusw1	equ	0xFE3
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function ___lwmod *****************
  6722 ;; Defined at:
  6723 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  dividend        2    7[COMRAM] unsigned int 
  6726 ;;  divisor         2    9[COMRAM] unsigned int 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;  counter         1   11[COMRAM] unsigned char 
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  2    7[COMRAM] unsigned int 
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6738 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;Total ram usage:        5 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; This function calls:
  6745 ;;		Nothing
  6746 ;; This function is called by:
  6747 ;;		_printf
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text11
  6752  00DDE6                     __ptext11:
  6753                           	opt stack 0
  6754  00DDE6                     ___lwmod:
  6755                           	opt stack 27
  6756                           
  6757                           ;incstack = 0
  6758  00DDE6  500A               	movf	___lwmod@divisor,w,c
  6759  00DDE8  100B               	iorwf	___lwmod@divisor+1,w,c
  6760  00DDEA  B4D8               	btfsc	status,2,c
  6761  00DDEC  D018               	goto	l938
  6762  00DDEE  0E01               	movlw	1
  6763  00DDF0  6E0C               	movwf	___lwmod@counter,c
  6764  00DDF2  D004               	goto	l933
  6765  00DDF4  90D8               	bcf	status,0,c
  6766  00DDF6  360A               	rlcf	___lwmod@divisor,f,c
  6767  00DDF8  360B               	rlcf	___lwmod@divisor+1,f,c
  6768  00DDFA  2A0C               	incf	___lwmod@counter,f,c
  6769  00DDFC                     l933:
  6770  00DDFC  AE0B               	btfss	___lwmod@divisor+1,7,c
  6771  00DDFE  D7FA               	goto	l934
  6772  00DE00                     u2820:
  6773  00DE00  500A               	movf	___lwmod@divisor,w,c
  6774  00DE02  5C08               	subwf	___lwmod@dividend,w,c
  6775  00DE04  500B               	movf	___lwmod@divisor+1,w,c
  6776  00DE06  5809               	subwfb	___lwmod@dividend+1,w,c
  6777  00DE08  A0D8               	btfss	status,0,c
  6778  00DE0A  D004               	goto	l937
  6779  00DE0C  500A               	movf	___lwmod@divisor,w,c
  6780  00DE0E  5E08               	subwf	___lwmod@dividend,f,c
  6781  00DE10  500B               	movf	___lwmod@divisor+1,w,c
  6782  00DE12  5A09               	subwfb	___lwmod@dividend+1,f,c
  6783  00DE14                     l937:
  6784  00DE14  90D8               	bcf	status,0,c
  6785  00DE16  320B               	rrcf	___lwmod@divisor+1,f,c
  6786  00DE18  320A               	rrcf	___lwmod@divisor,f,c
  6787  00DE1A  2E0C               	decfsz	___lwmod@counter,f,c
  6788  00DE1C  D7F1               	goto	u2820
  6789  00DE1E                     l938:
  6790  00DE1E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6791  00DE22  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6792  00DE26  0012               	return		;funcret
  6793  00DE28                     __end_of___lwmod:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           postinc0	equ	0xFEE
  6802                           wreg	equ	0xFE8
  6803                           plusw1	equ	0xFE3
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           plusw2	equ	0xFDB
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function ___lwdiv *****************
  6812 ;; Defined at:
  6813 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  dividend        2    0[COMRAM] unsigned int 
  6816 ;;  divisor         2    2[COMRAM] unsigned int 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  quotient        2    4[COMRAM] unsigned int 
  6819 ;;  counter         1    6[COMRAM] unsigned char 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  2    0[COMRAM] unsigned int 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;Total ram usage:        7 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_printf
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text12
  6843  00DE74                     __ptext12:
  6844                           	opt stack 0
  6845  00DE74                     ___lwdiv:
  6846                           	opt stack 27
  6847                           
  6848                           ;incstack = 0
  6849  00DE74  0E00               	movlw	0
  6850  00DE76  6E06               	movwf	___lwdiv@quotient+1,c
  6851  00DE78  0E00               	movlw	0
  6852  00DE7A  6E05               	movwf	___lwdiv@quotient,c
  6853  00DE7C  5003               	movf	___lwdiv@divisor,w,c
  6854  00DE7E  1004               	iorwf	___lwdiv@divisor+1,w,c
  6855  00DE80  B4D8               	btfsc	status,2,c
  6856  00DE82  D01C               	goto	l928
  6857  00DE84  0E01               	movlw	1
  6858  00DE86  6E07               	movwf	___lwdiv@counter,c
  6859  00DE88  D004               	goto	l923
  6860  00DE8A  90D8               	bcf	status,0,c
  6861  00DE8C  3603               	rlcf	___lwdiv@divisor,f,c
  6862  00DE8E  3604               	rlcf	___lwdiv@divisor+1,f,c
  6863  00DE90  2A07               	incf	___lwdiv@counter,f,c
  6864  00DE92                     l923:
  6865  00DE92  AE04               	btfss	___lwdiv@divisor+1,7,c
  6866  00DE94  D7FA               	goto	l924
  6867  00DE96                     u2790:
  6868  00DE96  90D8               	bcf	status,0,c
  6869  00DE98  3605               	rlcf	___lwdiv@quotient,f,c
  6870  00DE9A  3606               	rlcf	___lwdiv@quotient+1,f,c
  6871  00DE9C  5003               	movf	___lwdiv@divisor,w,c
  6872  00DE9E  5C01               	subwf	___lwdiv@dividend,w,c
  6873  00DEA0  5004               	movf	___lwdiv@divisor+1,w,c
  6874  00DEA2  5802               	subwfb	___lwdiv@dividend+1,w,c
  6875  00DEA4  A0D8               	btfss	status,0,c
  6876  00DEA6  D005               	goto	l927
  6877  00DEA8  5003               	movf	___lwdiv@divisor,w,c
  6878  00DEAA  5E01               	subwf	___lwdiv@dividend,f,c
  6879  00DEAC  5004               	movf	___lwdiv@divisor+1,w,c
  6880  00DEAE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6881  00DEB0  8005               	bsf	___lwdiv@quotient,0,c
  6882  00DEB2                     l927:
  6883  00DEB2  90D8               	bcf	status,0,c
  6884  00DEB4  3204               	rrcf	___lwdiv@divisor+1,f,c
  6885  00DEB6  3203               	rrcf	___lwdiv@divisor,f,c
  6886  00DEB8  2E07               	decfsz	___lwdiv@counter,f,c
  6887  00DEBA  D7ED               	goto	u2790
  6888  00DEBC                     l928:
  6889  00DEBC  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6890  00DEC0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6891  00DEC4  0012               	return		;funcret
  6892  00DEC6                     __end_of___lwdiv:
  6893                           	opt stack 0
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           postinc0	equ	0xFEE
  6901                           wreg	equ	0xFE8
  6902                           plusw1	equ	0xFE3
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           plusw2	equ	0xFDB
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _initLCD *****************
  6911 ;; Defined at:
  6912 ;;		line 28 in file "standbyMode.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;Total ram usage:        1 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    2
  6933 ;; This function calls:
  6934 ;;		_lcdInst
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text13
  6941  00DE28                     __ptext13:
  6942                           	opt stack 0
  6943  00DE28                     _initLCD:
  6944                           	opt stack 28
  6945                           
  6946                           ;standbyMode.c: 36: _delay((unsigned long)((15)*(40000000/4000.0)));
  6947                           
  6948                           ;incstack = 0
  6949  00DE28  0EC3               	movlw	195
  6950  00DE2A  6E04               	movwf	??_initLCD& (0+255),c
  6951  00DE2C  0ECD               	movlw	205
  6952  00DE2E                     u6127:
  6953  00DE2E  2EE8               	decfsz	wreg,f,c
  6954  00DE30  D7FE               	bra	u6127
  6955  00DE32  2E04               	decfsz	??_initLCD& (0+255),f,c
  6956  00DE34  D7FC               	bra	u6127
  6957  00DE36  F000               	nop	
  6958                           
  6959                           ;standbyMode.c: 37: lcdInst(0b00110011);
  6960  00DE38  0E33               	movlw	51
  6961  00DE3A  ECB8  F06E         	call	_lcdInst
  6962                           
  6963                           ;standbyMode.c: 38: lcdInst(0b00110010);
  6964  00DE3E  0E32               	movlw	50
  6965  00DE40  ECB8  F06E         	call	_lcdInst
  6966                           
  6967                           ;standbyMode.c: 39: lcdInst(0b00101000);
  6968  00DE44  0E28               	movlw	40
  6969  00DE46  ECB8  F06E         	call	_lcdInst
  6970                           
  6971                           ;standbyMode.c: 40: lcdInst(0b00001111);
  6972  00DE4A  0E0F               	movlw	15
  6973  00DE4C  ECB8  F06E         	call	_lcdInst
  6974                           
  6975                           ;standbyMode.c: 41: lcdInst(0b00000110);
  6976  00DE50  0E06               	movlw	6
  6977  00DE52  ECB8  F06E         	call	_lcdInst
  6978                           
  6979                           ;standbyMode.c: 42: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6980  00DE56  0E01               	movlw	1
  6981  00DE58  ECB8  F06E         	call	_lcdInst
  6982  00DE5C  0EC3               	movlw	195
  6983  00DE5E  6E04               	movwf	??_initLCD& (0+255),c
  6984  00DE60  0ECD               	movlw	205
  6985  00DE62                     u6137:
  6986  00DE62  2EE8               	decfsz	wreg,f,c
  6987  00DE64  D7FE               	bra	u6137
  6988  00DE66  2E04               	decfsz	??_initLCD& (0+255),f,c
  6989  00DE68  D7FC               	bra	u6137
  6990  00DE6A  F000               	nop	
  6991                           
  6992                           ;standbyMode.c: 45: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6993  00DE6C  0E0F               	movlw	15
  6994  00DE6E  ECB8  F06E         	call	_lcdInst
  6995  00DE72  0012               	return		;funcret
  6996  00DE74                     __end_of_initLCD:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           plusw1	equ	0xFE3
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           plusw2	equ	0xFDB
  7010                           fsr2h	equ	0xFDA
  7011                           fsr2l	equ	0xFD9
  7012                           status	equ	0xFD8
  7013                           
  7014 ;; *************** function _lcdInst *****************
  7015 ;; Defined at:
  7016 ;;		line 14 in file "standbyMode.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  data            1    wreg     unsigned char 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  data            1    2[COMRAM] unsigned char 
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, status,2, status,0, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;Total ram usage:        1 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    1
  7037 ;; This function calls:
  7038 ;;		_lcdNibble
  7039 ;; This function is called by:
  7040 ;;		_initLCD
  7041 ;;		_viewLogs
  7042 ;;		_food_press
  7043 ;;		_diet_press
  7044 ;;		_which_drawer
  7045 ;;		_standbyMode
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text14
  7050  00DD70                     __ptext14:
  7051                           	opt stack 0
  7052  00DD70                     _lcdInst:
  7053                           	opt stack 27
  7054                           
  7055                           ;incstack = 0
  7056                           ;lcdInst@data stored from wreg
  7057  00DD70  6E03               	movwf	lcdInst@data,c
  7058                           
  7059                           ;standbyMode.c: 22: LATDbits.LATD2 = 0;
  7060  00DD72  948C               	bcf	3980,2,c	;volatile
  7061                           
  7062                           ;standbyMode.c: 23: lcdNibble(data);
  7063  00DD74  5003               	movf	lcdInst@data,w,c
  7064  00DD76  EC63  F06F         	call	_lcdNibble
  7065                           
  7066                           ;standbyMode.c: 24: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7067  00DD7A  0EC8               	movlw	200
  7068  00DD7C                     u6147:
  7069  00DD7C  D000               	nop2	
  7070  00DD7E  2EE8               	decfsz	wreg,f,c
  7071  00DD80  D7FD               	bra	u6147
  7072  00DD82  0012               	return		;funcret
  7073  00DD84                     __end_of_lcdInst:
  7074                           	opt stack 0
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           prodh	equ	0xFF4
  7080                           prodl	equ	0xFF3
  7081                           postinc0	equ	0xFEE
  7082                           wreg	equ	0xFE8
  7083                           plusw1	equ	0xFE3
  7084                           postinc2	equ	0xFDE
  7085                           postdec2	equ	0xFDD
  7086                           plusw2	equ	0xFDB
  7087                           fsr2h	equ	0xFDA
  7088                           fsr2l	equ	0xFD9
  7089                           status	equ	0xFD8
  7090                           
  7091 ;; *************** function _lcdNibble *****************
  7092 ;; Defined at:
  7093 ;;		line 49 in file "standbyMode.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  data            1    wreg     unsigned char 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  data            1    1[COMRAM] unsigned char 
  7098 ;;  temp            1    0[COMRAM] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;Total ram usage:        2 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; This function calls:
  7115 ;;		Nothing
  7116 ;; This function is called by:
  7117 ;;		_lcdInst
  7118 ;;		_putch
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text15
  7123  00DEC6                     __ptext15:
  7124                           	opt stack 0
  7125  00DEC6                     _lcdNibble:
  7126                           	opt stack 27
  7127                           
  7128                           ;incstack = 0
  7129                           ;lcdNibble@data stored from wreg
  7130  00DEC6  6E02               	movwf	lcdNibble@data,c
  7131                           
  7132                           ;standbyMode.c: 57: char temp = (unsigned char) (data & 0xF0);
  7133  00DEC8  5002               	movf	lcdNibble@data,w,c
  7134  00DECA  0BF0               	andlw	240
  7135  00DECC  6E01               	movwf	lcdNibble@temp,c
  7136                           
  7137                           ;standbyMode.c: 58: LATD = (unsigned char) (LATD & 0x0F);
  7138  00DECE  508C               	movf	3980,w,c	;volatile
  7139  00DED0  0B0F               	andlw	15
  7140  00DED2  6E8C               	movwf	3980,c	;volatile
  7141                           
  7142                           ;standbyMode.c: 59: LATD = (unsigned char) (temp | LATD);
  7143  00DED4  5001               	movf	lcdNibble@temp,w,c
  7144  00DED6  108C               	iorwf	3980,w,c	;volatile
  7145  00DED8  6E8C               	movwf	3980,c	;volatile
  7146                           
  7147                           ;standbyMode.c: 61: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7148  00DEDA  0E00               	movlw	0
  7149  00DEDC  BEF2               	btfsc	intcon,7,c	;volatile
  7150  00DEDE  0E01               	movlw	1
  7151  00DEE0  6E66               	movwf	standbyMode@LCDinterruptState,c
  7152  00DEE2  9EF2               	bcf	intcon,7,c	;volatile
  7153  00DEE4  868C               	bsf	3980,3,c	;volatile
  7154  00DEE6  0E53               	movlw	83
  7155  00DEE8                     u6157:
  7156  00DEE8  2EE8               	decfsz	wreg,f,c
  7157  00DEEA  D7FE               	bra	u6157
  7158  00DEEC  F000               	nop	
  7159  00DEEE  968C               	bcf	3980,3,c	;volatile
  7160  00DEF0  0EC8               	movlw	200
  7161  00DEF2                     u6167:
  7162  00DEF2  D000               	nop2	
  7163  00DEF4  2EE8               	decfsz	wreg,f,c
  7164  00DEF6  D7FD               	bra	u6167
  7165  00DEF8  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  7166  00DEFA  D002               	bra	u15
  7167  00DEFC  9EF2               	bcf	intcon,7,c	;volatile
  7168  00DEFE  D001               	bra	u16
  7169  00DF00                     u15:
  7170  00DF00  8EF2               	bsf	intcon,7,c	;volatile
  7171  00DF02                     u16:
  7172                           
  7173                           ;standbyMode.c: 64: data = (unsigned char) (data << 4);
  7174  00DF02  3802               	swapf	lcdNibble@data,w,c
  7175  00DF04  0BF0               	andlw	240
  7176  00DF06  6E02               	movwf	lcdNibble@data,c
  7177                           
  7178                           ;standbyMode.c: 65: temp = (unsigned char) (data & 0xF0);
  7179  00DF08  5002               	movf	lcdNibble@data,w,c
  7180  00DF0A  0BF0               	andlw	240
  7181  00DF0C  6E01               	movwf	lcdNibble@temp,c
  7182                           
  7183                           ;standbyMode.c: 66: LATD = (unsigned char) (LATD & 0x0F);
  7184  00DF0E  508C               	movf	3980,w,c	;volatile
  7185  00DF10  0B0F               	andlw	15
  7186  00DF12  6E8C               	movwf	3980,c	;volatile
  7187                           
  7188                           ;standbyMode.c: 67: LATD = (unsigned char) (temp | LATD);
  7189  00DF14  5001               	movf	lcdNibble@temp,w,c
  7190  00DF16  108C               	iorwf	3980,w,c	;volatile
  7191  00DF18  6E8C               	movwf	3980,c	;volatile
  7192                           
  7193                           ;standbyMode.c: 69: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7194  00DF1A  0E00               	movlw	0
  7195  00DF1C  BEF2               	btfsc	intcon,7,c	;volatile
  7196  00DF1E  0E01               	movlw	1
  7197  00DF20  6E66               	movwf	standbyMode@LCDinterruptState,c
  7198  00DF22  9EF2               	bcf	intcon,7,c	;volatile
  7199  00DF24  868C               	bsf	3980,3,c	;volatile
  7200  00DF26  0E53               	movlw	83
  7201  00DF28                     u6177:
  7202  00DF28  2EE8               	decfsz	wreg,f,c
  7203  00DF2A  D7FE               	bra	u6177
  7204  00DF2C  F000               	nop	
  7205  00DF2E  968C               	bcf	3980,3,c	;volatile
  7206  00DF30  0EC8               	movlw	200
  7207  00DF32                     u6187:
  7208  00DF32  D000               	nop2	
  7209  00DF34  2EE8               	decfsz	wreg,f,c
  7210  00DF36  D7FD               	bra	u6187
  7211  00DF38  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  7212  00DF3A  D002               	bra	u25
  7213  00DF3C  9EF2               	bcf	intcon,7,c	;volatile
  7214  00DF3E  D001               	bra	u26
  7215  00DF40                     u25:
  7216  00DF40  8EF2               	bsf	intcon,7,c	;volatile
  7217  00DF42                     u26:
  7218  00DF42  0012               	return		;funcret
  7219  00DF44                     __end_of_lcdNibble:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           postinc0	equ	0xFEE
  7229                           wreg	equ	0xFE8
  7230                           plusw1	equ	0xFE3
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           plusw2	equ	0xFDB
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           postinc0	equ	0xFEE
  7245                           wreg	equ	0xFE8
  7246                           plusw1	equ	0xFE3
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           plusw2	equ	0xFDB
  7250                           fsr2h	equ	0xFDA
  7251                           fsr2l	equ	0xFD9
  7252                           status	equ	0xFD8
  7253                           
  7254                           	psect	rparam
  7255  0000                     tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           postinc0	equ	0xFEE
  7263                           wreg	equ	0xFE8
  7264                           plusw1	equ	0xFE3
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           plusw2	equ	0xFDB
  7268                           fsr2h	equ	0xFDA
  7269                           fsr2l	equ	0xFD9
  7270                           status	equ	0xFD8


Data Sizes:
    Strings     534
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[11]), STR_53(CODE[13]), STR_52(CODE[11]), STR_51(CODE[13]), 
		 -> STR_50(CODE[11]), STR_49(CODE[8]), STR_48(CODE[15]), STR_47(CODE[16]), 
		 -> STR_46(CODE[10]), STR_45(CODE[8]), STR_44(CODE[15]), STR_43(CODE[16]), 
		 -> STR_42(CODE[10]), STR_41(CODE[16]), STR_40(CODE[16]), STR_39(CODE[17]), 
		 -> STR_38(CODE[13]), STR_37(CODE[17]), STR_36(CODE[14]), STR_35(CODE[11]), 
		 -> STR_34(CODE[11]), STR_33(CODE[16]), STR_32(CODE[16]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[8]), STR_28(CODE[15]), STR_27(CODE[15]), 
		 -> STR_26(CODE[11]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[16]), 
		 -> STR_22(CODE[11]), STR_21(CODE[14]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[13]), STR_16(CODE[13]), STR_15(CODE[15]), 
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[6]), 
		 -> STR_10(CODE[16]), STR_9(CODE[5]), STR_8(CODE[16]), STR_7(CODE[9]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[9]), STR_3(CODE[17]), 
		 -> STR_2(CODE[11]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_diet_press
    _standbyMode->_food_press
    _which_drawer->_printf
    _viewLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   34527
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         22    22      0   34437
                                             47 COMRAM    22    22      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                           _viewLogs
                       _which_drawer
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2    6348
                                             24 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             6     4      2    5541
                                             24 COMRAM     6     4      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4    8674
                                             24 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2    7701
                                             24 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    5205
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _viewLogs
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      67       1       81.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      34        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 18 22:33:30 2018

                 _standbyMode EE4E                            u15 DF00                            u16 DF02  
                          u25 DF40                            u26 DF42                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 FB8A  
                         l131 FD2E                           l203 FBDE                           l132 F5D2  
                         l300 E3EC                           l220 E684                           l205 FC32  
                         l141 F626                           l207 FC86                           l231 E7AE  
                         l215 E678                           l312 E99E                           l152 F70E  
                         l136 FDAC                           l240 E88C                           l209 FCDA  
                         l153 F73C                           l145 F662                           l137 F5FC  
                         l401 E534                           l330 EAE4                           l322 EA60  
                         l162 F7BC                           l234 E7FE                           l402 E508  
                         l315 EAAA                           l307 E992                           l147 F6B6  
                         l251 DF78                           l243 E910                           l340 EBBC  
                         l332 EB0E                           l308 E992                           l180 F958  
                         l172 F864                           l148 F6E4                           l252 DF4E  
                         l228 E75E                           l412 E570                           l501 E0EE  
                         l317 E9BC                           l181 F990                           l173 F8A2  
                         l157 F766                           l253 DFF8                           l237 E84E  
                         l510 E150                           l502 E0FE                           l350 ECA2  
                         l342 EBEA                           l334 EB38                           l246 E91C  
                         l319 EA1E                           l183 F9CA                           l175 F8DC  
                         l167 F812                           l271 DF70                           l415 E5B6  
                         l431 EFA4                           l360 ED8E                           l352 ECD0  
                         l344 EC18                           l336 EB64                           l328 EABA  
                         l193 FA9C                           l185 FA04                           l177 F916  
                         l257 DF58                           l433 F4B8                           l441 F092  
                         l425 EEC2                           l514 E192                           l362 EDBE  
                         l354 ECFE                           l346 EC46                           l338 EB90  
                         l194 FAD4                           l266 DF68                           l290 E308  
                         l370 E004                           l434 EFF0                           l515 E1E0  
                         l259 DF60                           l283 E284                           l371 E0DA  
                         l419 E5DA                           l435 F2B0                           l516 E198  
                         l508 E128                           l364 EDF0                           l356 ED2E  
                         l348 EC74                           l196 FB0E                           l188 FA46  
                         l380 E04C                           l372 E00C                           l460 F282  
                         l452 F13E                           l444 F09E                           l428 EF98  
                         l365 EE44                           l381 E054                           l373 E014  
                         l453 F20C                           l437 F058                           l358 ED5E  
                         l198 FB48                           l286 E36A                           l278 E278  
                         l382 E05C                           l374 E01C                           l470 F354  
                         l462 F2AA                           l446 F2A2                           l454 F1B0  
                         l383 E064                           l375 E024                           l471 F422  
                         l455 F202                           l288 E2A2                           l384 E06E  
                         l376 E02C                           l480 F574                           l472 F3C6  
                         l448 F0E0                           l297 E37C                           l369 E078  
                         l377 E034                           l393 E448                           l473 F418  
                         l378 E03C                           l466 F2EE                           l379 E044  
                         l459 F24A                           l396 E5C6                           l388 E43C  
                         l485 F520                           l477 F460                           l398 E574  
                         l478 F498                           l923 DE92                           l924 DE8A  
                         l933 DDFC                           l934 DDF4                           l927 DEB2  
                         l928 DEBC                           l937 DE14                           l938 DE1E  
                __CFG_CPB$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l3273 EA5A                          l3701 F0E8  
                        l3713 F13E                          l3811 F35A                          l3717 F144  
                        l3807 F354                          l2895 E154                          l3795 F2FE  
                        STR_1 FEEF                          STR_2 FF95                          STR_3 FE1D  
                        STR_4 FFCB                          STR_5 FFED                          STR_6 FE2E  
                        STR_7 FFD4                          STR_8 FE7F                          STR_9 FFFA  
                        u3100 F80A                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u3140 F85C                          u3060 F7B4                          u4040 E2B6  
                        u3420 FA94                          u3260 F950                          u5040 E4A0  
                        u4170 EA3A                          u5130 E4E6                          u4091 E982  
                        u2820 DE00                          u3540 FB82                          u3380 FA3E  
                        u2900 F65A                          u5300 F0AA                          u6007 E89C  
                        u6017 E8CE                          u3810 E1E8                          u2850 F5F4  
                        u5170 E54A                          u6107 EE2E                          u6027 E8E8  
                        u5180 E56C                          u5500 F4C0                          u5260 EFF8  
                        u6117 DD90                          u6037 E20E                          u2790 DE96  
                        u2870 F61E                          u5350 F144                          u5270 F004  
                        u6127 DE2E                          u6047 E31C                          u6137 DE62  
                        u6057 E3AC                          u5450 F35A                          u6147 DD7C  
                        u6067 E3DE                          u6157 DEE8                          u6077 E934  
                        u3790 E180                          u6167 DEF2                          u6087 E9D0  
                        u5607 EF70                          u6177 DF28                          u6097 EDFC  
                        u5617 F010                          u5537 EE5A                          u3890 E6AC  
                        u6187 DF32                          u3971 E24C                          u5707 F2BC  
                        u5627 F048                          u5547 EE80                          u5717 F376  
                        u5637 F064                          u5557 EE9A                          u5807 F580  
                        u5727 F3AE                          u5647 F0B6                          u5567 EED2  
                        u5817 F5B8                          u5737 F3D2                          u5657 F160  
                        u5577 EF0A                          u5907 E71E                          u5827 E408  
                        u5747 F40A                          u5667 F198                          u5587 EF24  
                        u5917 E750                          u5837 E588                          u5757 F42E  
                        u5677 F1BC                          u5597 EF56                          u5927 E76E  
                        u5847 E604                          u5767 F4EC                          u5687 F1F4  
                        u5937 E7A0                          u5857 E636                          u5777 F512  
                        u5697 F218                          u5947 E7BE                          u5867 E650  
                        u5787 F52C                          u5957 E7F0                          u5877 E6CE  
                        u5797 F564                          u5967 E80E                          u5887 E6E6  
                        u5977 E840                          u5897 E706                          u5987 E85E  
                        u5997 E87E         __end_of_decode_drawer E0E4                          _main DDAE  
                        _keys FDB7               food_press@F3040 005E                          fsr2h 000FDA  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 001E             viewLogs@keypress3 001D           standbyMode@keypress 0036  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               diet_press@F3055 0056  
            __end_of_LCD_LEFT FDE4           standbyMode@whichKey 0034               food_press@count 0025  
             food_press@tally 001F             _drawerInformation 0046                         ?_main 0001  
                       STR_10 FE8F                         STR_11 FFF4                         STR_20 FE6F  
                       STR_12 FDE9                         STR_21 FF2C                         STR_13 FE5F  
                       STR_30 FE2E                         STR_22 FFAB                         STR_14 FEAF  
                       STR_15 FEFF                         STR_23 FE9F                         STR_31 FE0C  
                       STR_24 FE9F                         STR_16 FF63                         STR_32 FEDF  
                       STR_40 FEBF                         STR_41 FECF                         STR_17 FF7D  
                       STR_25 FF3A                         STR_33 FE3F                         STR_26 FFAB  
                       STR_42 FFC1                         STR_34 FFB6                         STR_50 FFA0  
                       STR_18 FECF                         STR_35 FF8A                         STR_51 FF56  
                       STR_27 FF0E                         STR_19 FE6F                         STR_43 FE4F  
                       STR_52 FFA0                         STR_28 FF0E                         STR_36 FF48  
                       STR_44 FF1D                         STR_53 FF56                         STR_37 FE0C  
                       STR_29 FFE5                         STR_45 FFDD                         STR_54 FFA0  
                       STR_46 FFC1                         STR_38 FF70                         STR_47 FE4F  
                       STR_39 FDFB                         STR_48 FF1D                         STR_49 FFDD  
             __end_of___lwdiv DEC6               __end_of___lwmod DE28                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000               diet_press@count 0023               __end_of_lcdInst DD84  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD DE74  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers FDE3                         _input FDC8  
                       _putch DD84                         tablat 000FF5             _LCDinterruptState 0067  
                       plusw1 000FE3                         plusw2 000FDB                         status 000FD8  
        standbyMode@keypress1 0037                __CFG_PBADEN$ON 000000               standbyMode@diet 0040  
             standbyMode@food 003C               standbyMode@zero 003A               __initialization DD98  
                __end_of_main DDE6                  __end_of_keys FDC8                  standbyMode@i 0042  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FDE5              food_press@drawer 001B  
                      ??_main 0046                 __activetblptr 000002           food_press@backCheck 0021  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        ?_putch 0001  
            diet_press@drawer 0019                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 DD9E  
                   ??_lcdInst 0003                        _printf E0E4           food_press@foodTable 0027  
                   ??_initLCD 0004               get_digits@count 0005                  __mediumconst FDB6  
            __end_of_viewLogs E928                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization DDA4  
        which_drawer@keypress 0024                 ___rparam_used 000001                  ?_standbyMode 0001  
              __pcstackCOMRAM 0001                 __end_of_input FDD9                 __end_of_putch DD98  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0019  
           food_press@isValid 0023                       ??_putch 0003                    _check_food F5C8  
                  _diet_press E928                       ?_printf 000D                    _get_digits DF44  
      standbyMode@drawerCount 003E                    _food_press E202             __end_of_lcdNibble DF44  
                     __Hparam 0000                       __Lparam 0000                     ?_viewLogs 0019  
                     ___lwdiv DE74                       ___lwmod DDE6                       __pcinit DD98  
                     __ramtop 1000                       _lcdInst DD70                       __ptext0 DDAE  
                     __ptext1 EE4E                       __ptext2 E3F6                       __ptext3 E002  
                     __ptext4 E5F8                       __ptext5 E202                       __ptext6 DF44  
                     __ptext7 F5C8                       __ptext8 E928                       __ptext9 E0E4  
      __size_of_decode_drawer 00E2               __size_of_printf 011E                       _initLCD DE28  
                     _dpowers FDD9         which_drawer@backCheck 0020                     _LCD_RIGHT FDE4  
        end_of_initialization DDA4               which_drawer@sum 001E         __end_of_LCD_SIZE_HORZ FDE7  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FDE6                 __Lmediumconst FDB6  
                     printf@c 0018                       printf@f 000D                       postdec2 000FDD  
                  ??_viewLogs 001B                       postinc0 000FEE                       postinc2 000FDE  
        __size_of_standbyMode 077A                   ?_diet_press 0019                     _PORTBbits 000F81  
               ?_which_drawer 0019           diet_press@backCheck 0021                   ?_get_digits 0001  
           standbyMode@drawer 0044                 _decode_drawer E002                   ?_food_press 0019  
         diet_press@dietTable 0028        standbyMode@validDrawer 0038           __size_of_check_food 07EE  
              ??_which_drawer 001B                __end_of_printf E202           start_initialization DD98  
              ?_decode_drawer 0001           __size_of_diet_press 0526           __size_of_get_digits 00BE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0011            food_press@keypress 002F  
         __size_of_food_press 01F4  standbyMode@LCDinterruptState 0066                   __pbssCOMRAM 0046  
         decode_drawer@drawer 0001              ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000  
               __pmediumconst FDB6                     _lcdNibble DEC6                      ?___lwdiv 0001  
                    ?___lwmod 0008             __size_of_viewLogs 0330                      ?_lcdInst 0001  
                    ?_initLCD 0001           check_food@foodInput 0003              ___lwdiv@quotient 0005  
             ??_decode_drawer 0003                __size_of_putch 0014                  ??_check_food 0005  
                    _LCD_LEFT FDE3                      _LATDbits 000F8C          __end_of_which_drawer E5F8  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 001B  
          __end_of_check_food FDB6                 lcdNibble@data 0002                    printf@flag 0014  
               lcdNibble@temp 0001                    printf@prec 0015                  ??_get_digits 0003  
              _LCD_HORZ_LIMIT FDE8                 diet_press@sum 0025             which_drawer@count 0022  
          __end_of_diet_press EE4E                  ??_food_press 001D            diet_press@keypress 0027  
                    __Hrparam 0000                 ??_standbyMode 0030                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits E002            diet_press@previous 001D  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              __size_of_lcdInst 0014  
            __size_of_initLCD 004C        __end_of_LCD_HORZ_LIMIT FDE9            __end_of_food_press E3F6  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 DD84  
                    __ptext11 DDE6                      __ptext12 DE74                      __ptext13 DE28  
                    __ptext14 DD70                      __ptext15 DEC6                _LCD_VERT_LIMIT FDE7  
               __size_of_main 0038                   ??_lcdNibble 0001                      _viewLogs E5F8  
                   printf@val 0016           __end_of_standbyMode F5C8      decode_drawer@returnValue 0005  
            which_drawer@rand 001C                     putch@data 0003                    _INTCONbits 000FF2  
      __end_of_LCD_VERT_LIMIT FDE8         __size_of_which_drawer 0202     standbyMode@firstIteration 0032  
               _LCD_SIZE_HORZ FDE6              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FDE5  
                    printf@ap 0012                   diet_press@i 001F                   lcdInst@data 0003  
                _which_drawer E3F6               ___lwmod@divisor 000A               ___lwmod@counter 000C  
       check_food@returnValue 0007  
