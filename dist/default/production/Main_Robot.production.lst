

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar  2 17:46:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4620 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	mediumconst
    80  00FD22                     __pmediumconst:
    81                           	opt stack 0
    82  00FD22  00                 	db	0
    83  00FD23                     _keys:
    84                           	opt stack 0
    85  00FD23  31                 	db	49
    86  00FD24  32                 	db	50
    87  00FD25  33                 	db	51
    88  00FD26  41                 	db	65
    89  00FD27  34                 	db	52
    90  00FD28  35                 	db	53
    91  00FD29  36                 	db	54
    92  00FD2A  42                 	db	66
    93  00FD2B  37                 	db	55
    94  00FD2C  38                 	db	56
    95  00FD2D  39                 	db	57
    96  00FD2E  43                 	db	67
    97  00FD2F  2A                 	db	42
    98  00FD30  30                 	db	48
    99  00FD31  23                 	db	35
   100  00FD32  44                 	db	68
   101  00FD33  00                 	db	0
   102  00FD34                     __end_of_keys:
   103                           	opt stack 0
   104  00FD34                     _input:
   105                           	opt stack 0
   106  00FD34  31                 	db	49
   107  00FD35  32                 	db	50
   108  00FD36  33                 	db	51
   109  00FD37  52                 	db	82
   110  00FD38  34                 	db	52
   111  00FD39  35                 	db	53
   112  00FD3A  36                 	db	54
   113  00FD3B  46                 	db	70
   114  00FD3C  37                 	db	55
   115  00FD3D  38                 	db	56
   116  00FD3E  39                 	db	57
   117  00FD3F  4C                 	db	76
   118  00FD40  2A                 	db	42
   119  00FD41  30                 	db	48
   120  00FD42  23                 	db	35
   121  00FD43  44                 	db	68
   122  00FD44  00                 	db	0
   123  00FD45                     __end_of_input:
   124                           	opt stack 0
   125  00FD45                     _dpowers:
   126                           	opt stack 0
   127  00FD45  0001               	dw	1
   128  00FD47  000A               	dw	10
   129  00FD49  0064               	dw	100
   130  00FD4B  03E8               	dw	1000
   131  00FD4D  2710               	dw	10000
   132  00FD4F                     __end_of_dpowers:
   133                           	opt stack 0
   134  00FD4F                     _hexpowers:
   135                           	opt stack 0
   136  00FD4F  0001               	dw	1
   137  00FD51  0010               	dw	16
   138  00FD53  0100               	dw	256
   139  00FD55  1000               	dw	4096
   140  00FD57                     __end_of_hexpowers:
   141                           	opt stack 0
   142  00FD57                     _happynewyear:
   143                           	opt stack 0
   144  00FD57  00                 	db	0
   145  00FD58  28                 	db	40
   146  00FD59  00                 	db	0
   147  00FD5A  06                 	db	6
   148  00FD5B  24                 	db	36
   149  00FD5C  02                 	db	2
   150  00FD5D  18                 	db	24
   151  00FD5E                     __end_of_happynewyear:
   152                           	opt stack 0
   153  00FD5E                     _LCD_LEFT:
   154                           	opt stack 0
   155  00FD5E  00                 	db	0
   156  00FD5F                     __end_of_LCD_LEFT:
   157                           	opt stack 0
   158  00FD5F                     _LCD_RIGHT:
   159                           	opt stack 0
   160  00FD5F  01                 	db	1
   161  00FD60                     __end_of_LCD_RIGHT:
   162                           	opt stack 0
   163  00FD60                     _LCD_SIZE_VERT:
   164                           	opt stack 0
   165  00FD60  02                 	db	2
   166  00FD61                     __end_of_LCD_SIZE_VERT:
   167                           	opt stack 0
   168  00FD61                     _LCD_SIZE_HORZ:
   169                           	opt stack 0
   170  00FD61  10                 	db	16
   171  00FD62                     __end_of_LCD_SIZE_HORZ:
   172                           	opt stack 0
   173  00FD62                     _LCD_VERT_LIMIT:
   174                           	opt stack 0
   175  00FD62  02                 	db	2
   176  00FD63                     __end_of_LCD_VERT_LIMIT:
   177                           	opt stack 0
   178  00FD63                     _LCD_HORZ_LIMIT:
   179                           	opt stack 0
   180  00FD63  28                 	db	40
   181  00FD64                     __end_of_LCD_HORZ_LIMIT:
   182                           	opt stack 0
   183  0000                     _ADRESL	set	4035
   184  0000                     _ADRESH	set	4036
   185  0000                     _ADCON0bits	set	4034
   186  0000                     _SSPBUF	set	4041
   187  0000                     _SSPCON2bits	set	4037
   188  0000                     _SSPADD	set	4040
   189  0000                     _SSPCON2	set	4037
   190  0000                     _SSPCON1	set	4038
   191  0000                     _SSPSTAT	set	4039
   192  0000                     _TRISCbits	set	3988
   193  0000                     _SSPCON1bits	set	4038
   194  0000                     _EECON2	set	4007
   195  0000                     _EEDATA	set	4008
   196  0000                     _EEADR	set	4009
   197  0000                     _EECON1bits	set	4006
   198  0000                     _PORTB	set	3969
   199  0000                     _PORTBbits	set	3969
   200  0000                     _INTCONbits	set	4082
   201  0000                     _LATDbits	set	3980
   202  0000                     _ADCON1	set	4033
   203  0000                     _ADCON0	set	4034
   204  0000                     _TRISE	set	3990
   205  0000                     _TRISD	set	3989
   206  0000                     _TRISC	set	3988
   207  0000                     _TRISB	set	3987
   208  0000                     _TRISA	set	3986
   209  0000                     _LATE	set	3981
   210  0000                     _LATD	set	3980
   211  0000                     _LATC	set	3979
   212  0000                     _LATB	set	3978
   213  0000                     _LATA	set	3977
   214  0000                     _ADON	set	32272
   215  00FD64                     STR_23:
   216  00FD64  52                 	db	82	;'R'
   217  00FD65  65                 	db	101	;'e'
   218  00FD66  6D                 	db	109	;'m'
   219  00FD67  61                 	db	97	;'a'
   220  00FD68  69                 	db	105	;'i'
   221  00FD69  6E                 	db	110	;'n'
   222  00FD6A  69                 	db	105	;'i'
   223  00FD6B  6E                 	db	110	;'n'
   224  00FD6C  67                 	db	103	;'g'
   225  00FD6D  20                 	db	32
   226  00FD6E  70                 	db	112	;'p'
   227  00FD6F  69                 	db	105	;'i'
   228  00FD70  65                 	db	101	;'e'
   229  00FD71  63                 	db	99	;'c'
   230  00FD72  65                 	db	101	;'e'
   231  00FD73  73                 	db	115	;'s'
   232  00FD74  3A                 	db	58	;':'
   233  00FD75  00                 	db	0
   234  00FD76                     STR_70:
   235  00FD76  30                 	db	48	;'0'
   236  00FD77  31                 	db	49	;'1'
   237  00FD78  32                 	db	50	;'2'
   238  00FD79  33                 	db	51	;'3'
   239  00FD7A  34                 	db	52	;'4'
   240  00FD7B  35                 	db	53	;'5'
   241  00FD7C  36                 	db	54	;'6'
   242  00FD7D  37                 	db	55	;'7'
   243  00FD7E  38                 	db	56	;'8'
   244  00FD7F  39                 	db	57	;'9'
   245  00FD80  61                 	db	97	;'a'
   246  00FD81  62                 	db	98	;'b'
   247  00FD82  63                 	db	99	;'c'
   248  00FD83  64                 	db	100	;'d'
   249  00FD84  65                 	db	101	;'e'
   250  00FD85  66                 	db	102	;'f'
   251  00FD86  00                 	db	0
   252  00FD87                     STR_54:
   253  00FD87  64                 	db	100	;'d'
   254  00FD88  72                 	db	114	;'r'
   255  00FD89  61                 	db	97	;'a'
   256  00FD8A  77                 	db	119	;'w'
   257  00FD8B  65                 	db	101	;'e'
   258  00FD8C  72                 	db	114	;'r'
   259  00FD8D  73                 	db	115	;'s'
   260  00FD8E  20                 	db	32
   261  00FD8F  72                 	db	114	;'r'
   262  00FD90  65                 	db	101	;'e'
   263  00FD91  61                 	db	97	;'a'
   264  00FD92  63                 	db	99	;'c'
   265  00FD93  68                 	db	104	;'h'
   266  00FD94  65                 	db	101	;'e'
   267  00FD95  64                 	db	100	;'d'
   268  00FD96  21                 	db	33
   269  00FD97  00                 	db	0
   270  00FD98                     STR_42:
   271  00FD98  62                 	db	98	;'b'
   272  00FD99  65                 	db	101	;'e'
   273  00FD9A  67                 	db	103	;'g'
   274  00FD9B  69                 	db	105	;'i'
   275  00FD9C  6E                 	db	110	;'n'
   276  00FD9D  20                 	db	32
   277  00FD9E  6F                 	db	111	;'o'
   278  00FD9F  70                 	db	112	;'p'
   279  00FDA0  65                 	db	101	;'e'
   280  00FDA1  72                 	db	114	;'r'
   281  00FDA2  61                 	db	97	;'a'
   282  00FDA3  74                 	db	116	;'t'
   283  00FDA4  69                 	db	105	;'i'
   284  00FDA5  6F                 	db	111	;'o'
   285  00FDA6  6E                 	db	110	;'n'
   286  00FDA7  2E                 	db	46
   287  00FDA8  00                 	db	0
   288  00FDA9                     STR_9:
   289  00FDA9  50                 	db	80	;'P'
   290  00FDAA  6C                 	db	108	;'l'
   291  00FDAB  65                 	db	101	;'e'
   292  00FDAC  61                 	db	97	;'a'
   293  00FDAD  73                 	db	115	;'s'
   294  00FDAE  65                 	db	101	;'e'
   295  00FDAF  20                 	db	32
   296  00FDB0  69                 	db	105	;'i'
   297  00FDB1  6E                 	db	110	;'n'
   298  00FDB2  70                 	db	112	;'p'
   299  00FDB3  75                 	db	117	;'u'
   300  00FDB4  74                 	db	116	;'t'
   301  00FDB5  20                 	db	32
   302  00FDB6  6C                 	db	108	;'l'
   303  00FDB7  6F                 	db	111	;'o'
   304  00FDB8  67                 	db	103	;'g'
   305  00FDB9  00                 	db	0
   306  00FDBA                     STR_24:
   307  00FDBA  52                 	db	82	;'R'
   308  00FDBB  3A                 	db	58	;':'
   309  00FDBC  25                 	db	37
   310  00FDBD  69                 	db	105	;'i'
   311  00FDBE  20                 	db	32
   312  00FDBF  20                 	db	32
   313  00FDC0  46                 	db	70	;'F'
   314  00FDC1  3A                 	db	58	;':'
   315  00FDC2  25                 	db	37
   316  00FDC3  69                 	db	105	;'i'
   317  00FDC4  20                 	db	32
   318  00FDC5  20                 	db	32
   319  00FDC6  4C                 	db	76	;'L'
   320  00FDC7  3A                 	db	58	;':'
   321  00FDC8  25                 	db	37
   322  00FDC9  69                 	db	105	;'i'
   323  00FDCA  00                 	db	0
   324  00FDCB                     STR_5:
   325  00FDCB  50                 	db	80	;'P'
   326  00FDCC  72                 	db	114	;'r'
   327  00FDCD  65                 	db	101	;'e'
   328  00FDCE  73                 	db	115	;'s'
   329  00FDCF  73                 	db	115	;'s'
   330  00FDD0  20                 	db	32
   331  00FDD1  61                 	db	97	;'a'
   332  00FDD2  6E                 	db	110	;'n'
   333  00FDD3  79                 	db	121	;'y'
   334  00FDD4  20                 	db	32
   335  00FDD5  6B                 	db	107	;'k'
   336  00FDD6  65                 	db	101	;'e'
   337  00FDD7  79                 	db	121	;'y'
   338  00FDD8  20                 	db	32
   339  00FDD9  74                 	db	116	;'t'
   340  00FDDA  6F                 	db	111	;'o'
   341  00FDDB  00                 	db	0
   342  00FDDC                     STR_7:
   343  00FDDC  25                 	db	37
   344  00FDDD  69                 	db	105	;'i'
   345  00FDDE  20                 	db	32
   346  00FDDF  70                 	db	112	;'p'
   347  00FDE0  72                 	db	114	;'r'
   348  00FDE1  65                 	db	101	;'e'
   349  00FDE2  76                 	db	118	;'v'
   350  00FDE3  69                 	db	105	;'i'
   351  00FDE4  6F                 	db	111	;'o'
   352  00FDE5  75                 	db	117	;'u'
   353  00FDE6  73                 	db	115	;'s'
   354  00FDE7  20                 	db	32
   355  00FDE8  6C                 	db	108	;'l'
   356  00FDE9  6F                 	db	111	;'o'
   357  00FDEA  67                 	db	103	;'g'
   358  00FDEB  73                 	db	115	;'s'
   359  00FDEC  00                 	db	0
   360  00FDED                     STR_44:
   361  00FDED  63                 	db	99	;'c'
   362  00FDEE  61                 	db	97	;'a'
   363  00FDEF  62                 	db	98	;'b'
   364  00FDF0  69                 	db	105	;'i'
   365  00FDF1  6E                 	db	110	;'n'
   366  00FDF2  65                 	db	101	;'e'
   367  00FDF3  74                 	db	116	;'t'
   368  00FDF4  20                 	db	32
   369  00FDF5  73                 	db	115	;'s'
   370  00FDF6  6F                 	db	111	;'o'
   371  00FDF7  72                 	db	114	;'r'
   372  00FDF8  74                 	db	116	;'t'
   373  00FDF9  65                 	db	101	;'e'
   374  00FDFA  72                 	db	114	;'r'
   375  00FDFB  21                 	db	33
   376  00FDFC  00                 	db	0
   377  00FDFD                     STR_58:
   378  00FDFD  6E                 	db	110	;'n'
   379  00FDFE  75                 	db	117	;'u'
   380  00FDFF  6D                 	db	109	;'m'
   381  00FE00  62                 	db	98	;'b'
   382  00FE01  65                 	db	101	;'e'
   383  00FE02  72                 	db	114	;'r'
   384  00FE03  20                 	db	32
   385  00FE04  70                 	db	112	;'p'
   386  00FE05  72                 	db	114	;'r'
   387  00FE06  65                 	db	101	;'e'
   388  00FE07  73                 	db	115	;'s'
   389  00FE08  73                 	db	115	;'s'
   390  00FE09  65                 	db	101	;'e'
   391  00FE0A  64                 	db	100	;'d'
   392  00FE0B  2E                 	db	46
   393  00FE0C  00                 	db	0
   394  00FE0D                     STR_30:
   395  00FE0D  44                 	db	68	;'D'
   396  00FE0E  72                 	db	114	;'r'
   397  00FE0F  61                 	db	97	;'a'
   398  00FE10  77                 	db	119	;'w'
   399  00FE11  65                 	db	101	;'e'
   400  00FE12  72                 	db	114	;'r'
   401  00FE13  20                 	db	32
   402  00FE14  25                 	db	37
   403  00FE15  69                 	db	105	;'i'
   404  00FE16  20                 	db	32
   405  00FE17  66                 	db	102	;'f'
   406  00FE18  6F                 	db	111	;'o'
   407  00FE19  6F                 	db	111	;'o'
   408  00FE1A  64                 	db	100	;'d'
   409  00FE1B  3A                 	db	58	;':'
   410  00FE1C  00                 	db	0
   411  00FE1D                     STR_16:
   412  00FE1D  4F                 	db	79	;'O'
   413  00FE1E  70                 	db	112	;'p'
   414  00FE1F  65                 	db	101	;'e'
   415  00FE20  72                 	db	114	;'r'
   416  00FE21  61                 	db	97	;'a'
   417  00FE22  74                 	db	116	;'t'
   418  00FE23  69                 	db	105	;'i'
   419  00FE24  6F                 	db	111	;'o'
   420  00FE25  6E                 	db	110	;'n'
   421  00FE26  20                 	db	32
   422  00FE27  74                 	db	116	;'t'
   423  00FE28  69                 	db	105	;'i'
   424  00FE29  6D                 	db	109	;'m'
   425  00FE2A  65                 	db	101	;'e'
   426  00FE2B  3A                 	db	58	;':'
   427  00FE2C  00                 	db	0
   428  00FE2D                     STR_18:
   429  00FE2D  4D                 	db	77	;'M'
   430  00FE2E  61                 	db	97	;'a'
   431  00FE2F  72                 	db	114	;'r'
   432  00FE30  6B                 	db	107	;'k'
   433  00FE31  65                 	db	101	;'e'
   434  00FE32  64                 	db	100	;'d'
   435  00FE33  20                 	db	32
   436  00FE34  64                 	db	100	;'d'
   437  00FE35  72                 	db	114	;'r'
   438  00FE36  61                 	db	97	;'a'
   439  00FE37  77                 	db	119	;'w'
   440  00FE38  65                 	db	101	;'e'
   441  00FE39  72                 	db	114	;'r'
   442  00FE3A  73                 	db	115	;'s'
   443  00FE3B  3A                 	db	58	;':'
   444  00FE3C  00                 	db	0
   445  00FE3D                     STR_34:
   446  00FE3D  44                 	db	68	;'D'
   447  00FE3E  72                 	db	114	;'r'
   448  00FE3F  61                 	db	97	;'a'
   449  00FE40  77                 	db	119	;'w'
   450  00FE41  65                 	db	101	;'e'
   451  00FE42  72                 	db	114	;'r'
   452  00FE43  20                 	db	32
   453  00FE44  25                 	db	37
   454  00FE45  69                 	db	105	;'i'
   455  00FE46  20                 	db	32
   456  00FE47  64                 	db	100	;'d'
   457  00FE48  69                 	db	105	;'i'
   458  00FE49  65                 	db	101	;'e'
   459  00FE4A  74                 	db	116	;'t'
   460  00FE4B  3A                 	db	58	;':'
   461  00FE4C  00                 	db	0
   462  00FE4D                     STR_55:
   463  00FE4D  41                 	db	65	;'A'
   464  00FE4E  6E                 	db	110	;'n'
   465  00FE4F  6F                 	db	111	;'o'
   466  00FE50  74                 	db	116	;'t'
   467  00FE51  68                 	db	104	;'h'
   468  00FE52  65                 	db	101	;'e'
   469  00FE53  72                 	db	114	;'r'
   470  00FE54  20                 	db	32
   471  00FE55  64                 	db	100	;'d'
   472  00FE56  72                 	db	114	;'r'
   473  00FE57  61                 	db	97	;'a'
   474  00FE58  77                 	db	119	;'w'
   475  00FE59  65                 	db	101	;'e'
   476  00FE5A  72                 	db	114	;'r'
   477  00FE5B  3F                 	db	63	;'?'
   478  00FE5C  00                 	db	0
   479  00FE5D                     STR_43:
   480  00FE5D  57                 	db	87	;'W'
   481  00FE5E  65                 	db	101	;'e'
   482  00FE5F  6C                 	db	108	;'l'
   483  00FE60  63                 	db	99	;'c'
   484  00FE61  6F                 	db	111	;'o'
   485  00FE62  6D                 	db	109	;'m'
   486  00FE63  65                 	db	101	;'e'
   487  00FE64  20                 	db	32
   488  00FE65  74                 	db	116	;'t'
   489  00FE66  6F                 	db	111	;'o'
   490  00FE67  20                 	db	32
   491  00FE68  79                 	db	121	;'y'
   492  00FE69  6F                 	db	111	;'o'
   493  00FE6A  75                 	db	117	;'u'
   494  00FE6B  72                 	db	114	;'r'
   495  00FE6C  00                 	db	0
   496  00FE6D                     STR_29:
   497  00FE6D  23                 	db	35
   498  00FE6E  20                 	db	32
   499  00FE6F  3D                 	db	61	;'='
   500  00FE70  20                 	db	32
   501  00FE71  4E                 	db	78	;'N'
   502  00FE72  6F                 	db	111	;'o'
   503  00FE73  2C                 	db	44
   504  00FE74  20                 	db	32
   505  00FE75  44                 	db	68	;'D'
   506  00FE76  20                 	db	32
   507  00FE77  3D                 	db	61	;'='
   508  00FE78  20                 	db	32
   509  00FE79  59                 	db	89	;'Y'
   510  00FE7A  65                 	db	101	;'e'
   511  00FE7B  73                 	db	115	;'s'
   512  00FE7C  00                 	db	0
   513  00FE7D                     STR_26:
   514  00FE7D  44                 	db	68	;'D'
   515  00FE7E  72                 	db	114	;'r'
   516  00FE7F  61                 	db	97	;'a'
   517  00FE80  77                 	db	119	;'w'
   518  00FE81  65                 	db	101	;'e'
   519  00FE82  72                 	db	114	;'r'
   520  00FE83  20                 	db	32
   521  00FE84  31                 	db	49	;'1'
   522  00FE85  3A                 	db	58	;':'
   523  00FE86  20                 	db	32
   524  00FE87  52                 	db	82	;'R'
   525  00FE88  46                 	db	70	;'F'
   526  00FE89  31                 	db	49	;'1'
   527  00FE8A  32                 	db	50	;'2'
   528  00FE8B  00                 	db	0
   529  00FE8C                     STR_38:
   530  00FE8C  44                 	db	68	;'D'
   531  00FE8D  72                 	db	114	;'r'
   532  00FE8E  61                 	db	97	;'a'
   533  00FE8F  77                 	db	119	;'w'
   534  00FE90  65                 	db	101	;'e'
   535  00FE91  72                 	db	114	;'r'
   536  00FE92  20                 	db	32
   537  00FE93  6E                 	db	110	;'n'
   538  00FE94  75                 	db	117	;'u'
   539  00FE95  6D                 	db	109	;'m'
   540  00FE96  62                 	db	98	;'b'
   541  00FE97  65                 	db	101	;'e'
   542  00FE98  72                 	db	114	;'r'
   543  00FE99  3A                 	db	58	;':'
   544  00FE9A  00                 	db	0
   545  00FE9B                     STR_25:
   546  00FE9B  49                 	db	73	;'I'
   547  00FE9C  6E                 	db	110	;'n'
   548  00FE9D  70                 	db	112	;'p'
   549  00FE9E  75                 	db	117	;'u'
   550  00FE9F  74                 	db	116	;'t'
   551  00FEA0  20                 	db	32
   552  00FEA1  53                 	db	83	;'S'
   553  00FEA2  75                 	db	117	;'u'
   554  00FEA3  6D                 	db	109	;'m'
   555  00FEA4  6D                 	db	109	;'m'
   556  00FEA5  61                 	db	97	;'a'
   557  00FEA6  72                 	db	114	;'r'
   558  00FEA7  79                 	db	121	;'y'
   559  00FEA8  3A                 	db	58	;':'
   560  00FEA9  00                 	db	0
   561  00FEAA                     STR_3:
   562  00FEAA  31                 	db	49	;'1'
   563  00FEAB  20                 	db	32
   564  00FEAC  70                 	db	112	;'p'
   565  00FEAD  72                 	db	114	;'r'
   566  00FEAE  65                 	db	101	;'e'
   567  00FEAF  76                 	db	118	;'v'
   568  00FEB0  69                 	db	105	;'i'
   569  00FEB1  6F                 	db	111	;'o'
   570  00FEB2  75                 	db	117	;'u'
   571  00FEB3  73                 	db	115	;'s'
   572  00FEB4  20                 	db	32
   573  00FEB5  6C                 	db	108	;'l'
   574  00FEB6  6F                 	db	111	;'o'
   575  00FEB7  67                 	db	103	;'g'
   576  00FEB8  00                 	db	0
   577  00FEB9                     STR_22:
   578  00FEB9  25                 	db	37
   579  00FEBA  69                 	db	105	;'i'
   580  00FEBB  2C                 	db	44
   581  00FEBC  20                 	db	32
   582  00FEBD  25                 	db	37
   583  00FEBE  69                 	db	105	;'i'
   584  00FEBF  2C                 	db	44
   585  00FEC0  20                 	db	32
   586  00FEC1  25                 	db	37
   587  00FEC2  69                 	db	105	;'i'
   588  00FEC3  2C                 	db	44
   589  00FEC4  20                 	db	32
   590  00FEC5  25                 	db	37
   591  00FEC6  69                 	db	105	;'i'
   592  00FEC7  00                 	db	0
   593  00FEC8                     STR_15:
   594  00FEC8  25                 	db	37
   595  00FEC9  30                 	db	48	;'0'
   596  00FECA  32                 	db	50	;'2'
   597  00FECB  69                 	db	105	;'i'
   598  00FECC  2F                 	db	47
   599  00FECD  25                 	db	37
   600  00FECE  30                 	db	48	;'0'
   601  00FECF  32                 	db	50	;'2'
   602  00FED0  69                 	db	105	;'i'
   603  00FED1  2F                 	db	47
   604  00FED2  25                 	db	37
   605  00FED3  30                 	db	48	;'0'
   606  00FED4  32                 	db	50	;'2'
   607  00FED5  69                 	db	105	;'i'
   608  00FED6  00                 	db	0
   609  00FED7                     STR_47:
   610  00FED7  25                 	db	37
   611  00FED8  30                 	db	48	;'0'
   612  00FED9  32                 	db	50	;'2'
   613  00FEDA  78                 	db	120	;'x'
   614  00FEDB  2F                 	db	47
   615  00FEDC  25                 	db	37
   616  00FEDD  30                 	db	48	;'0'
   617  00FEDE  32                 	db	50	;'2'
   618  00FEDF  78                 	db	120	;'x'
   619  00FEE0  2F                 	db	47
   620  00FEE1  25                 	db	37
   621  00FEE2  30                 	db	48	;'0'
   622  00FEE3  32                 	db	50	;'2'
   623  00FEE4  78                 	db	120	;'x'
   624  00FEE5  00                 	db	0
   625  00FEE6                     STR_48:
   626  00FEE6  25                 	db	37
   627  00FEE7  30                 	db	48	;'0'
   628  00FEE8  32                 	db	50	;'2'
   629  00FEE9  78                 	db	120	;'x'
   630  00FEEA  3A                 	db	58	;':'
   631  00FEEB  25                 	db	37
   632  00FEEC  30                 	db	48	;'0'
   633  00FEED  32                 	db	50	;'2'
   634  00FEEE  78                 	db	120	;'x'
   635  00FEEF  3A                 	db	58	;':'
   636  00FEF0  25                 	db	37
   637  00FEF1  30                 	db	48	;'0'
   638  00FEF2  32                 	db	50	;'2'
   639  00FEF3  78                 	db	120	;'x'
   640  00FEF4  00                 	db	0
   641  00FEF5                     STR_59:
   642  00FEF5  44                 	db	68	;'D'
   643  00FEF6  72                 	db	114	;'r'
   644  00FEF7  61                 	db	97	;'a'
   645  00FEF8  77                 	db	119	;'w'
   646  00FEF9  65                 	db	101	;'e'
   647  00FEFA  72                 	db	114	;'r'
   648  00FEFB  20                 	db	32
   649  00FEFC  61                 	db	97	;'a'
   650  00FEFD  6C                 	db	108	;'l'
   651  00FEFE  72                 	db	114	;'r'
   652  00FEFF  65                 	db	101	;'e'
   653  00FF00  61                 	db	97	;'a'
   654  00FF01  64                 	db	100	;'d'
   655  00FF02  79                 	db	121	;'y'
   656  00FF03  00                 	db	0
   657  00FF04                     STR_32:
   658  00FF04  49                 	db	73	;'I'
   659  00FF05  6E                 	db	110	;'n'
   660  00FF06  76                 	db	118	;'v'
   661  00FF07  61                 	db	97	;'a'
   662  00FF08  6C                 	db	108	;'l'
   663  00FF09  69                 	db	105	;'i'
   664  00FF0A  64                 	db	100	;'d'
   665  00FF0B  20                 	db	32
   666  00FF0C  66                 	db	102	;'f'
   667  00FF0D  6F                 	db	111	;'o'
   668  00FF0E  6F                 	db	111	;'o'
   669  00FF0F  64                 	db	100	;'d'
   670  00FF10  21                 	db	33
   671  00FF11  00                 	db	0
   672  00FF12                     STR_36:
   673  00FF12  49                 	db	73	;'I'
   674  00FF13  6E                 	db	110	;'n'
   675  00FF14  76                 	db	118	;'v'
   676  00FF15  61                 	db	97	;'a'
   677  00FF16  6C                 	db	108	;'l'
   678  00FF17  69                 	db	105	;'i'
   679  00FF18  64                 	db	100	;'d'
   680  00FF19  20                 	db	32
   681  00FF1A  64                 	db	100	;'d'
   682  00FF1B  69                 	db	105	;'i'
   683  00FF1C  65                 	db	101	;'e'
   684  00FF1D  74                 	db	116	;'t'
   685  00FF1E  21                 	db	33
   686  00FF1F  00                 	db	0
   687  00FF20                     STR_6:
   688  00FF20  6D                 	db	109	;'m'
   689  00FF21  6F                 	db	111	;'o'
   690  00FF22  76                 	db	118	;'v'
   691  00FF23  65                 	db	101	;'e'
   692  00FF24  20                 	db	32
   693  00FF25  66                 	db	102	;'f'
   694  00FF26  6F                 	db	111	;'o'
   695  00FF27  72                 	db	114	;'r'
   696  00FF28  77                 	db	119	;'w'
   697  00FF29  61                 	db	97	;'a'
   698  00FF2A  72                 	db	114	;'r'
   699  00FF2B  64                 	db	100	;'d'
   700  00FF2C  2E                 	db	46
   701  00FF2D  00                 	db	0
   702  00FF2E                     STR_51:
   703  00FF2E  6F                 	db	111	;'o'
   704  00FF2F  72                 	db	114	;'r'
   705  00FF30  20                 	db	32
   706  00FF31  70                 	db	112	;'p'
   707  00FF32  72                 	db	114	;'r'
   708  00FF33  65                 	db	101	;'e'
   709  00FF34  73                 	db	115	;'s'
   710  00FF35  73                 	db	115	;'s'
   711  00FF36  20                 	db	32
   712  00FF37  44                 	db	68	;'D'
   713  00FF38  20                 	db	32
   714  00FF39  74                 	db	116	;'t'
   715  00FF3A  6F                 	db	111	;'o'
   716  00FF3B  00                 	db	0
   717  00FF3C                     STR_66:
   718  00FF3C  49                 	db	73	;'I'
   719  00FF3D  6E                 	db	110	;'n'
   720  00FF3E  76                 	db	118	;'v'
   721  00FF3F  61                 	db	97	;'a'
   722  00FF40  6C                 	db	108	;'l'
   723  00FF41  69                 	db	105	;'i'
   724  00FF42  64                 	db	100	;'d'
   725  00FF43  20                 	db	32
   726  00FF44  6B                 	db	107	;'k'
   727  00FF45  65                 	db	101	;'e'
   728  00FF46  79                 	db	121	;'y'
   729  00FF47  21                 	db	33
   730  00FF48  00                 	db	0
   731  00FF49                     STR_27:
   732  00FF49  44                 	db	68	;'D'
   733  00FF4A  72                 	db	114	;'r'
   734  00FF4B  61                 	db	97	;'a'
   735  00FF4C  77                 	db	119	;'w'
   736  00FF4D  65                 	db	101	;'e'
   737  00FF4E  72                 	db	114	;'r'
   738  00FF4F  20                 	db	32
   739  00FF50  32                 	db	50	;'2'
   740  00FF51  3A                 	db	58	;':'
   741  00FF52  20                 	db	32
   742  00FF53  4C                 	db	76	;'L'
   743  00FF54  31                 	db	49	;'1'
   744  00FF55  00                 	db	0
   745  00FF56                     STR_53:
   746  00FF56  4D                 	db	77	;'M'
   747  00FF57  61                 	db	97	;'a'
   748  00FF58  78                 	db	120	;'x'
   749  00FF59  69                 	db	105	;'i'
   750  00FF5A  6D                 	db	109	;'m'
   751  00FF5B  75                 	db	117	;'u'
   752  00FF5C  6D                 	db	109	;'m'
   753  00FF5D  20                 	db	32
   754  00FF5E  6F                 	db	111	;'o'
   755  00FF5F  66                 	db	102	;'f'
   756  00FF60  20                 	db	32
   757  00FF61  38                 	db	56	;'8'
   758  00FF62  00                 	db	0
   759  00FF63                     STR_28:
   760  00FF63  41                 	db	65	;'A'
   761  00FF64  6E                 	db	110	;'n'
   762  00FF65  6F                 	db	111	;'o'
   763  00FF66  74                 	db	116	;'t'
   764  00FF67  68                 	db	104	;'h'
   765  00FF68  65                 	db	101	;'e'
   766  00FF69  72                 	db	114	;'r'
   767  00FF6A  20                 	db	32
   768  00FF6B  6C                 	db	108	;'l'
   769  00FF6C  6F                 	db	111	;'o'
   770  00FF6D  67                 	db	103	;'g'
   771  00FF6E  3F                 	db	63	;'?'
   772  00FF6F  00                 	db	0
   773  00FF70                     STR_45:
   774  00FF70  43                 	db	67	;'C'
   775  00FF71  75                 	db	117	;'u'
   776  00FF72  72                 	db	114	;'r'
   777  00FF73  72                 	db	114	;'r'
   778  00FF74  65                 	db	101	;'e'
   779  00FF75  6E                 	db	110	;'n'
   780  00FF76  74                 	db	116	;'t'
   781  00FF77  20                 	db	32
   782  00FF78  64                 	db	100	;'d'
   783  00FF79  61                 	db	97	;'a'
   784  00FF7A  74                 	db	116	;'t'
   785  00FF7B  65                 	db	101	;'e'
   786  00FF7C  00                 	db	0
   787  00FF7D                     STR_50:
   788  00FF7D  76                 	db	118	;'v'
   789  00FF7E  69                 	db	105	;'i'
   790  00FF7F  65                 	db	101	;'e'
   791  00FF80  77                 	db	119	;'w'
   792  00FF81  20                 	db	32
   793  00FF82  6C                 	db	108	;'l'
   794  00FF83  6F                 	db	111	;'o'
   795  00FF84  67                 	db	103	;'g'
   796  00FF85  73                 	db	115	;'s'
   797  00FF86  2C                 	db	44
   798  00FF87  00                 	db	0
   799  00FF88                     STR_2:
   800  00FF88  61                 	db	97	;'a'
   801  00FF89  76                 	db	118	;'v'
   802  00FF8A  61                 	db	97	;'a'
   803  00FF8B  69                 	db	105	;'i'
   804  00FF8C  6C                 	db	108	;'l'
   805  00FF8D  61                 	db	97	;'a'
   806  00FF8E  62                 	db	98	;'b'
   807  00FF8F  6C                 	db	108	;'l'
   808  00FF90  65                 	db	101	;'e'
   809  00FF91  2E                 	db	46
   810  00FF92  00                 	db	0
   811  00FF93                     STR_65:
   812  00FF93  52                 	db	82	;'R'
   813  00FF94  65                 	db	101	;'e'
   814  00FF95  62                 	db	98	;'b'
   815  00FF96  6F                 	db	111	;'o'
   816  00FF97  6F                 	db	111	;'o'
   817  00FF98  74                 	db	116	;'t'
   818  00FF99  69                 	db	105	;'i'
   819  00FF9A  6E                 	db	110	;'n'
   820  00FF9B  67                 	db	103	;'g'
   821  00FF9C  2E                 	db	46
   822  00FF9D  00                 	db	0
   823  00FF9E                     STR_33:
   824  00FF9E  54                 	db	84	;'T'
   825  00FF9F  72                 	db	114	;'r'
   826  00FFA0  79                 	db	121	;'y'
   827  00FFA1  20                 	db	32
   828  00FFA2  61                 	db	97	;'a'
   829  00FFA3  67                 	db	103	;'g'
   830  00FFA4  61                 	db	97	;'a'
   831  00FFA5  69                 	db	105	;'i'
   832  00FFA6  6E                 	db	110	;'n'
   833  00FFA7  2E                 	db	46
   834  00FFA8  00                 	db	0
   835  00FFA9                     STR_49:
   836  00FFA9  50                 	db	80	;'P'
   837  00FFAA  72                 	db	114	;'r'
   838  00FFAB  65                 	db	101	;'e'
   839  00FFAC  73                 	db	115	;'s'
   840  00FFAD  73                 	db	115	;'s'
   841  00FFAE  20                 	db	32
   842  00FFAF  23                 	db	35
   843  00FFB0  20                 	db	32
   844  00FFB1  74                 	db	116	;'t'
   845  00FFB2  6F                 	db	111	;'o'
   846  00FFB3  00                 	db	0
   847  00FFB4                     STR_46:
   848  00FFB4  61                 	db	97	;'a'
   849  00FFB5  6E                 	db	110	;'n'
   850  00FFB6  64                 	db	100	;'d'
   851  00FFB7  20                 	db	32
   852  00FFB8  74                 	db	116	;'t'
   853  00FFB9  69                 	db	105	;'i'
   854  00FFBA  6D                 	db	109	;'m'
   855  00FFBB  65                 	db	101	;'e'
   856  00FFBC  3A                 	db	58	;':'
   857  00FFBD  00                 	db	0
   858  00FFBE                     STR_57:
   859  00FFBE  4E                 	db	78	;'N'
   860  00FFBF  6F                 	db	111	;'o'
   861  00FFC0  20                 	db	32
   862  00FFC1  64                 	db	100	;'d'
   863  00FFC2  72                 	db	114	;'r'
   864  00FFC3  61                 	db	97	;'a'
   865  00FFC4  77                 	db	119	;'w'
   866  00FFC5  65                 	db	101	;'e'
   867  00FFC6  72                 	db	114	;'r'
   868  00FFC7  00                 	db	0
   869  00FFC8                     STR_10:
   870  00FFC8  6E                 	db	110	;'n'
   871  00FFC9  75                 	db	117	;'u'
   872  00FFCA  6D                 	db	109	;'m'
   873  00FFCB  62                 	db	98	;'b'
   874  00FFCC  65                 	db	101	;'e'
   875  00FFCD  72                 	db	114	;'r'
   876  00FFCE  3A                 	db	58	;':'
   877  00FFCF  20                 	db	32
   878  00FFD0  00                 	db	0
   879  00FFD1                     STR_60:
   880  00FFD1  69                 	db	105	;'i'
   881  00FFD2  6E                 	db	110	;'n'
   882  00FFD3  20                 	db	32
   883  00FFD4  75                 	db	117	;'u'
   884  00FFD5  73                 	db	115	;'s'
   885  00FFD6  65                 	db	101	;'e'
   886  00FFD7  21                 	db	33
   887  00FFD8  00                 	db	0
   888  00FFD9                     STR_17:
   889  00FFD9  25                 	db	37
   890  00FFDA  69                 	db	105	;'i'
   891  00FFDB  3A                 	db	58	;':'
   892  00FFDC  25                 	db	37
   893  00FFDD  30                 	db	48	;'0'
   894  00FFDE  32                 	db	50	;'2'
   895  00FFDF  69                 	db	105	;'i'
   896  00FFE0  00                 	db	0
   897  00FFE1                     STR_1:
   898  00FFE1  4E                 	db	78	;'N'
   899  00FFE2  6F                 	db	111	;'o'
   900  00FFE3  20                 	db	32
   901  00FFE4  6C                 	db	108	;'l'
   902  00FFE5  6F                 	db	111	;'o'
   903  00FFE6  67                 	db	103	;'g'
   904  00FFE7  73                 	db	115	;'s'
   905  00FFE8  00                 	db	0
   906  00FFE9                     STR_40:
   907  00FFE9  53                 	db	83	;'S'
   908  00FFEA  74                 	db	116	;'t'
   909  00FFEB  61                 	db	97	;'a'
   910  00FFEC  6E                 	db	110	;'n'
   911  00FFED  64                 	db	100	;'d'
   912  00FFEE  62                 	db	98	;'b'
   913  00FFEF  79                 	db	121	;'y'
   914  00FFF0  00                 	db	0
   915  00FFF1                     STR_11:
   916  00FFF1  47                 	db	71	;'G'
   917  00FFF2  72                 	db	114	;'r'
   918  00FFF3  65                 	db	101	;'e'
   919  00FFF4  61                 	db	97	;'a'
   920  00FFF5  74                 	db	116	;'t'
   921  00FFF6  21                 	db	33
   922  00FFF7  00                 	db	0
   923  00FFF8                     STR_14:
   924  00FFF8  44                 	db	68	;'D'
   925  00FFF9  61                 	db	97	;'a'
   926  00FFFA  74                 	db	116	;'t'
   927  00FFFB  65                 	db	101	;'e'
   928  00FFFC  3A                 	db	58	;':'
   929  00FFFD  00                 	db	0
   930  0000                     
   931                           ; #config settings
   932  00FFFE  00                 	db	0	; dummy byte at the end
   933  0000                     
   934                           	psect	cinit
   935  00D2B0                     __pcinit:
   936                           	opt stack 0
   937  00D2B0                     start_initialization:
   938                           	opt stack 0
   939  00D2B0                     __initialization:
   940                           	opt stack 0
   941                           
   942                           ; Clear objects allocated to BANK0 (24 bytes)
   943  00D2B0  EE00  F080         	lfsr	0,__pbssBANK0
   944  00D2B4  0E18               	movlw	24
   945  00D2B6                     clear_0:
   946  00D2B6  6AEE               	clrf	postinc0,c
   947  00D2B8  06E8               	decf	wreg,f,c
   948  00D2BA  E1FD               	bnz	clear_0
   949                           
   950                           ; Clear objects allocated to COMRAM (10 bytes)
   951  00D2BC  EE00  F071         	lfsr	0,__pbssCOMRAM
   952  00D2C0  0E0A               	movlw	10
   953  00D2C2                     clear_1:
   954  00D2C2  6AEE               	clrf	postinc0,c
   955  00D2C4  06E8               	decf	wreg,f,c
   956  00D2C6  E1FD               	bnz	clear_1
   957  00D2C8                     end_of_initialization:
   958                           	opt stack 0
   959  00D2C8                     __end_of__initialization:
   960                           	opt stack 0
   961  00D2C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   962  00D2CA  6EF8               	movwf	tblptru,c
   963  00D2CC  0100               	movlb	0
   964  00D2CE  EFB6  F069         	goto	_main	;jump to C main() function
   965                           tblptru	equ	0xFF8
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           
   969                           	psect	bssCOMRAM
   970  000071                     __pbssCOMRAM:
   971                           	opt stack 0
   972  000071                     food_press@F3115:
   973                           	opt stack 0
   974  000071                     	ds	8
   975  000079                     standbyMode@LCDinterruptState:
   976                           	opt stack 0
   977  000079                     	ds	1
   978  00007A                     	ds	1
   979                           tblptru	equ	0xFF8
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           
   983                           	psect	bssBANK0
   984  000080                     __pbssBANK0:
   985                           	opt stack 0
   986  000080                     _drawerInformation:
   987                           	opt stack 0
   988  000080                     	ds	16
   989  000090                     diet_press@F3130:
   990                           	opt stack 0
   991  000090                     	ds	8
   992                           tblptru	equ	0xFF8
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           
   996                           	psect	cstackCOMRAM
   997  000001                     __pcstackCOMRAM:
   998                           	opt stack 0
   999  000001                     ??_isdigit:
  1000  000001                     ??_I2C_Master_Wait:
  1001  000001                     ?_check_food:
  1002                           	opt stack 0
  1003  000001                     ?_verifyKeypress:
  1004                           	opt stack 0
  1005  000001                     ?_get_digits:
  1006                           	opt stack 0
  1007  000001                     ?_decode_drawer:
  1008                           	opt stack 0
  1009  000001                     ?___wmul:
  1010                           	opt stack 0
  1011  000001                     ?___lwdiv:
  1012                           	opt stack 0
  1013  000001                     ?___lldiv:
  1014                           	opt stack 0
  1015  000001                     lcdNibble@temp:
  1016                           	opt stack 0
  1017  000001                     writeEEPROM@data:
  1018                           	opt stack 0
  1019  000001                     readEEPROM@address:
  1020                           	opt stack 0
  1021  000001                     check_food@sum:
  1022                           	opt stack 0
  1023  000001                     verifyKeypress@keypress:
  1024                           	opt stack 0
  1025  000001                     get_digits@sum:
  1026                           	opt stack 0
  1027  000001                     decode_drawer@drawer:
  1028                           	opt stack 0
  1029  000001                     ___wmul@multiplier:
  1030                           	opt stack 0
  1031  000001                     ___lwdiv@dividend:
  1032                           	opt stack 0
  1033  000001                     ___lldiv@dividend:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x0
  1037  000001                     	ds	1
  1038  000002                     lcdNibble@data:
  1039                           	opt stack 0
  1040  000002                     writeEEPROM@address:
  1041                           	opt stack 0
  1042  000002                     I2C_Master_Read@ackBit:
  1043                           	opt stack 0
  1044  000002                     _isdigit$1056:
  1045                           	opt stack 0
  1046  000002                     I2C_Master_Write@byteToWrite:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x1
  1050  000002                     	ds	1
  1051  000003                     ??_shiftEEPROM:
  1052  000003                     ??_verifyKeypress:
  1053  000003                     ??_get_digits:
  1054  000003                     ??_decode_drawer:
  1055  000003                     lcdInst@data:
  1056                           	opt stack 0
  1057  000003                     putch@data:
  1058                           	opt stack 0
  1059  000003                     I2C_Master_Read@receivedByte:
  1060                           	opt stack 0
  1061  000003                     isdigit@c:
  1062                           	opt stack 0
  1063  000003                     check_food@foodInput:
  1064                           	opt stack 0
  1065  000003                     initEEPROM@i:
  1066                           	opt stack 0
  1067  000003                     ___wmul@multiplicand:
  1068                           	opt stack 0
  1069  000003                     ___lwdiv@divisor:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x2
  1073  000003                     	ds	1
  1074  000004                     ??_initLCD:
  1075  000004                     shiftEEPROM@temp:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x3
  1079  000004                     	ds	1
  1080  000005                     ??_check_food:
  1081  000005                     verifyKeypress@logNumber:
  1082                           	opt stack 0
  1083  000005                     get_digits@count:
  1084                           	opt stack 0
  1085  000005                     decode_drawer@returnValue:
  1086                           	opt stack 0
  1087  000005                     ___wmul@product:
  1088                           	opt stack 0
  1089  000005                     ___lwdiv@quotient:
  1090                           	opt stack 0
  1091  000005                     ___lldiv@divisor:
  1092                           	opt stack 0
  1093                           
  1094                           ; 4 bytes @ 0x4
  1095  000005                     	ds	1
  1096  000006                     verifyKeypress@returnVal:
  1097                           	opt stack 0
  1098  000006                     shiftEEPROM@i:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x5
  1102  000006                     	ds	1
  1103  000007                     ___lwdiv@counter:
  1104                           	opt stack 0
  1105  000007                     check_food@returnValue:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x6
  1109  000007                     	ds	1
  1110  000008                     ?___lwmod:
  1111                           	opt stack 0
  1112  000008                     verifyKeypress@i:
  1113                           	opt stack 0
  1114  000008                     ___lwmod@dividend:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x7
  1118  000008                     	ds	1
  1119  000009                     ___lldiv@quotient:
  1120                           	opt stack 0
  1121                           
  1122                           ; 4 bytes @ 0x8
  1123  000009                     	ds	1
  1124  00000A                     ___lwmod@divisor:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x9
  1128  00000A                     	ds	2
  1129  00000C                     ___lwmod@counter:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0xB
  1133  00000C                     	ds	1
  1134  00000D                     ?_printf:
  1135                           	opt stack 0
  1136  00000D                     ___lldiv@counter:
  1137                           	opt stack 0
  1138  00000D                     printf@f:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0xC
  1142  00000D                     	ds	1
  1143  00000E                     I2C_Master_Init@clockFreq:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0xD
  1147  00000E                     	ds	4
  1148  000012                     ??_I2C_Master_Init:
  1149                           
  1150                           ; 1 bytes @ 0x11
  1151  000012                     	ds	5
  1152  000017                     ??_printf:
  1153                           
  1154                           ; 1 bytes @ 0x16
  1155  000017                     	ds	4
  1156  00001B                     printf@idx:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x1A
  1160  00001B                     	ds	1
  1161  00001C                     printf@ap:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x1B
  1165  00001C                     	ds	2
  1166  00001E                     printf@prec:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x1D
  1170  00001E                     	ds	1
  1171  00001F                     printf@val:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x1E
  1175  00001F                     	ds	2
  1176  000021                     printf@flag:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x20
  1180  000021                     	ds	1
  1181  000022                     printf@width:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x21
  1185  000022                     	ds	2
  1186  000024                     printf@c:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x23
  1190  000024                     	ds	1
  1191  000025                     ?_displayLogs:
  1192                           	opt stack 0
  1193  000025                     ?_food_press:
  1194                           	opt stack 0
  1195  000025                     ?_diet_press:
  1196                           	opt stack 0
  1197  000025                     ?_which_drawer:
  1198                           	opt stack 0
  1199  000025                     displayLogs@logNumber:
  1200                           	opt stack 0
  1201  000025                     food_press@dietSum:
  1202                           	opt stack 0
  1203  000025                     diet_press@drawer:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x24
  1207  000025                     	ds	2
  1208  000027                     ??_displayLogs:
  1209  000027                     ??_diet_press:
  1210  000027                     ??_which_drawer:
  1211  000027                     food_press@drawer:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x26
  1215  000027                     	ds	1
  1216  000028                     which_drawer@rand:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x27
  1220  000028                     	ds	1
  1221  000029                     ??_food_press:
  1222  000029                     displayLogs@year:
  1223                           	opt stack 0
  1224  000029                     diet_press@previous:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x28
  1228  000029                     	ds	1
  1229  00002A                     which_drawer@sum:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x29
  1233  00002A                     	ds	1
  1234  00002B                     displayLogs@month:
  1235                           	opt stack 0
  1236  00002B                     food_press@tally:
  1237                           	opt stack 0
  1238  00002B                     diet_press@i:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x2A
  1242  00002B                     	ds	1
  1243  00002C                     which_drawer@backCheck:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x2B
  1247  00002C                     	ds	1
  1248  00002D                     displayLogs@day:
  1249                           	opt stack 0
  1250  00002D                     food_press@backCheck:
  1251                           	opt stack 0
  1252  00002D                     diet_press@backCheck:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x2C
  1256  00002D                     	ds	1
  1257  00002E                     which_drawer@count:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x2D
  1261  00002E                     	ds	1
  1262  00002F                     displayLogs@roundPieces:
  1263                           	opt stack 0
  1264  00002F                     food_press@isValid:
  1265                           	opt stack 0
  1266  00002F                     diet_press@count:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x2E
  1270  00002F                     	ds	1
  1271  000030                     which_drawer@keypress:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x2F
  1275  000030                     	ds	1
  1276  000031                     displayLogs@flatPieces:
  1277                           	opt stack 0
  1278  000031                     food_press@count:
  1279                           	opt stack 0
  1280  000031                     diet_press@sum:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x30
  1284  000031                     	ds	2
  1285  000033                     diet_press@keypress:
  1286                           	opt stack 0
  1287  000033                     displayLogs@longPieces:
  1288                           	opt stack 0
  1289  000033                     food_press@foodTable:
  1290                           	opt stack 0
  1291                           
  1292                           ; 8 bytes @ 0x32
  1293  000033                     	ds	1
  1294  000034                     diet_press@dietTable:
  1295                           	opt stack 0
  1296                           
  1297                           ; 8 bytes @ 0x33
  1298  000034                     	ds	1
  1299  000035                     displayLogs@minutes:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x34
  1303  000035                     	ds	2
  1304  000037                     displayLogs@seconds:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x36
  1308  000037                     	ds	2
  1309  000039                     displayLogs@keypress3:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x38
  1313  000039                     	ds	1
  1314  00003A                     displayLogs@operationTime:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x39
  1318  00003A                     	ds	1
  1319  00003B                     food_press@keypress:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x3A
  1323  00003B                     	ds	1
  1324  00003C                     displayLogs@markedDrawer1:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x3B
  1328  00003C                     	ds	2
  1329  00003E                     displayLogs@markedDrawer2:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x3D
  1333  00003E                     	ds	2
  1334  000040                     displayLogs@markedDrawer3:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x3F
  1338  000040                     	ds	2
  1339  000042                     displayLogs@markedDrawer4:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x41
  1343  000042                     	ds	2
  1344  000044                     displayLogs@n:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x43
  1348  000044                     	ds	2
  1349  000046                     ?_viewLogs:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x45
  1353  000046                     	ds	2
  1354  000048                     ??_viewLogs:
  1355                           
  1356                           ; 1 bytes @ 0x47
  1357  000048                     	ds	2
  1358  00004A                     viewLogs@checkLog:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x49
  1362  00004A                     	ds	2
  1363  00004C                     viewLogs@returnVal:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x4B
  1367  00004C                     	ds	2
  1368  00004E                     viewLogs@logView:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x4D
  1372  00004E                     	ds	2
  1373  000050                     viewLogs@logNumber:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x4F
  1377  000050                     	ds	1
  1378  000051                     viewLogs@keypress2:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x50
  1382  000051                     	ds	1
  1383  000052                     ??_standbyMode:
  1384                           
  1385                           ; 1 bytes @ 0x51
  1386  000052                     	ds	2
  1387  000054                     standbyMode@time:
  1388                           	opt stack 0
  1389                           
  1390                           ; 7 bytes @ 0x53
  1391  000054                     	ds	7
  1392  00005B                     standbyMode@firstIteration:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x5A
  1396  00005B                     	ds	2
  1397  00005D                     standbyMode@whichKey:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x5C
  1401  00005D                     	ds	2
  1402  00005F                     standbyMode@keypress:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x5E
  1406  00005F                     	ds	1
  1407  000060                     standbyMode@keypress1:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x5F
  1411  000060                     	ds	1
  1412  000061                     standbyMode@validDrawer:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x60
  1416  000061                     	ds	2
  1417  000063                     standbyMode@zero:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x62
  1421  000063                     	ds	2
  1422  000065                     standbyMode@food:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x64
  1426  000065                     	ds	2
  1427  000067                     standbyMode@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x66
  1431  000067                     	ds	2
  1432  000069                     standbyMode@drawerCount:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x68
  1436  000069                     	ds	2
  1437  00006B                     standbyMode@diet:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x6A
  1441  00006B                     	ds	2
  1442  00006D                     standbyMode@i:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x6C
  1446  00006D                     	ds	2
  1447  00006F                     standbyMode@drawer:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x6E
  1451  00006F                     	ds	2
  1452  000071                     tblptru	equ	0xFF8
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           
  1456                           ; 1 bytes @ 0x70
  1457 ;;
  1458 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1459 ;;
  1460 ;; *************** function _main *****************
  1461 ;; Defined at:
  1462 ;;		line 13 in file "main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;Total ram usage:        0 bytes
  1481 ;; Hardware stack levels required when called:    6
  1482 ;; This function calls:
  1483 ;;		_initLCD
  1484 ;;		_standbyMode
  1485 ;; This function is called by:
  1486 ;;		Startup code after reset
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text0
  1491  00D36C                     __ptext0:
  1492                           	opt stack 0
  1493  00D36C                     _main:
  1494                           	opt stack 25
  1495                           
  1496                           ;main.c: 19: LATA = 0x00;
  1497                           
  1498                           ;incstack = 0
  1499  00D36C  0E00               	movlw	0
  1500  00D36E  6E89               	movwf	3977,c	;volatile
  1501                           
  1502                           ;main.c: 20: LATB = 0x00;
  1503  00D370  0E00               	movlw	0
  1504  00D372  6E8A               	movwf	3978,c	;volatile
  1505                           
  1506                           ;main.c: 21: LATC = 0x00;
  1507  00D374  0E00               	movlw	0
  1508  00D376  6E8B               	movwf	3979,c	;volatile
  1509                           
  1510                           ;main.c: 22: LATD = 0x00;
  1511  00D378  0E00               	movlw	0
  1512  00D37A  6E8C               	movwf	3980,c	;volatile
  1513                           
  1514                           ;main.c: 23: LATE = 0x00;
  1515  00D37C  0E00               	movlw	0
  1516  00D37E  6E8D               	movwf	3981,c	;volatile
  1517                           
  1518                           ;main.c: 27: TRISA = 0xFF;
  1519  00D380  6892               	setf	3986,c	;volatile
  1520                           
  1521                           ;main.c: 28: TRISB = 0xFF;
  1522  00D382  6893               	setf	3987,c	;volatile
  1523                           
  1524                           ;main.c: 29: TRISC = 0x00;
  1525  00D384  0E00               	movlw	0
  1526  00D386  6E94               	movwf	3988,c	;volatile
  1527                           
  1528                           ;main.c: 30: TRISD = 0x00;
  1529  00D388  0E00               	movlw	0
  1530  00D38A  6E95               	movwf	3989,c	;volatile
  1531                           
  1532                           ;main.c: 31: TRISE = 0x00;
  1533  00D38C  0E00               	movlw	0
  1534  00D38E  6E96               	movwf	3990,c	;volatile
  1535                           
  1536                           ;main.c: 34: ADCON0 = 0x00;
  1537  00D390  0E00               	movlw	0
  1538  00D392  6EC2               	movwf	4034,c	;volatile
  1539                           
  1540                           ;main.c: 35: ADCON1 = 0b00001111;
  1541  00D394  0E0F               	movlw	15
  1542  00D396  6EC1               	movwf	4033,c	;volatile
  1543                           
  1544                           ;main.c: 38: initLCD();
  1545  00D398  ECF3  F069         	call	_initLCD	;wreg free
  1546                           
  1547                           ;main.c: 52: standbyMode();
  1548  00D39C  EC04  F07A         	call	_standbyMode	;wreg free
  1549                           
  1550                           ;main.c: 53: return;
  1551  00D3A0  EF00  F000         	goto	start
  1552  00D3A4                     __end_of_main:
  1553                           	opt stack 0
  1554                           tblptru	equ	0xFF8
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           
  1558 ;; *************** function _standbyMode *****************
  1559 ;; Defined at:
  1560 ;;		line 951 in file "standbyMode.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  keypress1       1   95[COMRAM] unsigned char 
  1565 ;;  whichKey        2   92[COMRAM] unsigned int 
  1566 ;;  drawer          2  110[COMRAM] unsigned int 
  1567 ;;  i               2  108[COMRAM] unsigned int 
  1568 ;;  diet            2  106[COMRAM] unsigned int 
  1569 ;;  drawerCount     2  104[COMRAM] unsigned int 
  1570 ;;  food            2  100[COMRAM] unsigned int 
  1571 ;;  zero            2   98[COMRAM] unsigned int 
  1572 ;;  validDrawer     2   96[COMRAM] unsigned int 
  1573 ;;  firstIterati    2   90[COMRAM] unsigned int 
  1574 ;;  time            7   83[COMRAM] unsigned char [7]
  1575 ;;  x               2  102[COMRAM] unsigned int 
  1576 ;;  keypress        1   94[COMRAM] unsigned char 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;Total ram usage:       31 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    5
  1593 ;; This function calls:
  1594 ;;		_I2C_Master_Init
  1595 ;;		_I2C_Master_Read
  1596 ;;		_I2C_Master_Start
  1597 ;;		_I2C_Master_Stop
  1598 ;;		_I2C_Master_Write
  1599 ;;		_diet_press
  1600 ;;		_food_press
  1601 ;;		_initEEPROM
  1602 ;;		_lcdInst
  1603 ;;		_printf
  1604 ;;		_shiftEEPROM
  1605 ;;		_viewLogs
  1606 ;;		_which_drawer
  1607 ;;		_writeEEPROM
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text1
  1614  00F408                     __ptext1:
  1615                           	opt stack 0
  1616  00F408                     _standbyMode:
  1617                           	opt stack 25
  1618                           
  1619                           ;standbyMode.c: 954: unsigned char time[7];
  1620                           ;standbyMode.c: 955: unsigned int x = 0;
  1621                           
  1622                           ;incstack = 0
  1623  00F408  0E00               	movlw	0
  1624  00F40A  6E68               	movwf	standbyMode@x+1,c
  1625  00F40C  0E00               	movlw	0
  1626  00F40E  6E67               	movwf	standbyMode@x,c
  1627                           
  1628                           ;standbyMode.c: 956: initEEPROM();
  1629  00F410  EC8E  F069         	call	_initEEPROM	;wreg free
  1630                           
  1631                           ;standbyMode.c: 959: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1632  00F414  0E01               	movlw	1
  1633  00F416  EC2B  F069         	call	_lcdInst
  1634  00F41A  0EC3               	movlw	195
  1635  00F41C  6E52               	movwf	??_standbyMode& (0+255),c
  1636  00F41E  0ECD               	movlw	205
  1637  00F420                     u6727:
  1638  00F420  2EE8               	decfsz	wreg,f,c
  1639  00F422  D7FE               	bra	u6727
  1640  00F424  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1641  00F426  D7FC               	bra	u6727
  1642  00F428  F000               	nop	
  1643                           
  1644                           ;standbyMode.c: 960: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1645  00F42A  0E0C               	movlw	12
  1646  00F42C  EC2B  F069         	call	_lcdInst
  1647                           
  1648                           ;standbyMode.c: 961: printf("Standby");
  1649  00F430  0EE9               	movlw	low STR_40
  1650  00F432  6E0D               	movwf	printf@f,c
  1651  00F434  0EFF               	movlw	high STR_40
  1652  00F436  6E0E               	movwf	printf@f+1,c
  1653  00F438  ECAF  F06F         	call	_printf	;wreg free
  1654                           
  1655                           ;standbyMode.c: 962: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1656  00F43C  0E66               	movlw	102
  1657  00F43E  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1658  00F440  0E76               	movlw	118
  1659  00F442  6E52               	movwf	??_standbyMode& (0+255),c
  1660  00F444  0EC1               	movlw	193
  1661  00F446                     u6737:
  1662  00F446  2EE8               	decfsz	wreg,f,c
  1663  00F448  D7FE               	bra	u6737
  1664  00F44A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1665  00F44C  D7FC               	bra	u6737
  1666  00F44E  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1667  00F450  D7FA               	bra	u6737
  1668  00F452  F000               	nop	
  1669                           
  1670                           ;standbyMode.c: 963: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1671  00F454  0E01               	movlw	1
  1672  00F456  EC2B  F069         	call	_lcdInst
  1673  00F45A  0EC3               	movlw	195
  1674  00F45C  6E52               	movwf	??_standbyMode& (0+255),c
  1675  00F45E  0ECD               	movlw	205
  1676  00F460                     u6747:
  1677  00F460  2EE8               	decfsz	wreg,f,c
  1678  00F462  D7FE               	bra	u6747
  1679  00F464  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1680  00F466  D7FC               	bra	u6747
  1681  00F468  F000               	nop	
  1682                           
  1683                           ;standbyMode.c: 964: printf("Press any key to");
  1684  00F46A  0ECB               	movlw	low STR_5
  1685  00F46C  6E0D               	movwf	printf@f,c
  1686  00F46E  0EFD               	movlw	high STR_5
  1687  00F470  6E0E               	movwf	printf@f+1,c
  1688  00F472  ECAF  F06F         	call	_printf	;wreg free
  1689                           
  1690                           ;standbyMode.c: 965: lcdInst(0xC0);;
  1691  00F476  0EC0               	movlw	192
  1692  00F478  EC2B  F069         	call	_lcdInst
  1693                           
  1694                           ;standbyMode.c: 966: printf("begin operation.");
  1695  00F47C  0E98               	movlw	low STR_42
  1696  00F47E  6E0D               	movwf	printf@f,c
  1697  00F480  0EFD               	movlw	high STR_42
  1698  00F482  6E0E               	movwf	printf@f+1,c
  1699  00F484  ECAF  F06F         	call	_printf	;wreg free
  1700  00F488                     
  1701                           ;standbyMode.c: 969: continue;
  1702  00F488  A281               	btfss	3969,1,c	;volatile
  1703  00F48A  D7FE               	goto	l468
  1704                           
  1705                           ;standbyMode.c: 970: }
  1706                           ;standbyMode.c: 973: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1707  00F48C  0E01               	movlw	1
  1708  00F48E  EC2B  F069         	call	_lcdInst
  1709  00F492  0EC3               	movlw	195
  1710  00F494  6E52               	movwf	??_standbyMode& (0+255),c
  1711  00F496  0ECD               	movlw	205
  1712  00F498                     u6757:
  1713  00F498  2EE8               	decfsz	wreg,f,c
  1714  00F49A  D7FE               	bra	u6757
  1715  00F49C  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1716  00F49E  D7FC               	bra	u6757
  1717  00F4A0  F000               	nop	
  1718                           
  1719                           ;standbyMode.c: 974: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1720  00F4A2  0E0C               	movlw	12
  1721  00F4A4  EC2B  F069         	call	_lcdInst
  1722                           
  1723                           ;standbyMode.c: 975: printf("Welcome to your");
  1724  00F4A8  0E5D               	movlw	low STR_43
  1725  00F4AA  6E0D               	movwf	printf@f,c
  1726  00F4AC  0EFE               	movlw	high STR_43
  1727  00F4AE  6E0E               	movwf	printf@f+1,c
  1728  00F4B0  ECAF  F06F         	call	_printf	;wreg free
  1729                           
  1730                           ;standbyMode.c: 976: lcdInst(0xC0);;
  1731  00F4B4  0EC0               	movlw	192
  1732  00F4B6  EC2B  F069         	call	_lcdInst
  1733                           
  1734                           ;standbyMode.c: 977: printf("cabinet sorter!");
  1735  00F4BA  0EED               	movlw	low STR_44
  1736  00F4BC  6E0D               	movwf	printf@f,c
  1737  00F4BE  0EFD               	movlw	high STR_44
  1738  00F4C0  6E0E               	movwf	printf@f+1,c
  1739  00F4C2  ECAF  F06F         	call	_printf	;wreg free
  1740                           
  1741                           ;standbyMode.c: 978: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1742  00F4C6  0E33               	movlw	51
  1743  00F4C8  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1744  00F4CA  0EBB               	movlw	187
  1745  00F4CC  6E52               	movwf	??_standbyMode& (0+255),c
  1746  00F4CE  0EE0               	movlw	224
  1747  00F4D0                     u6767:
  1748  00F4D0  2EE8               	decfsz	wreg,f,c
  1749  00F4D2  D7FE               	bra	u6767
  1750  00F4D4  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1751  00F4D6  D7FC               	bra	u6767
  1752  00F4D8  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1753  00F4DA  D7FA               	bra	u6767
  1754                           
  1755                           ;standbyMode.c: 981: writeEEPROM(250, 2);
  1756  00F4DC  0E02               	movlw	2
  1757  00F4DE  6E01               	movwf	writeEEPROM@data,c
  1758  00F4E0  0EFA               	movlw	250
  1759  00F4E2  ECA1  F069         	call	_writeEEPROM
  1760                           
  1761                           ;standbyMode.c: 982: writeEEPROM(0, 18);
  1762  00F4E6  0E12               	movlw	18
  1763  00F4E8  6E01               	movwf	writeEEPROM@data,c
  1764  00F4EA  0E00               	movlw	0
  1765  00F4EC  ECA1  F069         	call	_writeEEPROM
  1766                           
  1767                           ;standbyMode.c: 983: writeEEPROM(1, 2);
  1768  00F4F0  0E02               	movlw	2
  1769  00F4F2  6E01               	movwf	writeEEPROM@data,c
  1770  00F4F4  0E01               	movlw	1
  1771  00F4F6  ECA1  F069         	call	_writeEEPROM
  1772                           
  1773                           ;standbyMode.c: 984: writeEEPROM(2, 28);
  1774  00F4FA  0E1C               	movlw	28
  1775  00F4FC  6E01               	movwf	writeEEPROM@data,c
  1776  00F4FE  0E02               	movlw	2
  1777  00F500  ECA1  F069         	call	_writeEEPROM
  1778                           
  1779                           ;standbyMode.c: 985: writeEEPROM(3, 91);
  1780  00F504  0E5B               	movlw	91
  1781  00F506  6E01               	movwf	writeEEPROM@data,c
  1782  00F508  0E03               	movlw	3
  1783  00F50A  ECA1  F069         	call	_writeEEPROM
  1784                           
  1785                           ;standbyMode.c: 986: writeEEPROM(4, 3);
  1786  00F50E  0E03               	movlw	3
  1787  00F510  6E01               	movwf	writeEEPROM@data,c
  1788  00F512  0E04               	movlw	4
  1789  00F514  ECA1  F069         	call	_writeEEPROM
  1790                           
  1791                           ;standbyMode.c: 987: writeEEPROM(5, 15);
  1792  00F518  0E0F               	movlw	15
  1793  00F51A  6E01               	movwf	writeEEPROM@data,c
  1794  00F51C  0E05               	movlw	5
  1795  00F51E  ECA1  F069         	call	_writeEEPROM
  1796                           
  1797                           ;standbyMode.c: 988: writeEEPROM(6, 8);
  1798  00F522  0E08               	movlw	8
  1799  00F524  6E01               	movwf	writeEEPROM@data,c
  1800  00F526  0E06               	movlw	6
  1801  00F528  ECA1  F069         	call	_writeEEPROM
  1802                           
  1803                           ;standbyMode.c: 989: writeEEPROM(7, 12);
  1804  00F52C  0E0C               	movlw	12
  1805  00F52E  6E01               	movwf	writeEEPROM@data,c
  1806  00F530  0E07               	movlw	7
  1807  00F532  ECA1  F069         	call	_writeEEPROM
  1808                           
  1809                           ;standbyMode.c: 990: writeEEPROM(8, 1);
  1810  00F536  0E01               	movlw	1
  1811  00F538  6E01               	movwf	writeEEPROM@data,c
  1812  00F53A  0E08               	movlw	8
  1813  00F53C  ECA1  F069         	call	_writeEEPROM
  1814                           
  1815                           ;standbyMode.c: 991: writeEEPROM(9, 13);
  1816  00F540  0E0D               	movlw	13
  1817  00F542  6E01               	movwf	writeEEPROM@data,c
  1818  00F544  0E09               	movlw	9
  1819  00F546  ECA1  F069         	call	_writeEEPROM
  1820                           
  1821                           ;standbyMode.c: 992: writeEEPROM(10, 0);
  1822  00F54A  0E00               	movlw	0
  1823  00F54C  6E01               	movwf	writeEEPROM@data,c
  1824  00F54E  0E0A               	movlw	10
  1825  00F550  ECA1  F069         	call	_writeEEPROM
  1826                           
  1827                           ;standbyMode.c: 993: shiftEEPROM();
  1828  00F554  EC19  F06B         	call	_shiftEEPROM	;wreg free
  1829                           
  1830                           ;standbyMode.c: 1002: I2C_Master_Init(100000);
  1831  00F558  0EA0               	movlw	160
  1832  00F55A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1833  00F55C  0E86               	movlw	134
  1834  00F55E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1835  00F560  0E01               	movlw	1
  1836  00F562  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1837  00F564  0E00               	movlw	0
  1838  00F566  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1839  00F568  EC6B  F06A         	call	_I2C_Master_Init	;wreg free
  1840                           
  1841                           ;standbyMode.c: 1003: I2C_Master_Start();
  1842  00F56C  EC15  F069         	call	_I2C_Master_Start	;wreg free
  1843                           
  1844                           ;standbyMode.c: 1004: I2C_Master_Write(0b11010001);
  1845  00F570  0E00               	movlw	0
  1846  00F572  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1847  00F574  0ED1               	movlw	209
  1848  00F576  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1849  00F578  EC1D  F069         	call	_I2C_Master_Write	;wreg free
  1850                           
  1851                           ;standbyMode.c: 1005: for(x = 0; x < 6; x++){
  1852  00F57C  0E00               	movlw	0
  1853  00F57E  6E68               	movwf	standbyMode@x+1,c
  1854  00F580  0E00               	movlw	0
  1855  00F582  6E67               	movwf	standbyMode@x,c
  1856  00F584                     l4832:
  1857  00F584  5068               	movf	standbyMode@x+1,w,c
  1858  00F586  E111               	bnz	l4842
  1859  00F588  0E06               	movlw	6
  1860  00F58A  5C67               	subwf	standbyMode@x,w,c
  1861  00F58C  B0D8               	btfsc	status,0,c
  1862  00F58E  D00D               	goto	u6330
  1863                           
  1864                           ;standbyMode.c: 1006: time[x] = I2C_Master_Read(0);
  1865  00F590  0E54               	movlw	low standbyMode@time
  1866  00F592  2467               	addwf	standbyMode@x,w,c
  1867  00F594  6ED9               	movwf	fsr2l,c
  1868  00F596  0E00               	movlw	high standbyMode@time
  1869  00F598  2068               	addwfc	standbyMode@x+1,w,c
  1870  00F59A  6EDA               	movwf	fsr2h,c
  1871  00F59C  0E00               	movlw	0
  1872  00F59E  EC69  F069         	call	_I2C_Master_Read
  1873  00F5A2  6EDF               	movwf	indf2,c
  1874  00F5A4  4A67               	infsnz	standbyMode@x,f,c
  1875  00F5A6  2A68               	incf	standbyMode@x+1,f,c
  1876  00F5A8  D7ED               	goto	l4832
  1877  00F5AA                     u6330:
  1878  00F5AA                     l4842:
  1879                           
  1880                           ;standbyMode.c: 1007: }
  1881                           ;standbyMode.c: 1008: time[6] = I2C_Master_Read(1);
  1882  00F5AA  0E01               	movlw	1
  1883  00F5AC  EC69  F069         	call	_I2C_Master_Read
  1884  00F5B0  6E5A               	movwf	standbyMode@time+6,c
  1885                           
  1886                           ;standbyMode.c: 1009: I2C_Master_Stop();
  1887  00F5B2  EC19  F069         	call	_I2C_Master_Stop	;wreg free
  1888                           
  1889                           ;standbyMode.c: 1011: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1890  00F5B6  0E01               	movlw	1
  1891  00F5B8  EC2B  F069         	call	_lcdInst
  1892  00F5BC  0EC3               	movlw	195
  1893  00F5BE  6E52               	movwf	??_standbyMode& (0+255),c
  1894  00F5C0  0ECD               	movlw	205
  1895  00F5C2                     u6777:
  1896  00F5C2  2EE8               	decfsz	wreg,f,c
  1897  00F5C4  D7FE               	bra	u6777
  1898  00F5C6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1899  00F5C8  D7FC               	bra	u6777
  1900  00F5CA  F000               	nop	
  1901                           
  1902                           ;standbyMode.c: 1012: printf("Current date");
  1903  00F5CC  0E70               	movlw	low STR_45
  1904  00F5CE  6E0D               	movwf	printf@f,c
  1905  00F5D0  0EFF               	movlw	high STR_45
  1906  00F5D2  6E0E               	movwf	printf@f+1,c
  1907  00F5D4  ECAF  F06F         	call	_printf	;wreg free
  1908                           
  1909                           ;standbyMode.c: 1013: lcdInst(0xC0);;
  1910  00F5D8  0EC0               	movlw	192
  1911  00F5DA  EC2B  F069         	call	_lcdInst
  1912                           
  1913                           ;standbyMode.c: 1014: printf("and time:");
  1914  00F5DE  0EB4               	movlw	low STR_46
  1915  00F5E0  6E0D               	movwf	printf@f,c
  1916  00F5E2  0EFF               	movlw	high STR_46
  1917  00F5E4  6E0E               	movwf	printf@f+1,c
  1918  00F5E6  ECAF  F06F         	call	_printf	;wreg free
  1919                           
  1920                           ;standbyMode.c: 1015: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1921  00F5EA  0E66               	movlw	102
  1922  00F5EC  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1923  00F5EE  0E76               	movlw	118
  1924  00F5F0  6E52               	movwf	??_standbyMode& (0+255),c
  1925  00F5F2  0EC1               	movlw	193
  1926  00F5F4                     u6787:
  1927  00F5F4  2EE8               	decfsz	wreg,f,c
  1928  00F5F6  D7FE               	bra	u6787
  1929  00F5F8  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1930  00F5FA  D7FC               	bra	u6787
  1931  00F5FC  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1932  00F5FE  D7FA               	bra	u6787
  1933  00F600  F000               	nop	
  1934                           
  1935                           ;standbyMode.c: 1017: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1936  00F602  0E01               	movlw	1
  1937  00F604  EC2B  F069         	call	_lcdInst
  1938  00F608  0EC3               	movlw	195
  1939  00F60A  6E52               	movwf	??_standbyMode& (0+255),c
  1940  00F60C  0ECD               	movlw	205
  1941  00F60E                     u6797:
  1942  00F60E  2EE8               	decfsz	wreg,f,c
  1943  00F610  D7FE               	bra	u6797
  1944  00F612  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1945  00F614  D7FC               	bra	u6797
  1946  00F616  F000               	nop	
  1947                           
  1948                           ;standbyMode.c: 1018: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  1949  00F618  0ED7               	movlw	low STR_47
  1950  00F61A  6E0D               	movwf	printf@f,c
  1951  00F61C  0EFE               	movlw	high STR_47
  1952  00F61E  6E0E               	movwf	printf@f+1,c
  1953  00F620  C05A  F00F         	movff	standbyMode@time+6,?_printf+2
  1954  00F624  6A10               	clrf	?_printf+3,c
  1955  00F626  C059  F011         	movff	standbyMode@time+5,?_printf+4
  1956  00F62A  6A12               	clrf	?_printf+5,c
  1957  00F62C  C058  F013         	movff	standbyMode@time+4,?_printf+6
  1958  00F630  6A14               	clrf	?_printf+7,c
  1959  00F632  ECAF  F06F         	call	_printf	;wreg free
  1960                           
  1961                           ;standbyMode.c: 1019: lcdInst(0xC0);;
  1962  00F636  0EC0               	movlw	192
  1963  00F638  EC2B  F069         	call	_lcdInst
  1964                           
  1965                           ;standbyMode.c: 1020: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1966  00F63C  0EE6               	movlw	low STR_48
  1967  00F63E  6E0D               	movwf	printf@f,c
  1968  00F640  0EFE               	movlw	high STR_48
  1969  00F642  6E0E               	movwf	printf@f+1,c
  1970  00F644  C056  F00F         	movff	standbyMode@time+2,?_printf+2
  1971  00F648  6A10               	clrf	?_printf+3,c
  1972  00F64A  C055  F011         	movff	standbyMode@time+1,?_printf+4
  1973  00F64E  6A12               	clrf	?_printf+5,c
  1974  00F650  C054  F013         	movff	standbyMode@time,?_printf+6
  1975  00F654  6A14               	clrf	?_printf+7,c
  1976  00F656  ECAF  F06F         	call	_printf	;wreg free
  1977                           
  1978                           ;standbyMode.c: 1021: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1979  00F65A  0E66               	movlw	102
  1980  00F65C  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  1981  00F65E  0E76               	movlw	118
  1982  00F660  6E52               	movwf	??_standbyMode& (0+255),c
  1983  00F662  0EC1               	movlw	193
  1984  00F664                     u6807:
  1985  00F664  2EE8               	decfsz	wreg,f,c
  1986  00F666  D7FE               	bra	u6807
  1987  00F668  2E52               	decfsz	??_standbyMode& (0+255),f,c
  1988  00F66A  D7FC               	bra	u6807
  1989  00F66C  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1990  00F66E  D7FA               	bra	u6807
  1991  00F670  F000               	nop	
  1992                           
  1993                           ;standbyMode.c: 1024: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1994  00F672  0E01               	movlw	1
  1995  00F674  EC2B  F069         	call	_lcdInst
  1996  00F678  0EC3               	movlw	195
  1997  00F67A  6E52               	movwf	??_standbyMode& (0+255),c
  1998  00F67C  0ECD               	movlw	205
  1999  00F67E                     u6817:
  2000  00F67E  2EE8               	decfsz	wreg,f,c
  2001  00F680  D7FE               	bra	u6817
  2002  00F682  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2003  00F684  D7FC               	bra	u6817
  2004  00F686  F000               	nop	
  2005                           
  2006                           ;standbyMode.c: 1025: printf("Press # to");
  2007  00F688  0EA9               	movlw	low STR_49
  2008  00F68A  6E0D               	movwf	printf@f,c
  2009  00F68C  0EFF               	movlw	high STR_49
  2010  00F68E  6E0E               	movwf	printf@f+1,c
  2011  00F690  ECAF  F06F         	call	_printf	;wreg free
  2012                           
  2013                           ;standbyMode.c: 1026: lcdInst(0xC0);;
  2014  00F694  0EC0               	movlw	192
  2015  00F696  EC2B  F069         	call	_lcdInst
  2016                           
  2017                           ;standbyMode.c: 1027: printf("view logs,");
  2018  00F69A  0E7D               	movlw	low STR_50
  2019  00F69C  6E0D               	movwf	printf@f,c
  2020  00F69E  0EFF               	movlw	high STR_50
  2021  00F6A0  6E0E               	movwf	printf@f+1,c
  2022  00F6A2  ECAF  F06F         	call	_printf	;wreg free
  2023                           
  2024                           ;standbyMode.c: 1028: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2025  00F6A6  0E66               	movlw	102
  2026  00F6A8  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2027  00F6AA  0E76               	movlw	118
  2028  00F6AC  6E52               	movwf	??_standbyMode& (0+255),c
  2029  00F6AE  0EC1               	movlw	193
  2030  00F6B0                     u6827:
  2031  00F6B0  2EE8               	decfsz	wreg,f,c
  2032  00F6B2  D7FE               	bra	u6827
  2033  00F6B4  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2034  00F6B6  D7FC               	bra	u6827
  2035  00F6B8  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2036  00F6BA  D7FA               	bra	u6827
  2037  00F6BC  F000               	nop	
  2038                           
  2039                           ;standbyMode.c: 1029: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2040  00F6BE  0E01               	movlw	1
  2041  00F6C0  EC2B  F069         	call	_lcdInst
  2042  00F6C4  0EC3               	movlw	195
  2043  00F6C6  6E52               	movwf	??_standbyMode& (0+255),c
  2044  00F6C8  0ECD               	movlw	205
  2045  00F6CA                     u6837:
  2046  00F6CA  2EE8               	decfsz	wreg,f,c
  2047  00F6CC  D7FE               	bra	u6837
  2048  00F6CE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2049  00F6D0  D7FC               	bra	u6837
  2050  00F6D2  F000               	nop	
  2051                           
  2052                           ;standbyMode.c: 1030: printf("or press D to");
  2053  00F6D4  0E2E               	movlw	low STR_51
  2054  00F6D6  6E0D               	movwf	printf@f,c
  2055  00F6D8  0EFF               	movlw	high STR_51
  2056  00F6DA  6E0E               	movwf	printf@f+1,c
  2057  00F6DC  ECAF  F06F         	call	_printf	;wreg free
  2058                           
  2059                           ;standbyMode.c: 1031: lcdInst(0xC0);;
  2060  00F6E0  0EC0               	movlw	192
  2061  00F6E2  EC2B  F069         	call	_lcdInst
  2062                           
  2063                           ;standbyMode.c: 1032: printf("begin operation.");
  2064  00F6E6  0E98               	movlw	low STR_42
  2065  00F6E8  6E0D               	movwf	printf@f,c
  2066  00F6EA  0EFD               	movlw	high STR_42
  2067  00F6EC  6E0E               	movwf	printf@f+1,c
  2068  00F6EE  ECAF  F06F         	call	_printf	;wreg free
  2069  00F6F2  A281               	btfss	3969,1,c	;volatile
  2070  00F6F4  D7FE               	goto	l473
  2071                           
  2072                           ;standbyMode.c: 1035: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2073  00F6F6  3881               	swapf	3969,w,c	;volatile
  2074  00F6F8  0B0F               	andlw	15
  2075  00F6FA  0B0F               	andlw	15
  2076  00F6FC  6E5F               	movwf	standbyMode@keypress,c
  2077  00F6FE  B281               	btfsc	3969,1,c	;volatile
  2078  00F700  D7FE               	goto	l476
  2079                           
  2080                           ;standbyMode.c: 1038: if (keypress == 15){
  2081  00F702  0E0F               	movlw	15
  2082  00F704  185F               	xorwf	standbyMode@keypress,w,c
  2083  00F706  A4D8               	btfss	status,2,c
  2084  00F708  D284               	goto	l478
  2085                           
  2086                           ;standbyMode.c: 1080: unsigned int drawerCount = 0;
  2087  00F70A  0E00               	movlw	0
  2088  00F70C  6E6A               	movwf	standbyMode@drawerCount+1,c
  2089  00F70E  0E00               	movlw	0
  2090  00F710  6E69               	movwf	standbyMode@drawerCount,c
  2091                           
  2092                           ;standbyMode.c: 1081: unsigned int i = 0;
  2093  00F712  0E00               	movlw	0
  2094  00F714  6E6E               	movwf	standbyMode@i+1,c
  2095  00F716  0E00               	movlw	0
  2096  00F718  6E6D               	movwf	standbyMode@i,c
  2097                           
  2098                           ;standbyMode.c: 1082: unsigned int validDrawer = 0;
  2099  00F71A  0E00               	movlw	0
  2100  00F71C  6E62               	movwf	standbyMode@validDrawer+1,c
  2101  00F71E  0E00               	movlw	0
  2102  00F720  6E61               	movwf	standbyMode@validDrawer,c
  2103                           
  2104                           ;standbyMode.c: 1083: unsigned int zero = 0;
  2105  00F722  0E00               	movlw	0
  2106  00F724  6E64               	movwf	standbyMode@zero+1,c
  2107  00F726  0E00               	movlw	0
  2108  00F728  6E63               	movwf	standbyMode@zero,c
  2109                           
  2110                           ;standbyMode.c: 1084: unsigned int firstIteration = 0;
  2111  00F72A  0E00               	movlw	0
  2112  00F72C  6E5C               	movwf	standbyMode@firstIteration+1,c
  2113  00F72E  0E00               	movlw	0
  2114  00F730  6E5B               	movwf	standbyMode@firstIteration,c
  2115                           
  2116                           ;standbyMode.c: 1085: unsigned int drawer = 0;
  2117  00F732  0E00               	movlw	0
  2118  00F734  6E70               	movwf	standbyMode@drawer+1,c
  2119  00F736  0E00               	movlw	0
  2120  00F738  6E6F               	movwf	standbyMode@drawer,c
  2121                           
  2122                           ;standbyMode.c: 1086: unsigned int diet = 0;
  2123  00F73A  0E00               	movlw	0
  2124  00F73C  6E6C               	movwf	standbyMode@diet+1,c
  2125  00F73E  0E00               	movlw	0
  2126  00F740  6E6B               	movwf	standbyMode@diet,c
  2127                           
  2128                           ;standbyMode.c: 1087: unsigned int food = 0;
  2129  00F742  0E00               	movlw	0
  2130  00F744  6E66               	movwf	standbyMode@food+1,c
  2131  00F746  0E00               	movlw	0
  2132  00F748  6E65               	movwf	standbyMode@food,c
  2133  00F74A                     
  2134                           ;standbyMode.c: 1090: if (firstIteration == 1){
  2135  00F74A  045B               	decf	standbyMode@firstIteration,w,c
  2136  00F74C  105C               	iorwf	standbyMode@firstIteration+1,w,c
  2137  00F74E  A4D8               	btfss	status,2,c
  2138  00F750  D15C               	goto	l480
  2139  00F752                     u6370:
  2140                           
  2141                           ;standbyMode.c: 1093: if(drawerCount >= 8){
  2142                           
  2143                           ;standbyMode.c: 1091: while (1){
  2144  00F752  506A               	movf	standbyMode@drawerCount+1,w,c
  2145  00F754  E104               	bnz	u6380
  2146  00F756  0E08               	movlw	8
  2147  00F758  5C69               	subwf	standbyMode@drawerCount,w,c
  2148  00F75A  A0D8               	btfss	status,0,c
  2149  00F75C  D02A               	goto	l482
  2150  00F75E                     u6380:
  2151                           
  2152                           ;standbyMode.c: 1094: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2153  00F75E  0E01               	movlw	1
  2154  00F760  EC2B  F069         	call	_lcdInst
  2155  00F764  0EC3               	movlw	195
  2156  00F766  6E52               	movwf	??_standbyMode& (0+255),c
  2157  00F768  0ECD               	movlw	205
  2158  00F76A                     u6847:
  2159  00F76A  2EE8               	decfsz	wreg,f,c
  2160  00F76C  D7FE               	bra	u6847
  2161  00F76E  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2162  00F770  D7FC               	bra	u6847
  2163  00F772  F000               	nop	
  2164                           
  2165                           ;standbyMode.c: 1095: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2166  00F774  0E0C               	movlw	12
  2167  00F776  EC2B  F069         	call	_lcdInst
  2168                           
  2169                           ;standbyMode.c: 1096: printf("Maximum of 8");
  2170  00F77A  0E56               	movlw	low STR_53
  2171  00F77C  6E0D               	movwf	printf@f,c
  2172  00F77E  0EFF               	movlw	high STR_53
  2173  00F780  6E0E               	movwf	printf@f+1,c
  2174  00F782  ECAF  F06F         	call	_printf	;wreg free
  2175                           
  2176                           ;standbyMode.c: 1097: lcdInst(0xC0);;
  2177  00F786  0EC0               	movlw	192
  2178  00F788  EC2B  F069         	call	_lcdInst
  2179                           
  2180                           ;standbyMode.c: 1098: printf("drawers reached!");
  2181  00F78C  0E87               	movlw	low STR_54
  2182  00F78E  6E0D               	movwf	printf@f,c
  2183  00F790  0EFD               	movlw	high STR_54
  2184  00F792  6E0E               	movwf	printf@f+1,c
  2185  00F794  ECAF  F06F         	call	_printf	;wreg free
  2186                           
  2187                           ;standbyMode.c: 1099: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2188  00F798  0E66               	movlw	102
  2189  00F79A  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2190  00F79C  0E76               	movlw	118
  2191  00F79E  6E52               	movwf	??_standbyMode& (0+255),c
  2192  00F7A0  0EC1               	movlw	193
  2193  00F7A2                     u6857:
  2194  00F7A2  2EE8               	decfsz	wreg,f,c
  2195  00F7A4  D7FE               	bra	u6857
  2196  00F7A6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2197  00F7A8  D7FC               	bra	u6857
  2198  00F7AA  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2199  00F7AC  D7FA               	bra	u6857
  2200  00F7AE  F000               	nop	
  2201                           
  2202                           ;standbyMode.c: 1100: break;
  2203  00F7B0  0012               	return	
  2204  00F7B2                     l482:
  2205                           
  2206                           ;standbyMode.c: 1101: }
  2207                           ;standbyMode.c: 1103: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  2208  00F7B2  0E01               	movlw	1
  2209  00F7B4  EC2B  F069         	call	_lcdInst
  2210  00F7B8  0EC3               	movlw	195
  2211  00F7BA  6E52               	movwf	??_standbyMode& (0+255),c
  2212  00F7BC  0ECD               	movlw	205
  2213  00F7BE                     u6867:
  2214  00F7BE  2EE8               	decfsz	wreg,f,c
  2215  00F7C0  D7FE               	bra	u6867
  2216  00F7C2  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2217  00F7C4  D7FC               	bra	u6867
  2218  00F7C6  F000               	nop	
  2219                           
  2220                           ;standbyMode.c: 1104: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2221  00F7C8  0E0C               	movlw	12
  2222  00F7CA  EC2B  F069         	call	_lcdInst
  2223                           
  2224                           ;standbyMode.c: 1105: printf("Another drawer?");
  2225  00F7CE  0E4D               	movlw	low STR_55
  2226  00F7D0  6E0D               	movwf	printf@f,c
  2227  00F7D2  0EFE               	movlw	high STR_55
  2228  00F7D4  6E0E               	movwf	printf@f+1,c
  2229  00F7D6  ECAF  F06F         	call	_printf	;wreg free
  2230                           
  2231                           ;standbyMode.c: 1106: lcdInst(0xC0);;
  2232  00F7DA  0EC0               	movlw	192
  2233  00F7DC  EC2B  F069         	call	_lcdInst
  2234                           
  2235                           ;standbyMode.c: 1107: printf("# = No, D = Yes");
  2236  00F7E0  0E6D               	movlw	low STR_29
  2237  00F7E2  6E0D               	movwf	printf@f,c
  2238  00F7E4  0EFE               	movlw	high STR_29
  2239  00F7E6  6E0E               	movwf	printf@f+1,c
  2240  00F7E8  ECAF  F06F         	call	_printf	;wreg free
  2241  00F7EC  A281               	btfss	3969,1,c	;volatile
  2242  00F7EE  D7FE               	goto	l486
  2243                           
  2244                           ;standbyMode.c: 1110: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2245  00F7F0  3881               	swapf	3969,w,c	;volatile
  2246  00F7F2  0B0F               	andlw	15
  2247  00F7F4  0B0F               	andlw	15
  2248  00F7F6  6E60               	movwf	standbyMode@keypress1,c
  2249  00F7F8  B281               	btfsc	3969,1,c	;volatile
  2250  00F7FA  D7FE               	goto	l489
  2251                           
  2252                           ;standbyMode.c: 1113: if (keypress1 == 15){
  2253  00F7FC  0E0F               	movlw	15
  2254  00F7FE  1860               	xorwf	standbyMode@keypress1,w,c
  2255  00F800  A4D8               	btfss	status,2,c
  2256  00F802  D0FC               	goto	l491
  2257  00F804                     u6410:
  2258                           
  2259                           ;standbyMode.c: 1114: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2260  00F804  0E01               	movlw	1
  2261  00F806  EC2B  F069         	call	_lcdInst
  2262  00F80A  0EC3               	movlw	195
  2263  00F80C  6E52               	movwf	??_standbyMode& (0+255),c
  2264  00F80E  0ECD               	movlw	205
  2265  00F810                     u6877:
  2266  00F810  2EE8               	decfsz	wreg,f,c
  2267  00F812  D7FE               	bra	u6877
  2268  00F814  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2269  00F816  D7FC               	bra	u6877
  2270  00F818  F000               	nop	
  2271                           
  2272                           ;standbyMode.c: 1115: drawer = which_drawer();
  2273  00F81A  EC3A  F06D         	call	_which_drawer	;wreg free
  2274  00F81E  C025  F06F         	movff	?_which_drawer,standbyMode@drawer
  2275  00F822  C026  F070         	movff	?_which_drawer+1,standbyMode@drawer+1
  2276                           
  2277                           ;standbyMode.c: 1117: if (drawer == 100){
  2278  00F826  0E64               	movlw	100
  2279  00F828  186F               	xorwf	standbyMode@drawer,w,c
  2280  00F82A  1070               	iorwf	standbyMode@drawer+1,w,c
  2281  00F82C  A4D8               	btfss	status,2,c
  2282  00F82E  D005               	goto	l493
  2283                           
  2284                           ;standbyMode.c: 1118: drawer = 0;
  2285  00F830  0E00               	movlw	0
  2286  00F832  6E70               	movwf	standbyMode@drawer+1,c
  2287  00F834  0E00               	movlw	0
  2288  00F836  6E6F               	movwf	standbyMode@drawer,c
  2289                           
  2290                           ;standbyMode.c: 1119: goto DRAWER_BACK;
  2291  00F838  D7BC               	goto	l482
  2292  00F83A                     l493:
  2293                           
  2294                           ;standbyMode.c: 1120: }
  2295                           ;standbyMode.c: 1122: for (i=0; i<8; i++){
  2296  00F83A  0E00               	movlw	0
  2297  00F83C  6E6E               	movwf	standbyMode@i+1,c
  2298  00F83E  0E00               	movlw	0
  2299  00F840  6E6D               	movwf	standbyMode@i,c
  2300  00F842                     l4932:
  2301  00F842  506E               	movf	standbyMode@i+1,w,c
  2302  00F844  E12C               	bnz	l4948
  2303  00F846  0E08               	movlw	8
  2304  00F848  5C6D               	subwf	standbyMode@i,w,c
  2305  00F84A  B0D8               	btfsc	status,0,c
  2306  00F84C  D028               	goto	u6460
  2307                           
  2308                           ;standbyMode.c: 1123: if (drawerInformation[i] == drawer){
  2309  00F84E  90D8               	bcf	status,0,c
  2310  00F850  346D               	rlcf	standbyMode@i,w,c
  2311  00F852  6ED9               	movwf	fsr2l,c
  2312  00F854  346E               	rlcf	standbyMode@i+1,w,c
  2313  00F856  6EDA               	movwf	fsr2h,c
  2314  00F858  0E80               	movlw	low _drawerInformation
  2315  00F85A  26D9               	addwf	fsr2l,f,c
  2316  00F85C  0E00               	movlw	high _drawerInformation
  2317  00F85E  22DA               	addwfc	fsr2h,f,c
  2318  00F860  506F               	movf	standbyMode@drawer,w,c
  2319  00F862  18DE               	xorwf	postinc2,w,c
  2320  00F864  E119               	bnz	l4944
  2321  00F866  5070               	movf	standbyMode@drawer+1,w,c
  2322  00F868  18DE               	xorwf	postinc2,w,c
  2323  00F86A  A4D8               	btfss	status,2,c
  2324  00F86C  D015               	goto	l497
  2325                           
  2326                           ;standbyMode.c: 1124: validDrawer = 1;
  2327  00F86E  0E00               	movlw	0
  2328  00F870  6E62               	movwf	standbyMode@validDrawer+1,c
  2329  00F872  0E01               	movlw	1
  2330  00F874  6E61               	movwf	standbyMode@validDrawer,c
  2331                           
  2332                           ;standbyMode.c: 1125: if (drawerInformation[i] == 0){
  2333  00F876  90D8               	bcf	status,0,c
  2334  00F878  346D               	rlcf	standbyMode@i,w,c
  2335  00F87A  6ED9               	movwf	fsr2l,c
  2336  00F87C  346E               	rlcf	standbyMode@i+1,w,c
  2337  00F87E  6EDA               	movwf	fsr2h,c
  2338  00F880  0E80               	movlw	low _drawerInformation
  2339  00F882  26D9               	addwf	fsr2l,f,c
  2340  00F884  0E00               	movlw	high _drawerInformation
  2341  00F886  22DA               	addwfc	fsr2h,f,c
  2342  00F888  50DE               	movf	postinc2,w,c
  2343  00F88A  10DE               	iorwf	postinc2,w,c
  2344  00F88C  A4D8               	btfss	status,2,c
  2345  00F88E  D004               	goto	l497
  2346                           
  2347                           ;standbyMode.c: 1126: zero = 1;
  2348  00F890  0E00               	movlw	0
  2349  00F892  6E64               	movwf	standbyMode@zero+1,c
  2350  00F894  0E01               	movlw	1
  2351  00F896  6E63               	movwf	standbyMode@zero,c
  2352  00F898                     l497:
  2353  00F898                     l4944:
  2354  00F898  4A6D               	infsnz	standbyMode@i,f,c
  2355  00F89A  2A6E               	incf	standbyMode@i+1,f,c
  2356  00F89C  D7D2               	goto	l4932
  2357  00F89E                     u6460:
  2358  00F89E                     l4948:
  2359                           
  2360                           ;standbyMode.c: 1127: }
  2361                           ;standbyMode.c: 1128: }
  2362                           ;standbyMode.c: 1129: }
  2363                           ;standbyMode.c: 1130: if (validDrawer == 1){
  2364  00F89E  0461               	decf	standbyMode@validDrawer,w,c
  2365  00F8A0  1062               	iorwf	standbyMode@validDrawer+1,w,c
  2366  00F8A2  A4D8               	btfss	status,2,c
  2367  00F8A4  D060               	goto	l498
  2368                           
  2369                           ;standbyMode.c: 1131: if (zero == 1){
  2370  00F8A6  0463               	decf	standbyMode@zero,w,c
  2371  00F8A8  1064               	iorwf	standbyMode@zero+1,w,c
  2372  00F8AA  A4D8               	btfss	status,2,c
  2373  00F8AC  D02E               	goto	l499
  2374                           
  2375                           ;standbyMode.c: 1132: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2376  00F8AE  0E01               	movlw	1
  2377  00F8B0  EC2B  F069         	call	_lcdInst
  2378  00F8B4  0EC3               	movlw	195
  2379  00F8B6  6E52               	movwf	??_standbyMode& (0+255),c
  2380  00F8B8  0ECD               	movlw	205
  2381  00F8BA                     u6887:
  2382  00F8BA  2EE8               	decfsz	wreg,f,c
  2383  00F8BC  D7FE               	bra	u6887
  2384  00F8BE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2385  00F8C0  D7FC               	bra	u6887
  2386  00F8C2  F000               	nop	
  2387                           
  2388                           ;standbyMode.c: 1133: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2389  00F8C4  0E0C               	movlw	12
  2390  00F8C6  EC2B  F069         	call	_lcdInst
  2391                           
  2392                           ;standbyMode.c: 1134: printf("No drawer");
  2393  00F8CA  0EBE               	movlw	low STR_57
  2394  00F8CC  6E0D               	movwf	printf@f,c
  2395  00F8CE  0EFF               	movlw	high STR_57
  2396  00F8D0  6E0E               	movwf	printf@f+1,c
  2397  00F8D2  ECAF  F06F         	call	_printf	;wreg free
  2398                           
  2399                           ;standbyMode.c: 1135: lcdInst(0xC0);;
  2400  00F8D6  0EC0               	movlw	192
  2401  00F8D8  EC2B  F069         	call	_lcdInst
  2402                           
  2403                           ;standbyMode.c: 1136: printf("number pressed.");
  2404  00F8DC  0EFD               	movlw	low STR_58
  2405  00F8DE  6E0D               	movwf	printf@f,c
  2406  00F8E0  0EFD               	movlw	high STR_58
  2407  00F8E2  6E0E               	movwf	printf@f+1,c
  2408  00F8E4  ECAF  F06F         	call	_printf	;wreg free
  2409                           
  2410                           ;standbyMode.c: 1137: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2411  00F8E8  0E66               	movlw	102
  2412  00F8EA  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2413  00F8EC  0E76               	movlw	118
  2414  00F8EE  6E52               	movwf	??_standbyMode& (0+255),c
  2415  00F8F0  0EC1               	movlw	193
  2416  00F8F2                     u6897:
  2417  00F8F2  2EE8               	decfsz	wreg,f,c
  2418  00F8F4  D7FE               	bra	u6897
  2419  00F8F6  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2420  00F8F8  D7FC               	bra	u6897
  2421  00F8FA  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2422  00F8FC  D7FA               	bra	u6897
  2423  00F8FE  F000               	nop	
  2424                           
  2425                           ;standbyMode.c: 1138: zero = 0;
  2426  00F900  0E00               	movlw	0
  2427  00F902  6E64               	movwf	standbyMode@zero+1,c
  2428  00F904  0E00               	movlw	0
  2429  00F906  6E63               	movwf	standbyMode@zero,c
  2430                           
  2431                           ;standbyMode.c: 1139: }
  2432  00F908  D029               	goto	l500
  2433  00F90A                     l499:
  2434                           
  2435                           ;standbyMode.c: 1140: else{
  2436                           ;standbyMode.c: 1141: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2437  00F90A  0E01               	movlw	1
  2438  00F90C  EC2B  F069         	call	_lcdInst
  2439  00F910  0EC3               	movlw	195
  2440  00F912  6E52               	movwf	??_standbyMode& (0+255),c
  2441  00F914  0ECD               	movlw	205
  2442  00F916                     u6907:
  2443  00F916  2EE8               	decfsz	wreg,f,c
  2444  00F918  D7FE               	bra	u6907
  2445  00F91A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2446  00F91C  D7FC               	bra	u6907
  2447  00F91E  F000               	nop	
  2448                           
  2449                           ;standbyMode.c: 1142: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2450  00F920  0E0C               	movlw	12
  2451  00F922  EC2B  F069         	call	_lcdInst
  2452                           
  2453                           ;standbyMode.c: 1143: printf("Drawer already");
  2454  00F926  0EF5               	movlw	low STR_59
  2455  00F928  6E0D               	movwf	printf@f,c
  2456  00F92A  0EFE               	movlw	high STR_59
  2457  00F92C  6E0E               	movwf	printf@f+1,c
  2458  00F92E  ECAF  F06F         	call	_printf	;wreg free
  2459                           
  2460                           ;standbyMode.c: 1144: lcdInst(0xC0);;
  2461  00F932  0EC0               	movlw	192
  2462  00F934  EC2B  F069         	call	_lcdInst
  2463                           
  2464                           ;standbyMode.c: 1145: printf("in use!");
  2465  00F938  0ED1               	movlw	low STR_60
  2466  00F93A  6E0D               	movwf	printf@f,c
  2467  00F93C  0EFF               	movlw	high STR_60
  2468  00F93E  6E0E               	movwf	printf@f+1,c
  2469  00F940  ECAF  F06F         	call	_printf	;wreg free
  2470                           
  2471                           ;standbyMode.c: 1146: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2472  00F944  0E66               	movlw	102
  2473  00F946  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2474  00F948  0E76               	movlw	118
  2475  00F94A  6E52               	movwf	??_standbyMode& (0+255),c
  2476  00F94C  0EC1               	movlw	193
  2477  00F94E                     u6917:
  2478  00F94E  2EE8               	decfsz	wreg,f,c
  2479  00F950  D7FE               	bra	u6917
  2480  00F952  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2481  00F954  D7FC               	bra	u6917
  2482  00F956  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2483  00F958  D7FA               	bra	u6917
  2484  00F95A  F000               	nop	
  2485  00F95C                     l500:
  2486                           
  2487                           ;standbyMode.c: 1147: }
  2488                           ;standbyMode.c: 1148: validDrawer = 0;
  2489  00F95C  0E00               	movlw	0
  2490  00F95E  6E62               	movwf	standbyMode@validDrawer+1,c
  2491  00F960  0E00               	movlw	0
  2492  00F962  6E61               	movwf	standbyMode@validDrawer,c
  2493                           
  2494                           ;standbyMode.c: 1149: continue;
  2495  00F964  D6F6               	goto	u6370
  2496  00F966                     l498:
  2497                           
  2498                           ;standbyMode.c: 1151: else{
  2499                           ;standbyMode.c: 1152: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2500  00F966  0E01               	movlw	1
  2501  00F968  EC2B  F069         	call	_lcdInst
  2502  00F96C  0EC3               	movlw	195
  2503  00F96E  6E52               	movwf	??_standbyMode& (0+255),c
  2504  00F970  0ECD               	movlw	205
  2505  00F972                     u6927:
  2506  00F972  2EE8               	decfsz	wreg,f,c
  2507  00F974  D7FE               	bra	u6927
  2508  00F976  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2509  00F978  D7FC               	bra	u6927
  2510  00F97A  F000               	nop	
  2511                           
  2512                           ;standbyMode.c: 1153: diet = diet_press(drawer);
  2513  00F97C  C06F  F025         	movff	standbyMode@drawer,diet_press@drawer
  2514  00F980  C070  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2515  00F984  EC58  F073         	call	_diet_press	;wreg free
  2516  00F988  C025  F06B         	movff	?_diet_press,standbyMode@diet
  2517  00F98C  C026  F06C         	movff	?_diet_press+1,standbyMode@diet+1
  2518                           
  2519                           ;standbyMode.c: 1154: if (diet == 100){
  2520  00F990  0E64               	movlw	100
  2521  00F992  186B               	xorwf	standbyMode@diet,w,c
  2522  00F994  106C               	iorwf	standbyMode@diet+1,w,c
  2523  00F996  A4D8               	btfss	status,2,c
  2524  00F998  D005               	goto	l504
  2525                           
  2526                           ;standbyMode.c: 1155: diet = 0;
  2527  00F99A  0E00               	movlw	0
  2528  00F99C  6E6C               	movwf	standbyMode@diet+1,c
  2529  00F99E  0E00               	movlw	0
  2530  00F9A0  6E6B               	movwf	standbyMode@diet,c
  2531                           
  2532                           ;standbyMode.c: 1156: goto DIET_BACK1;
  2533  00F9A2  D730               	goto	u6410
  2534  00F9A4                     l504:
  2535                           
  2536                           ;standbyMode.c: 1157: }
  2537                           ;standbyMode.c: 1159: food = food_press(diet, drawer);
  2538  00F9A4  C06B  F025         	movff	standbyMode@diet,food_press@dietSum
  2539  00F9A8  C06C  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2540  00F9AC  C06F  F027         	movff	standbyMode@drawer,food_press@drawer
  2541  00F9B0  C070  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2542  00F9B4  EC40  F06C         	call	_food_press	;wreg free
  2543  00F9B8  C025  F065         	movff	?_food_press,standbyMode@food
  2544  00F9BC  C026  F066         	movff	?_food_press+1,standbyMode@food+1
  2545                           
  2546                           ;standbyMode.c: 1160: if (food == 100){
  2547  00F9C0  0E64               	movlw	100
  2548  00F9C2  1865               	xorwf	standbyMode@food,w,c
  2549  00F9C4  1066               	iorwf	standbyMode@food+1,w,c
  2550  00F9C6  A4D8               	btfss	status,2,c
  2551  00F9C8  D009               	goto	l505
  2552                           
  2553                           ;standbyMode.c: 1161: diet = 0;
  2554  00F9CA  0E00               	movlw	0
  2555  00F9CC  6E6C               	movwf	standbyMode@diet+1,c
  2556  00F9CE  0E00               	movlw	0
  2557  00F9D0  6E6B               	movwf	standbyMode@diet,c
  2558                           
  2559                           ;standbyMode.c: 1162: food = 0;
  2560  00F9D2  0E00               	movlw	0
  2561  00F9D4  6E66               	movwf	standbyMode@food+1,c
  2562  00F9D6  0E00               	movlw	0
  2563  00F9D8  6E65               	movwf	standbyMode@food,c
  2564                           
  2565                           ;standbyMode.c: 1163: goto FOOD_BACK1;
  2566  00F9DA  D7C5               	goto	l498
  2567  00F9DC                     l505:
  2568                           
  2569                           ;standbyMode.c: 1164: }
  2570                           ;standbyMode.c: 1165: drawerInformation[drawerCount] = drawer;
  2571  00F9DC  90D8               	bcf	status,0,c
  2572  00F9DE  3469               	rlcf	standbyMode@drawerCount,w,c
  2573  00F9E0  6ED9               	movwf	fsr2l,c
  2574  00F9E2  346A               	rlcf	standbyMode@drawerCount+1,w,c
  2575  00F9E4  6EDA               	movwf	fsr2h,c
  2576  00F9E6  0E80               	movlw	low _drawerInformation
  2577  00F9E8  26D9               	addwf	fsr2l,f,c
  2578  00F9EA  0E00               	movlw	high _drawerInformation
  2579  00F9EC  22DA               	addwfc	fsr2h,f,c
  2580  00F9EE  C06F  FFDE         	movff	standbyMode@drawer,postinc2
  2581  00F9F2  C070  FFDD         	movff	standbyMode@drawer+1,postdec2
  2582                           
  2583                           ;standbyMode.c: 1166: drawerCount += 1;
  2584  00F9F6  4A69               	infsnz	standbyMode@drawerCount,f,c
  2585  00F9F8  2A6A               	incf	standbyMode@drawerCount+1,f,c
  2586                           
  2587                           ;standbyMode.c: 1167: }
  2588                           ;standbyMode.c: 1168: }
  2589  00F9FA  D004               	goto	l507
  2590  00F9FC                     l491:
  2591                           
  2592                           ;standbyMode.c: 1169: else if (keypress1 == 14){
  2593  00F9FC  0E0E               	movlw	14
  2594  00F9FE  1860               	xorwf	standbyMode@keypress1,w,c
  2595  00FA00  B4D8               	btfsc	status,2,c
  2596  00FA02  0012               	return	
  2597  00FA04                     l507:
  2598                           
  2599                           ;standbyMode.c: 1171: }
  2600                           ;standbyMode.c: 1172: keypress1 = 0;
  2601  00FA04  0E00               	movlw	0
  2602  00FA06  6E60               	movwf	standbyMode@keypress1,c
  2603  00FA08  D6A4               	goto	u6370
  2604  00FA0A                     l480:
  2605                           
  2606                           ;standbyMode.c: 1176: else{
  2607                           ;standbyMode.c: 1177: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2608  00FA0A  0E01               	movlw	1
  2609  00FA0C  EC2B  F069         	call	_lcdInst
  2610  00FA10  0EC3               	movlw	195
  2611  00FA12  6E52               	movwf	??_standbyMode& (0+255),c
  2612  00FA14  0ECD               	movlw	205
  2613  00FA16                     u6937:
  2614  00FA16  2EE8               	decfsz	wreg,f,c
  2615  00FA18  D7FE               	bra	u6937
  2616  00FA1A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2617  00FA1C  D7FC               	bra	u6937
  2618  00FA1E  F000               	nop	
  2619                           
  2620                           ;standbyMode.c: 1178: drawer = which_drawer();
  2621  00FA20  EC3A  F06D         	call	_which_drawer	;wreg free
  2622  00FA24  C025  F06F         	movff	?_which_drawer,standbyMode@drawer
  2623  00FA28  C026  F070         	movff	?_which_drawer+1,standbyMode@drawer+1
  2624                           
  2625                           ;standbyMode.c: 1180: if (drawer == 100){
  2626  00FA2C  0E64               	movlw	100
  2627  00FA2E  186F               	xorwf	standbyMode@drawer,w,c
  2628  00FA30  1070               	iorwf	standbyMode@drawer+1,w,c
  2629  00FA32  A4D8               	btfss	status,2,c
  2630  00FA34  D009               	goto	l511
  2631                           
  2632                           ;standbyMode.c: 1181: drawer = 0;
  2633  00FA36  0E00               	movlw	0
  2634  00FA38  6E70               	movwf	standbyMode@drawer+1,c
  2635  00FA3A  0E00               	movlw	0
  2636  00FA3C  6E6F               	movwf	standbyMode@drawer,c
  2637                           
  2638                           ;standbyMode.c: 1182: firstIteration = 1;
  2639  00FA3E  0E00               	movlw	0
  2640  00FA40  6E5C               	movwf	standbyMode@firstIteration+1,c
  2641  00FA42  0E01               	movlw	1
  2642  00FA44  6E5B               	movwf	standbyMode@firstIteration,c
  2643                           
  2644                           ;standbyMode.c: 1183: goto DRAWER_BACK;
  2645  00FA46  D6B5               	goto	l482
  2646  00FA48                     l511:
  2647                           
  2648                           ;standbyMode.c: 1184: }
  2649                           ;standbyMode.c: 1186: firstIteration = 1;
  2650  00FA48  0E00               	movlw	0
  2651  00FA4A  6E5C               	movwf	standbyMode@firstIteration+1,c
  2652  00FA4C  0E01               	movlw	1
  2653  00FA4E  6E5B               	movwf	standbyMode@firstIteration,c
  2654                           
  2655                           ;standbyMode.c: 1187: for (i=0; i<8; i++){
  2656  00FA50  0E00               	movlw	0
  2657  00FA52  6E6E               	movwf	standbyMode@i+1,c
  2658  00FA54  0E00               	movlw	0
  2659  00FA56  6E6D               	movwf	standbyMode@i,c
  2660  00FA58                     l5026:
  2661  00FA58  506E               	movf	standbyMode@i+1,w,c
  2662  00FA5A  E12C               	bnz	l5042
  2663  00FA5C  0E08               	movlw	8
  2664  00FA5E  5C6D               	subwf	standbyMode@i,w,c
  2665  00FA60  B0D8               	btfsc	status,0,c
  2666  00FA62  D028               	goto	u6560
  2667                           
  2668                           ;standbyMode.c: 1188: if (drawerInformation[i] == drawer){
  2669  00FA64  90D8               	bcf	status,0,c
  2670  00FA66  346D               	rlcf	standbyMode@i,w,c
  2671  00FA68  6ED9               	movwf	fsr2l,c
  2672  00FA6A  346E               	rlcf	standbyMode@i+1,w,c
  2673  00FA6C  6EDA               	movwf	fsr2h,c
  2674  00FA6E  0E80               	movlw	low _drawerInformation
  2675  00FA70  26D9               	addwf	fsr2l,f,c
  2676  00FA72  0E00               	movlw	high _drawerInformation
  2677  00FA74  22DA               	addwfc	fsr2h,f,c
  2678  00FA76  506F               	movf	standbyMode@drawer,w,c
  2679  00FA78  18DE               	xorwf	postinc2,w,c
  2680  00FA7A  E119               	bnz	l5038
  2681  00FA7C  5070               	movf	standbyMode@drawer+1,w,c
  2682  00FA7E  18DE               	xorwf	postinc2,w,c
  2683  00FA80  A4D8               	btfss	status,2,c
  2684  00FA82  D015               	goto	l515
  2685                           
  2686                           ;standbyMode.c: 1189: validDrawer = 1;
  2687  00FA84  0E00               	movlw	0
  2688  00FA86  6E62               	movwf	standbyMode@validDrawer+1,c
  2689  00FA88  0E01               	movlw	1
  2690  00FA8A  6E61               	movwf	standbyMode@validDrawer,c
  2691                           
  2692                           ;standbyMode.c: 1190: if (drawerInformation[i] == 0){
  2693  00FA8C  90D8               	bcf	status,0,c
  2694  00FA8E  346D               	rlcf	standbyMode@i,w,c
  2695  00FA90  6ED9               	movwf	fsr2l,c
  2696  00FA92  346E               	rlcf	standbyMode@i+1,w,c
  2697  00FA94  6EDA               	movwf	fsr2h,c
  2698  00FA96  0E80               	movlw	low _drawerInformation
  2699  00FA98  26D9               	addwf	fsr2l,f,c
  2700  00FA9A  0E00               	movlw	high _drawerInformation
  2701  00FA9C  22DA               	addwfc	fsr2h,f,c
  2702  00FA9E  50DE               	movf	postinc2,w,c
  2703  00FAA0  10DE               	iorwf	postinc2,w,c
  2704  00FAA2  A4D8               	btfss	status,2,c
  2705  00FAA4  D004               	goto	l515
  2706                           
  2707                           ;standbyMode.c: 1191: zero = 1;
  2708  00FAA6  0E00               	movlw	0
  2709  00FAA8  6E64               	movwf	standbyMode@zero+1,c
  2710  00FAAA  0E01               	movlw	1
  2711  00FAAC  6E63               	movwf	standbyMode@zero,c
  2712  00FAAE                     l515:
  2713  00FAAE                     l5038:
  2714  00FAAE  4A6D               	infsnz	standbyMode@i,f,c
  2715  00FAB0  2A6E               	incf	standbyMode@i+1,f,c
  2716  00FAB2  D7D2               	goto	l5026
  2717  00FAB4                     u6560:
  2718  00FAB4                     l5042:
  2719                           
  2720                           ;standbyMode.c: 1192: }
  2721                           ;standbyMode.c: 1193: }
  2722                           ;standbyMode.c: 1194: }
  2723                           ;standbyMode.c: 1195: if (validDrawer == 1){
  2724  00FAB4  0461               	decf	standbyMode@validDrawer,w,c
  2725  00FAB6  1062               	iorwf	standbyMode@validDrawer+1,w,c
  2726  00FAB8  A4D8               	btfss	status,2,c
  2727  00FABA  D060               	goto	l516
  2728                           
  2729                           ;standbyMode.c: 1196: if (zero == 1){
  2730  00FABC  0463               	decf	standbyMode@zero,w,c
  2731  00FABE  1064               	iorwf	standbyMode@zero+1,w,c
  2732  00FAC0  A4D8               	btfss	status,2,c
  2733  00FAC2  D02E               	goto	l517
  2734                           
  2735                           ;standbyMode.c: 1197: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2736  00FAC4  0E01               	movlw	1
  2737  00FAC6  EC2B  F069         	call	_lcdInst
  2738  00FACA  0EC3               	movlw	195
  2739  00FACC  6E52               	movwf	??_standbyMode& (0+255),c
  2740  00FACE  0ECD               	movlw	205
  2741  00FAD0                     u6947:
  2742  00FAD0  2EE8               	decfsz	wreg,f,c
  2743  00FAD2  D7FE               	bra	u6947
  2744  00FAD4  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2745  00FAD6  D7FC               	bra	u6947
  2746  00FAD8  F000               	nop	
  2747                           
  2748                           ;standbyMode.c: 1198: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2749  00FADA  0E0C               	movlw	12
  2750  00FADC  EC2B  F069         	call	_lcdInst
  2751                           
  2752                           ;standbyMode.c: 1199: printf("No drawer");
  2753  00FAE0  0EBE               	movlw	low STR_57
  2754  00FAE2  6E0D               	movwf	printf@f,c
  2755  00FAE4  0EFF               	movlw	high STR_57
  2756  00FAE6  6E0E               	movwf	printf@f+1,c
  2757  00FAE8  ECAF  F06F         	call	_printf	;wreg free
  2758                           
  2759                           ;standbyMode.c: 1200: lcdInst(0xC0);;
  2760  00FAEC  0EC0               	movlw	192
  2761  00FAEE  EC2B  F069         	call	_lcdInst
  2762                           
  2763                           ;standbyMode.c: 1201: printf("number pressed.");
  2764  00FAF2  0EFD               	movlw	low STR_58
  2765  00FAF4  6E0D               	movwf	printf@f,c
  2766  00FAF6  0EFD               	movlw	high STR_58
  2767  00FAF8  6E0E               	movwf	printf@f+1,c
  2768  00FAFA  ECAF  F06F         	call	_printf	;wreg free
  2769                           
  2770                           ;standbyMode.c: 1202: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2771  00FAFE  0E66               	movlw	102
  2772  00FB00  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2773  00FB02  0E76               	movlw	118
  2774  00FB04  6E52               	movwf	??_standbyMode& (0+255),c
  2775  00FB06  0EC1               	movlw	193
  2776  00FB08                     u6957:
  2777  00FB08  2EE8               	decfsz	wreg,f,c
  2778  00FB0A  D7FE               	bra	u6957
  2779  00FB0C  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2780  00FB0E  D7FC               	bra	u6957
  2781  00FB10  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2782  00FB12  D7FA               	bra	u6957
  2783  00FB14  F000               	nop	
  2784                           
  2785                           ;standbyMode.c: 1203: zero = 0;
  2786  00FB16  0E00               	movlw	0
  2787  00FB18  6E64               	movwf	standbyMode@zero+1,c
  2788  00FB1A  0E00               	movlw	0
  2789  00FB1C  6E63               	movwf	standbyMode@zero,c
  2790                           
  2791                           ;standbyMode.c: 1204: }
  2792  00FB1E  D029               	goto	l518
  2793  00FB20                     l517:
  2794                           
  2795                           ;standbyMode.c: 1205: else{
  2796                           ;standbyMode.c: 1206: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2797  00FB20  0E01               	movlw	1
  2798  00FB22  EC2B  F069         	call	_lcdInst
  2799  00FB26  0EC3               	movlw	195
  2800  00FB28  6E52               	movwf	??_standbyMode& (0+255),c
  2801  00FB2A  0ECD               	movlw	205
  2802  00FB2C                     u6967:
  2803  00FB2C  2EE8               	decfsz	wreg,f,c
  2804  00FB2E  D7FE               	bra	u6967
  2805  00FB30  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2806  00FB32  D7FC               	bra	u6967
  2807  00FB34  F000               	nop	
  2808                           
  2809                           ;standbyMode.c: 1207: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2810  00FB36  0E0C               	movlw	12
  2811  00FB38  EC2B  F069         	call	_lcdInst
  2812                           
  2813                           ;standbyMode.c: 1208: printf("Drawer already");
  2814  00FB3C  0EF5               	movlw	low STR_59
  2815  00FB3E  6E0D               	movwf	printf@f,c
  2816  00FB40  0EFE               	movlw	high STR_59
  2817  00FB42  6E0E               	movwf	printf@f+1,c
  2818  00FB44  ECAF  F06F         	call	_printf	;wreg free
  2819                           
  2820                           ;standbyMode.c: 1209: lcdInst(0xC0);;
  2821  00FB48  0EC0               	movlw	192
  2822  00FB4A  EC2B  F069         	call	_lcdInst
  2823                           
  2824                           ;standbyMode.c: 1210: printf("in use!");
  2825  00FB4E  0ED1               	movlw	low STR_60
  2826  00FB50  6E0D               	movwf	printf@f,c
  2827  00FB52  0EFF               	movlw	high STR_60
  2828  00FB54  6E0E               	movwf	printf@f+1,c
  2829  00FB56  ECAF  F06F         	call	_printf	;wreg free
  2830                           
  2831                           ;standbyMode.c: 1211: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2832  00FB5A  0E66               	movlw	102
  2833  00FB5C  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  2834  00FB5E  0E76               	movlw	118
  2835  00FB60  6E52               	movwf	??_standbyMode& (0+255),c
  2836  00FB62  0EC1               	movlw	193
  2837  00FB64                     u6977:
  2838  00FB64  2EE8               	decfsz	wreg,f,c
  2839  00FB66  D7FE               	bra	u6977
  2840  00FB68  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2841  00FB6A  D7FC               	bra	u6977
  2842  00FB6C  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2843  00FB6E  D7FA               	bra	u6977
  2844  00FB70  F000               	nop	
  2845  00FB72                     l518:
  2846                           
  2847                           ;standbyMode.c: 1212: }
  2848                           ;standbyMode.c: 1213: validDrawer = 0;
  2849  00FB72  0E00               	movlw	0
  2850  00FB74  6E62               	movwf	standbyMode@validDrawer+1,c
  2851  00FB76  0E00               	movlw	0
  2852  00FB78  6E61               	movwf	standbyMode@validDrawer,c
  2853                           
  2854                           ;standbyMode.c: 1215: }
  2855                           
  2856                           ;standbyMode.c: 1214: continue;
  2857  00FB7A  D5E7               	goto	l479
  2858  00FB7C                     l516:
  2859                           
  2860                           ;standbyMode.c: 1216: else{
  2861                           ;standbyMode.c: 1217: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  2862  00FB7C  0E01               	movlw	1
  2863  00FB7E  EC2B  F069         	call	_lcdInst
  2864  00FB82  0EC3               	movlw	195
  2865  00FB84  6E52               	movwf	??_standbyMode& (0+255),c
  2866  00FB86  0ECD               	movlw	205
  2867  00FB88                     u6987:
  2868  00FB88  2EE8               	decfsz	wreg,f,c
  2869  00FB8A  D7FE               	bra	u6987
  2870  00FB8C  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2871  00FB8E  D7FC               	bra	u6987
  2872  00FB90  F000               	nop	
  2873                           
  2874                           ;standbyMode.c: 1218: diet = diet_press(drawer);
  2875  00FB92  C06F  F025         	movff	standbyMode@drawer,diet_press@drawer
  2876  00FB96  C070  F026         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2877  00FB9A  EC58  F073         	call	_diet_press	;wreg free
  2878  00FB9E  C025  F06B         	movff	?_diet_press,standbyMode@diet
  2879  00FBA2  C026  F06C         	movff	?_diet_press+1,standbyMode@diet+1
  2880                           
  2881                           ;standbyMode.c: 1219: if (diet == 100){
  2882  00FBA6  0E64               	movlw	100
  2883  00FBA8  186B               	xorwf	standbyMode@diet,w,c
  2884  00FBAA  106C               	iorwf	standbyMode@diet+1,w,c
  2885  00FBAC  A4D8               	btfss	status,2,c
  2886  00FBAE  D005               	goto	l522
  2887                           
  2888                           ;standbyMode.c: 1220: diet = 0;
  2889  00FBB0  0E00               	movlw	0
  2890  00FBB2  6E6C               	movwf	standbyMode@diet+1,c
  2891  00FBB4  0E00               	movlw	0
  2892  00FBB6  6E6B               	movwf	standbyMode@diet,c
  2893                           
  2894                           ;standbyMode.c: 1221: goto DIET_BACK2;
  2895  00FBB8  D728               	goto	l480
  2896  00FBBA                     l522:
  2897                           
  2898                           ;standbyMode.c: 1222: }
  2899                           ;standbyMode.c: 1224: food = food_press(diet, drawer);
  2900  00FBBA  C06B  F025         	movff	standbyMode@diet,food_press@dietSum
  2901  00FBBE  C06C  F026         	movff	standbyMode@diet+1,food_press@dietSum+1
  2902  00FBC2  C06F  F027         	movff	standbyMode@drawer,food_press@drawer
  2903  00FBC6  C070  F028         	movff	standbyMode@drawer+1,food_press@drawer+1
  2904  00FBCA  EC40  F06C         	call	_food_press	;wreg free
  2905  00FBCE  C025  F065         	movff	?_food_press,standbyMode@food
  2906  00FBD2  C026  F066         	movff	?_food_press+1,standbyMode@food+1
  2907                           
  2908                           ;standbyMode.c: 1225: if (food == 100){
  2909  00FBD6  0E64               	movlw	100
  2910  00FBD8  1865               	xorwf	standbyMode@food,w,c
  2911  00FBDA  1066               	iorwf	standbyMode@food+1,w,c
  2912  00FBDC  A4D8               	btfss	status,2,c
  2913  00FBDE  D009               	goto	l523
  2914                           
  2915                           ;standbyMode.c: 1226: diet = 0;
  2916  00FBE0  0E00               	movlw	0
  2917  00FBE2  6E6C               	movwf	standbyMode@diet+1,c
  2918  00FBE4  0E00               	movlw	0
  2919  00FBE6  6E6B               	movwf	standbyMode@diet,c
  2920                           
  2921                           ;standbyMode.c: 1227: food = 0;
  2922  00FBE8  0E00               	movlw	0
  2923  00FBEA  6E66               	movwf	standbyMode@food+1,c
  2924  00FBEC  0E00               	movlw	0
  2925  00FBEE  6E65               	movwf	standbyMode@food,c
  2926                           
  2927                           ;standbyMode.c: 1228: goto FOOD_BACK2;
  2928  00FBF0  D7C5               	goto	l516
  2929  00FBF2                     l523:
  2930                           
  2931                           ;standbyMode.c: 1229: }
  2932                           ;standbyMode.c: 1230: drawerInformation[drawerCount] = drawer;
  2933  00FBF2  90D8               	bcf	status,0,c
  2934  00FBF4  3469               	rlcf	standbyMode@drawerCount,w,c
  2935  00FBF6  6ED9               	movwf	fsr2l,c
  2936  00FBF8  346A               	rlcf	standbyMode@drawerCount+1,w,c
  2937  00FBFA  6EDA               	movwf	fsr2h,c
  2938  00FBFC  0E80               	movlw	low _drawerInformation
  2939  00FBFE  26D9               	addwf	fsr2l,f,c
  2940  00FC00  0E00               	movlw	high _drawerInformation
  2941  00FC02  22DA               	addwfc	fsr2h,f,c
  2942  00FC04  C06F  FFDE         	movff	standbyMode@drawer,postinc2
  2943  00FC08  C070  FFDD         	movff	standbyMode@drawer+1,postdec2
  2944                           
  2945                           ;standbyMode.c: 1231: drawerCount += 1;
  2946  00FC0C  4A69               	infsnz	standbyMode@drawerCount,f,c
  2947  00FC0E  2A6A               	incf	standbyMode@drawerCount+1,f,c
  2948  00FC10  D59C               	goto	l479
  2949  00FC12                     l478:
  2950                           
  2951                           ;standbyMode.c: 1236: else if (keypress == 14){
  2952  00FC12  0E0E               	movlw	14
  2953  00FC14  185F               	xorwf	standbyMode@keypress,w,c
  2954  00FC16  A4D8               	btfss	status,2,c
  2955  00FC18  D05A               	goto	l525
  2956  00FC1A                     u6610:
  2957                           
  2958                           ;standbyMode.c: 1238: unsigned int whichKey = viewLogs();
  2959                           
  2960                           ;standbyMode.c: 1237: while (1){
  2961  00FC1A  EC3C  F06E         	call	_viewLogs	;wreg free
  2962  00FC1E  C046  F05D         	movff	?_viewLogs,standbyMode@whichKey
  2963  00FC22  C047  F05E         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2964                           
  2965                           ;standbyMode.c: 1239: if (whichKey == 15){
  2966  00FC26  0E0F               	movlw	15
  2967  00FC28  185D               	xorwf	standbyMode@whichKey,w,c
  2968  00FC2A  105E               	iorwf	standbyMode@whichKey+1,w,c
  2969  00FC2C  B4D8               	btfsc	status,2,c
  2970  00FC2E  D7F5               	goto	u6610
  2971                           
  2972                           ;standbyMode.c: 1242: else if (whichKey == 14){
  2973                           
  2974                           ;standbyMode.c: 1241: }
  2975                           
  2976                           ;standbyMode.c: 1240: continue;
  2977  00FC30  0E0E               	movlw	14
  2978  00FC32  185D               	xorwf	standbyMode@whichKey,w,c
  2979  00FC34  105E               	iorwf	standbyMode@whichKey+1,w,c
  2980  00FC36  A4D8               	btfss	status,2,c
  2981  00FC38  D020               	goto	l530
  2982                           
  2983                           ;standbyMode.c: 1243: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2984  00FC3A  0E01               	movlw	1
  2985  00FC3C  EC2B  F069         	call	_lcdInst
  2986  00FC40  0EC3               	movlw	195
  2987  00FC42  6E52               	movwf	??_standbyMode& (0+255),c
  2988  00FC44  0ECD               	movlw	205
  2989  00FC46                     u6997:
  2990  00FC46  2EE8               	decfsz	wreg,f,c
  2991  00FC48  D7FE               	bra	u6997
  2992  00FC4A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  2993  00FC4C  D7FC               	bra	u6997
  2994  00FC4E  F000               	nop	
  2995                           
  2996                           ;standbyMode.c: 1244: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2997  00FC50  0E0C               	movlw	12
  2998  00FC52  EC2B  F069         	call	_lcdInst
  2999                           
  3000                           ;standbyMode.c: 1245: printf("Rebooting.");
  3001  00FC56  0E93               	movlw	low STR_65
  3002  00FC58  6E0D               	movwf	printf@f,c
  3003  00FC5A  0EFF               	movlw	high STR_65
  3004  00FC5C  6E0E               	movwf	printf@f+1,c
  3005  00FC5E  ECAF  F06F         	call	_printf	;wreg free
  3006                           
  3007                           ;standbyMode.c: 1246: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3008  00FC62  0E66               	movlw	102
  3009  00FC64  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3010  00FC66  0E76               	movlw	118
  3011  00FC68  6E52               	movwf	??_standbyMode& (0+255),c
  3012  00FC6A  0EC1               	movlw	193
  3013  00FC6C                     u7007:
  3014  00FC6C  2EE8               	decfsz	wreg,f,c
  3015  00FC6E  D7FE               	bra	u7007
  3016  00FC70  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3017  00FC72  D7FC               	bra	u7007
  3018  00FC74  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3019  00FC76  D7FA               	bra	u7007
  3020  00FC78  D028               	goto	L1
  3021  00FC7A                     l530:
  3022                           
  3023                           ;standbyMode.c: 1249: else{
  3024                           ;standbyMode.c: 1250: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3025  00FC7A  0E01               	movlw	1
  3026  00FC7C  EC2B  F069         	call	_lcdInst
  3027  00FC80  0EC3               	movlw	195
  3028  00FC82  6E52               	movwf	??_standbyMode& (0+255),c
  3029  00FC84  0ECD               	movlw	205
  3030  00FC86                     u7017:
  3031  00FC86  2EE8               	decfsz	wreg,f,c
  3032  00FC88  D7FE               	bra	u7017
  3033  00FC8A  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3034  00FC8C  D7FC               	bra	u7017
  3035  00FC8E  F000               	nop	
  3036                           
  3037                           ;standbyMode.c: 1251: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3038  00FC90  0E0C               	movlw	12
  3039  00FC92  EC2B  F069         	call	_lcdInst
  3040                           
  3041                           ;standbyMode.c: 1252: printf("Invalid key!");
  3042  00FC96  0E3C               	movlw	low STR_66
  3043  00FC98  6E0D               	movwf	printf@f,c
  3044  00FC9A  0EFF               	movlw	high STR_66
  3045  00FC9C  6E0E               	movwf	printf@f+1,c
  3046  00FC9E  ECAF  F06F         	call	_printf	;wreg free
  3047                           
  3048                           ;standbyMode.c: 1253: lcdInst(0xC0);;
  3049  00FCA2  0EC0               	movlw	192
  3050  00FCA4  EC2B  F069         	call	_lcdInst
  3051                           
  3052                           ;standbyMode.c: 1254: printf("Rebooting.");
  3053  00FCA8  0E93               	movlw	low STR_65
  3054  00FCAA  6E0D               	movwf	printf@f,c
  3055  00FCAC  0EFF               	movlw	high STR_65
  3056  00FCAE  6E0E               	movwf	printf@f+1,c
  3057  00FCB0  ECAF  F06F         	call	_printf	;wreg free
  3058                           
  3059                           ;standbyMode.c: 1255: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3060  00FCB4  0E66               	movlw	102
  3061  00FCB6  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3062  00FCB8  0E76               	movlw	118
  3063  00FCBA  6E52               	movwf	??_standbyMode& (0+255),c
  3064  00FCBC  0EC1               	movlw	193
  3065  00FCBE                     u7027:
  3066  00FCBE  2EE8               	decfsz	wreg,f,c
  3067  00FCC0  D7FE               	bra	u7027
  3068  00FCC2  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3069  00FCC4  D7FC               	bra	u7027
  3070  00FCC6  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3071  00FCC8  D7FA               	bra	u7027
  3072  00FCCA                     L1:
  3073  00FCCA  F000               	nop	
  3074                           
  3075                           ;standbyMode.c: 1256: break;
  3076  00FCCC  0012               	return	
  3077  00FCCE                     l525:
  3078                           
  3079                           ;standbyMode.c: 1261: else {
  3080                           ;standbyMode.c: 1262: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3081  00FCCE  0E01               	movlw	1
  3082  00FCD0  EC2B  F069         	call	_lcdInst
  3083  00FCD4  0EC3               	movlw	195
  3084  00FCD6  6E52               	movwf	??_standbyMode& (0+255),c
  3085  00FCD8  0ECD               	movlw	205
  3086  00FCDA                     u7037:
  3087  00FCDA  2EE8               	decfsz	wreg,f,c
  3088  00FCDC  D7FE               	bra	u7037
  3089  00FCDE  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3090  00FCE0  D7FC               	bra	u7037
  3091  00FCE2  F000               	nop	
  3092                           
  3093                           ;standbyMode.c: 1263: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3094  00FCE4  0E0C               	movlw	12
  3095  00FCE6  EC2B  F069         	call	_lcdInst
  3096                           
  3097                           ;standbyMode.c: 1264: printf("Invalid key!");
  3098  00FCEA  0E3C               	movlw	low STR_66
  3099  00FCEC  6E0D               	movwf	printf@f,c
  3100  00FCEE  0EFF               	movlw	high STR_66
  3101  00FCF0  6E0E               	movwf	printf@f+1,c
  3102  00FCF2  ECAF  F06F         	call	_printf	;wreg free
  3103                           
  3104                           ;standbyMode.c: 1265: lcdInst(0xC0);;
  3105  00FCF6  0EC0               	movlw	192
  3106  00FCF8  EC2B  F069         	call	_lcdInst
  3107                           
  3108                           ;standbyMode.c: 1266: printf("Rebooting.");
  3109  00FCFC  0E93               	movlw	low STR_65
  3110  00FCFE  6E0D               	movwf	printf@f,c
  3111  00FD00  0EFF               	movlw	high STR_65
  3112  00FD02  6E0E               	movwf	printf@f+1,c
  3113  00FD04  ECAF  F06F         	call	_printf	;wreg free
  3114                           
  3115                           ;standbyMode.c: 1267: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3116  00FD08  0E66               	movlw	102
  3117  00FD0A  6E53               	movwf	(??_standbyMode+1)& (0+255),c
  3118  00FD0C  0E76               	movlw	118
  3119  00FD0E  6E52               	movwf	??_standbyMode& (0+255),c
  3120  00FD10  0EC1               	movlw	193
  3121  00FD12                     u7047:
  3122  00FD12  2EE8               	decfsz	wreg,f,c
  3123  00FD14  D7FE               	bra	u7047
  3124  00FD16  2E52               	decfsz	??_standbyMode& (0+255),f,c
  3125  00FD18  D7FC               	bra	u7047
  3126  00FD1A  2E53               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3127  00FD1C  D7FA               	bra	u7047
  3128  00FD1E  F000               	nop	
  3129  00FD20  0012               	return	
  3130  00FD22                     __end_of_standbyMode:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _which_drawer *****************
  3143 ;; Defined at:
  3144 ;;		line 885 in file "standbyMode.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  rand            2   39[COMRAM] unsigned int 
  3149 ;;  keypress        1   47[COMRAM] unsigned char 
  3150 ;;  count           2   45[COMRAM] unsigned int 
  3151 ;;  backCheck       2   43[COMRAM] unsigned int 
  3152 ;;  sum             2   41[COMRAM] unsigned int 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  2   36[COMRAM] unsigned int 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;Total ram usage:       12 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    3
  3169 ;; This function calls:
  3170 ;;		_decode_drawer
  3171 ;;		_lcdInst
  3172 ;;		_printf
  3173 ;;		_putch
  3174 ;; This function is called by:
  3175 ;;		_standbyMode
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text2
  3180  00DA74                     __ptext2:
  3181                           	opt stack 0
  3182  00DA74                     _which_drawer:
  3183                           	opt stack 26
  3184                           
  3185                           ;standbyMode.c: 886: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3186                           
  3187                           ;incstack = 0
  3188  00DA74  0E0C               	movlw	12
  3189  00DA76  EC2B  F069         	call	_lcdInst
  3190                           
  3191                           ;standbyMode.c: 887: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3192  00DA7A  0E01               	movlw	1
  3193  00DA7C  EC2B  F069         	call	_lcdInst
  3194  00DA80  0EC3               	movlw	195
  3195  00DA82  6E27               	movwf	??_which_drawer& (0+255),c
  3196  00DA84  0ECD               	movlw	205
  3197  00DA86                     u7057:
  3198  00DA86  2EE8               	decfsz	wreg,f,c
  3199  00DA88  D7FE               	bra	u7057
  3200  00DA8A  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3201  00DA8C  D7FC               	bra	u7057
  3202  00DA8E  F000               	nop	
  3203                           
  3204                           ;standbyMode.c: 888: printf("Drawer number:");
  3205  00DA90  0E8C               	movlw	low STR_38
  3206  00DA92  6E0D               	movwf	printf@f,c
  3207  00DA94  0EFE               	movlw	high STR_38
  3208  00DA96  6E0E               	movwf	printf@f+1,c
  3209  00DA98  ECAF  F06F         	call	_printf	;wreg free
  3210                           
  3211                           ;standbyMode.c: 889: lcdInst(0xC0);;
  3212  00DA9C  0EC0               	movlw	192
  3213  00DA9E  EC2B  F069         	call	_lcdInst
  3214                           
  3215                           ;standbyMode.c: 891: unsigned int count = 0;
  3216  00DAA2  0E00               	movlw	0
  3217  00DAA4  6E2F               	movwf	which_drawer@count+1,c
  3218  00DAA6  0E00               	movlw	0
  3219  00DAA8  6E2E               	movwf	which_drawer@count,c
  3220                           
  3221                           ;standbyMode.c: 892: unsigned int sum = 0;
  3222  00DAAA  0E00               	movlw	0
  3223  00DAAC  6E2B               	movwf	which_drawer@sum+1,c
  3224  00DAAE  0E00               	movlw	0
  3225  00DAB0  6E2A               	movwf	which_drawer@sum,c
  3226                           
  3227                           ;standbyMode.c: 893: unsigned int backCheck = 0;
  3228  00DAB2  0E00               	movlw	0
  3229  00DAB4  6E2D               	movwf	which_drawer@backCheck+1,c
  3230  00DAB6  0E00               	movlw	0
  3231  00DAB8  6E2C               	movwf	which_drawer@backCheck,c
  3232  00DABA                     
  3233                           ;standbyMode.c: 896: while(PORTBbits.RB1 == 0){ continue; }
  3234  00DABA  A281               	btfss	3969,1,c	;volatile
  3235  00DABC  D7FE               	goto	l431
  3236                           
  3237                           ;standbyMode.c: 897: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3238  00DABE  3881               	swapf	3969,w,c	;volatile
  3239  00DAC0  0B0F               	andlw	15
  3240  00DAC2  0B0F               	andlw	15
  3241  00DAC4  6E30               	movwf	which_drawer@keypress,c
  3242  00DAC6  B281               	btfsc	3969,1,c	;volatile
  3243  00DAC8  D7FE               	goto	l436
  3244                           
  3245                           ;standbyMode.c: 900: if(keypress == 15){
  3246  00DACA  0E0F               	movlw	15
  3247  00DACC  1830               	xorwf	which_drawer@keypress,w,c
  3248  00DACE  B4D8               	btfsc	status,2,c
  3249  00DAD0  D0BA               	goto	l439
  3250                           
  3251                           ;standbyMode.c: 903: else if (keypress == 14){
  3252                           
  3253                           ;standbyMode.c: 902: }
  3254                           
  3255                           ;standbyMode.c: 901: break;
  3256  00DAD2  0E0E               	movlw	14
  3257  00DAD4  1830               	xorwf	which_drawer@keypress,w,c
  3258  00DAD6  A4D8               	btfss	status,2,c
  3259  00DAD8  D005               	goto	l441
  3260                           
  3261                           ;standbyMode.c: 904: backCheck = 100;
  3262  00DADA  0E00               	movlw	0
  3263  00DADC  6E2D               	movwf	which_drawer@backCheck+1,c
  3264  00DADE  0E64               	movlw	100
  3265  00DAE0  6E2C               	movwf	which_drawer@backCheck,c
  3266                           
  3267                           ;standbyMode.c: 905: break;
  3268  00DAE2  D0B1               	goto	l439
  3269  00DAE4                     l441:
  3270                           
  3271                           ;standbyMode.c: 907: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  3272  00DAE4  5030               	movf	which_drawer@keypress,w,c
  3273  00DAE6  B4D8               	btfsc	status,2,c
  3274  00DAE8  D023               	goto	u6040
  3275  00DAEA  0430               	decf	which_drawer@keypress,w,c
  3276  00DAEC  B4D8               	btfsc	status,2,c
  3277  00DAEE  D020               	goto	u6040
  3278  00DAF0  0E02               	movlw	2
  3279  00DAF2  1830               	xorwf	which_drawer@keypress,w,c
  3280  00DAF4  B4D8               	btfsc	status,2,c
  3281  00DAF6  D01C               	goto	u6040
  3282  00DAF8  0E04               	movlw	4
  3283  00DAFA  1830               	xorwf	which_drawer@keypress,w,c
  3284  00DAFC  B4D8               	btfsc	status,2,c
  3285  00DAFE  D018               	goto	u6040
  3286  00DB00  0E05               	movlw	5
  3287  00DB02  1830               	xorwf	which_drawer@keypress,w,c
  3288  00DB04  B4D8               	btfsc	status,2,c
  3289  00DB06  D014               	goto	u6040
  3290  00DB08  0E06               	movlw	6
  3291  00DB0A  1830               	xorwf	which_drawer@keypress,w,c
  3292  00DB0C  B4D8               	btfsc	status,2,c
  3293  00DB0E  D010               	goto	u6040
  3294  00DB10  0E08               	movlw	8
  3295  00DB12  1830               	xorwf	which_drawer@keypress,w,c
  3296  00DB14  B4D8               	btfsc	status,2,c
  3297  00DB16  D00C               	goto	u6040
  3298  00DB18  0E09               	movlw	9
  3299  00DB1A  1830               	xorwf	which_drawer@keypress,w,c
  3300  00DB1C  B4D8               	btfsc	status,2,c
  3301  00DB1E  D008               	goto	u6040
  3302  00DB20  0E0A               	movlw	10
  3303  00DB22  1830               	xorwf	which_drawer@keypress,w,c
  3304  00DB24  B4D8               	btfsc	status,2,c
  3305  00DB26  D004               	goto	u6040
  3306  00DB28  0E0D               	movlw	13
  3307  00DB2A  1830               	xorwf	which_drawer@keypress,w,c
  3308  00DB2C  A4D8               	btfss	status,2,c
  3309  00DB2E  D06A               	goto	l443
  3310  00DB30                     u6040:
  3311                           
  3312                           ;standbyMode.c: 908: if (count == 0){
  3313  00DB30  502E               	movf	which_drawer@count,w,c
  3314  00DB32  102F               	iorwf	which_drawer@count+1,w,c
  3315  00DB34  A4D8               	btfss	status,2,c
  3316  00DB36  D046               	goto	l446
  3317                           
  3318                           ;standbyMode.c: 909: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  3319  00DB38  0430               	decf	which_drawer@keypress,w,c
  3320  00DB3A  B4D8               	btfsc	status,2,c
  3321  00DB3C  D01C               	goto	u6130
  3322  00DB3E  0E02               	movlw	2
  3323  00DB40  1830               	xorwf	which_drawer@keypress,w,c
  3324  00DB42  B4D8               	btfsc	status,2,c
  3325  00DB44  D018               	goto	u6130
  3326  00DB46  0E04               	movlw	4
  3327  00DB48  1830               	xorwf	which_drawer@keypress,w,c
  3328  00DB4A  B4D8               	btfsc	status,2,c
  3329  00DB4C  D014               	goto	u6130
  3330  00DB4E  0E05               	movlw	5
  3331  00DB50  1830               	xorwf	which_drawer@keypress,w,c
  3332  00DB52  B4D8               	btfsc	status,2,c
  3333  00DB54  D010               	goto	u6130
  3334  00DB56  0E06               	movlw	6
  3335  00DB58  1830               	xorwf	which_drawer@keypress,w,c
  3336  00DB5A  B4D8               	btfsc	status,2,c
  3337  00DB5C  D00C               	goto	u6130
  3338  00DB5E  0E08               	movlw	8
  3339  00DB60  1830               	xorwf	which_drawer@keypress,w,c
  3340  00DB62  B4D8               	btfsc	status,2,c
  3341  00DB64  D008               	goto	u6130
  3342  00DB66  0E09               	movlw	9
  3343  00DB68  1830               	xorwf	which_drawer@keypress,w,c
  3344  00DB6A  B4D8               	btfsc	status,2,c
  3345  00DB6C  D004               	goto	u6130
  3346  00DB6E  0E0A               	movlw	10
  3347  00DB70  1830               	xorwf	which_drawer@keypress,w,c
  3348  00DB72  A4D8               	btfss	status,2,c
  3349  00DB74  D011               	goto	l447
  3350  00DB76                     u6130:
  3351                           
  3352                           ;standbyMode.c: 910: count += 2;
  3353  00DB76  0E02               	movlw	2
  3354  00DB78  262E               	addwf	which_drawer@count,f,c
  3355  00DB7A  0E00               	movlw	0
  3356  00DB7C  222F               	addwfc	which_drawer@count+1,f,c
  3357                           
  3358                           ;standbyMode.c: 911: putch(input[keypress]);
  3359  00DB7E  5030               	movf	which_drawer@keypress,w,c
  3360  00DB80  0D01               	mullw	1
  3361  00DB82  0E34               	movlw	low _input
  3362  00DB84  24F3               	addwf	prodl,w,c
  3363  00DB86  6EF6               	movwf	tblptrl,c
  3364  00DB88  0EFD               	movlw	high _input
  3365  00DB8A  20F4               	addwfc	prodh,w,c
  3366  00DB8C  6EF7               	movwf	tblptrh,c
  3367  00DB8E                     	if	0	;There are less than 3 active tblptr bytes
  3368  00DB8E                     	endif
  3369  00DB8E  0008               	tblrd		*
  3370  00DB90  50F5               	movf	tablat,w,c
  3371  00DB92  EC35  F069         	call	_putch
  3372  00DB96  D034               	goto	l457
  3373  00DB98                     l447:
  3374                           
  3375                           ;standbyMode.c: 914: else if (keypress == 0){
  3376  00DB98  5030               	movf	which_drawer@keypress,w,c
  3377  00DB9A  A4D8               	btfss	status,2,c
  3378  00DB9C  D78E               	goto	l431
  3379                           
  3380                           ;standbyMode.c: 915: putch(input[keypress]);
  3381  00DB9E  5030               	movf	which_drawer@keypress,w,c
  3382  00DBA0  0D01               	mullw	1
  3383  00DBA2  0E34               	movlw	low _input
  3384  00DBA4  24F3               	addwf	prodl,w,c
  3385  00DBA6  6EF6               	movwf	tblptrl,c
  3386  00DBA8  0EFD               	movlw	high _input
  3387  00DBAA  20F4               	addwfc	prodh,w,c
  3388  00DBAC  6EF7               	movwf	tblptrh,c
  3389  00DBAE                     	if	0	;There are less than 3 active tblptr bytes
  3390  00DBAE                     	endif
  3391  00DBAE  0008               	tblrd		*
  3392  00DBB0  50F5               	movf	tablat,w,c
  3393  00DBB2  EC35  F069         	call	_putch
  3394                           
  3395                           ;standbyMode.c: 916: count += 1;
  3396  00DBB6  4A2E               	infsnz	which_drawer@count,f,c
  3397  00DBB8  2A2F               	incf	which_drawer@count+1,f,c
  3398  00DBBA  D020               	goto	u6180
  3399  00DBBC                     L2:
  3400  00DBBC  262A               	addwf	which_drawer@sum,f,c
  3401  00DBBE  0E00               	movlw	0
  3402  00DBC0  222B               	addwfc	which_drawer@sum+1,f,c
  3403                           
  3404                           ;standbyMode.c: 918: }
  3405                           ;standbyMode.c: 919: }
  3406  00DBC2  D77B               	goto	l431
  3407  00DBC4                     l446:
  3408                           
  3409                           ;standbyMode.c: 920: else if (count == 1){
  3410  00DBC4  042E               	decf	which_drawer@count,w,c
  3411  00DBC6  102F               	iorwf	which_drawer@count+1,w,c
  3412  00DBC8  A4D8               	btfss	status,2,c
  3413  00DBCA  D777               	goto	l431
  3414                           
  3415                           ;standbyMode.c: 921: if (keypress < 8 || keypress == 13){
  3416  00DBCC  0E07               	movlw	7
  3417  00DBCE  6430               	cpfsgt	which_drawer@keypress,c
  3418  00DBD0  D004               	goto	u6170
  3419  00DBD2  0E0D               	movlw	13
  3420  00DBD4  1830               	xorwf	which_drawer@keypress,w,c
  3421  00DBD6  A4D8               	btfss	status,2,c
  3422  00DBD8  D770               	goto	l431
  3423  00DBDA                     u6170:
  3424                           
  3425                           ;standbyMode.c: 922: putch(input[keypress]);
  3426  00DBDA  5030               	movf	which_drawer@keypress,w,c
  3427  00DBDC  0D01               	mullw	1
  3428  00DBDE  0E34               	movlw	low _input
  3429  00DBE0  24F3               	addwf	prodl,w,c
  3430  00DBE2  6EF6               	movwf	tblptrl,c
  3431  00DBE4  0EFD               	movlw	high _input
  3432  00DBE6  20F4               	addwfc	prodh,w,c
  3433  00DBE8  6EF7               	movwf	tblptrh,c
  3434  00DBEA                     	if	0	;There are less than 3 active tblptr bytes
  3435  00DBEA                     	endif
  3436  00DBEA  0008               	tblrd		*
  3437  00DBEC  50F5               	movf	tablat,w,c
  3438  00DBEE  EC35  F069         	call	_putch
  3439                           
  3440                           ;standbyMode.c: 923: count += 1;
  3441  00DBF2  4A2E               	infsnz	which_drawer@count,f,c
  3442  00DBF4  2A2F               	incf	which_drawer@count+1,f,c
  3443                           
  3444                           ;standbyMode.c: 924: if(keypress == 0){
  3445  00DBF6  5030               	movf	which_drawer@keypress,w,c
  3446  00DBF8  A4D8               	btfss	status,2,c
  3447  00DBFA  D002               	goto	l457
  3448  00DBFC                     u6180:
  3449                           
  3450                           ;standbyMode.c: 925: sum += 20;
  3451  00DBFC  0E14               	movlw	20
  3452  00DBFE  D7DE               	goto	L2
  3453  00DC00                     l457:
  3454                           
  3455                           ;standbyMode.c: 927: else {
  3456                           ;standbyMode.c: 928: sum += keypress;
  3457  00DC00  5030               	movf	which_drawer@keypress,w,c
  3458  00DC02  D7DC               	goto	L2
  3459  00DC04                     l443:
  3460                           
  3461                           ;standbyMode.c: 933: else if (keypress == 12){
  3462  00DC04  0E0C               	movlw	12
  3463  00DC06  1830               	xorwf	which_drawer@keypress,w,c
  3464  00DC08  A4D8               	btfss	status,2,c
  3465  00DC0A  D757               	goto	l431
  3466                           
  3467                           ;standbyMode.c: 934: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3468  00DC0C  0E01               	movlw	1
  3469  00DC0E  EC2B  F069         	call	_lcdInst
  3470  00DC12  0EC3               	movlw	195
  3471  00DC14  6E27               	movwf	??_which_drawer& (0+255),c
  3472  00DC16  0ECD               	movlw	205
  3473  00DC18                     u7067:
  3474  00DC18  2EE8               	decfsz	wreg,f,c
  3475  00DC1A  D7FE               	bra	u7067
  3476  00DC1C  2E27               	decfsz	??_which_drawer& (0+255),f,c
  3477  00DC1E  D7FC               	bra	u7067
  3478  00DC20  F000               	nop	
  3479                           
  3480                           ;standbyMode.c: 935: printf("Drawer number:");
  3481  00DC22  0E8C               	movlw	low STR_38
  3482  00DC24  6E0D               	movwf	printf@f,c
  3483  00DC26  0EFE               	movlw	high STR_38
  3484  00DC28  6E0E               	movwf	printf@f+1,c
  3485  00DC2A  ECAF  F06F         	call	_printf	;wreg free
  3486                           
  3487                           ;standbyMode.c: 936: lcdInst(0xC0);;
  3488  00DC2E  0EC0               	movlw	192
  3489  00DC30  EC2B  F069         	call	_lcdInst
  3490                           
  3491                           ;standbyMode.c: 937: count = 0;
  3492  00DC34  0E00               	movlw	0
  3493  00DC36  6E2F               	movwf	which_drawer@count+1,c
  3494  00DC38  0E00               	movlw	0
  3495  00DC3A  6E2E               	movwf	which_drawer@count,c
  3496                           
  3497                           ;standbyMode.c: 938: sum = 0;
  3498  00DC3C  0E00               	movlw	0
  3499  00DC3E  6E2B               	movwf	which_drawer@sum+1,c
  3500  00DC40  0E00               	movlw	0
  3501  00DC42  6E2A               	movwf	which_drawer@sum,c
  3502  00DC44  D73A               	goto	l431
  3503  00DC46                     l439:
  3504                           
  3505                           ;standbyMode.c: 939: }
  3506                           ;standbyMode.c: 940: }
  3507                           ;standbyMode.c: 942: if (backCheck == 100){
  3508  00DC46  0E64               	movlw	100
  3509  00DC48  182C               	xorwf	which_drawer@backCheck,w,c
  3510  00DC4A  102D               	iorwf	which_drawer@backCheck+1,w,c
  3511  00DC4C  A4D8               	btfss	status,2,c
  3512  00DC4E  D005               	goto	l462
  3513                           
  3514                           ;standbyMode.c: 943: return backCheck;
  3515  00DC50  C02C  F025         	movff	which_drawer@backCheck,?_which_drawer
  3516  00DC54  C02D  F026         	movff	which_drawer@backCheck+1,?_which_drawer+1
  3517                           
  3518                           ;standbyMode.c: 944: }
  3519  00DC58  0012               	return	
  3520  00DC5A                     l462:
  3521                           
  3522                           ;standbyMode.c: 945: else{
  3523                           ;standbyMode.c: 946: unsigned int rand = decode_drawer(sum);
  3524  00DC5A  C02A  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3525  00DC5E  C02B  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3526  00DC62  ECCF  F06B         	call	_decode_drawer	;wreg free
  3527  00DC66  C001  F028         	movff	?_decode_drawer,which_drawer@rand
  3528  00DC6A  C002  F029         	movff	?_decode_drawer+1,which_drawer@rand+1
  3529                           
  3530                           ;standbyMode.c: 947: return rand;
  3531  00DC6E  C028  F025         	movff	which_drawer@rand,?_which_drawer
  3532  00DC72  C029  F026         	movff	which_drawer@rand+1,?_which_drawer+1
  3533  00DC76  0012               	return	
  3534  00DC78                     __end_of_which_drawer:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _decode_drawer *****************
  3552 ;; Defined at:
  3553 ;;		line 807 in file "standbyMode.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  drawer          2    0[COMRAM] unsigned int 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  returnValue     2    4[COMRAM] unsigned int 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2    0[COMRAM] unsigned int 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:        6 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; This function calls:
  3574 ;;		Nothing
  3575 ;; This function is called by:
  3576 ;;		_which_drawer
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text3
  3581  00D79E                     __ptext3:
  3582                           	opt stack 0
  3583  00D79E                     _decode_drawer:
  3584                           	opt stack 28
  3585                           
  3586                           ;standbyMode.c: 808: unsigned int returnValue;
  3587                           ;standbyMode.c: 810: switch(drawer){
  3588                           
  3589                           ;incstack = 0
  3590  00D79E  D03A               	goto	l412
  3591  00D7A0                     
  3592                           ;standbyMode.c: 813: returnValue = 1;
  3593  00D7A0  0E00               	movlw	0
  3594  00D7A2  6E06               	movwf	decode_drawer@returnValue+1,c
  3595  00D7A4  0E01               	movlw	1
  3596  00D7A6  D02F               	goto	L14
  3597  00D7A8                     
  3598                           ;standbyMode.c: 818: returnValue = 2;
  3599  00D7A8  0E00               	movlw	0
  3600  00D7AA  6E06               	movwf	decode_drawer@returnValue+1,c
  3601  00D7AC  0E02               	movlw	2
  3602  00D7AE  D02B               	goto	L14
  3603  00D7B0                     
  3604                           ;standbyMode.c: 823: returnValue = 3;
  3605  00D7B0  0E00               	movlw	0
  3606  00D7B2  6E06               	movwf	decode_drawer@returnValue+1,c
  3607  00D7B4  0E03               	movlw	3
  3608  00D7B6  D027               	goto	L14
  3609  00D7B8                     
  3610                           ;standbyMode.c: 828: returnValue = 7;
  3611  00D7B8  0E00               	movlw	0
  3612  00D7BA  6E06               	movwf	decode_drawer@returnValue+1,c
  3613  00D7BC  0E07               	movlw	7
  3614  00D7BE  D023               	goto	L14
  3615  00D7C0                     
  3616                           ;standbyMode.c: 833: returnValue = 8;
  3617  00D7C0  0E00               	movlw	0
  3618  00D7C2  6E06               	movwf	decode_drawer@returnValue+1,c
  3619  00D7C4  0E08               	movlw	8
  3620  00D7C6  D01F               	goto	L14
  3621  00D7C8                     
  3622                           ;standbyMode.c: 838: returnValue = 9;
  3623  00D7C8  0E00               	movlw	0
  3624  00D7CA  6E06               	movwf	decode_drawer@returnValue+1,c
  3625  00D7CC  0E09               	movlw	9
  3626  00D7CE  D01B               	goto	L14
  3627  00D7D0                     
  3628                           ;standbyMode.c: 843: returnValue = 10;
  3629  00D7D0  0E00               	movlw	0
  3630  00D7D2  6E06               	movwf	decode_drawer@returnValue+1,c
  3631  00D7D4  0E0A               	movlw	10
  3632  00D7D6  D017               	goto	L14
  3633  00D7D8                     
  3634                           ;standbyMode.c: 848: returnValue = 11;
  3635  00D7D8  0E00               	movlw	0
  3636  00D7DA  6E06               	movwf	decode_drawer@returnValue+1,c
  3637  00D7DC  0E0B               	movlw	11
  3638  00D7DE  D013               	goto	L14
  3639  00D7E0                     
  3640                           ;standbyMode.c: 853: returnValue = 12;
  3641  00D7E0  0E00               	movlw	0
  3642  00D7E2  6E06               	movwf	decode_drawer@returnValue+1,c
  3643  00D7E4  0E0C               	movlw	12
  3644  00D7E6  D00F               	goto	L14
  3645  00D7E8                     
  3646                           ;standbyMode.c: 858: returnValue = 13;
  3647  00D7E8  0E00               	movlw	0
  3648  00D7EA  6E06               	movwf	decode_drawer@returnValue+1,c
  3649  00D7EC  0E0D               	movlw	13
  3650  00D7EE  D00B               	goto	L14
  3651  00D7F0                     
  3652                           ;standbyMode.c: 863: returnValue = 14;
  3653  00D7F0  0E00               	movlw	0
  3654  00D7F2  6E06               	movwf	decode_drawer@returnValue+1,c
  3655  00D7F4  0E0E               	movlw	14
  3656  00D7F6  D007               	goto	L14
  3657  00D7F8                     
  3658                           ;standbyMode.c: 868: returnValue = 15;
  3659  00D7F8  0E00               	movlw	0
  3660  00D7FA  6E06               	movwf	decode_drawer@returnValue+1,c
  3661  00D7FC  0E0F               	movlw	15
  3662  00D7FE  D003               	goto	L14
  3663  00D800                     
  3664                           ;standbyMode.c: 873: returnValue = 16;
  3665  00D800  0E00               	movlw	0
  3666  00D802  6E06               	movwf	decode_drawer@returnValue+1,c
  3667  00D804  0E10               	movlw	16
  3668  00D806                     L14:
  3669  00D806  6E05               	movwf	decode_drawer@returnValue,c
  3670                           
  3671                           ;standbyMode.c: 874: break;
  3672  00D808  D036               	goto	l414
  3673  00D80A                     l427:
  3674                           
  3675                           ;standbyMode.c: 877: returnValue = drawer;
  3676  00D80A  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3677  00D80E  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3678                           
  3679                           ;standbyMode.c: 879: }
  3680                           
  3681                           ;standbyMode.c: 878: break;
  3682  00D812  D031               	goto	l414
  3683  00D814                     l412:
  3684  00D814  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3685  00D818  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3686                           
  3687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3688                           ; Switch size 1, requested type "space"
  3689                           ; Number of cases is 1, Range of values is 0 to 0
  3690                           ; switch strategies available:
  3691                           ; Name         Instructions Cycles
  3692                           ; simple_byte            4     3 (average)
  3693                           ;	Chosen strategy is simple_byte
  3694  00D81C  5004               	movf	??_decode_drawer+1,w,c
  3695  00D81E  0A00               	xorlw	0	; case 0
  3696  00D820  A4D8               	btfss	status,2,c
  3697  00D822  D7F3               	goto	l427
  3698                           
  3699                           ; Switch size 1, requested type "space"
  3700                           ; Number of cases is 13, Range of values is 1 to 40
  3701                           ; switch strategies available:
  3702                           ; Name         Instructions Cycles
  3703                           ; simple_byte           40    21 (average)
  3704                           ;	Chosen strategy is simple_byte
  3705  00D824  5003               	movf	??_decode_drawer,w,c
  3706  00D826  0A01               	xorlw	1	; case 1
  3707  00D828  B4D8               	btfsc	status,2,c
  3708  00D82A  D7BE               	goto	l415
  3709  00D82C  0A03               	xorlw	3	; case 2
  3710  00D82E  B4D8               	btfsc	status,2,c
  3711  00D830  D7BF               	goto	l416
  3712  00D832  0A0A               	xorlw	10	; case 8
  3713  00D834  B4D8               	btfsc	status,2,c
  3714  00D836  D7C0               	goto	l417
  3715  00D838  0A01               	xorlw	1	; case 9
  3716  00D83A  B4D8               	btfsc	status,2,c
  3717  00D83C  D7C1               	goto	l418
  3718  00D83E  0A03               	xorlw	3	; case 10
  3719  00D840  B4D8               	btfsc	status,2,c
  3720  00D842  D7C2               	goto	l419
  3721  00D844  0A1E               	xorlw	30	; case 20
  3722  00D846  B4D8               	btfsc	status,2,c
  3723  00D848  D7AB               	goto	l413
  3724  00D84A  0A01               	xorlw	1	; case 21
  3725  00D84C  B4D8               	btfsc	status,2,c
  3726  00D84E  D7C8               	goto	l422
  3727  00D850  0A03               	xorlw	3	; case 22
  3728  00D852  B4D8               	btfsc	status,2,c
  3729  00D854  D7C9               	goto	l423
  3730  00D856  0A0E               	xorlw	14	; case 24
  3731  00D858  B4D8               	btfsc	status,2,c
  3732  00D85A  D7CA               	goto	l424
  3733  00D85C  0A01               	xorlw	1	; case 25
  3734  00D85E  B4D8               	btfsc	status,2,c
  3735  00D860  D7CB               	goto	l425
  3736  00D862  0A03               	xorlw	3	; case 26
  3737  00D864  B4D8               	btfsc	status,2,c
  3738  00D866  D7CC               	goto	l426
  3739  00D868  0A3B               	xorlw	59	; case 33
  3740  00D86A  B4D8               	btfsc	status,2,c
  3741  00D86C  D7B1               	goto	l420
  3742  00D86E  0A09               	xorlw	9	; case 40
  3743  00D870  B4D8               	btfsc	status,2,c
  3744  00D872  D7B2               	goto	l421
  3745  00D874  D7CA               	goto	l427
  3746  00D876                     l414:
  3747                           
  3748                           ;standbyMode.c: 880: return returnValue;
  3749  00D876  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3750  00D87A  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3751  00D87E  0012               	return		;funcret
  3752  00D880                     __end_of_decode_drawer:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           postinc0	equ	0xFEE
  3761                           wreg	equ	0xFE8
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _viewLogs *****************
  3770 ;; Defined at:
  3771 ;;		line 290 in file "standbyMode.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  keypress2       1   80[COMRAM] unsigned char 
  3776 ;;  logView         2   77[COMRAM] unsigned int 
  3777 ;;  returnVal       2   75[COMRAM] unsigned int 
  3778 ;;  checkLog        2   73[COMRAM] unsigned int 
  3779 ;;  logNumber       1   79[COMRAM] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2   69[COMRAM] unsigned int 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;Total ram usage:       12 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    4
  3796 ;; This function calls:
  3797 ;;		_displayLogs
  3798 ;;		_lcdInst
  3799 ;;		_printf
  3800 ;;		_putch
  3801 ;;		_readEEPROM
  3802 ;;		_verifyKeypress
  3803 ;; This function is called by:
  3804 ;;		_standbyMode
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text4
  3809  00DC78                     __ptext4:
  3810                           	opt stack 0
  3811  00DC78                     _viewLogs:
  3812                           	opt stack 25
  3813                           
  3814                           ;standbyMode.c: 292: unsigned char logNumber = readEEPROM(250);
  3815                           
  3816                           ;incstack = 0
  3817  00DC78  0EFA               	movlw	250
  3818  00DC7A  EC3F  F069         	call	_readEEPROM
  3819  00DC7E  6E50               	movwf	viewLogs@logNumber,c
  3820                           
  3821                           ;standbyMode.c: 293: unsigned int logView = 0;
  3822  00DC80  0E00               	movlw	0
  3823  00DC82  6E4F               	movwf	viewLogs@logView+1,c
  3824  00DC84  0E00               	movlw	0
  3825  00DC86  6E4E               	movwf	viewLogs@logView,c
  3826                           
  3827                           ;standbyMode.c: 294: unsigned int checkLog = 0;
  3828  00DC88  0E00               	movlw	0
  3829  00DC8A  6E4B               	movwf	viewLogs@checkLog+1,c
  3830  00DC8C  0E00               	movlw	0
  3831  00DC8E  6E4A               	movwf	viewLogs@checkLog,c
  3832                           
  3833                           ;standbyMode.c: 295: unsigned int returnVal = 0;
  3834  00DC90  0E00               	movlw	0
  3835  00DC92  6E4D               	movwf	viewLogs@returnVal+1,c
  3836  00DC94  0E00               	movlw	0
  3837  00DC96  6E4C               	movwf	viewLogs@returnVal,c
  3838                           
  3839                           ;standbyMode.c: 297: if (logNumber == 0){
  3840  00DC98  5050               	movf	viewLogs@logNumber,w,c
  3841  00DC9A  A4D8               	btfss	status,2,c
  3842  00DC9C  D02B               	goto	l236
  3843                           
  3844                           ;standbyMode.c: 298: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3845  00DC9E  0E01               	movlw	1
  3846  00DCA0  EC2B  F069         	call	_lcdInst
  3847  00DCA4  0EC3               	movlw	195
  3848  00DCA6  6E48               	movwf	??_viewLogs& (0+255),c
  3849  00DCA8  0ECD               	movlw	205
  3850  00DCAA                     u7077:
  3851  00DCAA  2EE8               	decfsz	wreg,f,c
  3852  00DCAC  D7FE               	bra	u7077
  3853  00DCAE  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3854  00DCB0  D7FC               	bra	u7077
  3855  00DCB2  F000               	nop	
  3856                           
  3857                           ;standbyMode.c: 299: printf("No logs");
  3858  00DCB4  0EE1               	movlw	low STR_1
  3859  00DCB6  6E0D               	movwf	printf@f,c
  3860  00DCB8  0EFF               	movlw	high STR_1
  3861  00DCBA  6E0E               	movwf	printf@f+1,c
  3862  00DCBC  ECAF  F06F         	call	_printf	;wreg free
  3863                           
  3864                           ;standbyMode.c: 300: lcdInst(0xC0);;
  3865  00DCC0  0EC0               	movlw	192
  3866  00DCC2  EC2B  F069         	call	_lcdInst
  3867                           
  3868                           ;standbyMode.c: 301: printf("available.");
  3869  00DCC6  0E88               	movlw	low STR_2
  3870  00DCC8  6E0D               	movwf	printf@f,c
  3871  00DCCA  0EFF               	movlw	high STR_2
  3872  00DCCC  6E0E               	movwf	printf@f+1,c
  3873  00DCCE  ECAF  F06F         	call	_printf	;wreg free
  3874                           
  3875                           ;standbyMode.c: 302: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3876  00DCD2  0E66               	movlw	102
  3877  00DCD4  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3878  00DCD6  0E76               	movlw	118
  3879  00DCD8  6E48               	movwf	??_viewLogs& (0+255),c
  3880  00DCDA  0EC1               	movlw	193
  3881  00DCDC                     u7087:
  3882  00DCDC  2EE8               	decfsz	wreg,f,c
  3883  00DCDE  D7FE               	bra	u7087
  3884  00DCE0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3885  00DCE2  D7FC               	bra	u7087
  3886  00DCE4  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3887  00DCE6  D7FA               	bra	u7087
  3888  00DCE8  F000               	nop	
  3889                           
  3890                           ;standbyMode.c: 303: return 14;
  3891  00DCEA  0E00               	movlw	0
  3892  00DCEC  6E47               	movwf	?_viewLogs+1,c
  3893  00DCEE  0E0E               	movlw	14
  3894  00DCF0  6E46               	movwf	?_viewLogs,c
  3895                           
  3896                           ;standbyMode.c: 304: }
  3897  00DCF2  0012               	return	
  3898  00DCF4                     l236:
  3899                           
  3900                           ;standbyMode.c: 305: else {
  3901                           ;standbyMode.c: 306: if (logNumber == 1){
  3902  00DCF4  0450               	decf	viewLogs@logNumber,w,c
  3903  00DCF6  A4D8               	btfss	status,2,c
  3904  00DCF8  D053               	goto	l239
  3905                           
  3906                           ;standbyMode.c: 307: logView = 1;
  3907  00DCFA  0E00               	movlw	0
  3908  00DCFC  6E4F               	movwf	viewLogs@logView+1,c
  3909  00DCFE  0E01               	movlw	1
  3910  00DD00  6E4E               	movwf	viewLogs@logView,c
  3911                           
  3912                           ;standbyMode.c: 309: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3913  00DD02  0E01               	movlw	1
  3914  00DD04  EC2B  F069         	call	_lcdInst
  3915  00DD08  0EC3               	movlw	195
  3916  00DD0A  6E48               	movwf	??_viewLogs& (0+255),c
  3917  00DD0C  0ECD               	movlw	205
  3918  00DD0E                     u7097:
  3919  00DD0E  2EE8               	decfsz	wreg,f,c
  3920  00DD10  D7FE               	bra	u7097
  3921  00DD12  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3922  00DD14  D7FC               	bra	u7097
  3923  00DD16  F000               	nop	
  3924                           
  3925                           ;standbyMode.c: 310: printf("1 previous log");
  3926  00DD18  0EAA               	movlw	low STR_3
  3927  00DD1A  6E0D               	movwf	printf@f,c
  3928  00DD1C  0EFE               	movlw	high STR_3
  3929  00DD1E  6E0E               	movwf	printf@f+1,c
  3930  00DD20  ECAF  F06F         	call	_printf	;wreg free
  3931                           
  3932                           ;standbyMode.c: 311: lcdInst(0xC0);;
  3933  00DD24  0EC0               	movlw	192
  3934  00DD26  EC2B  F069         	call	_lcdInst
  3935                           
  3936                           ;standbyMode.c: 312: printf("available.");
  3937  00DD2A  0E88               	movlw	low STR_2
  3938  00DD2C  6E0D               	movwf	printf@f,c
  3939  00DD2E  0EFF               	movlw	high STR_2
  3940  00DD30  6E0E               	movwf	printf@f+1,c
  3941  00DD32  ECAF  F06F         	call	_printf	;wreg free
  3942                           
  3943                           ;standbyMode.c: 313: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3944  00DD36  0E66               	movlw	102
  3945  00DD38  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3946  00DD3A  0E76               	movlw	118
  3947  00DD3C  6E48               	movwf	??_viewLogs& (0+255),c
  3948  00DD3E  0EC1               	movlw	193
  3949  00DD40                     u7107:
  3950  00DD40  2EE8               	decfsz	wreg,f,c
  3951  00DD42  D7FE               	bra	u7107
  3952  00DD44  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3953  00DD46  D7FC               	bra	u7107
  3954  00DD48  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3955  00DD4A  D7FA               	bra	u7107
  3956  00DD4C  F000               	nop	
  3957                           
  3958                           ;standbyMode.c: 315: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3959  00DD4E  0E01               	movlw	1
  3960  00DD50  EC2B  F069         	call	_lcdInst
  3961  00DD54  0EC3               	movlw	195
  3962  00DD56  6E48               	movwf	??_viewLogs& (0+255),c
  3963  00DD58  0ECD               	movlw	205
  3964  00DD5A                     u7117:
  3965  00DD5A  2EE8               	decfsz	wreg,f,c
  3966  00DD5C  D7FE               	bra	u7117
  3967  00DD5E  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3968  00DD60  D7FC               	bra	u7117
  3969  00DD62  F000               	nop	
  3970                           
  3971                           ;standbyMode.c: 316: printf("Press any key to");
  3972  00DD64  0ECB               	movlw	low STR_5
  3973  00DD66  6E0D               	movwf	printf@f,c
  3974  00DD68  0EFD               	movlw	high STR_5
  3975  00DD6A  6E0E               	movwf	printf@f+1,c
  3976  00DD6C  ECAF  F06F         	call	_printf	;wreg free
  3977                           
  3978                           ;standbyMode.c: 317: lcdInst(0xC0);;
  3979  00DD70  0EC0               	movlw	192
  3980  00DD72  EC2B  F069         	call	_lcdInst
  3981                           
  3982                           ;standbyMode.c: 318: printf("move forward.");
  3983  00DD76  0E20               	movlw	low STR_6
  3984  00DD78  6E0D               	movwf	printf@f,c
  3985  00DD7A  0EFF               	movlw	high STR_6
  3986  00DD7C  6E0E               	movwf	printf@f+1,c
  3987  00DD7E  ECAF  F06F         	call	_printf	;wreg free
  3988                           
  3989                           ;standbyMode.c: 319: _delay((unsigned long)((500)*(40000000/4000.0)));
  3990  00DD82  0E1A               	movlw	26
  3991  00DD84  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  3992  00DD86  0E5E               	movlw	94
  3993  00DD88  6E48               	movwf	??_viewLogs& (0+255),c
  3994  00DD8A  0E6E               	movlw	110
  3995  00DD8C                     u7127:
  3996  00DD8C  2EE8               	decfsz	wreg,f,c
  3997  00DD8E  D7FE               	bra	u7127
  3998  00DD90  2E48               	decfsz	??_viewLogs& (0+255),f,c
  3999  00DD92  D7FC               	bra	u7127
  4000  00DD94  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4001  00DD96  D7FA               	bra	u7127
  4002  00DD98  D000               	nop2	
  4003  00DD9A                     
  4004                           ;standbyMode.c: 322: continue;
  4005  00DD9A  B281               	btfsc	3969,1,c	;volatile
  4006  00DD9C  D0D1               	goto	u4950
  4007  00DD9E  D7FD               	goto	l241
  4008  00DDA0                     l239:
  4009                           
  4010                           ;standbyMode.c: 325: else {
  4011                           ;standbyMode.c: 326: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4012  00DDA0  0E01               	movlw	1
  4013  00DDA2  EC2B  F069         	call	_lcdInst
  4014  00DDA6  0EC3               	movlw	195
  4015  00DDA8  6E48               	movwf	??_viewLogs& (0+255),c
  4016  00DDAA  0ECD               	movlw	205
  4017  00DDAC                     u7137:
  4018  00DDAC  2EE8               	decfsz	wreg,f,c
  4019  00DDAE  D7FE               	bra	u7137
  4020  00DDB0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4021  00DDB2  D7FC               	bra	u7137
  4022  00DDB4  F000               	nop	
  4023                           
  4024                           ;standbyMode.c: 327: printf("%i previous logs", logNumber);
  4025  00DDB6  0EDC               	movlw	low STR_7
  4026  00DDB8  6E0D               	movwf	printf@f,c
  4027  00DDBA  0EFD               	movlw	high STR_7
  4028  00DDBC  6E0E               	movwf	printf@f+1,c
  4029  00DDBE  C050  F00F         	movff	viewLogs@logNumber,?_printf+2
  4030  00DDC2  6A10               	clrf	?_printf+3,c
  4031  00DDC4  ECAF  F06F         	call	_printf	;wreg free
  4032                           
  4033                           ;standbyMode.c: 328: lcdInst(0xC0);;
  4034  00DDC8  0EC0               	movlw	192
  4035  00DDCA  EC2B  F069         	call	_lcdInst
  4036                           
  4037                           ;standbyMode.c: 329: printf("available.");
  4038  00DDCE  0E88               	movlw	low STR_2
  4039  00DDD0  6E0D               	movwf	printf@f,c
  4040  00DDD2  0EFF               	movlw	high STR_2
  4041  00DDD4  6E0E               	movwf	printf@f+1,c
  4042  00DDD6  ECAF  F06F         	call	_printf	;wreg free
  4043                           
  4044                           ;standbyMode.c: 330: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4045  00DDDA  0E66               	movlw	102
  4046  00DDDC  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4047  00DDDE  0E76               	movlw	118
  4048  00DDE0  6E48               	movwf	??_viewLogs& (0+255),c
  4049  00DDE2  0EC1               	movlw	193
  4050  00DDE4                     u7147:
  4051  00DDE4  2EE8               	decfsz	wreg,f,c
  4052  00DDE6  D7FE               	bra	u7147
  4053  00DDE8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4054  00DDEA  D7FC               	bra	u7147
  4055  00DDEC  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4056  00DDEE  D7FA               	bra	u7147
  4057  00DDF0  F000               	nop	
  4058                           
  4059                           ;standbyMode.c: 331: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4060  00DDF2  0E01               	movlw	1
  4061  00DDF4  EC2B  F069         	call	_lcdInst
  4062  00DDF8  0EC3               	movlw	195
  4063  00DDFA  6E48               	movwf	??_viewLogs& (0+255),c
  4064  00DDFC  0ECD               	movlw	205
  4065  00DDFE                     u7157:
  4066  00DDFE  2EE8               	decfsz	wreg,f,c
  4067  00DE00  D7FE               	bra	u7157
  4068  00DE02  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4069  00DE04  D7FC               	bra	u7157
  4070  00DE06  F000               	nop	
  4071                           
  4072                           ;standbyMode.c: 332: printf("Please input log");
  4073  00DE08  0EA9               	movlw	low STR_9
  4074  00DE0A  6E0D               	movwf	printf@f,c
  4075  00DE0C  0EFD               	movlw	high STR_9
  4076  00DE0E  6E0E               	movwf	printf@f+1,c
  4077  00DE10  ECAF  F06F         	call	_printf	;wreg free
  4078                           
  4079                           ;standbyMode.c: 333: lcdInst(0xC0);;
  4080  00DE14  0EC0               	movlw	192
  4081  00DE16  EC2B  F069         	call	_lcdInst
  4082                           
  4083                           ;standbyMode.c: 334: printf("number: ");
  4084  00DE1A  0EC8               	movlw	low STR_10
  4085  00DE1C  6E0D               	movwf	printf@f,c
  4086  00DE1E  0EFF               	movlw	high STR_10
  4087  00DE20  6E0E               	movwf	printf@f+1,c
  4088  00DE22  ECAF  F06F         	call	_printf	;wreg free
  4089  00DE26                     
  4090                           ;standbyMode.c: 337: while(PORTBbits.RB1 == 0){ continue; }
  4091  00DE26  A281               	btfss	3969,1,c	;volatile
  4092  00DE28  D7FE               	goto	l244
  4093                           
  4094                           ;standbyMode.c: 338: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  4095  00DE2A  3881               	swapf	3969,w,c	;volatile
  4096  00DE2C  0B0F               	andlw	15
  4097  00DE2E  0B0F               	andlw	15
  4098  00DE30  6E51               	movwf	viewLogs@keypress2,c
  4099  00DE32  B281               	btfsc	3969,1,c	;volatile
  4100  00DE34  D7FE               	goto	l249
  4101                           
  4102                           ;standbyMode.c: 341: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  4103  00DE36  5051               	movf	viewLogs@keypress2,w,c
  4104  00DE38  B4D8               	btfsc	status,2,c
  4105  00DE3A  D00B               	goto	u4920
  4106  00DE3C  0451               	decf	viewLogs@keypress2,w,c
  4107  00DE3E  B4D8               	btfsc	status,2,c
  4108  00DE40  D008               	goto	u4920
  4109  00DE42  0E02               	movlw	2
  4110  00DE44  1851               	xorwf	viewLogs@keypress2,w,c
  4111  00DE46  B4D8               	btfsc	status,2,c
  4112  00DE48  D004               	goto	u4920
  4113  00DE4A  0E04               	movlw	4
  4114  00DE4C  1851               	xorwf	viewLogs@keypress2,w,c
  4115  00DE4E  A4D8               	btfss	status,2,c
  4116  00DE50  D7EA               	goto	l244
  4117  00DE52                     u4920:
  4118                           
  4119                           ;standbyMode.c: 342: checkLog = verifyKeypress(logNumber, keypress2);
  4120  00DE52  C051  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  4121  00DE56  6A02               	clrf	verifyKeypress@keypress+1,c
  4122  00DE58  5050               	movf	viewLogs@logNumber,w,c
  4123  00DE5A  EC42  F06A         	call	_verifyKeypress
  4124  00DE5E  C001  F04A         	movff	?_verifyKeypress,viewLogs@checkLog
  4125  00DE62  C002  F04B         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  4126                           
  4127                           ;standbyMode.c: 343: if (checkLog == 1){
  4128  00DE66  044A               	decf	viewLogs@checkLog,w,c
  4129  00DE68  104B               	iorwf	viewLogs@checkLog+1,w,c
  4130  00DE6A  A4D8               	btfss	status,2,c
  4131  00DE6C  D7DC               	goto	l244
  4132                           
  4133                           ;standbyMode.c: 344: putch(keys[keypress2]);
  4134  00DE6E  5051               	movf	viewLogs@keypress2,w,c
  4135  00DE70  0D01               	mullw	1
  4136  00DE72  0E23               	movlw	low _keys
  4137  00DE74  24F3               	addwf	prodl,w,c
  4138  00DE76  6EF6               	movwf	tblptrl,c
  4139  00DE78  0EFD               	movlw	high _keys
  4140  00DE7A  20F4               	addwfc	prodh,w,c
  4141  00DE7C  6EF7               	movwf	tblptrh,c
  4142  00DE7E                     	if	0	;There are less than 3 active tblptr bytes
  4143  00DE7E                     	endif
  4144  00DE7E  0008               	tblrd		*
  4145  00DE80  50F5               	movf	tablat,w,c
  4146  00DE82  EC35  F069         	call	_putch
  4147                           
  4148                           ;standbyMode.c: 345: if (keypress2 == 4){
  4149  00DE86  0E04               	movlw	4
  4150  00DE88  1851               	xorwf	viewLogs@keypress2,w,c
  4151  00DE8A  A4D8               	btfss	status,2,c
  4152  00DE8C  D004               	goto	l255
  4153                           
  4154                           ;standbyMode.c: 346: logView = keypress2;
  4155  00DE8E  C051  F04E         	movff	viewLogs@keypress2,viewLogs@logView
  4156  00DE92  6A4F               	clrf	viewLogs@logView+1,c
  4157                           
  4158                           ;standbyMode.c: 347: }
  4159  00DE94  D006               	goto	l256
  4160  00DE96                     l255:
  4161                           
  4162                           ;standbyMode.c: 348: else{
  4163                           ;standbyMode.c: 349: logView = keypress2 + 1;
  4164  00DE96  0E01               	movlw	1
  4165  00DE98  2451               	addwf	viewLogs@keypress2,w,c
  4166  00DE9A  6E4E               	movwf	viewLogs@logView,c
  4167  00DE9C  6A4F               	clrf	viewLogs@logView+1,c
  4168  00DE9E  0E00               	movlw	0
  4169  00DEA0  224F               	addwfc	viewLogs@logView+1,f,c
  4170  00DEA2                     l256:
  4171                           
  4172                           ;standbyMode.c: 350: }
  4173                           ;standbyMode.c: 351: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4174  00DEA2  0E33               	movlw	51
  4175  00DEA4  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4176  00DEA6  0EBB               	movlw	187
  4177  00DEA8  6E48               	movwf	??_viewLogs& (0+255),c
  4178  00DEAA  0EE0               	movlw	224
  4179  00DEAC                     u7167:
  4180  00DEAC  2EE8               	decfsz	wreg,f,c
  4181  00DEAE  D7FE               	bra	u7167
  4182  00DEB0  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4183  00DEB2  D7FC               	bra	u7167
  4184  00DEB4  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4185  00DEB6  D7FA               	bra	u7167
  4186                           
  4187                           ;standbyMode.c: 353: }
  4188                           ;standbyMode.c: 354: }
  4189                           ;standbyMode.c: 355: }
  4190                           ;standbyMode.c: 357: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4191                           
  4192                           ;standbyMode.c: 352: break;
  4193  00DEB8  0E01               	movlw	1
  4194  00DEBA  EC2B  F069         	call	_lcdInst
  4195  00DEBE  0EC3               	movlw	195
  4196  00DEC0  6E48               	movwf	??_viewLogs& (0+255),c
  4197  00DEC2  0ECD               	movlw	205
  4198  00DEC4                     u7177:
  4199  00DEC4  2EE8               	decfsz	wreg,f,c
  4200  00DEC6  D7FE               	bra	u7177
  4201  00DEC8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4202  00DECA  D7FC               	bra	u7177
  4203  00DECC  F000               	nop	
  4204                           
  4205                           ;standbyMode.c: 358: printf("Great!");
  4206  00DECE  0EF1               	movlw	low STR_11
  4207  00DED0  6E0D               	movwf	printf@f,c
  4208  00DED2  0EFF               	movlw	high STR_11
  4209  00DED4  6E0E               	movwf	printf@f+1,c
  4210  00DED6  ECAF  F06F         	call	_printf	;wreg free
  4211                           
  4212                           ;standbyMode.c: 359: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4213  00DEDA  0E33               	movlw	51
  4214  00DEDC  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4215  00DEDE  0EBB               	movlw	187
  4216  00DEE0  6E48               	movwf	??_viewLogs& (0+255),c
  4217  00DEE2  0EE0               	movlw	224
  4218  00DEE4                     u7187:
  4219  00DEE4  2EE8               	decfsz	wreg,f,c
  4220  00DEE6  D7FE               	bra	u7187
  4221  00DEE8  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4222  00DEEA  D7FC               	bra	u7187
  4223  00DEEC  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4224  00DEEE  D7FA               	bra	u7187
  4225                           
  4226                           ;standbyMode.c: 360: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4227  00DEF0  0E01               	movlw	1
  4228  00DEF2  EC2B  F069         	call	_lcdInst
  4229  00DEF6  0EC3               	movlw	195
  4230  00DEF8  6E48               	movwf	??_viewLogs& (0+255),c
  4231  00DEFA  0ECD               	movlw	205
  4232  00DEFC                     u7197:
  4233  00DEFC  2EE8               	decfsz	wreg,f,c
  4234  00DEFE  D7FE               	bra	u7197
  4235  00DF00  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4236  00DF02  D7FC               	bra	u7197
  4237  00DF04  F000               	nop	
  4238                           
  4239                           ;standbyMode.c: 361: printf("Press any key to");
  4240  00DF06  0ECB               	movlw	low STR_5
  4241  00DF08  6E0D               	movwf	printf@f,c
  4242  00DF0A  0EFD               	movlw	high STR_5
  4243  00DF0C  6E0E               	movwf	printf@f+1,c
  4244  00DF0E  ECAF  F06F         	call	_printf	;wreg free
  4245                           
  4246                           ;standbyMode.c: 362: lcdInst(0xC0);;
  4247  00DF12  0EC0               	movlw	192
  4248  00DF14  EC2B  F069         	call	_lcdInst
  4249                           
  4250                           ;standbyMode.c: 363: printf("move forward.");
  4251  00DF18  0E20               	movlw	low STR_6
  4252  00DF1A  6E0D               	movwf	printf@f,c
  4253  00DF1C  0EFF               	movlw	high STR_6
  4254  00DF1E  6E0E               	movwf	printf@f+1,c
  4255  00DF20  ECAF  F06F         	call	_printf	;wreg free
  4256                           
  4257                           ;standbyMode.c: 364: _delay((unsigned long)((500)*(40000000/4000.0)));
  4258  00DF24  0E1A               	movlw	26
  4259  00DF26  6E49               	movwf	(??_viewLogs+1)& (0+255),c
  4260  00DF28  0E5E               	movlw	94
  4261  00DF2A  6E48               	movwf	??_viewLogs& (0+255),c
  4262  00DF2C  0E6E               	movlw	110
  4263  00DF2E                     u7207:
  4264  00DF2E  2EE8               	decfsz	wreg,f,c
  4265  00DF30  D7FE               	bra	u7207
  4266  00DF32  2E48               	decfsz	??_viewLogs& (0+255),f,c
  4267  00DF34  D7FC               	bra	u7207
  4268  00DF36  2E49               	decfsz	(??_viewLogs+1)& (0+255),f,c
  4269  00DF38  D7FA               	bra	u7207
  4270  00DF3A  D000               	nop2	
  4271  00DF3C                     
  4272                           ;standbyMode.c: 367: continue;
  4273  00DF3C  A281               	btfss	3969,1,c	;volatile
  4274  00DF3E  D7FE               	goto	l260
  4275  00DF40                     u4950:
  4276                           
  4277                           ;standbyMode.c: 368: }
  4278                           ;standbyMode.c: 369: }
  4279                           ;standbyMode.c: 370: returnVal = displayLogs(logView);
  4280  00DF40  C04E  F025         	movff	viewLogs@logView,displayLogs@logNumber
  4281  00DF44  C04F  F026         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  4282  00DF48  EC35  F071         	call	_displayLogs	;wreg free
  4283  00DF4C  C025  F04C         	movff	?_displayLogs,viewLogs@returnVal
  4284  00DF50  C026  F04D         	movff	?_displayLogs+1,viewLogs@returnVal+1
  4285                           
  4286                           ;standbyMode.c: 371: return returnVal;
  4287  00DF54  C04C  F046         	movff	viewLogs@returnVal,?_viewLogs
  4288  00DF58  C04D  F047         	movff	viewLogs@returnVal+1,?_viewLogs+1
  4289  00DF5C  0012               	return	
  4290  00DF5E                     __end_of_viewLogs:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           indf2	equ	0xFDF
  4301                           postinc2	equ	0xFDE
  4302                           postdec2	equ	0xFDD
  4303                           fsr2h	equ	0xFDA
  4304                           fsr2l	equ	0xFD9
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _verifyKeypress *****************
  4308 ;; Defined at:
  4309 ;;		line 276 in file "standbyMode.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  logNumber       1    wreg     unsigned char 
  4312 ;;  keypress        2    0[COMRAM] unsigned int 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  logNumber       1    4[COMRAM] unsigned char 
  4315 ;;  i               2    7[COMRAM] unsigned int 
  4316 ;;  returnVal       2    5[COMRAM] unsigned int 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[COMRAM] unsigned int 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;Total ram usage:        9 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_viewLogs
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text5
  4340  00D484                     __ptext5:
  4341                           	opt stack 0
  4342  00D484                     _verifyKeypress:
  4343                           	opt stack 28
  4344                           
  4345                           ;incstack = 0
  4346                           ;verifyKeypress@logNumber stored from wreg
  4347  00D484  6E05               	movwf	verifyKeypress@logNumber,c
  4348                           
  4349                           ;standbyMode.c: 277: unsigned int i = 0;
  4350  00D486  0E00               	movlw	0
  4351  00D488  6E09               	movwf	verifyKeypress@i+1,c
  4352  00D48A  0E00               	movlw	0
  4353  00D48C  6E08               	movwf	verifyKeypress@i,c
  4354                           
  4355                           ;standbyMode.c: 278: unsigned int returnVal = 0;
  4356  00D48E  0E00               	movlw	0
  4357  00D490  6E07               	movwf	verifyKeypress@returnVal+1,c
  4358  00D492  0E00               	movlw	0
  4359  00D494  6E06               	movwf	verifyKeypress@returnVal,c
  4360                           
  4361                           ;standbyMode.c: 280: for (i=0; i<logNumber; i++){
  4362  00D496  0E00               	movlw	0
  4363  00D498  6E09               	movwf	verifyKeypress@i+1,c
  4364  00D49A  0E00               	movlw	0
  4365  00D49C  6E08               	movwf	verifyKeypress@i,c
  4366  00D49E  D00D               	goto	l229
  4367  00D4A0                     
  4368                           ;standbyMode.c: 281: if (keypress == i){
  4369  00D4A0  5008               	movf	verifyKeypress@i,w,c
  4370  00D4A2  1801               	xorwf	verifyKeypress@keypress,w,c
  4371  00D4A4  E108               	bnz	l3812
  4372  00D4A6  5009               	movf	verifyKeypress@i+1,w,c
  4373  00D4A8  1802               	xorwf	verifyKeypress@keypress+1,w,c
  4374  00D4AA  A4D8               	btfss	status,2,c
  4375  00D4AC  D004               	goto	l231
  4376                           
  4377                           ;standbyMode.c: 282: returnVal = 1;
  4378  00D4AE  0E00               	movlw	0
  4379  00D4B0  6E07               	movwf	verifyKeypress@returnVal+1,c
  4380  00D4B2  0E01               	movlw	1
  4381  00D4B4  6E06               	movwf	verifyKeypress@returnVal,c
  4382  00D4B6                     l231:
  4383  00D4B6                     l3812:
  4384  00D4B6  4A08               	infsnz	verifyKeypress@i,f,c
  4385  00D4B8  2A09               	incf	verifyKeypress@i+1,f,c
  4386  00D4BA                     l229:
  4387  00D4BA  5005               	movf	verifyKeypress@logNumber,w,c
  4388  00D4BC  6E03               	movwf	??_verifyKeypress& (0+255),c
  4389  00D4BE  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  4390  00D4C0  5003               	movf	??_verifyKeypress,w,c
  4391  00D4C2  5C08               	subwf	verifyKeypress@i,w,c
  4392  00D4C4  5004               	movf	??_verifyKeypress+1,w,c
  4393  00D4C6  5809               	subwfb	verifyKeypress@i+1,w,c
  4394  00D4C8  A0D8               	btfss	status,0,c
  4395  00D4CA  D7EA               	goto	l230
  4396                           
  4397                           ;standbyMode.c: 283: }
  4398                           ;standbyMode.c: 284: }
  4399                           ;standbyMode.c: 285: return returnVal;
  4400  00D4CC  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  4401  00D4D0  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  4402  00D4D4  0012               	return		;funcret
  4403  00D4D6                     __end_of_verifyKeypress:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           postinc0	equ	0xFEE
  4412                           wreg	equ	0xFE8
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           fsr2h	equ	0xFDA
  4417                           fsr2l	equ	0xFD9
  4418                           status	equ	0xFD8
  4419                           
  4420 ;; *************** function _displayLogs *****************
  4421 ;; Defined at:
  4422 ;;		line 377 in file "standbyMode.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  logNumber       2   36[COMRAM] unsigned int 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  n               2   67[COMRAM] unsigned int 
  4427 ;;  markedDrawer    2   65[COMRAM] unsigned int 
  4428 ;;  markedDrawer    2   63[COMRAM] unsigned int 
  4429 ;;  markedDrawer    2   61[COMRAM] unsigned int 
  4430 ;;  markedDrawer    2   59[COMRAM] unsigned int 
  4431 ;;  operationTim    2   57[COMRAM] unsigned int 
  4432 ;;  seconds         2   54[COMRAM] unsigned int 
  4433 ;;  minutes         2   52[COMRAM] unsigned int 
  4434 ;;  longPieces      2   50[COMRAM] unsigned int 
  4435 ;;  flatPieces      2   48[COMRAM] unsigned int 
  4436 ;;  roundPieces     2   46[COMRAM] unsigned int 
  4437 ;;  day             2   44[COMRAM] unsigned int 
  4438 ;;  month           2   42[COMRAM] unsigned int 
  4439 ;;  year            2   40[COMRAM] unsigned int 
  4440 ;;  keypress3       1   56[COMRAM] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  2   36[COMRAM] unsigned int 
  4443 ;; Registers used:
  4444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;Total ram usage:       33 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		___lwdiv
  4459 ;;		___lwmod
  4460 ;;		___wmul
  4461 ;;		_lcdInst
  4462 ;;		_printf
  4463 ;;		_readEEPROM
  4464 ;; This function is called by:
  4465 ;;		_viewLogs
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text6
  4470  00E26A                     __ptext6:
  4471                           	opt stack 0
  4472  00E26A                     _displayLogs:
  4473                           	opt stack 25
  4474                           
  4475                           ;standbyMode.c: 378: unsigned int n = (logNumber-1)*51;
  4476                           
  4477                           ;incstack = 0
  4478  00E26A  0EFF               	movlw	255
  4479  00E26C  2425               	addwf	displayLogs@logNumber,w,c
  4480  00E26E  6E01               	movwf	___wmul@multiplier,c
  4481  00E270  0EFF               	movlw	255
  4482  00E272  2026               	addwfc	displayLogs@logNumber+1,w,c
  4483  00E274  6E02               	movwf	___wmul@multiplier+1,c
  4484  00E276  0E00               	movlw	0
  4485  00E278  6E04               	movwf	___wmul@multiplicand+1,c
  4486  00E27A  0E33               	movlw	51
  4487  00E27C  6E03               	movwf	___wmul@multiplicand,c
  4488  00E27E  EC7B  F069         	call	___wmul	;wreg free
  4489  00E282  C001  F044         	movff	?___wmul,displayLogs@n
  4490  00E286  C002  F045         	movff	?___wmul+1,displayLogs@n+1
  4491                           
  4492                           ;standbyMode.c: 379: unsigned int year = readEEPROM(n);
  4493  00E28A  5044               	movf	displayLogs@n,w,c
  4494  00E28C  EC3F  F069         	call	_readEEPROM
  4495  00E290  6E27               	movwf	??_displayLogs& (0+255),c
  4496  00E292  5027               	movf	??_displayLogs,w,c
  4497  00E294  6E29               	movwf	displayLogs@year,c
  4498  00E296  6A2A               	clrf	displayLogs@year+1,c
  4499                           
  4500                           ;standbyMode.c: 380: unsigned int month = readEEPROM(1+n);
  4501  00E298  2844               	incf	displayLogs@n,w,c
  4502  00E29A  EC3F  F069         	call	_readEEPROM
  4503  00E29E  6E27               	movwf	??_displayLogs& (0+255),c
  4504  00E2A0  5027               	movf	??_displayLogs,w,c
  4505  00E2A2  6E2B               	movwf	displayLogs@month,c
  4506  00E2A4  6A2C               	clrf	displayLogs@month+1,c
  4507                           
  4508                           ;standbyMode.c: 381: unsigned int day = readEEPROM(2+n);
  4509  00E2A6  5044               	movf	displayLogs@n,w,c
  4510  00E2A8  0F02               	addlw	2
  4511  00E2AA  EC3F  F069         	call	_readEEPROM
  4512  00E2AE  6E27               	movwf	??_displayLogs& (0+255),c
  4513  00E2B0  5027               	movf	??_displayLogs,w,c
  4514  00E2B2  6E2D               	movwf	displayLogs@day,c
  4515  00E2B4  6A2E               	clrf	displayLogs@day+1,c
  4516                           
  4517                           ;standbyMode.c: 382: unsigned int operationTime = readEEPROM(3+n);
  4518  00E2B6  5044               	movf	displayLogs@n,w,c
  4519  00E2B8  0F03               	addlw	3
  4520  00E2BA  EC3F  F069         	call	_readEEPROM
  4521  00E2BE  6E27               	movwf	??_displayLogs& (0+255),c
  4522  00E2C0  5027               	movf	??_displayLogs,w,c
  4523  00E2C2  6E3A               	movwf	displayLogs@operationTime,c
  4524  00E2C4  6A3B               	clrf	displayLogs@operationTime+1,c
  4525                           
  4526                           ;standbyMode.c: 383: unsigned int roundPieces = readEEPROM(4+n);
  4527  00E2C6  5044               	movf	displayLogs@n,w,c
  4528  00E2C8  0F04               	addlw	4
  4529  00E2CA  EC3F  F069         	call	_readEEPROM
  4530  00E2CE  6E27               	movwf	??_displayLogs& (0+255),c
  4531  00E2D0  5027               	movf	??_displayLogs,w,c
  4532  00E2D2  6E2F               	movwf	displayLogs@roundPieces,c
  4533  00E2D4  6A30               	clrf	displayLogs@roundPieces+1,c
  4534                           
  4535                           ;standbyMode.c: 384: unsigned int flatPieces = readEEPROM(5+n);
  4536  00E2D6  5044               	movf	displayLogs@n,w,c
  4537  00E2D8  0F05               	addlw	5
  4538  00E2DA  EC3F  F069         	call	_readEEPROM
  4539  00E2DE  6E27               	movwf	??_displayLogs& (0+255),c
  4540  00E2E0  5027               	movf	??_displayLogs,w,c
  4541  00E2E2  6E31               	movwf	displayLogs@flatPieces,c
  4542  00E2E4  6A32               	clrf	displayLogs@flatPieces+1,c
  4543                           
  4544                           ;standbyMode.c: 385: unsigned int longPieces = readEEPROM(6+n);
  4545  00E2E6  5044               	movf	displayLogs@n,w,c
  4546  00E2E8  0F06               	addlw	6
  4547  00E2EA  EC3F  F069         	call	_readEEPROM
  4548  00E2EE  6E27               	movwf	??_displayLogs& (0+255),c
  4549  00E2F0  5027               	movf	??_displayLogs,w,c
  4550  00E2F2  6E33               	movwf	displayLogs@longPieces,c
  4551  00E2F4  6A34               	clrf	displayLogs@longPieces+1,c
  4552                           
  4553                           ;standbyMode.c: 386: unsigned int markedDrawer1 = readEEPROM(7+n);
  4554  00E2F6  5044               	movf	displayLogs@n,w,c
  4555  00E2F8  0F07               	addlw	7
  4556  00E2FA  EC3F  F069         	call	_readEEPROM
  4557  00E2FE  6E27               	movwf	??_displayLogs& (0+255),c
  4558  00E300  5027               	movf	??_displayLogs,w,c
  4559  00E302  6E3C               	movwf	displayLogs@markedDrawer1,c
  4560  00E304  6A3D               	clrf	displayLogs@markedDrawer1+1,c
  4561                           
  4562                           ;standbyMode.c: 387: unsigned int markedDrawer2 = readEEPROM(8+n);
  4563  00E306  5044               	movf	displayLogs@n,w,c
  4564  00E308  0F08               	addlw	8
  4565  00E30A  EC3F  F069         	call	_readEEPROM
  4566  00E30E  6E27               	movwf	??_displayLogs& (0+255),c
  4567  00E310  5027               	movf	??_displayLogs,w,c
  4568  00E312  6E3E               	movwf	displayLogs@markedDrawer2,c
  4569  00E314  6A3F               	clrf	displayLogs@markedDrawer2+1,c
  4570                           
  4571                           ;standbyMode.c: 388: unsigned int markedDrawer3 = readEEPROM(9+n);
  4572  00E316  5044               	movf	displayLogs@n,w,c
  4573  00E318  0F09               	addlw	9
  4574  00E31A  EC3F  F069         	call	_readEEPROM
  4575  00E31E  6E27               	movwf	??_displayLogs& (0+255),c
  4576  00E320  5027               	movf	??_displayLogs,w,c
  4577  00E322  6E40               	movwf	displayLogs@markedDrawer3,c
  4578  00E324  6A41               	clrf	displayLogs@markedDrawer3+1,c
  4579                           
  4580                           ;standbyMode.c: 389: unsigned int markedDrawer4 = readEEPROM(10+n);
  4581  00E326  5044               	movf	displayLogs@n,w,c
  4582  00E328  0F0A               	addlw	10
  4583  00E32A  EC3F  F069         	call	_readEEPROM
  4584  00E32E  6E27               	movwf	??_displayLogs& (0+255),c
  4585  00E330  5027               	movf	??_displayLogs,w,c
  4586  00E332  6E42               	movwf	displayLogs@markedDrawer4,c
  4587  00E334  6A43               	clrf	displayLogs@markedDrawer4+1,c
  4588                           
  4589                           ;standbyMode.c: 391: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4590  00E336  0E01               	movlw	1
  4591  00E338  EC2B  F069         	call	_lcdInst
  4592  00E33C  0EC3               	movlw	195
  4593  00E33E  6E27               	movwf	??_displayLogs& (0+255),c
  4594  00E340  0ECD               	movlw	205
  4595  00E342                     u7217:
  4596  00E342  2EE8               	decfsz	wreg,f,c
  4597  00E344  D7FE               	bra	u7217
  4598  00E346  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4599  00E348  D7FC               	bra	u7217
  4600  00E34A  F000               	nop	
  4601                           
  4602                           ;standbyMode.c: 392: printf("Date:");
  4603  00E34C  0EF8               	movlw	low STR_14
  4604  00E34E  6E0D               	movwf	printf@f,c
  4605  00E350  0EFF               	movlw	high STR_14
  4606  00E352  6E0E               	movwf	printf@f+1,c
  4607  00E354  ECAF  F06F         	call	_printf	;wreg free
  4608                           
  4609                           ;standbyMode.c: 393: lcdInst(0xC0);;
  4610  00E358  0EC0               	movlw	192
  4611  00E35A  EC2B  F069         	call	_lcdInst
  4612                           
  4613                           ;standbyMode.c: 394: printf("%02i/%02i/%02i", year, month, day);
  4614  00E35E  0EC8               	movlw	low STR_15
  4615  00E360  6E0D               	movwf	printf@f,c
  4616  00E362  0EFE               	movlw	high STR_15
  4617  00E364  6E0E               	movwf	printf@f+1,c
  4618  00E366  C029  F00F         	movff	displayLogs@year,?_printf+2
  4619  00E36A  C02A  F010         	movff	displayLogs@year+1,?_printf+3
  4620  00E36E  C02B  F011         	movff	displayLogs@month,?_printf+4
  4621  00E372  C02C  F012         	movff	displayLogs@month+1,?_printf+5
  4622  00E376  C02D  F013         	movff	displayLogs@day,?_printf+6
  4623  00E37A  C02E  F014         	movff	displayLogs@day+1,?_printf+7
  4624  00E37E  ECAF  F06F         	call	_printf	;wreg free
  4625                           
  4626                           ;standbyMode.c: 395: _delay((unsigned long)((500)*(40000000/4000.0)));
  4627  00E382  0E1A               	movlw	26
  4628  00E384  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4629  00E386  0E5E               	movlw	94
  4630  00E388  6E27               	movwf	??_displayLogs& (0+255),c
  4631  00E38A  0E6E               	movlw	110
  4632  00E38C                     u7227:
  4633  00E38C  2EE8               	decfsz	wreg,f,c
  4634  00E38E  D7FE               	bra	u7227
  4635  00E390  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4636  00E392  D7FC               	bra	u7227
  4637  00E394  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4638  00E396  D7FA               	bra	u7227
  4639  00E398  D000               	nop2	
  4640  00E39A                     
  4641                           ;standbyMode.c: 397: continue;
  4642  00E39A  A281               	btfss	3969,1,c	;volatile
  4643  00E39C  D7FE               	goto	l265
  4644                           
  4645                           ;standbyMode.c: 398: }
  4646                           ;standbyMode.c: 400: unsigned int minutes = operationTime/60;
  4647  00E39E  C03A  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  4648  00E3A2  C03B  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  4649  00E3A6  0E00               	movlw	0
  4650  00E3A8  6E04               	movwf	___lwdiv@divisor+1,c
  4651  00E3AA  0E3C               	movlw	60
  4652  00E3AC  6E03               	movwf	___lwdiv@divisor,c
  4653  00E3AE  EC19  F06A         	call	___lwdiv	;wreg free
  4654  00E3B2  C001  F035         	movff	?___lwdiv,displayLogs@minutes
  4655  00E3B6  C002  F036         	movff	?___lwdiv+1,displayLogs@minutes+1
  4656                           
  4657                           ;standbyMode.c: 401: unsigned int seconds = operationTime%60;
  4658  00E3BA  C03A  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  4659  00E3BE  C03B  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  4660  00E3C2  0E00               	movlw	0
  4661  00E3C4  6E0B               	movwf	___lwmod@divisor+1,c
  4662  00E3C6  0E3C               	movlw	60
  4663  00E3C8  6E0A               	movwf	___lwmod@divisor,c
  4664  00E3CA  ECD2  F069         	call	___lwmod	;wreg free
  4665  00E3CE  C008  F037         	movff	?___lwmod,displayLogs@seconds
  4666  00E3D2  C009  F038         	movff	?___lwmod+1,displayLogs@seconds+1
  4667                           
  4668                           ;standbyMode.c: 402: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4669  00E3D6  0E01               	movlw	1
  4670  00E3D8  EC2B  F069         	call	_lcdInst
  4671  00E3DC  0EC3               	movlw	195
  4672  00E3DE  6E27               	movwf	??_displayLogs& (0+255),c
  4673  00E3E0  0ECD               	movlw	205
  4674  00E3E2                     u7237:
  4675  00E3E2  2EE8               	decfsz	wreg,f,c
  4676  00E3E4  D7FE               	bra	u7237
  4677  00E3E6  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4678  00E3E8  D7FC               	bra	u7237
  4679  00E3EA  F000               	nop	
  4680                           
  4681                           ;standbyMode.c: 403: printf("Operation time:");
  4682  00E3EC  0E1D               	movlw	low STR_16
  4683  00E3EE  6E0D               	movwf	printf@f,c
  4684  00E3F0  0EFE               	movlw	high STR_16
  4685  00E3F2  6E0E               	movwf	printf@f+1,c
  4686  00E3F4  ECAF  F06F         	call	_printf	;wreg free
  4687                           
  4688                           ;standbyMode.c: 404: lcdInst(0xC0);;
  4689  00E3F8  0EC0               	movlw	192
  4690  00E3FA  EC2B  F069         	call	_lcdInst
  4691                           
  4692                           ;standbyMode.c: 405: printf("%i:%02i", minutes, seconds);
  4693  00E3FE  0ED9               	movlw	low STR_17
  4694  00E400  6E0D               	movwf	printf@f,c
  4695  00E402  0EFF               	movlw	high STR_17
  4696  00E404  6E0E               	movwf	printf@f+1,c
  4697  00E406  C035  F00F         	movff	displayLogs@minutes,?_printf+2
  4698  00E40A  C036  F010         	movff	displayLogs@minutes+1,?_printf+3
  4699  00E40E  C037  F011         	movff	displayLogs@seconds,?_printf+4
  4700  00E412  C038  F012         	movff	displayLogs@seconds+1,?_printf+5
  4701  00E416  ECAF  F06F         	call	_printf	;wreg free
  4702                           
  4703                           ;standbyMode.c: 406: _delay((unsigned long)((500)*(40000000/4000.0)));
  4704  00E41A  0E1A               	movlw	26
  4705  00E41C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4706  00E41E  0E5E               	movlw	94
  4707  00E420  6E27               	movwf	??_displayLogs& (0+255),c
  4708  00E422  0E6E               	movlw	110
  4709  00E424                     u7247:
  4710  00E424  2EE8               	decfsz	wreg,f,c
  4711  00E426  D7FE               	bra	u7247
  4712  00E428  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4713  00E42A  D7FC               	bra	u7247
  4714  00E42C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4715  00E42E  D7FA               	bra	u7247
  4716  00E430  D000               	nop2	
  4717  00E432                     
  4718                           ;standbyMode.c: 409: continue;
  4719  00E432  A281               	btfss	3969,1,c	;volatile
  4720  00E434  D7FE               	goto	l268
  4721                           
  4722                           ;standbyMode.c: 410: }
  4723                           ;standbyMode.c: 412: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4724  00E436  0E01               	movlw	1
  4725  00E438  EC2B  F069         	call	_lcdInst
  4726  00E43C  0EC3               	movlw	195
  4727  00E43E  6E27               	movwf	??_displayLogs& (0+255),c
  4728  00E440  0ECD               	movlw	205
  4729  00E442                     u7257:
  4730  00E442  2EE8               	decfsz	wreg,f,c
  4731  00E444  D7FE               	bra	u7257
  4732  00E446  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4733  00E448  D7FC               	bra	u7257
  4734  00E44A  F000               	nop	
  4735                           
  4736                           ;standbyMode.c: 413: printf("Marked drawers:");
  4737  00E44C  0E2D               	movlw	low STR_18
  4738  00E44E  6E0D               	movwf	printf@f,c
  4739  00E450  0EFE               	movlw	high STR_18
  4740  00E452  6E0E               	movwf	printf@f+1,c
  4741  00E454  ECAF  F06F         	call	_printf	;wreg free
  4742                           
  4743                           ;standbyMode.c: 414: lcdInst(0xC0);;
  4744  00E458  0EC0               	movlw	192
  4745  00E45A  EC2B  F069         	call	_lcdInst
  4746                           
  4747                           ;standbyMode.c: 416: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  4748  00E45E  5042               	movf	displayLogs@markedDrawer4,w,c
  4749  00E460  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4750  00E462  A4D8               	btfss	status,2,c
  4751  00E464  D01E               	goto	l270
  4752  00E466  5040               	movf	displayLogs@markedDrawer3,w,c
  4753  00E468  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  4754  00E46A  A4D8               	btfss	status,2,c
  4755  00E46C  D01A               	goto	l270
  4756  00E46E  503E               	movf	displayLogs@markedDrawer2,w,c
  4757  00E470  103F               	iorwf	displayLogs@markedDrawer2+1,w,c
  4758  00E472  A4D8               	btfss	status,2,c
  4759  00E474  D016               	goto	l270
  4760                           
  4761                           ;standbyMode.c: 417: printf("%i", markedDrawer1);
  4762  00E476  0EC5               	movlw	low (STR_22+12)
  4763  00E478  6E0D               	movwf	printf@f,c
  4764  00E47A  0EFE               	movlw	high (STR_22+12)
  4765  00E47C  6E0E               	movwf	printf@f+1,c
  4766  00E47E  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4767  00E482  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4768  00E486  ECAF  F06F         	call	_printf	;wreg free
  4769                           
  4770                           ;standbyMode.c: 418: _delay((unsigned long)((500)*(40000000/4000.0)));
  4771  00E48A  0E1A               	movlw	26
  4772  00E48C  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4773  00E48E  0E5E               	movlw	94
  4774  00E490  6E27               	movwf	??_displayLogs& (0+255),c
  4775  00E492  0E6E               	movlw	110
  4776  00E494                     u7267:
  4777  00E494  2EE8               	decfsz	wreg,f,c
  4778  00E496  D7FE               	bra	u7267
  4779  00E498  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4780  00E49A  D7FC               	bra	u7267
  4781  00E49C  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4782  00E49E  D7FA               	bra	u7267
  4783  00E4A0  D065               	goto	L17
  4784  00E4A2                     l270:
  4785                           
  4786                           ;standbyMode.c: 421: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  4787  00E4A2  5042               	movf	displayLogs@markedDrawer4,w,c
  4788  00E4A4  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4789  00E4A6  A4D8               	btfss	status,2,c
  4790  00E4A8  D01E               	goto	l272
  4791  00E4AA  5040               	movf	displayLogs@markedDrawer3,w,c
  4792  00E4AC  1041               	iorwf	displayLogs@markedDrawer3+1,w,c
  4793  00E4AE  A4D8               	btfss	status,2,c
  4794  00E4B0  D01A               	goto	l272
  4795                           
  4796                           ;standbyMode.c: 422: printf("%i, %i", markedDrawer1, markedDrawer2);
  4797  00E4B2  0EC1               	movlw	low (STR_22+8)
  4798  00E4B4  6E0D               	movwf	printf@f,c
  4799  00E4B6  0EFE               	movlw	high (STR_22+8)
  4800  00E4B8  6E0E               	movwf	printf@f+1,c
  4801  00E4BA  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4802  00E4BE  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4803  00E4C2  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4804  00E4C6  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4805  00E4CA  ECAF  F06F         	call	_printf	;wreg free
  4806                           
  4807                           ;standbyMode.c: 423: _delay((unsigned long)((500)*(40000000/4000.0)));
  4808  00E4CE  0E1A               	movlw	26
  4809  00E4D0  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4810  00E4D2  0E5E               	movlw	94
  4811  00E4D4  6E27               	movwf	??_displayLogs& (0+255),c
  4812  00E4D6  0E6E               	movlw	110
  4813  00E4D8                     u7277:
  4814  00E4D8  2EE8               	decfsz	wreg,f,c
  4815  00E4DA  D7FE               	bra	u7277
  4816  00E4DC  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4817  00E4DE  D7FC               	bra	u7277
  4818  00E4E0  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4819  00E4E2  D7FA               	bra	u7277
  4820  00E4E4  D043               	goto	L17
  4821  00E4E6                     l272:
  4822                           
  4823                           ;standbyMode.c: 426: else if (markedDrawer4 == 0){
  4824  00E4E6  5042               	movf	displayLogs@markedDrawer4,w,c
  4825  00E4E8  1043               	iorwf	displayLogs@markedDrawer4+1,w,c
  4826  00E4EA  A4D8               	btfss	status,2,c
  4827  00E4EC  D01E               	goto	l274
  4828                           
  4829                           ;standbyMode.c: 427: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  4830  00E4EE  0EBD               	movlw	low (STR_22+4)
  4831  00E4F0  6E0D               	movwf	printf@f,c
  4832  00E4F2  0EFE               	movlw	high (STR_22+4)
  4833  00E4F4  6E0E               	movwf	printf@f+1,c
  4834  00E4F6  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4835  00E4FA  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4836  00E4FE  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4837  00E502  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4838  00E506  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4839  00E50A  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4840  00E50E  ECAF  F06F         	call	_printf	;wreg free
  4841                           
  4842                           ;standbyMode.c: 428: _delay((unsigned long)((500)*(40000000/4000.0)));
  4843  00E512  0E1A               	movlw	26
  4844  00E514  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4845  00E516  0E5E               	movlw	94
  4846  00E518  6E27               	movwf	??_displayLogs& (0+255),c
  4847  00E51A  0E6E               	movlw	110
  4848  00E51C                     u7287:
  4849  00E51C  2EE8               	decfsz	wreg,f,c
  4850  00E51E  D7FE               	bra	u7287
  4851  00E520  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4852  00E522  D7FC               	bra	u7287
  4853  00E524  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4854  00E526  D7FA               	bra	u7287
  4855  00E528  D021               	goto	L17
  4856  00E52A                     l274:
  4857                           
  4858                           ;standbyMode.c: 431: else {
  4859                           ;standbyMode.c: 432: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  4860  00E52A  0EB9               	movlw	low STR_22
  4861  00E52C  6E0D               	movwf	printf@f,c
  4862  00E52E  0EFE               	movlw	high STR_22
  4863  00E530  6E0E               	movwf	printf@f+1,c
  4864  00E532  C03C  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  4865  00E536  C03D  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  4866  00E53A  C03E  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  4867  00E53E  C03F  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  4868  00E542  C040  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  4869  00E546  C041  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  4870  00E54A  C042  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  4871  00E54E  C043  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  4872  00E552  ECAF  F06F         	call	_printf	;wreg free
  4873                           
  4874                           ;standbyMode.c: 433: _delay((unsigned long)((500)*(40000000/4000.0)));
  4875  00E556  0E1A               	movlw	26
  4876  00E558  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4877  00E55A  0E5E               	movlw	94
  4878  00E55C  6E27               	movwf	??_displayLogs& (0+255),c
  4879  00E55E  0E6E               	movlw	110
  4880  00E560                     u7297:
  4881  00E560  2EE8               	decfsz	wreg,f,c
  4882  00E562  D7FE               	bra	u7297
  4883  00E564  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4884  00E566  D7FC               	bra	u7297
  4885  00E568  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4886  00E56A  D7FA               	bra	u7297
  4887  00E56C                     L17:
  4888  00E56C  D000               	nop2	
  4889  00E56E                     
  4890                           ;standbyMode.c: 437: continue;
  4891                           
  4892                           ;standbyMode.c: 434: }
  4893                           ;standbyMode.c: 436: while(PORTBbits.RB1 == 0){
  4894  00E56E  A281               	btfss	3969,1,c	;volatile
  4895  00E570  D7FE               	goto	l275
  4896                           
  4897                           ;standbyMode.c: 438: }
  4898                           ;standbyMode.c: 440: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4899  00E572  0E01               	movlw	1
  4900  00E574  EC2B  F069         	call	_lcdInst
  4901  00E578  0EC3               	movlw	195
  4902  00E57A  6E27               	movwf	??_displayLogs& (0+255),c
  4903  00E57C  0ECD               	movlw	205
  4904  00E57E                     u7307:
  4905  00E57E  2EE8               	decfsz	wreg,f,c
  4906  00E580  D7FE               	bra	u7307
  4907  00E582  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4908  00E584  D7FC               	bra	u7307
  4909  00E586  F000               	nop	
  4910                           
  4911                           ;standbyMode.c: 441: printf("Remaining pieces:");
  4912  00E588  0E64               	movlw	low STR_23
  4913  00E58A  6E0D               	movwf	printf@f,c
  4914  00E58C  0EFD               	movlw	high STR_23
  4915  00E58E  6E0E               	movwf	printf@f+1,c
  4916  00E590  ECAF  F06F         	call	_printf	;wreg free
  4917                           
  4918                           ;standbyMode.c: 442: lcdInst(0xC0);;
  4919  00E594  0EC0               	movlw	192
  4920  00E596  EC2B  F069         	call	_lcdInst
  4921                           
  4922                           ;standbyMode.c: 443: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  4923  00E59A  0EBA               	movlw	low STR_24
  4924  00E59C  6E0D               	movwf	printf@f,c
  4925  00E59E  0EFD               	movlw	high STR_24
  4926  00E5A0  6E0E               	movwf	printf@f+1,c
  4927  00E5A2  C02F  F00F         	movff	displayLogs@roundPieces,?_printf+2
  4928  00E5A6  C030  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  4929  00E5AA  C031  F011         	movff	displayLogs@flatPieces,?_printf+4
  4930  00E5AE  C032  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  4931  00E5B2  C033  F013         	movff	displayLogs@longPieces,?_printf+6
  4932  00E5B6  C034  F014         	movff	displayLogs@longPieces+1,?_printf+7
  4933  00E5BA  ECAF  F06F         	call	_printf	;wreg free
  4934                           
  4935                           ;standbyMode.c: 444: _delay((unsigned long)((500)*(40000000/4000.0)));
  4936  00E5BE  0E1A               	movlw	26
  4937  00E5C0  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4938  00E5C2  0E5E               	movlw	94
  4939  00E5C4  6E27               	movwf	??_displayLogs& (0+255),c
  4940  00E5C6  0E6E               	movlw	110
  4941  00E5C8                     u7317:
  4942  00E5C8  2EE8               	decfsz	wreg,f,c
  4943  00E5CA  D7FE               	bra	u7317
  4944  00E5CC  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4945  00E5CE  D7FC               	bra	u7317
  4946  00E5D0  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4947  00E5D2  D7FA               	bra	u7317
  4948  00E5D4  D000               	nop2	
  4949  00E5D6                     
  4950                           ;standbyMode.c: 447: continue;
  4951  00E5D6  A281               	btfss	3969,1,c	;volatile
  4952  00E5D8  D7FE               	goto	l280
  4953                           
  4954                           ;standbyMode.c: 448: }
  4955                           ;standbyMode.c: 450: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4956  00E5DA  0E01               	movlw	1
  4957  00E5DC  EC2B  F069         	call	_lcdInst
  4958  00E5E0  0EC3               	movlw	195
  4959  00E5E2  6E27               	movwf	??_displayLogs& (0+255),c
  4960  00E5E4  0ECD               	movlw	205
  4961  00E5E6                     u7327:
  4962  00E5E6  2EE8               	decfsz	wreg,f,c
  4963  00E5E8  D7FE               	bra	u7327
  4964  00E5EA  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4965  00E5EC  D7FC               	bra	u7327
  4966  00E5EE  F000               	nop	
  4967                           
  4968                           ;standbyMode.c: 451: printf("Input Summary:");
  4969  00E5F0  0E9B               	movlw	low STR_25
  4970  00E5F2  6E0D               	movwf	printf@f,c
  4971  00E5F4  0EFE               	movlw	high STR_25
  4972  00E5F6  6E0E               	movwf	printf@f+1,c
  4973  00E5F8  ECAF  F06F         	call	_printf	;wreg free
  4974                           
  4975                           ;standbyMode.c: 452: _delay((unsigned long)((500)*(40000000/4000.0)));
  4976  00E5FC  0E1A               	movlw	26
  4977  00E5FE  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  4978  00E600  0E5E               	movlw	94
  4979  00E602  6E27               	movwf	??_displayLogs& (0+255),c
  4980  00E604  0E6E               	movlw	110
  4981  00E606                     u7337:
  4982  00E606  2EE8               	decfsz	wreg,f,c
  4983  00E608  D7FE               	bra	u7337
  4984  00E60A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  4985  00E60C  D7FC               	bra	u7337
  4986  00E60E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  4987  00E610  D7FA               	bra	u7337
  4988  00E612  D000               	nop2	
  4989  00E614                     
  4990                           ;standbyMode.c: 455: continue;
  4991  00E614  A281               	btfss	3969,1,c	;volatile
  4992  00E616  D7FE               	goto	l283
  4993                           
  4994                           ;standbyMode.c: 456: }
  4995                           ;standbyMode.c: 458: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4996  00E618  0E01               	movlw	1
  4997  00E61A  EC2B  F069         	call	_lcdInst
  4998  00E61E  0EC3               	movlw	195
  4999  00E620  6E27               	movwf	??_displayLogs& (0+255),c
  5000  00E622  0ECD               	movlw	205
  5001  00E624                     u7347:
  5002  00E624  2EE8               	decfsz	wreg,f,c
  5003  00E626  D7FE               	bra	u7347
  5004  00E628  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5005  00E62A  D7FC               	bra	u7347
  5006  00E62C  F000               	nop	
  5007                           
  5008                           ;standbyMode.c: 459: printf("Drawer 1: RF12");
  5009  00E62E  0E7D               	movlw	low STR_26
  5010  00E630  6E0D               	movwf	printf@f,c
  5011  00E632  0EFE               	movlw	high STR_26
  5012  00E634  6E0E               	movwf	printf@f+1,c
  5013  00E636  ECAF  F06F         	call	_printf	;wreg free
  5014                           
  5015                           ;standbyMode.c: 460: lcdInst(0xC0);;
  5016  00E63A  0EC0               	movlw	192
  5017  00E63C  EC2B  F069         	call	_lcdInst
  5018                           
  5019                           ;standbyMode.c: 461: printf("Drawer 2: L1");
  5020  00E640  0E49               	movlw	low STR_27
  5021  00E642  6E0D               	movwf	printf@f,c
  5022  00E644  0EFF               	movlw	high STR_27
  5023  00E646  6E0E               	movwf	printf@f+1,c
  5024  00E648  ECAF  F06F         	call	_printf	;wreg free
  5025                           
  5026                           ;standbyMode.c: 462: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5027  00E64C  0E66               	movlw	102
  5028  00E64E  6E28               	movwf	(??_displayLogs+1)& (0+255),c
  5029  00E650  0E76               	movlw	118
  5030  00E652  6E27               	movwf	??_displayLogs& (0+255),c
  5031  00E654  0EC1               	movlw	193
  5032  00E656                     u7357:
  5033  00E656  2EE8               	decfsz	wreg,f,c
  5034  00E658  D7FE               	bra	u7357
  5035  00E65A  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5036  00E65C  D7FC               	bra	u7357
  5037  00E65E  2E28               	decfsz	(??_displayLogs+1)& (0+255),f,c
  5038  00E660  D7FA               	bra	u7357
  5039  00E662  F000               	nop	
  5040                           
  5041                           ;standbyMode.c: 464: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5042  00E664  0E01               	movlw	1
  5043  00E666  EC2B  F069         	call	_lcdInst
  5044  00E66A  0EC3               	movlw	195
  5045  00E66C  6E27               	movwf	??_displayLogs& (0+255),c
  5046  00E66E  0ECD               	movlw	205
  5047  00E670                     u7367:
  5048  00E670  2EE8               	decfsz	wreg,f,c
  5049  00E672  D7FE               	bra	u7367
  5050  00E674  2E27               	decfsz	??_displayLogs& (0+255),f,c
  5051  00E676  D7FC               	bra	u7367
  5052  00E678  F000               	nop	
  5053                           
  5054                           ;standbyMode.c: 465: printf("Another log?");
  5055  00E67A  0E63               	movlw	low STR_28
  5056  00E67C  6E0D               	movwf	printf@f,c
  5057  00E67E  0EFF               	movlw	high STR_28
  5058  00E680  6E0E               	movwf	printf@f+1,c
  5059  00E682  ECAF  F06F         	call	_printf	;wreg free
  5060                           
  5061                           ;standbyMode.c: 466: lcdInst(0xC0);;
  5062  00E686  0EC0               	movlw	192
  5063  00E688  EC2B  F069         	call	_lcdInst
  5064                           
  5065                           ;standbyMode.c: 467: printf("# = No, D = Yes");
  5066  00E68C  0E6D               	movlw	low STR_29
  5067  00E68E  6E0D               	movwf	printf@f,c
  5068  00E690  0EFE               	movlw	high STR_29
  5069  00E692  6E0E               	movwf	printf@f+1,c
  5070  00E694  ECAF  F06F         	call	_printf	;wreg free
  5071  00E698  A281               	btfss	3969,1,c	;volatile
  5072  00E69A  D7FE               	goto	l286
  5073                           
  5074                           ;standbyMode.c: 470: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  5075  00E69C  3881               	swapf	3969,w,c	;volatile
  5076  00E69E  0B0F               	andlw	15
  5077  00E6A0  0B0F               	andlw	15
  5078  00E6A2  6E39               	movwf	displayLogs@keypress3,c
  5079  00E6A4  B281               	btfsc	3969,1,c	;volatile
  5080  00E6A6  D7FE               	goto	l289
  5081                           
  5082                           ;standbyMode.c: 472: return keypress3;
  5083  00E6A8  C039  F025         	movff	displayLogs@keypress3,?_displayLogs
  5084  00E6AC  6A26               	clrf	?_displayLogs+1,c
  5085  00E6AE  0012               	return		;funcret
  5086  00E6B0                     __end_of_displayLogs:
  5087                           	opt stack 0
  5088                           tblptru	equ	0xFF8
  5089                           tblptrh	equ	0xFF7
  5090                           tblptrl	equ	0xFF6
  5091                           tablat	equ	0xFF5
  5092                           prodh	equ	0xFF4
  5093                           prodl	equ	0xFF3
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function _shiftEEPROM *****************
  5104 ;; Defined at:
  5105 ;;		line 48 in file "EEPROMstorage.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  i               2    5[COMRAM] unsigned int 
  5110 ;;  temp            2    3[COMRAM] unsigned int 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;Total ram usage:        5 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    1
  5127 ;; This function calls:
  5128 ;;		_readEEPROM
  5129 ;;		_writeEEPROM
  5130 ;; This function is called by:
  5131 ;;		_standbyMode
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text7
  5136  00D632                     __ptext7:
  5137                           	opt stack 0
  5138  00D632                     _shiftEEPROM:
  5139                           	opt stack 28
  5140                           
  5141                           ;EEPROMstorage.c: 49: unsigned int i = 0;
  5142                           
  5143                           ;incstack = 0
  5144  00D632  0E00               	movlw	0
  5145  00D634  6E07               	movwf	shiftEEPROM@i+1,c
  5146  00D636  0E00               	movlw	0
  5147  00D638  6E06               	movwf	shiftEEPROM@i,c
  5148                           
  5149                           ;EEPROMstorage.c: 50: unsigned int temp = 0;
  5150  00D63A  0E00               	movlw	0
  5151  00D63C  6E05               	movwf	shiftEEPROM@temp+1,c
  5152  00D63E  0E00               	movlw	0
  5153  00D640  6E04               	movwf	shiftEEPROM@temp,c
  5154                           
  5155                           ;EEPROMstorage.c: 51: for (i=102; i<153; i++){
  5156  00D642  0E00               	movlw	0
  5157  00D644  6E07               	movwf	shiftEEPROM@i+1,c
  5158  00D646  0E66               	movlw	102
  5159  00D648  6E06               	movwf	shiftEEPROM@i,c
  5160  00D64A                     l4686:
  5161  00D64A  5007               	movf	shiftEEPROM@i+1,w,c
  5162  00D64C  E114               	bnz	l4696
  5163  00D64E  0E99               	movlw	153
  5164  00D650  5C06               	subwf	shiftEEPROM@i,w,c
  5165  00D652  B0D8               	btfsc	status,0,c
  5166  00D654  D010               	goto	u6240
  5167                           
  5168                           ;EEPROMstorage.c: 52: temp = readEEPROM(i);
  5169  00D656  5006               	movf	shiftEEPROM@i,w,c
  5170  00D658  EC3F  F069         	call	_readEEPROM
  5171  00D65C  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5172  00D65E  5003               	movf	??_shiftEEPROM,w,c
  5173  00D660  6E04               	movwf	shiftEEPROM@temp,c
  5174  00D662  6A05               	clrf	shiftEEPROM@temp+1,c
  5175                           
  5176                           ;EEPROMstorage.c: 53: writeEEPROM(i+51, temp);
  5177  00D664  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5178  00D668  5006               	movf	shiftEEPROM@i,w,c
  5179  00D66A  0F33               	addlw	51
  5180  00D66C  ECA1  F069         	call	_writeEEPROM
  5181  00D670  4A06               	infsnz	shiftEEPROM@i,f,c
  5182  00D672  2A07               	incf	shiftEEPROM@i+1,f,c
  5183  00D674  D7EA               	goto	l4686
  5184  00D676                     u6240:
  5185  00D676                     l4696:
  5186                           
  5187                           ;EEPROMstorage.c: 54: }
  5188                           ;EEPROMstorage.c: 56: for (i=51; i<102; i++){
  5189  00D676  0E00               	movlw	0
  5190  00D678  6E07               	movwf	shiftEEPROM@i+1,c
  5191  00D67A  0E33               	movlw	51
  5192  00D67C  6E06               	movwf	shiftEEPROM@i,c
  5193  00D67E                     l4698:
  5194  00D67E  5007               	movf	shiftEEPROM@i+1,w,c
  5195  00D680  E114               	bnz	l4708
  5196  00D682  0E66               	movlw	102
  5197  00D684  5C06               	subwf	shiftEEPROM@i,w,c
  5198  00D686  B0D8               	btfsc	status,0,c
  5199  00D688  D010               	goto	u6260
  5200                           
  5201                           ;EEPROMstorage.c: 57: temp = readEEPROM(i);
  5202  00D68A  5006               	movf	shiftEEPROM@i,w,c
  5203  00D68C  EC3F  F069         	call	_readEEPROM
  5204  00D690  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5205  00D692  5003               	movf	??_shiftEEPROM,w,c
  5206  00D694  6E04               	movwf	shiftEEPROM@temp,c
  5207  00D696  6A05               	clrf	shiftEEPROM@temp+1,c
  5208                           
  5209                           ;EEPROMstorage.c: 58: writeEEPROM(i+51, temp);
  5210  00D698  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5211  00D69C  5006               	movf	shiftEEPROM@i,w,c
  5212  00D69E  0F33               	addlw	51
  5213  00D6A0  ECA1  F069         	call	_writeEEPROM
  5214  00D6A4  4A06               	infsnz	shiftEEPROM@i,f,c
  5215  00D6A6  2A07               	incf	shiftEEPROM@i+1,f,c
  5216  00D6A8  D7EA               	goto	l4698
  5217  00D6AA                     u6260:
  5218  00D6AA                     l4708:
  5219                           
  5220                           ;EEPROMstorage.c: 59: }
  5221                           ;EEPROMstorage.c: 61: for (i=0; i<51; i++){
  5222  00D6AA  0E00               	movlw	0
  5223  00D6AC  6E07               	movwf	shiftEEPROM@i+1,c
  5224  00D6AE  0E00               	movlw	0
  5225  00D6B0  6E06               	movwf	shiftEEPROM@i,c
  5226  00D6B2                     l4710:
  5227  00D6B2  5007               	movf	shiftEEPROM@i+1,w,c
  5228  00D6B4  E114               	bnz	l573
  5229  00D6B6  0E33               	movlw	51
  5230  00D6B8  5C06               	subwf	shiftEEPROM@i,w,c
  5231  00D6BA  B0D8               	btfsc	status,0,c
  5232  00D6BC  0012               	return	
  5233                           
  5234                           ;EEPROMstorage.c: 62: temp = readEEPROM(i);
  5235  00D6BE  5006               	movf	shiftEEPROM@i,w,c
  5236  00D6C0  EC3F  F069         	call	_readEEPROM
  5237  00D6C4  6E03               	movwf	??_shiftEEPROM& (0+255),c
  5238  00D6C6  5003               	movf	??_shiftEEPROM,w,c
  5239  00D6C8  6E04               	movwf	shiftEEPROM@temp,c
  5240  00D6CA  6A05               	clrf	shiftEEPROM@temp+1,c
  5241                           
  5242                           ;EEPROMstorage.c: 63: writeEEPROM(i+51, temp);
  5243  00D6CC  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  5244  00D6D0  5006               	movf	shiftEEPROM@i,w,c
  5245  00D6D2  0F33               	addlw	51
  5246  00D6D4  ECA1  F069         	call	_writeEEPROM
  5247  00D6D8  4A06               	infsnz	shiftEEPROM@i,f,c
  5248  00D6DA  2A07               	incf	shiftEEPROM@i+1,f,c
  5249  00D6DC  D7EA               	goto	l4710
  5250  00D6DE                     l573:
  5251  00D6DE  0012               	return		;funcret
  5252  00D6E0                     __end_of_shiftEEPROM:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           postinc0	equ	0xFEE
  5261                           wreg	equ	0xFE8
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _readEEPROM *****************
  5270 ;; Defined at:
  5271 ;;		line 29 in file "EEPROMstorage.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  address         1    wreg     unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  address         1    0[COMRAM] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  1    wreg      unsigned char 
  5278 ;; Registers used:
  5279 ;;		wreg, status,2
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;Total ram usage:        1 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_viewLogs
  5295 ;;		_displayLogs
  5296 ;;		_shiftEEPROM
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text8
  5301  00D27E                     __ptext8:
  5302                           	opt stack 0
  5303  00D27E                     _readEEPROM:
  5304                           	opt stack 28
  5305                           
  5306                           ;incstack = 0
  5307                           ;readEEPROM@address stored from wreg
  5308  00D27E  6E01               	movwf	readEEPROM@address,c
  5309  00D280                     
  5310                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  5311  00D280  B2A6               	btfsc	4006,1,c	;volsfr
  5312  00D282  D7FE               	goto	l3412
  5313                           
  5314                           ;EEPROMstorage.c: 32: EEADR = address;
  5315  00D284  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  5316                           
  5317                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  5318  00D288  9EA6               	bcf	4006,7,c	;volsfr
  5319                           
  5320                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  5321  00D28A  9CA6               	bcf	4006,6,c	;volsfr
  5322                           
  5323                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  5324  00D28C  80A6               	bsf	4006,0,c	;volsfr
  5325                           
  5326                           ;EEPROMstorage.c: 36: return( EEDATA );
  5327  00D28E  50A8               	movf	4008,w,c	;volatile
  5328  00D290  0012               	return	
  5329  00D292                     __end_of_readEEPROM:
  5330                           	opt stack 0
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           postdec2	equ	0xFDD
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _initEEPROM *****************
  5347 ;; Defined at:
  5348 ;;		line 40 in file "EEPROMstorage.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  i               2    2[COMRAM] unsigned int 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:        2 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    1
  5369 ;; This function calls:
  5370 ;;		_writeEEPROM
  5371 ;; This function is called by:
  5372 ;;		_standbyMode
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text9
  5377  00D31C                     __ptext9:
  5378                           	opt stack 0
  5379  00D31C                     _initEEPROM:
  5380                           	opt stack 28
  5381                           
  5382                           ;EEPROMstorage.c: 41: unsigned int i = 0;
  5383                           
  5384                           ;incstack = 0
  5385  00D31C  0E00               	movlw	0
  5386  00D31E  6E04               	movwf	initEEPROM@i+1,c
  5387  00D320  0E00               	movlw	0
  5388  00D322  6E03               	movwf	initEEPROM@i,c
  5389                           
  5390                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
  5391  00D324  0E00               	movlw	0
  5392  00D326  6E04               	movwf	initEEPROM@i+1,c
  5393  00D328  0E00               	movlw	0
  5394  00D32A  6E03               	movwf	initEEPROM@i,c
  5395  00D32C                     l4674:
  5396  00D32C  0404               	decf	initEEPROM@i+1,w,c
  5397  00D32E  B0D8               	btfsc	status,0,c
  5398  00D330  0012               	return	
  5399                           
  5400                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
  5401  00D332  0E00               	movlw	0
  5402  00D334  6E01               	movwf	writeEEPROM@data,c
  5403  00D336  5003               	movf	initEEPROM@i,w,c
  5404  00D338  ECA1  F069         	call	_writeEEPROM
  5405  00D33C  4A03               	infsnz	initEEPROM@i,f,c
  5406  00D33E  2A04               	incf	initEEPROM@i+1,f,c
  5407  00D340  D7F5               	goto	l4674
  5408  00D342                     __end_of_initEEPROM:
  5409                           	opt stack 0
  5410                           tblptru	equ	0xFF8
  5411                           tblptrh	equ	0xFF7
  5412                           tblptrl	equ	0xFF6
  5413                           tablat	equ	0xFF5
  5414                           prodh	equ	0xFF4
  5415                           prodl	equ	0xFF3
  5416                           postinc0	equ	0xFEE
  5417                           wreg	equ	0xFE8
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           postdec2	equ	0xFDD
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function _writeEEPROM *****************
  5426 ;; Defined at:
  5427 ;;		line 10 in file "EEPROMstorage.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  address         1    wreg     unsigned char 
  5430 ;;  data            1    0[COMRAM] unsigned char 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  address         1    1[COMRAM] unsigned char 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg, status,2
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5442 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5446 ;;Total ram usage:        2 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_standbyMode
  5452 ;;		_initEEPROM
  5453 ;;		_shiftEEPROM
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           	psect	text10
  5458  00D342                     __ptext10:
  5459                           	opt stack 0
  5460  00D342                     _writeEEPROM:
  5461                           	opt stack 29
  5462                           
  5463                           ;incstack = 0
  5464                           ;writeEEPROM@address stored from wreg
  5465  00D342  6E02               	movwf	writeEEPROM@address,c
  5466  00D344                     
  5467                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
  5468  00D344  B2A6               	btfsc	4006,1,c	;volsfr
  5469  00D346  D7FE               	goto	l4020
  5470                           
  5471                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
  5472  00D348  84A6               	bsf	4006,2,c	;volsfr
  5473                           
  5474                           ;EEPROMstorage.c: 14: EEADR=address;
  5475  00D34A  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
  5476                           
  5477                           ;EEPROMstorage.c: 15: EEDATA=data;
  5478  00D34E  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
  5479                           
  5480                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
  5481  00D352  9EA6               	bcf	4006,7,c	;volsfr
  5482                           
  5483                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
  5484  00D354  9CA6               	bcf	4006,6,c	;volsfr
  5485                           
  5486                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
  5487  00D356  9EF2               	bcf	intcon,7,c	;volatile
  5488                           
  5489                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
  5490  00D358  0E55               	movlw	85
  5491  00D35A  6EA7               	movwf	4007,c	;volsfr
  5492                           
  5493                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
  5494  00D35C  0EAA               	movlw	170
  5495  00D35E  6EA7               	movwf	4007,c	;volsfr
  5496                           
  5497                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
  5498  00D360  82A6               	bsf	4006,1,c	;volsfr
  5499                           
  5500                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
  5501  00D362  8EF2               	bsf	intcon,7,c	;volatile
  5502  00D364  B2A6               	btfsc	4006,1,c	;volsfr
  5503  00D366  D7FE               	goto	l551
  5504                           
  5505                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
  5506  00D368  94A6               	bcf	4006,2,c	;volsfr
  5507  00D36A  0012               	return		;funcret
  5508  00D36C                     __end_of_writeEEPROM:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           postinc0	equ	0xFEE
  5518                           wreg	equ	0xFE8
  5519                           indf2	equ	0xFDF
  5520                           postinc2	equ	0xFDE
  5521                           postdec2	equ	0xFDD
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _food_press *****************
  5527 ;; Defined at:
  5528 ;;		line 582 in file "standbyMode.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  dietSum         2   36[COMRAM] unsigned int 
  5531 ;;  drawer          2   38[COMRAM] unsigned int 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  keypress        1   58[COMRAM] unsigned char 
  5534 ;;  foodTable       8   50[COMRAM] unsigned int [4]
  5535 ;;  count           2   48[COMRAM] unsigned int 
  5536 ;;  isValid         2   46[COMRAM] unsigned int 
  5537 ;;  backCheck       2   44[COMRAM] unsigned int 
  5538 ;;  tally           2   42[COMRAM] unsigned int 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  2   36[COMRAM] unsigned int 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;Total ram usage:       23 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    3
  5555 ;; This function calls:
  5556 ;;		_check_food
  5557 ;;		_get_digits
  5558 ;;		_lcdInst
  5559 ;;		_printf
  5560 ;;		_putch
  5561 ;; This function is called by:
  5562 ;;		_standbyMode
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text11
  5567  00D880                     __ptext11:
  5568                           	opt stack 0
  5569  00D880                     _food_press:
  5570                           	opt stack 26
  5571                           
  5572                           ;incstack = 0
  5573                           ;standbyMode.c: 584: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5574  00D880  0E01               	movlw	1
  5575  00D882  EC2B  F069         	call	_lcdInst
  5576  00D886  0EC3               	movlw	195
  5577  00D888  6E29               	movwf	??_food_press& (0+255),c
  5578  00D88A  0ECD               	movlw	205
  5579  00D88C                     u7377:
  5580  00D88C  2EE8               	decfsz	wreg,f,c
  5581  00D88E  D7FE               	bra	u7377
  5582  00D890  2E29               	decfsz	??_food_press& (0+255),f,c
  5583  00D892  D7FC               	bra	u7377
  5584  00D894  F000               	nop	
  5585                           
  5586                           ;standbyMode.c: 585: printf("Drawer %i food:", drawer);
  5587  00D896  0E0D               	movlw	low STR_30
  5588  00D898  6E0D               	movwf	printf@f,c
  5589  00D89A  0EFE               	movlw	high STR_30
  5590  00D89C  6E0E               	movwf	printf@f+1,c
  5591  00D89E  C027  F00F         	movff	food_press@drawer,?_printf+2
  5592  00D8A2  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5593  00D8A6  ECAF  F06F         	call	_printf	;wreg free
  5594                           
  5595                           ;standbyMode.c: 586: lcdInst(0xC0);;
  5596  00D8AA  0EC0               	movlw	192
  5597  00D8AC  EC2B  F069         	call	_lcdInst
  5598                           
  5599                           ;standbyMode.c: 588: unsigned int tally = 0;
  5600  00D8B0  0E00               	movlw	0
  5601  00D8B2  6E2C               	movwf	food_press@tally+1,c
  5602  00D8B4  0E00               	movlw	0
  5603  00D8B6  6E2B               	movwf	food_press@tally,c
  5604                           
  5605                           ;standbyMode.c: 589: unsigned int count = 0;
  5606  00D8B8  0E00               	movlw	0
  5607  00D8BA  6E32               	movwf	food_press@count+1,c
  5608  00D8BC  0E00               	movlw	0
  5609  00D8BE  6E31               	movwf	food_press@count,c
  5610                           
  5611                           ;standbyMode.c: 590: unsigned int foodTable[4] = {0, 0, 0, 0};
  5612  00D8C0  EE20  F071         	lfsr	2,food_press@F3115
  5613  00D8C4  EE10  F033         	lfsr	1,food_press@foodTable
  5614  00D8C8  0E07               	movlw	7
  5615  00D8CA                     u4961:
  5616  00D8CA  CFDB FFE3          	movff	plusw2,plusw1
  5617  00D8CE  06E8               	decf	wreg,f,c
  5618  00D8D0  E2FC               	bc	u4961
  5619                           
  5620                           ;standbyMode.c: 591: unsigned int isValid = 0;
  5621  00D8D2  0E00               	movlw	0
  5622  00D8D4  6E30               	movwf	food_press@isValid+1,c
  5623  00D8D6  0E00               	movlw	0
  5624  00D8D8  6E2F               	movwf	food_press@isValid,c
  5625                           
  5626                           ;standbyMode.c: 592: unsigned int backCheck = 0;
  5627  00D8DA  0E00               	movlw	0
  5628  00D8DC  6E2E               	movwf	food_press@backCheck+1,c
  5629  00D8DE  0E00               	movlw	0
  5630  00D8E0  6E2D               	movwf	food_press@backCheck,c
  5631                           
  5632                           ;standbyMode.c: 593: tally = get_digits(dietSum);
  5633  00D8E2  C025  F001         	movff	food_press@dietSum,get_digits@sum
  5634  00D8E6  C026  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  5635  00D8EA  EC70  F06B         	call	_get_digits	;wreg free
  5636  00D8EE  C001  F02B         	movff	?_get_digits,food_press@tally
  5637  00D8F2  C002  F02C         	movff	?_get_digits+1,food_press@tally+1
  5638  00D8F6                     
  5639                           ;standbyMode.c: 596: while(PORTBbits.RB1 == 0){ continue; }
  5640  00D8F6  A281               	btfss	3969,1,c	;volatile
  5641  00D8F8  D7FE               	goto	l321
  5642                           
  5643                           ;standbyMode.c: 597: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5644  00D8FA  3881               	swapf	3969,w,c	;volatile
  5645  00D8FC  0B0F               	andlw	15
  5646  00D8FE  0B0F               	andlw	15
  5647  00D900  6E3B               	movwf	food_press@keypress,c
  5648  00D902  B281               	btfsc	3969,1,c	;volatile
  5649  00D904  D7FE               	goto	l326
  5650                           
  5651                           ;standbyMode.c: 600: if(keypress == 15){
  5652  00D906  0E0F               	movlw	15
  5653  00D908  183B               	xorwf	food_press@keypress,w,c
  5654  00D90A  B4D8               	btfsc	status,2,c
  5655  00D90C  D06D               	goto	l329
  5656                           
  5657                           ;standbyMode.c: 603: else if (keypress == 14){
  5658                           
  5659                           ;standbyMode.c: 602: }
  5660                           
  5661                           ;standbyMode.c: 601: break;
  5662  00D90E  0E0E               	movlw	14
  5663  00D910  183B               	xorwf	food_press@keypress,w,c
  5664  00D912  A4D8               	btfss	status,2,c
  5665  00D914  D005               	goto	l331
  5666                           
  5667                           ;standbyMode.c: 604: backCheck = 1;
  5668  00D916  0E00               	movlw	0
  5669  00D918  6E2E               	movwf	food_press@backCheck+1,c
  5670  00D91A  0E01               	movlw	1
  5671  00D91C  6E2D               	movwf	food_press@backCheck,c
  5672                           
  5673                           ;standbyMode.c: 605: break;
  5674  00D91E  D064               	goto	l329
  5675  00D920                     l331:
  5676                           
  5677                           ;standbyMode.c: 607: else if (keypress == 0 || keypress == 1 || keypress == 2){
  5678  00D920  503B               	movf	food_press@keypress,w,c
  5679  00D922  B4D8               	btfsc	status,2,c
  5680  00D924  D007               	goto	u5030
  5681  00D926  043B               	decf	food_press@keypress,w,c
  5682  00D928  B4D8               	btfsc	status,2,c
  5683  00D92A  D004               	goto	u5030
  5684  00D92C  0E02               	movlw	2
  5685  00D92E  183B               	xorwf	food_press@keypress,w,c
  5686  00D930  A4D8               	btfss	status,2,c
  5687  00D932  D029               	goto	l333
  5688  00D934                     u5030:
  5689                           
  5690                           ;standbyMode.c: 608: if (count < tally){
  5691  00D934  502B               	movf	food_press@tally,w,c
  5692  00D936  5C31               	subwf	food_press@count,w,c
  5693  00D938  502C               	movf	food_press@tally+1,w,c
  5694  00D93A  5832               	subwfb	food_press@count+1,w,c
  5695  00D93C  B0D8               	btfsc	status,0,c
  5696  00D93E  D7DB               	goto	l321
  5697                           
  5698                           ;standbyMode.c: 609: putch(input[keypress]);
  5699  00D940  503B               	movf	food_press@keypress,w,c
  5700  00D942  0D01               	mullw	1
  5701  00D944  0E34               	movlw	low _input
  5702  00D946  24F3               	addwf	prodl,w,c
  5703  00D948  6EF6               	movwf	tblptrl,c
  5704  00D94A  0EFD               	movlw	high _input
  5705  00D94C  20F4               	addwfc	prodh,w,c
  5706  00D94E  6EF7               	movwf	tblptrh,c
  5707  00D950                     	if	0	;There are less than 3 active tblptr bytes
  5708  00D950                     	endif
  5709  00D950  0008               	tblrd		*
  5710  00D952  50F5               	movf	tablat,w,c
  5711  00D954  EC35  F069         	call	_putch
  5712                           
  5713                           ;standbyMode.c: 610: foodTable[count] = keypress + 1;
  5714  00D958  503B               	movf	food_press@keypress,w,c
  5715  00D95A  6E29               	movwf	??_food_press& (0+255),c
  5716  00D95C  6A2A               	clrf	(??_food_press+1)& (0+255),c
  5717  00D95E  0E01               	movlw	1
  5718  00D960  2629               	addwf	??_food_press,f,c
  5719  00D962  0E00               	movlw	0
  5720  00D964  222A               	addwfc	??_food_press+1,f,c
  5721  00D966  90D8               	bcf	status,0,c
  5722  00D968  3431               	rlcf	food_press@count,w,c
  5723  00D96A  6ED9               	movwf	fsr2l,c
  5724  00D96C  3432               	rlcf	food_press@count+1,w,c
  5725  00D96E  6EDA               	movwf	fsr2h,c
  5726  00D970  0E33               	movlw	low food_press@foodTable
  5727  00D972  26D9               	addwf	fsr2l,f,c
  5728  00D974  0E00               	movlw	high food_press@foodTable
  5729  00D976  22DA               	addwfc	fsr2h,f,c
  5730  00D978  C029  FFDE         	movff	??_food_press,postinc2
  5731  00D97C  C02A  FFDD         	movff	??_food_press+1,postdec2
  5732                           
  5733                           ;standbyMode.c: 611: count += 1;
  5734  00D980  4A31               	infsnz	food_press@count,f,c
  5735  00D982  2A32               	incf	food_press@count+1,f,c
  5736                           
  5737                           ;standbyMode.c: 612: }
  5738                           ;standbyMode.c: 613: }
  5739  00D984  D7B8               	goto	l321
  5740  00D986                     l333:
  5741                           
  5742                           ;standbyMode.c: 614: else if (keypress == 12){
  5743  00D986  0E0C               	movlw	12
  5744  00D988  183B               	xorwf	food_press@keypress,w,c
  5745  00D98A  A4D8               	btfss	status,2,c
  5746  00D98C  D7B4               	goto	l321
  5747                           
  5748                           ;standbyMode.c: 615: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5749  00D98E  0E01               	movlw	1
  5750  00D990  EC2B  F069         	call	_lcdInst
  5751  00D994  0EC3               	movlw	195
  5752  00D996  6E29               	movwf	??_food_press& (0+255),c
  5753  00D998  0ECD               	movlw	205
  5754  00D99A                     u7387:
  5755  00D99A  2EE8               	decfsz	wreg,f,c
  5756  00D99C  D7FE               	bra	u7387
  5757  00D99E  2E29               	decfsz	??_food_press& (0+255),f,c
  5758  00D9A0  D7FC               	bra	u7387
  5759  00D9A2  F000               	nop	
  5760                           
  5761                           ;standbyMode.c: 616: printf("Drawer %i food:", drawer);
  5762  00D9A4  0E0D               	movlw	low STR_30
  5763  00D9A6  6E0D               	movwf	printf@f,c
  5764  00D9A8  0EFE               	movlw	high STR_30
  5765  00D9AA  6E0E               	movwf	printf@f+1,c
  5766  00D9AC  C027  F00F         	movff	food_press@drawer,?_printf+2
  5767  00D9B0  C028  F010         	movff	food_press@drawer+1,?_printf+3
  5768  00D9B4  ECAF  F06F         	call	_printf	;wreg free
  5769                           
  5770                           ;standbyMode.c: 617: lcdInst(0xC0);;
  5771  00D9B8  0EC0               	movlw	192
  5772  00D9BA  EC2B  F069         	call	_lcdInst
  5773                           
  5774                           ;standbyMode.c: 618: count = 0;
  5775  00D9BE  0E00               	movlw	0
  5776  00D9C0  6E32               	movwf	food_press@count+1,c
  5777  00D9C2  0E00               	movlw	0
  5778  00D9C4  6E31               	movwf	food_press@count,c
  5779                           
  5780                           ;standbyMode.c: 619: foodTable[0] = 0;
  5781  00D9C6  0E00               	movlw	0
  5782  00D9C8  6E34               	movwf	food_press@foodTable+1,c
  5783  00D9CA  0E00               	movlw	0
  5784  00D9CC  6E33               	movwf	food_press@foodTable,c
  5785                           
  5786                           ;standbyMode.c: 620: foodTable[1] = 0;
  5787  00D9CE  0E00               	movlw	0
  5788  00D9D0  6E36               	movwf	food_press@foodTable+3,c
  5789  00D9D2  0E00               	movlw	0
  5790  00D9D4  6E35               	movwf	food_press@foodTable+2,c
  5791                           
  5792                           ;standbyMode.c: 621: foodTable[2] = 0;
  5793  00D9D6  0E00               	movlw	0
  5794  00D9D8  6E38               	movwf	food_press@foodTable+5,c
  5795  00D9DA  0E00               	movlw	0
  5796  00D9DC  6E37               	movwf	food_press@foodTable+4,c
  5797                           
  5798                           ;standbyMode.c: 622: foodTable[3] = 0;
  5799  00D9DE  0E00               	movlw	0
  5800  00D9E0  6E3A               	movwf	food_press@foodTable+7,c
  5801  00D9E2  0E00               	movlw	0
  5802  00D9E4  6E39               	movwf	food_press@foodTable+6,c
  5803  00D9E6  D787               	goto	l321
  5804  00D9E8                     l329:
  5805                           
  5806                           ;standbyMode.c: 623: }
  5807                           ;standbyMode.c: 624: }
  5808                           ;standbyMode.c: 626: if (backCheck == 1){
  5809  00D9E8  042D               	decf	food_press@backCheck,w,c
  5810  00D9EA  102E               	iorwf	food_press@backCheck+1,w,c
  5811  00D9EC  A4D8               	btfss	status,2,c
  5812  00D9EE  D005               	goto	l340
  5813                           
  5814                           ;standbyMode.c: 627: return 100;
  5815  00D9F0  0E00               	movlw	0
  5816  00D9F2  6E26               	movwf	?_food_press+1,c
  5817  00D9F4  0E64               	movlw	100
  5818  00D9F6  6E25               	movwf	?_food_press,c
  5819                           
  5820                           ;standbyMode.c: 628: }
  5821  00D9F8  0012               	return	
  5822  00D9FA                     l340:
  5823                           
  5824                           ;standbyMode.c: 629: else {
  5825                           ;standbyMode.c: 630: isValid = check_food(dietSum, foodTable);
  5826  00D9FA  C025  F001         	movff	food_press@dietSum,check_food@sum
  5827  00D9FE  C026  F002         	movff	food_press@dietSum+1,check_food@sum+1
  5828  00DA02  0E33               	movlw	low food_press@foodTable
  5829  00DA04  6E03               	movwf	check_food@foodInput,c
  5830  00DA06  0E00               	movlw	high food_press@foodTable
  5831  00DA08  6E04               	movwf	check_food@foodInput+1,c
  5832  00DA0A  ECEB  F075         	call	_check_food	;wreg free
  5833  00DA0E  C001  F02F         	movff	?_check_food,food_press@isValid
  5834  00DA12  C002  F030         	movff	?_check_food+1,food_press@isValid+1
  5835                           
  5836                           ;standbyMode.c: 632: if (isValid == 0){
  5837  00DA16  502F               	movf	food_press@isValid,w,c
  5838  00DA18  1030               	iorwf	food_press@isValid+1,w,c
  5839  00DA1A  A4D8               	btfss	status,2,c
  5840  00DA1C  D026               	goto	l343
  5841                           
  5842                           ;standbyMode.c: 633: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5843  00DA1E  0E01               	movlw	1
  5844  00DA20  EC2B  F069         	call	_lcdInst
  5845  00DA24  0EC3               	movlw	195
  5846  00DA26  6E29               	movwf	??_food_press& (0+255),c
  5847  00DA28  0ECD               	movlw	205
  5848  00DA2A                     u7397:
  5849  00DA2A  2EE8               	decfsz	wreg,f,c
  5850  00DA2C  D7FE               	bra	u7397
  5851  00DA2E  2E29               	decfsz	??_food_press& (0+255),f,c
  5852  00DA30  D7FC               	bra	u7397
  5853  00DA32  F000               	nop	
  5854                           
  5855                           ;standbyMode.c: 634: printf("Invalid food!");
  5856  00DA34  0E04               	movlw	low STR_32
  5857  00DA36  6E0D               	movwf	printf@f,c
  5858  00DA38  0EFF               	movlw	high STR_32
  5859  00DA3A  6E0E               	movwf	printf@f+1,c
  5860  00DA3C  ECAF  F06F         	call	_printf	;wreg free
  5861                           
  5862                           ;standbyMode.c: 635: lcdInst(0xC0);;
  5863  00DA40  0EC0               	movlw	192
  5864  00DA42  EC2B  F069         	call	_lcdInst
  5865                           
  5866                           ;standbyMode.c: 636: printf("Try again.");
  5867  00DA46  0E9E               	movlw	low STR_33
  5868  00DA48  6E0D               	movwf	printf@f,c
  5869  00DA4A  0EFF               	movlw	high STR_33
  5870  00DA4C  6E0E               	movwf	printf@f+1,c
  5871  00DA4E  ECAF  F06F         	call	_printf	;wreg free
  5872                           
  5873                           ;standbyMode.c: 637: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5874  00DA52  0E33               	movlw	51
  5875  00DA54  6E2A               	movwf	(??_food_press+1)& (0+255),c
  5876  00DA56  0EBB               	movlw	187
  5877  00DA58  6E29               	movwf	??_food_press& (0+255),c
  5878  00DA5A  0EE0               	movlw	224
  5879  00DA5C                     u7407:
  5880  00DA5C  2EE8               	decfsz	wreg,f,c
  5881  00DA5E  D7FE               	bra	u7407
  5882  00DA60  2E29               	decfsz	??_food_press& (0+255),f,c
  5883  00DA62  D7FC               	bra	u7407
  5884  00DA64  2E2A               	decfsz	(??_food_press+1)& (0+255),f,c
  5885  00DA66  D7FA               	bra	u7407
  5886                           
  5887                           ;standbyMode.c: 638: goto START;
  5888  00DA68  D70B               	goto	_food_press
  5889  00DA6A                     l343:
  5890                           
  5891                           ;standbyMode.c: 640: else {
  5892                           ;standbyMode.c: 641: return isValid;
  5893  00DA6A  C02F  F025         	movff	food_press@isValid,?_food_press
  5894  00DA6E  C030  F026         	movff	food_press@isValid+1,?_food_press+1
  5895  00DA72  0012               	return	
  5896  00DA74                     __end_of_food_press:
  5897                           	opt stack 0
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodh	equ	0xFF4
  5903                           prodl	equ	0xFF3
  5904                           intcon	equ	0xFF2
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           plusw1	equ	0xFE3
  5908                           indf2	equ	0xFDF
  5909                           postinc2	equ	0xFDE
  5910                           postdec2	equ	0xFDD
  5911                           plusw2	equ	0xFDB
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _get_digits *****************
  5917 ;; Defined at:
  5918 ;;		line 477 in file "standbyMode.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  sum             2    0[COMRAM] unsigned int 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  count           2    4[COMRAM] unsigned int 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  2    0[COMRAM] unsigned int 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;Total ram usage:        6 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_food_press
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text12
  5946  00D6E0                     __ptext12:
  5947                           	opt stack 0
  5948  00D6E0                     _get_digits:
  5949                           	opt stack 28
  5950                           
  5951                           ;standbyMode.c: 479: unsigned int count = 0;
  5952                           
  5953                           ;incstack = 0
  5954  00D6E0  0E00               	movlw	0
  5955  00D6E2  6E06               	movwf	get_digits@count+1,c
  5956  00D6E4  0E00               	movlw	0
  5957  00D6E6  6E05               	movwf	get_digits@count,c
  5958                           
  5959                           ;standbyMode.c: 481: switch(sum){
  5960  00D6E8  D015               	goto	l294
  5961  00D6EA                     
  5962                           ;standbyMode.c: 494: count = 1;
  5963                           
  5964                           ;standbyMode.c: 493: case 12:
  5965                           
  5966                           ;standbyMode.c: 490: break;
  5967                           
  5968                           ;standbyMode.c: 489: count = 1;
  5969                           
  5970                           ;standbyMode.c: 488: case 7:
  5971                           
  5972                           ;standbyMode.c: 485: break;
  5973                           
  5974                           ;standbyMode.c: 484: count = 1;
  5975  00D6EA  0E00               	movlw	0
  5976  00D6EC  6E06               	movwf	get_digits@count+1,c
  5977  00D6EE  0E01               	movlw	1
  5978  00D6F0                     L18:
  5979  00D6F0  6E05               	movwf	get_digits@count,c
  5980                           
  5981                           ;standbyMode.c: 500: break;
  5982  00D6F2  D050               	goto	l296
  5983  00D6F4                     
  5984                           ;standbyMode.c: 509: count = 2;
  5985                           
  5986                           ;standbyMode.c: 508: case 19:
  5987                           
  5988                           ;standbyMode.c: 505: break;
  5989                           
  5990                           ;standbyMode.c: 504: count = 2;
  5991  00D6F4  0E00               	movlw	0
  5992  00D6F6  6E06               	movwf	get_digits@count+1,c
  5993  00D6F8  0E02               	movlw	2
  5994  00D6FA  D7FA               	goto	L18
  5995  00D6FC                     
  5996                           ;standbyMode.c: 544: count = 3;
  5997                           
  5998                           ;standbyMode.c: 543: case 31:
  5999                           
  6000                           ;standbyMode.c: 540: break;
  6001                           
  6002                           ;standbyMode.c: 539: count = 3;
  6003                           
  6004                           ;standbyMode.c: 538: case 26:
  6005                           
  6006                           ;standbyMode.c: 535: break;
  6007                           
  6008                           ;standbyMode.c: 534: count = 3;
  6009                           
  6010                           ;standbyMode.c: 533: case 22:
  6011                           
  6012                           ;standbyMode.c: 530: break;
  6013                           
  6014                           ;standbyMode.c: 529: count = 3;
  6015                           
  6016                           ;standbyMode.c: 528: case 27:
  6017                           
  6018                           ;standbyMode.c: 525: break;
  6019                           
  6020                           ;standbyMode.c: 524: count = 3;
  6021                           
  6022                           ;standbyMode.c: 523: case 17:
  6023                           
  6024                           ;standbyMode.c: 520: break;
  6025                           
  6026                           ;standbyMode.c: 519: count = 3;
  6027                           
  6028                           ;standbyMode.c: 518: case 18:
  6029                           
  6030                           ;standbyMode.c: 515: break;
  6031                           
  6032                           ;standbyMode.c: 514: count = 3;
  6033  00D6FC  0E00               	movlw	0
  6034  00D6FE  6E06               	movwf	get_digits@count+1,c
  6035  00D700  0E03               	movlw	3
  6036  00D702  D7F6               	goto	L18
  6037  00D704                     
  6038                           ;standbyMode.c: 569: count = 4;
  6039                           
  6040                           ;standbyMode.c: 568: case 43:
  6041                           
  6042                           ;standbyMode.c: 565: break;
  6043                           
  6044                           ;standbyMode.c: 564: count = 4;
  6045                           
  6046                           ;standbyMode.c: 563: case 39:
  6047                           
  6048                           ;standbyMode.c: 560: break;
  6049                           
  6050                           ;standbyMode.c: 559: count = 4;
  6051                           
  6052                           ;standbyMode.c: 558: case 34:
  6053                           
  6054                           ;standbyMode.c: 555: break;
  6055                           
  6056                           ;standbyMode.c: 554: count = 4;
  6057                           
  6058                           ;standbyMode.c: 553: case 29:
  6059                           
  6060                           ;standbyMode.c: 550: break;
  6061                           
  6062                           ;standbyMode.c: 549: count = 4;
  6063  00D704  0E00               	movlw	0
  6064  00D706  6E06               	movwf	get_digits@count+1,c
  6065  00D708  0E04               	movlw	4
  6066  00D70A  D7F2               	goto	L18
  6067  00D70C                     
  6068                           ;standbyMode.c: 574: count = 0;
  6069  00D70C  0E00               	movlw	0
  6070  00D70E  6E06               	movwf	get_digits@count+1,c
  6071  00D710  0E00               	movlw	0
  6072  00D712  D7EE               	goto	L18
  6073  00D714                     l294:
  6074  00D714  C001  F003         	movff	get_digits@sum,??_get_digits
  6075  00D718  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  6076                           
  6077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6078                           ; Switch size 1, requested type "space"
  6079                           ; Number of cases is 1, Range of values is 0 to 0
  6080                           ; switch strategies available:
  6081                           ; Name         Instructions Cycles
  6082                           ; simple_byte            4     3 (average)
  6083                           ;	Chosen strategy is simple_byte
  6084  00D71C  5004               	movf	??_get_digits+1,w,c
  6085  00D71E  0A00               	xorlw	0	; case 0
  6086  00D720  A4D8               	btfss	status,2,c
  6087  00D722  D7F4               	goto	l314
  6088                           
  6089                           ; Switch size 1, requested type "space"
  6090                           ; Number of cases is 18, Range of values is 3 to 43
  6091                           ; switch strategies available:
  6092                           ; Name         Instructions Cycles
  6093                           ; simple_byte           55    28 (average)
  6094                           ;	Chosen strategy is simple_byte
  6095  00D724  5003               	movf	??_get_digits,w,c
  6096  00D726  0A03               	xorlw	3	; case 3
  6097  00D728  B4D8               	btfsc	status,2,c
  6098  00D72A  D7DF               	goto	l295
  6099  00D72C  0A04               	xorlw	4	; case 7
  6100  00D72E  B4D8               	btfsc	status,2,c
  6101  00D730  D7DC               	goto	l295
  6102  00D732  0A0D               	xorlw	13	; case 10
  6103  00D734  B4D8               	btfsc	status,2,c
  6104  00D736  D7DE               	goto	l300
  6105  00D738  0A06               	xorlw	6	; case 12
  6106  00D73A  B4D8               	btfsc	status,2,c
  6107  00D73C  D7D6               	goto	l295
  6108  00D73E  0A01               	xorlw	1	; case 13
  6109  00D740  B4D8               	btfsc	status,2,c
  6110  00D742  D7DC               	goto	l302
  6111  00D744  0A02               	xorlw	2	; case 15
  6112  00D746  B4D8               	btfsc	status,2,c
  6113  00D748  D7D5               	goto	l300
  6114  00D74A  0A1E               	xorlw	30	; case 17
  6115  00D74C  B4D8               	btfsc	status,2,c
  6116  00D74E  D7D6               	goto	l302
  6117  00D750  0A03               	xorlw	3	; case 18
  6118  00D752  B4D8               	btfsc	status,2,c
  6119  00D754  D7D3               	goto	l302
  6120  00D756  0A01               	xorlw	1	; case 19
  6121  00D758  B4D8               	btfsc	status,2,c
  6122  00D75A  D7CC               	goto	l300
  6123  00D75C  0A05               	xorlw	5	; case 22
  6124  00D75E  B4D8               	btfsc	status,2,c
  6125  00D760  D7CD               	goto	l302
  6126  00D762  0A0F               	xorlw	15	; case 25
  6127  00D764  B4D8               	btfsc	status,2,c
  6128  00D766  D7CE               	goto	l309
  6129  00D768  0A03               	xorlw	3	; case 26
  6130  00D76A  B4D8               	btfsc	status,2,c
  6131  00D76C  D7C7               	goto	l302
  6132  00D76E  0A01               	xorlw	1	; case 27
  6133  00D770  B4D8               	btfsc	status,2,c
  6134  00D772  D7C4               	goto	l302
  6135  00D774  0A06               	xorlw	6	; case 29
  6136  00D776  B4D8               	btfsc	status,2,c
  6137  00D778  D7C5               	goto	l309
  6138  00D77A  0A02               	xorlw	2	; case 31
  6139  00D77C  B4D8               	btfsc	status,2,c
  6140  00D77E  D7BE               	goto	l302
  6141  00D780  0A3D               	xorlw	61	; case 34
  6142  00D782  B4D8               	btfsc	status,2,c
  6143  00D784  D7BF               	goto	l309
  6144  00D786  0A05               	xorlw	5	; case 39
  6145  00D788  B4D8               	btfsc	status,2,c
  6146  00D78A  D7BC               	goto	l309
  6147  00D78C  0A0C               	xorlw	12	; case 43
  6148  00D78E  B4D8               	btfsc	status,2,c
  6149  00D790  D7B9               	goto	l309
  6150  00D792  D7BC               	goto	l314
  6151  00D794                     l296:
  6152                           
  6153                           ;standbyMode.c: 577: return count;
  6154  00D794  C005  F001         	movff	get_digits@count,?_get_digits
  6155  00D798  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  6156  00D79C  0012               	return		;funcret
  6157  00D79E                     __end_of_get_digits:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           plusw1	equ	0xFE3
  6169                           indf2	equ	0xFDF
  6170                           postinc2	equ	0xFDE
  6171                           postdec2	equ	0xFDD
  6172                           plusw2	equ	0xFDB
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _check_food *****************
  6178 ;; Defined at:
  6179 ;;		line 91 in file "standbyMode.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  sum             2    0[COMRAM] unsigned int 
  6182 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  6183 ;;		 -> food_press@foodTable(8), 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  returnValue     2    6[COMRAM] unsigned int 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  2    0[COMRAM] unsigned int 
  6188 ;; Registers used:
  6189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        8 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_food_press
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text13
  6209  00EBD6                     __ptext13:
  6210                           	opt stack 0
  6211  00EBD6                     _check_food:
  6212                           	opt stack 28
  6213                           
  6214                           ;standbyMode.c: 93: unsigned int returnValue = 0;
  6215                           
  6216                           ;incstack = 0
  6217  00EBD6  0E00               	movlw	0
  6218  00EBD8  6E08               	movwf	check_food@returnValue+1,c
  6219  00EBDA  0E00               	movlw	0
  6220  00EBDC  6E07               	movwf	check_food@returnValue,c
  6221                           
  6222                           ;standbyMode.c: 95: switch(sum){
  6223  00EBDE  D3D0               	goto	l145
  6224  00EBE0                     
  6225                           ;standbyMode.c: 98: if (foodInput[0] == 1 || foodInput[0] == 2){
  6226  00EBE0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6227  00EBE4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6228  00EBE8  04DE               	decf	postinc2,w,c
  6229  00EBEA  10DE               	iorwf	postinc2,w,c
  6230  00EBEC  B4D8               	btfsc	status,2,c
  6231  00EBEE  D009               	goto	u3720
  6232  00EBF0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6233  00EBF4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6234  00EBF8  0E02               	movlw	2
  6235  00EBFA  18DE               	xorwf	postinc2,w,c
  6236  00EBFC  10DE               	iorwf	postinc2,w,c
  6237  00EBFE  A4D8               	btfss	status,2,c
  6238  00EC00  D3FE               	goto	l150
  6239  00EC02                     u3720:
  6240                           
  6241                           ;standbyMode.c: 99: returnValue = 1;
  6242  00EC02  0E00               	movlw	0
  6243  00EC04  6E08               	movwf	check_food@returnValue+1,c
  6244  00EC06  0E01               	movlw	1
  6245  00EC08  D3B9               	goto	L46
  6246  00EC0A                     
  6247                           ;standbyMode.c: 105: if (foodInput[0] == 1 || foodInput[0] == 2){
  6248  00EC0A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6249  00EC0E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6250  00EC12  04DE               	decf	postinc2,w,c
  6251  00EC14  10DE               	iorwf	postinc2,w,c
  6252  00EC16  B4D8               	btfsc	status,2,c
  6253  00EC18  D009               	goto	u3740
  6254  00EC1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6255  00EC1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6256  00EC22  0E02               	movlw	2
  6257  00EC24  18DE               	xorwf	postinc2,w,c
  6258  00EC26  10DE               	iorwf	postinc2,w,c
  6259  00EC28  A4D8               	btfss	status,2,c
  6260  00EC2A  D3E9               	goto	l150
  6261  00EC2C                     u3740:
  6262                           
  6263                           ;standbyMode.c: 106: returnValue = 2;
  6264  00EC2C  0E00               	movlw	0
  6265  00EC2E  6E08               	movwf	check_food@returnValue+1,c
  6266  00EC30  0E02               	movlw	2
  6267  00EC32  D3A4               	goto	L46
  6268  00EC34                     
  6269                           ;standbyMode.c: 112: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  6270  00EC34  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6271  00EC38  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6272  00EC3C  04DE               	decf	postinc2,w,c
  6273  00EC3E  10DE               	iorwf	postinc2,w,c
  6274  00EC40  B4D8               	btfsc	status,2,c
  6275  00EC42  D012               	goto	u3770
  6276  00EC44  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6277  00EC48  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6278  00EC4C  0E02               	movlw	2
  6279  00EC4E  18DE               	xorwf	postinc2,w,c
  6280  00EC50  10DE               	iorwf	postinc2,w,c
  6281  00EC52  B4D8               	btfsc	status,2,c
  6282  00EC54  D009               	goto	u3770
  6283  00EC56  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6284  00EC5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6285  00EC5E  0E03               	movlw	3
  6286  00EC60  18DE               	xorwf	postinc2,w,c
  6287  00EC62  10DE               	iorwf	postinc2,w,c
  6288  00EC64  A4D8               	btfss	status,2,c
  6289  00EC66  D3CB               	goto	l150
  6290  00EC68                     u3770:
  6291                           
  6292                           ;standbyMode.c: 113: returnValue = 3;
  6293  00EC68  0E00               	movlw	0
  6294  00EC6A  6E08               	movwf	check_food@returnValue+1,c
  6295  00EC6C  0E03               	movlw	3
  6296  00EC6E  D386               	goto	L46
  6297  00EC70                     
  6298                           ;standbyMode.c: 119: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  6299  00EC70  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6300  00EC74  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6301  00EC78  0E03               	movlw	3
  6302  00EC7A  18DE               	xorwf	postinc2,w,c
  6303  00EC7C  10DE               	iorwf	postinc2,w,c
  6304  00EC7E  B4D8               	btfsc	status,2,c
  6305  00EC80  D3BE               	goto	l150
  6306  00EC82  EE20 F002          	lfsr	2,2
  6307  00EC86  5003               	movf	check_food@foodInput,w,c
  6308  00EC88  26D9               	addwf	fsr2l,f,c
  6309  00EC8A  5004               	movf	check_food@foodInput+1,w,c
  6310  00EC8C  22DA               	addwfc	fsr2h,f,c
  6311  00EC8E  0E03               	movlw	3
  6312  00EC90  18DE               	xorwf	postinc2,w,c
  6313  00EC92  10DE               	iorwf	postinc2,w,c
  6314  00EC94  B4D8               	btfsc	status,2,c
  6315  00EC96  D3B3               	goto	l150
  6316  00EC98  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6317  00EC9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6318  00ECA0  50DE               	movf	postinc2,w,c
  6319  00ECA2  10DE               	iorwf	postinc2,w,c
  6320  00ECA4  B4D8               	btfsc	status,2,c
  6321  00ECA6  D3AB               	goto	l150
  6322  00ECA8  EE20 F002          	lfsr	2,2
  6323  00ECAC  5003               	movf	check_food@foodInput,w,c
  6324  00ECAE  26D9               	addwf	fsr2l,f,c
  6325  00ECB0  5004               	movf	check_food@foodInput+1,w,c
  6326  00ECB2  22DA               	addwfc	fsr2h,f,c
  6327  00ECB4  50DE               	movf	postinc2,w,c
  6328  00ECB6  10DE               	iorwf	postinc2,w,c
  6329  00ECB8  B4D8               	btfsc	status,2,c
  6330  00ECBA  D3A1               	goto	l150
  6331                           
  6332                           ;standbyMode.c: 120: returnValue = 4;
  6333  00ECBC  0E00               	movlw	0
  6334  00ECBE  6E08               	movwf	check_food@returnValue+1,c
  6335  00ECC0  0E04               	movlw	4
  6336  00ECC2  D35C               	goto	L46
  6337  00ECC4                     
  6338                           ;standbyMode.c: 126: if (foodInput[1] == 3){
  6339  00ECC4  EE20 F002          	lfsr	2,2
  6340  00ECC8  5003               	movf	check_food@foodInput,w,c
  6341  00ECCA  26D9               	addwf	fsr2l,f,c
  6342  00ECCC  5004               	movf	check_food@foodInput+1,w,c
  6343  00ECCE  22DA               	addwfc	fsr2h,f,c
  6344  00ECD0  0E03               	movlw	3
  6345  00ECD2  18DE               	xorwf	postinc2,w,c
  6346  00ECD4  10DE               	iorwf	postinc2,w,c
  6347  00ECD6  A4D8               	btfss	status,2,c
  6348  00ECD8  D00C               	goto	l162
  6349                           
  6350                           ;standbyMode.c: 127: if (foodInput[0] == 1){
  6351  00ECDA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6352  00ECDE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6353  00ECE2  04DE               	decf	postinc2,w,c
  6354  00ECE4  10DE               	iorwf	postinc2,w,c
  6355  00ECE6  A4D8               	btfss	status,2,c
  6356  00ECE8  D38A               	goto	l150
  6357                           
  6358                           ;standbyMode.c: 128: returnValue = 5;
  6359  00ECEA  0E00               	movlw	0
  6360  00ECEC  6E08               	movwf	check_food@returnValue+1,c
  6361  00ECEE  0E05               	movlw	5
  6362  00ECF0  D345               	goto	L46
  6363  00ECF2                     l162:
  6364                           
  6365                           ;standbyMode.c: 131: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6366  00ECF2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6367  00ECF6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6368  00ECFA  0E03               	movlw	3
  6369  00ECFC  18DE               	xorwf	postinc2,w,c
  6370  00ECFE  10DE               	iorwf	postinc2,w,c
  6371  00ED00  B4D8               	btfsc	status,2,c
  6372  00ED02  D37D               	goto	l150
  6373  00ED04  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6374  00ED08  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6375  00ED0C  50DE               	movf	postinc2,w,c
  6376  00ED0E  10DE               	iorwf	postinc2,w,c
  6377  00ED10  B4D8               	btfsc	status,2,c
  6378  00ED12  D375               	goto	l150
  6379                           
  6380                           ;standbyMode.c: 132: returnValue = 6;
  6381  00ED14  0E00               	movlw	0
  6382  00ED16  6E08               	movwf	check_food@returnValue+1,c
  6383  00ED18  0E06               	movlw	6
  6384  00ED1A  D330               	goto	L46
  6385  00ED1C                     
  6386                           ;standbyMode.c: 138: if (foodInput[1] == 3){
  6387  00ED1C  EE20 F002          	lfsr	2,2
  6388  00ED20  5003               	movf	check_food@foodInput,w,c
  6389  00ED22  26D9               	addwf	fsr2l,f,c
  6390  00ED24  5004               	movf	check_food@foodInput+1,w,c
  6391  00ED26  22DA               	addwfc	fsr2h,f,c
  6392  00ED28  0E03               	movlw	3
  6393  00ED2A  18DE               	xorwf	postinc2,w,c
  6394  00ED2C  10DE               	iorwf	postinc2,w,c
  6395  00ED2E  A4D8               	btfss	status,2,c
  6396  00ED30  D00C               	goto	l167
  6397                           
  6398                           ;standbyMode.c: 139: if (foodInput[0] == 1){
  6399  00ED32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6400  00ED36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6401  00ED3A  04DE               	decf	postinc2,w,c
  6402  00ED3C  10DE               	iorwf	postinc2,w,c
  6403  00ED3E  A4D8               	btfss	status,2,c
  6404  00ED40  D35E               	goto	l150
  6405                           
  6406                           ;standbyMode.c: 140: returnValue = 7;
  6407  00ED42  0E00               	movlw	0
  6408  00ED44  6E08               	movwf	check_food@returnValue+1,c
  6409  00ED46  0E07               	movlw	7
  6410  00ED48  D319               	goto	L46
  6411  00ED4A                     l167:
  6412                           
  6413                           ;standbyMode.c: 143: else if (foodInput[0] != 3 && foodInput[0] != 0){
  6414  00ED4A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6415  00ED4E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6416  00ED52  0E03               	movlw	3
  6417  00ED54  18DE               	xorwf	postinc2,w,c
  6418  00ED56  10DE               	iorwf	postinc2,w,c
  6419  00ED58  B4D8               	btfsc	status,2,c
  6420  00ED5A  D351               	goto	l150
  6421  00ED5C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6422  00ED60  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6423  00ED64  50DE               	movf	postinc2,w,c
  6424  00ED66  10DE               	iorwf	postinc2,w,c
  6425  00ED68  B4D8               	btfsc	status,2,c
  6426  00ED6A  D349               	goto	l150
  6427                           
  6428                           ;standbyMode.c: 144: returnValue = 8;
  6429  00ED6C  0E00               	movlw	0
  6430  00ED6E  6E08               	movwf	check_food@returnValue+1,c
  6431  00ED70  0E08               	movlw	8
  6432  00ED72  D304               	goto	L46
  6433  00ED74                     
  6434                           ;standbyMode.c: 150: if (foodInput[0] == 1 && foodInput[1] == 1){
  6435  00ED74  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6436  00ED78  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6437  00ED7C  04DE               	decf	postinc2,w,c
  6438  00ED7E  10DE               	iorwf	postinc2,w,c
  6439  00ED80  A4D8               	btfss	status,2,c
  6440  00ED82  D33D               	goto	l150
  6441  00ED84  EE20 F002          	lfsr	2,2
  6442  00ED88  5003               	movf	check_food@foodInput,w,c
  6443  00ED8A  26D9               	addwf	fsr2l,f,c
  6444  00ED8C  5004               	movf	check_food@foodInput+1,w,c
  6445  00ED8E  22DA               	addwfc	fsr2h,f,c
  6446  00ED90  04DE               	decf	postinc2,w,c
  6447  00ED92  10DE               	iorwf	postinc2,w,c
  6448  00ED94  A4D8               	btfss	status,2,c
  6449  00ED96  D333               	goto	l150
  6450                           
  6451                           ;standbyMode.c: 151: if (foodInput[2] == 1 || foodInput[2] == 2){
  6452  00ED98  EE20 F004          	lfsr	2,4
  6453  00ED9C  5003               	movf	check_food@foodInput,w,c
  6454  00ED9E  26D9               	addwf	fsr2l,f,c
  6455  00EDA0  5004               	movf	check_food@foodInput+1,w,c
  6456  00EDA2  22DA               	addwfc	fsr2h,f,c
  6457  00EDA4  04DE               	decf	postinc2,w,c
  6458  00EDA6  10DE               	iorwf	postinc2,w,c
  6459  00EDA8  B4D8               	btfsc	status,2,c
  6460  00EDAA  D00B               	goto	u3930
  6461  00EDAC  EE20 F004          	lfsr	2,4
  6462  00EDB0  5003               	movf	check_food@foodInput,w,c
  6463  00EDB2  26D9               	addwf	fsr2l,f,c
  6464  00EDB4  5004               	movf	check_food@foodInput+1,w,c
  6465  00EDB6  22DA               	addwfc	fsr2h,f,c
  6466  00EDB8  0E02               	movlw	2
  6467  00EDBA  18DE               	xorwf	postinc2,w,c
  6468  00EDBC  10DE               	iorwf	postinc2,w,c
  6469  00EDBE  A4D8               	btfss	status,2,c
  6470  00EDC0  D31E               	goto	l150
  6471  00EDC2                     u3930:
  6472                           
  6473                           ;standbyMode.c: 152: returnValue = 9;
  6474  00EDC2  0E00               	movlw	0
  6475  00EDC4  6E08               	movwf	check_food@returnValue+1,c
  6476  00EDC6  0E09               	movlw	9
  6477  00EDC8  D2D9               	goto	L46
  6478  00EDCA                     
  6479                           ;standbyMode.c: 159: if (foodInput[0] == 1 && foodInput[1] == 1){
  6480  00EDCA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6481  00EDCE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6482  00EDD2  04DE               	decf	postinc2,w,c
  6483  00EDD4  10DE               	iorwf	postinc2,w,c
  6484  00EDD6  A4D8               	btfss	status,2,c
  6485  00EDD8  D312               	goto	l150
  6486  00EDDA  EE20 F002          	lfsr	2,2
  6487  00EDDE  5003               	movf	check_food@foodInput,w,c
  6488  00EDE0  26D9               	addwf	fsr2l,f,c
  6489  00EDE2  5004               	movf	check_food@foodInput+1,w,c
  6490  00EDE4  22DA               	addwfc	fsr2h,f,c
  6491  00EDE6  04DE               	decf	postinc2,w,c
  6492  00EDE8  10DE               	iorwf	postinc2,w,c
  6493  00EDEA  A4D8               	btfss	status,2,c
  6494  00EDEC  D308               	goto	l150
  6495                           
  6496                           ;standbyMode.c: 160: if (foodInput[2] == 1 || foodInput[2] == 2){
  6497  00EDEE  EE20 F004          	lfsr	2,4
  6498  00EDF2  5003               	movf	check_food@foodInput,w,c
  6499  00EDF4  26D9               	addwf	fsr2l,f,c
  6500  00EDF6  5004               	movf	check_food@foodInput+1,w,c
  6501  00EDF8  22DA               	addwfc	fsr2h,f,c
  6502  00EDFA  04DE               	decf	postinc2,w,c
  6503  00EDFC  10DE               	iorwf	postinc2,w,c
  6504  00EDFE  B4D8               	btfsc	status,2,c
  6505  00EE00  D00B               	goto	u3970
  6506  00EE02  EE20 F004          	lfsr	2,4
  6507  00EE06  5003               	movf	check_food@foodInput,w,c
  6508  00EE08  26D9               	addwf	fsr2l,f,c
  6509  00EE0A  5004               	movf	check_food@foodInput+1,w,c
  6510  00EE0C  22DA               	addwfc	fsr2h,f,c
  6511  00EE0E  0E02               	movlw	2
  6512  00EE10  18DE               	xorwf	postinc2,w,c
  6513  00EE12  10DE               	iorwf	postinc2,w,c
  6514  00EE14  A4D8               	btfss	status,2,c
  6515  00EE16  D2F3               	goto	l150
  6516  00EE18                     u3970:
  6517                           
  6518                           ;standbyMode.c: 161: returnValue = 10;
  6519  00EE18  0E00               	movlw	0
  6520  00EE1A  6E08               	movwf	check_food@returnValue+1,c
  6521  00EE1C  0E0A               	movlw	10
  6522  00EE1E  D2AE               	goto	L46
  6523  00EE20                     
  6524                           ;standbyMode.c: 168: if (foodInput[1] == 1 && foodInput[2] == 1){
  6525  00EE20  EE20 F002          	lfsr	2,2
  6526  00EE24  5003               	movf	check_food@foodInput,w,c
  6527  00EE26  26D9               	addwf	fsr2l,f,c
  6528  00EE28  5004               	movf	check_food@foodInput+1,w,c
  6529  00EE2A  22DA               	addwfc	fsr2h,f,c
  6530  00EE2C  04DE               	decf	postinc2,w,c
  6531  00EE2E  10DE               	iorwf	postinc2,w,c
  6532  00EE30  A4D8               	btfss	status,2,c
  6533  00EE32  D2E5               	goto	l150
  6534  00EE34  EE20 F004          	lfsr	2,4
  6535  00EE38  5003               	movf	check_food@foodInput,w,c
  6536  00EE3A  26D9               	addwf	fsr2l,f,c
  6537  00EE3C  5004               	movf	check_food@foodInput+1,w,c
  6538  00EE3E  22DA               	addwfc	fsr2h,f,c
  6539  00EE40  04DE               	decf	postinc2,w,c
  6540  00EE42  10DE               	iorwf	postinc2,w,c
  6541  00EE44  A4D8               	btfss	status,2,c
  6542  00EE46  D2DB               	goto	l150
  6543                           
  6544                           ;standbyMode.c: 169: if (foodInput[0] == 1 || foodInput[0] == 2){
  6545  00EE48  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6546  00EE4C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6547  00EE50  04DE               	decf	postinc2,w,c
  6548  00EE52  10DE               	iorwf	postinc2,w,c
  6549  00EE54  B4D8               	btfsc	status,2,c
  6550  00EE56  D009               	goto	u4010
  6551  00EE58  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6552  00EE5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6553  00EE60  0E02               	movlw	2
  6554  00EE62  18DE               	xorwf	postinc2,w,c
  6555  00EE64  10DE               	iorwf	postinc2,w,c
  6556  00EE66  A4D8               	btfss	status,2,c
  6557  00EE68  D2CA               	goto	l150
  6558  00EE6A                     u4010:
  6559                           
  6560                           ;standbyMode.c: 170: returnValue = 11;
  6561  00EE6A  0E00               	movlw	0
  6562  00EE6C  6E08               	movwf	check_food@returnValue+1,c
  6563  00EE6E  0E0B               	movlw	11
  6564  00EE70  D285               	goto	L46
  6565  00EE72                     
  6566                           ;standbyMode.c: 177: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6567  00EE72  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6568  00EE76  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6569  00EE7A  04DE               	decf	postinc2,w,c
  6570  00EE7C  10DE               	iorwf	postinc2,w,c
  6571  00EE7E  A4D8               	btfss	status,2,c
  6572  00EE80  D018               	goto	l187
  6573  00EE82  EE20 F002          	lfsr	2,2
  6574  00EE86  5003               	movf	check_food@foodInput,w,c
  6575  00EE88  26D9               	addwf	fsr2l,f,c
  6576  00EE8A  5004               	movf	check_food@foodInput+1,w,c
  6577  00EE8C  22DA               	addwfc	fsr2h,f,c
  6578  00EE8E  04DE               	decf	postinc2,w,c
  6579  00EE90  10DE               	iorwf	postinc2,w,c
  6580  00EE92  A4D8               	btfss	status,2,c
  6581  00EE94  D00E               	goto	l187
  6582  00EE96  EE20 F004          	lfsr	2,4
  6583  00EE9A  5003               	movf	check_food@foodInput,w,c
  6584  00EE9C  26D9               	addwf	fsr2l,f,c
  6585  00EE9E  5004               	movf	check_food@foodInput+1,w,c
  6586  00EEA0  22DA               	addwfc	fsr2h,f,c
  6587  00EEA2  04DE               	decf	postinc2,w,c
  6588  00EEA4  10DE               	iorwf	postinc2,w,c
  6589  00EEA6  A4D8               	btfss	status,2,c
  6590  00EEA8  D004               	goto	l187
  6591                           
  6592                           ;standbyMode.c: 178: returnValue = 12;
  6593  00EEAA  0E00               	movlw	0
  6594  00EEAC  6E08               	movwf	check_food@returnValue+1,c
  6595  00EEAE  0E0C               	movlw	12
  6596  00EEB0  D265               	goto	L46
  6597  00EEB2                     l187:
  6598                           
  6599                           ;standbyMode.c: 180: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6600  00EEB2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6601  00EEB6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6602  00EEBA  0E02               	movlw	2
  6603  00EEBC  18DE               	xorwf	postinc2,w,c
  6604  00EEBE  10DE               	iorwf	postinc2,w,c
  6605  00EEC0  A4D8               	btfss	status,2,c
  6606  00EEC2  D018               	goto	l189
  6607  00EEC4  EE20 F002          	lfsr	2,2
  6608  00EEC8  5003               	movf	check_food@foodInput,w,c
  6609  00EECA  26D9               	addwf	fsr2l,f,c
  6610  00EECC  5004               	movf	check_food@foodInput+1,w,c
  6611  00EECE  22DA               	addwfc	fsr2h,f,c
  6612  00EED0  04DE               	decf	postinc2,w,c
  6613  00EED2  10DE               	iorwf	postinc2,w,c
  6614  00EED4  A4D8               	btfss	status,2,c
  6615  00EED6  D00E               	goto	l189
  6616  00EED8  EE20 F004          	lfsr	2,4
  6617  00EEDC  5003               	movf	check_food@foodInput,w,c
  6618  00EEDE  26D9               	addwf	fsr2l,f,c
  6619  00EEE0  5004               	movf	check_food@foodInput+1,w,c
  6620  00EEE2  22DA               	addwfc	fsr2h,f,c
  6621  00EEE4  04DE               	decf	postinc2,w,c
  6622  00EEE6  10DE               	iorwf	postinc2,w,c
  6623  00EEE8  A4D8               	btfss	status,2,c
  6624  00EEEA  D004               	goto	l189
  6625                           
  6626                           ;standbyMode.c: 181: returnValue = 13;
  6627  00EEEC  0E00               	movlw	0
  6628  00EEEE  6E08               	movwf	check_food@returnValue+1,c
  6629  00EEF0  0E0D               	movlw	13
  6630  00EEF2  D244               	goto	L46
  6631  00EEF4                     l189:
  6632                           
  6633                           ;standbyMode.c: 183: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6634  00EEF4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6635  00EEF8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6636  00EEFC  04DE               	decf	postinc2,w,c
  6637  00EEFE  10DE               	iorwf	postinc2,w,c
  6638  00EF00  A4D8               	btfss	status,2,c
  6639  00EF02  D019               	goto	l191
  6640  00EF04  EE20 F002          	lfsr	2,2
  6641  00EF08  5003               	movf	check_food@foodInput,w,c
  6642  00EF0A  26D9               	addwf	fsr2l,f,c
  6643  00EF0C  5004               	movf	check_food@foodInput+1,w,c
  6644  00EF0E  22DA               	addwfc	fsr2h,f,c
  6645  00EF10  0E02               	movlw	2
  6646  00EF12  18DE               	xorwf	postinc2,w,c
  6647  00EF14  10DE               	iorwf	postinc2,w,c
  6648  00EF16  A4D8               	btfss	status,2,c
  6649  00EF18  D00E               	goto	l191
  6650  00EF1A  EE20 F004          	lfsr	2,4
  6651  00EF1E  5003               	movf	check_food@foodInput,w,c
  6652  00EF20  26D9               	addwf	fsr2l,f,c
  6653  00EF22  5004               	movf	check_food@foodInput+1,w,c
  6654  00EF24  22DA               	addwfc	fsr2h,f,c
  6655  00EF26  04DE               	decf	postinc2,w,c
  6656  00EF28  10DE               	iorwf	postinc2,w,c
  6657  00EF2A  A4D8               	btfss	status,2,c
  6658  00EF2C  D004               	goto	l191
  6659                           
  6660                           ;standbyMode.c: 184: returnValue = 14;
  6661  00EF2E  0E00               	movlw	0
  6662  00EF30  6E08               	movwf	check_food@returnValue+1,c
  6663  00EF32  0E0E               	movlw	14
  6664  00EF34  D223               	goto	L46
  6665  00EF36                     l191:
  6666                           
  6667                           ;standbyMode.c: 186: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6668  00EF36  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6669  00EF3A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6670  00EF3E  04DE               	decf	postinc2,w,c
  6671  00EF40  10DE               	iorwf	postinc2,w,c
  6672  00EF42  A4D8               	btfss	status,2,c
  6673  00EF44  D25C               	goto	l150
  6674  00EF46  EE20 F002          	lfsr	2,2
  6675  00EF4A  5003               	movf	check_food@foodInput,w,c
  6676  00EF4C  26D9               	addwf	fsr2l,f,c
  6677  00EF4E  5004               	movf	check_food@foodInput+1,w,c
  6678  00EF50  22DA               	addwfc	fsr2h,f,c
  6679  00EF52  04DE               	decf	postinc2,w,c
  6680  00EF54  10DE               	iorwf	postinc2,w,c
  6681  00EF56  A4D8               	btfss	status,2,c
  6682  00EF58  D252               	goto	l150
  6683  00EF5A  EE20 F004          	lfsr	2,4
  6684  00EF5E  5003               	movf	check_food@foodInput,w,c
  6685  00EF60  26D9               	addwf	fsr2l,f,c
  6686  00EF62  5004               	movf	check_food@foodInput+1,w,c
  6687  00EF64  22DA               	addwfc	fsr2h,f,c
  6688  00EF66  0E02               	movlw	2
  6689  00EF68  18DE               	xorwf	postinc2,w,c
  6690  00EF6A  10DE               	iorwf	postinc2,w,c
  6691  00EF6C  A4D8               	btfss	status,2,c
  6692  00EF6E  D247               	goto	l150
  6693                           
  6694                           ;standbyMode.c: 187: returnValue = 15;
  6695  00EF70  0E00               	movlw	0
  6696  00EF72  6E08               	movwf	check_food@returnValue+1,c
  6697  00EF74  0E0F               	movlw	15
  6698  00EF76  D202               	goto	L46
  6699  00EF78                     
  6700                           ;standbyMode.c: 193: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6701  00EF78  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6702  00EF7C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6703  00EF80  04DE               	decf	postinc2,w,c
  6704  00EF82  10DE               	iorwf	postinc2,w,c
  6705  00EF84  A4D8               	btfss	status,2,c
  6706  00EF86  D018               	goto	l195
  6707  00EF88  EE20 F002          	lfsr	2,2
  6708  00EF8C  5003               	movf	check_food@foodInput,w,c
  6709  00EF8E  26D9               	addwf	fsr2l,f,c
  6710  00EF90  5004               	movf	check_food@foodInput+1,w,c
  6711  00EF92  22DA               	addwfc	fsr2h,f,c
  6712  00EF94  04DE               	decf	postinc2,w,c
  6713  00EF96  10DE               	iorwf	postinc2,w,c
  6714  00EF98  A4D8               	btfss	status,2,c
  6715  00EF9A  D00E               	goto	l195
  6716  00EF9C  EE20 F004          	lfsr	2,4
  6717  00EFA0  5003               	movf	check_food@foodInput,w,c
  6718  00EFA2  26D9               	addwf	fsr2l,f,c
  6719  00EFA4  5004               	movf	check_food@foodInput+1,w,c
  6720  00EFA6  22DA               	addwfc	fsr2h,f,c
  6721  00EFA8  04DE               	decf	postinc2,w,c
  6722  00EFAA  10DE               	iorwf	postinc2,w,c
  6723  00EFAC  A4D8               	btfss	status,2,c
  6724  00EFAE  D004               	goto	l195
  6725                           
  6726                           ;standbyMode.c: 194: returnValue = 16;
  6727  00EFB0  0E00               	movlw	0
  6728  00EFB2  6E08               	movwf	check_food@returnValue+1,c
  6729  00EFB4  0E10               	movlw	16
  6730  00EFB6  D1E2               	goto	L46
  6731  00EFB8                     l195:
  6732                           
  6733                           ;standbyMode.c: 196: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6734  00EFB8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6735  00EFBC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6736  00EFC0  0E02               	movlw	2
  6737  00EFC2  18DE               	xorwf	postinc2,w,c
  6738  00EFC4  10DE               	iorwf	postinc2,w,c
  6739  00EFC6  A4D8               	btfss	status,2,c
  6740  00EFC8  D018               	goto	l197
  6741  00EFCA  EE20 F002          	lfsr	2,2
  6742  00EFCE  5003               	movf	check_food@foodInput,w,c
  6743  00EFD0  26D9               	addwf	fsr2l,f,c
  6744  00EFD2  5004               	movf	check_food@foodInput+1,w,c
  6745  00EFD4  22DA               	addwfc	fsr2h,f,c
  6746  00EFD6  04DE               	decf	postinc2,w,c
  6747  00EFD8  10DE               	iorwf	postinc2,w,c
  6748  00EFDA  A4D8               	btfss	status,2,c
  6749  00EFDC  D00E               	goto	l197
  6750  00EFDE  EE20 F004          	lfsr	2,4
  6751  00EFE2  5003               	movf	check_food@foodInput,w,c
  6752  00EFE4  26D9               	addwf	fsr2l,f,c
  6753  00EFE6  5004               	movf	check_food@foodInput+1,w,c
  6754  00EFE8  22DA               	addwfc	fsr2h,f,c
  6755  00EFEA  04DE               	decf	postinc2,w,c
  6756  00EFEC  10DE               	iorwf	postinc2,w,c
  6757  00EFEE  A4D8               	btfss	status,2,c
  6758  00EFF0  D004               	goto	l197
  6759                           
  6760                           ;standbyMode.c: 197: returnValue = 17;
  6761  00EFF2  0E00               	movlw	0
  6762  00EFF4  6E08               	movwf	check_food@returnValue+1,c
  6763  00EFF6  0E11               	movlw	17
  6764  00EFF8  D1C1               	goto	L46
  6765  00EFFA                     l197:
  6766                           
  6767                           ;standbyMode.c: 199: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6768  00EFFA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6769  00EFFE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6770  00F002  04DE               	decf	postinc2,w,c
  6771  00F004  10DE               	iorwf	postinc2,w,c
  6772  00F006  A4D8               	btfss	status,2,c
  6773  00F008  D019               	goto	l199
  6774  00F00A  EE20 F002          	lfsr	2,2
  6775  00F00E  5003               	movf	check_food@foodInput,w,c
  6776  00F010  26D9               	addwf	fsr2l,f,c
  6777  00F012  5004               	movf	check_food@foodInput+1,w,c
  6778  00F014  22DA               	addwfc	fsr2h,f,c
  6779  00F016  0E02               	movlw	2
  6780  00F018  18DE               	xorwf	postinc2,w,c
  6781  00F01A  10DE               	iorwf	postinc2,w,c
  6782  00F01C  A4D8               	btfss	status,2,c
  6783  00F01E  D00E               	goto	l199
  6784  00F020  EE20 F004          	lfsr	2,4
  6785  00F024  5003               	movf	check_food@foodInput,w,c
  6786  00F026  26D9               	addwf	fsr2l,f,c
  6787  00F028  5004               	movf	check_food@foodInput+1,w,c
  6788  00F02A  22DA               	addwfc	fsr2h,f,c
  6789  00F02C  04DE               	decf	postinc2,w,c
  6790  00F02E  10DE               	iorwf	postinc2,w,c
  6791  00F030  A4D8               	btfss	status,2,c
  6792  00F032  D004               	goto	l199
  6793                           
  6794                           ;standbyMode.c: 200: returnValue = 18;
  6795  00F034  0E00               	movlw	0
  6796  00F036  6E08               	movwf	check_food@returnValue+1,c
  6797  00F038  0E12               	movlw	18
  6798  00F03A  D1A0               	goto	L46
  6799  00F03C                     l199:
  6800                           
  6801                           ;standbyMode.c: 202: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6802  00F03C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6803  00F040  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6804  00F044  04DE               	decf	postinc2,w,c
  6805  00F046  10DE               	iorwf	postinc2,w,c
  6806  00F048  A4D8               	btfss	status,2,c
  6807  00F04A  D1D9               	goto	l150
  6808  00F04C  EE20 F002          	lfsr	2,2
  6809  00F050  5003               	movf	check_food@foodInput,w,c
  6810  00F052  26D9               	addwf	fsr2l,f,c
  6811  00F054  5004               	movf	check_food@foodInput+1,w,c
  6812  00F056  22DA               	addwfc	fsr2h,f,c
  6813  00F058  04DE               	decf	postinc2,w,c
  6814  00F05A  10DE               	iorwf	postinc2,w,c
  6815  00F05C  A4D8               	btfss	status,2,c
  6816  00F05E  D1CF               	goto	l150
  6817  00F060  EE20 F004          	lfsr	2,4
  6818  00F064  5003               	movf	check_food@foodInput,w,c
  6819  00F066  26D9               	addwf	fsr2l,f,c
  6820  00F068  5004               	movf	check_food@foodInput+1,w,c
  6821  00F06A  22DA               	addwfc	fsr2h,f,c
  6822  00F06C  0E02               	movlw	2
  6823  00F06E  18DE               	xorwf	postinc2,w,c
  6824  00F070  10DE               	iorwf	postinc2,w,c
  6825  00F072  A4D8               	btfss	status,2,c
  6826  00F074  D1C4               	goto	l150
  6827                           
  6828                           ;standbyMode.c: 203: returnValue = 19;
  6829  00F076  0E00               	movlw	0
  6830  00F078  6E08               	movwf	check_food@returnValue+1,c
  6831  00F07A  0E13               	movlw	19
  6832  00F07C  D17F               	goto	L46
  6833  00F07E                     
  6834                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1){
  6835  00F07E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6836  00F082  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6837  00F086  04DE               	decf	postinc2,w,c
  6838  00F088  10DE               	iorwf	postinc2,w,c
  6839  00F08A  A4D8               	btfss	status,2,c
  6840  00F08C  D1B8               	goto	l150
  6841  00F08E  EE20 F002          	lfsr	2,2
  6842  00F092  5003               	movf	check_food@foodInput,w,c
  6843  00F094  26D9               	addwf	fsr2l,f,c
  6844  00F096  5004               	movf	check_food@foodInput+1,w,c
  6845  00F098  22DA               	addwfc	fsr2h,f,c
  6846  00F09A  04DE               	decf	postinc2,w,c
  6847  00F09C  10DE               	iorwf	postinc2,w,c
  6848  00F09E  A4D8               	btfss	status,2,c
  6849  00F0A0  D1AE               	goto	l150
  6850                           
  6851                           ;standbyMode.c: 210: if (foodInput[2] == 1 || foodInput[2] == 2){
  6852  00F0A2  EE20 F004          	lfsr	2,4
  6853  00F0A6  5003               	movf	check_food@foodInput,w,c
  6854  00F0A8  26D9               	addwf	fsr2l,f,c
  6855  00F0AA  5004               	movf	check_food@foodInput+1,w,c
  6856  00F0AC  22DA               	addwfc	fsr2h,f,c
  6857  00F0AE  04DE               	decf	postinc2,w,c
  6858  00F0B0  10DE               	iorwf	postinc2,w,c
  6859  00F0B2  B4D8               	btfsc	status,2,c
  6860  00F0B4  D00B               	goto	u4290
  6861  00F0B6  EE20 F004          	lfsr	2,4
  6862  00F0BA  5003               	movf	check_food@foodInput,w,c
  6863  00F0BC  26D9               	addwf	fsr2l,f,c
  6864  00F0BE  5004               	movf	check_food@foodInput+1,w,c
  6865  00F0C0  22DA               	addwfc	fsr2h,f,c
  6866  00F0C2  0E02               	movlw	2
  6867  00F0C4  18DE               	xorwf	postinc2,w,c
  6868  00F0C6  10DE               	iorwf	postinc2,w,c
  6869  00F0C8  A4D8               	btfss	status,2,c
  6870  00F0CA  D199               	goto	l150
  6871  00F0CC                     u4290:
  6872                           
  6873                           ;standbyMode.c: 211: returnValue = 20;
  6874  00F0CC  0E00               	movlw	0
  6875  00F0CE  6E08               	movwf	check_food@returnValue+1,c
  6876  00F0D0  0E14               	movlw	20
  6877  00F0D2  D154               	goto	L46
  6878  00F0D4                     
  6879                           ;standbyMode.c: 218: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  6880  00F0D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6881  00F0D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6882  00F0DC  04DE               	decf	postinc2,w,c
  6883  00F0DE  10DE               	iorwf	postinc2,w,c
  6884  00F0E0  A4D8               	btfss	status,2,c
  6885  00F0E2  D018               	goto	l208
  6886  00F0E4  EE20 F002          	lfsr	2,2
  6887  00F0E8  5003               	movf	check_food@foodInput,w,c
  6888  00F0EA  26D9               	addwf	fsr2l,f,c
  6889  00F0EC  5004               	movf	check_food@foodInput+1,w,c
  6890  00F0EE  22DA               	addwfc	fsr2h,f,c
  6891  00F0F0  04DE               	decf	postinc2,w,c
  6892  00F0F2  10DE               	iorwf	postinc2,w,c
  6893  00F0F4  A4D8               	btfss	status,2,c
  6894  00F0F6  D00E               	goto	l208
  6895  00F0F8  EE20 F004          	lfsr	2,4
  6896  00F0FC  5003               	movf	check_food@foodInput,w,c
  6897  00F0FE  26D9               	addwf	fsr2l,f,c
  6898  00F100  5004               	movf	check_food@foodInput+1,w,c
  6899  00F102  22DA               	addwfc	fsr2h,f,c
  6900  00F104  04DE               	decf	postinc2,w,c
  6901  00F106  10DE               	iorwf	postinc2,w,c
  6902  00F108  A4D8               	btfss	status,2,c
  6903  00F10A  D004               	goto	l208
  6904                           
  6905                           ;standbyMode.c: 219: returnValue = 21;
  6906  00F10C  0E00               	movlw	0
  6907  00F10E  6E08               	movwf	check_food@returnValue+1,c
  6908  00F110  0E15               	movlw	21
  6909  00F112  D134               	goto	L46
  6910  00F114                     l208:
  6911                           
  6912                           ;standbyMode.c: 221: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  6913  00F114  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6914  00F118  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6915  00F11C  0E02               	movlw	2
  6916  00F11E  18DE               	xorwf	postinc2,w,c
  6917  00F120  10DE               	iorwf	postinc2,w,c
  6918  00F122  A4D8               	btfss	status,2,c
  6919  00F124  D018               	goto	l210
  6920  00F126  EE20 F002          	lfsr	2,2
  6921  00F12A  5003               	movf	check_food@foodInput,w,c
  6922  00F12C  26D9               	addwf	fsr2l,f,c
  6923  00F12E  5004               	movf	check_food@foodInput+1,w,c
  6924  00F130  22DA               	addwfc	fsr2h,f,c
  6925  00F132  04DE               	decf	postinc2,w,c
  6926  00F134  10DE               	iorwf	postinc2,w,c
  6927  00F136  A4D8               	btfss	status,2,c
  6928  00F138  D00E               	goto	l210
  6929  00F13A  EE20 F004          	lfsr	2,4
  6930  00F13E  5003               	movf	check_food@foodInput,w,c
  6931  00F140  26D9               	addwf	fsr2l,f,c
  6932  00F142  5004               	movf	check_food@foodInput+1,w,c
  6933  00F144  22DA               	addwfc	fsr2h,f,c
  6934  00F146  04DE               	decf	postinc2,w,c
  6935  00F148  10DE               	iorwf	postinc2,w,c
  6936  00F14A  A4D8               	btfss	status,2,c
  6937  00F14C  D004               	goto	l210
  6938                           
  6939                           ;standbyMode.c: 222: returnValue = 22;
  6940  00F14E  0E00               	movlw	0
  6941  00F150  6E08               	movwf	check_food@returnValue+1,c
  6942  00F152  0E16               	movlw	22
  6943  00F154  D113               	goto	L46
  6944  00F156                     l210:
  6945                           
  6946                           ;standbyMode.c: 224: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  6947  00F156  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6948  00F15A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6949  00F15E  04DE               	decf	postinc2,w,c
  6950  00F160  10DE               	iorwf	postinc2,w,c
  6951  00F162  A4D8               	btfss	status,2,c
  6952  00F164  D019               	goto	l212
  6953  00F166  EE20 F002          	lfsr	2,2
  6954  00F16A  5003               	movf	check_food@foodInput,w,c
  6955  00F16C  26D9               	addwf	fsr2l,f,c
  6956  00F16E  5004               	movf	check_food@foodInput+1,w,c
  6957  00F170  22DA               	addwfc	fsr2h,f,c
  6958  00F172  0E02               	movlw	2
  6959  00F174  18DE               	xorwf	postinc2,w,c
  6960  00F176  10DE               	iorwf	postinc2,w,c
  6961  00F178  A4D8               	btfss	status,2,c
  6962  00F17A  D00E               	goto	l212
  6963  00F17C  EE20 F004          	lfsr	2,4
  6964  00F180  5003               	movf	check_food@foodInput,w,c
  6965  00F182  26D9               	addwf	fsr2l,f,c
  6966  00F184  5004               	movf	check_food@foodInput+1,w,c
  6967  00F186  22DA               	addwfc	fsr2h,f,c
  6968  00F188  04DE               	decf	postinc2,w,c
  6969  00F18A  10DE               	iorwf	postinc2,w,c
  6970  00F18C  A4D8               	btfss	status,2,c
  6971  00F18E  D004               	goto	l212
  6972                           
  6973                           ;standbyMode.c: 225: returnValue = 23;
  6974  00F190  0E00               	movlw	0
  6975  00F192  6E08               	movwf	check_food@returnValue+1,c
  6976  00F194  0E17               	movlw	23
  6977  00F196  D0F2               	goto	L46
  6978  00F198                     l212:
  6979                           
  6980                           ;standbyMode.c: 227: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  6981  00F198  C003  FFD9         	movff	check_food@foodInput,fsr2l
  6982  00F19C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  6983  00F1A0  04DE               	decf	postinc2,w,c
  6984  00F1A2  10DE               	iorwf	postinc2,w,c
  6985  00F1A4  A4D8               	btfss	status,2,c
  6986  00F1A6  D12B               	goto	l150
  6987  00F1A8  EE20 F002          	lfsr	2,2
  6988  00F1AC  5003               	movf	check_food@foodInput,w,c
  6989  00F1AE  26D9               	addwf	fsr2l,f,c
  6990  00F1B0  5004               	movf	check_food@foodInput+1,w,c
  6991  00F1B2  22DA               	addwfc	fsr2h,f,c
  6992  00F1B4  04DE               	decf	postinc2,w,c
  6993  00F1B6  10DE               	iorwf	postinc2,w,c
  6994  00F1B8  A4D8               	btfss	status,2,c
  6995  00F1BA  D121               	goto	l150
  6996  00F1BC  EE20 F004          	lfsr	2,4
  6997  00F1C0  5003               	movf	check_food@foodInput,w,c
  6998  00F1C2  26D9               	addwf	fsr2l,f,c
  6999  00F1C4  5004               	movf	check_food@foodInput+1,w,c
  7000  00F1C6  22DA               	addwfc	fsr2h,f,c
  7001  00F1C8  0E02               	movlw	2
  7002  00F1CA  18DE               	xorwf	postinc2,w,c
  7003  00F1CC  10DE               	iorwf	postinc2,w,c
  7004  00F1CE  A4D8               	btfss	status,2,c
  7005  00F1D0  D116               	goto	l150
  7006                           
  7007                           ;standbyMode.c: 228: returnValue = 24;
  7008  00F1D2  0E00               	movlw	0
  7009  00F1D4  6E08               	movwf	check_food@returnValue+1,c
  7010  00F1D6  0E18               	movlw	24
  7011  00F1D8  D0D1               	goto	L46
  7012  00F1DA                     
  7013                           ;standbyMode.c: 234: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7014  00F1DA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7015  00F1DE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7016  00F1E2  04DE               	decf	postinc2,w,c
  7017  00F1E4  10DE               	iorwf	postinc2,w,c
  7018  00F1E6  A4D8               	btfss	status,2,c
  7019  00F1E8  D10A               	goto	l150
  7020  00F1EA  EE20 F002          	lfsr	2,2
  7021  00F1EE  5003               	movf	check_food@foodInput,w,c
  7022  00F1F0  26D9               	addwf	fsr2l,f,c
  7023  00F1F2  5004               	movf	check_food@foodInput+1,w,c
  7024  00F1F4  22DA               	addwfc	fsr2h,f,c
  7025  00F1F6  04DE               	decf	postinc2,w,c
  7026  00F1F8  10DE               	iorwf	postinc2,w,c
  7027  00F1FA  A4D8               	btfss	status,2,c
  7028  00F1FC  D100               	goto	l150
  7029  00F1FE  EE20 F004          	lfsr	2,4
  7030  00F202  5003               	movf	check_food@foodInput,w,c
  7031  00F204  26D9               	addwf	fsr2l,f,c
  7032  00F206  5004               	movf	check_food@foodInput+1,w,c
  7033  00F208  22DA               	addwfc	fsr2h,f,c
  7034  00F20A  04DE               	decf	postinc2,w,c
  7035  00F20C  10DE               	iorwf	postinc2,w,c
  7036  00F20E  A4D8               	btfss	status,2,c
  7037  00F210  D0F6               	goto	l150
  7038  00F212  EE20 F006          	lfsr	2,6
  7039  00F216  5003               	movf	check_food@foodInput,w,c
  7040  00F218  26D9               	addwf	fsr2l,f,c
  7041  00F21A  5004               	movf	check_food@foodInput+1,w,c
  7042  00F21C  22DA               	addwfc	fsr2h,f,c
  7043  00F21E  04DE               	decf	postinc2,w,c
  7044  00F220  10DE               	iorwf	postinc2,w,c
  7045  00F222  A4D8               	btfss	status,2,c
  7046  00F224  D0EC               	goto	l150
  7047                           
  7048                           ;standbyMode.c: 235: returnValue = 25;
  7049  00F226  0E00               	movlw	0
  7050  00F228  6E08               	movwf	check_food@returnValue+1,c
  7051  00F22A  0E19               	movlw	25
  7052  00F22C  D0A7               	goto	L46
  7053  00F22E                     
  7054                           ;standbyMode.c: 241: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7055  00F22E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7056  00F232  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7057  00F236  04DE               	decf	postinc2,w,c
  7058  00F238  10DE               	iorwf	postinc2,w,c
  7059  00F23A  A4D8               	btfss	status,2,c
  7060  00F23C  D0E0               	goto	l150
  7061  00F23E  EE20 F002          	lfsr	2,2
  7062  00F242  5003               	movf	check_food@foodInput,w,c
  7063  00F244  26D9               	addwf	fsr2l,f,c
  7064  00F246  5004               	movf	check_food@foodInput+1,w,c
  7065  00F248  22DA               	addwfc	fsr2h,f,c
  7066  00F24A  04DE               	decf	postinc2,w,c
  7067  00F24C  10DE               	iorwf	postinc2,w,c
  7068  00F24E  A4D8               	btfss	status,2,c
  7069  00F250  D0D6               	goto	l150
  7070  00F252  EE20 F004          	lfsr	2,4
  7071  00F256  5003               	movf	check_food@foodInput,w,c
  7072  00F258  26D9               	addwf	fsr2l,f,c
  7073  00F25A  5004               	movf	check_food@foodInput+1,w,c
  7074  00F25C  22DA               	addwfc	fsr2h,f,c
  7075  00F25E  04DE               	decf	postinc2,w,c
  7076  00F260  10DE               	iorwf	postinc2,w,c
  7077  00F262  A4D8               	btfss	status,2,c
  7078  00F264  D0CC               	goto	l150
  7079  00F266  EE20 F006          	lfsr	2,6
  7080  00F26A  5003               	movf	check_food@foodInput,w,c
  7081  00F26C  26D9               	addwf	fsr2l,f,c
  7082  00F26E  5004               	movf	check_food@foodInput+1,w,c
  7083  00F270  22DA               	addwfc	fsr2h,f,c
  7084  00F272  04DE               	decf	postinc2,w,c
  7085  00F274  10DE               	iorwf	postinc2,w,c
  7086  00F276  A4D8               	btfss	status,2,c
  7087  00F278  D0C2               	goto	l150
  7088                           
  7089                           ;standbyMode.c: 242: returnValue = 26;
  7090  00F27A  0E00               	movlw	0
  7091  00F27C  6E08               	movwf	check_food@returnValue+1,c
  7092  00F27E  0E1A               	movlw	26
  7093  00F280  D07D               	goto	L46
  7094  00F282                     
  7095                           ;standbyMode.c: 248: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7096  00F282  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7097  00F286  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7098  00F28A  04DE               	decf	postinc2,w,c
  7099  00F28C  10DE               	iorwf	postinc2,w,c
  7100  00F28E  A4D8               	btfss	status,2,c
  7101  00F290  D0B6               	goto	l150
  7102  00F292  EE20 F002          	lfsr	2,2
  7103  00F296  5003               	movf	check_food@foodInput,w,c
  7104  00F298  26D9               	addwf	fsr2l,f,c
  7105  00F29A  5004               	movf	check_food@foodInput+1,w,c
  7106  00F29C  22DA               	addwfc	fsr2h,f,c
  7107  00F29E  04DE               	decf	postinc2,w,c
  7108  00F2A0  10DE               	iorwf	postinc2,w,c
  7109  00F2A2  A4D8               	btfss	status,2,c
  7110  00F2A4  D0AC               	goto	l150
  7111  00F2A6  EE20 F004          	lfsr	2,4
  7112  00F2AA  5003               	movf	check_food@foodInput,w,c
  7113  00F2AC  26D9               	addwf	fsr2l,f,c
  7114  00F2AE  5004               	movf	check_food@foodInput+1,w,c
  7115  00F2B0  22DA               	addwfc	fsr2h,f,c
  7116  00F2B2  04DE               	decf	postinc2,w,c
  7117  00F2B4  10DE               	iorwf	postinc2,w,c
  7118  00F2B6  A4D8               	btfss	status,2,c
  7119  00F2B8  D0A2               	goto	l150
  7120  00F2BA  EE20 F006          	lfsr	2,6
  7121  00F2BE  5003               	movf	check_food@foodInput,w,c
  7122  00F2C0  26D9               	addwf	fsr2l,f,c
  7123  00F2C2  5004               	movf	check_food@foodInput+1,w,c
  7124  00F2C4  22DA               	addwfc	fsr2h,f,c
  7125  00F2C6  04DE               	decf	postinc2,w,c
  7126  00F2C8  10DE               	iorwf	postinc2,w,c
  7127  00F2CA  A4D8               	btfss	status,2,c
  7128  00F2CC  D098               	goto	l150
  7129                           
  7130                           ;standbyMode.c: 249: returnValue = 27;
  7131  00F2CE  0E00               	movlw	0
  7132  00F2D0  6E08               	movwf	check_food@returnValue+1,c
  7133  00F2D2  0E1B               	movlw	27
  7134  00F2D4  D053               	goto	L46
  7135  00F2D6                     
  7136                           ;standbyMode.c: 255: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7137  00F2D6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7138  00F2DA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7139  00F2DE  04DE               	decf	postinc2,w,c
  7140  00F2E0  10DE               	iorwf	postinc2,w,c
  7141  00F2E2  A4D8               	btfss	status,2,c
  7142  00F2E4  D08C               	goto	l150
  7143  00F2E6  EE20 F002          	lfsr	2,2
  7144  00F2EA  5003               	movf	check_food@foodInput,w,c
  7145  00F2EC  26D9               	addwf	fsr2l,f,c
  7146  00F2EE  5004               	movf	check_food@foodInput+1,w,c
  7147  00F2F0  22DA               	addwfc	fsr2h,f,c
  7148  00F2F2  04DE               	decf	postinc2,w,c
  7149  00F2F4  10DE               	iorwf	postinc2,w,c
  7150  00F2F6  A4D8               	btfss	status,2,c
  7151  00F2F8  D082               	goto	l150
  7152  00F2FA  EE20 F004          	lfsr	2,4
  7153  00F2FE  5003               	movf	check_food@foodInput,w,c
  7154  00F300  26D9               	addwf	fsr2l,f,c
  7155  00F302  5004               	movf	check_food@foodInput+1,w,c
  7156  00F304  22DA               	addwfc	fsr2h,f,c
  7157  00F306  04DE               	decf	postinc2,w,c
  7158  00F308  10DE               	iorwf	postinc2,w,c
  7159  00F30A  A4D8               	btfss	status,2,c
  7160  00F30C  D078               	goto	l150
  7161  00F30E  EE20 F006          	lfsr	2,6
  7162  00F312  5003               	movf	check_food@foodInput,w,c
  7163  00F314  26D9               	addwf	fsr2l,f,c
  7164  00F316  5004               	movf	check_food@foodInput+1,w,c
  7165  00F318  22DA               	addwfc	fsr2h,f,c
  7166  00F31A  04DE               	decf	postinc2,w,c
  7167  00F31C  10DE               	iorwf	postinc2,w,c
  7168  00F31E  A4D8               	btfss	status,2,c
  7169  00F320  D06E               	goto	l150
  7170                           
  7171                           ;standbyMode.c: 256: returnValue = 28;
  7172  00F322  0E00               	movlw	0
  7173  00F324  6E08               	movwf	check_food@returnValue+1,c
  7174  00F326  0E1C               	movlw	28
  7175  00F328  D029               	goto	L46
  7176  00F32A                     
  7177                           ;standbyMode.c: 262: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  7178  00F32A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  7179  00F32E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  7180  00F332  04DE               	decf	postinc2,w,c
  7181  00F334  10DE               	iorwf	postinc2,w,c
  7182  00F336  A4D8               	btfss	status,2,c
  7183  00F338  D062               	goto	l150
  7184  00F33A  EE20 F002          	lfsr	2,2
  7185  00F33E  5003               	movf	check_food@foodInput,w,c
  7186  00F340  26D9               	addwf	fsr2l,f,c
  7187  00F342  5004               	movf	check_food@foodInput+1,w,c
  7188  00F344  22DA               	addwfc	fsr2h,f,c
  7189  00F346  04DE               	decf	postinc2,w,c
  7190  00F348  10DE               	iorwf	postinc2,w,c
  7191  00F34A  A4D8               	btfss	status,2,c
  7192  00F34C  D058               	goto	l150
  7193  00F34E  EE20 F004          	lfsr	2,4
  7194  00F352  5003               	movf	check_food@foodInput,w,c
  7195  00F354  26D9               	addwf	fsr2l,f,c
  7196  00F356  5004               	movf	check_food@foodInput+1,w,c
  7197  00F358  22DA               	addwfc	fsr2h,f,c
  7198  00F35A  04DE               	decf	postinc2,w,c
  7199  00F35C  10DE               	iorwf	postinc2,w,c
  7200  00F35E  A4D8               	btfss	status,2,c
  7201  00F360  D04E               	goto	l150
  7202  00F362  EE20 F006          	lfsr	2,6
  7203  00F366  5003               	movf	check_food@foodInput,w,c
  7204  00F368  26D9               	addwf	fsr2l,f,c
  7205  00F36A  5004               	movf	check_food@foodInput+1,w,c
  7206  00F36C  22DA               	addwfc	fsr2h,f,c
  7207  00F36E  04DE               	decf	postinc2,w,c
  7208  00F370  10DE               	iorwf	postinc2,w,c
  7209  00F372  A4D8               	btfss	status,2,c
  7210  00F374  D044               	goto	l150
  7211                           
  7212                           ;standbyMode.c: 263: returnValue = 29;
  7213  00F376  0E00               	movlw	0
  7214  00F378  6E08               	movwf	check_food@returnValue+1,c
  7215  00F37A  0E1D               	movlw	29
  7216  00F37C                     L46:
  7217  00F37C  6E07               	movwf	check_food@returnValue,c
  7218                           
  7219                           ;standbyMode.c: 270: }
  7220                           
  7221                           ;standbyMode.c: 269: break;
  7222                           
  7223                           ;standbyMode.c: 268: default:
  7224                           
  7225                           ;standbyMode.c: 264: }
  7226                           ;standbyMode.c: 265: break;
  7227  00F37E  D03F               	goto	l150
  7228  00F380                     l145:
  7229  00F380  C001  F005         	movff	check_food@sum,??_check_food
  7230  00F384  C002  F006         	movff	check_food@sum+1,??_check_food+1
  7231                           
  7232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7233                           ; Switch size 1, requested type "space"
  7234                           ; Number of cases is 1, Range of values is 0 to 0
  7235                           ; switch strategies available:
  7236                           ; Name         Instructions Cycles
  7237                           ; simple_byte            4     3 (average)
  7238                           ;	Chosen strategy is simple_byte
  7239  00F388  5006               	movf	??_check_food+1,w,c
  7240  00F38A  0A00               	xorlw	0	; case 0
  7241  00F38C  A4D8               	btfss	status,2,c
  7242  00F38E  D037               	goto	l150
  7243                           
  7244                           ; Switch size 1, requested type "space"
  7245                           ; Number of cases is 18, Range of values is 3 to 43
  7246                           ; switch strategies available:
  7247                           ; Name         Instructions Cycles
  7248                           ; simple_byte           55    28 (average)
  7249                           ;	Chosen strategy is simple_byte
  7250  00F390  5005               	movf	??_check_food,w,c
  7251  00F392  0A03               	xorlw	3	; case 3
  7252  00F394  B4D8               	btfsc	status,2,c
  7253  00F396  D424               	goto	l146
  7254  00F398  0A04               	xorlw	4	; case 7
  7255  00F39A  B4D8               	btfsc	status,2,c
  7256  00F39C  D436               	goto	l151
  7257  00F39E  0A0D               	xorlw	13	; case 10
  7258  00F3A0  B4D8               	btfsc	status,2,c
  7259  00F3A2  D466               	goto	l159
  7260  00F3A4  0A06               	xorlw	6	; case 12
  7261  00F3A6  B4D8               	btfsc	status,2,c
  7262  00F3A8  D445               	goto	l155
  7263  00F3AA  0A01               	xorlw	1	; case 13
  7264  00F3AC  B4D8               	btfsc	status,2,c
  7265  00F3AE  D4E2               	goto	l171
  7266  00F3B0  0A02               	xorlw	2	; case 15
  7267  00F3B2  B4D8               	btfsc	status,2,c
  7268  00F3B4  D487               	goto	l161
  7269  00F3B6  0A1E               	xorlw	30	; case 17
  7270  00F3B8  B4D8               	btfsc	status,2,c
  7271  00F3BA  D532               	goto	l181
  7272  00F3BC  0A03               	xorlw	3	; case 18
  7273  00F3BE  B4D8               	btfsc	status,2,c
  7274  00F3C0  D504               	goto	l176
  7275  00F3C2  0A01               	xorlw	1	; case 19
  7276  00F3C4  B4D8               	btfsc	status,2,c
  7277  00F3C6  D4AA               	goto	l166
  7278  00F3C8  0A05               	xorlw	5	; case 22
  7279  00F3CA  B4D8               	btfsc	status,2,c
  7280  00F3CC  D5D5               	goto	l194
  7281  00F3CE  0A0F               	xorlw	15	; case 25
  7282  00F3D0  B4D8               	btfsc	status,2,c
  7283  00F3D2  D703               	goto	l215
  7284  00F3D4  0A03               	xorlw	3	; case 26
  7285  00F3D6  B4D8               	btfsc	status,2,c
  7286  00F3D8  D652               	goto	l202
  7287  00F3DA  0A01               	xorlw	1	; case 27
  7288  00F3DC  B4D8               	btfsc	status,2,c
  7289  00F3DE  D549               	goto	l186
  7290  00F3E0  0A06               	xorlw	6	; case 29
  7291  00F3E2  B4D8               	btfsc	status,2,c
  7292  00F3E4  D724               	goto	l217
  7293  00F3E6  0A02               	xorlw	2	; case 31
  7294  00F3E8  B4D8               	btfsc	status,2,c
  7295  00F3EA  D674               	goto	l207
  7296  00F3EC  0A3D               	xorlw	61	; case 34
  7297  00F3EE  B4D8               	btfsc	status,2,c
  7298  00F3F0  D748               	goto	l219
  7299  00F3F2  0A05               	xorlw	5	; case 39
  7300  00F3F4  B4D8               	btfsc	status,2,c
  7301  00F3F6  D76F               	goto	l221
  7302  00F3F8  0A0C               	xorlw	12	; case 43
  7303  00F3FA  B4D8               	btfsc	status,2,c
  7304  00F3FC  D796               	goto	l223
  7305  00F3FE                     l150:
  7306                           
  7307                           ;standbyMode.c: 271: return returnValue;
  7308  00F3FE  C007  F001         	movff	check_food@returnValue,?_check_food
  7309  00F402  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  7310  00F406  0012               	return		;funcret
  7311  00F408                     __end_of_check_food:
  7312                           	opt stack 0
  7313                           tblptru	equ	0xFF8
  7314                           tblptrh	equ	0xFF7
  7315                           tblptrl	equ	0xFF6
  7316                           tablat	equ	0xFF5
  7317                           prodh	equ	0xFF4
  7318                           prodl	equ	0xFF3
  7319                           intcon	equ	0xFF2
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           plusw1	equ	0xFE3
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           plusw2	equ	0xFDB
  7327                           fsr2h	equ	0xFDA
  7328                           fsr2l	equ	0xFD9
  7329                           status	equ	0xFD8
  7330                           
  7331 ;; *************** function _diet_press *****************
  7332 ;; Defined at:
  7333 ;;		line 648 in file "standbyMode.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  drawer          2   36[COMRAM] unsigned int 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;  keypress        1   50[COMRAM] unsigned char 
  7338 ;;  dietTable       8   51[COMRAM] unsigned int [4]
  7339 ;;  sum             2   48[COMRAM] unsigned int 
  7340 ;;  count           2   46[COMRAM] unsigned int 
  7341 ;;  backCheck       2   44[COMRAM] unsigned int 
  7342 ;;  i               2   42[COMRAM] unsigned int 
  7343 ;;  previous        2   40[COMRAM] unsigned int 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  2   36[COMRAM] unsigned int 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;Total ram usage:       23 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    3
  7360 ;; This function calls:
  7361 ;;		_lcdInst
  7362 ;;		_printf
  7363 ;;		_putch
  7364 ;; This function is called by:
  7365 ;;		_standbyMode
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text14
  7370  00E6B0                     __ptext14:
  7371                           	opt stack 0
  7372  00E6B0                     _diet_press:
  7373                           	opt stack 26
  7374                           
  7375                           ;incstack = 0
  7376                           ;standbyMode.c: 651: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  7377  00E6B0  0E01               	movlw	1
  7378  00E6B2  EC2B  F069         	call	_lcdInst
  7379  00E6B6  0EC3               	movlw	195
  7380  00E6B8  6E27               	movwf	??_diet_press& (0+255),c
  7381  00E6BA  0ECD               	movlw	205
  7382  00E6BC                     u7417:
  7383  00E6BC  2EE8               	decfsz	wreg,f,c
  7384  00E6BE  D7FE               	bra	u7417
  7385  00E6C0  2E27               	decfsz	??_diet_press& (0+255),f,c
  7386  00E6C2  D7FC               	bra	u7417
  7387  00E6C4  F000               	nop	
  7388                           
  7389                           ;standbyMode.c: 652: printf("Drawer %i diet:", drawer);
  7390  00E6C6  0E3D               	movlw	low STR_34
  7391  00E6C8  6E0D               	movwf	printf@f,c
  7392  00E6CA  0EFE               	movlw	high STR_34
  7393  00E6CC  6E0E               	movwf	printf@f+1,c
  7394  00E6CE  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7395  00E6D2  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7396  00E6D6  ECAF  F06F         	call	_printf	;wreg free
  7397                           
  7398                           ;standbyMode.c: 653: lcdInst(0xC0);;
  7399  00E6DA  0EC0               	movlw	192
  7400  00E6DC  EC2B  F069         	call	_lcdInst
  7401                           
  7402                           ;standbyMode.c: 655: unsigned int count = 0;
  7403  00E6E0  0E00               	movlw	0
  7404  00E6E2  6E30               	movwf	diet_press@count+1,c
  7405  00E6E4  0E00               	movlw	0
  7406  00E6E6  6E2F               	movwf	diet_press@count,c
  7407                           
  7408                           ;standbyMode.c: 656: unsigned int previous = 0;
  7409  00E6E8  0E00               	movlw	0
  7410  00E6EA  6E2A               	movwf	diet_press@previous+1,c
  7411  00E6EC  0E00               	movlw	0
  7412  00E6EE  6E29               	movwf	diet_press@previous,c
  7413                           
  7414                           ;standbyMode.c: 657: unsigned int sum = 0;
  7415  00E6F0  0E00               	movlw	0
  7416  00E6F2  6E32               	movwf	diet_press@sum+1,c
  7417  00E6F4  0E00               	movlw	0
  7418  00E6F6  6E31               	movwf	diet_press@sum,c
  7419                           
  7420                           ;standbyMode.c: 658: unsigned int i = 0;
  7421  00E6F8  0E00               	movlw	0
  7422  00E6FA  6E2C               	movwf	diet_press@i+1,c
  7423  00E6FC  0E00               	movlw	0
  7424  00E6FE  6E2B               	movwf	diet_press@i,c
  7425                           
  7426                           ;standbyMode.c: 659: unsigned int dietTable[4] = {0, 0, 0, 0};
  7427  00E700  EE20  F090         	lfsr	2,diet_press@F3130
  7428  00E704  EE10  F034         	lfsr	1,diet_press@dietTable
  7429  00E708  0E07               	movlw	7
  7430  00E70A                     u5081:
  7431  00E70A  CFDB FFE3          	movff	plusw2,plusw1
  7432  00E70E  06E8               	decf	wreg,f,c
  7433  00E710  E2FC               	bc	u5081
  7434                           
  7435                           ;standbyMode.c: 660: unsigned int backCheck = 0;
  7436  00E712  0E00               	movlw	0
  7437  00E714  6E2E               	movwf	diet_press@backCheck+1,c
  7438  00E716  0E00               	movlw	0
  7439  00E718  6E2D               	movwf	diet_press@backCheck,c
  7440  00E71A                     l351:
  7441  00E71A  A281               	btfss	3969,1,c	;volatile
  7442  00E71C  D7FE               	goto	l350
  7443                           
  7444                           ;standbyMode.c: 664: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7445  00E71E  3881               	swapf	3969,w,c	;volatile
  7446  00E720  0B0F               	andlw	15
  7447  00E722  0B0F               	andlw	15
  7448  00E724  6E33               	movwf	diet_press@keypress,c
  7449  00E726  B281               	btfsc	3969,1,c	;volatile
  7450  00E728  D7FE               	goto	l355
  7451                           
  7452                           ;standbyMode.c: 667: if(keypress == 15){
  7453  00E72A  0E0F               	movlw	15
  7454  00E72C  1833               	xorwf	diet_press@keypress,w,c
  7455  00E72E  B4D8               	btfsc	status,2,c
  7456  00E730  D080               	goto	l358
  7457                           
  7458                           ;standbyMode.c: 670: else if (keypress == 14){
  7459                           
  7460                           ;standbyMode.c: 669: }
  7461                           
  7462                           ;standbyMode.c: 668: break;
  7463  00E732  0E0E               	movlw	14
  7464  00E734  1833               	xorwf	diet_press@keypress,w,c
  7465  00E736  A4D8               	btfss	status,2,c
  7466  00E738  D005               	goto	l360
  7467                           
  7468                           ;standbyMode.c: 671: backCheck = 1;
  7469  00E73A  0E00               	movlw	0
  7470  00E73C  6E2E               	movwf	diet_press@backCheck+1,c
  7471  00E73E  0E01               	movlw	1
  7472  00E740  6E2D               	movwf	diet_press@backCheck,c
  7473                           
  7474                           ;standbyMode.c: 672: break;
  7475  00E742  D077               	goto	l358
  7476  00E744                     l360:
  7477                           
  7478                           ;standbyMode.c: 674: else if (keypress == 12){
  7479  00E744  0E0C               	movlw	12
  7480  00E746  1833               	xorwf	diet_press@keypress,w,c
  7481  00E748  A4D8               	btfss	status,2,c
  7482  00E74A  D02D               	goto	l362
  7483                           
  7484                           ;standbyMode.c: 675: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7485  00E74C  0E01               	movlw	1
  7486  00E74E  EC2B  F069         	call	_lcdInst
  7487  00E752  0EC3               	movlw	195
  7488  00E754  6E27               	movwf	??_diet_press& (0+255),c
  7489  00E756  0ECD               	movlw	205
  7490  00E758                     u7427:
  7491  00E758  2EE8               	decfsz	wreg,f,c
  7492  00E75A  D7FE               	bra	u7427
  7493  00E75C  2E27               	decfsz	??_diet_press& (0+255),f,c
  7494  00E75E  D7FC               	bra	u7427
  7495  00E760  F000               	nop	
  7496                           
  7497                           ;standbyMode.c: 676: printf("Drawer %i diet:", drawer);
  7498  00E762  0E3D               	movlw	low STR_34
  7499  00E764  6E0D               	movwf	printf@f,c
  7500  00E766  0EFE               	movlw	high STR_34
  7501  00E768  6E0E               	movwf	printf@f+1,c
  7502  00E76A  C025  F00F         	movff	diet_press@drawer,?_printf+2
  7503  00E76E  C026  F010         	movff	diet_press@drawer+1,?_printf+3
  7504  00E772  ECAF  F06F         	call	_printf	;wreg free
  7505                           
  7506                           ;standbyMode.c: 677: lcdInst(0xC0);;
  7507  00E776  0EC0               	movlw	192
  7508  00E778  EC2B  F069         	call	_lcdInst
  7509                           
  7510                           ;standbyMode.c: 678: count = 0;
  7511  00E77C  0E00               	movlw	0
  7512  00E77E  6E30               	movwf	diet_press@count+1,c
  7513  00E780  0E00               	movlw	0
  7514  00E782  6E2F               	movwf	diet_press@count,c
  7515                           
  7516                           ;standbyMode.c: 679: dietTable[0] = 0;
  7517  00E784  0E00               	movlw	0
  7518  00E786  6E35               	movwf	diet_press@dietTable+1,c
  7519  00E788  0E00               	movlw	0
  7520  00E78A  6E34               	movwf	diet_press@dietTable,c
  7521                           
  7522                           ;standbyMode.c: 680: dietTable[1] = 0;
  7523  00E78C  0E00               	movlw	0
  7524  00E78E  6E37               	movwf	diet_press@dietTable+3,c
  7525  00E790  0E00               	movlw	0
  7526  00E792  6E36               	movwf	diet_press@dietTable+2,c
  7527                           
  7528                           ;standbyMode.c: 681: dietTable[2] = 0;
  7529  00E794  0E00               	movlw	0
  7530  00E796  6E39               	movwf	diet_press@dietTable+5,c
  7531  00E798  0E00               	movlw	0
  7532  00E79A  6E38               	movwf	diet_press@dietTable+4,c
  7533                           
  7534                           ;standbyMode.c: 682: dietTable[3] = 0;
  7535  00E79C  0E00               	movlw	0
  7536  00E79E  6E3B               	movwf	diet_press@dietTable+7,c
  7537  00E7A0  0E00               	movlw	0
  7538  00E7A2  6E3A               	movwf	diet_press@dietTable+6,c
  7539                           
  7540                           ;standbyMode.c: 683: }
  7541  00E7A4  D7BA               	goto	l350
  7542  00E7A6                     l362:
  7543                           
  7544                           ;standbyMode.c: 684: else if (count <= 3){
  7545  00E7A6  5030               	movf	diet_press@count+1,w,c
  7546  00E7A8  E1B8               	bnz	l351
  7547  00E7AA  0E04               	movlw	4
  7548  00E7AC  5C2F               	subwf	diet_press@count,w,c
  7549  00E7AE  B0D8               	btfsc	status,0,c
  7550  00E7B0  D7B4               	goto	l350
  7551                           
  7552                           ;standbyMode.c: 685: if (keypress == 3 || keypress == 7){
  7553  00E7B2  0E03               	movlw	3
  7554  00E7B4  1833               	xorwf	diet_press@keypress,w,c
  7555  00E7B6  B4D8               	btfsc	status,2,c
  7556  00E7B8  D004               	goto	u5160
  7557  00E7BA  0E07               	movlw	7
  7558  00E7BC  1833               	xorwf	diet_press@keypress,w,c
  7559  00E7BE  A4D8               	btfss	status,2,c
  7560  00E7C0  D013               	goto	l365
  7561  00E7C2                     u5160:
  7562                           
  7563                           ;standbyMode.c: 686: putch(input[keypress]);
  7564  00E7C2  5033               	movf	diet_press@keypress,w,c
  7565  00E7C4  0D01               	mullw	1
  7566  00E7C6  0E34               	movlw	low _input
  7567  00E7C8  24F3               	addwf	prodl,w,c
  7568  00E7CA  6EF6               	movwf	tblptrl,c
  7569  00E7CC  0EFD               	movlw	high _input
  7570  00E7CE  20F4               	addwfc	prodh,w,c
  7571  00E7D0  6EF7               	movwf	tblptrh,c
  7572  00E7D2                     	if	0	;There are less than 3 active tblptr bytes
  7573  00E7D2                     	endif
  7574  00E7D2  0008               	tblrd		*
  7575  00E7D4  50F5               	movf	tablat,w,c
  7576  00E7D6  EC35  F069         	call	_putch
  7577                           
  7578                           ;standbyMode.c: 687: dietTable[count] = keypress;
  7579  00E7DA  5033               	movf	diet_press@keypress,w,c
  7580  00E7DC  6E27               	movwf	??_diet_press& (0+255),c
  7581  00E7DE  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7582  00E7E0  D01A               	goto	L65
  7583  00E7E2                     l4344:
  7584                           
  7585                           ;standbyMode.c: 688: count += 1;
  7586  00E7E2  4A2F               	infsnz	diet_press@count,f,c
  7587  00E7E4  2A30               	incf	diet_press@count+1,f,c
  7588                           
  7589                           ;standbyMode.c: 689: }
  7590  00E7E6  D799               	goto	l350
  7591  00E7E8                     l365:
  7592                           
  7593                           ;standbyMode.c: 690: else if (keypress == 11){
  7594  00E7E8  0E0B               	movlw	11
  7595  00E7EA  1833               	xorwf	diet_press@keypress,w,c
  7596  00E7EC  A4D8               	btfss	status,2,c
  7597  00E7EE  D795               	goto	l350
  7598                           
  7599                           ;standbyMode.c: 691: putch(input[keypress]);
  7600  00E7F0  5033               	movf	diet_press@keypress,w,c
  7601  00E7F2  0D01               	mullw	1
  7602  00E7F4  0E34               	movlw	low _input
  7603  00E7F6  24F3               	addwf	prodl,w,c
  7604  00E7F8  6EF6               	movwf	tblptrl,c
  7605  00E7FA  0EFD               	movlw	high _input
  7606  00E7FC  20F4               	addwfc	prodh,w,c
  7607  00E7FE  6EF7               	movwf	tblptrh,c
  7608  00E800                     	if	0	;There are less than 3 active tblptr bytes
  7609  00E800                     	endif
  7610  00E800  0008               	tblrd		*
  7611  00E802  50F5               	movf	tablat,w,c
  7612  00E804  EC35  F069         	call	_putch
  7613                           
  7614                           ;standbyMode.c: 692: dietTable[count] = keypress + 1;
  7615  00E808  5033               	movf	diet_press@keypress,w,c
  7616  00E80A  6E27               	movwf	??_diet_press& (0+255),c
  7617  00E80C  6A28               	clrf	(??_diet_press+1)& (0+255),c
  7618  00E80E  0E01               	movlw	1
  7619  00E810  2627               	addwf	??_diet_press,f,c
  7620  00E812  0E00               	movlw	0
  7621  00E814  2228               	addwfc	??_diet_press+1,f,c
  7622  00E816                     L65:
  7623  00E816  90D8               	bcf	status,0,c
  7624  00E818  342F               	rlcf	diet_press@count,w,c
  7625  00E81A  6ED9               	movwf	fsr2l,c
  7626  00E81C  3430               	rlcf	diet_press@count+1,w,c
  7627  00E81E  6EDA               	movwf	fsr2h,c
  7628  00E820  0E34               	movlw	low diet_press@dietTable
  7629  00E822  26D9               	addwf	fsr2l,f,c
  7630  00E824  0E00               	movlw	high diet_press@dietTable
  7631  00E826  22DA               	addwfc	fsr2h,f,c
  7632  00E828  C027  FFDE         	movff	??_diet_press,postinc2
  7633  00E82C  C028  FFDD         	movff	??_diet_press+1,postdec2
  7634  00E830  D7D8               	goto	l4344
  7635  00E832                     l358:
  7636                           
  7637                           ;standbyMode.c: 694: }
  7638                           ;standbyMode.c: 695: }
  7639                           ;standbyMode.c: 696: }
  7640                           ;standbyMode.c: 698: if (backCheck == 1){
  7641  00E832  042D               	decf	diet_press@backCheck,w,c
  7642  00E834  102E               	iorwf	diet_press@backCheck+1,w,c
  7643  00E836  A4D8               	btfss	status,2,c
  7644  00E838  D004               	goto	l371
  7645                           
  7646                           ;standbyMode.c: 699: sum = 100;
  7647  00E83A  0E00               	movlw	0
  7648  00E83C  6E32               	movwf	diet_press@sum+1,c
  7649  00E83E  0E64               	movlw	100
  7650  00E840  D199               	goto	L64
  7651  00E842                     l371:
  7652                           
  7653                           ;standbyMode.c: 703: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7654  00E842  0E0C               	movlw	12
  7655  00E844  1834               	xorwf	diet_press@dietTable,w,c
  7656  00E846  1035               	iorwf	diet_press@dietTable+1,w,c
  7657  00E848  A4D8               	btfss	status,2,c
  7658  00E84A  D010               	goto	l373
  7659  00E84C  5036               	movf	diet_press@dietTable+2,w,c
  7660  00E84E  1037               	iorwf	diet_press@dietTable+3,w,c
  7661  00E850  A4D8               	btfss	status,2,c
  7662  00E852  D00C               	goto	l373
  7663  00E854  5038               	movf	diet_press@dietTable+4,w,c
  7664  00E856  1039               	iorwf	diet_press@dietTable+5,w,c
  7665  00E858  A4D8               	btfss	status,2,c
  7666  00E85A  D008               	goto	l373
  7667  00E85C  503A               	movf	diet_press@dietTable+6,w,c
  7668  00E85E  103B               	iorwf	diet_press@dietTable+7,w,c
  7669  00E860  A4D8               	btfss	status,2,c
  7670  00E862  D004               	goto	l373
  7671                           
  7672                           ;standbyMode.c: 704: sum = 12;
  7673  00E864  0E00               	movlw	0
  7674  00E866  6E32               	movwf	diet_press@sum+1,c
  7675  00E868  0E0C               	movlw	12
  7676  00E86A  D184               	goto	L64
  7677  00E86C                     l373:
  7678                           
  7679                           ;standbyMode.c: 708: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7680  00E86C  0E03               	movlw	3
  7681  00E86E  1834               	xorwf	diet_press@dietTable,w,c
  7682  00E870  1035               	iorwf	diet_press@dietTable+1,w,c
  7683  00E872  A4D8               	btfss	status,2,c
  7684  00E874  D010               	goto	l375
  7685  00E876  5036               	movf	diet_press@dietTable+2,w,c
  7686  00E878  1037               	iorwf	diet_press@dietTable+3,w,c
  7687  00E87A  A4D8               	btfss	status,2,c
  7688  00E87C  D00C               	goto	l375
  7689  00E87E  5038               	movf	diet_press@dietTable+4,w,c
  7690  00E880  1039               	iorwf	diet_press@dietTable+5,w,c
  7691  00E882  A4D8               	btfss	status,2,c
  7692  00E884  D008               	goto	l375
  7693  00E886  503A               	movf	diet_press@dietTable+6,w,c
  7694  00E888  103B               	iorwf	diet_press@dietTable+7,w,c
  7695  00E88A  A4D8               	btfss	status,2,c
  7696  00E88C  D004               	goto	l375
  7697                           
  7698                           ;standbyMode.c: 709: sum = 3;
  7699  00E88E  0E00               	movlw	0
  7700  00E890  6E32               	movwf	diet_press@sum+1,c
  7701  00E892  0E03               	movlw	3
  7702  00E894  D16F               	goto	L64
  7703  00E896                     l375:
  7704                           
  7705                           ;standbyMode.c: 713: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7706  00E896  0E07               	movlw	7
  7707  00E898  1834               	xorwf	diet_press@dietTable,w,c
  7708  00E89A  1035               	iorwf	diet_press@dietTable+1,w,c
  7709  00E89C  A4D8               	btfss	status,2,c
  7710  00E89E  D010               	goto	l377
  7711  00E8A0  5036               	movf	diet_press@dietTable+2,w,c
  7712  00E8A2  1037               	iorwf	diet_press@dietTable+3,w,c
  7713  00E8A4  A4D8               	btfss	status,2,c
  7714  00E8A6  D00C               	goto	l377
  7715  00E8A8  5038               	movf	diet_press@dietTable+4,w,c
  7716  00E8AA  1039               	iorwf	diet_press@dietTable+5,w,c
  7717  00E8AC  A4D8               	btfss	status,2,c
  7718  00E8AE  D008               	goto	l377
  7719  00E8B0  503A               	movf	diet_press@dietTable+6,w,c
  7720  00E8B2  103B               	iorwf	diet_press@dietTable+7,w,c
  7721  00E8B4  A4D8               	btfss	status,2,c
  7722  00E8B6  D004               	goto	l377
  7723                           
  7724                           ;standbyMode.c: 714: sum = 7;
  7725  00E8B8  0E00               	movlw	0
  7726  00E8BA  6E32               	movwf	diet_press@sum+1,c
  7727  00E8BC  0E07               	movlw	7
  7728  00E8BE  D15A               	goto	L64
  7729  00E8C0                     l377:
  7730                           
  7731                           ;standbyMode.c: 718: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  7732  00E8C0  0E03               	movlw	3
  7733  00E8C2  1834               	xorwf	diet_press@dietTable,w,c
  7734  00E8C4  1035               	iorwf	diet_press@dietTable+1,w,c
  7735  00E8C6  A4D8               	btfss	status,2,c
  7736  00E8C8  D011               	goto	l379
  7737  00E8CA  0E07               	movlw	7
  7738  00E8CC  1836               	xorwf	diet_press@dietTable+2,w,c
  7739  00E8CE  1037               	iorwf	diet_press@dietTable+3,w,c
  7740  00E8D0  A4D8               	btfss	status,2,c
  7741  00E8D2  D00C               	goto	l379
  7742  00E8D4  5038               	movf	diet_press@dietTable+4,w,c
  7743  00E8D6  1039               	iorwf	diet_press@dietTable+5,w,c
  7744  00E8D8  A4D8               	btfss	status,2,c
  7745  00E8DA  D008               	goto	l379
  7746  00E8DC  503A               	movf	diet_press@dietTable+6,w,c
  7747  00E8DE  103B               	iorwf	diet_press@dietTable+7,w,c
  7748  00E8E0  A4D8               	btfss	status,2,c
  7749  00E8E2  D004               	goto	l379
  7750                           
  7751                           ;standbyMode.c: 719: sum = 10;
  7752  00E8E4  0E00               	movlw	0
  7753  00E8E6  6E32               	movwf	diet_press@sum+1,c
  7754  00E8E8  0E0A               	movlw	10
  7755  00E8EA  D144               	goto	L64
  7756  00E8EC                     l379:
  7757                           
  7758                           ;standbyMode.c: 723: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7759  00E8EC  0E03               	movlw	3
  7760  00E8EE  1834               	xorwf	diet_press@dietTable,w,c
  7761  00E8F0  1035               	iorwf	diet_press@dietTable+1,w,c
  7762  00E8F2  A4D8               	btfss	status,2,c
  7763  00E8F4  D011               	goto	l381
  7764  00E8F6  0E0C               	movlw	12
  7765  00E8F8  1836               	xorwf	diet_press@dietTable+2,w,c
  7766  00E8FA  1037               	iorwf	diet_press@dietTable+3,w,c
  7767  00E8FC  A4D8               	btfss	status,2,c
  7768  00E8FE  D00C               	goto	l381
  7769  00E900  5038               	movf	diet_press@dietTable+4,w,c
  7770  00E902  1039               	iorwf	diet_press@dietTable+5,w,c
  7771  00E904  A4D8               	btfss	status,2,c
  7772  00E906  D008               	goto	l381
  7773  00E908  503A               	movf	diet_press@dietTable+6,w,c
  7774  00E90A  103B               	iorwf	diet_press@dietTable+7,w,c
  7775  00E90C  A4D8               	btfss	status,2,c
  7776  00E90E  D004               	goto	l381
  7777                           
  7778                           ;standbyMode.c: 724: sum = 15;
  7779  00E910  0E00               	movlw	0
  7780  00E912  6E32               	movwf	diet_press@sum+1,c
  7781  00E914  0E0F               	movlw	15
  7782  00E916  D12E               	goto	L64
  7783  00E918                     l381:
  7784                           
  7785                           ;standbyMode.c: 728: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  7786  00E918  0E07               	movlw	7
  7787  00E91A  1834               	xorwf	diet_press@dietTable,w,c
  7788  00E91C  1035               	iorwf	diet_press@dietTable+1,w,c
  7789  00E91E  A4D8               	btfss	status,2,c
  7790  00E920  D011               	goto	l383
  7791  00E922  0E0C               	movlw	12
  7792  00E924  1836               	xorwf	diet_press@dietTable+2,w,c
  7793  00E926  1037               	iorwf	diet_press@dietTable+3,w,c
  7794  00E928  A4D8               	btfss	status,2,c
  7795  00E92A  D00C               	goto	l383
  7796  00E92C  5038               	movf	diet_press@dietTable+4,w,c
  7797  00E92E  1039               	iorwf	diet_press@dietTable+5,w,c
  7798  00E930  A4D8               	btfss	status,2,c
  7799  00E932  D008               	goto	l383
  7800  00E934  503A               	movf	diet_press@dietTable+6,w,c
  7801  00E936  103B               	iorwf	diet_press@dietTable+7,w,c
  7802  00E938  A4D8               	btfss	status,2,c
  7803  00E93A  D004               	goto	l383
  7804                           
  7805                           ;standbyMode.c: 729: sum = 19;
  7806  00E93C  0E00               	movlw	0
  7807  00E93E  6E32               	movwf	diet_press@sum+1,c
  7808  00E940  0E13               	movlw	19
  7809  00E942  D118               	goto	L64
  7810  00E944                     l383:
  7811                           
  7812                           ;standbyMode.c: 733: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7813  00E944  0E03               	movlw	3
  7814  00E946  1834               	xorwf	diet_press@dietTable,w,c
  7815  00E948  1035               	iorwf	diet_press@dietTable+1,w,c
  7816  00E94A  A4D8               	btfss	status,2,c
  7817  00E94C  D012               	goto	l385
  7818  00E94E  0E03               	movlw	3
  7819  00E950  1836               	xorwf	diet_press@dietTable+2,w,c
  7820  00E952  1037               	iorwf	diet_press@dietTable+3,w,c
  7821  00E954  A4D8               	btfss	status,2,c
  7822  00E956  D00D               	goto	l385
  7823  00E958  0E07               	movlw	7
  7824  00E95A  1838               	xorwf	diet_press@dietTable+4,w,c
  7825  00E95C  1039               	iorwf	diet_press@dietTable+5,w,c
  7826  00E95E  A4D8               	btfss	status,2,c
  7827  00E960  D008               	goto	l385
  7828  00E962  503A               	movf	diet_press@dietTable+6,w,c
  7829  00E964  103B               	iorwf	diet_press@dietTable+7,w,c
  7830  00E966  A4D8               	btfss	status,2,c
  7831  00E968  D004               	goto	l385
  7832                           
  7833                           ;standbyMode.c: 734: sum = 13;
  7834  00E96A  0E00               	movlw	0
  7835  00E96C  6E32               	movwf	diet_press@sum+1,c
  7836  00E96E  0E0D               	movlw	13
  7837  00E970  D101               	goto	L64
  7838  00E972                     l385:
  7839                           
  7840                           ;standbyMode.c: 738: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7841  00E972  0E03               	movlw	3
  7842  00E974  1834               	xorwf	diet_press@dietTable,w,c
  7843  00E976  1035               	iorwf	diet_press@dietTable+1,w,c
  7844  00E978  A4D8               	btfss	status,2,c
  7845  00E97A  D012               	goto	l387
  7846  00E97C  0E03               	movlw	3
  7847  00E97E  1836               	xorwf	diet_press@dietTable+2,w,c
  7848  00E980  1037               	iorwf	diet_press@dietTable+3,w,c
  7849  00E982  A4D8               	btfss	status,2,c
  7850  00E984  D00D               	goto	l387
  7851  00E986  0E0C               	movlw	12
  7852  00E988  1838               	xorwf	diet_press@dietTable+4,w,c
  7853  00E98A  1039               	iorwf	diet_press@dietTable+5,w,c
  7854  00E98C  A4D8               	btfss	status,2,c
  7855  00E98E  D008               	goto	l387
  7856  00E990  503A               	movf	diet_press@dietTable+6,w,c
  7857  00E992  103B               	iorwf	diet_press@dietTable+7,w,c
  7858  00E994  A4D8               	btfss	status,2,c
  7859  00E996  D004               	goto	l387
  7860                           
  7861                           ;standbyMode.c: 739: sum = 18;
  7862  00E998  0E00               	movlw	0
  7863  00E99A  6E32               	movwf	diet_press@sum+1,c
  7864  00E99C  0E12               	movlw	18
  7865  00E99E  D0EA               	goto	L64
  7866  00E9A0                     l387:
  7867                           
  7868                           ;standbyMode.c: 743: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  7869  00E9A0  0E03               	movlw	3
  7870  00E9A2  1834               	xorwf	diet_press@dietTable,w,c
  7871  00E9A4  1035               	iorwf	diet_press@dietTable+1,w,c
  7872  00E9A6  A4D8               	btfss	status,2,c
  7873  00E9A8  D012               	goto	l389
  7874  00E9AA  0E07               	movlw	7
  7875  00E9AC  1836               	xorwf	diet_press@dietTable+2,w,c
  7876  00E9AE  1037               	iorwf	diet_press@dietTable+3,w,c
  7877  00E9B0  A4D8               	btfss	status,2,c
  7878  00E9B2  D00D               	goto	l389
  7879  00E9B4  0E07               	movlw	7
  7880  00E9B6  1838               	xorwf	diet_press@dietTable+4,w,c
  7881  00E9B8  1039               	iorwf	diet_press@dietTable+5,w,c
  7882  00E9BA  A4D8               	btfss	status,2,c
  7883  00E9BC  D008               	goto	l389
  7884  00E9BE  503A               	movf	diet_press@dietTable+6,w,c
  7885  00E9C0  103B               	iorwf	diet_press@dietTable+7,w,c
  7886  00E9C2  A4D8               	btfss	status,2,c
  7887  00E9C4  D004               	goto	l389
  7888                           
  7889                           ;standbyMode.c: 744: sum = 17;
  7890  00E9C6  0E00               	movlw	0
  7891  00E9C8  6E32               	movwf	diet_press@sum+1,c
  7892  00E9CA  0E11               	movlw	17
  7893  00E9CC  D0D3               	goto	L64
  7894  00E9CE                     l389:
  7895                           
  7896                           ;standbyMode.c: 748: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7897  00E9CE  0E03               	movlw	3
  7898  00E9D0  1834               	xorwf	diet_press@dietTable,w,c
  7899  00E9D2  1035               	iorwf	diet_press@dietTable+1,w,c
  7900  00E9D4  A4D8               	btfss	status,2,c
  7901  00E9D6  D012               	goto	l391
  7902  00E9D8  0E0C               	movlw	12
  7903  00E9DA  1836               	xorwf	diet_press@dietTable+2,w,c
  7904  00E9DC  1037               	iorwf	diet_press@dietTable+3,w,c
  7905  00E9DE  A4D8               	btfss	status,2,c
  7906  00E9E0  D00D               	goto	l391
  7907  00E9E2  0E0C               	movlw	12
  7908  00E9E4  1838               	xorwf	diet_press@dietTable+4,w,c
  7909  00E9E6  1039               	iorwf	diet_press@dietTable+5,w,c
  7910  00E9E8  A4D8               	btfss	status,2,c
  7911  00E9EA  D008               	goto	l391
  7912  00E9EC  503A               	movf	diet_press@dietTable+6,w,c
  7913  00E9EE  103B               	iorwf	diet_press@dietTable+7,w,c
  7914  00E9F0  A4D8               	btfss	status,2,c
  7915  00E9F2  D004               	goto	l391
  7916                           
  7917                           ;standbyMode.c: 749: sum = 27;
  7918  00E9F4  0E00               	movlw	0
  7919  00E9F6  6E32               	movwf	diet_press@sum+1,c
  7920  00E9F8  0E1B               	movlw	27
  7921  00E9FA  D0BC               	goto	L64
  7922  00E9FC                     l391:
  7923                           
  7924                           ;standbyMode.c: 753: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7925  00E9FC  0E03               	movlw	3
  7926  00E9FE  1834               	xorwf	diet_press@dietTable,w,c
  7927  00EA00  1035               	iorwf	diet_press@dietTable+1,w,c
  7928  00EA02  A4D8               	btfss	status,2,c
  7929  00EA04  D012               	goto	l393
  7930  00EA06  0E07               	movlw	7
  7931  00EA08  1836               	xorwf	diet_press@dietTable+2,w,c
  7932  00EA0A  1037               	iorwf	diet_press@dietTable+3,w,c
  7933  00EA0C  A4D8               	btfss	status,2,c
  7934  00EA0E  D00D               	goto	l393
  7935  00EA10  0E0C               	movlw	12
  7936  00EA12  1838               	xorwf	diet_press@dietTable+4,w,c
  7937  00EA14  1039               	iorwf	diet_press@dietTable+5,w,c
  7938  00EA16  A4D8               	btfss	status,2,c
  7939  00EA18  D008               	goto	l393
  7940  00EA1A  503A               	movf	diet_press@dietTable+6,w,c
  7941  00EA1C  103B               	iorwf	diet_press@dietTable+7,w,c
  7942  00EA1E  A4D8               	btfss	status,2,c
  7943  00EA20  D004               	goto	l393
  7944                           
  7945                           ;standbyMode.c: 754: sum = 22;
  7946  00EA22  0E00               	movlw	0
  7947  00EA24  6E32               	movwf	diet_press@sum+1,c
  7948  00EA26  0E16               	movlw	22
  7949  00EA28  D0A5               	goto	L64
  7950  00EA2A                     l393:
  7951                           
  7952                           ;standbyMode.c: 758: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  7953  00EA2A  0E07               	movlw	7
  7954  00EA2C  1834               	xorwf	diet_press@dietTable,w,c
  7955  00EA2E  1035               	iorwf	diet_press@dietTable+1,w,c
  7956  00EA30  A4D8               	btfss	status,2,c
  7957  00EA32  D012               	goto	l395
  7958  00EA34  0E07               	movlw	7
  7959  00EA36  1836               	xorwf	diet_press@dietTable+2,w,c
  7960  00EA38  1037               	iorwf	diet_press@dietTable+3,w,c
  7961  00EA3A  A4D8               	btfss	status,2,c
  7962  00EA3C  D00D               	goto	l395
  7963  00EA3E  0E0C               	movlw	12
  7964  00EA40  1838               	xorwf	diet_press@dietTable+4,w,c
  7965  00EA42  1039               	iorwf	diet_press@dietTable+5,w,c
  7966  00EA44  A4D8               	btfss	status,2,c
  7967  00EA46  D008               	goto	l395
  7968  00EA48  503A               	movf	diet_press@dietTable+6,w,c
  7969  00EA4A  103B               	iorwf	diet_press@dietTable+7,w,c
  7970  00EA4C  A4D8               	btfss	status,2,c
  7971  00EA4E  D004               	goto	l395
  7972                           
  7973                           ;standbyMode.c: 759: sum = 26;
  7974  00EA50  0E00               	movlw	0
  7975  00EA52  6E32               	movwf	diet_press@sum+1,c
  7976  00EA54  0E1A               	movlw	26
  7977  00EA56  D08E               	goto	L64
  7978  00EA58                     l395:
  7979                           
  7980                           ;standbyMode.c: 763: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  7981  00EA58  0E07               	movlw	7
  7982  00EA5A  1834               	xorwf	diet_press@dietTable,w,c
  7983  00EA5C  1035               	iorwf	diet_press@dietTable+1,w,c
  7984  00EA5E  A4D8               	btfss	status,2,c
  7985  00EA60  D012               	goto	l397
  7986  00EA62  0E0C               	movlw	12
  7987  00EA64  1836               	xorwf	diet_press@dietTable+2,w,c
  7988  00EA66  1037               	iorwf	diet_press@dietTable+3,w,c
  7989  00EA68  A4D8               	btfss	status,2,c
  7990  00EA6A  D00D               	goto	l397
  7991  00EA6C  0E0C               	movlw	12
  7992  00EA6E  1838               	xorwf	diet_press@dietTable+4,w,c
  7993  00EA70  1039               	iorwf	diet_press@dietTable+5,w,c
  7994  00EA72  A4D8               	btfss	status,2,c
  7995  00EA74  D008               	goto	l397
  7996  00EA76  503A               	movf	diet_press@dietTable+6,w,c
  7997  00EA78  103B               	iorwf	diet_press@dietTable+7,w,c
  7998  00EA7A  A4D8               	btfss	status,2,c
  7999  00EA7C  D004               	goto	l397
  8000                           
  8001                           ;standbyMode.c: 764: sum = 31;
  8002  00EA7E  0E00               	movlw	0
  8003  00EA80  6E32               	movwf	diet_press@sum+1,c
  8004  00EA82  0E1F               	movlw	31
  8005  00EA84  D077               	goto	L64
  8006  00EA86                     l397:
  8007                           
  8008                           ;standbyMode.c: 768: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  8009  00EA86  0E03               	movlw	3
  8010  00EA88  1834               	xorwf	diet_press@dietTable,w,c
  8011  00EA8A  1035               	iorwf	diet_press@dietTable+1,w,c
  8012  00EA8C  A4D8               	btfss	status,2,c
  8013  00EA8E  D013               	goto	l399
  8014  00EA90  0E03               	movlw	3
  8015  00EA92  1836               	xorwf	diet_press@dietTable+2,w,c
  8016  00EA94  1037               	iorwf	diet_press@dietTable+3,w,c
  8017  00EA96  A4D8               	btfss	status,2,c
  8018  00EA98  D00E               	goto	l399
  8019  00EA9A  0E07               	movlw	7
  8020  00EA9C  1838               	xorwf	diet_press@dietTable+4,w,c
  8021  00EA9E  1039               	iorwf	diet_press@dietTable+5,w,c
  8022  00EAA0  A4D8               	btfss	status,2,c
  8023  00EAA2  D009               	goto	l399
  8024  00EAA4  0E0C               	movlw	12
  8025  00EAA6  183A               	xorwf	diet_press@dietTable+6,w,c
  8026  00EAA8  103B               	iorwf	diet_press@dietTable+7,w,c
  8027  00EAAA  A4D8               	btfss	status,2,c
  8028  00EAAC  D004               	goto	l399
  8029                           
  8030                           ;standbyMode.c: 769: sum = 25;
  8031  00EAAE  0E00               	movlw	0
  8032  00EAB0  6E32               	movwf	diet_press@sum+1,c
  8033  00EAB2  0E19               	movlw	25
  8034  00EAB4  D05F               	goto	L64
  8035  00EAB6                     l399:
  8036                           
  8037                           ;standbyMode.c: 773: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  8038  00EAB6  0E03               	movlw	3
  8039  00EAB8  1834               	xorwf	diet_press@dietTable,w,c
  8040  00EABA  1035               	iorwf	diet_press@dietTable+1,w,c
  8041  00EABC  A4D8               	btfss	status,2,c
  8042  00EABE  D013               	goto	l401
  8043  00EAC0  0E07               	movlw	7
  8044  00EAC2  1836               	xorwf	diet_press@dietTable+2,w,c
  8045  00EAC4  1037               	iorwf	diet_press@dietTable+3,w,c
  8046  00EAC6  A4D8               	btfss	status,2,c
  8047  00EAC8  D00E               	goto	l401
  8048  00EACA  0E07               	movlw	7
  8049  00EACC  1838               	xorwf	diet_press@dietTable+4,w,c
  8050  00EACE  1039               	iorwf	diet_press@dietTable+5,w,c
  8051  00EAD0  A4D8               	btfss	status,2,c
  8052  00EAD2  D009               	goto	l401
  8053  00EAD4  0E0C               	movlw	12
  8054  00EAD6  183A               	xorwf	diet_press@dietTable+6,w,c
  8055  00EAD8  103B               	iorwf	diet_press@dietTable+7,w,c
  8056  00EADA  A4D8               	btfss	status,2,c
  8057  00EADC  D004               	goto	l401
  8058                           
  8059                           ;standbyMode.c: 774: sum = 29;
  8060  00EADE  0E00               	movlw	0
  8061  00EAE0  6E32               	movwf	diet_press@sum+1,c
  8062  00EAE2  0E1D               	movlw	29
  8063  00EAE4  D047               	goto	L64
  8064  00EAE6                     l401:
  8065                           
  8066                           ;standbyMode.c: 778: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  8067  00EAE6  0E03               	movlw	3
  8068  00EAE8  1834               	xorwf	diet_press@dietTable,w,c
  8069  00EAEA  1035               	iorwf	diet_press@dietTable+1,w,c
  8070  00EAEC  A4D8               	btfss	status,2,c
  8071  00EAEE  D013               	goto	l403
  8072  00EAF0  0E07               	movlw	7
  8073  00EAF2  1836               	xorwf	diet_press@dietTable+2,w,c
  8074  00EAF4  1037               	iorwf	diet_press@dietTable+3,w,c
  8075  00EAF6  A4D8               	btfss	status,2,c
  8076  00EAF8  D00E               	goto	l403
  8077  00EAFA  0E0C               	movlw	12
  8078  00EAFC  1838               	xorwf	diet_press@dietTable+4,w,c
  8079  00EAFE  1039               	iorwf	diet_press@dietTable+5,w,c
  8080  00EB00  A4D8               	btfss	status,2,c
  8081  00EB02  D009               	goto	l403
  8082  00EB04  0E0C               	movlw	12
  8083  00EB06  183A               	xorwf	diet_press@dietTable+6,w,c
  8084  00EB08  103B               	iorwf	diet_press@dietTable+7,w,c
  8085  00EB0A  A4D8               	btfss	status,2,c
  8086  00EB0C  D004               	goto	l403
  8087                           
  8088                           ;standbyMode.c: 779: sum = 34;
  8089  00EB0E  0E00               	movlw	0
  8090  00EB10  6E32               	movwf	diet_press@sum+1,c
  8091  00EB12  0E22               	movlw	34
  8092  00EB14  D02F               	goto	L64
  8093  00EB16                     l403:
  8094                           
  8095                           ;standbyMode.c: 783: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  8096  00EB16  0E03               	movlw	3
  8097  00EB18  1834               	xorwf	diet_press@dietTable,w,c
  8098  00EB1A  1035               	iorwf	diet_press@dietTable+1,w,c
  8099  00EB1C  A4D8               	btfss	status,2,c
  8100  00EB1E  D013               	goto	l405
  8101  00EB20  0E0C               	movlw	12
  8102  00EB22  1836               	xorwf	diet_press@dietTable+2,w,c
  8103  00EB24  1037               	iorwf	diet_press@dietTable+3,w,c
  8104  00EB26  A4D8               	btfss	status,2,c
  8105  00EB28  D00E               	goto	l405
  8106  00EB2A  0E0C               	movlw	12
  8107  00EB2C  1838               	xorwf	diet_press@dietTable+4,w,c
  8108  00EB2E  1039               	iorwf	diet_press@dietTable+5,w,c
  8109  00EB30  A4D8               	btfss	status,2,c
  8110  00EB32  D009               	goto	l405
  8111  00EB34  0E0C               	movlw	12
  8112  00EB36  183A               	xorwf	diet_press@dietTable+6,w,c
  8113  00EB38  103B               	iorwf	diet_press@dietTable+7,w,c
  8114  00EB3A  A4D8               	btfss	status,2,c
  8115  00EB3C  D004               	goto	l405
  8116                           
  8117                           ;standbyMode.c: 784: sum = 39;
  8118  00EB3E  0E00               	movlw	0
  8119  00EB40  6E32               	movwf	diet_press@sum+1,c
  8120  00EB42  0E27               	movlw	39
  8121  00EB44  D017               	goto	L64
  8122  00EB46                     l405:
  8123                           
  8124                           ;standbyMode.c: 788: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  8125  00EB46  0E07               	movlw	7
  8126  00EB48  1834               	xorwf	diet_press@dietTable,w,c
  8127  00EB4A  1035               	iorwf	diet_press@dietTable+1,w,c
  8128  00EB4C  A4D8               	btfss	status,2,c
  8129  00EB4E  D014               	goto	l407
  8130  00EB50  0E0C               	movlw	12
  8131  00EB52  1836               	xorwf	diet_press@dietTable+2,w,c
  8132  00EB54  1037               	iorwf	diet_press@dietTable+3,w,c
  8133  00EB56  A4D8               	btfss	status,2,c
  8134  00EB58  D00F               	goto	l407
  8135  00EB5A  0E0C               	movlw	12
  8136  00EB5C  1838               	xorwf	diet_press@dietTable+4,w,c
  8137  00EB5E  1039               	iorwf	diet_press@dietTable+5,w,c
  8138  00EB60  A4D8               	btfss	status,2,c
  8139  00EB62  D00A               	goto	l407
  8140  00EB64  0E0C               	movlw	12
  8141  00EB66  183A               	xorwf	diet_press@dietTable+6,w,c
  8142  00EB68  103B               	iorwf	diet_press@dietTable+7,w,c
  8143  00EB6A  A4D8               	btfss	status,2,c
  8144  00EB6C  D005               	goto	l407
  8145                           
  8146                           ;standbyMode.c: 789: sum = 43;
  8147  00EB6E  0E00               	movlw	0
  8148  00EB70  6E32               	movwf	diet_press@sum+1,c
  8149  00EB72  0E2B               	movlw	43
  8150  00EB74                     L64:
  8151  00EB74  6E31               	movwf	diet_press@sum,c
  8152                           
  8153                           ;standbyMode.c: 790: }
  8154  00EB76  D02A               	goto	l408
  8155  00EB78                     l407:
  8156                           
  8157                           ;standbyMode.c: 793: else{
  8158                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8159  00EB78  0E01               	movlw	1
  8160  00EB7A  EC2B  F069         	call	_lcdInst
  8161  00EB7E  0EC3               	movlw	195
  8162  00EB80  6E27               	movwf	??_diet_press& (0+255),c
  8163  00EB82  0ECD               	movlw	205
  8164  00EB84                     u7437:
  8165  00EB84  2EE8               	decfsz	wreg,f,c
  8166  00EB86  D7FE               	bra	u7437
  8167  00EB88  2E27               	decfsz	??_diet_press& (0+255),f,c
  8168  00EB8A  D7FC               	bra	u7437
  8169  00EB8C  F000               	nop	
  8170                           
  8171                           ;standbyMode.c: 795: printf("Invalid diet!");
  8172  00EB8E  0E12               	movlw	low STR_36
  8173  00EB90  6E0D               	movwf	printf@f,c
  8174  00EB92  0EFF               	movlw	high STR_36
  8175  00EB94  6E0E               	movwf	printf@f+1,c
  8176  00EB96  ECAF  F06F         	call	_printf	;wreg free
  8177                           
  8178                           ;standbyMode.c: 796: lcdInst(0xC0);;
  8179  00EB9A  0EC0               	movlw	192
  8180  00EB9C  EC2B  F069         	call	_lcdInst
  8181                           
  8182                           ;standbyMode.c: 797: printf("Try again.");
  8183  00EBA0  0E9E               	movlw	low STR_33
  8184  00EBA2  6E0D               	movwf	printf@f,c
  8185  00EBA4  0EFF               	movlw	high STR_33
  8186  00EBA6  6E0E               	movwf	printf@f+1,c
  8187  00EBA8  ECAF  F06F         	call	_printf	;wreg free
  8188                           
  8189                           ;standbyMode.c: 798: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8190  00EBAC  0E33               	movlw	51
  8191  00EBAE  6E28               	movwf	(??_diet_press+1)& (0+255),c
  8192  00EBB0  0EBB               	movlw	187
  8193  00EBB2  6E27               	movwf	??_diet_press& (0+255),c
  8194  00EBB4  0EE0               	movlw	224
  8195  00EBB6                     u7447:
  8196  00EBB6  2EE8               	decfsz	wreg,f,c
  8197  00EBB8  D7FE               	bra	u7447
  8198  00EBBA  2E27               	decfsz	??_diet_press& (0+255),f,c
  8199  00EBBC  D7FC               	bra	u7447
  8200  00EBBE  2E28               	decfsz	(??_diet_press+1)& (0+255),f,c
  8201  00EBC0  D7FA               	bra	u7447
  8202                           
  8203                           ;standbyMode.c: 799: sum = 0;
  8204  00EBC2  0E00               	movlw	0
  8205  00EBC4  6E32               	movwf	diet_press@sum+1,c
  8206  00EBC6  0E00               	movlw	0
  8207  00EBC8  6E31               	movwf	diet_press@sum,c
  8208                           
  8209                           ;standbyMode.c: 800: goto START;
  8210  00EBCA  D572               	goto	_diet_press
  8211  00EBCC                     l408:
  8212                           
  8213                           ;standbyMode.c: 801: }
  8214                           ;standbyMode.c: 802: return sum;
  8215  00EBCC  C031  F025         	movff	diet_press@sum,?_diet_press
  8216  00EBD0  C032  F026         	movff	diet_press@sum+1,?_diet_press+1
  8217  00EBD4  0012               	return		;funcret
  8218  00EBD6                     __end_of_diet_press:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           plusw1	equ	0xFE3
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           plusw2	equ	0xFDB
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _printf *****************
  8239 ;; Defined at:
  8240 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8243 ;;		 -> STR_69(11), STR_68(13), STR_67(11), STR_66(13), 
  8244 ;;		 -> STR_65(11), STR_64(8), STR_63(15), STR_62(16), 
  8245 ;;		 -> STR_61(10), STR_60(8), STR_59(15), STR_58(16), 
  8246 ;;		 -> STR_57(10), STR_56(16), STR_55(16), STR_54(17), 
  8247 ;;		 -> STR_53(13), STR_52(17), STR_51(14), STR_50(11), 
  8248 ;;		 -> STR_49(11), STR_48(15), STR_47(15), STR_46(10), 
  8249 ;;		 -> STR_45(13), STR_44(16), STR_43(16), STR_42(17), 
  8250 ;;		 -> STR_41(17), STR_40(8), STR_39(15), STR_38(15), 
  8251 ;;		 -> STR_37(11), STR_36(14), STR_35(16), STR_34(16), 
  8252 ;;		 -> STR_33(11), STR_32(14), STR_31(16), STR_30(16), 
  8253 ;;		 -> STR_29(16), STR_28(13), STR_27(13), STR_26(15), 
  8254 ;;		 -> STR_25(15), STR_24(17), STR_23(18), STR_22(15), 
  8255 ;;		 -> STR_21(11), STR_20(7), STR_19(3), STR_18(16), 
  8256 ;;		 -> STR_17(8), STR_16(16), STR_15(15), STR_14(6), 
  8257 ;;		 -> STR_13(14), STR_12(17), STR_11(7), STR_10(9), 
  8258 ;;		 -> STR_9(17), STR_8(11), STR_7(17), STR_6(14), 
  8259 ;;		 -> STR_5(17), STR_4(11), STR_3(15), STR_2(11), 
  8260 ;;		 -> STR_1(8), 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  idx             1   26[COMRAM] unsigned char 
  8263 ;;  tmpval          4    0        struct .
  8264 ;;  cp              3    0        PTR const unsigned char 
  8265 ;;  width           2   33[COMRAM] int 
  8266 ;;  val             2   30[COMRAM] unsigned int 
  8267 ;;  ap              2   27[COMRAM] PTR void [1]
  8268 ;;		 -> ?_printf(2), 
  8269 ;;  len             2    0        unsigned int 
  8270 ;;  c               1   35[COMRAM] char 
  8271 ;;  flag            1   32[COMRAM] unsigned char 
  8272 ;;  prec            1   29[COMRAM] char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  2   12[COMRAM] int 
  8275 ;; Registers used:
  8276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8282 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;Total ram usage:       24 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    2
  8289 ;; This function calls:
  8290 ;;		___lwdiv
  8291 ;;		___lwmod
  8292 ;;		___wmul
  8293 ;;		_isdigit
  8294 ;;		_putch
  8295 ;; This function is called by:
  8296 ;;		_viewLogs
  8297 ;;		_displayLogs
  8298 ;;		_food_press
  8299 ;;		_diet_press
  8300 ;;		_which_drawer
  8301 ;;		_standbyMode
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text15
  8306  00DF5E                     __ptext15:
  8307                           	opt stack 0
  8308  00DF5E                     _printf:
  8309                           	opt stack 26
  8310                           
  8311                           ;doprnt.c: 466: va_list ap;
  8312                           ;doprnt.c: 499: signed char c;
  8313                           ;doprnt.c: 501: int width;
  8314                           ;doprnt.c: 506: signed char prec;
  8315                           ;doprnt.c: 508: unsigned char flag;
  8316                           ;doprnt.c: 523: union {
  8317                           ;doprnt.c: 524: unsigned long vd;
  8318                           ;doprnt.c: 525: double integ;
  8319                           ;doprnt.c: 526: } tmpval;
  8320                           ;doprnt.c: 528: unsigned int val;
  8321                           ;doprnt.c: 529: unsigned len;
  8322                           ;doprnt.c: 530: const char * cp;
  8323                           ;doprnt.c: 533: *ap = __va_start();
  8324                           
  8325                           ;incstack = 0
  8326  00DF5E  0E0F               	movlw	low (?_printf+2)
  8327  00DF60  6E1C               	movwf	printf@ap,c
  8328  00DF62  0E00               	movlw	high (?_printf+2)
  8329  00DF64  6E1D               	movwf	printf@ap+1,c
  8330                           
  8331                           ;doprnt.c: 536: while(c = *f++) {
  8332  00DF66  D174               	goto	u3690
  8333  00DF68                     
  8334                           ;doprnt.c: 538: if(c != '%')
  8335  00DF68  0E25               	movlw	37
  8336  00DF6A  1824               	xorwf	printf@c,w,c
  8337  00DF6C  B4D8               	btfsc	status,2,c
  8338  00DF6E  D004               	goto	l681
  8339                           
  8340                           ;doprnt.c: 540: {
  8341                           ;doprnt.c: 541: (putch(c) );
  8342  00DF70  5024               	movf	printf@c,w,c
  8343  00DF72  EC35  F069         	call	_putch
  8344                           
  8345                           ;doprnt.c: 542: continue;
  8346  00DF76  D16C               	goto	u3690
  8347  00DF78                     l681:
  8348                           
  8349                           ;doprnt.c: 543: }
  8350                           ;doprnt.c: 546: width = 0;
  8351  00DF78  0E00               	movlw	0
  8352  00DF7A  6E23               	movwf	printf@width+1,c
  8353  00DF7C  0E00               	movlw	0
  8354  00DF7E  6E22               	movwf	printf@width,c
  8355                           
  8356                           ;doprnt.c: 548: flag = 0;
  8357  00DF80  0E00               	movlw	0
  8358  00DF82  6E21               	movwf	printf@flag,c
  8359                           
  8360                           ;doprnt.c: 551: switch(*f) {
  8361                           
  8362                           ;doprnt.c: 550: for(;;) {
  8363  00DF84  D003               	goto	l683
  8364  00DF86                     
  8365                           ;doprnt.c: 580: flag |= 0x04;
  8366  00DF86  8421               	bsf	printf@flag,2,c
  8367                           
  8368                           ;doprnt.c: 581: f++;
  8369  00DF88  4A0D               	infsnz	printf@f,f,c
  8370  00DF8A  2A0E               	incf	printf@f+1,f,c
  8371  00DF8C                     l683:
  8372  00DF8C  C00D  FFF6         	movff	printf@f,tblptrl
  8373  00DF90  C00E  FFF7         	movff	printf@f+1,tblptrh
  8374  00DF94                     	if	0	;tblptru may be non-zero
  8375  00DF94                     	endif
  8376  00DF94                     	if	0	;tblptru may be non-zero
  8377  00DF94                     	endif
  8378  00DF94  0008               	tblrd		*
  8379  00DF96  50F5               	movf	tablat,w,c
  8380                           
  8381                           ; Switch size 1, requested type "space"
  8382                           ; Number of cases is 1, Range of values is 48 to 48
  8383                           ; switch strategies available:
  8384                           ; Name         Instructions Cycles
  8385                           ; simple_byte            4     3 (average)
  8386                           ;	Chosen strategy is simple_byte
  8387  00DF98  0A30               	xorlw	48	; case 48
  8388  00DF9A  B4D8               	btfsc	status,2,c
  8389  00DF9C  D7F4               	goto	l684
  8390                           
  8391                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8392                           
  8393                           ;doprnt.c: 586: }
  8394                           
  8395                           ;doprnt.c: 585: break;
  8396  00DF9E  C00D  FFF6         	movff	printf@f,tblptrl
  8397  00DFA2  C00E  FFF7         	movff	printf@f+1,tblptrh
  8398  00DFA6                     	if	0	;tblptru may be non-zero
  8399  00DFA6                     	endif
  8400  00DFA6                     	if	0	;tblptru may be non-zero
  8401  00DFA6                     	endif
  8402  00DFA6  0008               	tblrd		*
  8403  00DFA8  50F5               	movf	tablat,w,c
  8404  00DFAA  EC49  F069         	call	_isdigit
  8405  00DFAE  A0D8               	btfss	status,0,c
  8406  00DFB0  D035               	goto	l691
  8407                           
  8408                           ;doprnt.c: 598: width = 0;
  8409  00DFB2  0E00               	movlw	0
  8410  00DFB4  6E23               	movwf	printf@width+1,c
  8411  00DFB6  0E00               	movlw	0
  8412  00DFB8  6E22               	movwf	printf@width,c
  8413  00DFBA                     
  8414                           ;doprnt.c: 600: width *= 10;
  8415  00DFBA  C022  F001         	movff	printf@width,___wmul@multiplier
  8416  00DFBE  C023  F002         	movff	printf@width+1,___wmul@multiplier+1
  8417  00DFC2  0E00               	movlw	0
  8418  00DFC4  6E04               	movwf	___wmul@multiplicand+1,c
  8419  00DFC6  0E0A               	movlw	10
  8420  00DFC8  6E03               	movwf	___wmul@multiplicand,c
  8421  00DFCA  EC7B  F069         	call	___wmul	;wreg free
  8422  00DFCE  C001  F022         	movff	?___wmul,printf@width
  8423  00DFD2  C002  F023         	movff	?___wmul+1,printf@width+1
  8424                           
  8425                           ;doprnt.c: 601: width += *f++ - '0';
  8426  00DFD6  0ED0               	movlw	208
  8427  00DFD8  6E17               	movwf	??_printf& (0+255),c
  8428  00DFDA  0EFF               	movlw	255
  8429  00DFDC  6E18               	movwf	(??_printf+1)& (0+255),c
  8430  00DFDE  C00D  FFF6         	movff	printf@f,tblptrl
  8431  00DFE2  C00E  FFF7         	movff	printf@f+1,tblptrh
  8432  00DFE6                     	if	0	;tblptru may be non-zero
  8433  00DFE6                     	endif
  8434  00DFE6                     	if	0	;tblptru may be non-zero
  8435  00DFE6                     	endif
  8436  00DFE6  0008               	tblrd		*
  8437  00DFE8  50F5               	movf	tablat,w,c
  8438  00DFEA  6E19               	movwf	(??_printf+2)& (0+255),c
  8439  00DFEC  6A1A               	clrf	(??_printf+3)& (0+255),c
  8440  00DFEE  5017               	movf	??_printf,w,c
  8441  00DFF0  2619               	addwf	??_printf+2,f,c
  8442  00DFF2  5018               	movf	??_printf+1,w,c
  8443  00DFF4  221A               	addwfc	??_printf+3,f,c
  8444  00DFF6  5019               	movf	??_printf+2,w,c
  8445  00DFF8  2622               	addwf	printf@width,f,c
  8446  00DFFA  501A               	movf	??_printf+3,w,c
  8447  00DFFC  2223               	addwfc	printf@width+1,f,c
  8448  00DFFE  4A0D               	infsnz	printf@f,f,c
  8449  00E000  2A0E               	incf	printf@f+1,f,c
  8450                           
  8451                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8452  00E002  C00D  FFF6         	movff	printf@f,tblptrl
  8453  00E006  C00E  FFF7         	movff	printf@f+1,tblptrh
  8454  00E00A                     	if	0	;tblptru may be non-zero
  8455  00E00A                     	endif
  8456  00E00A                     	if	0	;tblptru may be non-zero
  8457  00E00A                     	endif
  8458  00E00A  0008               	tblrd		*
  8459  00E00C  50F5               	movf	tablat,w,c
  8460  00E00E  EC49  F069         	call	_isdigit
  8461  00E012  A0D8               	btfss	status,0,c
  8462  00E014  D003               	goto	l691
  8463  00E016  D7D1               	goto	l689
  8464  00E018                     
  8465                           ;doprnt.c: 721: flag |= 0x80;
  8466  00E018  8E21               	bsf	printf@flag,7,c
  8467                           
  8468                           ;doprnt.c: 723: break;
  8469  00E01A  D017               	goto	l696
  8470  00E01C                     l691:
  8471  00E01C  C00D  FFF6         	movff	printf@f,tblptrl
  8472  00E020  C00E  FFF7         	movff	printf@f+1,tblptrh
  8473  00E024  4A0D               	infsnz	printf@f,f,c
  8474  00E026  2A0E               	incf	printf@f+1,f,c
  8475  00E028                     	if	0	;tblptru may be non-zero
  8476  00E028                     	endif
  8477  00E028                     	if	0	;tblptru may be non-zero
  8478  00E028                     	endif
  8479  00E028  0008               	tblrd		*
  8480  00E02A  CFF5 F024          	movff	tablat,printf@c
  8481  00E02E  5024               	movf	printf@c,w,c
  8482                           
  8483                           ; Switch size 1, requested type "space"
  8484                           ; Number of cases is 4, Range of values is 0 to 120
  8485                           ; switch strategies available:
  8486                           ; Name         Instructions Cycles
  8487                           ; simple_byte           13     7 (average)
  8488                           ;	Chosen strategy is simple_byte
  8489  00E030  0A00               	xorlw	0	; case 0
  8490  00E032  B4D8               	btfsc	status,2,c
  8491  00E034  0012               	return	
  8492  00E036  0A64               	xorlw	100	; case 100
  8493  00E038  B4D8               	btfsc	status,2,c
  8494  00E03A  D007               	goto	l696
  8495  00E03C  0A0D               	xorlw	13	; case 105
  8496  00E03E  B4D8               	btfsc	status,2,c
  8497  00E040  D004               	goto	l696
  8498  00E042  0A11               	xorlw	17	; case 120
  8499  00E044  B4D8               	btfsc	status,2,c
  8500  00E046  D7E8               	goto	l697
  8501  00E048  D103               	goto	u3690
  8502  00E04A                     l696:
  8503                           
  8504                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8505  00E04A  BE21               	btfsc	printf@flag,7,c
  8506  00E04C  D015               	goto	l699
  8507                           
  8508                           ;doprnt.c: 1253: {
  8509                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8510  00E04E  C01C  FFD9         	movff	printf@ap,fsr2l
  8511  00E052  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8512  00E056  CFDE F01F          	movff	postinc2,printf@val
  8513  00E05A  CFDD F020          	movff	postdec2,printf@val+1
  8514  00E05E  0E02               	movlw	2
  8515  00E060  261C               	addwf	printf@ap,f,c
  8516  00E062  0E00               	movlw	0
  8517  00E064  221D               	addwfc	printf@ap+1,f,c
  8518                           
  8519                           ;doprnt.c: 1261: if((int)val < 0) {
  8520  00E066  AE20               	btfss	printf@val+1,7,c
  8521  00E068  D044               	goto	l702
  8522                           
  8523                           ;doprnt.c: 1262: flag |= 0x03;
  8524  00E06A  0E03               	movlw	3
  8525  00E06C  1221               	iorwf	printf@flag,f,c
  8526                           
  8527                           ;doprnt.c: 1263: val = -val;
  8528  00E06E  6C1F               	negf	printf@val,c
  8529  00E070  1E20               	comf	printf@val+1,f,c
  8530  00E072  B0D8               	btfsc	status,0,c
  8531  00E074  2A20               	incf	printf@val+1,f,c
  8532                           
  8533                           ;doprnt.c: 1264: }
  8534                           ;doprnt.c: 1266: }
  8535  00E076  D03D               	goto	l702
  8536  00E078                     l699:
  8537                           
  8538                           ;doprnt.c: 1268: else
  8539                           ;doprnt.c: 1273: {
  8540                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8541  00E078  C01C  FFD9         	movff	printf@ap,fsr2l
  8542  00E07C  C01D  FFDA         	movff	printf@ap+1,fsr2h
  8543  00E080  CFDE F01F          	movff	postinc2,printf@val
  8544  00E084  CFDD F020          	movff	postdec2,printf@val+1
  8545  00E088  0E02               	movlw	2
  8546  00E08A  261C               	addwf	printf@ap,f,c
  8547  00E08C  0E00               	movlw	0
  8548  00E08E  221D               	addwfc	printf@ap+1,f,c
  8549                           
  8550                           ;doprnt.c: 1287: }
  8551                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8552  00E090  D030               	goto	l702
  8553  00E092                     
  8554                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8555  00E092  0E01               	movlw	1
  8556  00E094  6E24               	movwf	printf@c,c
  8557  00E096                     l3474:
  8558  00E096  0E05               	movlw	5
  8559  00E098  1824               	xorwf	printf@c,w,c
  8560  00E09A  B4D8               	btfsc	status,2,c
  8561  00E09C  D032               	goto	l707
  8562                           
  8563                           ;doprnt.c: 1306: if(val < dpowers[c])
  8564  00E09E  5024               	movf	printf@c,w,c
  8565  00E0A0  0D02               	mullw	2
  8566  00E0A2  0E45               	movlw	low _dpowers
  8567  00E0A4  24F3               	addwf	prodl,w,c
  8568  00E0A6  6EF6               	movwf	tblptrl,c
  8569  00E0A8  0EFD               	movlw	high _dpowers
  8570  00E0AA  20F4               	addwfc	prodh,w,c
  8571  00E0AC  6EF7               	movwf	tblptrh,c
  8572  00E0AE                     	if	0	;There are less than 3 active tblptr bytes
  8573  00E0AE                     	endif
  8574  00E0AE  0009               	tblrd		*+
  8575  00E0B0  50F5               	movf	tablat,w,c
  8576  00E0B2  5C1F               	subwf	printf@val,w,c
  8577  00E0B4  0009               	tblrd		*+
  8578  00E0B6  50F5               	movf	tablat,w,c
  8579  00E0B8  5820               	subwfb	printf@val+1,w,c
  8580  00E0BA  A0D8               	btfss	status,0,c
  8581  00E0BC  D022               	goto	l707
  8582                           
  8583                           ;doprnt.c: 1307: break;
  8584  00E0BE  2A24               	incf	printf@c,f,c
  8585  00E0C0  D7EA               	goto	l3474
  8586  00E0C2                     
  8587                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8588  00E0C2  0E01               	movlw	1
  8589  00E0C4  6E24               	movwf	printf@c,c
  8590  00E0C6                     l3488:
  8591  00E0C6  0E04               	movlw	4
  8592  00E0C8  1824               	xorwf	printf@c,w,c
  8593  00E0CA  B4D8               	btfsc	status,2,c
  8594  00E0CC  D01A               	goto	l707
  8595                           
  8596                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8597  00E0CE  5024               	movf	printf@c,w,c
  8598  00E0D0  0D02               	mullw	2
  8599  00E0D2  0E4F               	movlw	low _hexpowers
  8600  00E0D4  24F3               	addwf	prodl,w,c
  8601  00E0D6  6EF6               	movwf	tblptrl,c
  8602  00E0D8  0EFD               	movlw	high _hexpowers
  8603  00E0DA  20F4               	addwfc	prodh,w,c
  8604  00E0DC  6EF7               	movwf	tblptrh,c
  8605  00E0DE                     	if	0	;There are less than 3 active tblptr bytes
  8606  00E0DE                     	endif
  8607  00E0DE  0009               	tblrd		*+
  8608  00E0E0  50F5               	movf	tablat,w,c
  8609  00E0E2  5C1F               	subwf	printf@val,w,c
  8610  00E0E4  0009               	tblrd		*+
  8611  00E0E6  50F5               	movf	tablat,w,c
  8612  00E0E8  5820               	subwfb	printf@val+1,w,c
  8613  00E0EA  A0D8               	btfss	status,0,c
  8614  00E0EC  D00A               	goto	l707
  8615                           
  8616                           ;doprnt.c: 1318: break;
  8617  00E0EE  2A24               	incf	printf@c,f,c
  8618  00E0F0  D7EA               	goto	l3488
  8619  00E0F2                     l702:
  8620  00E0F2  5021               	movf	printf@flag,w,c
  8621  00E0F4  0B80               	andlw	128
  8622                           
  8623                           ; Switch size 1, requested type "space"
  8624                           ; Number of cases is 2, Range of values is 0 to 128
  8625                           ; switch strategies available:
  8626                           ; Name         Instructions Cycles
  8627                           ; simple_byte            7     4 (average)
  8628                           ;	Chosen strategy is simple_byte
  8629  00E0F6  0A00               	xorlw	0	; case 0
  8630  00E0F8  B4D8               	btfsc	status,2,c
  8631  00E0FA  D7CB               	goto	l703
  8632  00E0FC  0A80               	xorlw	128	; case 128
  8633  00E0FE  B4D8               	btfsc	status,2,c
  8634  00E100  D7E0               	goto	l708
  8635  00E102                     l707:
  8636                           
  8637                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8638  00E102  5022               	movf	printf@width,w,c
  8639  00E104  1023               	iorwf	printf@width+1,w,c
  8640  00E106  B4D8               	btfsc	status,2,c
  8641  00E108  D009               	goto	l712
  8642  00E10A  C021  F017         	movff	printf@flag,??_printf
  8643  00E10E  0E03               	movlw	3
  8644  00E110  1617               	andwf	??_printf,f,c
  8645  00E112  B4D8               	btfsc	status,2,c
  8646  00E114  D003               	goto	l712
  8647                           
  8648                           ;doprnt.c: 1346: width--;
  8649  00E116  0622               	decf	printf@width,f,c
  8650  00E118  A0D8               	btfss	status,0,c
  8651  00E11A  0623               	decf	printf@width+1,f,c
  8652  00E11C                     l712:
  8653                           
  8654                           ;doprnt.c: 1381: if(width > c)
  8655  00E11C  0E80               	movlw	128
  8656  00E11E  BE24               	btfsc	printf@c,7,c
  8657  00E120  0E7F               	movlw	127
  8658  00E122  6E17               	movwf	??_printf& (0+255),c
  8659  00E124  5022               	movf	printf@width,w,c
  8660  00E126  5C24               	subwf	printf@c,w,c
  8661  00E128  5023               	movf	printf@width+1,w,c
  8662  00E12A  0A80               	xorlw	128
  8663  00E12C  5817               	subwfb	??_printf& (0+255),w,c
  8664  00E12E  B0D8               	btfsc	status,0,c
  8665  00E130  D007               	goto	l713
  8666                           
  8667                           ;doprnt.c: 1382: width -= c;
  8668  00E132  5024               	movf	printf@c,w,c
  8669  00E134  5E22               	subwf	printf@width,f,c
  8670  00E136  0E00               	movlw	0
  8671  00E138  BE24               	btfsc	printf@c,7,c
  8672  00E13A  0EFF               	movlw	255
  8673  00E13C  5A23               	subwfb	printf@width+1,f,c
  8674  00E13E  D004               	goto	l714
  8675  00E140                     l713:
  8676                           
  8677                           ;doprnt.c: 1383: else
  8678                           ;doprnt.c: 1384: width = 0;
  8679  00E140  0E00               	movlw	0
  8680  00E142  6E23               	movwf	printf@width+1,c
  8681  00E144  0E00               	movlw	0
  8682  00E146  6E22               	movwf	printf@width,c
  8683  00E148                     l714:
  8684                           
  8685                           ;doprnt.c: 1387: if(flag & 0x04) {
  8686  00E148  A421               	btfss	printf@flag,2,c
  8687  00E14A  D014               	goto	l715
  8688                           
  8689                           ;doprnt.c: 1392: if(flag & 0x03)
  8690  00E14C  C021  F017         	movff	printf@flag,??_printf
  8691  00E150  0E03               	movlw	3
  8692  00E152  1617               	andwf	??_printf,f,c
  8693  00E154  B4D8               	btfsc	status,2,c
  8694  00E156  D003               	goto	l716
  8695                           
  8696                           ;doprnt.c: 1393: (putch('-') );
  8697  00E158  0E2D               	movlw	45
  8698  00E15A  EC35  F069         	call	_putch
  8699  00E15E                     l716:
  8700                           
  8701                           ;doprnt.c: 1415: if(width)
  8702  00E15E  5022               	movf	printf@width,w,c
  8703  00E160  1023               	iorwf	printf@width+1,w,c
  8704  00E162  B4D8               	btfsc	status,2,c
  8705  00E164  D01E               	goto	l724
  8706                           
  8707                           ;doprnt.c: 1417: (putch('0') );
  8708                           
  8709                           ;doprnt.c: 1416: do
  8710  00E166  0E30               	movlw	48
  8711  00E168  EC35  F069         	call	_putch
  8712                           
  8713                           ;doprnt.c: 1418: while(--width);
  8714  00E16C  0622               	decf	printf@width,f,c
  8715  00E16E  A0D8               	btfss	status,0,c
  8716  00E170  0623               	decf	printf@width+1,f,c
  8717  00E172  D7F5               	goto	l716
  8718  00E174                     l715:
  8719                           
  8720                           ;doprnt.c: 1422: {
  8721                           ;doprnt.c: 1424: if(width
  8722                           ;doprnt.c: 1428: )
  8723  00E174  5022               	movf	printf@width,w,c
  8724  00E176  1023               	iorwf	printf@width+1,w,c
  8725  00E178  B4D8               	btfsc	status,2,c
  8726  00E17A  D00A               	goto	u3670
  8727  00E17C                     u3660:
  8728                           
  8729                           ;doprnt.c: 1430: (putch(' ') );
  8730                           
  8731                           ;doprnt.c: 1429: do
  8732  00E17C  0E20               	movlw	32
  8733  00E17E  EC35  F069         	call	_putch
  8734                           
  8735                           ;doprnt.c: 1431: while(--width);
  8736  00E182  0622               	decf	printf@width,f,c
  8737  00E184  A0D8               	btfss	status,0,c
  8738  00E186  0623               	decf	printf@width+1,f,c
  8739  00E188  5022               	movf	printf@width,w,c
  8740  00E18A  1023               	iorwf	printf@width+1,w,c
  8741  00E18C  A4D8               	btfss	status,2,c
  8742  00E18E  D7F6               	goto	u3660
  8743  00E190                     u3670:
  8744                           
  8745                           ;doprnt.c: 1438: if(flag & 0x03)
  8746  00E190  C021  F017         	movff	printf@flag,??_printf
  8747  00E194  0E03               	movlw	3
  8748  00E196  1617               	andwf	??_printf,f,c
  8749  00E198  B4D8               	btfsc	status,2,c
  8750  00E19A  D003               	goto	l724
  8751                           
  8752                           ;doprnt.c: 1439: (putch('-') );
  8753  00E19C  0E2D               	movlw	45
  8754  00E19E  EC35  F069         	call	_putch
  8755  00E1A2                     l724:
  8756                           
  8757                           ;doprnt.c: 1469: }
  8758                           ;doprnt.c: 1472: prec = c;
  8759  00E1A2  C024  F01E         	movff	printf@c,printf@prec
  8760                           
  8761                           ;doprnt.c: 1474: while(prec--) {
  8762  00E1A6  D050               	goto	l725
  8763  00E1A8                     
  8764                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8765  00E1A8  501E               	movf	printf@prec,w,c
  8766  00E1AA  0D02               	mullw	2
  8767  00E1AC  0E45               	movlw	low _dpowers
  8768  00E1AE  24F3               	addwf	prodl,w,c
  8769  00E1B0  6EF6               	movwf	tblptrl,c
  8770  00E1B2  0EFD               	movlw	high _dpowers
  8771  00E1B4  20F4               	addwfc	prodh,w,c
  8772  00E1B6  6EF7               	movwf	tblptrh,c
  8773  00E1B8                     	if	0	;There are less than 3 active tblptr bytes
  8774  00E1B8                     	endif
  8775  00E1B8  0009               	tblrd		*+
  8776  00E1BA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8777  00E1BE  000A               	tblrd		*-
  8778  00E1C0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8779  00E1C4  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8780  00E1C8  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8781  00E1CC  EC19  F06A         	call	___lwdiv	;wreg free
  8782  00E1D0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  8783  00E1D4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  8784  00E1D8  0E00               	movlw	0
  8785  00E1DA  6E0B               	movwf	___lwmod@divisor+1,c
  8786  00E1DC  0E0A               	movlw	10
  8787  00E1DE  6E0A               	movwf	___lwmod@divisor,c
  8788  00E1E0  ECD2  F069         	call	___lwmod	;wreg free
  8789  00E1E4  5008               	movf	?___lwmod,w,c
  8790  00E1E6  0F30               	addlw	48
  8791  00E1E8  6E24               	movwf	printf@c,c
  8792                           
  8793                           ;doprnt.c: 1491: break;
  8794  00E1EA  D02B               	goto	l729
  8795  00E1EC                     
  8796                           ;doprnt.c: 1499: {
  8797                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8798  00E1EC  C01F  F001         	movff	printf@val,___lwdiv@dividend
  8799  00E1F0  C020  F002         	movff	printf@val+1,___lwdiv@dividend+1
  8800  00E1F4  501E               	movf	printf@prec,w,c
  8801  00E1F6  0D02               	mullw	2
  8802  00E1F8  0E4F               	movlw	low _hexpowers
  8803  00E1FA  24F3               	addwf	prodl,w,c
  8804  00E1FC  6EF6               	movwf	tblptrl,c
  8805  00E1FE  0EFD               	movlw	high _hexpowers
  8806  00E200  20F4               	addwfc	prodh,w,c
  8807  00E202  6EF7               	movwf	tblptrh,c
  8808  00E204                     	if	0	;There are less than 3 active tblptr bytes
  8809  00E204                     	endif
  8810  00E204  0009               	tblrd		*+
  8811  00E206  CFF5 F003          	movff	tablat,___lwdiv@divisor
  8812  00E20A  000A               	tblrd		*-
  8813  00E20C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  8814  00E210  EC19  F06A         	call	___lwdiv	;wreg free
  8815  00E214  5001               	movf	?___lwdiv,w,c
  8816  00E216  0B0F               	andlw	15
  8817  00E218  6E1B               	movwf	printf@idx,c
  8818                           
  8819                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8820  00E21A  501B               	movf	printf@idx,w,c
  8821  00E21C  0D01               	mullw	1
  8822  00E21E  0E76               	movlw	low STR_70
  8823  00E220  24F3               	addwf	prodl,w,c
  8824  00E222  6EF6               	movwf	tblptrl,c
  8825  00E224  0EFD               	movlw	high STR_70
  8826  00E226  20F4               	addwfc	prodh,w,c
  8827  00E228  6EF7               	movwf	tblptrh,c
  8828  00E22A                     	if	0	;There are less than 3 active tblptr bytes
  8829  00E22A                     	endif
  8830  00E22A  0008               	tblrd		*
  8831  00E22C  CFF5 F024          	movff	tablat,printf@c
  8832                           
  8833                           ;doprnt.c: 1523: }
  8834                           
  8835                           ;doprnt.c: 1508: }
  8836                           ;doprnt.c: 1510: break;
  8837  00E230  D008               	goto	l729
  8838  00E232  5021               	movf	printf@flag,w,c
  8839  00E234  0B80               	andlw	128
  8840                           
  8841                           ; Switch size 1, requested type "space"
  8842                           ; Number of cases is 2, Range of values is 0 to 128
  8843                           ; switch strategies available:
  8844                           ; Name         Instructions Cycles
  8845                           ; simple_byte            7     4 (average)
  8846                           ;	Chosen strategy is simple_byte
  8847  00E236  0A00               	xorlw	0	; case 0
  8848  00E238  B4D8               	btfsc	status,2,c
  8849  00E23A  D7B6               	goto	l728
  8850  00E23C  0A80               	xorlw	128	; case 128
  8851  00E23E  B4D8               	btfsc	status,2,c
  8852  00E240  D7D5               	goto	l730
  8853  00E242                     l729:
  8854                           
  8855                           ;doprnt.c: 1524: (putch(c) );
  8856  00E242  5024               	movf	printf@c,w,c
  8857  00E244  EC35  F069         	call	_putch
  8858  00E248                     l725:
  8859  00E248  061E               	decf	printf@prec,f,c
  8860  00E24A  281E               	incf	printf@prec,w,c
  8861  00E24C  A4D8               	btfss	status,2,c
  8862  00E24E  D7F1               	goto	l727
  8863  00E250                     u3690:
  8864  00E250  C00D  FFF6         	movff	printf@f,tblptrl
  8865  00E254  C00E  FFF7         	movff	printf@f+1,tblptrh
  8866  00E258  4A0D               	infsnz	printf@f,f,c
  8867  00E25A  2A0E               	incf	printf@f+1,f,c
  8868  00E25C                     	if	0	;tblptru may be non-zero
  8869  00E25C                     	endif
  8870  00E25C                     	if	0	;tblptru may be non-zero
  8871  00E25C                     	endif
  8872  00E25C  0008               	tblrd		*
  8873  00E25E  CFF5 F024          	movff	tablat,printf@c
  8874  00E262  5024               	movf	printf@c,w,c
  8875  00E264  B4D8               	btfsc	status,2,c
  8876  00E266  0012               	return	
  8877  00E268  D67F               	goto	l680
  8878  00E26A                     __end_of_printf:
  8879                           	opt stack 0
  8880                           tblptru	equ	0xFF8
  8881                           tblptrh	equ	0xFF7
  8882                           tblptrl	equ	0xFF6
  8883                           tablat	equ	0xFF5
  8884                           prodh	equ	0xFF4
  8885                           prodl	equ	0xFF3
  8886                           intcon	equ	0xFF2
  8887                           postinc0	equ	0xFEE
  8888                           wreg	equ	0xFE8
  8889                           plusw1	equ	0xFE3
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           plusw2	equ	0xFDB
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function _putch *****************
  8899 ;; Defined at:
  8900 ;;		line 77 in file "standbyMode.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  data            1    wreg     unsigned char 
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;  data            1    2[COMRAM] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:        1 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    1
  8921 ;; This function calls:
  8922 ;;		_lcdNibble
  8923 ;; This function is called by:
  8924 ;;		_viewLogs
  8925 ;;		_food_press
  8926 ;;		_diet_press
  8927 ;;		_which_drawer
  8928 ;;		_printf
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text16
  8933  00D26A                     __ptext16:
  8934                           	opt stack 0
  8935  00D26A                     _putch:
  8936                           	opt stack 27
  8937                           
  8938                           ;incstack = 0
  8939                           ;putch@data stored from wreg
  8940  00D26A  6E03               	movwf	putch@data,c
  8941                           
  8942                           ;standbyMode.c: 85: LATDbits.LATD2 = 1;
  8943  00D26C  848C               	bsf	3980,2,c	;volatile
  8944                           
  8945                           ;standbyMode.c: 86: lcdNibble(data);
  8946  00D26E  5003               	movf	putch@data,w,c
  8947  00D270  EC99  F06A         	call	_lcdNibble
  8948                           
  8949                           ;standbyMode.c: 87: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8950  00D274  0EC8               	movlw	200
  8951  00D276                     u7457:
  8952  00D276  D000               	nop2	
  8953  00D278  2EE8               	decfsz	wreg,f,c
  8954  00D27A  D7FD               	bra	u7457
  8955  00D27C  0012               	return		;funcret
  8956  00D27E                     __end_of_putch:
  8957                           	opt stack 0
  8958                           tblptru	equ	0xFF8
  8959                           tblptrh	equ	0xFF7
  8960                           tblptrl	equ	0xFF6
  8961                           tablat	equ	0xFF5
  8962                           prodh	equ	0xFF4
  8963                           prodl	equ	0xFF3
  8964                           intcon	equ	0xFF2
  8965                           postinc0	equ	0xFEE
  8966                           wreg	equ	0xFE8
  8967                           plusw1	equ	0xFE3
  8968                           indf2	equ	0xFDF
  8969                           postinc2	equ	0xFDE
  8970                           postdec2	equ	0xFDD
  8971                           plusw2	equ	0xFDB
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _isdigit *****************
  8977 ;; Defined at:
  8978 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  c               1    wreg     unsigned char 
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  c               1    2[COMRAM] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;		None               void
  8985 ;; Registers used:
  8986 ;;		wreg, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;Total ram usage:        3 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		_printf
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text17
  9006  00D292                     __ptext17:
  9007                           	opt stack 0
  9008  00D292                     _isdigit:
  9009                           	opt stack 27
  9010                           
  9011                           ;incstack = 0
  9012                           ;isdigit@c stored from wreg
  9013  00D292  6E03               	movwf	isdigit@c,c
  9014  00D294  0E00               	movlw	0
  9015  00D296  6E02               	movwf	_isdigit$1056,c
  9016  00D298  0E3A               	movlw	58
  9017  00D29A  6003               	cpfslt	isdigit@c,c
  9018  00D29C  D005               	goto	l1063
  9019  00D29E  0E2F               	movlw	47
  9020  00D2A0  6403               	cpfsgt	isdigit@c,c
  9021  00D2A2  D002               	goto	l1063
  9022  00D2A4  0E01               	movlw	1
  9023  00D2A6  6E02               	movwf	_isdigit$1056,c
  9024  00D2A8                     l1063:
  9025  00D2A8  C002  F001         	movff	_isdigit$1056,??_isdigit
  9026  00D2AC  3001               	rrcf	??_isdigit,w,c
  9027  00D2AE  0012               	return	
  9028  00D2B0                     __end_of_isdigit:
  9029                           	opt stack 0
  9030                           tblptru	equ	0xFF8
  9031                           tblptrh	equ	0xFF7
  9032                           tblptrl	equ	0xFF6
  9033                           tablat	equ	0xFF5
  9034                           prodh	equ	0xFF4
  9035                           prodl	equ	0xFF3
  9036                           intcon	equ	0xFF2
  9037                           postinc0	equ	0xFEE
  9038                           wreg	equ	0xFE8
  9039                           plusw1	equ	0xFE3
  9040                           indf2	equ	0xFDF
  9041                           postinc2	equ	0xFDE
  9042                           postdec2	equ	0xFDD
  9043                           plusw2	equ	0xFDB
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function ___wmul *****************
  9049 ;; Defined at:
  9050 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  multiplier      2    0[COMRAM] unsigned int 
  9053 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  product         2    4[COMRAM] unsigned int 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  2    0[COMRAM] unsigned int 
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0, prodl, prodh
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;Total ram usage:        6 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_displayLogs
  9075 ;;		_printf
  9076 ;;		_tock
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           	psect	text18
  9081  00D2F6                     __ptext18:
  9082                           	opt stack 0
  9083  00D2F6                     ___wmul:
  9084                           	opt stack 27
  9085                           
  9086                           ;incstack = 0
  9087  00D2F6  5001               	movf	___wmul@multiplier,w,c
  9088  00D2F8  0203               	mulwf	___wmul@multiplicand,c
  9089  00D2FA  CFF3 F005          	movff	prodl,___wmul@product
  9090  00D2FE  CFF4 F006          	movff	prodh,___wmul@product+1
  9091  00D302  5001               	movf	___wmul@multiplier,w,c
  9092  00D304  0204               	mulwf	___wmul@multiplicand+1,c
  9093  00D306  50F3               	movf	prodl,w,c
  9094  00D308  2606               	addwf	___wmul@product+1,f,c
  9095  00D30A  5002               	movf	___wmul@multiplier+1,w,c
  9096  00D30C  0203               	mulwf	___wmul@multiplicand,c
  9097  00D30E  50F3               	movf	prodl,w,c
  9098  00D310  2606               	addwf	___wmul@product+1,f,c
  9099  00D312  C005  F001         	movff	___wmul@product,?___wmul
  9100  00D316  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9101  00D31A  0012               	return	
  9102  00D31C                     __end_of___wmul:
  9103                           	opt stack 0
  9104                           tblptru	equ	0xFF8
  9105                           tblptrh	equ	0xFF7
  9106                           tblptrl	equ	0xFF6
  9107                           tablat	equ	0xFF5
  9108                           prodh	equ	0xFF4
  9109                           prodl	equ	0xFF3
  9110                           intcon	equ	0xFF2
  9111                           postinc0	equ	0xFEE
  9112                           wreg	equ	0xFE8
  9113                           plusw1	equ	0xFE3
  9114                           indf2	equ	0xFDF
  9115                           postinc2	equ	0xFDE
  9116                           postdec2	equ	0xFDD
  9117                           plusw2	equ	0xFDB
  9118                           fsr2h	equ	0xFDA
  9119                           fsr2l	equ	0xFD9
  9120                           status	equ	0xFD8
  9121                           
  9122 ;; *************** function ___lwmod *****************
  9123 ;; Defined at:
  9124 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  dividend        2    7[COMRAM] unsigned int 
  9127 ;;  divisor         2    9[COMRAM] unsigned int 
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  counter         1   11[COMRAM] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  2    7[COMRAM] unsigned int 
  9132 ;; Registers used:
  9133 ;;		wreg, status,2, status,0
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;Total ram usage:        5 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_displayLogs
  9149 ;;		_printf
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text19
  9154  00D3A4                     __ptext19:
  9155                           	opt stack 0
  9156  00D3A4                     ___lwmod:
  9157                           	opt stack 27
  9158                           
  9159                           ;incstack = 0
  9160  00D3A4  500A               	movf	___lwmod@divisor,w,c
  9161  00D3A6  100B               	iorwf	___lwmod@divisor+1,w,c
  9162  00D3A8  B4D8               	btfsc	status,2,c
  9163  00D3AA  D018               	goto	l1157
  9164  00D3AC  0E01               	movlw	1
  9165  00D3AE  6E0C               	movwf	___lwmod@counter,c
  9166  00D3B0  D004               	goto	l1152
  9167  00D3B2  90D8               	bcf	status,0,c
  9168  00D3B4  360A               	rlcf	___lwmod@divisor,f,c
  9169  00D3B6  360B               	rlcf	___lwmod@divisor+1,f,c
  9170  00D3B8  2A0C               	incf	___lwmod@counter,f,c
  9171  00D3BA                     l1152:
  9172  00D3BA  AE0B               	btfss	___lwmod@divisor+1,7,c
  9173  00D3BC  D7FA               	goto	l1153
  9174  00D3BE                     u3450:
  9175  00D3BE  500A               	movf	___lwmod@divisor,w,c
  9176  00D3C0  5C08               	subwf	___lwmod@dividend,w,c
  9177  00D3C2  500B               	movf	___lwmod@divisor+1,w,c
  9178  00D3C4  5809               	subwfb	___lwmod@dividend+1,w,c
  9179  00D3C6  A0D8               	btfss	status,0,c
  9180  00D3C8  D004               	goto	l1156
  9181  00D3CA  500A               	movf	___lwmod@divisor,w,c
  9182  00D3CC  5E08               	subwf	___lwmod@dividend,f,c
  9183  00D3CE  500B               	movf	___lwmod@divisor+1,w,c
  9184  00D3D0  5A09               	subwfb	___lwmod@dividend+1,f,c
  9185  00D3D2                     l1156:
  9186  00D3D2  90D8               	bcf	status,0,c
  9187  00D3D4  320B               	rrcf	___lwmod@divisor+1,f,c
  9188  00D3D6  320A               	rrcf	___lwmod@divisor,f,c
  9189  00D3D8  2E0C               	decfsz	___lwmod@counter,f,c
  9190  00D3DA  D7F1               	goto	u3450
  9191  00D3DC                     l1157:
  9192  00D3DC  C008  F008         	movff	___lwmod@dividend,?___lwmod
  9193  00D3E0  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  9194  00D3E4  0012               	return		;funcret
  9195  00D3E6                     __end_of___lwmod:
  9196                           	opt stack 0
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon	equ	0xFF2
  9204                           postinc0	equ	0xFEE
  9205                           wreg	equ	0xFE8
  9206                           plusw1	equ	0xFE3
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           plusw2	equ	0xFDB
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function ___lwdiv *****************
  9216 ;; Defined at:
  9217 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  dividend        2    0[COMRAM] unsigned int 
  9220 ;;  divisor         2    2[COMRAM] unsigned int 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  quotient        2    4[COMRAM] unsigned int 
  9223 ;;  counter         1    6[COMRAM] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  2    0[COMRAM] unsigned int 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9233 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;Total ram usage:        7 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_displayLogs
  9243 ;;		_printf
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text20
  9248  00D432                     __ptext20:
  9249                           	opt stack 0
  9250  00D432                     ___lwdiv:
  9251                           	opt stack 27
  9252                           
  9253                           ;incstack = 0
  9254  00D432  0E00               	movlw	0
  9255  00D434  6E06               	movwf	___lwdiv@quotient+1,c
  9256  00D436  0E00               	movlw	0
  9257  00D438  6E05               	movwf	___lwdiv@quotient,c
  9258  00D43A  5003               	movf	___lwdiv@divisor,w,c
  9259  00D43C  1004               	iorwf	___lwdiv@divisor+1,w,c
  9260  00D43E  B4D8               	btfsc	status,2,c
  9261  00D440  D01C               	goto	l1147
  9262  00D442  0E01               	movlw	1
  9263  00D444  6E07               	movwf	___lwdiv@counter,c
  9264  00D446  D004               	goto	l1142
  9265  00D448  90D8               	bcf	status,0,c
  9266  00D44A  3603               	rlcf	___lwdiv@divisor,f,c
  9267  00D44C  3604               	rlcf	___lwdiv@divisor+1,f,c
  9268  00D44E  2A07               	incf	___lwdiv@counter,f,c
  9269  00D450                     l1142:
  9270  00D450  AE04               	btfss	___lwdiv@divisor+1,7,c
  9271  00D452  D7FA               	goto	l1143
  9272  00D454                     u3420:
  9273  00D454  90D8               	bcf	status,0,c
  9274  00D456  3605               	rlcf	___lwdiv@quotient,f,c
  9275  00D458  3606               	rlcf	___lwdiv@quotient+1,f,c
  9276  00D45A  5003               	movf	___lwdiv@divisor,w,c
  9277  00D45C  5C01               	subwf	___lwdiv@dividend,w,c
  9278  00D45E  5004               	movf	___lwdiv@divisor+1,w,c
  9279  00D460  5802               	subwfb	___lwdiv@dividend+1,w,c
  9280  00D462  A0D8               	btfss	status,0,c
  9281  00D464  D005               	goto	l1146
  9282  00D466  5003               	movf	___lwdiv@divisor,w,c
  9283  00D468  5E01               	subwf	___lwdiv@dividend,f,c
  9284  00D46A  5004               	movf	___lwdiv@divisor+1,w,c
  9285  00D46C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  9286  00D46E  8005               	bsf	___lwdiv@quotient,0,c
  9287  00D470                     l1146:
  9288  00D470  90D8               	bcf	status,0,c
  9289  00D472  3204               	rrcf	___lwdiv@divisor+1,f,c
  9290  00D474  3203               	rrcf	___lwdiv@divisor,f,c
  9291  00D476  2E07               	decfsz	___lwdiv@counter,f,c
  9292  00D478  D7ED               	goto	u3420
  9293  00D47A                     l1147:
  9294  00D47A  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  9295  00D47E  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9296  00D482  0012               	return		;funcret
  9297  00D484                     __end_of___lwdiv:
  9298                           	opt stack 0
  9299                           tblptru	equ	0xFF8
  9300                           tblptrh	equ	0xFF7
  9301                           tblptrl	equ	0xFF6
  9302                           tablat	equ	0xFF5
  9303                           prodh	equ	0xFF4
  9304                           prodl	equ	0xFF3
  9305                           intcon	equ	0xFF2
  9306                           postinc0	equ	0xFEE
  9307                           wreg	equ	0xFE8
  9308                           plusw1	equ	0xFE3
  9309                           indf2	equ	0xFDF
  9310                           postinc2	equ	0xFDE
  9311                           postdec2	equ	0xFDD
  9312                           plusw2	equ	0xFDB
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _I2C_Master_Write *****************
  9318 ;; Defined at:
  9319 ;;		line 108 in file "I2C.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2, status,0, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        2 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    1
  9340 ;; This function calls:
  9341 ;;		_I2C_Master_Wait
  9342 ;; This function is called by:
  9343 ;;		_standbyMode
  9344 ;;		_RTC_setTime
  9345 ;;		_tick
  9346 ;;		_tock
  9347 ;;		_sendByteToArduino
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           	psect	text21
  9352  00D23A                     __ptext21:
  9353                           	opt stack 0
  9354  00D23A                     _I2C_Master_Write:
  9355                           	opt stack 28
  9356                           
  9357                           ;I2C.c: 116: I2C_Master_Wait();
  9358                           
  9359                           ;incstack = 0
  9360  00D23A  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9361                           
  9362                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9363  00D23E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  9364  00D242  0012               	return		;funcret
  9365  00D244                     __end_of_I2C_Master_Write:
  9366                           	opt stack 0
  9367                           tblptru	equ	0xFF8
  9368                           tblptrh	equ	0xFF7
  9369                           tblptrl	equ	0xFF6
  9370                           tablat	equ	0xFF5
  9371                           prodh	equ	0xFF4
  9372                           prodl	equ	0xFF3
  9373                           intcon	equ	0xFF2
  9374                           postinc0	equ	0xFEE
  9375                           wreg	equ	0xFE8
  9376                           plusw1	equ	0xFE3
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           plusw2	equ	0xFDB
  9381                           fsr2h	equ	0xFDA
  9382                           fsr2l	equ	0xFD9
  9383                           status	equ	0xFD8
  9384                           
  9385 ;; *************** function _I2C_Master_Stop *****************
  9386 ;; Defined at:
  9387 ;;		line 95 in file "I2C.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;		None
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;		None
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  1    wreg      void 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0, cstack
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;Total ram usage:        0 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    1
  9408 ;; This function calls:
  9409 ;;		_I2C_Master_Wait
  9410 ;; This function is called by:
  9411 ;;		_standbyMode
  9412 ;;		_RTC_setTime
  9413 ;;		_tick
  9414 ;;		_tock
  9415 ;;		_sendByteToArduino
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text22
  9420  00D232                     __ptext22:
  9421                           	opt stack 0
  9422  00D232                     _I2C_Master_Stop:
  9423                           	opt stack 28
  9424                           
  9425                           ;I2C.c: 104: I2C_Master_Wait();
  9426                           
  9427                           ;incstack = 0
  9428  00D232  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9429                           
  9430                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9431  00D236  84C5               	bsf	4037,2,c	;volatile
  9432  00D238  0012               	return		;funcret
  9433  00D23A                     __end_of_I2C_Master_Stop:
  9434                           	opt stack 0
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           postinc0	equ	0xFEE
  9443                           wreg	equ	0xFE8
  9444                           plusw1	equ	0xFE3
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           plusw2	equ	0xFDB
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function _I2C_Master_Start *****************
  9454 ;; Defined at:
  9455 ;;		line 69 in file "I2C.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    1
  9476 ;; This function calls:
  9477 ;;		_I2C_Master_Wait
  9478 ;; This function is called by:
  9479 ;;		_standbyMode
  9480 ;;		_RTC_setTime
  9481 ;;		_tick
  9482 ;;		_tock
  9483 ;;		_sendByteToArduino
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text23
  9488  00D22A                     __ptext23:
  9489                           	opt stack 0
  9490  00D22A                     _I2C_Master_Start:
  9491                           	opt stack 28
  9492                           
  9493                           ;I2C.c: 78: I2C_Master_Wait();
  9494                           
  9495                           ;incstack = 0
  9496  00D22A  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9497                           
  9498                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  9499  00D22E  80C5               	bsf	4037,0,c	;volatile
  9500  00D230  0012               	return		;funcret
  9501  00D232                     __end_of_I2C_Master_Start:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           plusw1	equ	0xFE3
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           plusw2	equ	0xFDB
  9517                           fsr2h	equ	0xFDA
  9518                           fsr2l	equ	0xFD9
  9519                           status	equ	0xFD8
  9520                           
  9521 ;; *************** function _I2C_Master_Read *****************
  9522 ;; Defined at:
  9523 ;;		line 120 in file "I2C.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;  ackBit          1    wreg     unsigned char 
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;  ackBit          1    1[COMRAM] unsigned char 
  9528 ;;  receivedByte    1    2[COMRAM] unsigned char 
  9529 ;; Return value:  Size  Location     Type
  9530 ;;                  1    wreg      unsigned char 
  9531 ;; Registers used:
  9532 ;;		wreg, status,2, status,0, cstack
  9533 ;; Tracked objects:
  9534 ;;		On entry : 0/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9542 ;;Total ram usage:        2 bytes
  9543 ;; Hardware stack levels used:    1
  9544 ;; Hardware stack levels required when called:    1
  9545 ;; This function calls:
  9546 ;;		_I2C_Master_Wait
  9547 ;; This function is called by:
  9548 ;;		_standbyMode
  9549 ;;		_tick
  9550 ;;		_tock
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text24
  9555  00D2D2                     __ptext24:
  9556                           	opt stack 0
  9557  00D2D2                     _I2C_Master_Read:
  9558                           	opt stack 28
  9559                           
  9560                           ;incstack = 0
  9561                           ;I2C_Master_Read@ackBit stored from wreg
  9562  00D2D2  6E02               	movwf	I2C_Master_Read@ackBit,c
  9563                           
  9564                           ;I2C.c: 130: unsigned char receivedByte;
  9565                           ;I2C.c: 132: I2C_Master_Wait();
  9566  00D2D4  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9567                           
  9568                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  9569  00D2D8  86C5               	bsf	4037,3,c	;volatile
  9570                           
  9571                           ;I2C.c: 135: I2C_Master_Wait();
  9572  00D2DA  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9573                           
  9574                           ;I2C.c: 136: receivedByte = SSPBUF;
  9575  00D2DE  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  9576                           
  9577                           ;I2C.c: 138: I2C_Master_Wait();
  9578  00D2E2  EC22  F069         	call	_I2C_Master_Wait	;wreg free
  9579                           
  9580                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  9581  00D2E6  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  9582  00D2E8  D002               	bra	u6305
  9583  00D2EA  9AC5               	bcf	4037,5,c	;volatile
  9584  00D2EC  D001               	bra	u6306
  9585  00D2EE                     u6305:
  9586  00D2EE  8AC5               	bsf	4037,5,c	;volatile
  9587  00D2F0                     u6306:
  9588                           
  9589                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  9590  00D2F0  88C5               	bsf	4037,4,c	;volatile
  9591                           
  9592                           ;I2C.c: 142: return receivedByte;
  9593  00D2F2  5003               	movf	I2C_Master_Read@receivedByte,w,c
  9594  00D2F4  0012               	return	
  9595  00D2F6                     __end_of_I2C_Master_Read:
  9596                           	opt stack 0
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           plusw1	equ	0xFE3
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           plusw2	equ	0xFDB
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _I2C_Master_Wait *****************
  9616 ;; Defined at:
  9617 ;;		line 51 in file "I2C.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;Total ram usage:        1 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_I2C_Master_Start
  9641 ;;		_I2C_Master_Stop
  9642 ;;		_I2C_Master_Write
  9643 ;;		_I2C_Master_Read
  9644 ;;		_I2C_Master_RepeatedStart
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text25
  9649  00D244                     __ptext25:
  9650                           	opt stack 0
  9651  00D244                     _I2C_Master_Wait:
  9652                           	opt stack 28
  9653                           
  9654                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  9655                           
  9656                           ;incstack = 0
  9657  00D244  B4C7               	btfsc	4039,2,c	;volatile
  9658  00D246  D7FE               	goto	_I2C_Master_Wait
  9659  00D248  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  9660  00D24C  0E1F               	movlw	31
  9661  00D24E  1601               	andwf	??_I2C_Master_Wait,f,c
  9662  00D250  B4D8               	btfsc	status,2,c
  9663  00D252  0012               	return	
  9664  00D254  D7F7               	goto	_I2C_Master_Wait
  9665  00D256                     __end_of_I2C_Master_Wait:
  9666                           	opt stack 0
  9667                           tblptru	equ	0xFF8
  9668                           tblptrh	equ	0xFF7
  9669                           tblptrl	equ	0xFF6
  9670                           tablat	equ	0xFF5
  9671                           prodh	equ	0xFF4
  9672                           prodl	equ	0xFF3
  9673                           intcon	equ	0xFF2
  9674                           postinc0	equ	0xFEE
  9675                           wreg	equ	0xFE8
  9676                           plusw1	equ	0xFE3
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           plusw2	equ	0xFDB
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _I2C_Master_Init *****************
  9686 ;; Defined at:
  9687 ;;		line 14 in file "I2C.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;		None
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        8 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    1
  9708 ;; This function calls:
  9709 ;;		___lldiv
  9710 ;; This function is called by:
  9711 ;;		_standbyMode
  9712 ;;		_tick
  9713 ;;		_tock
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text26
  9718  00D4D6                     __ptext26:
  9719                           	opt stack 0
  9720  00D4D6                     _I2C_Master_Init:
  9721                           	opt stack 28
  9722                           
  9723                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  9724                           
  9725                           ;incstack = 0
  9726  00D4D6  9AC6               	bcf	4038,5,c	;volatile
  9727                           
  9728                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  9729  00D4D8  8694               	bsf	3988,3,c	;volatile
  9730                           
  9731                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  9732  00D4DA  8894               	bsf	3988,4,c	;volatile
  9733                           
  9734                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  9735  00D4DC  0E80               	movlw	128
  9736  00D4DE  6EC7               	movwf	4039,c	;volatile
  9737                           
  9738                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  9739  00D4E0  0E28               	movlw	40
  9740  00D4E2  6EC6               	movwf	4038,c	;volatile
  9741                           
  9742                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  9743  00D4E4  0E00               	movlw	0
  9744  00D4E6  6EC5               	movwf	4037,c	;volatile
  9745                           
  9746                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  9747  00D4E8  0E00               	movlw	0
  9748  00D4EA  6E01               	movwf	___lldiv@dividend,c
  9749  00D4EC  0E5A               	movlw	90
  9750  00D4EE  6E02               	movwf	___lldiv@dividend+1,c
  9751  00D4F0  0E62               	movlw	98
  9752  00D4F2  6E03               	movwf	___lldiv@dividend+2,c
  9753  00D4F4  0E02               	movlw	2
  9754  00D4F6  6E04               	movwf	___lldiv@dividend+3,c
  9755  00D4F8  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  9756  00D4FC  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  9757  00D500  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  9758  00D504  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  9759  00D508  0E02               	movlw	2
  9760  00D50A                     u6295:
  9761  00D50A  90D8               	bcf	status,0,c
  9762  00D50C  3612               	rlcf	??_I2C_Master_Init,f,c
  9763  00D50E  3613               	rlcf	??_I2C_Master_Init+1,f,c
  9764  00D510  3614               	rlcf	??_I2C_Master_Init+2,f,c
  9765  00D512  3615               	rlcf	??_I2C_Master_Init+3,f,c
  9766  00D514  2EE8               	decfsz	wreg,f,c
  9767  00D516  D7F9               	goto	u6295
  9768  00D518  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  9769  00D51C  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9770  00D520  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9771  00D524  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9772  00D528  ECD8  F06A         	call	___lldiv	;wreg free
  9773  00D52C  0401               	decf	?___lldiv,w,c
  9774  00D52E  6EC8               	movwf	4040,c	;volatile
  9775  00D530  0012               	return		;funcret
  9776  00D532                     __end_of_I2C_Master_Init:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           prodh	equ	0xFF4
  9783                           prodl	equ	0xFF3
  9784                           intcon	equ	0xFF2
  9785                           postinc0	equ	0xFEE
  9786                           wreg	equ	0xFE8
  9787                           plusw1	equ	0xFE3
  9788                           indf2	equ	0xFDF
  9789                           postinc2	equ	0xFDE
  9790                           postdec2	equ	0xFDD
  9791                           plusw2	equ	0xFDB
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function ___lldiv *****************
  9797 ;; Defined at:
  9798 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;  dividend        4    0[COMRAM] unsigned long 
  9801 ;;  divisor         4    4[COMRAM] unsigned long 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  quotient        4    8[COMRAM] unsigned long 
  9804 ;;  counter         1   12[COMRAM] unsigned char 
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  4    0[COMRAM] unsigned long 
  9807 ;; Registers used:
  9808 ;;		wreg, status,2, status,0
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9814 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;Total ram usage:       13 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; This function calls:
  9821 ;;		Nothing
  9822 ;; This function is called by:
  9823 ;;		_I2C_Master_Init
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text27
  9828  00D5B0                     __ptext27:
  9829                           	opt stack 0
  9830  00D5B0                     ___lldiv:
  9831                           	opt stack 28
  9832                           
  9833                           ;incstack = 0
  9834  00D5B0  0E00               	movlw	0
  9835  00D5B2  6E09               	movwf	___lldiv@quotient,c
  9836  00D5B4  0E00               	movlw	0
  9837  00D5B6  6E0A               	movwf	___lldiv@quotient+1,c
  9838  00D5B8  0E00               	movlw	0
  9839  00D5BA  6E0B               	movwf	___lldiv@quotient+2,c
  9840  00D5BC  0E00               	movlw	0
  9841  00D5BE  6E0C               	movwf	___lldiv@quotient+3,c
  9842  00D5C0  5005               	movf	___lldiv@divisor,w,c
  9843  00D5C2  1006               	iorwf	___lldiv@divisor+1,w,c
  9844  00D5C4  1007               	iorwf	___lldiv@divisor+2,w,c
  9845  00D5C6  1008               	iorwf	___lldiv@divisor+3,w,c
  9846  00D5C8  B4D8               	btfsc	status,2,c
  9847  00D5CA  D02A               	goto	l1094
  9848  00D5CC  0E01               	movlw	1
  9849  00D5CE  6E0D               	movwf	___lldiv@counter,c
  9850  00D5D0  D006               	goto	l1089
  9851  00D5D2  90D8               	bcf	status,0,c
  9852  00D5D4  3605               	rlcf	___lldiv@divisor,f,c
  9853  00D5D6  3606               	rlcf	___lldiv@divisor+1,f,c
  9854  00D5D8  3607               	rlcf	___lldiv@divisor+2,f,c
  9855  00D5DA  3608               	rlcf	___lldiv@divisor+3,f,c
  9856  00D5DC  2A0D               	incf	___lldiv@counter,f,c
  9857  00D5DE                     l1089:
  9858  00D5DE  AE08               	btfss	___lldiv@divisor+3,7,c
  9859  00D5E0  D7F8               	goto	l1090
  9860  00D5E2                     u4820:
  9861  00D5E2  90D8               	bcf	status,0,c
  9862  00D5E4  3609               	rlcf	___lldiv@quotient,f,c
  9863  00D5E6  360A               	rlcf	___lldiv@quotient+1,f,c
  9864  00D5E8  360B               	rlcf	___lldiv@quotient+2,f,c
  9865  00D5EA  360C               	rlcf	___lldiv@quotient+3,f,c
  9866  00D5EC  5005               	movf	___lldiv@divisor,w,c
  9867  00D5EE  5C01               	subwf	___lldiv@dividend,w,c
  9868  00D5F0  5006               	movf	___lldiv@divisor+1,w,c
  9869  00D5F2  5802               	subwfb	___lldiv@dividend+1,w,c
  9870  00D5F4  5007               	movf	___lldiv@divisor+2,w,c
  9871  00D5F6  5803               	subwfb	___lldiv@dividend+2,w,c
  9872  00D5F8  5008               	movf	___lldiv@divisor+3,w,c
  9873  00D5FA  5804               	subwfb	___lldiv@dividend+3,w,c
  9874  00D5FC  A0D8               	btfss	status,0,c
  9875  00D5FE  D009               	goto	l1093
  9876  00D600  5005               	movf	___lldiv@divisor,w,c
  9877  00D602  5E01               	subwf	___lldiv@dividend,f,c
  9878  00D604  5006               	movf	___lldiv@divisor+1,w,c
  9879  00D606  5A02               	subwfb	___lldiv@dividend+1,f,c
  9880  00D608  5007               	movf	___lldiv@divisor+2,w,c
  9881  00D60A  5A03               	subwfb	___lldiv@dividend+2,f,c
  9882  00D60C  5008               	movf	___lldiv@divisor+3,w,c
  9883  00D60E  5A04               	subwfb	___lldiv@dividend+3,f,c
  9884  00D610  8009               	bsf	___lldiv@quotient,0,c
  9885  00D612                     l1093:
  9886  00D612  90D8               	bcf	status,0,c
  9887  00D614  3208               	rrcf	___lldiv@divisor+3,f,c
  9888  00D616  3207               	rrcf	___lldiv@divisor+2,f,c
  9889  00D618  3206               	rrcf	___lldiv@divisor+1,f,c
  9890  00D61A  3205               	rrcf	___lldiv@divisor,f,c
  9891  00D61C  2E0D               	decfsz	___lldiv@counter,f,c
  9892  00D61E  D7E1               	goto	u4820
  9893  00D620                     l1094:
  9894  00D620  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9895  00D624  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9896  00D628  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9897  00D62C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9898  00D630  0012               	return		;funcret
  9899  00D632                     __end_of___lldiv:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           plusw1	equ	0xFE3
  9911                           indf2	equ	0xFDF
  9912                           postinc2	equ	0xFDE
  9913                           postdec2	equ	0xFDD
  9914                           plusw2	equ	0xFDB
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _initLCD *****************
  9920 ;; Defined at:
  9921 ;;		line 32 in file "standbyMode.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      void 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;Total ram usage:        1 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    2
  9942 ;; This function calls:
  9943 ;;		_lcdInst
  9944 ;; This function is called by:
  9945 ;;		_main
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text28
  9950  00D3E6                     __ptext28:
  9951                           	opt stack 0
  9952  00D3E6                     _initLCD:
  9953                           	opt stack 28
  9954                           
  9955                           ;standbyMode.c: 40: _delay((unsigned long)((15)*(40000000/4000.0)));
  9956                           
  9957                           ;incstack = 0
  9958  00D3E6  0EC3               	movlw	195
  9959  00D3E8  6E04               	movwf	??_initLCD& (0+255),c
  9960  00D3EA  0ECD               	movlw	205
  9961  00D3EC                     u7467:
  9962  00D3EC  2EE8               	decfsz	wreg,f,c
  9963  00D3EE  D7FE               	bra	u7467
  9964  00D3F0  2E04               	decfsz	??_initLCD& (0+255),f,c
  9965  00D3F2  D7FC               	bra	u7467
  9966  00D3F4  F000               	nop	
  9967                           
  9968                           ;standbyMode.c: 41: lcdInst(0b00110011);
  9969  00D3F6  0E33               	movlw	51
  9970  00D3F8  EC2B  F069         	call	_lcdInst
  9971                           
  9972                           ;standbyMode.c: 42: lcdInst(0b00110010);
  9973  00D3FC  0E32               	movlw	50
  9974  00D3FE  EC2B  F069         	call	_lcdInst
  9975                           
  9976                           ;standbyMode.c: 43: lcdInst(0b00101000);
  9977  00D402  0E28               	movlw	40
  9978  00D404  EC2B  F069         	call	_lcdInst
  9979                           
  9980                           ;standbyMode.c: 44: lcdInst(0b00001111);
  9981  00D408  0E0F               	movlw	15
  9982  00D40A  EC2B  F069         	call	_lcdInst
  9983                           
  9984                           ;standbyMode.c: 45: lcdInst(0b00000110);
  9985  00D40E  0E06               	movlw	6
  9986  00D410  EC2B  F069         	call	_lcdInst
  9987                           
  9988                           ;standbyMode.c: 46: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9989  00D414  0E01               	movlw	1
  9990  00D416  EC2B  F069         	call	_lcdInst
  9991  00D41A  0EC3               	movlw	195
  9992  00D41C  6E04               	movwf	??_initLCD& (0+255),c
  9993  00D41E  0ECD               	movlw	205
  9994  00D420                     u7477:
  9995  00D420  2EE8               	decfsz	wreg,f,c
  9996  00D422  D7FE               	bra	u7477
  9997  00D424  2E04               	decfsz	??_initLCD& (0+255),f,c
  9998  00D426  D7FC               	bra	u7477
  9999  00D428  F000               	nop	
 10000                           
 10001                           ;standbyMode.c: 49: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 10002  00D42A  0E0F               	movlw	15
 10003  00D42C  EC2B  F069         	call	_lcdInst
 10004  00D430  0012               	return		;funcret
 10005  00D432                     __end_of_initLCD:
 10006                           	opt stack 0
 10007                           tblptru	equ	0xFF8
 10008                           tblptrh	equ	0xFF7
 10009                           tblptrl	equ	0xFF6
 10010                           tablat	equ	0xFF5
 10011                           prodh	equ	0xFF4
 10012                           prodl	equ	0xFF3
 10013                           intcon	equ	0xFF2
 10014                           postinc0	equ	0xFEE
 10015                           wreg	equ	0xFE8
 10016                           plusw1	equ	0xFE3
 10017                           indf2	equ	0xFDF
 10018                           postinc2	equ	0xFDE
 10019                           postdec2	equ	0xFDD
 10020                           plusw2	equ	0xFDB
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function _lcdInst *****************
 10026 ;; Defined at:
 10027 ;;		line 18 in file "standbyMode.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  data            1    wreg     unsigned char 
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;  data            1    2[COMRAM] unsigned char 
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  1    wreg      void 
 10034 ;; Registers used:
 10035 ;;		wreg, status,2, status,0, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;Total ram usage:        1 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    1
 10048 ;; This function calls:
 10049 ;;		_lcdNibble
 10050 ;; This function is called by:
 10051 ;;		_initLCD
 10052 ;;		_viewLogs
 10053 ;;		_displayLogs
 10054 ;;		_food_press
 10055 ;;		_diet_press
 10056 ;;		_which_drawer
 10057 ;;		_standbyMode
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           	psect	text29
 10062  00D256                     __ptext29:
 10063                           	opt stack 0
 10064  00D256                     _lcdInst:
 10065                           	opt stack 27
 10066                           
 10067                           ;incstack = 0
 10068                           ;lcdInst@data stored from wreg
 10069  00D256  6E03               	movwf	lcdInst@data,c
 10070                           
 10071                           ;standbyMode.c: 26: LATDbits.LATD2 = 0;
 10072  00D258  948C               	bcf	3980,2,c	;volatile
 10073                           
 10074                           ;standbyMode.c: 27: lcdNibble(data);
 10075  00D25A  5003               	movf	lcdInst@data,w,c
 10076  00D25C  EC99  F06A         	call	_lcdNibble
 10077                           
 10078                           ;standbyMode.c: 28: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10079  00D260  0EC8               	movlw	200
 10080  00D262                     u7487:
 10081  00D262  D000               	nop2	
 10082  00D264  2EE8               	decfsz	wreg,f,c
 10083  00D266  D7FD               	bra	u7487
 10084  00D268  0012               	return		;funcret
 10085  00D26A                     __end_of_lcdInst:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           tblptrh	equ	0xFF7
 10089                           tblptrl	equ	0xFF6
 10090                           tablat	equ	0xFF5
 10091                           prodh	equ	0xFF4
 10092                           prodl	equ	0xFF3
 10093                           intcon	equ	0xFF2
 10094                           postinc0	equ	0xFEE
 10095                           wreg	equ	0xFE8
 10096                           plusw1	equ	0xFE3
 10097                           indf2	equ	0xFDF
 10098                           postinc2	equ	0xFDE
 10099                           postdec2	equ	0xFDD
 10100                           plusw2	equ	0xFDB
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _lcdNibble *****************
 10106 ;; Defined at:
 10107 ;;		line 53 in file "standbyMode.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  data            1    wreg     unsigned char 
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  data            1    1[COMRAM] unsigned char 
 10112 ;;  temp            1    0[COMRAM] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      void 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, status,0
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;Total ram usage:        2 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_lcdInst
 10132 ;;		_putch
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           	psect	text30
 10137  00D532                     __ptext30:
 10138                           	opt stack 0
 10139  00D532                     _lcdNibble:
 10140                           	opt stack 27
 10141                           
 10142                           ;incstack = 0
 10143                           ;lcdNibble@data stored from wreg
 10144  00D532  6E02               	movwf	lcdNibble@data,c
 10145                           
 10146                           ;standbyMode.c: 61: char temp = (unsigned char) (data & 0xF0);
 10147  00D534  5002               	movf	lcdNibble@data,w,c
 10148  00D536  0BF0               	andlw	240
 10149  00D538  6E01               	movwf	lcdNibble@temp,c
 10150                           
 10151                           ;standbyMode.c: 62: LATD = (unsigned char) (LATD & 0x0F);
 10152  00D53A  508C               	movf	3980,w,c	;volatile
 10153  00D53C  0B0F               	andlw	15
 10154  00D53E  6E8C               	movwf	3980,c	;volatile
 10155                           
 10156                           ;standbyMode.c: 63: LATD = (unsigned char) (temp | LATD);
 10157  00D540  5001               	movf	lcdNibble@temp,w,c
 10158  00D542  108C               	iorwf	3980,w,c	;volatile
 10159  00D544  6E8C               	movwf	3980,c	;volatile
 10160                           
 10161                           ;standbyMode.c: 65: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10162  00D546  0E00               	movlw	0
 10163  00D548  BEF2               	btfsc	intcon,7,c	;volatile
 10164  00D54A  0E01               	movlw	1
 10165  00D54C  6E79               	movwf	standbyMode@LCDinterruptState,c
 10166  00D54E  9EF2               	bcf	intcon,7,c	;volatile
 10167  00D550  868C               	bsf	3980,3,c	;volatile
 10168  00D552  0E53               	movlw	83
 10169  00D554                     u7497:
 10170  00D554  2EE8               	decfsz	wreg,f,c
 10171  00D556  D7FE               	bra	u7497
 10172  00D558  F000               	nop	
 10173  00D55A  968C               	bcf	3980,3,c	;volatile
 10174  00D55C  0EC8               	movlw	200
 10175  00D55E                     u7507:
 10176  00D55E  D000               	nop2	
 10177  00D560  2EE8               	decfsz	wreg,f,c
 10178  00D562  D7FD               	bra	u7507
 10179  00D564  B079               	btfsc	standbyMode@LCDinterruptState,0,c
 10180  00D566  D002               	bra	u3375
 10181  00D568  9EF2               	bcf	intcon,7,c	;volatile
 10182  00D56A  D001               	bra	u3376
 10183  00D56C                     u3375:
 10184  00D56C  8EF2               	bsf	intcon,7,c	;volatile
 10185  00D56E                     u3376:
 10186                           
 10187                           ;standbyMode.c: 68: data = (unsigned char) (data << 4);
 10188  00D56E  3802               	swapf	lcdNibble@data,w,c
 10189  00D570  0BF0               	andlw	240
 10190  00D572  6E02               	movwf	lcdNibble@data,c
 10191                           
 10192                           ;standbyMode.c: 69: temp = (unsigned char) (data & 0xF0);
 10193  00D574  5002               	movf	lcdNibble@data,w,c
 10194  00D576  0BF0               	andlw	240
 10195  00D578  6E01               	movwf	lcdNibble@temp,c
 10196                           
 10197                           ;standbyMode.c: 70: LATD = (unsigned char) (LATD & 0x0F);
 10198  00D57A  508C               	movf	3980,w,c	;volatile
 10199  00D57C  0B0F               	andlw	15
 10200  00D57E  6E8C               	movwf	3980,c	;volatile
 10201                           
 10202                           ;standbyMode.c: 71: LATD = (unsigned char) (temp | LATD);
 10203  00D580  5001               	movf	lcdNibble@temp,w,c
 10204  00D582  108C               	iorwf	3980,w,c	;volatile
 10205  00D584  6E8C               	movwf	3980,c	;volatile
 10206                           
 10207                           ;standbyMode.c: 73: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10208  00D586  0E00               	movlw	0
 10209  00D588  BEF2               	btfsc	intcon,7,c	;volatile
 10210  00D58A  0E01               	movlw	1
 10211  00D58C  6E79               	movwf	standbyMode@LCDinterruptState,c
 10212  00D58E  9EF2               	bcf	intcon,7,c	;volatile
 10213  00D590  868C               	bsf	3980,3,c	;volatile
 10214  00D592  0E53               	movlw	83
 10215  00D594                     u7517:
 10216  00D594  2EE8               	decfsz	wreg,f,c
 10217  00D596  D7FE               	bra	u7517
 10218  00D598  F000               	nop	
 10219  00D59A  968C               	bcf	3980,3,c	;volatile
 10220  00D59C  0EC8               	movlw	200
 10221  00D59E                     u7527:
 10222  00D59E  D000               	nop2	
 10223  00D5A0  2EE8               	decfsz	wreg,f,c
 10224  00D5A2  D7FD               	bra	u7527
 10225  00D5A4  B079               	btfsc	standbyMode@LCDinterruptState,0,c
 10226  00D5A6  D002               	bra	u3385
 10227  00D5A8  9EF2               	bcf	intcon,7,c	;volatile
 10228  00D5AA  D001               	bra	u3386
 10229  00D5AC                     u3385:
 10230  00D5AC  8EF2               	bsf	intcon,7,c	;volatile
 10231  00D5AE                     u3386:
 10232  00D5AE  0012               	return		;funcret
 10233  00D5B0                     __end_of_lcdNibble:
 10234                           	opt stack 0
 10235                           tblptru	equ	0xFF8
 10236                           tblptrh	equ	0xFF7
 10237                           tblptrl	equ	0xFF6
 10238                           tablat	equ	0xFF5
 10239                           prodh	equ	0xFF4
 10240                           prodl	equ	0xFF3
 10241                           intcon	equ	0xFF2
 10242                           postinc0	equ	0xFEE
 10243                           wreg	equ	0xFE8
 10244                           plusw1	equ	0xFE3
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           plusw2	equ	0xFDB
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           postinc0	equ	0xFEE
 10260                           wreg	equ	0xFE8
 10261                           plusw1	equ	0xFE3
 10262                           indf2	equ	0xFDF
 10263                           postinc2	equ	0xFDE
 10264                           postdec2	equ	0xFDD
 10265                           plusw2	equ	0xFDB
 10266                           fsr2h	equ	0xFDA
 10267                           fsr2l	equ	0xFD9
 10268                           status	equ	0xFD8
 10269                           
 10270                           	psect	rparam
 10271  0000                     tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           postinc0	equ	0xFEE
 10279                           wreg	equ	0xFE8
 10280                           plusw1	equ	0xFE3
 10281                           indf2	equ	0xFDF
 10282                           postinc2	equ	0xFDE
 10283                           postdec2	equ	0xFDD
 10284                           plusw2	equ	0xFDB
 10285                           fsr2h	equ	0xFDA
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8


Data Sizes:
    Strings     666
    Constant    65
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     122
    BANK0           128      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_69(CODE[11]), STR_68(CODE[13]), STR_67(CODE[11]), STR_66(CODE[13]), 
		 -> STR_65(CODE[11]), STR_64(CODE[8]), STR_63(CODE[15]), STR_62(CODE[16]), 
		 -> STR_61(CODE[10]), STR_60(CODE[8]), STR_59(CODE[15]), STR_58(CODE[16]), 
		 -> STR_57(CODE[10]), STR_56(CODE[16]), STR_55(CODE[16]), STR_54(CODE[17]), 
		 -> STR_53(CODE[13]), STR_52(CODE[17]), STR_51(CODE[14]), STR_50(CODE[11]), 
		 -> STR_49(CODE[11]), STR_48(CODE[15]), STR_47(CODE[15]), STR_46(CODE[10]), 
		 -> STR_45(CODE[13]), STR_44(CODE[16]), STR_43(CODE[16]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[8]), STR_39(CODE[15]), STR_38(CODE[15]), 
		 -> STR_37(CODE[11]), STR_36(CODE[14]), STR_35(CODE[16]), STR_34(CODE[16]), 
		 -> STR_33(CODE[11]), STR_32(CODE[14]), STR_31(CODE[16]), STR_30(CODE[16]), 
		 -> STR_29(CODE[16]), STR_28(CODE[13]), STR_27(CODE[13]), STR_26(CODE[15]), 
		 -> STR_25(CODE[15]), STR_24(CODE[17]), STR_23(CODE[18]), STR_22(CODE[15]), 
		 -> STR_21(CODE[11]), STR_20(CODE[7]), STR_19(CODE[3]), STR_18(CODE[16]), 
		 -> STR_17(CODE[8]), STR_16(CODE[16]), STR_15(CODE[15]), STR_14(CODE[6]), 
		 -> STR_13(CODE[14]), STR_12(CODE[17]), STR_11(CODE[7]), STR_10(CODE[9]), 
		 -> STR_9(CODE[17]), STR_8(CODE[11]), STR_7(CODE[17]), STR_6(CODE[14]), 
		 -> STR_5(CODE[17]), STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[11]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _initEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   74470
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         31    31      0   74335
                                             81 COMRAM    31    31      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                         _diet_press
                         _food_press
                         _initEEPROM
                            _lcdInst
                             _printf
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   10437
                                             36 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   23119
                                             69 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         33    31      2   13070
                                             36 COMRAM    33    31      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1623
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEEPROM                                           2     2      0    1329
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1260
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   12763
                                             36 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   11790
                                             36 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    23     10    9204
                                             12 COMRAM    24    14     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1679
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _initEEPROM
       _writeEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      18       5       18.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      7A       1       96.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      92      34        0.0%
DATA                 0      0      92       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar  2 17:46:37 2018

                 _standbyMode F408        __end_of_verifyKeypress D4D6                  ?_displayLogs 0025  
                 __CFG_CPD$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l210 F156                           l202 F07E  
                         l212 F198                           l300 D6F4                           l221 F2D6  
                         l150 F3FE                           l302 D6FC                           l230 D4A0  
                         l223 F32A                           l215 F1DA                           l207 F0D4  
                         l151 EC0A                           l231 D4B6                           l208 F114  
                         l401 EAE6                           l145 F380                           l217 F22E  
                         l161 ECC4                           l321 D8F6                           l241 DD9A  
                         l162 ECF2                           l146 EBE0                           l314 D70C  
                         l403 EB16                           l219 F282                           l171 ED74  
                         l155 EC34                           l331 D920                           l340 D9FA  
                         l260 DF3C                           l244 DE26                           l236 DCF4  
                         l412 D814                           l420 D7D0                           l500 F95C  
                         l405 EB46                           l181 EE20                           l309 D704  
                         l333 D986                           l229 D4BA                           l421 D7D8  
                         l413 D7A0                           l350 E71A                           l166 ED1C  
                         l326 D902                           l270 E4A2                           l422 D7E0  
                         l414 D876                           l407 EB78                           l351 E71A  
                         l191 EF36                           l167 ED4A                           l159 EC70  
                         l343 DA6A                           l255 DE96                           l239 DDA0  
                         l423 D7E8                           l415 D7A8                           l431 DABA  
                         l511 FA48                           l408 EBCC                           l360 E744  
                         l176 EDCA                           l280 E5D6                           l272 E4E6  
                         l256 DEA2                           l424 D7F0                           l416 D7B0  
                         l504 F9A4                           l329 D9E8                           l265 E39A  
                         l249 DE32                           l425 D7F8                           l417 D7B8  
                         l441 DAE4                           l505 F9DC                           l362 E7A6  
                         l194 EF78                           l186 EE72                           l274 E52A  
                         l426 D800                           l418 D7C0                           l530 FC7A  
                         l522 FBBA                           l371 E842                           l355 E726  
                         l195 EFB8                           l187 EEB2                           l283 E614  
                         l275 E56E                           l427 D80A                           l419 D7C8  
                         l443 DC04                           l523 FBF2                           l515 FAAE  
                         l507 FA04                           l268 E432                           l436 DAC6  
                         l516 FB7C                           l381 E918                           l373 E86C  
                         l365 E7E8                           l197 EFFA                           l189 EEF4  
                         l525 FCCE                           l517 FB20                           l702 E0F2  
                         l358 E832                           l294 D714                           l286 E698  
                         l462 DC5A                           l446 DBC4                           l518 FB72  
                         l703 E092                           l391 E9FC                           l383 E944  
                         l375 E896                           l199 F03C                           l295 D6EA  
                         l551 D364                           l439 DC46                           l447 DB98  
                         l712 E11C                           l296 D794                           l480 FA0A  
                         l713 E140                           l393 EA2A                           l385 E972  
                         l377 E8C0                           l289 E6A4                           l457 DC00  
                         l473 F6F2                           l730 E1EC                           l714 E148  
                         l482 F7B2                           l715 E174                           l707 E102  
                         l395 EA58                           l387 E9A0                           l379 E8EC  
                         l491 F9FC                           l724 E1A2                           l716 E15E  
                         l708 E0C2                           l476 F6FE                           l468 F488  
                         l725 E248                           l397 EA86                           l389 E9CE  
                         l573 D6DE                           l493 F83A                           l478 FC12  
                         l486 F7EC                           l727 E232                           l399 EAB6  
                         l479 F74A                           l728 E1A8                           l680 DF68  
                         l729 E242                           l681 DF78                           l497 F898  
                         l489 F7F8                           l498 F966                           l691 E01C  
                         l683 DF8C                           l499 F90A                           l684 DF86  
                         l696 E04A                           l697 E018                           l689 DFBA  
                         l699 E078                  __CFG_CPB$OFF 000000                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1142 D450  
                        l1143 D448                          l1063 D2A8                          l1152 D3BA  
                        l1153 D3B2                          l1090 D5D2                          l1146 D470  
                        l1147 D47A                          l1156 D3D2                          l1093 D612  
                        l1157 D3DC                          l1094 D620                          l1089 D5DE  
                        l4020 D344                          l3412 D280                          l5042 FAB4  
                        l5026 FA58                          l5038 FAAE                          l4344 E7E2  
                        l3474 E096                          l3812 D4B6                          l4710 D6B2  
                        l3488 E0C6                          l4708 D6AA                          l4832 F584  
                        l4674 D32C                          l4842 F5AA                          l4932 F842  
                        l4686 D64A                          l4696 D676                          l4944 F898  
                        l4698 D67E                          l4948 F89E                          _ADON 007E10  
                        STR_1 FFE1                          STR_2 FF88                          STR_3 FEAA  
                        STR_4 FF88                          STR_5 FDCB                          STR_6 FF20  
                        STR_7 FDDC                          STR_8 FF88                          STR_9 FDA9  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        _LATD 000F8C                          _LATE 000F8D                          u4010 EE6A  
                        u3420 D454                          u5030 D934                          u3450 D3BE  
                        u3375 D56C                          u3376 D56E                          u5160 E7C2  
                        u3720 EC02                          u6040 DB30                          u3385 D5AC  
                        u5081 E70A                          u3386 D5AE                          u4290 F0CC  
                        u6130 DB76                          u3660 E17C                          u3740 EC2C  
                        u3670 E190                          u7007 FC6C                          u6240 D676  
                        u6305 D2EE                          u7017 FC86                          u6306 D2F0  
                        u3690 E250                          u3930 EDC2                          u3770 EC68  
                        u6170 DBDA                          u6410 F804                          u6330 F5AA  
                        u7107 DD40                          u7027 FCBE                          u4820 D5E2  
                        u6260 D6AA                          u6180 DBFC                          u7117 DD5A  
                        u7037 FCDA                          u7207 DF2E                          u7127 DD8C  
                        u7047 FD12                          u4920 DE52                          u7217 E342  
                        u7137 DDAC                          u7057 DA86                          u3970 EE18  
                        u6610 FC1A                          u6370 F752                          u7307 E57E  
                        u7227 E38C                          u7147 DDE4                          u7067 DC18  
                        u6460 F89E                          u6380 F75E                          u7317 E5C8  
                        u7237 E3E2                          u7157 DDFE                          u7077 DCAA  
                        u4950 DF40                          u6295 D50A                          u7407 DA5C  
                        u7327 E5E6                          u7247 E424                          u7167 DEAC  
                        u7087 DCDC                          u6560 FAB4                          u7417 E6BC  
                        u4961 D8CA                          u7337 E606                          u7257 E442  
                        u7177 DEC4                          u7097 DD0E                          u7507 D55E  
                        u7427 E758                          u7347 E624                          u7267 E494  
                        u7187 DEE4                          u7517 D594                          u7437 EB84  
                        u7357 E656                          u7277 E4D8                          u7197 DEFC  
                        u7527 D59E                          u7447 EBB6                          u7367 E670  
                        u7287 E51C                          u6807 F664                          u6727 F420  
                        u7457 D276                          u7377 D88C                          u7297 E560  
                        u6817 F67E                          u6737 F446                          u7467 D3EC  
                        u7387 D99A                          u6907 F916                          u6827 F6B0  
                        u6747 F460                          u7477 D420                          u7397 DA2A  
                        u6917 F94E                          u6837 F6CA                          u6757 F498  
                        u7487 D262                          u6927 F972                          u6847 F76A  
                        u6767 F4D0                          u7497 D554                          u6937 FA16  
                        u6857 F7A2                          u6777 F5C2                          u6947 FAD0  
                        u6867 F7BE                          u6787 F5F4                          u6957 FB08  
                        u6877 F810                          u6797 F60E                          u6967 FB2C  
                        u6887 F8BA                          u6977 FB64                          u6897 F8F2  
                        u6987 FB88                          u6997 FC46         __end_of_decode_drawer D880  
           viewLogs@logNumber 0050                          _main D36C                          _keys FD23  
             food_press@F3115 0071                          fsr2h 000FDA                          indf2 000FDF  
                        fsr2l 000FD9                 get_digits@sum 0001                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
           viewLogs@keypress2 0051           standbyMode@keypress 005F                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   _writeEEPROM D342               diet_press@F3130 0090  
             ?_verifyKeypress 0001              __end_of_LCD_LEFT FD5F           standbyMode@whichKey 005D  
             food_press@count 0031               food_press@tally 002B             _drawerInformation 0080  
       I2C_Master_Read@ackBit 0002              ?_I2C_Master_Init 000E              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001            writeEEPROM@address 0002  
                       ?_main 0001                         _EEADR 000FA9                         STR_10 FFC8  
                       STR_11 FFF1                         STR_20 FEC1                         STR_12 FDCB  
                       STR_13 FF20                         STR_21 FEBD                         STR_14 FFF8  
                       STR_22 FEB9                         STR_30 FE0D                         STR_31 FE0D  
                       STR_15 FEC8                         STR_23 FD64                         STR_40 FFE9  
                       STR_32 FF04                         STR_16 FE1D                         STR_24 FDBA  
                       STR_41 FDCB                         STR_17 FFD9                         STR_33 FF9E  
                       STR_25 FE9B                         STR_50 FF7D                         STR_26 FE7D  
                       STR_34 FE3D                         STR_18 FE2D                         STR_42 FD98  
                       STR_35 FE3D                         STR_19 FEC5                         STR_27 FF49  
                       STR_51 FF2E                         STR_43 FE5D                         STR_52 FD98  
                       STR_60 FFD1                         STR_28 FF63                         STR_36 FF12  
                       STR_44 FDED                         STR_37 FF9E                         STR_61 FFBE  
                       STR_45 FF70                         STR_53 FF56                         STR_29 FE6D  
                       STR_62 FDFD                         STR_46 FFB4                         STR_38 FE8C  
                       STR_54 FD87                         STR_70 FD76                         STR_39 FE8C  
                       STR_63 FEF5                         STR_47 FED7                         STR_55 FE4D  
                       STR_64 FFD1                         STR_56 FE6D                         STR_48 FEE6  
                       STR_57 FFBE                         STR_49 FFA9                         STR_65 FF93  
                       STR_66 FF3C                         STR_58 FDFD                         STR_67 FF93  
                       STR_59 FEF5                         STR_68 FF3C                         STR_69 FF93  
             __end_of___lldiv D632             viewLogs@returnVal 004C               __end_of___lwdiv D484  
             __end_of___lwmod D3E6                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
             diet_press@count 002F               __end_of_lcdInst D26A                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                   initEEPROM@i 0003                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD D432  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers FD4F                  displayLogs@n 0044  
             __end_of_isdigit D2B0                         _input FD34                         _putch D26A  
                       tablat 000FF5             _LCDinterruptState 007A                         plusw1 000FE3  
                       plusw2 000FDB                         status 000FD8   I2C_Master_Read@receivedByte 0003  
        standbyMode@keypress1 0060                __CFG_PBADEN$ON 000000               standbyMode@diet 006B  
             standbyMode@food 0065               standbyMode@time 0054               standbyMode@zero 0063  
             __initialization D2B0                  __end_of_main D3A4                  __end_of_keys FD34  
                standbyMode@i 006D                  standbyMode@x 0067                __CFG_OSC$HSPLL 000000  
           __end_of_LCD_RIGHT FD60              food_press@drawer 0027                        ??_main 0071  
               __activetblptr 000002           food_press@backCheck 002D             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0002                  ?_shiftEEPROM 0001            ??_I2C_Master_Start 0002  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0004  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _EEDATA 000FA8  
                      _EECON2 000FA7                        ?_putch 0001                        _SSPADD 000FC8  
                      _SSPBUF 000FC9              diet_press@drawer 0025                __CFG_XINST$OFF 000000  
                      ___wmul D2F6                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 D2B6  
                      clear_1 D2C2                     ??_lcdInst 0003                        _printf DF5E  
        __size_of_displayLogs 0446           food_press@foodTable 0033                     ??_initLCD 0004  
             get_digits@count 0005                     ??_isdigit 0001                  __mediumconst FD22  
            __end_of_viewLogs DF5E                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization D2C8  
        which_drawer@keypress 0030                 ___rparam_used 000001               writeEEPROM@data 0001  
             viewLogs@logView 004E                  ?_standbyMode 0001          __end_of_happynewyear FD5E  
              __pcstackCOMRAM 0001                 __end_of_input FD45                 __end_of_putch D27E  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0025  
           food_press@isValid 002F                       ??_putch 0003                    __pbssBANK0 0080  
                  _check_food EBD6              ??_verifyKeypress 0003                  ?_writeEEPROM 0001  
                     ?___wmul 0001                    _diet_press E6B0                       ?_printf 000D  
                  _get_digits D6E0                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7          __size_of_shiftEEPROM 00AE                    _initEEPROM D31C  
                  _readEEPROM D27E        standbyMode@drawerCount 0069                    _food_press D880  
           __end_of_lcdNibble D5B0                       __Hparam 0000                       __Lparam 0000  
                   ?_viewLogs 0046      displayLogs@operationTime 003A                       ___lldiv D5B0  
             __size_of___wmul 0026                       ___lwdiv D432                       ___lwmod D3A4  
                     __pcinit D2B0                       __ramtop 1000                       _lcdInst D256  
                     __ptext0 D36C                       __ptext1 F408                       __ptext2 DA74  
                     __ptext3 D79E                       __ptext4 DC78                       __ptext5 D484  
                     __ptext6 E26A                       __ptext7 D632                       __ptext8 D27E  
                     __ptext9 D31C        __size_of_decode_drawer 00E2               __size_of_printf 030C  
                     _initLCD D3E6             __end_of_hexpowers FD57                       _dpowers FD45  
       which_drawer@backCheck 002C                       _isdigit D292                displayLogs@day 002D  
                   _LCD_RIGHT FD5F      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0025      __size_of_I2C_Master_Stop 0008  
        end_of_initialization D2C8          displayLogs@keypress3 0039               which_drawer@sum 002A  
       __end_of_LCD_SIZE_HORZ FD62                   ?_check_food 0001         __end_of_LCD_SIZE_VERT FD61  
               __Lmediumconst FD22     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                       printf@c 0024  
                     printf@f 000D                       postdec2 000FDD                    ??_viewLogs 0048  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 091A  
                 ?_diet_press 0025                     _PORTBbits 000F81                 ?_which_drawer 0025  
         diet_press@backCheck 002D                   ?_get_digits 0001                     _TRISCbits 000F94  
            viewLogs@checkLog 004A                  _happynewyear FD57             readEEPROM@address 0001  
           standbyMode@drawer 006F                   ?_initEEPROM 0001                 _decode_drawer D79E  
                 ?_readEEPROM 0001                   printf@width 0022                   ?_food_press 0025  
         diet_press@dietTable 0034                 ??_displayLogs 0027          __size_of_writeEEPROM 002A  
              __end_of___wmul D31C        standbyMode@validDrawer 0061           __size_of_check_food 0832  
              ??_which_drawer 0027                __end_of_printf E26A           start_initialization D2B0  
              ?_decode_drawer 0001           __size_of_diet_press 0526             ??_I2C_Master_Init 0012  
           ??_I2C_Master_Read 0002             ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002  
         __size_of_get_digits 00BE                      ??___wmul 0005      I2C_Master_Init@clockFreq 000E  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 0017           __size_of_initEEPROM 0026  
          food_press@keypress 003B           __size_of_readEEPROM 0014           __end_of_displayLogs E6B0  
         __size_of_food_press 01F4  standbyMode@LCDinterruptState 0079                   __pbssCOMRAM 0071  
                _isdigit$1056 0002           decode_drawer@drawer 0001              _I2C_Master_Start D22A  
            _I2C_Master_Write D23A              ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000  
               __pmediumconst FD22                     _lcdNibble D532                      ?___lldiv 0001  
                    ?___lwdiv 0001                      ?___lwmod 0008             __size_of_viewLogs 02E6  
                    ?_lcdInst 0001                      ?_initLCD 0001                      ?_isdigit 0001  
         check_food@foodInput 0003                 ??_shiftEEPROM 0003                     _hexpowers FD4F  
            ___lwdiv@quotient 0005               ??_decode_drawer 0003                __size_of_putch 0014  
                ??_check_food 0005                      _LCD_LEFT FD5E              displayLogs@month 002B  
              ___wmul@product 0005                      _LATDbits 000F8C          __end_of_which_drawer DC78  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001                  ??_diet_press 0027  
                shiftEEPROM@i 0006                   _displayLogs E26A       __size_of_verifyKeypress 0052  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0001            __end_of_check_food F408  
               lcdNibble@data 0002                    printf@flag 0021                 lcdNibble@temp 0001  
                  printf@prec 001E                  ??_get_digits 0003                _LCD_HORZ_LIMIT FD63  
               diet_press@sum 0031             which_drawer@count 002E                  ??_initEEPROM 0003  
         __end_of_shiftEEPROM D6E0            __end_of_diet_press EBD6                  ??_readEEPROM 0001  
                ??_food_press 0029            diet_press@keypress 0033                    _EECON1bits 000FA6  
                    __Hrparam 0000                 ??_standbyMode 0052                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_get_digits D79E            diet_press@previous 0029  
            __size_of___lldiv 0082         displayLogs@flatPieces 0031              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              __size_of_lcdInst 0014            __end_of_initEEPROM D342  
             _I2C_Master_Init D4D6               _I2C_Master_Read D2D2              __size_of_initLCD 004C  
             _I2C_Master_Wait D244            __end_of_readEEPROM D292               _I2C_Master_Stop D232  
      __end_of_LCD_HORZ_LIMIT FD64              __size_of_isdigit 001E            __end_of_food_press DA74  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 D342  
                    __ptext11 D880                      __ptext20 D432                      __ptext12 D6E0  
                    __ptext21 D23A                      __ptext13 EBD6                      __ptext30 D532  
                    __ptext22 D232                      __ptext14 E6B0                      __ptext23 D22A  
                    __ptext15 DF5E                      __ptext24 D2D2                      __ptext16 D26A  
                    __ptext25 D244                      __ptext17 D292                      __ptext26 D4D6  
                    __ptext18 D2F6                      __ptext27 D5B0                      __ptext19 D3A4  
                    __ptext28 D3E6                      __ptext29 D256                _LCD_VERT_LIMIT FD62  
               __size_of_main 0038               displayLogs@year 0029            displayLogs@minutes 0035  
          displayLogs@seconds 0037                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 003C  
    displayLogs@markedDrawer2 003E      displayLogs@markedDrawer3 0040      displayLogs@markedDrawer4 0042  
                 ??_lcdNibble 0001                      _viewLogs DC78               verifyKeypress@i 0008  
                   printf@idx 001B                     printf@val 001F           __end_of_standbyMode FD22  
 I2C_Master_Write@byteToWrite 0002      decode_drawer@returnValue 0005         displayLogs@longPieces 0033  
            which_drawer@rand 0028                     putch@data 0003      __end_of_I2C_Master_Start D232  
    __end_of_I2C_Master_Write D244                    _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FD63  
                 _shiftEEPROM D632                      isdigit@c 0003         __size_of_which_drawer 0204  
   standbyMode@firstIteration 005B                 _LCD_SIZE_HORZ FD61              ___lwmod@dividend 0008  
               _LCD_SIZE_VERT FD60              ___lldiv@dividend 0001       verifyKeypress@logNumber 0005  
      displayLogs@roundPieces 002F                      printf@ap 001C                   diet_press@i 002B  
     __end_of_I2C_Master_Init D532       __end_of_I2C_Master_Read D2F6       __end_of_I2C_Master_Wait D256  
     __end_of_I2C_Master_Stop D23A                   lcdInst@data 0003               shiftEEPROM@temp 0004  
              _verifyKeypress D484           __end_of_writeEEPROM D36C       verifyKeypress@returnVal 0006  
            ___lldiv@quotient 0009                  _which_drawer DA74               ___lwmod@divisor 000A  
             ___lwmod@counter 000C        verifyKeypress@keypress 0001                   _SSPCON1bits 000FC6  
                 _SSPCON2bits 000FC5         check_food@returnValue 0007  
